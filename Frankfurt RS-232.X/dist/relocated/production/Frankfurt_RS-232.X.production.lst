

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Oct 08 21:25:55 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	text90,global,reloc=2,class=CODE,delta=1
   108                           	psect	text91,global,reloc=2,class=CODE,delta=1
   109                           	psect	text92,global,reloc=2,class=CODE,delta=1
   110                           	psect	text93,global,reloc=2,class=CODE,delta=1
   111                           	psect	text94,global,reloc=2,class=CODE,delta=1
   112                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   113                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   114                           	psect	pa_nodes,global,class=CODE,delta=1
   115  0000                     tblptru	equ	0xFF8
   116                           tblptrh	equ	0xFF7
   117                           tblptrl	equ	0xFF6
   118                           tablat	equ	0xFF5
   119                           prodh	equ	0xFF4
   120                           prodl	equ	0xFF3
   121                           intcon	equ	0xFF2
   122                           indf0	equ	0xFEF
   123                           fsr0h	equ	0xFEA
   124                           fsr0l	equ	0xFE9
   125                           wreg	equ	0xFE8
   126                           indf1	equ	0xFE7
   127                           postinc1	equ	0xFE6
   128                           postdec1	equ	0xFE5
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           plusw2	equ	0xFDB
   135                           fsr2h	equ	0xFDA
   136                           fsr2l	equ	0xFD9
   137                           status	equ	0xFD8
   138                           
   139                           	psect	mediumconst
   140  006E2C                     __pmediumconst:
   141                           	opt stack 0
   142  006E2C                     _octpowers:
   143                           	opt stack 0
   144  006E2C  0001               	dw	1
   145  006E2E  0000               	dw	0
   146  006E30  0008               	dw	8
   147  006E32  0000               	dw	0
   148  006E34  0040               	dw	64
   149  006E36  0000               	dw	0
   150  006E38  0200               	dw	512
   151  006E3A  0000               	dw	0
   152  006E3C  1000               	dw	4096
   153  006E3E  0000               	dw	0
   154  006E40  8000               	dw	32768
   155  006E42  0000               	dw	0
   156  006E44  0000               	dw	0
   157  006E46  0004               	dw	4
   158  006E48  0000               	dw	0
   159  006E4A  0020               	dw	32
   160  006E4C  0000               	dw	0
   161  006E4E  0100               	dw	256
   162  006E50  0000               	dw	0
   163  006E52  0800               	dw	2048
   164  006E54  0000               	dw	0
   165  006E56  4000               	dw	16384
   166  006E58  0000               	dw	0
   167  006E5A  0000               	dw	0
   168  006E5C                     __end_of_octpowers:
   169                           	opt stack 0
   170  006E5C                     _dpowers:
   171                           	opt stack 0
   172  006E5C  0001               	dw	1
   173  006E5E  0000               	dw	0
   174  006E60  000A               	dw	10
   175  006E62  0000               	dw	0
   176  006E64  0064               	dw	100
   177  006E66  0000               	dw	0
   178  006E68  03E8               	dw	1000
   179  006E6A  0000               	dw	0
   180  006E6C  2710               	dw	10000
   181  006E6E  0000               	dw	0
   182  006E70  86A0               	dw	34464
   183  006E72  0001               	dw	1
   184  006E74  4240               	dw	16960
   185  006E76  000F               	dw	15
   186  006E78  9680               	dw	38528
   187  006E7A  0098               	dw	152
   188  006E7C  E100               	dw	57600
   189  006E7E  05F5               	dw	1525
   190  006E80  CA00               	dw	51712
   191  006E82  3B9A               	dw	15258
   192  006E84                     __end_of_dpowers:
   193                           	opt stack 0
   194  006E84                     _hexpowers:
   195                           	opt stack 0
   196  006E84  0001               	dw	1
   197  006E86  0000               	dw	0
   198  006E88  0010               	dw	16
   199  006E8A  0000               	dw	0
   200  006E8C  0100               	dw	256
   201  006E8E  0000               	dw	0
   202  006E90  1000               	dw	4096
   203  006E92  0000               	dw	0
   204  006E94  0000               	dw	0
   205  006E96  0001               	dw	1
   206  006E98  0000               	dw	0
   207  006E9A  0010               	dw	16
   208  006E9C  0000               	dw	0
   209  006E9E  0100               	dw	256
   210  006EA0  0000               	dw	0
   211  006EA2  1000               	dw	4096
   212  006EA4                     __end_of_hexpowers:
   213                           	opt stack 0
   214  0000                     _BRGCON1	set	3952
   215  0000                     _BRGCON2	set	3953
   216  0000                     _BRGCON3	set	3954
   217  0000                     _BSEL0	set	3576
   218  0000                     _CANCON	set	3951
   219  0000                     _CIOCON	set	3955
   220  0000                     _COMSTATbits	set	3956
   221  0000                     _ECANCON	set	3959
   222  0000                     _EEADR	set	4009
   223  0000                     _EECON1bits	set	4006
   224  0000                     _EECON2	set	4007
   225  0000                     _EEDATA	set	4008
   226  0000                     _INTCONbits	set	4082
   227  0000                     _MSEL0	set	3568
   228  0000                     _MSEL1	set	3569
   229  0000                     _MSEL2	set	3570
   230  0000                     _OSCCONbits	set	4051
   231  0000                     _OSCTUNEbits	set	3995
   232  0000                     _PIE1	set	3997
   233  0000                     _PIE1bits	set	3997
   234  0000                     _PIE2bits	set	4000
   235  0000                     _PIR1bits	set	3998
   236  0000                     _PIR2bits	set	4001
   237  0000                     _PORTCbits	set	3970
   238  0000                     _RCREG	set	4014
   239  0000                     _RCSTA	set	4011
   240  0000                     _RCSTAbits	set	4011
   241  0000                     _RXB1CONbits	set	3920
   242  0000                     _RXERRCNT	set	3957
   243  0000                     _RXF0EIDH	set	3842
   244  0000                     _RXF0EIDL	set	3843
   245  0000                     _RXF0SIDH	set	3840
   246  0000                     _RXF0SIDL	set	3841
   247  0000                     _RXF10EIDH	set	3446
   248  0000                     _RXF10EIDL	set	3447
   249  0000                     _RXF10SIDH	set	3444
   250  0000                     _RXF10SIDL	set	3445
   251  0000                     _RXF11EIDH	set	3450
   252  0000                     _RXF11EIDL	set	3451
   253  0000                     _RXF11SIDH	set	3448
   254  0000                     _RXF11SIDL	set	3449
   255  0000                     _RXF12EIDH	set	3458
   256  0000                     _RXF12EIDL	set	3459
   257  0000                     _RXF12SIDH	set	3456
   258  0000                     _RXF12SIDL	set	3457
   259  0000                     _RXF13EIDH	set	3462
   260  0000                     _RXF13EIDL	set	3463
   261  0000                     _RXF13SIDH	set	3460
   262  0000                     _RXF13SIDL	set	3461
   263  0000                     _RXF14EIDH	set	3466
   264  0000                     _RXF14EIDL	set	3467
   265  0000                     _RXF14SIDH	set	3464
   266  0000                     _RXF14SIDL	set	3465
   267  0000                     _RXF15EIDH	set	3474
   268  0000                     _RXF15EIDL	set	3475
   269  0000                     _RXF15SIDH	set	3472
   270  0000                     _RXF15SIDL	set	3473
   271  0000                     _RXF1EIDH	set	3846
   272  0000                     _RXF1EIDL	set	3847
   273  0000                     _RXF1SIDH	set	3844
   274  0000                     _RXF1SIDL	set	3845
   275  0000                     _RXF2EIDH	set	3850
   276  0000                     _RXF2EIDL	set	3851
   277  0000                     _RXF2SIDH	set	3848
   278  0000                     _RXF2SIDL	set	3849
   279  0000                     _RXF3EIDH	set	3854
   280  0000                     _RXF3EIDL	set	3855
   281  0000                     _RXF3SIDH	set	3852
   282  0000                     _RXF3SIDL	set	3853
   283  0000                     _RXF4EIDH	set	3858
   284  0000                     _RXF4EIDL	set	3859
   285  0000                     _RXF4SIDH	set	3856
   286  0000                     _RXF4SIDL	set	3857
   287  0000                     _RXF5EIDH	set	3862
   288  0000                     _RXF5EIDL	set	3863
   289  0000                     _RXF5SIDH	set	3860
   290  0000                     _RXF5SIDL	set	3861
   291  0000                     _RXF6EIDH	set	3426
   292  0000                     _RXF6EIDL	set	3427
   293  0000                     _RXF6SIDH	set	3424
   294  0000                     _RXF6SIDL	set	3425
   295  0000                     _RXF7EIDH	set	3430
   296  0000                     _RXF7EIDL	set	3431
   297  0000                     _RXF7SIDH	set	3428
   298  0000                     _RXF7SIDL	set	3429
   299  0000                     _RXF8EIDH	set	3434
   300  0000                     _RXF8EIDL	set	3435
   301  0000                     _RXF8SIDH	set	3432
   302  0000                     _RXF8SIDL	set	3433
   303  0000                     _RXF9EIDH	set	3442
   304  0000                     _RXF9EIDL	set	3443
   305  0000                     _RXF9SIDH	set	3440
   306  0000                     _RXF9SIDL	set	3441
   307  0000                     _RXFBCON0	set	3552
   308  0000                     _RXFBCON1	set	3553
   309  0000                     _RXFBCON2	set	3554
   310  0000                     _RXFBCON3	set	3555
   311  0000                     _RXFBCON4	set	3556
   312  0000                     _RXFBCON5	set	3557
   313  0000                     _RXFBCON6	set	3558
   314  0000                     _RXFBCON7	set	3559
   315  0000                     _RXFCON0	set	3540
   316  0000                     _RXFCON1	set	3541
   317  0000                     _RXM0EIDH	set	3866
   318  0000                     _RXM0EIDL	set	3867
   319  0000                     _RXM0SIDL	set	3865
   320  0000                     _RXM1EIDH	set	3870
   321  0000                     _RXM1EIDL	set	3871
   322  0000                     _RXM1SIDL	set	3869
   323  0000                     _SPBRG	set	4015
   324  0000                     _SPBRGH	set	4016
   325  0000                     _T0CON	set	4053
   326  0000                     _T0CONbits	set	4053
   327  0000                     _T3CON	set	4017
   328  0000                     _T3CONbits	set	4017
   329  0000                     _TMR0H	set	4055
   330  0000                     _TMR0L	set	4054
   331  0000                     _TMR3H	set	4019
   332  0000                     _TMR3L	set	4018
   333  0000                     _TRISBbits	set	3987
   334  0000                     _TRISCbits	set	3988
   335  0000                     _TXERRCNT	set	3958
   336  0000                     _TXREG	set	4013
   337  0000                     _TXSTA	set	4012
   338  0000                     _TXSTAbits	set	4012
   339  0000                     _B0RXFUL	set	28935
   340  0000                     _B0TXEN	set	28610
   341  0000                     _B1RXFUL	set	29063
   342  0000                     _B1TXEN	set	28611
   343  0000                     _B2RXFUL	set	29191
   344  0000                     _B2TXEN	set	28612
   345  0000                     _B3RXFUL	set	29319
   346  0000                     _B3TXEN	set	28613
   347  0000                     _B4RXFUL	set	29447
   348  0000                     _B4TXEN	set	28614
   349  0000                     _B5RXFUL	set	29575
   350  0000                     _B5TXEN	set	28615
   351  0000                     _ERRIE	set	32029
   352  0000                     _ERRIF	set	32037
   353  0000                     _FIFOEMPTY	set	31655
   354  0000                     _IRXIF	set	32039
   355  0000                     _LATC1	set	31833
   356  0000                     _MDSEL0	set	31678
   357  0000                     _MDSEL1	set	31679
   358  0000                     _PEIE	set	32662
   359  0000                     _RCIE	set	31981
   360  0000                     _RCIF	set	31989
   361  0000                     _RCIP	set	31997
   362  0000                     _RXB0FILHIT0	set	31488
   363  0000                     _RXB0FUL	set	31495
   364  0000                     _RXB0IF	set	32032
   365  0000                     _RXB0OVFL	set	31655
   366  0000                     _RXB1IF	set	32033
   367  0000                     _RXB1OVFL	set	31654
   368  0000                     _RXBnIE	set	32025
   369  0000                     _RXBnIF	set	32033
   370  0000                     _RXM0EXIDM	set	30923
   371  0000                     _RXM1EXIDEN	set	30955
   372  0000                     _B0CON	set	3616
   373  0000                     _B1CON	set	3632
   374  0000                     _B2CON	set	3648
   375  0000                     _B3CON	set	3664
   376  0000                     _B4CON	set	3680
   377  0000                     _B5CON	set	3696
   378  0000                     _RXB0CON	set	3936
   379  0000                     _RXB1CON	set	3920
   380  0000                     _RXM0SIDH	set	3864
   381  0000                     _RXM1SIDH	set	3868
   382  0000                     _TXB0CON	set	3904
   383  0000                     _TXB1CON	set	3888
   384  0000                     _TXB2CON	set	3872
   385  006EA4                     __stringdata:
   386                           	opt stack 0
   387  006EA4                     STR_268:
   388                           
   389                           ; BSR set to: 1
   390  006EA4  20                 	db	32
   391  006EA5  20                 	db	32
   392  006EA6  20                 	db	32
   393  006EA7  20                 	db	32
   394  006EA8  20                 	db	32
   395  006EA9  20                 	db	32
   396  006EAA  20                 	db	32
   397  006EAB  20                 	db	32
   398  006EAC  20                 	db	32
   399  006EAD  46                 	db	70	;'F'
   400  006EAE  6F                 	db	111	;'o'
   401  006EAF  72                 	db	114	;'r'
   402  006EB0  6D                 	db	109	;'m'
   403  006EB1  61                 	db	97	;'a'
   404  006EB2  74                 	db	116	;'t'
   405  006EB3  3A                 	db	58	;':'
   406  006EB4  20                 	db	32
   407  006EB5  66                 	db	102	;'f'
   408  006EB6  69                 	db	105	;'i'
   409  006EB7  6C                 	db	108	;'l'
   410  006EB8  74                 	db	116	;'t'
   411  006EB9  65                 	db	101	;'e'
   412  006EBA  72                 	db	114	;'r'
   413  006EBB  20                 	db	32
   414  006EBC  66                 	db	102	;'f'
   415  006EBD  69                 	db	105	;'i'
   416  006EBE  6C                 	db	108	;'l'
   417  006EBF  74                 	db	116	;'t'
   418  006EC0  65                 	db	101	;'e'
   419  006EC1  72                 	db	114	;'r'
   420  006EC2  6E                 	db	110	;'n'
   421  006EC3  6F                 	db	111	;'o'
   422  006EC4  2C                 	db	44
   423  006EC5  70                 	db	112	;'p'
   424  006EC6  72                 	db	114	;'r'
   425  006EC7  69                 	db	105	;'i'
   426  006EC8  6F                 	db	111	;'o'
   427  006EC9  2C                 	db	44
   428  006ECA  63                 	db	99	;'c'
   429  006ECB  6C                 	db	108	;'l'
   430  006ECC  61                 	db	97	;'a'
   431  006ECD  73                 	db	115	;'s'
   432  006ECE  73                 	db	115	;'s'
   433  006ECF  2C                 	db	44
   434  006ED0  74                 	db	116	;'t'
   435  006ED1  79                 	db	121	;'y'
   436  006ED2  70                 	db	112	;'p'
   437  006ED3  65                 	db	101	;'e'
   438  006ED4  2C                 	db	44
   439  006ED5  6E                 	db	110	;'n'
   440  006ED6  6F                 	db	111	;'o'
   441  006ED7  64                 	db	100	;'d'
   442  006ED8  65                 	db	101	;'e'
   443  006ED9  69                 	db	105	;'i'
   444  006EDA  64                 	db	100	;'d'
   445  006EDB  20                 	db	32
   446  006EDC  20                 	db	32
   447  006EDD  28                 	db	40
   448  006EDE  66                 	db	102	;'f'
   449  006EDF  69                 	db	105	;'i'
   450  006EE0  6C                 	db	108	;'l'
   451  006EE1  74                 	db	116	;'t'
   452  006EE2  65                 	db	101	;'e'
   453  006EE3  72                 	db	114	;'r'
   454  006EE4  6E                 	db	110	;'n'
   455  006EE5  6F                 	db	111	;'o'
   456  006EE6  20                 	db	32
   457  006EE7  3D                 	db	61	;'='
   458  006EE8  20                 	db	32
   459  006EE9  30                 	db	48	;'0'
   460  006EEA  2D                 	db	45
   461  006EEB  31                 	db	49	;'1'
   462  006EEC  35                 	db	53	;'5'
   463  006EED  29                 	db	41
   464  006EEE  2E                 	db	46
   465  006EEF  0D                 	db	13
   466  006EF0  0A                 	db	10
   467  006EF1  00                 	db	0
   468  006EF2                     STR_266:
   469                           
   470                           ; BSR set to: 1
   471  006EF2  49                 	db	73	;'I'
   472  006EF3  4E                 	db	78	;'N'
   473  006EF4  46                 	db	70	;'F'
   474  006EF5  4F                 	db	79	;'O'
   475  006EF6  20                 	db	32
   476  006EF7  2D                 	db	45
   477  006EF8  20                 	db	32
   478  006EF9  47                 	db	71	;'G'
   479  006EFA  65                 	db	101	;'e'
   480  006EFB  74                 	db	116	;'t'
   481  006EFC  20                 	db	32
   482  006EFD  69                 	db	105	;'i'
   483  006EFE  6E                 	db	110	;'n'
   484  006EFF  66                 	db	102	;'f'
   485  006F00  6F                 	db	111	;'o'
   486  006F01  20                 	db	32
   487  006F02  61                 	db	97	;'a'
   488  006F03  62                 	db	98	;'b'
   489  006F04  6F                 	db	111	;'o'
   490  006F05  75                 	db	117	;'u'
   491  006F06  74                 	db	116	;'t'
   492  006F07  20                 	db	32
   493  006F08  61                 	db	97	;'a'
   494  006F09  6E                 	db	110	;'n'
   495  006F0A  20                 	db	32
   496  006F0B  65                 	db	101	;'e'
   497  006F0C  78                 	db	120	;'x'
   498  006F0D  69                 	db	105	;'i'
   499  006F0E  73                 	db	115	;'s'
   500  006F0F  74                 	db	116	;'t'
   501  006F10  65                 	db	101	;'e'
   502  006F11  6E                 	db	110	;'n'
   503  006F12  74                 	db	116	;'t'
   504  006F13  20                 	db	32
   505  006F14  6E                 	db	110	;'n'
   506  006F15  6F                 	db	111	;'o'
   507  006F16  64                 	db	100	;'d'
   508  006F17  65                 	db	101	;'e'
   509  006F18  20                 	db	32
   510  006F19  6F                 	db	111	;'o'
   511  006F1A  6E                 	db	110	;'n'
   512  006F1B  20                 	db	32
   513  006F1C  74                 	db	116	;'t'
   514  006F1D  68                 	db	104	;'h'
   515  006F1E  65                 	db	101	;'e'
   516  006F1F  20                 	db	32
   517  006F20  62                 	db	98	;'b'
   518  006F21  75                 	db	117	;'u'
   519  006F22  73                 	db	115	;'s'
   520  006F23  20                 	db	32
   521  006F24  28                 	db	40
   522  006F25  46                 	db	70	;'F'
   523  006F26  6F                 	db	111	;'o'
   524  006F27  72                 	db	114	;'r'
   525  006F28  6D                 	db	109	;'m'
   526  006F29  61                 	db	97	;'a'
   527  006F2A  74                 	db	116	;'t'
   528  006F2B  3A                 	db	58	;':'
   529  006F2C  20                 	db	32
   530  006F2D  69                 	db	105	;'i'
   531  006F2E  6E                 	db	110	;'n'
   532  006F2F  66                 	db	102	;'f'
   533  006F30  6F                 	db	111	;'o'
   534  006F31  20                 	db	32
   535  006F32  6E                 	db	110	;'n'
   536  006F33  69                 	db	105	;'i'
   537  006F34  63                 	db	99	;'c'
   538  006F35  6B                 	db	107	;'k'
   539  006F36  6E                 	db	110	;'n'
   540  006F37  61                 	db	97	;'a'
   541  006F38  6D                 	db	109	;'m'
   542  006F39  65                 	db	101	;'e'
   543  006F3A  29                 	db	41
   544  006F3B  2E                 	db	46
   545  006F3C  0D                 	db	13
   546  006F3D  0A                 	db	10
   547  006F3E  00                 	db	0
   548  006F3F                     STR_264:
   549                           
   550                           ; BSR set to: 1
   551  006F3F  52                 	db	82	;'R'
   552  006F40  52                 	db	82	;'R'
   553  006F41  45                 	db	69	;'E'
   554  006F42  47                 	db	71	;'G'
   555  006F43  20                 	db	32
   556  006F44  2D                 	db	45
   557  006F45  20                 	db	32
   558  006F46  52                 	db	82	;'R'
   559  006F47  65                 	db	101	;'e'
   560  006F48  61                 	db	97	;'a'
   561  006F49  64                 	db	100	;'d'
   562  006F4A  20                 	db	32
   563  006F4B  72                 	db	114	;'r'
   564  006F4C  65                 	db	101	;'e'
   565  006F4D  67                 	db	103	;'g'
   566  006F4E  69                 	db	105	;'i'
   567  006F4F  73                 	db	115	;'s'
   568  006F50  74                 	db	116	;'t'
   569  006F51  65                 	db	101	;'e'
   570  006F52  72                 	db	114	;'r'
   571  006F53  28                 	db	40
   572  006F54  73                 	db	115	;'s'
   573  006F55  29                 	db	41
   574  006F56  20                 	db	32
   575  006F57  6F                 	db	111	;'o'
   576  006F58  66                 	db	102	;'f'
   577  006F59  20                 	db	32
   578  006F5A  6E                 	db	110	;'n'
   579  006F5B  6F                 	db	111	;'o'
   580  006F5C  64                 	db	100	;'d'
   581  006F5D  65                 	db	101	;'e'
   582  006F5E  20                 	db	32
   583  006F5F  28                 	db	40
   584  006F60  46                 	db	70	;'F'
   585  006F61  6F                 	db	111	;'o'
   586  006F62  72                 	db	114	;'r'
   587  006F63  6D                 	db	109	;'m'
   588  006F64  61                 	db	97	;'a'
   589  006F65  74                 	db	116	;'t'
   590  006F66  3A                 	db	58	;':'
   591  006F67  20                 	db	32
   592  006F68  72                 	db	114	;'r'
   593  006F69  72                 	db	114	;'r'
   594  006F6A  65                 	db	101	;'e'
   595  006F6B  67                 	db	103	;'g'
   596  006F6C  20                 	db	32
   597  006F6D  6E                 	db	110	;'n'
   598  006F6E  6F                 	db	111	;'o'
   599  006F6F  64                 	db	100	;'d'
   600  006F70  65                 	db	101	;'e'
   601  006F71  69                 	db	105	;'i'
   602  006F72  64                 	db	100	;'d'
   603  006F73  20                 	db	32
   604  006F74  5B                 	db	91	;'['
   605  006F75  70                 	db	112	;'p'
   606  006F76  61                 	db	97	;'a'
   607  006F77  67                 	db	103	;'g'
   608  006F78  65                 	db	101	;'e'
   609  006F79  3A                 	db	58	;':'
   610  006F7A  5D                 	db	93	;']'
   611  006F7B  72                 	db	114	;'r'
   612  006F7C  65                 	db	101	;'e'
   613  006F7D  67                 	db	103	;'g'
   614  006F7E  20                 	db	32
   615  006F7F  5B                 	db	91	;'['
   616  006F80  63                 	db	99	;'c'
   617  006F81  6F                 	db	111	;'o'
   618  006F82  75                 	db	117	;'u'
   619  006F83  6E                 	db	110	;'n'
   620  006F84  74                 	db	116	;'t'
   621  006F85  5D                 	db	93	;']'
   622  006F86  29                 	db	41
   623  006F87  2E                 	db	46
   624  006F88  0D                 	db	13
   625  006F89  0A                 	db	10
   626  006F8A  00                 	db	0
   627  006F8B                     STR_265:
   628                           
   629                           ; BSR set to: 1
   630  006F8B  57                 	db	87	;'W'
   631  006F8C  52                 	db	82	;'R'
   632  006F8D  45                 	db	69	;'E'
   633  006F8E  47                 	db	71	;'G'
   634  006F8F  20                 	db	32
   635  006F90  2D                 	db	45
   636  006F91  20                 	db	32
   637  006F92  57                 	db	87	;'W'
   638  006F93  72                 	db	114	;'r'
   639  006F94  69                 	db	105	;'i'
   640  006F95  74                 	db	116	;'t'
   641  006F96  65                 	db	101	;'e'
   642  006F97  20                 	db	32
   643  006F98  72                 	db	114	;'r'
   644  006F99  65                 	db	101	;'e'
   645  006F9A  67                 	db	103	;'g'
   646  006F9B  69                 	db	105	;'i'
   647  006F9C  73                 	db	115	;'s'
   648  006F9D  74                 	db	116	;'t'
   649  006F9E  65                 	db	101	;'e'
   650  006F9F  72                 	db	114	;'r'
   651  006FA0  20                 	db	32
   652  006FA1  6F                 	db	111	;'o'
   653  006FA2  66                 	db	102	;'f'
   654  006FA3  20                 	db	32
   655  006FA4  6E                 	db	110	;'n'
   656  006FA5  6F                 	db	111	;'o'
   657  006FA6  64                 	db	100	;'d'
   658  006FA7  65                 	db	101	;'e'
   659  006FA8  20                 	db	32
   660  006FA9  28                 	db	40
   661  006FAA  46                 	db	70	;'F'
   662  006FAB  6F                 	db	111	;'o'
   663  006FAC  72                 	db	114	;'r'
   664  006FAD  6D                 	db	109	;'m'
   665  006FAE  61                 	db	97	;'a'
   666  006FAF  74                 	db	116	;'t'
   667  006FB0  3A                 	db	58	;':'
   668  006FB1  20                 	db	32
   669  006FB2  77                 	db	119	;'w'
   670  006FB3  72                 	db	114	;'r'
   671  006FB4  65                 	db	101	;'e'
   672  006FB5  67                 	db	103	;'g'
   673  006FB6  20                 	db	32
   674  006FB7  6E                 	db	110	;'n'
   675  006FB8  6F                 	db	111	;'o'
   676  006FB9  64                 	db	100	;'d'
   677  006FBA  65                 	db	101	;'e'
   678  006FBB  69                 	db	105	;'i'
   679  006FBC  64                 	db	100	;'d'
   680  006FBD  20                 	db	32
   681  006FBE  5B                 	db	91	;'['
   682  006FBF  70                 	db	112	;'p'
   683  006FC0  61                 	db	97	;'a'
   684  006FC1  67                 	db	103	;'g'
   685  006FC2  65                 	db	101	;'e'
   686  006FC3  3A                 	db	58	;':'
   687  006FC4  5D                 	db	93	;']'
   688  006FC5  72                 	db	114	;'r'
   689  006FC6  65                 	db	101	;'e'
   690  006FC7  67                 	db	103	;'g'
   691  006FC8  20                 	db	32
   692  006FC9  63                 	db	99	;'c'
   693  006FCA  6F                 	db	111	;'o'
   694  006FCB  6E                 	db	110	;'n'
   695  006FCC  74                 	db	116	;'t'
   696  006FCD  65                 	db	101	;'e'
   697  006FCE  6E                 	db	110	;'n'
   698  006FCF  74                 	db	116	;'t'
   699  006FD0  29                 	db	41
   700  006FD1  2E                 	db	46
   701  006FD2  0D                 	db	13
   702  006FD3  0A                 	db	10
   703  006FD4  00                 	db	0
   704  006FD5                     STR_270:
   705                           
   706                           ; BSR set to: 1
   707  006FD5  20                 	db	32
   708  006FD6  20                 	db	32
   709  006FD7  20                 	db	32
   710  006FD8  20                 	db	32
   711  006FD9  20                 	db	32
   712  006FDA  20                 	db	32
   713  006FDB  20                 	db	32
   714  006FDC  46                 	db	70	;'F'
   715  006FDD  6F                 	db	111	;'o'
   716  006FDE  72                 	db	114	;'r'
   717  006FDF  6D                 	db	109	;'m'
   718  006FE0  61                 	db	97	;'a'
   719  006FE1  74                 	db	116	;'t'
   720  006FE2  3A                 	db	58	;':'
   721  006FE3  20                 	db	32
   722  006FE4  6D                 	db	109	;'m'
   723  006FE5  61                 	db	97	;'a'
   724  006FE6  73                 	db	115	;'s'
   725  006FE7  6B                 	db	107	;'k'
   726  006FE8  20                 	db	32
   727  006FE9  6D                 	db	109	;'m'
   728  006FEA  61                 	db	97	;'a'
   729  006FEB  73                 	db	115	;'s'
   730  006FEC  6B                 	db	107	;'k'
   731  006FED  6E                 	db	110	;'n'
   732  006FEE  6F                 	db	111	;'o'
   733  006FEF  2C                 	db	44
   734  006FF0  70                 	db	112	;'p'
   735  006FF1  72                 	db	114	;'r'
   736  006FF2  69                 	db	105	;'i'
   737  006FF3  6F                 	db	111	;'o'
   738  006FF4  2C                 	db	44
   739  006FF5  63                 	db	99	;'c'
   740  006FF6  6C                 	db	108	;'l'
   741  006FF7  61                 	db	97	;'a'
   742  006FF8  73                 	db	115	;'s'
   743  006FF9  73                 	db	115	;'s'
   744  006FFA  2C                 	db	44
   745  006FFB  74                 	db	116	;'t'
   746  006FFC  79                 	db	121	;'y'
   747  006FFD  70                 	db	112	;'p'
   748  006FFE  65                 	db	101	;'e'
   749  006FFF  2C                 	db	44
   750  007000  6E                 	db	110	;'n'
   751  007001  6F                 	db	111	;'o'
   752  007002  64                 	db	100	;'d'
   753  007003  65                 	db	101	;'e'
   754  007004  69                 	db	105	;'i'
   755  007005  64                 	db	100	;'d'
   756  007006  20                 	db	32
   757  007007  28                 	db	40
   758  007008  6D                 	db	109	;'m'
   759  007009  61                 	db	97	;'a'
   760  00700A  73                 	db	115	;'s'
   761  00700B  6B                 	db	107	;'k'
   762  00700C  6E                 	db	110	;'n'
   763  00700D  6F                 	db	111	;'o'
   764  00700E  20                 	db	32
   765  00700F  3D                 	db	61	;'='
   766  007010  20                 	db	32
   767  007011  30                 	db	48	;'0'
   768  007012  20                 	db	32
   769  007013  6F                 	db	111	;'o'
   770  007014  72                 	db	114	;'r'
   771  007015  20                 	db	32
   772  007016  31                 	db	49	;'1'
   773  007017  29                 	db	41
   774  007018  2E                 	db	46
   775  007019  0D                 	db	13
   776  00701A  0A                 	db	10
   777  00701B  00                 	db	0
   778  00701C                     STR_280:
   779                           
   780                           ; BSR set to: 1
   781  00701C  2D                 	db	45
   782  00701D  2D                 	db	45
   783  00701E  2D                 	db	45
   784  00701F  2D                 	db	45
   785  007020  2D                 	db	45
   786  007021  2D                 	db	45
   787  007022  2D                 	db	45
   788  007023  2D                 	db	45
   789  007024  2D                 	db	45
   790  007025  2D                 	db	45
   791  007026  2D                 	db	45
   792  007027  2D                 	db	45
   793  007028  2D                 	db	45
   794  007029  2D                 	db	45
   795  00702A  2D                 	db	45
   796  00702B  2D                 	db	45
   797  00702C  2D                 	db	45
   798  00702D  2D                 	db	45
   799  00702E  2D                 	db	45
   800  00702F  2D                 	db	45
   801  007030  2D                 	db	45
   802  007031  2D                 	db	45
   803  007032  2D                 	db	45
   804  007033  2D                 	db	45
   805  007034  2D                 	db	45
   806  007035  2D                 	db	45
   807  007036  2D                 	db	45
   808  007037  2D                 	db	45
   809  007038  2D                 	db	45
   810  007039  2D                 	db	45
   811  00703A  2D                 	db	45
   812  00703B  2D                 	db	45
   813  00703C  2D                 	db	45
   814  00703D  2D                 	db	45
   815  00703E  2D                 	db	45
   816  00703F  2D                 	db	45
   817  007040  2D                 	db	45
   818  007041  2D                 	db	45
   819  007042  2D                 	db	45
   820  007043  2D                 	db	45
   821  007044  2D                 	db	45
   822  007045  2D                 	db	45
   823  007046  2D                 	db	45
   824  007047  2D                 	db	45
   825  007048  2D                 	db	45
   826  007049  2D                 	db	45
   827  00704A  2D                 	db	45
   828  00704B  2D                 	db	45
   829  00704C  2D                 	db	45
   830  00704D  2D                 	db	45
   831  00704E  2D                 	db	45
   832  00704F  2D                 	db	45
   833  007050  2D                 	db	45
   834  007051  2D                 	db	45
   835  007052  2D                 	db	45
   836  007053  2D                 	db	45
   837  007054  2D                 	db	45
   838  007055  2D                 	db	45
   839  007056  2D                 	db	45
   840  007057  2D                 	db	45
   841  007058  2D                 	db	45
   842  007059  2D                 	db	45
   843  00705A  2D                 	db	45
   844  00705B  2D                 	db	45
   845  00705C  0D                 	db	13
   846  00705D  0A                 	db	10
   847  00705E  00                 	db	0
   848  00705F                     STR_274:
   849                           
   850                           ; BSR set to: 1
   851  00705F  20                 	db	32
   852  007060  20                 	db	32
   853  007061  20                 	db	32
   854  007062  20                 	db	32
   855  007063  52                 	db	82	;'R'
   856  007064  57                 	db	87	;'W'
   857  007065  54                 	db	84	;'T'
   858  007066  49                 	db	73	;'I'
   859  007067  4D                 	db	77	;'M'
   860  007068  45                 	db	69	;'E'
   861  007069  4F                 	db	79	;'O'
   862  00706A  55                 	db	85	;'U'
   863  00706B  54                 	db	84	;'T'
   864  00706C  20                 	db	32
   865  00706D  2D                 	db	45
   866  00706E  20                 	db	32
   867  00706F  53                 	db	83	;'S'
   868  007070  65                 	db	101	;'e'
   869  007071  74                 	db	116	;'t'
   870  007072  20                 	db	32
   871  007073  72                 	db	114	;'r'
   872  007074  65                 	db	101	;'e'
   873  007075  67                 	db	103	;'g'
   874  007076  69                 	db	105	;'i'
   875  007077  73                 	db	115	;'s'
   876  007078  74                 	db	116	;'t'
   877  007079  65                 	db	101	;'e'
   878  00707A  72                 	db	114	;'r'
   879  00707B  20                 	db	32
   880  00707C  72                 	db	114	;'r'
   881  00707D  65                 	db	101	;'e'
   882  00707E  61                 	db	97	;'a'
   883  00707F  64                 	db	100	;'d'
   884  007080  2F                 	db	47
   885  007081  77                 	db	119	;'w'
   886  007082  72                 	db	114	;'r'
   887  007083  69                 	db	105	;'i'
   888  007084  74                 	db	116	;'t'
   889  007085  65                 	db	101	;'e'
   890  007086  20                 	db	32
   891  007087  74                 	db	116	;'t'
   892  007088  69                 	db	105	;'i'
   893  007089  6D                 	db	109	;'m'
   894  00708A  65                 	db	101	;'e'
   895  00708B  6F                 	db	111	;'o'
   896  00708C  75                 	db	117	;'u'
   897  00708D  74                 	db	116	;'t'
   898  00708E  2E                 	db	46
   899  00708F  20                 	db	32
   900  007090  44                 	db	68	;'D'
   901  007091  65                 	db	101	;'e'
   902  007092  66                 	db	102	;'f'
   903  007093  61                 	db	97	;'a'
   904  007094  75                 	db	117	;'u'
   905  007095  6C                 	db	108	;'l'
   906  007096  74                 	db	116	;'t'
   907  007097  3D                 	db	61	;'='
   908  007098  32                 	db	50	;'2'
   909  007099  30                 	db	48	;'0'
   910  00709A  20                 	db	32
   911  00709B  6D                 	db	109	;'m'
   912  00709C  73                 	db	115	;'s'
   913  00709D  20                 	db	32
   914  00709E  2E                 	db	46
   915  00709F  0D                 	db	13
   916  0070A0  0A                 	db	10
   917  0070A1  00                 	db	0
   918  0070A2                     STR_107:
   919                           
   920                           ; BSR set to: 1
   921  0070A2  2D                 	db	45
   922  0070A3  45                 	db	69	;'E'
   923  0070A4  52                 	db	82	;'R'
   924  0070A5  52                 	db	82	;'R'
   925  0070A6  4F                 	db	79	;'O'
   926  0070A7  52                 	db	82	;'R'
   927  0070A8  20                 	db	32
   928  0070A9  2D                 	db	45
   929  0070AA  20                 	db	32
   930  0070AB  46                 	db	70	;'F'
   931  0070AC  69                 	db	105	;'i'
   932  0070AD  6C                 	db	108	;'l'
   933  0070AE  74                 	db	116	;'t'
   934  0070AF  65                 	db	101	;'e'
   935  0070B0  72                 	db	114	;'r'
   936  0070B1  20                 	db	32
   937  0070B2  6E                 	db	110	;'n'
   938  0070B3  75                 	db	117	;'u'
   939  0070B4  6D                 	db	109	;'m'
   940  0070B5  62                 	db	98	;'b'
   941  0070B6  65                 	db	101	;'e'
   942  0070B7  72                 	db	114	;'r'
   943  0070B8  20                 	db	32
   944  0070B9  63                 	db	99	;'c'
   945  0070BA  61                 	db	97	;'a'
   946  0070BB  6E                 	db	110	;'n'
   947  0070BC  20                 	db	32
   948  0070BD  6F                 	db	111	;'o'
   949  0070BE  6E                 	db	110	;'n'
   950  0070BF  6C                 	db	108	;'l'
   951  0070C0  79                 	db	121	;'y'
   952  0070C1  20                 	db	32
   953  0070C2  62                 	db	98	;'b'
   954  0070C3  65                 	db	101	;'e'
   955  0070C4  20                 	db	32
   956  0070C5  73                 	db	115	;'s'
   957  0070C6  65                 	db	101	;'e'
   958  0070C7  74                 	db	116	;'t'
   959  0070C8  20                 	db	32
   960  0070C9  74                 	db	116	;'t'
   961  0070CA  6F                 	db	111	;'o'
   962  0070CB  20                 	db	32
   963  0070CC  61                 	db	97	;'a'
   964  0070CD  20                 	db	32
   965  0070CE  76                 	db	118	;'v'
   966  0070CF  61                 	db	97	;'a'
   967  0070D0  6C                 	db	108	;'l'
   968  0070D1  75                 	db	117	;'u'
   969  0070D2  65                 	db	101	;'e'
   970  0070D3  20                 	db	32
   971  0070D4  62                 	db	98	;'b'
   972  0070D5  65                 	db	101	;'e'
   973  0070D6  74                 	db	116	;'t'
   974  0070D7  77                 	db	119	;'w'
   975  0070D8  65                 	db	101	;'e'
   976  0070D9  65                 	db	101	;'e'
   977  0070DA  6E                 	db	110	;'n'
   978  0070DB  20                 	db	32
   979  0070DC  30                 	db	48	;'0'
   980  0070DD  2D                 	db	45
   981  0070DE  31                 	db	49	;'1'
   982  0070DF  35                 	db	53	;'5'
   983  0070E0  2E                 	db	46
   984  0070E1  0D                 	db	13
   985  0070E2  0A                 	db	10
   986  0070E3  00                 	db	0
   987  0070E4                     STR_277:
   988                           
   989                           ; BSR set to: 1
   990  0070E4  20                 	db	32
   991  0070E5  20                 	db	32
   992  0070E6  20                 	db	32
   993  0070E7  20                 	db	32
   994  0070E8  4D                 	db	77	;'M'
   995  0070E9  4F                 	db	79	;'O'
   996  0070EA  44                 	db	68	;'D'
   997  0070EB  45                 	db	69	;'E'
   998  0070EC  20                 	db	32
   999  0070ED  2D                 	db	45
  1000  0070EE  20                 	db	32
  1001  0070EF  53                 	db	83	;'S'
  1002  0070F0  65                 	db	101	;'e'
  1003  0070F1  74                 	db	116	;'t'
  1004  0070F2  20                 	db	32
  1005  0070F3  61                 	db	97	;'a'
  1006  0070F4  64                 	db	100	;'d'
  1007  0070F5  61                 	db	97	;'a'
  1008  0070F6  70                 	db	112	;'p'
  1009  0070F7  74                 	db	116	;'t'
  1010  0070F8  65                 	db	101	;'e'
  1011  0070F9  72                 	db	114	;'r'
  1012  0070FA  20                 	db	32
  1013  0070FB  6D                 	db	109	;'m'
  1014  0070FC  6F                 	db	111	;'o'
  1015  0070FD  64                 	db	100	;'d'
  1016  0070FE  65                 	db	101	;'e'
  1017  0070FF  20                 	db	32
  1018  007100  74                 	db	116	;'t'
  1019  007101  68                 	db	104	;'h'
  1020  007102  61                 	db	97	;'a'
  1021  007103  74                 	db	116	;'t'
  1022  007104  20                 	db	32
  1023  007105  73                 	db	115	;'s'
  1024  007106  68                 	db	104	;'h'
  1025  007107  6F                 	db	111	;'o'
  1026  007108  75                 	db	117	;'u'
  1027  007109  6C                 	db	108	;'l'
  1028  00710A  64                 	db	100	;'d'
  1029  00710B  20                 	db	32
  1030  00710C  62                 	db	98	;'b'
  1031  00710D  65                 	db	101	;'e'
  1032  00710E  20                 	db	32
  1033  00710F  75                 	db	117	;'u'
  1034  007110  73                 	db	115	;'s'
  1035  007111  65                 	db	101	;'e'
  1036  007112  64                 	db	100	;'d'
  1037  007113  20                 	db	32
  1038  007114  6F                 	db	111	;'o'
  1039  007115  6E                 	db	110	;'n'
  1040  007116  20                 	db	32
  1041  007117  73                 	db	115	;'s'
  1042  007118  74                 	db	116	;'t'
  1043  007119  61                 	db	97	;'a'
  1044  00711A  72                 	db	114	;'r'
  1045  00711B  74                 	db	116	;'t'
  1046  00711C  75                 	db	117	;'u'
  1047  00711D  70                 	db	112	;'p'
  1048  00711E  2E                 	db	46
  1049  00711F  0D                 	db	13
  1050  007120  0A                 	db	10
  1051  007121  00                 	db	0
  1052  007122                     STR_238:
  1053                           
  1054                           ; BSR set to: 1
  1055  007122  54                 	db	84	;'T'
  1056  007123  72                 	db	114	;'r'
  1057  007124  61                 	db	97	;'a'
  1058  007125  6E                 	db	110	;'n'
  1059  007126  73                 	db	115	;'s'
  1060  007127  6D                 	db	109	;'m'
  1061  007128  69                 	db	105	;'i'
  1062  007129  74                 	db	116	;'t'
  1063  00712A  74                 	db	116	;'t'
  1064  00712B  65                 	db	101	;'e'
  1065  00712C  72                 	db	114	;'r'
  1066  00712D  20                 	db	32
  1067  00712E  69                 	db	105	;'i'
  1068  00712F  6E                 	db	110	;'n'
  1069  007130  20                 	db	32
  1070  007131  45                 	db	69	;'E'
  1071  007132  72                 	db	114	;'r'
  1072  007133  72                 	db	114	;'r'
  1073  007134  6F                 	db	111	;'o'
  1074  007135  72                 	db	114	;'r'
  1075  007136  20                 	db	32
  1076  007137  53                 	db	83	;'S'
  1077  007138  74                 	db	116	;'t'
  1078  007139  61                 	db	97	;'a'
  1079  00713A  74                 	db	116	;'t'
  1080  00713B  65                 	db	101	;'e'
  1081  00713C  20                 	db	32
  1082  00713D  57                 	db	87	;'W'
  1083  00713E  61                 	db	97	;'a'
  1084  00713F  72                 	db	114	;'r'
  1085  007140  6E                 	db	110	;'n'
  1086  007141  69                 	db	105	;'i'
  1087  007142  6E                 	db	110	;'n'
  1088  007143  67                 	db	103	;'g'
  1089  007144  20                 	db	32
  1090  007145  28                 	db	40
  1091  007146  31                 	db	49	;'1'
  1092  007147  32                 	db	50	;'2'
  1093  007148  38                 	db	56	;'8'
  1094  007149  20                 	db	32
  1095  00714A  3E                 	db	62	;'>'
  1096  00714B  20                 	db	32
  1097  00714C  54                 	db	84	;'T'
  1098  00714D  58                 	db	88	;'X'
  1099  00714E  45                 	db	69	;'E'
  1100  00714F  52                 	db	82	;'R'
  1101  007150  52                 	db	82	;'R'
  1102  007151  43                 	db	67	;'C'
  1103  007152  4E                 	db	78	;'N'
  1104  007153  54                 	db	84	;'T'
  1105  007154  20                 	db	32
  1106  007155  3E                 	db	62	;'>'
  1107  007156  20                 	db	32
  1108  007157  39                 	db	57	;'9'
  1109  007158  36                 	db	54	;'6'
  1110  007159  29                 	db	41
  1111  00715A  0D                 	db	13
  1112  00715B  0A                 	db	10
  1113  00715C  00                 	db	0
  1114  00715D                     STR_240:
  1115                           
  1116                           ; BSR set to: 1
  1117  00715D  54                 	db	84	;'T'
  1118  00715E  72                 	db	114	;'r'
  1119  00715F  61                 	db	97	;'a'
  1120  007160  6E                 	db	110	;'n'
  1121  007161  73                 	db	115	;'s'
  1122  007162  6D                 	db	109	;'m'
  1123  007163  69                 	db	105	;'i'
  1124  007164  74                 	db	116	;'t'
  1125  007165  74                 	db	116	;'t'
  1126  007166  65                 	db	101	;'e'
  1127  007167  72                 	db	114	;'r'
  1128  007168  20                 	db	32
  1129  007169  69                 	db	105	;'i'
  1130  00716A  6E                 	db	110	;'n'
  1131  00716B  20                 	db	32
  1132  00716C  45                 	db	69	;'E'
  1133  00716D  72                 	db	114	;'r'
  1134  00716E  72                 	db	114	;'r'
  1135  00716F  6F                 	db	111	;'o'
  1136  007170  72                 	db	114	;'r'
  1137  007171  20                 	db	32
  1138  007172  53                 	db	83	;'S'
  1139  007173  74                 	db	116	;'t'
  1140  007174  61                 	db	97	;'a'
  1141  007175  74                 	db	116	;'t'
  1142  007176  65                 	db	101	;'e'
  1143  007177  20                 	db	32
  1144  007178  42                 	db	66	;'B'
  1145  007179  75                 	db	117	;'u'
  1146  00717A  73                 	db	115	;'s'
  1147  00717B  20                 	db	32
  1148  00717C  50                 	db	80	;'P'
  1149  00717D  61                 	db	97	;'a'
  1150  00717E  73                 	db	115	;'s'
  1151  00717F  73                 	db	115	;'s'
  1152  007180  69                 	db	105	;'i'
  1153  007181  76                 	db	118	;'v'
  1154  007182  65                 	db	101	;'e'
  1155  007183  20                 	db	32
  1156  007184  28                 	db	40
  1157  007185  54                 	db	84	;'T'
  1158  007186  58                 	db	88	;'X'
  1159  007187  45                 	db	69	;'E'
  1160  007188  52                 	db	82	;'R'
  1161  007189  52                 	db	82	;'R'
  1162  00718A  43                 	db	67	;'C'
  1163  00718B  4E                 	db	78	;'N'
  1164  00718C  54                 	db	84	;'T'
  1165  00718D  20                 	db	32
  1166  00718E  3F                 	db	63	;'?'
  1167  00718F  20                 	db	32
  1168  007190  31                 	db	49	;'1'
  1169  007191  32                 	db	50	;'2'
  1170  007192  38                 	db	56	;'8'
  1171  007193  29                 	db	41
  1172  007194  0D                 	db	13
  1173  007195  0A                 	db	10
  1174  007196  00                 	db	0
  1175  007197                     STR_2:
  1176                           
  1177                           ; BSR set to: 1
  1178  007197  43                 	db	67	;'C'
  1179  007198  6F                 	db	111	;'o'
  1180  007199  70                 	db	112	;'p'
  1181  00719A  79                 	db	121	;'y'
  1182  00719B  72                 	db	114	;'r'
  1183  00719C  69                 	db	105	;'i'
  1184  00719D  67                 	db	103	;'g'
  1185  00719E  68                 	db	104	;'h'
  1186  00719F  74                 	db	116	;'t'
  1187  0071A0  20                 	db	32
  1188  0071A1  28                 	db	40
  1189  0071A2  43                 	db	67	;'C'
  1190  0071A3  29                 	db	41
  1191  0071A4  20                 	db	32
  1192  0071A5  32                 	db	50	;'2'
  1193  0071A6  30                 	db	48	;'0'
  1194  0071A7  31                 	db	49	;'1'
  1195  0071A8  34                 	db	52	;'4'
  1196  0071A9  2D                 	db	45
  1197  0071AA  32                 	db	50	;'2'
  1198  0071AB  30                 	db	48	;'0'
  1199  0071AC  31                 	db	49	;'1'
  1200  0071AD  35                 	db	53	;'5'
  1201  0071AE  20                 	db	32
  1202  0071AF  50                 	db	80	;'P'
  1203  0071B0  61                 	db	97	;'a'
  1204  0071B1  72                 	db	114	;'r'
  1205  0071B2  61                 	db	97	;'a'
  1206  0071B3  64                 	db	100	;'d'
  1207  0071B4  69                 	db	105	;'i'
  1208  0071B5  73                 	db	115	;'s'
  1209  0071B6  65                 	db	101	;'e'
  1210  0071B7  20                 	db	32
  1211  0071B8  6F                 	db	111	;'o'
  1212  0071B9  66                 	db	102	;'f'
  1213  0071BA  20                 	db	32
  1214  0071BB  74                 	db	116	;'t'
  1215  0071BC  68                 	db	104	;'h'
  1216  0071BD  65                 	db	101	;'e'
  1217  0071BE  20                 	db	32
  1218  0071BF  46                 	db	70	;'F'
  1219  0071C0  72                 	db	114	;'r'
  1220  0071C1  6F                 	db	111	;'o'
  1221  0071C2  67                 	db	103	;'g'
  1222  0071C3  20                 	db	32
  1223  0071C4  41                 	db	65	;'A'
  1224  0071C5  42                 	db	66	;'B'
  1225  0071C6  2C                 	db	44
  1226  0071C7  20                 	db	32
  1227  0071C8  53                 	db	83	;'S'
  1228  0071C9  77                 	db	119	;'w'
  1229  0071CA  65                 	db	101	;'e'
  1230  0071CB  64                 	db	100	;'d'
  1231  0071CC  65                 	db	101	;'e'
  1232  0071CD  6E                 	db	110	;'n'
  1233  0071CE  0D                 	db	13
  1234  0071CF  0A                 	db	10
  1235  0071D0  00                 	db	0
  1236  0071D1                     STR_246:
  1237                           
  1238                           ; BSR set to: 1
  1239  0071D1  52                 	db	82	;'R'
  1240  0071D2  65                 	db	101	;'e'
  1241  0071D3  63                 	db	99	;'c'
  1242  0071D4  65                 	db	101	;'e'
  1243  0071D5  69                 	db	105	;'i'
  1244  0071D6  76                 	db	118	;'v'
  1245  0071D7  65                 	db	101	;'e'
  1246  0071D8  72                 	db	114	;'r'
  1247  0071D9  20                 	db	32
  1248  0071DA  20                 	db	32
  1249  0071DB  69                 	db	105	;'i'
  1250  0071DC  6E                 	db	110	;'n'
  1251  0071DD  20                 	db	32
  1252  0071DE  45                 	db	69	;'E'
  1253  0071DF  72                 	db	114	;'r'
  1254  0071E0  72                 	db	114	;'r'
  1255  0071E1  6F                 	db	111	;'o'
  1256  0071E2  72                 	db	114	;'r'
  1257  0071E3  20                 	db	32
  1258  0071E4  53                 	db	83	;'S'
  1259  0071E5  74                 	db	116	;'t'
  1260  0071E6  61                 	db	97	;'a'
  1261  0071E7  74                 	db	116	;'t'
  1262  0071E8  65                 	db	101	;'e'
  1263  0071E9  20                 	db	32
  1264  0071EA  57                 	db	87	;'W'
  1265  0071EB  61                 	db	97	;'a'
  1266  0071EC  72                 	db	114	;'r'
  1267  0071ED  6E                 	db	110	;'n'
  1268  0071EE  69                 	db	105	;'i'
  1269  0071EF  6E                 	db	110	;'n'
  1270  0071F0  67                 	db	103	;'g'
  1271  0071F1  20                 	db	32
  1272  0071F2  28                 	db	40
  1273  0071F3  31                 	db	49	;'1'
  1274  0071F4  32                 	db	50	;'2'
  1275  0071F5  38                 	db	56	;'8'
  1276  0071F6  20                 	db	32
  1277  0071F7  3E                 	db	62	;'>'
  1278  0071F8  20                 	db	32
  1279  0071F9  52                 	db	82	;'R'
  1280  0071FA  58                 	db	88	;'X'
  1281  0071FB  45                 	db	69	;'E'
  1282  0071FC  52                 	db	82	;'R'
  1283  0071FD  52                 	db	82	;'R'
  1284  0071FE  43                 	db	67	;'C'
  1285  0071FF  4E                 	db	78	;'N'
  1286  007200  54                 	db	84	;'T'
  1287  007201  20                 	db	32
  1288  007202  3E                 	db	62	;'>'
  1289  007203  20                 	db	32
  1290  007204  39                 	db	57	;'9'
  1291  007205  36                 	db	54	;'6'
  1292  007206  29                 	db	41
  1293  007207  0D                 	db	13
  1294  007208  0A                 	db	10
  1295  007209  00                 	db	0
  1296  00720A                     STR_258:
  1297                           
  1298                           ; BSR set to: 1
  1299  00720A  20                 	db	32
  1300  00720B  20                 	db	32
  1301  00720C  20                 	db	32
  1302  00720D  20                 	db	32
  1303  00720E  20                 	db	32
  1304  00720F  46                 	db	70	;'F'
  1305  007210  6F                 	db	111	;'o'
  1306  007211  72                 	db	114	;'r'
  1307  007212  6D                 	db	109	;'m'
  1308  007213  61                 	db	97	;'a'
  1309  007214  74                 	db	116	;'t'
  1310  007215  3A                 	db	58	;':'
  1311  007216  20                 	db	32
  1312  007217  70                 	db	112	;'p'
  1313  007218  72                 	db	114	;'r'
  1314  007219  69                 	db	105	;'i'
  1315  00721A  6F                 	db	111	;'o'
  1316  00721B  72                 	db	114	;'r'
  1317  00721C  69                 	db	105	;'i'
  1318  00721D  74                 	db	116	;'t'
  1319  00721E  79                 	db	121	;'y'
  1320  00721F  2C                 	db	44
  1321  007220  63                 	db	99	;'c'
  1322  007221  6C                 	db	108	;'l'
  1323  007222  61                 	db	97	;'a'
  1324  007223  73                 	db	115	;'s'
  1325  007224  73                 	db	115	;'s'
  1326  007225  2C                 	db	44
  1327  007226  74                 	db	116	;'t'
  1328  007227  79                 	db	121	;'y'
  1329  007228  70                 	db	112	;'p'
  1330  007229  65                 	db	101	;'e'
  1331  00722A  2C                 	db	44
  1332  00722B  6E                 	db	110	;'n'
  1333  00722C  6F                 	db	111	;'o'
  1334  00722D  64                 	db	100	;'d'
  1335  00722E  65                 	db	101	;'e'
  1336  00722F  69                 	db	105	;'i'
  1337  007230  64                 	db	100	;'d'
  1338  007231  2C                 	db	44
  1339  007232  63                 	db	99	;'c'
  1340  007233  6F                 	db	111	;'o'
  1341  007234  75                 	db	117	;'u'
  1342  007235  6E                 	db	110	;'n'
  1343  007236  74                 	db	116	;'t'
  1344  007237  2C                 	db	44
  1345  007238  64                 	db	100	;'d'
  1346  007239  61                 	db	97	;'a'
  1347  00723A  74                 	db	116	;'t'
  1348  00723B  61                 	db	97	;'a'
  1349  00723C  2C                 	db	44
  1350  00723D  2C                 	db	44
  1351  00723E  2C                 	db	44
  1352  00723F  0D                 	db	13
  1353  007240  0A                 	db	10
  1354  007241  00                 	db	0
  1355  007242                     STR_245:
  1356                           
  1357                           ; BSR set to: 1
  1358  007242  52                 	db	82	;'R'
  1359  007243  65                 	db	101	;'e'
  1360  007244  63                 	db	99	;'c'
  1361  007245  65                 	db	101	;'e'
  1362  007246  69                 	db	105	;'i'
  1363  007247  76                 	db	118	;'v'
  1364  007248  65                 	db	101	;'e'
  1365  007249  72                 	db	114	;'r'
  1366  00724A  20                 	db	32
  1367  00724B  69                 	db	105	;'i'
  1368  00724C  6E                 	db	110	;'n'
  1369  00724D  20                 	db	32
  1370  00724E  45                 	db	69	;'E'
  1371  00724F  72                 	db	114	;'r'
  1372  007250  72                 	db	114	;'r'
  1373  007251  6F                 	db	111	;'o'
  1374  007252  72                 	db	114	;'r'
  1375  007253  20                 	db	32
  1376  007254  53                 	db	83	;'S'
  1377  007255  74                 	db	116	;'t'
  1378  007256  61                 	db	97	;'a'
  1379  007257  74                 	db	116	;'t'
  1380  007258  65                 	db	101	;'e'
  1381  007259  20                 	db	32
  1382  00725A  42                 	db	66	;'B'
  1383  00725B  75                 	db	117	;'u'
  1384  00725C  73                 	db	115	;'s'
  1385  00725D  20                 	db	32
  1386  00725E  50                 	db	80	;'P'
  1387  00725F  61                 	db	97	;'a'
  1388  007260  73                 	db	115	;'s'
  1389  007261  73                 	db	115	;'s'
  1390  007262  69                 	db	105	;'i'
  1391  007263  76                 	db	118	;'v'
  1392  007264  65                 	db	101	;'e'
  1393  007265  20                 	db	32
  1394  007266  28                 	db	40
  1395  007267  52                 	db	82	;'R'
  1396  007268  58                 	db	88	;'X'
  1397  007269  45                 	db	69	;'E'
  1398  00726A  52                 	db	82	;'R'
  1399  00726B  52                 	db	82	;'R'
  1400  00726C  43                 	db	67	;'C'
  1401  00726D  4E                 	db	78	;'N'
  1402  00726E  54                 	db	84	;'T'
  1403  00726F  20                 	db	32
  1404  007270  3E                 	db	62	;'>'
  1405  007271  20                 	db	32
  1406  007272  31                 	db	49	;'1'
  1407  007273  32                 	db	50	;'2'
  1408  007274  37                 	db	55	;'7'
  1409  007275  29                 	db	41
  1410  007276  0D                 	db	13
  1411  007277  0A                 	db	10
  1412  007278  00                 	db	0
  1413  007279                     STR_276:
  1414                           
  1415                           ; BSR set to: 1
  1416  007279  20                 	db	32
  1417  00727A  20                 	db	32
  1418  00727B  20                 	db	32
  1419  00727C  20                 	db	32
  1420  00727D  53                 	db	83	;'S'
  1421  00727E  54                 	db	84	;'T'
  1422  00727F  41                 	db	65	;'A'
  1423  007280  52                 	db	82	;'R'
  1424  007281  54                 	db	84	;'T'
  1425  007282  49                 	db	73	;'I'
  1426  007283  46                 	db	70	;'F'
  1427  007284  20                 	db	32
  1428  007285  2D                 	db	45
  1429  007286  20                 	db	32
  1430  007287  53                 	db	83	;'S'
  1431  007288  65                 	db	101	;'e'
  1432  007289  74                 	db	116	;'t'
  1433  00728A  20                 	db	32
  1434  00728B  69                 	db	105	;'i'
  1435  00728C  6E                 	db	110	;'n'
  1436  00728D  74                 	db	116	;'t'
  1437  00728E  65                 	db	101	;'e'
  1438  00728F  72                 	db	114	;'r'
  1439  007290  66                 	db	102	;'f'
  1440  007291  61                 	db	97	;'a'
  1441  007292  63                 	db	99	;'c'
  1442  007293  65                 	db	101	;'e'
  1443  007294  20                 	db	32
  1444  007295  73                 	db	115	;'s'
  1445  007296  74                 	db	116	;'t'
  1446  007297  61                 	db	97	;'a'
  1447  007298  74                 	db	116	;'t'
  1448  007299  65                 	db	101	;'e'
  1449  00729A  20                 	db	32
  1450  00729B  74                 	db	116	;'t'
  1451  00729C  6F                 	db	111	;'o'
  1452  00729D  20                 	db	32
  1453  00729E  75                 	db	117	;'u'
  1454  00729F  73                 	db	115	;'s'
  1455  0072A0  65                 	db	101	;'e'
  1456  0072A1  20                 	db	32
  1457  0072A2  6F                 	db	111	;'o'
  1458  0072A3  6E                 	db	110	;'n'
  1459  0072A4  20                 	db	32
  1460  0072A5  73                 	db	115	;'s'
  1461  0072A6  74                 	db	116	;'t'
  1462  0072A7  61                 	db	97	;'a'
  1463  0072A8  72                 	db	114	;'r'
  1464  0072A9  74                 	db	116	;'t'
  1465  0072AA  75                 	db	117	;'u'
  1466  0072AB  70                 	db	112	;'p'
  1467  0072AC  2E                 	db	46
  1468  0072AD  0D                 	db	13
  1469  0072AE  0A                 	db	10
  1470  0072AF  00                 	db	0
  1471  0072B0                     STR_4:
  1472                           
  1473                           ; BSR set to: 1
  1474  0072B0  50                 	db	80	;'P'
  1475  0072B1  72                 	db	114	;'r'
  1476  0072B2  65                 	db	101	;'e'
  1477  0072B3  73                 	db	115	;'s'
  1478  0072B4  73                 	db	115	;'s'
  1479  0072B5  20                 	db	32
  1480  0072B6  27                 	db	39
  1481  0072B7  76                 	db	118	;'v'
  1482  0072B8  27                 	db	39
  1483  0072B9  20                 	db	32
  1484  0072BA  77                 	db	119	;'w'
  1485  0072BB  69                 	db	105	;'i'
  1486  0072BC  74                 	db	116	;'t'
  1487  0072BD  68                 	db	104	;'h'
  1488  0072BE  69                 	db	105	;'i'
  1489  0072BF  6E                 	db	110	;'n'
  1490  0072C0  20                 	db	32
  1491  0072C1  74                 	db	116	;'t'
  1492  0072C2  68                 	db	104	;'h'
  1493  0072C3  72                 	db	114	;'r'
  1494  0072C4  65                 	db	101	;'e'
  1495  0072C5  65                 	db	101	;'e'
  1496  0072C6  20                 	db	32
  1497  0072C7  73                 	db	115	;'s'
  1498  0072C8  65                 	db	101	;'e'
  1499  0072C9  63                 	db	99	;'c'
  1500  0072CA  6F                 	db	111	;'o'
  1501  0072CB  6E                 	db	110	;'n'
  1502  0072CC  64                 	db	100	;'d'
  1503  0072CD  73                 	db	115	;'s'
  1504  0072CE  20                 	db	32
  1505  0072CF  74                 	db	116	;'t'
  1506  0072D0  6F                 	db	111	;'o'
  1507  0072D1  20                 	db	32
  1508  0072D2  65                 	db	101	;'e'
  1509  0072D3  6E                 	db	110	;'n'
  1510  0072D4  74                 	db	116	;'t'
  1511  0072D5  65                 	db	101	;'e'
  1512  0072D6  72                 	db	114	;'r'
  1513  0072D7  20                 	db	32
  1514  0072D8  76                 	db	118	;'v'
  1515  0072D9  65                 	db	101	;'e'
  1516  0072DA  72                 	db	114	;'r'
  1517  0072DB  62                 	db	98	;'b'
  1518  0072DC  6F                 	db	111	;'o'
  1519  0072DD  73                 	db	115	;'s'
  1520  0072DE  65                 	db	101	;'e'
  1521  0072DF  20                 	db	32
  1522  0072E0  6D                 	db	109	;'m'
  1523  0072E1  6F                 	db	111	;'o'
  1524  0072E2  64                 	db	100	;'d'
  1525  0072E3  65                 	db	101	;'e'
  1526  0072E4  0D                 	db	13
  1527  0072E5  0A                 	db	10
  1528  0072E6  00                 	db	0
  1529  0072E7                     STR_239:
  1530                           
  1531                           ; BSR set to: 1
  1532  0072E7  54                 	db	84	;'T'
  1533  0072E8  72                 	db	114	;'r'
  1534  0072E9  61                 	db	97	;'a'
  1535  0072EA  6E                 	db	110	;'n'
  1536  0072EB  73                 	db	115	;'s'
  1537  0072EC  6D                 	db	109	;'m'
  1538  0072ED  69                 	db	105	;'i'
  1539  0072EE  74                 	db	116	;'t'
  1540  0072EF  74                 	db	116	;'t'
  1541  0072F0  65                 	db	101	;'e'
  1542  0072F1  72                 	db	114	;'r'
  1543  0072F2  20                 	db	32
  1544  0072F3  69                 	db	105	;'i'
  1545  0072F4  6E                 	db	110	;'n'
  1546  0072F5  20                 	db	32
  1547  0072F6  45                 	db	69	;'E'
  1548  0072F7  72                 	db	114	;'r'
  1549  0072F8  72                 	db	114	;'r'
  1550  0072F9  6F                 	db	111	;'o'
  1551  0072FA  72                 	db	114	;'r'
  1552  0072FB  20                 	db	32
  1553  0072FC  53                 	db	83	;'S'
  1554  0072FD  74                 	db	116	;'t'
  1555  0072FE  61                 	db	97	;'a'
  1556  0072FF  74                 	db	116	;'t'
  1557  007300  65                 	db	101	;'e'
  1558  007301  20                 	db	32
  1559  007302  42                 	db	66	;'B'
  1560  007303  75                 	db	117	;'u'
  1561  007304  73                 	db	115	;'s'
  1562  007305  20                 	db	32
  1563  007306  4F                 	db	79	;'O'
  1564  007307  46                 	db	70	;'F'
  1565  007308  46                 	db	70	;'F'
  1566  007309  20                 	db	32
  1567  00730A  28                 	db	40
  1568  00730B  54                 	db	84	;'T'
  1569  00730C  58                 	db	88	;'X'
  1570  00730D  45                 	db	69	;'E'
  1571  00730E  52                 	db	82	;'R'
  1572  00730F  52                 	db	82	;'R'
  1573  007310  43                 	db	67	;'C'
  1574  007311  4E                 	db	78	;'N'
  1575  007312  54                 	db	84	;'T'
  1576  007313  20                 	db	32
  1577  007314  3F                 	db	63	;'?'
  1578  007315  20                 	db	32
  1579  007316  32                 	db	50	;'2'
  1580  007317  35                 	db	53	;'5'
  1581  007318  36                 	db	54	;'6'
  1582  007319  29                 	db	41
  1583  00731A  0D                 	db	13
  1584  00731B  0A                 	db	10
  1585  00731C  00                 	db	0
  1586  00731D                     STR_80:
  1587                           
  1588                           ; BSR set to: 1
  1589  00731D  2D                 	db	45
  1590  00731E  45                 	db	69	;'E'
  1591  00731F  52                 	db	82	;'R'
  1592  007320  52                 	db	82	;'R'
  1593  007321  4F                 	db	79	;'O'
  1594  007322  52                 	db	82	;'R'
  1595  007323  20                 	db	32
  1596  007324  2D                 	db	45
  1597  007325  20                 	db	32
  1598  007326  4F                 	db	79	;'O'
  1599  007327  6E                 	db	110	;'n'
  1600  007328  65                 	db	101	;'e'
  1601  007329  20                 	db	32
  1602  00732A  6F                 	db	111	;'o'
  1603  00732B  72                 	db	114	;'r'
  1604  00732C  20                 	db	32
  1605  00732D  6D                 	db	109	;'m'
  1606  00732E  6F                 	db	111	;'o'
  1607  00732F  72                 	db	114	;'r'
  1608  007330  65                 	db	101	;'e'
  1609  007331  20                 	db	32
  1610  007332  72                 	db	114	;'r'
  1611  007333  65                 	db	101	;'e'
  1612  007334  67                 	db	103	;'g'
  1613  007335  69                 	db	105	;'i'
  1614  007336  73                 	db	115	;'s'
  1615  007337  74                 	db	116	;'t'
  1616  007338  65                 	db	101	;'e'
  1617  007339  72                 	db	114	;'r'
  1618  00733A  28                 	db	40
  1619  00733B  73                 	db	115	;'s'
  1620  00733C  29                 	db	41
  1621  00733D  20                 	db	32
  1622  00733E  63                 	db	99	;'c'
  1623  00733F  6F                 	db	111	;'o'
  1624  007340  75                 	db	117	;'u'
  1625  007341  6C                 	db	108	;'l'
  1626  007342  64                 	db	100	;'d'
  1627  007343  20                 	db	32
  1628  007344  6E                 	db	110	;'n'
  1629  007345  6F                 	db	111	;'o'
  1630  007346  74                 	db	116	;'t'
  1631  007347  20                 	db	32
  1632  007348  62                 	db	98	;'b'
  1633  007349  65                 	db	101	;'e'
  1634  00734A  20                 	db	32
  1635  00734B  72                 	db	114	;'r'
  1636  00734C  65                 	db	101	;'e'
  1637  00734D  61                 	db	97	;'a'
  1638  00734E  64                 	db	100	;'d'
  1639  00734F  2E                 	db	46
  1640  007350  0D                 	db	13
  1641  007351  0A                 	db	10
  1642  007352  00                 	db	0
  1643  007353                     STR_50:
  1644                           
  1645                           ; BSR set to: 1
  1646  007353  2D                 	db	45
  1647  007354  45                 	db	69	;'E'
  1648  007355  52                 	db	82	;'R'
  1649  007356  52                 	db	82	;'R'
  1650  007357  4F                 	db	79	;'O'
  1651  007358  52                 	db	82	;'R'
  1652  007359  20                 	db	32
  1653  00735A  2D                 	db	45
  1654  00735B  20                 	db	32
  1655  00735C  43                 	db	67	;'C'
  1656  00735D  6F                 	db	111	;'o'
  1657  00735E  6D                 	db	109	;'m'
  1658  00735F  6D                 	db	109	;'m'
  1659  007360  61                 	db	97	;'a'
  1660  007361  6E                 	db	110	;'n'
  1661  007362  64                 	db	100	;'d'
  1662  007363  20                 	db	32
  1663  007364  6F                 	db	111	;'o'
  1664  007365  6E                 	db	110	;'n'
  1665  007366  6C                 	db	108	;'l'
  1666  007367  79                 	db	121	;'y'
  1667  007368  20                 	db	32
  1668  007369  77                 	db	119	;'w'
  1669  00736A  6F                 	db	111	;'o'
  1670  00736B  72                 	db	114	;'r'
  1671  00736C  6B                 	db	107	;'k'
  1672  00736D  73                 	db	115	;'s'
  1673  00736E  20                 	db	32
  1674  00736F  69                 	db	105	;'i'
  1675  007370  66                 	db	102	;'f'
  1676  007371  20                 	db	32
  1677  007372  69                 	db	105	;'i'
  1678  007373  6E                 	db	110	;'n'
  1679  007374  74                 	db	116	;'t'
  1680  007375  65                 	db	101	;'e'
  1681  007376  72                 	db	114	;'r'
  1682  007377  66                 	db	102	;'f'
  1683  007378  61                 	db	97	;'a'
  1684  007379  63                 	db	99	;'c'
  1685  00737A  65                 	db	101	;'e'
  1686  00737B  20                 	db	32
  1687  00737C  69                 	db	105	;'i'
  1688  00737D  73                 	db	115	;'s'
  1689  00737E  20                 	db	32
  1690  00737F  6F                 	db	111	;'o'
  1691  007380  70                 	db	112	;'p'
  1692  007381  65                 	db	101	;'e'
  1693  007382  6E                 	db	110	;'n'
  1694  007383  2E                 	db	46
  1695  007384  0D                 	db	13
  1696  007385  0A                 	db	10
  1697  007386  00                 	db	0
  1698  007387                     STR_233:
  1699                           
  1700                           ; BSR set to: 1
  1701  007387  54                 	db	84	;'T'
  1702  007388  72                 	db	114	;'r'
  1703  007389  61                 	db	97	;'a'
  1704  00738A  6E                 	db	110	;'n'
  1705  00738B  73                 	db	115	;'s'
  1706  00738C  6D                 	db	109	;'m'
  1707  00738D  69                 	db	105	;'i'
  1708  00738E  74                 	db	116	;'t'
  1709  00738F  74                 	db	116	;'t'
  1710  007390  65                 	db	101	;'e'
  1711  007391  72                 	db	114	;'r'
  1712  007392  20                 	db	32
  1713  007393  6F                 	db	111	;'o'
  1714  007394  72                 	db	114	;'r'
  1715  007395  20                 	db	32
  1716  007396  52                 	db	82	;'R'
  1717  007397  65                 	db	101	;'e'
  1718  007398  63                 	db	99	;'c'
  1719  007399  65                 	db	101	;'e'
  1720  00739A  69                 	db	105	;'i'
  1721  00739B  76                 	db	118	;'v'
  1722  00739C  65                 	db	101	;'e'
  1723  00739D  72                 	db	114	;'r'
  1724  00739E  20                 	db	32
  1725  00739F  69                 	db	105	;'i'
  1726  0073A0  73                 	db	115	;'s'
  1727  0073A1  20                 	db	32
  1728  0073A2  69                 	db	105	;'i'
  1729  0073A3  6E                 	db	110	;'n'
  1730  0073A4  20                 	db	32
  1731  0073A5  45                 	db	69	;'E'
  1732  0073A6  72                 	db	114	;'r'
  1733  0073A7  72                 	db	114	;'r'
  1734  0073A8  6F                 	db	111	;'o'
  1735  0073A9  72                 	db	114	;'r'
  1736  0073AA  20                 	db	32
  1737  0073AB  53                 	db	83	;'S'
  1738  0073AC  74                 	db	116	;'t'
  1739  0073AD  61                 	db	97	;'a'
  1740  0073AE  74                 	db	116	;'t'
  1741  0073AF  65                 	db	101	;'e'
  1742  0073B0  20                 	db	32
  1743  0073B1  57                 	db	87	;'W'
  1744  0073B2  61                 	db	97	;'a'
  1745  0073B3  72                 	db	114	;'r'
  1746  0073B4  6E                 	db	110	;'n'
  1747  0073B5  69                 	db	105	;'i'
  1748  0073B6  6E                 	db	110	;'n'
  1749  0073B7  67                 	db	103	;'g'
  1750  0073B8  0D                 	db	13
  1751  0073B9  0A                 	db	10
  1752  0073BA  00                 	db	0
  1753  0073BB                     STR_252:
  1754                           
  1755                           ; BSR set to: 1
  1756  0073BB  4C                 	db	76	;'L'
  1757  0073BC  49                 	db	73	;'I'
  1758  0073BD  53                 	db	83	;'S'
  1759  0073BE  54                 	db	84	;'T'
  1760  0073BF  45                 	db	69	;'E'
  1761  0073C0  4E                 	db	78	;'N'
  1762  0073C1  20                 	db	32
  1763  0073C2  2D                 	db	45
  1764  0073C3  20                 	db	32
  1765  0073C4  4F                 	db	79	;'O'
  1766  0073C5  70                 	db	112	;'p'
  1767  0073C6  65                 	db	101	;'e'
  1768  0073C7  6E                 	db	110	;'n'
  1769  0073C8  20                 	db	32
  1770  0073C9  43                 	db	67	;'C'
  1771  0073CA  41                 	db	65	;'A'
  1772  0073CB  4E                 	db	78	;'N'
  1773  0073CC  20                 	db	32
  1774  0073CD  69                 	db	105	;'i'
  1775  0073CE  6E                 	db	110	;'n'
  1776  0073CF  74                 	db	116	;'t'
  1777  0073D0  65                 	db	101	;'e'
  1778  0073D1  72                 	db	114	;'r'
  1779  0073D2  66                 	db	102	;'f'
  1780  0073D3  61                 	db	97	;'a'
  1781  0073D4  63                 	db	99	;'c'
  1782  0073D5  65                 	db	101	;'e'
  1783  0073D6  20                 	db	32
  1784  0073D7  69                 	db	105	;'i'
  1785  0073D8  6E                 	db	110	;'n'
  1786  0073D9  20                 	db	32
  1787  0073DA  6C                 	db	108	;'l'
  1788  0073DB  69                 	db	105	;'i'
  1789  0073DC  73                 	db	115	;'s'
  1790  0073DD  74                 	db	116	;'t'
  1791  0073DE  65                 	db	101	;'e'
  1792  0073DF  6E                 	db	110	;'n'
  1793  0073E0  20                 	db	32
  1794  0073E1  6F                 	db	111	;'o'
  1795  0073E2  6E                 	db	110	;'n'
  1796  0073E3  6C                 	db	108	;'l'
  1797  0073E4  79                 	db	121	;'y'
  1798  0073E5  20                 	db	32
  1799  0073E6  6D                 	db	109	;'m'
  1800  0073E7  6F                 	db	111	;'o'
  1801  0073E8  64                 	db	100	;'d'
  1802  0073E9  65                 	db	101	;'e'
  1803  0073EA  2E                 	db	46
  1804  0073EB  0D                 	db	13
  1805  0073EC  0A                 	db	10
  1806  0073ED  00                 	db	0
  1807  0073EE                     STR_122:
  1808                           
  1809                           ; BSR set to: 1
  1810  0073EE  2D                 	db	45
  1811  0073EF  45                 	db	69	;'E'
  1812  0073F0  52                 	db	82	;'R'
  1813  0073F1  52                 	db	82	;'R'
  1814  0073F2  4F                 	db	79	;'O'
  1815  0073F3  52                 	db	82	;'R'
  1816  0073F4  20                 	db	32
  1817  0073F5  2D                 	db	45
  1818  0073F6  20                 	db	32
  1819  0073F7  4D                 	db	77	;'M'
  1820  0073F8  61                 	db	97	;'a'
  1821  0073F9  73                 	db	115	;'s'
  1822  0073FA  6B                 	db	107	;'k'
  1823  0073FB  20                 	db	32
  1824  0073FC  6E                 	db	110	;'n'
  1825  0073FD  75                 	db	117	;'u'
  1826  0073FE  6D                 	db	109	;'m'
  1827  0073FF  62                 	db	98	;'b'
  1828  007400  65                 	db	101	;'e'
  1829  007401  72                 	db	114	;'r'
  1830  007402  20                 	db	32
  1831  007403  63                 	db	99	;'c'
  1832  007404  61                 	db	97	;'a'
  1833  007405  6E                 	db	110	;'n'
  1834  007406  20                 	db	32
  1835  007407  6F                 	db	111	;'o'
  1836  007408  6E                 	db	110	;'n'
  1837  007409  6C                 	db	108	;'l'
  1838  00740A  79                 	db	121	;'y'
  1839  00740B  20                 	db	32
  1840  00740C  62                 	db	98	;'b'
  1841  00740D  65                 	db	101	;'e'
  1842  00740E  20                 	db	32
  1843  00740F  73                 	db	115	;'s'
  1844  007410  65                 	db	101	;'e'
  1845  007411  74                 	db	116	;'t'
  1846  007412  20                 	db	32
  1847  007413  61                 	db	97	;'a'
  1848  007414  73                 	db	115	;'s'
  1849  007415  20                 	db	32
  1850  007416  30                 	db	48	;'0'
  1851  007417  20                 	db	32
  1852  007418  6F                 	db	111	;'o'
  1853  007419  72                 	db	114	;'r'
  1854  00741A  20                 	db	32
  1855  00741B  31                 	db	49	;'1'
  1856  00741C  2E                 	db	46
  1857  00741D  0D                 	db	13
  1858  00741E  0A                 	db	10
  1859  00741F  00                 	db	0
  1860  007420                     STR_253:
  1861                           
  1862                           ; BSR set to: 1
  1863  007420  4C                 	db	76	;'L'
  1864  007421  4F                 	db	79	;'O'
  1865  007422  4F                 	db	79	;'O'
  1866  007423  50                 	db	80	;'P'
  1867  007424  42                 	db	66	;'B'
  1868  007425  41                 	db	65	;'A'
  1869  007426  43                 	db	67	;'C'
  1870  007427  4B                 	db	75	;'K'
  1871  007428  20                 	db	32
  1872  007429  2D                 	db	45
  1873  00742A  20                 	db	32
  1874  00742B  4F                 	db	79	;'O'
  1875  00742C  70                 	db	112	;'p'
  1876  00742D  65                 	db	101	;'e'
  1877  00742E  6E                 	db	110	;'n'
  1878  00742F  20                 	db	32
  1879  007430  43                 	db	67	;'C'
  1880  007431  41                 	db	65	;'A'
  1881  007432  4E                 	db	78	;'N'
  1882  007433  20                 	db	32
  1883  007434  69                 	db	105	;'i'
  1884  007435  6E                 	db	110	;'n'
  1885  007436  74                 	db	116	;'t'
  1886  007437  65                 	db	101	;'e'
  1887  007438  72                 	db	114	;'r'
  1888  007439  66                 	db	102	;'f'
  1889  00743A  61                 	db	97	;'a'
  1890  00743B  63                 	db	99	;'c'
  1891  00743C  65                 	db	101	;'e'
  1892  00743D  20                 	db	32
  1893  00743E  69                 	db	105	;'i'
  1894  00743F  6E                 	db	110	;'n'
  1895  007440  20                 	db	32
  1896  007441  6C                 	db	108	;'l'
  1897  007442  6F                 	db	111	;'o'
  1898  007443  6F                 	db	111	;'o'
  1899  007444  70                 	db	112	;'p'
  1900  007445  62                 	db	98	;'b'
  1901  007446  61                 	db	97	;'a'
  1902  007447  63                 	db	99	;'c'
  1903  007448  6B                 	db	107	;'k'
  1904  007449  20                 	db	32
  1905  00744A  6D                 	db	109	;'m'
  1906  00744B  6F                 	db	111	;'o'
  1907  00744C  64                 	db	100	;'d'
  1908  00744D  65                 	db	101	;'e'
  1909  00744E  2E                 	db	46
  1910  00744F  0D                 	db	13
  1911  007450  0A                 	db	10
  1912  007451  00                 	db	0
  1913  007452                     STR_255:
  1914                           
  1915                           ; BSR set to: 1
  1916  007452  56                 	db	86	;'V'
  1917  007453  45                 	db	69	;'E'
  1918  007454  52                 	db	82	;'R'
  1919  007455  53                 	db	83	;'S'
  1920  007456  49                 	db	73	;'I'
  1921  007457  4F                 	db	79	;'O'
  1922  007458  4E                 	db	78	;'N'
  1923  007459  20                 	db	32
  1924  00745A  2D                 	db	45
  1925  00745B  20                 	db	32
  1926  00745C  44                 	db	68	;'D'
  1927  00745D  69                 	db	105	;'i'
  1928  00745E  73                 	db	115	;'s'
  1929  00745F  70                 	db	112	;'p'
  1930  007460  6C                 	db	108	;'l'
  1931  007461  61                 	db	97	;'a'
  1932  007462  79                 	db	121	;'y'
  1933  007463  20                 	db	32
  1934  007464  66                 	db	102	;'f'
  1935  007465  69                 	db	105	;'i'
  1936  007466  72                 	db	114	;'r'
  1937  007467  6D                 	db	109	;'m'
  1938  007468  77                 	db	119	;'w'
  1939  007469  61                 	db	97	;'a'
  1940  00746A  72                 	db	114	;'r'
  1941  00746B  65                 	db	101	;'e'
  1942  00746C  20                 	db	32
  1943  00746D  76                 	db	118	;'v'
  1944  00746E  65                 	db	101	;'e'
  1945  00746F  72                 	db	114	;'r'
  1946  007470  73                 	db	115	;'s'
  1947  007471  69                 	db	105	;'i'
  1948  007472  6F                 	db	111	;'o'
  1949  007473  6E                 	db	110	;'n'
  1950  007474  20                 	db	32
  1951  007475  69                 	db	105	;'i'
  1952  007476  6E                 	db	110	;'n'
  1953  007477  66                 	db	102	;'f'
  1954  007478  6F                 	db	111	;'o'
  1955  007479  72                 	db	114	;'r'
  1956  00747A  6D                 	db	109	;'m'
  1957  00747B  61                 	db	97	;'a'
  1958  00747C  74                 	db	116	;'t'
  1959  00747D  69                 	db	105	;'i'
  1960  00747E  6F                 	db	111	;'o'
  1961  00747F  6E                 	db	110	;'n'
  1962  007480  2E                 	db	46
  1963  007481  0D                 	db	13
  1964  007482  0A                 	db	10
  1965  007483  00                 	db	0
  1966  007484                     STR_275:
  1967                           
  1968                           ; BSR set to: 1
  1969  007484  20                 	db	32
  1970  007485  20                 	db	32
  1971  007486  20                 	db	32
  1972  007487  20                 	db	32
  1973  007488  20                 	db	32
  1974  007489  20                 	db	32
  1975  00748A  20                 	db	32
  1976  00748B  20                 	db	32
  1977  00748C  20                 	db	32
  1978  00748D  20                 	db	32
  1979  00748E  20                 	db	32
  1980  00748F  20                 	db	32
  1981  007490  20                 	db	32
  1982  007491  20                 	db	32
  1983  007492  20                 	db	32
  1984  007493  20                 	db	32
  1985  007494  46                 	db	70	;'F'
  1986  007495  6F                 	db	111	;'o'
  1987  007496  72                 	db	114	;'r'
  1988  007497  6D                 	db	109	;'m'
  1989  007498  61                 	db	97	;'a'
  1990  007499  74                 	db	116	;'t'
  1991  00749A  3A                 	db	58	;':'
  1992  00749B  20                 	db	32
  1993  00749C  73                 	db	115	;'s'
  1994  00749D  65                 	db	101	;'e'
  1995  00749E  74                 	db	116	;'t'
  1996  00749F  20                 	db	32
  1997  0074A0  72                 	db	114	;'r'
  1998  0074A1  77                 	db	119	;'w'
  1999  0074A2  74                 	db	116	;'t'
  2000  0074A3  69                 	db	105	;'i'
  2001  0074A4  6D                 	db	109	;'m'
  2002  0074A5  65                 	db	101	;'e'
  2003  0074A6  6F                 	db	111	;'o'
  2004  0074A7  75                 	db	117	;'u'
  2005  0074A8  74                 	db	116	;'t'
  2006  0074A9  20                 	db	32
  2007  0074AA  74                 	db	116	;'t'
  2008  0074AB  69                 	db	105	;'i'
  2009  0074AC  6D                 	db	109	;'m'
  2010  0074AD  65                 	db	101	;'e'
  2011  0074AE  6F                 	db	111	;'o'
  2012  0074AF  75                 	db	117	;'u'
  2013  0074B0  74                 	db	116	;'t'
  2014  0074B1  2E                 	db	46
  2015  0074B2  0D                 	db	13
  2016  0074B3  0A                 	db	10
  2017  0074B4  00                 	db	0
  2018  0074B5                     STR_273:
  2019                           
  2020                           ; BSR set to: 1
  2021  0074B5  20                 	db	32
  2022  0074B6  20                 	db	32
  2023  0074B7  20                 	db	32
  2024  0074B8  20                 	db	32
  2025  0074B9  44                 	db	68	;'D'
  2026  0074BA  45                 	db	69	;'E'
  2027  0074BB  43                 	db	67	;'C'
  2028  0074BC  49                 	db	73	;'I'
  2029  0074BD  4D                 	db	77	;'M'
  2030  0074BE  41                 	db	65	;'A'
  2031  0074BF  4C                 	db	76	;'L'
  2032  0074C0  20                 	db	32
  2033  0074C1  2D                 	db	45
  2034  0074C2  20                 	db	32
  2035  0074C3  44                 	db	68	;'D'
  2036  0074C4  69                 	db	105	;'i'
  2037  0074C5  73                 	db	115	;'s'
  2038  0074C6  70                 	db	112	;'p'
  2039  0074C7  6C                 	db	108	;'l'
  2040  0074C8  61                 	db	97	;'a'
  2041  0074C9  79                 	db	121	;'y'
  2042  0074CA  20                 	db	32
  2043  0074CB  6E                 	db	110	;'n'
  2044  0074CC  75                 	db	117	;'u'
  2045  0074CD  6D                 	db	109	;'m'
  2046  0074CE  65                 	db	101	;'e'
  2047  0074CF  72                 	db	114	;'r'
  2048  0074D0  69                 	db	105	;'i'
  2049  0074D1  63                 	db	99	;'c'
  2050  0074D2  61                 	db	97	;'a'
  2051  0074D3  6C                 	db	108	;'l'
  2052  0074D4  73                 	db	115	;'s'
  2053  0074D5  20                 	db	32
  2054  0074D6  69                 	db	105	;'i'
  2055  0074D7  6E                 	db	110	;'n'
  2056  0074D8  20                 	db	32
  2057  0074D9  64                 	db	100	;'d'
  2058  0074DA  65                 	db	101	;'e'
  2059  0074DB  63                 	db	99	;'c'
  2060  0074DC  69                 	db	105	;'i'
  2061  0074DD  6D                 	db	109	;'m'
  2062  0074DE  61                 	db	97	;'a'
  2063  0074DF  6C                 	db	108	;'l'
  2064  0074E0  2E                 	db	46
  2065  0074E1  0D                 	db	13
  2066  0074E2  0A                 	db	10
  2067  0074E3  00                 	db	0
  2068  0074E4                     STR_272:
  2069                           
  2070                           ; BSR set to: 1
  2071  0074E4  20                 	db	32
  2072  0074E5  20                 	db	32
  2073  0074E6  20                 	db	32
  2074  0074E7  20                 	db	32
  2075  0074E8  48                 	db	72	;'H'
  2076  0074E9  45                 	db	69	;'E'
  2077  0074EA  58                 	db	88	;'X'
  2078  0074EB  20                 	db	32
  2079  0074EC  2D                 	db	45
  2080  0074ED  20                 	db	32
  2081  0074EE  44                 	db	68	;'D'
  2082  0074EF  69                 	db	105	;'i'
  2083  0074F0  73                 	db	115	;'s'
  2084  0074F1  70                 	db	112	;'p'
  2085  0074F2  6C                 	db	108	;'l'
  2086  0074F3  61                 	db	97	;'a'
  2087  0074F4  79                 	db	121	;'y'
  2088  0074F5  20                 	db	32
  2089  0074F6  6E                 	db	110	;'n'
  2090  0074F7  75                 	db	117	;'u'
  2091  0074F8  6D                 	db	109	;'m'
  2092  0074F9  65                 	db	101	;'e'
  2093  0074FA  72                 	db	114	;'r'
  2094  0074FB  69                 	db	105	;'i'
  2095  0074FC  63                 	db	99	;'c'
  2096  0074FD  61                 	db	97	;'a'
  2097  0074FE  6C                 	db	108	;'l'
  2098  0074FF  73                 	db	115	;'s'
  2099  007500  20                 	db	32
  2100  007501  69                 	db	105	;'i'
  2101  007502  6E                 	db	110	;'n'
  2102  007503  20                 	db	32
  2103  007504  68                 	db	104	;'h'
  2104  007505  65                 	db	101	;'e'
  2105  007506  78                 	db	120	;'x'
  2106  007507  61                 	db	97	;'a'
  2107  007508  64                 	db	100	;'d'
  2108  007509  65                 	db	101	;'e'
  2109  00750A  63                 	db	99	;'c'
  2110  00750B  69                 	db	105	;'i'
  2111  00750C  6D                 	db	109	;'m'
  2112  00750D  61                 	db	97	;'a'
  2113  00750E  6C                 	db	108	;'l'
  2114  00750F  2E                 	db	46
  2115  007510  0D                 	db	13
  2116  007511  0A                 	db	10
  2117  007512  00                 	db	0
  2118  007513                     STR_263:
  2119                           
  2120                           ; BSR set to: 1
  2121  007513  46                 	db	70	;'F'
  2122  007514  49                 	db	73	;'I'
  2123  007515  4E                 	db	78	;'N'
  2124  007516  44                 	db	68	;'D'
  2125  007517  20                 	db	32
  2126  007518  2D                 	db	45
  2127  007519  20                 	db	32
  2128  00751A  46                 	db	70	;'F'
  2129  00751B  69                 	db	105	;'i'
  2130  00751C  6E                 	db	110	;'n'
  2131  00751D  64                 	db	100	;'d'
  2132  00751E  20                 	db	32
  2133  00751F  61                 	db	97	;'a'
  2134  007520  76                 	db	118	;'v'
  2135  007521  61                 	db	97	;'a'
  2136  007522  69                 	db	105	;'i'
  2137  007523  6C                 	db	108	;'l'
  2138  007524  61                 	db	97	;'a'
  2139  007525  62                 	db	98	;'b'
  2140  007526  6C                 	db	108	;'l'
  2141  007527  65                 	db	101	;'e'
  2142  007528  20                 	db	32
  2143  007529  43                 	db	67	;'C'
  2144  00752A  41                 	db	65	;'A'
  2145  00752B  4E                 	db	78	;'N'
  2146  00752C  34                 	db	52	;'4'
  2147  00752D  56                 	db	86	;'V'
  2148  00752E  53                 	db	83	;'S'
  2149  00752F  43                 	db	67	;'C'
  2150  007530  50                 	db	80	;'P'
  2151  007531  20                 	db	32
  2152  007532  6E                 	db	110	;'n'
  2153  007533  6F                 	db	111	;'o'
  2154  007534  64                 	db	100	;'d'
  2155  007535  65                 	db	101	;'e'
  2156  007536  73                 	db	115	;'s'
  2157  007537  20                 	db	32
  2158  007538  6F                 	db	111	;'o'
  2159  007539  6E                 	db	110	;'n'
  2160  00753A  20                 	db	32
  2161  00753B  62                 	db	98	;'b'
  2162  00753C  75                 	db	117	;'u'
  2163  00753D  73                 	db	115	;'s'
  2164  00753E  2E                 	db	46
  2165  00753F  0D                 	db	13
  2166  007540  0A                 	db	10
  2167  007541  00                 	db	0
  2168  007542                     STR_164:
  2169                           
  2170                           ; BSR set to: 1
  2171  007542  2B                 	db	43
  2172  007543  45                 	db	69	;'E'
  2173  007544  52                 	db	82	;'R'
  2174  007545  52                 	db	82	;'R'
  2175  007546  4F                 	db	79	;'O'
  2176  007547  52                 	db	82	;'R'
  2177  007548  20                 	db	32
  2178  007549  2D                 	db	45
  2179  00754A  20                 	db	32
  2180  00754B  57                 	db	87	;'W'
  2181  00754C  72                 	db	114	;'r'
  2182  00754D  6F                 	db	111	;'o'
  2183  00754E  6E                 	db	110	;'n'
  2184  00754F  67                 	db	103	;'g'
  2185  007550  20                 	db	32
  2186  007551  61                 	db	97	;'a'
  2187  007552  72                 	db	114	;'r'
  2188  007553  67                 	db	103	;'g'
  2189  007554  75                 	db	117	;'u'
  2190  007555  6D                 	db	109	;'m'
  2191  007556  65                 	db	101	;'e'
  2192  007557  6E                 	db	110	;'n'
  2193  007558  74                 	db	116	;'t'
  2194  007559  20                 	db	32
  2195  00755A  74                 	db	116	;'t'
  2196  00755B  6F                 	db	111	;'o'
  2197  00755C  20                 	db	32
  2198  00755D  27                 	db	39
  2199  00755E  73                 	db	115	;'s'
  2200  00755F  65                 	db	101	;'e'
  2201  007560  74                 	db	116	;'t'
  2202  007561  20                 	db	32
  2203  007562  74                 	db	116	;'t'
  2204  007563  69                 	db	105	;'i'
  2205  007564  6D                 	db	109	;'m'
  2206  007565  65                 	db	101	;'e'
  2207  007566  73                 	db	115	;'s'
  2208  007567  74                 	db	116	;'t'
  2209  007568  61                 	db	97	;'a'
  2210  007569  6D                 	db	109	;'m'
  2211  00756A  70                 	db	112	;'p'
  2212  00756B  27                 	db	39
  2213  00756C  2E                 	db	46
  2214  00756D  0D                 	db	13
  2215  00756E  0A                 	db	10
  2216  00756F  00                 	db	0
  2217  007570                     STR_251:
  2218                           
  2219                           ; BSR set to: 1
  2220  007570  53                 	db	83	;'S'
  2221  007571  49                 	db	73	;'I'
  2222  007572  4C                 	db	76	;'L'
  2223  007573  45                 	db	69	;'E'
  2224  007574  4E                 	db	78	;'N'
  2225  007575  54                 	db	84	;'T'
  2226  007576  20                 	db	32
  2227  007577  2D                 	db	45
  2228  007578  20                 	db	32
  2229  007579  4F                 	db	79	;'O'
  2230  00757A  70                 	db	112	;'p'
  2231  00757B  65                 	db	101	;'e'
  2232  00757C  6E                 	db	110	;'n'
  2233  00757D  20                 	db	32
  2234  00757E  43                 	db	67	;'C'
  2235  00757F  41                 	db	65	;'A'
  2236  007580  4E                 	db	78	;'N'
  2237  007581  20                 	db	32
  2238  007582  69                 	db	105	;'i'
  2239  007583  6E                 	db	110	;'n'
  2240  007584  74                 	db	116	;'t'
  2241  007585  65                 	db	101	;'e'
  2242  007586  72                 	db	114	;'r'
  2243  007587  66                 	db	102	;'f'
  2244  007588  61                 	db	97	;'a'
  2245  007589  63                 	db	99	;'c'
  2246  00758A  65                 	db	101	;'e'
  2247  00758B  20                 	db	32
  2248  00758C  69                 	db	105	;'i'
  2249  00758D  6E                 	db	110	;'n'
  2250  00758E  20                 	db	32
  2251  00758F  73                 	db	115	;'s'
  2252  007590  69                 	db	105	;'i'
  2253  007591  6C                 	db	108	;'l'
  2254  007592  65                 	db	101	;'e'
  2255  007593  6E                 	db	110	;'n'
  2256  007594  74                 	db	116	;'t'
  2257  007595  20                 	db	32
  2258  007596  6D                 	db	109	;'m'
  2259  007597  6F                 	db	111	;'o'
  2260  007598  64                 	db	100	;'d'
  2261  007599  65                 	db	101	;'e'
  2262  00759A  2E                 	db	46
  2263  00759B  0D                 	db	13
  2264  00759C  0A                 	db	10
  2265  00759D  00                 	db	0
  2266  00759E                     STR_256:
  2267                           
  2268                           ; BSR set to: 1
  2269  00759E  49                 	db	73	;'I'
  2270  00759F  46                 	db	70	;'F'
  2271  0075A0  4D                 	db	77	;'M'
  2272  0075A1  4F                 	db	79	;'O'
  2273  0075A2  44                 	db	68	;'D'
  2274  0075A3  45                 	db	69	;'E'
  2275  0075A4  20                 	db	32
  2276  0075A5  2D                 	db	45
  2277  0075A6  20                 	db	32
  2278  0075A7  44                 	db	68	;'D'
  2279  0075A8  69                 	db	105	;'i'
  2280  0075A9  73                 	db	115	;'s'
  2281  0075AA  70                 	db	112	;'p'
  2282  0075AB  6C                 	db	108	;'l'
  2283  0075AC  61                 	db	97	;'a'
  2284  0075AD  79                 	db	121	;'y'
  2285  0075AE  20                 	db	32
  2286  0075AF  73                 	db	115	;'s'
  2287  0075B0  65                 	db	101	;'e'
  2288  0075B1  6C                 	db	108	;'l'
  2289  0075B2  65                 	db	101	;'e'
  2290  0075B3  63                 	db	99	;'c'
  2291  0075B4  74                 	db	116	;'t'
  2292  0075B5  65                 	db	101	;'e'
  2293  0075B6  64                 	db	100	;'d'
  2294  0075B7  20                 	db	32
  2295  0075B8  69                 	db	105	;'i'
  2296  0075B9  6E                 	db	110	;'n'
  2297  0075BA  74                 	db	116	;'t'
  2298  0075BB  65                 	db	101	;'e'
  2299  0075BC  72                 	db	114	;'r'
  2300  0075BD  66                 	db	102	;'f'
  2301  0075BE  61                 	db	97	;'a'
  2302  0075BF  63                 	db	99	;'c'
  2303  0075C0  65                 	db	101	;'e'
  2304  0075C1  20                 	db	32
  2305  0075C2  6D                 	db	109	;'m'
  2306  0075C3  6F                 	db	111	;'o'
  2307  0075C4  64                 	db	100	;'d'
  2308  0075C5  65                 	db	101	;'e'
  2309  0075C6  2E                 	db	46
  2310  0075C7  0D                 	db	13
  2311  0075C8  0A                 	db	10
  2312  0075C9  00                 	db	0
  2313  0075CA                     STR_250:
  2314                           
  2315                           ; BSR set to: 1
  2316  0075CA  4F                 	db	79	;'O'
  2317  0075CB  50                 	db	80	;'P'
  2318  0075CC  45                 	db	69	;'E'
  2319  0075CD  4E                 	db	78	;'N'
  2320  0075CE  20                 	db	32
  2321  0075CF  2D                 	db	45
  2322  0075D0  20                 	db	32
  2323  0075D1  4F                 	db	79	;'O'
  2324  0075D2  70                 	db	112	;'p'
  2325  0075D3  65                 	db	101	;'e'
  2326  0075D4  6E                 	db	110	;'n'
  2327  0075D5  20                 	db	32
  2328  0075D6  43                 	db	67	;'C'
  2329  0075D7  41                 	db	65	;'A'
  2330  0075D8  4E                 	db	78	;'N'
  2331  0075D9  20                 	db	32
  2332  0075DA  69                 	db	105	;'i'
  2333  0075DB  6E                 	db	110	;'n'
  2334  0075DC  74                 	db	116	;'t'
  2335  0075DD  65                 	db	101	;'e'
  2336  0075DE  72                 	db	114	;'r'
  2337  0075DF  66                 	db	102	;'f'
  2338  0075E0  61                 	db	97	;'a'
  2339  0075E1  63                 	db	99	;'c'
  2340  0075E2  65                 	db	101	;'e'
  2341  0075E3  20                 	db	32
  2342  0075E4  69                 	db	105	;'i'
  2343  0075E5  6E                 	db	110	;'n'
  2344  0075E6  20                 	db	32
  2345  0075E7  6E                 	db	110	;'n'
  2346  0075E8  6F                 	db	111	;'o'
  2347  0075E9  72                 	db	114	;'r'
  2348  0075EA  6D                 	db	109	;'m'
  2349  0075EB  61                 	db	97	;'a'
  2350  0075EC  6C                 	db	108	;'l'
  2351  0075ED  20                 	db	32
  2352  0075EE  6D                 	db	109	;'m'
  2353  0075EF  6F                 	db	111	;'o'
  2354  0075F0  64                 	db	100	;'d'
  2355  0075F1  65                 	db	101	;'e'
  2356  0075F2  2E                 	db	46
  2357  0075F3  0D                 	db	13
  2358  0075F4  0A                 	db	10
  2359  0075F5  00                 	db	0
  2360  0075F6                     STR_135:
  2361                           
  2362                           ; BSR set to: 1
  2363  0075F6  2B                 	db	43
  2364  0075F7  4F                 	db	79	;'O'
  2365  0075F8  4B                 	db	75	;'K'
  2366  0075F9  20                 	db	32
  2367  0075FA  2D                 	db	45
  2368  0075FB  20                 	db	32
  2369  0075FC  4E                 	db	78	;'N'
  2370  0075FD  75                 	db	117	;'u'
  2371  0075FE  6D                 	db	109	;'m'
  2372  0075FF  65                 	db	101	;'e'
  2373  007600  72                 	db	114	;'r'
  2374  007601  69                 	db	105	;'i'
  2375  007602  63                 	db	99	;'c'
  2376  007603  61                 	db	97	;'a'
  2377  007604  6C                 	db	108	;'l'
  2378  007605  20                 	db	32
  2379  007606  6F                 	db	111	;'o'
  2380  007607  75                 	db	117	;'u'
  2381  007608  74                 	db	116	;'t'
  2382  007609  70                 	db	112	;'p'
  2383  00760A  75                 	db	117	;'u'
  2384  00760B  74                 	db	116	;'t'
  2385  00760C  20                 	db	32
  2386  00760D  6E                 	db	110	;'n'
  2387  00760E  6F                 	db	111	;'o'
  2388  00760F  77                 	db	119	;'w'
  2389  007610  20                 	db	32
  2390  007611  69                 	db	105	;'i'
  2391  007612  6E                 	db	110	;'n'
  2392  007613  20                 	db	32
  2393  007614  68                 	db	104	;'h'
  2394  007615  65                 	db	101	;'e'
  2395  007616  78                 	db	120	;'x'
  2396  007617  61                 	db	97	;'a'
  2397  007618  64                 	db	100	;'d'
  2398  007619  65                 	db	101	;'e'
  2399  00761A  63                 	db	99	;'c'
  2400  00761B  69                 	db	105	;'i'
  2401  00761C  6D                 	db	109	;'m'
  2402  00761D  61                 	db	97	;'a'
  2403  00761E  6C                 	db	108	;'l'
  2404  00761F  0D                 	db	13
  2405  007620  0A                 	db	10
  2406  007621  00                 	db	0
  2407  007622                     STR_110:
  2408                           
  2409                           ; BSR set to: 1
  2410  007622  2D                 	db	45
  2411  007623  45                 	db	69	;'E'
  2412  007624  52                 	db	82	;'R'
  2413  007625  52                 	db	82	;'R'
  2414  007626  4F                 	db	79	;'O'
  2415  007627  52                 	db	82	;'R'
  2416  007628  20                 	db	32
  2417  007629  2D                 	db	45
  2418  00762A  20                 	db	32
  2419  00762B  66                 	db	102	;'f'
  2420  00762C  69                 	db	105	;'i'
  2421  00762D  6C                 	db	108	;'l'
  2422  00762E  74                 	db	116	;'t'
  2423  00762F  65                 	db	101	;'e'
  2424  007630  72                 	db	114	;'r'
  2425  007631  20                 	db	32
  2426  007632  66                 	db	102	;'f'
  2427  007633  6F                 	db	111	;'o'
  2428  007634  72                 	db	114	;'r'
  2429  007635  20                 	db	32
  2430  007636  70                 	db	112	;'p'
  2431  007637  72                 	db	114	;'r'
  2432  007638  69                 	db	105	;'i'
  2433  007639  6F                 	db	111	;'o'
  2434  00763A  72                 	db	114	;'r'
  2435  00763B  69                 	db	105	;'i'
  2436  00763C  74                 	db	116	;'t'
  2437  00763D  79                 	db	121	;'y'
  2438  00763E  20                 	db	32
  2439  00763F  69                 	db	105	;'i'
  2440  007640  73                 	db	115	;'s'
  2441  007641  20                 	db	32
  2442  007642  6D                 	db	109	;'m'
  2443  007643  69                 	db	105	;'i'
  2444  007644  73                 	db	115	;'s'
  2445  007645  73                 	db	115	;'s'
  2446  007646  69                 	db	105	;'i'
  2447  007647  6E                 	db	110	;'n'
  2448  007648  67                 	db	103	;'g'
  2449  007649  0D                 	db	13
  2450  00764A  0A                 	db	10
  2451  00764B  00                 	db	0
  2452  00764C                     STR_158:
  2453                           
  2454                           ; BSR set to: 1
  2455  00764C  2B                 	db	43
  2456  00764D  45                 	db	69	;'E'
  2457  00764E  52                 	db	82	;'R'
  2458  00764F  52                 	db	82	;'R'
  2459  007650  4F                 	db	79	;'O'
  2460  007651  52                 	db	82	;'R'
  2461  007652  20                 	db	32
  2462  007653  2D                 	db	45
  2463  007654  20                 	db	32
  2464  007655  57                 	db	87	;'W'
  2465  007656  72                 	db	114	;'r'
  2466  007657  6F                 	db	111	;'o'
  2467  007658  6E                 	db	110	;'n'
  2468  007659  67                 	db	103	;'g'
  2469  00765A  20                 	db	32
  2470  00765B  61                 	db	97	;'a'
  2471  00765C  72                 	db	114	;'r'
  2472  00765D  67                 	db	103	;'g'
  2473  00765E  75                 	db	117	;'u'
  2474  00765F  6D                 	db	109	;'m'
  2475  007660  65                 	db	101	;'e'
  2476  007661  6E                 	db	110	;'n'
  2477  007662  74                 	db	116	;'t'
  2478  007663  20                 	db	32
  2479  007664  74                 	db	116	;'t'
  2480  007665  6F                 	db	111	;'o'
  2481  007666  20                 	db	32
  2482  007667  27                 	db	39
  2483  007668  73                 	db	115	;'s'
  2484  007669  65                 	db	101	;'e'
  2485  00766A  74                 	db	116	;'t'
  2486  00766B  20                 	db	32
  2487  00766C  65                 	db	101	;'e'
  2488  00766D  63                 	db	99	;'c'
  2489  00766E  68                 	db	104	;'h'
  2490  00766F  6F                 	db	111	;'o'
  2491  007670  27                 	db	39
  2492  007671  2E                 	db	46
  2493  007672  0D                 	db	13
  2494  007673  0A                 	db	10
  2495  007674  00                 	db	0
  2496  007675                     STR_116:
  2497                           
  2498                           ; BSR set to: 1
  2499  007675  2D                 	db	45
  2500  007676  45                 	db	69	;'E'
  2501  007677  52                 	db	82	;'R'
  2502  007678  52                 	db	82	;'R'
  2503  007679  4F                 	db	79	;'O'
  2504  00767A  52                 	db	82	;'R'
  2505  00767B  20                 	db	32
  2506  00767C  2D                 	db	45
  2507  00767D  20                 	db	32
  2508  00767E  66                 	db	102	;'f'
  2509  00767F  69                 	db	105	;'i'
  2510  007680  6C                 	db	108	;'l'
  2511  007681  74                 	db	116	;'t'
  2512  007682  65                 	db	101	;'e'
  2513  007683  72                 	db	114	;'r'
  2514  007684  20                 	db	32
  2515  007685  66                 	db	102	;'f'
  2516  007686  6F                 	db	111	;'o'
  2517  007687  72                 	db	114	;'r'
  2518  007688  20                 	db	32
  2519  007689  6E                 	db	110	;'n'
  2520  00768A  69                 	db	105	;'i'
  2521  00768B  64                 	db	100	;'d'
  2522  00768C  65                 	db	101	;'e'
  2523  00768D  20                 	db	32
  2524  00768E  69                 	db	105	;'i'
  2525  00768F  64                 	db	100	;'d'
  2526  007690  20                 	db	32
  2527  007691  69                 	db	105	;'i'
  2528  007692  73                 	db	115	;'s'
  2529  007693  20                 	db	32
  2530  007694  6D                 	db	109	;'m'
  2531  007695  69                 	db	105	;'i'
  2532  007696  73                 	db	115	;'s'
  2533  007697  73                 	db	115	;'s'
  2534  007698  69                 	db	105	;'i'
  2535  007699  6E                 	db	110	;'n'
  2536  00769A  67                 	db	103	;'g'
  2537  00769B  0D                 	db	13
  2538  00769C  0A                 	db	10
  2539  00769D  00                 	db	0
  2540  00769E                     STR_262:
  2541                           
  2542                           ; BSR set to: 1
  2543  00769E  48                 	db	72	;'H'
  2544  00769F  45                 	db	69	;'E'
  2545  0076A0  4C                 	db	76	;'L'
  2546  0076A1  50                 	db	80	;'P'
  2547  0076A2  20                 	db	32
  2548  0076A3  2D                 	db	45
  2549  0076A4  20                 	db	32
  2550  0076A5  44                 	db	68	;'D'
  2551  0076A6  69                 	db	105	;'i'
  2552  0076A7  73                 	db	115	;'s'
  2553  0076A8  70                 	db	112	;'p'
  2554  0076A9  6C                 	db	108	;'l'
  2555  0076AA  61                 	db	97	;'a'
  2556  0076AB  79                 	db	121	;'y'
  2557  0076AC  20                 	db	32
  2558  0076AD  74                 	db	116	;'t'
  2559  0076AE  68                 	db	104	;'h'
  2560  0076AF  69                 	db	105	;'i'
  2561  0076B0  73                 	db	115	;'s'
  2562  0076B1  20                 	db	32
  2563  0076B2  68                 	db	104	;'h'
  2564  0076B3  65                 	db	101	;'e'
  2565  0076B4  6C                 	db	108	;'l'
  2566  0076B5  70                 	db	112	;'p'
  2567  0076B6  20                 	db	32
  2568  0076B7  69                 	db	105	;'i'
  2569  0076B8  6E                 	db	110	;'n'
  2570  0076B9  66                 	db	102	;'f'
  2571  0076BA  6F                 	db	111	;'o'
  2572  0076BB  72                 	db	114	;'r'
  2573  0076BC  6D                 	db	109	;'m'
  2574  0076BD  61                 	db	97	;'a'
  2575  0076BE  74                 	db	116	;'t'
  2576  0076BF  69                 	db	105	;'i'
  2577  0076C0  6F                 	db	111	;'o'
  2578  0076C1  6E                 	db	110	;'n'
  2579  0076C2  2E                 	db	46
  2580  0076C3  0D                 	db	13
  2581  0076C4  0A                 	db	10
  2582  0076C5  00                 	db	0
  2583  0076C6                     STR_125:
  2584                           
  2585                           ; BSR set to: 1
  2586  0076C6  2D                 	db	45
  2587  0076C7  45                 	db	69	;'E'
  2588  0076C8  52                 	db	82	;'R'
  2589  0076C9  52                 	db	82	;'R'
  2590  0076CA  4F                 	db	79	;'O'
  2591  0076CB  52                 	db	82	;'R'
  2592  0076CC  20                 	db	32
  2593  0076CD  2D                 	db	45
  2594  0076CE  20                 	db	32
  2595  0076CF  6D                 	db	109	;'m'
  2596  0076D0  61                 	db	97	;'a'
  2597  0076D1  73                 	db	115	;'s'
  2598  0076D2  6B                 	db	107	;'k'
  2599  0076D3  20                 	db	32
  2600  0076D4  66                 	db	102	;'f'
  2601  0076D5  6F                 	db	111	;'o'
  2602  0076D6  72                 	db	114	;'r'
  2603  0076D7  20                 	db	32
  2604  0076D8  70                 	db	112	;'p'
  2605  0076D9  72                 	db	114	;'r'
  2606  0076DA  69                 	db	105	;'i'
  2607  0076DB  6F                 	db	111	;'o'
  2608  0076DC  72                 	db	114	;'r'
  2609  0076DD  69                 	db	105	;'i'
  2610  0076DE  74                 	db	116	;'t'
  2611  0076DF  79                 	db	121	;'y'
  2612  0076E0  20                 	db	32
  2613  0076E1  69                 	db	105	;'i'
  2614  0076E2  73                 	db	115	;'s'
  2615  0076E3  20                 	db	32
  2616  0076E4  6D                 	db	109	;'m'
  2617  0076E5  69                 	db	105	;'i'
  2618  0076E6  73                 	db	115	;'s'
  2619  0076E7  73                 	db	115	;'s'
  2620  0076E8  69                 	db	105	;'i'
  2621  0076E9  6E                 	db	110	;'n'
  2622  0076EA  67                 	db	103	;'g'
  2623  0076EB  0D                 	db	13
  2624  0076EC  0A                 	db	10
  2625  0076ED  00                 	db	0
  2626  0076EE                     STR_137:
  2627                           
  2628                           ; BSR set to: 1
  2629  0076EE  2B                 	db	43
  2630  0076EF  4F                 	db	79	;'O'
  2631  0076F0  4B                 	db	75	;'K'
  2632  0076F1  20                 	db	32
  2633  0076F2  2D                 	db	45
  2634  0076F3  20                 	db	32
  2635  0076F4  4E                 	db	78	;'N'
  2636  0076F5  75                 	db	117	;'u'
  2637  0076F6  6D                 	db	109	;'m'
  2638  0076F7  65                 	db	101	;'e'
  2639  0076F8  72                 	db	114	;'r'
  2640  0076F9  69                 	db	105	;'i'
  2641  0076FA  63                 	db	99	;'c'
  2642  0076FB  61                 	db	97	;'a'
  2643  0076FC  6C                 	db	108	;'l'
  2644  0076FD  20                 	db	32
  2645  0076FE  6F                 	db	111	;'o'
  2646  0076FF  75                 	db	117	;'u'
  2647  007700  74                 	db	116	;'t'
  2648  007701  70                 	db	112	;'p'
  2649  007702  75                 	db	117	;'u'
  2650  007703  74                 	db	116	;'t'
  2651  007704  20                 	db	32
  2652  007705  6E                 	db	110	;'n'
  2653  007706  6F                 	db	111	;'o'
  2654  007707  77                 	db	119	;'w'
  2655  007708  20                 	db	32
  2656  007709  69                 	db	105	;'i'
  2657  00770A  6E                 	db	110	;'n'
  2658  00770B  20                 	db	32
  2659  00770C  64                 	db	100	;'d'
  2660  00770D  65                 	db	101	;'e'
  2661  00770E  63                 	db	99	;'c'
  2662  00770F  69                 	db	105	;'i'
  2663  007710  6D                 	db	109	;'m'
  2664  007711  61                 	db	97	;'a'
  2665  007712  6C                 	db	108	;'l'
  2666  007713  0D                 	db	13
  2667  007714  0A                 	db	10
  2668  007715  00                 	db	0
  2669  007716                     STR_108:
  2670                           
  2671                           ; BSR set to: 1
  2672  007716  2D                 	db	45
  2673  007717  45                 	db	69	;'E'
  2674  007718  52                 	db	82	;'R'
  2675  007719  52                 	db	82	;'R'
  2676  00771A  4F                 	db	79	;'O'
  2677  00771B  52                 	db	82	;'R'
  2678  00771C  20                 	db	32
  2679  00771D  2D                 	db	45
  2680  00771E  20                 	db	32
  2681  00771F  4E                 	db	78	;'N'
  2682  007720  6F                 	db	111	;'o'
  2683  007721  20                 	db	32
  2684  007722  66                 	db	102	;'f'
  2685  007723  69                 	db	105	;'i'
  2686  007724  6C                 	db	108	;'l'
  2687  007725  74                 	db	116	;'t'
  2688  007726  65                 	db	101	;'e'
  2689  007727  72                 	db	114	;'r'
  2690  007728  20                 	db	32
  2691  007729  6E                 	db	110	;'n'
  2692  00772A  75                 	db	117	;'u'
  2693  00772B  6D                 	db	109	;'m'
  2694  00772C  62                 	db	98	;'b'
  2695  00772D  65                 	db	101	;'e'
  2696  00772E  72                 	db	114	;'r'
  2697  00772F  20                 	db	32
  2698  007730  73                 	db	115	;'s'
  2699  007731  70                 	db	112	;'p'
  2700  007732  65                 	db	101	;'e'
  2701  007733  63                 	db	99	;'c'
  2702  007734  69                 	db	105	;'i'
  2703  007735  66                 	db	102	;'f'
  2704  007736  69                 	db	105	;'i'
  2705  007737  65                 	db	101	;'e'
  2706  007738  64                 	db	100	;'d'
  2707  007739  2E                 	db	46
  2708  00773A  0D                 	db	13
  2709  00773B  0A                 	db	10
  2710  00773C  00                 	db	0
  2711  00773D                     STR_261:
  2712                           
  2713                           ; BSR set to: 1
  2714  00773D  45                 	db	69	;'E'
  2715  00773E  52                 	db	82	;'R'
  2716  00773F  52                 	db	82	;'R'
  2717  007740  20                 	db	32
  2718  007741  2D                 	db	45
  2719  007742  20                 	db	32
  2720  007743  44                 	db	68	;'D'
  2721  007744  69                 	db	105	;'i'
  2722  007745  73                 	db	115	;'s'
  2723  007746  70                 	db	112	;'p'
  2724  007747  6C                 	db	108	;'l'
  2725  007748  61                 	db	97	;'a'
  2726  007749  79                 	db	121	;'y'
  2727  00774A  20                 	db	32
  2728  00774B  43                 	db	67	;'C'
  2729  00774C  41                 	db	65	;'A'
  2730  00774D  4E                 	db	78	;'N'
  2731  00774E  20                 	db	32
  2732  00774F  65                 	db	101	;'e'
  2733  007750  72                 	db	114	;'r'
  2734  007751  72                 	db	114	;'r'
  2735  007752  6F                 	db	111	;'o'
  2736  007753  72                 	db	114	;'r'
  2737  007754  20                 	db	32
  2738  007755  69                 	db	105	;'i'
  2739  007756  6E                 	db	110	;'n'
  2740  007757  66                 	db	102	;'f'
  2741  007758  6F                 	db	111	;'o'
  2742  007759  72                 	db	114	;'r'
  2743  00775A  6D                 	db	109	;'m'
  2744  00775B  61                 	db	97	;'a'
  2745  00775C  74                 	db	116	;'t'
  2746  00775D  69                 	db	105	;'i'
  2747  00775E  6F                 	db	111	;'o'
  2748  00775F  6E                 	db	110	;'n'
  2749  007760  2E                 	db	46
  2750  007761  0D                 	db	13
  2751  007762  0A                 	db	10
  2752  007763  00                 	db	0
  2753  007764                     STR_247:
  2754                           
  2755                           ; BSR set to: 1
  2756  007764  48                 	db	72	;'H'
  2757  007765  65                 	db	101	;'e'
  2758  007766  6C                 	db	108	;'l'
  2759  007767  70                 	db	112	;'p'
  2760  007768  20                 	db	32
  2761  007769  66                 	db	102	;'f'
  2762  00776A  6F                 	db	111	;'o'
  2763  00776B  72                 	db	114	;'r'
  2764  00776C  20                 	db	32
  2765  00776D  74                 	db	116	;'t'
  2766  00776E  68                 	db	104	;'h'
  2767  00776F  65                 	db	101	;'e'
  2768  007770  20                 	db	32
  2769  007771  46                 	db	70	;'F'
  2770  007772  72                 	db	114	;'r'
  2771  007773  61                 	db	97	;'a'
  2772  007774  6E                 	db	110	;'n'
  2773  007775  6B                 	db	107	;'k'
  2774  007776  66                 	db	102	;'f'
  2775  007777  75                 	db	117	;'u'
  2776  007778  72                 	db	114	;'r'
  2777  007779  74                 	db	116	;'t'
  2778  00777A  20                 	db	32
  2779  00777B  52                 	db	82	;'R'
  2780  00777C  53                 	db	83	;'S'
  2781  00777D  2D                 	db	45
  2782  00777E  32                 	db	50	;'2'
  2783  00777F  33                 	db	51	;'3'
  2784  007780  32                 	db	50	;'2'
  2785  007781  20                 	db	32
  2786  007782  6D                 	db	109	;'m'
  2787  007783  6F                 	db	111	;'o'
  2788  007784  64                 	db	100	;'d'
  2789  007785  75                 	db	117	;'u'
  2790  007786  6C                 	db	108	;'l'
  2791  007787  65                 	db	101	;'e'
  2792  007788  0D                 	db	13
  2793  007789  0A                 	db	10
  2794  00778A  00                 	db	0
  2795  00778B                     STR_131:
  2796                           
  2797                           ; BSR set to: 1
  2798  00778B  2D                 	db	45
  2799  00778C  45                 	db	69	;'E'
  2800  00778D  52                 	db	82	;'R'
  2801  00778E  52                 	db	82	;'R'
  2802  00778F  4F                 	db	79	;'O'
  2803  007790  52                 	db	82	;'R'
  2804  007791  20                 	db	32
  2805  007792  2D                 	db	45
  2806  007793  20                 	db	32
  2807  007794  6D                 	db	109	;'m'
  2808  007795  61                 	db	97	;'a'
  2809  007796  73                 	db	115	;'s'
  2810  007797  6B                 	db	107	;'k'
  2811  007798  20                 	db	32
  2812  007799  66                 	db	102	;'f'
  2813  00779A  6F                 	db	111	;'o'
  2814  00779B  72                 	db	114	;'r'
  2815  00779C  20                 	db	32
  2816  00779D  6E                 	db	110	;'n'
  2817  00779E  69                 	db	105	;'i'
  2818  00779F  64                 	db	100	;'d'
  2819  0077A0  65                 	db	101	;'e'
  2820  0077A1  20                 	db	32
  2821  0077A2  69                 	db	105	;'i'
  2822  0077A3  64                 	db	100	;'d'
  2823  0077A4  20                 	db	32
  2824  0077A5  69                 	db	105	;'i'
  2825  0077A6  73                 	db	115	;'s'
  2826  0077A7  20                 	db	32
  2827  0077A8  6D                 	db	109	;'m'
  2828  0077A9  69                 	db	105	;'i'
  2829  0077AA  73                 	db	115	;'s'
  2830  0077AB  73                 	db	115	;'s'
  2831  0077AC  69                 	db	105	;'i'
  2832  0077AD  6E                 	db	110	;'n'
  2833  0077AE  67                 	db	103	;'g'
  2834  0077AF  0D                 	db	13
  2835  0077B0  0A                 	db	10
  2836  0077B1  00                 	db	0
  2837  0077B2                     STR_112:
  2838                           
  2839                           ; BSR set to: 1
  2840  0077B2  2D                 	db	45
  2841  0077B3  45                 	db	69	;'E'
  2842  0077B4  52                 	db	82	;'R'
  2843  0077B5  52                 	db	82	;'R'
  2844  0077B6  4F                 	db	79	;'O'
  2845  0077B7  52                 	db	82	;'R'
  2846  0077B8  20                 	db	32
  2847  0077B9  2D                 	db	45
  2848  0077BA  20                 	db	32
  2849  0077BB  66                 	db	102	;'f'
  2850  0077BC  69                 	db	105	;'i'
  2851  0077BD  6C                 	db	108	;'l'
  2852  0077BE  74                 	db	116	;'t'
  2853  0077BF  65                 	db	101	;'e'
  2854  0077C0  72                 	db	114	;'r'
  2855  0077C1  20                 	db	32
  2856  0077C2  66                 	db	102	;'f'
  2857  0077C3  6F                 	db	111	;'o'
  2858  0077C4  72                 	db	114	;'r'
  2859  0077C5  20                 	db	32
  2860  0077C6  63                 	db	99	;'c'
  2861  0077C7  6C                 	db	108	;'l'
  2862  0077C8  61                 	db	97	;'a'
  2863  0077C9  73                 	db	115	;'s'
  2864  0077CA  73                 	db	115	;'s'
  2865  0077CB  20                 	db	32
  2866  0077CC  69                 	db	105	;'i'
  2867  0077CD  73                 	db	115	;'s'
  2868  0077CE  20                 	db	32
  2869  0077CF  6D                 	db	109	;'m'
  2870  0077D0  69                 	db	105	;'i'
  2871  0077D1  73                 	db	115	;'s'
  2872  0077D2  73                 	db	115	;'s'
  2873  0077D3  69                 	db	105	;'i'
  2874  0077D4  6E                 	db	110	;'n'
  2875  0077D5  67                 	db	103	;'g'
  2876  0077D6  0D                 	db	13
  2877  0077D7  0A                 	db	10
  2878  0077D8  00                 	db	0
  2879  0077D9                     STR_278:
  2880                           
  2881                           ; BSR set to: 1
  2882  0077D9  20                 	db	32
  2883  0077DA  20                 	db	32
  2884  0077DB  20                 	db	32
  2885  0077DC  20                 	db	32
  2886  0077DD  20                 	db	32
  2887  0077DE  20                 	db	32
  2888  0077DF  20                 	db	32
  2889  0077E0  20                 	db	32
  2890  0077E1  20                 	db	32
  2891  0077E2  20                 	db	32
  2892  0077E3  20                 	db	32
  2893  0077E4  4D                 	db	77	;'M'
  2894  0077E5  6F                 	db	111	;'o'
  2895  0077E6  64                 	db	100	;'d'
  2896  0077E7  65                 	db	101	;'e'
  2897  0077E8  73                 	db	115	;'s'
  2898  0077E9  3A                 	db	58	;':'
  2899  0077EA  20                 	db	32
  2900  0077EB  76                 	db	118	;'v'
  2901  0077EC  65                 	db	101	;'e'
  2902  0077ED  72                 	db	114	;'r'
  2903  0077EE  62                 	db	98	;'b'
  2904  0077EF  6F                 	db	111	;'o'
  2905  0077F0  73                 	db	115	;'s'
  2906  0077F1  65                 	db	101	;'e'
  2907  0077F2  7C                 	db	124
  2908  0077F3  76                 	db	118	;'v'
  2909  0077F4  73                 	db	115	;'s'
  2910  0077F5  63                 	db	99	;'c'
  2911  0077F6  70                 	db	112	;'p'
  2912  0077F7  7C                 	db	124
  2913  0077F8  73                 	db	115	;'s'
  2914  0077F9  6C                 	db	108	;'l'
  2915  0077FA  63                 	db	99	;'c'
  2916  0077FB  61                 	db	97	;'a'
  2917  0077FC  6E                 	db	110	;'n'
  2918  0077FD  0D                 	db	13
  2919  0077FE  0A                 	db	10
  2920  0077FF  00                 	db	0
  2921  007800                     STR_114:
  2922                           
  2923                           ; BSR set to: 1
  2924  007800  2D                 	db	45
  2925  007801  45                 	db	69	;'E'
  2926  007802  52                 	db	82	;'R'
  2927  007803  52                 	db	82	;'R'
  2928  007804  4F                 	db	79	;'O'
  2929  007805  52                 	db	82	;'R'
  2930  007806  20                 	db	32
  2931  007807  2D                 	db	45
  2932  007808  20                 	db	32
  2933  007809  66                 	db	102	;'f'
  2934  00780A  69                 	db	105	;'i'
  2935  00780B  6C                 	db	108	;'l'
  2936  00780C  74                 	db	116	;'t'
  2937  00780D  65                 	db	101	;'e'
  2938  00780E  72                 	db	114	;'r'
  2939  00780F  20                 	db	32
  2940  007810  66                 	db	102	;'f'
  2941  007811  6F                 	db	111	;'o'
  2942  007812  72                 	db	114	;'r'
  2943  007813  20                 	db	32
  2944  007814  74                 	db	116	;'t'
  2945  007815  79                 	db	121	;'y'
  2946  007816  70                 	db	112	;'p'
  2947  007817  65                 	db	101	;'e'
  2948  007818  20                 	db	32
  2949  007819  69                 	db	105	;'i'
  2950  00781A  73                 	db	115	;'s'
  2951  00781B  20                 	db	32
  2952  00781C  6D                 	db	109	;'m'
  2953  00781D  69                 	db	105	;'i'
  2954  00781E  73                 	db	115	;'s'
  2955  00781F  73                 	db	115	;'s'
  2956  007820  69                 	db	105	;'i'
  2957  007821  6E                 	db	110	;'n'
  2958  007822  67                 	db	103	;'g'
  2959  007823  0D                 	db	13
  2960  007824  0A                 	db	10
  2961  007825  00                 	db	0
  2962  007826                     STR_89:
  2963                           
  2964                           ; BSR set to: 1
  2965  007826  2B                 	db	43
  2966  007827  4F                 	db	79	;'O'
  2967  007828  4B                 	db	75	;'K'
  2968  007829  20                 	db	32
  2969  00782A  2D                 	db	45
  2970  00782B  20                 	db	32
  2971  00782C  56                 	db	86	;'V'
  2972  00782D  61                 	db	97	;'a'
  2973  00782E  6C                 	db	108	;'l'
  2974  00782F  75                 	db	117	;'u'
  2975  007830  65                 	db	101	;'e'
  2976  007831  20                 	db	32
  2977  007832  77                 	db	119	;'w'
  2978  007833  72                 	db	114	;'r'
  2979  007834  69                 	db	105	;'i'
  2980  007835  74                 	db	116	;'t'
  2981  007836  74                 	db	116	;'t'
  2982  007837  65                 	db	101	;'e'
  2983  007838  6E                 	db	110	;'n'
  2984  007839  20                 	db	32
  2985  00783A  73                 	db	115	;'s'
  2986  00783B  75                 	db	117	;'u'
  2987  00783C  63                 	db	99	;'c'
  2988  00783D  63                 	db	99	;'c'
  2989  00783E  65                 	db	101	;'e'
  2990  00783F  73                 	db	115	;'s'
  2991  007840  73                 	db	115	;'s'
  2992  007841  66                 	db	102	;'f'
  2993  007842  75                 	db	117	;'u'
  2994  007843  6C                 	db	108	;'l'
  2995  007844  6C                 	db	108	;'l'
  2996  007845  79                 	db	121	;'y'
  2997  007846  20                 	db	32
  2998  007847  66                 	db	102	;'f'
  2999  007848  6F                 	db	111	;'o'
  3000  007849  72                 	db	114	;'r'
  3001  00784A  20                 	db	32
  3002  00784B  00                 	db	0
  3003  00784C                     STR_123:
  3004                           
  3005                           ; BSR set to: 1
  3006  00784C  2D                 	db	45
  3007  00784D  45                 	db	69	;'E'
  3008  00784E  52                 	db	82	;'R'
  3009  00784F  52                 	db	82	;'R'
  3010  007850  4F                 	db	79	;'O'
  3011  007851  52                 	db	82	;'R'
  3012  007852  20                 	db	32
  3013  007853  2D                 	db	45
  3014  007854  20                 	db	32
  3015  007855  4E                 	db	78	;'N'
  3016  007856  6F                 	db	111	;'o'
  3017  007857  20                 	db	32
  3018  007858  6D                 	db	109	;'m'
  3019  007859  61                 	db	97	;'a'
  3020  00785A  73                 	db	115	;'s'
  3021  00785B  6B                 	db	107	;'k'
  3022  00785C  20                 	db	32
  3023  00785D  6E                 	db	110	;'n'
  3024  00785E  75                 	db	117	;'u'
  3025  00785F  6D                 	db	109	;'m'
  3026  007860  62                 	db	98	;'b'
  3027  007861  65                 	db	101	;'e'
  3028  007862  72                 	db	114	;'r'
  3029  007863  20                 	db	32
  3030  007864  73                 	db	115	;'s'
  3031  007865  70                 	db	112	;'p'
  3032  007866  65                 	db	101	;'e'
  3033  007867  63                 	db	99	;'c'
  3034  007868  69                 	db	105	;'i'
  3035  007869  66                 	db	102	;'f'
  3036  00786A  69                 	db	105	;'i'
  3037  00786B  65                 	db	101	;'e'
  3038  00786C  64                 	db	100	;'d'
  3039  00786D  2E                 	db	46
  3040  00786E  0D                 	db	13
  3041  00786F  0A                 	db	10
  3042  007870  00                 	db	0
  3043  007871                     STR_1:
  3044                           
  3045                           ; BSR set to: 1
  3046  007871  0D                 	db	13
  3047  007872  0A                 	db	10
  3048  007873  46                 	db	70	;'F'
  3049  007874  72                 	db	114	;'r'
  3050  007875  61                 	db	97	;'a'
  3051  007876  6E                 	db	110	;'n'
  3052  007877  6B                 	db	107	;'k'
  3053  007878  66                 	db	102	;'f'
  3054  007879  75                 	db	117	;'u'
  3055  00787A  72                 	db	114	;'r'
  3056  00787B  74                 	db	116	;'t'
  3057  00787C  20                 	db	32
  3058  00787D  52                 	db	82	;'R'
  3059  00787E  53                 	db	83	;'S'
  3060  00787F  2D                 	db	45
  3061  007880  32                 	db	50	;'2'
  3062  007881  33                 	db	51	;'3'
  3063  007882  32                 	db	50	;'2'
  3064  007883  20                 	db	32
  3065  007884  43                 	db	67	;'C'
  3066  007885  41                 	db	65	;'A'
  3067  007886  4E                 	db	78	;'N'
  3068  007887  34                 	db	52	;'4'
  3069  007888  56                 	db	86	;'V'
  3070  007889  53                 	db	83	;'S'
  3071  00788A  43                 	db	67	;'C'
  3072  00788B  50                 	db	80	;'P'
  3073  00788C  20                 	db	32
  3074  00788D  6D                 	db	109	;'m'
  3075  00788E  6F                 	db	111	;'o'
  3076  00788F  64                 	db	100	;'d'
  3077  007890  75                 	db	117	;'u'
  3078  007891  6C                 	db	108	;'l'
  3079  007892  65                 	db	101	;'e'
  3080  007893  0D                 	db	13
  3081  007894  0A                 	db	10
  3082  007895  00                 	db	0
  3083  007896                     STR_127:
  3084                           
  3085                           ; BSR set to: 1
  3086  007896  2D                 	db	45
  3087  007897  45                 	db	69	;'E'
  3088  007898  52                 	db	82	;'R'
  3089  007899  52                 	db	82	;'R'
  3090  00789A  4F                 	db	79	;'O'
  3091  00789B  52                 	db	82	;'R'
  3092  00789C  20                 	db	32
  3093  00789D  2D                 	db	45
  3094  00789E  20                 	db	32
  3095  00789F  6D                 	db	109	;'m'
  3096  0078A0  61                 	db	97	;'a'
  3097  0078A1  73                 	db	115	;'s'
  3098  0078A2  6B                 	db	107	;'k'
  3099  0078A3  20                 	db	32
  3100  0078A4  66                 	db	102	;'f'
  3101  0078A5  6F                 	db	111	;'o'
  3102  0078A6  72                 	db	114	;'r'
  3103  0078A7  20                 	db	32
  3104  0078A8  63                 	db	99	;'c'
  3105  0078A9  6C                 	db	108	;'l'
  3106  0078AA  61                 	db	97	;'a'
  3107  0078AB  73                 	db	115	;'s'
  3108  0078AC  73                 	db	115	;'s'
  3109  0078AD  20                 	db	32
  3110  0078AE  69                 	db	105	;'i'
  3111  0078AF  73                 	db	115	;'s'
  3112  0078B0  20                 	db	32
  3113  0078B1  6D                 	db	109	;'m'
  3114  0078B2  69                 	db	105	;'i'
  3115  0078B3  73                 	db	115	;'s'
  3116  0078B4  73                 	db	115	;'s'
  3117  0078B5  69                 	db	105	;'i'
  3118  0078B6  6E                 	db	110	;'n'
  3119  0078B7  67                 	db	103	;'g'
  3120  0078B8  0D                 	db	13
  3121  0078B9  0A                 	db	10
  3122  0078BA  00                 	db	0
  3123  0078BB                     STR_129:
  3124                           
  3125                           ; BSR set to: 1
  3126  0078BB  2D                 	db	45
  3127  0078BC  45                 	db	69	;'E'
  3128  0078BD  52                 	db	82	;'R'
  3129  0078BE  52                 	db	82	;'R'
  3130  0078BF  4F                 	db	79	;'O'
  3131  0078C0  52                 	db	82	;'R'
  3132  0078C1  20                 	db	32
  3133  0078C2  2D                 	db	45
  3134  0078C3  20                 	db	32
  3135  0078C4  6D                 	db	109	;'m'
  3136  0078C5  61                 	db	97	;'a'
  3137  0078C6  73                 	db	115	;'s'
  3138  0078C7  6B                 	db	107	;'k'
  3139  0078C8  20                 	db	32
  3140  0078C9  66                 	db	102	;'f'
  3141  0078CA  6F                 	db	111	;'o'
  3142  0078CB  72                 	db	114	;'r'
  3143  0078CC  20                 	db	32
  3144  0078CD  74                 	db	116	;'t'
  3145  0078CE  79                 	db	121	;'y'
  3146  0078CF  70                 	db	112	;'p'
  3147  0078D0  65                 	db	101	;'e'
  3148  0078D1  20                 	db	32
  3149  0078D2  69                 	db	105	;'i'
  3150  0078D3  73                 	db	115	;'s'
  3151  0078D4  20                 	db	32
  3152  0078D5  6D                 	db	109	;'m'
  3153  0078D6  69                 	db	105	;'i'
  3154  0078D7  73                 	db	115	;'s'
  3155  0078D8  73                 	db	115	;'s'
  3156  0078D9  69                 	db	105	;'i'
  3157  0078DA  6E                 	db	110	;'n'
  3158  0078DB  67                 	db	103	;'g'
  3159  0078DC  0D                 	db	13
  3160  0078DD  0A                 	db	10
  3161  0078DE  00                 	db	0
  3162  0078DF                     STR_93:
  3163                           
  3164                           ; BSR set to: 1
  3165  0078DF  2D                 	db	45
  3166  0078E0  45                 	db	69	;'E'
  3167  0078E1  52                 	db	82	;'R'
  3168  0078E2  52                 	db	82	;'R'
  3169  0078E3  4F                 	db	79	;'O'
  3170  0078E4  52                 	db	82	;'R'
  3171  0078E5  20                 	db	32
  3172  0078E6  2D                 	db	45
  3173  0078E7  20                 	db	32
  3174  0078E8  46                 	db	70	;'F'
  3175  0078E9  61                 	db	97	;'a'
  3176  0078EA  69                 	db	105	;'i'
  3177  0078EB  6C                 	db	108	;'l'
  3178  0078EC  65                 	db	101	;'e'
  3179  0078ED  64                 	db	100	;'d'
  3180  0078EE  20                 	db	32
  3181  0078EF  74                 	db	116	;'t'
  3182  0078F0  6F                 	db	111	;'o'
  3183  0078F1  20                 	db	32
  3184  0078F2  77                 	db	119	;'w'
  3185  0078F3  72                 	db	114	;'r'
  3186  0078F4  69                 	db	105	;'i'
  3187  0078F5  74                 	db	116	;'t'
  3188  0078F6  65                 	db	101	;'e'
  3189  0078F7  20                 	db	32
  3190  0078F8  76                 	db	118	;'v'
  3191  0078F9  61                 	db	97	;'a'
  3192  0078FA  6C                 	db	108	;'l'
  3193  0078FB  75                 	db	117	;'u'
  3194  0078FC  65                 	db	101	;'e'
  3195  0078FD  20                 	db	32
  3196  0078FE  66                 	db	102	;'f'
  3197  0078FF  6F                 	db	111	;'o'
  3198  007900  72                 	db	114	;'r'
  3199  007901  20                 	db	32
  3200  007902  00                 	db	0
  3201  007903                     STR_3:
  3202                           
  3203                           ; BSR set to: 1
  3204  007903  68                 	db	104	;'h'
  3205  007904  74                 	db	116	;'t'
  3206  007905  74                 	db	116	;'t'
  3207  007906  70                 	db	112	;'p'
  3208  007907  3A                 	db	58	;':'
  3209  007908  2F                 	db	47
  3210  007909  2F                 	db	47
  3211  00790A  77                 	db	119	;'w'
  3212  00790B  77                 	db	119	;'w'
  3213  00790C  77                 	db	119	;'w'
  3214  00790D  2E                 	db	46
  3215  00790E  70                 	db	112	;'p'
  3216  00790F  61                 	db	97	;'a'
  3217  007910  72                 	db	114	;'r'
  3218  007911  61                 	db	97	;'a'
  3219  007912  64                 	db	100	;'d'
  3220  007913  69                 	db	105	;'i'
  3221  007914  73                 	db	115	;'s'
  3222  007915  65                 	db	101	;'e'
  3223  007916  6F                 	db	111	;'o'
  3224  007917  66                 	db	102	;'f'
  3225  007918  74                 	db	116	;'t'
  3226  007919  68                 	db	104	;'h'
  3227  00791A  65                 	db	101	;'e'
  3228  00791B  66                 	db	102	;'f'
  3229  00791C  72                 	db	114	;'r'
  3230  00791D  6F                 	db	111	;'o'
  3231  00791E  67                 	db	103	;'g'
  3232  00791F  2E                 	db	46
  3233  007920  63                 	db	99	;'c'
  3234  007921  6F                 	db	111	;'o'
  3235  007922  6D                 	db	109	;'m'
  3236  007923  0D                 	db	13
  3237  007924  0A                 	db	10
  3238  007925  00                 	db	0
  3239  007926                     STR_271:
  3240                           
  3241                           ; BSR set to: 1
  3242  007926  53                 	db	83	;'S'
  3243  007927  45                 	db	69	;'E'
  3244  007928  54                 	db	84	;'T'
  3245  007929  20                 	db	32
  3246  00792A  2D                 	db	45
  3247  00792B  20                 	db	32
  3248  00792C  50                 	db	80	;'P'
  3249  00792D  65                 	db	101	;'e'
  3250  00792E  72                 	db	114	;'r'
  3251  00792F  73                 	db	115	;'s'
  3252  007930  69                 	db	105	;'i'
  3253  007931  73                 	db	115	;'s'
  3254  007932  74                 	db	116	;'t'
  3255  007933  65                 	db	101	;'e'
  3256  007934  6E                 	db	110	;'n'
  3257  007935  74                 	db	116	;'t'
  3258  007936  20                 	db	32
  3259  007937  66                 	db	102	;'f'
  3260  007938  75                 	db	117	;'u'
  3261  007939  6E                 	db	110	;'n'
  3262  00793A  63                 	db	99	;'c'
  3263  00793B  74                 	db	116	;'t'
  3264  00793C  69                 	db	105	;'i'
  3265  00793D  6F                 	db	111	;'o'
  3266  00793E  6E                 	db	110	;'n'
  3267  00793F  61                 	db	97	;'a'
  3268  007940  6C                 	db	108	;'l'
  3269  007941  69                 	db	105	;'i'
  3270  007942  74                 	db	116	;'t'
  3271  007943  79                 	db	121	;'y'
  3272  007944  2E                 	db	46
  3273  007945  0D                 	db	13
  3274  007946  0A                 	db	10
  3275  007947  00                 	db	0
  3276  007948                     STR_260:
  3277                           
  3278                           ; BSR set to: 1
  3279  007948  53                 	db	83	;'S'
  3280  007949  54                 	db	84	;'T'
  3281  00794A  41                 	db	65	;'A'
  3282  00794B  54                 	db	84	;'T'
  3283  00794C  20                 	db	32
  3284  00794D  2D                 	db	45
  3285  00794E  20                 	db	32
  3286  00794F  44                 	db	68	;'D'
  3287  007950  69                 	db	105	;'i'
  3288  007951  73                 	db	115	;'s'
  3289  007952  70                 	db	112	;'p'
  3290  007953  6C                 	db	108	;'l'
  3291  007954  61                 	db	97	;'a'
  3292  007955  79                 	db	121	;'y'
  3293  007956  20                 	db	32
  3294  007957  43                 	db	67	;'C'
  3295  007958  41                 	db	65	;'A'
  3296  007959  4E                 	db	78	;'N'
  3297  00795A  20                 	db	32
  3298  00795B  73                 	db	115	;'s'
  3299  00795C  74                 	db	116	;'t'
  3300  00795D  61                 	db	97	;'a'
  3301  00795E  74                 	db	116	;'t'
  3302  00795F  69                 	db	105	;'i'
  3303  007960  73                 	db	115	;'s'
  3304  007961  74                 	db	116	;'t'
  3305  007962  69                 	db	105	;'i'
  3306  007963  63                 	db	99	;'c'
  3307  007964  73                 	db	115	;'s'
  3308  007965  2E                 	db	46
  3309  007966  0D                 	db	13
  3310  007967  0A                 	db	10
  3311  007968  00                 	db	0
  3312  007969                     STR_37:
  3313                           
  3314                           ; BSR set to: 1
  3315  007969  2D                 	db	45
  3316  00796A  45                 	db	69	;'E'
  3317  00796B  52                 	db	82	;'R'
  3318  00796C  52                 	db	82	;'R'
  3319  00796D  4F                 	db	79	;'O'
  3320  00796E  52                 	db	82	;'R'
  3321  00796F  20                 	db	32
  3322  007970  2D                 	db	45
  3323  007971  20                 	db	32
  3324  007972  46                 	db	70	;'F'
  3325  007973  61                 	db	97	;'a'
  3326  007974  69                 	db	105	;'i'
  3327  007975  6C                 	db	108	;'l'
  3328  007976  65                 	db	101	;'e'
  3329  007977  64                 	db	100	;'d'
  3330  007978  20                 	db	32
  3331  007979  74                 	db	116	;'t'
  3332  00797A  6F                 	db	111	;'o'
  3333  00797B  20                 	db	32
  3334  00797C  73                 	db	115	;'s'
  3335  00797D  65                 	db	101	;'e'
  3336  00797E  6E                 	db	110	;'n'
  3337  00797F  64                 	db	100	;'d'
  3338  007980  20                 	db	32
  3339  007981  65                 	db	101	;'e'
  3340  007982  76                 	db	118	;'v'
  3341  007983  65                 	db	101	;'e'
  3342  007984  6E                 	db	110	;'n'
  3343  007985  74                 	db	116	;'t'
  3344  007986  2E                 	db	46
  3345  007987  0D                 	db	13
  3346  007988  0A                 	db	10
  3347  007989  00                 	db	0
  3348  00798A                     STR_168:
  3349                           
  3350                           ; BSR set to: 1
  3351  00798A  2D                 	db	45
  3352  00798B  45                 	db	69	;'E'
  3353  00798C  52                 	db	82	;'R'
  3354  00798D  52                 	db	82	;'R'
  3355  00798E  4F                 	db	79	;'O'
  3356  00798F  52                 	db	82	;'R'
  3357  007990  20                 	db	32
  3358  007991  2D                 	db	45
  3359  007992  20                 	db	32
  3360  007993  55                 	db	85	;'U'
  3361  007994  6E                 	db	110	;'n'
  3362  007995  6B                 	db	107	;'k'
  3363  007996  6E                 	db	110	;'n'
  3364  007997  6F                 	db	111	;'o'
  3365  007998  77                 	db	119	;'w'
  3366  007999  6E                 	db	110	;'n'
  3367  00799A  20                 	db	32
  3368  00799B  27                 	db	39
  3369  00799C  53                 	db	83	;'S'
  3370  00799D  45                 	db	69	;'E'
  3371  00799E  54                 	db	84	;'T'
  3372  00799F  27                 	db	39
  3373  0079A0  20                 	db	32
  3374  0079A1  63                 	db	99	;'c'
  3375  0079A2  6F                 	db	111	;'o'
  3376  0079A3  6D                 	db	109	;'m'
  3377  0079A4  6D                 	db	109	;'m'
  3378  0079A5  61                 	db	97	;'a'
  3379  0079A6  6E                 	db	110	;'n'
  3380  0079A7  64                 	db	100	;'d'
  3381  0079A8  0D                 	db	13
  3382  0079A9  0A                 	db	10
  3383  0079AA  00                 	db	0
  3384  0079AB                     STR_54:
  3385                           
  3386                           ; BSR set to: 1
  3387  0079AB  2D                 	db	45
  3388  0079AC  45                 	db	69	;'E'
  3389  0079AD  52                 	db	82	;'R'
  3390  0079AE  52                 	db	82	;'R'
  3391  0079AF  4F                 	db	79	;'O'
  3392  0079B0  52                 	db	82	;'R'
  3393  0079B1  20                 	db	32
  3394  0079B2  2D                 	db	45
  3395  0079B3  20                 	db	32
  3396  0079B4  4E                 	db	78	;'N'
  3397  0079B5  65                 	db	101	;'e'
  3398  0079B6  65                 	db	101	;'e'
  3399  0079B7  64                 	db	100	;'d'
  3400  0079B8  73                 	db	115	;'s'
  3401  0079B9  20                 	db	32
  3402  0079BA  5B                 	db	91	;'['
  3403  0079BB  70                 	db	112	;'p'
  3404  0079BC  61                 	db	97	;'a'
  3405  0079BD  67                 	db	103	;'g'
  3406  0079BE  65                 	db	101	;'e'
  3407  0079BF  3A                 	db	58	;':'
  3408  0079C0  5D                 	db	93	;']'
  3409  0079C1  72                 	db	114	;'r'
  3410  0079C2  65                 	db	101	;'e'
  3411  0079C3  67                 	db	103	;'g'
  3412  0079C4  69                 	db	105	;'i'
  3413  0079C5  73                 	db	115	;'s'
  3414  0079C6  74                 	db	116	;'t'
  3415  0079C7  65                 	db	101	;'e'
  3416  0079C8  72                 	db	114	;'r'
  3417  0079C9  0D                 	db	13
  3418  0079CA  0A                 	db	10
  3419  0079CB  00                 	db	0
  3420  0079CC                     STR_150:
  3421                           
  3422                           ; BSR set to: 1
  3423  0079CC  2B                 	db	43
  3424  0079CD  4F                 	db	79	;'O'
  3425  0079CE  4B                 	db	75	;'K'
  3426  0079CF  20                 	db	32
  3427  0079D0  2D                 	db	45
  3428  0079D1  20                 	db	32
  3429  0079D2  4D                 	db	77	;'M'
  3430  0079D3  6F                 	db	111	;'o'
  3431  0079D4  64                 	db	100	;'d'
  3432  0079D5  65                 	db	101	;'e'
  3433  0079D6  20                 	db	32
  3434  0079D7  69                 	db	105	;'i'
  3435  0079D8  73                 	db	115	;'s'
  3436  0079D9  20                 	db	32
  3437  0079DA  6E                 	db	110	;'n'
  3438  0079DB  6F                 	db	111	;'o'
  3439  0079DC  77                 	db	119	;'w'
  3440  0079DD  20                 	db	32
  3441  0079DE  56                 	db	86	;'V'
  3442  0079DF  53                 	db	83	;'S'
  3443  0079E0  43                 	db	67	;'C'
  3444  0079E1  50                 	db	80	;'P'
  3445  0079E2  20                 	db	32
  3446  0079E3  44                 	db	68	;'D'
  3447  0079E4  72                 	db	114	;'r'
  3448  0079E5  69                 	db	105	;'i'
  3449  0079E6  76                 	db	118	;'v'
  3450  0079E7  65                 	db	101	;'e'
  3451  0079E8  72                 	db	114	;'r'
  3452  0079E9  0D                 	db	13
  3453  0079EA  0A                 	db	10
  3454  0079EB  00                 	db	0
  3455  0079EC                     STR_7:
  3456                           
  3457                           ; BSR set to: 1
  3458  0079EC  57                 	db	87	;'W'
  3459  0079ED  69                 	db	105	;'i'
  3460  0079EE  6C                 	db	108	;'l'
  3461  0079EF  6C                 	db	108	;'l'
  3462  0079F0  20                 	db	32
  3463  0079F1  65                 	db	101	;'e'
  3464  0079F2  6E                 	db	110	;'n'
  3465  0079F3  74                 	db	116	;'t'
  3466  0079F4  65                 	db	101	;'e'
  3467  0079F5  72                 	db	114	;'r'
  3468  0079F6  20                 	db	32
  3469  0079F7  62                 	db	98	;'b'
  3470  0079F8  6F                 	db	111	;'o'
  3471  0079F9  6F                 	db	111	;'o'
  3472  0079FA  74                 	db	116	;'t'
  3473  0079FB  6C                 	db	108	;'l'
  3474  0079FC  6F                 	db	111	;'o'
  3475  0079FD  61                 	db	97	;'a'
  3476  0079FE  64                 	db	100	;'d'
  3477  0079FF  65                 	db	101	;'e'
  3478  007A00  72                 	db	114	;'r'
  3479  007A01  20                 	db	32
  3480  007A02  6E                 	db	110	;'n'
  3481  007A03  6F                 	db	111	;'o'
  3482  007A04  77                 	db	119	;'w'
  3483  007A05  2E                 	db	46
  3484  007A06  2E                 	db	46
  3485  007A07  2E                 	db	46
  3486  007A08  0D                 	db	13
  3487  007A09  0A                 	db	10
  3488  007A0A  00                 	db	0
  3489  007A0B                     STR_254:
  3490                           
  3491                           ; BSR set to: 1
  3492  007A0B  43                 	db	67	;'C'
  3493  007A0C  4C                 	db	76	;'L'
  3494  007A0D  4F                 	db	79	;'O'
  3495  007A0E  53                 	db	83	;'S'
  3496  007A0F  45                 	db	69	;'E'
  3497  007A10  20                 	db	32
  3498  007A11  2D                 	db	45
  3499  007A12  20                 	db	32
  3500  007A13  43                 	db	67	;'C'
  3501  007A14  6C                 	db	108	;'l'
  3502  007A15  6F                 	db	111	;'o'
  3503  007A16  73                 	db	115	;'s'
  3504  007A17  65                 	db	101	;'e'
  3505  007A18  20                 	db	32
  3506  007A19  43                 	db	67	;'C'
  3507  007A1A  41                 	db	65	;'A'
  3508  007A1B  4E                 	db	78	;'N'
  3509  007A1C  20                 	db	32
  3510  007A1D  69                 	db	105	;'i'
  3511  007A1E  6E                 	db	110	;'n'
  3512  007A1F  74                 	db	116	;'t'
  3513  007A20  65                 	db	101	;'e'
  3514  007A21  72                 	db	114	;'r'
  3515  007A22  66                 	db	102	;'f'
  3516  007A23  61                 	db	97	;'a'
  3517  007A24  63                 	db	99	;'c'
  3518  007A25  65                 	db	101	;'e'
  3519  007A26  2E                 	db	46
  3520  007A27  0D                 	db	13
  3521  007A28  0A                 	db	10
  3522  007A29  00                 	db	0
  3523  007A2A                     STR_5:
  3524                           
  3525                           ; BSR set to: 1
  3526  007A2A  54                 	db	84	;'T'
  3527  007A2B  65                 	db	101	;'e'
  3528  007A2C  6D                 	db	109	;'m'
  3529  007A2D  70                 	db	112	;'p'
  3530  007A2E  6F                 	db	111	;'o'
  3531  007A2F  72                 	db	114	;'r'
  3532  007A30  61                 	db	97	;'a'
  3533  007A31  72                 	db	114	;'r'
  3534  007A32  79                 	db	121	;'y'
  3535  007A33  20                 	db	32
  3536  007A34  76                 	db	118	;'v'
  3537  007A35  65                 	db	101	;'e'
  3538  007A36  72                 	db	114	;'r'
  3539  007A37  62                 	db	98	;'b'
  3540  007A38  6F                 	db	111	;'o'
  3541  007A39  73                 	db	115	;'s'
  3542  007A3A  65                 	db	101	;'e'
  3543  007A3B  20                 	db	32
  3544  007A3C  6D                 	db	109	;'m'
  3545  007A3D  6F                 	db	111	;'o'
  3546  007A3E  64                 	db	100	;'d'
  3547  007A3F  65                 	db	101	;'e'
  3548  007A40  20                 	db	32
  3549  007A41  73                 	db	115	;'s'
  3550  007A42  65                 	db	101	;'e'
  3551  007A43  74                 	db	116	;'t'
  3552  007A44  0D                 	db	13
  3553  007A45  0A                 	db	10
  3554  007A46  00                 	db	0
  3555  007A47                     STR_148:
  3556                           
  3557                           ; BSR set to: 1
  3558  007A47  2B                 	db	43
  3559  007A48  4F                 	db	79	;'O'
  3560  007A49  4B                 	db	75	;'K'
  3561  007A4A  20                 	db	32
  3562  007A4B  2D                 	db	45
  3563  007A4C  20                 	db	32
  3564  007A4D  4D                 	db	77	;'M'
  3565  007A4E  6F                 	db	111	;'o'
  3566  007A4F  64                 	db	100	;'d'
  3567  007A50  65                 	db	101	;'e'
  3568  007A51  20                 	db	32
  3569  007A52  69                 	db	105	;'i'
  3570  007A53  73                 	db	115	;'s'
  3571  007A54  20                 	db	32
  3572  007A55  6E                 	db	110	;'n'
  3573  007A56  6F                 	db	111	;'o'
  3574  007A57  77                 	db	119	;'w'
  3575  007A58  20                 	db	32
  3576  007A59  76                 	db	118	;'v'
  3577  007A5A  65                 	db	101	;'e'
  3578  007A5B  72                 	db	114	;'r'
  3579  007A5C  62                 	db	98	;'b'
  3580  007A5D  6F                 	db	111	;'o'
  3581  007A5E  73                 	db	115	;'s'
  3582  007A5F  65                 	db	101	;'e'
  3583  007A60  0D                 	db	13
  3584  007A61  0A                 	db	10
  3585  007A62  00                 	db	0
  3586  007A63                     STR_103:
  3587                           
  3588                           ; BSR set to: 1
  3589  007A63  2D                 	db	45
  3590  007A64  45                 	db	69	;'E'
  3591  007A65  52                 	db	82	;'R'
  3592  007A66  52                 	db	82	;'R'
  3593  007A67  4F                 	db	79	;'O'
  3594  007A68  52                 	db	82	;'R'
  3595  007A69  20                 	db	32
  3596  007A6A  2D                 	db	45
  3597  007A6B  20                 	db	32
  3598  007A6C  4E                 	db	78	;'N'
  3599  007A6D  6F                 	db	111	;'o'
  3600  007A6E  64                 	db	100	;'d'
  3601  007A6F  65                 	db	101	;'e'
  3602  007A70  20                 	db	32
  3603  007A71  6E                 	db	110	;'n'
  3604  007A72  6F                 	db	111	;'o'
  3605  007A73  74                 	db	116	;'t'
  3606  007A74  20                 	db	32
  3607  007A75  66                 	db	102	;'f'
  3608  007A76  6F                 	db	111	;'o'
  3609  007A77  75                 	db	117	;'u'
  3610  007A78  6E                 	db	110	;'n'
  3611  007A79  64                 	db	100	;'d'
  3612  007A7A  2E                 	db	46
  3613  007A7B  0D                 	db	13
  3614  007A7C  0A                 	db	10
  3615  007A7D  00                 	db	0
  3616  007A7E                     STR_249:
  3617                           
  3618                           ; BSR set to: 1
  3619  007A7E  42                 	db	66	;'B'
  3620  007A7F  4F                 	db	79	;'O'
  3621  007A80  4F                 	db	79	;'O'
  3622  007A81  54                 	db	84	;'T'
  3623  007A82  20                 	db	32
  3624  007A83  2D                 	db	45
  3625  007A84  20                 	db	32
  3626  007A85  45                 	db	69	;'E'
  3627  007A86  6E                 	db	110	;'n'
  3628  007A87  74                 	db	116	;'t'
  3629  007A88  65                 	db	101	;'e'
  3630  007A89  72                 	db	114	;'r'
  3631  007A8A  20                 	db	32
  3632  007A8B  62                 	db	98	;'b'
  3633  007A8C  6F                 	db	111	;'o'
  3634  007A8D  6F                 	db	111	;'o'
  3635  007A8E  74                 	db	116	;'t'
  3636  007A8F  6C                 	db	108	;'l'
  3637  007A90  6F                 	db	111	;'o'
  3638  007A91  61                 	db	97	;'a'
  3639  007A92  64                 	db	100	;'d'
  3640  007A93  65                 	db	101	;'e'
  3641  007A94  72                 	db	114	;'r'
  3642  007A95  2E                 	db	46
  3643  007A96  0D                 	db	13
  3644  007A97  0A                 	db	10
  3645  007A98  00                 	db	0
  3646  007A99                     STR_170:
  3647                           
  3648                           ; BSR set to: 1
  3649  007A99  2D                 	db	45
  3650  007A9A  45                 	db	69	;'E'
  3651  007A9B  52                 	db	82	;'R'
  3652  007A9C  52                 	db	82	;'R'
  3653  007A9D  4F                 	db	79	;'O'
  3654  007A9E  52                 	db	82	;'R'
  3655  007A9F  20                 	db	32
  3656  007AA0  2D                 	db	45
  3657  007AA1  20                 	db	32
  3658  007AA2  55                 	db	85	;'U'
  3659  007AA3  6E                 	db	110	;'n'
  3660  007AA4  6B                 	db	107	;'k'
  3661  007AA5  6E                 	db	110	;'n'
  3662  007AA6  6F                 	db	111	;'o'
  3663  007AA7  77                 	db	119	;'w'
  3664  007AA8  6E                 	db	110	;'n'
  3665  007AA9  20                 	db	32
  3666  007AAA  63                 	db	99	;'c'
  3667  007AAB  6F                 	db	111	;'o'
  3668  007AAC  6D                 	db	109	;'m'
  3669  007AAD  6D                 	db	109	;'m'
  3670  007AAE  61                 	db	97	;'a'
  3671  007AAF  6E                 	db	110	;'n'
  3672  007AB0  64                 	db	100	;'d'
  3673  007AB1  0D                 	db	13
  3674  007AB2  0A                 	db	10
  3675  007AB3  00                 	db	0
  3676  007AB4                     STR_282:
  3677                           
  3678                           ; BSR set to: 1
  3679  007AB4  4E                 	db	78	;'N'
  3680  007AB5  6F                 	db	111	;'o'
  3681  007AB6  64                 	db	100	;'d'
  3682  007AB7  65                 	db	101	;'e'
  3683  007AB8  20                 	db	32
  3684  007AB9  66                 	db	102	;'f'
  3685  007ABA  6F                 	db	111	;'o'
  3686  007ABB  75                 	db	117	;'u'
  3687  007ABC  6E                 	db	110	;'n'
  3688  007ABD  64                 	db	100	;'d'
  3689  007ABE  20                 	db	32
  3690  007ABF  77                 	db	119	;'w'
  3691  007AC0  69                 	db	105	;'i'
  3692  007AC1  74                 	db	116	;'t'
  3693  007AC2  68                 	db	104	;'h'
  3694  007AC3  20                 	db	32
  3695  007AC4  6E                 	db	110	;'n'
  3696  007AC5  6F                 	db	111	;'o'
  3697  007AC6  64                 	db	100	;'d'
  3698  007AC7  65                 	db	101	;'e'
  3699  007AC8  20                 	db	32
  3700  007AC9  69                 	db	105	;'i'
  3701  007ACA  64                 	db	100	;'d'
  3702  007ACB  20                 	db	32
  3703  007ACC  3D                 	db	61	;'='
  3704  007ACD  20                 	db	32
  3705  007ACE  00                 	db	0
  3706  007ACF                     STR_152:
  3707                           
  3708                           ; BSR set to: 1
  3709  007ACF  2B                 	db	43
  3710  007AD0  4F                 	db	79	;'O'
  3711  007AD1  4B                 	db	75	;'K'
  3712  007AD2  20                 	db	32
  3713  007AD3  2D                 	db	45
  3714  007AD4  20                 	db	32
  3715  007AD5  4D                 	db	77	;'M'
  3716  007AD6  6F                 	db	111	;'o'
  3717  007AD7  64                 	db	100	;'d'
  3718  007AD8  65                 	db	101	;'e'
  3719  007AD9  20                 	db	32
  3720  007ADA  69                 	db	105	;'i'
  3721  007ADB  73                 	db	115	;'s'
  3722  007ADC  20                 	db	32
  3723  007ADD  6E                 	db	110	;'n'
  3724  007ADE  6F                 	db	111	;'o'
  3725  007ADF  77                 	db	119	;'w'
  3726  007AE0  20                 	db	32
  3727  007AE1  53                 	db	83	;'S'
  3728  007AE2  4C                 	db	76	;'L'
  3729  007AE3  43                 	db	67	;'C'
  3730  007AE4  41                 	db	65	;'A'
  3731  007AE5  4E                 	db	78	;'N'
  3732  007AE6  0D                 	db	13
  3733  007AE7  0A                 	db	10
  3734  007AE8  00                 	db	0
  3735  007AE9                     STR_25:
  3736                           
  3737                           ; BSR set to: 1
  3738  007AE9  2B                 	db	43
  3739  007AEA  4F                 	db	79	;'O'
  3740  007AEB  4B                 	db	75	;'K'
  3741  007AEC  20                 	db	32
  3742  007AED  2D                 	db	45
  3743  007AEE  20                 	db	32
  3744  007AEF  4C                 	db	76	;'L'
  3745  007AF0  69                 	db	105	;'i'
  3746  007AF1  73                 	db	115	;'s'
  3747  007AF2  74                 	db	116	;'t'
  3748  007AF3  65                 	db	101	;'e'
  3749  007AF4  6E                 	db	110	;'n'
  3750  007AF5  20                 	db	32
  3751  007AF6  6F                 	db	111	;'o'
  3752  007AF7  6E                 	db	110	;'n'
  3753  007AF8  6C                 	db	108	;'l'
  3754  007AF9  79                 	db	121	;'y'
  3755  007AFA  20                 	db	32
  3756  007AFB  6D                 	db	109	;'m'
  3757  007AFC  6F                 	db	111	;'o'
  3758  007AFD  64                 	db	100	;'d'
  3759  007AFE  65                 	db	101	;'e'
  3760  007AFF  0D                 	db	13
  3761  007B00  0A                 	db	10
  3762  007B01  00                 	db	0
  3763  007B02                     STR_234:
  3764                           
  3765                           ; BSR set to: 1
  3766  007B02  54                 	db	84	;'T'
  3767  007B03  72                 	db	114	;'r'
  3768  007B04  61                 	db	97	;'a'
  3769  007B05  6E                 	db	110	;'n'
  3770  007B06  73                 	db	115	;'s'
  3771  007B07  6D                 	db	109	;'m'
  3772  007B08  69                 	db	105	;'i'
  3773  007B09  74                 	db	116	;'t'
  3774  007B0A  20                 	db	32
  3775  007B0B  45                 	db	69	;'E'
  3776  007B0C  72                 	db	114	;'r'
  3777  007B0D  72                 	db	114	;'r'
  3778  007B0E  6F                 	db	111	;'o'
  3779  007B0F  72                 	db	114	;'r'
  3780  007B10  20                 	db	32
  3781  007B11  43                 	db	67	;'C'
  3782  007B12  6F                 	db	111	;'o'
  3783  007B13  75                 	db	117	;'u'
  3784  007B14  6E                 	db	110	;'n'
  3785  007B15  74                 	db	116	;'t'
  3786  007B16  65                 	db	101	;'e'
  3787  007B17  72                 	db	114	;'r'
  3788  007B18  3A                 	db	58	;':'
  3789  007B19  20                 	db	32
  3790  007B1A  00                 	db	0
  3791  007B1B                     STR_73:
  3792                           
  3793                           ; BSR set to: 1
  3794  007B1B  55                 	db	85	;'U'
  3795  007B1C  6E                 	db	110	;'n'
  3796  007B1D  61                 	db	97	;'a'
  3797  007B1E  62                 	db	98	;'b'
  3798  007B1F  6C                 	db	108	;'l'
  3799  007B20  65                 	db	101	;'e'
  3800  007B21  20                 	db	32
  3801  007B22  74                 	db	116	;'t'
  3802  007B23  6F                 	db	111	;'o'
  3803  007B24  20                 	db	32
  3804  007B25  72                 	db	114	;'r'
  3805  007B26  65                 	db	101	;'e'
  3806  007B27  61                 	db	97	;'a'
  3807  007B28  64                 	db	100	;'d'
  3808  007B29  20                 	db	32
  3809  007B2A  72                 	db	114	;'r'
  3810  007B2B  65                 	db	101	;'e'
  3811  007B2C  67                 	db	103	;'g'
  3812  007B2D  69                 	db	105	;'i'
  3813  007B2E  73                 	db	115	;'s'
  3814  007B2F  74                 	db	116	;'t'
  3815  007B30  65                 	db	101	;'e'
  3816  007B31  72                 	db	114	;'r'
  3817  007B32  20                 	db	32
  3818  007B33  00                 	db	0
  3819  007B34                     STR_257:
  3820                           
  3821                           ; BSR set to: 1
  3822  007B34  54                 	db	84	;'T'
  3823  007B35  58                 	db	88	;'X'
  3824  007B36  20                 	db	32
  3825  007B37  2D                 	db	45
  3826  007B38  20                 	db	32
  3827  007B39  53                 	db	83	;'S'
  3828  007B3A  65                 	db	101	;'e'
  3829  007B3B  6E                 	db	110	;'n'
  3830  007B3C  64                 	db	100	;'d'
  3831  007B3D  20                 	db	32
  3832  007B3E  43                 	db	67	;'C'
  3833  007B3F  41                 	db	65	;'A'
  3834  007B40  4E                 	db	78	;'N'
  3835  007B41  20                 	db	32
  3836  007B42  66                 	db	102	;'f'
  3837  007B43  72                 	db	114	;'r'
  3838  007B44  61                 	db	97	;'a'
  3839  007B45  6D                 	db	109	;'m'
  3840  007B46  65                 	db	101	;'e'
  3841  007B47  20                 	db	32
  3842  007B48  2E                 	db	46
  3843  007B49  0D                 	db	13
  3844  007B4A  0A                 	db	10
  3845  007B4B  00                 	db	0
  3846  007B4C                     STR_267:
  3847                           
  3848                           ; BSR set to: 1
  3849  007B4C  46                 	db	70	;'F'
  3850  007B4D  49                 	db	73	;'I'
  3851  007B4E  4C                 	db	76	;'L'
  3852  007B4F  54                 	db	84	;'T'
  3853  007B50  45                 	db	69	;'E'
  3854  007B51  52                 	db	82	;'R'
  3855  007B52  20                 	db	32
  3856  007B53  2D                 	db	45
  3857  007B54  20                 	db	32
  3858  007B55  53                 	db	83	;'S'
  3859  007B56  65                 	db	101	;'e'
  3860  007B57  74                 	db	116	;'t'
  3861  007B58  20                 	db	32
  3862  007B59  66                 	db	102	;'f'
  3863  007B5A  69                 	db	105	;'i'
  3864  007B5B  6C                 	db	108	;'l'
  3865  007B5C  74                 	db	116	;'t'
  3866  007B5D  65                 	db	101	;'e'
  3867  007B5E  72                 	db	114	;'r'
  3868  007B5F  20                 	db	32
  3869  007B60  2E                 	db	46
  3870  007B61  0D                 	db	13
  3871  007B62  0A                 	db	10
  3872  007B63  00                 	db	0
  3873  007B64                     STR_52:
  3874                           
  3875                           ; BSR set to: 1
  3876  007B64  2D                 	db	45
  3877  007B65  45                 	db	69	;'E'
  3878  007B66  52                 	db	82	;'R'
  3879  007B67  52                 	db	82	;'R'
  3880  007B68  4F                 	db	79	;'O'
  3881  007B69  52                 	db	82	;'R'
  3882  007B6A  20                 	db	32
  3883  007B6B  2D                 	db	45
  3884  007B6C  20                 	db	32
  3885  007B6D  4E                 	db	78	;'N'
  3886  007B6E  65                 	db	101	;'e'
  3887  007B6F  65                 	db	101	;'e'
  3888  007B70  64                 	db	100	;'d'
  3889  007B71  73                 	db	115	;'s'
  3890  007B72  20                 	db	32
  3891  007B73  6E                 	db	110	;'n'
  3892  007B74  6F                 	db	111	;'o'
  3893  007B75  64                 	db	100	;'d'
  3894  007B76  65                 	db	101	;'e'
  3895  007B77  69                 	db	105	;'i'
  3896  007B78  64                 	db	100	;'d'
  3897  007B79  0D                 	db	13
  3898  007B7A  0A                 	db	10
  3899  007B7B  00                 	db	0
  3900  007B7C                     STR_28:
  3901                           
  3902                           ; BSR set to: 1
  3903  007B7C  2D                 	db	45
  3904  007B7D  45                 	db	69	;'E'
  3905  007B7E  52                 	db	82	;'R'
  3906  007B7F  52                 	db	82	;'R'
  3907  007B80  4F                 	db	79	;'O'
  3908  007B81  52                 	db	82	;'R'
  3909  007B82  20                 	db	32
  3910  007B83  2D                 	db	45
  3911  007B84  20                 	db	32
  3912  007B85  55                 	db	85	;'U'
  3913  007B86  6E                 	db	110	;'n'
  3914  007B87  6B                 	db	107	;'k'
  3915  007B88  6E                 	db	110	;'n'
  3916  007B89  6F                 	db	111	;'o'
  3917  007B8A  77                 	db	119	;'w'
  3918  007B8B  6E                 	db	110	;'n'
  3919  007B8C  20                 	db	32
  3920  007B8D  6D                 	db	109	;'m'
  3921  007B8E  6F                 	db	111	;'o'
  3922  007B8F  64                 	db	100	;'d'
  3923  007B90  65                 	db	101	;'e'
  3924  007B91  0D                 	db	13
  3925  007B92  0A                 	db	10
  3926  007B93  00                 	db	0
  3927  007B94                     STR_88:
  3928                           
  3929                           ; BSR set to: 1
  3930  007B94  2D                 	db	45
  3931  007B95  45                 	db	69	;'E'
  3932  007B96  52                 	db	82	;'R'
  3933  007B97  52                 	db	82	;'R'
  3934  007B98  4F                 	db	79	;'O'
  3935  007B99  52                 	db	82	;'R'
  3936  007B9A  20                 	db	32
  3937  007B9B  2D                 	db	45
  3938  007B9C  20                 	db	32
  3939  007B9D  4E                 	db	78	;'N'
  3940  007B9E  65                 	db	101	;'e'
  3941  007B9F  65                 	db	101	;'e'
  3942  007BA0  64                 	db	100	;'d'
  3943  007BA1  20                 	db	32
  3944  007BA2  61                 	db	97	;'a'
  3945  007BA3  20                 	db	32
  3946  007BA4  76                 	db	118	;'v'
  3947  007BA5  61                 	db	97	;'a'
  3948  007BA6  6C                 	db	108	;'l'
  3949  007BA7  75                 	db	117	;'u'
  3950  007BA8  65                 	db	101	;'e'
  3951  007BA9  0D                 	db	13
  3952  007BAA  0A                 	db	10
  3953  007BAB  00                 	db	0
  3954  007BAC                     STR_241:
  3955                           
  3956                           ; BSR set to: 1
  3957  007BAC  52                 	db	82	;'R'
  3958  007BAD  65                 	db	101	;'e'
  3959  007BAE  63                 	db	99	;'c'
  3960  007BAF  65                 	db	101	;'e'
  3961  007BB0  69                 	db	105	;'i'
  3962  007BB1  76                 	db	118	;'v'
  3963  007BB2  65                 	db	101	;'e'
  3964  007BB3  20                 	db	32
  3965  007BB4  45                 	db	69	;'E'
  3966  007BB5  72                 	db	114	;'r'
  3967  007BB6  72                 	db	114	;'r'
  3968  007BB7  6F                 	db	111	;'o'
  3969  007BB8  72                 	db	114	;'r'
  3970  007BB9  20                 	db	32
  3971  007BBA  43                 	db	67	;'C'
  3972  007BBB  6F                 	db	111	;'o'
  3973  007BBC  75                 	db	117	;'u'
  3974  007BBD  6E                 	db	110	;'n'
  3975  007BBE  74                 	db	116	;'t'
  3976  007BBF  65                 	db	101	;'e'
  3977  007BC0  72                 	db	114	;'r'
  3978  007BC1  3A                 	db	58	;':'
  3979  007BC2  20                 	db	32
  3980  007BC3  00                 	db	0
  3981  007BC4                     STR_225:
  3982                           
  3983                           ; BSR set to: 1
  3984  007BC4  55                 	db	85	;'U'
  3985  007BC5  41                 	db	65	;'A'
  3986  007BC6  52                 	db	82	;'R'
  3987  007BC7  54                 	db	84	;'T'
  3988  007BC8  20                 	db	32
  3989  007BC9  52                 	db	82	;'R'
  3990  007BCA  65                 	db	101	;'e'
  3991  007BCB  63                 	db	99	;'c'
  3992  007BCC  65                 	db	101	;'e'
  3993  007BCD  69                 	db	105	;'i'
  3994  007BCE  76                 	db	118	;'v'
  3995  007BCF  65                 	db	101	;'e'
  3996  007BD0  20                 	db	32
  3997  007BD1  6F                 	db	111	;'o'
  3998  007BD2  76                 	db	118	;'v'
  3999  007BD3  65                 	db	101	;'e'
  4000  007BD4  72                 	db	114	;'r'
  4001  007BD5  72                 	db	114	;'r'
  4002  007BD6  75                 	db	117	;'u'
  4003  007BD7  6E                 	db	110	;'n'
  4004  007BD8  73                 	db	115	;'s'
  4005  007BD9  3A                 	db	58	;':'
  4006  007BDA  20                 	db	32
  4007  007BDB  00                 	db	0
  4008  007BDC                     STR_221:
  4009                           
  4010                           ; BSR set to: 1
  4011  007BDC  43                 	db	67	;'C'
  4012  007BDD  41                 	db	65	;'A'
  4013  007BDE  4E                 	db	78	;'N'
  4014  007BDF  20                 	db	32
  4015  007BE0  54                 	db	84	;'T'
  4016  007BE1  72                 	db	114	;'r'
  4017  007BE2  61                 	db	97	;'a'
  4018  007BE3  6E                 	db	110	;'n'
  4019  007BE4  73                 	db	115	;'s'
  4020  007BE5  6D                 	db	109	;'m'
  4021  007BE6  69                 	db	105	;'i'
  4022  007BE7  74                 	db	116	;'t'
  4023  007BE8  20                 	db	32
  4024  007BE9  6F                 	db	111	;'o'
  4025  007BEA  76                 	db	118	;'v'
  4026  007BEB  65                 	db	101	;'e'
  4027  007BEC  72                 	db	114	;'r'
  4028  007BED  72                 	db	114	;'r'
  4029  007BEE  75                 	db	117	;'u'
  4030  007BEF  6E                 	db	110	;'n'
  4031  007BF0  73                 	db	115	;'s'
  4032  007BF1  3A                 	db	58	;':'
  4033  007BF2  20                 	db	32
  4034  007BF3  00                 	db	0
  4035  007BF4                     STR_259:
  4036                           
  4037                           ; BSR set to: 1
  4038  007BF4  52                 	db	82	;'R'
  4039  007BF5  58                 	db	88	;'X'
  4040  007BF6  20                 	db	32
  4041  007BF7  2D                 	db	45
  4042  007BF8  20                 	db	32
  4043  007BF9  52                 	db	82	;'R'
  4044  007BFA  65                 	db	101	;'e'
  4045  007BFB  61                 	db	97	;'a'
  4046  007BFC  64                 	db	100	;'d'
  4047  007BFD  20                 	db	32
  4048  007BFE  43                 	db	67	;'C'
  4049  007BFF  41                 	db	65	;'A'
  4050  007C00  4E                 	db	78	;'N'
  4051  007C01  20                 	db	32
  4052  007C02  66                 	db	102	;'f'
  4053  007C03  72                 	db	114	;'r'
  4054  007C04  61                 	db	97	;'a'
  4055  007C05  6D                 	db	109	;'m'
  4056  007C06  65                 	db	101	;'e'
  4057  007C07  2E                 	db	46
  4058  007C08  0D                 	db	13
  4059  007C09  0A                 	db	10
  4060  007C0A  00                 	db	0
  4061  007C0B                     STR_157:
  4062                           
  4063                           ; BSR set to: 1
  4064  007C0B  2B                 	db	43
  4065  007C0C  4F                 	db	79	;'O'
  4066  007C0D  4B                 	db	75	;'K'
  4067  007C0E  20                 	db	32
  4068  007C0F  2D                 	db	45
  4069  007C10  20                 	db	32
  4070  007C11  4C                 	db	76	;'L'
  4071  007C12  6F                 	db	111	;'o'
  4072  007C13  63                 	db	99	;'c'
  4073  007C14  61                 	db	97	;'a'
  4074  007C15  6C                 	db	108	;'l'
  4075  007C16  20                 	db	32
  4076  007C17  65                 	db	101	;'e'
  4077  007C18  63                 	db	99	;'c'
  4078  007C19  68                 	db	104	;'h'
  4079  007C1A  6F                 	db	111	;'o'
  4080  007C1B  20                 	db	32
  4081  007C1C  6F                 	db	111	;'o'
  4082  007C1D  66                 	db	102	;'f'
  4083  007C1E  66                 	db	102	;'f'
  4084  007C1F  0D                 	db	13
  4085  007C20  0A                 	db	10
  4086  007C21  00                 	db	0
  4087  007C22                     STR_217:
  4088                           
  4089                           ; BSR set to: 1
  4090  007C22  43                 	db	67	;'C'
  4091  007C23  41                 	db	65	;'A'
  4092  007C24  4E                 	db	78	;'N'
  4093  007C25  20                 	db	32
  4094  007C26  52                 	db	82	;'R'
  4095  007C27  65                 	db	101	;'e'
  4096  007C28  63                 	db	99	;'c'
  4097  007C29  65                 	db	101	;'e'
  4098  007C2A  69                 	db	105	;'i'
  4099  007C2B  76                 	db	118	;'v'
  4100  007C2C  65                 	db	101	;'e'
  4101  007C2D  20                 	db	32
  4102  007C2E  6F                 	db	111	;'o'
  4103  007C2F  76                 	db	118	;'v'
  4104  007C30  65                 	db	101	;'e'
  4105  007C31  72                 	db	114	;'r'
  4106  007C32  72                 	db	114	;'r'
  4107  007C33  75                 	db	117	;'u'
  4108  007C34  6E                 	db	110	;'n'
  4109  007C35  73                 	db	115	;'s'
  4110  007C36  3A                 	db	58	;':'
  4111  007C37  20                 	db	32
  4112  007C38  00                 	db	0
  4113  007C39                     STR_305:
  4114                           
  4115                           ; BSR set to: 1
  4116  007C39  55                 	db	85	;'U'
  4117  007C3A  6E                 	db	110	;'n'
  4118  007C3B  6B                 	db	107	;'k'
  4119  007C3C  6E                 	db	110	;'n'
  4120  007C3D  6F                 	db	111	;'o'
  4121  007C3E  77                 	db	119	;'w'
  4122  007C3F  6E                 	db	110	;'n'
  4123  007C40  20                 	db	32
  4124  007C41  28                 	db	40
  4125  007C42  56                 	db	86	;'V'
  4126  007C43  65                 	db	101	;'e'
  4127  007C44  72                 	db	114	;'r'
  4128  007C45  62                 	db	98	;'b'
  4129  007C46  6F                 	db	111	;'o'
  4130  007C47  73                 	db	115	;'s'
  4131  007C48  65                 	db	101	;'e'
  4132  007C49  20                 	db	32
  4133  007C4A  75                 	db	117	;'u'
  4134  007C4B  73                 	db	115	;'s'
  4135  007C4C  65                 	db	101	;'e'
  4136  007C4D  64                 	db	100	;'d'
  4137  007C4E  29                 	db	41
  4138  007C4F  00                 	db	0
  4139  007C50                     STR_24:
  4140                           
  4141                           ; BSR set to: 1
  4142  007C50  2B                 	db	43
  4143  007C51  4F                 	db	79	;'O'
  4144  007C52  4B                 	db	75	;'K'
  4145  007C53  20                 	db	32
  4146  007C54  2D                 	db	45
  4147  007C55  20                 	db	32
  4148  007C56  4C                 	db	76	;'L'
  4149  007C57  6F                 	db	111	;'o'
  4150  007C58  6F                 	db	111	;'o'
  4151  007C59  70                 	db	112	;'p'
  4152  007C5A  62                 	db	98	;'b'
  4153  007C5B  61                 	db	97	;'a'
  4154  007C5C  63                 	db	99	;'c'
  4155  007C5D  6B                 	db	107	;'k'
  4156  007C5E  20                 	db	32
  4157  007C5F  6D                 	db	109	;'m'
  4158  007C60  6F                 	db	111	;'o'
  4159  007C61  64                 	db	100	;'d'
  4160  007C62  65                 	db	101	;'e'
  4161  007C63  0D                 	db	13
  4162  007C64  0A                 	db	10
  4163  007C65  00                 	db	0
  4164  007C66                     STR_163:
  4165                           
  4166                           ; BSR set to: 1
  4167  007C66  2B                 	db	43
  4168  007C67  4F                 	db	79	;'O'
  4169  007C68  4B                 	db	75	;'K'
  4170  007C69  20                 	db	32
  4171  007C6A  2D                 	db	45
  4172  007C6B  20                 	db	32
  4173  007C6C  54                 	db	84	;'T'
  4174  007C6D  69                 	db	105	;'i'
  4175  007C6E  6D                 	db	109	;'m'
  4176  007C6F  65                 	db	101	;'e'
  4177  007C70  73                 	db	115	;'s'
  4178  007C71  74                 	db	116	;'t'
  4179  007C72  61                 	db	97	;'a'
  4180  007C73  6D                 	db	109	;'m'
  4181  007C74  70                 	db	112	;'p'
  4182  007C75  20                 	db	32
  4183  007C76  6F                 	db	111	;'o'
  4184  007C77  66                 	db	102	;'f'
  4185  007C78  66                 	db	102	;'f'
  4186  007C79  0D                 	db	13
  4187  007C7A  0A                 	db	10
  4188  007C7B  00                 	db	0
  4189  007C7C                     STR_155:
  4190                           
  4191                           ; BSR set to: 1
  4192  007C7C  2B                 	db	43
  4193  007C7D  4F                 	db	79	;'O'
  4194  007C7E  4B                 	db	75	;'K'
  4195  007C7F  20                 	db	32
  4196  007C80  2D                 	db	45
  4197  007C81  20                 	db	32
  4198  007C82  4C                 	db	76	;'L'
  4199  007C83  6F                 	db	111	;'o'
  4200  007C84  63                 	db	99	;'c'
  4201  007C85  61                 	db	97	;'a'
  4202  007C86  6C                 	db	108	;'l'
  4203  007C87  20                 	db	32
  4204  007C88  65                 	db	101	;'e'
  4205  007C89  63                 	db	99	;'c'
  4206  007C8A  68                 	db	104	;'h'
  4207  007C8B  6F                 	db	111	;'o'
  4208  007C8C  20                 	db	32
  4209  007C8D  6F                 	db	111	;'o'
  4210  007C8E  6E                 	db	110	;'n'
  4211  007C8F  0D                 	db	13
  4212  007C90  0A                 	db	10
  4213  007C91  00                 	db	0
  4214  007C92                     STR_209:
  4215                           
  4216                           ; BSR set to: 1
  4217  007C92  52                 	db	82	;'R'
  4218  007C93  65                 	db	101	;'e'
  4219  007C94  63                 	db	99	;'c'
  4220  007C95  65                 	db	101	;'e'
  4221  007C96  69                 	db	105	;'i'
  4222  007C97  76                 	db	118	;'v'
  4223  007C98  65                 	db	101	;'e'
  4224  007C99  64                 	db	100	;'d'
  4225  007C9A  20                 	db	32
  4226  007C9B  43                 	db	67	;'C'
  4227  007C9C  41                 	db	65	;'A'
  4228  007C9D  4E                 	db	78	;'N'
  4229  007C9E  20                 	db	32
  4230  007C9F  66                 	db	102	;'f'
  4231  007CA0  72                 	db	114	;'r'
  4232  007CA1  61                 	db	97	;'a'
  4233  007CA2  6D                 	db	109	;'m'
  4234  007CA3  65                 	db	101	;'e'
  4235  007CA4  73                 	db	115	;'s'
  4236  007CA5  3A                 	db	58	;':'
  4237  007CA6  20                 	db	32
  4238  007CA7  00                 	db	0
  4239  007CA8                     STR_161:
  4240                           
  4241                           ; BSR set to: 1
  4242  007CA8  2B                 	db	43
  4243  007CA9  4F                 	db	79	;'O'
  4244  007CAA  4B                 	db	75	;'K'
  4245  007CAB  20                 	db	32
  4246  007CAC  2D                 	db	45
  4247  007CAD  20                 	db	32
  4248  007CAE  54                 	db	84	;'T'
  4249  007CAF  69                 	db	105	;'i'
  4250  007CB0  6D                 	db	109	;'m'
  4251  007CB1  65                 	db	101	;'e'
  4252  007CB2  73                 	db	115	;'s'
  4253  007CB3  74                 	db	116	;'t'
  4254  007CB4  61                 	db	97	;'a'
  4255  007CB5  6D                 	db	109	;'m'
  4256  007CB6  70                 	db	112	;'p'
  4257  007CB7  20                 	db	32
  4258  007CB8  6F                 	db	111	;'o'
  4259  007CB9  6E                 	db	110	;'n'
  4260  007CBA  0D                 	db	13
  4261  007CBB  0A                 	db	10
  4262  007CBC  00                 	db	0
  4263  007CBD                     STR_213:
  4264                           
  4265                           ; BSR set to: 1
  4266  007CBD  52                 	db	82	;'R'
  4267  007CBE  65                 	db	101	;'e'
  4268  007CBF  63                 	db	99	;'c'
  4269  007CC0  65                 	db	101	;'e'
  4270  007CC1  69                 	db	105	;'i'
  4271  007CC2  76                 	db	118	;'v'
  4272  007CC3  65                 	db	101	;'e'
  4273  007CC4  64                 	db	100	;'d'
  4274  007CC5  20                 	db	32
  4275  007CC6  43                 	db	67	;'C'
  4276  007CC7  41                 	db	65	;'A'
  4277  007CC8  4E                 	db	78	;'N'
  4278  007CC9  20                 	db	32
  4279  007CCA  62                 	db	98	;'b'
  4280  007CCB  79                 	db	121	;'y'
  4281  007CCC  74                 	db	116	;'t'
  4282  007CCD  65                 	db	101	;'e'
  4283  007CCE  73                 	db	115	;'s'
  4284  007CCF  3A                 	db	58	;':'
  4285  007CD0  20                 	db	32
  4286  007CD1  00                 	db	0
  4287  007CD2                     STR_269:
  4288                           
  4289                           ; BSR set to: 1
  4290  007CD2  4D                 	db	77	;'M'
  4291  007CD3  41                 	db	65	;'A'
  4292  007CD4  53                 	db	83	;'S'
  4293  007CD5  4B                 	db	75	;'K'
  4294  007CD6  20                 	db	32
  4295  007CD7  2D                 	db	45
  4296  007CD8  20                 	db	32
  4297  007CD9  53                 	db	83	;'S'
  4298  007CDA  65                 	db	101	;'e'
  4299  007CDB  74                 	db	116	;'t'
  4300  007CDC  20                 	db	32
  4301  007CDD  6D                 	db	109	;'m'
  4302  007CDE  61                 	db	97	;'a'
  4303  007CDF  73                 	db	115	;'s'
  4304  007CE0  6B                 	db	107	;'k'
  4305  007CE1  20                 	db	32
  4306  007CE2  2E                 	db	46
  4307  007CE3  0D                 	db	13
  4308  007CE4  0A                 	db	10
  4309  007CE5  00                 	db	0
  4310  007CE6                     STR_171:
  4311                           
  4312                           ; BSR set to: 1
  4313  007CE6  4A                 	db	74	;'J'
  4314  007CE7  46                 	db	70	;'F'
  4315  007CE8  72                 	db	114	;'r'
  4316  007CE9  61                 	db	97	;'a'
  4317  007CEA  6E                 	db	110	;'n'
  4318  007CEB  6B                 	db	107	;'k'
  4319  007CEC  66                 	db	102	;'f'
  4320  007CED  75                 	db	117	;'u'
  4321  007CEE  72                 	db	114	;'r'
  4322  007CEF  74                 	db	116	;'t'
  4323  007CF0  20                 	db	32
  4324  007CF1  52                 	db	82	;'R'
  4325  007CF2  53                 	db	83	;'S'
  4326  007CF3  2D                 	db	45
  4327  007CF4  32                 	db	50	;'2'
  4328  007CF5  33                 	db	51	;'3'
  4329  007CF6  32                 	db	50	;'2'
  4330  007CF7  0D                 	db	13
  4331  007CF8  0A                 	db	10
  4332  007CF9  00                 	db	0
  4333  007CFA                     STR_26:
  4334                           
  4335                           ; BSR set to: 1
  4336  007CFA  2B                 	db	43
  4337  007CFB  4F                 	db	79	;'O'
  4338  007CFC  4B                 	db	75	;'K'
  4339  007CFD  20                 	db	32
  4340  007CFE  2D                 	db	45
  4341  007CFF  20                 	db	32
  4342  007D00  43                 	db	67	;'C'
  4343  007D01  6C                 	db	108	;'l'
  4344  007D02  6F                 	db	111	;'o'
  4345  007D03  73                 	db	115	;'s'
  4346  007D04  65                 	db	101	;'e'
  4347  007D05  64                 	db	100	;'d'
  4348  007D06  20                 	db	32
  4349  007D07  6D                 	db	109	;'m'
  4350  007D08  6F                 	db	111	;'o'
  4351  007D09  64                 	db	100	;'d'
  4352  007D0A  65                 	db	101	;'e'
  4353  007D0B  0D                 	db	13
  4354  007D0C  0A                 	db	10
  4355  007D0D  00                 	db	0
  4356  007D0E                     STR_21:
  4357                           
  4358                           ; BSR set to: 1
  4359  007D0E  2B                 	db	43
  4360  007D0F  4F                 	db	79	;'O'
  4361  007D10  4B                 	db	75	;'K'
  4362  007D11  20                 	db	32
  4363  007D12  2D                 	db	45
  4364  007D13  20                 	db	32
  4365  007D14  4E                 	db	78	;'N'
  4366  007D15  6F                 	db	111	;'o'
  4367  007D16  72                 	db	114	;'r'
  4368  007D17  6D                 	db	109	;'m'
  4369  007D18  61                 	db	97	;'a'
  4370  007D19  6C                 	db	108	;'l'
  4371  007D1A  20                 	db	32
  4372  007D1B  6D                 	db	109	;'m'
  4373  007D1C  6F                 	db	111	;'o'
  4374  007D1D  64                 	db	100	;'d'
  4375  007D1E  65                 	db	101	;'e'
  4376  007D1F  0D                 	db	13
  4377  007D20  0A                 	db	10
  4378  007D21  00                 	db	0
  4379  007D22                     STR_22:
  4380                           
  4381                           ; BSR set to: 1
  4382  007D22  2B                 	db	43
  4383  007D23  4F                 	db	79	;'O'
  4384  007D24  4B                 	db	75	;'K'
  4385  007D25  20                 	db	32
  4386  007D26  2D                 	db	45
  4387  007D27  20                 	db	32
  4388  007D28  53                 	db	83	;'S'
  4389  007D29  69                 	db	105	;'i'
  4390  007D2A  6C                 	db	108	;'l'
  4391  007D2B  65                 	db	101	;'e'
  4392  007D2C  6E                 	db	110	;'n'
  4393  007D2D  74                 	db	116	;'t'
  4394  007D2E  20                 	db	32
  4395  007D2F  6D                 	db	109	;'m'
  4396  007D30  6F                 	db	111	;'o'
  4397  007D31  64                 	db	100	;'d'
  4398  007D32  65                 	db	101	;'e'
  4399  007D33  0D                 	db	13
  4400  007D34  0A                 	db	10
  4401  007D35  00                 	db	0
  4402  007D36                     STR_99:
  4403                           
  4404                           ; BSR set to: 1
  4405  007D36  49                 	db	73	;'I'
  4406  007D37  6E                 	db	110	;'n'
  4407  007D38  66                 	db	102	;'f'
  4408  007D39  6F                 	db	111	;'o'
  4409  007D3A  20                 	db	32
  4410  007D3B  66                 	db	102	;'f'
  4411  007D3C  6F                 	db	111	;'o'
  4412  007D3D  72                 	db	114	;'r'
  4413  007D3E  20                 	db	32
  4414  007D3F  6E                 	db	110	;'n'
  4415  007D40  6F                 	db	111	;'o'
  4416  007D41  64                 	db	100	;'d'
  4417  007D42  65                 	db	101	;'e'
  4418  007D43  20                 	db	32
  4419  007D44  69                 	db	105	;'i'
  4420  007D45  64                 	db	100	;'d'
  4421  007D46  20                 	db	32
  4422  007D47  3D                 	db	61	;'='
  4423  007D48  20                 	db	32
  4424  007D49  00                 	db	0
  4425  007D4A                     STR_294:
  4426                           
  4427                           ; BSR set to: 1
  4428  007D4A  46                 	db	70	;'F'
  4429  007D4B  69                 	db	105	;'i'
  4430  007D4C  72                 	db	114	;'r'
  4431  007D4D  6D                 	db	109	;'m'
  4432  007D4E  77                 	db	119	;'w'
  4433  007D4F  61                 	db	97	;'a'
  4434  007D50  72                 	db	114	;'r'
  4435  007D51  65                 	db	101	;'e'
  4436  007D52  20                 	db	32
  4437  007D53  76                 	db	118	;'v'
  4438  007D54  65                 	db	101	;'e'
  4439  007D55  72                 	db	114	;'r'
  4440  007D56  73                 	db	115	;'s'
  4441  007D57  69                 	db	105	;'i'
  4442  007D58  6F                 	db	111	;'o'
  4443  007D59  6E                 	db	110	;'n'
  4444  007D5A  20                 	db	32
  4445  007D5B  3D                 	db	61	;'='
  4446  007D5C  20                 	db	32
  4447  007D5D  00                 	db	0
  4448  007D5E                     STR_23:
  4449                           
  4450                           ; BSR set to: 1
  4451  007D5E  2B                 	db	43
  4452  007D5F  4F                 	db	79	;'O'
  4453  007D60  4B                 	db	75	;'K'
  4454  007D61  20                 	db	32
  4455  007D62  2D                 	db	45
  4456  007D63  20                 	db	32
  4457  007D64  53                 	db	83	;'S'
  4458  007D65  6C                 	db	108	;'l'
  4459  007D66  65                 	db	101	;'e'
  4460  007D67  65                 	db	101	;'e'
  4461  007D68  70                 	db	112	;'p'
  4462  007D69  20                 	db	32
  4463  007D6A  6D                 	db	109	;'m'
  4464  007D6B  6F                 	db	111	;'o'
  4465  007D6C  64                 	db	100	;'d'
  4466  007D6D  65                 	db	101	;'e'
  4467  007D6E  0D                 	db	13
  4468  007D6F  0A                 	db	10
  4469  007D70  00                 	db	0
  4470  007D71                     STR_27:
  4471                           
  4472                           ; BSR set to: 1
  4473  007D71  2B                 	db	43
  4474  007D72  4F                 	db	79	;'O'
  4475  007D73  4B                 	db	75	;'K'
  4476  007D74  20                 	db	32
  4477  007D75  2D                 	db	45
  4478  007D76  20                 	db	32
  4479  007D77  42                 	db	66	;'B'
  4480  007D78  69                 	db	105	;'i'
  4481  007D79  74                 	db	116	;'t'
  4482  007D7A  73                 	db	115	;'s'
  4483  007D7B  20                 	db	32
  4484  007D7C  6D                 	db	109	;'m'
  4485  007D7D  6F                 	db	111	;'o'
  4486  007D7E  64                 	db	100	;'d'
  4487  007D7F  65                 	db	101	;'e'
  4488  007D80  0D                 	db	13
  4489  007D81  0A                 	db	10
  4490  007D82  00                 	db	0
  4491  007D83                     STR_40:
  4492                           
  4493                           ; BSR set to: 1
  4494  007D83  2B                 	db	43
  4495  007D84  4F                 	db	79	;'O'
  4496  007D85  4B                 	db	75	;'K'
  4497  007D86  20                 	db	32
  4498  007D87  2D                 	db	45
  4499  007D88  20                 	db	32
  4500  007D89  6E                 	db	110	;'n'
  4501  007D8A  6F                 	db	111	;'o'
  4502  007D8B  20                 	db	32
  4503  007D8C  65                 	db	101	;'e'
  4504  007D8D  76                 	db	118	;'v'
  4505  007D8E  65                 	db	101	;'e'
  4506  007D8F  6E                 	db	110	;'n'
  4507  007D90  74                 	db	116	;'t'
  4508  007D91  73                 	db	115	;'s'
  4509  007D92  0D                 	db	13
  4510  007D93  0A                 	db	10
  4511  007D94  00                 	db	0
  4512  007D95                     STR_201:
  4513                           
  4514                           ; BSR set to: 1
  4515  007D95  53                 	db	83	;'S'
  4516  007D96  65                 	db	101	;'e'
  4517  007D97  6E                 	db	110	;'n'
  4518  007D98  74                 	db	116	;'t'
  4519  007D99  20                 	db	32
  4520  007D9A  43                 	db	67	;'C'
  4521  007D9B  41                 	db	65	;'A'
  4522  007D9C  4E                 	db	78	;'N'
  4523  007D9D  20                 	db	32
  4524  007D9E  66                 	db	102	;'f'
  4525  007D9F  72                 	db	114	;'r'
  4526  007DA0  61                 	db	97	;'a'
  4527  007DA1  6D                 	db	109	;'m'
  4528  007DA2  65                 	db	101	;'e'
  4529  007DA3  73                 	db	115	;'s'
  4530  007DA4  3A                 	db	58	;':'
  4531  007DA5  20                 	db	32
  4532  007DA6  00                 	db	0
  4533  007DA7                     STR_307:
  4534                           
  4535                           ; BSR set to: 1
  4536  007DA7  30                 	db	48	;'0'
  4537  007DA8  31                 	db	49	;'1'
  4538  007DA9  32                 	db	50	;'2'
  4539  007DAA  33                 	db	51	;'3'
  4540  007DAB  34                 	db	52	;'4'
  4541  007DAC  35                 	db	53	;'5'
  4542  007DAD  36                 	db	54	;'6'
  4543  007DAE  37                 	db	55	;'7'
  4544  007DAF  38                 	db	56	;'8'
  4545  007DB0  39                 	db	57	;'9'
  4546  007DB1  41                 	db	65	;'A'
  4547  007DB2  42                 	db	66	;'B'
  4548  007DB3  43                 	db	67	;'C'
  4549  007DB4  44                 	db	68	;'D'
  4550  007DB5  45                 	db	69	;'E'
  4551  007DB6  46                 	db	70	;'F'
  4552  007DB7  00                 	db	0
  4553  007DB8                     STR_308:
  4554                           
  4555                           ; BSR set to: 1
  4556  007DB8  30                 	db	48	;'0'
  4557  007DB9  31                 	db	49	;'1'
  4558  007DBA  32                 	db	50	;'2'
  4559  007DBB  33                 	db	51	;'3'
  4560  007DBC  34                 	db	52	;'4'
  4561  007DBD  35                 	db	53	;'5'
  4562  007DBE  36                 	db	54	;'6'
  4563  007DBF  37                 	db	55	;'7'
  4564  007DC0  38                 	db	56	;'8'
  4565  007DC1  39                 	db	57	;'9'
  4566  007DC2  61                 	db	97	;'a'
  4567  007DC3  62                 	db	98	;'b'
  4568  007DC4  63                 	db	99	;'c'
  4569  007DC5  64                 	db	100	;'d'
  4570  007DC6  65                 	db	101	;'e'
  4571  007DC7  66                 	db	102	;'f'
  4572  007DC8  00                 	db	0
  4573  007DC9                     STR_286:
  4574                           
  4575                           ; BSR set to: 1
  4576  007DC9  20                 	db	32
  4577  007DCA  6E                 	db	110	;'n'
  4578  007DCB  6F                 	db	111	;'o'
  4579  007DCC  64                 	db	100	;'d'
  4580  007DCD  65                 	db	101	;'e'
  4581  007DCE  28                 	db	40
  4582  007DCF  73                 	db	115	;'s'
  4583  007DD0  29                 	db	41
  4584  007DD1  20                 	db	32
  4585  007DD2  66                 	db	102	;'f'
  4586  007DD3  6F                 	db	111	;'o'
  4587  007DD4  75                 	db	117	;'u'
  4588  007DD5  6E                 	db	110	;'n'
  4589  007DD6  64                 	db	100	;'d'
  4590  007DD7  0D                 	db	13
  4591  007DD8  0A                 	db	10
  4592  007DD9  00                 	db	0
  4593  007DDA                     STR_205:
  4594                           
  4595                           ; BSR set to: 1
  4596  007DDA  53                 	db	83	;'S'
  4597  007DDB  65                 	db	101	;'e'
  4598  007DDC  6E                 	db	110	;'n'
  4599  007DDD  74                 	db	116	;'t'
  4600  007DDE  20                 	db	32
  4601  007DDF  43                 	db	67	;'C'
  4602  007DE0  41                 	db	65	;'A'
  4603  007DE1  4E                 	db	78	;'N'
  4604  007DE2  20                 	db	32
  4605  007DE3  62                 	db	98	;'b'
  4606  007DE4  79                 	db	121	;'y'
  4607  007DE5  74                 	db	116	;'t'
  4608  007DE6  65                 	db	101	;'e'
  4609  007DE7  73                 	db	115	;'s'
  4610  007DE8  3A                 	db	58	;':'
  4611  007DE9  20                 	db	32
  4612  007DEA  00                 	db	0
  4613  007DEB                     STR_70:
  4614                           
  4615                           ; BSR set to: 1
  4616  007DEB  2D                 	db	45
  4617  007DEC  45                 	db	69	;'E'
  4618  007DED  52                 	db	82	;'R'
  4619  007DEE  52                 	db	82	;'R'
  4620  007DEF  4F                 	db	79	;'O'
  4621  007DF0  52                 	db	82	;'R'
  4622  007DF1  20                 	db	32
  4623  007DF2  2D                 	db	45
  4624  007DF3  20                 	db	32
  4625  007DF4  6E                 	db	110	;'n'
  4626  007DF5  6F                 	db	111	;'o'
  4627  007DF6  64                 	db	100	;'d'
  4628  007DF7  65                 	db	101	;'e'
  4629  007DF8  69                 	db	105	;'i'
  4630  007DF9  64                 	db	100	;'d'
  4631  007DFA  3D                 	db	61	;'='
  4632  007DFB  00                 	db	0
  4633  007DFC                     STR_59:
  4634                           
  4635                           ; BSR set to: 1
  4636  007DFC  56                 	db	86	;'V'
  4637  007DFD  61                 	db	97	;'a'
  4638  007DFE  6C                 	db	108	;'l'
  4639  007DFF  75                 	db	117	;'u'
  4640  007E00  65                 	db	101	;'e'
  4641  007E01  20                 	db	32
  4642  007E02  66                 	db	102	;'f'
  4643  007E03  6F                 	db	111	;'o'
  4644  007E04  72                 	db	114	;'r'
  4645  007E05  20                 	db	32
  4646  007E06  72                 	db	114	;'r'
  4647  007E07  65                 	db	101	;'e'
  4648  007E08  67                 	db	103	;'g'
  4649  007E09  20                 	db	32
  4650  007E0A  00                 	db	0
  4651  007E0B                     STR_292:
  4652                           
  4653                           ; BSR set to: 1
  4654  007E0B  4D                 	db	77	;'M'
  4655  007E0C  44                 	db	68	;'D'
  4656  007E0D  46                 	db	70	;'F'
  4657  007E0E  20                 	db	32
  4658  007E0F  3D                 	db	61	;'='
  4659  007E10  20                 	db	32
  4660  007E11  68                 	db	104	;'h'
  4661  007E12  74                 	db	116	;'t'
  4662  007E13  74                 	db	116	;'t'
  4663  007E14  70                 	db	112	;'p'
  4664  007E15  3A                 	db	58	;':'
  4665  007E16  2F                 	db	47
  4666  007E17  2F                 	db	47
  4667  007E18  00                 	db	0
  4668  007E19                     STR_56:
  4669                           
  4670                           ; BSR set to: 1
  4671  007E19  2B                 	db	43
  4672  007E1A  4F                 	db	79	;'O'
  4673  007E1B  4B                 	db	75	;'K'
  4674  007E1C  20                 	db	32
  4675  007E1D  2D                 	db	45
  4676  007E1E  20                 	db	32
  4677  007E1F  6E                 	db	110	;'n'
  4678  007E20  6F                 	db	111	;'o'
  4679  007E21  64                 	db	100	;'d'
  4680  007E22  65                 	db	101	;'e'
  4681  007E23  69                 	db	105	;'i'
  4682  007E24  64                 	db	100	;'d'
  4683  007E25  3D                 	db	61	;'='
  4684  007E26  00                 	db	0
  4685  007E27                     STR_180:
  4686                           
  4687                           ; BSR set to: 1
  4688  007E27  2C                 	db	44
  4689  007E28  74                 	db	116	;'t'
  4690  007E29  69                 	db	105	;'i'
  4691  007E2A  6D                 	db	109	;'m'
  4692  007E2B  65                 	db	101	;'e'
  4693  007E2C  73                 	db	115	;'s'
  4694  007E2D  74                 	db	116	;'t'
  4695  007E2E  61                 	db	97	;'a'
  4696  007E2F  6D                 	db	109	;'m'
  4697  007E30  70                 	db	112	;'p'
  4698  007E31  3D                 	db	61	;'='
  4699  007E32  00                 	db	0
  4700  007E33                     STR_302:
  4701                           
  4702                           ; BSR set to: 1
  4703  007E33  56                 	db	86	;'V'
  4704  007E34  53                 	db	83	;'S'
  4705  007E35  43                 	db	67	;'C'
  4706  007E36  50                 	db	80	;'P'
  4707  007E37  20                 	db	32
  4708  007E38  44                 	db	68	;'D'
  4709  007E39  72                 	db	114	;'r'
  4710  007E3A  69                 	db	105	;'i'
  4711  007E3B  76                 	db	118	;'v'
  4712  007E3C  65                 	db	101	;'e'
  4713  007E3D  72                 	db	114	;'r'
  4714  007E3E  00                 	db	0
  4715  007E3F                     STR_159:
  4716                           
  4717                           ; BSR set to: 1
  4718  007E3F  54                 	db	84	;'T'
  4719  007E40  49                 	db	73	;'I'
  4720  007E41  4D                 	db	77	;'M'
  4721  007E42  45                 	db	69	;'E'
  4722  007E43  53                 	db	83	;'S'
  4723  007E44  54                 	db	84	;'T'
  4724  007E45  41                 	db	65	;'A'
  4725  007E46  4D                 	db	77	;'M'
  4726  007E47  50                 	db	80	;'P'
  4727  007E48  20                 	db	32
  4728  007E49  00                 	db	0
  4729  007E4A                     STR_138:
  4730                           
  4731                           ; BSR set to: 1
  4732  007E4A  52                 	db	82	;'R'
  4733  007E4B  57                 	db	87	;'W'
  4734  007E4C  54                 	db	84	;'T'
  4735  007E4D  49                 	db	73	;'I'
  4736  007E4E  4D                 	db	77	;'M'
  4737  007E4F  45                 	db	69	;'E'
  4738  007E50  4F                 	db	79	;'O'
  4739  007E51  55                 	db	85	;'U'
  4740  007E52  54                 	db	84	;'T'
  4741  007E53  20                 	db	32
  4742  007E54  00                 	db	0
  4743  007E55                     STR_118:
  4744                           
  4745                           ; BSR set to: 1
  4746  007E55  50                 	db	80	;'P'
  4747  007E56  45                 	db	69	;'E'
  4748  007E57  52                 	db	82	;'R'
  4749  007E58  53                 	db	83	;'S'
  4750  007E59  49                 	db	73	;'I'
  4751  007E5A  53                 	db	83	;'S'
  4752  007E5B  54                 	db	84	;'T'
  4753  007E5C  45                 	db	69	;'E'
  4754  007E5D  4E                 	db	78	;'N'
  4755  007E5E  54                 	db	84	;'T'
  4756  007E5F  00                 	db	0
  4757  007E60                     STR_199:
  4758                           
  4759                           ; BSR set to: 1
  4760  007E60  2C                 	db	44
  4761  007E61  44                 	db	68	;'D'
  4762  007E62  61                 	db	97	;'a'
  4763  007E63  74                 	db	116	;'t'
  4764  007E64  61                 	db	97	;'a'
  4765  007E65  3D                 	db	61	;'='
  4766  007E66  6E                 	db	110	;'n'
  4767  007E67  6F                 	db	111	;'o'
  4768  007E68  6E                 	db	110	;'n'
  4769  007E69  65                 	db	101	;'e'
  4770  007E6A  00                 	db	0
  4771  007E6B                     STR_57:
  4772                           
  4773                           ; BSR set to: 1
  4774  007E6B  30                 	db	48	;'0'
  4775  007E6C  78                 	db	120	;'x'
  4776  007E6D  25                 	db	37
  4777  007E6E  30                 	db	48	;'0'
  4778  007E6F  32                 	db	50	;'2'
  4779  007E70  58                 	db	88	;'X'
  4780  007E71  20                 	db	32
  4781  007E72  2D                 	db	45
  4782  007E73  20                 	db	32
  4783  007E74  00                 	db	0
  4784  007E75                     STR_298:
  4785                           
  4786                           ; BSR set to: 1
  4787  007E75  56                 	db	86	;'V'
  4788  007E76  65                 	db	101	;'e'
  4789  007E77  72                 	db	114	;'r'
  4790  007E78  73                 	db	115	;'s'
  4791  007E79  69                 	db	105	;'i'
  4792  007E7A  6F                 	db	111	;'o'
  4793  007E7B  6E                 	db	110	;'n'
  4794  007E7C  3A                 	db	58	;':'
  4795  007E7D  20                 	db	32
  4796  007E7E  00                 	db	0
  4797  007E7F                     STR_165:
  4798                           
  4799                           ; BSR set to: 1
  4800  007E7F  42                 	db	66	;'B'
  4801  007E80  41                 	db	65	;'A'
  4802  007E81  55                 	db	85	;'U'
  4803  007E82  44                 	db	68	;'D'
  4804  007E83  52                 	db	82	;'R'
  4805  007E84  41                 	db	65	;'A'
  4806  007E85  54                 	db	84	;'T'
  4807  007E86  45                 	db	69	;'E'
  4808  007E87  20                 	db	32
  4809  007E88  00                 	db	0
  4810  007E89                     STR_304:
  4811                           
  4812                           ; BSR set to: 1
  4813  007E89  56                 	db	86	;'V'
  4814  007E8A  53                 	db	83	;'S'
  4815  007E8B  43                 	db	67	;'C'
  4816  007E8C  50                 	db	80	;'P'
  4817  007E8D  20                 	db	32
  4818  007E8E  4E                 	db	78	;'N'
  4819  007E8F  6F                 	db	111	;'o'
  4820  007E90  64                 	db	100	;'d'
  4821  007E91  65                 	db	101	;'e'
  4822  007E92  00                 	db	0
  4823  007E93                     STR_303:
  4824                           
  4825                           ; BSR set to: 1
  4826  007E93  53                 	db	83	;'S'
  4827  007E94  4C                 	db	76	;'L'
  4828  007E95  20                 	db	32
  4829  007E96  44                 	db	68	;'D'
  4830  007E97  72                 	db	114	;'r'
  4831  007E98  69                 	db	105	;'i'
  4832  007E99  76                 	db	118	;'v'
  4833  007E9A  65                 	db	101	;'e'
  4834  007E9B  72                 	db	114	;'r'
  4835  007E9C  00                 	db	0
  4836  007E9D                     STR_140:
  4837                           
  4838                           ; BSR set to: 1
  4839  007E9D  53                 	db	83	;'S'
  4840  007E9E  54                 	db	84	;'T'
  4841  007E9F  41                 	db	65	;'A'
  4842  007EA0  52                 	db	82	;'R'
  4843  007EA1  54                 	db	84	;'T'
  4844  007EA2  49                 	db	73	;'I'
  4845  007EA3  46                 	db	70	;'F'
  4846  007EA4  20                 	db	32
  4847  007EA5  00                 	db	0
  4848  007EA6                     STR_189:
  4849                           
  4850                           ; BSR set to: 1
  4851  007EA6  2C                 	db	44
  4852  007EA7  6E                 	db	110	;'n'
  4853  007EA8  6F                 	db	111	;'o'
  4854  007EA9  64                 	db	100	;'d'
  4855  007EAA  65                 	db	101	;'e'
  4856  007EAB  69                 	db	105	;'i'
  4857  007EAC  64                 	db	100	;'d'
  4858  007EAD  3D                 	db	61	;'='
  4859  007EAE  00                 	db	0
  4860  007EAF                     STR_14:
  4861                           
  4862                           ; BSR set to: 1
  4863  007EAF  4C                 	db	76	;'L'
  4864  007EB0  4F                 	db	79	;'O'
  4865  007EB1  4F                 	db	79	;'O'
  4866  007EB2  50                 	db	80	;'P'
  4867  007EB3  42                 	db	66	;'B'
  4868  007EB4  41                 	db	65	;'A'
  4869  007EB5  43                 	db	67	;'C'
  4870  007EB6  4B                 	db	75	;'K'
  4871  007EB7  00                 	db	0
  4872  007EB8                     STR_166:
  4873                           
  4874                           ; BSR set to: 1
  4875  007EB8  44                 	db	68	;'D'
  4876  007EB9  45                 	db	69	;'E'
  4877  007EBA  46                 	db	70	;'F'
  4878  007EBB  41                 	db	65	;'A'
  4879  007EBC  55                 	db	85	;'U'
  4880  007EBD  4C                 	db	76	;'L'
  4881  007EBE  54                 	db	84	;'T'
  4882  007EBF  53                 	db	83	;'S'
  4883  007EC0  00                 	db	0
  4884  007EC1                     STR_172:
  4885                           
  4886                           ; BSR set to: 1
  4887  007EC1  56                 	db	86	;'V'
  4888  007EC2  31                 	db	49	;'1'
  4889  007EC3  30                 	db	48	;'0'
  4890  007EC4  31                 	db	49	;'1'
  4891  007EC5  31                 	db	49	;'1'
  4892  007EC6  0D                 	db	13
  4893  007EC7  0A                 	db	10
  4894  007EC8  00                 	db	0
  4895  007EC9                     STR_173:
  4896                           
  4897                           ; BSR set to: 1
  4898  007EC9  4E                 	db	78	;'N'
  4899  007ECA  31                 	db	49	;'1'
  4900  007ECB  39                 	db	57	;'9'
  4901  007ECC  37                 	db	55	;'7'
  4902  007ECD  37                 	db	55	;'7'
  4903  007ECE  0D                 	db	13
  4904  007ECF  0A                 	db	10
  4905  007ED0  00                 	db	0
  4906  007ED1                     STR_91:
  4907                           
  4908                           ; BSR set to: 1
  4909  007ED1  30                 	db	48	;'0'
  4910  007ED2  78                 	db	120	;'x'
  4911  007ED3  25                 	db	37
  4912  007ED4  30                 	db	48	;'0'
  4913  007ED5  32                 	db	50	;'2'
  4914  007ED6  58                 	db	88	;'X'
  4915  007ED7  0A                 	db	10
  4916  007ED8  00                 	db	0
  4917  007ED9                     STR_287:
  4918                           
  4919                           ; BSR set to: 1
  4920  007ED9  47                 	db	71	;'G'
  4921  007EDA  55                 	db	85	;'U'
  4922  007EDB  49                 	db	73	;'I'
  4923  007EDC  44                 	db	68	;'D'
  4924  007EDD  20                 	db	32
  4925  007EDE  3D                 	db	61	;'='
  4926  007EDF  20                 	db	32
  4927  007EE0  00                 	db	0
  4928  007EE1                     STR_183:
  4929                           
  4930                           ; BSR set to: 1
  4931  007EE1  2C                 	db	44
  4932  007EE2  63                 	db	99	;'c'
  4933  007EE3  6C                 	db	108	;'l'
  4934  007EE4  61                 	db	97	;'a'
  4935  007EE5  73                 	db	115	;'s'
  4936  007EE6  73                 	db	115	;'s'
  4937  007EE7  3D                 	db	61	;'='
  4938  007EE8  00                 	db	0
  4939  007EE9                     STR_147:
  4940                           
  4941                           ; BSR set to: 1
  4942  007EE9  56                 	db	86	;'V'
  4943  007EEA  45                 	db	69	;'E'
  4944  007EEB  52                 	db	82	;'R'
  4945  007EEC  42                 	db	66	;'B'
  4946  007EED  4F                 	db	79	;'O'
  4947  007EEE  53                 	db	83	;'S'
  4948  007EEF  45                 	db	69	;'E'
  4949  007EF0  00                 	db	0
  4950  007EF1                     STR_136:
  4951                           
  4952                           ; BSR set to: 1
  4953  007EF1  44                 	db	68	;'D'
  4954  007EF2  45                 	db	69	;'E'
  4955  007EF3  43                 	db	67	;'C'
  4956  007EF4  49                 	db	73	;'I'
  4957  007EF5  4D                 	db	77	;'M'
  4958  007EF6  41                 	db	65	;'A'
  4959  007EF7  4C                 	db	76	;'L'
  4960  007EF8  00                 	db	0
  4961  007EF9                     STR_18:
  4962                           
  4963                           ; BSR set to: 1
  4964  007EF9  56                 	db	86	;'V'
  4965  007EFA  45                 	db	69	;'E'
  4966  007EFB  52                 	db	82	;'R'
  4967  007EFC  53                 	db	83	;'S'
  4968  007EFD  49                 	db	73	;'I'
  4969  007EFE  4F                 	db	79	;'O'
  4970  007EFF  4E                 	db	78	;'N'
  4971  007F00  00                 	db	0
  4972  007F01                     STR_181:
  4973                           
  4974                           ; BSR set to: 1
  4975  007F01  30                 	db	48	;'0'
  4976  007F02  78                 	db	120	;'x'
  4977  007F03  25                 	db	37
  4978  007F04  30                 	db	48	;'0'
  4979  007F05  38                 	db	56	;'8'
  4980  007F06  6C                 	db	108	;'l'
  4981  007F07  58                 	db	88	;'X'
  4982  007F08  00                 	db	0
  4983  007F09                     STR_301:
  4984                           
  4985                           ; BSR set to: 1
  4986  007F09  56                 	db	86	;'V'
  4987  007F0A  65                 	db	101	;'e'
  4988  007F0B  72                 	db	114	;'r'
  4989  007F0C  62                 	db	98	;'b'
  4990  007F0D  6F                 	db	111	;'o'
  4991  007F0E  73                 	db	115	;'s'
  4992  007F0F  65                 	db	101	;'e'
  4993  007F10  00                 	db	0
  4994  007F11                     STR_300:
  4995                           
  4996                           ; BSR set to: 1
  4997  007F11  4D                 	db	77	;'M'
  4998  007F12  6F                 	db	111	;'o'
  4999  007F13  64                 	db	100	;'d'
  5000  007F14  65                 	db	101	;'e'
  5001  007F15  3A                 	db	58	;':'
  5002  007F16  20                 	db	32
  5003  007F17  00                 	db	0
  5004  007F18                     STR_195:
  5005                           
  5006                           ; BSR set to: 1
  5007  007F18  2C                 	db	44
  5008  007F19  44                 	db	68	;'D'
  5009  007F1A  61                 	db	97	;'a'
  5010  007F1B  74                 	db	116	;'t'
  5011  007F1C  61                 	db	97	;'a'
  5012  007F1D  3D                 	db	61	;'='
  5013  007F1E  00                 	db	0
  5014  007F1F                     STR_186:
  5015                           
  5016                           ; BSR set to: 1
  5017  007F1F  2C                 	db	44
  5018  007F20  74                 	db	116	;'t'
  5019  007F21  79                 	db	121	;'y'
  5020  007F22  70                 	db	112	;'p'
  5021  007F23  65                 	db	101	;'e'
  5022  007F24  3D                 	db	61	;'='
  5023  007F25  00                 	db	0
  5024  007F26                     STR_192:
  5025                           
  5026                           ; BSR set to: 1
  5027  007F26  2C                 	db	44
  5028  007F27  73                 	db	115	;'s'
  5029  007F28  69                 	db	105	;'i'
  5030  007F29  7A                 	db	122	;'z'
  5031  007F2A  65                 	db	101	;'e'
  5032  007F2B  3D                 	db	61	;'='
  5033  007F2C  00                 	db	0
  5034  007F2D                     STR_177:
  5035                           
  5036                           ; BSR set to: 1
  5037  007F2D  3C                 	db	60	;'<'
  5038  007F2E  50                 	db	80	;'P'
  5039  007F2F  72                 	db	114	;'r'
  5040  007F30  69                 	db	105	;'i'
  5041  007F31  6F                 	db	111	;'o'
  5042  007F32  3D                 	db	61	;'='
  5043  007F33  00                 	db	0
  5044  007F34                     STR_20:
  5045                           
  5046                           ; BSR set to: 1
  5047  007F34  49                 	db	73	;'I'
  5048  007F35  46                 	db	70	;'F'
  5049  007F36  4D                 	db	77	;'M'
  5050  007F37  4F                 	db	79	;'O'
  5051  007F38  44                 	db	68	;'D'
  5052  007F39  45                 	db	69	;'E'
  5053  007F3A  00                 	db	0
  5054  007F3B                     STR_16:
  5055                           
  5056                           ; BSR set to: 1
  5057  007F3B  4C                 	db	76	;'L'
  5058  007F3C  49                 	db	73	;'I'
  5059  007F3D  53                 	db	83	;'S'
  5060  007F3E  54                 	db	84	;'T'
  5061  007F3F  45                 	db	69	;'E'
  5062  007F40  4E                 	db	78	;'N'
  5063  007F41  00                 	db	0
  5064  007F42                     STR_105:
  5065                           
  5066                           ; BSR set to: 1
  5067  007F42  46                 	db	70	;'F'
  5068  007F43  49                 	db	73	;'I'
  5069  007F44  4C                 	db	76	;'L'
  5070  007F45  54                 	db	84	;'T'
  5071  007F46  45                 	db	69	;'E'
  5072  007F47  52                 	db	82	;'R'
  5073  007F48  00                 	db	0
  5074  007F49                     STR_10:
  5075                           
  5076                           ; BSR set to: 1
  5077  007F49  53                 	db	83	;'S'
  5078  007F4A  49                 	db	73	;'I'
  5079  007F4B  4C                 	db	76	;'L'
  5080  007F4C  45                 	db	69	;'E'
  5081  007F4D  4E                 	db	78	;'N'
  5082  007F4E  54                 	db	84	;'T'
  5083  007F4F  00                 	db	0
  5084  007F50                     STR_60:
  5085                           
  5086                           ; BSR set to: 1
  5087  007F50  30                 	db	48	;'0'
  5088  007F51  78                 	db	120	;'x'
  5089  007F52  25                 	db	37
  5090  007F53  30                 	db	48	;'0'
  5091  007F54  32                 	db	50	;'2'
  5092  007F55  58                 	db	88	;'X'
  5093  007F56  00                 	db	0
  5094  007F57                     STR_184:
  5095                           
  5096                           ; BSR set to: 1
  5097  007F57  30                 	db	48	;'0'
  5098  007F58  78                 	db	120	;'x'
  5099  007F59  25                 	db	37
  5100  007F5A  30                 	db	48	;'0'
  5101  007F5B  34                 	db	52	;'4'
  5102  007F5C  58                 	db	88	;'X'
  5103  007F5D  00                 	db	0
  5104  007F5E                     STR_202:
  5105                           
  5106                           ; BSR set to: 1
  5107  007F5E  30                 	db	48	;'0'
  5108  007F5F  78                 	db	120	;'x'
  5109  007F60  25                 	db	37
  5110  007F61  30                 	db	48	;'0'
  5111  007F62  38                 	db	56	;'8'
  5112  007F63  58                 	db	88	;'X'
  5113  007F64  00                 	db	0
  5114  007F65                     STR_174:
  5115                           
  5116                           ; BSR set to: 1
  5117  007F65  46                 	db	70	;'F'
  5118  007F66  30                 	db	48	;'0'
  5119  007F67  30                 	db	48	;'0'
  5120  007F68  0D                 	db	13
  5121  007F69  0A                 	db	10
  5122  007F6A  00                 	db	0
  5123  007F6B                     STR_9:
  5124                           
  5125                           ; BSR set to: 1
  5126  007F6B  2B                 	db	43
  5127  007F6C  4F                 	db	79	;'O'
  5128  007F6D  4B                 	db	75	;'K'
  5129  007F6E  0D                 	db	13
  5130  007F6F  0A                 	db	10
  5131  007F70  00                 	db	0
  5132  007F71                     STR_58:
  5133                           
  5134                           ; BSR set to: 1
  5135  007F71  25                 	db	37
  5136  007F72  64                 	db	100	;'d'
  5137  007F73  20                 	db	32
  5138  007F74  2D                 	db	45
  5139  007F75  20                 	db	32
  5140  007F76  00                 	db	0
  5141  007F77                     STR_146:
  5142                           
  5143                           ; BSR set to: 1
  5144  007F77  4D                 	db	77	;'M'
  5145  007F78  4F                 	db	79	;'O'
  5146  007F79  44                 	db	68	;'D'
  5147  007F7A  45                 	db	69	;'E'
  5148  007F7B  20                 	db	32
  5149  007F7C  00                 	db	0
  5150  007F7D                     STR_153:
  5151                           
  5152                           ; BSR set to: 1
  5153  007F7D  45                 	db	69	;'E'
  5154  007F7E  43                 	db	67	;'C'
  5155  007F7F  48                 	db	72	;'H'
  5156  007F80  4F                 	db	79	;'O'
  5157  007F81  20                 	db	32
  5158  007F82  00                 	db	0
  5159  007F83                     STR_12:
  5160                           
  5161                           ; BSR set to: 1
  5162  007F83  43                 	db	67	;'C'
  5163  007F84  4C                 	db	76	;'L'
  5164  007F85  4F                 	db	79	;'O'
  5165  007F86  53                 	db	83	;'S'
  5166  007F87  45                 	db	69	;'E'
  5167  007F88  00                 	db	0
  5168  007F89                     STR_151:
  5169                           
  5170                           ; BSR set to: 1
  5171  007F89  53                 	db	83	;'S'
  5172  007F8A  4C                 	db	76	;'L'
  5173  007F8B  43                 	db	67	;'C'
  5174  007F8C  41                 	db	65	;'A'
  5175  007F8D  4E                 	db	78	;'N'
  5176  007F8E  00                 	db	0
  5177  007F8F                     STR_133:
  5178                           
  5179                           ; BSR set to: 1
  5180  007F8F  53                 	db	83	;'S'
  5181  007F90  45                 	db	69	;'E'
  5182  007F91  54                 	db	84	;'T'
  5183  007F92  20                 	db	32
  5184  007F93  00                 	db	0
  5185  007F94                     STR_47:
  5186                           
  5187                           ; BSR set to: 1
  5188  007F94  46                 	db	70	;'F'
  5189  007F95  49                 	db	73	;'I'
  5190  007F96  4E                 	db	78	;'N'
  5191  007F97  44                 	db	68	;'D'
  5192  007F98  00                 	db	0
  5193  007F99                     STR_49:
  5194                           
  5195                           ; BSR set to: 1
  5196  007F99  52                 	db	82	;'R'
  5197  007F9A  52                 	db	82	;'R'
  5198  007F9B  45                 	db	69	;'E'
  5199  007F9C  47                 	db	71	;'G'
  5200  007F9D  00                 	db	0
  5201  007F9E                     STR_81:
  5202                           
  5203                           ; BSR set to: 1
  5204  007F9E  57                 	db	87	;'W'
  5205  007F9F  52                 	db	82	;'R'
  5206  007FA0  45                 	db	69	;'E'
  5207  007FA1  47                 	db	71	;'G'
  5208  007FA2  00                 	db	0
  5209  007FA3                     STR_120:
  5210                           
  5211                           ; BSR set to: 1
  5212  007FA3  4D                 	db	77	;'M'
  5213  007FA4  41                 	db	65	;'A'
  5214  007FA5  53                 	db	83	;'S'
  5215  007FA6  4B                 	db	75	;'K'
  5216  007FA7  00                 	db	0
  5217  007FA8                     STR_8:
  5218                           
  5219                           ; BSR set to: 1
  5220  007FA8  4F                 	db	79	;'O'
  5221  007FA9  50                 	db	80	;'P'
  5222  007FAA  45                 	db	69	;'E'
  5223  007FAB  4E                 	db	78	;'N'
  5224  007FAC  00                 	db	0
  5225  007FAD                     STR_97:
  5226                           
  5227                           ; BSR set to: 1
  5228  007FAD  49                 	db	73	;'I'
  5229  007FAE  4E                 	db	78	;'N'
  5230  007FAF  46                 	db	70	;'F'
  5231  007FB0  4F                 	db	79	;'O'
  5232  007FB1  00                 	db	0
  5233  007FB2                     STR_149:
  5234                           
  5235                           ; BSR set to: 1
  5236  007FB2  56                 	db	86	;'V'
  5237  007FB3  53                 	db	83	;'S'
  5238  007FB4  43                 	db	67	;'C'
  5239  007FB5  50                 	db	80	;'P'
  5240  007FB6  00                 	db	0
  5241  007FB7                     STR_45:
  5242                           
  5243                           ; BSR set to: 1
  5244  007FB7  48                 	db	72	;'H'
  5245  007FB8  45                 	db	69	;'E'
  5246  007FB9  4C                 	db	76	;'L'
  5247  007FBA  50                 	db	80	;'P'
  5248  007FBB  00                 	db	0
  5249  007FBC                     STR_41:
  5250                           
  5251                           ; BSR set to: 1
  5252  007FBC  53                 	db	83	;'S'
  5253  007FBD  54                 	db	84	;'T'
  5254  007FBE  41                 	db	65	;'A'
  5255  007FBF  54                 	db	84	;'T'
  5256  007FC0  00                 	db	0
  5257  007FC1                     STR_6:
  5258                           
  5259                           ; BSR set to: 1
  5260  007FC1  42                 	db	66	;'B'
  5261  007FC2  4F                 	db	79	;'O'
  5262  007FC3  4F                 	db	79	;'O'
  5263  007FC4  54                 	db	84	;'T'
  5264  007FC5  00                 	db	0
  5265  007FC6                     STR_68:
  5266                           
  5267                           ; BSR set to: 1
  5268  007FC6  27                 	db	39
  5269  007FC7  20                 	db	32
  5270  007FC8  09                 	db	9
  5271  007FC9  00                 	db	0
  5272  007FCA                     STR_200:
  5273                           
  5274                           ; BSR set to: 1
  5275  007FCA  3E                 	db	62	;'>'
  5276  007FCB  0D                 	db	13
  5277  007FCC  0A                 	db	10
  5278  007FCD  00                 	db	0
  5279  007FCE                     STR_92:
  5280                           
  5281                           ; BSR set to: 1
  5282  007FCE  25                 	db	37
  5283  007FCF  64                 	db	100	;'d'
  5284  007FD0  0A                 	db	10
  5285  007FD1  00                 	db	0
  5286  007FD2                     STR_156:
  5287                           
  5288                           ; BSR set to: 1
  5289  007FD2  4F                 	db	79	;'O'
  5290  007FD3  46                 	db	70	;'F'
  5291  007FD4  46                 	db	70	;'F'
  5292  007FD5  00                 	db	0
  5293  007FD6                     STR_43:
  5294                           
  5295                           ; BSR set to: 1
  5296  007FD6  45                 	db	69	;'E'
  5297  007FD7  52                 	db	82	;'R'
  5298  007FD8  52                 	db	82	;'R'
  5299  007FD9  00                 	db	0
  5300  007FDA                     STR_134:
  5301                           
  5302                           ; BSR set to: 1
  5303  007FDA  48                 	db	72	;'H'
  5304  007FDB  45                 	db	69	;'E'
  5305  007FDC  58                 	db	88	;'X'
  5306  007FDD  00                 	db	0
  5307  007FDE                     STR_182:
  5308                           
  5309                           ; BSR set to: 1
  5310  007FDE  25                 	db	37
  5311  007FDF  6C                 	db	108	;'l'
  5312  007FE0  75                 	db	117	;'u'
  5313  007FE1  00                 	db	0
  5314  007FE2                     STR_67:
  5315                           
  5316                           ; BSR set to: 1
  5317  007FE2  09                 	db	9
  5318  007FE3  27                 	db	39
  5319  007FE4  00                 	db	0
  5320  007FE5                     STR_289:
  5321                           
  5322                           ; BSR set to: 1
  5323  007FE5  2D                 	db	45
  5324  007FE6  2D                 	db	45
  5325  007FE7  00                 	db	0
  5326  007FE8                     STR_38:
  5327                           
  5328                           ; BSR set to: 1
  5329  007FE8  52                 	db	82	;'R'
  5330  007FE9  58                 	db	88	;'X'
  5331  007FEA  00                 	db	0
  5332  007FEB                     STR_29:
  5333                           
  5334                           ; BSR set to: 1
  5335  007FEB  54                 	db	84	;'T'
  5336  007FEC  58                 	db	88	;'X'
  5337  007FED  00                 	db	0
  5338  007FEE                     STR_61:
  5339                           
  5340                           ; BSR set to: 1
  5341  007FEE  25                 	db	37
  5342  007FEF  64                 	db	100	;'d'
  5343  007FF0  00                 	db	0
  5344  007FF1                     STR_176:
  5345                           
  5346                           ; BSR set to: 1
  5347  007FF1  07                 	db	7
  5348  007FF2  00                 	db	0
  5349  007FF3                     STR_175:
  5350                           
  5351                           ; BSR set to: 1
  5352  007FF3  0D                 	db	13
  5353  007FF4  00                 	db	0
  5354  007FF5                     STR_30:
  5355                           
  5356                           ; BSR set to: 1
  5357  007FF5  2C                 	db	44
  5358  007FF6  00                 	db	0
  5359  007FF7                     STR_296:
  5360                           
  5361                           ; BSR set to: 1
  5362  007FF7  2E                 	db	46
  5363  007FF8  00                 	db	0
  5364  007FF9                     STR_288:
  5365                           
  5366                           ; BSR set to: 1
  5367  007FF9  30                 	db	48	;'0'
  5368  007FFA  00                 	db	0
  5369  007FFB                     STR_290:
  5370                           
  5371                           ; BSR set to: 1
  5372  007FFB  3A                 	db	58	;':'
  5373  007FFC  00                 	db	0
  5374  007FFD                     STR_167:
  5375                           
  5376                           ; BSR set to: 1
  5377  007FFD  3F                 	db	63	;'?'
  5378  007FFE  00                 	db	0
  5379  007FFF                     __end_of__stringdata:
  5380                           	opt stack 0
  5381                           
  5382                           ; #config settings
  5383  007FFF  00                 	db	0	; dummy byte at the end
  5384  0000                     tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           intcon	equ	0xFF2
  5391                           indf0	equ	0xFEF
  5392                           fsr0h	equ	0xFEA
  5393                           fsr0l	equ	0xFE9
  5394                           wreg	equ	0xFE8
  5395                           indf1	equ	0xFE7
  5396                           postinc1	equ	0xFE6
  5397                           postdec1	equ	0xFE5
  5398                           fsr1h	equ	0xFE2
  5399                           fsr1l	equ	0xFE1
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           plusw2	equ	0xFDB
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408                           	psect	nvBANK1
  5409  0001F2                     __pnvBANK1:
  5410                           	opt stack 0
  5411  0001F2                     _caps:
  5412                           	opt stack 0
  5413  0001F2                     	ds	2
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           prodh	equ	0xFF4
  5419                           prodl	equ	0xFF3
  5420                           intcon	equ	0xFF2
  5421                           indf0	equ	0xFEF
  5422                           fsr0h	equ	0xFEA
  5423                           fsr0l	equ	0xFE9
  5424                           wreg	equ	0xFE8
  5425                           indf1	equ	0xFE7
  5426                           postinc1	equ	0xFE6
  5427                           postdec1	equ	0xFE5
  5428                           fsr1h	equ	0xFE2
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           postdec2	equ	0xFDD
  5433                           plusw2	equ	0xFDB
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438                           	psect	cinit
  5439  006314                     __pcinit:
  5440                           	opt stack 0
  5441  006314                     start_initialization:
  5442                           	opt stack 0
  5443  006314                     __initialization:
  5444                           	opt stack 0
  5445                           
  5446                           ; Clear objects allocated to BIGRAM (494 bytes)
  5447  006314  EE04  F000         	lfsr	0,__pbssBIGRAM
  5448  006318  EE11 F0EE          	lfsr	1,494
  5449  00631C                     clear_0:
  5450  00631C  6AEE               	clrf	postinc0,c
  5451  00631E  50E5               	movf	postdec1,w,c
  5452  006320  50E1               	movf	fsr1l,w,c
  5453  006322  E1FC               	bnz	clear_0
  5454  006324  50E2               	movf	fsr1h,w,c
  5455  006326  E1FA               	bnz	clear_0
  5456                           
  5457                           ; Clear objects allocated to BANK3 (256 bytes)
  5458  006328  EE03  F000         	lfsr	0,__pbssBANK3
  5459  00632C  EE11 F000          	lfsr	1,256
  5460  006330                     clear_1:
  5461  006330  6AEE               	clrf	postinc0,c
  5462  006332  50E5               	movf	postdec1,w,c
  5463  006334  50E1               	movf	fsr1l,w,c
  5464  006336  E1FC               	bnz	clear_1
  5465  006338  50E2               	movf	fsr1h,w,c
  5466  00633A  E1FA               	bnz	clear_1
  5467                           
  5468                           ; Clear objects allocated to BANK2 (128 bytes)
  5469  00633C  EE02  F000         	lfsr	0,__pbssBANK2
  5470  006340  0E80               	movlw	128
  5471  006342                     clear_2:
  5472  006342  6AEE               	clrf	postinc0,c
  5473  006344  06E8               	decf	wreg,f,c
  5474  006346  E1FD               	bnz	clear_2
  5475                           
  5476                           ; Clear objects allocated to BANK1 (237 bytes)
  5477  006348  EE01  F000         	lfsr	0,__pbssBANK1
  5478  00634C  0EED               	movlw	237
  5479  00634E                     clear_3:
  5480  00634E  6AEE               	clrf	postinc0,c
  5481  006350  06E8               	decf	wreg,f,c
  5482  006352  E1FD               	bnz	clear_3
  5483                           
  5484                           ; Clear objects allocated to COMRAM (30 bytes)
  5485  006354  EE00  F024         	lfsr	0,__pbssCOMRAM
  5486  006358  0E1E               	movlw	30
  5487  00635A                     clear_4:
  5488  00635A  6AEE               	clrf	postinc0,c
  5489  00635C  06E8               	decf	wreg,f,c
  5490  00635E  E1FD               	bnz	clear_4
  5491  006360                     end_of_initialization:
  5492                           	opt stack 0
  5493  006360                     __end_of__initialization:
  5494                           	opt stack 0
  5495  006360  0E00               	movlw	low (__Lmediumconst shr (0+16))
  5496  006362  6EF8               	movwf	tblptru,c
  5497  006364  0100               	movlb	0
  5498  006366  EF3C  F01F         	goto	_main	;jump to C main() function
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodh	equ	0xFF4
  5504                           prodl	equ	0xFF3
  5505                           intcon	equ	0xFF2
  5506                           indf0	equ	0xFEF
  5507                           postinc0	equ	0xFEE
  5508                           fsr0h	equ	0xFEA
  5509                           fsr0l	equ	0xFE9
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           postinc1	equ	0xFE6
  5513                           postdec1	equ	0xFE5
  5514                           fsr1h	equ	0xFE2
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           plusw2	equ	0xFDB
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524                           	psect	bssCOMRAM
  5525  000024                     __pbssCOMRAM:
  5526                           	opt stack 0
  5527  000024                     _timer:
  5528                           	opt stack 0
  5529  000024                     	ds	4
  5530  000028                     _status_led_cnt:
  5531                           	opt stack 0
  5532  000028                     	ds	2
  5533  00002A                     strtok@sp:
  5534                           	opt stack 0
  5535  00002A                     	ds	2
  5536  00002C                     _bHex:
  5537                           	opt stack 0
  5538  00002C                     	ds	1
  5539  00002D                     _bOpen:
  5540                           	opt stack 0
  5541  00002D                     	ds	1
  5542  00002E                     _bSilent:
  5543                           	opt stack 0
  5544  00002E                     	ds	1
  5545  00002F                     _bTimestamp:
  5546                           	opt stack 0
  5547  00002F                     	ds	1
  5548  000030                     _fifo_canrxcount:
  5549                           	opt stack 0
  5550  000030                     	ds	1
  5551  000031                     _ledFunctionality:
  5552                           	opt stack 0
  5553  000031                     	ds	1
  5554  000032                     _pos:
  5555                           	opt stack 0
  5556  000032                     	ds	1
  5557  000033                     _rwtimeout:
  5558                           	opt stack 0
  5559  000033                     	ds	1
  5560  000034                     _sequencyno:
  5561                           	opt stack 0
  5562  000034                     	ds	1
  5563  000035                     _stateVscpDriver:
  5564                           	opt stack 0
  5565  000035                     	ds	1
  5566  000036                     _id:
  5567                           	opt stack 0
  5568  000036                     	ds	4
  5569  00003A                     _vscpClass:
  5570                           	opt stack 0
  5571  00003A                     	ds	2
  5572  00003C                     _dlc:
  5573                           	opt stack 0
  5574  00003C                     	ds	1
  5575  00003D                     _flags:
  5576                           	opt stack 0
  5577  00003D                     	ds	1
  5578  00003E                     _vscpNodeId:
  5579                           	opt stack 0
  5580  00003E                     	ds	1
  5581  00003F                     _vscpPriority:
  5582                           	opt stack 0
  5583  00003F                     	ds	1
  5584  000040                     _vscpSize:
  5585                           	opt stack 0
  5586  000040                     	ds	1
  5587  000041                     _vscpType:
  5588                           	opt stack 0
  5589  000041                     	ds	1
  5590                           tblptru	equ	0xFF8
  5591                           tblptrh	equ	0xFF7
  5592                           tblptrl	equ	0xFF6
  5593                           tablat	equ	0xFF5
  5594                           prodh	equ	0xFF4
  5595                           prodl	equ	0xFF3
  5596                           intcon	equ	0xFF2
  5597                           indf0	equ	0xFEF
  5598                           postinc0	equ	0xFEE
  5599                           fsr0h	equ	0xFEA
  5600                           fsr0l	equ	0xFE9
  5601                           wreg	equ	0xFE8
  5602                           indf1	equ	0xFE7
  5603                           postinc1	equ	0xFE6
  5604                           postdec1	equ	0xFE5
  5605                           fsr1h	equ	0xFE2
  5606                           fsr1l	equ	0xFE1
  5607                           indf2	equ	0xFDF
  5608                           postinc2	equ	0xFDE
  5609                           postdec2	equ	0xFDD
  5610                           plusw2	equ	0xFDB
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615                           	psect	bssBANK1
  5616  000100                     __pbssBANK1:
  5617                           	opt stack 0
  5618  000100                     _can_receiveOverruns:
  5619                           	opt stack 0
  5620  000100                     	ds	4
  5621  000104                     _can_transmitOverruns:
  5622                           	opt stack 0
  5623  000104                     	ds	4
  5624  000108                     _cntRxBytes:
  5625                           	opt stack 0
  5626  000108                     	ds	4
  5627  00010C                     _cntRxFrames:
  5628                           	opt stack 0
  5629  00010C                     	ds	4
  5630  000110                     _cntTxBytes:
  5631                           	opt stack 0
  5632  000110                     	ds	4
  5633  000114                     _cntTxFrames:
  5634                           	opt stack 0
  5635  000114                     	ds	4
  5636  000118                     _timekeeper:
  5637                           	opt stack 0
  5638  000118                     	ds	4
  5639  00011C                     _uart_receiveOverruns:
  5640                           	opt stack 0
  5641  00011C                     	ds	4
  5642  000120                     _uart_transmitOverruns:
  5643                           	opt stack 0
  5644  000120                     	ds	4
  5645  000124                     _made_table:
  5646                           	opt stack 0
  5647  000124                     	ds	2
  5648  000126                     _USART_Status:
  5649                           	opt stack 0
  5650  000126                     	ds	1
  5651  000127                     __ECANRxFilterHitInfo:
  5652                           	opt stack 0
  5653  000127                     	ds	1
  5654  000128                     _bDLE:
  5655                           	opt stack 0
  5656  000128                     	ds	1
  5657  000129                     _bInitiated:
  5658                           	opt stack 0
  5659  000129                     	ds	1
  5660  00012A                     _bLocalEcho:
  5661                           	opt stack 0
  5662  00012A                     	ds	1
  5663  00012B                     _mode:
  5664                           	opt stack 0
  5665  00012B                     	ds	1
  5666  00012C                     _nTimeStamp:
  5667                           	opt stack 0
  5668  00012C                     	ds	1
  5669  00012D                     _cmdbuf:
  5670                           	opt stack 0
  5671  00012D                     	ds	80
  5672  00017D                     _wrkbuf:
  5673                           	opt stack 0
  5674  00017D                     	ds	80
  5675  0001CD                     _canInputFifo:
  5676                           	opt stack 0
  5677  0001CD                     	ds	8
  5678  0001D5                     _data:
  5679                           	opt stack 0
  5680  0001D5                     	ds	8
  5681  0001DD                     _serialInputFifo:
  5682                           	opt stack 0
  5683  0001DD                     	ds	8
  5684  0001E5                     _vscpData:
  5685                           	opt stack 0
  5686  0001E5                     	ds	8
  5687                           tblptru	equ	0xFF8
  5688                           tblptrh	equ	0xFF7
  5689                           tblptrl	equ	0xFF6
  5690                           tablat	equ	0xFF5
  5691                           prodh	equ	0xFF4
  5692                           prodl	equ	0xFF3
  5693                           intcon	equ	0xFF2
  5694                           indf0	equ	0xFEF
  5695                           postinc0	equ	0xFEE
  5696                           fsr0h	equ	0xFEA
  5697                           fsr0l	equ	0xFE9
  5698                           wreg	equ	0xFE8
  5699                           indf1	equ	0xFE7
  5700                           postinc1	equ	0xFE6
  5701                           postdec1	equ	0xFE5
  5702                           fsr1h	equ	0xFE2
  5703                           fsr1l	equ	0xFE1
  5704                           indf2	equ	0xFDF
  5705                           postinc2	equ	0xFDE
  5706                           postdec2	equ	0xFDD
  5707                           plusw2	equ	0xFDB
  5708                           fsr2h	equ	0xFDA
  5709                           fsr2l	equ	0xFD9
  5710                           status	equ	0xFD8
  5711                           
  5712                           	psect	bssBANK2
  5713  000200                     __pbssBANK2:
  5714                           	opt stack 0
  5715  000200                     _serial_inputBuffer:
  5716                           	opt stack 0
  5717  000200                     	ds	128
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           intcon	equ	0xFF2
  5725                           indf0	equ	0xFEF
  5726                           postinc0	equ	0xFEE
  5727                           fsr0h	equ	0xFEA
  5728                           fsr0l	equ	0xFE9
  5729                           wreg	equ	0xFE8
  5730                           indf1	equ	0xFE7
  5731                           postinc1	equ	0xFE6
  5732                           postdec1	equ	0xFE5
  5733                           fsr1h	equ	0xFE2
  5734                           fsr1l	equ	0xFE1
  5735                           indf2	equ	0xFDF
  5736                           postinc2	equ	0xFDE
  5737                           postdec2	equ	0xFDD
  5738                           plusw2	equ	0xFDB
  5739                           fsr2h	equ	0xFDA
  5740                           fsr2l	equ	0xFD9
  5741                           status	equ	0xFD8
  5742                           
  5743                           	psect	bssBANK3
  5744  000300                     __pbssBANK3:
  5745                           	opt stack 0
  5746  000300                     _crc8_table:
  5747                           	opt stack 0
  5748  000300                     	ds	256
  5749                           tblptru	equ	0xFF8
  5750                           tblptrh	equ	0xFF7
  5751                           tblptrl	equ	0xFF6
  5752                           tablat	equ	0xFF5
  5753                           prodh	equ	0xFF4
  5754                           prodl	equ	0xFF3
  5755                           intcon	equ	0xFF2
  5756                           indf0	equ	0xFEF
  5757                           postinc0	equ	0xFEE
  5758                           fsr0h	equ	0xFEA
  5759                           fsr0l	equ	0xFE9
  5760                           wreg	equ	0xFE8
  5761                           indf1	equ	0xFE7
  5762                           postinc1	equ	0xFE6
  5763                           postdec1	equ	0xFE5
  5764                           fsr1h	equ	0xFE2
  5765                           fsr1l	equ	0xFE1
  5766                           indf2	equ	0xFDF
  5767                           postinc2	equ	0xFDE
  5768                           postdec2	equ	0xFDD
  5769                           plusw2	equ	0xFDB
  5770                           fsr2h	equ	0xFDA
  5771                           fsr2l	equ	0xFD9
  5772                           status	equ	0xFD8
  5773                           
  5774                           	psect	bssBIGRAM
  5775  000400                     __pbssBIGRAM:
  5776                           	opt stack 0
  5777  000400                     _can_inputBuffer:
  5778                           	opt stack 0
  5779  000400                     	ds	494
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           indf0	equ	0xFEF
  5788                           postinc0	equ	0xFEE
  5789                           fsr0h	equ	0xFEA
  5790                           fsr0l	equ	0xFE9
  5791                           wreg	equ	0xFE8
  5792                           indf1	equ	0xFE7
  5793                           postinc1	equ	0xFE6
  5794                           postdec1	equ	0xFE5
  5795                           fsr1h	equ	0xFE2
  5796                           fsr1l	equ	0xFE1
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           postdec2	equ	0xFDD
  5800                           plusw2	equ	0xFDB
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805                           	psect	cstackBANK2
  5806  000280                     __pcstackBANK2:
  5807                           	opt stack 0
  5808  000280                     doModeVerbose@id:
  5809                           	opt stack 0
  5810                           
  5811                           ; 4 bytes @ 0x0
  5812  000280                     	ds	4
  5813  000284                     doModeVerbose@preg:
  5814                           	opt stack 0
  5815                           
  5816                           ; 2 bytes @ 0x4
  5817  000284                     	ds	2
  5818  000286                     doModeVerbose@preg_1352:
  5819                           	opt stack 0
  5820                           
  5821                           ; 2 bytes @ 0x6
  5822  000286                     	ds	2
  5823  000288                     doModeVerbose@filter_class:
  5824                           	opt stack 0
  5825                           
  5826                           ; 2 bytes @ 0x8
  5827  000288                     	ds	2
  5828  00028A                     doModeVerbose@mask_class:
  5829                           	opt stack 0
  5830                           
  5831                           ; 2 bytes @ 0xA
  5832  00028A                     	ds	2
  5833  00028C                     doModeVerbose@filter_priority:
  5834                           	opt stack 0
  5835                           
  5836                           ; 1 bytes @ 0xC
  5837  00028C                     	ds	1
  5838  00028D                     doModeVerbose@filter_type:
  5839                           	opt stack 0
  5840                           
  5841                           ; 1 bytes @ 0xD
  5842  00028D                     	ds	1
  5843  00028E                     doModeVerbose@filter_nodeid:
  5844                           	opt stack 0
  5845                           
  5846                           ; 1 bytes @ 0xE
  5847  00028E                     	ds	1
  5848  00028F                     doModeVerbose@mask_priority:
  5849                           	opt stack 0
  5850                           
  5851                           ; 1 bytes @ 0xF
  5852  00028F                     	ds	1
  5853  000290                     doModeVerbose@mask_type:
  5854                           	opt stack 0
  5855                           
  5856                           ; 1 bytes @ 0x10
  5857  000290                     	ds	1
  5858  000291                     doModeVerbose@mask_nodeid:
  5859                           	opt stack 0
  5860                           
  5861                           ; 1 bytes @ 0x11
  5862  000291                     	ds	2
  5863  000293                     _doModeVerbose$1307:
  5864                           	opt stack 0
  5865                           
  5866                           ; 2 bytes @ 0x13
  5867  000293                     	ds	2
  5868  000295                     _doModeVerbose$1312:
  5869                           	opt stack 0
  5870                           
  5871                           ; 2 bytes @ 0x15
  5872  000295                     	ds	2
  5873  000297                     _doModeVerbose$1316:
  5874                           	opt stack 0
  5875                           
  5876                           ; 2 bytes @ 0x17
  5877  000297                     	ds	2
  5878  000299                     _doModeVerbose$1321:
  5879                           	opt stack 0
  5880                           
  5881                           ; 2 bytes @ 0x19
  5882  000299                     	ds	2
  5883  00029B                     _doModeVerbose$1329:
  5884                           	opt stack 0
  5885                           
  5886                           ; 2 bytes @ 0x1B
  5887  00029B                     	ds	2
  5888  00029D                     _doModeVerbose$1334:
  5889                           	opt stack 0
  5890                           
  5891                           ; 2 bytes @ 0x1D
  5892  00029D                     	ds	2
  5893  00029F                     _doModeVerbose$1338:
  5894                           	opt stack 0
  5895                           
  5896                           ; 2 bytes @ 0x1F
  5897  00029F                     	ds	2
  5898  0002A1                     _doModeVerbose$1361:
  5899                           	opt stack 0
  5900                           
  5901                           ; 2 bytes @ 0x21
  5902  0002A1                     	ds	2
  5903  0002A3                     _doModeVerbose$1367:
  5904                           	opt stack 0
  5905                           
  5906                           ; 2 bytes @ 0x23
  5907  0002A3                     	ds	2
  5908  0002A5                     _doModeVerbose$1376:
  5909                           	opt stack 0
  5910                           
  5911                           ; 2 bytes @ 0x25
  5912  0002A5                     	ds	2
  5913  0002A7                     doModeVerbose@rv:
  5914                           	opt stack 0
  5915                           
  5916                           ; 1 bytes @ 0x27
  5917  0002A7                     	ds	1
  5918  0002A8                     doModeVerbose@page_1344:
  5919                           	opt stack 0
  5920                           
  5921                           ; 1 bytes @ 0x28
  5922  0002A8                     	ds	1
  5923  0002A9                     doModeVerbose@reg_1345:
  5924                           	opt stack 0
  5925                           
  5926                           ; 1 bytes @ 0x29
  5927  0002A9                     	ds	1
  5928  0002AA                     doModeVerbose@value_1370:
  5929                           	opt stack 0
  5930                           
  5931                           ; 1 bytes @ 0x2A
  5932  0002AA                     	ds	1
  5933  0002AB                     doModeVerbose@bPersistent:
  5934                           	opt stack 0
  5935                           
  5936                           ; 1 bytes @ 0x2B
  5937  0002AB                     	ds	1
  5938  0002AC                     doModeVerbose@filterno:
  5939                           	opt stack 0
  5940                           
  5941                           ; 1 bytes @ 0x2C
  5942  0002AC                     	ds	1
  5943  0002AD                     doModeVerbose@i:
  5944                           	opt stack 0
  5945                           
  5946                           ; 1 bytes @ 0x2D
  5947  0002AD                     	ds	1
  5948  0002AE                     doModeVerbose@value_1346:
  5949                           	opt stack 0
  5950                           
  5951                           ; 1 bytes @ 0x2E
  5952  0002AE                     	ds	1
  5953  0002AF                     doModeVerbose@count:
  5954                           	opt stack 0
  5955                           
  5956                           ; 1 bytes @ 0x2F
  5957  0002AF                     	ds	1
  5958  0002B0                     doModeVerbose@nodeid:
  5959                           	opt stack 0
  5960                           
  5961                           ; 1 bytes @ 0x30
  5962  0002B0                     	ds	1
  5963  0002B1                     doModeVerbose@nodeid_1343:
  5964                           	opt stack 0
  5965                           
  5966                           ; 1 bytes @ 0x31
  5967  0002B1                     	ds	1
  5968  0002B2                     doModeVerbose@maskno:
  5969                           	opt stack 0
  5970                           
  5971                           ; 1 bytes @ 0x32
  5972  0002B2                     	ds	1
  5973  0002B3                     doModeVerbose@page:
  5974                           	opt stack 0
  5975                           
  5976                           ; 1 bytes @ 0x33
  5977  0002B3                     	ds	1
  5978  0002B4                     doModeVerbose@reg:
  5979                           	opt stack 0
  5980                           
  5981                           ; 1 bytes @ 0x34
  5982  0002B4                     	ds	1
  5983  0002B5                     doModeVerbose@i_1288:
  5984                           	opt stack 0
  5985                           
  5986                           ; 1 bytes @ 0x35
  5987  0002B5                     	ds	1
  5988  0002B6                     doModeVerbose@nodeid_1369:
  5989                           	opt stack 0
  5990                           
  5991                           ; 1 bytes @ 0x36
  5992  0002B6                     	ds	1
  5993  0002B7                     doModeVerbose@c:
  5994                           	opt stack 0
  5995                           
  5996                           ; 1 bytes @ 0x37
  5997  0002B7                     	ds	1
  5998  0002B8                     doModeVerbose@value:
  5999                           	opt stack 0
  6000                           
  6001                           ; 1 bytes @ 0x38
  6002  0002B8                     	ds	1
  6003  0002B9                     doModeVerbose@p_1295:
  6004                           	opt stack 0
  6005                           
  6006                           ; 2 bytes @ 0x39
  6007  0002B9                     	ds	2
  6008  0002BB                     doModeVerbose@p_1348:
  6009                           	opt stack 0
  6010                           
  6011                           ; 2 bytes @ 0x3B
  6012  0002BB                     	ds	2
  6013  0002BD                     doModeVerbose@ifmode:
  6014                           	opt stack 0
  6015                           
  6016                           ; 1 bytes @ 0x3D
  6017  0002BD                     	ds	1
  6018  0002BE                     doModeVerbose@p:
  6019                           	opt stack 0
  6020                           
  6021                           ; 2 bytes @ 0x3E
  6022  0002BE                     	ds	2
  6023  0002C0                     doModeVerbose@id_1422:
  6024                           	opt stack 0
  6025                           
  6026                           ; 4 bytes @ 0x40
  6027  0002C0                     	ds	4
  6028  0002C4                     doModeVerbose@p_1410:
  6029                           	opt stack 0
  6030                           
  6031                           ; 2 bytes @ 0x44
  6032  0002C4                     	ds	2
  6033  0002C6                     doModeVerbose@p_1387:
  6034                           	opt stack 0
  6035                           
  6036                           ; 2 bytes @ 0x46
  6037  0002C6                     	ds	2
  6038                           tblptru	equ	0xFF8
  6039                           tblptrh	equ	0xFF7
  6040                           tblptrl	equ	0xFF6
  6041                           tablat	equ	0xFF5
  6042                           prodh	equ	0xFF4
  6043                           prodl	equ	0xFF3
  6044                           intcon	equ	0xFF2
  6045                           indf0	equ	0xFEF
  6046                           postinc0	equ	0xFEE
  6047                           fsr0h	equ	0xFEA
  6048                           fsr0l	equ	0xFE9
  6049                           wreg	equ	0xFE8
  6050                           indf1	equ	0xFE7
  6051                           postinc1	equ	0xFE6
  6052                           postdec1	equ	0xFE5
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           plusw2	equ	0xFDB
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063                           	psect	cstackBANK1
  6064  0001ED                     __pcstackBANK1:
  6065                           	opt stack 0
  6066  0001ED                     
  6067                           ; 2 bytes @ 0x0
  6068  0001ED                     	ds	2
  6069  0001EF                     
  6070                           ; 3 bytes @ 0x2
  6071  0001EF                     	ds	3
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           indf0	equ	0xFEF
  6080                           postinc0	equ	0xFEE
  6081                           fsr0h	equ	0xFEA
  6082                           fsr0l	equ	0xFE9
  6083                           wreg	equ	0xFE8
  6084                           indf1	equ	0xFE7
  6085                           postinc1	equ	0xFE6
  6086                           postdec1	equ	0xFE5
  6087                           fsr1h	equ	0xFE2
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           plusw2	equ	0xFDB
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097                           	psect	cstackBANK0
  6098  000060                     __pcstackBANK0:
  6099                           	opt stack 0
  6100  000060                     ??_fifo_getFree:
  6101  000060                     ?_fifo_init:
  6102                           	opt stack 0
  6103  000060                     ?_setFilter:
  6104                           	opt stack 0
  6105  000060                     ?__CANIDToRegs:
  6106                           	opt stack 0
  6107  000060                     ??_strchr:
  6108  000060                     ?_hexStringToBytes:
  6109                           	opt stack 0
  6110  000060                     ?_fifo_read:
  6111                           	opt stack 0
  6112  000060                     ?_memset:
  6113                           	opt stack 0
  6114  000060                     ?_memcpy:
  6115                           	opt stack 0
  6116  000060                     ?_strnicmp:
  6117                           	opt stack 0
  6118  000060                     ?___wmul:
  6119                           	opt stack 0
  6120  000060                     ?___lldiv:
  6121                           	opt stack 0
  6122  000060                     printBinary@value:
  6123                           	opt stack 0
  6124  000060                     ___lwdiv@counter:
  6125                           	opt stack 0
  6126  000060                     __CANIDToRegs@ptr:
  6127                           	opt stack 0
  6128  000060                     fifo_init@f:
  6129                           	opt stack 0
  6130  000060                     fifo_read@f:
  6131                           	opt stack 0
  6132  000060                     _init_crc8$2193:
  6133                           	opt stack 0
  6134  000060                     hexStringToBytes@buf:
  6135                           	opt stack 0
  6136  000060                     memcpy@d1:
  6137                           	opt stack 0
  6138  000060                     memset@p1:
  6139                           	opt stack 0
  6140  000060                     strcat@cp:
  6141                           	opt stack 0
  6142  000060                     strcpy@cp:
  6143                           	opt stack 0
  6144  000060                     strnicmp@s1:
  6145                           	opt stack 0
  6146  000060                     ___wmul@multiplier:
  6147                           	opt stack 0
  6148  000060                     setFilter@val:
  6149                           	opt stack 0
  6150  000060                     ___lldiv@dividend:
  6151                           	opt stack 0
  6152                           
  6153                           ; 4 bytes @ 0x0
  6154  000060                     	ds	1
  6155  000061                     printBinary@i:
  6156                           	opt stack 0
  6157  000061                     ___lwdiv@quotient:
  6158                           	opt stack 0
  6159                           
  6160                           ; 2 bytes @ 0x1
  6161  000061                     	ds	1
  6162  000062                     ?_strspn:
  6163                           	opt stack 0
  6164  000062                     ?_strcspn:
  6165                           	opt stack 0
  6166  000062                     hexStringToBytes@size:
  6167                           	opt stack 0
  6168  000062                     fifo_init@buf:
  6169                           	opt stack 0
  6170  000062                     fifo_read@buf:
  6171                           	opt stack 0
  6172  000062                     init_crc8@j:
  6173                           	opt stack 0
  6174  000062                     memcpy@s1:
  6175                           	opt stack 0
  6176  000062                     memset@c:
  6177                           	opt stack 0
  6178  000062                     strnicmp@s2:
  6179                           	opt stack 0
  6180  000062                     ___wmul@multiplicand:
  6181                           	opt stack 0
  6182  000062                     strcspn@s1:
  6183                           	opt stack 0
  6184  000062                     strspn@s1:
  6185                           	opt stack 0
  6186  000062                     __CANIDToRegs@val:
  6187                           	opt stack 0
  6188                           
  6189                           ; 4 bytes @ 0x2
  6190  000062                     	ds	1
  6191  000063                     ?_utoa:
  6192                           	opt stack 0
  6193  000063                     hexStringToBytes@inhex:
  6194                           	opt stack 0
  6195  000063                     utoa@buf:
  6196                           	opt stack 0
  6197                           
  6198                           ; 2 bytes @ 0x3
  6199  000063                     	ds	1
  6200  000064                     setFilter@bPersistent:
  6201                           	opt stack 0
  6202  000064                     init_crc8@crc:
  6203                           	opt stack 0
  6204  000064                     fifo_init@size:
  6205                           	opt stack 0
  6206  000064                     fifo_read@nbytes:
  6207                           	opt stack 0
  6208  000064                     memcpy@n:
  6209                           	opt stack 0
  6210  000064                     memset@n:
  6211                           	opt stack 0
  6212  000064                     strnicmp@len:
  6213                           	opt stack 0
  6214  000064                     ___wmul@product:
  6215                           	opt stack 0
  6216  000064                     strcspn@s2:
  6217                           	opt stack 0
  6218  000064                     strspn@s2:
  6219                           	opt stack 0
  6220  000064                     ___lldiv@divisor:
  6221                           	opt stack 0
  6222                           
  6223                           ; 4 bytes @ 0x4
  6224  000064                     	ds	1
  6225  000065                     ??_setFilter:
  6226  000065                     ??_hexStringToBytes:
  6227  000065                     init_crc8@i:
  6228                           	opt stack 0
  6229  000065                     utoa@val:
  6230                           	opt stack 0
  6231                           
  6232                           ; 2 bytes @ 0x5
  6233  000065                     	ds	1
  6234  000066                     ??_strnicmp:
  6235  000066                     ?_atoi:
  6236                           	opt stack 0
  6237  000066                     __CANIDToRegs@type:
  6238                           	opt stack 0
  6239  000066                     fifo_read@p:
  6240                           	opt stack 0
  6241  000066                     atoi@s:
  6242                           	opt stack 0
  6243  000066                     strcspn@i:
  6244                           	opt stack 0
  6245  000066                     strspn@i:
  6246                           	opt stack 0
  6247                           
  6248                           ; 2 bytes @ 0x6
  6249  000066                     	ds	1
  6250  000067                     ?_sendEscapedUartData:
  6251                           	opt stack 0
  6252  000067                     ?_calcCRC:
  6253                           	opt stack 0
  6254  000067                     ?_ECANSendMessage:
  6255                           	opt stack 0
  6256  000067                     sendEscapedUartData@pcrc:
  6257                           	opt stack 0
  6258  000067                     calcCRC@p:
  6259                           	opt stack 0
  6260  000067                     utoa@base:
  6261                           	opt stack 0
  6262  000067                     ECANSendMessage@id:
  6263                           	opt stack 0
  6264                           
  6265                           ; 4 bytes @ 0x7
  6266  000067                     	ds	1
  6267  000068                     ??_atoi:
  6268  000068                     ?_stristr:
  6269                           	opt stack 0
  6270  000068                     ?_strtok:
  6271                           	opt stack 0
  6272  000068                     ?___llmod:
  6273                           	opt stack 0
  6274  000068                     fifo_read@i:
  6275                           	opt stack 0
  6276  000068                     hexStringToBytes@len:
  6277                           	opt stack 0
  6278  000068                     stristr@s1:
  6279                           	opt stack 0
  6280  000068                     strtok@s1:
  6281                           	opt stack 0
  6282  000068                     ___llmod@dividend:
  6283                           	opt stack 0
  6284                           
  6285                           ; 4 bytes @ 0x8
  6286  000068                     	ds	1
  6287  000069                     sendEscapedUartData@c:
  6288                           	opt stack 0
  6289  000069                     calcCRC@len:
  6290                           	opt stack 0
  6291  000069                     utoa@v:
  6292                           	opt stack 0
  6293                           
  6294                           ; 2 bytes @ 0x9
  6295  000069                     	ds	1
  6296  00006A                     ?_sendVSCPDriverCommandReply:
  6297                           	opt stack 0
  6298  00006A                     ?_getCANFrame:
  6299                           	opt stack 0
  6300  00006A                     sendVSCPDriverErrorFrame@errorcode:
  6301                           	opt stack 0
  6302  00006A                     sendVSCPDriverAck@crc:
  6303                           	opt stack 0
  6304  00006A                     sendVSCPDriverNack@crc:
  6305                           	opt stack 0
  6306  00006A                     sendVSCPDriverCommandReply@cmdCode:
  6307                           	opt stack 0
  6308  00006A                     sendVSCPModeCapabilities@crc:
  6309                           	opt stack 0
  6310  00006A                     calcCRC@j:
  6311                           	opt stack 0
  6312  00006A                     atoi@sign:
  6313                           	opt stack 0
  6314  00006A                     getCANFrame@pdlc:
  6315                           	opt stack 0
  6316  00006A                     hexStringToBytes@p:
  6317                           	opt stack 0
  6318  00006A                     stristr@s2:
  6319                           	opt stack 0
  6320  00006A                     strtok@s2:
  6321                           	opt stack 0
  6322                           
  6323                           ; 2 bytes @ 0xA
  6324  00006A                     	ds	1
  6325  00006B                     sendVSCPDriverErrorFrame@crc:
  6326                           	opt stack 0
  6327  00006B                     sendVSCPDriverCommandReply@cmdReplyCode:
  6328                           	opt stack 0
  6329  00006B                     calcCRC@crc:
  6330                           	opt stack 0
  6331  00006B                     setFilter@filter:
  6332                           	opt stack 0
  6333  00006B                     utoa@c:
  6334                           	opt stack 0
  6335  00006B                     ECANSendMessage@data:
  6336                           	opt stack 0
  6337  00006B                     atoi@a:
  6338                           	opt stack 0
  6339                           
  6340                           ; 2 bytes @ 0xB
  6341  00006B                     	ds	1
  6342  00006C                     ?_itoa:
  6343                           	opt stack 0
  6344  00006C                     sendVSCPDriverCommandReply@crc:
  6345                           	opt stack 0
  6346  00006C                     setFilter@sidh:
  6347                           	opt stack 0
  6348  00006C                     getCANFrame@pdata:
  6349                           	opt stack 0
  6350  00006C                     hexStringToBytes@i:
  6351                           	opt stack 0
  6352  00006C                     itoa@buf:
  6353                           	opt stack 0
  6354  00006C                     ___llmod@divisor:
  6355                           	opt stack 0
  6356                           
  6357                           ; 4 bytes @ 0xC
  6358  00006C                     	ds	1
  6359  00006D                     setFilter@sidl:
  6360                           	opt stack 0
  6361  00006D                     ECANSendMessage@dataLen:
  6362                           	opt stack 0
  6363                           
  6364                           ; 1 bytes @ 0xD
  6365  00006D                     	ds	1
  6366  00006E                     ??_receiveSendMultiEventCANAL:
  6367  00006E                     ??_receiveSendEventCANAL:
  6368  00006E                     ?_getVSCPFrame:
  6369                           	opt stack 0
  6370  00006E                     setFilter@eidh:
  6371                           	opt stack 0
  6372  00006E                     getVSCPFrame@pvscptype:
  6373                           	opt stack 0
  6374  00006E                     ECANSendMessage@msgFlags:
  6375                           	opt stack 0
  6376  00006E                     itoa@val:
  6377                           	opt stack 0
  6378                           
  6379                           ; 2 bytes @ 0xE
  6380  00006E                     	ds	1
  6381  00006F                     ??_ECANSendMessage:
  6382  00006F                     setFilter@eidl:
  6383                           	opt stack 0
  6384  00006F                     getVSCPFrame@pNodeId:
  6385                           	opt stack 0
  6386                           
  6387                           ; 1 bytes @ 0xF
  6388  00006F                     	ds	1
  6389  000070                     ??_init_app_ram:
  6390  000070                     getVSCPFrame@pPriority:
  6391                           	opt stack 0
  6392  000070                     ___llmod@counter:
  6393                           	opt stack 0
  6394  000070                     itoa@base:
  6395                           	opt stack 0
  6396  000070                     ECANSendMessage@pb:
  6397                           	opt stack 0
  6398                           
  6399                           ; 18 bytes @ 0x10
  6400  000070                     	ds	1
  6401  000071                     ?_sprintf:
  6402                           	opt stack 0
  6403  000071                     ?_ultoa:
  6404                           	opt stack 0
  6405  000071                     getVSCPFrame@pSize:
  6406                           	opt stack 0
  6407  000071                     sprintf@sp:
  6408                           	opt stack 0
  6409  000071                     ultoa@buf:
  6410                           	opt stack 0
  6411                           
  6412                           ; 2 bytes @ 0x11
  6413  000071                     	ds	1
  6414  000072                     getVSCPFrame@pData:
  6415                           	opt stack 0
  6416  000072                     receiveSendEventCANAL@data:
  6417                           	opt stack 0
  6418  000072                     receiveSendMultiEventCANAL@data:
  6419                           	opt stack 0
  6420                           
  6421                           ; 8 bytes @ 0x12
  6422  000072                     	ds	1
  6423  000073                     sprintf@f:
  6424                           	opt stack 0
  6425  000073                     ultoa@val:
  6426                           	opt stack 0
  6427                           
  6428                           ; 4 bytes @ 0x13
  6429  000073                     	ds	1
  6430  000074                     ??_getVSCPFrame:
  6431  000074                     printFirmwareVersion@wrkbuf:
  6432                           	opt stack 0
  6433                           
  6434                           ; 20 bytes @ 0x14
  6435  000074                     	ds	3
  6436  000077                     ultoa@base:
  6437                           	opt stack 0
  6438                           
  6439                           ; 2 bytes @ 0x17
  6440  000077                     	ds	1
  6441  000078                     getVSCPFrame@pvscpclass:
  6442                           	opt stack 0
  6443                           
  6444                           ; 1 bytes @ 0x18
  6445  000078                     	ds	1
  6446  000079                     ??_sprintf:
  6447  000079                     getVSCPFrame@id:
  6448                           	opt stack 0
  6449  000079                     ultoa@v:
  6450                           	opt stack 0
  6451                           
  6452                           ; 4 bytes @ 0x19
  6453  000079                     	ds	1
  6454  00007A                     receiveSendEventCANAL@i:
  6455                           	opt stack 0
  6456  00007A                     receiveSendMultiEventCANAL@msgcount:
  6457                           	opt stack 0
  6458                           
  6459                           ; 1 bytes @ 0x1A
  6460  00007A                     	ds	1
  6461  00007B                     receiveSendEventCANAL@timestamp:
  6462                           	opt stack 0
  6463  00007B                     receiveSendMultiEventCANAL@timestamp:
  6464                           	opt stack 0
  6465                           
  6466                           ; 4 bytes @ 0x1B
  6467  00007B                     	ds	1
  6468  00007C                     sprintf@idx:
  6469                           	opt stack 0
  6470                           
  6471                           ; 1 bytes @ 0x1C
  6472  00007C                     	ds	1
  6473  00007D                     ultoa@c:
  6474                           	opt stack 0
  6475  00007D                     _sprintf$2255:
  6476                           	opt stack 0
  6477                           
  6478                           ; 2 bytes @ 0x1D
  6479  00007D                     	ds	1
  6480  00007E                     ??_receiveSendEventSLCAN:
  6481                           
  6482                           ; 0 bytes @ 0x1E
  6483  00007E                     	ds	1
  6484  00007F                     receiveSendMultiEventCANAL@i:
  6485                           	opt stack 0
  6486  00007F                     _sprintf$2256:
  6487                           	opt stack 0
  6488  00007F                     receiveSendEventCANAL@id:
  6489                           	opt stack 0
  6490                           
  6491                           ; 4 bytes @ 0x1F
  6492  00007F                     	ds	1
  6493  000080                     receiveSendMultiEventCANAL@id:
  6494                           	opt stack 0
  6495                           
  6496                           ; 4 bytes @ 0x20
  6497  000080                     	ds	1
  6498  000081                     _sprintf$2262:
  6499                           	opt stack 0
  6500  000081                     receiveSendEventSLCAN@id:
  6501                           	opt stack 0
  6502                           
  6503                           ; 4 bytes @ 0x21
  6504  000081                     	ds	1
  6505  000082                     ECANSendMessage@mode:
  6506                           	opt stack 0
  6507                           
  6508                           ; 1 bytes @ 0x22
  6509  000082                     	ds	1
  6510  000083                     receiveSendEventCANAL@dlc:
  6511                           	opt stack 0
  6512  000083                     ECANSendMessage@buffers:
  6513                           	opt stack 0
  6514  000083                     sprintf@ap:
  6515                           	opt stack 0
  6516                           
  6517                           ; 1 bytes @ 0x23
  6518  000083                     	ds	1
  6519  000084                     receiveSendEventCANAL@crc:
  6520                           	opt stack 0
  6521  000084                     receiveSendMultiEventCANAL@dlc:
  6522                           	opt stack 0
  6523  000084                     ECANSendMessage@j:
  6524                           	opt stack 0
  6525  000084                     sprintf@prec:
  6526                           	opt stack 0
  6527                           
  6528                           ; 2 bytes @ 0x24
  6529  000084                     	ds	1
  6530  000085                     receiveSendMultiEventCANAL@crc:
  6531                           	opt stack 0
  6532  000085                     receiveSendEventSLCAN@dlc:
  6533                           	opt stack 0
  6534  000085                     ECANSendMessage@tempBSEL0:
  6535                           	opt stack 0
  6536                           
  6537                           ; 1 bytes @ 0x25
  6538  000085                     	ds	1
  6539  000086                     receiveSendMultiEventCANAL@pos:
  6540                           	opt stack 0
  6541  000086                     receiveSendEventSLCAN@i:
  6542                           	opt stack 0
  6543  000086                     ECANSendMessage@tempPtr:
  6544                           	opt stack 0
  6545  000086                     sprintf@width:
  6546                           	opt stack 0
  6547                           
  6548                           ; 2 bytes @ 0x26
  6549  000086                     	ds	2
  6550  000088                     ECANSendMessage@temp:
  6551                           	opt stack 0
  6552  000088                     sprintf@_val:
  6553                           	opt stack 0
  6554                           
  6555                           ; 4 bytes @ 0x28
  6556  000088                     	ds	1
  6557  000089                     init_app_ram@i:
  6558                           	opt stack 0
  6559  000089                     ECANSendMessage@i:
  6560                           	opt stack 0
  6561                           
  6562                           ; 1 bytes @ 0x29
  6563  000089                     	ds	1
  6564  00008A                     ECANSendMessage@ptr:
  6565                           	opt stack 0
  6566                           
  6567                           ; 2 bytes @ 0x2A
  6568  00008A                     	ds	2
  6569  00008C                     ?_sendCANFrame:
  6570                           	opt stack 0
  6571  00008C                     sprintf@c:
  6572                           	opt stack 0
  6573  00008C                     sendCANFrame@id:
  6574                           	opt stack 0
  6575                           
  6576                           ; 4 bytes @ 0x2C
  6577  00008C                     	ds	1
  6578  00008D                     sprintf@flag:
  6579                           	opt stack 0
  6580                           
  6581                           ; 2 bytes @ 0x2D
  6582  00008D                     	ds	2
  6583  00008F                     ??_receivePrintEventVerbose:
  6584  00008F                     _printStatistics$1597:
  6585                           	opt stack 0
  6586  00008F                     _printErrors$1622:
  6587                           	opt stack 0
  6588                           
  6589                           ; 2 bytes @ 0x2F
  6590  00008F                     	ds	1
  6591  000090                     sendCANFrame@dlc:
  6592                           	opt stack 0
  6593                           
  6594                           ; 1 bytes @ 0x30
  6595  000090                     	ds	1
  6596  000091                     _printStatistics$1603:
  6597                           	opt stack 0
  6598  000091                     _printErrors$1628:
  6599                           	opt stack 0
  6600  000091                     sendCANFrame@pdata:
  6601                           	opt stack 0
  6602                           
  6603                           ; 2 bytes @ 0x31
  6604  000091                     	ds	2
  6605  000093                     ??_doModeSLCAN:
  6606  000093                     ??_receiveVSCPModeCanalMsg:
  6607  000093                     ?_sendVSCPFrame:
  6608                           	opt stack 0
  6609  000093                     _printStatistics$1609:
  6610                           	opt stack 0
  6611  000093                     _printErrors$1634:
  6612                           	opt stack 0
  6613  000093                     sendVSCPFrame@vscpclass:
  6614                           	opt stack 0
  6615                           
  6616                           ; 2 bytes @ 0x33
  6617  000093                     	ds	1
  6618  000094                     _receivePrintEventVerbose$3673:
  6619                           	opt stack 0
  6620                           
  6621                           ; 4 bytes @ 0x34
  6622  000094                     	ds	1
  6623  000095                     sendVSCPFrame@vscptype:
  6624                           	opt stack 0
  6625  000095                     _printStatistics$1615:
  6626                           	opt stack 0
  6627  000095                     _printErrors$1640:
  6628                           	opt stack 0
  6629                           
  6630                           ; 2 bytes @ 0x35
  6631  000095                     	ds	1
  6632  000096                     sendVSCPFrame@nodeid:
  6633                           	opt stack 0
  6634                           
  6635                           ; 1 bytes @ 0x36
  6636  000096                     	ds	1
  6637  000097                     sendVSCPFrame@priority:
  6638                           	opt stack 0
  6639  000097                     _printErrors$1647:
  6640                           	opt stack 0
  6641                           
  6642                           ; 2 bytes @ 0x37
  6643  000097                     	ds	1
  6644  000098                     sendVSCPFrame@size:
  6645                           	opt stack 0
  6646  000098                     _receivePrintEventVerbose$1497:
  6647                           	opt stack 0
  6648                           
  6649                           ; 2 bytes @ 0x38
  6650  000098                     	ds	1
  6651  000099                     _printErrors$1656:
  6652                           	opt stack 0
  6653  000099                     sendVSCPFrame@pData:
  6654                           	opt stack 0
  6655                           
  6656                           ; 2 bytes @ 0x39
  6657  000099                     	ds	1
  6658  00009A                     _receivePrintEventVerbose$1502:
  6659                           	opt stack 0
  6660  00009A                     doModeSLCAN@id:
  6661                           	opt stack 0
  6662                           
  6663                           ; 4 bytes @ 0x3A
  6664  00009A                     	ds	1
  6665  00009B                     ??_sendVSCPFrame:
  6666                           
  6667                           ; 0 bytes @ 0x3B
  6668  00009B                     	ds	1
  6669  00009C                     _receivePrintEventVerbose$1507:
  6670                           	opt stack 0
  6671                           
  6672                           ; 2 bytes @ 0x3C
  6673  00009C                     	ds	2
  6674  00009E                     doModeSLCAN@dlc:
  6675                           	opt stack 0
  6676  00009E                     _receivePrintEventVerbose$1512:
  6677                           	opt stack 0
  6678                           
  6679                           ; 2 bytes @ 0x3E
  6680  00009E                     	ds	1
  6681  00009F                     doModeSLCAN@c:
  6682                           	opt stack 0
  6683                           
  6684                           ; 1 bytes @ 0x3F
  6685  00009F                     	ds	1
  6686  0000A0                     doModeSLCAN@rv:
  6687                           	opt stack 0
  6688  0000A0                     _receivePrintEventVerbose$1517:
  6689                           	opt stack 0
  6690                           
  6691                           ; 2 bytes @ 0x40
  6692  0000A0                     	ds	2
  6693  0000A2                     _receivePrintEventVerbose$1522:
  6694                           	opt stack 0
  6695                           
  6696                           ; 2 bytes @ 0x42
  6697  0000A2                     	ds	2
  6698  0000A4                     _receivePrintEventVerbose$1527:
  6699                           	opt stack 0
  6700                           
  6701                           ; 2 bytes @ 0x44
  6702  0000A4                     	ds	2
  6703  0000A6                     receivePrintEventVerbose@i:
  6704                           	opt stack 0
  6705                           
  6706                           ; 1 bytes @ 0x46
  6707  0000A6                     	ds	1
  6708  0000A7                     receiveVSCPModeCanalMsg@data:
  6709                           	opt stack 0
  6710                           
  6711                           ; 8 bytes @ 0x47
  6712  0000A7                     	ds	8
  6713  0000AF                     receiveVSCPModeCanalMsg@id:
  6714                           	opt stack 0
  6715  0000AF                     sendVSCPFrame@id:
  6716                           	opt stack 0
  6717                           
  6718                           ; 4 bytes @ 0x4F
  6719  0000AF                     	ds	4
  6720  0000B3                     ?_readRegisterExtended:
  6721                           	opt stack 0
  6722  0000B3                     ?_writeRegisterExtended:
  6723                           	opt stack 0
  6724  0000B3                     ?_readRegister:
  6725                           	opt stack 0
  6726  0000B3                     receiveVSCPModeCanalMsg@dlc:
  6727                           	opt stack 0
  6728  0000B3                     readRegister@reg:
  6729                           	opt stack 0
  6730  0000B3                     readRegisterExtended@page:
  6731                           	opt stack 0
  6732  0000B3                     writeRegisterExtended@page:
  6733                           	opt stack 0
  6734                           
  6735                           ; 2 bytes @ 0x53
  6736  0000B3                     	ds	1
  6737  0000B4                     ??_doModeVscp:
  6738  0000B4                     readRegister@timeout:
  6739                           	opt stack 0
  6740                           
  6741                           ; 2 bytes @ 0x54
  6742  0000B4                     	ds	1
  6743  0000B5                     readRegisterExtended@reg:
  6744                           	opt stack 0
  6745  0000B5                     writeRegisterExtended@reg:
  6746                           	opt stack 0
  6747                           
  6748                           ; 1 bytes @ 0x55
  6749  0000B5                     	ds	1
  6750  0000B6                     readRegister@value:
  6751                           	opt stack 0
  6752  0000B6                     readRegisterExtended@timeout:
  6753                           	opt stack 0
  6754  0000B6                     writeRegisterExtended@timeout:
  6755                           	opt stack 0
  6756                           
  6757                           ; 2 bytes @ 0x56
  6758  0000B6                     	ds	1
  6759  0000B7                     ??_readRegister:
  6760  0000B7                     doModeVscp@c:
  6761                           	opt stack 0
  6762                           
  6763                           ; 1 bytes @ 0x57
  6764  0000B7                     	ds	1
  6765  0000B8                     readRegisterExtended@value:
  6766                           	opt stack 0
  6767  0000B8                     writeRegisterExtended@value:
  6768                           	opt stack 0
  6769                           
  6770                           ; 2 bytes @ 0x58
  6771  0000B8                     	ds	2
  6772  0000BA                     ??_readRegisterExtended:
  6773  0000BA                     ??_writeRegisterExtended:
  6774                           
  6775                           ; 0 bytes @ 0x5A
  6776  0000BA                     	ds	1
  6777  0000BB                     readRegister@nodeid:
  6778                           	opt stack 0
  6779                           
  6780                           ; 1 bytes @ 0x5B
  6781  0000BB                     	ds	1
  6782  0000BC                     printGUID@nodeid:
  6783                           	opt stack 0
  6784  0000BC                     printMDF@nodeid:
  6785                           	opt stack 0
  6786  0000BC                     printNodeFirmwareVersion@nodeid:
  6787                           	opt stack 0
  6788                           
  6789                           ; 1 bytes @ 0x5C
  6790  0000BC                     	ds	1
  6791  0000BD                     printMDF@value:
  6792                           	opt stack 0
  6793  0000BD                     printGUID@buf:
  6794                           	opt stack 0
  6795  0000BD                     printNodeFirmwareVersion@buf:
  6796                           	opt stack 0
  6797                           
  6798                           ; 3 bytes @ 0x5D
  6799  0000BD                     	ds	1
  6800  0000BE                     readRegisterExtended@nodeid:
  6801                           	opt stack 0
  6802  0000BE                     writeRegisterExtended@nodeid:
  6803                           	opt stack 0
  6804  0000BE                     printMDF@p:
  6805                           	opt stack 0
  6806                           
  6807                           ; 2 bytes @ 0x5E
  6808  0000BE                     	ds	2
  6809  0000C0                     printGUID@value:
  6810                           	opt stack 0
  6811  0000C0                     printMDF@i:
  6812                           	opt stack 0
  6813  0000C0                     printNodeFirmwareVersion@value:
  6814                           	opt stack 0
  6815                           
  6816                           ; 1 bytes @ 0x60
  6817  0000C0                     	ds	1
  6818  0000C1                     printGUID@i:
  6819                           	opt stack 0
  6820  0000C1                     printNodeFirmwareVersion@i:
  6821                           	opt stack 0
  6822                           
  6823                           ; 1 bytes @ 0x61
  6824  0000C1                     	ds	1
  6825  0000C2                     _findNodes$1702:
  6826                           	opt stack 0
  6827                           
  6828                           ; 2 bytes @ 0x62
  6829  0000C2                     	ds	2
  6830  0000C4                     findNodes@nFound:
  6831                           	opt stack 0
  6832                           
  6833                           ; 1 bytes @ 0x64
  6834  0000C4                     	ds	1
  6835  0000C5                     findNodes@value:
  6836                           	opt stack 0
  6837                           
  6838                           ; 1 bytes @ 0x65
  6839  0000C5                     	ds	1
  6840  0000C6                     findNodes@bDot:
  6841                           	opt stack 0
  6842                           
  6843                           ; 1 bytes @ 0x66
  6844  0000C6                     	ds	1
  6845  0000C7                     findNodes@i:
  6846                           	opt stack 0
  6847                           
  6848                           ; 1 bytes @ 0x67
  6849  0000C7                     	ds	1
  6850  0000C8                     ??_doModeVerbose:
  6851                           
  6852                           ; 0 bytes @ 0x68
  6853  0000C8                     	ds	20
  6854  0000DC                     ??_main:
  6855                           
  6856                           ; 0 bytes @ 0x7C
  6857  0000DC                     	ds	1
  6858  0000DD                     main@c:
  6859                           	opt stack 0
  6860                           
  6861                           ; 1 bytes @ 0x7D
  6862  0000DD                     	ds	1
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           indf0	equ	0xFEF
  6871                           postinc0	equ	0xFEE
  6872                           fsr0h	equ	0xFEA
  6873                           fsr0l	equ	0xFE9
  6874                           wreg	equ	0xFE8
  6875                           indf1	equ	0xFE7
  6876                           postinc1	equ	0xFE6
  6877                           postdec1	equ	0xFE5
  6878                           fsr1h	equ	0xFE2
  6879                           fsr1l	equ	0xFE1
  6880                           indf2	equ	0xFDF
  6881                           postinc2	equ	0xFDE
  6882                           postdec2	equ	0xFDD
  6883                           plusw2	equ	0xFDB
  6884                           fsr2h	equ	0xFDA
  6885                           fsr2l	equ	0xFD9
  6886                           status	equ	0xFD8
  6887                           
  6888                           	psect	cstackCOMRAM
  6889  000001                     __pcstackCOMRAM:
  6890                           	opt stack 0
  6891  000001                     ?__RegsToCANID:
  6892                           	opt stack 0
  6893  000001                     ?i1_WriteTimer0:
  6894                           	opt stack 0
  6895  000001                     ?_fifo_write:
  6896                           	opt stack 0
  6897  000001                     ?__ECANPointBuffer:
  6898                           	opt stack 0
  6899  000001                     ?i1_fifo_getFree:
  6900                           	opt stack 0
  6901  000001                     ReadUSART@data:
  6902                           	opt stack 0
  6903  000001                     __RegsToCANID@ptr:
  6904                           	opt stack 0
  6905  000001                     fifo_write@f:
  6906                           	opt stack 0
  6907  000001                     i1fifo_getFree@f:
  6908                           	opt stack 0
  6909  000001                     i1WriteTimer0@timer0:
  6910                           	opt stack 0
  6911                           
  6912                           ; 2 bytes @ 0x0
  6913  000001                     	ds	2
  6914  000003                     ??i1_fifo_getFree:
  6915  000003                     __RegsToCANID@val:
  6916                           	opt stack 0
  6917  000003                     fifo_write@buf:
  6918                           	opt stack 0
  6919  000003                     i1WriteTimer0@timer:
  6920                           	opt stack 0
  6921                           
  6922                           ; 2 bytes @ 0x2
  6923  000003                     	ds	1
  6924  000004                     __RegsToCANID@type:
  6925                           	opt stack 0
  6926  000004                     __ECANPointBuffer@b:
  6927                           	opt stack 0
  6928                           
  6929                           ; 1 bytes @ 0x3
  6930  000004                     	ds	1
  6931  000005                     ??__RegsToCANID:
  6932  000005                     __ECANPointBuffer@pt:
  6933                           	opt stack 0
  6934  000005                     fifo_write@nbytes:
  6935                           	opt stack 0
  6936                           
  6937                           ; 4 bytes @ 0x4
  6938  000005                     	ds	2
  6939  000007                     __RegsToCANID@Value:
  6940                           	opt stack 0
  6941                           
  6942                           ; 1 bytes @ 0x6
  6943  000007                     	ds	1
  6944  000008                     ?_ECANReceiveMessage:
  6945                           	opt stack 0
  6946  000008                     ECANReceiveMessage@data:
  6947                           	opt stack 0
  6948                           
  6949                           ; 2 bytes @ 0x7
  6950  000008                     	ds	1
  6951  000009                     ??_fifo_write:
  6952                           
  6953                           ; 0 bytes @ 0x8
  6954  000009                     	ds	1
  6955  00000A                     ECANReceiveMessage@dataLen:
  6956                           	opt stack 0
  6957                           
  6958                           ; 1 bytes @ 0x9
  6959  00000A                     	ds	1
  6960  00000B                     ECANReceiveMessage@msgFlags:
  6961                           	opt stack 0
  6962                           
  6963                           ; 1 bytes @ 0xA
  6964  00000B                     	ds	1
  6965  00000C                     ECANReceiveMessage@savedPtr:
  6966                           	opt stack 0
  6967                           
  6968                           ; 2 bytes @ 0xB
  6969  00000C                     	ds	1
  6970  00000D                     fifo_write@p:
  6971                           	opt stack 0
  6972                           
  6973                           ; 2 bytes @ 0xC
  6974  00000D                     	ds	1
  6975  00000E                     ECANReceiveMessage@id:
  6976                           	opt stack 0
  6977                           
  6978                           ; 1 bytes @ 0xD
  6979  00000E                     	ds	1
  6980  00000F                     ECANReceiveMessage@i:
  6981                           	opt stack 0
  6982  00000F                     fifo_write@i:
  6983                           	opt stack 0
  6984                           
  6985                           ; 4 bytes @ 0xE
  6986  00000F                     	ds	1
  6987  000010                     ECANReceiveMessage@mode:
  6988                           	opt stack 0
  6989                           
  6990                           ; 1 bytes @ 0xF
  6991  000010                     	ds	1
  6992  000011                     ECANReceiveMessage@temp:
  6993                           	opt stack 0
  6994                           
  6995                           ; 1 bytes @ 0x10
  6996  000011                     	ds	1
  6997  000012                     ECANReceiveMessage@ptr:
  6998                           	opt stack 0
  6999                           
  7000                           ; 2 bytes @ 0x11
  7001  000012                     	ds	2
  7002  000014                     ??_Interrupt:
  7003                           
  7004                           ; 0 bytes @ 0x13
  7005  000014                     	ds	9
  7006  00001D                     Interrupt@c:
  7007                           	opt stack 0
  7008                           
  7009                           ; 1 bytes @ 0x1C
  7010  00001D                     	ds	1
  7011  00001E                     Interrupt@fail:
  7012                           	opt stack 0
  7013                           
  7014                           ; 1 bytes @ 0x1D
  7015  00001E                     	ds	1
  7016  00001F                     ?_WriteTimer0:
  7017                           	opt stack 0
  7018  00001F                     ??_fifo_read:
  7019  00001F                     ?_OpenUSART:
  7020                           	opt stack 0
  7021  00001F                     ?_WriteTimer3:
  7022                           	opt stack 0
  7023  00001F                     ?_Write_b_eep:
  7024                           	opt stack 0
  7025  00001F                     ?_crc8:
  7026                           	opt stack 0
  7027  00001F                     ??_isdigit:
  7028  00001F                     ?_Read_b_eep:
  7029                           	opt stack 0
  7030  00001F                     ?_fifo_getFree:
  7031                           	opt stack 0
  7032  00001F                     ?_strcpy:
  7033                           	opt stack 0
  7034  00001F                     ?_strchr:
  7035                           	opt stack 0
  7036  00001F                     ?_strlen:
  7037                           	opt stack 0
  7038  00001F                     ?_ReadTimer3:
  7039                           	opt stack 0
  7040  00001F                     ?_strcat:
  7041                           	opt stack 0
  7042  00001F                     ?___lwdiv:
  7043                           	opt stack 0
  7044  00001F                     ?___lwmod:
  7045                           	opt stack 0
  7046  00001F                     ECANSetOperationMode@mode:
  7047                           	opt stack 0
  7048  00001F                     nibbleFromChar@c:
  7049                           	opt stack 0
  7050  00001F                     OpenTimer0@config:
  7051                           	opt stack 0
  7052  00001F                     OpenTimer3@config:
  7053                           	opt stack 0
  7054  00001F                     WriteUSART@data:
  7055                           	opt stack 0
  7056  00001F                     toupper@c:
  7057                           	opt stack 0
  7058  00001F                     fifo_getFree@f:
  7059                           	opt stack 0
  7060  00001F                     crc8@crc:
  7061                           	opt stack 0
  7062  00001F                     Read_b_eep@badd:
  7063                           	opt stack 0
  7064  00001F                     Write_b_eep@badd:
  7065                           	opt stack 0
  7066  00001F                     WriteTimer0@timer0:
  7067                           	opt stack 0
  7068  00001F                     WriteTimer3@timer3:
  7069                           	opt stack 0
  7070  00001F                     OpenUSART@spbrg:
  7071                           	opt stack 0
  7072  00001F                     ___lwdiv@dividend:
  7073                           	opt stack 0
  7074  00001F                     ___lwmod@dividend:
  7075                           	opt stack 0
  7076  00001F                     memcpy@d:
  7077                           	opt stack 0
  7078  00001F                     memset@p:
  7079                           	opt stack 0
  7080  00001F                     strcat@to:
  7081                           	opt stack 0
  7082  00001F                     strchr@ptr:
  7083                           	opt stack 0
  7084  00001F                     strcpy@to:
  7085                           	opt stack 0
  7086  00001F                     strlen@s:
  7087                           	opt stack 0
  7088  00001F                     ___lldiv@quotient:
  7089                           	opt stack 0
  7090                           
  7091                           ; 4 bytes @ 0x1E
  7092  00001F                     	ds	1
  7093  000020                     ?_putsUSART:
  7094                           	opt stack 0
  7095  000020                     ??_printBinary:
  7096  000020                     ?_strichr:
  7097                           	opt stack 0
  7098  000020                     _isdigit$3268:
  7099                           	opt stack 0
  7100  000020                     putsUSART@data:
  7101                           	opt stack 0
  7102  000020                     strichr@ptr:
  7103                           	opt stack 0
  7104                           
  7105                           ; 2 bytes @ 0x1F
  7106  000020                     	ds	1
  7107  000021                     ??__CANIDToRegs:
  7108  000021                     crc8@m:
  7109                           	opt stack 0
  7110  000021                     Write_b_eep@bdat:
  7111                           	opt stack 0
  7112  000021                     OpenUSART@config:
  7113                           	opt stack 0
  7114  000021                     isdigit@c:
  7115                           	opt stack 0
  7116  000021                     WriteTimer0@timer:
  7117                           	opt stack 0
  7118  000021                     ReadTimer3@timer:
  7119                           	opt stack 0
  7120  000021                     WriteTimer3@timer:
  7121                           	opt stack 0
  7122  000021                     ___lwdiv@divisor:
  7123                           	opt stack 0
  7124  000021                     ___lwmod@divisor:
  7125                           	opt stack 0
  7126  000021                     memcpy@s:
  7127                           	opt stack 0
  7128  000021                     strcat@from:
  7129                           	opt stack 0
  7130  000021                     strchr@chr:
  7131                           	opt stack 0
  7132  000021                     strcpy@from:
  7133                           	opt stack 0
  7134  000021                     strlen@cp:
  7135                           	opt stack 0
  7136                           
  7137                           ; 2 bytes @ 0x20
  7138  000021                     	ds	1
  7139  000022                     ??_putsUSART:
  7140  000022                     ??_crc8:
  7141  000022                     Write_b_eep@GIE_BIT_VAL:
  7142                           	opt stack 0
  7143  000022                     strichr@chr:
  7144                           	opt stack 0
  7145                           
  7146                           ; 2 bytes @ 0x21
  7147  000022                     	ds	1
  7148  000023                     init_app_eeprom@i:
  7149                           	opt stack 0
  7150  000023                     getCANFrame@pid:
  7151                           	opt stack 0
  7152  000023                     __CANIDToRegs@Value:
  7153                           	opt stack 0
  7154  000023                     ___lldiv@counter:
  7155                           	opt stack 0
  7156  000023                     ___lwmod@counter:
  7157                           	opt stack 0
  7158  000023                     strnicmp@r:
  7159                           	opt stack 0
  7160                           
  7161                           ; 1 bytes @ 0x22
  7162  000023                     	ds	1
  7163  000024                     tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodh	equ	0xFF4
  7168                           prodl	equ	0xFF3
  7169                           intcon	equ	0xFF2
  7170                           indf0	equ	0xFEF
  7171                           postinc0	equ	0xFEE
  7172                           fsr0h	equ	0xFEA
  7173                           fsr0l	equ	0xFE9
  7174                           wreg	equ	0xFE8
  7175                           indf1	equ	0xFE7
  7176                           postinc1	equ	0xFE6
  7177                           postdec1	equ	0xFE5
  7178                           fsr1h	equ	0xFE2
  7179                           fsr1l	equ	0xFE1
  7180                           indf2	equ	0xFDF
  7181                           postinc2	equ	0xFDE
  7182                           postdec2	equ	0xFDD
  7183                           plusw2	equ	0xFDB
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188                           ; 0 bytes @ 0x23
  7189 ;;
  7190 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7191 ;;
  7192 ;; *************** function _main *****************
  7193 ;; Defined at:
  7194 ;;		line 296 in file "main.c"
  7195 ;; Parameters:    Size  Location     Type
  7196 ;;  argc            2    0[BANK1 ] int 
  7197 ;;  argv            3    2[BANK1 ] PTR PTR unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  c               1  125[BANK0 ] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  2    0[BANK1 ] int 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : F/1
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7209 ;;      Params:         0       0       5       0       0       0       0
  7210 ;;      Locals:         0       1       0       0       0       0       0
  7211 ;;      Temps:          0       1       0       0       0       0       0
  7212 ;;      Totals:         0       2       5       0       0       0       0
  7213 ;;Total ram usage:        7 bytes
  7214 ;; Hardware stack levels required when called:   11
  7215 ;; This function calls:
  7216 ;;		_fifo_getFree
  7217 ;;		_fifo_init
  7218 ;;		_init_crc8
  7219 ;;		_Read_b_eep
  7220 ;;		_vscp_restoreDefaults
  7221 ;;		_init
  7222 ;;		_putsUSART
  7223 ;;		_printFirmwareVersion
  7224 ;;		_printMode
  7225 ;;		_fifo_read
  7226 ;;		_ECANSetOperationMode
  7227 ;;		_doModeVerbose
  7228 ;;		_doModeVscp
  7229 ;;		_doModeSLCAN
  7230 ;;		_doModeVscpNode
  7231 ;; This function is called by:
  7232 ;;		Startup code after reset
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           	psect	text0
  7237  003E78                     __ptext0:
  7238                           	opt stack 0
  7239  003E78                     _main:
  7240                           	opt stack 20
  7241                           
  7242                           ;main.c: 298: caps.maxVscpFrames = 1;
  7243                           
  7244                           ; BSR set to: 1
  7245                           ;incstack = 0
  7246                           ;incstack = 0
  7247  003E78  0E01               	movlw	1
  7248  003E7A  0101               	movlb	1	; () banked
  7249  003E7C  6FF2               	movwf	_caps& (0+255),b
  7250                           
  7251                           ;main.c: 299: caps.maxCanalFrames = 1;
  7252  003E7E  6FF3               	movwf	(_caps+1)& (0+255),b
  7253                           
  7254                           ; BSR set to: 1
  7255                           ;main.c: 304: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  7256  003E80  0E01               	movlw	high _serialInputFifo
  7257  003E82  0100               	movlb	0	; () banked
  7258  003E84  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  7259  003E86  0EDD               	movlw	low _serialInputFifo
  7260  003E88  6F60               	movwf	?_fifo_init& (0+255),b
  7261  003E8A  0E02               	movlw	high _serial_inputBuffer
  7262  003E8C  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  7263  003E8E  0E00               	movlw	low _serial_inputBuffer
  7264  003E90  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  7265  003E92  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  7266  003E94  0E80               	movlw	128
  7267  003E96  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  7268  003E98  EC90  F032         	call	_fifo_init	;wreg free
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;main.c: 305: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  7272  003E9C  0E01               	movlw	high _canInputFifo
  7273  003E9E  0100               	movlb	0	; () banked
  7274  003EA0  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  7275  003EA2  0ECD               	movlw	low _canInputFifo
  7276  003EA4  6F60               	movwf	?_fifo_init& (0+255),b
  7277  003EA6  0E04               	movlw	high _can_inputBuffer
  7278  003EA8  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  7279  003EAA  0E00               	movlw	low _can_inputBuffer
  7280  003EAC  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  7281  003EAE  0E01               	movlw	1
  7282  003EB0  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  7283  003EB2  0EEE               	movlw	238
  7284  003EB4  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  7285  003EB6  EC90  F032         	call	_fifo_init	;wreg free
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;main.c: 308: init_crc8();
  7289  003EBA  EC02  F030         	call	_init_crc8	;wreg free
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;main.c: 312: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  7293                           ;main.c: 313: ( 0xaa != Read_b_eep(0x02) ) ) {
  7294  003EBE  6A20               	clrf	?_Read_b_eep+1,c
  7295  003EC0  0E01               	movlw	1
  7296  003EC2  6E1F               	movwf	?_Read_b_eep,c
  7297  003EC4  EC7E  F034         	call	_Read_b_eep	;wreg free
  7298  003EC8  0A55               	xorlw	85
  7299  003ECA  E107               	bnz	l15007
  7300  003ECC  6A20               	clrf	?_Read_b_eep+1,c
  7301  003ECE  0E02               	movlw	2
  7302  003ED0  6E1F               	movwf	?_Read_b_eep,c
  7303  003ED2  EC7E  F034         	call	_Read_b_eep	;wreg free
  7304  003ED6  0AAA               	xorlw	170
  7305  003ED8  A4D8               	btfss	status,2,c
  7306  003EDA                     l15007:
  7307                           
  7308                           ;main.c: 314: vscp_restoreDefaults();
  7309  003EDA  EC99  F034         	call	_vscp_restoreDefaults	;wreg free
  7310                           
  7311                           ;main.c: 315: }
  7312                           ;main.c: 318: init();
  7313  003EDE  EC00  F031         	call	_init	;wreg free
  7314                           
  7315                           ;main.c: 322: _delay((unsigned long)((10)*(40000000/4000.0)));
  7316  003EE2  0E82               	movlw	130
  7317  003EE4  0100               	movlb	0	; () banked
  7318  003EE6  6FDC               	movwf	??_main& (0+255),b
  7319  003EE8  0EDD               	movlw	221
  7320  003EEA                     u24207:
  7321  003EEA  2EE8               	decfsz	wreg,f,c
  7322  003EEC  D7FE               	goto	u24207
  7323  003EEE  2FDC               	decfsz	??_main& (0+255),f,b
  7324  003EF0  D7FC               	goto	u24207
  7325  003EF2  D000               	nop2	
  7326                           
  7327                           ;main.c: 326: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  7328  003EF4  0E78               	movlw	high STR_1
  7329  003EF6  6E21               	movwf	?_putsUSART+1,c
  7330  003EF8  0E71               	movlw	low STR_1
  7331  003EFA  6E20               	movwf	?_putsUSART,c
  7332  003EFC  ECB5  F031         	call	_putsUSART	;wreg free
  7333                           
  7334                           ;main.c: 327: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  7335  003F00  0E71               	movlw	high STR_2
  7336  003F02  6E21               	movwf	?_putsUSART+1,c
  7337  003F04  0E97               	movlw	low STR_2
  7338  003F06  6E20               	movwf	?_putsUSART,c
  7339  003F08  ECB5  F031         	call	_putsUSART	;wreg free
  7340                           
  7341                           ;main.c: 328: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  7342  003F0C  0E79               	movlw	high STR_3
  7343  003F0E  6E21               	movwf	?_putsUSART+1,c
  7344  003F10  0E03               	movlw	low STR_3
  7345  003F12  6E20               	movwf	?_putsUSART,c
  7346  003F14  ECB5  F031         	call	_putsUSART	;wreg free
  7347                           
  7348                           ;main.c: 329: printFirmwareVersion();
  7349  003F18  EC4B  F02E         	call	_printFirmwareVersion	;wreg free
  7350                           
  7351                           ;main.c: 330: printMode();
  7352  003F1C  ECC9  F02F         	call	_printMode	;wreg free
  7353                           
  7354                           ;main.c: 334: if ( 0 != mode ) {
  7355  003F20  0101               	movlb	1	; () banked
  7356  003F22  512B               	movf	_mode& (0+255),w,b
  7357  003F24  E039               	bz	l15041
  7358                           
  7359                           ; BSR set to: 1
  7360                           ;main.c: 336: uint8_t c;
  7361                           ;main.c: 338: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  7362  003F26  0E72               	movlw	high STR_4
  7363  003F28  6E21               	movwf	?_putsUSART+1,c
  7364  003F2A  0EB0               	movlw	low STR_4
  7365  003F2C  6E20               	movwf	?_putsUSART,c
  7366  003F2E  ECB5  F031         	call	_putsUSART	;wreg free
  7367                           
  7368                           ;main.c: 340: timekeeper = 0;
  7369  003F32  0101               	movlb	1	; () banked
  7370  003F34  6B18               	clrf	_timekeeper& (0+255),b	;volatile
  7371  003F36  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  7372  003F38  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  7373  003F3A  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  7374                           
  7375                           ; BSR set to: 1
  7376                           ;main.c: 341: ledFunctionality = 6;
  7377  003F3C  0E06               	movlw	6
  7378  003F3E  6E31               	movwf	_ledFunctionality,c	;volatile
  7379                           
  7380                           ;main.c: 342: while (timekeeper < 3000) {
  7381  003F40  D021               	goto	l15039
  7382  003F42                     l462:
  7383                           
  7384                           ; BSR set to: 1
  7385  003F42  0004               	clrwdt		;# 
  7386                           
  7387                           ;main.c: 344: (INTCONbits.GIE = 0);
  7388  003F44  9EF2               	bcf	intcon,7,c	;volatile
  7389                           
  7390                           ;main.c: 345: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  7391  003F46  0E01               	movlw	high _serialInputFifo
  7392  003F48  0100               	movlb	0	; () banked
  7393  003F4A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7394  003F4C  0EDD               	movlw	low _serialInputFifo
  7395  003F4E  6F60               	movwf	?_fifo_read& (0+255),b
  7396  003F50  0E00               	movlw	high main@c
  7397  003F52  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7398  003F54  0EDD               	movlw	low main@c
  7399  003F56  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7400  003F58  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7401  003F5A  0E01               	movlw	1
  7402  003F5C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7403  003F5E  ECC5  F028         	call	_fifo_read	;wreg free
  7404  003F62  0560               	decf	?_fifo_read& (0+255),w,b
  7405  003F64  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7406  003F66  E10D               	bnz	l463
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;main.c: 346: (INTCONbits.GIE = 1);
  7410  003F68  8EF2               	bsf	intcon,7,c	;volatile
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;main.c: 347: if ('v' == c) {
  7414  003F6A  51DD               	movf	main@c& (0+255),w,b
  7415  003F6C  0A76               	xorlw	118
  7416  003F6E  E109               	bnz	l463
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;main.c: 348: mode = 0;
  7420  003F70  0101               	movlb	1	; () banked
  7421  003F72  6B2B               	clrf	_mode& (0+255),b
  7422                           
  7423                           ; BSR set to: 1
  7424                           ;main.c: 349: putsUSART((char *) "Temporary verbose mode set\r\n");
  7425  003F74  0E7A               	movlw	high STR_5
  7426  003F76  6E21               	movwf	?_putsUSART+1,c
  7427  003F78  0E2A               	movlw	low STR_5
  7428  003F7A  6E20               	movwf	?_putsUSART,c
  7429  003F7C  ECB5  F031         	call	_putsUSART	;wreg free
  7430                           
  7431                           ;main.c: 350: break;
  7432  003F80  D00B               	goto	l15041
  7433  003F82                     l463:
  7434                           
  7435                           ; BSR set to: 0
  7436                           ;main.c: 351: }
  7437                           ;main.c: 352: }
  7438                           ;main.c: 353: (INTCONbits.GIE = 1);
  7439  003F82  8EF2               	bsf	intcon,7,c	;volatile
  7440  003F84                     l15039:
  7441  003F84  0EB8               	movlw	184
  7442  003F86  0101               	movlb	1	; () banked
  7443  003F88  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
  7444  003F8A  0E0B               	movlw	11
  7445  003F8C  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  7446  003F8E  0E00               	movlw	0
  7447  003F90  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  7448  003F92  0E00               	movlw	0
  7449  003F94  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  7450  003F96  E3D5               	bnc	l462
  7451  003F98                     l15041:
  7452                           
  7453                           ;main.c: 354: }
  7454                           ;main.c: 355: }
  7455                           ;main.c: 357: ledFunctionality = 1;
  7456  003F98  0E01               	movlw	1
  7457  003F9A  6E31               	movwf	_ledFunctionality,c	;volatile
  7458                           
  7459                           ;main.c: 362: switch ( Read_b_eep(0x07) ) {
  7460  003F9C  D019               	goto	l15057
  7461  003F9E                     l467:
  7462                           
  7463                           ;main.c: 365: bSilent = 0;
  7464  003F9E  6A2E               	clrf	_bSilent,c
  7465                           
  7466                           ;main.c: 366: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7467  003FA0  0E00               	movlw	0
  7468  003FA2  EC4A  F034         	call	_ECANSetOperationMode
  7469                           
  7470                           ;main.c: 367: break;
  7471  003FA6  D022               	goto	l473
  7472  003FA8                     l15045:
  7473                           
  7474                           ;main.c: 370: bSilent = 1;
  7475  003FA8  0E01               	movlw	1
  7476  003FAA  6E2E               	movwf	_bSilent,c
  7477                           
  7478                           ;main.c: 371: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7479  003FAC  0E00               	movlw	0
  7480  003FAE  EC4A  F034         	call	_ECANSetOperationMode
  7481                           
  7482                           ;main.c: 372: break;
  7483  003FB2  D01C               	goto	l473
  7484  003FB4                     l470:
  7485                           
  7486                           ;main.c: 375: bSilent = 0;
  7487  003FB4  6A2E               	clrf	_bSilent,c
  7488                           
  7489                           ;main.c: 376: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  7490  003FB6  0E60               	movlw	96
  7491  003FB8  EC4A  F034         	call	_ECANSetOperationMode
  7492                           
  7493                           ;main.c: 377: break;
  7494  003FBC  D017               	goto	l473
  7495  003FBE                     l471:
  7496                           
  7497                           ;main.c: 380: bSilent = 0;
  7498  003FBE  6A2E               	clrf	_bSilent,c
  7499                           
  7500                           ;main.c: 381: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  7501  003FC0  0E40               	movlw	64
  7502  003FC2  EC4A  F034         	call	_ECANSetOperationMode
  7503                           
  7504                           ;main.c: 382: break;
  7505  003FC6  D012               	goto	l473
  7506  003FC8                     l15053:
  7507                           
  7508                           ;main.c: 385: ECANSetOperationMode( 0x20 );
  7509  003FC8  0E20               	movlw	32
  7510  003FCA  EC4A  F034         	call	_ECANSetOperationMode
  7511                           
  7512                           ;main.c: 386: break;
  7513  003FCE  D00E               	goto	l473
  7514  003FD0                     l15057:
  7515  003FD0  6A20               	clrf	?_Read_b_eep+1,c
  7516  003FD2  0E07               	movlw	7
  7517  003FD4  6E1F               	movwf	?_Read_b_eep,c
  7518  003FD6  EC7E  F034         	call	_Read_b_eep	;wreg free
  7519                           
  7520                           ; Switch size 1, requested type "space"
  7521                           ; Number of cases is 4, Range of values is 1 to 4
  7522                           ; switch strategies available:
  7523                           ; Name         Instructions Cycles
  7524                           ; simple_byte           13     7 (average)
  7525                           ;	Chosen strategy is simple_byte
  7526  003FDA  0A01               	xorlw	1	; case 1
  7527  003FDC  E0E0               	bz	l467
  7528  003FDE  0A03               	xorlw	3	; case 2
  7529  003FE0  E0E3               	bz	l15045
  7530  003FE2  0A01               	xorlw	1	; case 3
  7531  003FE4  E0E7               	bz	l470
  7532  003FE6  0A07               	xorlw	7	; case 4
  7533  003FE8  E0EA               	bz	l471
  7534  003FEA  D7EE               	goto	l15053
  7535  003FEC                     l473:
  7536  003FEC  0004               	clrwdt		;# 
  7537                           
  7538                           ;main.c: 400: if ( RCSTAbits.OERR ) {
  7539  003FEE  A2AB               	btfss	4011,1,c	;volatile
  7540  003FF0  D002               	goto	l474
  7541                           
  7542                           ;main.c: 401: RCSTAbits.CREN = 0;
  7543  003FF2  98AB               	bcf	4011,4,c	;volatile
  7544                           
  7545                           ;main.c: 402: RCSTAbits.CREN = 1;
  7546  003FF4  88AB               	bsf	4011,4,c	;volatile
  7547  003FF6                     l474:
  7548                           
  7549                           ;main.c: 403: }
  7550                           ;main.c: 405: (INTCONbits.GIE = 0);
  7551  003FF6  9EF2               	bcf	intcon,7,c	;volatile
  7552                           
  7553                           ;main.c: 406: if ( fifo_getFree( &serialInputFifo ) < 100 ) {
  7554  003FF8  0101               	movlb	1	; () banked
  7555  003FFA  0E01               	movlw	high _serialInputFifo
  7556  003FFC  6E20               	movwf	?_fifo_getFree+1,c
  7557  003FFE  0EDD               	movlw	low _serialInputFifo
  7558  004000  6E1F               	movwf	?_fifo_getFree,c
  7559  004002  EC75  F02B         	call	_fifo_getFree	;wreg free
  7560  004006  0E64               	movlw	100
  7561  004008  5C1F               	subwf	?_fifo_getFree,w,c
  7562  00400A  0E00               	movlw	0
  7563  00400C  5820               	subwfb	?_fifo_getFree+1,w,c
  7564  00400E  E202               	bc	l475
  7565                           
  7566                           ; BSR set to: 0
  7567                           ;main.c: 407: PORTCbits.RC4 = 0;
  7568  004010  9882               	bcf	3970,4,c	;volatile
  7569                           
  7570                           ;main.c: 408: }
  7571  004012  D001               	goto	l476
  7572  004014                     l475:
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;main.c: 409: else {
  7576                           ;main.c: 410: PORTCbits.RC4 = 1;
  7577  004014  8882               	bsf	3970,4,c	;volatile
  7578  004016                     l476:
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;main.c: 411: }
  7582                           ;main.c: 412: (INTCONbits.GIE = 1);
  7583  004016  8EF2               	bsf	intcon,7,c	;volatile
  7584                           
  7585                           ;main.c: 414: if (0 == mode) {
  7586  004018  0101               	movlb	1	; () banked
  7587  00401A  672B               	tstfsz	_mode& (0+255),b
  7588  00401C  D003               	goto	l15067
  7589                           
  7590                           ; BSR set to: 1
  7591                           ;main.c: 415: doModeVerbose();
  7592  00401E  ECA9  F003         	call	_doModeVerbose	;wreg free
  7593                           
  7594                           ;main.c: 416: }
  7595  004022  D7E4               	goto	l473
  7596  004024                     l15067:
  7597                           
  7598                           ; BSR set to: 1
  7599                           ;main.c: 417: else if (1 == mode) {
  7600  004024  052B               	decf	_mode& (0+255),w,b
  7601  004026  E103               	bnz	l15071
  7602  004028                     l15069:
  7603                           
  7604                           ; BSR set to: 1
  7605                           ;main.c: 418: doModeVscp();
  7606  004028  ECBD  F019         	call	_doModeVscp	;wreg free
  7607                           
  7608                           ;main.c: 419: }
  7609  00402C  D7DF               	goto	l473
  7610  00402E                     l15071:
  7611                           
  7612                           ; BSR set to: 1
  7613                           ;main.c: 420: else if (2 == mode) {
  7614  00402E  512B               	movf	_mode& (0+255),w,b
  7615  004030  0A02               	xorlw	2
  7616  004032  E103               	bnz	l15075
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;main.c: 421: doModeSLCAN();
  7620  004034  ECA3  F013         	call	_doModeSLCAN	;wreg free
  7621                           
  7622                           ;main.c: 422: }
  7623  004038  D7D9               	goto	l473
  7624  00403A                     l15075:
  7625                           
  7626                           ; BSR set to: 1
  7627                           ;main.c: 423: else if (3 == mode) {
  7628  00403A  512B               	movf	_mode& (0+255),w,b
  7629  00403C  0A03               	xorlw	3
  7630  00403E  E1F4               	bnz	l15069
  7631                           
  7632                           ; BSR set to: 1
  7633                           ;main.c: 424: doModeVscpNode();
  7634  004040  ECA0  F034         	call	_doModeVscpNode	;wreg free
  7635                           
  7636                           ;main.c: 425: }
  7637  004044  D7D3               	goto	l473
  7638  004046                     __end_of_main:
  7639                           	opt stack 0
  7640                           tblptru	equ	0xFF8
  7641                           tblptrh	equ	0xFF7
  7642                           tblptrl	equ	0xFF6
  7643                           tablat	equ	0xFF5
  7644                           prodh	equ	0xFF4
  7645                           prodl	equ	0xFF3
  7646                           intcon	equ	0xFF2
  7647                           indf0	equ	0xFEF
  7648                           postinc0	equ	0xFEE
  7649                           fsr0h	equ	0xFEA
  7650                           fsr0l	equ	0xFE9
  7651                           wreg	equ	0xFE8
  7652                           indf1	equ	0xFE7
  7653                           postinc1	equ	0xFE6
  7654                           postdec1	equ	0xFE5
  7655                           fsr1h	equ	0xFE2
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           plusw2	equ	0xFDB
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665 ;; *************** function _doModeVscpNode *****************
  7666 ;; Defined at:
  7667 ;;		line 1979 in file "main.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;		None               void
  7674 ;; Registers used:
  7675 ;;		None
  7676 ;; Tracked objects:
  7677 ;;		On entry : F/1
  7678 ;;		On exit  : F/1
  7679 ;;		Unchanged: F/0
  7680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7681 ;;      Params:         0       0       0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; Hardware stack levels required when called:    3
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_main
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text1
  7696  006940                     __ptext1:
  7697                           	opt stack 0
  7698  006940                     _doModeVscpNode:
  7699                           	opt stack 27
  7700                           
  7701                           ; BSR set to: 1
  7702                           
  7703                           ; BSR set to: 1
  7704                           ;incstack = 0
  7705                           ;incstack = 0
  7706  006940  0012               	return	
  7707  006942                     __end_of_doModeVscpNode:
  7708                           	opt stack 0
  7709                           tblptru	equ	0xFF8
  7710                           tblptrh	equ	0xFF7
  7711                           tblptrl	equ	0xFF6
  7712                           tablat	equ	0xFF5
  7713                           prodh	equ	0xFF4
  7714                           prodl	equ	0xFF3
  7715                           intcon	equ	0xFF2
  7716                           indf0	equ	0xFEF
  7717                           postinc0	equ	0xFEE
  7718                           fsr0h	equ	0xFEA
  7719                           fsr0l	equ	0xFE9
  7720                           wreg	equ	0xFE8
  7721                           indf1	equ	0xFE7
  7722                           postinc1	equ	0xFE6
  7723                           postdec1	equ	0xFE5
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function _doModeSLCAN *****************
  7735 ;; Defined at:
  7736 ;;		line 1761 in file "main.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;		None
  7739 ;; Auto vars:     Size  Location     Type
  7740 ;;  id              4   58[BANK0 ] unsigned long 
  7741 ;;  dlc             1   62[BANK0 ] unsigned char 
  7742 ;;  rv              1   64[BANK0 ] enum E15660
  7743 ;;  c               1   63[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : F/1
  7750 ;;		On exit  : F/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7753 ;;      Params:         0       0       0       0       0       0       0
  7754 ;;      Locals:         0       7       0       0       0       0       0
  7755 ;;      Temps:          0       7       0       0       0       0       0
  7756 ;;      Totals:         0      14       0       0       0       0       0
  7757 ;;Total ram usage:       14 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:    7
  7760 ;; This function calls:
  7761 ;;		_putsUSART
  7762 ;;		_fifo_read
  7763 ;;		_ECANSetOperationMode
  7764 ;;		_Busy_eep
  7765 ;;		_Write_b_eep
  7766 ;;		_memset
  7767 ;;		_receiveSendEventSLCAN
  7768 ;;		_strlen
  7769 ;;		_hexStringToBytes
  7770 ;;		_memcpy
  7771 ;;		_sendCANFrame
  7772 ;; This function is called by:
  7773 ;;		_main
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           	psect	text2
  7778  002746                     __ptext2:
  7779                           	opt stack 0
  7780  002746                     _doModeSLCAN:
  7781                           	opt stack 23
  7782                           
  7783                           ; BSR set to: 1
  7784                           ;main.c: 1762: uint8_t c;
  7785                           ;main.c: 1763: BOOL rv = 0;
  7786                           
  7787                           ; BSR set to: 1
  7788                           ;incstack = 0
  7789                           ;incstack = 0
  7790  002746  0100               	movlb	0	; () banked
  7791  002748  6BA0               	clrf	doModeSLCAN@rv& (0+255),b
  7792                           
  7793                           ; BSR set to: 0
  7794                           ;main.c: 1766: receiveSendEventSLCAN();
  7795  00274A  EC23  F020         	call	_receiveSendEventSLCAN	;wreg free
  7796                           
  7797                           ;main.c: 1769: (INTCONbits.GIE = 0);
  7798  00274E  9EF2               	bcf	intcon,7,c	;volatile
  7799                           
  7800                           ;main.c: 1771: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7801  002750  0E01               	movlw	high _serialInputFifo
  7802  002752  0100               	movlb	0	; () banked
  7803  002754  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  7804  002756  0EDD               	movlw	low _serialInputFifo
  7805  002758  6F60               	movwf	?_fifo_read& (0+255),b
  7806  00275A  0E00               	movlw	high doModeSLCAN@c
  7807  00275C  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  7808  00275E  0E9F               	movlw	low doModeSLCAN@c
  7809  002760  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  7810  002762  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  7811  002764  0E01               	movlw	1
  7812  002766  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  7813  002768  ECC5  F028         	call	_fifo_read	;wreg free
  7814  00276C  0560               	decf	?_fifo_read& (0+255),w,b
  7815  00276E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  7816  002770  E001 D1C7          	bnz	l16517
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;main.c: 1774: (INTCONbits.GIE = 1);
  7820  002774  8EF2               	bsf	intcon,7,c	;volatile
  7821                           
  7822                           ; BSR set to: 0
  7823                           ;main.c: 1776: if (0x0d != c) {
  7824  002776  519F               	movf	doModeSLCAN@c& (0+255),w,b
  7825  002778  0A0D               	xorlw	13
  7826  00277A  E101 D17C          	bz	l16505
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;main.c: 1777: cmdbuf[ pos ] = c;
  7830  00277E  0E2D               	movlw	low _cmdbuf
  7831  002780  2432               	addwf	_pos,w,c
  7832  002782  6ED9               	movwf	fsr2l,c
  7833  002784  6ADA               	clrf	fsr2h,c
  7834  002786  0E01               	movlw	high _cmdbuf
  7835  002788  22DA               	addwfc	fsr2h,f,c
  7836  00278A  0100               	movlb	0	; () banked
  7837  00278C  C09F  FFDF         	movff	doModeSLCAN@c,indf2
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;main.c: 1778: pos++;
  7841  002790  2A32               	incf	_pos,f,c
  7842  002792  D1B8               	goto	l847
  7843  002794                     l16377:
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;main.c: 1786: if (1 == strlen(cmdbuf)) {
  7847  002794  0101               	movlb	1	; () banked
  7848  002796  0E01               	movlw	high _cmdbuf
  7849  002798  6E20               	movwf	?_strlen+1,c
  7850  00279A  0E2D               	movlw	low _cmdbuf
  7851  00279C  6E1F               	movwf	?_strlen,c
  7852  00279E  EC0D  F033         	call	_strlen	;wreg free
  7853  0027A2  041F               	decf	?_strlen,w,c
  7854  0027A4  1020               	iorwf	?_strlen+1,w,c
  7855  0027A6  E001 D193          	bnz	l16507
  7856                           
  7857                           ;main.c: 1787: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7858  0027AA  0E7C               	movlw	high STR_171
  7859  0027AC  6E21               	movwf	?_putsUSART+1,c
  7860  0027AE  0EE6               	movlw	low STR_171
  7861  0027B0  6E20               	movwf	?_putsUSART,c
  7862  0027B2  ECB5  F031         	call	_putsUSART	;wreg free
  7863  0027B6  D115               	goto	L4
  7864  0027B8                     l16383:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;main.c: 1794: if (1 == strlen(cmdbuf)) {
  7868  0027B8  0101               	movlb	1	; () banked
  7869  0027BA  0E01               	movlw	high _cmdbuf
  7870  0027BC  6E20               	movwf	?_strlen+1,c
  7871  0027BE  0E2D               	movlw	low _cmdbuf
  7872  0027C0  6E1F               	movwf	?_strlen,c
  7873  0027C2  EC0D  F033         	call	_strlen	;wreg free
  7874  0027C6  041F               	decf	?_strlen,w,c
  7875  0027C8  1020               	iorwf	?_strlen+1,w,c
  7876  0027CA  E001 D181          	bnz	l16507
  7877                           
  7878                           ;main.c: 1795: putsUSART((char *) "V1011\r\n");
  7879  0027CE  0E7E               	movlw	high STR_172
  7880  0027D0  6E21               	movwf	?_putsUSART+1,c
  7881  0027D2  0EC1               	movlw	low STR_172
  7882  0027D4  6E20               	movwf	?_putsUSART,c
  7883  0027D6  ECB5  F031         	call	_putsUSART	;wreg free
  7884  0027DA  D103               	goto	L4
  7885  0027DC                     l16389:
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;main.c: 1802: if (1 == strlen(cmdbuf)) {
  7889  0027DC  0101               	movlb	1	; () banked
  7890  0027DE  0E01               	movlw	high _cmdbuf
  7891  0027E0  6E20               	movwf	?_strlen+1,c
  7892  0027E2  0E2D               	movlw	low _cmdbuf
  7893  0027E4  6E1F               	movwf	?_strlen,c
  7894  0027E6  EC0D  F033         	call	_strlen	;wreg free
  7895  0027EA  041F               	decf	?_strlen,w,c
  7896  0027EC  1020               	iorwf	?_strlen+1,w,c
  7897  0027EE  E001 D16F          	bnz	l16507
  7898                           
  7899                           ;main.c: 1803: putsUSART((char *) "N1977\r\n");
  7900  0027F2  0E7E               	movlw	high STR_173
  7901  0027F4  6E21               	movwf	?_putsUSART+1,c
  7902  0027F6  0EC9               	movlw	low STR_173
  7903  0027F8  6E20               	movwf	?_putsUSART,c
  7904  0027FA  ECB5  F031         	call	_putsUSART	;wreg free
  7905  0027FE  D0F1               	goto	L4
  7906  002800                     l16395:
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;main.c: 1812: bInitiated = 1;
  7910  002800  0E01               	movlw	1
  7911  002802  0101               	movlb	1	; () banked
  7912  002804  6F29               	movwf	_bInitiated& (0+255),b
  7913  002806  D0ED               	goto	L4
  7914  002808                     l857:
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;main.c: 1818: if (!bOpen) {
  7918  002808  662D               	tstfsz	_bOpen,c
  7919  00280A  D005               	goto	l16399
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;main.c: 1819: bInitiated = 1;
  7923  00280C  0E01               	movlw	1
  7924  00280E  0101               	movlb	1	; () banked
  7925  002810  6F29               	movwf	_bInitiated& (0+255),b
  7926                           
  7927                           ;main.c: 1820: rv = 1;
  7928  002812  0100               	movlb	0	; () banked
  7929  002814  6FA0               	movwf	doModeSLCAN@rv& (0+255),b
  7930  002816                     l16399:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;main.c: 1825: if (1 == strlen(cmdbuf)) {
  7934  002816  0101               	movlb	1	; () banked
  7935  002818  0E01               	movlw	high _cmdbuf
  7936  00281A  6E20               	movwf	?_strlen+1,c
  7937  00281C  0E2D               	movlw	low _cmdbuf
  7938  00281E  6E1F               	movwf	?_strlen,c
  7939  002820  EC0D  F033         	call	_strlen	;wreg free
  7940  002824  041F               	decf	?_strlen,w,c
  7941  002826  1020               	iorwf	?_strlen+1,w,c
  7942  002828  E001 D152          	bnz	l16507
  7943                           
  7944                           ;main.c: 1826: if (!bOpen && bInitiated) {
  7945  00282C  662D               	tstfsz	_bOpen,c
  7946  00282E  D150               	goto	l16507
  7947  002830  0101               	movlb	1	; () banked
  7948  002832  5129               	movf	_bInitiated& (0+255),w,b
  7949  002834  E101 D14C          	bz	l16507
  7950                           
  7951                           ; BSR set to: 1
  7952                           ;main.c: 1827: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7953  002838  0E00               	movlw	0
  7954  00283A  EC4A  F034         	call	_ECANSetOperationMode
  7955                           
  7956                           ;main.c: 1828: bOpen = 1;
  7957  00283E  0E01               	movlw	1
  7958  002840  6E2D               	movwf	_bOpen,c
  7959  002842  D0CF               	goto	L4
  7960  002844                     l16411:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 1836: if (1 == strlen(cmdbuf)) {
  7964  002844  0101               	movlb	1	; () banked
  7965  002846  0E01               	movlw	high _cmdbuf
  7966  002848  6E20               	movwf	?_strlen+1,c
  7967  00284A  0E2D               	movlw	low _cmdbuf
  7968  00284C  6E1F               	movwf	?_strlen,c
  7969  00284E  EC0D  F033         	call	_strlen	;wreg free
  7970  002852  041F               	decf	?_strlen,w,c
  7971  002854  1020               	iorwf	?_strlen+1,w,c
  7972  002856  E001 D13B          	bnz	l16507
  7973                           
  7974                           ;main.c: 1837: if (bOpen) {
  7975  00285A  502D               	movf	_bOpen,w,c
  7976  00285C  E101 D0C1          	bz	L4
  7977                           
  7978                           ;main.c: 1838: ECANSetOperationMode(0x20);
  7979  002860  0E20               	movlw	32
  7980  002862  EC4A  F034         	call	_ECANSetOperationMode
  7981                           
  7982                           ;main.c: 1839: bOpen = 0;
  7983  002866  6A2D               	clrf	_bOpen,c
  7984  002868  D0BC               	goto	L4
  7985  00286A                     l16421:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 1852: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7989  00286A  502D               	movf	_bOpen,w,c
  7990  00286C  E101 D130          	bz	l16507
  7991                           
  7992                           ; BSR set to: 0
  7993  002870  0101               	movlb	1	; () banked
  7994  002872  0E01               	movlw	high _cmdbuf
  7995  002874  6E20               	movwf	?_strlen+1,c
  7996  002876  0E2D               	movlw	low _cmdbuf
  7997  002878  6E1F               	movwf	?_strlen,c
  7998  00287A  EC0D  F033         	call	_strlen	;wreg free
  7999  00287E  0E0A               	movlw	10
  8000  002880  5C1F               	subwf	?_strlen,w,c
  8001  002882  0E00               	movlw	0
  8002  002884  5820               	subwfb	?_strlen+1,w,c
  8003  002886  E201 D123          	bnc	l16507
  8004                           
  8005                           ;main.c: 1854: uint32_t id;
  8006                           ;main.c: 1855: uint8_t dlc;
  8007                           ;main.c: 1857: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  8008  00288A  0E01               	movlw	high _wrkbuf
  8009  00288C  0100               	movlb	0	; () banked
  8010  00288E  6F61               	movwf	(?_hexStringToBytes+1)& (0+255),b
  8011  002890  0E7D               	movlw	low _wrkbuf
  8012  002892  6F60               	movwf	?_hexStringToBytes& (0+255),b
  8013  002894  0E50               	movlw	80
  8014  002896  6F62               	movwf	(?_hexStringToBytes+2)& (0+255),b
  8015  002898  0E01               	movlw	high _cmdbuf
  8016  00289A  6F64               	movwf	(?_hexStringToBytes+4)& (0+255),b
  8017  00289C  0E2D               	movlw	low _cmdbuf
  8018  00289E  6F63               	movwf	(?_hexStringToBytes+3)& (0+255),b
  8019  0028A0  EC67  F02D         	call	_hexStringToBytes	;wreg free
  8020  0028A4  6F93               	movwf	??_doModeSLCAN& (0+255),b
  8021  0028A6  0E05               	movlw	5
  8022  0028A8  5D93               	subwf	??_doModeSLCAN& (0+255),w,b
  8023  0028AA  E201 D111          	bnc	l16507
  8024                           
  8025                           ; BSR set to: 0
  8026                           ;main.c: 1859: }
  8027                           ;main.c: 1861: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  8028  0028AE  C180  F093         	movff	_wrkbuf+3,??_doModeSLCAN
  8029  0028B2  0E08               	movlw	8
  8030  0028B4  2793               	addwf	??_doModeSLCAN& (0+255),f,b
  8031  0028B6  C17F  F094         	movff	_wrkbuf+2,??_doModeSLCAN+1
  8032  0028BA  0E10               	movlw	16
  8033  0028BC  2794               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  8034  0028BE  C17E  F095         	movff	_wrkbuf+1,??_doModeSLCAN+2
  8035  0028C2  0E18               	movlw	24
  8036  0028C4  2795               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  8037  0028C6  C17D  F096         	movff	_wrkbuf,??_doModeSLCAN+3
  8038  0028CA  0100               	movlb	0	; () banked
  8039  0028CC  6B97               	clrf	(??_doModeSLCAN+4)& (0+255),b
  8040  0028CE  6B98               	clrf	(??_doModeSLCAN+5)& (0+255),b
  8041  0028D0  6B99               	clrf	(??_doModeSLCAN+6)& (0+255),b
  8042  0028D2  2B95               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  8043  0028D4  D001               	goto	u20960
  8044  0028D6                     u20965:
  8045  0028D6  D917               	call	PL104	;call to abstracted procedure
  8046  0028D8                     u20960:
  8047  0028D8  2F95               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  8048  0028DA  D7FD               	goto	u20965
  8049  0028DC  2B94               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  8050  0028DE  D001               	goto	u20970
  8051  0028E0                     u20975:
  8052  0028E0  D912               	call	PL104	;call to abstracted procedure
  8053  0028E2                     u20970:
  8054  0028E2  2F94               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  8055  0028E4  D7FD               	goto	u20975
  8056  0028E6  2B93               	incf	??_doModeSLCAN& (0+255),f,b
  8057  0028E8  D001               	goto	u20980
  8058  0028EA                     u20985:
  8059  0028EA  D90D               	call	PL104	;call to abstracted procedure
  8060  0028EC                     u20980:
  8061  0028EC  2F93               	decfsz	??_doModeSLCAN& (0+255),f,b
  8062  0028EE  D7FD               	goto	u20985
  8063  0028F0  C099  F09D         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  8064  0028F4  C098  F09C         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  8065  0028F8  C097  F09B         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  8066  0028FC  C096  F09A         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;main.c: 1862: dlc = vscpData[4];
  8070  002900  C1E9  F09E         	movff	_vscpData+4,doModeSLCAN@dlc
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;main.c: 1865: if (dlc > 8) break;
  8074  002904  0E08               	movlw	8
  8075  002906  659E               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  8076  002908  D001               	goto	l16437
  8077  00290A  D0E2               	goto	l16507
  8078  00290C                     l16437:
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;main.c: 1866: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  8082  00290C  90D8               	bcf	status,0,c
  8083  00290E  359E               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  8084  002910  6F93               	movwf	??_doModeSLCAN& (0+255),b
  8085  002912  6B94               	clrf	(??_doModeSLCAN+1)& (0+255),b
  8086  002914  3794               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  8087  002916  0E0A               	movlw	10
  8088  002918  2793               	addwf	??_doModeSLCAN& (0+255),f,b
  8089  00291A  0E00               	movlw	0
  8090  00291C  2394               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  8091  00291E  0101               	movlb	1	; () banked
  8092  002920  0E01               	movlw	high _cmdbuf
  8093  002922  6E20               	movwf	?_strlen+1,c
  8094  002924  0E2D               	movlw	low _cmdbuf
  8095  002926  6E1F               	movwf	?_strlen,c
  8096  002928  EC0D  F033         	call	_strlen	;wreg free
  8097  00292C  0100               	movlb	0	; () banked
  8098  00292E  5193               	movf	??_doModeSLCAN& (0+255),w,b
  8099  002930  5C1F               	subwf	?_strlen,w,c
  8100  002932  5194               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  8101  002934  5820               	subwfb	?_strlen+1,w,c
  8102  002936  E201 D0CB          	bnc	l16507
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 1868: memcpy(vscpData, vscpData + 5, dlc);
  8106  00293A  0E01               	movlw	high _vscpData
  8107  00293C  6F61               	movwf	(?_memcpy+1)& (0+255),b
  8108  00293E  0EE5               	movlw	low _vscpData
  8109  002940  6F60               	movwf	?_memcpy& (0+255),b
  8110  002942  0EEA               	movlw	low (_vscpData+5)
  8111  002944  6F93               	movwf	??_doModeSLCAN& (0+255),b
  8112  002946  0E01               	movlw	high (_vscpData+5)
  8113  002948  6F94               	movwf	(??_doModeSLCAN+1)& (0+255),b
  8114  00294A  C093  F062         	movff	??_doModeSLCAN,?_memcpy+2
  8115  00294E  C094  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  8116  002952  C09E  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  8117  002956  6B65               	clrf	(?_memcpy+5)& (0+255),b
  8118  002958  EC6F  F032         	call	_memcpy	;wreg free
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;main.c: 1870: rv = sendCANFrame(id, dlc, vscpData);
  8122  00295C  C09A  F08C         	movff	doModeSLCAN@id,?_sendCANFrame
  8123  002960  C09B  F08D         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  8124  002964  C09C  F08E         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  8125  002968  C09D  F08F         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  8126  00296C  C09E  F090         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  8127  002970  0E01               	movlw	high _vscpData
  8128  002972  0100               	movlb	0	; () banked
  8129  002974  6F92               	movwf	(?_sendCANFrame+6)& (0+255),b
  8130  002976  0EE5               	movlw	low _vscpData
  8131  002978  6F91               	movwf	(?_sendCANFrame+5)& (0+255),b
  8132  00297A  EC2B  F033         	call	_sendCANFrame	;wreg free
  8133  00297E  D032               	goto	L3
  8134  002980                     l16445:
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;main.c: 1885: if (bOpen && (strlen(cmdbuf) == 1)) {
  8138  002980  502D               	movf	_bOpen,w,c
  8139  002982  E101 D0A5          	bz	l16507
  8140                           
  8141                           ; BSR set to: 0
  8142  002986  0101               	movlb	1	; () banked
  8143  002988  0E01               	movlw	high _cmdbuf
  8144  00298A  6E20               	movwf	?_strlen+1,c
  8145  00298C  0E2D               	movlw	low _cmdbuf
  8146  00298E  6E1F               	movwf	?_strlen,c
  8147  002990  EC0D  F033         	call	_strlen	;wreg free
  8148  002994  041F               	decf	?_strlen,w,c
  8149  002996  1020               	iorwf	?_strlen+1,w,c
  8150  002998  E001 D09A          	bnz	l16507
  8151                           
  8152                           ;main.c: 1886: putsUSART((char *) "F00\r\n");
  8153  00299C  0E7F               	movlw	high STR_174
  8154  00299E  6E21               	movwf	?_putsUSART+1,c
  8155  0029A0  0E65               	movlw	low STR_174
  8156  0029A2  6E20               	movwf	?_putsUSART,c
  8157  0029A4  ECB5  F031         	call	_putsUSART	;wreg free
  8158  0029A8  D093               	goto	l16507
  8159  0029AA                     l16455:
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;main.c: 1902: if (2 == strlen(cmdbuf)) {
  8163  0029AA  0101               	movlb	1	; () banked
  8164  0029AC  0E01               	movlw	high _cmdbuf
  8165  0029AE  6E20               	movwf	?_strlen+1,c
  8166  0029B0  0E2D               	movlw	low _cmdbuf
  8167  0029B2  6E1F               	movwf	?_strlen,c
  8168  0029B4  EC0D  F033         	call	_strlen	;wreg free
  8169  0029B8  501F               	movf	?_strlen,w,c
  8170  0029BA  0A02               	xorlw	2
  8171  0029BC  1020               	iorwf	?_strlen+1,w,c
  8172  0029BE  E001 D087          	bnz	l16507
  8173                           
  8174                           ;main.c: 1903: if (!bOpen) {
  8175  0029C2  662D               	tstfsz	_bOpen,c
  8176  0029C4  D085               	goto	l16507
  8177                           
  8178                           ;main.c: 1904: if ('0' == cmdbuf[1]) {
  8179  0029C6  0101               	movlb	1	; () banked
  8180  0029C8  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  8181  0029CA  0A30               	xorlw	48
  8182  0029CC  E10E               	bnz	l16467
  8183                           
  8184                           ; BSR set to: 1
  8185                           ;main.c: 1905: nTimeStamp = 0;
  8186  0029CE  6B2C               	clrf	_nTimeStamp& (0+255),b
  8187                           
  8188                           ; BSR set to: 1
  8189                           ;main.c: 1907: (Busy_eep(), Write_b_eep(0x05,0));
  8190  0029D0  EC9D  F034         	call	_Busy_eep	;wreg free
  8191  0029D4  6A20               	clrf	?_Write_b_eep+1,c
  8192  0029D6  0E05               	movlw	5
  8193  0029D8  6E1F               	movwf	?_Write_b_eep,c
  8194  0029DA  0E00               	movlw	0
  8195  0029DC  6A21               	clrf	?_Write_b_eep+2,c
  8196  0029DE  EC80  F033         	call	_Write_b_eep	;wreg free
  8197  0029E2                     L4:
  8198                           
  8199                           ;main.c: 1908: rv = 1;
  8200  0029E2  0E01               	movlw	1
  8201  0029E4                     L3:
  8202  0029E4  0100               	movlb	0	; () banked
  8203  0029E6  6FA0               	movwf	doModeSLCAN@rv& (0+255),b
  8204                           
  8205                           ;main.c: 1909: } else if ('1' == cmdbuf[1]) {
  8206  0029E8  D073               	goto	l16507
  8207  0029EA                     l16467:
  8208                           
  8209                           ; BSR set to: 1
  8210  0029EA  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  8211  0029EC  0A31               	xorlw	49
  8212  0029EE  E10C               	bnz	l882
  8213                           
  8214                           ; BSR set to: 1
  8215                           ;main.c: 1910: nTimeStamp = 1;
  8216  0029F0  0E01               	movlw	1
  8217  0029F2  6F2C               	movwf	_nTimeStamp& (0+255),b
  8218                           
  8219                           ; BSR set to: 1
  8220                           ;main.c: 1912: (Busy_eep(), Write_b_eep(0x05,1));
  8221  0029F4  EC9D  F034         	call	_Busy_eep	;wreg free
  8222  0029F8  6A20               	clrf	?_Write_b_eep+1,c
  8223  0029FA  0E05               	movlw	5
  8224  0029FC  6E1F               	movwf	?_Write_b_eep,c
  8225  0029FE  0E01               	movlw	1
  8226  002A00  6E21               	movwf	?_Write_b_eep+2,c
  8227  002A02  EC80  F033         	call	_Write_b_eep	;wreg free
  8228  002A06  D7ED               	goto	L4
  8229  002A08                     l882:
  8230                           
  8231                           ; BSR set to: 1
  8232                           ;main.c: 1916: rv = 0;
  8233  002A08  0100               	movlb	0	; () banked
  8234  002A0A  6BA0               	clrf	doModeSLCAN@rv& (0+255),b
  8235  002A0C  D061               	goto	l16507
  8236  002A0E                     l16475:
  8237                           
  8238                           ; BSR set to: 0
  8239                           ;main.c: 1924: (Busy_eep(), Write_b_eep(0x01,0xFF));
  8240  002A0E  EC9D  F034         	call	_Busy_eep	;wreg free
  8241  002A12  6A20               	clrf	?_Write_b_eep+1,c
  8242  002A14  0E01               	movlw	1
  8243  002A16  6E1F               	movwf	?_Write_b_eep,c
  8244  002A18  0EFF               	movlw	255
  8245  002A1A  6821               	setf	?_Write_b_eep+2,c
  8246  002A1C  EC80  F033         	call	_Write_b_eep	;wreg free
  8247  002A20  00FF               	reset		;# 
  8248                           
  8249                           ;main.c: 1926: break;
  8250  002A22  D056               	goto	l16507
  8251  002A24                     l16479:
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;main.c: 1930: if ( 'v' == cmdbuf[1] &&
  8255                           ;main.c: 1931: 's' == cmdbuf[2] &&
  8256                           ;main.c: 1932: 'c' == cmdbuf[3] &&
  8257                           ;main.c: 1933: 'p' == cmdbuf[4] ) {
  8258  002A24  0101               	movlb	1	; () banked
  8259  002A26  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  8260  002A28  0A76               	xorlw	118
  8261  002A2A  E10C               	bnz	l16489
  8262                           
  8263                           ; BSR set to: 1
  8264  002A2C  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  8265  002A2E  0A73               	xorlw	115
  8266  002A30  E109               	bnz	l16489
  8267                           
  8268                           ; BSR set to: 1
  8269  002A32  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  8270  002A34  0A63               	xorlw	99
  8271  002A36  E106               	bnz	l16489
  8272                           
  8273                           ; BSR set to: 1
  8274  002A38  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  8275  002A3A  0A70               	xorlw	112
  8276  002A3C  E103               	bnz	l16489
  8277                           
  8278                           ; BSR set to: 1
  8279                           ;main.c: 1934: mode = 1;
  8280  002A3E  0E01               	movlw	1
  8281  002A40  6F2B               	movwf	_mode& (0+255),b
  8282                           
  8283                           ;main.c: 1935: }
  8284  002A42  D046               	goto	l16507
  8285  002A44                     l16489:
  8286                           
  8287                           ; BSR set to: 1
  8288                           ;main.c: 1936: else if ( 'v' == cmdbuf[1] &&
  8289                           ;main.c: 1937: 'e' == cmdbuf[2] &&
  8290                           ;main.c: 1938: 'r' == cmdbuf[3] &&
  8291                           ;main.c: 1939: 'b' == cmdbuf[4] ) {
  8292  002A44  512E               	movf	(_cmdbuf+1)& (0+255),w,b
  8293  002A46  0A76               	xorlw	118
  8294  002A48  E143               	bnz	l16507
  8295                           
  8296                           ; BSR set to: 1
  8297  002A4A  512F               	movf	(_cmdbuf+2)& (0+255),w,b
  8298  002A4C  0A65               	xorlw	101
  8299  002A4E  E140               	bnz	l16507
  8300                           
  8301                           ; BSR set to: 1
  8302  002A50  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  8303  002A52  0A72               	xorlw	114
  8304  002A54  E13D               	bnz	l16507
  8305                           
  8306                           ; BSR set to: 1
  8307  002A56  5131               	movf	(_cmdbuf+4)& (0+255),w,b
  8308  002A58  0A62               	xorlw	98
  8309  002A5A  E13A               	bnz	l16507
  8310                           
  8311                           ; BSR set to: 1
  8312                           ;main.c: 1940: mode = 0;
  8313  002A5C  6B2B               	clrf	_mode& (0+255),b
  8314  002A5E  D038               	goto	l16507
  8315  002A60                     l16499:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1945: {
  8319                           ;main.c: 1947: if (0 == strlen(cmdbuf)) {
  8320  002A60  0101               	movlb	1	; () banked
  8321  002A62  0E01               	movlw	high _cmdbuf
  8322  002A64  6E20               	movwf	?_strlen+1,c
  8323  002A66  0E2D               	movlw	low _cmdbuf
  8324  002A68  6E1F               	movwf	?_strlen,c
  8325  002A6A  EC0D  F033         	call	_strlen	;wreg free
  8326  002A6E  5020               	movf	?_strlen+1,w,c
  8327  002A70  101F               	iorwf	?_strlen,w,c
  8328  002A72  E0B7               	bz	L4
  8329  002A74  D02D               	goto	l16507
  8330  002A76                     l16505:
  8331                           
  8332                           ; BSR set to: 0
  8333  002A76  519F               	movf	doModeSLCAN@c& (0+255),w,b
  8334                           
  8335                           ; Switch size 1, requested type "space"
  8336                           ; Number of cases is 17, Range of values is 64 to 116
  8337                           ; switch strategies available:
  8338                           ; Name         Instructions Cycles
  8339                           ; simple_byte           52    27 (average)
  8340                           ;	Chosen strategy is simple_byte
  8341  002A78  0A40               	xorlw	64	; case 64
  8342  002A7A  E0D4               	bz	l16479
  8343  002A7C  0A02               	xorlw	2	; case 66
  8344  002A7E  E0C7               	bz	l16475
  8345  002A80  0A01               	xorlw	1	; case 67
  8346  002A82  E101 D6DF          	bz	l16411
  8347  002A86  0A05               	xorlw	5	; case 70
  8348  002A88  E101 D77A          	bz	l16445
  8349  002A8C  0A0C               	xorlw	12	; case 74
  8350  002A8E  E101 D681          	bz	l16377
  8351  002A92  0A07               	xorlw	7	; case 77
  8352  002A94  E0A6               	bz	L4
  8353  002A96  0A03               	xorlw	3	; case 78
  8354  002A98  E101 D6A0          	bz	l16389
  8355  002A9C  0A01               	xorlw	1	; case 79
  8356  002A9E  E101 D6BA          	bz	l16399
  8357  002AA2  0A1D               	xorlw	29	; case 82
  8358  002AA4  E015               	bz	l16507
  8359  002AA6  0A01               	xorlw	1	; case 83
  8360  002AA8  E101 D6AA          	bz	l16395
  8361  002AAC  0A07               	xorlw	7	; case 84
  8362  002AAE  E101 D6DC          	bz	l16421
  8363  002AB2  0A02               	xorlw	2	; case 86
  8364  002AB4  E101 D680          	bz	l16383
  8365  002AB8  0A0C               	xorlw	12	; case 90
  8366  002ABA  E101 D776          	bz	l16455
  8367  002ABE  0A37               	xorlw	55	; case 109
  8368  002AC0  E090               	bz	L4
  8369  002AC2  0A1F               	xorlw	31	; case 114
  8370  002AC4  E005               	bz	l16507
  8371  002AC6  0A01               	xorlw	1	; case 115
  8372  002AC8  E101 D69E          	bz	l857
  8373  002ACC  0A07               	xorlw	7	; case 116
  8374  002ACE  E1C8               	bnz	l16499
  8375  002AD0                     l16507:
  8376                           
  8377                           ;main.c: 1955: if (rv) {
  8378  002AD0  0100               	movlb	0	; () banked
  8379  002AD2  51A0               	movf	doModeSLCAN@rv& (0+255),w,b
  8380  002AD4  E007               	bz	l16511
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;main.c: 1957: putsUSART((char *) "\r");
  8384  002AD6  0E7F               	movlw	high STR_175
  8385  002AD8  6E21               	movwf	?_putsUSART+1,c
  8386  002ADA  0EF3               	movlw	low STR_175
  8387  002ADC  6E20               	movwf	?_putsUSART,c
  8388  002ADE  ECB5  F031         	call	_putsUSART	;wreg free
  8389                           
  8390                           ;main.c: 1958: }
  8391  002AE2  D006               	goto	l16513
  8392  002AE4                     l16511:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 1959: else {
  8396                           ;main.c: 1961: putsUSART((char *) "\a");
  8397  002AE4  0E7F               	movlw	high STR_176
  8398  002AE6  6E21               	movwf	?_putsUSART+1,c
  8399  002AE8  0EF1               	movlw	low STR_176
  8400  002AEA  6E20               	movwf	?_putsUSART,c
  8401  002AEC  ECB5  F031         	call	_putsUSART	;wreg free
  8402  002AF0                     l16513:
  8403                           
  8404                           ;main.c: 1962: }
  8405                           ;main.c: 1965: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  8406  002AF0  0E01               	movlw	high _cmdbuf
  8407  002AF2  0100               	movlb	0	; () banked
  8408  002AF4  6F61               	movwf	(?_memset+1)& (0+255),b
  8409  002AF6  0E2D               	movlw	low _cmdbuf
  8410  002AF8  ECF9  F02D         	call	PL24	;call to abstracted procedure
  8411  002AFC  ECE2  F033         	call	_memset	;wreg free
  8412                           
  8413                           ; BSR set to: 0
  8414                           ;main.c: 1966: pos = 0;
  8415  002B00  6A32               	clrf	_pos,c
  8416  002B02                     l16517:
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;main.c: 1968: }
  8420                           ;main.c: 1971: (INTCONbits.GIE = 1);
  8421  002B02  8EF2               	bsf	intcon,7,c	;volatile
  8422  002B04                     l847:
  8423                           
  8424                           ; BSR set to: 0
  8425  002B04  0012               	return	
  8426  002B06                     __end_of_doModeSLCAN:
  8427                           	opt stack 0
  8428  002B06                     PL104:
  8429                           	opt stack 23
  8430  002B06  90D8               	bcf	status,0,c
  8431  002B08  3796               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  8432  002B0A  3797               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  8433  002B0C  3798               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  8434  002B0E  3799               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  8435  002B10  0012               	return	
  8436  002B12                     __end_ofPL104:
  8437                           	opt stack 0
  8438                           tblptru	equ	0xFF8
  8439                           tblptrh	equ	0xFF7
  8440                           tblptrl	equ	0xFF6
  8441                           tablat	equ	0xFF5
  8442                           prodh	equ	0xFF4
  8443                           prodl	equ	0xFF3
  8444                           intcon	equ	0xFF2
  8445                           indf0	equ	0xFEF
  8446                           postinc0	equ	0xFEE
  8447                           fsr0h	equ	0xFEA
  8448                           fsr0l	equ	0xFE9
  8449                           wreg	equ	0xFE8
  8450                           indf1	equ	0xFE7
  8451                           postinc1	equ	0xFE6
  8452                           postdec1	equ	0xFE5
  8453                           fsr1h	equ	0xFE2
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           plusw2	equ	0xFDB
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function _hexStringToBytes *****************
  8464 ;; Defined at:
  8465 ;;		line 35 in file "hexutils.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  8468 ;;		 -> wrkbuf(80), 
  8469 ;;  size            1    2[BANK0 ] unsigned char 
  8470 ;;  inhex           2    3[BANK0 ] PTR unsigned char 
  8471 ;;		 -> cmdbuf(80), 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  i               2   12[BANK0 ] int 
  8474 ;;  p               2   10[BANK0 ] PTR unsigned char 
  8475 ;;		 -> cmdbuf(80), 
  8476 ;;  len             2    8[BANK0 ] int 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : F/0
  8483 ;;		On exit  : F/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8486 ;;      Params:         0       5       0       0       0       0       0
  8487 ;;      Locals:         0       6       0       0       0       0       0
  8488 ;;      Temps:          0       3       0       0       0       0       0
  8489 ;;      Totals:         0      14       0       0       0       0       0
  8490 ;;Total ram usage:       14 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    4
  8493 ;; This function calls:
  8494 ;;		_strlen
  8495 ;;		_nibbleFromChar
  8496 ;; This function is called by:
  8497 ;;		_doModeSLCAN
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text3
  8502  005ACE                     __ptext3:
  8503                           	opt stack 0
  8504  005ACE                     _hexStringToBytes:
  8505                           	opt stack 25
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;hexutils.c: 36: uint8_t *p;
  8509                           ;hexutils.c: 37: int len, i;
  8510                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;incstack = 0
  8514                           ;incstack = 0
  8515  005ACE  C063  F01F         	movff	hexStringToBytes@inhex,?_strlen
  8516  005AD2  C064  F020         	movff	hexStringToBytes@inhex+1,?_strlen+1
  8517  005AD6  EC0D  F033         	call	_strlen	;wreg free
  8518  005ADA  90D8               	bcf	status,0,c
  8519  005ADC  3020               	rrcf	?_strlen+1,w,c
  8520  005ADE  0100               	movlb	0	; () banked
  8521  005AE0  6F69               	movwf	(hexStringToBytes@len+1)& (0+255),b
  8522  005AE2  301F               	rrcf	?_strlen,w,c
  8523  005AE4  6F68               	movwf	hexStringToBytes@len& (0+255),b
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;hexutils.c: 40: if (len > size) return 0;
  8527  005AE6  5162               	movf	hexStringToBytes@size& (0+255),w,b
  8528  005AE8  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8529  005AEA  6B66               	clrf	(??_hexStringToBytes+1)& (0+255),b
  8530  005AEC  5166               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  8531  005AEE  0A80               	xorlw	128
  8532  005AF0  6F67               	movwf	(??_hexStringToBytes+2)& (0+255),b
  8533  005AF2  5168               	movf	hexStringToBytes@len& (0+255),w,b
  8534  005AF4  5D65               	subwf	??_hexStringToBytes& (0+255),w,b
  8535  005AF6  5169               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8536  005AF8  0A80               	xorlw	128
  8537  005AFA  5967               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  8538  005AFC  E202               	bc	l1730
  8539                           
  8540                           ; BSR set to: 0
  8541  005AFE  0E00               	movlw	0
  8542  005B00  D033               	goto	l1731
  8543  005B02                     l1730:
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  8547  005B02  6B6C               	clrf	hexStringToBytes@i& (0+255),b
  8548  005B04  6B6D               	clrf	(hexStringToBytes@i+1)& (0+255),b
  8549  005B06  C063  F06A         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  8550  005B0A  C064  F06B         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  8551  005B0E  D022               	goto	l14467
  8552  005B10                     l14461:
  8553                           
  8554                           ; BSR set to: 0
  8555                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  8556  005B10  516C               	movf	hexStringToBytes@i& (0+255),w,b
  8557  005B12  2560               	addwf	hexStringToBytes@buf& (0+255),w,b
  8558  005B14  6ED9               	movwf	fsr2l,c
  8559  005B16  516D               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8560  005B18  2161               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  8561  005B1A  6EDA               	movwf	fsr2h,c
  8562  005B1C  EE10 F001          	lfsr	1,1
  8563  005B20  516A               	movf	hexStringToBytes@p& (0+255),w,b
  8564  005B22  26E1               	addwf	fsr1l,f,c
  8565  005B24  516B               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  8566  005B26  22E2               	addwfc	fsr1h,f,c
  8567  005B28  50E7               	movf	indf1,w,c
  8568  005B2A  ECB0  F032         	call	_nibbleFromChar
  8569  005B2E  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8570  005B30  C06A  FFE1         	movff	hexStringToBytes@p,fsr1l
  8571  005B34  C06B  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  8572  005B38  50E7               	movf	indf1,w,c
  8573  005B3A  ECB0  F032         	call	_nibbleFromChar
  8574  005B3E  6F66               	movwf	(??_hexStringToBytes+1)& (0+255),b
  8575  005B40  3966               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  8576  005B42  0BF0               	andlw	240
  8577  005B44  1165               	iorwf	??_hexStringToBytes& (0+255),w,b
  8578  005B46  6EDF               	movwf	indf2,c
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;hexutils.c: 43: p += 2;
  8582  005B48  0E02               	movlw	2
  8583  005B4A  276A               	addwf	hexStringToBytes@p& (0+255),f,b
  8584  005B4C  0E00               	movlw	0
  8585  005B4E  236B               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8586                           
  8587                           ; BSR set to: 0
  8588  005B50  4B6C               	infsnz	hexStringToBytes@i& (0+255),f,b
  8589  005B52  2B6D               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8590  005B54                     l14467:
  8591                           
  8592                           ; BSR set to: 0
  8593  005B54  516D               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8594  005B56  0A80               	xorlw	128
  8595  005B58  6F65               	movwf	??_hexStringToBytes& (0+255),b
  8596  005B5A  5168               	movf	hexStringToBytes@len& (0+255),w,b
  8597  005B5C  5D6C               	subwf	hexStringToBytes@i& (0+255),w,b
  8598  005B5E  5169               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8599  005B60  0A80               	xorlw	128
  8600  005B62  5965               	subwfb	??_hexStringToBytes& (0+255),w,b
  8601  005B64  E3D5               	bnc	l14461
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;hexutils.c: 44: }
  8605                           ;hexutils.c: 46: return i;
  8606  005B66  516C               	movf	hexStringToBytes@i& (0+255),w,b
  8607  005B68                     l1731:
  8608                           
  8609                           ; BSR set to: 0
  8610  005B68  0012               	return	
  8611  005B6A                     __end_of_hexStringToBytes:
  8612                           	opt stack 0
  8613                           tblptru	equ	0xFF8
  8614                           tblptrh	equ	0xFF7
  8615                           tblptrl	equ	0xFF6
  8616                           tablat	equ	0xFF5
  8617                           prodh	equ	0xFF4
  8618                           prodl	equ	0xFF3
  8619                           intcon	equ	0xFF2
  8620                           indf0	equ	0xFEF
  8621                           postinc0	equ	0xFEE
  8622                           fsr0h	equ	0xFEA
  8623                           fsr0l	equ	0xFE9
  8624                           wreg	equ	0xFE8
  8625                           indf1	equ	0xFE7
  8626                           postinc1	equ	0xFE6
  8627                           postdec1	equ	0xFE5
  8628                           fsr1h	equ	0xFE2
  8629                           fsr1l	equ	0xFE1
  8630                           indf2	equ	0xFDF
  8631                           postinc2	equ	0xFDE
  8632                           postdec2	equ	0xFDD
  8633                           plusw2	equ	0xFDB
  8634                           fsr2h	equ	0xFDA
  8635                           fsr2l	equ	0xFD9
  8636                           status	equ	0xFD8
  8637                           
  8638 ;; *************** function _nibbleFromChar *****************
  8639 ;; Defined at:
  8640 ;;		line 20 in file "hexutils.c"
  8641 ;; Parameters:    Size  Location     Type
  8642 ;;  c               1    wreg     unsigned char 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  c               1   30[COMRAM] unsigned char 
  8645 ;; Return value:  Size  Location     Type
  8646 ;;                  1    wreg      unsigned char 
  8647 ;; Registers used:
  8648 ;;		wreg, status,2, status,0
  8649 ;; Tracked objects:
  8650 ;;		On entry : F/0
  8651 ;;		On exit  : F/0
  8652 ;;		Unchanged: F/0
  8653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8654 ;;      Params:         0       0       0       0       0       0       0
  8655 ;;      Locals:         1       0       0       0       0       0       0
  8656 ;;      Temps:          0       0       0       0       0       0       0
  8657 ;;      Totals:         1       0       0       0       0       0       0
  8658 ;;Total ram usage:        1 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    3
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_hexStringToBytes
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text4
  8669  006560                     __ptext4:
  8670                           	opt stack 0
  8671  006560                     _nibbleFromChar:
  8672                           	opt stack 25
  8673                           
  8674                           ; BSR set to: 0
  8675                           ;incstack = 0
  8676                           ;incstack = 0
  8677                           ;nibbleFromChar@c stored from wreg
  8678  006560  CFE8 F01F          	movff	wreg,nibbleFromChar@c
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8682  006564  0E2F               	movlw	47
  8683  006566  641F               	cpfsgt	nibbleFromChar@c,c
  8684  006568  D006               	goto	l14745
  8685                           
  8686                           ; BSR set to: 0
  8687  00656A  0E3A               	movlw	58
  8688  00656C  601F               	cpfslt	nibbleFromChar@c,c
  8689  00656E  D003               	goto	l14745
  8690                           
  8691                           ; BSR set to: 0
  8692  006570  501F               	movf	nibbleFromChar@c,w,c
  8693  006572  0FD0               	addlw	208
  8694  006574  D013               	goto	l1725
  8695  006576                     l14745:
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8699  006576  0E60               	movlw	96
  8700  006578  641F               	cpfsgt	nibbleFromChar@c,c
  8701  00657A  D006               	goto	l14753
  8702                           
  8703                           ; BSR set to: 0
  8704  00657C  0E67               	movlw	103
  8705  00657E  601F               	cpfslt	nibbleFromChar@c,c
  8706  006580  D003               	goto	l14753
  8707                           
  8708                           ; BSR set to: 0
  8709  006582  501F               	movf	nibbleFromChar@c,w,c
  8710  006584  0FA9               	addlw	169
  8711  006586  D00A               	goto	l1725
  8712  006588                     l14753:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8716  006588  0E40               	movlw	64
  8717  00658A  641F               	cpfsgt	nibbleFromChar@c,c
  8718  00658C  D006               	goto	l14761
  8719                           
  8720                           ; BSR set to: 0
  8721  00658E  0E47               	movlw	71
  8722  006590  601F               	cpfslt	nibbleFromChar@c,c
  8723  006592  D003               	goto	l14761
  8724                           
  8725                           ; BSR set to: 0
  8726  006594  501F               	movf	nibbleFromChar@c,w,c
  8727  006596  0FC9               	addlw	201
  8728  006598  D001               	goto	l1725
  8729  00659A                     l14761:
  8730                           
  8731                           ; BSR set to: 0
  8732                           ;hexutils.c: 24: return 255;
  8733  00659A  0EFF               	movlw	255
  8734  00659C                     l1725:
  8735                           
  8736                           ; BSR set to: 0
  8737  00659C  0012               	return	
  8738  00659E                     __end_of_nibbleFromChar:
  8739                           	opt stack 0
  8740                           tblptru	equ	0xFF8
  8741                           tblptrh	equ	0xFF7
  8742                           tblptrl	equ	0xFF6
  8743                           tablat	equ	0xFF5
  8744                           prodh	equ	0xFF4
  8745                           prodl	equ	0xFF3
  8746                           intcon	equ	0xFF2
  8747                           indf0	equ	0xFEF
  8748                           postinc0	equ	0xFEE
  8749                           fsr0h	equ	0xFEA
  8750                           fsr0l	equ	0xFE9
  8751                           wreg	equ	0xFE8
  8752                           indf1	equ	0xFE7
  8753                           postinc1	equ	0xFE6
  8754                           postdec1	equ	0xFE5
  8755                           fsr1h	equ	0xFE2
  8756                           fsr1l	equ	0xFE1
  8757                           indf2	equ	0xFDF
  8758                           postinc2	equ	0xFDE
  8759                           postdec2	equ	0xFDD
  8760                           plusw2	equ	0xFDB
  8761                           fsr2h	equ	0xFDA
  8762                           fsr2l	equ	0xFD9
  8763                           status	equ	0xFD8
  8764                           
  8765 ;; *************** function _receiveSendEventSLCAN *****************
  8766 ;; Defined at:
  8767 ;;		line 2606 in file "main.c"
  8768 ;; Parameters:    Size  Location     Type
  8769 ;;		None
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;  id              4   33[BANK0 ] unsigned long 
  8772 ;;  i               2   38[BANK0 ] int 
  8773 ;;  dlc             1   37[BANK0 ] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;                  1    wreg      enum E15660
  8776 ;; Registers used:
  8777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8778 ;; Tracked objects:
  8779 ;;		On entry : F/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8783 ;;      Params:         0       0       0       0       0       0       0
  8784 ;;      Locals:         0       7       0       0       0       0       0
  8785 ;;      Temps:          0       3       0       0       0       0       0
  8786 ;;      Totals:         0      10       0       0       0       0       0
  8787 ;;Total ram usage:       10 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    6
  8790 ;; This function calls:
  8791 ;;		_putsUSART
  8792 ;;		_WriteUSART
  8793 ;;		_strlen
  8794 ;;		_getCANFrame
  8795 ;;		_ultoa
  8796 ;;		_itoa
  8797 ;; This function is called by:
  8798 ;;		_doModeSLCAN
  8799 ;; This function uses a non-reentrant model
  8800 ;;
  8801                           
  8802                           	psect	text5
  8803  004046                     __ptext5:
  8804                           	opt stack 0
  8805  004046                     _receiveSendEventSLCAN:
  8806                           	opt stack 23
  8807                           
  8808                           ; BSR set to: 0
  8809                           ;main.c: 2607: int i;
  8810                           ;main.c: 2608: uint8_t dlc;
  8811                           ;main.c: 2609: uint32_t id;
  8812                           ;main.c: 2611: if (getCANFrame(&id, &dlc, vscpData)) {
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;incstack = 0
  8816                           ;incstack = 0
  8817  004046  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8818  004048  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
  8819  00404A  0E85               	movlw	low receiveSendEventSLCAN@dlc
  8820  00404C  6F6A               	movwf	?_getCANFrame& (0+255),b
  8821  00404E  0E01               	movlw	high _vscpData
  8822  004050  0100               	movlb	0	; () banked
  8823  004052  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
  8824  004054  0EE5               	movlw	low _vscpData
  8825  004056  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
  8826  004058  0E81               	movlw	receiveSendEventSLCAN@id& (0+255)
  8827  00405A  ECCB  F02B         	call	_getCANFrame
  8828  00405E  0900               	iorlw	0
  8829  004060  E101 D0B3          	bz	l1204
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;main.c: 2614: cntRxFrames++;
  8833  004064  0101               	movlb	1	; () banked
  8834  004066  2B0C               	incf	_cntRxFrames& (0+255),f,b
  8835  004068  0E00               	movlw	0
  8836  00406A  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8837  00406C  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8838  00406E  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8839                           
  8840                           ;main.c: 2615: cntRxBytes += dlc;
  8841  004070  0100               	movlb	0	; () banked
  8842  004072  5185               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8843  004074  0101               	movlb	1	; () banked
  8844  004076  2708               	addwf	_cntRxBytes& (0+255),f,b
  8845  004078  0E00               	movlw	0
  8846  00407A  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8847  00407C  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8848  00407E  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8849  004080                     l1177:
  8850  004080  A2AC               	btfss	4012,1,c	;volatile
  8851  004082  D7FE               	goto	l1177
  8852                           
  8853                           ;main.c: 2618: WriteUSART('T');
  8854  004084  0E54               	movlw	84
  8855  004086  EC61  F034         	call	_WriteUSART
  8856                           
  8857                           ;main.c: 2620: ultoa(wrkbuf, id, 16);
  8858  00408A  0E01               	movlw	high _wrkbuf
  8859  00408C  0100               	movlb	0	; () banked
  8860  00408E  6F72               	movwf	(?_ultoa+1)& (0+255),b
  8861  004090  0E7D               	movlw	low _wrkbuf
  8862  004092  6F71               	movwf	?_ultoa& (0+255),b
  8863  004094  C081  F073         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8864  004098  C082  F074         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8865  00409C  C083  F075         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8866  0040A0  C084  F076         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8867  0040A4  6B78               	clrf	(?_ultoa+7)& (0+255),b
  8868  0040A6  0E10               	movlw	16
  8869  0040A8  6F77               	movwf	(?_ultoa+6)& (0+255),b
  8870  0040AA  ECE5  F027         	call	_ultoa	;wreg free
  8871                           
  8872                           ; BSR set to: 0
  8873                           ;main.c: 2622: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8874  0040AE  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8875  0040B0  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8876  0040B2                     l1182:
  8877                           
  8878                           ; BSR set to: 0
  8879  0040B2  A2AC               	btfss	4012,1,c	;volatile
  8880  0040B4  D7FE               	goto	l1182
  8881                           
  8882                           ; BSR set to: 0
  8883                           ;main.c: 2624: WriteUSART('0');
  8884  0040B6  0E30               	movlw	48
  8885  0040B8  EC61  F034         	call	_WriteUSART
  8886                           
  8887                           ; BSR set to: 0
  8888  0040BC  D887               	call	PL120	;call to abstracted procedure
  8889  0040BE  B4D8               	btfsc	status,2,c
  8890  0040C0  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8891  0040C2  E3F7               	bnc	l1182
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;main.c: 2625: }
  8895                           ;main.c: 2626: putsUSART(wrkbuf);
  8896  0040C4  0101               	movlb	1	; () banked
  8897  0040C6  0E01               	movlw	high _wrkbuf
  8898  0040C8  6E21               	movwf	?_putsUSART+1,c
  8899  0040CA  0E7D               	movlw	low _wrkbuf
  8900  0040CC  6E20               	movwf	?_putsUSART,c
  8901  0040CE  ECB5  F031         	call	_putsUSART	;wreg free
  8902                           
  8903                           ;main.c: 2629: itoa(wrkbuf, dlc, 16);
  8904  0040D2  0E01               	movlw	high _wrkbuf
  8905  0040D4  0100               	movlb	0	; () banked
  8906  0040D6  6F6D               	movwf	(?_itoa+1)& (0+255),b
  8907  0040D8  0E7D               	movlw	low _wrkbuf
  8908  0040DA  6F6C               	movwf	?_itoa& (0+255),b
  8909  0040DC  C085  F06E         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8910  0040E0  6B6F               	clrf	(?_itoa+3)& (0+255),b
  8911  0040E2  6B71               	clrf	(?_itoa+5)& (0+255),b
  8912  0040E4  0E10               	movlw	16
  8913  0040E6  6F70               	movwf	(?_itoa+4)& (0+255),b
  8914  0040E8  EC64  F033         	call	_itoa	;wreg free
  8915  0040EC                     l1185:
  8916                           
  8917                           ; BSR set to: 0
  8918  0040EC  A2AC               	btfss	4012,1,c	;volatile
  8919  0040EE  D7FE               	goto	l1185
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;main.c: 2631: WriteUSART(wrkbuf[0]);
  8923  0040F0  0101               	movlb	1	; () banked
  8924  0040F2  517D               	movf	_wrkbuf& (0+255),w,b
  8925  0040F4  EC61  F034         	call	_WriteUSART
  8926                           
  8927                           ;main.c: 2634: for (i = 0; i < dlc; i++) {
  8928  0040F8  0100               	movlb	0	; () banked
  8929  0040FA  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8930  0040FC  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8931  0040FE  D02D               	goto	l18119
  8932  004100                     l18107:
  8933                           
  8934                           ; BSR set to: 0
  8935                           ;main.c: 2635: itoa(wrkbuf, vscpData[i], 16);
  8936  004100  0E01               	movlw	high _wrkbuf
  8937  004102  0100               	movlb	0	; () banked
  8938  004104  6F6D               	movwf	(?_itoa+1)& (0+255),b
  8939  004106  0E7D               	movlw	low _wrkbuf
  8940  004108  6F6C               	movwf	?_itoa& (0+255),b
  8941  00410A  0EE5               	movlw	low _vscpData
  8942  00410C  2586               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8943  00410E  6ED9               	movwf	fsr2l,c
  8944  004110  0E01               	movlw	high _vscpData
  8945  004112  2187               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8946  004114  6EDA               	movwf	fsr2h,c
  8947  004116  50DF               	movf	indf2,w,c
  8948  004118  6F6E               	movwf	(?_itoa+2)& (0+255),b
  8949  00411A  6B6F               	clrf	(?_itoa+3)& (0+255),b
  8950  00411C  6B71               	clrf	(?_itoa+5)& (0+255),b
  8951  00411E  0E10               	movlw	16
  8952  004120  6F70               	movwf	(?_itoa+4)& (0+255),b
  8953  004122  EC64  F033         	call	_itoa	;wreg free
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;main.c: 2637: if (2 != strlen(wrkbuf)) {
  8957  004126  0101               	movlb	1	; () banked
  8958  004128  0E01               	movlw	high _wrkbuf
  8959  00412A  6E20               	movwf	?_strlen+1,c
  8960  00412C  0E7D               	movlw	low _wrkbuf
  8961  00412E  6E1F               	movwf	?_strlen,c
  8962  004130  EC0D  F033         	call	_strlen	;wreg free
  8963  004134  501F               	movf	?_strlen,w,c
  8964  004136  0A02               	xorlw	2
  8965  004138  1020               	iorwf	?_strlen+1,w,c
  8966  00413A  E005               	bz	l18115
  8967  00413C                     l1191:
  8968  00413C  A2AC               	btfss	4012,1,c	;volatile
  8969  00413E  D7FE               	goto	l1191
  8970                           
  8971                           ;main.c: 2639: WriteUSART('0');
  8972  004140  0E30               	movlw	48
  8973  004142  EC61  F034         	call	_WriteUSART
  8974  004146                     l18115:
  8975                           
  8976                           ;main.c: 2640: }
  8977                           ;main.c: 2642: putsUSART(wrkbuf);
  8978  004146  0101               	movlb	1	; () banked
  8979  004148  0E01               	movlw	high _wrkbuf
  8980  00414A  6E21               	movwf	?_putsUSART+1,c
  8981  00414C  0E7D               	movlw	low _wrkbuf
  8982  00414E  6E20               	movwf	?_putsUSART,c
  8983  004150  ECB5  F031         	call	_putsUSART	;wreg free
  8984  004154  0100               	movlb	0	; () banked
  8985  004156  4B86               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8986  004158  2B87               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8987  00415A                     l18119:
  8988                           
  8989                           ; BSR set to: 0
  8990  00415A  5185               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8991  00415C  6F7E               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8992  00415E  6B7F               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8993  004160  5187               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8994  004162  0A80               	xorlw	128
  8995  004164  6F80               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8996  004166  517E               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8997  004168  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8998  00416A  517F               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8999  00416C  0A80               	xorlw	128
  9000  00416E  5980               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  9001  004170  E3C7               	bnc	l18107
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;main.c: 2643: }
  9005                           ;main.c: 2646: if (nTimeStamp) {
  9006  004172  0101               	movlb	1	; () banked
  9007  004174  512C               	movf	_nTimeStamp& (0+255),w,b
  9008  004176  E024               	bz	l1201
  9009                           
  9010                           ; BSR set to: 1
  9011                           ;main.c: 2647: ultoa(wrkbuf, timer, 16);
  9012  004178  0E01               	movlw	high _wrkbuf
  9013  00417A  0100               	movlb	0	; () banked
  9014  00417C  6F72               	movwf	(?_ultoa+1)& (0+255),b
  9015  00417E  0E7D               	movlw	low _wrkbuf
  9016  004180  6F71               	movwf	?_ultoa& (0+255),b
  9017  004182  C024  F073         	movff	_timer,?_ultoa+2	;volatile
  9018  004186  C025  F074         	movff	_timer+1,?_ultoa+3	;volatile
  9019  00418A  C026  F075         	movff	_timer+2,?_ultoa+4	;volatile
  9020  00418E  C027  F076         	movff	_timer+3,?_ultoa+5	;volatile
  9021  004192  6B78               	clrf	(?_ultoa+7)& (0+255),b
  9022  004194  0E10               	movlw	16
  9023  004196  6F77               	movwf	(?_ultoa+6)& (0+255),b
  9024  004198  ECE5  F027         	call	_ultoa	;wreg free
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;main.c: 2649: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  9028  00419C  6B86               	clrf	receiveSendEventSLCAN@i& (0+255),b
  9029  00419E  6B87               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  9030  0041A0                     l1198:
  9031                           
  9032                           ; BSR set to: 0
  9033  0041A0  A2AC               	btfss	4012,1,c	;volatile
  9034  0041A2  D7FE               	goto	l1198
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;main.c: 2651: WriteUSART('0');
  9038  0041A4  0E30               	movlw	48
  9039  0041A6  EC61  F034         	call	_WriteUSART
  9040                           
  9041                           ; BSR set to: 0
  9042  0041AA  D810               	call	PL120	;call to abstracted procedure
  9043  0041AC  B4D8               	btfsc	status,2,c
  9044  0041AE  5D86               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  9045  0041B0  E3F7               	bnc	l1198
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;main.c: 2652: }
  9049                           ;main.c: 2653: putsUSART(wrkbuf);
  9050  0041B2  0101               	movlb	1	; () banked
  9051  0041B4  0E01               	movlw	high _wrkbuf
  9052  0041B6  6E21               	movwf	?_putsUSART+1,c
  9053  0041B8  0E7D               	movlw	low _wrkbuf
  9054  0041BA  6E20               	movwf	?_putsUSART,c
  9055  0041BC  ECB5  F031         	call	_putsUSART	;wreg free
  9056  0041C0                     l1201:
  9057  0041C0  A2AC               	btfss	4012,1,c	;volatile
  9058  0041C2  D7FE               	goto	l1201
  9059                           
  9060                           ;main.c: 2657: WriteUSART(0x0d);
  9061  0041C4  0E0D               	movlw	13
  9062  0041C6  EC61  F034         	call	_WriteUSART
  9063  0041CA                     l1204:
  9064  0041CA  0012               	return	
  9065  0041CC                     __end_of_receiveSendEventSLCAN:
  9066                           	opt stack 0
  9067  0041CC                     PL120:
  9068                           	opt stack 23
  9069  0041CC  0100               	movlb	0	; () banked
  9070  0041CE  4B86               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  9071  0041D0  2B87               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  9072  0041D2  5187               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  9073  0041D4  0A80               	xorlw	128
  9074  0041D6  0F80               	addlw	-128
  9075  0041D8  0CB8               	retlw	184
  9076  0041DA                     __end_ofPL120:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           indf0	equ	0xFEF
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           indf1	equ	0xFE7
  9091                           postinc1	equ	0xFE6
  9092                           postdec1	equ	0xFE5
  9093                           fsr1h	equ	0xFE2
  9094                           fsr1l	equ	0xFE1
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           plusw2	equ	0xFDB
  9099                           fsr2h	equ	0xFDA
  9100                           fsr2l	equ	0xFD9
  9101                           status	equ	0xFD8
  9102                           
  9103 ;; *************** function _ultoa *****************
  9104 ;; Defined at:
  9105 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;  buf             2   17[BANK0 ] PTR unsigned char 
  9108 ;;		 -> wrkbuf(80), 
  9109 ;;  val             4   19[BANK0 ] unsigned long 
  9110 ;;  base            2   23[BANK0 ] int 
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;  v               4   25[BANK0 ] unsigned long 
  9113 ;;  c               1   29[BANK0 ] unsigned char 
  9114 ;; Return value:  Size  Location     Type
  9115 ;;                  2   17[BANK0 ] PTR unsigned char 
  9116 ;; Registers used:
  9117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9118 ;; Tracked objects:
  9119 ;;		On entry : F/0
  9120 ;;		On exit  : F/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9123 ;;      Params:         0       8       0       0       0       0       0
  9124 ;;      Locals:         0       5       0       0       0       0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0
  9126 ;;      Totals:         0      13       0       0       0       0       0
  9127 ;;Total ram usage:       13 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    4
  9130 ;; This function calls:
  9131 ;;		___lldiv
  9132 ;;		___llmod
  9133 ;; This function is called by:
  9134 ;;		_receiveSendEventSLCAN
  9135 ;; This function uses a non-reentrant model
  9136 ;;
  9137                           
  9138                           	psect	text6
  9139  004FCA                     __ptext6:
  9140                           	opt stack 0
  9141  004FCA                     _ultoa:
  9142                           	opt stack 24
  9143                           
  9144                           ; BSR set to: 0
  9145                           
  9146                           ;incstack = 0
  9147                           ;incstack = 0
  9148  004FCA  C073  F079         	movff	ultoa@val,ultoa@v
  9149  004FCE  C074  F07A         	movff	ultoa@val+1,ultoa@v+1
  9150  004FD2  C075  F07B         	movff	ultoa@val+2,ultoa@v+2
  9151  004FD6  C076  F07C         	movff	ultoa@val+3,ultoa@v+3
  9152  004FDA                     l18251:
  9153                           
  9154                           ; BSR set to: 0
  9155  004FDA  C079  F060         	movff	ultoa@v,?___lldiv
  9156  004FDE  C07A  F061         	movff	ultoa@v+1,?___lldiv+1
  9157  004FE2  C07B  F062         	movff	ultoa@v+2,?___lldiv+2
  9158  004FE6  C07C  F063         	movff	ultoa@v+3,?___lldiv+3
  9159  004FEA  D858               	call	PL84	;call to abstracted procedure
  9160  004FEC  EC53  F02F         	call	___lldiv	;wreg free
  9161  004FF0  C063  F07C         	movff	?___lldiv+3,ultoa@v+3
  9162  004FF4  C062  F07B         	movff	?___lldiv+2,ultoa@v+2
  9163  004FF8  C061  F07A         	movff	?___lldiv+1,ultoa@v+1
  9164  004FFC  C060  F079         	movff	?___lldiv,ultoa@v
  9165                           
  9166                           ; BSR set to: 0
  9167  005000  4B71               	infsnz	ultoa@buf& (0+255),f,b
  9168  005002  2B72               	incf	(ultoa@buf+1)& (0+255),f,b
  9169                           
  9170                           ; BSR set to: 0
  9171  005004  517C               	movf	(ultoa@v+3)& (0+255),w,b
  9172  005006  1179               	iorwf	ultoa@v& (0+255),w,b
  9173  005008  117A               	iorwf	(ultoa@v+1)& (0+255),w,b
  9174  00500A  117B               	iorwf	(ultoa@v+2)& (0+255),w,b
  9175  00500C  E1E6               	bnz	l18251
  9176                           
  9177                           ; BSR set to: 0
  9178  00500E  C071  FFD9         	movff	ultoa@buf,fsr2l
  9179  005012  C072  FFDA         	movff	ultoa@buf+1,fsr2h
  9180  005016  6ADF               	clrf	indf2,c
  9181                           
  9182                           ; BSR set to: 0
  9183  005018  0771               	decf	ultoa@buf& (0+255),f,b
  9184  00501A  A0D8               	btfss	status,0,c
  9185  00501C  0772               	decf	(ultoa@buf+1)& (0+255),f,b
  9186  00501E                     l18261:
  9187                           
  9188                           ; BSR set to: 0
  9189  00501E  C073  F068         	movff	ultoa@val,?___llmod
  9190  005022  C074  F069         	movff	ultoa@val+1,?___llmod+1
  9191  005026  C075  F06A         	movff	ultoa@val+2,?___llmod+2
  9192  00502A  C076  F06B         	movff	ultoa@val+3,?___llmod+3
  9193  00502E  C077  F06C         	movff	ultoa@base,?___llmod+4
  9194  005032  C078  F06D         	movff	ultoa@base+1,?___llmod+5
  9195  005036  0E00               	movlw	0
  9196  005038  BF6D               	btfsc	(?___llmod+5)& (0+255),7,b
  9197  00503A  0EFF               	movlw	-1
  9198  00503C  6F6E               	movwf	(?___llmod+6)& (0+255),b
  9199  00503E  6F6F               	movwf	(?___llmod+7)& (0+255),b
  9200  005040  EC70  F030         	call	___llmod	;wreg free
  9201  005044  5168               	movf	?___llmod& (0+255),w,b
  9202  005046  6F7D               	movwf	ultoa@c& (0+255),b
  9203                           
  9204                           ; BSR set to: 0
  9205  005048  C073  F060         	movff	ultoa@val,?___lldiv
  9206  00504C  C074  F061         	movff	ultoa@val+1,?___lldiv+1
  9207  005050  C075  F062         	movff	ultoa@val+2,?___lldiv+2
  9208  005054  C076  F063         	movff	ultoa@val+3,?___lldiv+3
  9209  005058  D821               	call	PL84	;call to abstracted procedure
  9210  00505A  EC53  F02F         	call	___lldiv	;wreg free
  9211  00505E  C063  F076         	movff	?___lldiv+3,ultoa@val+3
  9212  005062  C062  F075         	movff	?___lldiv+2,ultoa@val+2
  9213  005066  C061  F074         	movff	?___lldiv+1,ultoa@val+1
  9214  00506A  C060  F073         	movff	?___lldiv,ultoa@val
  9215                           
  9216                           ; BSR set to: 0
  9217  00506E  0E09               	movlw	9
  9218  005070  657D               	cpfsgt	ultoa@c& (0+255),b
  9219  005072  D002               	goto	l2592
  9220                           
  9221                           ; BSR set to: 0
  9222  005074  0E07               	movlw	7
  9223  005076  277D               	addwf	ultoa@c& (0+255),f,b
  9224  005078                     l2592:
  9225                           
  9226                           ; BSR set to: 0
  9227  005078  0E30               	movlw	48
  9228  00507A  277D               	addwf	ultoa@c& (0+255),f,b
  9229                           
  9230                           ; BSR set to: 0
  9231  00507C  C071  FFD9         	movff	ultoa@buf,fsr2l
  9232  005080  C072  FFDA         	movff	ultoa@buf+1,fsr2h
  9233  005084  C07D  FFDF         	movff	ultoa@c,indf2
  9234                           
  9235                           ; BSR set to: 0
  9236  005088  0771               	decf	ultoa@buf& (0+255),f,b
  9237  00508A  A0D8               	btfss	status,0,c
  9238  00508C  0772               	decf	(ultoa@buf+1)& (0+255),f,b
  9239                           
  9240                           ; BSR set to: 0
  9241  00508E  5176               	movf	(ultoa@val+3)& (0+255),w,b
  9242  005090  1173               	iorwf	ultoa@val& (0+255),w,b
  9243  005092  1174               	iorwf	(ultoa@val+1)& (0+255),w,b
  9244  005094  1175               	iorwf	(ultoa@val+2)& (0+255),w,b
  9245  005096  B4D8               	btfsc	status,2,c
  9246                           
  9247                           ; BSR set to: 0
  9248  005098  0012               	return	
  9249  00509A  D7C1               	goto	l18261
  9250  00509C                     __end_of_ultoa:
  9251                           	opt stack 0
  9252  00509C                     PL84:
  9253                           	opt stack 24
  9254  00509C  C077  F064         	movff	ultoa@base,?___lldiv+4
  9255  0050A0  C078  F065         	movff	ultoa@base+1,?___lldiv+5
  9256  0050A4  0E00               	movlw	0
  9257  0050A6  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  9258  0050A8  0EFF               	movlw	-1
  9259  0050AA  6F66               	movwf	(?___lldiv+6)& (0+255),b
  9260  0050AC  6F67               	movwf	(?___lldiv+7)& (0+255),b
  9261  0050AE  0012               	return	
  9262  0050B0                     __end_ofPL84:
  9263                           	opt stack 0
  9264                           tblptru	equ	0xFF8
  9265                           tblptrh	equ	0xFF7
  9266                           tblptrl	equ	0xFF6
  9267                           tablat	equ	0xFF5
  9268                           prodh	equ	0xFF4
  9269                           prodl	equ	0xFF3
  9270                           intcon	equ	0xFF2
  9271                           indf0	equ	0xFEF
  9272                           postinc0	equ	0xFEE
  9273                           fsr0h	equ	0xFEA
  9274                           fsr0l	equ	0xFE9
  9275                           wreg	equ	0xFE8
  9276                           indf1	equ	0xFE7
  9277                           postinc1	equ	0xFE6
  9278                           postdec1	equ	0xFE5
  9279                           fsr1h	equ	0xFE2
  9280                           fsr1l	equ	0xFE1
  9281                           indf2	equ	0xFDF
  9282                           postinc2	equ	0xFDE
  9283                           postdec2	equ	0xFDD
  9284                           plusw2	equ	0xFDB
  9285                           fsr2h	equ	0xFDA
  9286                           fsr2l	equ	0xFD9
  9287                           status	equ	0xFD8
  9288                           
  9289 ;; *************** function _doModeVscp *****************
  9290 ;; Defined at:
  9291 ;;		line 1478 in file "main.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;  c               1   87[BANK0 ] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;		None               void
  9298 ;; Registers used:
  9299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/1
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9305 ;;      Params:         0       0       0       0       0       0       0
  9306 ;;      Locals:         0       1       0       0       0       0       0
  9307 ;;      Temps:          0       3       0       0       0       0       0
  9308 ;;      Totals:         0       4       0       0       0       0       0
  9309 ;;Total ram usage:        4 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:    7
  9312 ;; This function calls:
  9313 ;;		_fifo_read
  9314 ;;		_ECANSetOperationMode
  9315 ;;		_Busy_eep
  9316 ;;		_Write_b_eep
  9317 ;;		_receiveSendMultiEventCANAL
  9318 ;;		_receiveSendEventCANAL
  9319 ;;		_calcCRC
  9320 ;;		_sendVSCPDriverNack
  9321 ;;		_sendVSCPDriverAck
  9322 ;;		_receiveVSCPModeCanalMsg
  9323 ;;		_receiveVSCPModeMultiCanalMsg
  9324 ;;		_sendVSCPModeCapabilities
  9325 ;;		_sendVSCPDriverCommandReply
  9326 ;;		_sendVSCPDriverErrorFrame
  9327 ;; This function is called by:
  9328 ;;		_main
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text7
  9333  00337A                     __ptext7:
  9334                           	opt stack 0
  9335  00337A                     _doModeVscp:
  9336                           	opt stack 23
  9337                           
  9338                           ;main.c: 1479: uint8_t c;
  9339                           ;main.c: 1482: if ( caps.maxCanalFrames > 1 ) {
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;incstack = 0
  9343                           ;incstack = 0
  9344  00337A  0101               	movlb	1	; () banked
  9345  00337C  EE21  F0F3         	lfsr	2,_caps+1
  9346  003380  0E01               	movlw	1
  9347  003382  64DF               	cpfsgt	indf2,c
  9348  003384  D003               	goto	l16165
  9349                           
  9350                           ; BSR set to: 1
  9351                           ;main.c: 1485: receiveSendMultiEventCANAL();
  9352  003386  EC26  F01C         	call	_receiveSendMultiEventCANAL	;wreg free
  9353                           
  9354                           ;main.c: 1486: }
  9355  00338A  D002               	goto	l16167
  9356  00338C                     l16165:
  9357                           
  9358                           ; BSR set to: 1
  9359                           ;main.c: 1487: else {
  9360                           ;main.c: 1490: receiveSendEventCANAL();
  9361  00338C  EC3F  F01E         	call	_receiveSendEventCANAL	;wreg free
  9362  003390                     l16167:
  9363                           
  9364                           ;main.c: 1491: }
  9365                           ;main.c: 1494: (INTCONbits.GIE = 0);
  9366  003390  9EF2               	bcf	intcon,7,c	;volatile
  9367                           
  9368                           ;main.c: 1496: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  9369  003392  0E01               	movlw	high _serialInputFifo
  9370  003394  0100               	movlb	0	; () banked
  9371  003396  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  9372  003398  0EDD               	movlw	low _serialInputFifo
  9373  00339A  6F60               	movwf	?_fifo_read& (0+255),b
  9374  00339C  0E00               	movlw	high doModeVscp@c
  9375  00339E  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  9376  0033A0  0EB7               	movlw	low doModeVscp@c
  9377  0033A2  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  9378  0033A4  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  9379  0033A6  0E01               	movlw	1
  9380  0033A8  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  9381  0033AA  ECC5  F028         	call	_fifo_read	;wreg free
  9382  0033AE  0560               	decf	?_fifo_read& (0+255),w,b
  9383  0033B0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  9384  0033B2  E001 D10B          	bnz	l16357
  9385                           
  9386                           ; BSR set to: 0
  9387                           ;main.c: 1499: (INTCONbits.GIE = 1);
  9388  0033B6  8EF2               	bsf	intcon,7,c	;volatile
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;main.c: 1502: if ( pos >= sizeof( cmdbuf ) ) {
  9392  0033B8  0E4F               	movlw	79
  9393  0033BA  6432               	cpfsgt	_pos,c
  9394  0033BC  D004               	goto	l776
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;main.c: 1504: pos = 0;
  9398  0033BE  6A32               	clrf	_pos,c
  9399                           
  9400                           ;main.c: 1505: bDLE = 0;
  9401  0033C0  0101               	movlb	1	; () banked
  9402  0033C2  6B28               	clrf	_bDLE& (0+255),b
  9403                           
  9404                           ;main.c: 1506: stateVscpDriver = 0;
  9405  0033C4  6A35               	clrf	_stateVscpDriver,c
  9406  0033C6                     l776:
  9407                           
  9408                           ;main.c: 1507: }
  9409                           ;main.c: 1509: if ( 0 == stateVscpDriver ) {
  9410  0033C6  6635               	tstfsz	_stateVscpDriver,c
  9411  0033C8  D010               	goto	l16191
  9412                           
  9413                           ;main.c: 1511: if ( bDLE ) {
  9414  0033CA  0101               	movlb	1	; () banked
  9415  0033CC  5128               	movf	_bDLE& (0+255),w,b
  9416  0033CE  E009               	bz	l16187
  9417                           
  9418                           ; BSR set to: 1
  9419                           ;main.c: 1513: bDLE = 0;
  9420  0033D0  6B28               	clrf	_bDLE& (0+255),b
  9421                           
  9422                           ; BSR set to: 1
  9423                           ;main.c: 1516: if ( 0x02 == c ) {
  9424  0033D2  0100               	movlb	0	; () banked
  9425  0033D4  51B7               	movf	doModeVscp@c& (0+255),w,b
  9426  0033D6  0A02               	xorlw	2
  9427  0033D8  E12F               	bnz	l16227
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;main.c: 1517: stateVscpDriver = 1;
  9431  0033DA  0E01               	movlw	1
  9432  0033DC  6E35               	movwf	_stateVscpDriver,c
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;main.c: 1518: pos = 0;
  9436  0033DE  6A32               	clrf	_pos,c
  9437  0033E0  D02B               	goto	l16227
  9438  0033E2                     l16187:
  9439                           
  9440                           ;main.c: 1521: else {
  9441                           ;main.c: 1522: bDLE = 1;
  9442  0033E2  0E01               	movlw	1
  9443  0033E4  0101               	movlb	1	; () banked
  9444  0033E6  6F28               	movwf	_bDLE& (0+255),b
  9445  0033E8  D0F2               	goto	l781
  9446  0033EA                     l16191:
  9447                           
  9448                           ;main.c: 1526: else if ( 1 == stateVscpDriver ) {
  9449  0033EA  0435               	decf	_stateVscpDriver,w,c
  9450  0033EC  E125               	bnz	l16227
  9451                           
  9452                           ;main.c: 1529: if ( bDLE ) {
  9453  0033EE  0101               	movlb	1	; () banked
  9454  0033F0  5128               	movf	_bDLE& (0+255),w,b
  9455  0033F2  E01D               	bz	l16211
  9456                           
  9457                           ; BSR set to: 1
  9458                           ;main.c: 1532: bDLE = 0;
  9459  0033F4  6B28               	clrf	_bDLE& (0+255),b
  9460                           
  9461                           ; BSR set to: 1
  9462                           ;main.c: 1535: if ( 0x03 == c ) {
  9463  0033F6  0100               	movlb	0	; () banked
  9464  0033F8  51B7               	movf	doModeVscp@c& (0+255),w,b
  9465  0033FA  0A03               	xorlw	3
  9466  0033FC  E103               	bnz	l16201
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;main.c: 1536: stateVscpDriver = 2;
  9470  0033FE  0E02               	movlw	2
  9471  003400  6E35               	movwf	_stateVscpDriver,c
  9472                           
  9473                           ;main.c: 1537: }
  9474  003402  D01A               	goto	l16227
  9475  003404                     l16201:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;main.c: 1539: else if (0x10 == c) {
  9479  003404  51B7               	movf	doModeVscp@c& (0+255),w,b
  9480  003406  0A10               	xorlw	16
  9481  003408  E117               	bnz	l16227
  9482  00340A                     u20500:
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;main.c: 1541: cmdbuf[ pos++ ] = c;
  9486  00340A  0E2D               	movlw	low _cmdbuf
  9487  00340C  2432               	addwf	_pos,w,c
  9488  00340E  6ED9               	movwf	fsr2l,c
  9489  003410  6ADA               	clrf	fsr2h,c
  9490  003412  0E01               	movlw	high _cmdbuf
  9491  003414  22DA               	addwfc	fsr2h,f,c
  9492  003416  0100               	movlb	0	; () banked
  9493  003418  C0B7  FFDF         	movff	doModeVscp@c,indf2
  9494                           
  9495                           ; BSR set to: 0
  9496  00341C  2A32               	incf	_pos,f,c
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;main.c: 1542: if ( pos >= sizeof( cmdbuf ) ) {
  9500  00341E  0E4F               	movlw	79
  9501  003420  6432               	cpfsgt	_pos,c
  9502  003422  D0D5               	goto	l781
  9503                           
  9504                           ; BSR set to: 0
  9505                           ;main.c: 1545: bDLE = 0;
  9506  003424  0101               	movlb	1	; () banked
  9507  003426  6B28               	clrf	_bDLE& (0+255),b
  9508                           
  9509                           ;main.c: 1546: pos = 0;
  9510  003428  6A32               	clrf	_pos,c
  9511                           
  9512                           ;main.c: 1547: stateVscpDriver = 0;
  9513  00342A  6A35               	clrf	_stateVscpDriver,c
  9514  00342C  D0D0               	goto	l781
  9515  00342E                     l16211:
  9516                           
  9517                           ; BSR set to: 1
  9518                           ;main.c: 1552: else {
  9519                           ;main.c: 1553: if (0x10 == c) {
  9520  00342E  0100               	movlb	0	; () banked
  9521  003430  51B7               	movf	doModeVscp@c& (0+255),w,b
  9522  003432  0A10               	xorlw	16
  9523  003434  E0D6               	bz	l16187
  9524  003436  D7E9               	goto	u20500
  9525  003438                     l16227:
  9526                           
  9527                           ;main.c: 1569: }
  9528                           ;main.c: 1570: }
  9529                           ;main.c: 1571: }
  9530                           ;main.c: 1573: if (2 == stateVscpDriver) {
  9531  003438  5035               	movf	_stateVscpDriver,w,c
  9532  00343A  0A02               	xorlw	2
  9533  00343C  E001 D0C6          	bnz	l16357
  9534                           
  9535                           ;main.c: 1576: stateVscpDriver = 0;
  9536  003440  6A35               	clrf	_stateVscpDriver,c
  9537                           
  9538                           ;main.c: 1588: if (calcCRC(cmdbuf, pos)) {
  9539  003442  0E01               	movlw	high _cmdbuf
  9540  003444  0100               	movlb	0	; () banked
  9541  003446  6F68               	movwf	(?_calcCRC+1)& (0+255),b
  9542  003448  0E2D               	movlw	low _cmdbuf
  9543  00344A  6F67               	movwf	?_calcCRC& (0+255),b
  9544  00344C  C032  F069         	movff	_pos,?_calcCRC+2
  9545  003450  ECB3  F033         	call	_calcCRC	;wreg free
  9546  003454  0900               	iorlw	0
  9547  003456  E003               	bz	l794
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;main.c: 1589: sendVSCPDriverNack();
  9551  003458  ECC5  F02C         	call	_sendVSCPDriverNack	;wreg free
  9552  00345C  D0B8               	goto	l781
  9553  00345E                     l794:
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;main.c: 1591: }
  9557                           ;main.c: 1594: if (0 ==
  9558                           ;main.c: 1595: cmdbuf[ 0 ]) {
  9559  00345E  0101               	movlb	1	; () banked
  9560  003460  672D               	tstfsz	_cmdbuf& (0+255),b
  9561  003462  D003               	goto	l16239
  9562  003464                     l16237:
  9563                           
  9564                           ;main.c: 1596: sendVSCPDriverAck();
  9565  003464  EC73  F02C         	call	_sendVSCPDriverAck	;wreg free
  9566                           
  9567                           ;main.c: 1597: }
  9568  003468  D0AF               	goto	l16353
  9569  00346A                     l16239:
  9570                           
  9571                           ; BSR set to: 1
  9572                           ;main.c: 1599: else if (1 ==
  9573                           ;main.c: 1600: cmdbuf[ 0 ]) {
  9574  00346A  052D               	decf	_cmdbuf& (0+255),w,b
  9575  00346C  E103               	bnz	l16243
  9576  00346E                     l16241:
  9577                           
  9578                           ;main.c: 1601: sendVSCPDriverNack();
  9579  00346E  ECC5  F02C         	call	_sendVSCPDriverNack	;wreg free
  9580                           
  9581                           ;main.c: 1602: }
  9582  003472  D0AA               	goto	l16353
  9583  003474                     l16243:
  9584                           
  9585                           ; BSR set to: 1
  9586                           ;main.c: 1604: else if (2 ==
  9587                           ;main.c: 1605: cmdbuf[ 0 ]) {
  9588  003474  512D               	movf	_cmdbuf& (0+255),w,b
  9589  003476  0A02               	xorlw	2
  9590  003478  E105               	bnz	l16251
  9591                           
  9592                           ; BSR set to: 1
  9593                           ;main.c: 1606: if ( receiveVSCPModeCanalMsg() ) {
  9594  00347A  EC70  F027         	call	_receiveVSCPModeCanalMsg	;wreg free
  9595  00347E  0900               	iorlw	0
  9596  003480  E1F1               	bnz	l16237
  9597  003482  D7F5               	goto	l16241
  9598  003484                     l16251:
  9599                           
  9600                           ; BSR set to: 1
  9601                           ;main.c: 1614: else if (6 ==
  9602                           ;main.c: 1615: cmdbuf[ 0 ]) {
  9603  003484  512D               	movf	_cmdbuf& (0+255),w,b
  9604  003486  0A06               	xorlw	6
  9605  003488  E103               	bnz	l16259
  9606                           
  9607                           ; BSR set to: 1
  9608                           ;main.c: 1616: if (receiveVSCPModeMultiCanalMsg()) {
  9609  00348A  ECA1  F034         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9610  00348E  D7F7               	goto	L5
  9611  003490                     l16259:
  9612                           
  9613                           ; BSR set to: 1
  9614                           ;main.c: 1624: else if (6 ==
  9615                           ;main.c: 1625: cmdbuf[ 0 ]) {
  9616  003490  512D               	movf	_cmdbuf& (0+255),w,b
  9617  003492  0A06               	xorlw	6
  9618  003494  E0EC               	bz	l16241
  9619                           
  9620                           ; BSR set to: 1
  9621                           ;main.c: 1629: else if (3 ==
  9622                           ;main.c: 1630: cmdbuf[ 0 ]) {
  9623  003496  512D               	movf	_cmdbuf& (0+255),w,b
  9624  003498  0A03               	xorlw	3
  9625  00349A  E13F               	bnz	l16305
  9626                           
  9627                           ; BSR set to: 1
  9628                           ;main.c: 1632: if ( cmdbuf[ 5 ] ==
  9629                           ;main.c: 1633: 0) {
  9630  00349C  6732               	tstfsz	(_cmdbuf+5)& (0+255),b
  9631  00349E  D001               	goto	l16269
  9632  0034A0  D7E1               	goto	l16237
  9633  0034A2                     l16269:
  9634                           
  9635                           ; BSR set to: 1
  9636                           ;main.c: 1637: else if ( cmdbuf[ 5 ] ==
  9637                           ;main.c: 1638: 1 ) {
  9638  0034A2  0532               	decf	(_cmdbuf+5)& (0+255),w,b
  9639  0034A4  E11B               	bnz	l16287
  9640                           
  9641                           ; BSR set to: 1
  9642                           ;main.c: 1640: if ( 2 == ( cmdbuf[ 3 ]<<8 +
  9643                           ;main.c: 1641: cmdbuf[ 4 ] ) ) {
  9644  0034A6  C131  F0B4         	movff	_cmdbuf+4,??_doModeVscp
  9645  0034AA  D896               	call	PL140	;call to abstracted procedure
  9646  0034AC  D001               	goto	u20664
  9647  0034AE                     u20665:
  9648  0034AE  D890               	call	PL138	;call to abstracted procedure
  9649  0034B0                     u20664:
  9650  0034B0  2FB4               	decfsz	??_doModeVscp& (0+255),f,b
  9651  0034B2  D7FD               	goto	u20665
  9652  0034B4  51B5               	movf	(??_doModeVscp+1)& (0+255),w,b
  9653  0034B6  0A02               	xorlw	2
  9654  0034B8  11B6               	iorwf	(??_doModeVscp+2)& (0+255),w,b
  9655  0034BA  E1D9               	bnz	l16241
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;main.c: 1643: if ( cmdbuf[ 5 + 1 ] < 4 ) {
  9659  0034BC  0E04               	movlw	4
  9660  0034BE  0101               	movlb	1	; () banked
  9661  0034C0  6133               	cpfslt	(_cmdbuf+6)& (0+255),b
  9662  0034C2  D7D5               	goto	l16241
  9663                           
  9664                           ; BSR set to: 1
  9665                           ;main.c: 1644: mode = cmdbuf[ 5 + 1 ];
  9666  0034C4  C133  F12B         	movff	_cmdbuf+6,_mode
  9667                           
  9668                           ; BSR set to: 1
  9669                           ;main.c: 1645: (Busy_eep(), Write_b_eep(0x03,cmdbuf[ 5 + 1 ]));
  9670  0034C8  EC9D  F034         	call	_Busy_eep	;wreg free
  9671  0034CC  6A20               	clrf	?_Write_b_eep+1,c
  9672  0034CE  0E03               	movlw	3
  9673  0034D0  6E1F               	movwf	?_Write_b_eep,c
  9674  0034D2  C133  F021         	movff	_cmdbuf+6,?_Write_b_eep+2
  9675  0034D6  EC80  F033         	call	_Write_b_eep	;wreg free
  9676  0034DA  D7C4               	goto	l16237
  9677  0034DC                     l16287:
  9678                           
  9679                           ; BSR set to: 1
  9680                           ;main.c: 1659: else if ( cmdbuf[ 5 ] ==
  9681                           ;main.c: 1660: 2 ) {
  9682  0034DC  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9683  0034DE  0A02               	xorlw	2
  9684  0034E0  E1C6               	bnz	l16241
  9685                           
  9686                           ; BSR set to: 1
  9687                           ;main.c: 1662: if ( 2 == ( cmdbuf[ 3 ]<<8 +
  9688                           ;main.c: 1663: cmdbuf[ 4 ] ) ) {
  9689  0034E2  C131  F0B4         	movff	_cmdbuf+4,??_doModeVscp
  9690  0034E6  D878               	call	PL140	;call to abstracted procedure
  9691  0034E8  D001               	goto	u20704
  9692  0034EA                     u20705:
  9693  0034EA  D872               	call	PL138	;call to abstracted procedure
  9694  0034EC                     u20704:
  9695  0034EC  2FB4               	decfsz	??_doModeVscp& (0+255),f,b
  9696  0034EE  D7FD               	goto	u20705
  9697  0034F0  51B5               	movf	(??_doModeVscp+1)& (0+255),w,b
  9698  0034F2  0A02               	xorlw	2
  9699  0034F4  11B6               	iorwf	(??_doModeVscp+2)& (0+255),w,b
  9700  0034F6  E1BB               	bnz	l16241
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;main.c: 1665: if ( cmdbuf[ 5 + 1 ] ) {
  9704  0034F8  0101               	movlb	1	; () banked
  9705  0034FA  5133               	movf	(_cmdbuf+6)& (0+255),w,b
  9706  0034FC  E003               	bz	l820
  9707                           
  9708                           ; BSR set to: 1
  9709                           ;main.c: 1666: bTimestamp = 1;
  9710  0034FE  0E01               	movlw	1
  9711  003500  6E2F               	movwf	_bTimestamp,c
  9712                           
  9713                           ;main.c: 1667: }
  9714  003502  D001               	goto	l16295
  9715  003504                     l820:
  9716                           
  9717                           ; BSR set to: 1
  9718                           ;main.c: 1668: else {
  9719                           ;main.c: 1669: bTimestamp = 0;
  9720  003504  6A2F               	clrf	_bTimestamp,c
  9721  003506                     l16295:
  9722                           
  9723                           ; BSR set to: 1
  9724                           ;main.c: 1670: }
  9725                           ;main.c: 1672: (Busy_eep(), Write_b_eep(0x66,cmdbuf[ 5 + 1 ]));
  9726  003506  EC9D  F034         	call	_Busy_eep	;wreg free
  9727  00350A  6A20               	clrf	?_Write_b_eep+1,c
  9728  00350C  0E66               	movlw	102
  9729  00350E  6E1F               	movwf	?_Write_b_eep,c
  9730  003510  C133  F021         	movff	_cmdbuf+6,?_Write_b_eep+2
  9731  003514  EC80  F033         	call	_Write_b_eep	;wreg free
  9732  003518  D7A5               	goto	l16237
  9733  00351A                     l16305:
  9734                           
  9735                           ; BSR set to: 1
  9736                           ;main.c: 1686: else if (4 ==
  9737                           ;main.c: 1687: cmdbuf[ 0 ]) {
  9738  00351A  512D               	movf	_cmdbuf& (0+255),w,b
  9739  00351C  0A04               	xorlw	4
  9740  00351E  E0A7               	bz	l16241
  9741                           
  9742                           ; BSR set to: 1
  9743                           ;main.c: 1691: else if (8 ==
  9744                           ;main.c: 1692: cmdbuf[ 0 ]) {
  9745  003520  512D               	movf	_cmdbuf& (0+255),w,b
  9746  003522  0A08               	xorlw	8
  9747  003524  E107               	bnz	l16315
  9748                           
  9749                           ; BSR set to: 1
  9750                           ;main.c: 1693: caps.maxVscpFrames = cmdbuf[ 5 ];
  9751  003526  C132  F1F2         	movff	_cmdbuf+5,_caps
  9752                           
  9753                           ;main.c: 1694: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9754  00352A  C133  F1F3         	movff	_cmdbuf+6,_caps+1
  9755                           
  9756                           ; BSR set to: 1
  9757                           ;main.c: 1695: sendVSCPModeCapabilities();
  9758  00352E  ECBD  F02A         	call	_sendVSCPModeCapabilities	;wreg free
  9759                           
  9760                           ;main.c: 1696: }
  9761  003532  D04A               	goto	l16353
  9762  003534                     l16315:
  9763                           
  9764                           ; BSR set to: 1
  9765                           ;main.c: 1698: else if (255 ==
  9766                           ;main.c: 1699: cmdbuf[ 0 ]) {
  9767  003534  292D               	incf	_cmdbuf& (0+255),w,b
  9768  003536  E145               	bnz	l16351
  9769                           
  9770                           ; BSR set to: 1
  9771                           ;main.c: 1701: if (cmdbuf[ 5 ] ==
  9772                           ;main.c: 1702: 0) {
  9773  003538  6732               	tstfsz	(_cmdbuf+5)& (0+255),b
  9774  00353A  D006               	goto	l16321
  9775                           
  9776                           ; BSR set to: 1
  9777                           ;main.c: 1703: sendVSCPDriverCommandReply(0, 0);
  9778  00353C  0E00               	movlw	0
  9779  00353E  0100               	movlb	0	; () banked
  9780  003540  6B6A               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9781  003542  EC58  F028         	call	_sendVSCPDriverCommandReply
  9782                           
  9783                           ;main.c: 1704: }
  9784  003546  D040               	goto	l16353
  9785  003548                     l16321:
  9786                           
  9787                           ; BSR set to: 1
  9788                           ;main.c: 1706: else if (cmdbuf[ 5 ] ==
  9789                           ;main.c: 1707: 1) {
  9790  003548  0532               	decf	(_cmdbuf+5)& (0+255),w,b
  9791  00354A  E10A               	bnz	l16327
  9792                           
  9793                           ; BSR set to: 1
  9794                           ;main.c: 1708: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9795  00354C  0E00               	movlw	0
  9796  00354E  EC4A  F034         	call	_ECANSetOperationMode
  9797                           
  9798                           ;main.c: 1709: sendVSCPDriverCommandReply(0, 1);
  9799  003552  0E01               	movlw	1
  9800  003554  0100               	movlb	0	; () banked
  9801  003556  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9802  003558  0E00               	movlw	0
  9803  00355A  EC58  F028         	call	_sendVSCPDriverCommandReply
  9804                           
  9805                           ;main.c: 1710: }
  9806  00355E  D034               	goto	l16353
  9807  003560                     l16327:
  9808                           
  9809                           ; BSR set to: 1
  9810                           ;main.c: 1712: else if (cmdbuf[ 5 ] ==
  9811                           ;main.c: 1713: 2) {
  9812  003560  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9813  003562  0A02               	xorlw	2
  9814  003564  E10A               	bnz	l16333
  9815                           
  9816                           ; BSR set to: 1
  9817                           ;main.c: 1714: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9818  003566  0E40               	movlw	64
  9819  003568  EC4A  F034         	call	_ECANSetOperationMode
  9820                           
  9821                           ;main.c: 1715: sendVSCPDriverCommandReply(0, 2);
  9822  00356C  0E02               	movlw	2
  9823  00356E  0100               	movlb	0	; () banked
  9824  003570  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9825  003572  0E00               	movlw	0
  9826  003574  EC58  F028         	call	_sendVSCPDriverCommandReply
  9827                           
  9828                           ;main.c: 1716: }
  9829  003578  D027               	goto	l16353
  9830  00357A                     l16333:
  9831                           
  9832                           ; BSR set to: 1
  9833                           ;main.c: 1718: else if (cmdbuf[ 5 ] ==
  9834                           ;main.c: 1719: 3) {
  9835  00357A  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9836  00357C  0A03               	xorlw	3
  9837  00357E  E10A               	bnz	l16339
  9838                           
  9839                           ; BSR set to: 1
  9840                           ;main.c: 1720: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9841  003580  0E60               	movlw	96
  9842  003582  EC4A  F034         	call	_ECANSetOperationMode
  9843                           
  9844                           ;main.c: 1721: sendVSCPDriverCommandReply(0, 3);
  9845  003586  0E03               	movlw	3
  9846  003588  0100               	movlb	0	; () banked
  9847  00358A  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9848  00358C  0E00               	movlw	0
  9849  00358E  EC58  F028         	call	_sendVSCPDriverCommandReply
  9850                           
  9851                           ;main.c: 1722: }
  9852  003592  D01A               	goto	l16353
  9853  003594                     l16339:
  9854                           
  9855                           ; BSR set to: 1
  9856                           ;main.c: 1724: else if (cmdbuf[ 5 ] ==
  9857                           ;main.c: 1725: 4) {
  9858  003594  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9859  003596  0A04               	xorlw	4
  9860  003598  E10A               	bnz	l16345
  9861                           
  9862                           ; BSR set to: 1
  9863                           ;main.c: 1726: ECANSetOperationMode(0x20);
  9864  00359A  0E20               	movlw	32
  9865  00359C  EC4A  F034         	call	_ECANSetOperationMode
  9866                           
  9867                           ;main.c: 1727: sendVSCPDriverCommandReply(0, 4);
  9868  0035A0  0E04               	movlw	4
  9869  0035A2  0100               	movlb	0	; () banked
  9870  0035A4  6F6A               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9871  0035A6  0E00               	movlw	0
  9872  0035A8  EC58  F028         	call	_sendVSCPDriverCommandReply
  9873                           
  9874                           ;main.c: 1728: }
  9875  0035AC  D00D               	goto	l16353
  9876  0035AE                     l16345:
  9877                           
  9878                           ; BSR set to: 1
  9879                           ;main.c: 1730: else if (cmdbuf[ 5 ] ==
  9880                           ;main.c: 1731: 5) {
  9881  0035AE  5132               	movf	(_cmdbuf+5)& (0+255),w,b
  9882  0035B0  0A05               	xorlw	5
  9883  0035B2  E001 D75C          	bnz	l16241
  9884                           
  9885                           ; BSR set to: 1
  9886                           ;main.c: 1732: sendVSCPDriverCommandReply(0, 0);
  9887  0035B6  0E00               	movlw	0
  9888  0035B8  0100               	movlb	0	; () banked
  9889  0035BA  6B6A               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9890  0035BC  EC58  F028         	call	_sendVSCPDriverCommandReply
  9891                           
  9892                           ;main.c: 1733: }
  9893  0035C0  D003               	goto	l16353
  9894  0035C2                     l16351:
  9895                           
  9896                           ; BSR set to: 1
  9897                           ;main.c: 1739: else {
  9898                           ;main.c: 1741: sendVSCPDriverErrorFrame(2);
  9899  0035C2  0E02               	movlw	2
  9900  0035C4  EC5B  F02A         	call	_sendVSCPDriverErrorFrame
  9901  0035C8                     l16353:
  9902                           
  9903                           ;main.c: 1742: }
  9904                           ;main.c: 1745: pos = 0;
  9905  0035C8  6A32               	clrf	_pos,c
  9906                           
  9907                           ;main.c: 1746: stateVscpDriver = 0;
  9908  0035CA  6A35               	clrf	_stateVscpDriver,c
  9909  0035CC                     l16357:
  9910                           
  9911                           ;main.c: 1748: }
  9912                           ;main.c: 1750: }
  9913                           ;main.c: 1753: (INTCONbits.GIE = 1);
  9914  0035CC  8EF2               	bsf	intcon,7,c	;volatile
  9915  0035CE                     l781:
  9916  0035CE  0012               	return	
  9917  0035D0                     __end_of_doModeVscp:
  9918                           	opt stack 0
  9919  0035D0                     PL138:
  9920                           	opt stack 23
  9921  0035D0  90D8               	bcf	status,0,c
  9922  0035D2  37B5               	rlcf	(??_doModeVscp+1)& (0+255),f,b
  9923  0035D4  37B6               	rlcf	(??_doModeVscp+2)& (0+255),f,b
  9924  0035D6  0012               	return	
  9925  0035D8                     __end_ofPL138:
  9926                           	opt stack 0
  9927  0035D8                     PL140:
  9928                           	opt stack 23
  9929  0035D8  0E08               	movlw	8
  9930  0035DA  0100               	movlb	0	; () banked
  9931  0035DC  27B4               	addwf	??_doModeVscp& (0+255),f,b
  9932  0035DE  0101               	movlb	1	; () banked
  9933  0035E0  5130               	movf	(_cmdbuf+3)& (0+255),w,b
  9934  0035E2  0100               	movlb	0	; () banked
  9935  0035E4  6FB5               	movwf	(??_doModeVscp+1)& (0+255),b
  9936  0035E6  6BB6               	clrf	(??_doModeVscp+2)& (0+255),b
  9937  0035E8  2BB4               	incf	??_doModeVscp& (0+255),f,b
  9938  0035EA  0012               	return	
  9939  0035EC                     __end_ofPL140:
  9940                           	opt stack 0
  9941                           tblptru	equ	0xFF8
  9942                           tblptrh	equ	0xFF7
  9943                           tblptrl	equ	0xFF6
  9944                           tablat	equ	0xFF5
  9945                           prodh	equ	0xFF4
  9946                           prodl	equ	0xFF3
  9947                           intcon	equ	0xFF2
  9948                           indf0	equ	0xFEF
  9949                           postinc0	equ	0xFEE
  9950                           fsr0h	equ	0xFEA
  9951                           fsr0l	equ	0xFE9
  9952                           wreg	equ	0xFE8
  9953                           indf1	equ	0xFE7
  9954                           postinc1	equ	0xFE6
  9955                           postdec1	equ	0xFE5
  9956                           fsr1h	equ	0xFE2
  9957                           fsr1l	equ	0xFE1
  9958                           indf2	equ	0xFDF
  9959                           postinc2	equ	0xFDE
  9960                           postdec2	equ	0xFDD
  9961                           plusw2	equ	0xFDB
  9962                           fsr2h	equ	0xFDA
  9963                           fsr2l	equ	0xFD9
  9964                           status	equ	0xFD8
  9965                           
  9966 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9967 ;; Defined at:
  9968 ;;		line 2014 in file "main.c"
  9969 ;; Parameters:    Size  Location     Type
  9970 ;;  errorcode       1    wreg     unsigned char 
  9971 ;; Auto vars:     Size  Location     Type
  9972 ;;  errorcode       1   10[BANK0 ] unsigned char 
  9973 ;;  crc             1   11[BANK0 ] unsigned char 
  9974 ;; Return value:  Size  Location     Type
  9975 ;;		None               void
  9976 ;; Registers used:
  9977 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9978 ;; Tracked objects:
  9979 ;;		On entry : F/1
  9980 ;;		On exit  : 0/0
  9981 ;;		Unchanged: 0/0
  9982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9983 ;;      Params:         0       0       0       0       0       0       0
  9984 ;;      Locals:         0       2       0       0       0       0       0
  9985 ;;      Temps:          0       0       0       0       0       0       0
  9986 ;;      Totals:         0       2       0       0       0       0       0
  9987 ;;Total ram usage:        2 bytes
  9988 ;; Hardware stack levels used:    1
  9989 ;; Hardware stack levels required when called:    6
  9990 ;; This function calls:
  9991 ;;		_WriteUSART
  9992 ;;		_sendEscapedUartData
  9993 ;;		_crc8
  9994 ;; This function is called by:
  9995 ;;		_doModeVscp
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text8
 10000  0054B6                     __ptext8:
 10001                           	opt stack 0
 10002  0054B6                     _sendVSCPDriverErrorFrame:
 10003                           	opt stack 23
 10004                           
 10005                           ;incstack = 0
 10006                           ;incstack = 0
 10007                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10008  0054B6  CFE8 F06A          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10009                           
 10010                           ; BSR set to: 1
 10011                           ;main.c: 2015: uint8_t crc = 0;
 10012  0054BA  0100               	movlb	0	; () banked
 10013  0054BC  6B6B               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10014  0054BE                     l914:
 10015  0054BE  A2AC               	btfss	4012,1,c	;volatile
 10016  0054C0  D7FE               	goto	l914
 10017                           
 10018                           ;main.c: 2019: WriteUSART(0x10);
 10019  0054C2  0E10               	movlw	16
 10020  0054C4  EC61  F034         	call	_WriteUSART
 10021  0054C8                     l917:
 10022  0054C8  A2AC               	btfss	4012,1,c	;volatile
 10023  0054CA  D7FE               	goto	l917
 10024                           
 10025                           ;main.c: 2021: WriteUSART(0x02);
 10026  0054CC  0E02               	movlw	2
 10027  0054CE  EC61  F034         	call	_WriteUSART
 10028  0054D2                     l920:
 10029  0054D2  A2AC               	btfss	4012,1,c	;volatile
 10030  0054D4  D7FE               	goto	l920
 10031                           
 10032                           ;main.c: 2025: WriteUSART(253);
 10033  0054D6  0EFD               	movlw	253
 10034  0054D8  EC61  F034         	call	_WriteUSART
 10035                           
 10036                           ;main.c: 2026: crc8(&crc, 253);
 10037  0054DC  0100               	movlb	0	; () banked
 10038  0054DE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10039  0054E0  6E20               	movwf	?_crc8+1,c
 10040  0054E2  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
 10041  0054E4  6E1F               	movwf	?_crc8,c
 10042  0054E6  0EFD               	movlw	253
 10043  0054E8  6E21               	movwf	?_crc8+2,c
 10044  0054EA  EC48  F033         	call	_crc8	;wreg free
 10045  0054EE                     l923:
 10046  0054EE  A2AC               	btfss	4012,1,c	;volatile
 10047  0054F0  D7FE               	goto	l923
 10048                           
 10049                           ;main.c: 2030: WriteUSART(0);
 10050  0054F2  0E00               	movlw	0
 10051  0054F4  EC61  F034         	call	_WriteUSART
 10052                           
 10053                           ;main.c: 2031: crc8(&crc, 0);
 10054  0054F8  D839               	call	PL110	;call to abstracted procedure
 10055  0054FA  EC48  F033         	call	_crc8	;wreg free
 10056                           
 10057                           ; BSR set to: 3
 10058                           ;main.c: 2034: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10059  0054FE  0100               	movlb	0	; () banked
 10060  005500  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10061  005502  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10062  005504  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
 10063  005506  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10064  005508  0101               	movlb	1	; () banked
 10065  00550A  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10066  00550C  ECA1  F030         	call	_sendEscapedUartData
 10067  005510                     l926:
 10068  005510  A2AC               	btfss	4012,1,c	;volatile
 10069  005512  D7FE               	goto	l926
 10070                           
 10071                           ;main.c: 2038: WriteUSART(0);
 10072  005514  0E00               	movlw	0
 10073  005516  EC61  F034         	call	_WriteUSART
 10074                           
 10075                           ;main.c: 2039: crc8(&crc, 0);
 10076  00551A  D828               	call	PL110	;call to abstracted procedure
 10077  00551C  EC48  F033         	call	_crc8	;wreg free
 10078  005520                     l929:
 10079  005520  A2AC               	btfss	4012,1,c	;volatile
 10080  005522  D7FE               	goto	l929
 10081                           
 10082                           ;main.c: 2041: WriteUSART(1);
 10083  005524  0E01               	movlw	1
 10084  005526  EC61  F034         	call	_WriteUSART
 10085                           
 10086                           ;main.c: 2042: crc8(&crc, 1);
 10087  00552A  0100               	movlb	0	; () banked
 10088  00552C  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10089  00552E  6E20               	movwf	?_crc8+1,c
 10090  005530  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
 10091  005532  6E1F               	movwf	?_crc8,c
 10092  005534  0E01               	movlw	1
 10093  005536  6E21               	movwf	?_crc8+2,c
 10094  005538  EC48  F033         	call	_crc8	;wreg free
 10095                           
 10096                           ; BSR set to: 3
 10097                           ;main.c: 2045: sendEscapedUartData(errorcode, &crc);
 10098  00553C  0100               	movlb	0	; () banked
 10099  00553E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10100  005540  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10101  005542  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
 10102  005544  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10103  005546  516A               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10104  005548  ECA1  F030         	call	_sendEscapedUartData
 10105                           
 10106                           ;main.c: 2048: sendEscapedUartData(crc, (0));
 10107  00554C  0100               	movlb	0	; () banked
 10108  00554E  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10109  005550  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10110  005552  516B               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10111  005554  ECA1  F030         	call	_sendEscapedUartData
 10112  005558                     l932:
 10113  005558  A2AC               	btfss	4012,1,c	;volatile
 10114  00555A  D7FE               	goto	l932
 10115                           
 10116                           ;main.c: 2052: WriteUSART(0x10);
 10117  00555C  0E10               	movlw	16
 10118  00555E  EC61  F034         	call	_WriteUSART
 10119  005562                     l935:
 10120  005562  A2AC               	btfss	4012,1,c	;volatile
 10121  005564  D7FE               	goto	l935
 10122                           
 10123                           ;main.c: 2054: WriteUSART(0x03);
 10124  005566  0E03               	movlw	3
 10125  005568  EF61  F034         	goto	_WriteUSART
 10126  00556C                     __end_of_sendVSCPDriverErrorFrame:
 10127                           	opt stack 0
 10128  00556C                     PL110:
 10129                           	opt stack 23
 10130  00556C  0100               	movlb	0	; () banked
 10131  00556E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10132  005570  6E20               	movwf	?_crc8+1,c
 10133  005572  0E6B               	movlw	low sendVSCPDriverErrorFrame@crc
 10134  005574  6E1F               	movwf	?_crc8,c
 10135  005576  6A21               	clrf	?_crc8+2,c
 10136  005578  0C00               	retlw	0
 10137  00557A                     __end_ofPL110:
 10138                           	opt stack 0
 10139                           tblptru	equ	0xFF8
 10140                           tblptrh	equ	0xFF7
 10141                           tblptrl	equ	0xFF6
 10142                           tablat	equ	0xFF5
 10143                           prodh	equ	0xFF4
 10144                           prodl	equ	0xFF3
 10145                           intcon	equ	0xFF2
 10146                           indf0	equ	0xFEF
 10147                           postinc0	equ	0xFEE
 10148                           fsr0h	equ	0xFEA
 10149                           fsr0l	equ	0xFE9
 10150                           wreg	equ	0xFE8
 10151                           indf1	equ	0xFE7
 10152                           postinc1	equ	0xFE6
 10153                           postdec1	equ	0xFE5
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           plusw2	equ	0xFDB
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function _sendVSCPDriverCommandReply *****************
 10165 ;; Defined at:
 10166 ;;		line 2151 in file "main.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  cmdReplyCode    1    wreg     unsigned char 
 10169 ;;  cmdCode         1   10[BANK0 ] unsigned char 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  cmdReplyCode    1   11[BANK0 ] unsigned char 
 10172 ;;  crc             1   12[BANK0 ] unsigned char 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : F/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10182 ;;      Params:         0       1       0       0       0       0       0
 10183 ;;      Locals:         0       2       0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0
 10185 ;;      Totals:         0       3       0       0       0       0       0
 10186 ;;Total ram usage:        3 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    6
 10189 ;; This function calls:
 10190 ;;		_WriteUSART
 10191 ;;		_sendEscapedUartData
 10192 ;;		_crc8
 10193 ;; This function is called by:
 10194 ;;		_doModeVscp
 10195 ;; This function uses a non-reentrant model
 10196 ;;
 10197                           
 10198                           	psect	text9
 10199  0050B0                     __ptext9:
 10200                           	opt stack 0
 10201  0050B0                     _sendVSCPDriverCommandReply:
 10202                           	opt stack 23
 10203                           
 10204                           ;incstack = 0
 10205                           ;incstack = 0
 10206                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
 10207  0050B0  CFE8 F06B          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
 10208                           
 10209                           ; BSR set to: 0
 10210                           ;main.c: 2152: uint8_t crc = 0;
 10211  0050B4  6B6C               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
 10212  0050B6                     l995:
 10213                           
 10214                           ; BSR set to: 0
 10215  0050B6  A2AC               	btfss	4012,1,c	;volatile
 10216  0050B8  D7FE               	goto	l995
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;main.c: 2156: WriteUSART(0x10);
 10220  0050BA  0E10               	movlw	16
 10221  0050BC  EC61  F034         	call	_WriteUSART
 10222  0050C0                     l998:
 10223  0050C0  A2AC               	btfss	4012,1,c	;volatile
 10224  0050C2  D7FE               	goto	l998
 10225                           
 10226                           ;main.c: 2158: WriteUSART(0x02);
 10227  0050C4  0E02               	movlw	2
 10228  0050C6  EC61  F034         	call	_WriteUSART
 10229  0050CA                     l1001:
 10230  0050CA  A2AC               	btfss	4012,1,c	;volatile
 10231  0050CC  D7FE               	goto	l1001
 10232                           
 10233                           ;main.c: 2162: WriteUSART(254);
 10234  0050CE  0EFE               	movlw	254
 10235  0050D0  EC61  F034         	call	_WriteUSART
 10236                           
 10237                           ;main.c: 2163: crc8(&crc, 254);
 10238  0050D4  0100               	movlb	0	; () banked
 10239  0050D6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10240  0050D8  6E20               	movwf	?_crc8+1,c
 10241  0050DA  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10242  0050DC  6E1F               	movwf	?_crc8,c
 10243  0050DE  0EFE               	movlw	254
 10244  0050E0  6E21               	movwf	?_crc8+2,c
 10245  0050E2  EC48  F033         	call	_crc8	;wreg free
 10246  0050E6                     l1004:
 10247  0050E6  A2AC               	btfss	4012,1,c	;volatile
 10248  0050E8  D7FE               	goto	l1004
 10249                           
 10250                           ;main.c: 2167: WriteUSART(0);
 10251  0050EA  0E00               	movlw	0
 10252  0050EC  EC61  F034         	call	_WriteUSART
 10253                           
 10254                           ;main.c: 2168: crc8(&crc, 0);
 10255  0050F0  D845               	call	PL114	;call to abstracted procedure
 10256  0050F2  EC48  F033         	call	_crc8	;wreg free
 10257                           
 10258                           ; BSR set to: 3
 10259                           ;main.c: 2171: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10260  0050F6  0100               	movlb	0	; () banked
 10261  0050F8  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10262  0050FA  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10263  0050FC  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10264  0050FE  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10265  005100  0101               	movlb	1	; () banked
 10266  005102  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 10267  005104  ECA1  F030         	call	_sendEscapedUartData
 10268  005108                     l1007:
 10269  005108  A2AC               	btfss	4012,1,c	;volatile
 10270  00510A  D7FE               	goto	l1007
 10271                           
 10272                           ;main.c: 2175: WriteUSART(0);
 10273  00510C  0E00               	movlw	0
 10274  00510E  EC61  F034         	call	_WriteUSART
 10275                           
 10276                           ;main.c: 2176: crc8(&crc, 0);
 10277  005112  D834               	call	PL114	;call to abstracted procedure
 10278  005114  EC48  F033         	call	_crc8	;wreg free
 10279  005118                     l1010:
 10280  005118  A2AC               	btfss	4012,1,c	;volatile
 10281  00511A  D7FE               	goto	l1010
 10282                           
 10283                           ;main.c: 2178: WriteUSART(2);
 10284  00511C  0E02               	movlw	2
 10285  00511E  EC61  F034         	call	_WriteUSART
 10286                           
 10287                           ;main.c: 2179: crc8(&crc, 2);
 10288  005122  0100               	movlb	0	; () banked
 10289  005124  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10290  005126  6E20               	movwf	?_crc8+1,c
 10291  005128  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10292  00512A  6E1F               	movwf	?_crc8,c
 10293  00512C  0E02               	movlw	2
 10294  00512E  6E21               	movwf	?_crc8+2,c
 10295  005130  EC48  F033         	call	_crc8	;wreg free
 10296  005134                     l1013:
 10297  005134  A2AC               	btfss	4012,1,c	;volatile
 10298  005136  D7FE               	goto	l1013
 10299                           
 10300                           ;main.c: 2183: sendEscapedUartData(cmdReplyCode, &crc);
 10301  005138  0100               	movlb	0	; () banked
 10302  00513A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10303  00513C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10304  00513E  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10305  005140  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10306  005142  516B               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
 10307  005144  ECA1  F030         	call	_sendEscapedUartData
 10308  005148                     l1016:
 10309  005148  A2AC               	btfss	4012,1,c	;volatile
 10310  00514A  D7FE               	goto	l1016
 10311                           
 10312                           ;main.c: 2187: sendEscapedUartData(cmdCode, &crc);
 10313  00514C  0100               	movlb	0	; () banked
 10314  00514E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10315  005150  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10316  005152  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10317  005154  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10318  005156  516A               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
 10319  005158  ECA1  F030         	call	_sendEscapedUartData
 10320                           
 10321                           ;main.c: 2190: sendEscapedUartData(crc, (0));
 10322  00515C  0100               	movlb	0	; () banked
 10323  00515E  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10324  005160  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10325  005162  516C               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
 10326  005164  ECA1  F030         	call	_sendEscapedUartData
 10327  005168                     l1019:
 10328  005168  A2AC               	btfss	4012,1,c	;volatile
 10329  00516A  D7FE               	goto	l1019
 10330                           
 10331                           ;main.c: 2194: WriteUSART(0x10);
 10332  00516C  0E10               	movlw	16
 10333  00516E  EC61  F034         	call	_WriteUSART
 10334  005172                     l1022:
 10335  005172  A2AC               	btfss	4012,1,c	;volatile
 10336  005174  D7FE               	goto	l1022
 10337                           
 10338                           ;main.c: 2196: WriteUSART(0x03);
 10339  005176  0E03               	movlw	3
 10340  005178  EF61  F034         	goto	_WriteUSART
 10341  00517C                     __end_of_sendVSCPDriverCommandReply:
 10342                           	opt stack 0
 10343  00517C                     PL114:
 10344                           	opt stack 23
 10345  00517C  0100               	movlb	0	; () banked
 10346  00517E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10347  005180  6E20               	movwf	?_crc8+1,c
 10348  005182  0E6C               	movlw	low sendVSCPDriverCommandReply@crc
 10349  005184  6E1F               	movwf	?_crc8,c
 10350  005186  6A21               	clrf	?_crc8+2,c
 10351  005188  0C00               	retlw	0
 10352  00518A                     __end_ofPL114:
 10353                           	opt stack 0
 10354                           tblptru	equ	0xFF8
 10355                           tblptrh	equ	0xFF7
 10356                           tblptrl	equ	0xFF6
 10357                           tablat	equ	0xFF5
 10358                           prodh	equ	0xFF4
 10359                           prodl	equ	0xFF3
 10360                           intcon	equ	0xFF2
 10361                           indf0	equ	0xFEF
 10362                           postinc0	equ	0xFEE
 10363                           fsr0h	equ	0xFEA
 10364                           fsr0l	equ	0xFE9
 10365                           wreg	equ	0xFE8
 10366                           indf1	equ	0xFE7
 10367                           postinc1	equ	0xFE6
 10368                           postdec1	equ	0xFE5
 10369                           fsr1h	equ	0xFE2
 10370                           fsr1l	equ	0xFE1
 10371                           indf2	equ	0xFDF
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           plusw2	equ	0xFDB
 10375                           fsr2h	equ	0xFDA
 10376                           fsr2l	equ	0xFD9
 10377                           status	equ	0xFD8
 10378                           
 10379 ;; *************** function _sendVSCPModeCapabilities *****************
 10380 ;; Defined at:
 10381 ;;		line 2558 in file "main.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;		None
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  crc             1   10[BANK0 ] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      enum E15660
 10388 ;; Registers used:
 10389 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10390 ;; Tracked objects:
 10391 ;;		On entry : F/1
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10395 ;;      Params:         0       0       0       0       0       0       0
 10396 ;;      Locals:         0       1       0       0       0       0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0
 10398 ;;      Totals:         0       1       0       0       0       0       0
 10399 ;;Total ram usage:        1 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    6
 10402 ;; This function calls:
 10403 ;;		_WriteUSART
 10404 ;;		_sendEscapedUartData
 10405 ;;		_crc8
 10406 ;; This function is called by:
 10407 ;;		_doModeVscp
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text10
 10412  00557A                     __ptext10:
 10413                           	opt stack 0
 10414  00557A                     _sendVSCPModeCapabilities:
 10415                           	opt stack 23
 10416                           
 10417                           ; BSR set to: 1
 10418                           ;main.c: 2559: uint8_t crc = 0;
 10419                           
 10420                           ;incstack = 0
 10421                           ;incstack = 0
 10422  00557A  0100               	movlb	0	; () banked
 10423  00557C  6B6A               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
 10424  00557E                     l1155:
 10425  00557E  A2AC               	btfss	4012,1,c	;volatile
 10426  005580  D7FE               	goto	l1155
 10427                           
 10428                           ;main.c: 2563: WriteUSART(0x10);
 10429  005582  0E10               	movlw	16
 10430  005584  EC61  F034         	call	_WriteUSART
 10431  005588                     l1158:
 10432  005588  A2AC               	btfss	4012,1,c	;volatile
 10433  00558A  D7FE               	goto	l1158
 10434                           
 10435                           ;main.c: 2565: WriteUSART(0x02);
 10436  00558C  0E02               	movlw	2
 10437  00558E  EC61  F034         	call	_WriteUSART
 10438  005592                     l1161:
 10439  005592  A2AC               	btfss	4012,1,c	;volatile
 10440  005594  D7FE               	goto	l1161
 10441                           
 10442                           ;main.c: 2569: WriteUSART(9);
 10443  005596  0E09               	movlw	9
 10444  005598  EC61  F034         	call	_WriteUSART
 10445                           
 10446                           ;main.c: 2570: crc8(&crc, 9);
 10447  00559C  0100               	movlb	0	; () banked
 10448  00559E  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10449  0055A0  6E20               	movwf	?_crc8+1,c
 10450  0055A2  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10451  0055A4  6E1F               	movwf	?_crc8,c
 10452  0055A6  0E09               	movlw	9
 10453  0055A8  6E21               	movwf	?_crc8+2,c
 10454  0055AA  EC48  F033         	call	_crc8	;wreg free
 10455  0055AE                     l1164:
 10456  0055AE  A2AC               	btfss	4012,1,c	;volatile
 10457  0055B0  D7FE               	goto	l1164
 10458                           
 10459                           ;main.c: 2574: WriteUSART(0);
 10460  0055B2  0E00               	movlw	0
 10461  0055B4  EC61  F034         	call	_WriteUSART
 10462                           
 10463                           ;main.c: 2575: crc8(&crc, 0);
 10464  0055B8  0100               	movlb	0	; () banked
 10465  0055BA  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10466  0055BC  6E20               	movwf	?_crc8+1,c
 10467  0055BE  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10468  0055C0  6E1F               	movwf	?_crc8,c
 10469  0055C2  0E00               	movlw	0
 10470  0055C4  6A21               	clrf	?_crc8+2,c
 10471  0055C6  EC48  F033         	call	_crc8	;wreg free
 10472                           
 10473                           ; BSR set to: 3
 10474                           ;main.c: 2578: sendEscapedUartData(sequencyno, &crc );
 10475  0055CA  0100               	movlb	0	; () banked
 10476  0055CC  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10477  0055CE  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10478  0055D0  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10479  0055D2  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10480  0055D4  5034               	movf	_sequencyno,w,c
 10481  0055D6  ECA1  F030         	call	_sendEscapedUartData
 10482                           
 10483                           ;main.c: 2579: sequencyno++;
 10484  0055DA  2A34               	incf	_sequencyno,f,c
 10485                           
 10486                           ;main.c: 2582: sendEscapedUartData( 0, &crc );
 10487  0055DC  D825               	call	PL128	;call to abstracted procedure
 10488  0055DE  ECA1  F030         	call	_sendEscapedUartData
 10489                           
 10490                           ;main.c: 2583: sendEscapedUartData( 2, &crc );
 10491  0055E2  0100               	movlb	0	; () banked
 10492  0055E4  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10493  0055E6  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10494  0055E8  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10495  0055EA  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10496  0055EC  0E02               	movlw	2
 10497  0055EE  ECA1  F030         	call	_sendEscapedUartData
 10498                           
 10499                           ;main.c: 2586: sendEscapedUartData( 1, &crc );
 10500  0055F2  0100               	movlb	0	; () banked
 10501  0055F4  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10502  0055F6  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10503  0055F8  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10504  0055FA  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10505  0055FC  0E01               	movlw	1
 10506  0055FE  ECA1  F030         	call	_sendEscapedUartData
 10507                           
 10508                           ;main.c: 2587: sendEscapedUartData( 0, &crc );
 10509  005602  D812               	call	PL128	;call to abstracted procedure
 10510  005604  ECA1  F030         	call	_sendEscapedUartData
 10511                           
 10512                           ;main.c: 2590: sendEscapedUartData(crc, (0));
 10513  005608  0100               	movlb	0	; () banked
 10514  00560A  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10515  00560C  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 10516  00560E  516A               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
 10517  005610  ECA1  F030         	call	_sendEscapedUartData
 10518  005614                     l1167:
 10519  005614  A2AC               	btfss	4012,1,c	;volatile
 10520  005616  D7FE               	goto	l1167
 10521                           
 10522                           ;main.c: 2594: WriteUSART(0x10);
 10523  005618  0E10               	movlw	16
 10524  00561A  EC61  F034         	call	_WriteUSART
 10525  00561E                     l1170:
 10526  00561E  A2AC               	btfss	4012,1,c	;volatile
 10527  005620  D7FE               	goto	l1170
 10528                           
 10529                           ;main.c: 2596: WriteUSART(0x03);
 10530  005622  0E03               	movlw	3
 10531  005624  EF61  F034         	goto	_WriteUSART
 10532  005628                     __end_of_sendVSCPModeCapabilities:
 10533                           	opt stack 0
 10534  005628                     PL128:
 10535                           	opt stack 23
 10536  005628  0100               	movlb	0	; () banked
 10537  00562A  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10538  00562C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10539  00562E  0E6A               	movlw	low sendVSCPModeCapabilities@crc
 10540  005630  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 10541  005632  0C00               	retlw	0
 10542  005634                     __end_ofPL128:
 10543                           	opt stack 0
 10544                           tblptru	equ	0xFF8
 10545                           tblptrh	equ	0xFF7
 10546                           tblptrl	equ	0xFF6
 10547                           tablat	equ	0xFF5
 10548                           prodh	equ	0xFF4
 10549                           prodl	equ	0xFF3
 10550                           intcon	equ	0xFF2
 10551                           indf0	equ	0xFEF
 10552                           postinc0	equ	0xFEE
 10553                           fsr0h	equ	0xFEA
 10554                           fsr0l	equ	0xFE9
 10555                           wreg	equ	0xFE8
 10556                           indf1	equ	0xFE7
 10557                           postinc1	equ	0xFE6
 10558                           postdec1	equ	0xFE5
 10559                           fsr1h	equ	0xFE2
 10560                           fsr1l	equ	0xFE1
 10561                           indf2	equ	0xFDF
 10562                           postinc2	equ	0xFDE
 10563                           postdec2	equ	0xFDD
 10564                           plusw2	equ	0xFDB
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
 10570 ;; Defined at:
 10571 ;;		line 2692 in file "main.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  1    wreg      enum E15660
 10578 ;; Registers used:
 10579 ;;		wreg
 10580 ;; Tracked objects:
 10581 ;;		On entry : F/1
 10582 ;;		On exit  : F/1
 10583 ;;		Unchanged: F/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10585 ;;      Params:         0       0       0       0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0
 10587 ;;      Temps:          0       0       0       0       0       0       0
 10588 ;;      Totals:         0       0       0       0       0       0       0
 10589 ;;Total ram usage:        0 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    3
 10592 ;; This function calls:
 10593 ;;		Nothing
 10594 ;; This function is called by:
 10595 ;;		_doModeVscp
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text11
 10600  006942                     __ptext11:
 10601                           	opt stack 0
 10602  006942                     _receiveVSCPModeMultiCanalMsg:
 10603                           	opt stack 26
 10604                           
 10605                           ; BSR set to: 1
 10606                           
 10607                           ; BSR set to: 1
 10608                           ;main.c: 2694: return 0;
 10609                           
 10610                           ;incstack = 0
 10611                           ;incstack = 0
 10612  006942  0C00               	retlw	0
 10613  006944                     __end_of_receiveVSCPModeMultiCanalMsg:
 10614                           	opt stack 0
 10615                           tblptru	equ	0xFF8
 10616                           tblptrh	equ	0xFF7
 10617                           tblptrl	equ	0xFF6
 10618                           tablat	equ	0xFF5
 10619                           prodh	equ	0xFF4
 10620                           prodl	equ	0xFF3
 10621                           intcon	equ	0xFF2
 10622                           indf0	equ	0xFEF
 10623                           postinc0	equ	0xFEE
 10624                           fsr0h	equ	0xFEA
 10625                           fsr0l	equ	0xFE9
 10626                           wreg	equ	0xFE8
 10627                           indf1	equ	0xFE7
 10628                           postinc1	equ	0xFE6
 10629                           postdec1	equ	0xFE5
 10630                           fsr1h	equ	0xFE2
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           plusw2	equ	0xFDB
 10636                           fsr2h	equ	0xFDA
 10637                           fsr2l	equ	0xFD9
 10638                           status	equ	0xFD8
 10639                           
 10640 ;; *************** function _receiveVSCPModeCanalMsg *****************
 10641 ;; Defined at:
 10642 ;;		line 2668 in file "main.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;		None
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;  data            8   71[BANK0 ] unsigned char [8]
 10647 ;;  id              4   79[BANK0 ] unsigned long 
 10648 ;;  dlc             1   83[BANK0 ] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      enum E15660
 10651 ;; Registers used:
 10652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : F/1
 10655 ;;		On exit  : E/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10658 ;;      Params:         0       0       0       0       0       0       0
 10659 ;;      Locals:         0      13       0       0       0       0       0
 10660 ;;      Temps:          0      20       0       0       0       0       0
 10661 ;;      Totals:         0      33       0       0       0       0       0
 10662 ;;Total ram usage:       33 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    6
 10665 ;; This function calls:
 10666 ;;		_memcpy
 10667 ;;		_sendCANFrame
 10668 ;; This function is called by:
 10669 ;;		_doModeVscp
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text12
 10674  004EE0                     __ptext12:
 10675                           	opt stack 0
 10676  004EE0                     _receiveVSCPModeCanalMsg:
 10677                           	opt stack 23
 10678                           
 10679                           ; BSR set to: 1
 10680                           ;main.c: 2669: uint32_t id;
 10681                           ;main.c: 2670: uint8_t dlc;
 10682                           ;main.c: 2671: uint8_t data[8];
 10683                           ;main.c: 2673: id = ((uint32_t) cmdbuf[5] << 26) |
 10684                           ;main.c: 2674: ((uint32_t) cmdbuf[5 + 1] << 16) |
 10685                           ;main.c: 2675: ((uint32_t) cmdbuf[5 + 2] << 8) |
 10686                           ;main.c: 2676: cmdbuf[5 + 3];
 10687                           
 10688                           ; BSR set to: 1
 10689                           ;incstack = 0
 10690                           ;incstack = 0
 10691  004EE0  C134  F093         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
 10692  004EE4  0100               	movlb	0	; () banked
 10693  004EE6  6B94               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10694  004EE8  6B95               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
 10695  004EEA  6B96               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
 10696  004EEC  C095  F096         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
 10697  004EF0  C094  F095         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
 10698  004EF4  C093  F094         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
 10699  004EF8  6B93               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10700  004EFA  C133  F097         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10701  004EFE  6B98               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10702  004F00  6B99               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10703  004F02  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10704  004F04  C098  F09A         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10705  004F08  C097  F099         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10706  004F0C  6B98               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10707  004F0E  6B97               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10708  004F10  C132  F09B         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10709  004F14  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10710  004F16  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10711  004F18  6B9E               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10712  004F1A  0E1A               	movlw	26
 10713  004F1C                     u23285:
 10714  004F1C  90D8               	bcf	status,0,c
 10715  004F1E  379B               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10716  004F20  379C               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10717  004F22  379D               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10718  004F24  379E               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10719  004F26  2EE8               	decfsz	wreg,f,c
 10720  004F28  D7F9               	goto	u23285
 10721  004F2A  5197               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10722  004F2C  119B               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10723  004F2E  6F9F               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10724  004F30  5198               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10725  004F32  119C               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10726  004F34  6FA0               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10727  004F36  5199               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10728  004F38  119D               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10729  004F3A  6FA1               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10730  004F3C  519A               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10731  004F3E  119E               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10732  004F40  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10733  004F42  5193               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10734  004F44  119F               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10735  004F46  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10736  004F48  5194               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10737  004F4A  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10738  004F4C  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10739  004F4E  5195               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10740  004F50  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10741  004F52  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10742  004F54  5196               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10743  004F56  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10744  004F58  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10745  004F5A  0101               	movlb	1	; () banked
 10746  004F5C  5135               	movf	(_cmdbuf+8)& (0+255),w,b
 10747  004F5E  0100               	movlb	0	; () banked
 10748  004F60  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10749  004F62  6FAF               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10750  004F64  51A4               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10751  004F66  6FB0               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10752  004F68  51A5               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10753  004F6A  6FB1               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10754  004F6C  51A6               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10755  004F6E  6FB2               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10756                           
 10757                           ;main.c: 2677: dlc = ( cmdbuf[4] - 4 ) & 0x07;
 10758  004F70  0101               	movlb	1	; () banked
 10759  004F72  5131               	movf	(_cmdbuf+4)& (0+255),w,b
 10760  004F74  0FFC               	addlw	252
 10761  004F76  0B07               	andlw	7
 10762  004F78  0100               	movlb	0	; () banked
 10763  004F7A  6FB3               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;main.c: 2678: if ( dlc > 8 ) {
 10767  004F7C  0E08               	movlw	8
 10768  004F7E  65B3               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10769  004F80  D002               	goto	l17975
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;main.c: 2679: return 0;
 10773  004F82  0E00               	movlw	0
 10774  004F84  D021               	goto	l1208
 10775  004F86                     l17975:
 10776                           
 10777                           ; BSR set to: 0
 10778                           ;main.c: 2680: }
 10779                           ;main.c: 2681: memcpy( data, cmdbuf + 5 + 4, dlc );
 10780  004F86  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10781  004F88  6F61               	movwf	(?_memcpy+1)& (0+255),b
 10782  004F8A  0EA7               	movlw	low receiveVSCPModeCanalMsg@data
 10783  004F8C  6F60               	movwf	?_memcpy& (0+255),b
 10784  004F8E  0E36               	movlw	low (_cmdbuf+9)
 10785  004F90  6F93               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10786  004F92  0E01               	movlw	high (_cmdbuf+9)
 10787  004F94  6F94               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10788  004F96  C093  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10789  004F9A  C094  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10790  004F9E  C0B3  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10791  004FA2  6B65               	clrf	(?_memcpy+5)& (0+255),b
 10792  004FA4  EC6F  F032         	call	_memcpy	;wreg free
 10793                           
 10794                           ; BSR set to: 0
 10795                           ;main.c: 2683: return sendCANFrame(id, dlc, data);
 10796  004FA8  C0AF  F08C         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10797  004FAC  C0B0  F08D         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10798  004FB0  C0B1  F08E         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10799  004FB4  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10800  004FB8  C0B3  F090         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10801  004FBC  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10802  004FBE  6F92               	movwf	(?_sendCANFrame+6)& (0+255),b
 10803  004FC0  0EA7               	movlw	low receiveVSCPModeCanalMsg@data
 10804  004FC2  6F91               	movwf	(?_sendCANFrame+5)& (0+255),b
 10805  004FC4  EC2B  F033         	call	_sendCANFrame	;wreg free
 10806  004FC8                     l1208:
 10807  004FC8  0012               	return	
 10808  004FCA                     __end_of_receiveVSCPModeCanalMsg:
 10809                           	opt stack 0
 10810                           tblptru	equ	0xFF8
 10811                           tblptrh	equ	0xFF7
 10812                           tblptrl	equ	0xFF6
 10813                           tablat	equ	0xFF5
 10814                           prodh	equ	0xFF4
 10815                           prodl	equ	0xFF3
 10816                           intcon	equ	0xFF2
 10817                           indf0	equ	0xFEF
 10818                           postinc0	equ	0xFEE
 10819                           fsr0h	equ	0xFEA
 10820                           fsr0l	equ	0xFE9
 10821                           wreg	equ	0xFE8
 10822                           indf1	equ	0xFE7
 10823                           postinc1	equ	0xFE6
 10824                           postdec1	equ	0xFE5
 10825                           fsr1h	equ	0xFE2
 10826                           fsr1l	equ	0xFE1
 10827                           indf2	equ	0xFDF
 10828                           postinc2	equ	0xFDE
 10829                           postdec2	equ	0xFDD
 10830                           plusw2	equ	0xFDB
 10831                           fsr2h	equ	0xFDA
 10832                           fsr2l	equ	0xFD9
 10833                           status	equ	0xFD8
 10834                           
 10835 ;; *************** function _memcpy *****************
 10836 ;; Defined at:
 10837 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;  d1              2    0[BANK0 ] PTR void 
 10840 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10841 ;;  s1              2    2[BANK0 ] PTR const void 
 10842 ;;		 -> vscpData(8), cmdbuf(80), 
 10843 ;;  n               2    4[BANK0 ] unsigned int 
 10844 ;; Auto vars:     Size  Location     Type
 10845 ;;  s               2   32[COMRAM] PTR const unsigned char 
 10846 ;;		 -> vscpData(8), cmdbuf(80), 
 10847 ;;  d               2   30[COMRAM] PTR unsigned char 
 10848 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10849 ;; Return value:  Size  Location     Type
 10850 ;;                  2    0[BANK0 ] PTR void 
 10851 ;; Registers used:
 10852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10853 ;; Tracked objects:
 10854 ;;		On entry : F/0
 10855 ;;		On exit  : F/0
 10856 ;;		Unchanged: 0/0
 10857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10858 ;;      Params:         0       6       0       0       0       0       0
 10859 ;;      Locals:         4       0       0       0       0       0       0
 10860 ;;      Temps:          0       0       0       0       0       0       0
 10861 ;;      Totals:         4       6       0       0       0       0       0
 10862 ;;Total ram usage:       10 bytes
 10863 ;; Hardware stack levels used:    1
 10864 ;; Hardware stack levels required when called:    3
 10865 ;; This function calls:
 10866 ;;		Nothing
 10867 ;; This function is called by:
 10868 ;;		_doModeSLCAN
 10869 ;;		_receiveVSCPModeCanalMsg
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text13
 10874  0064DE                     __ptext13:
 10875                           	opt stack 0
 10876  0064DE                     _memcpy:
 10877                           	opt stack 26
 10878                           
 10879                           ; BSR set to: 0
 10880                           
 10881                           ;incstack = 0
 10882                           ;incstack = 0
 10883  0064DE  C062  F021         	movff	memcpy@s1,memcpy@s
 10884  0064E2  C063  F022         	movff	memcpy@s1+1,memcpy@s+1
 10885  0064E6  C060  F01F         	movff	memcpy@d1,memcpy@d
 10886  0064EA  C061  F020         	movff	memcpy@d1+1,memcpy@d+1
 10887  0064EE  D00E               	goto	l18151
 10888  0064F0                     l18145:
 10889                           
 10890                           ; BSR set to: 0
 10891  0064F0  C021  FFD9         	movff	memcpy@s,fsr2l
 10892  0064F4  C022  FFDA         	movff	memcpy@s+1,fsr2h
 10893  0064F8  C01F  FFE1         	movff	memcpy@d,fsr1l
 10894  0064FC  C020  FFE2         	movff	memcpy@d+1,fsr1h
 10895  006500  CFDF FFE7          	movff	indf2,indf1
 10896                           
 10897                           ; BSR set to: 0
 10898  006504  4A21               	infsnz	memcpy@s,f,c
 10899  006506  2A22               	incf	memcpy@s+1,f,c
 10900                           
 10901                           ; BSR set to: 0
 10902  006508  4A1F               	infsnz	memcpy@d,f,c
 10903  00650A  2A20               	incf	memcpy@d+1,f,c
 10904  00650C                     l18151:
 10905                           
 10906                           ; BSR set to: 0
 10907  00650C  0764               	decf	memcpy@n& (0+255),f,b
 10908  00650E  A0D8               	btfss	status,0,c
 10909  006510  0765               	decf	(memcpy@n+1)& (0+255),f,b
 10910  006512  0100               	movlb	0	; () banked
 10911  006514  2964               	incf	memcpy@n& (0+255),w,b
 10912  006516  B4D8               	btfsc	status,2,c
 10913  006518  2965               	incf	(memcpy@n+1)& (0+255),w,b
 10914  00651A  B4D8               	btfsc	status,2,c
 10915                           
 10916                           ; BSR set to: 0
 10917  00651C  0012               	return	
 10918  00651E  D7E8               	goto	l18145
 10919  006520                     __end_of_memcpy:
 10920                           	opt stack 0
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           indf0	equ	0xFEF
 10929                           postinc0	equ	0xFEE
 10930                           fsr0h	equ	0xFEA
 10931                           fsr0l	equ	0xFE9
 10932                           wreg	equ	0xFE8
 10933                           indf1	equ	0xFE7
 10934                           postinc1	equ	0xFE6
 10935                           postdec1	equ	0xFE5
 10936                           fsr1h	equ	0xFE2
 10937                           fsr1l	equ	0xFE1
 10938                           indf2	equ	0xFDF
 10939                           postinc2	equ	0xFDE
 10940                           postdec2	equ	0xFDD
 10941                           plusw2	equ	0xFDB
 10942                           fsr2h	equ	0xFDA
 10943                           fsr2l	equ	0xFD9
 10944                           status	equ	0xFD8
 10945                           
 10946 ;; *************** function _sendVSCPDriverAck *****************
 10947 ;; Defined at:
 10948 ;;		line 2062 in file "main.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;		None
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;  crc             1   10[BANK0 ] unsigned char 
 10953 ;; Return value:  Size  Location     Type
 10954 ;;		None               void
 10955 ;; Registers used:
 10956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/1
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10962 ;;      Params:         0       0       0       0       0       0       0
 10963 ;;      Locals:         0       1       0       0       0       0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0
 10965 ;;      Totals:         0       1       0       0       0       0       0
 10966 ;;Total ram usage:        1 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    6
 10969 ;; This function calls:
 10970 ;;		_WriteUSART
 10971 ;;		_sendEscapedUartData
 10972 ;;		_crc8
 10973 ;; This function is called by:
 10974 ;;		_doModeVscp
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           	psect	text14
 10979  0058E6                     __ptext14:
 10980                           	opt stack 0
 10981  0058E6                     _sendVSCPDriverAck:
 10982                           	opt stack 23
 10983                           
 10984                           ;main.c: 2063: uint8_t crc = 0;
 10985                           
 10986                           ; BSR set to: 0
 10987                           ;incstack = 0
 10988                           ;incstack = 0
 10989  0058E6  0100               	movlb	0	; () banked
 10990  0058E8  6B6A               	clrf	sendVSCPDriverAck@crc& (0+255),b
 10991  0058EA                     l941:
 10992  0058EA  A2AC               	btfss	4012,1,c	;volatile
 10993  0058EC  D7FE               	goto	l941
 10994                           
 10995                           ;main.c: 2067: WriteUSART(0x10);
 10996  0058EE  0E10               	movlw	16
 10997  0058F0  EC61  F034         	call	_WriteUSART
 10998  0058F4                     l944:
 10999  0058F4  A2AC               	btfss	4012,1,c	;volatile
 11000  0058F6  D7FE               	goto	l944
 11001                           
 11002                           ;main.c: 2069: WriteUSART(0x02);
 11003  0058F8  0E02               	movlw	2
 11004  0058FA  EC61  F034         	call	_WriteUSART
 11005  0058FE                     l947:
 11006  0058FE  A2AC               	btfss	4012,1,c	;volatile
 11007  005900  D7FE               	goto	l947
 11008                           
 11009                           ;main.c: 2073: WriteUSART(251);
 11010  005902  0EFB               	movlw	251
 11011  005904  EC61  F034         	call	_WriteUSART
 11012                           
 11013                           ;main.c: 2074: crc8(&crc, 251);
 11014  005908  0100               	movlb	0	; () banked
 11015  00590A  0E00               	movlw	high sendVSCPDriverAck@crc
 11016  00590C  6E20               	movwf	?_crc8+1,c
 11017  00590E  0E6A               	movlw	low sendVSCPDriverAck@crc
 11018  005910  6E1F               	movwf	?_crc8,c
 11019  005912  0EFB               	movlw	251
 11020  005914  6E21               	movwf	?_crc8+2,c
 11021  005916  EC48  F033         	call	_crc8	;wreg free
 11022  00591A                     l950:
 11023  00591A  A2AC               	btfss	4012,1,c	;volatile
 11024  00591C  D7FE               	goto	l950
 11025                           
 11026                           ;main.c: 2078: WriteUSART(0);
 11027  00591E  0E00               	movlw	0
 11028  005920  EC61  F034         	call	_WriteUSART
 11029                           
 11030                           ;main.c: 2079: crc8(&crc, 0);
 11031  005924  D82B               	call	PL58	;call to abstracted procedure
 11032  005926  EC48  F033         	call	_crc8	;wreg free
 11033                           
 11034                           ; BSR set to: 3
 11035                           ;main.c: 2082: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 11036  00592A  0100               	movlb	0	; () banked
 11037  00592C  0E00               	movlw	high sendVSCPDriverAck@crc
 11038  00592E  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11039  005930  0E6A               	movlw	low sendVSCPDriverAck@crc
 11040  005932  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11041  005934  0101               	movlb	1	; () banked
 11042  005936  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 11043  005938  ECA1  F030         	call	_sendEscapedUartData
 11044  00593C                     l953:
 11045  00593C  A2AC               	btfss	4012,1,c	;volatile
 11046  00593E  D7FE               	goto	l953
 11047                           
 11048                           ;main.c: 2086: WriteUSART(0);
 11049  005940  0E00               	movlw	0
 11050  005942  EC61  F034         	call	_WriteUSART
 11051                           
 11052                           ;main.c: 2087: crc8(&crc, 0);
 11053  005946  D81A               	call	PL58	;call to abstracted procedure
 11054  005948  EC48  F033         	call	_crc8	;wreg free
 11055  00594C                     l956:
 11056  00594C  A2AC               	btfss	4012,1,c	;volatile
 11057  00594E  D7FE               	goto	l956
 11058                           
 11059                           ;main.c: 2089: WriteUSART(0);
 11060  005950  0E00               	movlw	0
 11061  005952  EC61  F034         	call	_WriteUSART
 11062                           
 11063                           ;main.c: 2090: crc8(&crc, 0);
 11064  005956  D812               	call	PL58	;call to abstracted procedure
 11065  005958  EC48  F033         	call	_crc8	;wreg free
 11066                           
 11067                           ; BSR set to: 3
 11068                           ;main.c: 2093: sendEscapedUartData(crc, (0));
 11069  00595C  0100               	movlb	0	; () banked
 11070  00595E  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11071  005960  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11072  005962  516A               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 11073  005964  ECA1  F030         	call	_sendEscapedUartData
 11074  005968                     l959:
 11075  005968  A2AC               	btfss	4012,1,c	;volatile
 11076  00596A  D7FE               	goto	l959
 11077                           
 11078                           ;main.c: 2097: WriteUSART(0x10);
 11079  00596C  0E10               	movlw	16
 11080  00596E  EC61  F034         	call	_WriteUSART
 11081  005972                     l962:
 11082  005972  A2AC               	btfss	4012,1,c	;volatile
 11083  005974  D7FE               	goto	l962
 11084                           
 11085                           ;main.c: 2099: WriteUSART(0x03);
 11086  005976  0E03               	movlw	3
 11087  005978  EF61  F034         	goto	_WriteUSART
 11088  00597C                     __end_of_sendVSCPDriverAck:
 11089                           	opt stack 0
 11090  00597C                     PL58:
 11091                           	opt stack 23
 11092  00597C  0100               	movlb	0	; () banked
 11093  00597E  0E00               	movlw	high sendVSCPDriverAck@crc
 11094  005980  6E20               	movwf	?_crc8+1,c
 11095  005982  0E6A               	movlw	low sendVSCPDriverAck@crc
 11096  005984  6E1F               	movwf	?_crc8,c
 11097  005986  6A21               	clrf	?_crc8+2,c
 11098  005988  0C00               	retlw	0
 11099  00598A                     __end_ofPL58:
 11100                           	opt stack 0
 11101                           tblptru	equ	0xFF8
 11102                           tblptrh	equ	0xFF7
 11103                           tblptrl	equ	0xFF6
 11104                           tablat	equ	0xFF5
 11105                           prodh	equ	0xFF4
 11106                           prodl	equ	0xFF3
 11107                           intcon	equ	0xFF2
 11108                           indf0	equ	0xFEF
 11109                           postinc0	equ	0xFEE
 11110                           fsr0h	equ	0xFEA
 11111                           fsr0l	equ	0xFE9
 11112                           wreg	equ	0xFE8
 11113                           indf1	equ	0xFE7
 11114                           postinc1	equ	0xFE6
 11115                           postdec1	equ	0xFE5
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           plusw2	equ	0xFDB
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _sendVSCPDriverNack *****************
 11127 ;; Defined at:
 11128 ;;		line 2106 in file "main.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  crc             1   10[BANK0 ] unsigned char 
 11133 ;; Return value:  Size  Location     Type
 11134 ;;		None               void
 11135 ;; Registers used:
 11136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : E/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11142 ;;      Params:         0       0       0       0       0       0       0
 11143 ;;      Locals:         0       1       0       0       0       0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0
 11145 ;;      Totals:         0       1       0       0       0       0       0
 11146 ;;Total ram usage:        1 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    6
 11149 ;; This function calls:
 11150 ;;		_WriteUSART
 11151 ;;		_sendEscapedUartData
 11152 ;;		_crc8
 11153 ;; This function is called by:
 11154 ;;		_doModeVscp
 11155 ;; This function uses a non-reentrant model
 11156 ;;
 11157                           
 11158                           	psect	text15
 11159  00598A                     __ptext15:
 11160                           	opt stack 0
 11161  00598A                     _sendVSCPDriverNack:
 11162                           	opt stack 23
 11163                           
 11164                           ;main.c: 2107: uint8_t crc = 0;
 11165                           
 11166                           ;incstack = 0
 11167                           ;incstack = 0
 11168  00598A  0100               	movlb	0	; () banked
 11169  00598C  6B6A               	clrf	sendVSCPDriverNack@crc& (0+255),b
 11170  00598E                     l968:
 11171  00598E  A2AC               	btfss	4012,1,c	;volatile
 11172  005990  D7FE               	goto	l968
 11173                           
 11174                           ;main.c: 2111: WriteUSART(0x10);
 11175  005992  0E10               	movlw	16
 11176  005994  EC61  F034         	call	_WriteUSART
 11177  005998                     l971:
 11178  005998  A2AC               	btfss	4012,1,c	;volatile
 11179  00599A  D7FE               	goto	l971
 11180                           
 11181                           ;main.c: 2113: WriteUSART(0x02);
 11182  00599C  0E02               	movlw	2
 11183  00599E  EC61  F034         	call	_WriteUSART
 11184  0059A2                     l974:
 11185  0059A2  A2AC               	btfss	4012,1,c	;volatile
 11186  0059A4  D7FE               	goto	l974
 11187                           
 11188                           ;main.c: 2117: WriteUSART(252);
 11189  0059A6  0EFC               	movlw	252
 11190  0059A8  EC61  F034         	call	_WriteUSART
 11191                           
 11192                           ;main.c: 2118: crc8(&crc, 252);
 11193  0059AC  0100               	movlb	0	; () banked
 11194  0059AE  0E00               	movlw	high sendVSCPDriverNack@crc
 11195  0059B0  6E20               	movwf	?_crc8+1,c
 11196  0059B2  0E6A               	movlw	low sendVSCPDriverNack@crc
 11197  0059B4  6E1F               	movwf	?_crc8,c
 11198  0059B6  0EFC               	movlw	252
 11199  0059B8  6E21               	movwf	?_crc8+2,c
 11200  0059BA  EC48  F033         	call	_crc8	;wreg free
 11201  0059BE                     l977:
 11202  0059BE  A2AC               	btfss	4012,1,c	;volatile
 11203  0059C0  D7FE               	goto	l977
 11204                           
 11205                           ;main.c: 2122: WriteUSART(0);
 11206  0059C2  0E00               	movlw	0
 11207  0059C4  EC61  F034         	call	_WriteUSART
 11208                           
 11209                           ;main.c: 2123: crc8(&crc, 0);
 11210  0059C8  D82B               	call	PL60	;call to abstracted procedure
 11211  0059CA  EC48  F033         	call	_crc8	;wreg free
 11212                           
 11213                           ; BSR set to: 3
 11214                           ;main.c: 2126: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 11215  0059CE  0100               	movlb	0	; () banked
 11216  0059D0  0E00               	movlw	high sendVSCPDriverNack@crc
 11217  0059D2  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11218  0059D4  0E6A               	movlw	low sendVSCPDriverNack@crc
 11219  0059D6  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11220  0059D8  0101               	movlb	1	; () banked
 11221  0059DA  512F               	movf	(_cmdbuf+2)& (0+255),w,b
 11222  0059DC  ECA1  F030         	call	_sendEscapedUartData
 11223  0059E0                     l980:
 11224  0059E0  A2AC               	btfss	4012,1,c	;volatile
 11225  0059E2  D7FE               	goto	l980
 11226                           
 11227                           ;main.c: 2130: WriteUSART(0);
 11228  0059E4  0E00               	movlw	0
 11229  0059E6  EC61  F034         	call	_WriteUSART
 11230                           
 11231                           ;main.c: 2131: crc8(&crc, 0);
 11232  0059EA  D81A               	call	PL60	;call to abstracted procedure
 11233  0059EC  EC48  F033         	call	_crc8	;wreg free
 11234  0059F0                     l983:
 11235  0059F0  A2AC               	btfss	4012,1,c	;volatile
 11236  0059F2  D7FE               	goto	l983
 11237                           
 11238                           ;main.c: 2133: WriteUSART(0);
 11239  0059F4  0E00               	movlw	0
 11240  0059F6  EC61  F034         	call	_WriteUSART
 11241                           
 11242                           ;main.c: 2134: crc8(&crc, 0);
 11243  0059FA  D812               	call	PL60	;call to abstracted procedure
 11244  0059FC  EC48  F033         	call	_crc8	;wreg free
 11245                           
 11246                           ; BSR set to: 3
 11247                           ;main.c: 2137: sendEscapedUartData(crc, (0));
 11248  005A00  0100               	movlb	0	; () banked
 11249  005A02  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11250  005A04  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11251  005A06  516A               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 11252  005A08  ECA1  F030         	call	_sendEscapedUartData
 11253  005A0C                     l986:
 11254  005A0C  A2AC               	btfss	4012,1,c	;volatile
 11255  005A0E  D7FE               	goto	l986
 11256                           
 11257                           ;main.c: 2141: WriteUSART(0x10);
 11258  005A10  0E10               	movlw	16
 11259  005A12  EC61  F034         	call	_WriteUSART
 11260  005A16                     l989:
 11261  005A16  A2AC               	btfss	4012,1,c	;volatile
 11262  005A18  D7FE               	goto	l989
 11263                           
 11264                           ;main.c: 2143: WriteUSART(0x03);
 11265  005A1A  0E03               	movlw	3
 11266  005A1C  EF61  F034         	goto	_WriteUSART
 11267  005A20                     __end_of_sendVSCPDriverNack:
 11268                           	opt stack 0
 11269  005A20                     PL60:
 11270                           	opt stack 23
 11271  005A20  0100               	movlb	0	; () banked
 11272  005A22  0E00               	movlw	high sendVSCPDriverNack@crc
 11273  005A24  6E20               	movwf	?_crc8+1,c
 11274  005A26  0E6A               	movlw	low sendVSCPDriverNack@crc
 11275  005A28  6E1F               	movwf	?_crc8,c
 11276  005A2A  6A21               	clrf	?_crc8+2,c
 11277  005A2C  0C00               	retlw	0
 11278  005A2E                     __end_ofPL60:
 11279                           	opt stack 0
 11280                           tblptru	equ	0xFF8
 11281                           tblptrh	equ	0xFF7
 11282                           tblptrl	equ	0xFF6
 11283                           tablat	equ	0xFF5
 11284                           prodh	equ	0xFF4
 11285                           prodl	equ	0xFF3
 11286                           intcon	equ	0xFF2
 11287                           indf0	equ	0xFEF
 11288                           postinc0	equ	0xFEE
 11289                           fsr0h	equ	0xFEA
 11290                           fsr0l	equ	0xFE9
 11291                           wreg	equ	0xFE8
 11292                           indf1	equ	0xFE7
 11293                           postinc1	equ	0xFE6
 11294                           postdec1	equ	0xFE5
 11295                           fsr1h	equ	0xFE2
 11296                           fsr1l	equ	0xFE1
 11297                           indf2	equ	0xFDF
 11298                           postinc2	equ	0xFDE
 11299                           postdec2	equ	0xFDD
 11300                           plusw2	equ	0xFDB
 11301                           fsr2h	equ	0xFDA
 11302                           fsr2l	equ	0xFD9
 11303                           status	equ	0xFD8
 11304                           
 11305 ;; *************** function _calcCRC *****************
 11306 ;; Defined at:
 11307 ;;		line 2908 in file "main.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;  p               2    7[BANK0 ] PTR unsigned char 
 11310 ;;		 -> cmdbuf(80), 
 11311 ;;  len             1    9[BANK0 ] unsigned char 
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;  crc             1   11[BANK0 ] unsigned char 
 11314 ;;  j               1   10[BANK0 ] unsigned char 
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      unsigned char 
 11317 ;; Registers used:
 11318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11319 ;; Tracked objects:
 11320 ;;		On entry : F/0
 11321 ;;		On exit  : F/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11324 ;;      Params:         0       3       0       0       0       0       0
 11325 ;;      Locals:         0       2       0       0       0       0       0
 11326 ;;      Temps:          0       0       0       0       0       0       0
 11327 ;;      Totals:         0       5       0       0       0       0       0
 11328 ;;Total ram usage:        5 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    5
 11331 ;; This function calls:
 11332 ;;		_crc8
 11333 ;; This function is called by:
 11334 ;;		_doModeVscp
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text16
 11339  006766                     __ptext16:
 11340                           	opt stack 0
 11341  006766                     _calcCRC:
 11342                           	opt stack 24
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;main.c: 2909: uint8_t j;
 11346                           ;main.c: 2910: uint8_t crc = 0;
 11347                           
 11348                           ;incstack = 0
 11349                           ;incstack = 0
 11350  006766  6B6B               	clrf	calcCRC@crc& (0+255),b
 11351                           
 11352                           ;main.c: 2912: for (j = 0; j < len; j++) {
 11353  006768  6B6A               	clrf	calcCRC@j& (0+255),b
 11354  00676A  D010               	goto	l17901
 11355  00676C                     l17897:
 11356                           
 11357                           ; BSR set to: 0
 11358                           ;main.c: 2913: crc8(&crc, p[j]);
 11359  00676C  0E00               	movlw	high calcCRC@crc
 11360  00676E  6E20               	movwf	?_crc8+1,c
 11361  006770  0E6B               	movlw	low calcCRC@crc
 11362  006772  6E1F               	movwf	?_crc8,c
 11363  006774  516A               	movf	calcCRC@j& (0+255),w,b
 11364  006776  2567               	addwf	calcCRC@p& (0+255),w,b
 11365  006778  6ED9               	movwf	fsr2l,c
 11366  00677A  0E00               	movlw	0
 11367  00677C  2168               	addwfc	(calcCRC@p+1)& (0+255),w,b
 11368  00677E  6EDA               	movwf	fsr2h,c
 11369  006780  50DF               	movf	indf2,w,c
 11370  006782  6E21               	movwf	?_crc8+2,c
 11371  006784  EC48  F033         	call	_crc8	;wreg free
 11372                           
 11373                           ; BSR set to: 3
 11374  006788  0100               	movlb	0	; () banked
 11375  00678A  2B6A               	incf	calcCRC@j& (0+255),f,b
 11376  00678C                     l17901:
 11377                           
 11378                           ; BSR set to: 0
 11379  00678C  5169               	movf	calcCRC@len& (0+255),w,b
 11380  00678E  5D6A               	subwf	calcCRC@j& (0+255),w,b
 11381  006790  E3ED               	bnc	l17897
 11382                           
 11383                           ; BSR set to: 0
 11384                           ;main.c: 2914: }
 11385                           ;main.c: 2916: return crc;
 11386  006792  516B               	movf	calcCRC@crc& (0+255),w,b
 11387                           
 11388                           ; BSR set to: 0
 11389  006794  0012               	return	
 11390  006796                     __end_of_calcCRC:
 11391                           	opt stack 0
 11392                           tblptru	equ	0xFF8
 11393                           tblptrh	equ	0xFF7
 11394                           tblptrl	equ	0xFF6
 11395                           tablat	equ	0xFF5
 11396                           prodh	equ	0xFF4
 11397                           prodl	equ	0xFF3
 11398                           intcon	equ	0xFF2
 11399                           indf0	equ	0xFEF
 11400                           postinc0	equ	0xFEE
 11401                           fsr0h	equ	0xFEA
 11402                           fsr0l	equ	0xFE9
 11403                           wreg	equ	0xFE8
 11404                           indf1	equ	0xFE7
 11405                           postinc1	equ	0xFE6
 11406                           postdec1	equ	0xFE5
 11407                           fsr1h	equ	0xFE2
 11408                           fsr1l	equ	0xFE1
 11409                           indf2	equ	0xFDF
 11410                           postinc2	equ	0xFDE
 11411                           postdec2	equ	0xFDD
 11412                           plusw2	equ	0xFDB
 11413                           fsr2h	equ	0xFDA
 11414                           fsr2l	equ	0xFD9
 11415                           status	equ	0xFD8
 11416                           
 11417 ;; *************** function _receiveSendEventCANAL *****************
 11418 ;; Defined at:
 11419 ;;		line 2263 in file "main.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;		None
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  timestamp       4   27[BANK0 ] unsigned long 
 11424 ;;  crc             1   36[BANK0 ] unsigned char 
 11425 ;;  data            8   18[BANK0 ] unsigned char [8]
 11426 ;;  id              4   31[BANK0 ] unsigned long 
 11427 ;;  dlc             1   35[BANK0 ] unsigned char 
 11428 ;;  i               1   26[BANK0 ] unsigned char 
 11429 ;; Return value:  Size  Location     Type
 11430 ;;                  1    wreg      enum E15660
 11431 ;; Registers used:
 11432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11433 ;; Tracked objects:
 11434 ;;		On entry : F/1
 11435 ;;		On exit  : 0/0
 11436 ;;		Unchanged: 0/0
 11437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11438 ;;      Params:         0       0       0       0       0       0       0
 11439 ;;      Locals:         0      19       0       0       0       0       0
 11440 ;;      Temps:          0       4       0       0       0       0       0
 11441 ;;      Totals:         0      23       0       0       0       0       0
 11442 ;;Total ram usage:       23 bytes
 11443 ;; Hardware stack levels used:    1
 11444 ;; Hardware stack levels required when called:    6
 11445 ;; This function calls:
 11446 ;;		_WriteUSART
 11447 ;;		_sendEscapedUartData
 11448 ;;		_crc8
 11449 ;;		_ReadTimer3
 11450 ;;		_getCANFrame
 11451 ;;		___wmul
 11452 ;; This function is called by:
 11453 ;;		_doModeVscp
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           	psect	text17
 11458  003C7E                     __ptext17:
 11459                           	opt stack 0
 11460  003C7E                     _receiveSendEventCANAL:
 11461                           	opt stack 23
 11462                           
 11463                           ; BSR set to: 1
 11464                           ;main.c: 2264: uint8_t i;
 11465                           ;main.c: 2265: uint32_t id;
 11466                           ;main.c: 2266: uint8_t dlc;
 11467                           ;main.c: 2267: uint8_t data[8];
 11468                           ;main.c: 2269: if ( getCANFrame( &id, &dlc, &data ) ) {
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;incstack = 0
 11472                           ;incstack = 0
 11473  003C7E  0100               	movlb	0	; () banked
 11474  003C80  0E00               	movlw	high receiveSendEventCANAL@dlc
 11475  003C82  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 11476  003C84  0E83               	movlw	low receiveSendEventCANAL@dlc
 11477  003C86  6F6A               	movwf	?_getCANFrame& (0+255),b
 11478  003C88  0E00               	movlw	high receiveSendEventCANAL@data
 11479  003C8A  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
 11480  003C8C  0E72               	movlw	low receiveSendEventCANAL@data
 11481  003C8E  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
 11482  003C90  0E7F               	movlw	receiveSendEventCANAL@id& (0+255)
 11483  003C92  ECCB  F02B         	call	_getCANFrame
 11484  003C96  0900               	iorlw	0
 11485  003C98  E101 D0E6          	bz	l1092
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;main.c: 2271: uint8_t crc = 0;
 11489  003C9C  6B84               	clrf	receiveSendEventCANAL@crc& (0+255),b
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;main.c: 2274: cntRxFrames++;
 11493  003C9E  0101               	movlb	1	; () banked
 11494  003CA0  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11495  003CA2  0E00               	movlw	0
 11496  003CA4  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11497  003CA6  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11498  003CA8  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11499                           
 11500                           ;main.c: 2275: cntRxBytes += dlc;
 11501  003CAA  0100               	movlb	0	; () banked
 11502  003CAC  5183               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11503  003CAE  0101               	movlb	1	; () banked
 11504  003CB0  2708               	addwf	_cntRxBytes& (0+255),f,b
 11505  003CB2  0E00               	movlw	0
 11506  003CB4  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11507  003CB6  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11508  003CB8  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11509  003CBA                     l1068:
 11510                           
 11511                           ; BSR set to: 1
 11512  003CBA  A2AC               	btfss	4012,1,c	;volatile
 11513  003CBC  D7FE               	goto	l1068
 11514                           
 11515                           ; BSR set to: 1
 11516                           ;main.c: 2279: WriteUSART(0x10);
 11517  003CBE  0E10               	movlw	16
 11518  003CC0  EC61  F034         	call	_WriteUSART
 11519  003CC4                     l1071:
 11520  003CC4  A2AC               	btfss	4012,1,c	;volatile
 11521  003CC6  D7FE               	goto	l1071
 11522                           
 11523                           ;main.c: 2281: WriteUSART(0x02);
 11524  003CC8  0E02               	movlw	2
 11525  003CCA  EC61  F034         	call	_WriteUSART
 11526  003CCE                     l1074:
 11527  003CCE  A2AC               	btfss	4012,1,c	;volatile
 11528  003CD0  D7FE               	goto	l1074
 11529                           
 11530                           ;main.c: 2285: if ( bTimestamp ) {
 11531  003CD2  502F               	movf	_bTimestamp,w,c
 11532  003CD4  E00D               	bz	l17841
 11533                           
 11534                           ;main.c: 2286: WriteUSART( 11 );
 11535  003CD6  0E0B               	movlw	11
 11536  003CD8  EC61  F034         	call	_WriteUSART
 11537                           
 11538                           ;main.c: 2287: crc8(&crc, 11 );
 11539  003CDC  0100               	movlb	0	; () banked
 11540  003CDE  0E00               	movlw	high receiveSendEventCANAL@crc
 11541  003CE0  6E20               	movwf	?_crc8+1,c
 11542  003CE2  0E84               	movlw	low receiveSendEventCANAL@crc
 11543  003CE4  6E1F               	movwf	?_crc8,c
 11544  003CE6  0E0B               	movlw	11
 11545  003CE8  6E21               	movwf	?_crc8+2,c
 11546  003CEA  EC48  F033         	call	_crc8	;wreg free
 11547                           
 11548                           ;main.c: 2288: }
 11549  003CEE  D00C               	goto	l1079
 11550  003CF0                     l17841:
 11551                           
 11552                           ;main.c: 2289: else {
 11553                           ;main.c: 2290: WriteUSART(2);
 11554  003CF0  0E02               	movlw	2
 11555  003CF2  EC61  F034         	call	_WriteUSART
 11556                           
 11557                           ;main.c: 2291: crc8(&crc, 2);
 11558  003CF6  0100               	movlb	0	; () banked
 11559  003CF8  0E00               	movlw	high receiveSendEventCANAL@crc
 11560  003CFA  6E20               	movwf	?_crc8+1,c
 11561  003CFC  0E84               	movlw	low receiveSendEventCANAL@crc
 11562  003CFE  6E1F               	movwf	?_crc8,c
 11563  003D00  0E02               	movlw	2
 11564  003D02  6E21               	movwf	?_crc8+2,c
 11565  003D04  EC48  F033         	call	_crc8	;wreg free
 11566  003D08                     l1079:
 11567  003D08  A2AC               	btfss	4012,1,c	;volatile
 11568  003D0A  D7FE               	goto	l1079
 11569                           
 11570                           ;main.c: 2296: WriteUSART(0);
 11571  003D0C  0E00               	movlw	0
 11572  003D0E  EC61  F034         	call	_WriteUSART
 11573                           
 11574                           ;main.c: 2297: crc8(&crc, 0);
 11575  003D12  0100               	movlb	0	; () banked
 11576  003D14  0E00               	movlw	high receiveSendEventCANAL@crc
 11577  003D16  6E20               	movwf	?_crc8+1,c
 11578  003D18  0E84               	movlw	low receiveSendEventCANAL@crc
 11579  003D1A  6E1F               	movwf	?_crc8,c
 11580  003D1C  0E00               	movlw	0
 11581  003D1E  6A21               	clrf	?_crc8+2,c
 11582  003D20  EC48  F033         	call	_crc8	;wreg free
 11583                           
 11584                           ; BSR set to: 3
 11585                           ;main.c: 2300: sendEscapedUartData(sequencyno, &crc);
 11586  003D24  0100               	movlb	0	; () banked
 11587  003D26  0E00               	movlw	high receiveSendEventCANAL@crc
 11588  003D28  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11589  003D2A  0E84               	movlw	low receiveSendEventCANAL@crc
 11590  003D2C  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11591  003D2E  5034               	movf	_sequencyno,w,c
 11592  003D30  ECA1  F030         	call	_sendEscapedUartData
 11593                           
 11594                           ;main.c: 2301: sequencyno++;
 11595  003D34  2A34               	incf	_sequencyno,f,c
 11596                           
 11597                           ;main.c: 2304: sendEscapedUartData(0, &crc);
 11598  003D36  0100               	movlb	0	; () banked
 11599  003D38  0E00               	movlw	high receiveSendEventCANAL@crc
 11600  003D3A  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11601  003D3C  0E84               	movlw	low receiveSendEventCANAL@crc
 11602  003D3E  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11603  003D40  0E00               	movlw	0
 11604  003D42  ECA1  F030         	call	_sendEscapedUartData
 11605                           
 11606                           ;main.c: 2305: sendEscapedUartData(5 + dlc, &crc);
 11607  003D46  D891               	call	PL132	;call to abstracted procedure
 11608  003D48  0F05               	addlw	5
 11609  003D4A  ECA1  F030         	call	_sendEscapedUartData
 11610                           
 11611                           ;main.c: 2311: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 11612  003D4E  0100               	movlb	0	; () banked
 11613  003D50  0E00               	movlw	high receiveSendEventCANAL@crc
 11614  003D52  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11615  003D54  0E84               	movlw	low receiveSendEventCANAL@crc
 11616  003D56  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11617  003D58  5182               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 11618  003D5A  ECA1  F030         	call	_sendEscapedUartData
 11619                           
 11620                           ;main.c: 2312: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 11621  003D5E  0100               	movlb	0	; () banked
 11622  003D60  0E00               	movlw	high receiveSendEventCANAL@crc
 11623  003D62  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11624  003D64  0E84               	movlw	low receiveSendEventCANAL@crc
 11625  003D66  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11626  003D68  5181               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 11627  003D6A  ECA1  F030         	call	_sendEscapedUartData
 11628                           
 11629                           ;main.c: 2313: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 11630  003D6E  0100               	movlb	0	; () banked
 11631  003D70  0E00               	movlw	high receiveSendEventCANAL@crc
 11632  003D72  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11633  003D74  0E84               	movlw	low receiveSendEventCANAL@crc
 11634  003D76  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11635  003D78  5180               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 11636  003D7A  ECA1  F030         	call	_sendEscapedUartData
 11637                           
 11638                           ;main.c: 2314: sendEscapedUartData((id & 0xff), &crc);
 11639  003D7E  0100               	movlb	0	; () banked
 11640  003D80  0E00               	movlw	high receiveSendEventCANAL@crc
 11641  003D82  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11642  003D84  0E84               	movlw	low receiveSendEventCANAL@crc
 11643  003D86  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11644  003D88  517F               	movf	receiveSendEventCANAL@id& (0+255),w,b
 11645  003D8A  ECA1  F030         	call	_sendEscapedUartData
 11646                           
 11647                           ;main.c: 2317: if ( bTimestamp ) {
 11648  003D8E  502F               	movf	_bTimestamp,w,c
 11649  003D90  E046               	bz	l17877
 11650                           
 11651                           ;main.c: 2318: uint32_t timestamp = (timer<<16) | ReadTimer3()*10;
 11652  003D92  EC6C  F034         	call	_ReadTimer3	;wreg free
 11653  003D96  C01F  F060         	movff	?_ReadTimer3,?___wmul
 11654  003D9A  C020  F061         	movff	?_ReadTimer3+1,?___wmul+1
 11655  003D9E  0100               	movlb	0	; () banked
 11656  003DA0  6B63               	clrf	(?___wmul+3)& (0+255),b
 11657  003DA2  0E0A               	movlw	10
 11658  003DA4  6F62               	movwf	(?___wmul+2)& (0+255),b
 11659  003DA6  EC9A  F033         	call	___wmul	;wreg free
 11660  003DAA  C024  F06E         	movff	_timer,??_receiveSendEventCANAL	;volatile
 11661  003DAE  C025  F06F         	movff	_timer+1,??_receiveSendEventCANAL+1	;volatile
 11662  003DB2  C026  F070         	movff	_timer+2,??_receiveSendEventCANAL+2	;volatile
 11663  003DB6  C027  F071         	movff	_timer+3,??_receiveSendEventCANAL+3	;volatile
 11664  003DBA  C06F  F071         	movff	??_receiveSendEventCANAL+1,??_receiveSendEventCANAL+3
 11665  003DBE  C06E  F070         	movff	??_receiveSendEventCANAL,??_receiveSendEventCANAL+2
 11666  003DC2  6B6F               	clrf	(??_receiveSendEventCANAL+1)& (0+255),b
 11667  003DC4  6B6E               	clrf	??_receiveSendEventCANAL& (0+255),b
 11668  003DC6  5160               	movf	?___wmul& (0+255),w,b
 11669  003DC8  116E               	iorwf	??_receiveSendEventCANAL& (0+255),w,b
 11670  003DCA  6F7B               	movwf	receiveSendEventCANAL@timestamp& (0+255),b
 11671  003DCC  5161               	movf	(?___wmul+1)& (0+255),w,b
 11672  003DCE  116F               	iorwf	(??_receiveSendEventCANAL+1)& (0+255),w,b
 11673  003DD0  6F7C               	movwf	(receiveSendEventCANAL@timestamp+1)& (0+255),b
 11674  003DD2  0E00               	movlw	0
 11675  003DD4  1170               	iorwf	(??_receiveSendEventCANAL+2)& (0+255),w,b
 11676  003DD6  6F7D               	movwf	(receiveSendEventCANAL@timestamp+2)& (0+255),b
 11677  003DD8  0E00               	movlw	0
 11678  003DDA  1171               	iorwf	(??_receiveSendEventCANAL+3)& (0+255),w,b
 11679  003DDC  6F7E               	movwf	(receiveSendEventCANAL@timestamp+3)& (0+255),b
 11680                           
 11681                           ; BSR set to: 0
 11682                           ;main.c: 2319: sendEscapedUartData( ((timestamp >> 24) & 0xff), &crc);
 11683  003DDE  0E00               	movlw	high receiveSendEventCANAL@crc
 11684  003DE0  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11685  003DE2  0E84               	movlw	low receiveSendEventCANAL@crc
 11686  003DE4  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11687  003DE6  0100               	movlb	0	; () banked
 11688  003DE8  517E               	movf	(receiveSendEventCANAL@timestamp+3)& (0+255),w,b
 11689  003DEA  ECA1  F030         	call	_sendEscapedUartData
 11690                           
 11691                           ;main.c: 2320: sendEscapedUartData(((timestamp >> 16) & 0xff), &crc);
 11692  003DEE  0100               	movlb	0	; () banked
 11693  003DF0  0E00               	movlw	high receiveSendEventCANAL@crc
 11694  003DF2  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11695  003DF4  0E84               	movlw	low receiveSendEventCANAL@crc
 11696  003DF6  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11697  003DF8  517D               	movf	(receiveSendEventCANAL@timestamp+2)& (0+255),w,b
 11698  003DFA  ECA1  F030         	call	_sendEscapedUartData
 11699                           
 11700                           ;main.c: 2321: sendEscapedUartData(((timestamp >> 8) & 0xff), &crc);
 11701  003DFE  0100               	movlb	0	; () banked
 11702  003E00  0E00               	movlw	high receiveSendEventCANAL@crc
 11703  003E02  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11704  003E04  0E84               	movlw	low receiveSendEventCANAL@crc
 11705  003E06  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11706  003E08  517C               	movf	(receiveSendEventCANAL@timestamp+1)& (0+255),w,b
 11707  003E0A  ECA1  F030         	call	_sendEscapedUartData
 11708                           
 11709                           ;main.c: 2322: sendEscapedUartData((timestamp & 0xff), &crc);
 11710  003E0E  0100               	movlb	0	; () banked
 11711  003E10  0E00               	movlw	high receiveSendEventCANAL@crc
 11712  003E12  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11713  003E14  0E84               	movlw	low receiveSendEventCANAL@crc
 11714  003E16  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11715  003E18  517B               	movf	receiveSendEventCANAL@timestamp& (0+255),w,b
 11716  003E1A  ECA1  F030         	call	_sendEscapedUartData
 11717  003E1E                     l17877:
 11718                           
 11719                           ;main.c: 2323: }
 11720                           ;main.c: 2326: sendEscapedUartData(dlc, &crc);
 11721  003E1E  D825               	call	PL132	;call to abstracted procedure
 11722  003E20  ECA1  F030         	call	_sendEscapedUartData
 11723                           
 11724                           ;main.c: 2329: for (i = 0; i < dlc; i++) {
 11725  003E24  0100               	movlb	0	; () banked
 11726  003E26  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 11727  003E28  D00D               	goto	l17885
 11728  003E2A                     l17881:
 11729                           
 11730                           ; BSR set to: 0
 11731                           ;main.c: 2330: sendEscapedUartData( data[ i ], &crc );
 11732  003E2A  0E00               	movlw	high receiveSendEventCANAL@crc
 11733  003E2C  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11734  003E2E  0E84               	movlw	low receiveSendEventCANAL@crc
 11735  003E30  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11736  003E32  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 11737  003E34  0F72               	addlw	low receiveSendEventCANAL@data
 11738  003E36  6ED9               	movwf	fsr2l,c
 11739  003E38  6ADA               	clrf	fsr2h,c
 11740  003E3A  50DF               	movf	indf2,w,c
 11741  003E3C  ECA1  F030         	call	_sendEscapedUartData
 11742  003E40  0100               	movlb	0	; () banked
 11743  003E42  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 11744  003E44                     l17885:
 11745                           
 11746                           ; BSR set to: 0
 11747  003E44  5183               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11748  003E46  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 11749  003E48  E3F0               	bnc	l17881
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;main.c: 2331: }
 11753                           ;main.c: 2336: sendEscapedUartData(crc, (0));
 11754  003E4A  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11755  003E4C  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 11756  003E4E  5184               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 11757  003E50  ECA1  F030         	call	_sendEscapedUartData
 11758  003E54                     l1086:
 11759  003E54  A2AC               	btfss	4012,1,c	;volatile
 11760  003E56  D7FE               	goto	l1086
 11761                           
 11762                           ;main.c: 2340: WriteUSART(0x10);
 11763  003E58  0E10               	movlw	16
 11764  003E5A  EC61  F034         	call	_WriteUSART
 11765  003E5E                     l1089:
 11766  003E5E  A2AC               	btfss	4012,1,c	;volatile
 11767  003E60  D7FE               	goto	l1089
 11768                           
 11769                           ;main.c: 2342: WriteUSART(0x03);
 11770  003E62  0E03               	movlw	3
 11771  003E64  EC61  F034         	call	_WriteUSART
 11772  003E68                     l1092:
 11773  003E68  0012               	return	
 11774  003E6A                     __end_of_receiveSendEventCANAL:
 11775                           	opt stack 0
 11776  003E6A                     PL132:
 11777                           	opt stack 23
 11778  003E6A  0100               	movlb	0	; () banked
 11779  003E6C  0E00               	movlw	high receiveSendEventCANAL@crc
 11780  003E6E  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11781  003E70  0E84               	movlw	low receiveSendEventCANAL@crc
 11782  003E72  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11783  003E74  5183               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11784  003E76  0012               	return	
 11785  003E78                     __end_ofPL132:
 11786                           	opt stack 0
 11787                           tblptru	equ	0xFF8
 11788                           tblptrh	equ	0xFF7
 11789                           tblptrl	equ	0xFF6
 11790                           tablat	equ	0xFF5
 11791                           prodh	equ	0xFF4
 11792                           prodl	equ	0xFF3
 11793                           intcon	equ	0xFF2
 11794                           indf0	equ	0xFEF
 11795                           postinc0	equ	0xFEE
 11796                           fsr0h	equ	0xFEA
 11797                           fsr0l	equ	0xFE9
 11798                           wreg	equ	0xFE8
 11799                           indf1	equ	0xFE7
 11800                           postinc1	equ	0xFE6
 11801                           postdec1	equ	0xFE5
 11802                           fsr1h	equ	0xFE2
 11803                           fsr1l	equ	0xFE1
 11804                           indf2	equ	0xFDF
 11805                           postinc2	equ	0xFDE
 11806                           postdec2	equ	0xFDD
 11807                           plusw2	equ	0xFDB
 11808                           fsr2h	equ	0xFDA
 11809                           fsr2l	equ	0xFD9
 11810                           status	equ	0xFD8
 11811                           
 11812 ;; *************** function _receiveSendMultiEventCANAL *****************
 11813 ;; Defined at:
 11814 ;;		line 2355 in file "main.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;		None
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;  timestamp       4   27[BANK0 ] unsigned long 
 11819 ;;  crc             1   37[BANK0 ] unsigned char 
 11820 ;;  data            8   18[BANK0 ] unsigned char [8]
 11821 ;;  id              4   32[BANK0 ] unsigned long 
 11822 ;;  pos             1   38[BANK0 ] unsigned char 
 11823 ;;  dlc             1   36[BANK0 ] unsigned char 
 11824 ;;  i               1   31[BANK0 ] unsigned char 
 11825 ;;  msgcount        1   26[BANK0 ] unsigned char 
 11826 ;; Return value:  Size  Location     Type
 11827 ;;                  1    wreg      enum E15660
 11828 ;; Registers used:
 11829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11830 ;; Tracked objects:
 11831 ;;		On entry : F/1
 11832 ;;		On exit  : 0/0
 11833 ;;		Unchanged: 0/0
 11834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11835 ;;      Params:         0       0       0       0       0       0       0
 11836 ;;      Locals:         0      21       0       0       0       0       0
 11837 ;;      Temps:          0       4       0       0       0       0       0
 11838 ;;      Totals:         0      25       0       0       0       0       0
 11839 ;;Total ram usage:       25 bytes
 11840 ;; Hardware stack levels used:    1
 11841 ;; Hardware stack levels required when called:    6
 11842 ;; This function calls:
 11843 ;;		_WriteUSART
 11844 ;;		_sendEscapedUartData
 11845 ;;		_crc8
 11846 ;;		_ReadTimer3
 11847 ;;		_getCANFrame
 11848 ;;		___wmul
 11849 ;; This function is called by:
 11850 ;;		_doModeVscp
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           	psect	text18
 11855  00384C                     __ptext18:
 11856                           	opt stack 0
 11857  00384C                     _receiveSendMultiEventCANAL:
 11858                           	opt stack 23
 11859                           
 11860                           ; BSR set to: 1
 11861                           ;main.c: 2356: uint8_t i;
 11862                           ;main.c: 2357: uint8_t pos=0;
 11863                           
 11864                           ;incstack = 0
 11865                           ;incstack = 0
 11866  00384C  0100               	movlb	0	; () banked
 11867  00384E  6B86               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11868                           
 11869                           ;main.c: 2358: uint8_t msgcount=0;
 11870  003850  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;main.c: 2359: uint32_t id;
 11874                           ;main.c: 2360: uint8_t dlc;
 11875                           ;main.c: 2361: uint8_t data[8];
 11876                           ;main.c: 2363: if ( getCANFrame( &id, &dlc, &data ) ) {
 11877  003852  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11878  003854  D901               	call	PL94	;call to abstracted procedure
 11879  003856  ECCB  F02B         	call	_getCANFrame
 11880  00385A  0900               	iorlw	0
 11881  00385C  E101 D0EB          	bz	l1127
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;main.c: 2365: uint8_t crc = 0;
 11885  003860  6B85               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11886                           
 11887                           ; BSR set to: 0
 11888                           ;main.c: 2368: cntRxFrames++;
 11889  003862  0101               	movlb	1	; () banked
 11890  003864  2B0C               	incf	_cntRxFrames& (0+255),f,b
 11891  003866  0E00               	movlw	0
 11892  003868  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11893  00386A  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11894  00386C  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11895                           
 11896                           ;main.c: 2369: cntRxBytes += dlc;
 11897  00386E  0100               	movlb	0	; () banked
 11898  003870  5184               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11899  003872  0101               	movlb	1	; () banked
 11900  003874  2708               	addwf	_cntRxBytes& (0+255),f,b
 11901  003876  0E00               	movlw	0
 11902  003878  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11903  00387A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11904  00387C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11905  00387E                     l1096:
 11906                           
 11907                           ; BSR set to: 1
 11908  00387E  A2AC               	btfss	4012,1,c	;volatile
 11909  003880  D7FE               	goto	l1096
 11910                           
 11911                           ; BSR set to: 1
 11912                           ;main.c: 2373: WriteUSART(0x10);
 11913  003882  0E10               	movlw	16
 11914  003884  EC61  F034         	call	_WriteUSART
 11915  003888                     l1099:
 11916  003888  A2AC               	btfss	4012,1,c	;volatile
 11917  00388A  D7FE               	goto	l1099
 11918                           
 11919                           ;main.c: 2375: WriteUSART(0x02);
 11920  00388C  0E02               	movlw	2
 11921  00388E  EC61  F034         	call	_WriteUSART
 11922  003892                     l1102:
 11923  003892  A2AC               	btfss	4012,1,c	;volatile
 11924  003894  D7FE               	goto	l1102
 11925                           
 11926                           ;main.c: 2379: if ( bTimestamp ) {
 11927  003896  502F               	movf	_bTimestamp,w,c
 11928  003898  E00D               	bz	l17737
 11929                           
 11930                           ;main.c: 2380: WriteUSART( 12 );
 11931  00389A  0E0C               	movlw	12
 11932  00389C  EC61  F034         	call	_WriteUSART
 11933                           
 11934                           ;main.c: 2381: crc8(&crc, 12 );
 11935  0038A0  0100               	movlb	0	; () banked
 11936  0038A2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11937  0038A4  6E20               	movwf	?_crc8+1,c
 11938  0038A6  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 11939  0038A8  6E1F               	movwf	?_crc8,c
 11940  0038AA  0E0C               	movlw	12
 11941  0038AC  6E21               	movwf	?_crc8+2,c
 11942  0038AE  EC48  F033         	call	_crc8	;wreg free
 11943                           
 11944                           ;main.c: 2382: }
 11945  0038B2  D00C               	goto	l1107
 11946  0038B4                     l17737:
 11947                           
 11948                           ;main.c: 2383: else {
 11949                           ;main.c: 2384: WriteUSART( 6 );
 11950  0038B4  0E06               	movlw	6
 11951  0038B6  EC61  F034         	call	_WriteUSART
 11952                           
 11953                           ;main.c: 2385: crc8(&crc, 6 );
 11954  0038BA  0100               	movlb	0	; () banked
 11955  0038BC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11956  0038BE  6E20               	movwf	?_crc8+1,c
 11957  0038C0  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 11958  0038C2  6E1F               	movwf	?_crc8,c
 11959  0038C4  0E06               	movlw	6
 11960  0038C6  6E21               	movwf	?_crc8+2,c
 11961  0038C8  EC48  F033         	call	_crc8	;wreg free
 11962  0038CC                     l1107:
 11963  0038CC  A2AC               	btfss	4012,1,c	;volatile
 11964  0038CE  D7FE               	goto	l1107
 11965                           
 11966                           ;main.c: 2390: WriteUSART(0);
 11967  0038D0  0E00               	movlw	0
 11968  0038D2  EC61  F034         	call	_WriteUSART
 11969                           
 11970                           ;main.c: 2391: crc8(&crc, 0);
 11971  0038D6  0100               	movlb	0	; () banked
 11972  0038D8  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11973  0038DA  6E20               	movwf	?_crc8+1,c
 11974  0038DC  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 11975  0038DE  6E1F               	movwf	?_crc8,c
 11976  0038E0  0E00               	movlw	0
 11977  0038E2  6A21               	clrf	?_crc8+2,c
 11978  0038E4  EC48  F033         	call	_crc8	;wreg free
 11979                           
 11980                           ; BSR set to: 3
 11981                           ;main.c: 2394: sendEscapedUartData(sequencyno, &crc);
 11982  0038E8  0100               	movlb	0	; () banked
 11983  0038EA  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11984  0038EC  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11985  0038EE  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 11986  0038F0  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 11987  0038F2  5034               	movf	_sequencyno,w,c
 11988  0038F4  ECA1  F030         	call	_sendEscapedUartData
 11989                           
 11990                           ;main.c: 2395: sequencyno++;
 11991  0038F8  2A34               	incf	_sequencyno,f,c
 11992  0038FA                     l17749:
 11993                           
 11994                           ;main.c: 2405: wrkbuf[ pos ] = (id >> 24) & 0xff;
 11995  0038FA  D8A6               	call	PL56	;call to abstracted procedure
 11996  0038FC  C083  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 11997                           
 11998                           ; BSR set to: 0
 11999                           ;main.c: 2406: pos++;
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;main.c: 2407: wrkbuf[ pos ] = (id >> 16) & 0xff;
 12003  003900  D89B               	call	PL16	;call to abstracted procedure
 12004  003902  C082  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;main.c: 2408: pos++;
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;main.c: 2409: wrkbuf[ pos ] = (id >> 8) & 0xff;
 12011  003906  D898               	call	PL16	;call to abstracted procedure
 12012  003908  C081  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;main.c: 2410: pos++;
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;main.c: 2411: wrkbuf[ pos ] = id & 0xff;
 12019  00390C  D895               	call	PL16	;call to abstracted procedure
 12020  00390E  C080  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 12021                           
 12022                           ; BSR set to: 0
 12023                           ;main.c: 2412: pos++;
 12024  003912  2B86               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2414: if ( bTimestamp ) {
 12028  003914  502F               	movf	_bTimestamp,w,c
 12029  003916  E033               	bz	l17785
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;main.c: 2415: uint32_t timestamp = (timer<<16) | ReadTimer3()*10;
 12033  003918  EC6C  F034         	call	_ReadTimer3	;wreg free
 12034  00391C  C01F  F060         	movff	?_ReadTimer3,?___wmul
 12035  003920  C020  F061         	movff	?_ReadTimer3+1,?___wmul+1
 12036  003924  0100               	movlb	0	; () banked
 12037  003926  6B63               	clrf	(?___wmul+3)& (0+255),b
 12038  003928  0E0A               	movlw	10
 12039  00392A  6F62               	movwf	(?___wmul+2)& (0+255),b
 12040  00392C  EC9A  F033         	call	___wmul	;wreg free
 12041  003930  C024  F06E         	movff	_timer,??_receiveSendMultiEventCANAL	;volatile
 12042  003934  C025  F06F         	movff	_timer+1,??_receiveSendMultiEventCANAL+1	;volatile
 12043  003938  C026  F070         	movff	_timer+2,??_receiveSendMultiEventCANAL+2	;volatile
 12044  00393C  C027  F071         	movff	_timer+3,??_receiveSendMultiEventCANAL+3	;volatile
 12045  003940  C06F  F071         	movff	??_receiveSendMultiEventCANAL+1,??_receiveSendMultiEventCANAL+3
 12046  003944  C06E  F070         	movff	??_receiveSendMultiEventCANAL,??_receiveSendMultiEventCANAL+2
 12047  003948  6B6F               	clrf	(??_receiveSendMultiEventCANAL+1)& (0+255),b
 12048  00394A  6B6E               	clrf	??_receiveSendMultiEventCANAL& (0+255),b
 12049  00394C  5160               	movf	?___wmul& (0+255),w,b
 12050  00394E  116E               	iorwf	??_receiveSendMultiEventCANAL& (0+255),w,b
 12051  003950  6F7B               	movwf	receiveSendMultiEventCANAL@timestamp& (0+255),b
 12052  003952  5161               	movf	(?___wmul+1)& (0+255),w,b
 12053  003954  116F               	iorwf	(??_receiveSendMultiEventCANAL+1)& (0+255),w,b
 12054  003956  6F7C               	movwf	(receiveSendMultiEventCANAL@timestamp+1)& (0+255),b
 12055  003958  0E00               	movlw	0
 12056  00395A  1170               	iorwf	(??_receiveSendMultiEventCANAL+2)& (0+255),w,b
 12057  00395C  6F7D               	movwf	(receiveSendMultiEventCANAL@timestamp+2)& (0+255),b
 12058  00395E  0E00               	movlw	0
 12059  003960  1171               	iorwf	(??_receiveSendMultiEventCANAL+3)& (0+255),w,b
 12060  003962  6F7E               	movwf	(receiveSendMultiEventCANAL@timestamp+3)& (0+255),b
 12061                           
 12062                           ; BSR set to: 0
 12063                           ;main.c: 2416: wrkbuf[ pos ] = (timestamp >> 24) & 0xff;
 12064  003964  D871               	call	PL56	;call to abstracted procedure
 12065  003966  C07E  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+3,indf2
 12066                           
 12067                           ; BSR set to: 0
 12068                           ;main.c: 2417: pos++;
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;main.c: 2418: wrkbuf[ pos ] = (timestamp >> 16) & 0xff;
 12072  00396A  D866               	call	PL16	;call to abstracted procedure
 12073  00396C  C07D  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+2,indf2
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;main.c: 2419: pos++;
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;main.c: 2420: wrkbuf[ pos ] = (timestamp >> 8) & 0xff;
 12080  003970  D863               	call	PL16	;call to abstracted procedure
 12081  003972  C07C  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+1,indf2
 12082                           
 12083                           ; BSR set to: 0
 12084                           ;main.c: 2421: pos++;
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 2422: wrkbuf[ pos ] = timestamp & 0xff;
 12088  003976  D860               	call	PL16	;call to abstracted procedure
 12089  003978  C07B  FFDF         	movff	receiveSendMultiEventCANAL@timestamp,indf2
 12090                           
 12091                           ; BSR set to: 0
 12092                           ;main.c: 2423: pos++;
 12093  00397C  2B86               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12094  00397E                     l17785:
 12095                           
 12096                           ; BSR set to: 0
 12097                           ;main.c: 2424: }
 12098                           ;main.c: 2427: wrkbuf[ pos ] = dlc;
 12099  00397E  D864               	call	PL56	;call to abstracted procedure
 12100  003980  C084  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 2428: pos++;
 12104  003984  2B86               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;main.c: 2431: for (i = 0; i < dlc; i++) {
 12108  003986  6B7F               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 12109  003988  D00F               	goto	l17797
 12110  00398A                     l17791:
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;main.c: 2432: wrkbuf[ pos ] = data[ i ];
 12114  00398A  517F               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12115  00398C  0F72               	addlw	low receiveSendMultiEventCANAL@data
 12116  00398E  6ED9               	movwf	fsr2l,c
 12117  003990  6ADA               	clrf	fsr2h,c
 12118  003992  0E7D               	movlw	low _wrkbuf
 12119  003994  0100               	movlb	0	; () banked
 12120  003996  2586               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12121  003998  6EE1               	movwf	fsr1l,c
 12122  00399A  6AE2               	clrf	fsr1h,c
 12123  00399C  0E01               	movlw	high _wrkbuf
 12124  00399E  22E2               	addwfc	fsr1h,f,c
 12125  0039A0  CFDF FFE7          	movff	indf2,indf1
 12126                           
 12127                           ; BSR set to: 1
 12128                           ;main.c: 2433: pos++;
 12129  0039A4  2B86               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12130                           
 12131                           ; BSR set to: 0
 12132  0039A6  2B7F               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 12133  0039A8                     l17797:
 12134                           
 12135                           ; BSR set to: 0
 12136  0039A8  5184               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 12137  0039AA  5D7F               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12138  0039AC  E3EE               	bnc	l17791
 12139                           
 12140                           ; BSR set to: 0
 12141                           ;main.c: 2434: }
 12142                           ;main.c: 2436: msgcount++;
 12143  0039AE  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 12144                           
 12145                           ; BSR set to: 0
 12146                           ;main.c: 2438: } while ( ( msgcount < caps.maxCanalFrames ) &&
 12147                           ;main.c: 2439: ( msgcount < 5 ) &&
 12148                           ;main.c: 2440: getCANFrame( &id, &dlc, &data ) );
 12149  0039B0  0101               	movlb	1	; () banked
 12150  0039B2  51F3               	movf	(_caps+1)& (0+255),w,b
 12151  0039B4  0100               	movlb	0	; () banked
 12152  0039B6  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 12153  0039B8  D009               	goto	l17807
 12154                           
 12155                           ; BSR set to: 0
 12156  0039BA  0E05               	movlw	5
 12157  0039BC  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 12158  0039BE  D006               	goto	l17807
 12159                           
 12160                           ; BSR set to: 0
 12161  0039C0  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 12162  0039C2  D84A               	call	PL94	;call to abstracted procedure
 12163  0039C4  ECCB  F02B         	call	_getCANFrame
 12164  0039C8  0900               	iorlw	0
 12165  0039CA  E197               	bnz	l17749
 12166  0039CC                     l17807:
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;main.c: 2445: sendEscapedUartData(0, &crc);
 12170  0039CC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12171  0039CE  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12172  0039D0  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 12173  0039D2  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 12174  0039D4  0E00               	movlw	0
 12175  0039D6  ECA1  F030         	call	_sendEscapedUartData
 12176                           
 12177                           ;main.c: 2446: sendEscapedUartData(pos, &crc);
 12178  0039DA  0100               	movlb	0	; () banked
 12179  0039DC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12180  0039DE  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12181  0039E0  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 12182  0039E2  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 12183  0039E4  5186               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12184  0039E6  ECA1  F030         	call	_sendEscapedUartData
 12185                           
 12186                           ;main.c: 2449: for (i = 0; i < pos; i++) {
 12187  0039EA  0100               	movlb	0	; () banked
 12188  0039EC  6B7F               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 12189  0039EE  D011               	goto	l17815
 12190  0039F0                     l17811:
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;main.c: 2450: sendEscapedUartData( wrkbuf[ i ], &crc);
 12194  0039F0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12195  0039F2  6F68               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12196  0039F4  0E85               	movlw	low receiveSendMultiEventCANAL@crc
 12197  0039F6  6F67               	movwf	?_sendEscapedUartData& (0+255),b
 12198  0039F8  0E7D               	movlw	low _wrkbuf
 12199  0039FA  0100               	movlb	0	; () banked
 12200  0039FC  257F               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12201  0039FE  6ED9               	movwf	fsr2l,c
 12202  003A00  6ADA               	clrf	fsr2h,c
 12203  003A02  0101               	movlb	1	; () banked
 12204  003A04  0E01               	movlw	high _wrkbuf
 12205  003A06  22DA               	addwfc	fsr2h,f,c
 12206  003A08  50DF               	movf	indf2,w,c
 12207  003A0A  ECA1  F030         	call	_sendEscapedUartData
 12208  003A0E  0100               	movlb	0	; () banked
 12209  003A10  2B7F               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 12210  003A12                     l17815:
 12211                           
 12212                           ; BSR set to: 0
 12213  003A12  5186               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12214  003A14  5D7F               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12215  003A16  E3EC               	bnc	l17811
 12216                           
 12217                           ; BSR set to: 0
 12218                           ;main.c: 2451: }
 12219                           ;main.c: 2454: sendEscapedUartData(crc, (0));
 12220  003A18  6B68               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 12221  003A1A  6B67               	clrf	?_sendEscapedUartData& (0+255),b
 12222  003A1C  5185               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 12223  003A1E  ECA1  F030         	call	_sendEscapedUartData
 12224  003A22                     l1121:
 12225  003A22  A2AC               	btfss	4012,1,c	;volatile
 12226  003A24  D7FE               	goto	l1121
 12227                           
 12228                           ;main.c: 2458: WriteUSART(0x10);
 12229  003A26  0E10               	movlw	16
 12230  003A28  EC61  F034         	call	_WriteUSART
 12231  003A2C                     l1124:
 12232  003A2C  A2AC               	btfss	4012,1,c	;volatile
 12233  003A2E  D7FE               	goto	l1124
 12234                           
 12235                           ;main.c: 2460: WriteUSART(0x03);
 12236  003A30  0E03               	movlw	3
 12237  003A32  EC61  F034         	call	_WriteUSART
 12238  003A36                     l1127:
 12239  003A36  0012               	return	
 12240  003A38                     __end_of_receiveSendMultiEventCANAL:
 12241                           	opt stack 0
 12242  003A38                     PL16:
 12243                           	opt stack 23
 12244  003A38  2B86               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12245  003A3A  0E7D               	movlw	low _wrkbuf
 12246  003A3C  2586               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12247  003A3E  6ED9               	movwf	fsr2l,c
 12248  003A40  6ADA               	clrf	fsr2h,c
 12249  003A42  0E01               	movlw	high _wrkbuf
 12250  003A44  22DA               	addwfc	fsr2h,f,c
 12251  003A46  0012               	return	
 12252  003A48                     __end_ofPL16:
 12253                           	opt stack 0
 12254  003A48                     PL56:
 12255                           	opt stack 23
 12256  003A48  0E7D               	movlw	low _wrkbuf
 12257  003A4A  0100               	movlb	0	; () banked
 12258  003A4C  2586               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12259  003A4E  6ED9               	movwf	fsr2l,c
 12260  003A50  6ADA               	clrf	fsr2h,c
 12261  003A52  0E01               	movlw	high _wrkbuf
 12262  003A54  22DA               	addwfc	fsr2h,f,c
 12263  003A56  0012               	return	
 12264  003A58                     __end_ofPL56:
 12265                           	opt stack 0
 12266  003A58                     PL94:
 12267                           	opt stack 23
 12268  003A58  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 12269  003A5A  0E84               	movlw	low receiveSendMultiEventCANAL@dlc
 12270  003A5C  6F6A               	movwf	?_getCANFrame& (0+255),b
 12271  003A5E  0E00               	movlw	high receiveSendMultiEventCANAL@data
 12272  003A60  6F6D               	movwf	(?_getCANFrame+3)& (0+255),b
 12273  003A62  0E72               	movlw	low receiveSendMultiEventCANAL@data
 12274  003A64  6F6C               	movwf	(?_getCANFrame+2)& (0+255),b
 12275  003A66  0E80               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 12276  003A68  0012               	return	
 12277  003A6A                     __end_ofPL94:
 12278                           	opt stack 0
 12279                           tblptru	equ	0xFF8
 12280                           tblptrh	equ	0xFF7
 12281                           tblptrl	equ	0xFF6
 12282                           tablat	equ	0xFF5
 12283                           prodh	equ	0xFF4
 12284                           prodl	equ	0xFF3
 12285                           intcon	equ	0xFF2
 12286                           indf0	equ	0xFEF
 12287                           postinc0	equ	0xFEE
 12288                           fsr0h	equ	0xFEA
 12289                           fsr0l	equ	0xFE9
 12290                           wreg	equ	0xFE8
 12291                           indf1	equ	0xFE7
 12292                           postinc1	equ	0xFE6
 12293                           postdec1	equ	0xFE5
 12294                           fsr1h	equ	0xFE2
 12295                           fsr1l	equ	0xFE1
 12296                           indf2	equ	0xFDF
 12297                           postinc2	equ	0xFDE
 12298                           postdec2	equ	0xFDD
 12299                           plusw2	equ	0xFDB
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function _sendEscapedUartData *****************
 12305 ;; Defined at:
 12306 ;;		line 1988 in file "main.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  c               1    wreg     unsigned char 
 12309 ;;  pcrc            2    7[BANK0 ] PTR unsigned char 
 12310 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 12311 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 12312 ;;		 -> NULL(0), 
 12313 ;; Auto vars:     Size  Location     Type
 12314 ;;  c               1    9[BANK0 ] unsigned char 
 12315 ;; Return value:  Size  Location     Type
 12316 ;;		None               void
 12317 ;; Registers used:
 12318 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12319 ;; Tracked objects:
 12320 ;;		On entry : E/1
 12321 ;;		On exit  : C/0
 12322 ;;		Unchanged: 0/0
 12323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12324 ;;      Params:         0       2       0       0       0       0       0
 12325 ;;      Locals:         0       1       0       0       0       0       0
 12326 ;;      Temps:          0       0       0       0       0       0       0
 12327 ;;      Totals:         0       3       0       0       0       0       0
 12328 ;;Total ram usage:        3 bytes
 12329 ;; Hardware stack levels used:    1
 12330 ;; Hardware stack levels required when called:    5
 12331 ;; This function calls:
 12332 ;;		_WriteUSART
 12333 ;;		_crc8
 12334 ;; This function is called by:
 12335 ;;		_sendVSCPDriverErrorFrame
 12336 ;;		_sendVSCPDriverAck
 12337 ;;		_sendVSCPDriverNack
 12338 ;;		_sendVSCPDriverCommandReply
 12339 ;;		_receiveSendEventCANAL
 12340 ;;		_receiveSendMultiEventCANAL
 12341 ;;		_sendVSCPModeCapabilities
 12342 ;; This function uses a non-reentrant model
 12343 ;;
 12344                           
 12345                           	psect	text19
 12346  006142                     __ptext19:
 12347                           	opt stack 0
 12348  006142                     _sendEscapedUartData:
 12349                           	opt stack 23
 12350                           
 12351                           ;incstack = 0
 12352                           ;incstack = 0
 12353                           ;sendEscapedUartData@c stored from wreg
 12354  006142  CFE8 F069          	movff	wreg,sendEscapedUartData@c
 12355                           
 12356                           ;main.c: 1989: if (0x10 == c) {
 12357  006146  0100               	movlb	0	; () banked
 12358  006148  5169               	movf	sendEscapedUartData@c& (0+255),w,b
 12359  00614A  0A10               	xorlw	16
 12360  00614C  E117               	bnz	l907
 12361  00614E                     l899:
 12362  00614E  A2AC               	btfss	4012,1,c	;volatile
 12363  006150  D7FE               	goto	l899
 12364                           
 12365                           ;main.c: 1992: WriteUSART(0x10);
 12366  006152  0E10               	movlw	16
 12367  006154  EC61  F034         	call	_WriteUSART
 12368  006158                     l902:
 12369  006158  A2AC               	btfss	4012,1,c	;volatile
 12370  00615A  D7FE               	goto	l902
 12371                           
 12372                           ;main.c: 1996: WriteUSART(0x10);
 12373  00615C  0E10               	movlw	16
 12374  00615E  EC61  F034         	call	_WriteUSART
 12375                           
 12376                           ;main.c: 1997: if ((0) != pcrc) crc8(pcrc, 0x10);
 12377  006162  0100               	movlb	0	; () banked
 12378  006164  5168               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 12379  006166  1167               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 12380  006168  E01B               	bz	l911
 12381                           
 12382                           ; BSR set to: 0
 12383  00616A  C067  F01F         	movff	sendEscapedUartData@pcrc,?_crc8
 12384  00616E  C068  F020         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 12385  006172  0E10               	movlw	16
 12386  006174  6E21               	movwf	?_crc8+2,c
 12387  006176  EC48  F033         	call	_crc8	;wreg free
 12388  00617A  D012               	goto	l911
 12389  00617C                     l907:
 12390  00617C  A2AC               	btfss	4012,1,c	;volatile
 12391  00617E  D7FE               	goto	l907
 12392                           
 12393                           ;main.c: 2003: WriteUSART(c);
 12394  006180  0100               	movlb	0	; () banked
 12395  006182  5169               	movf	sendEscapedUartData@c& (0+255),w,b
 12396  006184  EC61  F034         	call	_WriteUSART
 12397                           
 12398                           ;main.c: 2004: if ((0) != pcrc) crc8(pcrc, c);
 12399  006188  0100               	movlb	0	; () banked
 12400  00618A  5168               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 12401  00618C  1167               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 12402  00618E  E008               	bz	l911
 12403                           
 12404                           ; BSR set to: 0
 12405  006190  C067  F01F         	movff	sendEscapedUartData@pcrc,?_crc8
 12406  006194  C068  F020         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 12407  006198  C069  F021         	movff	sendEscapedUartData@c,?_crc8+2
 12408  00619C  EC48  F033         	call	_crc8	;wreg free
 12409  0061A0                     l911:
 12410  0061A0  0012               	return	
 12411  0061A2                     __end_of_sendEscapedUartData:
 12412                           	opt stack 0
 12413                           tblptru	equ	0xFF8
 12414                           tblptrh	equ	0xFF7
 12415                           tblptrl	equ	0xFF6
 12416                           tablat	equ	0xFF5
 12417                           prodh	equ	0xFF4
 12418                           prodl	equ	0xFF3
 12419                           intcon	equ	0xFF2
 12420                           indf0	equ	0xFEF
 12421                           postinc0	equ	0xFEE
 12422                           fsr0h	equ	0xFEA
 12423                           fsr0l	equ	0xFE9
 12424                           wreg	equ	0xFE8
 12425                           indf1	equ	0xFE7
 12426                           postinc1	equ	0xFE6
 12427                           postdec1	equ	0xFE5
 12428                           fsr1h	equ	0xFE2
 12429                           fsr1l	equ	0xFE1
 12430                           indf2	equ	0xFDF
 12431                           postinc2	equ	0xFDE
 12432                           postdec2	equ	0xFDD
 12433                           plusw2	equ	0xFDB
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function _crc8 *****************
 12439 ;; Defined at:
 12440 ;;		line 47 in file "crc8.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;  crc             2   30[COMRAM] PTR unsigned char 
 12443 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 12444 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 12445 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 12446 ;;  m               1   32[COMRAM] unsigned char 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;		None
 12449 ;; Return value:  Size  Location     Type
 12450 ;;		None               void
 12451 ;; Registers used:
 12452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12453 ;; Tracked objects:
 12454 ;;		On entry : F/0
 12455 ;;		On exit  : F/3
 12456 ;;		Unchanged: 0/0
 12457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12458 ;;      Params:         3       0       0       0       0       0       0
 12459 ;;      Locals:         0       0       0       0       0       0       0
 12460 ;;      Temps:          2       0       0       0       0       0       0
 12461 ;;      Totals:         5       0       0       0       0       0       0
 12462 ;;Total ram usage:        5 bytes
 12463 ;; Hardware stack levels used:    1
 12464 ;; Hardware stack levels required when called:    4
 12465 ;; This function calls:
 12466 ;;		_init_crc8
 12467 ;; This function is called by:
 12468 ;;		_sendEscapedUartData
 12469 ;;		_sendVSCPDriverErrorFrame
 12470 ;;		_sendVSCPDriverAck
 12471 ;;		_sendVSCPDriverNack
 12472 ;;		_sendVSCPDriverCommandReply
 12473 ;;		_receiveSendEventCANAL
 12474 ;;		_receiveSendMultiEventCANAL
 12475 ;;		_sendVSCPModeCapabilities
 12476 ;;		_calcCRC
 12477 ;; This function uses a non-reentrant model
 12478 ;;
 12479                           
 12480                           	psect	text20
 12481  006690                     __ptext20:
 12482                           	opt stack 0
 12483  006690                     _crc8:
 12484                           	opt stack 24
 12485                           
 12486                           ; BSR set to: 0
 12487                           ;crc8.c: 48: if ( !made_table ) {
 12488                           
 12489                           ;incstack = 0
 12490                           ;incstack = 0
 12491  006690  0101               	movlb	1	; () banked
 12492  006692  5125               	movf	(_made_table+1)& (0+255),w,b
 12493  006694  1124               	iorwf	_made_table& (0+255),w,b
 12494  006696  B4D8               	btfsc	status,2,c
 12495                           
 12496                           ; BSR set to: 1
 12497                           ;crc8.c: 49: init_crc8();
 12498  006698  EC02  F030         	call	_init_crc8	;wreg free
 12499                           
 12500                           ; BSR set to: 1
 12501                           ;crc8.c: 50: }
 12502                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 12503  00669C  C01F  FFD9         	movff	crc8@crc,fsr2l
 12504  0066A0  C020  FFDA         	movff	crc8@crc+1,fsr2h
 12505  0066A4  50DF               	movf	indf2,w,c
 12506  0066A6  1821               	xorwf	crc8@m,w,c
 12507  0066A8  6E22               	movwf	??_crc8& (0+255),c
 12508  0066AA  6A23               	clrf	(??_crc8+1)& (0+255),c
 12509  0066AC  0103               	movlb	3	; () banked
 12510  0066AE  0E00               	movlw	low _crc8_table
 12511  0066B0  2422               	addwf	??_crc8,w,c
 12512  0066B2  6ED9               	movwf	fsr2l,c
 12513  0066B4  0E03               	movlw	high _crc8_table
 12514  0066B6  2023               	addwfc	??_crc8+1,w,c
 12515  0066B8  6EDA               	movwf	fsr2h,c
 12516  0066BA  C01F  FFE1         	movff	crc8@crc,fsr1l
 12517  0066BE  C020  FFE2         	movff	crc8@crc+1,fsr1h
 12518  0066C2  CFDF FFE7          	movff	indf2,indf1
 12519                           
 12520                           ; BSR set to: 3
 12521  0066C6  0012               	return	
 12522  0066C8                     __end_of_crc8:
 12523                           	opt stack 0
 12524                           tblptru	equ	0xFF8
 12525                           tblptrh	equ	0xFF7
 12526                           tblptrl	equ	0xFF6
 12527                           tablat	equ	0xFF5
 12528                           prodh	equ	0xFF4
 12529                           prodl	equ	0xFF3
 12530                           intcon	equ	0xFF2
 12531                           indf0	equ	0xFEF
 12532                           postinc0	equ	0xFEE
 12533                           fsr0h	equ	0xFEA
 12534                           fsr0l	equ	0xFE9
 12535                           wreg	equ	0xFE8
 12536                           indf1	equ	0xFE7
 12537                           postinc1	equ	0xFE6
 12538                           postdec1	equ	0xFE5
 12539                           fsr1h	equ	0xFE2
 12540                           fsr1l	equ	0xFE1
 12541                           indf2	equ	0xFDF
 12542                           postinc2	equ	0xFDE
 12543                           postdec2	equ	0xFDD
 12544                           plusw2	equ	0xFDB
 12545                           fsr2h	equ	0xFDA
 12546                           fsr2l	equ	0xFD9
 12547                           status	equ	0xFD8
 12548                           
 12549 ;; *************** function _init_crc8 *****************
 12550 ;; Defined at:
 12551 ;;		line 25 in file "crc8.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;		None
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;  i               2    5[BANK0 ] int 
 12556 ;;  j               2    2[BANK0 ] int 
 12557 ;;  crc             1    4[BANK0 ] unsigned char 
 12558 ;; Return value:  Size  Location     Type
 12559 ;;		None               void
 12560 ;; Registers used:
 12561 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12562 ;; Tracked objects:
 12563 ;;		On entry : E/0
 12564 ;;		On exit  : F/1
 12565 ;;		Unchanged: 0/0
 12566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12567 ;;      Params:         0       0       0       0       0       0       0
 12568 ;;      Locals:         0       7       0       0       0       0       0
 12569 ;;      Temps:          0       0       0       0       0       0       0
 12570 ;;      Totals:         0       7       0       0       0       0       0
 12571 ;;Total ram usage:        7 bytes
 12572 ;; Hardware stack levels used:    1
 12573 ;; Hardware stack levels required when called:    3
 12574 ;; This function calls:
 12575 ;;		Nothing
 12576 ;; This function is called by:
 12577 ;;		_main
 12578 ;;		_crc8
 12579 ;; This function uses a non-reentrant model
 12580 ;;
 12581                           
 12582                           	psect	text21
 12583  006004                     __ptext21:
 12584                           	opt stack 0
 12585  006004                     _init_crc8:
 12586                           	opt stack 24
 12587                           
 12588                           ;crc8.c: 26: int i,j;
 12589                           ;crc8.c: 27: unsigned char crc;
 12590                           ;crc8.c: 29: if (!made_table) {
 12591                           
 12592                           ; BSR set to: 3
 12593                           ;incstack = 0
 12594                           ;incstack = 0
 12595  006004  0101               	movlb	1	; () banked
 12596  006006  5125               	movf	(_made_table+1)& (0+255),w,b
 12597  006008  1124               	iorwf	_made_table& (0+255),w,b
 12598  00600A  E133               	bnz	l1711
 12599                           
 12600                           ; BSR set to: 1
 12601                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 12602  00600C  0100               	movlb	0	; () banked
 12603  00600E  6B65               	clrf	init_crc8@i& (0+255),b
 12604  006010  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 12605  006012                     l1703:
 12606                           
 12607                           ; BSR set to: 0
 12608                           ;crc8.c: 31: crc = i;
 12609  006012  C065  F064         	movff	init_crc8@i,init_crc8@crc
 12610                           
 12611                           ;crc8.c: 32: for (j=0; j<8; j++) {
 12612  006016  6B62               	clrf	init_crc8@j& (0+255),b
 12613  006018  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 12614  00601A                     l1705:
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 12618  00601A  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 12619  00601C  D003               	goto	l15099
 12620                           
 12621                           ; BSR set to: 0
 12622  00601E  6B60               	clrf	_init_crc8$2193& (0+255),b
 12623  006020  6B61               	clrf	(_init_crc8$2193+1)& (0+255),b
 12624  006022  D003               	goto	l15101
 12625  006024                     l15099:
 12626                           
 12627                           ; BSR set to: 0
 12628  006024  6B61               	clrf	(_init_crc8$2193+1)& (0+255),b
 12629  006026  0E07               	movlw	7
 12630  006028  6F60               	movwf	_init_crc8$2193& (0+255),b
 12631  00602A                     l15101:
 12632                           
 12633                           ; BSR set to: 0
 12634  00602A  5164               	movf	init_crc8@crc& (0+255),w,b
 12635  00602C  2564               	addwf	init_crc8@crc& (0+255),w,b
 12636  00602E  1960               	xorwf	_init_crc8$2193& (0+255),w,b
 12637  006030  6F64               	movwf	init_crc8@crc& (0+255),b
 12638                           
 12639                           ; BSR set to: 0
 12640  006032  4B62               	infsnz	init_crc8@j& (0+255),f,b
 12641  006034  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 12642                           
 12643                           ; BSR set to: 0
 12644  006036  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 12645  006038  0A80               	xorlw	128
 12646  00603A  0F80               	addlw	-128
 12647  00603C  0E08               	movlw	8
 12648  00603E  B4D8               	btfsc	status,2,c
 12649  006040  5D62               	subwf	init_crc8@j& (0+255),w,b
 12650  006042  E3EB               	bnc	l1705
 12651                           
 12652                           ; BSR set to: 0
 12653                           ;crc8.c: 34: }
 12654                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 12655  006044  0E00               	movlw	low _crc8_table
 12656  006046  0100               	movlb	0	; () banked
 12657  006048  2565               	addwf	init_crc8@i& (0+255),w,b
 12658  00604A  6ED9               	movwf	fsr2l,c
 12659  00604C  0E03               	movlw	high _crc8_table
 12660  00604E  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 12661  006050  6EDA               	movwf	fsr2h,c
 12662  006052  C064  FFDF         	movff	init_crc8@crc,indf2
 12663                           
 12664                           ; BSR set to: 0
 12665  006056  4B65               	infsnz	init_crc8@i& (0+255),f,b
 12666  006058  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 12667                           
 12668                           ; BSR set to: 0
 12669  00605A  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 12670  00605C  0A80               	xorlw	128
 12671  00605E  0F7F               	addlw	-129
 12672  006060  0E00               	movlw	0
 12673  006062  B4D8               	btfsc	status,2,c
 12674  006064  5D65               	subwf	init_crc8@i& (0+255),w,b
 12675  006066  E3D5               	bnc	l1703
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;crc8.c: 37: }
 12679                           ;crc8.c: 38: made_table=1;
 12680  006068  0E00               	movlw	0
 12681  00606A  0101               	movlb	1	; () banked
 12682  00606C  6F25               	movwf	(_made_table+1)& (0+255),b
 12683  00606E  0E01               	movlw	1
 12684  006070  6F24               	movwf	_made_table& (0+255),b
 12685  006072                     l1711:
 12686                           
 12687                           ; BSR set to: 1
 12688  006072  0012               	return	
 12689  006074                     __end_of_init_crc8:
 12690                           	opt stack 0
 12691                           tblptru	equ	0xFF8
 12692                           tblptrh	equ	0xFF7
 12693                           tblptrl	equ	0xFF6
 12694                           tablat	equ	0xFF5
 12695                           prodh	equ	0xFF4
 12696                           prodl	equ	0xFF3
 12697                           intcon	equ	0xFF2
 12698                           indf0	equ	0xFEF
 12699                           postinc0	equ	0xFEE
 12700                           fsr0h	equ	0xFEA
 12701                           fsr0l	equ	0xFE9
 12702                           wreg	equ	0xFE8
 12703                           indf1	equ	0xFE7
 12704                           postinc1	equ	0xFE6
 12705                           postdec1	equ	0xFE5
 12706                           fsr1h	equ	0xFE2
 12707                           fsr1l	equ	0xFE1
 12708                           indf2	equ	0xFDF
 12709                           postinc2	equ	0xFDE
 12710                           postdec2	equ	0xFDD
 12711                           plusw2	equ	0xFDB
 12712                           fsr2h	equ	0xFDA
 12713                           fsr2l	equ	0xFD9
 12714                           status	equ	0xFD8
 12715                           
 12716 ;; *************** function _doModeVerbose *****************
 12717 ;; Defined at:
 12718 ;;		line 629 in file "main.c"
 12719 ;; Parameters:    Size  Location     Type
 12720 ;;		None
 12721 ;; Auto vars:     Size  Location     Type
 12722 ;;  baud            4    0        unsigned long 
 12723 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 12724 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12725 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12726 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12727 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12728 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12729 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12730 ;;		 -> cmdbuf(80), 
 12731 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 12732 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12733 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12734 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12735 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12736 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12737 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12738 ;;		 -> cmdbuf(80), 
 12739 ;;  id              4   64[BANK2 ] unsigned long 
 12740 ;;  p               2   68[BANK2 ] PTR unsigned char 
 12741 ;;		 -> NULL(0), cmdbuf(80), 
 12742 ;;  mask_class      2   10[BANK2 ] unsigned short 
 12743 ;;  maskno          1   50[BANK2 ] unsigned char 
 12744 ;;  bPersistent     1    0        enum E15660
 12745 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 12746 ;;  mask_type       1   16[BANK2 ] unsigned char 
 12747 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 12748 ;;  id              4    0[BANK2 ] unsigned long 
 12749 ;;  p               2   70[BANK2 ] PTR unsigned char 
 12750 ;;		 -> NULL(0), cmdbuf(80), 
 12751 ;;  filter_class    2    8[BANK2 ] unsigned short 
 12752 ;;  filterno        1   44[BANK2 ] unsigned char 
 12753 ;;  bPersistent     1   43[BANK2 ] enum E15660
 12754 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 12755 ;;  filter_type     1   13[BANK2 ] unsigned char 
 12756 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 12757 ;;  nodeid          1   54[BANK2 ] unsigned char 
 12758 ;;  value           1   42[BANK2 ] unsigned char 
 12759 ;;  p               2   59[BANK2 ] PTR unsigned char 
 12760 ;;		 -> NULL(0), cmdbuf(80), 
 12761 ;;  nodeid          1   49[BANK2 ] unsigned char 
 12762 ;;  value           1   46[BANK2 ] unsigned char 
 12763 ;;  reg             1   41[BANK2 ] unsigned char 
 12764 ;;  page            1   40[BANK2 ] unsigned char 
 12765 ;;  p               2   57[BANK2 ] PTR unsigned char 
 12766 ;;		 -> NULL(0), cmdbuf(80), 
 12767 ;;  value           1   56[BANK2 ] unsigned char 
 12768 ;;  i               1   53[BANK2 ] unsigned char 
 12769 ;;  reg             1   52[BANK2 ] unsigned char 
 12770 ;;  page            1   51[BANK2 ] unsigned char 
 12771 ;;  nodeid          1   48[BANK2 ] unsigned char 
 12772 ;;  count           1   47[BANK2 ] unsigned char 
 12773 ;;  rv              1   39[BANK2 ] enum E15660
 12774 ;;  p               2   62[BANK2 ] PTR unsigned char 
 12775 ;;		 -> NULL(0), cmdbuf(80), 
 12776 ;;  ifmode          1   61[BANK2 ] enum E16362
 12777 ;;  c               1   55[BANK2 ] unsigned char 
 12778 ;;  i               1   45[BANK2 ] unsigned char 
 12779 ;; Return value:  Size  Location     Type
 12780 ;;		None               void
 12781 ;; Registers used:
 12782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12783 ;; Tracked objects:
 12784 ;;		On entry : F/1
 12785 ;;		On exit  : D/0
 12786 ;;		Unchanged: 0/0
 12787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12788 ;;      Params:         0       0       0       0       0       0       0
 12789 ;;      Locals:         0       0       0      72       0       0       0
 12790 ;;      Temps:          0      20       0       0       0       0       0
 12791 ;;      Totals:         0      20       0      72       0       0       0
 12792 ;;Total ram usage:       92 bytes
 12793 ;; Hardware stack levels used:    1
 12794 ;; Hardware stack levels required when called:   10
 12795 ;; This function calls:
 12796 ;;		_vscp_restoreDefaults
 12797 ;;		_putsUSART
 12798 ;;		_printFirmwareVersion
 12799 ;;		_fifo_read
 12800 ;;		_ECANSetOperationMode
 12801 ;;		_OpenUSART
 12802 ;;		_setFilter
 12803 ;;		__CANIDToRegs
 12804 ;;		_Busy_eep
 12805 ;;		_Write_b_eep
 12806 ;;		_receivePrintEventVerbose
 12807 ;;		_WriteUSART
 12808 ;;		_stristr
 12809 ;;		_strtok
 12810 ;;		_atoi
 12811 ;;		_memset
 12812 ;;		_sendVSCPFrame
 12813 ;;		_printStatistics
 12814 ;;		_printErrors
 12815 ;;		_printHelp
 12816 ;;		_findNodes
 12817 ;;		_strcpy
 12818 ;;		_strchr
 12819 ;;		_readRegisterExtended
 12820 ;;		_sprintf
 12821 ;;		_printBinary
 12822 ;;		_writeRegisterExtended
 12823 ;;		_printNodeFirmwareVersion
 12824 ;;		_printGUID
 12825 ;;		_printMDF
 12826 ;; This function is called by:
 12827 ;;		_main
 12828 ;; This function uses a non-reentrant model
 12829 ;;
 12830                           
 12831                           	psect	text22
 12832  000752                     __ptext22:
 12833                           	opt stack 0
 12834  000752                     _doModeVerbose:
 12835                           	opt stack 20
 12836                           
 12837                           ; BSR set to: 1
 12838                           ;main.c: 630: uint8_t c;
 12839                           ;main.c: 631: uint8_t i;
 12840                           ;main.c: 634: if (!bSilent) {
 12841                           
 12842                           ; BSR set to: 1
 12843                           ;incstack = 0
 12844                           ;incstack = 0
 12845  000752  662E               	tstfsz	_bSilent,c
 12846  000754  D002               	goto	l15247
 12847                           
 12848                           ; BSR set to: 1
 12849                           ;main.c: 635: receivePrintEventVerbose();
 12850  000756  EC89  F015         	call	_receivePrintEventVerbose	;wreg free
 12851  00075A                     l15247:
 12852                           
 12853                           ;main.c: 636: }
 12854                           ;main.c: 639: (INTCONbits.GIE = 0);
 12855  00075A  9EF2               	bcf	intcon,7,c	;volatile
 12856                           
 12857                           ;main.c: 641: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 12858  00075C  0E01               	movlw	high _serialInputFifo
 12859  00075E  0100               	movlb	0	; () banked
 12860  000760  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 12861  000762  0EDD               	movlw	low _serialInputFifo
 12862  000764  6F60               	movwf	?_fifo_read& (0+255),b
 12863  000766  0E02               	movlw	high doModeVerbose@c
 12864  000768  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 12865  00076A  0EB7               	movlw	low doModeVerbose@c
 12866  00076C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 12867  00076E  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 12868  000770  0E01               	movlw	1
 12869  000772  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 12870  000774  ECC5  F028         	call	_fifo_read	;wreg free
 12871  000778  0560               	decf	?_fifo_read& (0+255),w,b
 12872  00077A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 12873  00077C  E002 EF18  F00F    	bnz	l16153
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 644: (INTCONbits.GIE = 1);
 12877  000782  8EF2               	bsf	intcon,7,c	;volatile
 12878                           
 12879                           ; BSR set to: 0
 12880                           ;main.c: 647: if ( bLocalEcho ) {
 12881  000784  0101               	movlb	1	; () banked
 12882  000786  512A               	movf	_bLocalEcho& (0+255),w,b
 12883  000788  E00F               	bz	l15261
 12884                           
 12885                           ; BSR set to: 1
 12886                           ;main.c: 648: WriteUSART( c );
 12887  00078A  0102               	movlb	2	; () banked
 12888  00078C  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12889  00078E  EC61  F034         	call	_WriteUSART
 12890  000792                     l519:
 12891  000792  A2AC               	btfss	4012,1,c	;volatile
 12892  000794  D7FE               	goto	l519
 12893                           
 12894                           ;main.c: 650: if ( 0x0d == c ) {
 12895  000796  0102               	movlb	2	; () banked
 12896  000798  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12897  00079A  0A0D               	xorlw	13
 12898  00079C  E105               	bnz	l15261
 12899                           
 12900                           ; BSR set to: 2
 12901                           ;main.c: 651: WriteUSART( 0x0a );
 12902  00079E  0E0A               	movlw	10
 12903  0007A0  EC61  F034         	call	_WriteUSART
 12904  0007A4                     l523:
 12905  0007A4  A2AC               	btfss	4012,1,c	;volatile
 12906  0007A6  D7FE               	goto	l523
 12907  0007A8                     l15261:
 12908                           
 12909                           ;main.c: 653: }
 12910                           ;main.c: 654: }
 12911                           ;main.c: 657: cmdbuf[ pos++ ] = c;
 12912  0007A8  0E2D               	movlw	low _cmdbuf
 12913  0007AA  2432               	addwf	_pos,w,c
 12914  0007AC  6ED9               	movwf	fsr2l,c
 12915  0007AE  6ADA               	clrf	fsr2h,c
 12916  0007B0  0E01               	movlw	high _cmdbuf
 12917  0007B2  22DA               	addwfc	fsr2h,f,c
 12918  0007B4  0102               	movlb	2	; () banked
 12919  0007B6  C2B7  FFDF         	movff	doModeVerbose@c,indf2
 12920                           
 12921                           ; BSR set to: 2
 12922  0007BA  2A32               	incf	_pos,f,c
 12923                           
 12924                           ; BSR set to: 2
 12925                           ;main.c: 658: if (pos >= sizeof( cmdbuf ) ) {
 12926  0007BC  0E4F               	movlw	79
 12927  0007BE  6432               	cpfsgt	_pos,c
 12928  0007C0  D001               	goto	l15269
 12929                           
 12930                           ; BSR set to: 2
 12931                           ;main.c: 661: pos = 0;
 12932  0007C2  6A32               	clrf	_pos,c
 12933  0007C4                     l15269:
 12934                           
 12935                           ; BSR set to: 2
 12936                           ;main.c: 662: }
 12937                           ;main.c: 665: if (0x0d == c) {
 12938  0007C4  51B7               	movf	doModeVerbose@c& (0+255),w,b
 12939  0007C6  0A0D               	xorlw	13
 12940  0007C8  E002 EF18  F00F    	bnz	l16153
 12941                           
 12942                           ; BSR set to: 2
 12943                           ;main.c: 667: cmdbuf[ pos ] = 0;
 12944  0007CE  0E2D               	movlw	low _cmdbuf
 12945  0007D0  2432               	addwf	_pos,w,c
 12946  0007D2  6ED9               	movwf	fsr2l,c
 12947  0007D4  6ADA               	clrf	fsr2h,c
 12948  0007D6  0E01               	movlw	high _cmdbuf
 12949  0007D8  22DA               	addwfc	fsr2h,f,c
 12950  0007DA  6ADF               	clrf	indf2,c
 12951                           
 12952                           ; BSR set to: 1
 12953                           ;main.c: 670: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12954  0007DC  0100               	movlb	0	; () banked
 12955  0007DE  6F69               	movwf	(?_stristr+1)& (0+255),b
 12956  0007E0  0E2D               	movlw	low _cmdbuf
 12957  0007E2  6F68               	movwf	?_stristr& (0+255),b
 12958  0007E4  0E7F               	movlw	high STR_6
 12959  0007E6  6F6B               	movwf	(?_stristr+3)& (0+255),b
 12960  0007E8  0EC1               	movlw	low STR_6
 12961  0007EA  6F6A               	movwf	(?_stristr+2)& (0+255),b
 12962  0007EC  EC16  F02F         	call	_stristr	;wreg free
 12963  0007F0  0E2D               	movlw	low _cmdbuf
 12964  0007F2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 12965  0007F4  0E01               	movlw	high _cmdbuf
 12966  0007F6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 12967  0007F8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 12968  0007FA  E102               	bnz	u19305
 12969  0007FC  5168               	movf	?_stristr& (0+255),w,b
 12970  0007FE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 12971  000800                     u19305:
 12972  000800  E111               	bnz	l15281
 12973                           
 12974                           ; BSR set to: 0
 12975                           ;main.c: 671: putsUSART((char *) "Will enter bootloader now...\r\n");
 12976  000802  0E79               	movlw	high STR_7
 12977  000804  6E21               	movwf	?_putsUSART+1,c
 12978  000806  0EEC               	movlw	low STR_7
 12979  000808  6E20               	movwf	?_putsUSART,c
 12980  00080A  ECB5  F031         	call	_putsUSART	;wreg free
 12981                           
 12982                           ;main.c: 672: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12983  00080E  EC9D  F034         	call	_Busy_eep	;wreg free
 12984  000812  6A20               	clrf	?_Write_b_eep+1,c
 12985  000814  6A1F               	clrf	?_Write_b_eep,c
 12986  000816  0EFF               	movlw	255
 12987  000818  6821               	setf	?_Write_b_eep+2,c
 12988  00081A  EC80  F033         	call	_Write_b_eep	;wreg free
 12989  00081E  00FF               	reset		;# 
 12990                           
 12991                           ;main.c: 674: }
 12992  000820  EF0F  F00F         	goto	l16149
 12993  000824                     l15281:
 12994                           
 12995                           ; BSR set to: 0
 12996                           ;main.c: 676: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12997  000824  ECC2  F00F         	call	PL76	;call to abstracted procedure
 12998  000828  EC16  F02F         	call	_stristr	;wreg free
 12999  00082C  0E2D               	movlw	low _cmdbuf
 13000  00082E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13001  000830  0E01               	movlw	high _cmdbuf
 13002  000832  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13003  000834  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13004  000836  E102               	bnz	u19315
 13005  000838  5168               	movf	?_stristr& (0+255),w,b
 13006  00083A  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13007  00083C                     u19315:
 13008  00083C  E10C               	bnz	l15289
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;main.c: 677: bSilent = 0;
 13012  00083E  6A2E               	clrf	_bSilent,c
 13013                           
 13014                           ; BSR set to: 0
 13015                           ;main.c: 678: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 13016  000840  0E00               	movlw	0
 13017  000842  EC4A  F034         	call	_ECANSetOperationMode
 13018                           
 13019                           ;main.c: 679: putsUSART((char *) "+OK\r\n");
 13020  000846  0E7F               	movlw	high STR_9
 13021  000848  6E21               	movwf	?_putsUSART+1,c
 13022  00084A  0E6B               	movlw	low STR_9
 13023  00084C  6E20               	movwf	?_putsUSART,c
 13024  00084E  ECB5  F031         	call	_putsUSART	;wreg free
 13025                           
 13026                           ;main.c: 680: }
 13027  000852  EF0F  F00F         	goto	l16149
 13028  000856                     l15289:
 13029                           
 13030                           ; BSR set to: 0
 13031                           ;main.c: 682: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 13032  000856  0E01               	movlw	high _cmdbuf
 13033  000858  ECCC  F00F         	call	PL90	;call to abstracted procedure
 13034  00085C  EC16  F02F         	call	_stristr	;wreg free
 13035  000860  0E2D               	movlw	low _cmdbuf
 13036  000862  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13037  000864  0E01               	movlw	high _cmdbuf
 13038  000866  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13039  000868  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13040  00086A  E102               	bnz	u19325
 13041  00086C  5168               	movf	?_stristr& (0+255),w,b
 13042  00086E  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13043  000870                     u19325:
 13044  000870  E10D               	bnz	l15297
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;main.c: 683: bSilent = 1;
 13048  000872  0E01               	movlw	1
 13049  000874  6E2E               	movwf	_bSilent,c
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;main.c: 684: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 13053  000876  0E00               	movlw	0
 13054  000878  EC4A  F034         	call	_ECANSetOperationMode
 13055                           
 13056                           ;main.c: 685: putsUSART((char *) "+OK\r\n");
 13057  00087C  0E7F               	movlw	high STR_9
 13058  00087E  6E21               	movwf	?_putsUSART+1,c
 13059  000880  0E6B               	movlw	low STR_9
 13060  000882  6E20               	movwf	?_putsUSART,c
 13061  000884  ECB5  F031         	call	_putsUSART	;wreg free
 13062                           
 13063                           ;main.c: 686: }
 13064  000888  EF0F  F00F         	goto	l16149
 13065  00088C                     l15297:
 13066                           
 13067                           ; BSR set to: 0
 13068                           ;main.c: 688: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 13069  00088C  0E01               	movlw	high _cmdbuf
 13070  00088E  0100               	movlb	0	; () banked
 13071  000890  ECD5  F00F         	call	PL106	;call to abstracted procedure
 13072  000894  EC16  F02F         	call	_stristr	;wreg free
 13073  000898  0E2D               	movlw	low _cmdbuf
 13074  00089A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13075  00089C  0E01               	movlw	high _cmdbuf
 13076  00089E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13077  0008A0  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13078  0008A2  E102               	bnz	u19335
 13079  0008A4  5168               	movf	?_stristr& (0+255),w,b
 13080  0008A6  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13081  0008A8                     u19335:
 13082  0008A8  E10D               	bnz	l15305
 13083                           
 13084                           ; BSR set to: 0
 13085                           ;main.c: 689: bSilent = 1;
 13086  0008AA  0E01               	movlw	1
 13087  0008AC  6E2E               	movwf	_bSilent,c
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;main.c: 690: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 13091  0008AE  0E80               	movlw	128
 13092  0008B0  EC4A  F034         	call	_ECANSetOperationMode
 13093                           
 13094                           ;main.c: 691: putsUSART((char *) "+OK\r\n");
 13095  0008B4  0E7F               	movlw	high STR_9
 13096  0008B6  6E21               	movwf	?_putsUSART+1,c
 13097  0008B8  0E6B               	movlw	low STR_9
 13098  0008BA  6E20               	movwf	?_putsUSART,c
 13099  0008BC  ECB5  F031         	call	_putsUSART	;wreg free
 13100                           
 13101                           ;main.c: 692: }
 13102  0008C0  EF0F  F00F         	goto	l16149
 13103  0008C4                     l15305:
 13104                           
 13105                           ; BSR set to: 0
 13106                           ;main.c: 694: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 13107  0008C4  0E01               	movlw	high _cmdbuf
 13108  0008C6  0100               	movlb	0	; () banked
 13109  0008C8  ECF5  F00F         	call	PL124	;call to abstracted procedure
 13110  0008CC  EC16  F02F         	call	_stristr	;wreg free
 13111  0008D0  0E2D               	movlw	low _cmdbuf
 13112  0008D2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13113  0008D4  0E01               	movlw	high _cmdbuf
 13114  0008D6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13115  0008D8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13116  0008DA  E102               	bnz	u19345
 13117  0008DC  5168               	movf	?_stristr& (0+255),w,b
 13118  0008DE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13119  0008E0                     u19345:
 13120  0008E0  E10C               	bnz	l15313
 13121                           
 13122                           ; BSR set to: 0
 13123                           ;main.c: 695: bSilent = 0;
 13124  0008E2  6A2E               	clrf	_bSilent,c
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;main.c: 696: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 13128  0008E4  0E40               	movlw	64
 13129  0008E6  EC4A  F034         	call	_ECANSetOperationMode
 13130                           
 13131                           ;main.c: 697: putsUSART((char *) "+OK\r\n");
 13132  0008EA  0E7F               	movlw	high STR_9
 13133  0008EC  6E21               	movwf	?_putsUSART+1,c
 13134  0008EE  0E6B               	movlw	low STR_9
 13135  0008F0  6E20               	movwf	?_putsUSART,c
 13136  0008F2  ECB5  F031         	call	_putsUSART	;wreg free
 13137                           
 13138                           ;main.c: 698: }
 13139  0008F6  EF0F  F00F         	goto	l16149
 13140  0008FA                     l15313:
 13141                           
 13142                           ; BSR set to: 0
 13143                           ;main.c: 700: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 13144  0008FA  0E01               	movlw	high _cmdbuf
 13145  0008FC  0100               	movlb	0	; () banked
 13146  0008FE  ECED  F00F         	call	PL122	;call to abstracted procedure
 13147  000902  EC16  F02F         	call	_stristr	;wreg free
 13148  000906  0E2D               	movlw	low _cmdbuf
 13149  000908  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13150  00090A  0E01               	movlw	high _cmdbuf
 13151  00090C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13152  00090E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13153  000910  E102               	bnz	u19355
 13154  000912  5168               	movf	?_stristr& (0+255),w,b
 13155  000914  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13156  000916                     u19355:
 13157  000916  E10C               	bnz	l15321
 13158                           
 13159                           ; BSR set to: 0
 13160                           ;main.c: 701: bSilent = 0;
 13161  000918  6A2E               	clrf	_bSilent,c
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;main.c: 702: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 13165  00091A  0E60               	movlw	96
 13166  00091C  EC4A  F034         	call	_ECANSetOperationMode
 13167                           
 13168                           ;main.c: 703: putsUSART((char *) "+OK\r\n");
 13169  000920  0E7F               	movlw	high STR_9
 13170  000922  6E21               	movwf	?_putsUSART+1,c
 13171  000924  0E6B               	movlw	low STR_9
 13172  000926  6E20               	movwf	?_putsUSART,c
 13173  000928  ECB5  F031         	call	_putsUSART	;wreg free
 13174                           
 13175                           ;main.c: 704: }
 13176  00092C  EF0F  F00F         	goto	l16149
 13177  000930                     l15321:
 13178                           
 13179                           ; BSR set to: 0
 13180                           ;main.c: 706: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 13181  000930  0E01               	movlw	high _cmdbuf
 13182  000932  0100               	movlb	0	; () banked
 13183  000934  6F69               	movwf	(?_stristr+1)& (0+255),b
 13184  000936  0E2D               	movlw	low _cmdbuf
 13185  000938  6F68               	movwf	?_stristr& (0+255),b
 13186  00093A  0E7E               	movlw	high STR_18
 13187  00093C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13188  00093E  0EF9               	movlw	low STR_18
 13189  000940  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13190  000942  EC16  F02F         	call	_stristr	;wreg free
 13191  000946  0E2D               	movlw	low _cmdbuf
 13192  000948  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13193  00094A  0E01               	movlw	high _cmdbuf
 13194  00094C  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13195  00094E  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13196  000950  E102               	bnz	u19365
 13197  000952  5168               	movf	?_stristr& (0+255),w,b
 13198  000954  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13199  000956                     u19365:
 13200  000956  E10A               	bnz	l15327
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;main.c: 707: printFirmwareVersion();
 13204  000958  EC4B  F02E         	call	_printFirmwareVersion	;wreg free
 13205                           
 13206                           ;main.c: 708: putsUSART((char *) "+OK\r\n");
 13207  00095C  0E7F               	movlw	high STR_9
 13208  00095E  6E21               	movwf	?_putsUSART+1,c
 13209  000960  0E6B               	movlw	low STR_9
 13210  000962  6E20               	movwf	?_putsUSART,c
 13211  000964  ECB5  F031         	call	_putsUSART	;wreg free
 13212                           
 13213                           ;main.c: 709: }
 13214  000968  EF0F  F00F         	goto	l16149
 13215  00096C                     l15327:
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;main.c: 711: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 13219  00096C  0E01               	movlw	high _cmdbuf
 13220  00096E  0100               	movlb	0	; () banked
 13221  000970  6F69               	movwf	(?_stristr+1)& (0+255),b
 13222  000972  0E2D               	movlw	low _cmdbuf
 13223  000974  6F68               	movwf	?_stristr& (0+255),b
 13224  000976  0E7F               	movlw	high STR_20
 13225  000978  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13226  00097A  0E34               	movlw	low STR_20
 13227  00097C  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13228  00097E  EC16  F02F         	call	_stristr	;wreg free
 13229  000982  0E2D               	movlw	low _cmdbuf
 13230  000984  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13231  000986  0E01               	movlw	high _cmdbuf
 13232  000988  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13233  00098A  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13234  00098C  E102               	bnz	u19375
 13235  00098E  5168               	movf	?_stristr& (0+255),w,b
 13236  000990  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13237  000992                     u19375:
 13238  000992  E15D               	bnz	l15363
 13239                           
 13240                           ; BSR set to: 0
 13241                           ;main.c: 712: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 13242  000994  506F               	movf	3951,w,c	;volatile
 13243  000996  0BE0               	andlw	224
 13244  000998  0102               	movlb	2	; () banked
 13245  00099A  6FBD               	movwf	doModeVerbose@ifmode& (0+255),b
 13246                           
 13247                           ; BSR set to: 2
 13248                           ;main.c: 713: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 13249  00099C  67BD               	tstfsz	doModeVerbose@ifmode& (0+255),b
 13250  00099E  D00A               	goto	l15337
 13251                           
 13252                           ; BSR set to: 2
 13253  0009A0  662E               	tstfsz	_bSilent,c
 13254  0009A2  D008               	goto	l15337
 13255                           
 13256                           ; BSR set to: 2
 13257                           ;main.c: 714: putsUSART((char *) "+OK - Normal mode\r\n");
 13258  0009A4  0E7D               	movlw	high STR_21
 13259  0009A6  6E21               	movwf	?_putsUSART+1,c
 13260  0009A8  0E0E               	movlw	low STR_21
 13261  0009AA  6E20               	movwf	?_putsUSART,c
 13262  0009AC  ECB5  F031         	call	_putsUSART	;wreg free
 13263                           
 13264                           ;main.c: 715: }
 13265  0009B0  EF0F  F00F         	goto	l16149
 13266  0009B4                     l15337:
 13267                           
 13268                           ; BSR set to: 2
 13269                           ;main.c: 716: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 13270  0009B4  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13271  0009B6  0E01               	movlw	1
 13272  0009B8  A4D8               	btfss	status,2,c
 13273  0009BA  0E00               	movlw	0
 13274  0009BC  142E               	andwf	_bSilent,w,c
 13275  0009BE  E008               	bz	l15341
 13276                           
 13277                           ; BSR set to: 2
 13278                           ;main.c: 717: putsUSART((char *) "+OK - Silent mode\r\n");
 13279  0009C0  0E7D               	movlw	high STR_22
 13280  0009C2  6E21               	movwf	?_putsUSART+1,c
 13281  0009C4  0E22               	movlw	low STR_22
 13282  0009C6  6E20               	movwf	?_putsUSART,c
 13283  0009C8  ECB5  F031         	call	_putsUSART	;wreg free
 13284                           
 13285                           ;main.c: 718: }
 13286  0009CC  EF0F  F00F         	goto	l16149
 13287  0009D0                     l15341:
 13288                           
 13289                           ; BSR set to: 2
 13290                           ;main.c: 719: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 13291  0009D0  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13292  0009D2  0A20               	xorlw	32
 13293  0009D4  E108               	bnz	l15345
 13294                           
 13295                           ; BSR set to: 2
 13296                           ;main.c: 720: putsUSART((char *) "+OK - Sleep mode\r\n");
 13297  0009D6  0E7D               	movlw	high STR_23
 13298  0009D8  6E21               	movwf	?_putsUSART+1,c
 13299  0009DA  0E5E               	movlw	low STR_23
 13300  0009DC  6E20               	movwf	?_putsUSART,c
 13301  0009DE  ECB5  F031         	call	_putsUSART	;wreg free
 13302                           
 13303                           ;main.c: 721: }
 13304  0009E2  EF0F  F00F         	goto	l16149
 13305  0009E6                     l15345:
 13306                           
 13307                           ; BSR set to: 2
 13308                           ;main.c: 722: else if (ECAN_OP_MODE_LOOP == ifmode) {
 13309  0009E6  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13310  0009E8  0A40               	xorlw	64
 13311  0009EA  E108               	bnz	l15349
 13312                           
 13313                           ; BSR set to: 2
 13314                           ;main.c: 723: putsUSART((char *) "+OK - Loopback mode\r\n");
 13315  0009EC  0E7C               	movlw	high STR_24
 13316  0009EE  6E21               	movwf	?_putsUSART+1,c
 13317  0009F0  0E50               	movlw	low STR_24
 13318  0009F2  6E20               	movwf	?_putsUSART,c
 13319  0009F4  ECB5  F031         	call	_putsUSART	;wreg free
 13320                           
 13321                           ;main.c: 724: }
 13322  0009F8  EF0F  F00F         	goto	l16149
 13323  0009FC                     l15349:
 13324                           
 13325                           ; BSR set to: 2
 13326                           ;main.c: 725: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 13327  0009FC  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13328  0009FE  0A60               	xorlw	96
 13329  000A00  E108               	bnz	l15353
 13330                           
 13331                           ; BSR set to: 2
 13332                           ;main.c: 726: putsUSART((char *) "+OK - Listen only mode\r\n");
 13333  000A02  0E7A               	movlw	high STR_25
 13334  000A04  6E21               	movwf	?_putsUSART+1,c
 13335  000A06  0EE9               	movlw	low STR_25
 13336  000A08  6E20               	movwf	?_putsUSART,c
 13337  000A0A  ECB5  F031         	call	_putsUSART	;wreg free
 13338                           
 13339                           ;main.c: 727: }
 13340  000A0E  EF0F  F00F         	goto	l16149
 13341  000A12                     l15353:
 13342                           
 13343                           ; BSR set to: 2
 13344                           ;main.c: 728: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 13345  000A12  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13346  000A14  0A80               	xorlw	128
 13347  000A16  E108               	bnz	l15357
 13348                           
 13349                           ; BSR set to: 2
 13350                           ;main.c: 729: putsUSART((char *) "+OK - Closed mode\r\n");
 13351  000A18  0E7C               	movlw	high STR_26
 13352  000A1A  6E21               	movwf	?_putsUSART+1,c
 13353  000A1C  0EFA               	movlw	low STR_26
 13354  000A1E  6E20               	movwf	?_putsUSART,c
 13355  000A20  ECB5  F031         	call	_putsUSART	;wreg free
 13356                           
 13357                           ;main.c: 730: }
 13358  000A24  EF0F  F00F         	goto	l16149
 13359  000A28                     l15357:
 13360                           
 13361                           ; BSR set to: 2
 13362                           ;main.c: 731: else if (ECAN_OP_MODE_BITS == ifmode) {
 13363  000A28  51BD               	movf	doModeVerbose@ifmode& (0+255),w,b
 13364  000A2A  0AE0               	xorlw	224
 13365  000A2C  E108               	bnz	l15361
 13366                           
 13367                           ; BSR set to: 2
 13368                           ;main.c: 732: putsUSART((char *) "+OK - Bits mode\r\n");
 13369  000A2E  0E7D               	movlw	high STR_27
 13370  000A30  6E21               	movwf	?_putsUSART+1,c
 13371  000A32  0E71               	movlw	low STR_27
 13372  000A34  6E20               	movwf	?_putsUSART,c
 13373  000A36  ECB5  F031         	call	_putsUSART	;wreg free
 13374                           
 13375                           ;main.c: 733: }
 13376  000A3A  EF0F  F00F         	goto	l16149
 13377  000A3E                     l15361:
 13378                           
 13379                           ; BSR set to: 2
 13380                           ;main.c: 734: else {
 13381                           ;main.c: 735: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 13382  000A3E  0E7B               	movlw	high STR_28
 13383  000A40  6E21               	movwf	?_putsUSART+1,c
 13384  000A42  0E7C               	movlw	low STR_28
 13385  000A44  6E20               	movwf	?_putsUSART,c
 13386  000A46  ECB5  F031         	call	_putsUSART	;wreg free
 13387  000A4A  EF0F  F00F         	goto	l16149
 13388  000A4E                     l15363:
 13389                           
 13390                           ; BSR set to: 0
 13391                           ;main.c: 740: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 13392  000A4E  0E01               	movlw	high _cmdbuf
 13393  000A50  0100               	movlb	0	; () banked
 13394  000A52  6F69               	movwf	(?_stristr+1)& (0+255),b
 13395  000A54  0E2D               	movlw	low _cmdbuf
 13396  000A56  6F68               	movwf	?_stristr& (0+255),b
 13397  000A58  0E7F               	movlw	high STR_29
 13398  000A5A  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13399  000A5C  0EEB               	movlw	low STR_29
 13400  000A5E  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13401  000A60  EC16  F02F         	call	_stristr	;wreg free
 13402  000A64  0E2D               	movlw	low _cmdbuf
 13403  000A66  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13404  000A68  0E01               	movlw	high _cmdbuf
 13405  000A6A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13406  000A6C  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13407  000A6E  E102               	bnz	u19475
 13408  000A70  5168               	movf	?_stristr& (0+255),w,b
 13409  000A72  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13410  000A74                     u19475:
 13411  000A74  E001 D0CD          	bnz	l15417
 13412                           
 13413                           ; BSR set to: 0
 13414                           ;main.c: 742: char *p = strtok(cmdbuf, ",");
 13415  000A78  EC71  F00F         	call	PL32	;call to abstracted procedure
 13416  000A7C  EC00  F02E         	call	_strtok	;wreg free
 13417  000A80  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13418  000A84  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;main.c: 745: vscpPriority = 3;
 13422  000A88  0E03               	movlw	3
 13423  000A8A  6E3F               	movwf	_vscpPriority,c
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;main.c: 746: if ((0) != p) {
 13427  000A8C  0102               	movlb	2	; () banked
 13428  000A8E  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13429  000A90  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13430  000A92  E008               	bz	l15373
 13431                           
 13432                           ; BSR set to: 2
 13433                           ;main.c: 747: vscpPriority = atoi(p);
 13434  000A94  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13435  000A98  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13436  000A9C  EC72  F025         	call	_atoi	;wreg free
 13437  000AA0  5166               	movf	?_atoi& (0+255),w,b
 13438  000AA2  6E3F               	movwf	_vscpPriority,c
 13439  000AA4                     l15373:
 13440                           
 13441                           ;main.c: 748: }
 13442                           ;main.c: 751: vscpClass = 0;
 13443  000AA4  6A3A               	clrf	_vscpClass,c
 13444  000AA6  6A3B               	clrf	_vscpClass+1,c
 13445                           
 13446                           ;main.c: 752: if ((0) != (p = strtok((0), ","))) {
 13447  000AA8  EC1A  F00F         	call	PL2	;call to abstracted procedure
 13448  000AAC  EC00  F02E         	call	_strtok	;wreg free
 13449  000AB0  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13450  000AB4  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13451  000AB8  0102               	movlb	2	; () banked
 13452  000ABA  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13453  000ABC  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13454  000ABE  E00A               	bz	l15379
 13455                           
 13456                           ; BSR set to: 2
 13457                           ;main.c: 753: vscpClass = atoi(p);
 13458  000AC0  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13459  000AC4  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13460  000AC8  EC72  F025         	call	_atoi	;wreg free
 13461  000ACC  C066  F03A         	movff	?_atoi,_vscpClass
 13462  000AD0  C067  F03B         	movff	?_atoi+1,_vscpClass+1
 13463  000AD4                     l15379:
 13464                           
 13465                           ;main.c: 754: }
 13466                           ;main.c: 757: vscpType = 0;
 13467  000AD4  6A41               	clrf	_vscpType,c
 13468                           
 13469                           ;main.c: 758: if ((0) != (p = strtok((0), ","))) {
 13470  000AD6  EC1A  F00F         	call	PL2	;call to abstracted procedure
 13471  000ADA  EC00  F02E         	call	_strtok	;wreg free
 13472  000ADE  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13473  000AE2  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13474  000AE6  0102               	movlb	2	; () banked
 13475  000AE8  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13476  000AEA  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13477  000AEC  E008               	bz	l15385
 13478                           
 13479                           ; BSR set to: 2
 13480                           ;main.c: 759: vscpType = atoi(p);
 13481  000AEE  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13482  000AF2  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13483  000AF6  EC72  F025         	call	_atoi	;wreg free
 13484  000AFA  5166               	movf	?_atoi& (0+255),w,b
 13485  000AFC  6E41               	movwf	_vscpType,c
 13486  000AFE                     l15385:
 13487                           
 13488                           ;main.c: 760: }
 13489                           ;main.c: 763: vscpNodeId = 0;
 13490  000AFE  6A3E               	clrf	_vscpNodeId,c
 13491                           
 13492                           ;main.c: 764: if ((0) != (p = strtok((0), ","))) {
 13493  000B00  EC1A  F00F         	call	PL2	;call to abstracted procedure
 13494  000B04  EC00  F02E         	call	_strtok	;wreg free
 13495  000B08  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13496  000B0C  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13497  000B10  0102               	movlb	2	; () banked
 13498  000B12  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13499  000B14  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13500  000B16  E008               	bz	l15391
 13501                           
 13502                           ; BSR set to: 2
 13503                           ;main.c: 765: vscpNodeId = atoi(p);
 13504  000B18  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13505  000B1C  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13506  000B20  EC72  F025         	call	_atoi	;wreg free
 13507  000B24  5166               	movf	?_atoi& (0+255),w,b
 13508  000B26  6E3E               	movwf	_vscpNodeId,c
 13509  000B28                     l15391:
 13510                           
 13511                           ;main.c: 766: }
 13512                           ;main.c: 769: vscpSize = 0;
 13513  000B28  6A40               	clrf	_vscpSize,c
 13514                           
 13515                           ;main.c: 770: if ((0) != (p = strtok((0), ","))) {
 13516  000B2A  EC1A  F00F         	call	PL2	;call to abstracted procedure
 13517  000B2E  EC00  F02E         	call	_strtok	;wreg free
 13518  000B32  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13519  000B36  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13520  000B3A  0102               	movlb	2	; () banked
 13521  000B3C  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13522  000B3E  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13523  000B40  E008               	bz	l15397
 13524                           
 13525                           ; BSR set to: 2
 13526                           ;main.c: 771: vscpSize = atoi(p);
 13527  000B42  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13528  000B46  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13529  000B4A  EC72  F025         	call	_atoi	;wreg free
 13530  000B4E  5166               	movf	?_atoi& (0+255),w,b
 13531  000B50  6E40               	movwf	_vscpSize,c
 13532  000B52                     l15397:
 13533                           
 13534                           ;main.c: 772: }
 13535                           ;main.c: 774: memset( vscpData, 0, 8 );
 13536  000B52  0E01               	movlw	high _vscpData
 13537  000B54  0100               	movlb	0	; () banked
 13538  000B56  6F61               	movwf	(?_memset+1)& (0+255),b
 13539  000B58  0EE5               	movlw	low _vscpData
 13540  000B5A  6F60               	movwf	?_memset& (0+255),b
 13541  000B5C  6B63               	clrf	(?_memset+3)& (0+255),b
 13542  000B5E  6B62               	clrf	(?_memset+2)& (0+255),b
 13543  000B60  6B65               	clrf	(?_memset+5)& (0+255),b
 13544  000B62  0E08               	movlw	8
 13545  000B64  6F64               	movwf	(?_memset+4)& (0+255),b
 13546  000B66  ECE2  F033         	call	_memset	;wreg free
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;main.c: 775: for (i = 0; i < vscpSize; i++) {
 13550  000B6A  0102               	movlb	2	; () banked
 13551  000B6C  6BAD               	clrf	doModeVerbose@i& (0+255),b
 13552  000B6E  D01D               	goto	l15407
 13553  000B70                     l15401:
 13554                           
 13555                           ; BSR set to: 2
 13556                           ;main.c: 776: if ((0) != (p = strtok((0), ","))) {
 13557  000B70  EC1A  F00F         	call	PL2	;call to abstracted procedure
 13558  000B74  EC00  F02E         	call	_strtok	;wreg free
 13559  000B78  C068  F2BE         	movff	?_strtok,doModeVerbose@p
 13560  000B7C  C069  F2BF         	movff	?_strtok+1,doModeVerbose@p+1
 13561  000B80  0102               	movlb	2	; () banked
 13562  000B82  51BF               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13563  000B84  11BE               	iorwf	doModeVerbose@p& (0+255),w,b
 13564  000B86  E014               	bz	l15409
 13565                           
 13566                           ; BSR set to: 2
 13567                           ;main.c: 777: vscpData[ i ] = atoi(p);
 13568  000B88  0EE5               	movlw	low _vscpData
 13569  000B8A  25AD               	addwf	doModeVerbose@i& (0+255),w,b
 13570  000B8C  6ED9               	movwf	fsr2l,c
 13571  000B8E  6ADA               	clrf	fsr2h,c
 13572  000B90  0101               	movlb	1	; () banked
 13573  000B92  0E01               	movlw	high _vscpData
 13574  000B94  22DA               	addwfc	fsr2h,f,c
 13575  000B96  C2BE  F066         	movff	doModeVerbose@p,?_atoi
 13576  000B9A  C2BF  F067         	movff	doModeVerbose@p+1,?_atoi+1
 13577  000B9E  EC72  F025         	call	_atoi	;wreg free
 13578  000BA2  5166               	movf	?_atoi& (0+255),w,b
 13579  000BA4  6EDF               	movwf	indf2,c
 13580                           
 13581                           ; BSR set to: 0
 13582                           
 13583                           ;main.c: 778: }
 13584  000BA6  0102               	movlb	2	; () banked
 13585  000BA8  2BAD               	incf	doModeVerbose@i& (0+255),f,b
 13586  000BAA                     l15407:
 13587                           
 13588                           ; BSR set to: 2
 13589  000BAA  5040               	movf	_vscpSize,w,c
 13590  000BAC  5DAD               	subwf	doModeVerbose@i& (0+255),w,b
 13591  000BAE  E3E0               	bnc	l15401
 13592  000BB0                     l15409:
 13593                           
 13594                           ; BSR set to: 2
 13595                           ;main.c: 781: }
 13596                           ;main.c: 782: }
 13597                           ;main.c: 784: if ( sendVSCPFrame(vscpClass,
 13598                           ;main.c: 785: vscpType,
 13599                           ;main.c: 786: vscpNodeId,
 13600                           ;main.c: 787: vscpPriority,
 13601                           ;main.c: 788: vscpSize,
 13602                           ;main.c: 789: vscpData ) ) {
 13603  000BB0  C03A  F093         	movff	_vscpClass,?_sendVSCPFrame
 13604  000BB4  C03B  F094         	movff	_vscpClass+1,?_sendVSCPFrame+1
 13605  000BB8  C041  F095         	movff	_vscpType,?_sendVSCPFrame+2
 13606  000BBC  C03E  F096         	movff	_vscpNodeId,?_sendVSCPFrame+3
 13607  000BC0  C03F  F097         	movff	_vscpPriority,?_sendVSCPFrame+4
 13608  000BC4  C040  F098         	movff	_vscpSize,?_sendVSCPFrame+5
 13609  000BC8  0E01               	movlw	high _vscpData
 13610  000BCA  0100               	movlb	0	; () banked
 13611  000BCC  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 13612  000BCE  0EE5               	movlw	low _vscpData
 13613  000BD0  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 13614  000BD2  EC1A  F02B         	call	_sendVSCPFrame	;wreg free
 13615  000BD6  0900               	iorlw	0
 13616  000BD8  E014               	bz	l15415
 13617                           
 13618                           ;main.c: 791: cntTxFrames++;
 13619  000BDA  0101               	movlb	1	; () banked
 13620  000BDC  2B14               	incf	_cntTxFrames& (0+255),f,b
 13621  000BDE  0E00               	movlw	0
 13622  000BE0  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 13623  000BE2  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 13624  000BE4  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 13625                           
 13626                           ;main.c: 792: cntTxBytes += vscpSize;
 13627  000BE6  5040               	movf	_vscpSize,w,c
 13628  000BE8  2710               	addwf	_cntTxBytes& (0+255),f,b
 13629  000BEA  0E00               	movlw	0
 13630  000BEC  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 13631  000BEE  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 13632  000BF0  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 13633                           
 13634                           ; BSR set to: 1
 13635                           ;main.c: 793: putsUSART((char *) "+OK\r\n");
 13636  000BF2  0E7F               	movlw	high STR_9
 13637  000BF4  6E21               	movwf	?_putsUSART+1,c
 13638  000BF6  0E6B               	movlw	low STR_9
 13639  000BF8  6E20               	movwf	?_putsUSART,c
 13640  000BFA  ECB5  F031         	call	_putsUSART	;wreg free
 13641                           
 13642                           ;main.c: 794: }
 13643  000BFE  EF0F  F00F         	goto	l16149
 13644  000C02                     l15415:
 13645                           
 13646                           ;main.c: 795: else {
 13647                           ;main.c: 796: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 13648  000C02  0E79               	movlw	high STR_37
 13649  000C04  6E21               	movwf	?_putsUSART+1,c
 13650  000C06  0E69               	movlw	low STR_37
 13651  000C08  6E20               	movwf	?_putsUSART,c
 13652  000C0A  ECB5  F031         	call	_putsUSART	;wreg free
 13653  000C0E  EF0F  F00F         	goto	l16149
 13654  000C12                     l15417:
 13655                           
 13656                           ; BSR set to: 0
 13657                           ;main.c: 800: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 13658  000C12  0E01               	movlw	high _cmdbuf
 13659  000C14  0100               	movlb	0	; () banked
 13660  000C16  6F69               	movwf	(?_stristr+1)& (0+255),b
 13661  000C18  0E2D               	movlw	low _cmdbuf
 13662  000C1A  6F68               	movwf	?_stristr& (0+255),b
 13663  000C1C  0E7F               	movlw	high STR_38
 13664  000C1E  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13665  000C20  0EE8               	movlw	low STR_38
 13666  000C22  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13667  000C24  EC16  F02F         	call	_stristr	;wreg free
 13668  000C28  0E2D               	movlw	low _cmdbuf
 13669  000C2A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13670  000C2C  0E01               	movlw	high _cmdbuf
 13671  000C2E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13672  000C30  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13673  000C32  E102               	bnz	u19565
 13674  000C34  5168               	movf	?_stristr& (0+255),w,b
 13675  000C36  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13676  000C38                     u19565:
 13677  000C38  E114               	bnz	l15425
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;main.c: 801: if (receivePrintEventVerbose()) {
 13681  000C3A  EC89  F015         	call	_receivePrintEventVerbose	;wreg free
 13682  000C3E  0900               	iorlw	0
 13683  000C40  E008               	bz	l15423
 13684                           
 13685                           ;main.c: 802: putsUSART((char *) "+OK\r\n");
 13686  000C42  0E7F               	movlw	high STR_9
 13687  000C44  6E21               	movwf	?_putsUSART+1,c
 13688  000C46  0E6B               	movlw	low STR_9
 13689  000C48  6E20               	movwf	?_putsUSART,c
 13690  000C4A  ECB5  F031         	call	_putsUSART	;wreg free
 13691                           
 13692                           ;main.c: 803: }
 13693  000C4E  EF0F  F00F         	goto	l16149
 13694  000C52                     l15423:
 13695                           
 13696                           ;main.c: 804: else {
 13697                           ;main.c: 805: putsUSART((char *) "+OK - no events\r\n");
 13698  000C52  0E7D               	movlw	high STR_40
 13699  000C54  6E21               	movwf	?_putsUSART+1,c
 13700  000C56  0E83               	movlw	low STR_40
 13701  000C58  6E20               	movwf	?_putsUSART,c
 13702  000C5A  ECB5  F031         	call	_putsUSART	;wreg free
 13703  000C5E  EF0F  F00F         	goto	l16149
 13704  000C62                     l15425:
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;main.c: 809: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 13708  000C62  0E01               	movlw	high _cmdbuf
 13709  000C64  0100               	movlb	0	; () banked
 13710  000C66  6F69               	movwf	(?_stristr+1)& (0+255),b
 13711  000C68  0E2D               	movlw	low _cmdbuf
 13712  000C6A  6F68               	movwf	?_stristr& (0+255),b
 13713  000C6C  0E7F               	movlw	high STR_41
 13714  000C6E  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13715  000C70  0EBC               	movlw	low STR_41
 13716  000C72  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13717  000C74  EC16  F02F         	call	_stristr	;wreg free
 13718  000C78  0E2D               	movlw	low _cmdbuf
 13719  000C7A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13720  000C7C  0E01               	movlw	high _cmdbuf
 13721  000C7E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13722  000C80  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13723  000C82  E102               	bnz	u19585
 13724  000C84  5168               	movf	?_stristr& (0+255),w,b
 13725  000C86  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13726  000C88                     u19585:
 13727  000C88  E10A               	bnz	l15431
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;main.c: 810: printStatistics();
 13731  000C8A  ECED  F020         	call	_printStatistics	;wreg free
 13732                           
 13733                           ;main.c: 811: putsUSART((char *) "+OK\r\n");
 13734  000C8E  0E7F               	movlw	high STR_9
 13735  000C90  6E21               	movwf	?_putsUSART+1,c
 13736  000C92  0E6B               	movlw	low STR_9
 13737  000C94  6E20               	movwf	?_putsUSART,c
 13738  000C96  ECB5  F031         	call	_putsUSART	;wreg free
 13739                           
 13740                           ;main.c: 812: }
 13741  000C9A  EF0F  F00F         	goto	l16149
 13742  000C9E                     l15431:
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;main.c: 814: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 13746  000C9E  0E01               	movlw	high _cmdbuf
 13747  000CA0  0100               	movlb	0	; () banked
 13748  000CA2  6F69               	movwf	(?_stristr+1)& (0+255),b
 13749  000CA4  0E2D               	movlw	low _cmdbuf
 13750  000CA6  6F68               	movwf	?_stristr& (0+255),b
 13751  000CA8  0E7F               	movlw	high STR_43
 13752  000CAA  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13753  000CAC  0ED6               	movlw	low STR_43
 13754  000CAE  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13755  000CB0  EC16  F02F         	call	_stristr	;wreg free
 13756  000CB4  0E2D               	movlw	low _cmdbuf
 13757  000CB6  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13758  000CB8  0E01               	movlw	high _cmdbuf
 13759  000CBA  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13760  000CBC  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13761  000CBE  E102               	bnz	u19595
 13762  000CC0  5168               	movf	?_stristr& (0+255),w,b
 13763  000CC2  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13764  000CC4                     u19595:
 13765  000CC4  E10A               	bnz	l15437
 13766                           
 13767                           ; BSR set to: 0
 13768                           ;main.c: 815: printErrors();
 13769  000CC6  EC1F  F017         	call	_printErrors	;wreg free
 13770                           
 13771                           ;main.c: 816: putsUSART((char *) "+OK\r\n");
 13772  000CCA  0E7F               	movlw	high STR_9
 13773  000CCC  6E21               	movwf	?_putsUSART+1,c
 13774  000CCE  0E6B               	movlw	low STR_9
 13775  000CD0  6E20               	movwf	?_putsUSART,c
 13776  000CD2  ECB5  F031         	call	_putsUSART	;wreg free
 13777                           
 13778                           ;main.c: 817: }
 13779  000CD6  EF0F  F00F         	goto	l16149
 13780  000CDA                     l15437:
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;main.c: 819: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 13784  000CDA  0E01               	movlw	high _cmdbuf
 13785  000CDC  0100               	movlb	0	; () banked
 13786  000CDE  6F69               	movwf	(?_stristr+1)& (0+255),b
 13787  000CE0  0E2D               	movlw	low _cmdbuf
 13788  000CE2  6F68               	movwf	?_stristr& (0+255),b
 13789  000CE4  0E7F               	movlw	high STR_45
 13790  000CE6  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13791  000CE8  0EB7               	movlw	low STR_45
 13792  000CEA  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13793  000CEC  EC16  F02F         	call	_stristr	;wreg free
 13794  000CF0  0E2D               	movlw	low _cmdbuf
 13795  000CF2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13796  000CF4  0E01               	movlw	high _cmdbuf
 13797  000CF6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13798  000CF8  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13799  000CFA  E102               	bnz	u19605
 13800  000CFC  5168               	movf	?_stristr& (0+255),w,b
 13801  000CFE  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13802  000D00                     u19605:
 13803  000D00  E10A               	bnz	l15441
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;main.c: 820: printHelp();
 13807  000D02  ECB5  F021         	call	_printHelp	;wreg free
 13808                           
 13809                           ;main.c: 821: putsUSART((char *) "+OK\r\n");
 13810  000D06  0E7F               	movlw	high STR_9
 13811  000D08  6E21               	movwf	?_putsUSART+1,c
 13812  000D0A  0E6B               	movlw	low STR_9
 13813  000D0C  6E20               	movwf	?_putsUSART,c
 13814  000D0E  ECB5  F031         	call	_putsUSART	;wreg free
 13815                           
 13816                           ;main.c: 822: }
 13817  000D12  EF0F  F00F         	goto	l16149
 13818  000D16                     l15441:
 13819                           
 13820                           ; BSR set to: 0
 13821                           ;main.c: 824: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 13822  000D16  0E01               	movlw	high _cmdbuf
 13823  000D18  0100               	movlb	0	; () banked
 13824  000D1A  6F69               	movwf	(?_stristr+1)& (0+255),b
 13825  000D1C  0E2D               	movlw	low _cmdbuf
 13826  000D1E  6F68               	movwf	?_stristr& (0+255),b
 13827  000D20  0E7F               	movlw	high STR_47
 13828  000D22  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13829  000D24  0E94               	movlw	low STR_47
 13830  000D26  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13831  000D28  EC16  F02F         	call	_stristr	;wreg free
 13832  000D2C  0E2D               	movlw	low _cmdbuf
 13833  000D2E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13834  000D30  0E01               	movlw	high _cmdbuf
 13835  000D32  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13836  000D34  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13837  000D36  E102               	bnz	u19615
 13838  000D38  5168               	movf	?_stristr& (0+255),w,b
 13839  000D3A  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13840  000D3C                     u19615:
 13841  000D3C  E10A               	bnz	l15447
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;main.c: 825: findNodes();
 13845  000D3E  EC2C  F023         	call	_findNodes	;wreg free
 13846                           
 13847                           ;main.c: 826: putsUSART((char *) "+OK\r\n");
 13848  000D42  0E7F               	movlw	high STR_9
 13849  000D44  6E21               	movwf	?_putsUSART+1,c
 13850  000D46  0E6B               	movlw	low STR_9
 13851  000D48  6E20               	movwf	?_putsUSART,c
 13852  000D4A  ECB5  F031         	call	_putsUSART	;wreg free
 13853                           
 13854                           ;main.c: 827: }
 13855  000D4E  EF0F  F00F         	goto	l16149
 13856  000D52                     l15447:
 13857                           
 13858                           ; BSR set to: 0
 13859                           ;main.c: 830: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 13860  000D52  0E01               	movlw	high _cmdbuf
 13861  000D54  0100               	movlb	0	; () banked
 13862  000D56  6F69               	movwf	(?_stristr+1)& (0+255),b
 13863  000D58  0E2D               	movlw	low _cmdbuf
 13864  000D5A  6F68               	movwf	?_stristr& (0+255),b
 13865  000D5C  0E7F               	movlw	high STR_49
 13866  000D5E  6F6B               	movwf	(?_stristr+3)& (0+255),b
 13867  000D60  0E99               	movlw	low STR_49
 13868  000D62  6F6A               	movwf	(?_stristr+2)& (0+255),b
 13869  000D64  EC16  F02F         	call	_stristr	;wreg free
 13870  000D68  0E2D               	movlw	low _cmdbuf
 13871  000D6A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 13872  000D6C  0E01               	movlw	high _cmdbuf
 13873  000D6E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 13874  000D70  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 13875  000D72  E102               	bnz	u19625
 13876  000D74  5168               	movf	?_stristr& (0+255),w,b
 13877  000D76  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 13878  000D78                     u19625:
 13879  000D78  E001 D20A          	bnz	l15615
 13880                           
 13881                           ; BSR set to: 0
 13882                           ;main.c: 832: uint8_t i;
 13883                           ;main.c: 833: uint8_t nodeid;
 13884                           ;main.c: 834: uint8_t page = 0;
 13885  000D7C  0102               	movlb	2	; () banked
 13886  000D7E  6BB3               	clrf	doModeVerbose@page& (0+255),b
 13887                           
 13888                           ; BSR set to: 2
 13889                           ;main.c: 835: uint8_t reg;
 13890                           ;main.c: 836: uint8_t value;
 13891                           ;main.c: 837: uint8_t count = 1;
 13892  000D80  0E01               	movlw	1
 13893  000D82  6FAF               	movwf	doModeVerbose@count& (0+255),b
 13894                           
 13895                           ; BSR set to: 2
 13896                           ;main.c: 839: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13897  000D84  506F               	movf	3951,w,c	;volatile
 13898  000D86  0BE0               	andlw	224
 13899  000D88  E011               	bz	l15463
 13900                           
 13901                           ; BSR set to: 2
 13902                           ;main.c: 840: putsUSART( (const char *)"-ERROR - Command only works if interface is open
      +                          .\r\n" );
 13903  000D8A  0E73               	movlw	high STR_50
 13904  000D8C  6E21               	movwf	?_putsUSART+1,c
 13905  000D8E  0E53               	movlw	low STR_50
 13906  000D90  6E20               	movwf	?_putsUSART,c
 13907  000D92  ECB5  F031         	call	_putsUSART	;wreg free
 13908  000D96                     l15457:
 13909                           
 13910                           ;main.c: 841: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 13911  000D96  0E01               	movlw	high _cmdbuf
 13912  000D98  0100               	movlb	0	; () banked
 13913  000D9A  6F61               	movwf	(?_memset+1)& (0+255),b
 13914  000D9C  0E2D               	movlw	low _cmdbuf
 13915  000D9E  ECF9  F02D         	call	PL24	;call to abstracted procedure
 13916  000DA2  ECE2  F033         	call	_memset	;wreg free
 13917                           
 13918                           ; BSR set to: 0
 13919                           ;main.c: 842: pos = 0;
 13920  000DA6  6A32               	clrf	_pos,c
 13921  000DA8  EF19  F00F         	goto	l586
 13922  000DAC                     l15463:
 13923                           
 13924                           ; BSR set to: 2
 13925                           ;main.c: 844: }
 13926                           ;main.c: 846: strcpy(cmdbuf, cmdbuf + 5);
 13927  000DAC  EC29  F00F         	call	PL6	;call to abstracted procedure
 13928  000DB0  ECCB  F033         	call	_strcpy	;wreg free
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;main.c: 847: char *p = strtok(cmdbuf, " ");
 13932  000DB4  0E01               	movlw	high _cmdbuf
 13933  000DB6  EC7B  F00F         	call	PL42	;call to abstracted procedure
 13934  000DBA  EC00  F02E         	call	_strtok	;wreg free
 13935  000DBE  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1295
 13936  000DC2  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1295+1
 13937                           
 13938                           ; BSR set to: 0
 13939                           ;main.c: 848: if ((0) != p) {
 13940  000DC6  0102               	movlb	2	; () banked
 13941  000DC8  51BA               	movf	(doModeVerbose@p_1295+1)& (0+255),w,b
 13942  000DCA  11B9               	iorwf	doModeVerbose@p_1295& (0+255),w,b
 13943  000DCC  E00A               	bz	l15471
 13944                           
 13945                           ; BSR set to: 2
 13946                           ;main.c: 849: nodeid = atoi(p);
 13947  000DCE  C2B9  F066         	movff	doModeVerbose@p_1295,?_atoi
 13948  000DD2  C2BA  F067         	movff	doModeVerbose@p_1295+1,?_atoi+1
 13949  000DD6  EC72  F025         	call	_atoi	;wreg free
 13950  000DDA  5166               	movf	?_atoi& (0+255),w,b
 13951  000DDC  0102               	movlb	2	; () banked
 13952  000DDE  6FB0               	movwf	doModeVerbose@nodeid& (0+255),b
 13953                           
 13954                           ;main.c: 850: }
 13955  000DE0  D007               	goto	l15479
 13956  000DE2                     l15471:
 13957                           
 13958                           ; BSR set to: 2
 13959                           ;main.c: 851: else {
 13960                           ;main.c: 852: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13961  000DE2  0E7B               	movlw	high STR_52
 13962  000DE4  6E21               	movwf	?_putsUSART+1,c
 13963  000DE6  0E64               	movlw	low STR_52
 13964  000DE8  6E20               	movwf	?_putsUSART,c
 13965  000DEA  ECB5  F031         	call	_putsUSART	;wreg free
 13966  000DEE  D7D3               	goto	l15457
 13967  000DF0                     l15479:
 13968                           
 13969                           ; BSR set to: 2
 13970                           ;main.c: 856: }
 13971                           ;main.c: 858: if ((0) != (p = strtok((0), " "))) {
 13972  000DF0  EC69  F00F         	call	PL30	;call to abstracted procedure
 13973  000DF4  EC00  F02E         	call	_strtok	;wreg free
 13974  000DF8  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1295
 13975  000DFC  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1295+1
 13976  000E00  0102               	movlb	2	; () banked
 13977  000E02  51BA               	movf	(doModeVerbose@p_1295+1)& (0+255),w,b
 13978  000E04  11B9               	iorwf	doModeVerbose@p_1295& (0+255),w,b
 13979  000E06  E033               	bz	l15487
 13980                           
 13981                           ; BSR set to: 2
 13982                           ;main.c: 860: char *preg;
 13983                           ;main.c: 861: if (preg = strchr(p, ':')) {
 13984  000E08  C2B9  F01F         	movff	doModeVerbose@p_1295,?_strchr
 13985  000E0C  C2BA  F020         	movff	doModeVerbose@p_1295+1,?_strchr+1
 13986  000E10  6A22               	clrf	?_strchr+3,c
 13987  000E12  0E3A               	movlw	58
 13988  000E14  6E21               	movwf	?_strchr+2,c
 13989  000E16  ECD1  F030         	call	_strchr	;wreg free
 13990  000E1A  C01F  F284         	movff	?_strchr,doModeVerbose@preg
 13991  000E1E  C020  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 13992  000E22  0102               	movlb	2	; () banked
 13993  000E24  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13994  000E26  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 13995  000E28  E018               	bz	l15485
 13996                           
 13997                           ; BSR set to: 2
 13998                           ;main.c: 862: page = atoi(p);
 13999  000E2A  C2B9  F066         	movff	doModeVerbose@p_1295,?_atoi
 14000  000E2E  C2BA  F067         	movff	doModeVerbose@p_1295+1,?_atoi+1
 14001  000E32  EC72  F025         	call	_atoi	;wreg free
 14002  000E36  5166               	movf	?_atoi& (0+255),w,b
 14003  000E38  0102               	movlb	2	; () banked
 14004  000E3A  6FB3               	movwf	doModeVerbose@page& (0+255),b
 14005                           
 14006                           ;main.c: 863: reg = atoi(preg + 1);
 14007  000E3C  2984               	incf	doModeVerbose@preg& (0+255),w,b
 14008  000E3E  0100               	movlb	0	; () banked
 14009  000E40  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14010  000E42  0E00               	movlw	0
 14011  000E44  0102               	movlb	2	; () banked
 14012  000E46  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 14013  000E48  0100               	movlb	0	; () banked
 14014  000E4A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14015  000E4C  C0C8  F066         	movff	??_doModeVerbose,?_atoi
 14016  000E50  C0C9  F067         	movff	??_doModeVerbose+1,?_atoi+1
 14017  000E54  EC72  F025         	call	_atoi	;wreg free
 14018  000E58  D006               	goto	L7
 14019  000E5A                     l15485:
 14020                           
 14021                           ; BSR set to: 2
 14022                           ;main.c: 865: else {
 14023                           ;main.c: 866: reg = atoi(p);
 14024  000E5A  C2B9  F066         	movff	doModeVerbose@p_1295,?_atoi
 14025  000E5E  C2BA  F067         	movff	doModeVerbose@p_1295+1,?_atoi+1
 14026  000E62  EC72  F025         	call	_atoi	;wreg free
 14027  000E66                     L7:
 14028  000E66  5166               	movf	?_atoi& (0+255),w,b
 14029  000E68  0102               	movlb	2	; () banked
 14030  000E6A  6FB4               	movwf	doModeVerbose@reg& (0+255),b
 14031  000E6C  D007               	goto	l15495
 14032  000E6E                     l15487:
 14033                           
 14034                           ; BSR set to: 2
 14035                           ;main.c: 870: else {
 14036                           ;main.c: 871: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 14037  000E6E  0E79               	movlw	high STR_54
 14038  000E70  6E21               	movwf	?_putsUSART+1,c
 14039  000E72  0EAB               	movlw	low STR_54
 14040  000E74  6E20               	movwf	?_putsUSART,c
 14041  000E76  ECB5  F031         	call	_putsUSART	;wreg free
 14042  000E7A  D78D               	goto	l15457
 14043  000E7C                     l15495:
 14044                           
 14045                           ; BSR set to: 2
 14046                           ;main.c: 875: }
 14047                           ;main.c: 878: if ((0) != (p = strtok((0), " "))) {
 14048  000E7C  EC69  F00F         	call	PL30	;call to abstracted procedure
 14049  000E80  EC00  F02E         	call	_strtok	;wreg free
 14050  000E84  C068  F2B9         	movff	?_strtok,doModeVerbose@p_1295
 14051  000E88  C069  F2BA         	movff	?_strtok+1,doModeVerbose@p_1295+1
 14052  000E8C  0102               	movlb	2	; () banked
 14053  000E8E  51BA               	movf	(doModeVerbose@p_1295+1)& (0+255),w,b
 14054  000E90  11B9               	iorwf	doModeVerbose@p_1295& (0+255),w,b
 14055  000E92  E00D               	bz	l593
 14056                           
 14057                           ; BSR set to: 2
 14058                           ;main.c: 879: count = atoi(p);
 14059  000E94  C2B9  F066         	movff	doModeVerbose@p_1295,?_atoi
 14060  000E98  C2BA  F067         	movff	doModeVerbose@p_1295+1,?_atoi+1
 14061  000E9C  EC72  F025         	call	_atoi	;wreg free
 14062  000EA0  5166               	movf	?_atoi& (0+255),w,b
 14063  000EA2  0102               	movlb	2	; () banked
 14064  000EA4  6FAF               	movwf	doModeVerbose@count& (0+255),b
 14065                           
 14066                           ; BSR set to: 2
 14067                           ;main.c: 880: if (0 == count) count = 1;
 14068  000EA6  67AF               	tstfsz	doModeVerbose@count& (0+255),b
 14069  000EA8  D002               	goto	l593
 14070                           
 14071                           ; BSR set to: 2
 14072  000EAA  0E01               	movlw	1
 14073  000EAC  6FAF               	movwf	doModeVerbose@count& (0+255),b
 14074  000EAE                     l593:
 14075                           
 14076                           ; BSR set to: 2
 14077                           ;main.c: 881: }
 14078                           ;main.c: 883: BOOL rv = 1;
 14079  000EAE  0E01               	movlw	1
 14080  000EB0  6FA7               	movwf	doModeVerbose@rv& (0+255),b
 14081                           
 14082                           ; BSR set to: 2
 14083                           ;main.c: 884: for ( i = 0; i < count; i++ ) {
 14084  000EB2  6BB5               	clrf	doModeVerbose@i_1288& (0+255),b
 14085  000EB4  D157               	goto	l15607
 14086  000EB6                     l15505:
 14087                           
 14088                           ; BSR set to: 2
 14089                           ;main.c: 886: if ( readRegisterExtended( nodeid,
 14090                           ;main.c: 887: page,
 14091                           ;main.c: 888: (reg + i) & 0xff,
 14092                           ;main.c: 889: rwtimeout,
 14093                           ;main.c: 890: &value ) ) {
 14094  000EB6  0100               	movlb	0	; () banked
 14095  000EB8  C2B3  F0B3         	movff	doModeVerbose@page,?_readRegisterExtended
 14096  000EBC  6BB4               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14097  000EBE  0102               	movlb	2	; () banked
 14098  000EC0  51B4               	movf	doModeVerbose@reg& (0+255),w,b
 14099  000EC2  25B5               	addwf	doModeVerbose@i_1288& (0+255),w,b
 14100  000EC4  0100               	movlb	0	; () banked
 14101  000EC6  6FB5               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14102  000EC8  C033  F0B6         	movff	_rwtimeout,?_readRegisterExtended+3
 14103  000ECC  6BB7               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14104  000ECE  0E02               	movlw	high doModeVerbose@value
 14105  000ED0  6FB9               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14106  000ED2  0EB8               	movlw	low doModeVerbose@value
 14107  000ED4  6FB8               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14108  000ED6  0102               	movlb	2	; () banked
 14109  000ED8  51B0               	movf	doModeVerbose@nodeid& (0+255),w,b
 14110  000EDA  ECF5  F026         	call	_readRegisterExtended
 14111  000EDE  0900               	iorlw	0
 14112  000EE0  E101 D0C3          	bz	l597
 14113                           
 14114                           ;main.c: 891: putsUSART((char *) "+OK - nodeid=");
 14115  000EE4  0E7E               	movlw	high STR_56
 14116  000EE6  6E21               	movwf	?_putsUSART+1,c
 14117  000EE8  0E19               	movlw	low STR_56
 14118  000EEA  6E20               	movwf	?_putsUSART,c
 14119  000EEC  ECB5  F031         	call	_putsUSART	;wreg free
 14120                           
 14121                           ;main.c: 892: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 14122  000EF0  662C               	tstfsz	_bHex,c
 14123  000EF2  D005               	goto	l15513
 14124  000EF4  0E7F               	movlw	high STR_58
 14125  000EF6  0102               	movlb	2	; () banked
 14126  000EF8  6F94               	movwf	(_doModeVerbose$1307+1)& (0+255),b
 14127  000EFA  0E71               	movlw	low STR_58
 14128  000EFC  D004               	goto	L8
 14129  000EFE                     l15513:
 14130  000EFE  0E7E               	movlw	high STR_57
 14131  000F00  0102               	movlb	2	; () banked
 14132  000F02  6F94               	movwf	(_doModeVerbose$1307+1)& (0+255),b
 14133  000F04  0E6B               	movlw	low STR_57
 14134  000F06                     L8:
 14135  000F06  6F93               	movwf	_doModeVerbose$1307& (0+255),b
 14136                           
 14137                           ; BSR set to: 2
 14138  000F08  0E01               	movlw	high _wrkbuf
 14139  000F0A  0100               	movlb	0	; () banked
 14140  000F0C  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14141  000F0E  0E7D               	movlw	low _wrkbuf
 14142  000F10  6F71               	movwf	?_sprintf& (0+255),b
 14143  000F12  C293  F073         	movff	_doModeVerbose$1307,?_sprintf+2
 14144  000F16  C294  F074         	movff	_doModeVerbose$1307+1,?_sprintf+3
 14145  000F1A  C2B0  F075         	movff	doModeVerbose@nodeid,?_sprintf+4
 14146  000F1E  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14147  000F20  ECFD  F00F         	call	_sprintf	;wreg free
 14148                           
 14149                           ; BSR set to: 0
 14150                           ;main.c: 893: putsUSART(wrkbuf);
 14151  000F24  0101               	movlb	1	; () banked
 14152  000F26  0E01               	movlw	high _wrkbuf
 14153  000F28  6E21               	movwf	?_putsUSART+1,c
 14154  000F2A  0E7D               	movlw	low _wrkbuf
 14155  000F2C  6E20               	movwf	?_putsUSART,c
 14156  000F2E  ECB5  F031         	call	_putsUSART	;wreg free
 14157                           
 14158                           ;main.c: 894: putsUSART((char *) "Value for reg ");
 14159  000F32  0E7D               	movlw	high STR_59
 14160  000F34  6E21               	movwf	?_putsUSART+1,c
 14161  000F36  0EFC               	movlw	low STR_59
 14162  000F38  6E20               	movwf	?_putsUSART,c
 14163  000F3A  ECB5  F031         	call	_putsUSART	;wreg free
 14164                           
 14165                           ;main.c: 895: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 14166  000F3E  662C               	tstfsz	_bHex,c
 14167  000F40  D005               	goto	l15525
 14168  000F42  0E7F               	movlw	high STR_61
 14169  000F44  0102               	movlb	2	; () banked
 14170  000F46  6F96               	movwf	(_doModeVerbose$1312+1)& (0+255),b
 14171  000F48  0EEE               	movlw	low STR_61
 14172  000F4A  D004               	goto	L9
 14173  000F4C                     l15525:
 14174  000F4C  0E7F               	movlw	high STR_60
 14175  000F4E  0102               	movlb	2	; () banked
 14176  000F50  6F96               	movwf	(_doModeVerbose$1312+1)& (0+255),b
 14177  000F52  0E50               	movlw	low STR_60
 14178  000F54                     L9:
 14179  000F54  6F95               	movwf	_doModeVerbose$1312& (0+255),b
 14180                           
 14181                           ; BSR set to: 2
 14182  000F56  0E01               	movlw	high _wrkbuf
 14183  000F58  0100               	movlb	0	; () banked
 14184  000F5A  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14185  000F5C  0E7D               	movlw	low _wrkbuf
 14186  000F5E  6F71               	movwf	?_sprintf& (0+255),b
 14187  000F60  C295  F073         	movff	_doModeVerbose$1312,?_sprintf+2
 14188  000F64  C296  F074         	movff	_doModeVerbose$1312+1,?_sprintf+3
 14189  000F68  C2B3  F075         	movff	doModeVerbose@page,?_sprintf+4
 14190  000F6C  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14191  000F6E  ECFD  F00F         	call	_sprintf	;wreg free
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;main.c: 896: putsUSART(wrkbuf);
 14195  000F72  0101               	movlb	1	; () banked
 14196  000F74  0E01               	movlw	high _wrkbuf
 14197  000F76  6E21               	movwf	?_putsUSART+1,c
 14198  000F78  0E7D               	movlw	low _wrkbuf
 14199  000F7A  6E20               	movwf	?_putsUSART,c
 14200  000F7C  ECB5  F031         	call	_putsUSART	;wreg free
 14201                           
 14202                           ;main.c: 897: WriteUSART(':');
 14203  000F80  0E3A               	movlw	58
 14204  000F82  EC61  F034         	call	_WriteUSART
 14205  000F86                     l606:
 14206  000F86  A2AC               	btfss	4012,1,c	;volatile
 14207  000F88  D7FE               	goto	l606
 14208                           
 14209                           ;main.c: 899: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 14210  000F8A  662C               	tstfsz	_bHex,c
 14211  000F8C  D005               	goto	l15535
 14212  000F8E  0E7F               	movlw	high STR_61
 14213  000F90  0102               	movlb	2	; () banked
 14214  000F92  6F98               	movwf	(_doModeVerbose$1316+1)& (0+255),b
 14215  000F94  0EEE               	movlw	low STR_61
 14216  000F96  D004               	goto	L10
 14217  000F98                     l15535:
 14218  000F98  0E7F               	movlw	high STR_60
 14219  000F9A  0102               	movlb	2	; () banked
 14220  000F9C  6F98               	movwf	(_doModeVerbose$1316+1)& (0+255),b
 14221  000F9E  0E50               	movlw	low STR_60
 14222  000FA0                     L10:
 14223  000FA0  6F97               	movwf	_doModeVerbose$1316& (0+255),b
 14224                           
 14225                           ; BSR set to: 2
 14226  000FA2  0E01               	movlw	high _wrkbuf
 14227  000FA4  0100               	movlb	0	; () banked
 14228  000FA6  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14229  000FA8  0E7D               	movlw	low _wrkbuf
 14230  000FAA  6F71               	movwf	?_sprintf& (0+255),b
 14231  000FAC  C297  F073         	movff	_doModeVerbose$1316,?_sprintf+2
 14232  000FB0  C298  F074         	movff	_doModeVerbose$1316+1,?_sprintf+3
 14233  000FB4  EC84  F00F         	call	PL48	;call to abstracted procedure
 14234  000FB8  ECFD  F00F         	call	_sprintf	;wreg free
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;main.c: 900: putsUSART(wrkbuf);
 14238  000FBC  0101               	movlb	1	; () banked
 14239  000FBE  0E01               	movlw	high _wrkbuf
 14240  000FC0  6E21               	movwf	?_putsUSART+1,c
 14241  000FC2  0E7D               	movlw	low _wrkbuf
 14242  000FC4  6E20               	movwf	?_putsUSART,c
 14243  000FC6  ECB5  F031         	call	_putsUSART	;wreg free
 14244                           
 14245                           ;main.c: 901: putsUSART((char *) " = ");
 14246  000FCA  0E7E               	movlw	high (STR_287+4)
 14247  000FCC  6E21               	movwf	?_putsUSART+1,c
 14248  000FCE  0EDD               	movlw	low (STR_287+4)
 14249  000FD0  6E20               	movwf	?_putsUSART,c
 14250  000FD2  ECB5  F031         	call	_putsUSART	;wreg free
 14251                           
 14252                           ;main.c: 902: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 14253  000FD6  662C               	tstfsz	_bHex,c
 14254  000FD8  D005               	goto	l15547
 14255  000FDA  0E7F               	movlw	high STR_61
 14256  000FDC  0102               	movlb	2	; () banked
 14257  000FDE  6F9A               	movwf	(_doModeVerbose$1321+1)& (0+255),b
 14258  000FE0  0EEE               	movlw	low STR_61
 14259  000FE2  D004               	goto	L11
 14260  000FE4                     l15547:
 14261  000FE4  0E7F               	movlw	high STR_60
 14262  000FE6  0102               	movlb	2	; () banked
 14263  000FE8  6F9A               	movwf	(_doModeVerbose$1321+1)& (0+255),b
 14264  000FEA  0E50               	movlw	low STR_60
 14265  000FEC                     L11:
 14266  000FEC  6F99               	movwf	_doModeVerbose$1321& (0+255),b
 14267                           
 14268                           ; BSR set to: 2
 14269  000FEE  0E01               	movlw	high _wrkbuf
 14270  000FF0  0100               	movlb	0	; () banked
 14271  000FF2  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14272  000FF4  0E7D               	movlw	low _wrkbuf
 14273  000FF6  6F71               	movwf	?_sprintf& (0+255),b
 14274  000FF8  C299  F073         	movff	_doModeVerbose$1321,?_sprintf+2
 14275  000FFC  C29A  F074         	movff	_doModeVerbose$1321+1,?_sprintf+3
 14276  001000  C2B8  F075         	movff	doModeVerbose@value,?_sprintf+4
 14277  001004  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14278  001006  ECFD  F00F         	call	_sprintf	;wreg free
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;main.c: 903: putsUSART(wrkbuf);
 14282  00100A  0101               	movlb	1	; () banked
 14283  00100C  0E01               	movlw	high _wrkbuf
 14284  00100E  6E21               	movwf	?_putsUSART+1,c
 14285  001010  0E7D               	movlw	low _wrkbuf
 14286  001012  6E20               	movwf	?_putsUSART,c
 14287  001014  ECB5  F031         	call	_putsUSART	;wreg free
 14288  001018                     l617:
 14289  001018  A2AC               	btfss	4012,1,c	;volatile
 14290  00101A  D7FE               	goto	l617
 14291                           
 14292                           ;main.c: 905: putsUSART((const char *)"\t\'");
 14293  00101C  0E7F               	movlw	high STR_67
 14294  00101E  6E21               	movwf	?_putsUSART+1,c
 14295  001020  0EE2               	movlw	low STR_67
 14296  001022  6E20               	movwf	?_putsUSART,c
 14297  001024  ECB5  F031         	call	_putsUSART	;wreg free
 14298                           
 14299                           ;main.c: 906: if ((value > 32) && (value < 127)) {
 14300  001028  0E20               	movlw	32
 14301  00102A  0102               	movlb	2	; () banked
 14302  00102C  65B8               	cpfsgt	doModeVerbose@value& (0+255),b
 14303  00102E  D007               	goto	l15561
 14304                           
 14305                           ; BSR set to: 2
 14306  001030  0E7F               	movlw	127
 14307  001032  61B8               	cpfslt	doModeVerbose@value& (0+255),b
 14308  001034  D004               	goto	l15561
 14309                           
 14310                           ; BSR set to: 2
 14311                           ;main.c: 907: WriteUSART(value);
 14312  001036  51B8               	movf	doModeVerbose@value& (0+255),w,b
 14313  001038  EC61  F034         	call	_WriteUSART
 14314                           
 14315                           ;main.c: 908: }
 14316  00103C  D003               	goto	l622
 14317  00103E                     l15561:
 14318                           
 14319                           ; BSR set to: 2
 14320                           ;main.c: 909: else {
 14321                           ;main.c: 910: WriteUSART('.');
 14322  00103E  0E2E               	movlw	46
 14323  001040  EC61  F034         	call	_WriteUSART
 14324  001044                     l622:
 14325  001044  A2AC               	btfss	4012,1,c	;volatile
 14326  001046  D7FE               	goto	l622
 14327                           
 14328                           ;main.c: 913: putsUSART((const char *)"\' \t");
 14329  001048  0E7F               	movlw	high STR_68
 14330  00104A  6E21               	movwf	?_putsUSART+1,c
 14331  00104C  0EC6               	movlw	low STR_68
 14332  00104E  6E20               	movwf	?_putsUSART,c
 14333  001050  ECB5  F031         	call	_putsUSART	;wreg free
 14334                           
 14335                           ;main.c: 914: printBinary(value);
 14336  001054  0102               	movlb	2	; () banked
 14337  001056  51B8               	movf	doModeVerbose@value& (0+255),w,b
 14338  001058  ECDF  F031         	call	_printBinary
 14339                           
 14340                           ; BSR set to: 0
 14341                           ;main.c: 915: putsUSART((char *) "\r\n");
 14342  00105C  0E73               	movlw	high (STR_239+51)
 14343  00105E  6E21               	movwf	?_putsUSART+1,c
 14344  001060  0E1A               	movlw	low (STR_239+51)
 14345  001062  6E20               	movwf	?_putsUSART,c
 14346  001064  ECB5  F031         	call	_putsUSART	;wreg free
 14347                           
 14348                           ;main.c: 916: }
 14349  001068  D07B               	goto	l15605
 14350  00106A                     l597:
 14351                           
 14352                           ;main.c: 917: else {
 14353                           ;main.c: 918: rv = 0;
 14354  00106A  0102               	movlb	2	; () banked
 14355  00106C  6BA7               	clrf	doModeVerbose@rv& (0+255),b
 14356                           
 14357                           ; BSR set to: 2
 14358                           ;main.c: 919: putsUSART((char *) "-ERROR - nodeid=");
 14359  00106E  0E7D               	movlw	high STR_70
 14360  001070  6E21               	movwf	?_putsUSART+1,c
 14361  001072  0EEB               	movlw	low STR_70
 14362  001074  6E20               	movwf	?_putsUSART,c
 14363  001076  ECB5  F031         	call	_putsUSART	;wreg free
 14364                           
 14365                           ;main.c: 920: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 14366  00107A  662C               	tstfsz	_bHex,c
 14367  00107C  D005               	goto	l15575
 14368  00107E  0E7F               	movlw	high STR_58
 14369  001080  0102               	movlb	2	; () banked
 14370  001082  6F9C               	movwf	(_doModeVerbose$1329+1)& (0+255),b
 14371  001084  0E71               	movlw	low STR_58
 14372  001086  D004               	goto	L12
 14373  001088                     l15575:
 14374  001088  0E7E               	movlw	high STR_57
 14375  00108A  0102               	movlb	2	; () banked
 14376  00108C  6F9C               	movwf	(_doModeVerbose$1329+1)& (0+255),b
 14377  00108E  0E6B               	movlw	low STR_57
 14378  001090                     L12:
 14379  001090  6F9B               	movwf	_doModeVerbose$1329& (0+255),b
 14380                           
 14381                           ; BSR set to: 2
 14382  001092  0E01               	movlw	high _wrkbuf
 14383  001094  0100               	movlb	0	; () banked
 14384  001096  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14385  001098  0E7D               	movlw	low _wrkbuf
 14386  00109A  6F71               	movwf	?_sprintf& (0+255),b
 14387  00109C  C29B  F073         	movff	_doModeVerbose$1329,?_sprintf+2
 14388  0010A0  C29C  F074         	movff	_doModeVerbose$1329+1,?_sprintf+3
 14389  0010A4  C2B0  F075         	movff	doModeVerbose@nodeid,?_sprintf+4
 14390  0010A8  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14391  0010AA  ECFD  F00F         	call	_sprintf	;wreg free
 14392                           
 14393                           ; BSR set to: 0
 14394                           ;main.c: 921: putsUSART(wrkbuf);
 14395  0010AE  0101               	movlb	1	; () banked
 14396  0010B0  0E01               	movlw	high _wrkbuf
 14397  0010B2  6E21               	movwf	?_putsUSART+1,c
 14398  0010B4  0E7D               	movlw	low _wrkbuf
 14399  0010B6  6E20               	movwf	?_putsUSART,c
 14400  0010B8  ECB5  F031         	call	_putsUSART	;wreg free
 14401                           
 14402                           ;main.c: 922: putsUSART((char *) "Unable to read register ");
 14403  0010BC  0E7B               	movlw	high STR_73
 14404  0010BE  6E21               	movwf	?_putsUSART+1,c
 14405  0010C0  0E1B               	movlw	low STR_73
 14406  0010C2  6E20               	movwf	?_putsUSART,c
 14407  0010C4  ECB5  F031         	call	_putsUSART	;wreg free
 14408  0010C8                     l630:
 14409  0010C8  A2AC               	btfss	4012,1,c	;volatile
 14410  0010CA  D7FE               	goto	l630
 14411                           
 14412                           ;main.c: 924: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 14413  0010CC  662C               	tstfsz	_bHex,c
 14414  0010CE  D005               	goto	l15585
 14415  0010D0  0E7F               	movlw	high STR_61
 14416  0010D2  0102               	movlb	2	; () banked
 14417  0010D4  6F9E               	movwf	(_doModeVerbose$1334+1)& (0+255),b
 14418  0010D6  0EEE               	movlw	low STR_61
 14419  0010D8  D004               	goto	L13
 14420  0010DA                     l15585:
 14421  0010DA  0E7F               	movlw	high STR_60
 14422  0010DC  0102               	movlb	2	; () banked
 14423  0010DE  6F9E               	movwf	(_doModeVerbose$1334+1)& (0+255),b
 14424  0010E0  0E50               	movlw	low STR_60
 14425  0010E2                     L13:
 14426  0010E2  6F9D               	movwf	_doModeVerbose$1334& (0+255),b
 14427                           
 14428                           ; BSR set to: 2
 14429  0010E4  0E01               	movlw	high _wrkbuf
 14430  0010E6  0100               	movlb	0	; () banked
 14431  0010E8  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14432  0010EA  0E7D               	movlw	low _wrkbuf
 14433  0010EC  6F71               	movwf	?_sprintf& (0+255),b
 14434  0010EE  C29D  F073         	movff	_doModeVerbose$1334,?_sprintf+2
 14435  0010F2  C29E  F074         	movff	_doModeVerbose$1334+1,?_sprintf+3
 14436  0010F6  C2B3  F075         	movff	doModeVerbose@page,?_sprintf+4
 14437  0010FA  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14438  0010FC  ECFD  F00F         	call	_sprintf	;wreg free
 14439                           
 14440                           ; BSR set to: 0
 14441                           ;main.c: 925: putsUSART(wrkbuf);
 14442  001100  0101               	movlb	1	; () banked
 14443  001102  0E01               	movlw	high _wrkbuf
 14444  001104  6E21               	movwf	?_putsUSART+1,c
 14445  001106  0E7D               	movlw	low _wrkbuf
 14446  001108  6E20               	movwf	?_putsUSART,c
 14447  00110A  ECB5  F031         	call	_putsUSART	;wreg free
 14448                           
 14449                           ;main.c: 926: WriteUSART(':');
 14450  00110E  0E3A               	movlw	58
 14451  001110  EC61  F034         	call	_WriteUSART
 14452                           
 14453                           ;main.c: 927: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 14454  001114  662C               	tstfsz	_bHex,c
 14455  001116  D005               	goto	l15597
 14456  001118  0E7F               	movlw	high STR_61
 14457  00111A  0102               	movlb	2	; () banked
 14458  00111C  6FA0               	movwf	(_doModeVerbose$1338+1)& (0+255),b
 14459  00111E  0EEE               	movlw	low STR_61
 14460  001120  D004               	goto	L14
 14461  001122                     l15597:
 14462  001122  0E7F               	movlw	high STR_60
 14463  001124  0102               	movlb	2	; () banked
 14464  001126  6FA0               	movwf	(_doModeVerbose$1338+1)& (0+255),b
 14465  001128  0E50               	movlw	low STR_60
 14466  00112A                     L14:
 14467  00112A  6F9F               	movwf	_doModeVerbose$1338& (0+255),b
 14468                           
 14469                           ; BSR set to: 2
 14470  00112C  0E01               	movlw	high _wrkbuf
 14471  00112E  0100               	movlb	0	; () banked
 14472  001130  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14473  001132  0E7D               	movlw	low _wrkbuf
 14474  001134  6F71               	movwf	?_sprintf& (0+255),b
 14475  001136  C29F  F073         	movff	_doModeVerbose$1338,?_sprintf+2
 14476  00113A  C2A0  F074         	movff	_doModeVerbose$1338+1,?_sprintf+3
 14477  00113E  EC84  F00F         	call	PL48	;call to abstracted procedure
 14478  001142  ECFD  F00F         	call	_sprintf	;wreg free
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;main.c: 928: putsUSART(wrkbuf);
 14482  001146  0101               	movlb	1	; () banked
 14483  001148  0E01               	movlw	high _wrkbuf
 14484  00114A  6E21               	movwf	?_putsUSART+1,c
 14485  00114C  0E7D               	movlw	low _wrkbuf
 14486  00114E  6E20               	movwf	?_putsUSART,c
 14487  001150  ECB5  F031         	call	_putsUSART	;wreg free
 14488                           
 14489                           ;main.c: 930: putsUSART((char *) "\r\n");
 14490  001154  0E73               	movlw	high (STR_239+51)
 14491  001156  6E21               	movwf	?_putsUSART+1,c
 14492  001158  0E1A               	movlw	low (STR_239+51)
 14493  00115A  6E20               	movwf	?_putsUSART,c
 14494  00115C  ECB5  F031         	call	_putsUSART	;wreg free
 14495  001160                     l15605:
 14496  001160  0102               	movlb	2	; () banked
 14497  001162  2BB5               	incf	doModeVerbose@i_1288& (0+255),f,b
 14498  001164                     l15607:
 14499                           
 14500                           ; BSR set to: 2
 14501  001164  51AF               	movf	doModeVerbose@count& (0+255),w,b
 14502  001166  5DB5               	subwf	doModeVerbose@i_1288& (0+255),w,b
 14503  001168  E201 D6A5          	bnc	l15505
 14504                           
 14505                           ; BSR set to: 2
 14506                           ;main.c: 931: }
 14507                           ;main.c: 932: }
 14508                           ;main.c: 934: if (rv) {
 14509  00116C  51A7               	movf	doModeVerbose@rv& (0+255),w,b
 14510  00116E  E008               	bz	l15613
 14511                           
 14512                           ; BSR set to: 2
 14513                           ;main.c: 935: putsUSART((char *) "+OK\r\n");
 14514  001170  0E7F               	movlw	high STR_9
 14515  001172  6E21               	movwf	?_putsUSART+1,c
 14516  001174  0E6B               	movlw	low STR_9
 14517  001176  6E20               	movwf	?_putsUSART,c
 14518  001178  ECB5  F031         	call	_putsUSART	;wreg free
 14519                           
 14520                           ;main.c: 936: }
 14521  00117C  EF0F  F00F         	goto	l16149
 14522  001180                     l15613:
 14523                           
 14524                           ; BSR set to: 2
 14525                           ;main.c: 937: else {
 14526                           ;main.c: 938: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 14527  001180  0E73               	movlw	high STR_80
 14528  001182  6E21               	movwf	?_putsUSART+1,c
 14529  001184  0E1D               	movlw	low STR_80
 14530  001186  6E20               	movwf	?_putsUSART,c
 14531  001188  ECB5  F031         	call	_putsUSART	;wreg free
 14532  00118C  EF0F  F00F         	goto	l16149
 14533  001190                     l15615:
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;main.c: 944: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 14537  001190  0E01               	movlw	high _cmdbuf
 14538  001192  0100               	movlb	0	; () banked
 14539  001194  6F69               	movwf	(?_stristr+1)& (0+255),b
 14540  001196  0E2D               	movlw	low _cmdbuf
 14541  001198  6F68               	movwf	?_stristr& (0+255),b
 14542  00119A  0E7F               	movlw	high STR_81
 14543  00119C  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14544  00119E  0E9E               	movlw	low STR_81
 14545  0011A0  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14546  0011A2  EC16  F02F         	call	_stristr	;wreg free
 14547  0011A6  0E2D               	movlw	low _cmdbuf
 14548  0011A8  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14549  0011AA  0E01               	movlw	high _cmdbuf
 14550  0011AC  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14551  0011AE  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14552  0011B0  E102               	bnz	u19855
 14553  0011B2  5168               	movf	?_stristr& (0+255),w,b
 14554  0011B4  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14555  0011B6                     u19855:
 14556  0011B6  E001 D0FB          	bnz	l15697
 14557                           
 14558                           ; BSR set to: 0
 14559                           ;main.c: 946: uint8_t nodeid;
 14560                           ;main.c: 947: uint8_t page = 0;
 14561  0011BA  0102               	movlb	2	; () banked
 14562  0011BC  6BA8               	clrf	doModeVerbose@page_1344& (0+255),b
 14563                           
 14564                           ; BSR set to: 2
 14565                           ;main.c: 948: uint8_t reg;
 14566                           ;main.c: 949: uint8_t value;
 14567                           ;main.c: 951: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14568  0011BE  506F               	movf	3951,w,c	;volatile
 14569  0011C0  0BE0               	andlw	224
 14570  0011C2  E007               	bz	l15629
 14571                           
 14572                           ; BSR set to: 2
 14573                           ;main.c: 952: putsUSART( (const char *)"-ERROR - Command only works if interface is open
      +                          .\r\n" );
 14574  0011C4  0E73               	movlw	high STR_50
 14575  0011C6  6E21               	movwf	?_putsUSART+1,c
 14576  0011C8  0E53               	movlw	low STR_50
 14577  0011CA  6E20               	movwf	?_putsUSART,c
 14578  0011CC  ECB5  F031         	call	_putsUSART	;wreg free
 14579  0011D0  D5E2               	goto	l15457
 14580  0011D2                     l15629:
 14581                           
 14582                           ; BSR set to: 2
 14583                           ;main.c: 956: }
 14584                           ;main.c: 958: strcpy(cmdbuf, cmdbuf + 5);
 14585  0011D2  EC29  F00F         	call	PL6	;call to abstracted procedure
 14586  0011D6  ECCB  F033         	call	_strcpy	;wreg free
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;main.c: 959: char *p = strtok(cmdbuf, " ");
 14590  0011DA  0E01               	movlw	high _cmdbuf
 14591  0011DC  EC7B  F00F         	call	PL42	;call to abstracted procedure
 14592  0011E0  EC00  F02E         	call	_strtok	;wreg free
 14593  0011E4  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1348
 14594  0011E8  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1348+1
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;main.c: 960: if ((0) != p) {
 14598  0011EC  0102               	movlb	2	; () banked
 14599  0011EE  51BC               	movf	(doModeVerbose@p_1348+1)& (0+255),w,b
 14600  0011F0  11BB               	iorwf	doModeVerbose@p_1348& (0+255),w,b
 14601  0011F2  E00A               	bz	l15637
 14602                           
 14603                           ; BSR set to: 2
 14604                           ;main.c: 961: nodeid = atoi(p);
 14605  0011F4  C2BB  F066         	movff	doModeVerbose@p_1348,?_atoi
 14606  0011F8  C2BC  F067         	movff	doModeVerbose@p_1348+1,?_atoi+1
 14607  0011FC  EC72  F025         	call	_atoi	;wreg free
 14608  001200  5166               	movf	?_atoi& (0+255),w,b
 14609  001202  0102               	movlb	2	; () banked
 14610  001204  6FB1               	movwf	doModeVerbose@nodeid_1343& (0+255),b
 14611                           
 14612                           ;main.c: 962: }
 14613  001206  D007               	goto	l15645
 14614  001208                     l15637:
 14615                           
 14616                           ; BSR set to: 2
 14617                           ;main.c: 963: else {
 14618                           ;main.c: 964: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 14619  001208  0E7B               	movlw	high STR_52
 14620  00120A  6E21               	movwf	?_putsUSART+1,c
 14621  00120C  0E64               	movlw	low STR_52
 14622  00120E  6E20               	movwf	?_putsUSART,c
 14623  001210  ECB5  F031         	call	_putsUSART	;wreg free
 14624  001214  D5C0               	goto	l15457
 14625  001216                     l15645:
 14626                           
 14627                           ; BSR set to: 2
 14628                           ;main.c: 968: }
 14629                           ;main.c: 970: if ( (0) != ( p = strtok((0), " ") ) ) {
 14630  001216  EC69  F00F         	call	PL30	;call to abstracted procedure
 14631  00121A  EC00  F02E         	call	_strtok	;wreg free
 14632  00121E  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1348
 14633  001222  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1348+1
 14634  001226  0102               	movlb	2	; () banked
 14635  001228  51BC               	movf	(doModeVerbose@p_1348+1)& (0+255),w,b
 14636  00122A  11BB               	iorwf	doModeVerbose@p_1348& (0+255),w,b
 14637  00122C  E033               	bz	l15653
 14638                           
 14639                           ; BSR set to: 2
 14640                           ;main.c: 972: char *preg;
 14641                           ;main.c: 973: if (preg = strchr(p, ':')) {
 14642  00122E  C2BB  F01F         	movff	doModeVerbose@p_1348,?_strchr
 14643  001232  C2BC  F020         	movff	doModeVerbose@p_1348+1,?_strchr+1
 14644  001236  6A22               	clrf	?_strchr+3,c
 14645  001238  0E3A               	movlw	58
 14646  00123A  6E21               	movwf	?_strchr+2,c
 14647  00123C  ECD1  F030         	call	_strchr	;wreg free
 14648  001240  C01F  F286         	movff	?_strchr,doModeVerbose@preg_1352
 14649  001244  C020  F287         	movff	?_strchr+1,doModeVerbose@preg_1352+1
 14650  001248  0102               	movlb	2	; () banked
 14651  00124A  5187               	movf	(doModeVerbose@preg_1352+1)& (0+255),w,b
 14652  00124C  1186               	iorwf	doModeVerbose@preg_1352& (0+255),w,b
 14653  00124E  E018               	bz	l15651
 14654                           
 14655                           ; BSR set to: 2
 14656                           ;main.c: 974: page = atoi(p);
 14657  001250  C2BB  F066         	movff	doModeVerbose@p_1348,?_atoi
 14658  001254  C2BC  F067         	movff	doModeVerbose@p_1348+1,?_atoi+1
 14659  001258  EC72  F025         	call	_atoi	;wreg free
 14660  00125C  5166               	movf	?_atoi& (0+255),w,b
 14661  00125E  0102               	movlb	2	; () banked
 14662  001260  6FA8               	movwf	doModeVerbose@page_1344& (0+255),b
 14663                           
 14664                           ;main.c: 975: reg = atoi(preg + 1);
 14665  001262  2986               	incf	doModeVerbose@preg_1352& (0+255),w,b
 14666  001264  0100               	movlb	0	; () banked
 14667  001266  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14668  001268  0E00               	movlw	0
 14669  00126A  0102               	movlb	2	; () banked
 14670  00126C  2187               	addwfc	(doModeVerbose@preg_1352+1)& (0+255),w,b
 14671  00126E  0100               	movlb	0	; () banked
 14672  001270  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14673  001272  C0C8  F066         	movff	??_doModeVerbose,?_atoi
 14674  001276  C0C9  F067         	movff	??_doModeVerbose+1,?_atoi+1
 14675  00127A  EC72  F025         	call	_atoi	;wreg free
 14676  00127E  D006               	goto	L15
 14677  001280                     l15651:
 14678                           
 14679                           ; BSR set to: 2
 14680                           ;main.c: 977: else {
 14681                           ;main.c: 978: reg = atoi(p);
 14682  001280  C2BB  F066         	movff	doModeVerbose@p_1348,?_atoi
 14683  001284  C2BC  F067         	movff	doModeVerbose@p_1348+1,?_atoi+1
 14684  001288  EC72  F025         	call	_atoi	;wreg free
 14685  00128C                     L15:
 14686  00128C  5166               	movf	?_atoi& (0+255),w,b
 14687  00128E  0102               	movlb	2	; () banked
 14688  001290  6FA9               	movwf	doModeVerbose@reg_1345& (0+255),b
 14689  001292  D007               	goto	l15661
 14690  001294                     l15653:
 14691                           
 14692                           ; BSR set to: 2
 14693                           ;main.c: 982: else {
 14694                           ;main.c: 983: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 14695  001294  0E79               	movlw	high STR_54
 14696  001296  6E21               	movwf	?_putsUSART+1,c
 14697  001298  0EAB               	movlw	low STR_54
 14698  00129A  6E20               	movwf	?_putsUSART,c
 14699  00129C  ECB5  F031         	call	_putsUSART	;wreg free
 14700  0012A0  D57A               	goto	l15457
 14701  0012A2                     l15661:
 14702                           
 14703                           ; BSR set to: 2
 14704                           ;main.c: 987: }
 14705                           ;main.c: 990: if ((0) != (p = strtok((0), " "))) {
 14706  0012A2  EC69  F00F         	call	PL30	;call to abstracted procedure
 14707  0012A6  EC00  F02E         	call	_strtok	;wreg free
 14708  0012AA  C068  F2BB         	movff	?_strtok,doModeVerbose@p_1348
 14709  0012AE  C069  F2BC         	movff	?_strtok+1,doModeVerbose@p_1348+1
 14710  0012B2  0102               	movlb	2	; () banked
 14711  0012B4  51BC               	movf	(doModeVerbose@p_1348+1)& (0+255),w,b
 14712  0012B6  11BB               	iorwf	doModeVerbose@p_1348& (0+255),w,b
 14713  0012B8  E00A               	bz	l15665
 14714                           
 14715                           ; BSR set to: 2
 14716                           ;main.c: 991: value = atoi(p);
 14717  0012BA  C2BB  F066         	movff	doModeVerbose@p_1348,?_atoi
 14718  0012BE  C2BC  F067         	movff	doModeVerbose@p_1348+1,?_atoi+1
 14719  0012C2  EC72  F025         	call	_atoi	;wreg free
 14720  0012C6  5166               	movf	?_atoi& (0+255),w,b
 14721  0012C8  0102               	movlb	2	; () banked
 14722  0012CA  6FAE               	movwf	doModeVerbose@value_1346& (0+255),b
 14723                           
 14724                           ;main.c: 992: }
 14725  0012CC  D007               	goto	l15673
 14726  0012CE                     l15665:
 14727                           
 14728                           ; BSR set to: 2
 14729                           ;main.c: 993: else {
 14730                           ;main.c: 994: putsUSART((char *) "-ERROR - Need a value\r\n");
 14731  0012CE  0E7B               	movlw	high STR_88
 14732  0012D0  6E21               	movwf	?_putsUSART+1,c
 14733  0012D2  0E94               	movlw	low STR_88
 14734  0012D4  6E20               	movwf	?_putsUSART,c
 14735  0012D6  ECB5  F031         	call	_putsUSART	;wreg free
 14736  0012DA  D55D               	goto	l15457
 14737  0012DC                     l15673:
 14738                           
 14739                           ; BSR set to: 2
 14740                           ;main.c: 998: }
 14741                           ;main.c: 1000: if (writeRegisterExtended(nodeid,
 14742                           ;main.c: 1001: page,
 14743                           ;main.c: 1002: reg,
 14744                           ;main.c: 1003: rwtimeout,
 14745                           ;main.c: 1004: &value)) {
 14746  0012DC  0100               	movlb	0	; () banked
 14747  0012DE  C2A8  F0B3         	movff	doModeVerbose@page_1344,?_writeRegisterExtended
 14748  0012E2  6BB4               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 14749  0012E4  C2A9  F0B5         	movff	doModeVerbose@reg_1345,?_writeRegisterExtended+2
 14750  0012E8  C033  F0B6         	movff	_rwtimeout,?_writeRegisterExtended+3
 14751  0012EC  6BB7               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 14752  0012EE  0E02               	movlw	high doModeVerbose@value_1346
 14753  0012F0  6FB9               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 14754  0012F2  0EAE               	movlw	low doModeVerbose@value_1346
 14755  0012F4  6FB8               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 14756  0012F6  0102               	movlb	2	; () banked
 14757  0012F8  51B1               	movf	doModeVerbose@nodeid_1343& (0+255),w,b
 14758  0012FA  ECF7  F025         	call	_writeRegisterExtended
 14759  0012FE  0900               	iorlw	0
 14760  001300  E02F               	bz	l15687
 14761                           
 14762                           ;main.c: 1005: putsUSART((char *) "+OK - Value written successfully for ");
 14763  001302  0E78               	movlw	high STR_89
 14764  001304  6E21               	movwf	?_putsUSART+1,c
 14765  001306  0E26               	movlw	low STR_89
 14766  001308  6E20               	movwf	?_putsUSART,c
 14767  00130A  ECB5  F031         	call	_putsUSART	;wreg free
 14768                           
 14769                           ;main.c: 1006: putsUSART((char *) "nodeid=");
 14770  00130E  0E7E               	movlw	high (STR_56+6)
 14771  001310  6E21               	movwf	?_putsUSART+1,c
 14772  001312  0E1F               	movlw	low (STR_56+6)
 14773  001314  6E20               	movwf	?_putsUSART,c
 14774  001316  ECB5  F031         	call	_putsUSART	;wreg free
 14775                           
 14776                           ;main.c: 1007: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14777  00131A  662C               	tstfsz	_bHex,c
 14778  00131C  D005               	goto	l15681
 14779  00131E  0E7F               	movlw	high STR_92
 14780  001320  0102               	movlb	2	; () banked
 14781  001322  6FA2               	movwf	(_doModeVerbose$1361+1)& (0+255),b
 14782  001324  0ECE               	movlw	low STR_92
 14783  001326  D004               	goto	L16
 14784  001328                     l15681:
 14785  001328  0E7E               	movlw	high STR_91
 14786  00132A  0102               	movlb	2	; () banked
 14787  00132C  6FA2               	movwf	(_doModeVerbose$1361+1)& (0+255),b
 14788  00132E  0ED1               	movlw	low STR_91
 14789  001330                     L16:
 14790  001330  6FA1               	movwf	_doModeVerbose$1361& (0+255),b
 14791                           
 14792                           ; BSR set to: 2
 14793  001332  0E01               	movlw	high _wrkbuf
 14794  001334  0100               	movlb	0	; () banked
 14795  001336  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14796  001338  0E7D               	movlw	low _wrkbuf
 14797  00133A  6F71               	movwf	?_sprintf& (0+255),b
 14798  00133C  C2A1  F073         	movff	_doModeVerbose$1361,?_sprintf+2
 14799  001340  C2A2  F074         	movff	_doModeVerbose$1361+1,?_sprintf+3
 14800  001344  C2B1  F075         	movff	doModeVerbose@nodeid_1343,?_sprintf+4
 14801  001348  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14802  00134A  ECFD  F00F         	call	_sprintf	;wreg free
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;main.c: 1008: putsUSART(wrkbuf);
 14806  00134E  0101               	movlb	1	; () banked
 14807  001350  0E01               	movlw	high _wrkbuf
 14808  001352  6E21               	movwf	?_putsUSART+1,c
 14809  001354  0E7D               	movlw	low _wrkbuf
 14810  001356  6E20               	movwf	?_putsUSART,c
 14811  001358  ECB5  F031         	call	_putsUSART	;wreg free
 14812                           
 14813                           ;main.c: 1009: }
 14814  00135C  EF0F  F00F         	goto	l16149
 14815  001360                     l15687:
 14816                           
 14817                           ;main.c: 1010: else {
 14818                           ;main.c: 1011: putsUSART((char *) "-ERROR - Failed to write value for ");
 14819  001360  0E78               	movlw	high STR_93
 14820  001362  6E21               	movwf	?_putsUSART+1,c
 14821  001364  0EDF               	movlw	low STR_93
 14822  001366  6E20               	movwf	?_putsUSART,c
 14823  001368  ECB5  F031         	call	_putsUSART	;wreg free
 14824                           
 14825                           ;main.c: 1012: putsUSART((char *) "nodeid=");
 14826  00136C  0E7E               	movlw	high (STR_56+6)
 14827  00136E  6E21               	movwf	?_putsUSART+1,c
 14828  001370  0E1F               	movlw	low (STR_56+6)
 14829  001372  6E20               	movwf	?_putsUSART,c
 14830  001374  ECB5  F031         	call	_putsUSART	;wreg free
 14831                           
 14832                           ;main.c: 1013: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14833  001378  662C               	tstfsz	_bHex,c
 14834  00137A  D005               	goto	l15693
 14835  00137C  0E7F               	movlw	high STR_92
 14836  00137E  0102               	movlb	2	; () banked
 14837  001380  6FA4               	movwf	(_doModeVerbose$1367+1)& (0+255),b
 14838  001382  0ECE               	movlw	low STR_92
 14839  001384  D004               	goto	L17
 14840  001386                     l15693:
 14841  001386  0E7E               	movlw	high STR_91
 14842  001388  0102               	movlb	2	; () banked
 14843  00138A  6FA4               	movwf	(_doModeVerbose$1367+1)& (0+255),b
 14844  00138C  0ED1               	movlw	low STR_91
 14845  00138E                     L17:
 14846  00138E  6FA3               	movwf	_doModeVerbose$1367& (0+255),b
 14847                           
 14848                           ; BSR set to: 2
 14849  001390  0E01               	movlw	high _wrkbuf
 14850  001392  0100               	movlb	0	; () banked
 14851  001394  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14852  001396  0E7D               	movlw	low _wrkbuf
 14853  001398  6F71               	movwf	?_sprintf& (0+255),b
 14854  00139A  C2A3  F073         	movff	_doModeVerbose$1367,?_sprintf+2
 14855  00139E  C2A4  F074         	movff	_doModeVerbose$1367+1,?_sprintf+3
 14856  0013A2  C2B1  F075         	movff	doModeVerbose@nodeid_1343,?_sprintf+4
 14857  0013A6  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14858  0013A8  ECFD  F00F         	call	_sprintf	;wreg free
 14859  0013AC  EF0F  F00F         	goto	l16149
 14860  0013B0                     l15697:
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;main.c: 1019: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14864  0013B0  0E01               	movlw	high _cmdbuf
 14865  0013B2  0100               	movlb	0	; () banked
 14866  0013B4  6F69               	movwf	(?_stristr+1)& (0+255),b
 14867  0013B6  0E2D               	movlw	low _cmdbuf
 14868  0013B8  6F68               	movwf	?_stristr& (0+255),b
 14869  0013BA  0E7F               	movlw	high STR_97
 14870  0013BC  6F6B               	movwf	(?_stristr+3)& (0+255),b
 14871  0013BE  0EAD               	movlw	low STR_97
 14872  0013C0  6F6A               	movwf	(?_stristr+2)& (0+255),b
 14873  0013C2  EC16  F02F         	call	_stristr	;wreg free
 14874  0013C6  0E2D               	movlw	low _cmdbuf
 14875  0013C8  6FC8               	movwf	??_doModeVerbose& (0+255),b
 14876  0013CA  0E01               	movlw	high _cmdbuf
 14877  0013CC  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 14878  0013CE  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 14879  0013D0  E102               	bnz	u19945
 14880  0013D2  5168               	movf	?_stristr& (0+255),w,b
 14881  0013D4  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 14882  0013D6                     u19945:
 14883  0013D6  E172               	bnz	l15741
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;main.c: 1021: uint8_t nodeid;
 14887                           ;main.c: 1022: uint8_t value;
 14888                           ;main.c: 1024: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14889  0013D8  506F               	movf	3951,w,c	;volatile
 14890  0013DA  0BE0               	andlw	224
 14891  0013DC  E007               	bz	l15709
 14892                           
 14893                           ; BSR set to: 0
 14894                           ;main.c: 1025: putsUSART( (const char *)"-ERROR - Command only works if interface is ope
      +                          n.\r\n" );
 14895  0013DE  0E73               	movlw	high STR_50
 14896  0013E0  6E21               	movwf	?_putsUSART+1,c
 14897  0013E2  0E53               	movlw	low STR_50
 14898  0013E4  6E20               	movwf	?_putsUSART,c
 14899  0013E6  ECB5  F031         	call	_putsUSART	;wreg free
 14900  0013EA  D4D5               	goto	l15457
 14901  0013EC                     l15709:
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;main.c: 1029: }
 14905                           ;main.c: 1031: strcpy(cmdbuf, cmdbuf + 5);
 14906  0013EC  EC29  F00F         	call	PL6	;call to abstracted procedure
 14907  0013F0  ECCB  F033         	call	_strcpy	;wreg free
 14908                           
 14909                           ; BSR set to: 0
 14910                           ;main.c: 1032: nodeid = atoi(cmdbuf);
 14911  0013F4  0E01               	movlw	high _cmdbuf
 14912  0013F6  0100               	movlb	0	; () banked
 14913  0013F8  6F67               	movwf	(?_atoi+1)& (0+255),b
 14914  0013FA  0E2D               	movlw	low _cmdbuf
 14915  0013FC  6F66               	movwf	?_atoi& (0+255),b
 14916  0013FE  EC72  F025         	call	_atoi	;wreg free
 14917  001402  5166               	movf	?_atoi& (0+255),w,b
 14918  001404  0102               	movlb	2	; () banked
 14919  001406  6FB6               	movwf	doModeVerbose@nodeid_1369& (0+255),b
 14920                           
 14921                           ; BSR set to: 2
 14922                           ;main.c: 1034: putsUSART((char *) "Info for node id = ");
 14923  001408  0E7D               	movlw	high STR_99
 14924  00140A  6E21               	movwf	?_putsUSART+1,c
 14925  00140C  0E36               	movlw	low STR_99
 14926  00140E  6E20               	movwf	?_putsUSART,c
 14927  001410  ECB5  F031         	call	_putsUSART	;wreg free
 14928                           
 14929                           ;main.c: 1035: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14930  001414  662C               	tstfsz	_bHex,c
 14931  001416  D005               	goto	l15719
 14932  001418  0E7F               	movlw	high STR_61
 14933  00141A  0102               	movlb	2	; () banked
 14934  00141C  6FA6               	movwf	(_doModeVerbose$1376+1)& (0+255),b
 14935  00141E  0EEE               	movlw	low STR_61
 14936  001420  D004               	goto	L18
 14937  001422                     l15719:
 14938  001422  0E7F               	movlw	high STR_60
 14939  001424  0102               	movlb	2	; () banked
 14940  001426  6FA6               	movwf	(_doModeVerbose$1376+1)& (0+255),b
 14941  001428  0E50               	movlw	low STR_60
 14942  00142A                     L18:
 14943  00142A  6FA5               	movwf	_doModeVerbose$1376& (0+255),b
 14944                           
 14945                           ; BSR set to: 2
 14946  00142C  0E01               	movlw	high _wrkbuf
 14947  00142E  0100               	movlb	0	; () banked
 14948  001430  6F72               	movwf	(?_sprintf+1)& (0+255),b
 14949  001432  0E7D               	movlw	low _wrkbuf
 14950  001434  6F71               	movwf	?_sprintf& (0+255),b
 14951  001436  C2A5  F073         	movff	_doModeVerbose$1376,?_sprintf+2
 14952  00143A  C2A6  F074         	movff	_doModeVerbose$1376+1,?_sprintf+3
 14953  00143E  C2B6  F075         	movff	doModeVerbose@nodeid_1369,?_sprintf+4
 14954  001442  6B76               	clrf	(?_sprintf+5)& (0+255),b
 14955  001444  ECFD  F00F         	call	_sprintf	;wreg free
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;main.c: 1036: putsUSART(wrkbuf);
 14959  001448  0101               	movlb	1	; () banked
 14960  00144A  0E01               	movlw	high _wrkbuf
 14961  00144C  6E21               	movwf	?_putsUSART+1,c
 14962  00144E  0E7D               	movlw	low _wrkbuf
 14963  001450  6E20               	movwf	?_putsUSART,c
 14964  001452  ECB5  F031         	call	_putsUSART	;wreg free
 14965                           
 14966                           ;main.c: 1037: putsUSART((char *) "\r\n");
 14967  001456  0E73               	movlw	high (STR_239+51)
 14968  001458  6E21               	movwf	?_putsUSART+1,c
 14969  00145A  0E1A               	movlw	low (STR_239+51)
 14970  00145C  6E20               	movwf	?_putsUSART,c
 14971  00145E  ECB5  F031         	call	_putsUSART	;wreg free
 14972                           
 14973                           ;main.c: 1039: if (!readRegisterExtended(nodeid,
 14974                           ;main.c: 1040: 0,
 14975                           ;main.c: 1041: 0xd0,
 14976                           ;main.c: 1042: rwtimeout,
 14977                           ;main.c: 1043: &value)) {
 14978  001462  0100               	movlb	0	; () banked
 14979  001464  6BB4               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14980  001466  6BB3               	clrf	?_readRegisterExtended& (0+255),b
 14981  001468  0ED0               	movlw	208
 14982  00146A  6FB5               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14983  00146C  C033  F0B6         	movff	_rwtimeout,?_readRegisterExtended+3
 14984  001470  6BB7               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14985  001472  0E02               	movlw	high doModeVerbose@value_1370
 14986  001474  6FB9               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14987  001476  0EAA               	movlw	low doModeVerbose@value_1370
 14988  001478  6FB8               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14989  00147A  0102               	movlb	2	; () banked
 14990  00147C  51B6               	movf	doModeVerbose@nodeid_1369& (0+255),w,b
 14991  00147E  ECF5  F026         	call	_readRegisterExtended
 14992  001482  0900               	iorlw	0
 14993  001484  E107               	bnz	l15737
 14994                           
 14995                           ;main.c: 1044: putsUSART((char *) "-ERROR - Node not found.\r\n");
 14996  001486  0E7A               	movlw	high STR_103
 14997  001488  6E21               	movwf	?_putsUSART+1,c
 14998  00148A  0E63               	movlw	low STR_103
 14999  00148C  6E20               	movwf	?_putsUSART,c
 15000  00148E  ECB5  F031         	call	_putsUSART	;wreg free
 15001  001492  D481               	goto	l15457
 15002  001494                     l15737:
 15003                           
 15004                           ;main.c: 1048: }
 15005                           ;main.c: 1050: printNodeFirmwareVersion(nodeid);
 15006  001494  0102               	movlb	2	; () banked
 15007  001496  51B6               	movf	doModeVerbose@nodeid_1369& (0+255),w,b
 15008  001498  EC93  F029         	call	_printNodeFirmwareVersion
 15009                           
 15010                           ;main.c: 1051: printGUID(nodeid);
 15011  00149C  0102               	movlb	2	; () banked
 15012  00149E  51B6               	movf	doModeVerbose@nodeid_1369& (0+255),w,b
 15013  0014A0  EC77  F026         	call	_printGUID
 15014                           
 15015                           ;main.c: 1052: printMDF(nodeid);
 15016  0014A4  0102               	movlb	2	; () banked
 15017  0014A6  51B6               	movf	doModeVerbose@nodeid_1369& (0+255),w,b
 15018  0014A8  ECB5  F02D         	call	_printMDF
 15019                           
 15020                           ;main.c: 1053: putsUSART((char *) "+OK\r\n");
 15021  0014AC  0E7F               	movlw	high STR_9
 15022  0014AE  6E21               	movwf	?_putsUSART+1,c
 15023  0014B0  0E6B               	movlw	low STR_9
 15024  0014B2  6E20               	movwf	?_putsUSART,c
 15025  0014B4  ECB5  F031         	call	_putsUSART	;wreg free
 15026                           
 15027                           ;main.c: 1054: }
 15028  0014B8  EF0F  F00F         	goto	l16149
 15029  0014BC                     l15741:
 15030                           
 15031                           ; BSR set to: 0
 15032                           ;main.c: 1058: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 15033  0014BC  0E01               	movlw	high _cmdbuf
 15034  0014BE  0100               	movlb	0	; () banked
 15035  0014C0  6F69               	movwf	(?_stristr+1)& (0+255),b
 15036  0014C2  0E2D               	movlw	low _cmdbuf
 15037  0014C4  6F68               	movwf	?_stristr& (0+255),b
 15038  0014C6  0E7F               	movlw	high STR_105
 15039  0014C8  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15040  0014CA  0E42               	movlw	low STR_105
 15041  0014CC  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15042  0014CE  EC16  F02F         	call	_stristr	;wreg free
 15043  0014D2  0E2D               	movlw	low _cmdbuf
 15044  0014D4  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15045  0014D6  0E01               	movlw	high _cmdbuf
 15046  0014D8  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15047  0014DA  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15048  0014DC  E102               	bnz	u19985
 15049  0014DE  5168               	movf	?_stristr& (0+255),w,b
 15050  0014E0  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15051  0014E2                     u19985:
 15052  0014E2  E001 D0F6          	bnz	l15841
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;main.c: 1061: uint8_t filterno;
 15056                           ;main.c: 1062: uint8_t filter_priority;
 15057                           ;main.c: 1063: uint16_t filter_class;
 15058                           ;main.c: 1064: uint8_t filter_type;
 15059                           ;main.c: 1065: uint8_t filter_nodeid;
 15060                           ;main.c: 1066: BOOL bPersistent = 0;
 15061  0014E6  0102               	movlb	2	; () banked
 15062  0014E8  6BAB               	clrf	doModeVerbose@bPersistent& (0+255),b
 15063                           
 15064                           ; BSR set to: 2
 15065                           ;main.c: 1068: strcpy(cmdbuf, cmdbuf + 8);
 15066  0014EA  0E01               	movlw	high _cmdbuf
 15067  0014EC  EC5C  F00F         	call	PL20	;call to abstracted procedure
 15068  0014F0  ECCB  F033         	call	_strcpy	;wreg free
 15069                           
 15070                           ; BSR set to: 0
 15071                           ;main.c: 1069: char *p = strtok(cmdbuf, ",");
 15072  0014F4  EC71  F00F         	call	PL32	;call to abstracted procedure
 15073  0014F8  EC00  F02E         	call	_strtok	;wreg free
 15074  0014FC  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15075  001500  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15076                           
 15077                           ; BSR set to: 0
 15078                           ;main.c: 1070: if ((0) != p) {
 15079  001504  0102               	movlb	2	; () banked
 15080  001506  51C7               	movf	(doModeVerbose@p_1387+1)& (0+255),w,b
 15081  001508  11C6               	iorwf	doModeVerbose@p_1387& (0+255),w,b
 15082  00150A  E013               	bz	l15763
 15083                           
 15084                           ; BSR set to: 2
 15085                           ;main.c: 1071: filterno = atoi(p);
 15086  00150C  C2C6  F066         	movff	doModeVerbose@p_1387,?_atoi
 15087  001510  C2C7  F067         	movff	doModeVerbose@p_1387+1,?_atoi+1
 15088  001514  EC72  F025         	call	_atoi	;wreg free
 15089  001518  5166               	movf	?_atoi& (0+255),w,b
 15090  00151A  0102               	movlb	2	; () banked
 15091  00151C  6FAC               	movwf	doModeVerbose@filterno& (0+255),b
 15092                           
 15093                           ; BSR set to: 2
 15094                           ;main.c: 1072: if (filterno > 15) {
 15095  00151E  0E0F               	movlw	15
 15096  001520  65AC               	cpfsgt	doModeVerbose@filterno& (0+255),b
 15097  001522  D00E               	goto	l15771
 15098                           
 15099                           ; BSR set to: 2
 15100                           ;main.c: 1073: putsUSART((char *) "-ERROR - Filter number can only be set to a value bet
      +                          ween 0-15.\r\n");
 15101  001524  0E70               	movlw	high STR_107
 15102  001526  6E21               	movwf	?_putsUSART+1,c
 15103  001528  0EA2               	movlw	low STR_107
 15104  00152A  6E20               	movwf	?_putsUSART,c
 15105  00152C  ECB5  F031         	call	_putsUSART	;wreg free
 15106  001530  D432               	goto	l15457
 15107  001532                     l15763:
 15108                           
 15109                           ; BSR set to: 2
 15110                           ;main.c: 1079: else {
 15111                           ;main.c: 1080: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 15112  001532  0E77               	movlw	high STR_108
 15113  001534  6E21               	movwf	?_putsUSART+1,c
 15114  001536  0E16               	movlw	low STR_108
 15115  001538  6E20               	movwf	?_putsUSART,c
 15116  00153A  ECB5  F031         	call	_putsUSART	;wreg free
 15117  00153E  D42B               	goto	l15457
 15118  001540                     l15771:
 15119                           
 15120                           ; BSR set to: 2
 15121                           ;main.c: 1084: }
 15122                           ;main.c: 1087: p = strtok((0), ",");
 15123  001540  EC1A  F00F         	call	PL2	;call to abstracted procedure
 15124  001544  EC00  F02E         	call	_strtok	;wreg free
 15125  001548  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15126  00154C  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;main.c: 1088: if ((0) != p) {
 15130  001550  0102               	movlb	2	; () banked
 15131  001552  51C7               	movf	(doModeVerbose@p_1387+1)& (0+255),w,b
 15132  001554  11C6               	iorwf	doModeVerbose@p_1387& (0+255),w,b
 15133  001556  E00A               	bz	l15777
 15134                           
 15135                           ; BSR set to: 2
 15136                           ;main.c: 1089: filter_priority = atoi(p);
 15137  001558  C2C6  F066         	movff	doModeVerbose@p_1387,?_atoi
 15138  00155C  C2C7  F067         	movff	doModeVerbose@p_1387+1,?_atoi+1
 15139  001560  EC72  F025         	call	_atoi	;wreg free
 15140  001564  5166               	movf	?_atoi& (0+255),w,b
 15141  001566  0102               	movlb	2	; () banked
 15142  001568  6F8C               	movwf	doModeVerbose@filter_priority& (0+255),b
 15143                           
 15144                           ;main.c: 1090: }
 15145  00156A  D007               	goto	l15785
 15146  00156C                     l15777:
 15147                           
 15148                           ; BSR set to: 2
 15149                           ;main.c: 1091: else {
 15150                           ;main.c: 1092: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 15151  00156C  0E76               	movlw	high STR_110
 15152  00156E  6E21               	movwf	?_putsUSART+1,c
 15153  001570  0E22               	movlw	low STR_110
 15154  001572  6E20               	movwf	?_putsUSART,c
 15155  001574  ECB5  F031         	call	_putsUSART	;wreg free
 15156  001578  D40E               	goto	l15457
 15157  00157A                     l15785:
 15158                           
 15159                           ; BSR set to: 2
 15160                           ;main.c: 1096: }
 15161                           ;main.c: 1099: p = strtok((0), ",");
 15162  00157A  EC1A  F00F         	call	PL2	;call to abstracted procedure
 15163  00157E  EC00  F02E         	call	_strtok	;wreg free
 15164  001582  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15165  001586  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;main.c: 1100: if ((0) != p) {
 15169  00158A  0102               	movlb	2	; () banked
 15170  00158C  51C7               	movf	(doModeVerbose@p_1387+1)& (0+255),w,b
 15171  00158E  11C6               	iorwf	doModeVerbose@p_1387& (0+255),w,b
 15172  001590  E00B               	bz	l15791
 15173                           
 15174                           ; BSR set to: 2
 15175                           ;main.c: 1101: filter_class = atoi(p);
 15176  001592  C2C6  F066         	movff	doModeVerbose@p_1387,?_atoi
 15177  001596  C2C7  F067         	movff	doModeVerbose@p_1387+1,?_atoi+1
 15178  00159A  EC72  F025         	call	_atoi	;wreg free
 15179  00159E  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 15180  0015A2  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 15181                           
 15182                           ;main.c: 1102: }
 15183  0015A6  D008               	goto	l15799
 15184  0015A8                     l15791:
 15185                           
 15186                           ; BSR set to: 2
 15187                           ;main.c: 1103: else {
 15188                           ;main.c: 1104: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 15189  0015A8  0E77               	movlw	high STR_112
 15190  0015AA  6E21               	movwf	?_putsUSART+1,c
 15191  0015AC  0EB2               	movlw	low STR_112
 15192  0015AE  6E20               	movwf	?_putsUSART,c
 15193  0015B0  ECB5  F031         	call	_putsUSART	;wreg free
 15194  0015B4  EFCB  F006         	goto	l15457
 15195  0015B8                     l15799:
 15196                           
 15197                           ; BSR set to: 0
 15198                           ;main.c: 1108: }
 15199                           ;main.c: 1111: p = strtok((0), ",");
 15200  0015B8  EC22  F00F         	call	PL4	;call to abstracted procedure
 15201  0015BC  EC00  F02E         	call	_strtok	;wreg free
 15202  0015C0  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15203  0015C4  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;main.c: 1112: if ((0) != p) {
 15207  0015C8  0102               	movlb	2	; () banked
 15208  0015CA  51C7               	movf	(doModeVerbose@p_1387+1)& (0+255),w,b
 15209  0015CC  11C6               	iorwf	doModeVerbose@p_1387& (0+255),w,b
 15210  0015CE  E00A               	bz	l15805
 15211                           
 15212                           ; BSR set to: 2
 15213                           ;main.c: 1113: filter_type = atoi(p);
 15214  0015D0  C2C6  F066         	movff	doModeVerbose@p_1387,?_atoi
 15215  0015D4  C2C7  F067         	movff	doModeVerbose@p_1387+1,?_atoi+1
 15216  0015D8  EC72  F025         	call	_atoi	;wreg free
 15217  0015DC  5166               	movf	?_atoi& (0+255),w,b
 15218  0015DE  0102               	movlb	2	; () banked
 15219  0015E0  6F8D               	movwf	doModeVerbose@filter_type& (0+255),b
 15220                           
 15221                           ;main.c: 1114: }
 15222  0015E2  D008               	goto	l15813
 15223  0015E4                     l15805:
 15224                           
 15225                           ; BSR set to: 2
 15226                           ;main.c: 1115: else {
 15227                           ;main.c: 1116: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 15228  0015E4  0E78               	movlw	high STR_114
 15229  0015E6  6E21               	movwf	?_putsUSART+1,c
 15230  0015E8  0E00               	movlw	low STR_114
 15231  0015EA  6E20               	movwf	?_putsUSART,c
 15232  0015EC  ECB5  F031         	call	_putsUSART	;wreg free
 15233  0015F0  EFCB  F006         	goto	l15457
 15234  0015F4                     l15813:
 15235                           
 15236                           ; BSR set to: 2
 15237                           ;main.c: 1120: }
 15238                           ;main.c: 1123: p = strtok((0), ",");
 15239  0015F4  EC1A  F00F         	call	PL2	;call to abstracted procedure
 15240  0015F8  EC00  F02E         	call	_strtok	;wreg free
 15241  0015FC  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15242  001600  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15243                           
 15244                           ; BSR set to: 0
 15245                           ;main.c: 1124: if ((0) != p) {
 15246  001604  0102               	movlb	2	; () banked
 15247  001606  51C7               	movf	(doModeVerbose@p_1387+1)& (0+255),w,b
 15248  001608  11C6               	iorwf	doModeVerbose@p_1387& (0+255),w,b
 15249  00160A  E00A               	bz	l15819
 15250                           
 15251                           ; BSR set to: 2
 15252                           ;main.c: 1125: filter_nodeid = atoi(p);
 15253  00160C  C2C6  F066         	movff	doModeVerbose@p_1387,?_atoi
 15254  001610  C2C7  F067         	movff	doModeVerbose@p_1387+1,?_atoi+1
 15255  001614  EC72  F025         	call	_atoi	;wreg free
 15256  001618  5166               	movf	?_atoi& (0+255),w,b
 15257  00161A  0102               	movlb	2	; () banked
 15258  00161C  6F8E               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 15259                           
 15260                           ;main.c: 1126: }
 15261  00161E  D008               	goto	l15827
 15262  001620                     l15819:
 15263                           
 15264                           ; BSR set to: 2
 15265                           ;main.c: 1127: else {
 15266                           ;main.c: 1128: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 15267  001620  0E76               	movlw	high STR_116
 15268  001622  6E21               	movwf	?_putsUSART+1,c
 15269  001624  0E75               	movlw	low STR_116
 15270  001626  6E20               	movwf	?_putsUSART,c
 15271  001628  ECB5  F031         	call	_putsUSART	;wreg free
 15272  00162C  EFCB  F006         	goto	l15457
 15273  001630                     l15827:
 15274                           
 15275                           ; BSR set to: 2
 15276                           ;main.c: 1132: }
 15277                           ;main.c: 1135: p = strtok((0), ",");
 15278  001630  EC1A  F00F         	call	PL2	;call to abstracted procedure
 15279  001634  EC00  F02E         	call	_strtok	;wreg free
 15280  001638  C068  F2C6         	movff	?_strtok,doModeVerbose@p_1387
 15281  00163C  C069  F2C7         	movff	?_strtok+1,doModeVerbose@p_1387+1
 15282                           
 15283                           ;main.c: 1136: if ( (0) != stristr(p, "PERSISTENT") ) {
 15284  001640  C2C6  F068         	movff	doModeVerbose@p_1387,?_stristr
 15285  001644  C2C7  F069         	movff	doModeVerbose@p_1387+1,?_stristr+1
 15286  001648  0E7E               	movlw	high STR_118
 15287  00164A  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15288  00164C  0E55               	movlw	low STR_118
 15289  00164E  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15290  001650  EC16  F02F         	call	_stristr	;wreg free
 15291  001654  5169               	movf	(?_stristr+1)& (0+255),w,b
 15292  001656  1168               	iorwf	?_stristr& (0+255),w,b
 15293  001658  E003               	bz	l15831
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;main.c: 1137: bPersistent = 1;
 15297  00165A  0E01               	movlw	1
 15298  00165C  0102               	movlb	2	; () banked
 15299  00165E  6FAB               	movwf	doModeVerbose@bPersistent& (0+255),b
 15300  001660                     l15831:
 15301                           
 15302                           ;main.c: 1138: }
 15303                           ;main.c: 1141: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15304  001660  0E80               	movlw	128
 15305  001662  EC4A  F034         	call	_ECANSetOperationMode
 15306                           
 15307                           ;main.c: 1143: uint32_t id = ((uint32_t) filter_priority << 26) |
 15308                           ;main.c: 1144: ((uint32_t) filter_class << 16) |
 15309                           ;main.c: 1145: ((uint32_t) filter_type << 8) |
 15310                           ;main.c: 1146: filter_nodeid;
 15311  001666  C28D  F0C8         	movff	doModeVerbose@filter_type,??_doModeVerbose
 15312  00166A  EC91  F00F         	call	PL50	;call to abstracted procedure
 15313  00166E  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 15314  001670  0100               	movlb	0	; () banked
 15315  001672  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 15316  001674  0102               	movlb	2	; () banked
 15317  001676  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 15318  001678  ECB7  F00F         	call	PL68	;call to abstracted procedure
 15319  00167C  C28C  F0D0         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 15320  001680  DBF6               	call	PL10	;call to abstracted procedure
 15321  001682  518E               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 15322  001684  0100               	movlb	0	; () banked
 15323  001686  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 15324  001688  0102               	movlb	2	; () banked
 15325  00168A  6F80               	movwf	doModeVerbose@id& (0+255),b
 15326  00168C  0100               	movlb	0	; () banked
 15327  00168E  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 15328  001690  0102               	movlb	2	; () banked
 15329  001692  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 15330  001694  0100               	movlb	0	; () banked
 15331  001696  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 15332  001698  0102               	movlb	2	; () banked
 15333  00169A  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 15334  00169C  0100               	movlb	0	; () banked
 15335  00169E  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 15336  0016A0  0102               	movlb	2	; () banked
 15337  0016A2  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 15338                           
 15339                           ; BSR set to: 2
 15340                           ;main.c: 1148: setFilter(filterno, id, bPersistent );
 15341  0016A4  C280  F060         	movff	doModeVerbose@id,?_setFilter
 15342  0016A8  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 15343  0016AC  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 15344  0016B0  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 15345  0016B4  C2AB  F064         	movff	doModeVerbose@bPersistent,?_setFilter+4
 15346  0016B8  51AC               	movf	doModeVerbose@filterno& (0+255),w,b
 15347  0016BA  ECF6  F01A         	call	_setFilter
 15348                           
 15349                           ;main.c: 1151: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 15350  0016BE  0E00               	movlw	0
 15351  0016C0  EC4A  F034         	call	_ECANSetOperationMode
 15352                           
 15353                           ;main.c: 1153: putsUSART((char *) "+OK\r\n");
 15354  0016C4  0E7F               	movlw	high STR_9
 15355  0016C6  6E21               	movwf	?_putsUSART+1,c
 15356  0016C8  0E6B               	movlw	low STR_9
 15357  0016CA  6E20               	movwf	?_putsUSART,c
 15358  0016CC  ECB5  F031         	call	_putsUSART	;wreg free
 15359                           
 15360                           ;main.c: 1154: }
 15361  0016D0  D3A6               	goto	l16149
 15362  0016D2                     l15841:
 15363                           
 15364                           ; BSR set to: 0
 15365                           ;main.c: 1158: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 15366  0016D2  0E01               	movlw	high _cmdbuf
 15367  0016D4  0100               	movlb	0	; () banked
 15368  0016D6  6F69               	movwf	(?_stristr+1)& (0+255),b
 15369  0016D8  0E2D               	movlw	low _cmdbuf
 15370  0016DA  6F68               	movwf	?_stristr& (0+255),b
 15371  0016DC  0E7F               	movlw	high STR_120
 15372  0016DE  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15373  0016E0  0EA3               	movlw	low STR_120
 15374  0016E2  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15375  0016E4  EC16  F02F         	call	_stristr	;wreg free
 15376  0016E8  0E2D               	movlw	low _cmdbuf
 15377  0016EA  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15378  0016EC  0E01               	movlw	high _cmdbuf
 15379  0016EE  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15380  0016F0  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15381  0016F2  E102               	bnz	u20075
 15382  0016F4  5168               	movf	?_stristr& (0+255),w,b
 15383  0016F6  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15384  0016F8                     u20075:
 15385  0016F8  E001 D0DC          	bnz	l15969
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;main.c: 1167: strcpy(cmdbuf, cmdbuf + 8);
 15389                           
 15390                           ; BSR set to: 0
 15391  0016FC  0E01               	movlw	high _cmdbuf
 15392  0016FE  DBDC               	call	PL20	;call to abstracted procedure
 15393  001700  ECCB  F033         	call	_strcpy	;wreg free
 15394                           
 15395                           ; BSR set to: 0
 15396                           ;main.c: 1168: char *p = strtok(cmdbuf, ",");
 15397  001704  DBEE               	call	PL32	;call to abstracted procedure
 15398  001706  EC00  F02E         	call	_strtok	;wreg free
 15399  00170A  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1410
 15400  00170E  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1410+1
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;main.c: 1169: if ((0) != p) {
 15404  001712  0102               	movlb	2	; () banked
 15405  001714  51C5               	movf	(doModeVerbose@p_1410+1)& (0+255),w,b
 15406  001716  11C4               	iorwf	doModeVerbose@p_1410& (0+255),w,b
 15407  001718  E014               	bz	l15863
 15408                           
 15409                           ; BSR set to: 2
 15410                           ;main.c: 1170: maskno = atoi(p);
 15411  00171A  C2C4  F066         	movff	doModeVerbose@p_1410,?_atoi
 15412  00171E  C2C5  F067         	movff	doModeVerbose@p_1410+1,?_atoi+1
 15413  001722  EC72  F025         	call	_atoi	;wreg free
 15414  001726  5166               	movf	?_atoi& (0+255),w,b
 15415  001728  0102               	movlb	2	; () banked
 15416  00172A  6FB2               	movwf	doModeVerbose@maskno& (0+255),b
 15417                           
 15418                           ; BSR set to: 2
 15419                           ;main.c: 1171: if (maskno > 1) {
 15420  00172C  0E01               	movlw	1
 15421  00172E  65B2               	cpfsgt	doModeVerbose@maskno& (0+255),b
 15422  001730  D010               	goto	l15871
 15423                           
 15424                           ; BSR set to: 2
 15425                           ;main.c: 1172: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 15426  001732  0E73               	movlw	high STR_122
 15427  001734  6E21               	movwf	?_putsUSART+1,c
 15428  001736  0EEE               	movlw	low STR_122
 15429  001738  6E20               	movwf	?_putsUSART,c
 15430  00173A  ECB5  F031         	call	_putsUSART	;wreg free
 15431  00173E  EFCB  F006         	goto	l15457
 15432  001742                     l15863:
 15433                           
 15434                           ; BSR set to: 2
 15435                           ;main.c: 1178: else {
 15436                           ;main.c: 1179: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 15437  001742  0E78               	movlw	high STR_123
 15438  001744  6E21               	movwf	?_putsUSART+1,c
 15439  001746  0E4C               	movlw	low STR_123
 15440  001748  6E20               	movwf	?_putsUSART,c
 15441  00174A  ECB5  F031         	call	_putsUSART	;wreg free
 15442  00174E  EFCB  F006         	goto	l15457
 15443  001752                     l15871:
 15444                           
 15445                           ; BSR set to: 2
 15446                           ;main.c: 1183: }
 15447                           ;main.c: 1186: p = strtok((0), ",");
 15448  001752  DB70               	call	PL2	;call to abstracted procedure
 15449  001754  EC00  F02E         	call	_strtok	;wreg free
 15450  001758  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1410
 15451  00175C  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1410+1
 15452                           
 15453                           ; BSR set to: 0
 15454                           ;main.c: 1187: if ((0) != p) {
 15455  001760  0102               	movlb	2	; () banked
 15456  001762  51C5               	movf	(doModeVerbose@p_1410+1)& (0+255),w,b
 15457  001764  11C4               	iorwf	doModeVerbose@p_1410& (0+255),w,b
 15458  001766  E00A               	bz	l15877
 15459                           
 15460                           ; BSR set to: 2
 15461                           ;main.c: 1188: mask_priority = atoi(p);
 15462  001768  C2C4  F066         	movff	doModeVerbose@p_1410,?_atoi
 15463  00176C  C2C5  F067         	movff	doModeVerbose@p_1410+1,?_atoi+1
 15464  001770  EC72  F025         	call	_atoi	;wreg free
 15465  001774  5166               	movf	?_atoi& (0+255),w,b
 15466  001776  0102               	movlb	2	; () banked
 15467  001778  6F8F               	movwf	doModeVerbose@mask_priority& (0+255),b
 15468                           
 15469                           ;main.c: 1189: }
 15470  00177A  D008               	goto	l15885
 15471  00177C                     l15877:
 15472                           
 15473                           ; BSR set to: 2
 15474                           ;main.c: 1190: else {
 15475                           ;main.c: 1191: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 15476  00177C  0E76               	movlw	high STR_125
 15477  00177E  6E21               	movwf	?_putsUSART+1,c
 15478  001780  0EC6               	movlw	low STR_125
 15479  001782  6E20               	movwf	?_putsUSART,c
 15480  001784  ECB5  F031         	call	_putsUSART	;wreg free
 15481  001788  EFCB  F006         	goto	l15457
 15482  00178C                     l15885:
 15483                           
 15484                           ; BSR set to: 2
 15485                           ;main.c: 1195: }
 15486                           ;main.c: 1198: p = strtok((0), ",");
 15487  00178C  DB53               	call	PL2	;call to abstracted procedure
 15488  00178E  EC00  F02E         	call	_strtok	;wreg free
 15489  001792  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1410
 15490  001796  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1410+1
 15491                           
 15492                           ; BSR set to: 0
 15493                           ;main.c: 1199: if ((0) != p) {
 15494  00179A  0102               	movlb	2	; () banked
 15495  00179C  51C5               	movf	(doModeVerbose@p_1410+1)& (0+255),w,b
 15496  00179E  11C4               	iorwf	doModeVerbose@p_1410& (0+255),w,b
 15497  0017A0  E00B               	bz	l15891
 15498                           
 15499                           ; BSR set to: 2
 15500                           ;main.c: 1200: mask_class = atoi(p);
 15501  0017A2  C2C4  F066         	movff	doModeVerbose@p_1410,?_atoi
 15502  0017A6  C2C5  F067         	movff	doModeVerbose@p_1410+1,?_atoi+1
 15503  0017AA  EC72  F025         	call	_atoi	;wreg free
 15504  0017AE  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 15505  0017B2  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 15506                           
 15507                           ;main.c: 1201: }
 15508  0017B6  D008               	goto	l15899
 15509  0017B8                     l15891:
 15510                           
 15511                           ; BSR set to: 2
 15512                           ;main.c: 1202: else {
 15513                           ;main.c: 1203: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 15514  0017B8  0E78               	movlw	high STR_127
 15515  0017BA  6E21               	movwf	?_putsUSART+1,c
 15516  0017BC  0E96               	movlw	low STR_127
 15517  0017BE  6E20               	movwf	?_putsUSART,c
 15518  0017C0  ECB5  F031         	call	_putsUSART	;wreg free
 15519  0017C4  EFCB  F006         	goto	l15457
 15520  0017C8                     l15899:
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;main.c: 1207: }
 15524                           ;main.c: 1210: p = strtok((0), ",");
 15525  0017C8  DB3D               	call	PL4	;call to abstracted procedure
 15526  0017CA  EC00  F02E         	call	_strtok	;wreg free
 15527  0017CE  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1410
 15528  0017D2  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1410+1
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;main.c: 1211: if ((0) != p) {
 15532  0017D6  0102               	movlb	2	; () banked
 15533  0017D8  51C5               	movf	(doModeVerbose@p_1410+1)& (0+255),w,b
 15534  0017DA  11C4               	iorwf	doModeVerbose@p_1410& (0+255),w,b
 15535  0017DC  E00A               	bz	l15905
 15536                           
 15537                           ; BSR set to: 2
 15538                           ;main.c: 1212: mask_type = atoi(p);
 15539  0017DE  C2C4  F066         	movff	doModeVerbose@p_1410,?_atoi
 15540  0017E2  C2C5  F067         	movff	doModeVerbose@p_1410+1,?_atoi+1
 15541  0017E6  EC72  F025         	call	_atoi	;wreg free
 15542  0017EA  5166               	movf	?_atoi& (0+255),w,b
 15543  0017EC  0102               	movlb	2	; () banked
 15544  0017EE  6F90               	movwf	doModeVerbose@mask_type& (0+255),b
 15545                           
 15546                           ;main.c: 1213: }
 15547  0017F0  D008               	goto	l15913
 15548  0017F2                     l15905:
 15549                           
 15550                           ; BSR set to: 2
 15551                           ;main.c: 1214: else {
 15552                           ;main.c: 1215: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 15553  0017F2  0E78               	movlw	high STR_129
 15554  0017F4  6E21               	movwf	?_putsUSART+1,c
 15555  0017F6  0EBB               	movlw	low STR_129
 15556  0017F8  6E20               	movwf	?_putsUSART,c
 15557  0017FA  ECB5  F031         	call	_putsUSART	;wreg free
 15558  0017FE  EFCB  F006         	goto	l15457
 15559  001802                     l15913:
 15560                           
 15561                           ; BSR set to: 2
 15562                           ;main.c: 1219: }
 15563                           ;main.c: 1222: p = strtok((0), ",");
 15564  001802  DB18               	call	PL2	;call to abstracted procedure
 15565  001804  EC00  F02E         	call	_strtok	;wreg free
 15566  001808  C068  F2C4         	movff	?_strtok,doModeVerbose@p_1410
 15567  00180C  C069  F2C5         	movff	?_strtok+1,doModeVerbose@p_1410+1
 15568                           
 15569                           ; BSR set to: 0
 15570                           ;main.c: 1223: if ((0) != p) {
 15571  001810  0102               	movlb	2	; () banked
 15572  001812  51C5               	movf	(doModeVerbose@p_1410+1)& (0+255),w,b
 15573  001814  11C4               	iorwf	doModeVerbose@p_1410& (0+255),w,b
 15574  001816  E00A               	bz	l15919
 15575                           
 15576                           ; BSR set to: 2
 15577                           ;main.c: 1224: mask_nodeid = atoi(p);
 15578  001818  C2C4  F066         	movff	doModeVerbose@p_1410,?_atoi
 15579  00181C  C2C5  F067         	movff	doModeVerbose@p_1410+1,?_atoi+1
 15580  001820  EC72  F025         	call	_atoi	;wreg free
 15581  001824  5166               	movf	?_atoi& (0+255),w,b
 15582  001826  0102               	movlb	2	; () banked
 15583  001828  6F91               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 15584                           
 15585                           ;main.c: 1225: }
 15586  00182A  D008               	goto	l15927
 15587  00182C                     l15919:
 15588                           
 15589                           ; BSR set to: 2
 15590                           ;main.c: 1226: else {
 15591                           ;main.c: 1227: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 15592  00182C  0E77               	movlw	high STR_131
 15593  00182E  6E21               	movwf	?_putsUSART+1,c
 15594  001830  0E8B               	movlw	low STR_131
 15595  001832  6E20               	movwf	?_putsUSART,c
 15596  001834  ECB5  F031         	call	_putsUSART	;wreg free
 15597  001838  EFCB  F006         	goto	l15457
 15598  00183C                     l15927:
 15599                           
 15600                           ; BSR set to: 2
 15601                           ;main.c: 1231: }
 15602                           ;main.c: 1232: uint32_t id = ((uint32_t) mask_priority << 26) |
 15603                           ;main.c: 1233: ((uint32_t) mask_class << 16) |
 15604                           ;main.c: 1234: ((uint32_t) mask_type << 8) |
 15605                           ;main.c: 1235: mask_nodeid;
 15606  00183C  C290  F0C8         	movff	doModeVerbose@mask_type,??_doModeVerbose
 15607  001840  DB70               	call	PL50	;call to abstracted procedure
 15608  001842  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 15609  001844  0100               	movlb	0	; () banked
 15610  001846  6FCC               	movwf	(??_doModeVerbose+4)& (0+255),b
 15611  001848  0102               	movlb	2	; () banked
 15612  00184A  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 15613  00184C  DB90               	call	PL68	;call to abstracted procedure
 15614  00184E  C28F  F0D0         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 15615  001852  DB0D               	call	PL10	;call to abstracted procedure
 15616  001854  5191               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 15617  001856  0100               	movlb	0	; () banked
 15618  001858  11D8               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 15619  00185A  0102               	movlb	2	; () banked
 15620  00185C  6FC0               	movwf	doModeVerbose@id_1422& (0+255),b
 15621  00185E  0100               	movlb	0	; () banked
 15622  001860  51D9               	movf	(??_doModeVerbose+17)& (0+255),w,b
 15623  001862  0102               	movlb	2	; () banked
 15624  001864  6FC1               	movwf	(doModeVerbose@id_1422+1)& (0+255),b
 15625  001866  0100               	movlb	0	; () banked
 15626  001868  51DA               	movf	(??_doModeVerbose+18)& (0+255),w,b
 15627  00186A  0102               	movlb	2	; () banked
 15628  00186C  6FC2               	movwf	(doModeVerbose@id_1422+2)& (0+255),b
 15629  00186E  0100               	movlb	0	; () banked
 15630  001870  51DB               	movf	(??_doModeVerbose+19)& (0+255),w,b
 15631  001872  0102               	movlb	2	; () banked
 15632  001874  6FC3               	movwf	(doModeVerbose@id_1422+3)& (0+255),b
 15633                           
 15634                           ; BSR set to: 2
 15635                           ;main.c: 1238: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15636  001876  0E80               	movlw	128
 15637  001878  EC4A  F034         	call	_ECANSetOperationMode
 15638                           
 15639                           ;main.c: 1240: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 15640                           ;main.c: 1241: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 15641  00187C  0102               	movlb	2	; () banked
 15642  00187E  51B2               	movf	doModeVerbose@maskno& (0+255),w,b
 15643  001880  E008               	bz	l15935
 15644                           
 15645                           ; BSR set to: 2
 15646  001882  0E0F               	movlw	15	;volatile
 15647  001884  0100               	movlb	0	; () banked
 15648  001886  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 15649  001888  0E18               	movlw	24	;volatile
 15650  00188A  DB65               	call	PL64	;call to abstracted procedure
 15651  00188C  ECE9  F024         	call	__CANIDToRegs	;wreg free
 15652  001890  D007               	goto	l15937
 15653  001892                     l15935:
 15654                           
 15655                           ; BSR set to: 2
 15656  001892  0E0F               	movlw	15	;volatile
 15657  001894  0100               	movlb	0	; () banked
 15658  001896  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 15659  001898  0E1C               	movlw	28	;volatile
 15660  00189A  DB5D               	call	PL64	;call to abstracted procedure
 15661  00189C  ECE9  F024         	call	__CANIDToRegs	;wreg free
 15662  0018A0                     l15937:
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;main.c: 1244: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 15666  0018A0  0E00               	movlw	0
 15667  0018A2  EC4A  F034         	call	_ECANSetOperationMode
 15668                           
 15669                           ;main.c: 1258: }
 15670                           ;main.c: 1259: }
 15671                           ;main.c: 1261: putsUSART((char *) "+OK\r\n");
 15672  0018A6  0E7F               	movlw	high STR_9
 15673  0018A8  6E21               	movwf	?_putsUSART+1,c
 15674  0018AA  0E6B               	movlw	low STR_9
 15675  0018AC  6E20               	movwf	?_putsUSART,c
 15676  0018AE  ECB5  F031         	call	_putsUSART	;wreg free
 15677                           
 15678                           ;main.c: 1263: }
 15679  0018B2  D2B5               	goto	l16149
 15680  0018B4                     l15969:
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;main.c: 1273: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 15684  0018B4  0E01               	movlw	high _cmdbuf
 15685  0018B6  0100               	movlb	0	; () banked
 15686  0018B8  6F69               	movwf	(?_stristr+1)& (0+255),b
 15687  0018BA  0E2D               	movlw	low _cmdbuf
 15688  0018BC  6F68               	movwf	?_stristr& (0+255),b
 15689  0018BE  0E7F               	movlw	high STR_133
 15690  0018C0  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15691  0018C2  0E8F               	movlw	low STR_133
 15692  0018C4  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15693  0018C6  EC16  F02F         	call	_stristr	;wreg free
 15694  0018CA  0E2D               	movlw	low _cmdbuf
 15695  0018CC  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15696  0018CE  0E01               	movlw	high _cmdbuf
 15697  0018D0  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15698  0018D2  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15699  0018D4  E102               	bnz	u20165
 15700  0018D6  5168               	movf	?_stristr& (0+255),w,b
 15701  0018D8  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15702  0018DA                     u20165:
 15703  0018DA  E001 D28F          	bnz	l16143
 15704                           
 15705                           ; BSR set to: 0
 15706                           ;main.c: 1276: strcpy(cmdbuf, cmdbuf + 4);
 15707  0018DE  0E01               	movlw	high _cmdbuf
 15708  0018E0  6E20               	movwf	?_strcpy+1,c
 15709  0018E2  0E2D               	movlw	low _cmdbuf
 15710  0018E4  6E1F               	movwf	?_strcpy,c
 15711  0018E6  0E31               	movlw	low (_cmdbuf+4)
 15712  0018E8  0100               	movlb	0	; () banked
 15713  0018EA  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15714  0018EC  0E01               	movlw	high (_cmdbuf+4)
 15715  0018EE  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15716  0018F0  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 15717  0018F4  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 15718  0018F8  ECCB  F033         	call	_strcpy	;wreg free
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;main.c: 1279: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 15722  0018FC  0E01               	movlw	high _cmdbuf
 15723  0018FE  0100               	movlb	0	; () banked
 15724  001900  6F69               	movwf	(?_stristr+1)& (0+255),b
 15725  001902  0E2D               	movlw	low _cmdbuf
 15726  001904  6F68               	movwf	?_stristr& (0+255),b
 15727  001906  0E7F               	movlw	high STR_134
 15728  001908  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15729  00190A  0EDA               	movlw	low STR_134
 15730  00190C  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15731  00190E  EC16  F02F         	call	_stristr	;wreg free
 15732  001912  0E2D               	movlw	low _cmdbuf
 15733  001914  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15734  001916  0E01               	movlw	high _cmdbuf
 15735  001918  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15736  00191A  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15737  00191C  E102               	bnz	u20175
 15738  00191E  5168               	movf	?_stristr& (0+255),w,b
 15739  001920  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15740  001922                     u20175:
 15741  001922  E112               	bnz	l15981
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;main.c: 1280: bHex = 1;
 15745  001924  0E01               	movlw	1
 15746  001926  6E2C               	movwf	_bHex,c
 15747                           
 15748                           ; BSR set to: 0
 15749                           ;main.c: 1281: (Busy_eep(), Write_b_eep(0x06,1));
 15750  001928  EC9D  F034         	call	_Busy_eep	;wreg free
 15751  00192C  6A20               	clrf	?_Write_b_eep+1,c
 15752  00192E  0E06               	movlw	6
 15753  001930  6E1F               	movwf	?_Write_b_eep,c
 15754  001932  0E01               	movlw	1
 15755  001934  6E21               	movwf	?_Write_b_eep+2,c
 15756  001936  EC80  F033         	call	_Write_b_eep	;wreg free
 15757                           
 15758                           ;main.c: 1282: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 15759  00193A  0E75               	movlw	high STR_135
 15760  00193C  6E21               	movwf	?_putsUSART+1,c
 15761  00193E  0EF6               	movlw	low STR_135
 15762  001940  6E20               	movwf	?_putsUSART,c
 15763  001942  ECB5  F031         	call	_putsUSART	;wreg free
 15764                           
 15765                           ;main.c: 1283: }
 15766  001946  D26B               	goto	l16149
 15767  001948                     l15981:
 15768                           
 15769                           ; BSR set to: 0
 15770                           ;main.c: 1285: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 15771  001948  0E01               	movlw	high _cmdbuf
 15772  00194A  0100               	movlb	0	; () banked
 15773  00194C  6F69               	movwf	(?_stristr+1)& (0+255),b
 15774  00194E  0E2D               	movlw	low _cmdbuf
 15775  001950  6F68               	movwf	?_stristr& (0+255),b
 15776  001952  0E7E               	movlw	high STR_136
 15777  001954  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15778  001956  0EF1               	movlw	low STR_136
 15779  001958  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15780  00195A  EC16  F02F         	call	_stristr	;wreg free
 15781  00195E  0E2D               	movlw	low _cmdbuf
 15782  001960  6FC8               	movwf	??_doModeVerbose& (0+255),b
 15783  001962  0E01               	movlw	high _cmdbuf
 15784  001964  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 15785  001966  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 15786  001968  E102               	bnz	u20185
 15787  00196A  5168               	movf	?_stristr& (0+255),w,b
 15788  00196C  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 15789  00196E                     u20185:
 15790  00196E  E111               	bnz	l15991
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;main.c: 1286: bHex = 0;
 15794  001970  6A2C               	clrf	_bHex,c
 15795                           
 15796                           ; BSR set to: 0
 15797                           ;main.c: 1287: (Busy_eep(), Write_b_eep(0x06,0));
 15798  001972  EC9D  F034         	call	_Busy_eep	;wreg free
 15799  001976  6A20               	clrf	?_Write_b_eep+1,c
 15800  001978  0E06               	movlw	6
 15801  00197A  6E1F               	movwf	?_Write_b_eep,c
 15802  00197C  0E00               	movlw	0
 15803  00197E  6A21               	clrf	?_Write_b_eep+2,c
 15804  001980  EC80  F033         	call	_Write_b_eep	;wreg free
 15805                           
 15806                           ;main.c: 1288: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 15807  001984  0E76               	movlw	high STR_137
 15808  001986  6E21               	movwf	?_putsUSART+1,c
 15809  001988  0EEE               	movlw	low STR_137
 15810  00198A  6E20               	movwf	?_putsUSART,c
 15811  00198C  ECB5  F031         	call	_putsUSART	;wreg free
 15812                           
 15813                           ;main.c: 1289: }
 15814  001990  D246               	goto	l16149
 15815  001992                     l15991:
 15816                           
 15817                           ; BSR set to: 0
 15818                           ;main.c: 1290: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 15819  001992  0E01               	movlw	high _cmdbuf
 15820  001994  0100               	movlb	0	; () banked
 15821  001996  6F69               	movwf	(?_stristr+1)& (0+255),b
 15822  001998  0E2D               	movlw	low _cmdbuf
 15823  00199A  6F68               	movwf	?_stristr& (0+255),b
 15824  00199C  0E7E               	movlw	high STR_138
 15825  00199E  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15826  0019A0  0E4A               	movlw	low STR_138
 15827  0019A2  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15828  0019A4  EC16  F02F         	call	_stristr	;wreg free
 15829  0019A8  5169               	movf	(?_stristr+1)& (0+255),w,b
 15830  0019AA  1168               	iorwf	?_stristr& (0+255),w,b
 15831  0019AC  E021               	bz	l16005
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;main.c: 1291: strcpy(cmdbuf, cmdbuf + 10);
 15835  0019AE  0E01               	movlw	high _cmdbuf
 15836  0019B0  DAC5               	call	PL52	;call to abstracted procedure
 15837  0019B2  ECCB  F033         	call	_strcpy	;wreg free
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;main.c: 1292: rwtimeout = atoi(cmdbuf);
 15841  0019B6  0E01               	movlw	high _cmdbuf
 15842  0019B8  0100               	movlb	0	; () banked
 15843  0019BA  6F67               	movwf	(?_atoi+1)& (0+255),b
 15844  0019BC  0E2D               	movlw	low _cmdbuf
 15845  0019BE  6F66               	movwf	?_atoi& (0+255),b
 15846  0019C0  EC72  F025         	call	_atoi	;wreg free
 15847  0019C4  5166               	movf	?_atoi& (0+255),w,b
 15848  0019C6  6E33               	movwf	_rwtimeout,c
 15849                           
 15850                           ; BSR set to: 0
 15851                           ;main.c: 1293: if (rwtimeout < 20u) {
 15852  0019C8  0E14               	movlw	20
 15853  0019CA  6033               	cpfslt	_rwtimeout,c
 15854  0019CC  D001               	goto	l16001
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;main.c: 1294: rwtimeout = 20u;
 15858  0019CE  6E33               	movwf	_rwtimeout,c
 15859  0019D0                     l16001:
 15860                           
 15861                           ; BSR set to: 0
 15862                           ;main.c: 1295: }
 15863                           ;main.c: 1296: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 15864  0019D0  EC9D  F034         	call	_Busy_eep	;wreg free
 15865  0019D4  6A20               	clrf	?_Write_b_eep+1,c
 15866  0019D6  0E09               	movlw	9
 15867  0019D8  6E1F               	movwf	?_Write_b_eep,c
 15868  0019DA  C033  F021         	movff	_rwtimeout,?_Write_b_eep+2
 15869  0019DE  EC80  F033         	call	_Write_b_eep	;wreg free
 15870                           
 15871                           ;main.c: 1297: putsUSART((char *) "+OK\r\n");
 15872  0019E2  0E7F               	movlw	high STR_9
 15873  0019E4  6E21               	movwf	?_putsUSART+1,c
 15874  0019E6  0E6B               	movlw	low STR_9
 15875  0019E8  6E20               	movwf	?_putsUSART,c
 15876  0019EA  ECB5  F031         	call	_putsUSART	;wreg free
 15877                           
 15878                           ;main.c: 1298: }
 15879  0019EE  D217               	goto	l16149
 15880  0019F0                     l16005:
 15881                           
 15882                           ; BSR set to: 0
 15883                           ;main.c: 1300: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15884  0019F0  0E01               	movlw	high _cmdbuf
 15885  0019F2  0100               	movlb	0	; () banked
 15886  0019F4  6F69               	movwf	(?_stristr+1)& (0+255),b
 15887  0019F6  0E2D               	movlw	low _cmdbuf
 15888  0019F8  6F68               	movwf	?_stristr& (0+255),b
 15889  0019FA  0E7E               	movlw	high STR_140
 15890  0019FC  6F6B               	movwf	(?_stristr+3)& (0+255),b
 15891  0019FE  0E9D               	movlw	low STR_140
 15892  001A00  6F6A               	movwf	(?_stristr+2)& (0+255),b
 15893  001A02  EC16  F02F         	call	_stristr	;wreg free
 15894  001A06  5169               	movf	(?_stristr+1)& (0+255),w,b
 15895  001A08  1168               	iorwf	?_stristr& (0+255),w,b
 15896  001A0A  E05C               	bz	l16039
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;main.c: 1301: strcpy(cmdbuf, cmdbuf + 8);
 15900  001A0C  0E01               	movlw	high _cmdbuf
 15901  001A0E  DA54               	call	PL20	;call to abstracted procedure
 15902  001A10  ECCB  F033         	call	_strcpy	;wreg free
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;main.c: 1302: if (0 != stristr(cmdbuf, "CLOSE")) {
 15906  001A14  0E01               	movlw	high _cmdbuf
 15907  001A16  0100               	movlb	0	; () banked
 15908  001A18  DAC8               	call	PL106	;call to abstracted procedure
 15909  001A1A  EC16  F02F         	call	_stristr	;wreg free
 15910  001A1E  5169               	movf	(?_stristr+1)& (0+255),w,b
 15911  001A20  1168               	iorwf	?_stristr& (0+255),w,b
 15912  001A22  E00A               	bz	l16015
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;main.c: 1303: (Busy_eep(), Write_b_eep(0x07,0));
 15916  001A24  EC9D  F034         	call	_Busy_eep	;wreg free
 15917  001A28  6A20               	clrf	?_Write_b_eep+1,c
 15918  001A2A  0E07               	movlw	7
 15919  001A2C  6E1F               	movwf	?_Write_b_eep,c
 15920  001A2E  0E00               	movlw	0
 15921  001A30  6A21               	clrf	?_Write_b_eep+2,c
 15922  001A32  EC80  F033         	call	_Write_b_eep	;wreg free
 15923                           
 15924                           ;main.c: 1304: }
 15925  001A36  D1F3               	goto	l16149
 15926  001A38                     l16015:
 15927                           
 15928                           ; BSR set to: 0
 15929                           ;main.c: 1305: else if (0 != stristr(cmdbuf, "OPEN")) {
 15930  001A38  DAA5               	call	PL76	;call to abstracted procedure
 15931  001A3A  EC16  F02F         	call	_stristr	;wreg free
 15932  001A3E  5169               	movf	(?_stristr+1)& (0+255),w,b
 15933  001A40  1168               	iorwf	?_stristr& (0+255),w,b
 15934  001A42  E00A               	bz	l16021
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;main.c: 1306: (Busy_eep(), Write_b_eep(0x07,1));
 15938  001A44  EC9D  F034         	call	_Busy_eep	;wreg free
 15939  001A48  6A20               	clrf	?_Write_b_eep+1,c
 15940  001A4A  0E07               	movlw	7
 15941  001A4C  6E1F               	movwf	?_Write_b_eep,c
 15942  001A4E  0E01               	movlw	1
 15943  001A50  6E21               	movwf	?_Write_b_eep+2,c
 15944  001A52  EC80  F033         	call	_Write_b_eep	;wreg free
 15945                           
 15946                           ;main.c: 1307: }
 15947  001A56  D1E3               	goto	l16149
 15948  001A58                     l16021:
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;main.c: 1308: else if (0 != stristr(cmdbuf, "SILENT")) {
 15952  001A58  0E01               	movlw	high _cmdbuf
 15953  001A5A  DA9E               	call	PL90	;call to abstracted procedure
 15954  001A5C  EC16  F02F         	call	_stristr	;wreg free
 15955  001A60  5169               	movf	(?_stristr+1)& (0+255),w,b
 15956  001A62  1168               	iorwf	?_stristr& (0+255),w,b
 15957  001A64  E00A               	bz	l16027
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;main.c: 1309: (Busy_eep(), Write_b_eep(0x07,2));
 15961  001A66  EC9D  F034         	call	_Busy_eep	;wreg free
 15962  001A6A  6A20               	clrf	?_Write_b_eep+1,c
 15963  001A6C  0E07               	movlw	7
 15964  001A6E  6E1F               	movwf	?_Write_b_eep,c
 15965  001A70  0E02               	movlw	2
 15966  001A72  6E21               	movwf	?_Write_b_eep+2,c
 15967  001A74  EC80  F033         	call	_Write_b_eep	;wreg free
 15968                           
 15969                           ;main.c: 1310: }
 15970  001A78  D1D2               	goto	l16149
 15971  001A7A                     l16027:
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;main.c: 1311: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15975  001A7A  0E01               	movlw	high _cmdbuf
 15976  001A7C  0100               	movlb	0	; () banked
 15977  001A7E  DAAD               	call	PL122	;call to abstracted procedure
 15978  001A80  EC16  F02F         	call	_stristr	;wreg free
 15979  001A84  5169               	movf	(?_stristr+1)& (0+255),w,b
 15980  001A86  1168               	iorwf	?_stristr& (0+255),w,b
 15981  001A88  E00A               	bz	l16033
 15982                           
 15983                           ; BSR set to: 0
 15984                           ;main.c: 1312: (Busy_eep(), Write_b_eep(0x07,3));
 15985  001A8A  EC9D  F034         	call	_Busy_eep	;wreg free
 15986  001A8E  6A20               	clrf	?_Write_b_eep+1,c
 15987  001A90  0E07               	movlw	7
 15988  001A92  6E1F               	movwf	?_Write_b_eep,c
 15989  001A94  0E03               	movlw	3
 15990  001A96  6E21               	movwf	?_Write_b_eep+2,c
 15991  001A98  EC80  F033         	call	_Write_b_eep	;wreg free
 15992                           
 15993                           ;main.c: 1313: }
 15994  001A9C  D1C0               	goto	l16149
 15995  001A9E                     l16033:
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;main.c: 1314: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 15999  001A9E  0E01               	movlw	high _cmdbuf
 16000  001AA0  0100               	movlb	0	; () banked
 16001  001AA2  DAA3               	call	PL124	;call to abstracted procedure
 16002  001AA4  EC16  F02F         	call	_stristr	;wreg free
 16003  001AA8  5169               	movf	(?_stristr+1)& (0+255),w,b
 16004  001AAA  1168               	iorwf	?_stristr& (0+255),w,b
 16005  001AAC  E101 D1B7          	bz	l16149
 16006                           
 16007                           ; BSR set to: 0
 16008                           ;main.c: 1315: (Busy_eep(), Write_b_eep(0x07,4));
 16009  001AB0  EC9D  F034         	call	_Busy_eep	;wreg free
 16010  001AB4  6A20               	clrf	?_Write_b_eep+1,c
 16011  001AB6  0E07               	movlw	7
 16012  001AB8  6E1F               	movwf	?_Write_b_eep,c
 16013  001ABA  0E04               	movlw	4
 16014  001ABC  6E21               	movwf	?_Write_b_eep+2,c
 16015  001ABE  EC80  F033         	call	_Write_b_eep	;wreg free
 16016                           
 16017                           ; BSR set to: 0
 16018  001AC2  D1AD               	goto	l16149
 16019  001AC4                     l16039:
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;main.c: 1318: else if (0 != stristr(cmdbuf, "MODE ")) {
 16023  001AC4  0E01               	movlw	high _cmdbuf
 16024  001AC6  0100               	movlb	0	; () banked
 16025  001AC8  6F69               	movwf	(?_stristr+1)& (0+255),b
 16026  001ACA  0E2D               	movlw	low _cmdbuf
 16027  001ACC  6F68               	movwf	?_stristr& (0+255),b
 16028  001ACE  0E7F               	movlw	high STR_146
 16029  001AD0  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16030  001AD2  0E77               	movlw	low STR_146
 16031  001AD4  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16032  001AD6  EC16  F02F         	call	_stristr	;wreg free
 16033  001ADA  5169               	movf	(?_stristr+1)& (0+255),w,b
 16034  001ADC  1168               	iorwf	?_stristr& (0+255),w,b
 16035  001ADE  E066               	bz	l16069
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;main.c: 1319: strcpy(cmdbuf, cmdbuf + 5);
 16039  001AE0  D9B8               	call	PL6	;call to abstracted procedure
 16040  001AE2  ECCB  F033         	call	_strcpy	;wreg free
 16041                           
 16042                           ; BSR set to: 0
 16043                           ;main.c: 1320: if (0 != stristr(cmdbuf, "VERBOSE")) {
 16044  001AE6  0E01               	movlw	high _cmdbuf
 16045  001AE8  0100               	movlb	0	; () banked
 16046  001AEA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16047  001AEC  0E2D               	movlw	low _cmdbuf
 16048  001AEE  6F68               	movwf	?_stristr& (0+255),b
 16049  001AF0  0E7E               	movlw	high STR_147
 16050  001AF2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16051  001AF4  0EE9               	movlw	low STR_147
 16052  001AF6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16053  001AF8  EC16  F02F         	call	_stristr	;wreg free
 16054  001AFC  5169               	movf	(?_stristr+1)& (0+255),w,b
 16055  001AFE  1168               	iorwf	?_stristr& (0+255),w,b
 16056  001B00  E012               	bz	l16053
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;main.c: 1321: mode = 0;
 16060  001B02  0101               	movlb	1	; () banked
 16061  001B04  6B2B               	clrf	_mode& (0+255),b
 16062                           
 16063                           ; BSR set to: 1
 16064                           ;main.c: 1322: (Busy_eep(), Write_b_eep(0x03,0));
 16065  001B06  EC9D  F034         	call	_Busy_eep	;wreg free
 16066  001B0A  6A20               	clrf	?_Write_b_eep+1,c
 16067  001B0C  0E03               	movlw	3
 16068  001B0E  6E1F               	movwf	?_Write_b_eep,c
 16069  001B10  0E00               	movlw	0
 16070  001B12  6A21               	clrf	?_Write_b_eep+2,c
 16071  001B14  EC80  F033         	call	_Write_b_eep	;wreg free
 16072                           
 16073                           ;main.c: 1323: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 16074  001B18  0E7A               	movlw	high STR_148
 16075  001B1A  6E21               	movwf	?_putsUSART+1,c
 16076  001B1C  0E47               	movlw	low STR_148
 16077  001B1E  6E20               	movwf	?_putsUSART,c
 16078  001B20  ECB5  F031         	call	_putsUSART	;wreg free
 16079                           
 16080                           ;main.c: 1324: }
 16081  001B24  D17C               	goto	l16149
 16082  001B26                     l16053:
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;main.c: 1325: else if (0 != stristr(cmdbuf, "VSCP")) {
 16086  001B26  0E01               	movlw	high _cmdbuf
 16087  001B28  0100               	movlb	0	; () banked
 16088  001B2A  6F69               	movwf	(?_stristr+1)& (0+255),b
 16089  001B2C  0E2D               	movlw	low _cmdbuf
 16090  001B2E  6F68               	movwf	?_stristr& (0+255),b
 16091  001B30  0E7F               	movlw	high STR_149
 16092  001B32  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16093  001B34  0EB2               	movlw	low STR_149
 16094  001B36  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16095  001B38  EC16  F02F         	call	_stristr	;wreg free
 16096  001B3C  5169               	movf	(?_stristr+1)& (0+255),w,b
 16097  001B3E  1168               	iorwf	?_stristr& (0+255),w,b
 16098  001B40  E013               	bz	l16061
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;main.c: 1326: mode = 1;
 16102  001B42  0E01               	movlw	1
 16103  001B44  0101               	movlb	1	; () banked
 16104  001B46  6F2B               	movwf	_mode& (0+255),b
 16105                           
 16106                           ; BSR set to: 1
 16107                           ;main.c: 1327: (Busy_eep(), Write_b_eep(0x03,1));
 16108  001B48  EC9D  F034         	call	_Busy_eep	;wreg free
 16109  001B4C  6A20               	clrf	?_Write_b_eep+1,c
 16110  001B4E  0E03               	movlw	3
 16111  001B50  6E1F               	movwf	?_Write_b_eep,c
 16112  001B52  0E01               	movlw	1
 16113  001B54  6E21               	movwf	?_Write_b_eep+2,c
 16114  001B56  EC80  F033         	call	_Write_b_eep	;wreg free
 16115                           
 16116                           ;main.c: 1328: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 16117  001B5A  0E79               	movlw	high STR_150
 16118  001B5C  6E21               	movwf	?_putsUSART+1,c
 16119  001B5E  0ECC               	movlw	low STR_150
 16120  001B60  6E20               	movwf	?_putsUSART,c
 16121  001B62  ECB5  F031         	call	_putsUSART	;wreg free
 16122                           
 16123                           ;main.c: 1329: }
 16124  001B66  D15B               	goto	l16149
 16125  001B68                     l16061:
 16126                           
 16127                           ; BSR set to: 0
 16128                           ;main.c: 1330: else if (0 != stristr(cmdbuf, "SLCAN")) {
 16129  001B68  0E01               	movlw	high _cmdbuf
 16130  001B6A  0100               	movlb	0	; () banked
 16131  001B6C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16132  001B6E  0E2D               	movlw	low _cmdbuf
 16133  001B70  6F68               	movwf	?_stristr& (0+255),b
 16134  001B72  0E7F               	movlw	high STR_151
 16135  001B74  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16136  001B76  0E89               	movlw	low STR_151
 16137  001B78  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16138  001B7A  EC16  F02F         	call	_stristr	;wreg free
 16139  001B7E  5169               	movf	(?_stristr+1)& (0+255),w,b
 16140  001B80  1168               	iorwf	?_stristr& (0+255),w,b
 16141  001B82  E101 D14C          	bz	l16149
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;main.c: 1331: mode = 2;
 16145  001B86  0E02               	movlw	2
 16146  001B88  0101               	movlb	1	; () banked
 16147  001B8A  6F2B               	movwf	_mode& (0+255),b
 16148                           
 16149                           ; BSR set to: 1
 16150                           ;main.c: 1332: (Busy_eep(), Write_b_eep(0x03,2));
 16151  001B8C  EC9D  F034         	call	_Busy_eep	;wreg free
 16152  001B90  6A20               	clrf	?_Write_b_eep+1,c
 16153  001B92  0E03               	movlw	3
 16154  001B94  6E1F               	movwf	?_Write_b_eep,c
 16155  001B96  0E02               	movlw	2
 16156  001B98  6E21               	movwf	?_Write_b_eep+2,c
 16157  001B9A  EC80  F033         	call	_Write_b_eep	;wreg free
 16158                           
 16159                           ;main.c: 1333: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 16160  001B9E  0E7A               	movlw	high STR_152
 16161  001BA0  6E21               	movwf	?_putsUSART+1,c
 16162  001BA2  0ECF               	movlw	low STR_152
 16163  001BA4  6E20               	movwf	?_putsUSART,c
 16164  001BA6  ECB5  F031         	call	_putsUSART	;wreg free
 16165  001BAA  D139               	goto	l16149
 16166  001BAC                     l16069:
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;main.c: 1337: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 16170  001BAC  0E01               	movlw	high _cmdbuf
 16171  001BAE  0100               	movlb	0	; () banked
 16172  001BB0  6F69               	movwf	(?_stristr+1)& (0+255),b
 16173  001BB2  0E2D               	movlw	low _cmdbuf
 16174  001BB4  6F68               	movwf	?_stristr& (0+255),b
 16175  001BB6  0E7F               	movlw	high STR_153
 16176  001BB8  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16177  001BBA  0E7D               	movlw	low STR_153
 16178  001BBC  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16179  001BBE  EC16  F02F         	call	_stristr	;wreg free
 16180  001BC2  0E2D               	movlw	low _cmdbuf
 16181  001BC4  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16182  001BC6  0E01               	movlw	high _cmdbuf
 16183  001BC8  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16184  001BCA  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16185  001BCC  E102               	bnz	u20315
 16186  001BCE  5168               	movf	?_stristr& (0+255),w,b
 16187  001BD0  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16188  001BD2                     u20315:
 16189  001BD2  E13F               	bnz	l16093
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;main.c: 1338: strcpy(cmdbuf, cmdbuf + 5);
 16193  001BD4  D93E               	call	PL6	;call to abstracted procedure
 16194  001BD6  ECCB  F033         	call	_strcpy	;wreg free
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;main.c: 1339: if (0 != stristr(cmdbuf, "ON")) {
 16198  001BDA  0E01               	movlw	high _cmdbuf
 16199  001BDC  0100               	movlb	0	; () banked
 16200  001BDE  D9F5               	call	PL118	;call to abstracted procedure
 16201  001BE0  EC16  F02F         	call	_stristr	;wreg free
 16202  001BE4  5169               	movf	(?_stristr+1)& (0+255),w,b
 16203  001BE6  1168               	iorwf	?_stristr& (0+255),w,b
 16204  001BE8  E013               	bz	l16081
 16205                           
 16206                           ; BSR set to: 0
 16207                           ;main.c: 1340: bLocalEcho = 1;
 16208  001BEA  0E01               	movlw	1
 16209  001BEC  0101               	movlb	1	; () banked
 16210  001BEE  6F2A               	movwf	_bLocalEcho& (0+255),b
 16211                           
 16212                           ; BSR set to: 1
 16213                           ;main.c: 1341: (Busy_eep(), Write_b_eep(0x65,1));
 16214  001BF0  EC9D  F034         	call	_Busy_eep	;wreg free
 16215  001BF4  6A20               	clrf	?_Write_b_eep+1,c
 16216  001BF6  0E65               	movlw	101
 16217  001BF8  6E1F               	movwf	?_Write_b_eep,c
 16218  001BFA  0E01               	movlw	1
 16219  001BFC  6E21               	movwf	?_Write_b_eep+2,c
 16220  001BFE  EC80  F033         	call	_Write_b_eep	;wreg free
 16221                           
 16222                           ;main.c: 1342: putsUSART((char *) "+OK - Local echo on\r\n");
 16223  001C02  0E7C               	movlw	high STR_155
 16224  001C04  6E21               	movwf	?_putsUSART+1,c
 16225  001C06  0E7C               	movlw	low STR_155
 16226  001C08  6E20               	movwf	?_putsUSART,c
 16227  001C0A  ECB5  F031         	call	_putsUSART	;wreg free
 16228                           
 16229                           ;main.c: 1343: }
 16230  001C0E  D107               	goto	l16149
 16231  001C10                     l16081:
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;main.c: 1344: else if (0 != stristr(cmdbuf, "OFF")) {
 16235  001C10  0E01               	movlw	high _cmdbuf
 16236  001C12  0100               	movlb	0	; () banked
 16237  001C14  D9D2               	call	PL116	;call to abstracted procedure
 16238  001C16  EC16  F02F         	call	_stristr	;wreg free
 16239  001C1A  5169               	movf	(?_stristr+1)& (0+255),w,b
 16240  001C1C  1168               	iorwf	?_stristr& (0+255),w,b
 16241  001C1E  E012               	bz	l16091
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;main.c: 1345: bLocalEcho = 0;
 16245  001C20  0101               	movlb	1	; () banked
 16246  001C22  6B2A               	clrf	_bLocalEcho& (0+255),b
 16247                           
 16248                           ; BSR set to: 1
 16249                           ;main.c: 1346: (Busy_eep(), Write_b_eep(0x65,0));
 16250  001C24  EC9D  F034         	call	_Busy_eep	;wreg free
 16251  001C28  6A20               	clrf	?_Write_b_eep+1,c
 16252  001C2A  0E65               	movlw	101
 16253  001C2C  6E1F               	movwf	?_Write_b_eep,c
 16254  001C2E  0E00               	movlw	0
 16255  001C30  6A21               	clrf	?_Write_b_eep+2,c
 16256  001C32  EC80  F033         	call	_Write_b_eep	;wreg free
 16257                           
 16258                           ;main.c: 1347: putsUSART((char *) "+OK - Local echo off\r\n");
 16259  001C36  0E7C               	movlw	high STR_157
 16260  001C38  6E21               	movwf	?_putsUSART+1,c
 16261  001C3A  0E0B               	movlw	low STR_157
 16262  001C3C  6E20               	movwf	?_putsUSART,c
 16263  001C3E  ECB5  F031         	call	_putsUSART	;wreg free
 16264                           
 16265                           ;main.c: 1348: }
 16266  001C42  D0ED               	goto	l16149
 16267  001C44                     l16091:
 16268                           
 16269                           ; BSR set to: 0
 16270                           ;main.c: 1349: else {
 16271                           ;main.c: 1350: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 16272  001C44  0E76               	movlw	high STR_158
 16273  001C46  6E21               	movwf	?_putsUSART+1,c
 16274  001C48  0E4C               	movlw	low STR_158
 16275  001C4A  6E20               	movwf	?_putsUSART,c
 16276  001C4C  ECB5  F031         	call	_putsUSART	;wreg free
 16277  001C50  D0E6               	goto	l16149
 16278  001C52                     l16093:
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;main.c: 1354: else if (cmdbuf == stristr(cmdbuf, "TIMESTAMP ")) {
 16282  001C52  0E01               	movlw	high _cmdbuf
 16283  001C54  0100               	movlb	0	; () banked
 16284  001C56  6F69               	movwf	(?_stristr+1)& (0+255),b
 16285  001C58  0E2D               	movlw	low _cmdbuf
 16286  001C5A  6F68               	movwf	?_stristr& (0+255),b
 16287  001C5C  0E7E               	movlw	high STR_159
 16288  001C5E  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16289  001C60  0E3F               	movlw	low STR_159
 16290  001C62  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16291  001C64  EC16  F02F         	call	_stristr	;wreg free
 16292  001C68  0E2D               	movlw	low _cmdbuf
 16293  001C6A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16294  001C6C  0E01               	movlw	high _cmdbuf
 16295  001C6E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16296  001C70  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16297  001C72  E102               	bnz	u20345
 16298  001C74  5168               	movf	?_stristr& (0+255),w,b
 16299  001C76  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16300  001C78                     u20345:
 16301  001C78  E13E               	bnz	l16117
 16302                           
 16303                           ; BSR set to: 0
 16304                           ;main.c: 1355: strcpy(cmdbuf, cmdbuf + 10);
 16305  001C7A  0E01               	movlw	high _cmdbuf
 16306  001C7C  D95F               	call	PL52	;call to abstracted procedure
 16307  001C7E  ECCB  F033         	call	_strcpy	;wreg free
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;main.c: 1356: if (0 != stristr(cmdbuf, "ON")) {
 16311  001C82  0E01               	movlw	high _cmdbuf
 16312  001C84  0100               	movlb	0	; () banked
 16313  001C86  D9A1               	call	PL118	;call to abstracted procedure
 16314  001C88  EC16  F02F         	call	_stristr	;wreg free
 16315  001C8C  5169               	movf	(?_stristr+1)& (0+255),w,b
 16316  001C8E  1168               	iorwf	?_stristr& (0+255),w,b
 16317  001C90  E012               	bz	l16105
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;main.c: 1357: bTimestamp = 1;
 16321  001C92  0E01               	movlw	1
 16322  001C94  6E2F               	movwf	_bTimestamp,c
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;main.c: 1358: (Busy_eep(), Write_b_eep(0x66,1));
 16326  001C96  EC9D  F034         	call	_Busy_eep	;wreg free
 16327  001C9A  6A20               	clrf	?_Write_b_eep+1,c
 16328  001C9C  0E66               	movlw	102
 16329  001C9E  6E1F               	movwf	?_Write_b_eep,c
 16330  001CA0  0E01               	movlw	1
 16331  001CA2  6E21               	movwf	?_Write_b_eep+2,c
 16332  001CA4  EC80  F033         	call	_Write_b_eep	;wreg free
 16333                           
 16334                           ;main.c: 1359: putsUSART((char *) "+OK - Timestamp on\r\n");
 16335  001CA8  0E7C               	movlw	high STR_161
 16336  001CAA  6E21               	movwf	?_putsUSART+1,c
 16337  001CAC  0EA8               	movlw	low STR_161
 16338  001CAE  6E20               	movwf	?_putsUSART,c
 16339  001CB0  ECB5  F031         	call	_putsUSART	;wreg free
 16340                           
 16341                           ;main.c: 1360: }
 16342  001CB4  D0B4               	goto	l16149
 16343  001CB6                     l16105:
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;main.c: 1361: else if (0 != stristr(cmdbuf, "OFF")) {
 16347  001CB6  0E01               	movlw	high _cmdbuf
 16348  001CB8  0100               	movlb	0	; () banked
 16349  001CBA  D97F               	call	PL116	;call to abstracted procedure
 16350  001CBC  EC16  F02F         	call	_stristr	;wreg free
 16351  001CC0  5169               	movf	(?_stristr+1)& (0+255),w,b
 16352  001CC2  1168               	iorwf	?_stristr& (0+255),w,b
 16353  001CC4  E011               	bz	l16115
 16354                           
 16355                           ; BSR set to: 0
 16356                           ;main.c: 1362: bTimestamp = 0;
 16357  001CC6  6A2F               	clrf	_bTimestamp,c
 16358                           
 16359                           ; BSR set to: 0
 16360                           ;main.c: 1363: (Busy_eep(), Write_b_eep(0x66,0));
 16361  001CC8  EC9D  F034         	call	_Busy_eep	;wreg free
 16362  001CCC  6A20               	clrf	?_Write_b_eep+1,c
 16363  001CCE  0E66               	movlw	102
 16364  001CD0  6E1F               	movwf	?_Write_b_eep,c
 16365  001CD2  0E00               	movlw	0
 16366  001CD4  6A21               	clrf	?_Write_b_eep+2,c
 16367  001CD6  EC80  F033         	call	_Write_b_eep	;wreg free
 16368                           
 16369                           ;main.c: 1364: putsUSART((char *) "+OK - Timestamp off\r\n");
 16370  001CDA  0E7C               	movlw	high STR_163
 16371  001CDC  6E21               	movwf	?_putsUSART+1,c
 16372  001CDE  0E66               	movlw	low STR_163
 16373  001CE0  6E20               	movwf	?_putsUSART,c
 16374  001CE2  ECB5  F031         	call	_putsUSART	;wreg free
 16375                           
 16376                           ;main.c: 1365: }
 16377  001CE6  D09B               	goto	l16149
 16378  001CE8                     l16115:
 16379                           
 16380                           ; BSR set to: 0
 16381                           ;main.c: 1366: else {
 16382                           ;main.c: 1367: putsUSART((char *) "+ERROR - Wrong argument to 'set timestamp'.\r\n");
 16383  001CE8  0E75               	movlw	high STR_164
 16384  001CEA  6E21               	movwf	?_putsUSART+1,c
 16385  001CEC  0E42               	movlw	low STR_164
 16386  001CEE  6E20               	movwf	?_putsUSART,c
 16387  001CF0  ECB5  F031         	call	_putsUSART	;wreg free
 16388  001CF4  D094               	goto	l16149
 16389  001CF6                     l16117:
 16390                           
 16391                           ; BSR set to: 0
 16392                           ;main.c: 1371: else if (cmdbuf == stristr(cmdbuf, "BAUDRATE ")) {
 16393  001CF6  0E01               	movlw	high _cmdbuf
 16394  001CF8  0100               	movlb	0	; () banked
 16395  001CFA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16396  001CFC  0E2D               	movlw	low _cmdbuf
 16397  001CFE  6F68               	movwf	?_stristr& (0+255),b
 16398  001D00  0E7E               	movlw	high STR_165
 16399  001D02  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16400  001D04  0E7F               	movlw	low STR_165
 16401  001D06  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16402  001D08  EC16  F02F         	call	_stristr	;wreg free
 16403  001D0C  0E2D               	movlw	low _cmdbuf
 16404  001D0E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16405  001D10  0E01               	movlw	high _cmdbuf
 16406  001D12  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16407  001D14  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16408  001D16  E102               	bnz	u20375
 16409  001D18  5168               	movf	?_stristr& (0+255),w,b
 16410  001D1A  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16411  001D1C                     u20375:
 16412  001D1C  E13D               	bnz	l16133
 16413                           
 16414                           ; BSR set to: 0
 16415                           ;main.c: 1373: uint32_t baud;
 16416                           ;main.c: 1374: strcpy( cmdbuf, cmdbuf + 9 );
 16417  001D1E  0E01               	movlw	high _cmdbuf
 16418  001D20  6E20               	movwf	?_strcpy+1,c
 16419  001D22  0E2D               	movlw	low _cmdbuf
 16420  001D24  6E1F               	movwf	?_strcpy,c
 16421  001D26  0E36               	movlw	low (_cmdbuf+9)
 16422  001D28  0100               	movlb	0	; () banked
 16423  001D2A  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16424  001D2C  0E01               	movlw	high (_cmdbuf+9)
 16425  001D2E  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16426  001D30  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16427  001D34  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16428  001D38  ECCB  F033         	call	_strcpy	;wreg free
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;main.c: 1376: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
 16432  001D3C  0E4F               	movlw	79
 16433  001D3E  16AB               	andwf	4011,f,c	;volatile
 16434                           
 16435                           ; BSR set to: 0
 16436  001D40  9AAC               	bcf	4012,5,c	;volatile
 16437                           
 16438                           ; BSR set to: 0
 16439  001D42  0ECF               	movlw	207
 16440  001D44  169D               	andwf	3997,f,c	;volatile
 16441                           
 16442                           ; BSR set to: 0
 16443                           
 16444                           ;main.c: 1378: switch( atoi( cmdbuf ) ) {
 16445  001D46  0E01               	movlw	high _cmdbuf
 16446  001D48  0100               	movlb	0	; () banked
 16447  001D4A  6F67               	movwf	(?_atoi+1)& (0+255),b
 16448  001D4C  0E2D               	movlw	low _cmdbuf
 16449  001D4E  6F66               	movwf	?_atoi& (0+255),b
 16450  001D50  EC72  F025         	call	_atoi	;wreg free
 16451                           
 16452                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16453                           ; Switch size 1, requested type "space"
 16454                           ; Number of cases is 1, Range of values is 0 to 0
 16455                           ; switch strategies available:
 16456                           ; Name         Instructions Cycles
 16457                           ; simple_byte            4     3 (average)
 16458                           ;	Chosen strategy is simple_byte
 16459  001D54  5167               	movf	(?_atoi+1)& (0+255),w,b
 16460  001D56  E119               	bnz	l16131
 16461                           
 16462                           ; BSR set to: 0
 16463                           ; Switch size 1, requested type "space"
 16464                           ; Number of cases is 13, Range of values is 0 to 12
 16465                           ; switch strategies available:
 16466                           ; Name         Instructions Cycles
 16467                           ; simple_byte           40    21 (average)
 16468                           ;	Chosen strategy is simple_byte
 16469  001D58  5166               	movf	?_atoi& (0+255),w,b
 16470  001D5A  E017               	bz	l16131
 16471  001D5C  0A01               	xorlw	1	; case 1
 16472  001D5E  E015               	bz	l16131
 16473  001D60  0A03               	xorlw	3	; case 2
 16474  001D62  E013               	bz	l16131
 16475  001D64  0A01               	xorlw	1	; case 3
 16476  001D66  E011               	bz	l16131
 16477  001D68  0A07               	xorlw	7	; case 4
 16478  001D6A  E00F               	bz	l16131
 16479  001D6C  0A01               	xorlw	1	; case 5
 16480  001D6E  E00D               	bz	l16131
 16481  001D70  0A03               	xorlw	3	; case 6
 16482  001D72  E00B               	bz	l16131
 16483  001D74  0A01               	xorlw	1	; case 7
 16484  001D76  E009               	bz	l16131
 16485  001D78  0A0F               	xorlw	15	; case 8
 16486  001D7A  E007               	bz	l16131
 16487  001D7C  0A01               	xorlw	1	; case 9
 16488  001D7E  E005               	bz	l16131
 16489  001D80  0A03               	xorlw	3	; case 10
 16490  001D82  E003               	bz	l16131
 16491  001D84  0A01               	xorlw	1	; case 11
 16492  001D86  A4D8               	btfss	status,2,c
 16493  001D88  0A07               	xorlw	7	; case 12
 16494  001D8A                     l16131:
 16495                           
 16496                           ; BSR set to: 0
 16497                           ;main.c: 1435: OpenUSART( 0b01111111 &
 16498                           ;main.c: 1436: 0b11111111 &
 16499                           ;main.c: 1437: 0b11111110 &
 16500                           ;main.c: 1438: 0b11111101 &
 16501                           ;main.c: 1439: 0b11111111,
 16502                           ;main.c: 1440: 21 );
 16503  001D8A  6A20               	clrf	?_OpenUSART+1,c
 16504  001D8C  0E15               	movlw	21
 16505  001D8E  6E1F               	movwf	?_OpenUSART,c
 16506  001D90  0E7C               	movlw	124
 16507  001D92  EC2F  F031         	call	_OpenUSART
 16508                           
 16509                           ;main.c: 1441: }
 16510  001D96  D043               	goto	l16149
 16511  001D98                     l16133:
 16512                           
 16513                           ; BSR set to: 0
 16514                           ;main.c: 1443: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 16515  001D98  0E01               	movlw	high _cmdbuf
 16516  001D9A  0100               	movlb	0	; () banked
 16517  001D9C  6F69               	movwf	(?_stristr+1)& (0+255),b
 16518  001D9E  0E2D               	movlw	low _cmdbuf
 16519  001DA0  6F68               	movwf	?_stristr& (0+255),b
 16520  001DA2  0E7E               	movlw	high STR_166
 16521  001DA4  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16522  001DA6  0EB8               	movlw	low STR_166
 16523  001DA8  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16524  001DAA  EC16  F02F         	call	_stristr	;wreg free
 16525  001DAE  0E2D               	movlw	low _cmdbuf
 16526  001DB0  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16527  001DB2  0E01               	movlw	high _cmdbuf
 16528  001DB4  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16529  001DB6  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16530  001DB8  E102               	bnz	u20385
 16531  001DBA  5168               	movf	?_stristr& (0+255),w,b
 16532  001DBC  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16533  001DBE                     u20385:
 16534  001DBE  E103               	bnz	l16137
 16535                           
 16536                           ; BSR set to: 0
 16537                           ;main.c: 1444: vscp_restoreDefaults();
 16538  001DC0  EC99  F034         	call	_vscp_restoreDefaults	;wreg free
 16539                           
 16540                           ;main.c: 1445: }
 16541  001DC4  D02C               	goto	l16149
 16542  001DC6                     l16137:
 16543                           
 16544                           ; BSR set to: 0
 16545                           ;main.c: 1447: else if (cmdbuf == stristr(cmdbuf, "?")) {
 16546  001DC6  0E01               	movlw	high _cmdbuf
 16547  001DC8  0100               	movlb	0	; () banked
 16548  001DCA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16549  001DCC  0E2D               	movlw	low _cmdbuf
 16550  001DCE  6F68               	movwf	?_stristr& (0+255),b
 16551  001DD0  0E7F               	movlw	high STR_167
 16552  001DD2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16553  001DD4  0EFD               	movlw	low STR_167
 16554  001DD6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16555  001DD8  EC16  F02F         	call	_stristr	;wreg free
 16556  001DDC  0E2D               	movlw	low _cmdbuf
 16557  001DDE  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16558  001DE0  0E01               	movlw	high _cmdbuf
 16559  001DE2  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16560  001DE4  1969               	xorwf	(?_stristr+1)& (0+255),w,b
 16561  001DE6  E102               	bnz	u20395
 16562  001DE8  5168               	movf	?_stristr& (0+255),w,b
 16563  001DEA  19C8               	xorwf	??_doModeVerbose& (0+255),w,b
 16564  001DEC                     u20395:
 16565  001DEC  E018               	bz	l16149
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;main.c: 1450: else {
 16569                           ;main.c: 1451: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 16570  001DEE  0E79               	movlw	high STR_168
 16571  001DF0  6E21               	movwf	?_putsUSART+1,c
 16572  001DF2  0E8A               	movlw	low STR_168
 16573  001DF4  6E20               	movwf	?_putsUSART,c
 16574  001DF6  ECB5  F031         	call	_putsUSART	;wreg free
 16575  001DFA  D011               	goto	l16149
 16576  001DFC                     l16143:
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;main.c: 1455: else {
 16580                           ;main.c: 1456: if ( 0x0d == cmdbuf[ 0 ] ) {
 16581  001DFC  0101               	movlb	1	; () banked
 16582  001DFE  512D               	movf	_cmdbuf& (0+255),w,b
 16583  001E00  0A0D               	xorlw	13
 16584  001E02  E107               	bnz	l16147
 16585                           
 16586                           ; BSR set to: 1
 16587                           ;main.c: 1457: putsUSART((char *) "+OK\r\n");
 16588  001E04  0E7F               	movlw	high STR_9
 16589  001E06  6E21               	movwf	?_putsUSART+1,c
 16590  001E08  0E6B               	movlw	low STR_9
 16591  001E0A  6E20               	movwf	?_putsUSART,c
 16592  001E0C  ECB5  F031         	call	_putsUSART	;wreg free
 16593                           
 16594                           ;main.c: 1458: }
 16595  001E10  D006               	goto	l16149
 16596  001E12                     l16147:
 16597                           
 16598                           ; BSR set to: 1
 16599                           ;main.c: 1459: else {
 16600                           ;main.c: 1460: putsUSART((char *) "-ERROR - Unknown command\r\n");
 16601  001E12  0E7A               	movlw	high STR_170
 16602  001E14  6E21               	movwf	?_putsUSART+1,c
 16603  001E16  0E99               	movlw	low STR_170
 16604  001E18  6E20               	movwf	?_putsUSART,c
 16605  001E1A  ECB5  F031         	call	_putsUSART	;wreg free
 16606  001E1E                     l16149:
 16607                           
 16608                           ;main.c: 1461: }
 16609                           ;main.c: 1462: }
 16610                           ;main.c: 1464: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 16611  001E1E  0E01               	movlw	high _cmdbuf
 16612  001E20  0100               	movlb	0	; () banked
 16613  001E22  6F61               	movwf	(?_memset+1)& (0+255),b
 16614  001E24  0E2D               	movlw	low _cmdbuf
 16615  001E26  ECF9  F02D         	call	PL24	;call to abstracted procedure
 16616  001E2A  ECE2  F033         	call	_memset	;wreg free
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;main.c: 1465: pos = 0;
 16620  001E2E  6A32               	clrf	_pos,c
 16621  001E30                     l16153:
 16622                           
 16623                           ;main.c: 1466: }
 16624                           ;main.c: 1467: }
 16625                           ;main.c: 1470: (INTCONbits.GIE = 1);
 16626  001E30  8EF2               	bsf	intcon,7,c	;volatile
 16627  001E32                     l586:
 16628  001E32  0012               	return	
 16629  001E34                     __end_of_doModeVerbose:
 16630                           	opt stack 0
 16631  001E34                     PL2:
 16632                           	opt stack 20
 16633  001E34  0100               	movlb	0	; () banked
 16634  001E36  6B69               	clrf	(?_strtok+1)& (0+255),b
 16635  001E38  6B68               	clrf	?_strtok& (0+255),b
 16636  001E3A  0E7F               	movlw	high STR_30
 16637  001E3C  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16638  001E3E  0EF5               	movlw	low STR_30
 16639  001E40  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16640  001E42  0012               	return	
 16641  001E44                     __end_ofPL2:
 16642                           	opt stack 0
 16643  001E44                     PL4:
 16644                           	opt stack 20
 16645  001E44  6B69               	clrf	(?_strtok+1)& (0+255),b
 16646  001E46  6B68               	clrf	?_strtok& (0+255),b
 16647  001E48  0E7F               	movlw	high STR_30
 16648  001E4A  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16649  001E4C  0EF5               	movlw	low STR_30
 16650  001E4E  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16651  001E50  0012               	return	
 16652  001E52                     __end_ofPL4:
 16653                           	opt stack 0
 16654  001E52                     PL6:
 16655                           	opt stack 20
 16656  001E52  0E01               	movlw	high _cmdbuf
 16657  001E54  6E20               	movwf	?_strcpy+1,c
 16658  001E56  0E2D               	movlw	low _cmdbuf
 16659  001E58  6E1F               	movwf	?_strcpy,c
 16660  001E5A  0E32               	movlw	low (_cmdbuf+5)
 16661  001E5C  0100               	movlb	0	; () banked
 16662  001E5E  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16663  001E60  0E01               	movlw	high (_cmdbuf+5)
 16664  001E62  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16665  001E64  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16666  001E68  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16667  001E6C  0012               	return	
 16668  001E6E                     __end_ofPL6:
 16669                           	opt stack 0
 16670  001E6E                     PL10:
 16671                           	opt stack 20
 16672  001E6E  6BD1               	clrf	(??_doModeVerbose+9)& (0+255),b
 16673  001E70  6BD2               	clrf	(??_doModeVerbose+10)& (0+255),b
 16674  001E72  6BD3               	clrf	(??_doModeVerbose+11)& (0+255),b
 16675  001E74  0E1A               	movlw	26
 16676  001E76                     u20065:
 16677  001E76  90D8               	bcf	status,0,c
 16678  001E78  37D0               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 16679  001E7A  37D1               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 16680  001E7C  37D2               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 16681  001E7E  37D3               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 16682  001E80  2EE8               	decfsz	wreg,f,c
 16683  001E82  D7F9               	goto	u20065
 16684  001E84  51CC               	movf	(??_doModeVerbose+4)& (0+255),w,b
 16685  001E86  11D0               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 16686  001E88  6FD4               	movwf	(??_doModeVerbose+12)& (0+255),b
 16687  001E8A  51CD               	movf	(??_doModeVerbose+5)& (0+255),w,b
 16688  001E8C  11D1               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 16689  001E8E  6FD5               	movwf	(??_doModeVerbose+13)& (0+255),b
 16690  001E90  51CE               	movf	(??_doModeVerbose+6)& (0+255),w,b
 16691  001E92  11D2               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 16692  001E94  6FD6               	movwf	(??_doModeVerbose+14)& (0+255),b
 16693  001E96  51CF               	movf	(??_doModeVerbose+7)& (0+255),w,b
 16694  001E98  11D3               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 16695  001E9A  6FD7               	movwf	(??_doModeVerbose+15)& (0+255),b
 16696  001E9C  51C8               	movf	??_doModeVerbose& (0+255),w,b
 16697  001E9E  11D4               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 16698  001EA0  6FD8               	movwf	(??_doModeVerbose+16)& (0+255),b
 16699  001EA2  51C9               	movf	(??_doModeVerbose+1)& (0+255),w,b
 16700  001EA4  11D5               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 16701  001EA6  6FD9               	movwf	(??_doModeVerbose+17)& (0+255),b
 16702  001EA8  51CA               	movf	(??_doModeVerbose+2)& (0+255),w,b
 16703  001EAA  11D6               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 16704  001EAC  6FDA               	movwf	(??_doModeVerbose+18)& (0+255),b
 16705  001EAE  51CB               	movf	(??_doModeVerbose+3)& (0+255),w,b
 16706  001EB0  11D7               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 16707  001EB2  6FDB               	movwf	(??_doModeVerbose+19)& (0+255),b
 16708  001EB4  0102               	movlb	2	; () banked
 16709  001EB6  0012               	return	
 16710  001EB8                     __end_ofPL10:
 16711                           	opt stack 0
 16712  001EB8                     PL20:
 16713                           	opt stack 20
 16714  001EB8  6E20               	movwf	?_strcpy+1,c
 16715  001EBA  0E2D               	movlw	low _cmdbuf
 16716  001EBC  6E1F               	movwf	?_strcpy,c
 16717  001EBE  0E35               	movlw	low (_cmdbuf+8)
 16718  001EC0  0100               	movlb	0	; () banked
 16719  001EC2  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16720  001EC4  0E01               	movlw	high (_cmdbuf+8)
 16721  001EC6  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16722  001EC8  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16723  001ECC  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16724  001ED0  0012               	return	
 16725  001ED2                     __end_ofPL20:
 16726                           	opt stack 0
 16727  001ED2                     PL30:
 16728                           	opt stack 20
 16729  001ED2  0100               	movlb	0	; () banked
 16730  001ED4  6B69               	clrf	(?_strtok+1)& (0+255),b
 16731  001ED6  6B68               	clrf	?_strtok& (0+255),b
 16732  001ED8  0E7E               	movlw	high (STR_57+8)
 16733  001EDA  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16734  001EDC  0E73               	movlw	low (STR_57+8)
 16735  001EDE  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16736  001EE0  0012               	return	
 16737  001EE2                     __end_ofPL30:
 16738                           	opt stack 0
 16739  001EE2                     PL32:
 16740                           	opt stack 20
 16741  001EE2  0E01               	movlw	high _cmdbuf
 16742  001EE4  0100               	movlb	0	; () banked
 16743  001EE6  6F69               	movwf	(?_strtok+1)& (0+255),b
 16744  001EE8  0E2D               	movlw	low _cmdbuf
 16745  001EEA  6F68               	movwf	?_strtok& (0+255),b
 16746  001EEC  0E7F               	movlw	high STR_30
 16747  001EEE  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16748  001EF0  0EF5               	movlw	low STR_30
 16749  001EF2  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16750  001EF4  0012               	return	
 16751  001EF6                     __end_ofPL32:
 16752                           	opt stack 0
 16753  001EF6                     PL42:
 16754                           	opt stack 20
 16755  001EF6  0100               	movlb	0	; () banked
 16756  001EF8  6F69               	movwf	(?_strtok+1)& (0+255),b
 16757  001EFA  0E2D               	movlw	low _cmdbuf
 16758  001EFC  6F68               	movwf	?_strtok& (0+255),b
 16759  001EFE  0E7E               	movlw	high (STR_57+8)
 16760  001F00  6F6B               	movwf	(?_strtok+3)& (0+255),b
 16761  001F02  0E73               	movlw	low (STR_57+8)
 16762  001F04  6F6A               	movwf	(?_strtok+2)& (0+255),b
 16763  001F06  0012               	return	
 16764  001F08                     __end_ofPL42:
 16765                           	opt stack 0
 16766  001F08                     PL48:
 16767                           	opt stack 20
 16768  001F08  0102               	movlb	2	; () banked
 16769  001F0A  51B5               	movf	doModeVerbose@i_1288& (0+255),w,b
 16770  001F0C  C2B4  F0C8         	movff	doModeVerbose@reg,??_doModeVerbose
 16771  001F10  0100               	movlb	0	; () banked
 16772  001F12  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 16773  001F14  27C8               	addwf	??_doModeVerbose& (0+255),f,b
 16774  001F16  0E00               	movlw	0
 16775  001F18  23C9               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 16776  001F1A  51C8               	movf	??_doModeVerbose& (0+255),w,b
 16777  001F1C  6F75               	movwf	(?_sprintf+4)& (0+255),b
 16778  001F1E  6B76               	clrf	(?_sprintf+5)& (0+255),b
 16779  001F20  0012               	return	
 16780  001F22                     __end_ofPL48:
 16781                           	opt stack 0
 16782  001F22                     PL50:
 16783                           	opt stack 20
 16784  001F22  0100               	movlb	0	; () banked
 16785  001F24  6BC9               	clrf	(??_doModeVerbose+1)& (0+255),b
 16786  001F26  6BCA               	clrf	(??_doModeVerbose+2)& (0+255),b
 16787  001F28  6BCB               	clrf	(??_doModeVerbose+3)& (0+255),b
 16788  001F2A  C0CA  F0CB         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 16789  001F2E  C0C9  F0CA         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 16790  001F32  C0C8  F0C9         	movff	??_doModeVerbose,??_doModeVerbose+1
 16791  001F36  6BC8               	clrf	??_doModeVerbose& (0+255),b
 16792  001F38  0102               	movlb	2	; () banked
 16793  001F3A  0012               	return	
 16794  001F3C                     __end_ofPL50:
 16795                           	opt stack 0
 16796  001F3C                     PL52:
 16797                           	opt stack 20
 16798  001F3C  6E20               	movwf	?_strcpy+1,c
 16799  001F3E  0E2D               	movlw	low _cmdbuf
 16800  001F40  6E1F               	movwf	?_strcpy,c
 16801  001F42  0E37               	movlw	low (_cmdbuf+10)
 16802  001F44  0100               	movlb	0	; () banked
 16803  001F46  6FC8               	movwf	??_doModeVerbose& (0+255),b
 16804  001F48  0E01               	movlw	high (_cmdbuf+10)
 16805  001F4A  6FC9               	movwf	(??_doModeVerbose+1)& (0+255),b
 16806  001F4C  C0C8  F021         	movff	??_doModeVerbose,?_strcpy+2
 16807  001F50  C0C9  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16808  001F54  0012               	return	
 16809  001F56                     __end_ofPL52:
 16810                           	opt stack 0
 16811  001F56                     PL64:
 16812                           	opt stack 20
 16813  001F56  6F60               	movwf	?__CANIDToRegs& (0+255),b
 16814  001F58  C2C0  F062         	movff	doModeVerbose@id_1422,?__CANIDToRegs+2
 16815  001F5C  C2C1  F063         	movff	doModeVerbose@id_1422+1,?__CANIDToRegs+3
 16816  001F60  C2C2  F064         	movff	doModeVerbose@id_1422+2,?__CANIDToRegs+4
 16817  001F64  C2C3  F065         	movff	doModeVerbose@id_1422+3,?__CANIDToRegs+5
 16818  001F68  0E01               	movlw	1
 16819  001F6A  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 16820  001F6C  0C01               	retlw	1
 16821  001F6E                     __end_ofPL64:
 16822                           	opt stack 0
 16823  001F6E                     PL68:
 16824                           	opt stack 20
 16825  001F6E  0100               	movlb	0	; () banked
 16826  001F70  6FCD               	movwf	(??_doModeVerbose+5)& (0+255),b
 16827  001F72  6BCE               	clrf	(??_doModeVerbose+6)& (0+255),b
 16828  001F74  6BCF               	clrf	(??_doModeVerbose+7)& (0+255),b
 16829  001F76  C0CD  F0CF         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 16830  001F7A  C0CC  F0CE         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 16831  001F7E  6BCD               	clrf	(??_doModeVerbose+5)& (0+255),b
 16832  001F80  6BCC               	clrf	(??_doModeVerbose+4)& (0+255),b
 16833  001F82  0012               	return	
 16834  001F84                     __end_ofPL68:
 16835                           	opt stack 0
 16836  001F84                     PL76:
 16837                           	opt stack 20
 16838  001F84  0E01               	movlw	high _cmdbuf
 16839  001F86  0100               	movlb	0	; () banked
 16840  001F88  6F69               	movwf	(?_stristr+1)& (0+255),b
 16841  001F8A  0E2D               	movlw	low _cmdbuf
 16842  001F8C  6F68               	movwf	?_stristr& (0+255),b
 16843  001F8E  0E7F               	movlw	high STR_8
 16844  001F90  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16845  001F92  0EA8               	movlw	low STR_8
 16846  001F94  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16847  001F96  0012               	return	
 16848  001F98                     __end_ofPL76:
 16849                           	opt stack 0
 16850  001F98                     PL90:
 16851                           	opt stack 20
 16852  001F98  0100               	movlb	0	; () banked
 16853  001F9A  6F69               	movwf	(?_stristr+1)& (0+255),b
 16854  001F9C  0E2D               	movlw	low _cmdbuf
 16855  001F9E  6F68               	movwf	?_stristr& (0+255),b
 16856  001FA0  0E7F               	movlw	high STR_10
 16857  001FA2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16858  001FA4  0E49               	movlw	low STR_10
 16859  001FA6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16860  001FA8  0012               	return	
 16861  001FAA                     __end_ofPL90:
 16862                           	opt stack 0
 16863  001FAA                     PL106:
 16864                           	opt stack 20
 16865  001FAA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16866  001FAC  0E2D               	movlw	low _cmdbuf
 16867  001FAE  6F68               	movwf	?_stristr& (0+255),b
 16868  001FB0  0E7F               	movlw	high STR_12
 16869  001FB2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16870  001FB4  0E83               	movlw	low STR_12
 16871  001FB6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16872  001FB8  0012               	return	
 16873  001FBA                     __end_ofPL106:
 16874                           	opt stack 0
 16875  001FBA                     PL116:
 16876                           	opt stack 20
 16877  001FBA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16878  001FBC  0E2D               	movlw	low _cmdbuf
 16879  001FBE  6F68               	movwf	?_stristr& (0+255),b
 16880  001FC0  0E7F               	movlw	high STR_156
 16881  001FC2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16882  001FC4  0ED2               	movlw	low STR_156
 16883  001FC6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16884  001FC8  0012               	return	
 16885  001FCA                     __end_ofPL116:
 16886                           	opt stack 0
 16887  001FCA                     PL118:
 16888                           	opt stack 20
 16889  001FCA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16890  001FCC  0E2D               	movlw	low _cmdbuf
 16891  001FCE  6F68               	movwf	?_stristr& (0+255),b
 16892  001FD0  0E7E               	movlw	high (STR_18+5)
 16893  001FD2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16894  001FD4  0EFE               	movlw	low (STR_18+5)
 16895  001FD6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16896  001FD8  0012               	return	
 16897  001FDA                     __end_ofPL118:
 16898                           	opt stack 0
 16899  001FDA                     PL122:
 16900                           	opt stack 20
 16901  001FDA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16902  001FDC  0E2D               	movlw	low _cmdbuf
 16903  001FDE  6F68               	movwf	?_stristr& (0+255),b
 16904  001FE0  0E7F               	movlw	high STR_16
 16905  001FE2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16906  001FE4  0E3B               	movlw	low STR_16
 16907  001FE6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16908  001FE8  0012               	return	
 16909  001FEA                     __end_ofPL122:
 16910                           	opt stack 0
 16911  001FEA                     PL124:
 16912                           	opt stack 20
 16913  001FEA  6F69               	movwf	(?_stristr+1)& (0+255),b
 16914  001FEC  0E2D               	movlw	low _cmdbuf
 16915  001FEE  6F68               	movwf	?_stristr& (0+255),b
 16916  001FF0  0E7E               	movlw	high STR_14
 16917  001FF2  6F6B               	movwf	(?_stristr+3)& (0+255),b
 16918  001FF4  0EAF               	movlw	low STR_14
 16919  001FF6  6F6A               	movwf	(?_stristr+2)& (0+255),b
 16920  001FF8  0012               	return	
 16921  001FFA                     __end_ofPL124:
 16922                           	opt stack 0
 16923                           tblptru	equ	0xFF8
 16924                           tblptrh	equ	0xFF7
 16925                           tblptrl	equ	0xFF6
 16926                           tablat	equ	0xFF5
 16927                           prodh	equ	0xFF4
 16928                           prodl	equ	0xFF3
 16929                           intcon	equ	0xFF2
 16930                           indf0	equ	0xFEF
 16931                           postinc0	equ	0xFEE
 16932                           fsr0h	equ	0xFEA
 16933                           fsr0l	equ	0xFE9
 16934                           wreg	equ	0xFE8
 16935                           indf1	equ	0xFE7
 16936                           postinc1	equ	0xFE6
 16937                           postdec1	equ	0xFE5
 16938                           fsr1h	equ	0xFE2
 16939                           fsr1l	equ	0xFE1
 16940                           indf2	equ	0xFDF
 16941                           postinc2	equ	0xFDE
 16942                           postdec2	equ	0xFDD
 16943                           plusw2	equ	0xFDB
 16944                           fsr2h	equ	0xFDA
 16945                           fsr2l	equ	0xFD9
 16946                           status	equ	0xFD8
 16947                           
 16948 ;; *************** function _writeRegisterExtended *****************
 16949 ;; Defined at:
 16950 ;;		line 2856 in file "main.c"
 16951 ;; Parameters:    Size  Location     Type
 16952 ;;  nodeid          1    wreg     unsigned char 
 16953 ;;  page            2   83[BANK0 ] unsigned short 
 16954 ;;  reg             1   85[BANK0 ] unsigned char 
 16955 ;;  timeout         2   86[BANK0 ] unsigned short 
 16956 ;;  value           2   88[BANK0 ] PTR unsigned char 
 16957 ;;		 -> doModeVerbose@value_1346(1), 
 16958 ;; Auto vars:     Size  Location     Type
 16959 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16960 ;; Return value:  Size  Location     Type
 16961 ;;                  1    wreg      enum E15660
 16962 ;; Registers used:
 16963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16964 ;; Tracked objects:
 16965 ;;		On entry : F/2
 16966 ;;		On exit  : E/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16969 ;;      Params:         0       7       0       0       0       0       0
 16970 ;;      Locals:         0       1       0       0       0       0       0
 16971 ;;      Temps:          0       4       0       0       0       0       0
 16972 ;;      Totals:         0      12       0       0       0       0       0
 16973 ;;Total ram usage:       12 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:    7
 16976 ;; This function calls:
 16977 ;;		_checkCANBusState
 16978 ;;		_sendVSCPFrame
 16979 ;;		_getVSCPFrame
 16980 ;; This function is called by:
 16981 ;;		_doModeVerbose
 16982 ;; This function uses a non-reentrant model
 16983 ;;
 16984                           
 16985                           	psect	text23
 16986  004BEE                     __ptext23:
 16987                           	opt stack 0
 16988  004BEE                     _writeRegisterExtended:
 16989                           	opt stack 22
 16990                           
 16991                           ;incstack = 0
 16992                           ;incstack = 0
 16993                           ;writeRegisterExtended@nodeid stored from wreg
 16994  004BEE  CFE8 F0BE          	movff	wreg,writeRegisterExtended@nodeid
 16995                           
 16996                           ; BSR set to: 2
 16997                           ;main.c: 2857: vscpData[ 0 ] = nodeid;
 16998  004BF2  C0BE  F1E5         	movff	writeRegisterExtended@nodeid,_vscpData
 16999                           
 17000                           ; BSR set to: 2
 17001                           ;main.c: 2858: vscpData[ 1 ] = page >> 8;
 17002  004BF6  0100               	movlb	0	; () banked
 17003  004BF8  51B4               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 17004  004BFA  0101               	movlb	1	; () banked
 17005  004BFC  6FE6               	movwf	(_vscpData+1)& (0+255),b
 17006                           
 17007                           ; BSR set to: 1
 17008                           ;main.c: 2859: vscpData[ 2 ] = page & 0xff;
 17009  004BFE  C0B3  F1E7         	movff	writeRegisterExtended@page,_vscpData+2
 17010                           
 17011                           ; BSR set to: 1
 17012                           ;main.c: 2860: vscpData[ 3 ] = reg;
 17013  004C02  C0B5  F1E8         	movff	writeRegisterExtended@reg,_vscpData+3
 17014                           
 17015                           ; BSR set to: 1
 17016                           ;main.c: 2861: vscpData[ 4 ] = *value;
 17017  004C06  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17018  004C0A  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17019  004C0E  50DF               	movf	indf2,w,c
 17020  004C10  6FE9               	movwf	(_vscpData+4)& (0+255),b
 17021                           
 17022                           ; BSR set to: 1
 17023                           ;main.c: 2863: if (sendVSCPFrame(0,
 17024                           ;main.c: 2864: 38,
 17025                           ;main.c: 2865: 0,
 17026                           ;main.c: 2866: 0,
 17027                           ;main.c: 2867: 5,
 17028                           ;main.c: 2868: vscpData)) {
 17029  004C12  0100               	movlb	0	; () banked
 17030  004C14  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17031  004C16  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 17032  004C18  0E26               	movlw	38
 17033  004C1A  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17034  004C1C  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17035  004C1E  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17036  004C20  0E05               	movlw	5
 17037  004C22  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17038  004C24  0E01               	movlw	high _vscpData
 17039  004C26  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17040  004C28  0EE5               	movlw	low _vscpData
 17041  004C2A  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17042  004C2C  EC1A  F02B         	call	_sendVSCPFrame	;wreg free
 17043  004C30  0900               	iorlw	0
 17044  004C32  E05B               	bz	l17627
 17045                           
 17046                           ;main.c: 2870: timekeeper = 0;
 17047  004C34  0101               	movlb	1	; () banked
 17048  004C36  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17049  004C38  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17050  004C3A  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17051  004C3C  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17052                           
 17053                           ;main.c: 2871: while (timekeeper < timeout) {
 17054  004C3E  D03E               	goto	l17625
 17055  004C40                     l1243:
 17056                           
 17057                           ; BSR set to: 1
 17058  004C40  0004               	clrwdt		;# 
 17059                           
 17060                           ;main.c: 2874: checkCANBusState();
 17061  004C42  EC1D  F034         	call	_checkCANBusState	;wreg free
 17062                           
 17063                           ;main.c: 2876: if (getVSCPFrame(&vscpClass,
 17064                           ;main.c: 2877: &vscpType,
 17065                           ;main.c: 2878: &vscpNodeId,
 17066                           ;main.c: 2879: &vscpPriority,
 17067                           ;main.c: 2880: &vscpSize,
 17068                           ;main.c: 2881: vscpData)) {
 17069  004C46  0E41               	movlw	low _vscpType
 17070  004C48  0100               	movlb	0	; () banked
 17071  004C4A  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 17072  004C4C  0E3E               	movlw	low _vscpNodeId
 17073  004C4E  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17074  004C50  0E3F               	movlw	low _vscpPriority
 17075  004C52  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17076  004C54  0E40               	movlw	low _vscpSize
 17077  004C56  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17078  004C58  0E01               	movlw	high _vscpData
 17079  004C5A  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17080  004C5C  0EE5               	movlw	low _vscpData
 17081  004C5E  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17082  004C60  0E3A               	movlw	_vscpClass& (0+255)
 17083  004C62  EC92  F02E         	call	_getVSCPFrame
 17084  004C66  0900               	iorlw	0
 17085  004C68  E029               	bz	l17625
 17086                           
 17087                           ; BSR set to: 0
 17088                           ;main.c: 2883: if ((nodeid == vscpNodeId) &&
 17089                           ;main.c: 2884: (5 == vscpSize) &&
 17090                           ;main.c: 2885: (0 == vscpData[ 0 ]) &&
 17091                           ;main.c: 2886: ((page >> 8) == vscpData[ 1 ]) &&
 17092                           ;main.c: 2887: ((page & 0xff) == vscpData[ 2 ]) &&
 17093                           ;main.c: 2888: (reg == vscpData[ 3 ]) &&
 17094                           ;main.c: 2889: (*value == vscpData[ 4 ])) {
 17095  004C6A  503E               	movf	_vscpNodeId,w,c
 17096  004C6C  63BE               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 17097  004C6E  D026               	goto	l17625
 17098                           
 17099                           ; BSR set to: 0
 17100  004C70  5040               	movf	_vscpSize,w,c
 17101  004C72  0A05               	xorlw	5
 17102  004C74  E123               	bnz	l17625
 17103                           
 17104                           ; BSR set to: 0
 17105  004C76  0101               	movlb	1	; () banked
 17106  004C78  67E5               	tstfsz	_vscpData& (0+255),b
 17107  004C7A  D020               	goto	l17625
 17108                           
 17109                           ; BSR set to: 1
 17110  004C7C  0100               	movlb	0	; () banked
 17111  004C7E  51B4               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 17112  004C80  0101               	movlb	1	; () banked
 17113  004C82  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 17114  004C84  E11B               	bnz	l17625
 17115                           
 17116                           ; BSR set to: 1
 17117  004C86  0100               	movlb	0	; () banked
 17118  004C88  51B3               	movf	writeRegisterExtended@page& (0+255),w,b
 17119  004C8A  EE21  F0E7         	lfsr	2,_vscpData+2
 17120  004C8E  62DF               	cpfseq	indf2,c
 17121  004C90  D015               	goto	l17625
 17122                           
 17123                           ; BSR set to: 1
 17124  004C92  51B5               	movf	writeRegisterExtended@reg& (0+255),w,b
 17125  004C94  0101               	movlb	1	; () banked
 17126  004C96  EE21  F0E8         	lfsr	2,_vscpData+3
 17127  004C9A  62DF               	cpfseq	indf2,c
 17128  004C9C  D00F               	goto	l17625
 17129                           
 17130                           ; BSR set to: 1
 17131  004C9E  51E9               	movf	(_vscpData+4)& (0+255),w,b
 17132  004CA0  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17133  004CA4  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17134  004CA8  62DF               	cpfseq	indf2,c
 17135  004CAA  D008               	goto	l17625
 17136                           
 17137                           ; BSR set to: 1
 17138                           ;main.c: 2890: *value = vscpData[ 1 ];
 17139  004CAC  C0B8  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17140  004CB0  C0B9  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17141  004CB4  C1E6  FFDF         	movff	_vscpData+1,indf2
 17142                           
 17143                           ; BSR set to: 1
 17144                           ;main.c: 2891: return 1;
 17145  004CB8  0E01               	movlw	1
 17146  004CBA  D018               	goto	l1246
 17147  004CBC                     l17625:
 17148  004CBC  0100               	movlb	0	; () banked
 17149  004CBE  51B6               	movf	writeRegisterExtended@timeout& (0+255),w,b
 17150  004CC0  6FBA               	movwf	??_writeRegisterExtended& (0+255),b
 17151  004CC2  51B7               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 17152  004CC4  6FBB               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 17153  004CC6  6BBC               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 17154  004CC8  6BBD               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 17155  004CCA  51BA               	movf	??_writeRegisterExtended& (0+255),w,b
 17156  004CCC  0101               	movlb	1	; () banked
 17157  004CCE  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17158  004CD0  0100               	movlb	0	; () banked
 17159  004CD2  51BB               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 17160  004CD4  0101               	movlb	1	; () banked
 17161  004CD6  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17162  004CD8  0100               	movlb	0	; () banked
 17163  004CDA  51BC               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 17164  004CDC  0101               	movlb	1	; () banked
 17165  004CDE  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17166  004CE0  0100               	movlb	0	; () banked
 17167  004CE2  51BD               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 17168  004CE4  0101               	movlb	1	; () banked
 17169  004CE6  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17170  004CE8  E3AB               	bnc	l1243
 17171  004CEA                     l17627:
 17172                           
 17173                           ;main.c: 2892: }
 17174                           ;main.c: 2894: }
 17175                           ;main.c: 2896: }
 17176                           ;main.c: 2898: }
 17177                           ;main.c: 2900: return 0;
 17178  004CEA  0E00               	movlw	0
 17179  004CEC                     l1246:
 17180  004CEC  0012               	return	
 17181  004CEE                     __end_of_writeRegisterExtended:
 17182                           	opt stack 0
 17183                           tblptru	equ	0xFF8
 17184                           tblptrh	equ	0xFF7
 17185                           tblptrl	equ	0xFF6
 17186                           tablat	equ	0xFF5
 17187                           prodh	equ	0xFF4
 17188                           prodl	equ	0xFF3
 17189                           intcon	equ	0xFF2
 17190                           indf0	equ	0xFEF
 17191                           postinc0	equ	0xFEE
 17192                           fsr0h	equ	0xFEA
 17193                           fsr0l	equ	0xFE9
 17194                           wreg	equ	0xFE8
 17195                           indf1	equ	0xFE7
 17196                           postinc1	equ	0xFE6
 17197                           postdec1	equ	0xFE5
 17198                           fsr1h	equ	0xFE2
 17199                           fsr1l	equ	0xFE1
 17200                           indf2	equ	0xFDF
 17201                           postinc2	equ	0xFDE
 17202                           postdec2	equ	0xFDD
 17203                           plusw2	equ	0xFDB
 17204                           fsr2h	equ	0xFDA
 17205                           fsr2l	equ	0xFD9
 17206                           status	equ	0xFD8
 17207                           
 17208 ;; *************** function _printBinary *****************
 17209 ;; Defined at:
 17210 ;;		line 2944 in file "main.c"
 17211 ;; Parameters:    Size  Location     Type
 17212 ;;  value           1    wreg     unsigned char 
 17213 ;; Auto vars:     Size  Location     Type
 17214 ;;  value           1    0[BANK0 ] unsigned char 
 17215 ;;  i               2    1[BANK0 ] int 
 17216 ;; Return value:  Size  Location     Type
 17217 ;;		None               void
 17218 ;; Registers used:
 17219 ;;		wreg, status,2, status,0, cstack
 17220 ;; Tracked objects:
 17221 ;;		On entry : F/2
 17222 ;;		On exit  : F/0
 17223 ;;		Unchanged: 0/0
 17224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17225 ;;      Params:         0       0       0       0       0       0       0
 17226 ;;      Locals:         0       3       0       0       0       0       0
 17227 ;;      Temps:          2       0       0       0       0       0       0
 17228 ;;      Totals:         2       3       0       0       0       0       0
 17229 ;;Total ram usage:        5 bytes
 17230 ;; Hardware stack levels used:    1
 17231 ;; Hardware stack levels required when called:    4
 17232 ;; This function calls:
 17233 ;;		_WriteUSART
 17234 ;; This function is called by:
 17235 ;;		_doModeVerbose
 17236 ;; This function uses a non-reentrant model
 17237 ;;
 17238                           
 17239                           	psect	text24
 17240  0063BE                     __ptext24:
 17241                           	opt stack 0
 17242  0063BE                     _printBinary:
 17243                           	opt stack 25
 17244                           
 17245                           ;incstack = 0
 17246                           ;incstack = 0
 17247                           ;printBinary@value stored from wreg
 17248  0063BE  CFE8 F060          	movff	wreg,printBinary@value
 17249                           
 17250                           ; BSR set to: 2
 17251                           ;main.c: 2945: int i;
 17252                           ;main.c: 2947: for (i = 7; i >= 0; i--) {
 17253  0063C2  0100               	movlb	0	; () banked
 17254  0063C4  6B62               	clrf	(printBinary@i+1)& (0+255),b
 17255  0063C6  0E07               	movlw	7
 17256  0063C8  6F61               	movwf	printBinary@i& (0+255),b
 17257  0063CA                     l17575:
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;main.c: 2948: if (value & (1 << i)) {
 17261  0063CA  C061  F020         	movff	printBinary@i,??_printBinary
 17262  0063CE  0E01               	movlw	1
 17263  0063D0  6E21               	movwf	(??_printBinary+1)& (0+255),c
 17264  0063D2  2A20               	incf	??_printBinary,f,c
 17265  0063D4  D002               	goto	u22634
 17266  0063D6                     u22635:
 17267  0063D6  90D8               	bcf	status,0,c
 17268  0063D8  3621               	rlcf	??_printBinary+1,f,c
 17269  0063DA                     u22634:
 17270  0063DA  2E20               	decfsz	??_printBinary,f,c
 17271  0063DC  D7FC               	goto	u22635
 17272  0063DE  5021               	movf	??_printBinary+1,w,c
 17273  0063E0  1560               	andwf	printBinary@value& (0+255),w,b
 17274  0063E2  E006               	bz	l1266
 17275  0063E4                     l1262:
 17276  0063E4  A2AC               	btfss	4012,1,c	;volatile
 17277  0063E6  D7FE               	goto	l1262
 17278                           
 17279                           ;main.c: 2950: WriteUSART('1');
 17280  0063E8  0E31               	movlw	49
 17281  0063EA  EC61  F034         	call	_WriteUSART
 17282                           
 17283                           ;main.c: 2951: } else {
 17284  0063EE  D005               	goto	l17583
 17285  0063F0                     l1266:
 17286  0063F0  A2AC               	btfss	4012,1,c	;volatile
 17287  0063F2  D7FE               	goto	l1266
 17288                           
 17289                           ;main.c: 2953: WriteUSART('0');
 17290  0063F4  0E30               	movlw	48
 17291  0063F6  EC61  F034         	call	_WriteUSART
 17292  0063FA                     l17583:
 17293  0063FA  0100               	movlb	0	; () banked
 17294  0063FC  0761               	decf	printBinary@i& (0+255),f,b
 17295  0063FE  A0D8               	btfss	status,0,c
 17296  006400  0762               	decf	(printBinary@i+1)& (0+255),f,b
 17297                           
 17298                           ; BSR set to: 0
 17299  006402  BF62               	btfsc	(printBinary@i+1)& (0+255),7,b
 17300                           
 17301                           ; BSR set to: 0
 17302  006404  0012               	return	
 17303  006406  D7E1               	goto	l17575
 17304  006408                     __end_of_printBinary:
 17305                           	opt stack 0
 17306                           tblptru	equ	0xFF8
 17307                           tblptrh	equ	0xFF7
 17308                           tblptrl	equ	0xFF6
 17309                           tablat	equ	0xFF5
 17310                           prodh	equ	0xFF4
 17311                           prodl	equ	0xFF3
 17312                           intcon	equ	0xFF2
 17313                           indf0	equ	0xFEF
 17314                           postinc0	equ	0xFEE
 17315                           fsr0h	equ	0xFEA
 17316                           fsr0l	equ	0xFE9
 17317                           wreg	equ	0xFE8
 17318                           indf1	equ	0xFE7
 17319                           postinc1	equ	0xFE6
 17320                           postdec1	equ	0xFE5
 17321                           fsr1h	equ	0xFE2
 17322                           fsr1l	equ	0xFE1
 17323                           indf2	equ	0xFDF
 17324                           postinc2	equ	0xFDE
 17325                           postdec2	equ	0xFDD
 17326                           plusw2	equ	0xFDB
 17327                           fsr2h	equ	0xFDA
 17328                           fsr2l	equ	0xFD9
 17329                           status	equ	0xFD8
 17330                           
 17331 ;; *************** function _readRegisterExtended *****************
 17332 ;; Defined at:
 17333 ;;		line 2753 in file "main.c"
 17334 ;; Parameters:    Size  Location     Type
 17335 ;;  nodeid          1    wreg     unsigned char 
 17336 ;;  page            2   83[BANK0 ] unsigned short 
 17337 ;;  reg             1   85[BANK0 ] unsigned char 
 17338 ;;  timeout         2   86[BANK0 ] unsigned short 
 17339 ;;  value           2   88[BANK0 ] PTR unsigned char 
 17340 ;;		 -> doModeVerbose@value_1370(1), doModeVerbose@value(1), 
 17341 ;; Auto vars:     Size  Location     Type
 17342 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17343 ;; Return value:  Size  Location     Type
 17344 ;;                  1    wreg      enum E15660
 17345 ;; Registers used:
 17346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17347 ;; Tracked objects:
 17348 ;;		On entry : F/2
 17349 ;;		On exit  : E/0
 17350 ;;		Unchanged: 0/0
 17351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17352 ;;      Params:         0       7       0       0       0       0       0
 17353 ;;      Locals:         0       1       0       0       0       0       0
 17354 ;;      Temps:          0       4       0       0       0       0       0
 17355 ;;      Totals:         0      12       0       0       0       0       0
 17356 ;;Total ram usage:       12 bytes
 17357 ;; Hardware stack levels used:    1
 17358 ;; Hardware stack levels required when called:    7
 17359 ;; This function calls:
 17360 ;;		_checkCANBusState
 17361 ;;		_sendVSCPFrame
 17362 ;;		_getVSCPFrame
 17363 ;; This function is called by:
 17364 ;;		_doModeVerbose
 17365 ;; This function uses a non-reentrant model
 17366 ;;
 17367                           
 17368                           	psect	text25
 17369  004DEA                     __ptext25:
 17370                           	opt stack 0
 17371  004DEA                     _readRegisterExtended:
 17372                           	opt stack 22
 17373                           
 17374                           ; BSR set to: 0
 17375                           ;incstack = 0
 17376                           ;incstack = 0
 17377                           ;readRegisterExtended@nodeid stored from wreg
 17378  004DEA  CFE8 F0BE          	movff	wreg,readRegisterExtended@nodeid
 17379                           
 17380                           ; BSR set to: 2
 17381                           ;main.c: 2754: vscpData[ 0 ] = nodeid;
 17382  004DEE  C0BE  F1E5         	movff	readRegisterExtended@nodeid,_vscpData
 17383                           
 17384                           ; BSR set to: 2
 17385                           ;main.c: 2755: vscpData[ 1 ] = page >> 8;
 17386  004DF2  0100               	movlb	0	; () banked
 17387  004DF4  51B4               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 17388  004DF6  0101               	movlb	1	; () banked
 17389  004DF8  6FE6               	movwf	(_vscpData+1)& (0+255),b
 17390                           
 17391                           ; BSR set to: 1
 17392                           ;main.c: 2756: vscpData[ 2 ] = page & 0xff;
 17393  004DFA  C0B3  F1E7         	movff	readRegisterExtended@page,_vscpData+2
 17394                           
 17395                           ; BSR set to: 1
 17396                           ;main.c: 2757: vscpData[ 3 ] = reg;
 17397  004DFE  C0B5  F1E8         	movff	readRegisterExtended@reg,_vscpData+3
 17398                           
 17399                           ; BSR set to: 1
 17400                           ;main.c: 2758: vscpData[ 4 ] = 1;
 17401  004E02  0E01               	movlw	1
 17402  004E04  6FE9               	movwf	(_vscpData+4)& (0+255),b
 17403                           
 17404                           ; BSR set to: 1
 17405                           ;main.c: 2760: if ( sendVSCPFrame(0,
 17406                           ;main.c: 2761: 37,
 17407                           ;main.c: 2762: 0,
 17408                           ;main.c: 2763: 0,
 17409                           ;main.c: 2764: 5,
 17410                           ;main.c: 2765: vscpData ) ) {
 17411  004E06  0100               	movlb	0	; () banked
 17412  004E08  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17413  004E0A  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 17414  004E0C  0E25               	movlw	37
 17415  004E0E  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17416  004E10  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17417  004E12  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17418  004E14  0E05               	movlw	5
 17419  004E16  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17420  004E18  0E01               	movlw	high _vscpData
 17421  004E1A  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17422  004E1C  0EE5               	movlw	low _vscpData
 17423  004E1E  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17424  004E20  EC1A  F02B         	call	_sendVSCPFrame	;wreg free
 17425  004E24  0900               	iorlw	0
 17426  004E26  E05A               	bz	l17223
 17427                           
 17428                           ;main.c: 2767: timekeeper = 0;
 17429  004E28  0101               	movlb	1	; () banked
 17430  004E2A  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 17431  004E2C  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17432  004E2E  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17433  004E30  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17434                           
 17435                           ;main.c: 2768: while (timekeeper < timeout) {
 17436  004E32  D03D               	goto	l17221
 17437  004E34                     l1225:
 17438                           
 17439                           ; BSR set to: 1
 17440  004E34  0004               	clrwdt		;# 
 17441                           
 17442                           ;main.c: 2771: checkCANBusState();
 17443  004E36  EC1D  F034         	call	_checkCANBusState	;wreg free
 17444                           
 17445                           ;main.c: 2773: if ( getVSCPFrame( &vscpClass,
 17446                           ;main.c: 2774: &vscpType,
 17447                           ;main.c: 2775: &vscpNodeId,
 17448                           ;main.c: 2776: &vscpPriority,
 17449                           ;main.c: 2777: &vscpSize,
 17450                           ;main.c: 2778: vscpData ) ) {
 17451  004E3A  0E41               	movlw	low _vscpType
 17452  004E3C  0100               	movlb	0	; () banked
 17453  004E3E  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 17454  004E40  0E3E               	movlw	low _vscpNodeId
 17455  004E42  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17456  004E44  0E3F               	movlw	low _vscpPriority
 17457  004E46  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17458  004E48  0E40               	movlw	low _vscpSize
 17459  004E4A  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17460  004E4C  0E01               	movlw	high _vscpData
 17461  004E4E  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17462  004E50  0EE5               	movlw	low _vscpData
 17463  004E52  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17464  004E54  0E3A               	movlw	_vscpClass& (0+255)
 17465  004E56  EC92  F02E         	call	_getVSCPFrame
 17466  004E5A  0900               	iorlw	0
 17467  004E5C  E028               	bz	l17221
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;main.c: 2779: if ( ( nodeid == vscpNodeId ) &&
 17471                           ;main.c: 2780: ( 0 == vscpClass ) &&
 17472                           ;main.c: 2781: ( 39 == vscpType ) &&
 17473                           ;main.c: 2782: ( 5 == vscpSize ) &&
 17474                           ;main.c: 2783: ( 0 == vscpData[ 0 ] ) &&
 17475                           ;main.c: 2784: ( (page >> 8) == vscpData[ 1 ] ) &&
 17476                           ;main.c: 2785: ( (page & 0xff) == vscpData[ 2 ] ) &&
 17477                           ;main.c: 2786: ( reg == vscpData[ 3 ] ) ) {
 17478  004E5E  503E               	movf	_vscpNodeId,w,c
 17479  004E60  63BE               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 17480  004E62  D025               	goto	l17221
 17481                           
 17482                           ; BSR set to: 0
 17483  004E64  503B               	movf	_vscpClass+1,w,c
 17484  004E66  103A               	iorwf	_vscpClass,w,c
 17485  004E68  E122               	bnz	l17221
 17486                           
 17487                           ; BSR set to: 0
 17488  004E6A  5041               	movf	_vscpType,w,c
 17489  004E6C  0A27               	xorlw	39
 17490  004E6E  E11F               	bnz	l17221
 17491                           
 17492                           ; BSR set to: 0
 17493  004E70  5040               	movf	_vscpSize,w,c
 17494  004E72  0A05               	xorlw	5
 17495  004E74  E11C               	bnz	l17221
 17496                           
 17497                           ; BSR set to: 0
 17498  004E76  0101               	movlb	1	; () banked
 17499  004E78  67E5               	tstfsz	_vscpData& (0+255),b
 17500  004E7A  D019               	goto	l17221
 17501                           
 17502                           ; BSR set to: 1
 17503  004E7C  0100               	movlb	0	; () banked
 17504  004E7E  51B4               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 17505  004E80  0101               	movlb	1	; () banked
 17506  004E82  19E6               	xorwf	(_vscpData+1)& (0+255),w,b
 17507  004E84  E114               	bnz	l17221
 17508                           
 17509                           ; BSR set to: 1
 17510  004E86  0100               	movlb	0	; () banked
 17511  004E88  51B3               	movf	readRegisterExtended@page& (0+255),w,b
 17512  004E8A  EE21  F0E7         	lfsr	2,_vscpData+2
 17513  004E8E  62DF               	cpfseq	indf2,c
 17514  004E90  D00E               	goto	l17221
 17515                           
 17516                           ; BSR set to: 1
 17517  004E92  51B5               	movf	readRegisterExtended@reg& (0+255),w,b
 17518  004E94  0101               	movlb	1	; () banked
 17519  004E96  EE21  F0E8         	lfsr	2,_vscpData+3
 17520  004E9A  62DF               	cpfseq	indf2,c
 17521  004E9C  D008               	goto	l17221
 17522                           
 17523                           ; BSR set to: 1
 17524                           ;main.c: 2787: *value = vscpData[ 4 ];
 17525  004E9E  C0B8  FFD9         	movff	readRegisterExtended@value,fsr2l
 17526  004EA2  C0B9  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 17527  004EA6  C1E9  FFDF         	movff	_vscpData+4,indf2
 17528                           
 17529                           ; BSR set to: 1
 17530                           ;main.c: 2788: return 1;
 17531  004EAA  0E01               	movlw	1
 17532  004EAC  D018               	goto	l1228
 17533  004EAE                     l17221:
 17534  004EAE  0100               	movlb	0	; () banked
 17535  004EB0  51B6               	movf	readRegisterExtended@timeout& (0+255),w,b
 17536  004EB2  6FBA               	movwf	??_readRegisterExtended& (0+255),b
 17537  004EB4  51B7               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 17538  004EB6  6FBB               	movwf	(??_readRegisterExtended+1)& (0+255),b
 17539  004EB8  6BBC               	clrf	(??_readRegisterExtended+2)& (0+255),b
 17540  004EBA  6BBD               	clrf	(??_readRegisterExtended+3)& (0+255),b
 17541  004EBC  51BA               	movf	??_readRegisterExtended& (0+255),w,b
 17542  004EBE  0101               	movlb	1	; () banked
 17543  004EC0  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 17544  004EC2  0100               	movlb	0	; () banked
 17545  004EC4  51BB               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 17546  004EC6  0101               	movlb	1	; () banked
 17547  004EC8  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17548  004ECA  0100               	movlb	0	; () banked
 17549  004ECC  51BC               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 17550  004ECE  0101               	movlb	1	; () banked
 17551  004ED0  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17552  004ED2  0100               	movlb	0	; () banked
 17553  004ED4  51BD               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 17554  004ED6  0101               	movlb	1	; () banked
 17555  004ED8  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17556  004EDA  E3AC               	bnc	l1225
 17557  004EDC                     l17223:
 17558                           
 17559                           ;main.c: 2789: }
 17560                           ;main.c: 2790: }
 17561                           ;main.c: 2791: }
 17562                           ;main.c: 2792: }
 17563                           ;main.c: 2794: return 0;
 17564  004EDC  0E00               	movlw	0
 17565  004EDE                     l1228:
 17566  004EDE  0012               	return	
 17567  004EE0                     __end_of_readRegisterExtended:
 17568                           	opt stack 0
 17569                           tblptru	equ	0xFF8
 17570                           tblptrh	equ	0xFF7
 17571                           tblptrl	equ	0xFF6
 17572                           tablat	equ	0xFF5
 17573                           prodh	equ	0xFF4
 17574                           prodl	equ	0xFF3
 17575                           intcon	equ	0xFF2
 17576                           indf0	equ	0xFEF
 17577                           postinc0	equ	0xFEE
 17578                           fsr0h	equ	0xFEA
 17579                           fsr0l	equ	0xFE9
 17580                           wreg	equ	0xFE8
 17581                           indf1	equ	0xFE7
 17582                           postinc1	equ	0xFE6
 17583                           postdec1	equ	0xFE5
 17584                           fsr1h	equ	0xFE2
 17585                           fsr1l	equ	0xFE1
 17586                           indf2	equ	0xFDF
 17587                           postinc2	equ	0xFDE
 17588                           postdec2	equ	0xFDD
 17589                           plusw2	equ	0xFDB
 17590                           fsr2h	equ	0xFDA
 17591                           fsr2l	equ	0xFD9
 17592                           status	equ	0xFD8
 17593                           
 17594 ;; *************** function _strcpy *****************
 17595 ;; Defined at:
 17596 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;  to              2   30[COMRAM] PTR unsigned char 
 17599 ;;		 -> cmdbuf(80), 
 17600 ;;  from            2   32[COMRAM] PTR const unsigned char 
 17601 ;;		 -> cmdbuf(80), 
 17602 ;; Auto vars:     Size  Location     Type
 17603 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 17604 ;;		 -> cmdbuf(80), 
 17605 ;; Return value:  Size  Location     Type
 17606 ;;                  2   30[COMRAM] PTR unsigned char 
 17607 ;; Registers used:
 17608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17609 ;; Tracked objects:
 17610 ;;		On entry : F/0
 17611 ;;		On exit  : F/0
 17612 ;;		Unchanged: 0/0
 17613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17614 ;;      Params:         4       0       0       0       0       0       0
 17615 ;;      Locals:         0       2       0       0       0       0       0
 17616 ;;      Temps:          0       0       0       0       0       0       0
 17617 ;;      Totals:         4       2       0       0       0       0       0
 17618 ;;Total ram usage:        6 bytes
 17619 ;; Hardware stack levels used:    1
 17620 ;; Hardware stack levels required when called:    3
 17621 ;; This function calls:
 17622 ;;		Nothing
 17623 ;; This function is called by:
 17624 ;;		_doModeVerbose
 17625 ;; This function uses a non-reentrant model
 17626 ;;
 17627                           
 17628                           	psect	text26
 17629  006796                     __ptext26:
 17630                           	opt stack 0
 17631  006796                     _strcpy:
 17632                           	opt stack 26
 17633                           
 17634                           ; BSR set to: 0
 17635                           
 17636                           ;incstack = 0
 17637                           ;incstack = 0
 17638  006796  C01F  F060         	movff	strcpy@to,strcpy@cp
 17639  00679A  C020  F061         	movff	strcpy@to+1,strcpy@cp+1
 17640  00679E  D004               	goto	l17173
 17641  0067A0                     l17171:
 17642                           
 17643                           ; BSR set to: 0
 17644  0067A0  4B60               	infsnz	strcpy@cp& (0+255),f,b
 17645  0067A2  2B61               	incf	(strcpy@cp+1)& (0+255),f,b
 17646  0067A4  4A21               	infsnz	strcpy@from,f,c
 17647  0067A6  2A22               	incf	strcpy@from+1,f,c
 17648  0067A8                     l17173:
 17649                           
 17650                           ; BSR set to: 0
 17651  0067A8  C021  FFD9         	movff	strcpy@from,fsr2l
 17652  0067AC  C022  FFDA         	movff	strcpy@from+1,fsr2h
 17653  0067B0  C060  FFE1         	movff	strcpy@cp,fsr1l
 17654  0067B4  C061  FFE2         	movff	strcpy@cp+1,fsr1h
 17655  0067B8  CFDF FFE7          	movff	indf2,indf1
 17656  0067BC  50E7               	movf	indf1,w,c
 17657  0067BE  B4D8               	btfsc	status,2,c
 17658                           
 17659                           ; BSR set to: 0
 17660  0067C0  0012               	return	
 17661  0067C2  D7EE               	goto	l17171
 17662  0067C4                     __end_of_strcpy:
 17663                           	opt stack 0
 17664                           tblptru	equ	0xFF8
 17665                           tblptrh	equ	0xFF7
 17666                           tblptrl	equ	0xFF6
 17667                           tablat	equ	0xFF5
 17668                           prodh	equ	0xFF4
 17669                           prodl	equ	0xFF3
 17670                           intcon	equ	0xFF2
 17671                           indf0	equ	0xFEF
 17672                           postinc0	equ	0xFEE
 17673                           fsr0h	equ	0xFEA
 17674                           fsr0l	equ	0xFE9
 17675                           wreg	equ	0xFE8
 17676                           indf1	equ	0xFE7
 17677                           postinc1	equ	0xFE6
 17678                           postdec1	equ	0xFE5
 17679                           fsr1h	equ	0xFE2
 17680                           fsr1l	equ	0xFE1
 17681                           indf2	equ	0xFDF
 17682                           postinc2	equ	0xFDE
 17683                           postdec2	equ	0xFDD
 17684                           plusw2	equ	0xFDB
 17685                           fsr2h	equ	0xFDA
 17686                           fsr2l	equ	0xFD9
 17687                           status	equ	0xFD8
 17688                           
 17689 ;; *************** function _findNodes *****************
 17690 ;; Defined at:
 17691 ;;		line 3094 in file "main.c"
 17692 ;; Parameters:    Size  Location     Type
 17693 ;;		None
 17694 ;; Auto vars:     Size  Location     Type
 17695 ;;  i               1  103[BANK0 ] unsigned char 
 17696 ;;  bDot            1  102[BANK0 ] enum E15660
 17697 ;;  value           1  101[BANK0 ] unsigned char 
 17698 ;;  nFound          1  100[BANK0 ] unsigned char 
 17699 ;; Return value:  Size  Location     Type
 17700 ;;		None               void
 17701 ;; Registers used:
 17702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17703 ;; Tracked objects:
 17704 ;;		On entry : F/0
 17705 ;;		On exit  : 0/0
 17706 ;;		Unchanged: 0/0
 17707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17708 ;;      Params:         0       0       0       0       0       0       0
 17709 ;;      Locals:         0       6       0       0       0       0       0
 17710 ;;      Temps:          0       0       0       0       0       0       0
 17711 ;;      Totals:         0       6       0       0       0       0       0
 17712 ;;Total ram usage:        6 bytes
 17713 ;; Hardware stack levels used:    1
 17714 ;; Hardware stack levels required when called:    9
 17715 ;; This function calls:
 17716 ;;		_putsUSART
 17717 ;;		_WriteUSART
 17718 ;;		_printNodeFirmwareVersion
 17719 ;;		_printGUID
 17720 ;;		_printMDF
 17721 ;;		_itoa
 17722 ;;		_readRegister
 17723 ;; This function is called by:
 17724 ;;		_doModeVerbose
 17725 ;; This function uses a non-reentrant model
 17726 ;;
 17727                           
 17728                           	psect	text27
 17729  004658                     __ptext27:
 17730                           	opt stack 0
 17731  004658                     _findNodes:
 17732                           	opt stack 20
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;main.c: 3095: uint8_t nFound = 0;
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;incstack = 0
 17739                           ;incstack = 0
 17740  004658  6BC4               	clrf	findNodes@nFound& (0+255),b
 17741                           
 17742                           ;main.c: 3096: uint8_t i;
 17743                           ;main.c: 3097: uint8_t value;
 17744                           ;main.c: 3098: BOOL bDot = 0;
 17745  00465A  6BC6               	clrf	findNodes@bDot& (0+255),b
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;main.c: 3100: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 17749  00465C  506F               	movf	3951,w,c	;volatile
 17750  00465E  0BE0               	andlw	224
 17751  004660  E007               	bz	l17115
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;main.c: 3101: putsUSART( (const char *)"-ERROR - Command only works if interface is ope
      +                          n.\r\n" );
 17755  004662  0E73               	movlw	high STR_50
 17756  004664  6E21               	movwf	?_putsUSART+1,c
 17757  004666  0E53               	movlw	low STR_50
 17758  004668  6E20               	movwf	?_putsUSART,c
 17759  00466A  ECB5  F031         	call	_putsUSART	;wreg free
 17760  00466E  D08B               	goto	l1328
 17761  004670                     l17115:
 17762                           
 17763                           ; BSR set to: 0
 17764                           ;main.c: 3103: }
 17765                           ;main.c: 3105: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 17766  004670  0E70               	movlw	high STR_280
 17767  004672  6E21               	movwf	?_putsUSART+1,c
 17768  004674  0E1C               	movlw	low STR_280
 17769  004676  6E20               	movwf	?_putsUSART,c
 17770  004678  ECB5  F031         	call	_putsUSART	;wreg free
 17771                           
 17772                           ;main.c: 3107: for (i = 1; i != 0; i++) {
 17773  00467C  0E01               	movlw	1
 17774  00467E  0100               	movlb	0	; () banked
 17775  004680  6FC7               	movwf	findNodes@i& (0+255),b
 17776  004682                     l1329:
 17777                           
 17778                           ; BSR set to: 0
 17779  004682  0004               	clrwdt		;# 
 17780                           
 17781                           ;main.c: 3111: if (readRegister( i,
 17782                           ;main.c: 3112: 0xE0,
 17783                           ;main.c: 3113: rwtimeout,
 17784                           ;main.c: 3114: &value ) ) {
 17785  004684  0EE0               	movlw	224
 17786  004686  0100               	movlb	0	; () banked
 17787  004688  6FB3               	movwf	?_readRegister& (0+255),b
 17788  00468A  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 17789  00468E  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 17790  004690  0EC5               	movlw	low findNodes@value
 17791  004692  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 17792  004694  51C7               	movf	findNodes@i& (0+255),w,b
 17793  004696  ECF7  F029         	call	_readRegister
 17794  00469A  0900               	iorlw	0
 17795  00469C  E049               	bz	l17151
 17796                           
 17797                           ;main.c: 3115: if ( bDot ) {
 17798  00469E  0100               	movlb	0	; () banked
 17799  0046A0  51C6               	movf	findNodes@bDot& (0+255),w,b
 17800  0046A2  E006               	bz	l1332
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;main.c: 3116: putsUSART((char *) "\r\n");
 17804  0046A4  0E73               	movlw	high (STR_239+51)
 17805  0046A6  6E21               	movwf	?_putsUSART+1,c
 17806  0046A8  0E1A               	movlw	low (STR_239+51)
 17807  0046AA  6E20               	movwf	?_putsUSART,c
 17808  0046AC  ECB5  F031         	call	_putsUSART	;wreg free
 17809  0046B0                     l1332:
 17810                           
 17811                           ;main.c: 3117: }
 17812                           ;main.c: 3118: putsUSART((char *) "Node found with node id = ");
 17813  0046B0  0E7A               	movlw	high STR_282
 17814  0046B2  6E21               	movwf	?_putsUSART+1,c
 17815  0046B4  0EB4               	movlw	low STR_282
 17816  0046B6  6E20               	movwf	?_putsUSART,c
 17817  0046B8  ECB5  F031         	call	_putsUSART	;wreg free
 17818                           
 17819                           ;main.c: 3119: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 17820  0046BC  662C               	tstfsz	_bHex,c
 17821  0046BE  D004               	goto	l17133
 17822  0046C0  0100               	movlb	0	; () banked
 17823  0046C2  6BC3               	clrf	(_findNodes$1702+1)& (0+255),b
 17824  0046C4  0E0A               	movlw	10
 17825  0046C6  D003               	goto	L19
 17826  0046C8                     l17133:
 17827  0046C8  0100               	movlb	0	; () banked
 17828  0046CA  6BC3               	clrf	(_findNodes$1702+1)& (0+255),b
 17829  0046CC  0E10               	movlw	16
 17830  0046CE                     L19:
 17831  0046CE  6FC2               	movwf	_findNodes$1702& (0+255),b
 17832                           
 17833                           ; BSR set to: 0
 17834  0046D0  0E01               	movlw	high _wrkbuf
 17835  0046D2  0100               	movlb	0	; () banked
 17836  0046D4  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17837  0046D6  0E7D               	movlw	low _wrkbuf
 17838  0046D8  6F6C               	movwf	?_itoa& (0+255),b
 17839  0046DA  C03E  F06E         	movff	_vscpNodeId,?_itoa+2
 17840  0046DE  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17841  0046E0  C0C2  F070         	movff	_findNodes$1702,?_itoa+4
 17842  0046E4  C0C3  F071         	movff	_findNodes$1702+1,?_itoa+5
 17843  0046E8  EC64  F033         	call	_itoa	;wreg free
 17844                           
 17845                           ; BSR set to: 0
 17846                           ;main.c: 3120: putsUSART(wrkbuf);
 17847  0046EC  0101               	movlb	1	; () banked
 17848  0046EE  0E01               	movlw	high _wrkbuf
 17849  0046F0  6E21               	movwf	?_putsUSART+1,c
 17850  0046F2  0E7D               	movlw	low _wrkbuf
 17851  0046F4  6E20               	movwf	?_putsUSART,c
 17852  0046F6  ECB5  F031         	call	_putsUSART	;wreg free
 17853                           
 17854                           ;main.c: 3121: putsUSART((char *) "\r\n");
 17855  0046FA  0E73               	movlw	high (STR_239+51)
 17856  0046FC  6E21               	movwf	?_putsUSART+1,c
 17857  0046FE  0E1A               	movlw	low (STR_239+51)
 17858  004700  6E20               	movwf	?_putsUSART,c
 17859  004702  ECB5  F031         	call	_putsUSART	;wreg free
 17860                           
 17861                           ;main.c: 3122: printNodeFirmwareVersion(i);
 17862  004706  0100               	movlb	0	; () banked
 17863  004708  51C7               	movf	findNodes@i& (0+255),w,b
 17864  00470A  EC93  F029         	call	_printNodeFirmwareVersion
 17865                           
 17866                           ;main.c: 3123: printGUID(i);
 17867  00470E  0100               	movlb	0	; () banked
 17868  004710  51C7               	movf	findNodes@i& (0+255),w,b
 17869  004712  EC77  F026         	call	_printGUID
 17870                           
 17871                           ;main.c: 3124: printMDF(i);
 17872  004716  0100               	movlb	0	; () banked
 17873  004718  51C7               	movf	findNodes@i& (0+255),w,b
 17874  00471A  ECB5  F02D         	call	_printMDF
 17875                           
 17876                           ;main.c: 3125: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 17877  00471E  0E70               	movlw	high STR_280
 17878  004720  6E21               	movwf	?_putsUSART+1,c
 17879  004722  0E1C               	movlw	low STR_280
 17880  004724  6E20               	movwf	?_putsUSART,c
 17881  004726  ECB5  F031         	call	_putsUSART	;wreg free
 17882                           
 17883                           ;main.c: 3126: nFound++;
 17884  00472A  0100               	movlb	0	; () banked
 17885  00472C  2BC4               	incf	findNodes@nFound& (0+255),f,b
 17886                           
 17887                           ;main.c: 3127: }
 17888  00472E  D007               	goto	l17157
 17889  004730                     l17151:
 17890                           
 17891                           ;main.c: 3128: else {
 17892                           ;main.c: 3129: bDot = 1;
 17893  004730  0E01               	movlw	1
 17894  004732  0100               	movlb	0	; () banked
 17895  004734  6FC6               	movwf	findNodes@bDot& (0+255),b
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;main.c: 3130: WriteUSART('.');
 17899  004736  0E2E               	movlw	46
 17900  004738  EC61  F034         	call	_WriteUSART
 17901                           
 17902                           ;main.c: 3131: (!TXSTAbits.TRMT);
 17903  00473C  50AC               	movf	4012,w,c	;volatile
 17904  00473E                     l17157:
 17905  00473E  0100               	movlb	0	; () banked
 17906  004740  2BC7               	incf	findNodes@i& (0+255),f,b
 17907                           
 17908                           ; BSR set to: 0
 17909  004742  67C7               	tstfsz	findNodes@i& (0+255),b
 17910  004744  D79E               	goto	l1329
 17911                           
 17912                           ; BSR set to: 0
 17913                           ;main.c: 3132: }
 17914                           ;main.c: 3134: }
 17915                           ;main.c: 3136: putsUSART((char *) "\r\n");
 17916  004746  0E73               	movlw	high (STR_239+51)
 17917  004748  6E21               	movwf	?_putsUSART+1,c
 17918  00474A  0E1A               	movlw	low (STR_239+51)
 17919  00474C  6E20               	movwf	?_putsUSART,c
 17920  00474E  ECB5  F031         	call	_putsUSART	;wreg free
 17921                           
 17922                           ;main.c: 3137: itoa(wrkbuf, nFound, 10);
 17923  004752  0E01               	movlw	high _wrkbuf
 17924  004754  0100               	movlb	0	; () banked
 17925  004756  6F6D               	movwf	(?_itoa+1)& (0+255),b
 17926  004758  0E7D               	movlw	low _wrkbuf
 17927  00475A  6F6C               	movwf	?_itoa& (0+255),b
 17928  00475C  C0C4  F06E         	movff	findNodes@nFound,?_itoa+2
 17929  004760  6B6F               	clrf	(?_itoa+3)& (0+255),b
 17930  004762  6B71               	clrf	(?_itoa+5)& (0+255),b
 17931  004764  0E0A               	movlw	10
 17932  004766  6F70               	movwf	(?_itoa+4)& (0+255),b
 17933  004768  EC64  F033         	call	_itoa	;wreg free
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;main.c: 3138: putsUSART(wrkbuf);
 17937  00476C  0101               	movlb	1	; () banked
 17938  00476E  0E01               	movlw	high _wrkbuf
 17939  004770  6E21               	movwf	?_putsUSART+1,c
 17940  004772  0E7D               	movlw	low _wrkbuf
 17941  004774  6E20               	movwf	?_putsUSART,c
 17942  004776  ECB5  F031         	call	_putsUSART	;wreg free
 17943                           
 17944                           ;main.c: 3139: putsUSART((char *) " node(s) found\r\n");
 17945  00477A  0E7D               	movlw	high STR_286
 17946  00477C  6E21               	movwf	?_putsUSART+1,c
 17947  00477E  0EC9               	movlw	low STR_286
 17948  004780  6E20               	movwf	?_putsUSART,c
 17949  004782  ECB5  F031         	call	_putsUSART	;wreg free
 17950  004786                     l1328:
 17951  004786  0012               	return	
 17952  004788                     __end_of_findNodes:
 17953                           	opt stack 0
 17954                           tblptru	equ	0xFF8
 17955                           tblptrh	equ	0xFF7
 17956                           tblptrl	equ	0xFF6
 17957                           tablat	equ	0xFF5
 17958                           prodh	equ	0xFF4
 17959                           prodl	equ	0xFF3
 17960                           intcon	equ	0xFF2
 17961                           indf0	equ	0xFEF
 17962                           postinc0	equ	0xFEE
 17963                           fsr0h	equ	0xFEA
 17964                           fsr0l	equ	0xFE9
 17965                           wreg	equ	0xFE8
 17966                           indf1	equ	0xFE7
 17967                           postinc1	equ	0xFE6
 17968                           postdec1	equ	0xFE5
 17969                           fsr1h	equ	0xFE2
 17970                           fsr1l	equ	0xFE1
 17971                           indf2	equ	0xFDF
 17972                           postinc2	equ	0xFDE
 17973                           postdec2	equ	0xFDD
 17974                           plusw2	equ	0xFDB
 17975                           fsr2h	equ	0xFDA
 17976                           fsr2l	equ	0xFD9
 17977                           status	equ	0xFD8
 17978                           
 17979 ;; *************** function _printMDF *****************
 17980 ;; Defined at:
 17981 ;;		line 3190 in file "main.c"
 17982 ;; Parameters:    Size  Location     Type
 17983 ;;  nodeid          1    wreg     unsigned char 
 17984 ;; Auto vars:     Size  Location     Type
 17985 ;;  nodeid          1   92[BANK0 ] unsigned char 
 17986 ;;  p               2   94[BANK0 ] PTR unsigned char 
 17987 ;;		 -> wrkbuf(80), 
 17988 ;;  i               1   96[BANK0 ] unsigned char 
 17989 ;;  value           1   93[BANK0 ] unsigned char 
 17990 ;; Return value:  Size  Location     Type
 17991 ;;		None               void
 17992 ;; Registers used:
 17993 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17994 ;; Tracked objects:
 17995 ;;		On entry : D/2
 17996 ;;		On exit  : 0/0
 17997 ;;		Unchanged: 0/0
 17998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17999 ;;      Params:         0       0       0       0       0       0       0
 18000 ;;      Locals:         0       5       0       0       0       0       0
 18001 ;;      Temps:          0       0       0       0       0       0       0
 18002 ;;      Totals:         0       5       0       0       0       0       0
 18003 ;;Total ram usage:        5 bytes
 18004 ;; Hardware stack levels used:    1
 18005 ;; Hardware stack levels required when called:    8
 18006 ;; This function calls:
 18007 ;;		_putsUSART
 18008 ;;		_memset
 18009 ;;		_readRegister
 18010 ;; This function is called by:
 18011 ;;		_doModeVerbose
 18012 ;;		_findNodes
 18013 ;; This function uses a non-reentrant model
 18014 ;;
 18015                           
 18016                           	psect	text28
 18017  005B6A                     __ptext28:
 18018                           	opt stack 0
 18019  005B6A                     _printMDF:
 18020                           	opt stack 21
 18021                           
 18022                           ;incstack = 0
 18023                           ;incstack = 0
 18024                           ;printMDF@nodeid stored from wreg
 18025  005B6A  CFE8 F0BC          	movff	wreg,printMDF@nodeid
 18026                           
 18027                           ;main.c: 3191: uint8_t i;
 18028                           ;main.c: 3192: uint8_t value;
 18029                           ;main.c: 3193: char *p = wrkbuf;
 18030  005B6E  0E01               	movlw	high _wrkbuf
 18031  005B70  0100               	movlb	0	; () banked
 18032  005B72  6FBF               	movwf	(printMDF@p+1)& (0+255),b
 18033  005B74  0E7D               	movlw	low _wrkbuf
 18034  005B76  6FBE               	movwf	printMDF@p& (0+255),b
 18035                           
 18036                           ; BSR set to: 0
 18037                           ;main.c: 3194: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 18038  005B78  0E01               	movlw	high _wrkbuf
 18039  005B7A  6F61               	movwf	(?_memset+1)& (0+255),b
 18040  005B7C  0E7D               	movlw	low _wrkbuf
 18041  005B7E  D839               	call	PL24	;call to abstracted procedure
 18042  005B80  ECE2  F033         	call	_memset	;wreg free
 18043                           
 18044                           ; BSR set to: 0
 18045                           ;main.c: 3195: putsUSART((char *) "MDF = http://");
 18046  005B84  0E7E               	movlw	high STR_292
 18047  005B86  6E21               	movwf	?_putsUSART+1,c
 18048  005B88  0E0B               	movlw	low STR_292
 18049  005B8A  6E20               	movwf	?_putsUSART,c
 18050  005B8C  ECB5  F031         	call	_putsUSART	;wreg free
 18051                           
 18052                           ;main.c: 3197: for (i = 0; i < 32; i++) {
 18053  005B90  0100               	movlb	0	; () banked
 18054  005B92  6BC0               	clrf	printMDF@i& (0+255),b
 18055  005B94                     l17703:
 18056                           
 18057                           ; BSR set to: 0
 18058                           ;main.c: 3198: if (readRegister(nodeid,
 18059                           ;main.c: 3199: 0xE0 + i,
 18060                           ;main.c: 3200: rwtimeout,
 18061                           ;main.c: 3201: &value)) {
 18062  005B94  51C0               	movf	printMDF@i& (0+255),w,b
 18063  005B96  0FE0               	addlw	224
 18064  005B98  6FB3               	movwf	?_readRegister& (0+255),b
 18065  005B9A  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 18066  005B9E  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 18067  005BA0  0EBD               	movlw	low printMDF@value
 18068  005BA2  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 18069  005BA4  51BC               	movf	printMDF@nodeid& (0+255),w,b
 18070  005BA6  ECF7  F029         	call	_readRegister
 18071  005BAA  0900               	iorlw	0
 18072  005BAC  E00A               	bz	l17709
 18073                           
 18074                           ;main.c: 3202: *p = value;
 18075  005BAE  C0BE  FFD9         	movff	printMDF@p,fsr2l
 18076  005BB2  C0BF  FFDA         	movff	printMDF@p+1,fsr2h
 18077  005BB6  C0BD  FFDF         	movff	printMDF@value,indf2
 18078  005BBA                     l17707:
 18079                           
 18080                           ;main.c: 3203: p++;
 18081  005BBA  0100               	movlb	0	; () banked
 18082  005BBC  4BBE               	infsnz	printMDF@p& (0+255),f,b
 18083  005BBE  2BBF               	incf	(printMDF@p+1)& (0+255),f,b
 18084                           
 18085                           ;main.c: 3205: }
 18086  005BC0  D007               	goto	l17713
 18087  005BC2                     l17709:
 18088                           
 18089                           ;main.c: 3206: else {
 18090                           ;main.c: 3207: *p = '?';
 18091  005BC2  C0BE  FFD9         	movff	printMDF@p,fsr2l
 18092  005BC6  C0BF  FFDA         	movff	printMDF@p+1,fsr2h
 18093  005BCA  0E3F               	movlw	63
 18094  005BCC  6EDF               	movwf	indf2,c
 18095  005BCE  D7F5               	goto	l17707
 18096  005BD0                     l17713:
 18097                           
 18098                           ; BSR set to: 0
 18099  005BD0  2BC0               	incf	printMDF@i& (0+255),f,b
 18100                           
 18101                           ; BSR set to: 0
 18102  005BD2  0E1F               	movlw	31
 18103  005BD4  65C0               	cpfsgt	printMDF@i& (0+255),b
 18104  005BD6  D7DE               	goto	l17703
 18105                           
 18106                           ; BSR set to: 0
 18107                           ;main.c: 3209: }
 18108                           ;main.c: 3210: }
 18109                           ;main.c: 3212: putsUSART(wrkbuf);
 18110  005BD8  0101               	movlb	1	; () banked
 18111  005BDA  0E01               	movlw	high _wrkbuf
 18112  005BDC  6E21               	movwf	?_putsUSART+1,c
 18113  005BDE  0E7D               	movlw	low _wrkbuf
 18114  005BE0  6E20               	movwf	?_putsUSART,c
 18115  005BE2  ECB5  F031         	call	_putsUSART	;wreg free
 18116                           
 18117                           ;main.c: 3213: putsUSART((char *) "\r\n");
 18118  005BE6  0E73               	movlw	high (STR_239+51)
 18119  005BE8  6E21               	movwf	?_putsUSART+1,c
 18120  005BEA  0E1A               	movlw	low (STR_239+51)
 18121  005BEC  6E20               	movwf	?_putsUSART,c
 18122  005BEE  EFB5  F031         	goto	_putsUSART	;wreg free
 18123  005BF2                     __end_of_printMDF:
 18124                           	opt stack 0
 18125  005BF2                     PL24:
 18126                           	opt stack 20
 18127  005BF2  6F60               	movwf	?_memset& (0+255),b
 18128  005BF4  6B63               	clrf	(?_memset+3)& (0+255),b
 18129  005BF6  6B62               	clrf	(?_memset+2)& (0+255),b
 18130  005BF8  6B65               	clrf	(?_memset+5)& (0+255),b
 18131  005BFA  0E50               	movlw	80
 18132  005BFC  6F64               	movwf	(?_memset+4)& (0+255),b
 18133  005BFE  0C50               	retlw	80
 18134  005C00                     __end_ofPL24:
 18135                           	opt stack 0
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           indf0	equ	0xFEF
 18144                           postinc0	equ	0xFEE
 18145                           fsr0h	equ	0xFEA
 18146                           fsr0l	equ	0xFE9
 18147                           wreg	equ	0xFE8
 18148                           indf1	equ	0xFE7
 18149                           postinc1	equ	0xFE6
 18150                           postdec1	equ	0xFE5
 18151                           fsr1h	equ	0xFE2
 18152                           fsr1l	equ	0xFE1
 18153                           indf2	equ	0xFDF
 18154                           postinc2	equ	0xFDE
 18155                           postdec2	equ	0xFDD
 18156                           plusw2	equ	0xFDB
 18157                           fsr2h	equ	0xFDA
 18158                           fsr2l	equ	0xFD9
 18159                           status	equ	0xFD8
 18160                           
 18161 ;; *************** function _printGUID *****************
 18162 ;; Defined at:
 18163 ;;		line 3149 in file "main.c"
 18164 ;; Parameters:    Size  Location     Type
 18165 ;;  nodeid          1    wreg     unsigned char 
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;  nodeid          1   92[BANK0 ] unsigned char 
 18168 ;;  buf             3   93[BANK0 ] unsigned char [3]
 18169 ;;  i               1   97[BANK0 ] unsigned char 
 18170 ;;  value           1   96[BANK0 ] unsigned char 
 18171 ;; Return value:  Size  Location     Type
 18172 ;;		None               void
 18173 ;; Registers used:
 18174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18175 ;; Tracked objects:
 18176 ;;		On entry : D/2
 18177 ;;		On exit  : 0/0
 18178 ;;		Unchanged: 0/0
 18179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18180 ;;      Params:         0       0       0       0       0       0       0
 18181 ;;      Locals:         0       6       0       0       0       0       0
 18182 ;;      Temps:          0       0       0       0       0       0       0
 18183 ;;      Totals:         0       6       0       0       0       0       0
 18184 ;;Total ram usage:        6 bytes
 18185 ;; Hardware stack levels used:    1
 18186 ;; Hardware stack levels required when called:    8
 18187 ;; This function calls:
 18188 ;;		_putsUSART
 18189 ;;		_memset
 18190 ;;		_strlen
 18191 ;;		_itoa
 18192 ;;		_readRegister
 18193 ;;		_strcat
 18194 ;; This function is called by:
 18195 ;;		_doModeVerbose
 18196 ;;		_findNodes
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           	psect	text29
 18201  004CEE                     __ptext29:
 18202                           	opt stack 0
 18203  004CEE                     _printGUID:
 18204                           	opt stack 21
 18205                           
 18206                           ;incstack = 0
 18207                           ;incstack = 0
 18208                           ;printGUID@nodeid stored from wreg
 18209  004CEE  CFE8 F0BC          	movff	wreg,printGUID@nodeid
 18210                           
 18211                           ;main.c: 3150: uint8_t i;
 18212                           ;main.c: 3151: uint8_t value;
 18213                           ;main.c: 3152: char buf[3];
 18214                           ;main.c: 3154: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 18215  004CF2  0E01               	movlw	high _wrkbuf
 18216  004CF4  0100               	movlb	0	; () banked
 18217  004CF6  6F61               	movwf	(?_memset+1)& (0+255),b
 18218  004CF8  0E7D               	movlw	low _wrkbuf
 18219  004CFA  ECF9  F02D         	call	PL24	;call to abstracted procedure
 18220  004CFE  ECE2  F033         	call	_memset	;wreg free
 18221                           
 18222                           ; BSR set to: 0
 18223                           ;main.c: 3155: putsUSART((char *) "GUID = ");
 18224  004D02  0E7E               	movlw	high STR_287
 18225  004D04  6E21               	movwf	?_putsUSART+1,c
 18226  004D06  0ED9               	movlw	low STR_287
 18227  004D08  6E20               	movwf	?_putsUSART,c
 18228  004D0A  ECB5  F031         	call	_putsUSART	;wreg free
 18229                           
 18230                           ;main.c: 3157: for (i = 0; i < 16; i++) {
 18231  004D0E  0100               	movlb	0	; () banked
 18232  004D10  6BC1               	clrf	printGUID@i& (0+255),b
 18233  004D12                     l17669:
 18234                           
 18235                           ; BSR set to: 0
 18236                           ;main.c: 3158: if (readRegister(nodeid,
 18237                           ;main.c: 3159: 0xD0 + i,
 18238                           ;main.c: 3160: rwtimeout,
 18239                           ;main.c: 3161: &value)) {
 18240  004D12  51C1               	movf	printGUID@i& (0+255),w,b
 18241  004D14  0FD0               	addlw	208
 18242  004D16  6FB3               	movwf	?_readRegister& (0+255),b
 18243  004D18  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 18244  004D1C  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 18245  004D1E  0EC0               	movlw	low printGUID@value
 18246  004D20  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 18247  004D22  51BC               	movf	printGUID@nodeid& (0+255),w,b
 18248  004D24  ECF7  F029         	call	_readRegister
 18249  004D28  0900               	iorlw	0
 18250  004D2A  E029               	bz	l17679
 18251                           
 18252                           ;main.c: 3162: itoa(buf, value, 16);
 18253  004D2C  0100               	movlb	0	; () banked
 18254  004D2E  0E00               	movlw	high printGUID@buf
 18255  004D30  6F6D               	movwf	(?_itoa+1)& (0+255),b
 18256  004D32  0EBD               	movlw	low printGUID@buf
 18257  004D34  6F6C               	movwf	?_itoa& (0+255),b
 18258  004D36  C0C0  F06E         	movff	printGUID@value,?_itoa+2
 18259  004D3A  6B6F               	clrf	(?_itoa+3)& (0+255),b
 18260  004D3C  6B71               	clrf	(?_itoa+5)& (0+255),b
 18261  004D3E  0E10               	movlw	16
 18262  004D40  6F70               	movwf	(?_itoa+4)& (0+255),b
 18263  004D42  EC64  F033         	call	_itoa	;wreg free
 18264                           
 18265                           ; BSR set to: 0
 18266                           ;main.c: 3163: if (1 == strlen(buf)) {
 18267  004D46  0E00               	movlw	high printGUID@buf
 18268  004D48  6E20               	movwf	?_strlen+1,c
 18269  004D4A  0EBD               	movlw	low printGUID@buf
 18270  004D4C  6E1F               	movwf	?_strlen,c
 18271  004D4E  EC0D  F033         	call	_strlen	;wreg free
 18272  004D52  041F               	decf	?_strlen,w,c
 18273  004D54  1020               	iorwf	?_strlen+1,w,c
 18274  004D56  E10F               	bnz	l17677
 18275                           
 18276                           ;main.c: 3164: strcat(wrkbuf, "0");
 18277  004D58  0101               	movlb	1	; () banked
 18278  004D5A  0E01               	movlw	high _wrkbuf
 18279  004D5C  6E20               	movwf	?_strcat+1,c
 18280  004D5E  0E7D               	movlw	low _wrkbuf
 18281  004D60  6E1F               	movwf	?_strcat,c
 18282  004D62  0E7F               	movlw	high STR_288
 18283  004D64  6E22               	movwf	?_strcat+3,c
 18284  004D66  0EF9               	movlw	low STR_288
 18285  004D68  6E21               	movwf	?_strcat+2,c
 18286  004D6A  EC5D  F031         	call	_strcat	;wreg free
 18287                           
 18288                           ;main.c: 3165: strcat(wrkbuf, buf);
 18289  004D6E  D833               	call	PL88	;call to abstracted procedure
 18290  004D70  EC5D  F031         	call	_strcat	;wreg free
 18291                           
 18292                           ;main.c: 3166: } else {
 18293  004D74  D00F               	goto	l17681
 18294  004D76                     l17677:
 18295                           
 18296                           ;main.c: 3167: strcat(wrkbuf, buf);
 18297  004D76  D82F               	call	PL88	;call to abstracted procedure
 18298  004D78  EC5D  F031         	call	_strcat	;wreg free
 18299  004D7C  D00B               	goto	l17681
 18300  004D7E                     l17679:
 18301                           
 18302                           ;main.c: 3171: strcat(wrkbuf, "--");
 18303  004D7E  0101               	movlb	1	; () banked
 18304  004D80  0E01               	movlw	high _wrkbuf
 18305  004D82  6E20               	movwf	?_strcat+1,c
 18306  004D84  0E7D               	movlw	low _wrkbuf
 18307  004D86  6E1F               	movwf	?_strcat,c
 18308  004D88  0E7F               	movlw	high STR_289
 18309  004D8A  6E22               	movwf	?_strcat+3,c
 18310  004D8C  0EE5               	movlw	low STR_289
 18311  004D8E  6E21               	movwf	?_strcat+2,c
 18312  004D90  EC5D  F031         	call	_strcat	;wreg free
 18313  004D94                     l17681:
 18314                           
 18315                           ;main.c: 3172: }
 18316                           ;main.c: 3174: if (i < 15) {
 18317  004D94  0E0F               	movlw	15
 18318  004D96  0100               	movlb	0	; () banked
 18319  004D98  61C1               	cpfslt	printGUID@i& (0+255),b
 18320  004D9A  D00B               	goto	l17685
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;main.c: 3175: strcat(wrkbuf, ":");
 18324  004D9C  0101               	movlb	1	; () banked
 18325  004D9E  0E01               	movlw	high _wrkbuf
 18326  004DA0  6E20               	movwf	?_strcat+1,c
 18327  004DA2  0E7D               	movlw	low _wrkbuf
 18328  004DA4  6E1F               	movwf	?_strcat,c
 18329  004DA6  0E7F               	movlw	high STR_290
 18330  004DA8  6E22               	movwf	?_strcat+3,c
 18331  004DAA  0EFB               	movlw	low STR_290
 18332  004DAC  6E21               	movwf	?_strcat+2,c
 18333  004DAE  EC5D  F031         	call	_strcat	;wreg free
 18334  004DB2                     l17685:
 18335  004DB2  0100               	movlb	0	; () banked
 18336  004DB4  2BC1               	incf	printGUID@i& (0+255),f,b
 18337                           
 18338                           ; BSR set to: 0
 18339  004DB6  0E0F               	movlw	15
 18340  004DB8  65C1               	cpfsgt	printGUID@i& (0+255),b
 18341  004DBA  D7AB               	goto	l17669
 18342                           
 18343                           ; BSR set to: 0
 18344                           ;main.c: 3176: }
 18345                           ;main.c: 3178: }
 18346                           ;main.c: 3180: putsUSART(wrkbuf);
 18347  004DBC  0101               	movlb	1	; () banked
 18348  004DBE  0E01               	movlw	high _wrkbuf
 18349  004DC0  6E21               	movwf	?_putsUSART+1,c
 18350  004DC2  0E7D               	movlw	low _wrkbuf
 18351  004DC4  6E20               	movwf	?_putsUSART,c
 18352  004DC6  ECB5  F031         	call	_putsUSART	;wreg free
 18353                           
 18354                           ;main.c: 3181: putsUSART((char *) "\r\n");
 18355  004DCA  0E73               	movlw	high (STR_239+51)
 18356  004DCC  6E21               	movwf	?_putsUSART+1,c
 18357  004DCE  0E1A               	movlw	low (STR_239+51)
 18358  004DD0  6E20               	movwf	?_putsUSART,c
 18359  004DD2  EFB5  F031         	goto	_putsUSART	;wreg free
 18360  004DD6                     __end_of_printGUID:
 18361                           	opt stack 0
 18362  004DD6                     PL88:
 18363                           	opt stack 21
 18364  004DD6  0E01               	movlw	high _wrkbuf
 18365  004DD8  6E20               	movwf	?_strcat+1,c
 18366  004DDA  0E7D               	movlw	low _wrkbuf
 18367  004DDC  6E1F               	movwf	?_strcat,c
 18368  004DDE  0100               	movlb	0	; () banked
 18369  004DE0  0E00               	movlw	high printGUID@buf
 18370  004DE2  6E22               	movwf	?_strcat+3,c
 18371  004DE4  0EBD               	movlw	low printGUID@buf
 18372  004DE6  6E21               	movwf	?_strcat+2,c
 18373  004DE8  0012               	return	
 18374  004DEA                     __end_ofPL88:
 18375                           	opt stack 0
 18376                           tblptru	equ	0xFF8
 18377                           tblptrh	equ	0xFF7
 18378                           tblptrl	equ	0xFF6
 18379                           tablat	equ	0xFF5
 18380                           prodh	equ	0xFF4
 18381                           prodl	equ	0xFF3
 18382                           intcon	equ	0xFF2
 18383                           indf0	equ	0xFEF
 18384                           postinc0	equ	0xFEE
 18385                           fsr0h	equ	0xFEA
 18386                           fsr0l	equ	0xFE9
 18387                           wreg	equ	0xFE8
 18388                           indf1	equ	0xFE7
 18389                           postinc1	equ	0xFE6
 18390                           postdec1	equ	0xFE5
 18391                           fsr1h	equ	0xFE2
 18392                           fsr1l	equ	0xFE1
 18393                           indf2	equ	0xFDF
 18394                           postinc2	equ	0xFDE
 18395                           postdec2	equ	0xFDD
 18396                           plusw2	equ	0xFDB
 18397                           fsr2h	equ	0xFDA
 18398                           fsr2l	equ	0xFD9
 18399                           status	equ	0xFD8
 18400                           
 18401 ;; *************** function _printNodeFirmwareVersion *****************
 18402 ;; Defined at:
 18403 ;;		line 3221 in file "main.c"
 18404 ;; Parameters:    Size  Location     Type
 18405 ;;  nodeid          1    wreg     unsigned char 
 18406 ;; Auto vars:     Size  Location     Type
 18407 ;;  nodeid          1   92[BANK0 ] unsigned char 
 18408 ;;  buf             3   93[BANK0 ] unsigned char [3]
 18409 ;;  i               1   97[BANK0 ] unsigned char 
 18410 ;;  value           1   96[BANK0 ] unsigned char 
 18411 ;; Return value:  Size  Location     Type
 18412 ;;		None               void
 18413 ;; Registers used:
 18414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18415 ;; Tracked objects:
 18416 ;;		On entry : D/2
 18417 ;;		On exit  : 0/0
 18418 ;;		Unchanged: 0/0
 18419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18420 ;;      Params:         0       0       0       0       0       0       0
 18421 ;;      Locals:         0       6       0       0       0       0       0
 18422 ;;      Temps:          0       0       0       0       0       0       0
 18423 ;;      Totals:         0       6       0       0       0       0       0
 18424 ;;Total ram usage:        6 bytes
 18425 ;; Hardware stack levels used:    1
 18426 ;; Hardware stack levels required when called:    8
 18427 ;; This function calls:
 18428 ;;		_putsUSART
 18429 ;;		_memset
 18430 ;;		_itoa
 18431 ;;		_readRegister
 18432 ;;		_strcat
 18433 ;; This function is called by:
 18434 ;;		_doModeVerbose
 18435 ;;		_findNodes
 18436 ;; This function uses a non-reentrant model
 18437 ;;
 18438                           
 18439                           	psect	text30
 18440  005326                     __ptext30:
 18441                           	opt stack 0
 18442  005326                     _printNodeFirmwareVersion:
 18443                           	opt stack 21
 18444                           
 18445                           ;incstack = 0
 18446                           ;incstack = 0
 18447                           ;printNodeFirmwareVersion@nodeid stored from wreg
 18448  005326  CFE8 F0BC          	movff	wreg,printNodeFirmwareVersion@nodeid
 18449                           
 18450                           ;main.c: 3222: uint8_t i;
 18451                           ;main.c: 3223: uint8_t value;
 18452                           ;main.c: 3224: char buf[3];
 18453                           ;main.c: 3226: memset( wrkbuf, 0, sizeof(wrkbuf) );
 18454  00532A  0E01               	movlw	high _wrkbuf
 18455  00532C  0100               	movlb	0	; () banked
 18456  00532E  6F61               	movwf	(?_memset+1)& (0+255),b
 18457  005330  0E7D               	movlw	low _wrkbuf
 18458  005332  ECF9  F02D         	call	PL24	;call to abstracted procedure
 18459  005336  ECE2  F033         	call	_memset	;wreg free
 18460                           
 18461                           ; BSR set to: 0
 18462                           ;main.c: 3227: putsUSART((char *) "Firmware version = ");
 18463  00533A  0E7D               	movlw	high STR_294
 18464  00533C  6E21               	movwf	?_putsUSART+1,c
 18465  00533E  0E4A               	movlw	low STR_294
 18466  005340  6E20               	movwf	?_putsUSART,c
 18467  005342  ECB5  F031         	call	_putsUSART	;wreg free
 18468                           
 18469                           ;main.c: 3229: for (i = 0; i < 3; i++) {
 18470  005346  0100               	movlb	0	; () banked
 18471  005348  6BC1               	clrf	printNodeFirmwareVersion@i& (0+255),b
 18472  00534A                     l17641:
 18473                           
 18474                           ; BSR set to: 0
 18475                           ;main.c: 3230: if (readRegister(nodeid,
 18476                           ;main.c: 3231: 0x94 + i,
 18477                           ;main.c: 3232: rwtimeout,
 18478                           ;main.c: 3233: &value)) {
 18479  00534A  51C1               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 18480  00534C  0F94               	addlw	148
 18481  00534E  6FB3               	movwf	?_readRegister& (0+255),b
 18482  005350  C033  F0B4         	movff	_rwtimeout,?_readRegister+1
 18483  005354  6BB5               	clrf	(?_readRegister+2)& (0+255),b
 18484  005356  0EC0               	movlw	low printNodeFirmwareVersion@value
 18485  005358  6FB6               	movwf	(?_readRegister+3)& (0+255),b
 18486  00535A  51BC               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 18487  00535C  ECF7  F029         	call	_readRegister
 18488  005360  0900               	iorlw	0
 18489  005362  E019               	bz	l17647
 18490                           
 18491                           ;main.c: 3234: itoa(buf, value, 16);
 18492  005364  0100               	movlb	0	; () banked
 18493  005366  0E00               	movlw	high printNodeFirmwareVersion@buf
 18494  005368  6F6D               	movwf	(?_itoa+1)& (0+255),b
 18495  00536A  0EBD               	movlw	low printNodeFirmwareVersion@buf
 18496  00536C  6F6C               	movwf	?_itoa& (0+255),b
 18497  00536E  C0C0  F06E         	movff	printNodeFirmwareVersion@value,?_itoa+2
 18498  005372  6B6F               	clrf	(?_itoa+3)& (0+255),b
 18499  005374  6B71               	clrf	(?_itoa+5)& (0+255),b
 18500  005376  0E10               	movlw	16
 18501  005378  6F70               	movwf	(?_itoa+4)& (0+255),b
 18502  00537A  EC64  F033         	call	_itoa	;wreg free
 18503                           
 18504                           ; BSR set to: 0
 18505                           ;main.c: 3235: strcat(wrkbuf, buf);
 18506  00537E  0E01               	movlw	high _wrkbuf
 18507  005380  6E20               	movwf	?_strcat+1,c
 18508  005382  0E7D               	movlw	low _wrkbuf
 18509  005384  6E1F               	movwf	?_strcat,c
 18510  005386  0100               	movlb	0	; () banked
 18511  005388  0E00               	movlw	high printNodeFirmwareVersion@buf
 18512  00538A  6E22               	movwf	?_strcat+3,c
 18513  00538C  0EBD               	movlw	low printNodeFirmwareVersion@buf
 18514  00538E  6E21               	movwf	?_strcat+2,c
 18515  005390  EC5D  F031         	call	_strcat	;wreg free
 18516                           
 18517                           ;main.c: 3236: }
 18518  005394  D00B               	goto	l17649
 18519  005396                     l17647:
 18520                           
 18521                           ;main.c: 3237: else {
 18522                           ;main.c: 3238: strcat(wrkbuf, "?");
 18523  005396  0101               	movlb	1	; () banked
 18524  005398  0E01               	movlw	high _wrkbuf
 18525  00539A  6E20               	movwf	?_strcat+1,c
 18526  00539C  0E7D               	movlw	low _wrkbuf
 18527  00539E  6E1F               	movwf	?_strcat,c
 18528  0053A0  0E7F               	movlw	high STR_167
 18529  0053A2  6E22               	movwf	?_strcat+3,c
 18530  0053A4  0EFD               	movlw	low STR_167
 18531  0053A6  6E21               	movwf	?_strcat+2,c
 18532  0053A8  EC5D  F031         	call	_strcat	;wreg free
 18533  0053AC                     l17649:
 18534                           
 18535                           ;main.c: 3239: }
 18536                           ;main.c: 3241: if (i < 2) {
 18537  0053AC  0E02               	movlw	2
 18538  0053AE  0100               	movlb	0	; () banked
 18539  0053B0  61C1               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 18540  0053B2  D00B               	goto	l17653
 18541                           
 18542                           ; BSR set to: 0
 18543                           ;main.c: 3242: strcat(wrkbuf, ".");
 18544  0053B4  0101               	movlb	1	; () banked
 18545  0053B6  0E01               	movlw	high _wrkbuf
 18546  0053B8  6E20               	movwf	?_strcat+1,c
 18547  0053BA  0E7D               	movlw	low _wrkbuf
 18548  0053BC  6E1F               	movwf	?_strcat,c
 18549  0053BE  0E7F               	movlw	high STR_296
 18550  0053C0  6E22               	movwf	?_strcat+3,c
 18551  0053C2  0EF7               	movlw	low STR_296
 18552  0053C4  6E21               	movwf	?_strcat+2,c
 18553  0053C6  EC5D  F031         	call	_strcat	;wreg free
 18554  0053CA                     l17653:
 18555  0053CA  0100               	movlb	0	; () banked
 18556  0053CC  2BC1               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 18557                           
 18558                           ; BSR set to: 0
 18559  0053CE  0E02               	movlw	2
 18560  0053D0  65C1               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 18561  0053D2  D7BB               	goto	l17641
 18562                           
 18563                           ; BSR set to: 0
 18564                           ;main.c: 3243: }
 18565                           ;main.c: 3245: }
 18566                           ;main.c: 3247: putsUSART(wrkbuf);
 18567  0053D4  0101               	movlb	1	; () banked
 18568  0053D6  0E01               	movlw	high _wrkbuf
 18569  0053D8  6E21               	movwf	?_putsUSART+1,c
 18570  0053DA  0E7D               	movlw	low _wrkbuf
 18571  0053DC  6E20               	movwf	?_putsUSART,c
 18572  0053DE  ECB5  F031         	call	_putsUSART	;wreg free
 18573                           
 18574                           ;main.c: 3248: putsUSART((char *) "\r\n");
 18575  0053E2  0E73               	movlw	high (STR_239+51)
 18576  0053E4  6E21               	movwf	?_putsUSART+1,c
 18577  0053E6  0E1A               	movlw	low (STR_239+51)
 18578  0053E8  6E20               	movwf	?_putsUSART,c
 18579  0053EA  EFB5  F031         	goto	_putsUSART	;wreg free
 18580  0053EE                     __end_of_printNodeFirmwareVersion:
 18581                           	opt stack 0
 18582                           tblptru	equ	0xFF8
 18583                           tblptrh	equ	0xFF7
 18584                           tblptrl	equ	0xFF6
 18585                           tablat	equ	0xFF5
 18586                           prodh	equ	0xFF4
 18587                           prodl	equ	0xFF3
 18588                           intcon	equ	0xFF2
 18589                           indf0	equ	0xFEF
 18590                           postinc0	equ	0xFEE
 18591                           fsr0h	equ	0xFEA
 18592                           fsr0l	equ	0xFE9
 18593                           wreg	equ	0xFE8
 18594                           indf1	equ	0xFE7
 18595                           postinc1	equ	0xFE6
 18596                           postdec1	equ	0xFE5
 18597                           fsr1h	equ	0xFE2
 18598                           fsr1l	equ	0xFE1
 18599                           indf2	equ	0xFDF
 18600                           postinc2	equ	0xFDE
 18601                           postdec2	equ	0xFDD
 18602                           plusw2	equ	0xFDB
 18603                           fsr2h	equ	0xFDA
 18604                           fsr2l	equ	0xFD9
 18605                           status	equ	0xFD8
 18606                           
 18607 ;; *************** function _strcat *****************
 18608 ;; Defined at:
 18609 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 18610 ;; Parameters:    Size  Location     Type
 18611 ;;  to              2   30[COMRAM] PTR unsigned char 
 18612 ;;		 -> wrkbuf(80), 
 18613 ;;  from            2   32[COMRAM] PTR const unsigned char 
 18614 ;;		 -> STR_296(2), STR_295(2), printNodeFirmwareVersion@buf(3), STR_290(2), 
 18615 ;;		 -> STR_289(3), STR_288(2), printGUID@buf(3), 
 18616 ;; Auto vars:     Size  Location     Type
 18617 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 18618 ;;		 -> wrkbuf(80), 
 18619 ;; Return value:  Size  Location     Type
 18620 ;;                  2   30[COMRAM] PTR unsigned char 
 18621 ;; Registers used:
 18622 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18623 ;; Tracked objects:
 18624 ;;		On entry : E/1
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18628 ;;      Params:         4       0       0       0       0       0       0
 18629 ;;      Locals:         0       2       0       0       0       0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0
 18631 ;;      Totals:         4       2       0       0       0       0       0
 18632 ;;Total ram usage:        6 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    3
 18635 ;; This function calls:
 18636 ;;		Nothing
 18637 ;; This function is called by:
 18638 ;;		_printGUID
 18639 ;;		_printNodeFirmwareVersion
 18640 ;; This function uses a non-reentrant model
 18641 ;;
 18642                           
 18643                           	psect	text31
 18644  0062BA                     __ptext31:
 18645                           	opt stack 0
 18646  0062BA                     _strcat:
 18647                           	opt stack 25
 18648                           
 18649                           ;incstack = 0
 18650                           ;incstack = 0
 18651  0062BA  C01F  F060         	movff	strcat@to,strcat@cp
 18652  0062BE  C020  F061         	movff	strcat@to+1,strcat@cp+1
 18653  0062C2  D003               	goto	l18313
 18654  0062C4                     l18311:
 18655  0062C4  0100               	movlb	0	; () banked
 18656  0062C6  4B60               	infsnz	strcat@cp& (0+255),f,b
 18657  0062C8  2B61               	incf	(strcat@cp+1)& (0+255),f,b
 18658  0062CA                     l18313:
 18659  0062CA  C060  FFD9         	movff	strcat@cp,fsr2l
 18660  0062CE  C061  FFDA         	movff	strcat@cp+1,fsr2h
 18661  0062D2  50DF               	movf	indf2,w,c
 18662  0062D4  E006               	bz	l18317
 18663  0062D6  D7F6               	goto	l18311
 18664  0062D8                     l18315:
 18665  0062D8  0100               	movlb	0	; () banked
 18666  0062DA  4B60               	infsnz	strcat@cp& (0+255),f,b
 18667  0062DC  2B61               	incf	(strcat@cp+1)& (0+255),f,b
 18668  0062DE  4A21               	infsnz	strcat@from,f,c
 18669  0062E0  2A22               	incf	strcat@from+1,f,c
 18670  0062E2                     l18317:
 18671  0062E2  C021  FFF6         	movff	strcat@from,tblptrl
 18672  0062E6  C022  FFF7         	movff	strcat@from+1,tblptrh
 18673  0062EA  6AF8               	clrf	tblptru,c
 18674  0062EC  C060  FFD9         	movff	strcat@cp,fsr2l
 18675  0062F0  C061  FFDA         	movff	strcat@cp+1,fsr2h
 18676  0062F4  0E05               	movlw	(high __ramtop+-1)
 18677  0062F6  64F7               	cpfsgt	tblptrh,c
 18678  0062F8  D003               	bra	u23957
 18679  0062FA  0008               	tblrd		*
 18680  0062FC  50F5               	movf	tablat,w,c
 18681  0062FE  D005               	bra	u23950
 18682  006300                     u23957:
 18683  006300  CFF6 FFE9          	movff	tblptrl,fsr0l
 18684  006304  CFF7 FFEA          	movff	tblptrh,fsr0h
 18685  006308  50EF               	movf	indf0,w,c
 18686  00630A                     u23950:
 18687  00630A  6EDF               	movwf	indf2,c
 18688  00630C  50DF               	movf	indf2,w,c
 18689  00630E  B4D8               	btfsc	status,2,c
 18690  006310  0012               	return	
 18691  006312  D7E2               	goto	l18315
 18692  006314                     __end_of_strcat:
 18693                           	opt stack 0
 18694                           tblptru	equ	0xFF8
 18695                           tblptrh	equ	0xFF7
 18696                           tblptrl	equ	0xFF6
 18697                           tablat	equ	0xFF5
 18698                           prodh	equ	0xFF4
 18699                           prodl	equ	0xFF3
 18700                           intcon	equ	0xFF2
 18701                           indf0	equ	0xFEF
 18702                           postinc0	equ	0xFEE
 18703                           fsr0h	equ	0xFEA
 18704                           fsr0l	equ	0xFE9
 18705                           wreg	equ	0xFE8
 18706                           indf1	equ	0xFE7
 18707                           postinc1	equ	0xFE6
 18708                           postdec1	equ	0xFE5
 18709                           fsr1h	equ	0xFE2
 18710                           fsr1l	equ	0xFE1
 18711                           indf2	equ	0xFDF
 18712                           postinc2	equ	0xFDE
 18713                           postdec2	equ	0xFDD
 18714                           plusw2	equ	0xFDB
 18715                           fsr2h	equ	0xFDA
 18716                           fsr2l	equ	0xFD9
 18717                           status	equ	0xFD8
 18718                           
 18719 ;; *************** function _readRegister *****************
 18720 ;; Defined at:
 18721 ;;		line 2706 in file "main.c"
 18722 ;; Parameters:    Size  Location     Type
 18723 ;;  nodeid          1    wreg     unsigned char 
 18724 ;;  reg             1   83[BANK0 ] unsigned char 
 18725 ;;  timeout         2   84[BANK0 ] unsigned short 
 18726 ;;  value           1   86[BANK0 ] PTR unsigned char 
 18727 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 18728 ;; Auto vars:     Size  Location     Type
 18729 ;;  nodeid          1   91[BANK0 ] unsigned char 
 18730 ;; Return value:  Size  Location     Type
 18731 ;;                  1    wreg      enum E15660
 18732 ;; Registers used:
 18733 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18734 ;; Tracked objects:
 18735 ;;		On entry : F/0
 18736 ;;		On exit  : E/0
 18737 ;;		Unchanged: 0/0
 18738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18739 ;;      Params:         0       4       0       0       0       0       0
 18740 ;;      Locals:         0       1       0       0       0       0       0
 18741 ;;      Temps:          0       4       0       0       0       0       0
 18742 ;;      Totals:         0       9       0       0       0       0       0
 18743 ;;Total ram usage:        9 bytes
 18744 ;; Hardware stack levels used:    1
 18745 ;; Hardware stack levels required when called:    7
 18746 ;; This function calls:
 18747 ;;		_checkCANBusState
 18748 ;;		_sendVSCPFrame
 18749 ;;		_getVSCPFrame
 18750 ;; This function is called by:
 18751 ;;		_findNodes
 18752 ;;		_printGUID
 18753 ;;		_printMDF
 18754 ;;		_printNodeFirmwareVersion
 18755 ;; This function uses a non-reentrant model
 18756 ;;
 18757                           
 18758                           	psect	text32
 18759  0053EE                     __ptext32:
 18760                           	opt stack 0
 18761  0053EE                     _readRegister:
 18762                           	opt stack 21
 18763                           
 18764                           ;incstack = 0
 18765                           ;incstack = 0
 18766                           ;readRegister@nodeid stored from wreg
 18767  0053EE  CFE8 F0BB          	movff	wreg,readRegister@nodeid
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;main.c: 2707: vscpData[ 0 ] = nodeid;
 18771  0053F2  C0BB  F1E5         	movff	readRegister@nodeid,_vscpData
 18772                           
 18773                           ; BSR set to: 0
 18774                           ;main.c: 2708: vscpData[ 1 ] = reg;
 18775  0053F6  C0B3  F1E6         	movff	readRegister@reg,_vscpData+1
 18776                           
 18777                           ; BSR set to: 0
 18778                           ;main.c: 2710: if (sendVSCPFrame(0,
 18779                           ;main.c: 2711: 9,
 18780                           ;main.c: 2712: 0,
 18781                           ;main.c: 2713: 0,
 18782                           ;main.c: 2714: 2,
 18783                           ;main.c: 2715: vscpData)) {
 18784  0053FA  6B94               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 18785  0053FC  6B93               	clrf	?_sendVSCPFrame& (0+255),b
 18786  0053FE  0E09               	movlw	9
 18787  005400  6F95               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 18788  005402  6B96               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 18789  005404  6B97               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 18790  005406  0E02               	movlw	2
 18791  005408  6F98               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 18792  00540A  0E01               	movlw	high _vscpData
 18793  00540C  0100               	movlb	0	; () banked
 18794  00540E  6F9A               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 18795  005410  0EE5               	movlw	low _vscpData
 18796  005412  6F99               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 18797  005414  EC1A  F02B         	call	_sendVSCPFrame	;wreg free
 18798  005418  0900               	iorlw	0
 18799  00541A  E04B               	bz	l18305
 18800                           
 18801                           ;main.c: 2717: timekeeper = 0;
 18802  00541C  0101               	movlb	1	; () banked
 18803  00541E  6B18               	clrf	_timekeeper& (0+255),b	;volatile
 18804  005420  6B19               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 18805  005422  6B1A               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 18806  005424  6B1B               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 18807                           
 18808                           ;main.c: 2718: while (timekeeper < timeout) {
 18809  005426  D02E               	goto	l18303
 18810  005428                     l1216:
 18811                           
 18812                           ; BSR set to: 1
 18813  005428  0004               	clrwdt		;# 
 18814                           
 18815                           ;main.c: 2721: checkCANBusState();
 18816  00542A  EC1D  F034         	call	_checkCANBusState	;wreg free
 18817                           
 18818                           ;main.c: 2723: if (getVSCPFrame(&vscpClass,
 18819                           ;main.c: 2724: &vscpType,
 18820                           ;main.c: 2725: &vscpNodeId,
 18821                           ;main.c: 2726: &vscpPriority,
 18822                           ;main.c: 2727: &vscpSize,
 18823                           ;main.c: 2728: vscpData)) {
 18824  00542E  0E41               	movlw	low _vscpType
 18825  005430  0100               	movlb	0	; () banked
 18826  005432  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 18827  005434  0E3E               	movlw	low _vscpNodeId
 18828  005436  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 18829  005438  0E3F               	movlw	low _vscpPriority
 18830  00543A  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 18831  00543C  0E40               	movlw	low _vscpSize
 18832  00543E  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 18833  005440  0E01               	movlw	high _vscpData
 18834  005442  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 18835  005444  0EE5               	movlw	low _vscpData
 18836  005446  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 18837  005448  0E3A               	movlw	_vscpClass& (0+255)
 18838  00544A  EC92  F02E         	call	_getVSCPFrame
 18839  00544E  0900               	iorlw	0
 18840  005450  E019               	bz	l18303
 18841                           
 18842                           ; BSR set to: 0
 18843                           ;main.c: 2729: if ((nodeid == vscpNodeId) &&
 18844                           ;main.c: 2730: (0 == vscpClass) &&
 18845                           ;main.c: 2731: (10 == vscpType) &&
 18846                           ;main.c: 2732: (2 == vscpSize) &&
 18847                           ;main.c: 2733: (reg == vscpData[ 0 ])) {
 18848  005452  503E               	movf	_vscpNodeId,w,c
 18849  005454  63BB               	cpfseq	readRegister@nodeid& (0+255),b
 18850  005456  D016               	goto	l18303
 18851                           
 18852                           ; BSR set to: 0
 18853  005458  503B               	movf	_vscpClass+1,w,c
 18854  00545A  103A               	iorwf	_vscpClass,w,c
 18855  00545C  E113               	bnz	l18303
 18856                           
 18857                           ; BSR set to: 0
 18858  00545E  5041               	movf	_vscpType,w,c
 18859  005460  0A0A               	xorlw	10
 18860  005462  E110               	bnz	l18303
 18861                           
 18862                           ; BSR set to: 0
 18863  005464  5040               	movf	_vscpSize,w,c
 18864  005466  0A02               	xorlw	2
 18865  005468  E10D               	bnz	l18303
 18866                           
 18867                           ; BSR set to: 0
 18868  00546A  0101               	movlb	1	; () banked
 18869  00546C  51E5               	movf	_vscpData& (0+255),w,b
 18870  00546E  0100               	movlb	0	; () banked
 18871  005470  63B3               	cpfseq	readRegister@reg& (0+255),b
 18872  005472  D008               	goto	l18303
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;main.c: 2734: *value = vscpData[ 1 ];
 18876  005474  51B6               	movf	readRegister@value& (0+255),w,b
 18877  005476  6ED9               	movwf	fsr2l,c
 18878  005478  6ADA               	clrf	fsr2h,c
 18879  00547A  0101               	movlb	1	; () banked
 18880  00547C  C1E6  FFDF         	movff	_vscpData+1,indf2
 18881                           
 18882                           ; BSR set to: 1
 18883                           ;main.c: 2735: return 1;
 18884  005480  0E01               	movlw	1
 18885  005482  D018               	goto	l1219
 18886  005484                     l18303:
 18887  005484  0100               	movlb	0	; () banked
 18888  005486  51B4               	movf	readRegister@timeout& (0+255),w,b
 18889  005488  6FB7               	movwf	??_readRegister& (0+255),b
 18890  00548A  51B5               	movf	(readRegister@timeout+1)& (0+255),w,b
 18891  00548C  6FB8               	movwf	(??_readRegister+1)& (0+255),b
 18892  00548E  6BB9               	clrf	(??_readRegister+2)& (0+255),b
 18893  005490  6BBA               	clrf	(??_readRegister+3)& (0+255),b
 18894  005492  51B7               	movf	??_readRegister& (0+255),w,b
 18895  005494  0101               	movlb	1	; () banked
 18896  005496  5D18               	subwf	_timekeeper& (0+255),w,b	;volatile
 18897  005498  0100               	movlb	0	; () banked
 18898  00549A  51B8               	movf	(??_readRegister+1)& (0+255),w,b
 18899  00549C  0101               	movlb	1	; () banked
 18900  00549E  5919               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 18901  0054A0  0100               	movlb	0	; () banked
 18902  0054A2  51B9               	movf	(??_readRegister+2)& (0+255),w,b
 18903  0054A4  0101               	movlb	1	; () banked
 18904  0054A6  591A               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 18905  0054A8  0100               	movlb	0	; () banked
 18906  0054AA  51BA               	movf	(??_readRegister+3)& (0+255),w,b
 18907  0054AC  0101               	movlb	1	; () banked
 18908  0054AE  591B               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 18909  0054B0  E3BB               	bnc	l1216
 18910  0054B2                     l18305:
 18911                           
 18912                           ;main.c: 2736: }
 18913                           ;main.c: 2737: }
 18914                           ;main.c: 2738: }
 18915                           ;main.c: 2739: }
 18916                           ;main.c: 2741: return 0;
 18917  0054B2  0E00               	movlw	0
 18918  0054B4                     l1219:
 18919  0054B4  0012               	return	
 18920  0054B6                     __end_of_readRegister:
 18921                           	opt stack 0
 18922                           tblptru	equ	0xFF8
 18923                           tblptrh	equ	0xFF7
 18924                           tblptrl	equ	0xFF6
 18925                           tablat	equ	0xFF5
 18926                           prodh	equ	0xFF4
 18927                           prodl	equ	0xFF3
 18928                           intcon	equ	0xFF2
 18929                           indf0	equ	0xFEF
 18930                           postinc0	equ	0xFEE
 18931                           fsr0h	equ	0xFEA
 18932                           fsr0l	equ	0xFE9
 18933                           wreg	equ	0xFE8
 18934                           indf1	equ	0xFE7
 18935                           postinc1	equ	0xFE6
 18936                           postdec1	equ	0xFE5
 18937                           fsr1h	equ	0xFE2
 18938                           fsr1l	equ	0xFE1
 18939                           indf2	equ	0xFDF
 18940                           postinc2	equ	0xFDE
 18941                           postdec2	equ	0xFDD
 18942                           plusw2	equ	0xFDB
 18943                           fsr2h	equ	0xFDA
 18944                           fsr2l	equ	0xFD9
 18945                           status	equ	0xFD8
 18946                           
 18947 ;; *************** function _sendVSCPFrame *****************
 18948 ;; Defined at:
 18949 ;;		line 3452 in file "main.c"
 18950 ;; Parameters:    Size  Location     Type
 18951 ;;  vscpclass       2   51[BANK0 ] unsigned short 
 18952 ;;  vscptype        1   53[BANK0 ] unsigned char 
 18953 ;;  nodeid          1   54[BANK0 ] unsigned char 
 18954 ;;  priority        1   55[BANK0 ] unsigned char 
 18955 ;;  size            1   56[BANK0 ] unsigned char 
 18956 ;;  pData           2   57[BANK0 ] PTR unsigned char 
 18957 ;;		 -> vscpData(8), 
 18958 ;; Auto vars:     Size  Location     Type
 18959 ;;  id              4   79[BANK0 ] unsigned long 
 18960 ;; Return value:  Size  Location     Type
 18961 ;;                  1    wreg      unsigned char 
 18962 ;; Registers used:
 18963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18964 ;; Tracked objects:
 18965 ;;		On entry : F/0
 18966 ;;		On exit  : E/0
 18967 ;;		Unchanged: 0/0
 18968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18969 ;;      Params:         0       8       0       0       0       0       0
 18970 ;;      Locals:         0       4       0       0       0       0       0
 18971 ;;      Temps:          0      20       0       0       0       0       0
 18972 ;;      Totals:         0      32       0       0       0       0       0
 18973 ;;Total ram usage:       32 bytes
 18974 ;; Hardware stack levels used:    1
 18975 ;; Hardware stack levels required when called:    6
 18976 ;; This function calls:
 18977 ;;		_sendCANFrame
 18978 ;; This function is called by:
 18979 ;;		_doModeVerbose
 18980 ;;		_readRegister
 18981 ;;		_readRegisterExtended
 18982 ;;		_writeRegisterExtended
 18983 ;; This function uses a non-reentrant model
 18984 ;;
 18985                           
 18986                           	psect	text33
 18987  005634                     __ptext33:
 18988                           	opt stack 0
 18989  005634                     _sendVSCPFrame:
 18990                           	opt stack 21
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;main.c: 3453: uint32_t id = ((uint32_t) priority << 26) |
 18994                           ;main.c: 3454: ((uint32_t) vscpclass << 16) |
 18995                           ;main.c: 3455: ((uint32_t) vscptype << 8) |
 18996                           ;main.c: 3456: nodeid;
 18997                           
 18998                           ;incstack = 0
 18999                           ;incstack = 0
 19000  005634  C095  F09B         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 19001  005638  6B9C               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 19002  00563A  6B9D               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 19003  00563C  6B9E               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 19004  00563E  C09D  F09E         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 19005  005642  C09C  F09D         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 19006  005646  C09B  F09C         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 19007  00564A  6B9B               	clrf	??_sendVSCPFrame& (0+255),b
 19008  00564C  5193               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 19009  00564E  6F9F               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 19010  005650  5194               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 19011  005652  6FA0               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 19012  005654  6BA1               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 19013  005656  6BA2               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 19014  005658  C0A0  F0A2         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 19015  00565C  C09F  F0A1         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 19016  005660  6BA0               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 19017  005662  6B9F               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 19018  005664  C097  F0A3         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 19019  005668  6BA4               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 19020  00566A  6BA5               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 19021  00566C  6BA6               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 19022  00566E  0E1A               	movlw	26
 19023  005670                     u21645:
 19024  005670  90D8               	bcf	status,0,c
 19025  005672  37A3               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 19026  005674  37A4               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 19027  005676  37A5               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 19028  005678  37A6               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 19029  00567A  2EE8               	decfsz	wreg,f,c
 19030  00567C  D7F9               	goto	u21645
 19031  00567E  519F               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 19032  005680  11A3               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 19033  005682  6FA7               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 19034  005684  51A0               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 19035  005686  11A4               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 19036  005688  6FA8               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 19037  00568A  51A1               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 19038  00568C  11A5               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 19039  00568E  6FA9               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 19040  005690  51A2               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 19041  005692  11A6               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 19042  005694  6FAA               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 19043  005696  519B               	movf	??_sendVSCPFrame& (0+255),w,b
 19044  005698  11A7               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 19045  00569A  6FAB               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 19046  00569C  519C               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 19047  00569E  11A8               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 19048  0056A0  6FAC               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 19049  0056A2  519D               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 19050  0056A4  11A9               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 19051  0056A6  6FAD               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 19052  0056A8  519E               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 19053  0056AA  11AA               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 19054  0056AC  6FAE               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 19055  0056AE  5196               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 19056  0056B0  11AB               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 19057  0056B2  6FAF               	movwf	sendVSCPFrame@id& (0+255),b
 19058  0056B4  51AC               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 19059  0056B6  6FB0               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 19060  0056B8  51AD               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 19061  0056BA  6FB1               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 19062  0056BC  51AE               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 19063  0056BE  6FB2               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;main.c: 3458: if (!sendCANFrame(id, size, pData)) {
 19067  0056C0  C0AF  F08C         	movff	sendVSCPFrame@id,?_sendCANFrame
 19068  0056C4  C0B0  F08D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 19069  0056C8  C0B1  F08E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 19070  0056CC  C0B2  F08F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 19071  0056D0  C098  F090         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 19072  0056D4  C099  F091         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 19073  0056D8  C09A  F092         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 19074  0056DC  EC2B  F033         	call	_sendCANFrame	;wreg free
 19075  0056E0  0900               	iorlw	0
 19076                           
 19077                           ;main.c: 3460: return 0;
 19078  0056E2  0E00               	movlw	0
 19079  0056E4  A4D8               	btfss	status,2,c
 19080                           
 19081                           ;main.c: 3461: }
 19082                           ;main.c: 3463: return 1;
 19083  0056E6  0E01               	movlw	1
 19084  0056E8  0012               	return	
 19085  0056EA                     __end_of_sendVSCPFrame:
 19086                           	opt stack 0
 19087                           tblptru	equ	0xFF8
 19088                           tblptrh	equ	0xFF7
 19089                           tblptrl	equ	0xFF6
 19090                           tablat	equ	0xFF5
 19091                           prodh	equ	0xFF4
 19092                           prodl	equ	0xFF3
 19093                           intcon	equ	0xFF2
 19094                           indf0	equ	0xFEF
 19095                           postinc0	equ	0xFEE
 19096                           fsr0h	equ	0xFEA
 19097                           fsr0l	equ	0xFE9
 19098                           wreg	equ	0xFE8
 19099                           indf1	equ	0xFE7
 19100                           postinc1	equ	0xFE6
 19101                           postdec1	equ	0xFE5
 19102                           fsr1h	equ	0xFE2
 19103                           fsr1l	equ	0xFE1
 19104                           indf2	equ	0xFDF
 19105                           postinc2	equ	0xFDE
 19106                           postdec2	equ	0xFDD
 19107                           plusw2	equ	0xFDB
 19108                           fsr2h	equ	0xFDA
 19109                           fsr2l	equ	0xFD9
 19110                           status	equ	0xFD8
 19111                           
 19112 ;; *************** function _sendCANFrame *****************
 19113 ;; Defined at:
 19114 ;;		line 3498 in file "main.c"
 19115 ;; Parameters:    Size  Location     Type
 19116 ;;  id              4   44[BANK0 ] unsigned long 
 19117 ;;  dlc             1   48[BANK0 ] unsigned char 
 19118 ;;  pdata           2   49[BANK0 ] PTR unsigned char 
 19119 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;		None
 19122 ;; Return value:  Size  Location     Type
 19123 ;;                  1    wreg      unsigned char 
 19124 ;; Registers used:
 19125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19126 ;; Tracked objects:
 19127 ;;		On entry : F/0
 19128 ;;		On exit  : E/0
 19129 ;;		Unchanged: 0/0
 19130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19131 ;;      Params:         0       7       0       0       0       0       0
 19132 ;;      Locals:         0       0       0       0       0       0       0
 19133 ;;      Temps:          0       0       0       0       0       0       0
 19134 ;;      Totals:         0       7       0       0       0       0       0
 19135 ;;Total ram usage:        7 bytes
 19136 ;; Hardware stack levels used:    1
 19137 ;; Hardware stack levels required when called:    5
 19138 ;; This function calls:
 19139 ;;		_ECANSendMessage
 19140 ;; This function is called by:
 19141 ;;		_doModeSLCAN
 19142 ;;		_receiveVSCPModeCanalMsg
 19143 ;;		_sendVSCPFrame
 19144 ;; This function uses a non-reentrant model
 19145 ;;
 19146                           
 19147                           	psect	text34
 19148  006656                     __ptext34:
 19149                           	opt stack 0
 19150  006656                     _sendCANFrame:
 19151                           	opt stack 24
 19152                           
 19153                           ; BSR set to: 0
 19154                           ;main.c: 3499: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 19155                           
 19156                           ;incstack = 0
 19157                           ;incstack = 0
 19158  006656  C08C  F067         	movff	sendCANFrame@id,?_ECANSendMessage
 19159  00665A  C08D  F068         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 19160  00665E  C08E  F069         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 19161  006662  C08F  F06A         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 19162  006666  C091  F06B         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 19163  00666A  C092  F06C         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 19164  00666E  C090  F06D         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 19165  006672  0E20               	movlw	32
 19166  006674  6F6E               	movwf	(?_ECANSendMessage+7)& (0+255),b
 19167  006676  EC75  F022         	call	_ECANSendMessage	;wreg free
 19168  00667A  0900               	iorlw	0
 19169  00667C  E107               	bnz	l18161
 19170                           
 19171                           ; BSR set to: 0
 19172                           ;main.c: 3501: can_transmitOverruns++;
 19173  00667E  0101               	movlb	1	; () banked
 19174  006680  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 19175  006682  0E00               	movlw	0
 19176  006684  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 19177  006686  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 19178  006688  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 19179                           
 19180                           ; BSR set to: 1
 19181                           ;main.c: 3502: return 0;
 19182  00668A  D001               	goto	l1419
 19183  00668C                     l18161:
 19184                           
 19185                           ; BSR set to: 0
 19186                           ;main.c: 3503: }
 19187                           ;main.c: 3505: return 1;
 19188  00668C  0E01               	movlw	1
 19189  00668E                     l1419:
 19190  00668E  0012               	return	
 19191  006690                     __end_of_sendCANFrame:
 19192                           	opt stack 0
 19193                           tblptru	equ	0xFF8
 19194                           tblptrh	equ	0xFF7
 19195                           tblptrl	equ	0xFF6
 19196                           tablat	equ	0xFF5
 19197                           prodh	equ	0xFF4
 19198                           prodl	equ	0xFF3
 19199                           intcon	equ	0xFF2
 19200                           indf0	equ	0xFEF
 19201                           postinc0	equ	0xFEE
 19202                           fsr0h	equ	0xFEA
 19203                           fsr0l	equ	0xFE9
 19204                           wreg	equ	0xFE8
 19205                           indf1	equ	0xFE7
 19206                           postinc1	equ	0xFE6
 19207                           postdec1	equ	0xFE5
 19208                           fsr1h	equ	0xFE2
 19209                           fsr1l	equ	0xFE1
 19210                           indf2	equ	0xFDF
 19211                           postinc2	equ	0xFDE
 19212                           postdec2	equ	0xFDD
 19213                           plusw2	equ	0xFDB
 19214                           fsr2h	equ	0xFDA
 19215                           fsr2l	equ	0xFD9
 19216                           status	equ	0xFD8
 19217                           
 19218 ;; *************** function _ECANSendMessage *****************
 19219 ;; Defined at:
 19220 ;;		line 617 in file "ECAN.c"
 19221 ;; Parameters:    Size  Location     Type
 19222 ;;  id              4    7[BANK0 ] unsigned long 
 19223 ;;  data            2   11[BANK0 ] PTR unsigned char 
 19224 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 19225 ;;  dataLen         1   13[BANK0 ] unsigned char 
 19226 ;;  msgFlags        1   14[BANK0 ] enum E16306
 19227 ;; Auto vars:     Size  Location     Type
 19228 ;;  pb             18   16[BANK0 ] PTR unsigned char [9]
 19229 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19230 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19231 ;;		 -> B0CON(1), 
 19232 ;;  ptr             2   42[BANK0 ] PTR unsigned char 
 19233 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19234 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19235 ;;		 -> B0CON(1), 
 19236 ;;  tempPtr         2   38[BANK0 ] PTR unsigned char 
 19237 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19238 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19239 ;;		 -> B0CON(1), 
 19240 ;;  i               1   41[BANK0 ] unsigned char 
 19241 ;;  temp            1   40[BANK0 ] unsigned char 
 19242 ;;  tempBSEL0       1   37[BANK0 ] struct .
 19243 ;;  j               1   36[BANK0 ] unsigned char 
 19244 ;;  buffers         1   35[BANK0 ] unsigned char 
 19245 ;;  mode            1   34[BANK0 ] unsigned char 
 19246 ;; Return value:  Size  Location     Type
 19247 ;;                  1    wreg      enum E15660
 19248 ;; Registers used:
 19249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19250 ;; Tracked objects:
 19251 ;;		On entry : F/0
 19252 ;;		On exit  : F/0
 19253 ;;		Unchanged: 0/0
 19254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19255 ;;      Params:         0       8       0       0       0       0       0
 19256 ;;      Locals:         0      28       0       0       0       0       0
 19257 ;;      Temps:          0       1       0       0       0       0       0
 19258 ;;      Totals:         0      37       0       0       0       0       0
 19259 ;;Total ram usage:       37 bytes
 19260 ;; Hardware stack levels used:    1
 19261 ;; Hardware stack levels required when called:    4
 19262 ;; This function calls:
 19263 ;;		__CANIDToRegs
 19264 ;; This function is called by:
 19265 ;;		_sendCANFrame
 19266 ;; This function uses a non-reentrant model
 19267 ;;
 19268                           
 19269                           	psect	text35
 19270  0044EA                     __ptext35:
 19271                           	opt stack 0
 19272  0044EA                     _ECANSendMessage:
 19273                           	opt stack 24
 19274                           
 19275                           ; BSR set to: 0
 19276                           ;ECAN.c: 619: BYTE mode;
 19277                           ;ECAN.c: 620: BYTE buffers;
 19278                           ;ECAN.c: 628: BYTE i,j;
 19279                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 19280                           ;ECAN.c: 630: BYTE* pb[9];
 19281                           ;ECAN.c: 631: BYTE temp;
 19282                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 19283                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 19284                           
 19285                           ;incstack = 0
 19286                           ;incstack = 0
 19287  0044EA  0E0F               	movlw	15	;volatile
 19288  0044EC  0100               	movlb	0	; () banked
 19289  0044EE  6F71               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 19290  0044F0  0E40               	movlw	64	;volatile
 19291  0044F2  6F70               	movwf	ECANSendMessage@pb& (0+255),b
 19292                           
 19293                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 19294  0044F4  0E0F               	movlw	15	;volatile
 19295  0044F6  6F73               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 19296  0044F8  0E30               	movlw	48	;volatile
 19297  0044FA  6F72               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 19298                           
 19299                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 19300  0044FC  0E0F               	movlw	15	;volatile
 19301  0044FE  6F75               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 19302  004500  0E20               	movlw	32	;volatile
 19303  004502  6F74               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 19304                           
 19305                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 19306  004504  0E0E               	movlw	14	;volatile
 19307  004506  6F77               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 19308  004508  0E20               	movlw	32	;volatile
 19309  00450A  6F76               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 19310                           
 19311                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 19312  00450C  0E0E               	movlw	14	;volatile
 19313  00450E  6F79               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 19314  004510  0E30               	movlw	48	;volatile
 19315  004512  6F78               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 19316                           
 19317                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 19318  004514  0E0E               	movlw	14	;volatile
 19319  004516  6F7B               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 19320  004518  0E40               	movlw	64	;volatile
 19321  00451A  6F7A               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 19322                           
 19323                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 19324  00451C  0E0E               	movlw	14	;volatile
 19325  00451E  6F7D               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 19326  004520  0E50               	movlw	80	;volatile
 19327  004522  6F7C               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 19328                           
 19329                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 19330  004524  0E0E               	movlw	14	;volatile
 19331  004526  6F7F               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 19332  004528  0E60               	movlw	96	;volatile
 19333  00452A  6F7E               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 19334                           
 19335                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 19336  00452C  0E0E               	movlw	14	;volatile
 19337  00452E  6F81               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 19338  004530  0E70               	movlw	112	;volatile
 19339  004532  6F80               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 19343  004534  5077               	movf	3959,w,c	;volatile
 19344  004536  0BC0               	andlw	192
 19345  004538  6F82               	movwf	ECANSendMessage@mode& (0+255),b
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;ECAN.c: 660: if ( mode == 0x00 )
 19349  00453A  6782               	tstfsz	ECANSendMessage@mode& (0+255),b
 19350  00453C  D002               	goto	l18327
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;ECAN.c: 661: buffers = 2;
 19354  00453E  0E02               	movlw	2
 19355  004540  D001               	goto	L20
 19356  004542                     l18327:
 19357                           
 19358                           ; BSR set to: 0
 19359                           ;ECAN.c: 662: else
 19360                           ;ECAN.c: 663: buffers = 8;
 19361  004542  0E08               	movlw	8
 19362  004544                     L20:
 19363  004544  6F83               	movwf	ECANSendMessage@buffers& (0+255),b
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 19367  004546  010D               	movlb	13	; () banked
 19368  004548  90D8               	bcf	status,0,c
 19369  00454A  31F8               	rrcf	248,w,b	;volatile
 19370  00454C  0100               	movlb	0	; () banked
 19371  00454E  6F85               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 19375  004550  6B89               	clrf	ECANSendMessage@i& (0+255),b
 19376  004552  D07D               	goto	l18387
 19377  004554                     l18333:
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;ECAN.c: 688: {
 19381                           ;ECAN.c: 693: ptr = pb[i];
 19382  004554  5189               	movf	ECANSendMessage@i& (0+255),w,b
 19383  004556  0D02               	mullw	2
 19384  004558  50F3               	movf	prodl,w,c
 19385  00455A  0F70               	addlw	low ECANSendMessage@pb
 19386  00455C  6ED9               	movwf	fsr2l,c
 19387  00455E  6ADA               	clrf	fsr2h,c
 19388  004560  CFDE F08A          	movff	postinc2,ECANSendMessage@ptr
 19389  004564  CFDD F08B          	movff	postdec2,ECANSendMessage@ptr+1
 19390                           
 19391                           ; BSR set to: 0
 19392                           ;ECAN.c: 694: tempPtr = ptr;
 19393  004568  C08A  F086         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 19394  00456C  C08B  F087         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 19395                           
 19396                           ; BSR set to: 0
 19397                           ;ECAN.c: 702: if ( i > 2 )
 19398  004570  0E02               	movlw	2
 19399  004572  6589               	cpfsgt	ECANSendMessage@i& (0+255),b
 19400  004574  D004               	goto	l18345
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;ECAN.c: 703: {
 19404                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 19405  004576  90D8               	bcf	status,0,c
 19406  004578  3385               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 19410  00457A  A185               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 19411  00457C  D067               	goto	l18385
 19412  00457E                     l18345:
 19413                           
 19414                           ; BSR set to: 0
 19415                           ;ECAN.c: 714: }
 19416                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 19417  00457E  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19418  004582  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19419  004586  50DF               	movf	indf2,w,c
 19420  004588  6F6F               	movwf	??_ECANSendMessage& (0+255),b
 19421  00458A  B76F               	btfsc	??_ECANSendMessage& (0+255),3,b
 19422  00458C  D05F               	goto	l18385
 19423                           
 19424                           ; BSR set to: 0
 19425                           ;ECAN.c: 721: {
 19426                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 19427  00458E  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19428  004592  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19429  004596  0EFC               	movlw	252
 19430  004598  16DF               	andwf	indf2,f,c
 19431                           
 19432                           ; BSR set to: 0
 19433                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 19434  00459A  C06E  F06F         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 19435  00459E  0E03               	movlw	3
 19436  0045A0  176F               	andwf	??_ECANSendMessage& (0+255),f,b
 19437  0045A2  C08A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19438  0045A6  C08B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19439  0045AA  516F               	movf	??_ECANSendMessage& (0+255),w,b
 19440  0045AC  12DF               	iorwf	indf2,f,c
 19441                           
 19442                           ; BSR set to: 0
 19443                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 19444  0045AE  AD6E               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 19445  0045B0  D004               	goto	l1587
 19446                           
 19447                           ; BSR set to: 0
 19448                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 19449  0045B2  516D               	movf	ECANSendMessage@dataLen& (0+255),w,b
 19450  0045B4  0940               	iorlw	64
 19451  0045B6  6F88               	movwf	ECANSendMessage@temp& (0+255),b
 19452  0045B8  D002               	goto	l18355
 19453  0045BA                     l1587:
 19454                           
 19455                           ; BSR set to: 0
 19456                           ;ECAN.c: 729: else
 19457                           ;ECAN.c: 730: temp = dataLen;
 19458  0045BA  C06D  F088         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 19459  0045BE                     l18355:
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;ECAN.c: 732: *(ptr+5) = temp;
 19463  0045BE  EE20 F005          	lfsr	2,5
 19464  0045C2  518A               	movf	ECANSendMessage@ptr& (0+255),w,b
 19465  0045C4  26D9               	addwf	fsr2l,f,c
 19466  0045C6  518B               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 19467  0045C8  22DA               	addwfc	fsr2h,f,c
 19468  0045CA  C088  FFDF         	movff	ECANSendMessage@temp,indf2
 19469                           
 19470                           ; BSR set to: 0
 19471                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 19472  0045CE  AB6E               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 19473  0045D0  D003               	goto	l1589
 19474                           
 19475                           ; BSR set to: 0
 19476                           ;ECAN.c: 736: temp = 1;
 19477  0045D2  0E01               	movlw	1
 19478  0045D4  6F88               	movwf	ECANSendMessage@temp& (0+255),b
 19479  0045D6  D001               	goto	l18361
 19480  0045D8                     l1589:
 19481                           
 19482                           ; BSR set to: 0
 19483                           ;ECAN.c: 738: else
 19484                           ;ECAN.c: 739: temp = 0;
 19485  0045D8  6B88               	clrf	ECANSendMessage@temp& (0+255),b
 19486  0045DA                     l18361:
 19487                           
 19488                           ; BSR set to: 0
 19489                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 19490  0045DA  298A               	incf	ECANSendMessage@ptr& (0+255),w,b
 19491  0045DC  6F60               	movwf	?__CANIDToRegs& (0+255),b
 19492  0045DE  0E00               	movlw	0
 19493  0045E0  218B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 19494  0045E2  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 19495  0045E4  C067  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 19496  0045E8  C068  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 19497  0045EC  C069  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 19498  0045F0  C06A  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 19499  0045F4  C088  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 19500  0045F8  ECE9  F024         	call	__CANIDToRegs	;wreg free
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;ECAN.c: 745: ptr += 6;
 19504  0045FC  0E06               	movlw	6
 19505  0045FE  278A               	addwf	ECANSendMessage@ptr& (0+255),f,b
 19506  004600  0E00               	movlw	0
 19507  004602  238B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 19508                           
 19509                           ; BSR set to: 0
 19510                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 19511  004604  6B84               	clrf	ECANSendMessage@j& (0+255),b
 19512  004606  D00F               	goto	l18375
 19513  004608                     l18367:
 19514                           
 19515                           ; BSR set to: 0
 19516                           ;ECAN.c: 748: *ptr++ = *data++;
 19517  004608  C06B  FFD9         	movff	ECANSendMessage@data,fsr2l
 19518  00460C  C06C  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 19519  004610  C08A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 19520  004614  C08B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 19521  004618  CFDF FFE7          	movff	indf2,indf1
 19522                           
 19523                           ; BSR set to: 0
 19524  00461C  4B6B               	infsnz	ECANSendMessage@data& (0+255),f,b
 19525  00461E  2B6C               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 19526                           
 19527                           ; BSR set to: 0
 19528  004620  4B8A               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 19529  004622  2B8B               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 19530                           
 19531                           ; BSR set to: 0
 19532  004624  2B84               	incf	ECANSendMessage@j& (0+255),f,b
 19533  004626                     l18375:
 19534                           
 19535                           ; BSR set to: 0
 19536  004626  516D               	movf	ECANSendMessage@dataLen& (0+255),w,b
 19537  004628  5D84               	subwf	ECANSendMessage@j& (0+255),w,b
 19538  00462A  E3EE               	bnc	l18367
 19539                           
 19540                           ; BSR set to: 0
 19541                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 19542  00462C  C086  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19543  004630  C087  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19544  004634  50DF               	movf	indf2,w,c
 19545  004636  6F6F               	movwf	??_ECANSendMessage& (0+255),b
 19546  004638  B56F               	btfsc	??_ECANSendMessage& (0+255),2,b
 19547  00463A  D006               	goto	l18381
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;ECAN.c: 753: *tempPtr |= 0x08;
 19551  00463C  C086  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19552  004640  C087  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19553  004644  0E00               	movlw	0
 19554  004646  86DB               	bsf	plusw2,3,c
 19555  004648                     l18381:
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;ECAN.c: 755: return TRUE;
 19559  004648  0E01               	movlw	1
 19560  00464A  D005               	goto	l1595
 19561  00464C                     l18385:
 19562                           
 19563                           ; BSR set to: 0
 19564  00464C  2B89               	incf	ECANSendMessage@i& (0+255),f,b
 19565  00464E                     l18387:
 19566                           
 19567                           ; BSR set to: 0
 19568  00464E  5183               	movf	ECANSendMessage@buffers& (0+255),w,b
 19569  004650  5D89               	subwf	ECANSendMessage@i& (0+255),w,b
 19570  004652  E380               	bnc	l18333
 19571                           
 19572                           ; BSR set to: 0
 19573                           ;ECAN.c: 756: }
 19574                           ;ECAN.c: 757: }
 19575                           ;ECAN.c: 760: return FALSE;
 19576  004654  0E00               	movlw	0
 19577  004656                     l1595:
 19578                           
 19579                           ; BSR set to: 0
 19580  004656  0012               	return	
 19581  004658                     __end_of_ECANSendMessage:
 19582                           	opt stack 0
 19583                           tblptru	equ	0xFF8
 19584                           tblptrh	equ	0xFF7
 19585                           tblptrl	equ	0xFF6
 19586                           tablat	equ	0xFF5
 19587                           prodh	equ	0xFF4
 19588                           prodl	equ	0xFF3
 19589                           intcon	equ	0xFF2
 19590                           indf0	equ	0xFEF
 19591                           postinc0	equ	0xFEE
 19592                           fsr0h	equ	0xFEA
 19593                           fsr0l	equ	0xFE9
 19594                           wreg	equ	0xFE8
 19595                           indf1	equ	0xFE7
 19596                           postinc1	equ	0xFE6
 19597                           postdec1	equ	0xFE5
 19598                           fsr1h	equ	0xFE2
 19599                           fsr1l	equ	0xFE1
 19600                           indf2	equ	0xFDF
 19601                           postinc2	equ	0xFDE
 19602                           postdec2	equ	0xFDD
 19603                           plusw2	equ	0xFDB
 19604                           fsr2h	equ	0xFDA
 19605                           fsr2l	equ	0xFD9
 19606                           status	equ	0xFD8
 19607                           
 19608 ;; *************** function _checkCANBusState *****************
 19609 ;; Defined at:
 19610 ;;		line 603 in file "main.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;		None
 19613 ;; Auto vars:     Size  Location     Type
 19614 ;;		None
 19615 ;; Return value:  Size  Location     Type
 19616 ;;		None               void
 19617 ;; Registers used:
 19618 ;;		wreg, status,2
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/1
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19624 ;;      Params:         0       0       0       0       0       0       0
 19625 ;;      Locals:         0       0       0       0       0       0       0
 19626 ;;      Temps:          0       0       0       0       0       0       0
 19627 ;;      Totals:         0       0       0       0       0       0       0
 19628 ;;Total ram usage:        0 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:    3
 19631 ;; This function calls:
 19632 ;;		Nothing
 19633 ;; This function is called by:
 19634 ;;		_readRegister
 19635 ;;		_readRegisterExtended
 19636 ;;		_writeRegisterExtended
 19637 ;; This function uses a non-reentrant model
 19638 ;;
 19639                           
 19640                           	psect	text36
 19641  00683A                     __ptext36:
 19642                           	opt stack 0
 19643  00683A                     _checkCANBusState:
 19644                           	opt stack 24
 19645                           
 19646                           ;main.c: 605: if ( COMSTATbits.TXBO ) {
 19647                           
 19648                           ; BSR set to: 0
 19649                           ;incstack = 0
 19650                           ;incstack = 0
 19651  00683A  AA74               	btfss	3956,5,c	;volatile
 19652  00683C  D002               	goto	l505
 19653                           
 19654                           ;main.c: 607: ledFunctionality = 6;
 19655  00683E  0E06               	movlw	6
 19656  006840  D009               	goto	L21
 19657  006842                     l505:
 19658                           
 19659                           ;main.c: 609: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 19660  006842  B874               	btfsc	3956,4,c	;volatile
 19661  006844  D002               	goto	l13035
 19662  006846  A674               	btfss	3956,3,c	;volatile
 19663  006848  D002               	goto	l507
 19664  00684A                     l13035:
 19665                           
 19666                           ;main.c: 611: ledFunctionality = 5;
 19667  00684A  0E05               	movlw	5
 19668  00684C  D003               	goto	L21
 19669  00684E                     l507:
 19670                           
 19671                           ;main.c: 615: ledFunctionality = 4;
 19672  00684E  0E04               	movlw	4
 19673                           
 19674                           ;main.c: 613: else if ( COMSTATbits.EWARN ) {
 19675  006850  A074               	btfss	3956,0,c	;volatile
 19676                           
 19677                           ;main.c: 617: else {
 19678                           ;main.c: 619: ledFunctionality = 1;
 19679                           
 19680                           ;main.c: 616: }
 19681  006852  0E01               	movlw	1
 19682  006854                     L21:
 19683  006854  6E31               	movwf	_ledFunctionality,c	;volatile
 19684  006856  0012               	return	
 19685  006858                     __end_of_checkCANBusState:
 19686                           	opt stack 0
 19687                           tblptru	equ	0xFF8
 19688                           tblptrh	equ	0xFF7
 19689                           tblptrl	equ	0xFF6
 19690                           tablat	equ	0xFF5
 19691                           prodh	equ	0xFF4
 19692                           prodl	equ	0xFF3
 19693                           intcon	equ	0xFF2
 19694                           indf0	equ	0xFEF
 19695                           postinc0	equ	0xFEE
 19696                           fsr0h	equ	0xFEA
 19697                           fsr0l	equ	0xFE9
 19698                           wreg	equ	0xFE8
 19699                           indf1	equ	0xFE7
 19700                           postinc1	equ	0xFE6
 19701                           postdec1	equ	0xFE5
 19702                           fsr1h	equ	0xFE2
 19703                           fsr1l	equ	0xFE1
 19704                           indf2	equ	0xFDF
 19705                           postinc2	equ	0xFDE
 19706                           postdec2	equ	0xFDD
 19707                           plusw2	equ	0xFDB
 19708                           fsr2h	equ	0xFDA
 19709                           fsr2l	equ	0xFD9
 19710                           status	equ	0xFD8
 19711                           
 19712 ;; *************** function _memset *****************
 19713 ;; Defined at:
 19714 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 19715 ;; Parameters:    Size  Location     Type
 19716 ;;  p1              2    0[BANK0 ] PTR void 
 19717 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19718 ;;  c               2    2[BANK0 ] int 
 19719 ;;  n               2    4[BANK0 ] unsigned int 
 19720 ;; Auto vars:     Size  Location     Type
 19721 ;;  p               2   30[COMRAM] PTR unsigned char 
 19722 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19723 ;; Return value:  Size  Location     Type
 19724 ;;                  2    0[BANK0 ] PTR void 
 19725 ;; Registers used:
 19726 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19727 ;; Tracked objects:
 19728 ;;		On entry : F/0
 19729 ;;		On exit  : F/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19732 ;;      Params:         0       6       0       0       0       0       0
 19733 ;;      Locals:         2       0       0       0       0       0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0
 19735 ;;      Totals:         2       6       0       0       0       0       0
 19736 ;;Total ram usage:        8 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:    3
 19739 ;; This function calls:
 19740 ;;		Nothing
 19741 ;; This function is called by:
 19742 ;;		_doModeVerbose
 19743 ;;		_doModeSLCAN
 19744 ;;		_printGUID
 19745 ;;		_printMDF
 19746 ;;		_printNodeFirmwareVersion
 19747 ;; This function uses a non-reentrant model
 19748 ;;
 19749                           
 19750                           	psect	text37
 19751  0067C4                     __ptext37:
 19752                           	opt stack 0
 19753  0067C4                     _memset:
 19754                           	opt stack 26
 19755                           
 19756                           ; BSR set to: 0
 19757                           
 19758                           ;incstack = 0
 19759                           ;incstack = 0
 19760  0067C4  C060  F01F         	movff	memset@p1,memset@p
 19761  0067C8  C061  F020         	movff	memset@p1+1,memset@p+1
 19762  0067CC  D008               	goto	l16931
 19763  0067CE                     l16927:
 19764                           
 19765                           ; BSR set to: 0
 19766  0067CE  C01F  FFD9         	movff	memset@p,fsr2l
 19767  0067D2  C020  FFDA         	movff	memset@p+1,fsr2h
 19768  0067D6  C062  FFDF         	movff	memset@c,indf2
 19769                           
 19770                           ; BSR set to: 0
 19771  0067DA  4A1F               	infsnz	memset@p,f,c
 19772  0067DC  2A20               	incf	memset@p+1,f,c
 19773  0067DE                     l16931:
 19774                           
 19775                           ; BSR set to: 0
 19776  0067DE  0764               	decf	memset@n& (0+255),f,b
 19777  0067E0  A0D8               	btfss	status,0,c
 19778  0067E2  0765               	decf	(memset@n+1)& (0+255),f,b
 19779  0067E4  0100               	movlb	0	; () banked
 19780  0067E6  2964               	incf	memset@n& (0+255),w,b
 19781  0067E8  B4D8               	btfsc	status,2,c
 19782  0067EA  2965               	incf	(memset@n+1)& (0+255),w,b
 19783  0067EC  B4D8               	btfsc	status,2,c
 19784                           
 19785                           ; BSR set to: 0
 19786  0067EE  0012               	return	
 19787  0067F0  D7EE               	goto	l16927
 19788  0067F2                     __end_of_memset:
 19789                           	opt stack 0
 19790                           tblptru	equ	0xFF8
 19791                           tblptrh	equ	0xFF7
 19792                           tblptrl	equ	0xFF6
 19793                           tablat	equ	0xFF5
 19794                           prodh	equ	0xFF4
 19795                           prodl	equ	0xFF3
 19796                           intcon	equ	0xFF2
 19797                           indf0	equ	0xFEF
 19798                           postinc0	equ	0xFEE
 19799                           fsr0h	equ	0xFEA
 19800                           fsr0l	equ	0xFE9
 19801                           wreg	equ	0xFE8
 19802                           indf1	equ	0xFE7
 19803                           postinc1	equ	0xFE6
 19804                           postdec1	equ	0xFE5
 19805                           fsr1h	equ	0xFE2
 19806                           fsr1l	equ	0xFE1
 19807                           indf2	equ	0xFDF
 19808                           postinc2	equ	0xFDE
 19809                           postdec2	equ	0xFDD
 19810                           plusw2	equ	0xFDB
 19811                           fsr2h	equ	0xFDA
 19812                           fsr2l	equ	0xFD9
 19813                           status	equ	0xFD8
 19814                           
 19815 ;; *************** function _printHelp *****************
 19816 ;; Defined at:
 19817 ;;		line 3053 in file "main.c"
 19818 ;; Parameters:    Size  Location     Type
 19819 ;;		None
 19820 ;; Auto vars:     Size  Location     Type
 19821 ;;		None
 19822 ;; Return value:  Size  Location     Type
 19823 ;;		None               void
 19824 ;; Registers used:
 19825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19826 ;; Tracked objects:
 19827 ;;		On entry : F/0
 19828 ;;		On exit  : 0/0
 19829 ;;		Unchanged: 0/0
 19830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19831 ;;      Params:         0       0       0       0       0       0       0
 19832 ;;      Locals:         0       0       0       0       0       0       0
 19833 ;;      Temps:          0       0       0       0       0       0       0
 19834 ;;      Totals:         0       0       0       0       0       0       0
 19835 ;;Total ram usage:        0 bytes
 19836 ;; Hardware stack levels used:    1
 19837 ;; Hardware stack levels required when called:    5
 19838 ;; This function calls:
 19839 ;;		_putsUSART
 19840 ;; This function is called by:
 19841 ;;		_doModeVerbose
 19842 ;; This function uses a non-reentrant model
 19843 ;;
 19844                           
 19845                           	psect	text38
 19846  00436A                     __ptext38:
 19847                           	opt stack 0
 19848  00436A                     _printHelp:
 19849                           	opt stack 24
 19850                           
 19851                           ; BSR set to: 0
 19852                           ;main.c: 3054: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 19853                           
 19854                           ; BSR set to: 0
 19855                           ;incstack = 0
 19856                           ;incstack = 0
 19857  00436A  0E77               	movlw	high STR_247
 19858  00436C  6E21               	movwf	?_putsUSART+1,c
 19859  00436E  0E64               	movlw	low STR_247
 19860  004370  6E20               	movwf	?_putsUSART,c
 19861  004372  ECB5  F031         	call	_putsUSART	;wreg free
 19862                           
 19863                           ;main.c: 3055: putsUSART((char *) "------------------------------------\r\n");
 19864  004376  0E70               	movlw	high (STR_280+28)
 19865  004378  6E21               	movwf	?_putsUSART+1,c
 19866  00437A  0E38               	movlw	low (STR_280+28)
 19867  00437C  6E20               	movwf	?_putsUSART,c
 19868  00437E  ECB5  F031         	call	_putsUSART	;wreg free
 19869                           
 19870                           ;main.c: 3056: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 19871  004382  0E7A               	movlw	high STR_249
 19872  004384  6E21               	movwf	?_putsUSART+1,c
 19873  004386  0E7E               	movlw	low STR_249
 19874  004388  6E20               	movwf	?_putsUSART,c
 19875  00438A  ECB5  F031         	call	_putsUSART	;wreg free
 19876                           
 19877                           ;main.c: 3057: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 19878  00438E  0E75               	movlw	high STR_250
 19879  004390  6E21               	movwf	?_putsUSART+1,c
 19880  004392  0ECA               	movlw	low STR_250
 19881  004394  6E20               	movwf	?_putsUSART,c
 19882  004396  ECB5  F031         	call	_putsUSART	;wreg free
 19883                           
 19884                           ;main.c: 3058: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 19885  00439A  0E75               	movlw	high STR_251
 19886  00439C  6E21               	movwf	?_putsUSART+1,c
 19887  00439E  0E70               	movlw	low STR_251
 19888  0043A0  6E20               	movwf	?_putsUSART,c
 19889  0043A2  ECB5  F031         	call	_putsUSART	;wreg free
 19890                           
 19891                           ;main.c: 3059: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 19892  0043A6  0E73               	movlw	high STR_252
 19893  0043A8  6E21               	movwf	?_putsUSART+1,c
 19894  0043AA  0EBB               	movlw	low STR_252
 19895  0043AC  6E20               	movwf	?_putsUSART,c
 19896  0043AE  ECB5  F031         	call	_putsUSART	;wreg free
 19897                           
 19898                           ;main.c: 3060: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 19899  0043B2  0E74               	movlw	high STR_253
 19900  0043B4  6E21               	movwf	?_putsUSART+1,c
 19901  0043B6  0E20               	movlw	low STR_253
 19902  0043B8  6E20               	movwf	?_putsUSART,c
 19903  0043BA  ECB5  F031         	call	_putsUSART	;wreg free
 19904                           
 19905                           ;main.c: 3061: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 19906  0043BE  0E7A               	movlw	high STR_254
 19907  0043C0  6E21               	movwf	?_putsUSART+1,c
 19908  0043C2  0E0B               	movlw	low STR_254
 19909  0043C4  6E20               	movwf	?_putsUSART,c
 19910  0043C6  ECB5  F031         	call	_putsUSART	;wreg free
 19911                           
 19912                           ;main.c: 3062: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 19913  0043CA  0E74               	movlw	high STR_255
 19914  0043CC  6E21               	movwf	?_putsUSART+1,c
 19915  0043CE  0E52               	movlw	low STR_255
 19916  0043D0  6E20               	movwf	?_putsUSART,c
 19917  0043D2  ECB5  F031         	call	_putsUSART	;wreg free
 19918                           
 19919                           ;main.c: 3063: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 19920  0043D6  0E75               	movlw	high STR_256
 19921  0043D8  6E21               	movwf	?_putsUSART+1,c
 19922  0043DA  0E9E               	movlw	low STR_256
 19923  0043DC  6E20               	movwf	?_putsUSART,c
 19924  0043DE  ECB5  F031         	call	_putsUSART	;wreg free
 19925                           
 19926                           ;main.c: 3064: putsUSART((char *) "TX - Send CAN frame .\r\n");
 19927  0043E2  0E7B               	movlw	high STR_257
 19928  0043E4  6E21               	movwf	?_putsUSART+1,c
 19929  0043E6  0E34               	movlw	low STR_257
 19930  0043E8  6E20               	movwf	?_putsUSART,c
 19931  0043EA  ECB5  F031         	call	_putsUSART	;wreg free
 19932                           
 19933                           ;main.c: 3065: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 19934  0043EE  0E72               	movlw	high STR_258
 19935  0043F0  6E21               	movwf	?_putsUSART+1,c
 19936  0043F2  0E0A               	movlw	low STR_258
 19937  0043F4  6E20               	movwf	?_putsUSART,c
 19938  0043F6  ECB5  F031         	call	_putsUSART	;wreg free
 19939                           
 19940                           ;main.c: 3066: putsUSART((char *) "RX - Read CAN frame.\r\n");
 19941  0043FA  0E7B               	movlw	high STR_259
 19942  0043FC  6E21               	movwf	?_putsUSART+1,c
 19943  0043FE  0EF4               	movlw	low STR_259
 19944  004400  6E20               	movwf	?_putsUSART,c
 19945  004402  ECB5  F031         	call	_putsUSART	;wreg free
 19946                           
 19947                           ;main.c: 3067: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 19948  004406  0E79               	movlw	high STR_260
 19949  004408  6E21               	movwf	?_putsUSART+1,c
 19950  00440A  0E48               	movlw	low STR_260
 19951  00440C  6E20               	movwf	?_putsUSART,c
 19952  00440E  ECB5  F031         	call	_putsUSART	;wreg free
 19953                           
 19954                           ;main.c: 3068: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 19955  004412  0E77               	movlw	high STR_261
 19956  004414  6E21               	movwf	?_putsUSART+1,c
 19957  004416  0E3D               	movlw	low STR_261
 19958  004418  6E20               	movwf	?_putsUSART,c
 19959  00441A  ECB5  F031         	call	_putsUSART	;wreg free
 19960                           
 19961                           ;main.c: 3069: putsUSART((char *) "HELP - Display this help information.\r\n");
 19962  00441E  0E76               	movlw	high STR_262
 19963  004420  6E21               	movwf	?_putsUSART+1,c
 19964  004422  0E9E               	movlw	low STR_262
 19965  004424  6E20               	movwf	?_putsUSART,c
 19966  004426  ECB5  F031         	call	_putsUSART	;wreg free
 19967                           
 19968                           ;main.c: 3070: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 19969  00442A  0E75               	movlw	high STR_263
 19970  00442C  6E21               	movwf	?_putsUSART+1,c
 19971  00442E  0E13               	movlw	low STR_263
 19972  004430  6E20               	movwf	?_putsUSART,c
 19973  004432  ECB5  F031         	call	_putsUSART	;wreg free
 19974                           
 19975                           ;main.c: 3071: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 19976  004436  0E6F               	movlw	high STR_264
 19977  004438  6E21               	movwf	?_putsUSART+1,c
 19978  00443A  0E3F               	movlw	low STR_264
 19979  00443C  6E20               	movwf	?_putsUSART,c
 19980  00443E  ECB5  F031         	call	_putsUSART	;wreg free
 19981                           
 19982                           ;main.c: 3072: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 19983  004442  0E6F               	movlw	high STR_265
 19984  004444  6E21               	movwf	?_putsUSART+1,c
 19985  004446  0E8B               	movlw	low STR_265
 19986  004448  6E20               	movwf	?_putsUSART,c
 19987  00444A  ECB5  F031         	call	_putsUSART	;wreg free
 19988                           
 19989                           ;main.c: 3073: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 19990  00444E  0E6E               	movlw	high STR_266
 19991  004450  6E21               	movwf	?_putsUSART+1,c
 19992  004452  0EF2               	movlw	low STR_266
 19993  004454  6E20               	movwf	?_putsUSART,c
 19994  004456  ECB5  F031         	call	_putsUSART	;wreg free
 19995                           
 19996                           ;main.c: 3074: putsUSART((char *) "FILTER - Set filter .\r\n");
 19997  00445A  0E7B               	movlw	high STR_267
 19998  00445C  6E21               	movwf	?_putsUSART+1,c
 19999  00445E  0E4C               	movlw	low STR_267
 20000  004460  6E20               	movwf	?_putsUSART,c
 20001  004462  ECB5  F031         	call	_putsUSART	;wreg free
 20002                           
 20003                           ;main.c: 3075: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 20004  004466  0E6E               	movlw	high STR_268
 20005  004468  6E21               	movwf	?_putsUSART+1,c
 20006  00446A  0EA4               	movlw	low STR_268
 20007  00446C  6E20               	movwf	?_putsUSART,c
 20008  00446E  ECB5  F031         	call	_putsUSART	;wreg free
 20009                           
 20010                           ;main.c: 3076: putsUSART((char *) "MASK - Set mask .\r\n");
 20011  004472  0E7C               	movlw	high STR_269
 20012  004474  6E21               	movwf	?_putsUSART+1,c
 20013  004476  0ED2               	movlw	low STR_269
 20014  004478  6E20               	movwf	?_putsUSART,c
 20015  00447A  ECB5  F031         	call	_putsUSART	;wreg free
 20016                           
 20017                           ;main.c: 3077: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 20018  00447E  0E6F               	movlw	high STR_270
 20019  004480  6E21               	movwf	?_putsUSART+1,c
 20020  004482  0ED5               	movlw	low STR_270
 20021  004484  6E20               	movwf	?_putsUSART,c
 20022  004486  ECB5  F031         	call	_putsUSART	;wreg free
 20023                           
 20024                           ;main.c: 3078: putsUSART((char *) "SET - Persistent functionality.\r\n");
 20025  00448A  0E79               	movlw	high STR_271
 20026  00448C  6E21               	movwf	?_putsUSART+1,c
 20027  00448E  0E26               	movlw	low STR_271
 20028  004490  6E20               	movwf	?_putsUSART,c
 20029  004492  ECB5  F031         	call	_putsUSART	;wreg free
 20030                           
 20031                           ;main.c: 3079: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 20032  004496  0E74               	movlw	high STR_272
 20033  004498  6E21               	movwf	?_putsUSART+1,c
 20034  00449A  0EE4               	movlw	low STR_272
 20035  00449C  6E20               	movwf	?_putsUSART,c
 20036  00449E  ECB5  F031         	call	_putsUSART	;wreg free
 20037                           
 20038                           ;main.c: 3080: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 20039  0044A2  0E74               	movlw	high STR_273
 20040  0044A4  6E21               	movwf	?_putsUSART+1,c
 20041  0044A6  0EB5               	movlw	low STR_273
 20042  0044A8  6E20               	movwf	?_putsUSART,c
 20043  0044AA  ECB5  F031         	call	_putsUSART	;wreg free
 20044                           
 20045                           ;main.c: 3081: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 20046  0044AE  0E70               	movlw	high STR_274
 20047  0044B0  6E21               	movwf	?_putsUSART+1,c
 20048  0044B2  0E5F               	movlw	low STR_274
 20049  0044B4  6E20               	movwf	?_putsUSART,c
 20050  0044B6  ECB5  F031         	call	_putsUSART	;wreg free
 20051                           
 20052                           ;main.c: 3082: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 20053  0044BA  0E74               	movlw	high STR_275
 20054  0044BC  6E21               	movwf	?_putsUSART+1,c
 20055  0044BE  0E84               	movlw	low STR_275
 20056  0044C0  6E20               	movwf	?_putsUSART,c
 20057  0044C2  ECB5  F031         	call	_putsUSART	;wreg free
 20058                           
 20059                           ;main.c: 3083: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 20060  0044C6  0E72               	movlw	high STR_276
 20061  0044C8  6E21               	movwf	?_putsUSART+1,c
 20062  0044CA  0E79               	movlw	low STR_276
 20063  0044CC  6E20               	movwf	?_putsUSART,c
 20064  0044CE  ECB5  F031         	call	_putsUSART	;wreg free
 20065                           
 20066                           ;main.c: 3084: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 20067  0044D2  0E70               	movlw	high STR_277
 20068  0044D4  6E21               	movwf	?_putsUSART+1,c
 20069  0044D6  0EE4               	movlw	low STR_277
 20070  0044D8  6E20               	movwf	?_putsUSART,c
 20071  0044DA  ECB5  F031         	call	_putsUSART	;wreg free
 20072                           
 20073                           ;main.c: 3085: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 20074  0044DE  0E77               	movlw	high STR_278
 20075  0044E0  6E21               	movwf	?_putsUSART+1,c
 20076  0044E2  0ED9               	movlw	low STR_278
 20077  0044E4  6E20               	movwf	?_putsUSART,c
 20078  0044E6  EFB5  F031         	goto	_putsUSART	;wreg free
 20079  0044EA                     __end_of_printHelp:
 20080                           	opt stack 0
 20081                           tblptru	equ	0xFF8
 20082                           tblptrh	equ	0xFF7
 20083                           tblptrl	equ	0xFF6
 20084                           tablat	equ	0xFF5
 20085                           prodh	equ	0xFF4
 20086                           prodl	equ	0xFF3
 20087                           intcon	equ	0xFF2
 20088                           indf0	equ	0xFEF
 20089                           postinc0	equ	0xFEE
 20090                           fsr0h	equ	0xFEA
 20091                           fsr0l	equ	0xFE9
 20092                           wreg	equ	0xFE8
 20093                           indf1	equ	0xFE7
 20094                           postinc1	equ	0xFE6
 20095                           postdec1	equ	0xFE5
 20096                           fsr1h	equ	0xFE2
 20097                           fsr1l	equ	0xFE1
 20098                           indf2	equ	0xFDF
 20099                           postinc2	equ	0xFDE
 20100                           postdec2	equ	0xFDD
 20101                           plusw2	equ	0xFDB
 20102                           fsr2h	equ	0xFDA
 20103                           fsr2l	equ	0xFD9
 20104                           status	equ	0xFD8
 20105                           
 20106 ;; *************** function _printErrors *****************
 20107 ;; Defined at:
 20108 ;;		line 2990 in file "main.c"
 20109 ;; Parameters:    Size  Location     Type
 20110 ;;		None
 20111 ;; Auto vars:     Size  Location     Type
 20112 ;;		None
 20113 ;; Return value:  Size  Location     Type
 20114 ;;		None               void
 20115 ;; Registers used:
 20116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20117 ;; Tracked objects:
 20118 ;;		On entry : F/0
 20119 ;;		On exit  : 0/0
 20120 ;;		Unchanged: 0/0
 20121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20122 ;;      Params:         0       0       0       0       0       0       0
 20123 ;;      Locals:         0      12       0       0       0       0       0
 20124 ;;      Temps:          0       0       0       0       0       0       0
 20125 ;;      Totals:         0      12       0       0       0       0       0
 20126 ;;Total ram usage:       12 bytes
 20127 ;; Hardware stack levels used:    1
 20128 ;; Hardware stack levels required when called:    5
 20129 ;; This function calls:
 20130 ;;		_putsUSART
 20131 ;;		_sprintf
 20132 ;; This function is called by:
 20133 ;;		_doModeVerbose
 20134 ;; This function uses a non-reentrant model
 20135 ;;
 20136                           
 20137                           	psect	text39
 20138  002E3E                     __ptext39:
 20139                           	opt stack 0
 20140  002E3E                     _printErrors:
 20141                           	opt stack 24
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;main.c: 2991: putsUSART((char *) "CAN Receive overruns: ");
 20145                           
 20146                           ;incstack = 0
 20147                           ;incstack = 0
 20148  002E3E  0E7C               	movlw	high STR_217
 20149  002E40  6E21               	movwf	?_putsUSART+1,c
 20150  002E42  0E22               	movlw	low STR_217
 20151  002E44  6E20               	movwf	?_putsUSART,c
 20152  002E46  ECB5  F031         	call	_putsUSART	;wreg free
 20153                           
 20154                           ;main.c: 2992: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 20155  002E4A  662C               	tstfsz	_bHex,c
 20156  002E4C  D005               	goto	l17007
 20157  002E4E  0E7F               	movlw	high STR_182
 20158  002E50  0100               	movlb	0	; () banked
 20159  002E52  6F90               	movwf	(_printErrors$1622+1)& (0+255),b
 20160  002E54  0EDE               	movlw	low STR_182
 20161  002E56  D004               	goto	L22
 20162  002E58                     l17007:
 20163  002E58  0E7F               	movlw	high STR_181
 20164  002E5A  0100               	movlb	0	; () banked
 20165  002E5C  6F90               	movwf	(_printErrors$1622+1)& (0+255),b
 20166  002E5E  0E01               	movlw	low STR_181
 20167  002E60                     L22:
 20168  002E60  6F8F               	movwf	_printErrors$1622& (0+255),b
 20169                           
 20170                           ; BSR set to: 0
 20171  002E62  0E01               	movlw	high _wrkbuf
 20172  002E64  0100               	movlb	0	; () banked
 20173  002E66  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20174  002E68  0E7D               	movlw	low _wrkbuf
 20175  002E6A  6F71               	movwf	?_sprintf& (0+255),b
 20176  002E6C  C08F  F073         	movff	_printErrors$1622,?_sprintf+2
 20177  002E70  C090  F074         	movff	_printErrors$1622+1,?_sprintf+3
 20178  002E74  C100  F075         	movff	_can_receiveOverruns,?_sprintf+4
 20179  002E78  C101  F076         	movff	_can_receiveOverruns+1,?_sprintf+5
 20180  002E7C  C102  F077         	movff	_can_receiveOverruns+2,?_sprintf+6
 20181  002E80  C103  F078         	movff	_can_receiveOverruns+3,?_sprintf+7
 20182  002E84  ECFD  F00F         	call	_sprintf	;wreg free
 20183                           
 20184                           ; BSR set to: 0
 20185                           ;main.c: 2993: putsUSART(wrkbuf);
 20186  002E88  0101               	movlb	1	; () banked
 20187  002E8A  0E01               	movlw	high _wrkbuf
 20188  002E8C  6E21               	movwf	?_putsUSART+1,c
 20189  002E8E  0E7D               	movlw	low _wrkbuf
 20190  002E90  6E20               	movwf	?_putsUSART,c
 20191  002E92  ECB5  F031         	call	_putsUSART	;wreg free
 20192                           
 20193                           ;main.c: 2994: putsUSART((char *) "\r\n");
 20194  002E96  0E73               	movlw	high (STR_239+51)
 20195  002E98  6E21               	movwf	?_putsUSART+1,c
 20196  002E9A  0E1A               	movlw	low (STR_239+51)
 20197  002E9C  6E20               	movwf	?_putsUSART,c
 20198  002E9E  ECB5  F031         	call	_putsUSART	;wreg free
 20199                           
 20200                           ;main.c: 2996: putsUSART((char *) "CAN Transmit overruns: ");
 20201  002EA2  0E7B               	movlw	high STR_221
 20202  002EA4  6E21               	movwf	?_putsUSART+1,c
 20203  002EA6  0EDC               	movlw	low STR_221
 20204  002EA8  6E20               	movwf	?_putsUSART,c
 20205  002EAA  ECB5  F031         	call	_putsUSART	;wreg free
 20206                           
 20207                           ;main.c: 2997: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 20208  002EAE  662C               	tstfsz	_bHex,c
 20209  002EB0  D005               	goto	l17021
 20210  002EB2  0E7F               	movlw	high STR_182
 20211  002EB4  0100               	movlb	0	; () banked
 20212  002EB6  6F92               	movwf	(_printErrors$1628+1)& (0+255),b
 20213  002EB8  0EDE               	movlw	low STR_182
 20214  002EBA  D004               	goto	L23
 20215  002EBC                     l17021:
 20216  002EBC  0E7F               	movlw	high STR_181
 20217  002EBE  0100               	movlb	0	; () banked
 20218  002EC0  6F92               	movwf	(_printErrors$1628+1)& (0+255),b
 20219  002EC2  0E01               	movlw	low STR_181
 20220  002EC4                     L23:
 20221  002EC4  6F91               	movwf	_printErrors$1628& (0+255),b
 20222                           
 20223                           ; BSR set to: 0
 20224  002EC6  0E01               	movlw	high _wrkbuf
 20225  002EC8  0100               	movlb	0	; () banked
 20226  002ECA  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20227  002ECC  0E7D               	movlw	low _wrkbuf
 20228  002ECE  6F71               	movwf	?_sprintf& (0+255),b
 20229  002ED0  C091  F073         	movff	_printErrors$1628,?_sprintf+2
 20230  002ED4  C092  F074         	movff	_printErrors$1628+1,?_sprintf+3
 20231  002ED8  C104  F075         	movff	_can_transmitOverruns,?_sprintf+4
 20232  002EDC  C105  F076         	movff	_can_transmitOverruns+1,?_sprintf+5
 20233  002EE0  C106  F077         	movff	_can_transmitOverruns+2,?_sprintf+6
 20234  002EE4  C107  F078         	movff	_can_transmitOverruns+3,?_sprintf+7
 20235  002EE8  ECFD  F00F         	call	_sprintf	;wreg free
 20236                           
 20237                           ; BSR set to: 0
 20238                           ;main.c: 2998: putsUSART(wrkbuf);
 20239  002EEC  0101               	movlb	1	; () banked
 20240  002EEE  0E01               	movlw	high _wrkbuf
 20241  002EF0  6E21               	movwf	?_putsUSART+1,c
 20242  002EF2  0E7D               	movlw	low _wrkbuf
 20243  002EF4  6E20               	movwf	?_putsUSART,c
 20244  002EF6  ECB5  F031         	call	_putsUSART	;wreg free
 20245                           
 20246                           ;main.c: 2999: putsUSART((char *) "\r\n");
 20247  002EFA  0E73               	movlw	high (STR_239+51)
 20248  002EFC  6E21               	movwf	?_putsUSART+1,c
 20249  002EFE  0E1A               	movlw	low (STR_239+51)
 20250  002F00  6E20               	movwf	?_putsUSART,c
 20251  002F02  ECB5  F031         	call	_putsUSART	;wreg free
 20252                           
 20253                           ;main.c: 3001: putsUSART((char *) "UART Receive overruns: ");
 20254  002F06  0E7B               	movlw	high STR_225
 20255  002F08  6E21               	movwf	?_putsUSART+1,c
 20256  002F0A  0EC4               	movlw	low STR_225
 20257  002F0C  6E20               	movwf	?_putsUSART,c
 20258  002F0E  ECB5  F031         	call	_putsUSART	;wreg free
 20259                           
 20260                           ;main.c: 3002: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 20261  002F12  662C               	tstfsz	_bHex,c
 20262  002F14  D005               	goto	l17035
 20263  002F16  0E7F               	movlw	high STR_182
 20264  002F18  0100               	movlb	0	; () banked
 20265  002F1A  6F94               	movwf	(_printErrors$1634+1)& (0+255),b
 20266  002F1C  0EDE               	movlw	low STR_182
 20267  002F1E  D004               	goto	L24
 20268  002F20                     l17035:
 20269  002F20  0E7F               	movlw	high STR_181
 20270  002F22  0100               	movlb	0	; () banked
 20271  002F24  6F94               	movwf	(_printErrors$1634+1)& (0+255),b
 20272  002F26  0E01               	movlw	low STR_181
 20273  002F28                     L24:
 20274  002F28  6F93               	movwf	_printErrors$1634& (0+255),b
 20275                           
 20276                           ; BSR set to: 0
 20277  002F2A  0E01               	movlw	high _wrkbuf
 20278  002F2C  0100               	movlb	0	; () banked
 20279  002F2E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20280  002F30  0E7D               	movlw	low _wrkbuf
 20281  002F32  6F71               	movwf	?_sprintf& (0+255),b
 20282  002F34  C093  F073         	movff	_printErrors$1634,?_sprintf+2
 20283  002F38  C094  F074         	movff	_printErrors$1634+1,?_sprintf+3
 20284  002F3C  C11C  F075         	movff	_uart_receiveOverruns,?_sprintf+4
 20285  002F40  C11D  F076         	movff	_uart_receiveOverruns+1,?_sprintf+5
 20286  002F44  C11E  F077         	movff	_uart_receiveOverruns+2,?_sprintf+6
 20287  002F48  C11F  F078         	movff	_uart_receiveOverruns+3,?_sprintf+7
 20288  002F4C  ECFD  F00F         	call	_sprintf	;wreg free
 20289                           
 20290                           ; BSR set to: 0
 20291                           ;main.c: 3003: putsUSART(wrkbuf);
 20292  002F50  0101               	movlb	1	; () banked
 20293  002F52  0E01               	movlw	high _wrkbuf
 20294  002F54  6E21               	movwf	?_putsUSART+1,c
 20295  002F56  0E7D               	movlw	low _wrkbuf
 20296  002F58  6E20               	movwf	?_putsUSART,c
 20297  002F5A  ECB5  F031         	call	_putsUSART	;wreg free
 20298                           
 20299                           ;main.c: 3004: putsUSART((char *) "\r\n");
 20300  002F5E  0E73               	movlw	high (STR_239+51)
 20301  002F60  6E21               	movwf	?_putsUSART+1,c
 20302  002F62  0E1A               	movlw	low (STR_239+51)
 20303  002F64  6E20               	movwf	?_putsUSART,c
 20304  002F66  ECB5  F031         	call	_putsUSART	;wreg free
 20305                           
 20306                           ;main.c: 3006: putsUSART((char *) "UART Receive overruns: ");
 20307  002F6A  0E7B               	movlw	high STR_225
 20308  002F6C  6E21               	movwf	?_putsUSART+1,c
 20309  002F6E  0EC4               	movlw	low STR_225
 20310  002F70  6E20               	movwf	?_putsUSART,c
 20311  002F72  ECB5  F031         	call	_putsUSART	;wreg free
 20312                           
 20313                           ;main.c: 3007: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 20314  002F76  662C               	tstfsz	_bHex,c
 20315  002F78  D005               	goto	l17049
 20316  002F7A  0E7F               	movlw	high STR_182
 20317  002F7C  0100               	movlb	0	; () banked
 20318  002F7E  6F96               	movwf	(_printErrors$1640+1)& (0+255),b
 20319  002F80  0EDE               	movlw	low STR_182
 20320  002F82  D004               	goto	L25
 20321  002F84                     l17049:
 20322  002F84  0E7F               	movlw	high STR_181
 20323  002F86  0100               	movlb	0	; () banked
 20324  002F88  6F96               	movwf	(_printErrors$1640+1)& (0+255),b
 20325  002F8A  0E01               	movlw	low STR_181
 20326  002F8C                     L25:
 20327  002F8C  6F95               	movwf	_printErrors$1640& (0+255),b
 20328                           
 20329                           ; BSR set to: 0
 20330  002F8E  0E01               	movlw	high _wrkbuf
 20331  002F90  0100               	movlb	0	; () banked
 20332  002F92  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20333  002F94  0E7D               	movlw	low _wrkbuf
 20334  002F96  6F71               	movwf	?_sprintf& (0+255),b
 20335  002F98  C095  F073         	movff	_printErrors$1640,?_sprintf+2
 20336  002F9C  C096  F074         	movff	_printErrors$1640+1,?_sprintf+3
 20337  002FA0  C120  F075         	movff	_uart_transmitOverruns,?_sprintf+4
 20338  002FA4  C121  F076         	movff	_uart_transmitOverruns+1,?_sprintf+5
 20339  002FA8  C122  F077         	movff	_uart_transmitOverruns+2,?_sprintf+6
 20340  002FAC  C123  F078         	movff	_uart_transmitOverruns+3,?_sprintf+7
 20341  002FB0  ECFD  F00F         	call	_sprintf	;wreg free
 20342                           
 20343                           ; BSR set to: 0
 20344                           ;main.c: 3008: putsUSART(wrkbuf);
 20345  002FB4  0101               	movlb	1	; () banked
 20346  002FB6  0E01               	movlw	high _wrkbuf
 20347  002FB8  6E21               	movwf	?_putsUSART+1,c
 20348  002FBA  0E7D               	movlw	low _wrkbuf
 20349  002FBC  6E20               	movwf	?_putsUSART,c
 20350  002FBE  ECB5  F031         	call	_putsUSART	;wreg free
 20351                           
 20352                           ;main.c: 3009: putsUSART((char *) "\r\n");
 20353  002FC2  0E73               	movlw	high (STR_239+51)
 20354  002FC4  6E21               	movwf	?_putsUSART+1,c
 20355  002FC6  0E1A               	movlw	low (STR_239+51)
 20356  002FC8  6E20               	movwf	?_putsUSART,c
 20357  002FCA  ECB5  F031         	call	_putsUSART	;wreg free
 20358                           
 20359                           ;main.c: 3011: if (COMSTATbits.EWARN) {
 20360  002FCE  A074               	btfss	3956,0,c	;volatile
 20361  002FD0  D006               	goto	l1307
 20362                           
 20363                           ;main.c: 3012: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 20364  002FD2  0E73               	movlw	high STR_233
 20365  002FD4  6E21               	movwf	?_putsUSART+1,c
 20366  002FD6  0E87               	movlw	low STR_233
 20367  002FD8  6E20               	movwf	?_putsUSART,c
 20368  002FDA  ECB5  F031         	call	_putsUSART	;wreg free
 20369  002FDE                     l1307:
 20370                           
 20371                           ;main.c: 3013: }
 20372                           ;main.c: 3015: putsUSART((char *) "Transmit Error Counter: ");
 20373  002FDE  0E7B               	movlw	high STR_234
 20374  002FE0  6E21               	movwf	?_putsUSART+1,c
 20375  002FE2  0E02               	movlw	low STR_234
 20376  002FE4  6E20               	movwf	?_putsUSART,c
 20377  002FE6  ECB5  F031         	call	_putsUSART	;wreg free
 20378                           
 20379                           ;main.c: 3016: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 20380  002FEA  662C               	tstfsz	_bHex,c
 20381  002FEC  D005               	goto	l17065
 20382  002FEE  0E7F               	movlw	high STR_61
 20383  002FF0  0100               	movlb	0	; () banked
 20384  002FF2  6F98               	movwf	(_printErrors$1647+1)& (0+255),b
 20385  002FF4  0EEE               	movlw	low STR_61
 20386  002FF6  D004               	goto	L26
 20387  002FF8                     l17065:
 20388  002FF8  0E7F               	movlw	high STR_60
 20389  002FFA  0100               	movlb	0	; () banked
 20390  002FFC  6F98               	movwf	(_printErrors$1647+1)& (0+255),b
 20391  002FFE  0E50               	movlw	low STR_60
 20392  003000                     L26:
 20393  003000  6F97               	movwf	_printErrors$1647& (0+255),b
 20394                           
 20395                           ; BSR set to: 0
 20396  003002  0E01               	movlw	high _wrkbuf
 20397  003004  0100               	movlb	0	; () banked
 20398  003006  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20399  003008  0E7D               	movlw	low _wrkbuf
 20400  00300A  6F71               	movwf	?_sprintf& (0+255),b
 20401  00300C  C097  F073         	movff	_printErrors$1647,?_sprintf+2
 20402  003010  C098  F074         	movff	_printErrors$1647+1,?_sprintf+3
 20403  003014  CF76 F075          	movff	3958,?_sprintf+4	;volatile
 20404  003018  6B76               	clrf	(?_sprintf+5)& (0+255),b
 20405  00301A  ECFD  F00F         	call	_sprintf	;wreg free
 20406                           
 20407                           ; BSR set to: 0
 20408                           ;main.c: 3017: putsUSART(wrkbuf);
 20409  00301E  0101               	movlb	1	; () banked
 20410  003020  0E01               	movlw	high _wrkbuf
 20411  003022  6E21               	movwf	?_putsUSART+1,c
 20412  003024  0E7D               	movlw	low _wrkbuf
 20413  003026  6E20               	movwf	?_putsUSART,c
 20414  003028  ECB5  F031         	call	_putsUSART	;wreg free
 20415                           
 20416                           ;main.c: 3018: putsUSART((char *) "\r\n");
 20417  00302C  0E73               	movlw	high (STR_239+51)
 20418  00302E  6E21               	movwf	?_putsUSART+1,c
 20419  003030  0E1A               	movlw	low (STR_239+51)
 20420  003032  6E20               	movwf	?_putsUSART,c
 20421  003034  ECB5  F031         	call	_putsUSART	;wreg free
 20422                           
 20423                           ;main.c: 3020: if (COMSTATbits.TXWARN) {
 20424  003038  A474               	btfss	3956,2,c	;volatile
 20425  00303A  D006               	goto	l17077
 20426                           
 20427                           ;main.c: 3021: putsUSART((char *) "Transmitter in Error State Warning (128 > TXERRCNT > 
      +                          96)\r\n");
 20428  00303C  0E71               	movlw	high STR_238
 20429  00303E  6E21               	movwf	?_putsUSART+1,c
 20430  003040  0E22               	movlw	low STR_238
 20431  003042  6E20               	movwf	?_putsUSART,c
 20432  003044  ECB5  F031         	call	_putsUSART	;wreg free
 20433  003048                     l17077:
 20434                           
 20435                           ;main.c: 3022: }
 20436                           ;main.c: 3024: if (COMSTATbits.TXBO) {
 20437  003048  AA74               	btfss	3956,5,c	;volatile
 20438  00304A  D006               	goto	l17081
 20439                           
 20440                           ;main.c: 3025: putsUSART((char *) "Transmitter in Error State Bus OFF (TXERRCNT ? 256)\r
      +                          \n");
 20441  00304C  0E72               	movlw	high STR_239
 20442  00304E  6E21               	movwf	?_putsUSART+1,c
 20443  003050  0EE7               	movlw	low STR_239
 20444  003052  6E20               	movwf	?_putsUSART,c
 20445  003054  ECB5  F031         	call	_putsUSART	;wreg free
 20446  003058                     l17081:
 20447                           
 20448                           ;main.c: 3026: }
 20449                           ;main.c: 3028: if (COMSTATbits.TXBP) {
 20450  003058  A874               	btfss	3956,4,c	;volatile
 20451  00305A  D006               	goto	l1314
 20452                           
 20453                           ;main.c: 3029: putsUSART((char *) "Transmitter in Error State Bus Passive (TXERRCNT ? 12
      +                          8)\r\n");
 20454  00305C  0E71               	movlw	high STR_240
 20455  00305E  6E21               	movwf	?_putsUSART+1,c
 20456  003060  0E5D               	movlw	low STR_240
 20457  003062  6E20               	movwf	?_putsUSART,c
 20458  003064  ECB5  F031         	call	_putsUSART	;wreg free
 20459  003068                     l1314:
 20460                           
 20461                           ;main.c: 3030: }
 20462                           ;main.c: 3032: putsUSART((char *) "Receive Error Counter: ");
 20463  003068  0E7B               	movlw	high STR_241
 20464  00306A  6E21               	movwf	?_putsUSART+1,c
 20465  00306C  0EAC               	movlw	low STR_241
 20466  00306E  6E20               	movwf	?_putsUSART,c
 20467  003070  ECB5  F031         	call	_putsUSART	;wreg free
 20468                           
 20469                           ;main.c: 3033: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 20470  003074  662C               	tstfsz	_bHex,c
 20471  003076  D005               	goto	l17089
 20472  003078  0E7F               	movlw	high STR_61
 20473  00307A  0100               	movlb	0	; () banked
 20474  00307C  6F9A               	movwf	(_printErrors$1656+1)& (0+255),b
 20475  00307E  0EEE               	movlw	low STR_61
 20476  003080  D004               	goto	L27
 20477  003082                     l17089:
 20478  003082  0E7F               	movlw	high STR_60
 20479  003084  0100               	movlb	0	; () banked
 20480  003086  6F9A               	movwf	(_printErrors$1656+1)& (0+255),b
 20481  003088  0E50               	movlw	low STR_60
 20482  00308A                     L27:
 20483  00308A  6F99               	movwf	_printErrors$1656& (0+255),b
 20484                           
 20485                           ; BSR set to: 0
 20486  00308C  0E01               	movlw	high _wrkbuf
 20487  00308E  0100               	movlb	0	; () banked
 20488  003090  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20489  003092  0E7D               	movlw	low _wrkbuf
 20490  003094  6F71               	movwf	?_sprintf& (0+255),b
 20491  003096  C099  F073         	movff	_printErrors$1656,?_sprintf+2
 20492  00309A  C09A  F074         	movff	_printErrors$1656+1,?_sprintf+3
 20493  00309E  CF75 F075          	movff	3957,?_sprintf+4	;volatile
 20494  0030A2  6B76               	clrf	(?_sprintf+5)& (0+255),b
 20495  0030A4  ECFD  F00F         	call	_sprintf	;wreg free
 20496                           
 20497                           ; BSR set to: 0
 20498                           ;main.c: 3034: putsUSART(wrkbuf);
 20499  0030A8  0101               	movlb	1	; () banked
 20500  0030AA  0E01               	movlw	high _wrkbuf
 20501  0030AC  6E21               	movwf	?_putsUSART+1,c
 20502  0030AE  0E7D               	movlw	low _wrkbuf
 20503  0030B0  6E20               	movwf	?_putsUSART,c
 20504  0030B2  ECB5  F031         	call	_putsUSART	;wreg free
 20505                           
 20506                           ;main.c: 3035: putsUSART((char *) "\r\n");
 20507  0030B6  0E73               	movlw	high (STR_239+51)
 20508  0030B8  6E21               	movwf	?_putsUSART+1,c
 20509  0030BA  0E1A               	movlw	low (STR_239+51)
 20510  0030BC  6E20               	movwf	?_putsUSART,c
 20511  0030BE  ECB5  F031         	call	_putsUSART	;wreg free
 20512                           
 20513                           ;main.c: 3037: if (COMSTATbits.RXBP) {
 20514  0030C2  A674               	btfss	3956,3,c	;volatile
 20515  0030C4  D006               	goto	l17101
 20516                           
 20517                           ;main.c: 3038: putsUSART((char *) "Receiver in Error State Bus Passive (RXERRCNT > 127)\
      +                          r\n");
 20518  0030C6  0E72               	movlw	high STR_245
 20519  0030C8  6E21               	movwf	?_putsUSART+1,c
 20520  0030CA  0E42               	movlw	low STR_245
 20521  0030CC  6E20               	movwf	?_putsUSART,c
 20522  0030CE  ECB5  F031         	call	_putsUSART	;wreg free
 20523  0030D2                     l17101:
 20524                           
 20525                           ;main.c: 3039: }
 20526                           ;main.c: 3041: if (COMSTATbits.RXWARN) {
 20527  0030D2  A274               	btfss	3956,1,c	;volatile
 20528  0030D4  D006               	goto	l1321
 20529                           
 20530                           ;main.c: 3042: putsUSART((char *) "Receiver  in Error State Warning (128 > RXERRCNT > 96
      +                          )\r\n");
 20531  0030D6  0E71               	movlw	high STR_246
 20532  0030D8  6E21               	movwf	?_putsUSART+1,c
 20533  0030DA  0ED1               	movlw	low STR_246
 20534  0030DC  6E20               	movwf	?_putsUSART,c
 20535  0030DE  ECB5  F031         	call	_putsUSART	;wreg free
 20536  0030E2                     l1321:
 20537  0030E2  0012               	return	
 20538  0030E4                     __end_of_printErrors:
 20539                           	opt stack 0
 20540                           tblptru	equ	0xFF8
 20541                           tblptrh	equ	0xFF7
 20542                           tblptrl	equ	0xFF6
 20543                           tablat	equ	0xFF5
 20544                           prodh	equ	0xFF4
 20545                           prodl	equ	0xFF3
 20546                           intcon	equ	0xFF2
 20547                           indf0	equ	0xFEF
 20548                           postinc0	equ	0xFEE
 20549                           fsr0h	equ	0xFEA
 20550                           fsr0l	equ	0xFE9
 20551                           wreg	equ	0xFE8
 20552                           indf1	equ	0xFE7
 20553                           postinc1	equ	0xFE6
 20554                           postdec1	equ	0xFE5
 20555                           fsr1h	equ	0xFE2
 20556                           fsr1l	equ	0xFE1
 20557                           indf2	equ	0xFDF
 20558                           postinc2	equ	0xFDE
 20559                           postdec2	equ	0xFDD
 20560                           plusw2	equ	0xFDB
 20561                           fsr2h	equ	0xFDA
 20562                           fsr2l	equ	0xFD9
 20563                           status	equ	0xFD8
 20564                           
 20565 ;; *************** function _printStatistics *****************
 20566 ;; Defined at:
 20567 ;;		line 2963 in file "main.c"
 20568 ;; Parameters:    Size  Location     Type
 20569 ;;		None
 20570 ;; Auto vars:     Size  Location     Type
 20571 ;;		None
 20572 ;; Return value:  Size  Location     Type
 20573 ;;		None               void
 20574 ;; Registers used:
 20575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20576 ;; Tracked objects:
 20577 ;;		On entry : F/0
 20578 ;;		On exit  : 0/0
 20579 ;;		Unchanged: 0/0
 20580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20581 ;;      Params:         0       0       0       0       0       0       0
 20582 ;;      Locals:         0       8       0       0       0       0       0
 20583 ;;      Temps:          0       0       0       0       0       0       0
 20584 ;;      Totals:         0       8       0       0       0       0       0
 20585 ;;Total ram usage:        8 bytes
 20586 ;; Hardware stack levels used:    1
 20587 ;; Hardware stack levels required when called:    5
 20588 ;; This function calls:
 20589 ;;		_putsUSART
 20590 ;;		_sprintf
 20591 ;; This function is called by:
 20592 ;;		_doModeVerbose
 20593 ;; This function uses a non-reentrant model
 20594 ;;
 20595                           
 20596                           	psect	text40
 20597  0041DA                     __ptext40:
 20598                           	opt stack 0
 20599  0041DA                     _printStatistics:
 20600                           	opt stack 24
 20601                           
 20602                           ; BSR set to: 0
 20603                           ;main.c: 2964: putsUSART((char *) "Sent CAN frames: ");
 20604                           
 20605                           ;incstack = 0
 20606                           ;incstack = 0
 20607  0041DA  0E7D               	movlw	high STR_201
 20608  0041DC  6E21               	movwf	?_putsUSART+1,c
 20609  0041DE  0E95               	movlw	low STR_201
 20610  0041E0  6E20               	movwf	?_putsUSART,c
 20611  0041E2  ECB5  F031         	call	_putsUSART	;wreg free
 20612                           
 20613                           ;main.c: 2965: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 20614  0041E6  662C               	tstfsz	_bHex,c
 20615  0041E8  D005               	goto	l16951
 20616  0041EA  0E7F               	movlw	high STR_182
 20617  0041EC  0100               	movlb	0	; () banked
 20618  0041EE  6F90               	movwf	(_printStatistics$1597+1)& (0+255),b
 20619  0041F0  0EDE               	movlw	low STR_182
 20620  0041F2  D004               	goto	L28
 20621  0041F4                     l16951:
 20622  0041F4  0E7F               	movlw	high STR_202
 20623  0041F6  0100               	movlb	0	; () banked
 20624  0041F8  6F90               	movwf	(_printStatistics$1597+1)& (0+255),b
 20625  0041FA  0E5E               	movlw	low STR_202
 20626  0041FC                     L28:
 20627  0041FC  6F8F               	movwf	_printStatistics$1597& (0+255),b
 20628                           
 20629                           ; BSR set to: 0
 20630  0041FE  0E01               	movlw	high _wrkbuf
 20631  004200  0100               	movlb	0	; () banked
 20632  004202  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20633  004204  0E7D               	movlw	low _wrkbuf
 20634  004206  6F71               	movwf	?_sprintf& (0+255),b
 20635  004208  C08F  F073         	movff	_printStatistics$1597,?_sprintf+2
 20636  00420C  C090  F074         	movff	_printStatistics$1597+1,?_sprintf+3
 20637  004210  C114  F075         	movff	_cntTxFrames,?_sprintf+4
 20638  004214  C115  F076         	movff	_cntTxFrames+1,?_sprintf+5
 20639  004218  C116  F077         	movff	_cntTxFrames+2,?_sprintf+6
 20640  00421C  C117  F078         	movff	_cntTxFrames+3,?_sprintf+7
 20641  004220  ECFD  F00F         	call	_sprintf	;wreg free
 20642                           
 20643                           ; BSR set to: 0
 20644                           ;main.c: 2966: putsUSART(wrkbuf);
 20645  004224  0101               	movlb	1	; () banked
 20646  004226  0E01               	movlw	high _wrkbuf
 20647  004228  6E21               	movwf	?_putsUSART+1,c
 20648  00422A  0E7D               	movlw	low _wrkbuf
 20649  00422C  6E20               	movwf	?_putsUSART,c
 20650  00422E  ECB5  F031         	call	_putsUSART	;wreg free
 20651                           
 20652                           ;main.c: 2967: putsUSART((char *) "\r\n");
 20653  004232  0E73               	movlw	high (STR_239+51)
 20654  004234  6E21               	movwf	?_putsUSART+1,c
 20655  004236  0E1A               	movlw	low (STR_239+51)
 20656  004238  6E20               	movwf	?_putsUSART,c
 20657  00423A  ECB5  F031         	call	_putsUSART	;wreg free
 20658                           
 20659                           ;main.c: 2969: putsUSART((char *) "Sent CAN bytes: ");
 20660  00423E  0E7D               	movlw	high STR_205
 20661  004240  6E21               	movwf	?_putsUSART+1,c
 20662  004242  0EDA               	movlw	low STR_205
 20663  004244  6E20               	movwf	?_putsUSART,c
 20664  004246  ECB5  F031         	call	_putsUSART	;wreg free
 20665                           
 20666                           ;main.c: 2970: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 20667  00424A  662C               	tstfsz	_bHex,c
 20668  00424C  D005               	goto	l16965
 20669  00424E  0E7F               	movlw	high STR_182
 20670  004250  0100               	movlb	0	; () banked
 20671  004252  6F92               	movwf	(_printStatistics$1603+1)& (0+255),b
 20672  004254  0EDE               	movlw	low STR_182
 20673  004256  D004               	goto	L29
 20674  004258                     l16965:
 20675  004258  0E7F               	movlw	high STR_202
 20676  00425A  0100               	movlb	0	; () banked
 20677  00425C  6F92               	movwf	(_printStatistics$1603+1)& (0+255),b
 20678  00425E  0E5E               	movlw	low STR_202
 20679  004260                     L29:
 20680  004260  6F91               	movwf	_printStatistics$1603& (0+255),b
 20681                           
 20682                           ; BSR set to: 0
 20683  004262  0E01               	movlw	high _wrkbuf
 20684  004264  0100               	movlb	0	; () banked
 20685  004266  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20686  004268  0E7D               	movlw	low _wrkbuf
 20687  00426A  6F71               	movwf	?_sprintf& (0+255),b
 20688  00426C  C091  F073         	movff	_printStatistics$1603,?_sprintf+2
 20689  004270  C092  F074         	movff	_printStatistics$1603+1,?_sprintf+3
 20690  004274  C110  F075         	movff	_cntTxBytes,?_sprintf+4
 20691  004278  C111  F076         	movff	_cntTxBytes+1,?_sprintf+5
 20692  00427C  C112  F077         	movff	_cntTxBytes+2,?_sprintf+6
 20693  004280  C113  F078         	movff	_cntTxBytes+3,?_sprintf+7
 20694  004284  ECFD  F00F         	call	_sprintf	;wreg free
 20695                           
 20696                           ; BSR set to: 0
 20697                           ;main.c: 2971: putsUSART(wrkbuf);
 20698  004288  0101               	movlb	1	; () banked
 20699  00428A  0E01               	movlw	high _wrkbuf
 20700  00428C  6E21               	movwf	?_putsUSART+1,c
 20701  00428E  0E7D               	movlw	low _wrkbuf
 20702  004290  6E20               	movwf	?_putsUSART,c
 20703  004292  ECB5  F031         	call	_putsUSART	;wreg free
 20704                           
 20705                           ;main.c: 2972: putsUSART((char *) "\r\n");
 20706  004296  0E73               	movlw	high (STR_239+51)
 20707  004298  6E21               	movwf	?_putsUSART+1,c
 20708  00429A  0E1A               	movlw	low (STR_239+51)
 20709  00429C  6E20               	movwf	?_putsUSART,c
 20710  00429E  ECB5  F031         	call	_putsUSART	;wreg free
 20711                           
 20712                           ;main.c: 2974: putsUSART((char *) "Received CAN frames: ");
 20713  0042A2  0E7C               	movlw	high STR_209
 20714  0042A4  6E21               	movwf	?_putsUSART+1,c
 20715  0042A6  0E92               	movlw	low STR_209
 20716  0042A8  6E20               	movwf	?_putsUSART,c
 20717  0042AA  ECB5  F031         	call	_putsUSART	;wreg free
 20718                           
 20719                           ;main.c: 2975: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 20720  0042AE  662C               	tstfsz	_bHex,c
 20721  0042B0  D005               	goto	l16979
 20722  0042B2  0E7F               	movlw	high STR_182
 20723  0042B4  0100               	movlb	0	; () banked
 20724  0042B6  6F94               	movwf	(_printStatistics$1609+1)& (0+255),b
 20725  0042B8  0EDE               	movlw	low STR_182
 20726  0042BA  D004               	goto	L30
 20727  0042BC                     l16979:
 20728  0042BC  0E7F               	movlw	high STR_202
 20729  0042BE  0100               	movlb	0	; () banked
 20730  0042C0  6F94               	movwf	(_printStatistics$1609+1)& (0+255),b
 20731  0042C2  0E5E               	movlw	low STR_202
 20732  0042C4                     L30:
 20733  0042C4  6F93               	movwf	_printStatistics$1609& (0+255),b
 20734                           
 20735                           ; BSR set to: 0
 20736  0042C6  0E01               	movlw	high _wrkbuf
 20737  0042C8  0100               	movlb	0	; () banked
 20738  0042CA  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20739  0042CC  0E7D               	movlw	low _wrkbuf
 20740  0042CE  6F71               	movwf	?_sprintf& (0+255),b
 20741  0042D0  C093  F073         	movff	_printStatistics$1609,?_sprintf+2
 20742  0042D4  C094  F074         	movff	_printStatistics$1609+1,?_sprintf+3
 20743  0042D8  C10C  F075         	movff	_cntRxFrames,?_sprintf+4
 20744  0042DC  C10D  F076         	movff	_cntRxFrames+1,?_sprintf+5
 20745  0042E0  C10E  F077         	movff	_cntRxFrames+2,?_sprintf+6
 20746  0042E4  C10F  F078         	movff	_cntRxFrames+3,?_sprintf+7
 20747  0042E8  ECFD  F00F         	call	_sprintf	;wreg free
 20748                           
 20749                           ; BSR set to: 0
 20750                           ;main.c: 2976: putsUSART(wrkbuf);
 20751  0042EC  0101               	movlb	1	; () banked
 20752  0042EE  0E01               	movlw	high _wrkbuf
 20753  0042F0  6E21               	movwf	?_putsUSART+1,c
 20754  0042F2  0E7D               	movlw	low _wrkbuf
 20755  0042F4  6E20               	movwf	?_putsUSART,c
 20756  0042F6  ECB5  F031         	call	_putsUSART	;wreg free
 20757                           
 20758                           ;main.c: 2977: putsUSART((char *) "\r\n");
 20759  0042FA  0E73               	movlw	high (STR_239+51)
 20760  0042FC  6E21               	movwf	?_putsUSART+1,c
 20761  0042FE  0E1A               	movlw	low (STR_239+51)
 20762  004300  6E20               	movwf	?_putsUSART,c
 20763  004302  ECB5  F031         	call	_putsUSART	;wreg free
 20764                           
 20765                           ;main.c: 2979: putsUSART((char *) "Received CAN bytes: ");
 20766  004306  0E7C               	movlw	high STR_213
 20767  004308  6E21               	movwf	?_putsUSART+1,c
 20768  00430A  0EBD               	movlw	low STR_213
 20769  00430C  6E20               	movwf	?_putsUSART,c
 20770  00430E  ECB5  F031         	call	_putsUSART	;wreg free
 20771                           
 20772                           ;main.c: 2980: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 20773  004312  662C               	tstfsz	_bHex,c
 20774  004314  D005               	goto	l16993
 20775  004316  0E7F               	movlw	high STR_182
 20776  004318  0100               	movlb	0	; () banked
 20777  00431A  6F96               	movwf	(_printStatistics$1615+1)& (0+255),b
 20778  00431C  0EDE               	movlw	low STR_182
 20779  00431E  D004               	goto	L31
 20780  004320                     l16993:
 20781  004320  0E7F               	movlw	high STR_202
 20782  004322  0100               	movlb	0	; () banked
 20783  004324  6F96               	movwf	(_printStatistics$1615+1)& (0+255),b
 20784  004326  0E5E               	movlw	low STR_202
 20785  004328                     L31:
 20786  004328  6F95               	movwf	_printStatistics$1615& (0+255),b
 20787                           
 20788                           ; BSR set to: 0
 20789  00432A  0E01               	movlw	high _wrkbuf
 20790  00432C  0100               	movlb	0	; () banked
 20791  00432E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 20792  004330  0E7D               	movlw	low _wrkbuf
 20793  004332  6F71               	movwf	?_sprintf& (0+255),b
 20794  004334  C095  F073         	movff	_printStatistics$1615,?_sprintf+2
 20795  004338  C096  F074         	movff	_printStatistics$1615+1,?_sprintf+3
 20796  00433C  C108  F075         	movff	_cntRxBytes,?_sprintf+4
 20797  004340  C109  F076         	movff	_cntRxBytes+1,?_sprintf+5
 20798  004344  C10A  F077         	movff	_cntRxBytes+2,?_sprintf+6
 20799  004348  C10B  F078         	movff	_cntRxBytes+3,?_sprintf+7
 20800  00434C  ECFD  F00F         	call	_sprintf	;wreg free
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;main.c: 2981: putsUSART(wrkbuf);
 20804  004350  0101               	movlb	1	; () banked
 20805  004352  0E01               	movlw	high _wrkbuf
 20806  004354  6E21               	movwf	?_putsUSART+1,c
 20807  004356  0E7D               	movlw	low _wrkbuf
 20808  004358  6E20               	movwf	?_putsUSART,c
 20809  00435A  ECB5  F031         	call	_putsUSART	;wreg free
 20810                           
 20811                           ;main.c: 2982: putsUSART((char *) "\r\n");
 20812  00435E  0E73               	movlw	high (STR_239+51)
 20813  004360  6E21               	movwf	?_putsUSART+1,c
 20814  004362  0E1A               	movlw	low (STR_239+51)
 20815  004364  6E20               	movwf	?_putsUSART,c
 20816  004366  EFB5  F031         	goto	_putsUSART	;wreg free
 20817  00436A                     __end_of_printStatistics:
 20818                           	opt stack 0
 20819                           tblptru	equ	0xFF8
 20820                           tblptrh	equ	0xFF7
 20821                           tblptrl	equ	0xFF6
 20822                           tablat	equ	0xFF5
 20823                           prodh	equ	0xFF4
 20824                           prodl	equ	0xFF3
 20825                           intcon	equ	0xFF2
 20826                           indf0	equ	0xFEF
 20827                           postinc0	equ	0xFEE
 20828                           fsr0h	equ	0xFEA
 20829                           fsr0l	equ	0xFE9
 20830                           wreg	equ	0xFE8
 20831                           indf1	equ	0xFE7
 20832                           postinc1	equ	0xFE6
 20833                           postdec1	equ	0xFE5
 20834                           fsr1h	equ	0xFE2
 20835                           fsr1l	equ	0xFE1
 20836                           indf2	equ	0xFDF
 20837                           postinc2	equ	0xFDE
 20838                           postdec2	equ	0xFDD
 20839                           plusw2	equ	0xFDB
 20840                           fsr2h	equ	0xFDA
 20841                           fsr2l	equ	0xFD9
 20842                           status	equ	0xFD8
 20843                           
 20844 ;; *************** function _atoi *****************
 20845 ;; Defined at:
 20846 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 20847 ;; Parameters:    Size  Location     Type
 20848 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 20849 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 20850 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 20851 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 20852 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 20853 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 20854 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 20855 ;;		 -> cmdbuf(80), 
 20856 ;; Auto vars:     Size  Location     Type
 20857 ;;  a               2   11[BANK0 ] int 
 20858 ;;  sign            1   10[BANK0 ] unsigned char 
 20859 ;; Return value:  Size  Location     Type
 20860 ;;                  2    6[BANK0 ] int 
 20861 ;; Registers used:
 20862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20863 ;; Tracked objects:
 20864 ;;		On entry : C/2
 20865 ;;		On exit  : F/0
 20866 ;;		Unchanged: 0/0
 20867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20868 ;;      Params:         0       2       0       0       0       0       0
 20869 ;;      Locals:         0       3       0       0       0       0       0
 20870 ;;      Temps:          0       2       0       0       0       0       0
 20871 ;;      Totals:         0       7       0       0       0       0       0
 20872 ;;Total ram usage:        7 bytes
 20873 ;; Hardware stack levels used:    1
 20874 ;; Hardware stack levels required when called:    4
 20875 ;; This function calls:
 20876 ;;		_isdigit
 20877 ;;		___wmul
 20878 ;; This function is called by:
 20879 ;;		_doModeVerbose
 20880 ;; This function uses a non-reentrant model
 20881 ;;
 20882                           
 20883                           	psect	text41
 20884  004AE4                     __ptext41:
 20885                           	opt stack 0
 20886  004AE4                     _atoi:
 20887                           	opt stack 25
 20888                           
 20889                           ;incstack = 0
 20890                           ;incstack = 0
 20891  004AE4  D003               	goto	l16903
 20892  004AE6                     l16901:
 20893  004AE6  0100               	movlb	0	; () banked
 20894  004AE8  4B66               	infsnz	atoi@s& (0+255),f,b
 20895  004AEA  2B67               	incf	(atoi@s+1)& (0+255),f,b
 20896  004AEC                     l16903:
 20897  004AEC  0100               	movlb	0	; () banked
 20898  004AEE  D878               	call	PL26	;call to abstracted procedure
 20899  004AF0  64EA               	cpfsgt	fsr0h,c
 20900  004AF2  D003               	bra	u21517
 20901  004AF4  6EEA               	movwf	fsr0h,c
 20902  004AF6  50EF               	movf	indf0,w,c
 20903  004AF8  D003               	bra	u21510
 20904  004AFA                     u21517:
 20905  004AFA  6EF7               	movwf	tblptrh,c
 20906  004AFC  0008               	tblrd		*
 20907  004AFE  50F5               	movf	tablat,w,c
 20908  004B00                     u21510:
 20909  004B00  0A20               	xorlw	32
 20910  004B02  E0F1               	bz	l16901
 20911  004B04  0100               	movlb	0	; () banked
 20912  004B06  D86C               	call	PL26	;call to abstracted procedure
 20913  004B08  64EA               	cpfsgt	fsr0h,c
 20914  004B0A  D003               	bra	u21537
 20915  004B0C  6EEA               	movwf	fsr0h,c
 20916  004B0E  50EF               	movf	indf0,w,c
 20917  004B10  D003               	bra	u21530
 20918  004B12                     u21537:
 20919  004B12  6EF7               	movwf	tblptrh,c
 20920  004B14  0008               	tblrd		*
 20921  004B16  50F5               	movf	tablat,w,c
 20922  004B18                     u21530:
 20923  004B18  0A09               	xorlw	9
 20924  004B1A  E0E5               	bz	l16901
 20925  004B1C  0100               	movlb	0	; () banked
 20926  004B1E  6B6B               	clrf	atoi@a& (0+255),b
 20927  004B20  6B6C               	clrf	(atoi@a+1)& (0+255),b
 20928  004B22  6B6A               	clrf	atoi@sign& (0+255),b
 20929                           
 20930                           ; BSR set to: 0
 20931  004B24  D85D               	call	PL26	;call to abstracted procedure
 20932  004B26  64EA               	cpfsgt	fsr0h,c
 20933  004B28  D003               	bra	u21557
 20934  004B2A  6EEA               	movwf	fsr0h,c
 20935  004B2C  50EF               	movf	indf0,w,c
 20936  004B2E  D003               	bra	u21550
 20937  004B30                     u21557:
 20938  004B30  6EF7               	movwf	tblptrh,c
 20939  004B32  0008               	tblrd		*
 20940  004B34  50F5               	movf	tablat,w,c
 20941  004B36                     u21550:
 20942  004B36  0A2D               	xorlw	45
 20943  004B38  E103               	bnz	l16911
 20944  004B3A  0100               	movlb	0	; () banked
 20945  004B3C  2B6A               	incf	atoi@sign& (0+255),f,b
 20946  004B3E  D00D               	goto	L32
 20947  004B40                     l16911:
 20948  004B40  0100               	movlb	0	; () banked
 20949  004B42  D84E               	call	PL26	;call to abstracted procedure
 20950  004B44  64EA               	cpfsgt	fsr0h,c
 20951  004B46  D003               	bra	u21577
 20952  004B48  6EEA               	movwf	fsr0h,c
 20953  004B4A  50EF               	movf	indf0,w,c
 20954  004B4C  D003               	bra	u21570
 20955  004B4E                     u21577:
 20956  004B4E  6EF7               	movwf	tblptrh,c
 20957  004B50  0008               	tblrd		*
 20958  004B52  50F5               	movf	tablat,w,c
 20959  004B54                     u21570:
 20960  004B54  0A2B               	xorlw	43
 20961  004B56  E122               	bnz	l16919
 20962  004B58                     l16913:
 20963  004B58  0100               	movlb	0	; () banked
 20964  004B5A                     L32:
 20965  004B5A  4B66               	infsnz	atoi@s& (0+255),f,b
 20966  004B5C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 20967  004B5E  D01E               	goto	l16919
 20968  004B60                     l16915:
 20969  004B60  C06B  F060         	movff	atoi@a,?___wmul
 20970  004B64  C06C  F061         	movff	atoi@a+1,?___wmul+1
 20971  004B68  0100               	movlb	0	; () banked
 20972  004B6A  6B63               	clrf	(?___wmul+3)& (0+255),b
 20973  004B6C  0E0A               	movlw	10
 20974  004B6E  6F62               	movwf	(?___wmul+2)& (0+255),b
 20975  004B70  EC9A  F033         	call	___wmul	;wreg free
 20976  004B74  D835               	call	PL26	;call to abstracted procedure
 20977  004B76  64EA               	cpfsgt	fsr0h,c
 20978  004B78  D003               	bra	u21597
 20979  004B7A  6EEA               	movwf	fsr0h,c
 20980  004B7C  50EF               	movf	indf0,w,c
 20981  004B7E  D003               	bra	u21590
 20982  004B80                     u21597:
 20983  004B80  6EF7               	movwf	tblptrh,c
 20984  004B82  0008               	tblrd		*
 20985  004B84  50F5               	movf	tablat,w,c
 20986  004B86                     u21590:
 20987  004B86  0100               	movlb	0	; () banked
 20988  004B88  2760               	addwf	?___wmul& (0+255),f,b
 20989  004B8A  0E00               	movlw	0
 20990  004B8C  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 20991  004B8E  0ED0               	movlw	208
 20992  004B90  2560               	addwf	?___wmul& (0+255),w,b
 20993  004B92  6F6B               	movwf	atoi@a& (0+255),b
 20994  004B94  0EFF               	movlw	255
 20995  004B96  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 20996  004B98  6F6C               	movwf	(atoi@a+1)& (0+255),b
 20997  004B9A  D7DE               	goto	l16913
 20998  004B9C                     l16919:
 20999  004B9C  0100               	movlb	0	; () banked
 21000  004B9E  D820               	call	PL26	;call to abstracted procedure
 21001  004BA0  64EA               	cpfsgt	fsr0h,c
 21002  004BA2  D003               	bra	u21607
 21003  004BA4  6EEA               	movwf	fsr0h,c
 21004  004BA6  50EF               	movf	indf0,w,c
 21005  004BA8  D003               	bra	u21600
 21006  004BAA                     u21607:
 21007  004BAA  6EF7               	movwf	tblptrh,c
 21008  004BAC  0008               	tblrd		*
 21009  004BAE  50F5               	movf	tablat,w,c
 21010  004BB0                     u21600:
 21011  004BB0  EC2C  F034         	call	_isdigit
 21012  004BB4  E2D5               	bc	l16915
 21013  004BB6  0100               	movlb	0	; () banked
 21014  004BB8  516A               	movf	atoi@sign& (0+255),w,b
 21015  004BBA  E00D               	bz	l2217
 21016                           
 21017                           ; BSR set to: 0
 21018  004BBC  C06B  F068         	movff	atoi@a,??_atoi
 21019  004BC0  C06C  F069         	movff	atoi@a+1,??_atoi+1
 21020  004BC4  1F68               	comf	??_atoi& (0+255),f,b
 21021  004BC6  1F69               	comf	(??_atoi+1)& (0+255),f,b
 21022  004BC8  4B68               	infsnz	??_atoi& (0+255),f,b
 21023  004BCA  2B69               	incf	(??_atoi+1)& (0+255),f,b
 21024  004BCC  C068  F066         	movff	??_atoi,?_atoi
 21025  004BD0  C069  F067         	movff	??_atoi+1,?_atoi+1
 21026  004BD4  D004               	goto	l2218
 21027  004BD6                     l2217:
 21028                           
 21029                           ; BSR set to: 0
 21030  004BD6  C06B  F066         	movff	atoi@a,?_atoi
 21031  004BDA  C06C  F067         	movff	atoi@a+1,?_atoi+1
 21032  004BDE                     l2218:
 21033                           
 21034                           ; BSR set to: 0
 21035  004BDE  0012               	return	
 21036  004BE0                     __end_of_atoi:
 21037                           	opt stack 0
 21038  004BE0                     PL26:
 21039                           	opt stack 25
 21040  004BE0  5166               	movf	atoi@s& (0+255),w,b
 21041  004BE2  6EF6               	movwf	tblptrl,c
 21042  004BE4  6EE9               	movwf	fsr0l,c
 21043  004BE6  0E05               	movlw	(high __ramtop+-1)
 21044  004BE8  6EEA               	movwf	fsr0h,c
 21045  004BEA  5167               	movf	(atoi@s+1)& (0+255),w,b
 21046  004BEC  0012               	return	
 21047  004BEE                     __end_ofPL26:
 21048                           	opt stack 0
 21049                           tblptru	equ	0xFF8
 21050                           tblptrh	equ	0xFF7
 21051                           tblptrl	equ	0xFF6
 21052                           tablat	equ	0xFF5
 21053                           prodh	equ	0xFF4
 21054                           prodl	equ	0xFF3
 21055                           intcon	equ	0xFF2
 21056                           indf0	equ	0xFEF
 21057                           postinc0	equ	0xFEE
 21058                           fsr0h	equ	0xFEA
 21059                           fsr0l	equ	0xFE9
 21060                           wreg	equ	0xFE8
 21061                           indf1	equ	0xFE7
 21062                           postinc1	equ	0xFE6
 21063                           postdec1	equ	0xFE5
 21064                           fsr1h	equ	0xFE2
 21065                           fsr1l	equ	0xFE1
 21066                           indf2	equ	0xFDF
 21067                           postinc2	equ	0xFDE
 21068                           postdec2	equ	0xFDD
 21069                           plusw2	equ	0xFDB
 21070                           fsr2h	equ	0xFDA
 21071                           fsr2l	equ	0xFD9
 21072                           status	equ	0xFD8
 21073                           
 21074 ;; *************** function _strtok *****************
 21075 ;; Defined at:
 21076 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 21077 ;; Parameters:    Size  Location     Type
 21078 ;;  s1              2    8[BANK0 ] PTR unsigned char 
 21079 ;;		 -> NULL(0), cmdbuf(80), 
 21080 ;;  s2              2   10[BANK0 ] PTR const unsigned char 
 21081 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21082 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21083 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21084 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21085 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21086 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21087 ;; Auto vars:     Size  Location     Type
 21088 ;;		None
 21089 ;; Return value:  Size  Location     Type
 21090 ;;                  2    8[BANK0 ] PTR unsigned char 
 21091 ;; Registers used:
 21092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21093 ;; Tracked objects:
 21094 ;;		On entry : F/0
 21095 ;;		On exit  : F/0
 21096 ;;		Unchanged: 0/0
 21097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21098 ;;      Params:         0       4       0       0       0       0       0
 21099 ;;      Locals:         0       0       0       0       0       0       0
 21100 ;;      Temps:          0       0       0       0       0       0       0
 21101 ;;      Totals:         0       4       0       0       0       0       0
 21102 ;;Total ram usage:        4 bytes
 21103 ;; Hardware stack levels used:    1
 21104 ;; Hardware stack levels required when called:    5
 21105 ;; This function calls:
 21106 ;;		_strspn
 21107 ;;		_strcspn
 21108 ;; This function is called by:
 21109 ;;		_doModeVerbose
 21110 ;; This function uses a non-reentrant model
 21111 ;;
 21112                           
 21113                           	psect	text42
 21114  005C00                     __ptext42:
 21115                           	opt stack 0
 21116  005C00                     _strtok:
 21117                           	opt stack 24
 21118                           
 21119                           ; BSR set to: 0
 21120                           
 21121                           ; BSR set to: 0
 21122                           ;incstack = 0
 21123                           ;incstack = 0
 21124  005C00  5169               	movf	(strtok@s1+1)& (0+255),w,b
 21125  005C02  1168               	iorwf	strtok@s1& (0+255),w,b
 21126  005C04  E104               	bnz	l16881
 21127                           
 21128                           ; BSR set to: 0
 21129  005C06  C02A  F068         	movff	strtok@sp,strtok@s1
 21130  005C0A  C02B  F069         	movff	strtok@sp+1,strtok@s1+1
 21131  005C0E                     l16881:
 21132                           
 21133                           ; BSR set to: 0
 21134  005C0E  5169               	movf	(strtok@s1+1)& (0+255),w,b
 21135  005C10  1168               	iorwf	strtok@s1& (0+255),w,b
 21136  005C12  E017               	bz	L33
 21137                           
 21138                           ; BSR set to: 0
 21139                           
 21140                           ; BSR set to: 0
 21141  005C14  C068  F062         	movff	strtok@s1,?_strspn
 21142  005C18  C069  F063         	movff	strtok@s1+1,?_strspn+1
 21143  005C1C  C06A  F064         	movff	strtok@s2,?_strspn+2
 21144  005C20  C06B  F065         	movff	strtok@s2+1,?_strspn+3
 21145  005C24  EC4C  F032         	call	_strspn	;wreg free
 21146  005C28  0100               	movlb	0	; () banked
 21147  005C2A  5162               	movf	?_strspn& (0+255),w,b
 21148  005C2C  2768               	addwf	strtok@s1& (0+255),f,b
 21149  005C2E  5163               	movf	(?_strspn+1)& (0+255),w,b
 21150  005C30  2369               	addwfc	(strtok@s1+1)& (0+255),f,b
 21151                           
 21152                           ; BSR set to: 0
 21153  005C32  C068  FFD9         	movff	strtok@s1,fsr2l
 21154  005C36  C069  FFDA         	movff	strtok@s1+1,fsr2h
 21155  005C3A  50DF               	movf	indf2,w,c
 21156  005C3C  E105               	bnz	l16891
 21157                           
 21158                           ; BSR set to: 0
 21159  005C3E  6A2A               	clrf	strtok@sp,c
 21160  005C40  6A2B               	clrf	strtok@sp+1,c
 21161  005C42                     L33:
 21162  005C42  6B68               	clrf	?_strtok& (0+255),b
 21163  005C44  6B69               	clrf	(?_strtok+1)& (0+255),b
 21164  005C46  D026               	goto	l2710
 21165  005C48                     l16891:
 21166                           
 21167                           ; BSR set to: 0
 21168  005C48  C068  F062         	movff	strtok@s1,?_strcspn
 21169  005C4C  C069  F063         	movff	strtok@s1+1,?_strcspn+1
 21170  005C50  C06A  F064         	movff	strtok@s2,?_strcspn+2
 21171  005C54  C06B  F065         	movff	strtok@s2+1,?_strcspn+3
 21172  005C58  EC29  F032         	call	_strcspn	;wreg free
 21173  005C5C  0100               	movlb	0	; () banked
 21174  005C5E  5162               	movf	?_strcspn& (0+255),w,b
 21175  005C60  2568               	addwf	strtok@s1& (0+255),w,b
 21176  005C62  6E2A               	movwf	strtok@sp,c
 21177  005C64  5163               	movf	(?_strcspn+1)& (0+255),w,b
 21178  005C66  2169               	addwfc	(strtok@s1+1)& (0+255),w,b
 21179  005C68  6E2B               	movwf	strtok@sp+1,c
 21180                           
 21181                           ; BSR set to: 0
 21182  005C6A  C02A  FFD9         	movff	strtok@sp,fsr2l
 21183  005C6E  C02B  FFDA         	movff	strtok@sp+1,fsr2h
 21184  005C72  50DF               	movf	indf2,w,c
 21185  005C74  E009               	bz	l2712
 21186                           
 21187                           ; BSR set to: 0
 21188  005C76  C02A  FFD9         	movff	strtok@sp,fsr2l
 21189  005C7A  C02B  FFDA         	movff	strtok@sp+1,fsr2h
 21190  005C7E  0E00               	movlw	0
 21191  005C80  6EDF               	movwf	indf2,c
 21192                           
 21193                           ; BSR set to: 0
 21194  005C82  4A2A               	infsnz	strtok@sp,f,c
 21195  005C84  2A2B               	incf	strtok@sp+1,f,c
 21196  005C86  D002               	goto	l2713
 21197  005C88                     l2712:
 21198                           
 21199                           ; BSR set to: 0
 21200  005C88  6A2A               	clrf	strtok@sp,c
 21201  005C8A  6A2B               	clrf	strtok@sp+1,c
 21202  005C8C                     l2713:
 21203                           
 21204                           ; BSR set to: 0
 21205  005C8C  C068  F068         	movff	strtok@s1,?_strtok
 21206  005C90  C069  F069         	movff	strtok@s1+1,?_strtok+1
 21207  005C94                     l2710:
 21208                           
 21209                           ; BSR set to: 0
 21210  005C94  0012               	return	
 21211  005C96                     __end_of_strtok:
 21212                           	opt stack 0
 21213                           tblptru	equ	0xFF8
 21214                           tblptrh	equ	0xFF7
 21215                           tblptrl	equ	0xFF6
 21216                           tablat	equ	0xFF5
 21217                           prodh	equ	0xFF4
 21218                           prodl	equ	0xFF3
 21219                           intcon	equ	0xFF2
 21220                           indf0	equ	0xFEF
 21221                           postinc0	equ	0xFEE
 21222                           fsr0h	equ	0xFEA
 21223                           fsr0l	equ	0xFE9
 21224                           wreg	equ	0xFE8
 21225                           indf1	equ	0xFE7
 21226                           postinc1	equ	0xFE6
 21227                           postdec1	equ	0xFE5
 21228                           fsr1h	equ	0xFE2
 21229                           fsr1l	equ	0xFE1
 21230                           indf2	equ	0xFDF
 21231                           postinc2	equ	0xFDE
 21232                           postdec2	equ	0xFDD
 21233                           plusw2	equ	0xFDB
 21234                           fsr2h	equ	0xFDA
 21235                           fsr2l	equ	0xFD9
 21236                           status	equ	0xFD8
 21237                           
 21238 ;; *************** function _strcspn *****************
 21239 ;; Defined at:
 21240 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 21241 ;; Parameters:    Size  Location     Type
 21242 ;;  s1              2    2[BANK0 ] PTR const unsigned char 
 21243 ;;		 -> NULL(0), cmdbuf(80), 
 21244 ;;  s2              2    4[BANK0 ] PTR const unsigned char 
 21245 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21246 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21247 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21248 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21249 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21250 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21251 ;; Auto vars:     Size  Location     Type
 21252 ;;  i               2    6[BANK0 ] unsigned int 
 21253 ;; Return value:  Size  Location     Type
 21254 ;;                  2    2[BANK0 ] unsigned int 
 21255 ;; Registers used:
 21256 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21257 ;; Tracked objects:
 21258 ;;		On entry : F/0
 21259 ;;		On exit  : 0/0
 21260 ;;		Unchanged: 0/0
 21261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21262 ;;      Params:         0       4       0       0       0       0       0
 21263 ;;      Locals:         0       2       0       0       0       0       0
 21264 ;;      Temps:          0       0       0       0       0       0       0
 21265 ;;      Totals:         0       6       0       0       0       0       0
 21266 ;;Total ram usage:        6 bytes
 21267 ;; Hardware stack levels used:    1
 21268 ;; Hardware stack levels required when called:    4
 21269 ;; This function calls:
 21270 ;;		_strchr
 21271 ;; This function is called by:
 21272 ;;		_strtok
 21273 ;; This function uses a non-reentrant model
 21274 ;;
 21275                           
 21276                           	psect	text43
 21277  006452                     __ptext43:
 21278                           	opt stack 0
 21279  006452                     _strcspn:
 21280                           	opt stack 24
 21281                           
 21282                           ; BSR set to: 0
 21283                           
 21284                           ; BSR set to: 0
 21285                           ;incstack = 0
 21286                           ;incstack = 0
 21287  006452  6B66               	clrf	strcspn@i& (0+255),b
 21288  006454  6B67               	clrf	(strcspn@i+1)& (0+255),b
 21289  006456  D005               	goto	l18455
 21290  006458                     l18453:
 21291  006458  0100               	movlb	0	; () banked
 21292  00645A  4B62               	infsnz	strcspn@s1& (0+255),f,b
 21293  00645C  2B63               	incf	(strcspn@s1+1)& (0+255),f,b
 21294  00645E  4B66               	infsnz	strcspn@i& (0+255),f,b
 21295  006460  2B67               	incf	(strcspn@i+1)& (0+255),f,b
 21296  006462                     l18455:
 21297                           
 21298                           ; BSR set to: 0
 21299  006462  C062  FFD9         	movff	strcspn@s1,fsr2l
 21300  006466  C063  FFDA         	movff	strcspn@s1+1,fsr2h
 21301  00646A  50DF               	movf	indf2,w,c
 21302  00646C  E010               	bz	l2737
 21303                           
 21304                           ; BSR set to: 0
 21305  00646E  C064  F01F         	movff	strcspn@s2,?_strchr
 21306  006472  C065  F020         	movff	strcspn@s2+1,?_strchr+1
 21307  006476  C062  FFD9         	movff	strcspn@s1,fsr2l
 21308  00647A  C063  FFDA         	movff	strcspn@s1+1,fsr2h
 21309  00647E  50DF               	movf	indf2,w,c
 21310  006480  6E21               	movwf	?_strchr+2,c
 21311  006482  6A22               	clrf	?_strchr+3,c
 21312  006484  ECD1  F030         	call	_strchr	;wreg free
 21313  006488  5020               	movf	?_strchr+1,w,c
 21314  00648A  101F               	iorwf	?_strchr,w,c
 21315  00648C  E0E5               	bz	l18453
 21316  00648E                     l2737:
 21317  00648E  C066  F062         	movff	strcspn@i,?_strcspn
 21318  006492  C067  F063         	movff	strcspn@i+1,?_strcspn+1
 21319  006496  0012               	return	
 21320  006498                     __end_of_strcspn:
 21321                           	opt stack 0
 21322                           tblptru	equ	0xFF8
 21323                           tblptrh	equ	0xFF7
 21324                           tblptrl	equ	0xFF6
 21325                           tablat	equ	0xFF5
 21326                           prodh	equ	0xFF4
 21327                           prodl	equ	0xFF3
 21328                           intcon	equ	0xFF2
 21329                           indf0	equ	0xFEF
 21330                           postinc0	equ	0xFEE
 21331                           fsr0h	equ	0xFEA
 21332                           fsr0l	equ	0xFE9
 21333                           wreg	equ	0xFE8
 21334                           indf1	equ	0xFE7
 21335                           postinc1	equ	0xFE6
 21336                           postdec1	equ	0xFE5
 21337                           fsr1h	equ	0xFE2
 21338                           fsr1l	equ	0xFE1
 21339                           indf2	equ	0xFDF
 21340                           postinc2	equ	0xFDE
 21341                           postdec2	equ	0xFDD
 21342                           plusw2	equ	0xFDB
 21343                           fsr2h	equ	0xFDA
 21344                           fsr2l	equ	0xFD9
 21345                           status	equ	0xFD8
 21346                           
 21347 ;; *************** function _strspn *****************
 21348 ;; Defined at:
 21349 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 21350 ;; Parameters:    Size  Location     Type
 21351 ;;  s1              2    2[BANK0 ] PTR const unsigned char 
 21352 ;;		 -> NULL(0), cmdbuf(80), 
 21353 ;;  s2              2    4[BANK0 ] PTR const unsigned char 
 21354 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21355 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21356 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21357 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21358 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21359 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21360 ;; Auto vars:     Size  Location     Type
 21361 ;;  i               2    6[BANK0 ] unsigned int 
 21362 ;; Return value:  Size  Location     Type
 21363 ;;                  2    2[BANK0 ] unsigned int 
 21364 ;; Registers used:
 21365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21366 ;; Tracked objects:
 21367 ;;		On entry : F/0
 21368 ;;		On exit  : 0/0
 21369 ;;		Unchanged: 0/0
 21370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21371 ;;      Params:         0       4       0       0       0       0       0
 21372 ;;      Locals:         0       2       0       0       0       0       0
 21373 ;;      Temps:          0       0       0       0       0       0       0
 21374 ;;      Totals:         0       6       0       0       0       0       0
 21375 ;;Total ram usage:        6 bytes
 21376 ;; Hardware stack levels used:    1
 21377 ;; Hardware stack levels required when called:    4
 21378 ;; This function calls:
 21379 ;;		_strchr
 21380 ;; This function is called by:
 21381 ;;		_strtok
 21382 ;; This function uses a non-reentrant model
 21383 ;;
 21384                           
 21385                           	psect	text44
 21386  006498                     __ptext44:
 21387                           	opt stack 0
 21388  006498                     _strspn:
 21389                           	opt stack 24
 21390                           
 21391                           ; BSR set to: 0
 21392                           
 21393                           ;incstack = 0
 21394                           ;incstack = 0
 21395  006498  6B66               	clrf	strspn@i& (0+255),b
 21396  00649A  6B67               	clrf	(strspn@i+1)& (0+255),b
 21397  00649C  D005               	goto	l18447
 21398  00649E                     l18445:
 21399  00649E  0100               	movlb	0	; () banked
 21400  0064A0  4B62               	infsnz	strspn@s1& (0+255),f,b
 21401  0064A2  2B63               	incf	(strspn@s1+1)& (0+255),f,b
 21402  0064A4  4B66               	infsnz	strspn@i& (0+255),f,b
 21403  0064A6  2B67               	incf	(strspn@i+1)& (0+255),f,b
 21404  0064A8                     l18447:
 21405                           
 21406                           ; BSR set to: 0
 21407  0064A8  C062  FFD9         	movff	strspn@s1,fsr2l
 21408  0064AC  C063  FFDA         	movff	strspn@s1+1,fsr2h
 21409  0064B0  50DF               	movf	indf2,w,c
 21410  0064B2  E010               	bz	l2756
 21411                           
 21412                           ; BSR set to: 0
 21413  0064B4  C064  F01F         	movff	strspn@s2,?_strchr
 21414  0064B8  C065  F020         	movff	strspn@s2+1,?_strchr+1
 21415  0064BC  C062  FFD9         	movff	strspn@s1,fsr2l
 21416  0064C0  C063  FFDA         	movff	strspn@s1+1,fsr2h
 21417  0064C4  50DF               	movf	indf2,w,c
 21418  0064C6  6E21               	movwf	?_strchr+2,c
 21419  0064C8  6A22               	clrf	?_strchr+3,c
 21420  0064CA  ECD1  F030         	call	_strchr	;wreg free
 21421  0064CE  5020               	movf	?_strchr+1,w,c
 21422  0064D0  101F               	iorwf	?_strchr,w,c
 21423  0064D2  E1E5               	bnz	l18445
 21424  0064D4                     l2756:
 21425  0064D4  C066  F062         	movff	strspn@i,?_strspn
 21426  0064D8  C067  F063         	movff	strspn@i+1,?_strspn+1
 21427  0064DC  0012               	return	
 21428  0064DE                     __end_of_strspn:
 21429                           	opt stack 0
 21430                           tblptru	equ	0xFF8
 21431                           tblptrh	equ	0xFF7
 21432                           tblptrl	equ	0xFF6
 21433                           tablat	equ	0xFF5
 21434                           prodh	equ	0xFF4
 21435                           prodl	equ	0xFF3
 21436                           intcon	equ	0xFF2
 21437                           indf0	equ	0xFEF
 21438                           postinc0	equ	0xFEE
 21439                           fsr0h	equ	0xFEA
 21440                           fsr0l	equ	0xFE9
 21441                           wreg	equ	0xFE8
 21442                           indf1	equ	0xFE7
 21443                           postinc1	equ	0xFE6
 21444                           postdec1	equ	0xFE5
 21445                           fsr1h	equ	0xFE2
 21446                           fsr1l	equ	0xFE1
 21447                           indf2	equ	0xFDF
 21448                           postinc2	equ	0xFDE
 21449                           postdec2	equ	0xFDD
 21450                           plusw2	equ	0xFDB
 21451                           fsr2h	equ	0xFDA
 21452                           fsr2l	equ	0xFD9
 21453                           status	equ	0xFD8
 21454                           
 21455 ;; *************** function _strchr *****************
 21456 ;; Defined at:
 21457 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 21458 ;; Parameters:    Size  Location     Type
 21459 ;;  ptr             2   30[COMRAM] PTR const unsigned char 
 21460 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21461 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21462 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21463 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21464 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21465 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 21466 ;;		 -> cmdbuf(80), 
 21467 ;;  chr             2   32[COMRAM] int 
 21468 ;; Auto vars:     Size  Location     Type
 21469 ;;		None
 21470 ;; Return value:  Size  Location     Type
 21471 ;;                  2   30[COMRAM] PTR unsigned char 
 21472 ;; Registers used:
 21473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21474 ;; Tracked objects:
 21475 ;;		On entry : D/2
 21476 ;;		On exit  : 0/0
 21477 ;;		Unchanged: 0/0
 21478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21479 ;;      Params:         4       0       0       0       0       0       0
 21480 ;;      Locals:         0       0       0       0       0       0       0
 21481 ;;      Temps:          0       2       0       0       0       0       0
 21482 ;;      Totals:         4       2       0       0       0       0       0
 21483 ;;Total ram usage:        6 bytes
 21484 ;; Hardware stack levels used:    1
 21485 ;; Hardware stack levels required when called:    3
 21486 ;; This function calls:
 21487 ;;		Nothing
 21488 ;; This function is called by:
 21489 ;;		_doModeVerbose
 21490 ;;		_strcspn
 21491 ;;		_strspn
 21492 ;; This function uses a non-reentrant model
 21493 ;;
 21494                           
 21495                           	psect	text45
 21496  0061A2                     __ptext45:
 21497                           	opt stack 0
 21498  0061A2                     _strchr:
 21499                           	opt stack 26
 21500  0061A2                     l2658:
 21501  0061A2  501F               	movf	strchr@ptr,w,c
 21502  0061A4  6EF6               	movwf	tblptrl,c
 21503  0061A6  6EE9               	movwf	fsr0l,c
 21504  0061A8  0E05               	movlw	(high __ramtop+-1)
 21505  0061AA  6EEA               	movwf	fsr0h,c
 21506  0061AC  5020               	movf	strchr@ptr+1,w,c
 21507  0061AE  64EA               	cpfsgt	fsr0h,c
 21508  0061B0  D003               	bra	u21887
 21509  0061B2  6EEA               	movwf	fsr0h,c
 21510  0061B4  50EF               	movf	indf0,w,c
 21511  0061B6  D003               	bra	u21880
 21512  0061B8                     u21887:
 21513  0061B8  6EF7               	movwf	tblptrh,c
 21514  0061BA  0008               	tblrd		*
 21515  0061BC  50F5               	movf	tablat,w,c
 21516  0061BE                     u21880:
 21517  0061BE  1821               	xorwf	strchr@chr,w,c
 21518  0061C0  E105               	bnz	l17179
 21519  0061C2  C01F  F01F         	movff	strchr@ptr,?_strchr
 21520  0061C6  C020  F020         	movff	strchr@ptr+1,?_strchr+1
 21521  0061CA  D019               	goto	l2660
 21522  0061CC                     l17179:
 21523  0061CC  501F               	movf	strchr@ptr,w,c
 21524  0061CE  0100               	movlb	0	; () banked
 21525  0061D0  6F60               	movwf	??_strchr& (0+255),b
 21526  0061D2  5020               	movf	strchr@ptr+1,w,c
 21527  0061D4  6F61               	movwf	(??_strchr+1)& (0+255),b
 21528  0061D6  4A1F               	infsnz	strchr@ptr,f,c
 21529  0061D8  2A20               	incf	strchr@ptr+1,f,c
 21530  0061DA  5160               	movf	??_strchr& (0+255),w,b
 21531  0061DC  6EF6               	movwf	tblptrl,c
 21532  0061DE  6EE9               	movwf	fsr0l,c
 21533  0061E0  0E05               	movlw	(high __ramtop+-1)
 21534  0061E2  6EEA               	movwf	fsr0h,c
 21535  0061E4  5161               	movf	(??_strchr+1)& (0+255),w,b
 21536  0061E6  64EA               	cpfsgt	fsr0h,c
 21537  0061E8  D003               	bra	u21907
 21538  0061EA  6EEA               	movwf	fsr0h,c
 21539  0061EC  50EF               	movf	indf0,w,c
 21540  0061EE  D003               	bra	u21900
 21541  0061F0                     u21907:
 21542  0061F0  6EF7               	movwf	tblptrh,c
 21543  0061F2  0008               	tblrd		*
 21544  0061F4  50F5               	movf	tablat,w,c
 21545  0061F6                     u21900:
 21546  0061F6  0900               	iorlw	0
 21547  0061F8  E1D4               	bnz	l2658
 21548  0061FA  6A1F               	clrf	?_strchr,c
 21549  0061FC  6A20               	clrf	?_strchr+1,c
 21550  0061FE                     l2660:
 21551  0061FE  0012               	return	
 21552  006200                     __end_of_strchr:
 21553                           	opt stack 0
 21554                           tblptru	equ	0xFF8
 21555                           tblptrh	equ	0xFF7
 21556                           tblptrl	equ	0xFF6
 21557                           tablat	equ	0xFF5
 21558                           prodh	equ	0xFF4
 21559                           prodl	equ	0xFF3
 21560                           intcon	equ	0xFF2
 21561                           indf0	equ	0xFEF
 21562                           postinc0	equ	0xFEE
 21563                           fsr0h	equ	0xFEA
 21564                           fsr0l	equ	0xFE9
 21565                           wreg	equ	0xFE8
 21566                           indf1	equ	0xFE7
 21567                           postinc1	equ	0xFE6
 21568                           postdec1	equ	0xFE5
 21569                           fsr1h	equ	0xFE2
 21570                           fsr1l	equ	0xFE1
 21571                           indf2	equ	0xFDF
 21572                           postinc2	equ	0xFDE
 21573                           postdec2	equ	0xFDD
 21574                           plusw2	equ	0xFDB
 21575                           fsr2h	equ	0xFDA
 21576                           fsr2l	equ	0xFD9
 21577                           status	equ	0xFD8
 21578                           
 21579 ;; *************** function _stristr *****************
 21580 ;; Defined at:
 21581 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 21582 ;; Parameters:    Size  Location     Type
 21583 ;;  s1              2    8[BANK0 ] PTR const unsigned char 
 21584 ;;		 -> NULL(0), cmdbuf(80), 
 21585 ;;  s2              2   10[BANK0 ] PTR const unsigned char 
 21586 ;;		 -> STR_167(2), STR_166(9), STR_165(10), STR_162(4), 
 21587 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 21588 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 21589 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 21590 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 21591 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 21592 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 21593 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 21594 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 21595 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 21596 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 21597 ;; Auto vars:     Size  Location     Type
 21598 ;;		None
 21599 ;; Return value:  Size  Location     Type
 21600 ;;                  2    8[BANK0 ] PTR unsigned char 
 21601 ;; Registers used:
 21602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21603 ;; Tracked objects:
 21604 ;;		On entry : F/0
 21605 ;;		On exit  : F/0
 21606 ;;		Unchanged: 0/0
 21607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21608 ;;      Params:         0       4       0       0       0       0       0
 21609 ;;      Locals:         0       0       0       0       0       0       0
 21610 ;;      Temps:          0       0       0       0       0       0       0
 21611 ;;      Totals:         0       4       0       0       0       0       0
 21612 ;;Total ram usage:        4 bytes
 21613 ;; Hardware stack levels used:    1
 21614 ;; Hardware stack levels required when called:    5
 21615 ;; This function calls:
 21616 ;;		_strlen
 21617 ;;		_strnicmp
 21618 ;;		_strichr
 21619 ;; This function is called by:
 21620 ;;		_doModeVerbose
 21621 ;; This function uses a non-reentrant model
 21622 ;;
 21623                           
 21624                           	psect	text46
 21625  005E2C                     __ptext46:
 21626                           	opt stack 0
 21627  005E2C                     _stristr:
 21628                           	opt stack 24
 21629                           
 21630                           ; BSR set to: 0
 21631                           
 21632                           ;incstack = 0
 21633                           ;incstack = 0
 21634  005E2C  D02F               	goto	l16873
 21635  005E2E                     l16867:
 21636                           
 21637                           ; BSR set to: 0
 21638  005E2E  C068  F060         	movff	stristr@s1,?_strnicmp
 21639  005E32  C069  F061         	movff	stristr@s1+1,?_strnicmp+1
 21640  005E36  C06A  F062         	movff	stristr@s2,?_strnicmp+2
 21641  005E3A  C06B  F063         	movff	stristr@s2+1,?_strnicmp+3
 21642  005E3E  C06A  F01F         	movff	stristr@s2,?_strlen
 21643  005E42  C06B  F020         	movff	stristr@s2+1,?_strlen+1
 21644  005E46  EC0D  F033         	call	_strlen	;wreg free
 21645  005E4A  C01F  F064         	movff	?_strlen,?_strnicmp+4
 21646  005E4E  C020  F065         	movff	?_strlen+1,?_strnicmp+5
 21647  005E52  EC3A  F030         	call	_strnicmp	;wreg free
 21648  005E56  5161               	movf	(?_strnicmp+1)& (0+255),w,b
 21649  005E58  1160               	iorwf	?_strnicmp& (0+255),w,b
 21650  005E5A  E105               	bnz	l16871
 21651                           
 21652                           ; BSR set to: 0
 21653  005E5C  C068  F068         	movff	stristr@s1,?_stristr
 21654  005E60  C069  F069         	movff	stristr@s1+1,?_stristr+1
 21655  005E64  D01F               	goto	l2679
 21656  005E66                     l16871:
 21657                           
 21658                           ; BSR set to: 0
 21659  005E66  2968               	incf	stristr@s1& (0+255),w,b
 21660  005E68  6E20               	movwf	?_strichr,c
 21661  005E6A  0E00               	movlw	0
 21662  005E6C  2169               	addwfc	(stristr@s1+1)& (0+255),w,b
 21663  005E6E  6E21               	movwf	?_strichr+1,c
 21664  005E70  C06A  FFF6         	movff	stristr@s2,tblptrl
 21665  005E74  C06B  FFF7         	movff	stristr@s2+1,tblptrh
 21666  005E78  0008               	tblrd		*
 21667  005E7A  50F5               	movf	tablat,w,c
 21668  005E7C  6E22               	movwf	?_strichr+2,c
 21669  005E7E  6A23               	clrf	?_strichr+3,c
 21670  005E80  ECCF  F032         	call	_strichr	;wreg free
 21671  005E84  C020  F068         	movff	?_strichr,stristr@s1
 21672  005E88  C021  F069         	movff	?_strichr+1,stristr@s1+1
 21673  005E8C                     l16873:
 21674  005E8C  0100               	movlb	0	; () banked
 21675  005E8E  5169               	movf	(stristr@s1+1)& (0+255),w,b
 21676  005E90  1168               	iorwf	stristr@s1& (0+255),w,b
 21677  005E92  E006               	bz	l2682
 21678                           
 21679                           ; BSR set to: 0
 21680  005E94  C068  FFD9         	movff	stristr@s1,fsr2l
 21681  005E98  C069  FFDA         	movff	stristr@s1+1,fsr2h
 21682  005E9C  50DF               	movf	indf2,w,c
 21683  005E9E  E1C7               	bnz	l16867
 21684  005EA0                     l2682:
 21685                           
 21686                           ; BSR set to: 0
 21687  005EA0  6B68               	clrf	?_stristr& (0+255),b
 21688  005EA2  6B69               	clrf	(?_stristr+1)& (0+255),b
 21689  005EA4                     l2679:
 21690                           
 21691                           ; BSR set to: 0
 21692  005EA4  0012               	return	
 21693  005EA6                     __end_of_stristr:
 21694                           	opt stack 0
 21695                           tblptru	equ	0xFF8
 21696                           tblptrh	equ	0xFF7
 21697                           tblptrl	equ	0xFF6
 21698                           tablat	equ	0xFF5
 21699                           prodh	equ	0xFF4
 21700                           prodl	equ	0xFF3
 21701                           intcon	equ	0xFF2
 21702                           indf0	equ	0xFEF
 21703                           postinc0	equ	0xFEE
 21704                           fsr0h	equ	0xFEA
 21705                           fsr0l	equ	0xFE9
 21706                           wreg	equ	0xFE8
 21707                           indf1	equ	0xFE7
 21708                           postinc1	equ	0xFE6
 21709                           postdec1	equ	0xFE5
 21710                           fsr1h	equ	0xFE2
 21711                           fsr1l	equ	0xFE1
 21712                           indf2	equ	0xFDF
 21713                           postinc2	equ	0xFDE
 21714                           postdec2	equ	0xFDD
 21715                           plusw2	equ	0xFDB
 21716                           fsr2h	equ	0xFDA
 21717                           fsr2l	equ	0xFD9
 21718                           status	equ	0xFD8
 21719                           
 21720 ;; *************** function _strichr *****************
 21721 ;; Defined at:
 21722 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 21723 ;; Parameters:    Size  Location     Type
 21724 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
 21725 ;;		 -> NULL(0), cmdbuf(80), 
 21726 ;;  chr             2   33[COMRAM] int 
 21727 ;; Auto vars:     Size  Location     Type
 21728 ;;		None
 21729 ;; Return value:  Size  Location     Type
 21730 ;;                  2   31[COMRAM] PTR unsigned char 
 21731 ;; Registers used:
 21732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21733 ;; Tracked objects:
 21734 ;;		On entry : F/0
 21735 ;;		On exit  : 0/0
 21736 ;;		Unchanged: 0/0
 21737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21738 ;;      Params:         4       0       0       0       0       0       0
 21739 ;;      Locals:         0       0       0       0       0       0       0
 21740 ;;      Temps:          0       0       0       0       0       0       0
 21741 ;;      Totals:         4       0       0       0       0       0       0
 21742 ;;Total ram usage:        4 bytes
 21743 ;; Hardware stack levels used:    1
 21744 ;; Hardware stack levels required when called:    4
 21745 ;; This function calls:
 21746 ;;		_toupper
 21747 ;; This function is called by:
 21748 ;;		_stristr
 21749 ;; This function uses a non-reentrant model
 21750 ;;
 21751                           
 21752                           	psect	text47
 21753  00659E                     __ptext47:
 21754                           	opt stack 0
 21755  00659E                     _strichr:
 21756                           	opt stack 24
 21757                           
 21758                           ; BSR set to: 0
 21759                           
 21760                           ; BSR set to: 0
 21761                           ;incstack = 0
 21762                           ;incstack = 0
 21763  00659E  5022               	movf	strichr@chr,w,c
 21764  0065A0  EC56  F034         	call	_toupper
 21765  0065A4  6E22               	movwf	strichr@chr,c
 21766  0065A6  6A23               	clrf	strichr@chr+1,c
 21767  0065A8  D010               	goto	l18431
 21768  0065AA                     l18425:
 21769  0065AA  C020  FFD9         	movff	strichr@ptr,fsr2l
 21770  0065AE  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 21771  0065B2  50DF               	movf	indf2,w,c
 21772  0065B4  EC56  F034         	call	_toupper
 21773  0065B8  1822               	xorwf	strichr@chr,w,c
 21774  0065BA  E105               	bnz	l18429
 21775  0065BC  C020  F020         	movff	strichr@ptr,?_strichr
 21776  0065C0  C021  F021         	movff	strichr@ptr+1,?_strichr+1
 21777  0065C4  D00A               	goto	l2746
 21778  0065C6                     l18429:
 21779  0065C6  4A20               	infsnz	strichr@ptr,f,c
 21780  0065C8  2A21               	incf	strichr@ptr+1,f,c
 21781  0065CA                     l18431:
 21782  0065CA  C020  FFD9         	movff	strichr@ptr,fsr2l
 21783  0065CE  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 21784  0065D2  50DF               	movf	indf2,w,c
 21785  0065D4  E1EA               	bnz	l18425
 21786  0065D6  6A20               	clrf	?_strichr,c
 21787  0065D8  6A21               	clrf	?_strichr+1,c
 21788  0065DA                     l2746:
 21789  0065DA  0012               	return	
 21790  0065DC                     __end_of_strichr:
 21791                           	opt stack 0
 21792                           tblptru	equ	0xFF8
 21793                           tblptrh	equ	0xFF7
 21794                           tblptrl	equ	0xFF6
 21795                           tablat	equ	0xFF5
 21796                           prodh	equ	0xFF4
 21797                           prodl	equ	0xFF3
 21798                           intcon	equ	0xFF2
 21799                           indf0	equ	0xFEF
 21800                           postinc0	equ	0xFEE
 21801                           fsr0h	equ	0xFEA
 21802                           fsr0l	equ	0xFE9
 21803                           wreg	equ	0xFE8
 21804                           indf1	equ	0xFE7
 21805                           postinc1	equ	0xFE6
 21806                           postdec1	equ	0xFE5
 21807                           fsr1h	equ	0xFE2
 21808                           fsr1l	equ	0xFE1
 21809                           indf2	equ	0xFDF
 21810                           postinc2	equ	0xFDE
 21811                           postdec2	equ	0xFDD
 21812                           plusw2	equ	0xFDB
 21813                           fsr2h	equ	0xFDA
 21814                           fsr2l	equ	0xFD9
 21815                           status	equ	0xFD8
 21816                           
 21817 ;; *************** function _strnicmp *****************
 21818 ;; Defined at:
 21819 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 21820 ;; Parameters:    Size  Location     Type
 21821 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 21822 ;;		 -> NULL(0), cmdbuf(80), 
 21823 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 21824 ;;		 -> STR_167(2), STR_166(9), STR_165(10), STR_162(4), 
 21825 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 21826 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 21827 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 21828 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 21829 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 21830 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 21831 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 21832 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 21833 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 21834 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 21835 ;;  len             2    4[BANK0 ] unsigned int 
 21836 ;; Auto vars:     Size  Location     Type
 21837 ;;  r               1   34[COMRAM] char 
 21838 ;; Return value:  Size  Location     Type
 21839 ;;                  2    0[BANK0 ] int 
 21840 ;; Registers used:
 21841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21842 ;; Tracked objects:
 21843 ;;		On entry : 0/0
 21844 ;;		On exit  : F/0
 21845 ;;		Unchanged: 0/0
 21846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21847 ;;      Params:         0       6       0       0       0       0       0
 21848 ;;      Locals:         1       0       0       0       0       0       0
 21849 ;;      Temps:          0       2       0       0       0       0       0
 21850 ;;      Totals:         1       8       0       0       0       0       0
 21851 ;;Total ram usage:        9 bytes
 21852 ;; Hardware stack levels used:    1
 21853 ;; Hardware stack levels required when called:    4
 21854 ;; This function calls:
 21855 ;;		_toupper
 21856 ;; This function is called by:
 21857 ;;		_stristr
 21858 ;; This function uses a non-reentrant model
 21859 ;;
 21860                           
 21861                           	psect	text48
 21862  006074                     __ptext48:
 21863                           	opt stack 0
 21864  006074                     _strnicmp:
 21865                           	opt stack 24
 21866                           
 21867                           ;incstack = 0
 21868                           ;incstack = 0
 21869  006074  D02A               	goto	l18421
 21870  006076                     l18411:
 21871                           
 21872                           ; BSR set to: 0
 21873  006076  C062  FFF6         	movff	strnicmp@s2,tblptrl
 21874  00607A  C063  FFF7         	movff	strnicmp@s2+1,tblptrh
 21875  00607E  0008               	tblrd		*
 21876  006080  50F5               	movf	tablat,w,c
 21877  006082  EC56  F034         	call	_toupper
 21878  006086  0100               	movlb	0	; () banked
 21879  006088  6F66               	movwf	??_strnicmp& (0+255),b
 21880  00608A  C060  FFD9         	movff	strnicmp@s1,fsr2l
 21881  00608E  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 21882  006092  50DF               	movf	indf2,w,c
 21883  006094  EC56  F034         	call	_toupper
 21884  006098  0100               	movlb	0	; () banked
 21885  00609A  6F67               	movwf	(??_strnicmp+1)& (0+255),b
 21886  00609C  5166               	movf	??_strnicmp& (0+255),w,b
 21887  00609E  5D67               	subwf	(??_strnicmp+1)& (0+255),w,b
 21888  0060A0  6E23               	movwf	strnicmp@r,c
 21889  0060A2  6623               	tstfsz	strnicmp@r& (0+255),c
 21890  0060A4  D006               	goto	l18415
 21891  0060A6  C060  FFD9         	movff	strnicmp@s1,fsr2l
 21892  0060AA  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 21893  0060AE  50DF               	movf	indf2,w,c
 21894  0060B0  E107               	bnz	l18419
 21895  0060B2                     l18415:
 21896  0060B2  5023               	movf	strnicmp@r,w,c
 21897  0060B4  0100               	movlb	0	; () banked
 21898  0060B6  6F60               	movwf	?_strnicmp& (0+255),b
 21899  0060B8  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 21900  0060BA  BF60               	btfsc	?_strnicmp& (0+255),7,b
 21901  0060BC  0761               	decf	(?_strnicmp+1)& (0+255),f,b
 21902  0060BE  D00F               	goto	l2698
 21903  0060C0                     l18419:
 21904  0060C0  0100               	movlb	0	; () banked
 21905  0060C2  4B60               	infsnz	strnicmp@s1& (0+255),f,b
 21906  0060C4  2B61               	incf	(strnicmp@s1+1)& (0+255),f,b
 21907  0060C6  4B62               	infsnz	strnicmp@s2& (0+255),f,b
 21908  0060C8  2B63               	incf	(strnicmp@s2+1)& (0+255),f,b
 21909  0060CA                     l18421:
 21910  0060CA  0100               	movlb	0	; () banked
 21911  0060CC  0764               	decf	strnicmp@len& (0+255),f,b
 21912  0060CE  A0D8               	btfss	status,0,c
 21913  0060D0  0765               	decf	(strnicmp@len+1)& (0+255),f,b
 21914  0060D2  2964               	incf	strnicmp@len& (0+255),w,b
 21915  0060D4  B4D8               	btfsc	status,2,c
 21916  0060D6  2965               	incf	(strnicmp@len+1)& (0+255),w,b
 21917  0060D8  E1CE               	bnz	l18411
 21918                           
 21919                           ; BSR set to: 0
 21920  0060DA  6B60               	clrf	?_strnicmp& (0+255),b
 21921  0060DC  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 21922  0060DE                     l2698:
 21923                           
 21924                           ; BSR set to: 0
 21925  0060DE  0012               	return	
 21926  0060E0                     __end_of_strnicmp:
 21927                           	opt stack 0
 21928                           tblptru	equ	0xFF8
 21929                           tblptrh	equ	0xFF7
 21930                           tblptrl	equ	0xFF6
 21931                           tablat	equ	0xFF5
 21932                           prodh	equ	0xFF4
 21933                           prodl	equ	0xFF3
 21934                           intcon	equ	0xFF2
 21935                           indf0	equ	0xFEF
 21936                           postinc0	equ	0xFEE
 21937                           fsr0h	equ	0xFEA
 21938                           fsr0l	equ	0xFE9
 21939                           wreg	equ	0xFE8
 21940                           indf1	equ	0xFE7
 21941                           postinc1	equ	0xFE6
 21942                           postdec1	equ	0xFE5
 21943                           fsr1h	equ	0xFE2
 21944                           fsr1l	equ	0xFE1
 21945                           indf2	equ	0xFDF
 21946                           postinc2	equ	0xFDE
 21947                           postdec2	equ	0xFDD
 21948                           plusw2	equ	0xFDB
 21949                           fsr2h	equ	0xFDA
 21950                           fsr2l	equ	0xFD9
 21951                           status	equ	0xFD8
 21952                           
 21953 ;; *************** function _toupper *****************
 21954 ;; Defined at:
 21955 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 21956 ;; Parameters:    Size  Location     Type
 21957 ;;  c               1    wreg     unsigned char 
 21958 ;; Auto vars:     Size  Location     Type
 21959 ;;  c               1   30[COMRAM] unsigned char 
 21960 ;; Return value:  Size  Location     Type
 21961 ;;                  1    wreg      unsigned char 
 21962 ;; Registers used:
 21963 ;;		wreg, status,2, status,0
 21964 ;; Tracked objects:
 21965 ;;		On entry : 0/0
 21966 ;;		On exit  : 0/0
 21967 ;;		Unchanged: 0/0
 21968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21969 ;;      Params:         0       0       0       0       0       0       0
 21970 ;;      Locals:         1       0       0       0       0       0       0
 21971 ;;      Temps:          0       0       0       0       0       0       0
 21972 ;;      Totals:         1       0       0       0       0       0       0
 21973 ;;Total ram usage:        1 bytes
 21974 ;; Hardware stack levels used:    1
 21975 ;; Hardware stack levels required when called:    3
 21976 ;; This function calls:
 21977 ;;		Nothing
 21978 ;; This function is called by:
 21979 ;;		_strnicmp
 21980 ;;		_strichr
 21981 ;; This function uses a non-reentrant model
 21982 ;;
 21983                           
 21984                           	psect	text49
 21985  0068AC                     __ptext49:
 21986                           	opt stack 0
 21987  0068AC                     _toupper:
 21988                           	opt stack 24
 21989                           
 21990                           ; BSR set to: 0
 21991                           ;incstack = 0
 21992                           ;incstack = 0
 21993                           ;toupper@c stored from wreg
 21994  0068AC  CFE8 F01F          	movff	wreg,toupper@c
 21995  0068B0  0E7B               	movlw	123
 21996  0068B2  601F               	cpfslt	toupper@c,c
 21997  0068B4  D004               	goto	l18439
 21998  0068B6  0E60               	movlw	96
 21999  0068B8  641F               	cpfsgt	toupper@c,c
 22000  0068BA  D001               	goto	l18439
 22001  0068BC  9A1F               	bcf	toupper@c,5,c
 22002  0068BE                     l18439:
 22003  0068BE  501F               	movf	toupper@c,w,c
 22004  0068C0  0012               	return	
 22005  0068C2                     __end_of_toupper:
 22006                           	opt stack 0
 22007                           tblptru	equ	0xFF8
 22008                           tblptrh	equ	0xFF7
 22009                           tblptrl	equ	0xFF6
 22010                           tablat	equ	0xFF5
 22011                           prodh	equ	0xFF4
 22012                           prodl	equ	0xFF3
 22013                           intcon	equ	0xFF2
 22014                           indf0	equ	0xFEF
 22015                           postinc0	equ	0xFEE
 22016                           fsr0h	equ	0xFEA
 22017                           fsr0l	equ	0xFE9
 22018                           wreg	equ	0xFE8
 22019                           indf1	equ	0xFE7
 22020                           postinc1	equ	0xFE6
 22021                           postdec1	equ	0xFE5
 22022                           fsr1h	equ	0xFE2
 22023                           fsr1l	equ	0xFE1
 22024                           indf2	equ	0xFDF
 22025                           postinc2	equ	0xFDE
 22026                           postdec2	equ	0xFDD
 22027                           plusw2	equ	0xFDB
 22028                           fsr2h	equ	0xFDA
 22029                           fsr2l	equ	0xFD9
 22030                           status	equ	0xFD8
 22031                           
 22032 ;; *************** function _strlen *****************
 22033 ;; Defined at:
 22034 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 22035 ;; Parameters:    Size  Location     Type
 22036 ;;  s               2   30[COMRAM] PTR const unsigned char 
 22037 ;;		 -> printGUID@buf(3), STR_167(2), STR_166(9), STR_165(10), 
 22038 ;;		 -> STR_162(4), STR_160(3), STR_159(11), STR_156(4), 
 22039 ;;		 -> STR_154(3), STR_153(6), STR_151(6), STR_149(5), 
 22040 ;;		 -> STR_147(8), STR_146(6), STR_145(9), STR_144(7), 
 22041 ;;		 -> STR_143(7), STR_142(5), STR_141(6), STR_140(9), 
 22042 ;;		 -> STR_138(11), STR_136(8), STR_134(4), STR_133(5), 
 22043 ;;		 -> STR_120(5), STR_118(11), STR_105(7), STR_97(5), 
 22044 ;;		 -> STR_81(5), wrkbuf(80), STR_49(5), STR_47(5), 
 22045 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 22046 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 22047 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 22048 ;;		 -> STR_6(5), cmdbuf(80), 
 22049 ;; Auto vars:     Size  Location     Type
 22050 ;;  cp              2   32[COMRAM] PTR const unsigned char 
 22051 ;;		 -> printGUID@buf(3), STR_167(2), STR_166(9), STR_165(10), 
 22052 ;;		 -> STR_162(4), STR_160(3), STR_159(11), STR_156(4), 
 22053 ;;		 -> STR_154(3), STR_153(6), STR_151(6), STR_149(5), 
 22054 ;;		 -> STR_147(8), STR_146(6), STR_145(9), STR_144(7), 
 22055 ;;		 -> STR_143(7), STR_142(5), STR_141(6), STR_140(9), 
 22056 ;;		 -> STR_138(11), STR_136(8), STR_134(4), STR_133(5), 
 22057 ;;		 -> STR_120(5), STR_118(11), STR_105(7), STR_97(5), 
 22058 ;;		 -> STR_81(5), wrkbuf(80), STR_49(5), STR_47(5), 
 22059 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 22060 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 22061 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 22062 ;;		 -> STR_6(5), cmdbuf(80), 
 22063 ;; Return value:  Size  Location     Type
 22064 ;;                  2   30[COMRAM] unsigned int 
 22065 ;; Registers used:
 22066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 22067 ;; Tracked objects:
 22068 ;;		On entry : E/1
 22069 ;;		On exit  : 0/0
 22070 ;;		Unchanged: 0/0
 22071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22072 ;;      Params:         2       0       0       0       0       0       0
 22073 ;;      Locals:         2       0       0       0       0       0       0
 22074 ;;      Temps:          0       0       0       0       0       0       0
 22075 ;;      Totals:         4       0       0       0       0       0       0
 22076 ;;Total ram usage:        4 bytes
 22077 ;; Hardware stack levels used:    1
 22078 ;; Hardware stack levels required when called:    3
 22079 ;; This function calls:
 22080 ;;		Nothing
 22081 ;; This function is called by:
 22082 ;;		_doModeSLCAN
 22083 ;;		_receiveSendEventSLCAN
 22084 ;;		_printGUID
 22085 ;;		_hexStringToBytes
 22086 ;;		_stristr
 22087 ;; This function uses a non-reentrant model
 22088 ;;
 22089                           
 22090                           	psect	text50
 22091  00661A                     __ptext50:
 22092                           	opt stack 0
 22093  00661A                     _strlen:
 22094                           	opt stack 25
 22095                           
 22096                           ;incstack = 0
 22097                           ;incstack = 0
 22098  00661A  C01F  F021         	movff	strlen@s,strlen@cp
 22099  00661E  C020  F022         	movff	strlen@s+1,strlen@cp+1
 22100  006622  D002               	goto	l14447
 22101  006624                     l14445:
 22102  006624  4A21               	infsnz	strlen@cp,f,c
 22103  006626  2A22               	incf	strlen@cp+1,f,c
 22104  006628                     l14447:
 22105  006628  5021               	movf	strlen@cp,w,c
 22106  00662A  6EF6               	movwf	tblptrl,c
 22107  00662C  6EE9               	movwf	fsr0l,c
 22108  00662E  0E05               	movlw	(high __ramtop+-1)
 22109  006630  6EEA               	movwf	fsr0h,c
 22110  006632  5022               	movf	strlen@cp+1,w,c
 22111  006634  64EA               	cpfsgt	fsr0h,c
 22112  006636  D003               	bra	u18137
 22113  006638  6EEA               	movwf	fsr0h,c
 22114  00663A  50EF               	movf	indf0,w,c
 22115  00663C  D003               	bra	u18130
 22116  00663E                     u18137:
 22117  00663E  6EF7               	movwf	tblptrh,c
 22118  006640  0008               	tblrd		*
 22119  006642  50F5               	movf	tablat,w,c
 22120  006644                     u18130:
 22121  006644  0900               	iorlw	0
 22122  006646  E1EE               	bnz	l14445
 22123  006648  501F               	movf	strlen@s,w,c
 22124  00664A  5C21               	subwf	strlen@cp,w,c
 22125  00664C  6E1F               	movwf	?_strlen,c
 22126  00664E  5020               	movf	strlen@s+1,w,c
 22127  006650  5822               	subwfb	strlen@cp+1,w,c
 22128  006652  6E20               	movwf	?_strlen+1,c
 22129  006654  0012               	return	
 22130  006656                     __end_of_strlen:
 22131                           	opt stack 0
 22132                           tblptru	equ	0xFF8
 22133                           tblptrh	equ	0xFF7
 22134                           tblptrl	equ	0xFF6
 22135                           tablat	equ	0xFF5
 22136                           prodh	equ	0xFF4
 22137                           prodl	equ	0xFF3
 22138                           intcon	equ	0xFF2
 22139                           indf0	equ	0xFEF
 22140                           postinc0	equ	0xFEE
 22141                           fsr0h	equ	0xFEA
 22142                           fsr0l	equ	0xFE9
 22143                           wreg	equ	0xFE8
 22144                           indf1	equ	0xFE7
 22145                           postinc1	equ	0xFE6
 22146                           postdec1	equ	0xFE5
 22147                           fsr1h	equ	0xFE2
 22148                           fsr1l	equ	0xFE1
 22149                           indf2	equ	0xFDF
 22150                           postinc2	equ	0xFDE
 22151                           postdec2	equ	0xFDD
 22152                           plusw2	equ	0xFDB
 22153                           fsr2h	equ	0xFDA
 22154                           fsr2l	equ	0xFD9
 22155                           status	equ	0xFD8
 22156                           
 22157 ;; *************** function _receivePrintEventVerbose *****************
 22158 ;; Defined at:
 22159 ;;		line 2204 in file "main.c"
 22160 ;; Parameters:    Size  Location     Type
 22161 ;;		None
 22162 ;; Auto vars:     Size  Location     Type
 22163 ;;  i               1   70[BANK0 ] unsigned char 
 22164 ;; Return value:  Size  Location     Type
 22165 ;;                  1    wreg      enum E15660
 22166 ;; Registers used:
 22167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22168 ;; Tracked objects:
 22169 ;;		On entry : E/1
 22170 ;;		On exit  : 0/0
 22171 ;;		Unchanged: 0/0
 22172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22173 ;;      Params:         0       0       0       0       0       0       0
 22174 ;;      Locals:         0      19       0       0       0       0       0
 22175 ;;      Temps:          0       5       0       0       0       0       0
 22176 ;;      Totals:         0      24       0       0       0       0       0
 22177 ;;Total ram usage:       24 bytes
 22178 ;; Hardware stack levels used:    1
 22179 ;; Hardware stack levels required when called:    6
 22180 ;; This function calls:
 22181 ;;		_putsUSART
 22182 ;;		_sprintf
 22183 ;;		_getVSCPFrame
 22184 ;;		_ReadTimer3
 22185 ;;		___wmul
 22186 ;; This function is called by:
 22187 ;;		_doModeVerbose
 22188 ;; This function uses a non-reentrant model
 22189 ;;
 22190                           
 22191                           	psect	text51
 22192  002B12                     __ptext51:
 22193                           	opt stack 0
 22194  002B12                     _receivePrintEventVerbose:
 22195                           	opt stack 23
 22196                           
 22197                           ;main.c: 2205: uint8_t i;
 22198                           ;main.c: 2207: if ( getVSCPFrame(&vscpClass,
 22199                           ;main.c: 2208: &vscpType,
 22200                           ;main.c: 2209: &vscpNodeId,
 22201                           ;main.c: 2210: &vscpPriority,
 22202                           ;main.c: 2211: &vscpSize,
 22203                           ;main.c: 2212: vscpData)) {
 22204                           
 22205                           ;incstack = 0
 22206                           ;incstack = 0
 22207  002B12  0E41               	movlw	low _vscpType
 22208  002B14  0100               	movlb	0	; () banked
 22209  002B16  6F6E               	movwf	?_getVSCPFrame& (0+255),b
 22210  002B18  0E3E               	movlw	low _vscpNodeId
 22211  002B1A  6F6F               	movwf	(?_getVSCPFrame+1)& (0+255),b
 22212  002B1C  0E3F               	movlw	low _vscpPriority
 22213  002B1E  6F70               	movwf	(?_getVSCPFrame+2)& (0+255),b
 22214  002B20  0E40               	movlw	low _vscpSize
 22215  002B22  6F71               	movwf	(?_getVSCPFrame+3)& (0+255),b
 22216  002B24  0E01               	movlw	high _vscpData
 22217  002B26  6F73               	movwf	(?_getVSCPFrame+5)& (0+255),b
 22218  002B28  0EE5               	movlw	low _vscpData
 22219  002B2A  6F72               	movwf	(?_getVSCPFrame+4)& (0+255),b
 22220  002B2C  0E3A               	movlw	_vscpClass& (0+255)
 22221  002B2E  EC92  F02E         	call	_getVSCPFrame
 22222  002B32  0900               	iorlw	0
 22223  002B34  E101 D181          	bz	l16853
 22224                           
 22225                           ; BSR set to: 0
 22226                           ;main.c: 2215: cntRxFrames++;
 22227  002B38  0101               	movlb	1	; () banked
 22228  002B3A  2B0C               	incf	_cntRxFrames& (0+255),f,b
 22229  002B3C  0E00               	movlw	0
 22230  002B3E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 22231  002B40  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 22232  002B42  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 22233                           
 22234                           ;main.c: 2216: cntRxBytes += vscpSize;
 22235  002B44  5040               	movf	_vscpSize,w,c
 22236  002B46  2708               	addwf	_cntRxBytes& (0+255),f,b
 22237  002B48  0E00               	movlw	0
 22238  002B4A  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 22239  002B4C  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 22240  002B4E  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 22241                           
 22242                           ; BSR set to: 1
 22243                           ;main.c: 2218: putsUSART((char *) "<Prio=");
 22244  002B50  0E7F               	movlw	high STR_177
 22245  002B52  6E21               	movwf	?_putsUSART+1,c
 22246  002B54  0E2D               	movlw	low STR_177
 22247  002B56  6E20               	movwf	?_putsUSART,c
 22248  002B58  ECB5  F031         	call	_putsUSART	;wreg free
 22249                           
 22250                           ;main.c: 2219: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 22251  002B5C  662C               	tstfsz	_bHex,c
 22252  002B5E  D005               	goto	l16755
 22253  002B60  0E7F               	movlw	high STR_61
 22254  002B62  0100               	movlb	0	; () banked
 22255  002B64  6F99               	movwf	(_receivePrintEventVerbose$1497+1)& (0+255),b
 22256  002B66  0EEE               	movlw	low STR_61
 22257  002B68  D004               	goto	L34
 22258  002B6A                     l16755:
 22259  002B6A  0E7F               	movlw	high STR_60
 22260  002B6C  0100               	movlb	0	; () banked
 22261  002B6E  6F99               	movwf	(_receivePrintEventVerbose$1497+1)& (0+255),b
 22262  002B70  0E50               	movlw	low STR_60
 22263  002B72                     L34:
 22264  002B72  6F98               	movwf	_receivePrintEventVerbose$1497& (0+255),b
 22265                           
 22266                           ; BSR set to: 0
 22267  002B74  0E01               	movlw	high _wrkbuf
 22268  002B76  0100               	movlb	0	; () banked
 22269  002B78  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22270  002B7A  0E7D               	movlw	low _wrkbuf
 22271  002B7C  6F71               	movwf	?_sprintf& (0+255),b
 22272  002B7E  C098  F073         	movff	_receivePrintEventVerbose$1497,?_sprintf+2
 22273  002B82  C099  F074         	movff	_receivePrintEventVerbose$1497+1,?_sprintf+3
 22274  002B86  C03F  F075         	movff	_vscpPriority,?_sprintf+4
 22275  002B8A  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22276  002B8C  ECFD  F00F         	call	_sprintf	;wreg free
 22277                           
 22278                           ; BSR set to: 0
 22279                           ;main.c: 2220: putsUSART(wrkbuf);
 22280  002B90  0101               	movlb	1	; () banked
 22281  002B92  0E01               	movlw	high _wrkbuf
 22282  002B94  6E21               	movwf	?_putsUSART+1,c
 22283  002B96  0E7D               	movlw	low _wrkbuf
 22284  002B98  6E20               	movwf	?_putsUSART,c
 22285  002B9A  ECB5  F031         	call	_putsUSART	;wreg free
 22286                           
 22287                           ;main.c: 2221: if ( bTimestamp ) {
 22288  002B9E  502F               	movf	_bTimestamp,w,c
 22289  002BA0  E052               	bz	l16777
 22290                           
 22291                           ;main.c: 2222: putsUSART((char *) ",timestamp=");
 22292  002BA2  0E7E               	movlw	high STR_180
 22293  002BA4  6E21               	movwf	?_putsUSART+1,c
 22294  002BA6  0E27               	movlw	low STR_180
 22295  002BA8  6E20               	movwf	?_putsUSART,c
 22296  002BAA  ECB5  F031         	call	_putsUSART	;wreg free
 22297                           
 22298                           ;main.c: 2223: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", (timer<<16) | ReadTimer3()*10 );
 22299  002BAE  662C               	tstfsz	_bHex,c
 22300  002BB0  D005               	goto	l16769
 22301  002BB2  0E7F               	movlw	high STR_182
 22302  002BB4  0100               	movlb	0	; () banked
 22303  002BB6  6F9B               	movwf	(_receivePrintEventVerbose$1502+1)& (0+255),b
 22304  002BB8  0EDE               	movlw	low STR_182
 22305  002BBA  D004               	goto	L35
 22306  002BBC                     l16769:
 22307  002BBC  0E7F               	movlw	high STR_181
 22308  002BBE  0100               	movlb	0	; () banked
 22309  002BC0  6F9B               	movwf	(_receivePrintEventVerbose$1502+1)& (0+255),b
 22310  002BC2  0E01               	movlw	low STR_181
 22311  002BC4                     L35:
 22312  002BC4  6F9A               	movwf	_receivePrintEventVerbose$1502& (0+255),b
 22313                           
 22314                           ; BSR set to: 0
 22315  002BC6  EC6C  F034         	call	_ReadTimer3	;wreg free
 22316  002BCA  C01F  F060         	movff	?_ReadTimer3,?___wmul
 22317  002BCE  C020  F061         	movff	?_ReadTimer3+1,?___wmul+1
 22318  002BD2  0100               	movlb	0	; () banked
 22319  002BD4  6B63               	clrf	(?___wmul+3)& (0+255),b
 22320  002BD6  0E0A               	movlw	10
 22321  002BD8  6F62               	movwf	(?___wmul+2)& (0+255),b
 22322  002BDA  EC9A  F033         	call	___wmul	;wreg free
 22323  002BDE  C024  F08F         	movff	_timer,??_receivePrintEventVerbose	;volatile
 22324  002BE2  C025  F090         	movff	_timer+1,??_receivePrintEventVerbose+1	;volatile
 22325  002BE6  C026  F091         	movff	_timer+2,??_receivePrintEventVerbose+2	;volatile
 22326  002BEA  C027  F092         	movff	_timer+3,??_receivePrintEventVerbose+3	;volatile
 22327  002BEE  C090  F092         	movff	??_receivePrintEventVerbose+1,??_receivePrintEventVerbose+3
 22328  002BF2  C08F  F091         	movff	??_receivePrintEventVerbose,??_receivePrintEventVerbose+2
 22329  002BF6  6B90               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 22330  002BF8  6B8F               	clrf	??_receivePrintEventVerbose& (0+255),b
 22331  002BFA  5160               	movf	?___wmul& (0+255),w,b
 22332  002BFC  118F               	iorwf	??_receivePrintEventVerbose& (0+255),w,b
 22333  002BFE  6F94               	movwf	_receivePrintEventVerbose$3673& (0+255),b	;volatile
 22334  002C00  5161               	movf	(?___wmul+1)& (0+255),w,b
 22335  002C02  1190               	iorwf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 22336  002C04  6F95               	movwf	(_receivePrintEventVerbose$3673+1)& (0+255),b	;volatile
 22337  002C06  0E00               	movlw	0
 22338  002C08  1191               	iorwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 22339  002C0A  6F96               	movwf	(_receivePrintEventVerbose$3673+2)& (0+255),b	;volatile
 22340  002C0C  0E00               	movlw	0
 22341  002C0E  1192               	iorwf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 22342  002C10  6F97               	movwf	(_receivePrintEventVerbose$3673+3)& (0+255),b	;volatile
 22343                           
 22344                           ; BSR set to: 0
 22345  002C12  0E01               	movlw	high _wrkbuf
 22346  002C14  0100               	movlb	0	; () banked
 22347  002C16  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22348  002C18  0E7D               	movlw	low _wrkbuf
 22349  002C1A  6F71               	movwf	?_sprintf& (0+255),b
 22350  002C1C  C09A  F073         	movff	_receivePrintEventVerbose$1502,?_sprintf+2
 22351  002C20  C09B  F074         	movff	_receivePrintEventVerbose$1502+1,?_sprintf+3
 22352  002C24  C094  F075         	movff	_receivePrintEventVerbose$3673,?_sprintf+4	;volatile
 22353  002C28  C095  F076         	movff	_receivePrintEventVerbose$3673+1,?_sprintf+5	;volatile
 22354  002C2C  C096  F077         	movff	_receivePrintEventVerbose$3673+2,?_sprintf+6	;volatile
 22355  002C30  C097  F078         	movff	_receivePrintEventVerbose$3673+3,?_sprintf+7	;volatile
 22356  002C34  ECFD  F00F         	call	_sprintf	;wreg free
 22357                           
 22358                           ; BSR set to: 0
 22359                           ;main.c: 2224: putsUSART(wrkbuf);
 22360  002C38  0101               	movlb	1	; () banked
 22361  002C3A  0E01               	movlw	high _wrkbuf
 22362  002C3C  6E21               	movwf	?_putsUSART+1,c
 22363  002C3E  0E7D               	movlw	low _wrkbuf
 22364  002C40  6E20               	movwf	?_putsUSART,c
 22365  002C42  ECB5  F031         	call	_putsUSART	;wreg free
 22366  002C46                     l16777:
 22367                           
 22368                           ;main.c: 2225: }
 22369                           ;main.c: 2226: putsUSART((char *) ",class=");
 22370  002C46  0E7E               	movlw	high STR_183
 22371  002C48  6E21               	movwf	?_putsUSART+1,c
 22372  002C4A  0EE1               	movlw	low STR_183
 22373  002C4C  6E20               	movwf	?_putsUSART,c
 22374  002C4E  ECB5  F031         	call	_putsUSART	;wreg free
 22375                           
 22376                           ;main.c: 2227: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 22377  002C52  662C               	tstfsz	_bHex,c
 22378  002C54  D005               	goto	l16783
 22379  002C56  0E7F               	movlw	high STR_61
 22380  002C58  0100               	movlb	0	; () banked
 22381  002C5A  6F9D               	movwf	(_receivePrintEventVerbose$1507+1)& (0+255),b
 22382  002C5C  0EEE               	movlw	low STR_61
 22383  002C5E  D004               	goto	L36
 22384  002C60                     l16783:
 22385  002C60  0E7F               	movlw	high STR_184
 22386  002C62  0100               	movlb	0	; () banked
 22387  002C64  6F9D               	movwf	(_receivePrintEventVerbose$1507+1)& (0+255),b
 22388  002C66  0E57               	movlw	low STR_184
 22389  002C68                     L36:
 22390  002C68  6F9C               	movwf	_receivePrintEventVerbose$1507& (0+255),b
 22391                           
 22392                           ; BSR set to: 0
 22393  002C6A  0E01               	movlw	high _wrkbuf
 22394  002C6C  0100               	movlb	0	; () banked
 22395  002C6E  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22396  002C70  0E7D               	movlw	low _wrkbuf
 22397  002C72  6F71               	movwf	?_sprintf& (0+255),b
 22398  002C74  C09C  F073         	movff	_receivePrintEventVerbose$1507,?_sprintf+2
 22399  002C78  C09D  F074         	movff	_receivePrintEventVerbose$1507+1,?_sprintf+3
 22400  002C7C  C03A  F075         	movff	_vscpClass,?_sprintf+4
 22401  002C80  C03B  F076         	movff	_vscpClass+1,?_sprintf+5
 22402  002C84  ECFD  F00F         	call	_sprintf	;wreg free
 22403                           
 22404                           ; BSR set to: 0
 22405                           ;main.c: 2228: putsUSART(wrkbuf);
 22406  002C88  0101               	movlb	1	; () banked
 22407  002C8A  0E01               	movlw	high _wrkbuf
 22408  002C8C  6E21               	movwf	?_putsUSART+1,c
 22409  002C8E  0E7D               	movlw	low _wrkbuf
 22410  002C90  6E20               	movwf	?_putsUSART,c
 22411  002C92  ECB5  F031         	call	_putsUSART	;wreg free
 22412                           
 22413                           ;main.c: 2229: putsUSART((char *) ",type=");
 22414  002C96  0E7F               	movlw	high STR_186
 22415  002C98  6E21               	movwf	?_putsUSART+1,c
 22416  002C9A  0E1F               	movlw	low STR_186
 22417  002C9C  6E20               	movwf	?_putsUSART,c
 22418  002C9E  ECB5  F031         	call	_putsUSART	;wreg free
 22419                           
 22420                           ;main.c: 2230: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 22421  002CA2  662C               	tstfsz	_bHex,c
 22422  002CA4  D005               	goto	l16795
 22423  002CA6  0E7F               	movlw	high STR_61
 22424  002CA8  0100               	movlb	0	; () banked
 22425  002CAA  6F9F               	movwf	(_receivePrintEventVerbose$1512+1)& (0+255),b
 22426  002CAC  0EEE               	movlw	low STR_61
 22427  002CAE  D004               	goto	L37
 22428  002CB0                     l16795:
 22429  002CB0  0E7F               	movlw	high STR_60
 22430  002CB2  0100               	movlb	0	; () banked
 22431  002CB4  6F9F               	movwf	(_receivePrintEventVerbose$1512+1)& (0+255),b
 22432  002CB6  0E50               	movlw	low STR_60
 22433  002CB8                     L37:
 22434  002CB8  6F9E               	movwf	_receivePrintEventVerbose$1512& (0+255),b
 22435                           
 22436                           ; BSR set to: 0
 22437  002CBA  0E01               	movlw	high _wrkbuf
 22438  002CBC  0100               	movlb	0	; () banked
 22439  002CBE  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22440  002CC0  0E7D               	movlw	low _wrkbuf
 22441  002CC2  6F71               	movwf	?_sprintf& (0+255),b
 22442  002CC4  C09E  F073         	movff	_receivePrintEventVerbose$1512,?_sprintf+2
 22443  002CC8  C09F  F074         	movff	_receivePrintEventVerbose$1512+1,?_sprintf+3
 22444  002CCC  C041  F075         	movff	_vscpType,?_sprintf+4
 22445  002CD0  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22446  002CD2  ECFD  F00F         	call	_sprintf	;wreg free
 22447                           
 22448                           ; BSR set to: 0
 22449                           ;main.c: 2231: putsUSART(wrkbuf);
 22450  002CD6  0101               	movlb	1	; () banked
 22451  002CD8  0E01               	movlw	high _wrkbuf
 22452  002CDA  6E21               	movwf	?_putsUSART+1,c
 22453  002CDC  0E7D               	movlw	low _wrkbuf
 22454  002CDE  6E20               	movwf	?_putsUSART,c
 22455  002CE0  ECB5  F031         	call	_putsUSART	;wreg free
 22456                           
 22457                           ;main.c: 2232: putsUSART((char *) ",nodeid=");
 22458  002CE4  0E7E               	movlw	high STR_189
 22459  002CE6  6E21               	movwf	?_putsUSART+1,c
 22460  002CE8  0EA6               	movlw	low STR_189
 22461  002CEA  6E20               	movwf	?_putsUSART,c
 22462  002CEC  ECB5  F031         	call	_putsUSART	;wreg free
 22463                           
 22464                           ;main.c: 2233: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 22465  002CF0  662C               	tstfsz	_bHex,c
 22466  002CF2  D005               	goto	l16807
 22467  002CF4  0E7F               	movlw	high STR_61
 22468  002CF6  0100               	movlb	0	; () banked
 22469  002CF8  6FA1               	movwf	(_receivePrintEventVerbose$1517+1)& (0+255),b
 22470  002CFA  0EEE               	movlw	low STR_61
 22471  002CFC  D004               	goto	L38
 22472  002CFE                     l16807:
 22473  002CFE  0E7F               	movlw	high STR_60
 22474  002D00  0100               	movlb	0	; () banked
 22475  002D02  6FA1               	movwf	(_receivePrintEventVerbose$1517+1)& (0+255),b
 22476  002D04  0E50               	movlw	low STR_60
 22477  002D06                     L38:
 22478  002D06  6FA0               	movwf	_receivePrintEventVerbose$1517& (0+255),b
 22479                           
 22480                           ; BSR set to: 0
 22481  002D08  0E01               	movlw	high _wrkbuf
 22482  002D0A  0100               	movlb	0	; () banked
 22483  002D0C  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22484  002D0E  0E7D               	movlw	low _wrkbuf
 22485  002D10  6F71               	movwf	?_sprintf& (0+255),b
 22486  002D12  C0A0  F073         	movff	_receivePrintEventVerbose$1517,?_sprintf+2
 22487  002D16  C0A1  F074         	movff	_receivePrintEventVerbose$1517+1,?_sprintf+3
 22488  002D1A  C03E  F075         	movff	_vscpNodeId,?_sprintf+4
 22489  002D1E  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22490  002D20  ECFD  F00F         	call	_sprintf	;wreg free
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;main.c: 2234: putsUSART(wrkbuf);
 22494  002D24  0101               	movlb	1	; () banked
 22495  002D26  0E01               	movlw	high _wrkbuf
 22496  002D28  6E21               	movwf	?_putsUSART+1,c
 22497  002D2A  0E7D               	movlw	low _wrkbuf
 22498  002D2C  6E20               	movwf	?_putsUSART,c
 22499  002D2E  ECB5  F031         	call	_putsUSART	;wreg free
 22500                           
 22501                           ;main.c: 2235: putsUSART((char *) ",size=");
 22502  002D32  0E7F               	movlw	high STR_192
 22503  002D34  6E21               	movwf	?_putsUSART+1,c
 22504  002D36  0E26               	movlw	low STR_192
 22505  002D38  6E20               	movwf	?_putsUSART,c
 22506  002D3A  ECB5  F031         	call	_putsUSART	;wreg free
 22507                           
 22508                           ;main.c: 2236: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 22509  002D3E  662C               	tstfsz	_bHex,c
 22510  002D40  D005               	goto	l16819
 22511  002D42  0E7F               	movlw	high STR_61
 22512  002D44  0100               	movlb	0	; () banked
 22513  002D46  6FA3               	movwf	(_receivePrintEventVerbose$1522+1)& (0+255),b
 22514  002D48  0EEE               	movlw	low STR_61
 22515  002D4A  D004               	goto	L39
 22516  002D4C                     l16819:
 22517  002D4C  0E7F               	movlw	high STR_60
 22518  002D4E  0100               	movlb	0	; () banked
 22519  002D50  6FA3               	movwf	(_receivePrintEventVerbose$1522+1)& (0+255),b
 22520  002D52  0E50               	movlw	low STR_60
 22521  002D54                     L39:
 22522  002D54  6FA2               	movwf	_receivePrintEventVerbose$1522& (0+255),b
 22523                           
 22524                           ; BSR set to: 0
 22525  002D56  0E01               	movlw	high _wrkbuf
 22526  002D58  0100               	movlb	0	; () banked
 22527  002D5A  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22528  002D5C  0E7D               	movlw	low _wrkbuf
 22529  002D5E  6F71               	movwf	?_sprintf& (0+255),b
 22530  002D60  C0A2  F073         	movff	_receivePrintEventVerbose$1522,?_sprintf+2
 22531  002D64  C0A3  F074         	movff	_receivePrintEventVerbose$1522+1,?_sprintf+3
 22532  002D68  C040  F075         	movff	_vscpSize,?_sprintf+4
 22533  002D6C  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22534  002D6E  ECFD  F00F         	call	_sprintf	;wreg free
 22535                           
 22536                           ; BSR set to: 0
 22537                           ;main.c: 2237: putsUSART(wrkbuf);
 22538  002D72  0101               	movlb	1	; () banked
 22539  002D74  0E01               	movlw	high _wrkbuf
 22540  002D76  6E21               	movwf	?_putsUSART+1,c
 22541  002D78  0E7D               	movlw	low _wrkbuf
 22542  002D7A  6E20               	movwf	?_putsUSART,c
 22543  002D7C  ECB5  F031         	call	_putsUSART	;wreg free
 22544                           
 22545                           ;main.c: 2238: if (vscpSize > 0) {
 22546  002D80  5040               	movf	_vscpSize,w,c
 22547  002D82  E04D               	bz	l16847
 22548                           
 22549                           ;main.c: 2239: putsUSART((char *) ",Data=");
 22550  002D84  0E7F               	movlw	high STR_195
 22551  002D86  6E21               	movwf	?_putsUSART+1,c
 22552  002D88  0E18               	movlw	low STR_195
 22553  002D8A  6E20               	movwf	?_putsUSART,c
 22554  002D8C  ECB5  F031         	call	_putsUSART	;wreg free
 22555                           
 22556                           ;main.c: 2240: for (i = 0; i < vscpSize; i++) {
 22557  002D90  0100               	movlb	0	; () banked
 22558  002D92  6BA6               	clrf	receivePrintEventVerbose@i& (0+255),b
 22559  002D94  D040               	goto	l16845
 22560  002D96                     l1056:
 22561                           
 22562                           ; BSR set to: 0
 22563                           ;main.c: 2242: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 22564  002D96  662C               	tstfsz	_bHex,c
 22565  002D98  D004               	goto	l16833
 22566                           
 22567                           ; BSR set to: 0
 22568  002D9A  0E7F               	movlw	high STR_61
 22569  002D9C  6FA5               	movwf	(_receivePrintEventVerbose$1527+1)& (0+255),b
 22570  002D9E  0EEE               	movlw	low STR_61
 22571  002DA0  D003               	goto	L40
 22572  002DA2                     l16833:
 22573                           
 22574                           ; BSR set to: 0
 22575  002DA2  0E7F               	movlw	high STR_60
 22576  002DA4  6FA5               	movwf	(_receivePrintEventVerbose$1527+1)& (0+255),b
 22577  002DA6  0E50               	movlw	low STR_60
 22578  002DA8                     L40:
 22579  002DA8  6FA4               	movwf	_receivePrintEventVerbose$1527& (0+255),b
 22580                           
 22581                           ; BSR set to: 0
 22582  002DAA  0E01               	movlw	high _wrkbuf
 22583  002DAC  0100               	movlb	0	; () banked
 22584  002DAE  6F72               	movwf	(?_sprintf+1)& (0+255),b
 22585  002DB0  0E7D               	movlw	low _wrkbuf
 22586  002DB2  6F71               	movwf	?_sprintf& (0+255),b
 22587  002DB4  C0A4  F073         	movff	_receivePrintEventVerbose$1527,?_sprintf+2
 22588  002DB8  C0A5  F074         	movff	_receivePrintEventVerbose$1527+1,?_sprintf+3
 22589  002DBC  0EE5               	movlw	low _vscpData
 22590  002DBE  25A6               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 22591  002DC0  6ED9               	movwf	fsr2l,c
 22592  002DC2  6ADA               	clrf	fsr2h,c
 22593  002DC4  0E01               	movlw	high _vscpData
 22594  002DC6  22DA               	addwfc	fsr2h,f,c
 22595  002DC8  50DF               	movf	indf2,w,c
 22596  002DCA  6F75               	movwf	(?_sprintf+4)& (0+255),b
 22597  002DCC  6B76               	clrf	(?_sprintf+5)& (0+255),b
 22598  002DCE  ECFD  F00F         	call	_sprintf	;wreg free
 22599                           
 22600                           ; BSR set to: 0
 22601                           ;main.c: 2243: putsUSART(wrkbuf);
 22602  002DD2  0101               	movlb	1	; () banked
 22603  002DD4  0E01               	movlw	high _wrkbuf
 22604  002DD6  6E21               	movwf	?_putsUSART+1,c
 22605  002DD8  0E7D               	movlw	low _wrkbuf
 22606  002DDA  6E20               	movwf	?_putsUSART,c
 22607  002DDC  ECB5  F031         	call	_putsUSART	;wreg free
 22608                           
 22609                           ;main.c: 2244: if (i < (vscpSize - 1)) {
 22610  002DE0  0EFF               	movlw	255
 22611  002DE2  2440               	addwf	_vscpSize,w,c
 22612  002DE4  0100               	movlb	0	; () banked
 22613  002DE6  6F8F               	movwf	??_receivePrintEventVerbose& (0+255),b
 22614  002DE8  6B90               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 22615  002DEA  0EFF               	movlw	255
 22616  002DEC  2390               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 22617  002DEE  51A6               	movf	receivePrintEventVerbose@i& (0+255),w,b
 22618  002DF0  6F91               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 22619  002DF2  6B92               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 22620  002DF4  5192               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 22621  002DF6  0A80               	xorlw	128
 22622  002DF8  6F93               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 22623  002DFA  518F               	movf	??_receivePrintEventVerbose& (0+255),w,b
 22624  002DFC  5D91               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 22625  002DFE  5190               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 22626  002E00  0A80               	xorlw	128
 22627  002E02  5993               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 22628  002E04  E206               	bc	l16843
 22629                           
 22630                           ; BSR set to: 0
 22631                           ;main.c: 2245: putsUSART((char *) ",");
 22632  002E06  0E7F               	movlw	high STR_30
 22633  002E08  6E21               	movwf	?_putsUSART+1,c
 22634  002E0A  0EF5               	movlw	low STR_30
 22635  002E0C  6E20               	movwf	?_putsUSART,c
 22636  002E0E  ECB5  F031         	call	_putsUSART	;wreg free
 22637  002E12                     l16843:
 22638  002E12  0100               	movlb	0	; () banked
 22639  002E14  2BA6               	incf	receivePrintEventVerbose@i& (0+255),f,b
 22640  002E16                     l16845:
 22641                           
 22642                           ; BSR set to: 0
 22643  002E16  5040               	movf	_vscpSize,w,c
 22644  002E18  5DA6               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 22645  002E1A  E207               	bc	l1063
 22646  002E1C  D7BC               	goto	l1056
 22647  002E1E                     l16847:
 22648                           
 22649                           ;main.c: 2249: putsUSART((char *) ",Data=none");
 22650  002E1E  0E7E               	movlw	high STR_199
 22651  002E20  6E21               	movwf	?_putsUSART+1,c
 22652  002E22  0E60               	movlw	low STR_199
 22653  002E24  6E20               	movwf	?_putsUSART,c
 22654  002E26  ECB5  F031         	call	_putsUSART	;wreg free
 22655  002E2A                     l1063:
 22656                           
 22657                           ;main.c: 2250: }
 22658                           ;main.c: 2251: putsUSART((char *) ">\r\n");
 22659  002E2A  0E7F               	movlw	high STR_200
 22660  002E2C  6E21               	movwf	?_putsUSART+1,c
 22661  002E2E  0ECA               	movlw	low STR_200
 22662  002E30  6E20               	movwf	?_putsUSART,c
 22663  002E32  ECB5  F031         	call	_putsUSART	;wreg free
 22664                           
 22665                           ;main.c: 2252: return 1;
 22666  002E36  0E01               	movlw	1
 22667  002E38  D001               	goto	l1064
 22668  002E3A                     l16853:
 22669                           
 22670                           ; BSR set to: 0
 22671                           ;main.c: 2253: }
 22672                           ;main.c: 2255: return 0;
 22673  002E3A  0E00               	movlw	0
 22674  002E3C                     l1064:
 22675  002E3C  0012               	return	
 22676  002E3E                     __end_of_receivePrintEventVerbose:
 22677                           	opt stack 0
 22678                           tblptru	equ	0xFF8
 22679                           tblptrh	equ	0xFF7
 22680                           tblptrl	equ	0xFF6
 22681                           tablat	equ	0xFF5
 22682                           prodh	equ	0xFF4
 22683                           prodl	equ	0xFF3
 22684                           intcon	equ	0xFF2
 22685                           indf0	equ	0xFEF
 22686                           postinc0	equ	0xFEE
 22687                           fsr0h	equ	0xFEA
 22688                           fsr0l	equ	0xFE9
 22689                           wreg	equ	0xFE8
 22690                           indf1	equ	0xFE7
 22691                           postinc1	equ	0xFE6
 22692                           postdec1	equ	0xFE5
 22693                           fsr1h	equ	0xFE2
 22694                           fsr1l	equ	0xFE1
 22695                           indf2	equ	0xFDF
 22696                           postinc2	equ	0xFDE
 22697                           postdec2	equ	0xFDD
 22698                           plusw2	equ	0xFDB
 22699                           fsr2h	equ	0xFDA
 22700                           fsr2l	equ	0xFD9
 22701                           status	equ	0xFD8
 22702                           
 22703 ;; *************** function _ReadTimer3 *****************
 22704 ;; Defined at:
 22705 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3read.c"
 22706 ;; Parameters:    Size  Location     Type
 22707 ;;		None
 22708 ;; Auto vars:     Size  Location     Type
 22709 ;;  timer           2   32[COMRAM] struct Timers
 22710 ;; Return value:  Size  Location     Type
 22711 ;;                  2   30[COMRAM] unsigned int 
 22712 ;; Registers used:
 22713 ;;		None
 22714 ;; Tracked objects:
 22715 ;;		On entry : C/3
 22716 ;;		On exit  : C/0
 22717 ;;		Unchanged: C/0
 22718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22719 ;;      Params:         2       0       0       0       0       0       0
 22720 ;;      Locals:         2       0       0       0       0       0       0
 22721 ;;      Temps:          0       0       0       0       0       0       0
 22722 ;;      Totals:         4       0       0       0       0       0       0
 22723 ;;Total ram usage:        4 bytes
 22724 ;; Hardware stack levels used:    1
 22725 ;; Hardware stack levels required when called:    3
 22726 ;; This function calls:
 22727 ;;		Nothing
 22728 ;; This function is called by:
 22729 ;;		_receivePrintEventVerbose
 22730 ;;		_receiveSendEventCANAL
 22731 ;;		_receiveSendMultiEventCANAL
 22732 ;; This function uses a non-reentrant model
 22733 ;;
 22734                           
 22735                           	psect	text52
 22736  0068D8                     __ptext52:
 22737                           	opt stack 0
 22738  0068D8                     _ReadTimer3:
 22739                           	opt stack 25
 22740                           
 22741                           ;incstack = 0
 22742                           ;incstack = 0
 22743  0068D8  CFB2 F021          	movff	4018,ReadTimer3@timer	;volatile
 22744  0068DC  CFB3 F022          	movff	4019,ReadTimer3@timer+1	;volatile
 22745  0068E0  C021  F01F         	movff	ReadTimer3@timer,?_ReadTimer3
 22746  0068E4  C022  F020         	movff	ReadTimer3@timer+1,?_ReadTimer3+1
 22747  0068E8  0012               	return	
 22748  0068EA                     __end_of_ReadTimer3:
 22749                           	opt stack 0
 22750                           tblptru	equ	0xFF8
 22751                           tblptrh	equ	0xFF7
 22752                           tblptrl	equ	0xFF6
 22753                           tablat	equ	0xFF5
 22754                           prodh	equ	0xFF4
 22755                           prodl	equ	0xFF3
 22756                           intcon	equ	0xFF2
 22757                           indf0	equ	0xFEF
 22758                           postinc0	equ	0xFEE
 22759                           fsr0h	equ	0xFEA
 22760                           fsr0l	equ	0xFE9
 22761                           wreg	equ	0xFE8
 22762                           indf1	equ	0xFE7
 22763                           postinc1	equ	0xFE6
 22764                           postdec1	equ	0xFE5
 22765                           fsr1h	equ	0xFE2
 22766                           fsr1l	equ	0xFE1
 22767                           indf2	equ	0xFDF
 22768                           postinc2	equ	0xFDE
 22769                           postdec2	equ	0xFDD
 22770                           plusw2	equ	0xFDB
 22771                           fsr2h	equ	0xFDA
 22772                           fsr2l	equ	0xFD9
 22773                           status	equ	0xFD8
 22774                           
 22775 ;; *************** function _getVSCPFrame *****************
 22776 ;; Defined at:
 22777 ;;		line 3477 in file "main.c"
 22778 ;; Parameters:    Size  Location     Type
 22779 ;;  pvscpclass      1    wreg     PTR unsigned short 
 22780 ;;		 -> vscpClass(2), 
 22781 ;;  pvscptype       1   14[BANK0 ] PTR unsigned char 
 22782 ;;		 -> vscpType(1), 
 22783 ;;  pNodeId         1   15[BANK0 ] PTR unsigned char 
 22784 ;;		 -> vscpNodeId(1), 
 22785 ;;  pPriority       1   16[BANK0 ] PTR unsigned char 
 22786 ;;		 -> vscpPriority(1), 
 22787 ;;  pSize           1   17[BANK0 ] PTR unsigned char 
 22788 ;;		 -> vscpSize(1), 
 22789 ;;  pData           2   18[BANK0 ] PTR unsigned char 
 22790 ;;		 -> vscpData(8), 
 22791 ;; Auto vars:     Size  Location     Type
 22792 ;;  pvscpclass      1   24[BANK0 ] PTR unsigned short 
 22793 ;;		 -> vscpClass(2), 
 22794 ;;  id              4   25[BANK0 ] unsigned long 
 22795 ;; Return value:  Size  Location     Type
 22796 ;;                  1    wreg      unsigned char 
 22797 ;; Registers used:
 22798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 22799 ;; Tracked objects:
 22800 ;;		On entry : F/0
 22801 ;;		On exit  : F/0
 22802 ;;		Unchanged: 0/0
 22803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22804 ;;      Params:         0       6       0       0       0       0       0
 22805 ;;      Locals:         0       5       0       0       0       0       0
 22806 ;;      Temps:          0       4       0       0       0       0       0
 22807 ;;      Totals:         0      15       0       0       0       0       0
 22808 ;;Total ram usage:       15 bytes
 22809 ;; Hardware stack levels used:    1
 22810 ;; Hardware stack levels required when called:    5
 22811 ;; This function calls:
 22812 ;;		_getCANFrame
 22813 ;; This function is called by:
 22814 ;;		_receivePrintEventVerbose
 22815 ;;		_readRegister
 22816 ;;		_readRegisterExtended
 22817 ;;		_writeRegisterExtended
 22818 ;; This function uses a non-reentrant model
 22819 ;;
 22820                           
 22821                           	psect	text53
 22822  005D24                     __ptext53:
 22823                           	opt stack 0
 22824  005D24                     _getVSCPFrame:
 22825                           	opt stack 22
 22826                           
 22827                           ;incstack = 0
 22828                           ;incstack = 0
 22829                           ;getVSCPFrame@pvscpclass stored from wreg
 22830  005D24  CFE8 F078          	movff	wreg,getVSCPFrame@pvscpclass
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;main.c: 3478: uint32_t id;
 22834                           ;main.c: 3480: if (!getCANFrame(&id, pSize, pData)) {
 22835  005D28  C071  F06A         	movff	getVSCPFrame@pSize,?_getCANFrame
 22836  005D2C  0E0F               	movlw	15
 22837  005D2E  6F6B               	movwf	(?_getCANFrame+1)& (0+255),b
 22838  005D30  0E5F               	movlw	__accesstop+-1
 22839  005D32  656A               	cpfsgt	?_getCANFrame& (0+255),b
 22840  005D34  6B6B               	clrf	(?_getCANFrame+1)& (0+255),b
 22841  005D36  C072  F06C         	movff	getVSCPFrame@pData,?_getCANFrame+2
 22842  005D3A  C073  F06D         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 22843  005D3E  0E79               	movlw	getVSCPFrame@id& (0+255)
 22844  005D40  ECCB  F02B         	call	_getCANFrame
 22845  005D44  0900               	iorlw	0
 22846  005D46  E102               	bnz	l18195
 22847                           
 22848                           ; BSR set to: 0
 22849                           ;main.c: 3481: return 0;
 22850  005D48  0E00               	movlw	0
 22851  005D4A  D02F               	goto	l1415
 22852  005D4C                     l18195:
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;main.c: 3482: }
 22856                           ;main.c: 3484: *pNodeId = id & 0x0ff;
 22857  005D4C  516F               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 22858  005D4E  6ED9               	movwf	fsr2l,c
 22859  005D50  6ADA               	clrf	fsr2h,c
 22860  005D52  C079  FFDF         	movff	getVSCPFrame@id,indf2
 22861                           
 22862                           ;main.c: 3485: *pvscptype = (id >> 8) & 0xff;
 22863  005D56  516E               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 22864  005D58  6ED9               	movwf	fsr2l,c
 22865  005D5A  6ADA               	clrf	fsr2h,c
 22866  005D5C  C07A  FFDF         	movff	getVSCPFrame@id+1,indf2
 22867                           
 22868                           ; BSR set to: 0
 22869                           ;main.c: 3486: *pvscpclass = (id >> 16) & 0x1ff;
 22870  005D60  0100               	movlb	0	; () banked
 22871  005D62  517B               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 22872  005D64  6F74               	movwf	??_getVSCPFrame& (0+255),b
 22873  005D66  0E01               	movlw	1
 22874  005D68  157C               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 22875  005D6A  6F75               	movwf	(??_getVSCPFrame+1)& (0+255),b
 22876  005D6C  5178               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 22877  005D6E  6ED9               	movwf	fsr2l,c
 22878  005D70  6ADA               	clrf	fsr2h,c
 22879  005D72  C074  FFDE         	movff	??_getVSCPFrame,postinc2
 22880  005D76  C075  FFDD         	movff	??_getVSCPFrame+1,postdec2
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;main.c: 3487: *pPriority = (uint16_t) (0x07 & (id >> 26));
 22884  005D7A  5170               	movf	getVSCPFrame@pPriority& (0+255),w,b
 22885  005D7C  6ED9               	movwf	fsr2l,c
 22886  005D7E  6ADA               	clrf	fsr2h,c
 22887  005D80  C079  F074         	movff	getVSCPFrame@id,??_getVSCPFrame
 22888  005D84  C07A  F075         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 22889  005D88  C07B  F076         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 22890  005D8C  C07C  F077         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 22891  005D90  0E1B               	movlw	27
 22892  005D92  D005               	goto	u23770
 22893  005D94                     u23775:
 22894  005D94  90D8               	bcf	status,0,c
 22895  005D96  3377               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 22896  005D98  3376               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 22897  005D9A  3375               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 22898  005D9C  3374               	rrcf	??_getVSCPFrame& (0+255),f,b
 22899  005D9E                     u23770:
 22900  005D9E  2EE8               	decfsz	wreg,f,c
 22901  005DA0  D7F9               	goto	u23775
 22902  005DA2  5174               	movf	??_getVSCPFrame& (0+255),w,b
 22903  005DA4  0B07               	andlw	7
 22904  005DA6  6EDF               	movwf	indf2,c
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;main.c: 3489: return 1;
 22908  005DA8  0E01               	movlw	1
 22909  005DAA                     l1415:
 22910                           
 22911                           ; BSR set to: 0
 22912  005DAA  0012               	return	
 22913  005DAC                     __end_of_getVSCPFrame:
 22914                           	opt stack 0
 22915                           tblptru	equ	0xFF8
 22916                           tblptrh	equ	0xFF7
 22917                           tblptrl	equ	0xFF6
 22918                           tablat	equ	0xFF5
 22919                           prodh	equ	0xFF4
 22920                           prodl	equ	0xFF3
 22921                           intcon	equ	0xFF2
 22922                           indf0	equ	0xFEF
 22923                           postinc0	equ	0xFEE
 22924                           fsr0h	equ	0xFEA
 22925                           fsr0l	equ	0xFE9
 22926                           wreg	equ	0xFE8
 22927                           indf1	equ	0xFE7
 22928                           postinc1	equ	0xFE6
 22929                           postdec1	equ	0xFE5
 22930                           fsr1h	equ	0xFE2
 22931                           fsr1l	equ	0xFE1
 22932                           indf2	equ	0xFDF
 22933                           postinc2	equ	0xFDE
 22934                           postdec2	equ	0xFDD
 22935                           plusw2	equ	0xFDB
 22936                           fsr2h	equ	0xFDA
 22937                           fsr2l	equ	0xFD9
 22938                           status	equ	0xFD8
 22939                           
 22940 ;; *************** function _getCANFrame *****************
 22941 ;; Defined at:
 22942 ;;		line 3513 in file "main.c"
 22943 ;; Parameters:    Size  Location     Type
 22944 ;;  pid             1    wreg     PTR unsigned long 
 22945 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 22946 ;;  pdlc            2   10[BANK0 ] PTR unsigned char 
 22947 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 22948 ;;  pdata           2   12[BANK0 ] PTR unsigned char 
 22949 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 22950 ;; Auto vars:     Size  Location     Type
 22951 ;;  pid             1   34[COMRAM] PTR unsigned long 
 22952 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 22953 ;; Return value:  Size  Location     Type
 22954 ;;                  1    wreg      unsigned char 
 22955 ;; Registers used:
 22956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 22957 ;; Tracked objects:
 22958 ;;		On entry : F/0
 22959 ;;		On exit  : F/0
 22960 ;;		Unchanged: 0/0
 22961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22962 ;;      Params:         0       4       0       0       0       0       0
 22963 ;;      Locals:         1       0       0       0       0       0       0
 22964 ;;      Temps:          0       0       0       0       0       0       0
 22965 ;;      Totals:         1       4       0       0       0       0       0
 22966 ;;Total ram usage:        5 bytes
 22967 ;; Hardware stack levels used:    1
 22968 ;; Hardware stack levels required when called:    4
 22969 ;; This function calls:
 22970 ;;		_fifo_read
 22971 ;; This function is called by:
 22972 ;;		_receiveSendEventCANAL
 22973 ;;		_receiveSendMultiEventCANAL
 22974 ;;		_receiveSendEventSLCAN
 22975 ;;		_getVSCPFrame
 22976 ;; This function uses a non-reentrant model
 22977 ;;
 22978                           
 22979                           	psect	text54
 22980  005796                     __ptext54:
 22981                           	opt stack 0
 22982  005796                     _getCANFrame:
 22983                           	opt stack 24
 22984                           
 22985                           ; BSR set to: 0
 22986                           ;incstack = 0
 22987                           ;incstack = 0
 22988                           ;getCANFrame@pid stored from wreg
 22989  005796  CFE8 F023          	movff	wreg,getCANFrame@pid
 22990                           
 22991                           ; BSR set to: 0
 22992                           ;main.c: 3514: if ( fifo_canrxcount ) {
 22993  00579A  5030               	movf	_fifo_canrxcount,w,c	;volatile
 22994  00579C  E013               	bz	l18213
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;main.c: 3517: (INTCONbits.GIE = 0);
 22998  00579E  9EF2               	bcf	intcon,7,c	;volatile
 22999                           
 23000                           ; BSR set to: 0
 23001                           ;main.c: 3518: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 23002  0057A0  0E01               	movlw	high _canInputFifo
 23003  0057A2  0100               	movlb	0	; () banked
 23004  0057A4  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 23005  0057A6  0ECD               	movlw	low _canInputFifo
 23006  0057A8  6F60               	movwf	?_fifo_read& (0+255),b
 23007  0057AA  C023  F062         	movff	getCANFrame@pid,?_fifo_read+2
 23008  0057AE  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 23009  0057B0  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 23010  0057B2  0E04               	movlw	4
 23011  0057B4  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 23012  0057B6  ECC5  F028         	call	_fifo_read	;wreg free
 23013  0057BA  5160               	movf	?_fifo_read& (0+255),w,b
 23014  0057BC  0A04               	xorlw	4
 23015  0057BE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 23016  0057C0  E003               	bz	l18217
 23017  0057C2                     l18211:
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;main.c: 3519: (INTCONbits.GIE = 1);
 23021  0057C2  8EF2               	bsf	intcon,7,c	;volatile
 23022  0057C4                     l18213:
 23023                           
 23024                           ; BSR set to: 0
 23025                           ;main.c: 3520: return 0;
 23026  0057C4  0E00               	movlw	0
 23027  0057C6  D03A               	goto	l1424
 23028  0057C8                     l18217:
 23029                           
 23030                           ; BSR set to: 0
 23031                           ;main.c: 3521: }
 23032                           ;main.c: 3524: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 23033  0057C8  0E01               	movlw	high _canInputFifo
 23034  0057CA  0100               	movlb	0	; () banked
 23035  0057CC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 23036  0057CE  0ECD               	movlw	low _canInputFifo
 23037  0057D0  6F60               	movwf	?_fifo_read& (0+255),b
 23038  0057D2  C06A  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 23039  0057D6  C06B  F063         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 23040  0057DA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 23041  0057DC  0E01               	movlw	1
 23042  0057DE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 23043  0057E0  ECC5  F028         	call	_fifo_read	;wreg free
 23044  0057E4  0560               	decf	?_fifo_read& (0+255),w,b
 23045  0057E6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 23046  0057E8  E1EC               	bnz	l18211
 23047                           
 23048                           ; BSR set to: 0
 23049                           ;main.c: 3527: }
 23050                           ;main.c: 3530: if ( *pdlc > 8 ) {
 23051  0057EA  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23052  0057EE  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23053  0057F2  0E08               	movlw	8
 23054  0057F4  64DF               	cpfsgt	indf2,c
 23055  0057F6  D005               	goto	l18229
 23056                           
 23057                           ; BSR set to: 0
 23058                           ;main.c: 3531: *pdlc = 0;
 23059  0057F8  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23060  0057FC  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23061  005800  6ADF               	clrf	indf2,c
 23062  005802                     l18229:
 23063                           
 23064                           ; BSR set to: 0
 23065                           ;main.c: 3532: }
 23066                           ;main.c: 3535: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 23067  005802  0E01               	movlw	high _canInputFifo
 23068  005804  0100               	movlb	0	; () banked
 23069  005806  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 23070  005808  0ECD               	movlw	low _canInputFifo
 23071  00580A  6F60               	movwf	?_fifo_read& (0+255),b
 23072  00580C  C06C  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 23073  005810  C06D  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 23074  005814  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23075  005818  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23076  00581C  50DF               	movf	indf2,w,c
 23077  00581E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 23078  005820  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 23079  005822  ECC5  F028         	call	_fifo_read	;wreg free
 23080  005826  C06A  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23081  00582A  C06B  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23082  00582E  50DF               	movf	indf2,w,c
 23083  005830  1960               	xorwf	?_fifo_read& (0+255),w,b
 23084  005832  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 23085  005834  E1C6               	bnz	l18211
 23086                           
 23087                           ; BSR set to: 0
 23088                           ;main.c: 3538: }
 23089                           ;main.c: 3540: fifo_canrxcount--;
 23090  005836  0630               	decf	_fifo_canrxcount,f,c	;volatile
 23091                           
 23092                           ; BSR set to: 0
 23093                           ;main.c: 3542: (INTCONbits.GIE = 1);
 23094  005838  8EF2               	bsf	intcon,7,c	;volatile
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;main.c: 3544: return 1;
 23098  00583A  0E01               	movlw	1
 23099  00583C                     l1424:
 23100                           
 23101                           ; BSR set to: 0
 23102  00583C  0012               	return	
 23103  00583E                     __end_of_getCANFrame:
 23104                           	opt stack 0
 23105                           tblptru	equ	0xFF8
 23106                           tblptrh	equ	0xFF7
 23107                           tblptrl	equ	0xFF6
 23108                           tablat	equ	0xFF5
 23109                           prodh	equ	0xFF4
 23110                           prodl	equ	0xFF3
 23111                           intcon	equ	0xFF2
 23112                           indf0	equ	0xFEF
 23113                           postinc0	equ	0xFEE
 23114                           fsr0h	equ	0xFEA
 23115                           fsr0l	equ	0xFE9
 23116                           wreg	equ	0xFE8
 23117                           indf1	equ	0xFE7
 23118                           postinc1	equ	0xFE6
 23119                           postdec1	equ	0xFE5
 23120                           fsr1h	equ	0xFE2
 23121                           fsr1l	equ	0xFE1
 23122                           indf2	equ	0xFDF
 23123                           postinc2	equ	0xFDE
 23124                           postdec2	equ	0xFDD
 23125                           plusw2	equ	0xFDB
 23126                           fsr2h	equ	0xFDA
 23127                           fsr2l	equ	0xFD9
 23128                           status	equ	0xFD8
 23129                           
 23130 ;; *************** function _fifo_read *****************
 23131 ;; Defined at:
 23132 ;;		line 29 in file "fifo.c"
 23133 ;; Parameters:    Size  Location     Type
 23134 ;;  f               2    0[BANK0 ] PTR struct .
 23135 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 23136 ;;  buf             2    2[BANK0 ] PTR const void 
 23137 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 23138 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 23139 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 23140 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 23141 ;;  nbytes          2    4[BANK0 ] unsigned short 
 23142 ;; Auto vars:     Size  Location     Type
 23143 ;;  i               2    8[BANK0 ] unsigned short 
 23144 ;;  p               2    6[BANK0 ] PTR unsigned char 
 23145 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 23146 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 23147 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 23148 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 23149 ;; Return value:  Size  Location     Type
 23150 ;;                  2    0[BANK0 ] unsigned short 
 23151 ;; Registers used:
 23152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23153 ;; Tracked objects:
 23154 ;;		On entry : F/0
 23155 ;;		On exit  : F/0
 23156 ;;		Unchanged: 0/0
 23157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23158 ;;      Params:         0       6       0       0       0       0       0
 23159 ;;      Locals:         0       4       0       0       0       0       0
 23160 ;;      Temps:          4       0       0       0       0       0       0
 23161 ;;      Totals:         4      10       0       0       0       0       0
 23162 ;;Total ram usage:       14 bytes
 23163 ;; Hardware stack levels used:    1
 23164 ;; Hardware stack levels required when called:    3
 23165 ;; This function calls:
 23166 ;;		Nothing
 23167 ;; This function is called by:
 23168 ;;		_main
 23169 ;;		_doModeVerbose
 23170 ;;		_doModeVscp
 23171 ;;		_doModeSLCAN
 23172 ;;		_getCANFrame
 23173 ;; This function uses a non-reentrant model
 23174 ;;
 23175                           
 23176                           	psect	text55
 23177  00518A                     __ptext55:
 23178                           	opt stack 0
 23179  00518A                     _fifo_read:
 23180                           	opt stack 24
 23181                           
 23182                           ; BSR set to: 0
 23183                           ;fifo.c: 30: uint16_t i;
 23184                           ;fifo.c: 31: uint8_t *p;
 23185                           ;fifo.c: 32: p = buf;
 23186                           
 23187                           ; BSR set to: 0
 23188                           ;incstack = 0
 23189                           ;incstack = 0
 23190  00518A  C062  F066         	movff	fifo_read@buf,fifo_read@p
 23191  00518E  C063  F067         	movff	fifo_read@buf+1,fifo_read@p+1
 23192                           
 23193                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 23194  005192  6B68               	clrf	fifo_read@i& (0+255),b
 23195  005194  6B69               	clrf	(fifo_read@i+1)& (0+255),b
 23196  005196  D04A               	goto	l15237
 23197  005198                     l15223:
 23198                           
 23199                           ; BSR set to: 0
 23200                           ;fifo.c: 36: if ( f->tail != f->head ) {
 23201  005198  EE20 F002          	lfsr	2,2
 23202  00519C  D851               	call	PL44	;call to abstracted procedure
 23203  00519E  18E5               	xorwf	postdec1,w,c
 23204  0051A0  CFDF FFE8          	movff	indf2,wreg
 23205  0051A4  B4D8               	btfsc	status,2,c
 23206  0051A6  18E7               	xorwf	indf1,w,c
 23207  0051A8  E03A               	bz	l1675
 23208                           
 23209                           ; BSR set to: 0
 23210                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 23211  0051AA  EE20 F004          	lfsr	2,4
 23212  0051AE  5160               	movf	fifo_read@f& (0+255),w,b
 23213  0051B0  26D9               	addwf	fsr2l,f,c
 23214  0051B2  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 23215  0051B4  22DA               	addwfc	fsr2h,f,c
 23216  0051B6  CFDE F01F          	movff	postinc2,??_fifo_read
 23217  0051BA  CFDD F020          	movff	postdec2,??_fifo_read+1
 23218  0051BE  C060  FFD9         	movff	fifo_read@f,fsr2l
 23219  0051C2  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 23220  0051C6  CFDE F021          	movff	postinc2,??_fifo_read+2
 23221  0051CA  CFDD F022          	movff	postdec2,??_fifo_read+3
 23222  0051CE  501F               	movf	??_fifo_read,w,c
 23223  0051D0  2421               	addwf	??_fifo_read+2,w,c
 23224  0051D2  6ED9               	movwf	fsr2l,c
 23225  0051D4  5020               	movf	??_fifo_read+1,w,c
 23226  0051D6  2022               	addwfc	??_fifo_read+3,w,c
 23227  0051D8  6EDA               	movwf	fsr2h,c
 23228  0051DA  C066  FFE1         	movff	fifo_read@p,fsr1l
 23229  0051DE  C067  FFE2         	movff	fifo_read@p+1,fsr1h
 23230  0051E2  CFDF FFE7          	movff	indf2,indf1
 23231                           
 23232                           ; BSR set to: 0
 23233  0051E6  4B66               	infsnz	fifo_read@p& (0+255),f,b
 23234  0051E8  2B67               	incf	(fifo_read@p+1)& (0+255),f,b
 23235                           
 23236                           ; BSR set to: 0
 23237                           ;fifo.c: 38: f->tail++;
 23238  0051EA  EE20 F004          	lfsr	2,4
 23239  0051EE  5160               	movf	fifo_read@f& (0+255),w,b
 23240  0051F0  26D9               	addwf	fsr2l,f,c
 23241  0051F2  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 23242  0051F4  22DA               	addwfc	fsr2h,f,c
 23243  0051F6  2ADE               	incf	postinc2,f,c
 23244  0051F8  0E00               	movlw	0
 23245  0051FA  22DD               	addwfc	postdec2,f,c
 23246                           
 23247                           ; BSR set to: 0
 23248                           ;fifo.c: 39: if (f->tail >= f->size) {
 23249  0051FC  EE20 F006          	lfsr	2,6
 23250  005200  D81F               	call	PL44	;call to abstracted procedure
 23251  005202  5CE5               	subwf	postdec1,w,c
 23252  005204  E102               	bnz	u19195
 23253  005206  50DF               	movf	indf2,w,c
 23254  005208  5CE7               	subwf	indf1,w,c
 23255  00520A                     u19195:
 23256  00520A  E30E               	bnc	l15235
 23257                           
 23258                           ; BSR set to: 0
 23259                           ;fifo.c: 40: f->tail = 0;
 23260  00520C  EE20 F004          	lfsr	2,4
 23261  005210  5160               	movf	fifo_read@f& (0+255),w,b
 23262  005212  26D9               	addwf	fsr2l,f,c
 23263  005214  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 23264  005216  22DA               	addwfc	fsr2h,f,c
 23265  005218  6ADE               	clrf	postinc2,c
 23266  00521A  6ADD               	clrf	postdec2,c
 23267  00521C  D005               	goto	l15235
 23268  00521E                     l1675:
 23269                           
 23270                           ; BSR set to: 0
 23271                           ;fifo.c: 43: else {
 23272                           ;fifo.c: 44: return i;
 23273  00521E  C068  F060         	movff	fifo_read@i,?_fifo_read
 23274  005222  C069  F061         	movff	fifo_read@i+1,?_fifo_read+1
 23275  005226  D00B               	goto	l1678
 23276  005228                     l15235:
 23277                           
 23278                           ; BSR set to: 0
 23279  005228  4B68               	infsnz	fifo_read@i& (0+255),f,b
 23280  00522A  2B69               	incf	(fifo_read@i+1)& (0+255),f,b
 23281  00522C                     l15237:
 23282                           
 23283                           ; BSR set to: 0
 23284  00522C  5164               	movf	fifo_read@nbytes& (0+255),w,b
 23285  00522E  5D68               	subwf	fifo_read@i& (0+255),w,b
 23286  005230  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 23287  005232  5969               	subwfb	(fifo_read@i+1)& (0+255),w,b
 23288  005234  E3B1               	bnc	l15223
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;fifo.c: 45: }
 23292                           ;fifo.c: 47: }
 23293                           ;fifo.c: 49: return nbytes;
 23294  005236  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 23295  00523A  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 23296  00523E                     l1678:
 23297                           
 23298                           ; BSR set to: 0
 23299  00523E  0012               	return	
 23300  005240                     __end_of_fifo_read:
 23301                           	opt stack 0
 23302  005240                     PL44:
 23303                           	opt stack 24
 23304  005240  5160               	movf	fifo_read@f& (0+255),w,b
 23305  005242  26D9               	addwf	fsr2l,f,c
 23306  005244  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 23307  005246  22DA               	addwfc	fsr2h,f,c
 23308  005248  EE10 F004          	lfsr	1,4
 23309  00524C  5160               	movf	fifo_read@f& (0+255),w,b
 23310  00524E  26E1               	addwf	fsr1l,f,c
 23311  005250  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 23312  005252  22E2               	addwfc	fsr1h,f,c
 23313  005254  52E6               	movf	postinc1,f,c
 23314  005256  52DE               	movf	postinc2,f,c
 23315  005258  50DD               	movf	postdec2,w,c
 23316  00525A  0012               	return	
 23317  00525C                     __end_ofPL44:
 23318                           	opt stack 0
 23319                           tblptru	equ	0xFF8
 23320                           tblptrh	equ	0xFF7
 23321                           tblptrl	equ	0xFF6
 23322                           tablat	equ	0xFF5
 23323                           prodh	equ	0xFF4
 23324                           prodl	equ	0xFF3
 23325                           intcon	equ	0xFF2
 23326                           indf0	equ	0xFEF
 23327                           postinc0	equ	0xFEE
 23328                           fsr0h	equ	0xFEA
 23329                           fsr0l	equ	0xFE9
 23330                           wreg	equ	0xFE8
 23331                           indf1	equ	0xFE7
 23332                           postinc1	equ	0xFE6
 23333                           postdec1	equ	0xFE5
 23334                           fsr1h	equ	0xFE2
 23335                           fsr1l	equ	0xFE1
 23336                           indf2	equ	0xFDF
 23337                           postinc2	equ	0xFDE
 23338                           postdec2	equ	0xFDD
 23339                           plusw2	equ	0xFDB
 23340                           fsr2h	equ	0xFDA
 23341                           fsr2l	equ	0xFD9
 23342                           status	equ	0xFD8
 23343                           
 23344 ;; *************** function _sprintf *****************
 23345 ;; Defined at:
 23346 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 23347 ;; Parameters:    Size  Location     Type
 23348 ;;  sp              2   17[BANK0 ] PTR unsigned char 
 23349 ;;		 -> wrkbuf(80), 
 23350 ;;  f               2   19[BANK0 ] PTR const unsigned char 
 23351 ;;		 -> STR_243(3), STR_242(7), STR_236(3), STR_235(7), 
 23352 ;;		 -> STR_231(4), STR_230(8), STR_227(4), STR_226(8), 
 23353 ;;		 -> STR_223(4), STR_222(8), STR_219(4), STR_218(8), 
 23354 ;;		 -> STR_215(4), STR_214(7), STR_211(4), STR_210(7), 
 23355 ;;		 -> STR_207(4), STR_206(7), STR_203(4), STR_202(7), 
 23356 ;;		 -> STR_197(3), STR_196(7), STR_194(3), STR_193(7), 
 23357 ;;		 -> STR_191(3), STR_190(7), STR_188(3), STR_187(7), 
 23358 ;;		 -> STR_185(3), STR_184(7), STR_182(4), STR_181(8), 
 23359 ;;		 -> STR_179(3), STR_178(7), STR_101(3), STR_100(7), 
 23360 ;;		 -> STR_96(4), STR_95(8), STR_92(4), STR_91(8), 
 23361 ;;		 -> STR_77(3), STR_76(7), STR_75(3), STR_74(7), 
 23362 ;;		 -> STR_72(6), STR_71(10), STR_66(3), STR_65(7), 
 23363 ;;		 -> STR_63(3), STR_62(7), STR_61(3), STR_60(7), 
 23364 ;;		 -> STR_58(6), STR_57(10), 
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;  idx             1   28[BANK0 ] unsigned char 
 23367 ;;  _val            4   40[BANK0 ] struct .
 23368 ;;  flag            2   45[BANK0 ] unsigned short 
 23369 ;;  width           2   38[BANK0 ] int 
 23370 ;;  prec            2   36[BANK0 ] int 
 23371 ;;  c               1   44[BANK0 ] char 
 23372 ;;  ap              1   35[BANK0 ] PTR void [1]
 23373 ;;		 -> ?_sprintf(2), 
 23374 ;; Return value:  Size  Location     Type
 23375 ;;                  2   17[BANK0 ] int 
 23376 ;; Registers used:
 23377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23378 ;; Tracked objects:
 23379 ;;		On entry : F/0
 23380 ;;		On exit  : F/0
 23381 ;;		Unchanged: 0/0
 23382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23383 ;;      Params:         0       8       0       0       0       0       0
 23384 ;;      Locals:         0      19       0       0       0       0       0
 23385 ;;      Temps:          0       3       0       0       0       0       0
 23386 ;;      Totals:         0      30       0       0       0       0       0
 23387 ;;Total ram usage:       30 bytes
 23388 ;; Hardware stack levels used:    1
 23389 ;; Hardware stack levels required when called:    4
 23390 ;; This function calls:
 23391 ;;		_isdigit
 23392 ;;		___lldiv
 23393 ;;		___llmod
 23394 ;;		___wmul
 23395 ;; This function is called by:
 23396 ;;		_doModeVerbose
 23397 ;;		_receivePrintEventVerbose
 23398 ;;		_printStatistics
 23399 ;;		_printErrors
 23400 ;; This function uses a non-reentrant model
 23401 ;;
 23402                           
 23403                           	psect	text56
 23404  001FFA                     __ptext56:
 23405                           	opt stack 0
 23406  001FFA                     _sprintf:
 23407                           	opt stack 25
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;doprnt.c: 494: va_list ap;
 23411                           ;doprnt.c: 499: signed char c;
 23412                           ;doprnt.c: 501: int width;
 23413                           ;doprnt.c: 504: int prec;
 23414                           ;doprnt.c: 508: unsigned short flag;
 23415                           ;doprnt.c: 527: union {
 23416                           ;doprnt.c: 528: unsigned long _val;
 23417                           ;doprnt.c: 529: struct {
 23418                           ;doprnt.c: 530: const char * _cp;
 23419                           ;doprnt.c: 531: unsigned _len;
 23420                           ;doprnt.c: 532: } _str;
 23421                           ;doprnt.c: 533: } _val;
 23422                           ;doprnt.c: 542: *ap = __va_start();
 23423                           
 23424                           ; BSR set to: 0
 23425                           ;incstack = 0
 23426                           ;incstack = 0
 23427  001FFA  0E75               	movlw	low (?_sprintf+4)
 23428  001FFC  6F83               	movwf	sprintf@ap& (0+255),b
 23429                           
 23430                           ;doprnt.c: 545: while(c = *f++) {
 23431  001FFE  D332               	goto	l17563
 23432  002000                     l17229:
 23433                           
 23434                           ; BSR set to: 0
 23435                           ;doprnt.c: 547: if(c != '%')
 23436  002000  518C               	movf	sprintf@c& (0+255),w,b
 23437  002002  0A25               	xorlw	37
 23438  002004  E009               	bz	l1762
 23439                           
 23440                           ; BSR set to: 0
 23441                           ;doprnt.c: 549: {
 23442                           ;doprnt.c: 550: ((*sp++ = (c)));
 23443  002006  C071  FFD9         	movff	sprintf@sp,fsr2l
 23444  00200A  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 23445  00200E  C08C  FFDF         	movff	sprintf@c,indf2
 23446                           
 23447                           ; BSR set to: 0
 23448  002012  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23449  002014  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23450                           
 23451                           ;doprnt.c: 551: continue;
 23452  002016  D326               	goto	l17563
 23453  002018                     l1762:
 23454                           
 23455                           ; BSR set to: 0
 23456                           ;doprnt.c: 552: }
 23457                           ;doprnt.c: 555: width = 0;
 23458  002018  6B86               	clrf	sprintf@width& (0+255),b
 23459  00201A  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23460                           
 23461                           ;doprnt.c: 557: flag = 0;
 23462  00201C  6B8D               	clrf	sprintf@flag& (0+255),b
 23463  00201E  6B8E               	clrf	(sprintf@flag+1)& (0+255),b
 23464  002020  D009               	goto	l17245
 23465  002022                     l17235:
 23466                           
 23467                           ; BSR set to: 0
 23468                           ;doprnt.c: 563: flag |= 0x08;
 23469  002022  878D               	bsf	sprintf@flag& (0+255),3,b
 23470  002024  D005               	goto	L41
 23471  002026                     l17237:
 23472                           
 23473                           ; BSR set to: 0
 23474                           ;doprnt.c: 570: flag |= 0x01;
 23475  002026  818D               	bsf	sprintf@flag& (0+255),0,b
 23476  002028  D003               	goto	L41
 23477  00202A                     l17239:
 23478                           
 23479                           ; BSR set to: 0
 23480                           ;doprnt.c: 583: flag |= 0x800;
 23481  00202A  878E               	bsf	(sprintf@flag+1)& (0+255),3,b
 23482  00202C  D001               	goto	L41
 23483  00202E                     l17241:
 23484                           
 23485                           ; BSR set to: 0
 23486                           ;doprnt.c: 589: flag |= 0x04;
 23487  00202E  858D               	bsf	sprintf@flag& (0+255),2,b
 23488  002030                     L41:
 23489                           
 23490                           ;doprnt.c: 590: f++;
 23491  002030  4B73               	infsnz	sprintf@f& (0+255),f,b
 23492  002032  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23493  002034                     l17245:
 23494                           
 23495                           ; BSR set to: 0
 23496  002034  C073  FFF6         	movff	sprintf@f,tblptrl
 23497  002038  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23498  00203C  0008               	tblrd		*
 23499  00203E  50F5               	movf	tablat,w,c
 23500                           
 23501                           ; Switch size 1, requested type "space"
 23502                           ; Number of cases is 4, Range of values is 32 to 48
 23503                           ; switch strategies available:
 23504                           ; Name         Instructions Cycles
 23505                           ; simple_byte           13     7 (average)
 23506                           ;	Chosen strategy is simple_byte
 23507  002040  0A20               	xorlw	32	; case 32
 23508  002042  E0F1               	bz	l17237
 23509  002044  0A03               	xorlw	3	; case 35
 23510  002046  E0F1               	bz	l17239
 23511  002048  0A0E               	xorlw	14	; case 45
 23512  00204A  E0EB               	bz	l17235
 23513  00204C  0A1D               	xorlw	29	; case 48
 23514  00204E  E0EF               	bz	l17241
 23515                           
 23516                           ; BSR set to: 0
 23517                           ;doprnt.c: 602: if(flag & 0x08)
 23518  002050  B78D               	btfsc	sprintf@flag& (0+255),3,b
 23519                           
 23520                           ; BSR set to: 0
 23521                           ;doprnt.c: 603: flag &= ~0x04;
 23522  002052  958D               	bcf	sprintf@flag& (0+255),2,b
 23523                           
 23524                           ; BSR set to: 0
 23525                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 23526  002054  C073  FFF6         	movff	sprintf@f,tblptrl
 23527  002058  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23528  00205C  0008               	tblrd		*
 23529  00205E  50F5               	movf	tablat,w,c
 23530  002060  EC2C  F034         	call	_isdigit
 23531  002064  E327               	bnc	l17261
 23532                           
 23533                           ;doprnt.c: 607: width = 0;
 23534  002066  0100               	movlb	0	; () banked
 23535  002068  6B86               	clrf	sprintf@width& (0+255),b
 23536  00206A  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23537  00206C                     l17253:
 23538                           
 23539                           ;doprnt.c: 609: width *= 10;
 23540  00206C  C086  F060         	movff	sprintf@width,?___wmul
 23541  002070  C087  F061         	movff	sprintf@width+1,?___wmul+1
 23542  002074  0100               	movlb	0	; () banked
 23543  002076  6B63               	clrf	(?___wmul+3)& (0+255),b
 23544  002078  0E0A               	movlw	10
 23545  00207A  6F62               	movwf	(?___wmul+2)& (0+255),b
 23546  00207C  EC9A  F033         	call	___wmul	;wreg free
 23547  002080  C060  F086         	movff	?___wmul,sprintf@width
 23548  002084  C061  F087         	movff	?___wmul+1,sprintf@width+1
 23549                           
 23550                           ; BSR set to: 0
 23551                           ;doprnt.c: 610: width += *f++ - '0';
 23552  002088  C073  FFF6         	movff	sprintf@f,tblptrl
 23553  00208C  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23554  002090  0008               	tblrd		*
 23555  002092  CFF5 F079          	movff	tablat,??_sprintf
 23556  002096  0ED0               	movlw	208
 23557  002098  2579               	addwf	??_sprintf& (0+255),w,b
 23558  00209A  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 23559  00209C  6B7B               	clrf	(??_sprintf+2)& (0+255),b
 23560  00209E  0EFF               	movlw	255
 23561  0020A0  237B               	addwfc	(??_sprintf+2)& (0+255),f,b
 23562  0020A2  517A               	movf	(??_sprintf+1)& (0+255),w,b
 23563  0020A4  2786               	addwf	sprintf@width& (0+255),f,b
 23564  0020A6  517B               	movf	(??_sprintf+2)& (0+255),w,b
 23565  0020A8  2387               	addwfc	(sprintf@width+1)& (0+255),f,b
 23566                           
 23567                           ; BSR set to: 0
 23568                           
 23569                           ; BSR set to: 0
 23570                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 23571  0020AA  DB3A               	call	PL102	;call to abstracted procedure
 23572  0020AC  EC2C  F034         	call	_isdigit
 23573  0020B0  E315               	bnc	l17269
 23574  0020B2  D7DC               	goto	l17253
 23575  0020B4                     l17261:
 23576  0020B4  0100               	movlb	0	; () banked
 23577  0020B6  C073  FFF6         	movff	sprintf@f,tblptrl
 23578  0020BA  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23579  0020BE  0008               	tblrd		*
 23580  0020C0  50F5               	movf	tablat,w,c
 23581  0020C2  0A2A               	xorlw	42
 23582  0020C4  E10B               	bnz	l17269
 23583                           
 23584                           ; BSR set to: 0
 23585                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 23586  0020C6  5183               	movf	sprintf@ap& (0+255),w,b
 23587  0020C8  6ED9               	movwf	fsr2l,c
 23588  0020CA  6ADA               	clrf	fsr2h,c
 23589  0020CC  CFDE F086          	movff	postinc2,sprintf@width
 23590  0020D0  CFDD F087          	movff	postdec2,sprintf@width+1
 23591                           
 23592                           ; BSR set to: 0
 23593  0020D4  0E02               	movlw	2
 23594  0020D6  2783               	addwf	sprintf@ap& (0+255),f,b
 23595                           
 23596                           ; BSR set to: 0
 23597                           ;doprnt.c: 615: f++;
 23598  0020D8  4B73               	infsnz	sprintf@f& (0+255),f,b
 23599  0020DA  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23600  0020DC                     l17269:
 23601                           
 23602                           ;doprnt.c: 617: }
 23603                           ;doprnt.c: 620: if(*f == '.') {
 23604  0020DC  0100               	movlb	0	; () banked
 23605  0020DE  C073  FFF6         	movff	sprintf@f,tblptrl
 23606  0020E2  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23607  0020E6  0008               	tblrd		*
 23608  0020E8  50F5               	movf	tablat,w,c
 23609  0020EA  0A2E               	xorlw	46
 23610  0020EC  E138               	bnz	l1778
 23611                           
 23612                           ; BSR set to: 0
 23613                           ;doprnt.c: 621: flag |= 0x4000;
 23614  0020EE  8D8E               	bsf	(sprintf@flag+1)& (0+255),6,b
 23615                           
 23616                           ;doprnt.c: 622: f++;
 23617                           
 23618                           ; BSR set to: 0
 23619                           ;doprnt.c: 624: if(*f == '*') {
 23620  0020F0  DB17               	call	PL102	;call to abstracted procedure
 23621  0020F2  0A2A               	xorlw	42
 23622  0020F4  E10C               	bnz	l1779
 23623                           
 23624                           ; BSR set to: 0
 23625                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 23626  0020F6  5183               	movf	sprintf@ap& (0+255),w,b
 23627  0020F8  6ED9               	movwf	fsr2l,c
 23628  0020FA  6ADA               	clrf	fsr2h,c
 23629  0020FC  CFDE F084          	movff	postinc2,sprintf@prec
 23630  002100  CFDD F085          	movff	postdec2,sprintf@prec+1
 23631                           
 23632                           ; BSR set to: 0
 23633  002104  0E02               	movlw	2
 23634  002106  2783               	addwf	sprintf@ap& (0+255),f,b
 23635                           
 23636                           ; BSR set to: 0
 23637                           ;doprnt.c: 626: f++;
 23638  002108  4B73               	infsnz	sprintf@f& (0+255),f,b
 23639  00210A  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23640                           
 23641                           ;doprnt.c: 627: } else
 23642  00210C  D089               	goto	l17339
 23643  00210E                     l1779:
 23644                           
 23645                           ; BSR set to: 0
 23646                           ;doprnt.c: 629: {
 23647                           ;doprnt.c: 630: prec = 0;
 23648  00210E  6B84               	clrf	sprintf@prec& (0+255),b
 23649  002110  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 23650                           
 23651                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 23652  002112  D01B               	goto	l17285
 23653  002114                     l17281:
 23654                           
 23655                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 23656  002114  C084  F060         	movff	sprintf@prec,?___wmul
 23657  002118  C085  F061         	movff	sprintf@prec+1,?___wmul+1
 23658  00211C  0100               	movlb	0	; () banked
 23659  00211E  6B63               	clrf	(?___wmul+3)& (0+255),b
 23660  002120  0E0A               	movlw	10
 23661  002122  6F62               	movwf	(?___wmul+2)& (0+255),b
 23662  002124  EC9A  F033         	call	___wmul	;wreg free
 23663  002128  C073  FFF6         	movff	sprintf@f,tblptrl
 23664  00212C  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23665  002130  0008               	tblrd		*
 23666  002132  50F5               	movf	tablat,w,c
 23667  002134  2760               	addwf	?___wmul& (0+255),f,b
 23668  002136  0E00               	movlw	0
 23669  002138  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 23670  00213A  0ED0               	movlw	208
 23671  00213C  2560               	addwf	?___wmul& (0+255),w,b
 23672  00213E  6F84               	movwf	sprintf@prec& (0+255),b
 23673  002140  0EFF               	movlw	255
 23674  002142  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 23675  002144  6F85               	movwf	(sprintf@prec+1)& (0+255),b
 23676                           
 23677                           ; BSR set to: 0
 23678  002146  4B73               	infsnz	sprintf@f& (0+255),f,b
 23679  002148  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 23680  00214A                     l17285:
 23681                           
 23682                           ; BSR set to: 0
 23683  00214A  C073  FFF6         	movff	sprintf@f,tblptrl
 23684  00214E  C074  FFF7         	movff	sprintf@f+1,tblptrh
 23685  002152  0008               	tblrd		*
 23686  002154  50F5               	movf	tablat,w,c
 23687  002156  EC2C  F034         	call	_isdigit
 23688  00215A  E362               	bnc	l17339
 23689  00215C  D7DB               	goto	l17281
 23690  00215E                     l1778:
 23691                           
 23692                           ; BSR set to: 0
 23693                           ;doprnt.c: 635: prec = 0;
 23694  00215E  6B84               	clrf	sprintf@prec& (0+255),b
 23695  002160  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 23696  002162  D05E               	goto	l17339
 23697  002164                     l17287:
 23698                           
 23699                           ; BSR set to: 0
 23700                           ;doprnt.c: 652: flag |= 0x10;
 23701  002164  898D               	bsf	sprintf@flag& (0+255),4,b
 23702                           
 23703                           ;doprnt.c: 653: goto loop;
 23704  002166  D05C               	goto	l17339
 23705  002168                     l17289:
 23706                           
 23707                           ; BSR set to: 0
 23708                           ;doprnt.c: 700: flag |= 0x40;
 23709  002168  8D8D               	bsf	sprintf@flag& (0+255),6,b
 23710                           
 23711                           ;doprnt.c: 702: break;
 23712  00216A  D070               	goto	l17341
 23713  00216C                     l17291:
 23714                           
 23715                           ; BSR set to: 0
 23716                           ;doprnt.c: 723: flag |= 0x20;
 23717  00216C  8B8D               	bsf	sprintf@flag& (0+255),5,b
 23718  00216E                     l1795:
 23719                           
 23720                           ; BSR set to: 0
 23721                           ;doprnt.c: 730: flag |= 0x80;
 23722  00216E  8F8D               	bsf	sprintf@flag& (0+255),7,b
 23723                           
 23724                           ;doprnt.c: 732: break;
 23725  002170  D06D               	goto	l17341
 23726  002172                     l17293:
 23727                           
 23728                           ; BSR set to: 0
 23729                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 23730  002172  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 23731  002174  1184               	iorwf	sprintf@prec& (0+255),w,b
 23732  002176  E009               	bz	l17299
 23733                           
 23734                           ; BSR set to: 0
 23735  002178  5189               	movf	(sprintf@_val+1)& (0+255),w,b
 23736  00217A  5D84               	subwf	sprintf@prec& (0+255),w,b
 23737  00217C  518A               	movf	(sprintf@_val+2)& (0+255),w,b
 23738  00217E  5985               	subwfb	(sprintf@prec+1)& (0+255),w,b
 23739  002180  E204               	bc	l17299
 23740                           
 23741                           ; BSR set to: 0
 23742                           ;doprnt.c: 763: _val._str._len = prec;
 23743  002182  C084  F089         	movff	sprintf@prec,sprintf@_val+1
 23744  002186  C085  F08A         	movff	sprintf@prec+1,sprintf@_val+2
 23745  00218A                     l17299:
 23746                           
 23747                           ; BSR set to: 0
 23748                           ;doprnt.c: 766: if(width > _val._str._len)
 23749  00218A  5186               	movf	sprintf@width& (0+255),w,b
 23750  00218C  5D89               	subwf	(sprintf@_val+1)& (0+255),w,b
 23751  00218E  5187               	movf	(sprintf@width+1)& (0+255),w,b
 23752  002190  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 23753  002192  E207               	bc	l1798
 23754                           
 23755                           ; BSR set to: 0
 23756                           ;doprnt.c: 767: width -= _val._str._len;
 23757  002194  EE20  F089         	lfsr	2,sprintf@_val+1
 23758  002198  50DE               	movf	postinc2,w,c
 23759  00219A  5F86               	subwf	sprintf@width& (0+255),f,b
 23760  00219C  50DD               	movf	postdec2,w,c
 23761  00219E  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 23762  0021A0  D002               	goto	l1799
 23763  0021A2                     l1798:
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;doprnt.c: 768: else
 23767                           ;doprnt.c: 769: width = 0;
 23768  0021A2  6B86               	clrf	sprintf@width& (0+255),b
 23769  0021A4  6B87               	clrf	(sprintf@width+1)& (0+255),b
 23770  0021A6                     l1799:
 23771                           
 23772                           ; BSR set to: 0
 23773                           ;doprnt.c: 771: if(!(flag & 0x08))
 23774  0021A6  A78D               	btfss	sprintf@flag& (0+255),3,b
 23775  0021A8  D004               	goto	l17309
 23776  0021AA  D015               	goto	l17317
 23777  0021AC                     l17305:
 23778                           
 23779                           ; BSR set to: 0
 23780                           ;doprnt.c: 774: ((*sp++ = (' ')));
 23781  0021AC  DAA8               	call	PL72	;call to abstracted procedure
 23782                           
 23783                           ; BSR set to: 0
 23784  0021AE  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23785  0021B0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23786  0021B2                     l17309:
 23787                           
 23788                           ; BSR set to: 0
 23789  0021B2  0786               	decf	sprintf@width& (0+255),f,b
 23790  0021B4  DAC3               	call	PL136	;call to abstracted procedure
 23791  0021B6  B4D8               	btfsc	status,2,c
 23792  0021B8  2987               	incf	(sprintf@width+1)& (0+255),w,b
 23793  0021BA  E00D               	bz	l17317
 23794  0021BC  D7F7               	goto	l17305
 23795  0021BE                     l17311:
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 23799  0021BE  5188               	movf	sprintf@_val& (0+255),w,b
 23800  0021C0  6ED9               	movwf	fsr2l,c
 23801  0021C2  6ADA               	clrf	fsr2h,c
 23802  0021C4  C071  FFE1         	movff	sprintf@sp,fsr1l
 23803  0021C8  C072  FFE2         	movff	sprintf@sp+1,fsr1h
 23804  0021CC  CFDF FFE7          	movff	indf2,indf1
 23805                           
 23806                           ; BSR set to: 0
 23807  0021D0  2B88               	incf	sprintf@_val& (0+255),f,b
 23808                           
 23809                           ; BSR set to: 0
 23810  0021D2  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23811  0021D4  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23812  0021D6                     l17317:
 23813                           
 23814                           ; BSR set to: 0
 23815  0021D6  0789               	decf	(sprintf@_val+1)& (0+255),f,b
 23816  0021D8  A0D8               	btfss	status,0,c
 23817  0021DA  078A               	decf	(sprintf@_val+2)& (0+255),f,b
 23818  0021DC  0100               	movlb	0	; () banked
 23819  0021DE  2989               	incf	(sprintf@_val+1)& (0+255),w,b
 23820  0021E0  B4D8               	btfsc	status,2,c
 23821  0021E2  298A               	incf	(sprintf@_val+2)& (0+255),w,b
 23822  0021E4  E1EC               	bnz	l17311
 23823                           
 23824                           ; BSR set to: 0
 23825                           ;doprnt.c: 779: if(flag & 0x08)
 23826  0021E6  B78D               	btfsc	sprintf@flag& (0+255),3,b
 23827  0021E8  D004               	goto	l17325
 23828  0021EA  D23C               	goto	l17563
 23829  0021EC                     l17321:
 23830                           
 23831                           ; BSR set to: 0
 23832                           ;doprnt.c: 781: ((*sp++ = (' ')));
 23833  0021EC  DA88               	call	PL72	;call to abstracted procedure
 23834                           
 23835                           ; BSR set to: 0
 23836  0021EE  4B71               	infsnz	sprintf@sp& (0+255),f,b
 23837  0021F0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 23838  0021F2                     l17325:
 23839                           
 23840                           ; BSR set to: 0
 23841  0021F2  0786               	decf	sprintf@width& (0+255),f,b
 23842  0021F4  DAA3               	call	PL136	;call to abstracted procedure
 23843  0021F6  B4D8               	btfsc	status,2,c
 23844  0021F8  2987               	incf	(sprintf@width+1)& (0+255),w,b
 23845  0021FA  E101 D233          	bz	l17563
 23846  0021FE  D7F6               	goto	l17321
 23847  002200                     l17327:
 23848                           
 23849                           ; BSR set to: 0
 23850                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 23851  002200  5183               	movf	sprintf@ap& (0+255),w,b
 23852  002202  6ED9               	movwf	fsr2l,c
 23853  002204  6ADA               	clrf	fsr2h,c
 23854  002206  50DF               	movf	indf2,w,c
 23855  002208  6F8C               	movwf	sprintf@c& (0+255),b
 23856                           
 23857                           ; BSR set to: 0
 23858  00220A  0E02               	movlw	2
 23859  00220C  2783               	addwf	sprintf@ap& (0+255),f,b
 23860  00220E                     l17331:
 23861                           
 23862                           ; BSR set to: 0
 23863                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 23864  00220E  0E8C               	movlw	low sprintf@c
 23865  002210  6F88               	movwf	sprintf@_val& (0+255),b
 23866                           
 23867                           ; BSR set to: 0
 23868                           ;doprnt.c: 815: _val._str._len = 1;
 23869  002212  6B8A               	clrf	(sprintf@_val+2)& (0+255),b
 23870  002214  0E01               	movlw	1
 23871  002216  6F89               	movwf	(sprintf@_val+1)& (0+255),b
 23872                           
 23873                           ;doprnt.c: 816: goto dostring;
 23874  002218  D7AC               	goto	l17293
 23875  00221A                     l17335:
 23876                           
 23877                           ; BSR set to: 0
 23878                           ;doprnt.c: 827: flag |= 0xC0;
 23879  00221A  0EC0               	movlw	192
 23880  00221C  138D               	iorwf	sprintf@flag& (0+255),f,b
 23881                           
 23882                           ;doprnt.c: 828: break;
 23883  00221E  D016               	goto	l17341
 23884  002220                     l17339:
 23885  002220  0100               	movlb	0	; () banked
 23886  002222  DA74               	call	PL78	;call to abstracted procedure
 23887  002224  518C               	movf	sprintf@c& (0+255),w,b
 23888                           
 23889                           ; Switch size 1, requested type "space"
 23890                           ; Number of cases is 9, Range of values is 0 to 120
 23891                           ; switch strategies available:
 23892                           ; Name         Instructions Cycles
 23893                           ; simple_byte           28    15 (average)
 23894                           ;	Chosen strategy is simple_byte
 23895  002226  E101 D221          	bz	l17565
 23896  00222A  0A58               	xorlw	88	; case 88
 23897  00222C  E09F               	bz	l17291
 23898  00222E  0A3B               	xorlw	59	; case 99
 23899  002230  E0E7               	bz	l17327
 23900  002232  0A07               	xorlw	7	; case 100
 23901  002234  E00B               	bz	l17341
 23902  002236  0A0D               	xorlw	13	; case 105
 23903  002238  E009               	bz	l17341
 23904  00223A  0A05               	xorlw	5	; case 108
 23905  00223C  E093               	bz	l17287
 23906  00223E  0A03               	xorlw	3	; case 111
 23907  002240  E093               	bz	l17289
 23908  002242  0A1A               	xorlw	26	; case 117
 23909  002244  E0EA               	bz	l17335
 23910  002246  0A0D               	xorlw	13	; case 120
 23911  002248  E092               	bz	l1795
 23912  00224A  D7E1               	goto	l17331
 23913  00224C                     l17341:
 23914                           
 23915                           ; BSR set to: 0
 23916                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 23917  00224C  518D               	movf	sprintf@flag& (0+255),w,b
 23918  00224E  0BC0               	andlw	192
 23919  002250  E120               	bnz	l1814
 23920                           
 23921                           ; BSR set to: 0
 23922                           ;doprnt.c: 1260: {
 23923                           ;doprnt.c: 1262: if(flag & 0x10)
 23924  002252  A98D               	btfss	sprintf@flag& (0+255),4,b
 23925  002254  D003               	goto	l17349
 23926                           
 23927                           ; BSR set to: 0
 23928                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 23929  002256  5183               	movf	sprintf@ap& (0+255),w,b
 23930                           
 23931                           ; BSR set to: 0
 23932  002258  DA47               	call	PL62	;call to abstracted procedure
 23933  00225A  D00D               	goto	L42
 23934  00225C                     l17349:
 23935                           
 23936                           ; BSR set to: 0
 23937                           ;doprnt.c: 1264: else
 23938                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 23939  00225C  5183               	movf	sprintf@ap& (0+255),w,b
 23940  00225E  6ED9               	movwf	fsr2l,c
 23941  002260  6ADA               	clrf	fsr2h,c
 23942  002262  CFDE F088          	movff	postinc2,sprintf@_val
 23943  002266  CFDD F089          	movff	postdec2,sprintf@_val+1
 23944  00226A  0E00               	movlw	0
 23945  00226C  BF89               	btfsc	(sprintf@_val+1)& (0+255),7,b
 23946  00226E  0EFF               	movlw	-1
 23947  002270  6F8A               	movwf	(sprintf@_val+2)& (0+255),b
 23948  002272  6F8B               	movwf	(sprintf@_val+3)& (0+255),b
 23949                           
 23950                           ; BSR set to: 0
 23951  002274  0E02               	movlw	2
 23952  002276                     L42:
 23953  002276  2783               	addwf	sprintf@ap& (0+255),f,b
 23954                           
 23955                           ; BSR set to: 0
 23956                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 23957  002278  AF8B               	btfss	(sprintf@_val+3)& (0+255),7,b
 23958  00227A  D01F               	goto	l17367
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;doprnt.c: 1269: flag |= 0x03;
 23962  00227C  0E03               	movlw	3
 23963  00227E  138D               	iorwf	sprintf@flag& (0+255),f,b
 23964                           
 23965                           ; BSR set to: 0
 23966                           ;doprnt.c: 1270: _val._val = -_val._val;
 23967  002280  1F8B               	comf	(sprintf@_val+3)& (0+255),f,b
 23968  002282  1F8A               	comf	(sprintf@_val+2)& (0+255),f,b
 23969  002284  1F89               	comf	(sprintf@_val+1)& (0+255),f,b
 23970  002286  6D88               	negf	sprintf@_val& (0+255),b
 23971  002288  0E00               	movlw	0
 23972  00228A  2389               	addwfc	(sprintf@_val+1)& (0+255),f,b
 23973  00228C  238A               	addwfc	(sprintf@_val+2)& (0+255),f,b
 23974  00228E  238B               	addwfc	(sprintf@_val+3)& (0+255),f,b
 23975  002290  D014               	goto	l17367
 23976  002292                     l1814:
 23977                           
 23978                           ; BSR set to: 0
 23979                           ;doprnt.c: 1275: else
 23980                           ;doprnt.c: 1280: {
 23981                           ;doprnt.c: 1288: if(flag & 0x10)
 23982  002292  A98D               	btfss	sprintf@flag& (0+255),4,b
 23983  002294  D003               	goto	l17363
 23984                           
 23985                           ; BSR set to: 0
 23986                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 23987  002296  5183               	movf	sprintf@ap& (0+255),w,b
 23988                           
 23989                           ; BSR set to: 0
 23990  002298  DA27               	call	PL62	;call to abstracted procedure
 23991  00229A  D00E               	goto	L43
 23992  00229C                     l17363:
 23993                           
 23994                           ; BSR set to: 0
 23995                           ;doprnt.c: 1290: else
 23996                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 23997  00229C  5183               	movf	sprintf@ap& (0+255),w,b
 23998  00229E  6ED9               	movwf	fsr2l,c
 23999  0022A0  6ADA               	clrf	fsr2h,c
 24000  0022A2  CFDE F079          	movff	postinc2,??_sprintf
 24001  0022A6  CFDD F07A          	movff	postdec2,??_sprintf+1
 24002  0022AA  C079  F088         	movff	??_sprintf,sprintf@_val
 24003  0022AE  C07A  F089         	movff	??_sprintf+1,sprintf@_val+1
 24004  0022B2  6B8A               	clrf	(sprintf@_val+2)& (0+255),b
 24005  0022B4  6B8B               	clrf	(sprintf@_val+3)& (0+255),b
 24006                           
 24007                           ; BSR set to: 0
 24008  0022B6  0E02               	movlw	2
 24009  0022B8                     L43:
 24010  0022B8  2783               	addwf	sprintf@ap& (0+255),f,b
 24011  0022BA                     l17367:
 24012                           
 24013                           ; BSR set to: 0
 24014                           ;doprnt.c: 1294: }
 24015                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 24016  0022BA  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 24017  0022BC  1184               	iorwf	sprintf@prec& (0+255),w,b
 24018  0022BE  E15C               	bnz	l17417
 24019                           
 24020                           ; BSR set to: 0
 24021  0022C0  518B               	movf	(sprintf@_val+3)& (0+255),w,b
 24022  0022C2  1188               	iorwf	sprintf@_val& (0+255),w,b
 24023  0022C4  1189               	iorwf	(sprintf@_val+1)& (0+255),w,b
 24024  0022C6  118A               	iorwf	(sprintf@_val+2)& (0+255),w,b
 24025  0022C8  E157               	bnz	l17417
 24026                           
 24027                           ; BSR set to: 0
 24028                           ;doprnt.c: 1298: prec++;
 24029  0022CA  4B84               	infsnz	sprintf@prec& (0+255),f,b
 24030  0022CC  2B85               	incf	(sprintf@prec+1)& (0+255),f,b
 24031  0022CE  D054               	goto	l17417
 24032  0022D0                     l17373:
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;doprnt.c: 1309: case 0xC0:
 24036                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24037  0022D0  0E01               	movlw	1
 24038  0022D2  6F8C               	movwf	sprintf@c& (0+255),b
 24039  0022D4                     l17375:
 24040                           
 24041                           ; BSR set to: 0
 24042  0022D4  518C               	movf	sprintf@c& (0+255),w,b
 24043  0022D6  0A0A               	xorlw	10
 24044  0022D8  E058               	bz	l17419
 24045                           
 24046                           ; BSR set to: 0
 24047                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 24048  0022DA  518C               	movf	sprintf@c& (0+255),w,b
 24049  0022DC  0D04               	mullw	4
 24050  0022DE  0E5C               	movlw	low _dpowers
 24051  0022E0  24F3               	addwf	prodl,w,c
 24052  0022E2  6EF6               	movwf	tblptrl,c
 24053  0022E4  0E6E               	movlw	high _dpowers
 24054  0022E6  20F4               	addwfc	prodh,w,c
 24055  0022E8  6EF7               	movwf	tblptrh,c
 24056  0022EA  0009               	tblrd		*+
 24057  0022EC  50F5               	movf	tablat,w,c
 24058  0022EE  5D88               	subwf	sprintf@_val& (0+255),w,b
 24059  0022F0  0009               	tblrd		*+
 24060  0022F2  50F5               	movf	tablat,w,c
 24061  0022F4  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24062  0022F6  0009               	tblrd		*+
 24063  0022F8  50F5               	movf	tablat,w,c
 24064  0022FA  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24065  0022FC  0009               	tblrd		*+
 24066  0022FE  50F5               	movf	tablat,w,c
 24067  002300  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24068  002302  E343               	bnc	l17419
 24069                           
 24070                           ; BSR set to: 0
 24071  002304  2B8C               	incf	sprintf@c& (0+255),f,b
 24072  002306  D7E6               	goto	l17375
 24073  002308                     l17387:
 24074                           
 24075                           ; BSR set to: 0
 24076                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 24077  002308  0E01               	movlw	1
 24078  00230A  6F8C               	movwf	sprintf@c& (0+255),b
 24079  00230C                     l17389:
 24080                           
 24081                           ; BSR set to: 0
 24082  00230C  518C               	movf	sprintf@c& (0+255),w,b
 24083  00230E  0A08               	xorlw	8
 24084  002310  E03C               	bz	l17419
 24085                           
 24086                           ; BSR set to: 0
 24087                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 24088  002312  518C               	movf	sprintf@c& (0+255),w,b
 24089  002314  0D04               	mullw	4
 24090  002316  0E84               	movlw	low _hexpowers
 24091  002318  24F3               	addwf	prodl,w,c
 24092  00231A  6EF6               	movwf	tblptrl,c
 24093  00231C  0E6E               	movlw	high _hexpowers
 24094  00231E  20F4               	addwfc	prodh,w,c
 24095  002320  6EF7               	movwf	tblptrh,c
 24096  002322  0009               	tblrd		*+
 24097  002324  50F5               	movf	tablat,w,c
 24098  002326  5D88               	subwf	sprintf@_val& (0+255),w,b
 24099  002328  0009               	tblrd		*+
 24100  00232A  50F5               	movf	tablat,w,c
 24101  00232C  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24102  00232E  0009               	tblrd		*+
 24103  002330  50F5               	movf	tablat,w,c
 24104  002332  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24105  002334  0009               	tblrd		*+
 24106  002336  50F5               	movf	tablat,w,c
 24107  002338  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24108  00233A  E327               	bnc	l17419
 24109                           
 24110                           ; BSR set to: 0
 24111  00233C  2B8C               	incf	sprintf@c& (0+255),f,b
 24112  00233E  D7E6               	goto	l17389
 24113  002340                     l17401:
 24114                           
 24115                           ; BSR set to: 0
 24116                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 24117  002340  0E01               	movlw	1
 24118  002342  6F8C               	movwf	sprintf@c& (0+255),b
 24119  002344                     l17403:
 24120                           
 24121                           ; BSR set to: 0
 24122  002344  518C               	movf	sprintf@c& (0+255),w,b
 24123  002346  0A0C               	xorlw	12
 24124  002348  E020               	bz	l17419
 24125                           
 24126                           ; BSR set to: 0
 24127                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 24128  00234A  518C               	movf	sprintf@c& (0+255),w,b
 24129  00234C  0D04               	mullw	4
 24130  00234E  0E2C               	movlw	low _octpowers
 24131  002350  24F3               	addwf	prodl,w,c
 24132  002352  6EF6               	movwf	tblptrl,c
 24133  002354  0E6E               	movlw	high _octpowers
 24134  002356  20F4               	addwfc	prodh,w,c
 24135  002358  6EF7               	movwf	tblptrh,c
 24136  00235A  0009               	tblrd		*+
 24137  00235C  50F5               	movf	tablat,w,c
 24138  00235E  5D88               	subwf	sprintf@_val& (0+255),w,b
 24139  002360  0009               	tblrd		*+
 24140  002362  50F5               	movf	tablat,w,c
 24141  002364  5989               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24142  002366  0009               	tblrd		*+
 24143  002368  50F5               	movf	tablat,w,c
 24144  00236A  598A               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24145  00236C  0009               	tblrd		*+
 24146  00236E  50F5               	movf	tablat,w,c
 24147  002370  598B               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24148  002372  E30B               	bnc	l17419
 24149                           
 24150                           ; BSR set to: 0
 24151  002374  2B8C               	incf	sprintf@c& (0+255),f,b
 24152  002376  D7E6               	goto	l17403
 24153  002378                     l17417:
 24154                           
 24155                           ; BSR set to: 0
 24156  002378  518D               	movf	sprintf@flag& (0+255),w,b
 24157  00237A  0BC0               	andlw	192
 24158                           
 24159                           ; Switch size 1, requested type "space"
 24160                           ; Number of cases is 4, Range of values is 0 to 192
 24161                           ; switch strategies available:
 24162                           ; Name         Instructions Cycles
 24163                           ; simple_byte           13     7 (average)
 24164                           ;	Chosen strategy is simple_byte
 24165  00237C  E0A9               	bz	l17373
 24166  00237E  0A40               	xorlw	64	; case 64
 24167  002380  E0DF               	bz	l17401
 24168  002382  0AC0               	xorlw	192	; case 128
 24169  002384  E0C1               	bz	l17387
 24170  002386  0A40               	xorlw	64	; case 192
 24171  002388  E0A3               	bz	l17373
 24172  00238A                     l17419:
 24173                           
 24174                           ; BSR set to: 0
 24175                           ;doprnt.c: 1346: if(c < prec)
 24176  00238A  0E80               	movlw	128
 24177  00238C  BF8C               	btfsc	sprintf@c& (0+255),7,b
 24178  00238E  0E7F               	movlw	127
 24179  002390  6F79               	movwf	??_sprintf& (0+255),b
 24180  002392  5184               	movf	sprintf@prec& (0+255),w,b
 24181  002394  5D8C               	subwf	sprintf@c& (0+255),w,b
 24182  002396  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 24183  002398  0A80               	xorlw	128
 24184  00239A  5979               	subwfb	??_sprintf& (0+255),w,b
 24185  00239C  E203               	bc	l17423
 24186                           
 24187                           ; BSR set to: 0
 24188                           ;doprnt.c: 1347: c = prec;
 24189  00239E  C084  F08C         	movff	sprintf@prec,sprintf@c
 24190  0023A2  D00F               	goto	l17427
 24191  0023A4                     l17423:
 24192                           
 24193                           ; BSR set to: 0
 24194                           ;doprnt.c: 1348: else if(prec < c)
 24195  0023A4  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 24196  0023A6  0A80               	xorlw	128
 24197  0023A8  6F79               	movwf	??_sprintf& (0+255),b
 24198  0023AA  518C               	movf	sprintf@c& (0+255),w,b
 24199  0023AC  5D84               	subwf	sprintf@prec& (0+255),w,b
 24200  0023AE  0E80               	movlw	128
 24201  0023B0  BF8C               	btfsc	sprintf@c& (0+255),7,b
 24202  0023B2  0E7F               	movlw	127
 24203  0023B4  5979               	subwfb	??_sprintf& (0+255),w,b
 24204  0023B6  E205               	bc	l17427
 24205                           
 24206                           ; BSR set to: 0
 24207                           ;doprnt.c: 1349: prec = c;
 24208  0023B8  518C               	movf	sprintf@c& (0+255),w,b
 24209  0023BA  6F84               	movwf	sprintf@prec& (0+255),b
 24210  0023BC  6B85               	clrf	(sprintf@prec+1)& (0+255),b
 24211  0023BE  BF84               	btfsc	sprintf@prec& (0+255),7,b
 24212  0023C0  0785               	decf	(sprintf@prec+1)& (0+255),f,b
 24213  0023C2                     l17427:
 24214                           
 24215                           ; BSR set to: 0
 24216                           ;doprnt.c: 1352: if(width && flag & 0x03)
 24217  0023C2  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24218  0023C4  1186               	iorwf	sprintf@width& (0+255),w,b
 24219  0023C6  E006               	bz	l17433
 24220                           
 24221                           ; BSR set to: 0
 24222  0023C8  518D               	movf	sprintf@flag& (0+255),w,b
 24223  0023CA  0B03               	andlw	3
 24224  0023CC  E003               	bz	l17433
 24225                           
 24226                           ; BSR set to: 0
 24227                           ;doprnt.c: 1353: width--;
 24228  0023CE  0786               	decf	sprintf@width& (0+255),f,b
 24229  0023D0  A0D8               	btfss	status,0,c
 24230  0023D2  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24231  0023D4                     l17433:
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;doprnt.c: 1355: if(flag & 0x4000) {
 24235  0023D4  AD8E               	btfss	(sprintf@flag+1)& (0+255),6,b
 24236  0023D6  D010               	goto	l17439
 24237                           
 24238                           ; BSR set to: 0
 24239                           ;doprnt.c: 1356: if(width > prec)
 24240  0023D8  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 24241  0023DA  0A80               	xorlw	128
 24242  0023DC  6F79               	movwf	??_sprintf& (0+255),b
 24243  0023DE  5186               	movf	sprintf@width& (0+255),w,b
 24244  0023E0  5D84               	subwf	sprintf@prec& (0+255),w,b
 24245  0023E2  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24246  0023E4  0A80               	xorlw	128
 24247  0023E6  5979               	subwfb	??_sprintf& (0+255),w,b
 24248  0023E8  E205               	bc	l1842
 24249                           
 24250                           ; BSR set to: 0
 24251                           ;doprnt.c: 1357: width -= prec;
 24252  0023EA  5184               	movf	sprintf@prec& (0+255),w,b
 24253  0023EC  5F86               	subwf	sprintf@width& (0+255),f,b
 24254  0023EE  5185               	movf	(sprintf@prec+1)& (0+255),w,b
 24255  0023F0  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 24256  0023F2  D002               	goto	l17439
 24257  0023F4                     l1842:
 24258                           
 24259                           ; BSR set to: 0
 24260                           ;doprnt.c: 1358: else
 24261                           ;doprnt.c: 1359: width = 0;
 24262  0023F4  6B86               	clrf	sprintf@width& (0+255),b
 24263  0023F6  6B87               	clrf	(sprintf@width+1)& (0+255),b
 24264  0023F8                     l17439:
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;doprnt.c: 1360: }
 24268                           ;doprnt.c: 1364: if((flag & (
 24269                           ;doprnt.c: 1366: 0x04|
 24270                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 24271  0023F8  0EC4               	movlw	196
 24272  0023FA  D94E               	call	PL22	;call to abstracted procedure
 24273  0023FC  0E40               	movlw	64
 24274  0023FE  B4D8               	btfsc	status,2,c
 24275  002400  1979               	xorwf	??_sprintf& (0+255),w,b
 24276  002402  E107               	bnz	l17445
 24277                           
 24278                           ; BSR set to: 0
 24279                           ;doprnt.c: 1369: if(width)
 24280  002404  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24281  002406  1186               	iorwf	sprintf@width& (0+255),w,b
 24282  002408  E018               	bz	l17451
 24283                           
 24284                           ; BSR set to: 0
 24285                           ;doprnt.c: 1370: width--;
 24286  00240A  0786               	decf	sprintf@width& (0+255),f,b
 24287  00240C  A0D8               	btfss	status,0,c
 24288  00240E  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24289  002410  D014               	goto	l17451
 24290  002412                     l17445:
 24291                           
 24292                           ; BSR set to: 0
 24293                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24294  002412  0EC0               	movlw	192
 24295  002414  D941               	call	PL22	;call to abstracted procedure
 24296  002416  0E80               	movlw	128
 24297  002418  B4D8               	btfsc	status,2,c
 24298  00241A  1979               	xorwf	??_sprintf& (0+255),w,b
 24299  00241C  E10E               	bnz	l17451
 24300                           
 24301                           ; BSR set to: 0
 24302                           ;doprnt.c: 1379: if(width > 2)
 24303  00241E  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24304  002420  0A80               	xorlw	128
 24305  002422  0F80               	addlw	-128
 24306  002424  0E03               	movlw	3
 24307  002426  B4D8               	btfsc	status,2,c
 24308  002428  5D86               	subwf	sprintf@width& (0+255),w,b
 24309  00242A  E305               	bnc	l1848
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;doprnt.c: 1380: width -= 2;
 24313  00242C  0EFE               	movlw	254
 24314  00242E  2786               	addwf	sprintf@width& (0+255),f,b
 24315  002430  0EFF               	movlw	255
 24316  002432  2387               	addwfc	(sprintf@width+1)& (0+255),f,b
 24317  002434  D002               	goto	l17451
 24318  002436                     l1848:
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;doprnt.c: 1381: else
 24322                           ;doprnt.c: 1382: width = 0;
 24323  002436  6B86               	clrf	sprintf@width& (0+255),b
 24324  002438  6B87               	clrf	(sprintf@width+1)& (0+255),b
 24325  00243A                     l17451:
 24326                           
 24327                           ; BSR set to: 0
 24328                           ;doprnt.c: 1383: }
 24329                           ;doprnt.c: 1388: if(width > c)
 24330  00243A  0E80               	movlw	128
 24331  00243C  BF8C               	btfsc	sprintf@c& (0+255),7,b
 24332  00243E  0E7F               	movlw	127
 24333  002440  6F79               	movwf	??_sprintf& (0+255),b
 24334  002442  5186               	movf	sprintf@width& (0+255),w,b
 24335  002444  5D8C               	subwf	sprintf@c& (0+255),w,b
 24336  002446  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24337  002448  0A80               	xorlw	128
 24338  00244A  5979               	subwfb	??_sprintf& (0+255),w,b
 24339  00244C  E207               	bc	l1850
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;doprnt.c: 1389: width -= c;
 24343  00244E  518C               	movf	sprintf@c& (0+255),w,b
 24344  002450  5F86               	subwf	sprintf@width& (0+255),f,b
 24345  002452  0E00               	movlw	0
 24346  002454  BF8C               	btfsc	sprintf@c& (0+255),7,b
 24347  002456  0EFF               	movlw	255
 24348  002458  5B87               	subwfb	(sprintf@width+1)& (0+255),f,b
 24349  00245A  D002               	goto	l1851
 24350  00245C                     l1850:
 24351                           
 24352                           ; BSR set to: 0
 24353                           ;doprnt.c: 1390: else
 24354                           ;doprnt.c: 1391: width = 0;
 24355  00245C  6B86               	clrf	sprintf@width& (0+255),b
 24356  00245E  6B87               	clrf	(sprintf@width+1)& (0+255),b
 24357  002460                     l1851:
 24358                           
 24359                           ; BSR set to: 0
 24360                           ;doprnt.c: 1394: if(flag & 0x04) {
 24361  002460  A58D               	btfss	sprintf@flag& (0+255),2,b
 24362  002462  D03C               	goto	l17489
 24363                           
 24364                           ; BSR set to: 0
 24365                           ;doprnt.c: 1399: if(flag & 0x03)
 24366  002464  518D               	movf	sprintf@flag& (0+255),w,b
 24367  002466  0B03               	andlw	3
 24368  002468  E009               	bz	l1853
 24369                           
 24370                           ; BSR set to: 0
 24371                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 24372  00246A  C071  FFD9         	movff	sprintf@sp,fsr2l
 24373  00246E  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24374  002472  0E2D               	movlw	45
 24375  002474  6EDF               	movwf	indf2,c
 24376  002476                     l17459:
 24377                           
 24378                           ; BSR set to: 0
 24379  002476  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24380  002478  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24381  00247A  D022               	goto	l17481
 24382  00247C                     l1853:
 24383                           
 24384                           ; BSR set to: 0
 24385                           ;doprnt.c: 1403: else
 24386                           ;doprnt.c: 1406: if(flag & 0x01)
 24387  00247C  A18D               	btfss	sprintf@flag& (0+255),0,b
 24388  00247E  D006               	goto	l17465
 24389                           
 24390                           ; BSR set to: 0
 24391                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 24392  002480  C071  FFD9         	movff	sprintf@sp,fsr2l
 24393  002484  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24394  002488  0E20               	movlw	32
 24395  00248A  D7F4               	goto	L44
 24396  00248C                     l17465:
 24397                           
 24398                           ; BSR set to: 0
 24399                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24400  00248C  0EC0               	movlw	192
 24401  00248E  D904               	call	PL22	;call to abstracted procedure
 24402  002490  0E80               	movlw	128
 24403  002492  B4D8               	btfsc	status,2,c
 24404  002494  1979               	xorwf	??_sprintf& (0+255),w,b
 24405  002496  E114               	bnz	l17481
 24406                           
 24407                           ; BSR set to: 0
 24408                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 24409  002498  C071  FFD9         	movff	sprintf@sp,fsr2l
 24410  00249C  D94A               	call	PL108	;call to abstracted procedure
 24411                           
 24412                           ; BSR set to: 0
 24413  00249E  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24414  0024A0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 24418  0024A2  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 24419  0024A4  D003               	goto	l17475
 24420                           
 24421                           ; BSR set to: 0
 24422  0024A6  6B7E               	clrf	(_sprintf$2255+1)& (0+255),b
 24423  0024A8  0E78               	movlw	120
 24424  0024AA  D002               	goto	L45
 24425  0024AC                     l17475:
 24426                           
 24427                           ; BSR set to: 0
 24428  0024AC  6B7E               	clrf	(_sprintf$2255+1)& (0+255),b
 24429  0024AE  0E58               	movlw	88
 24430  0024B0                     L45:
 24431  0024B0  6F7D               	movwf	_sprintf$2255& (0+255),b
 24432                           
 24433                           ; BSR set to: 0
 24434  0024B2  C071  FFD9         	movff	sprintf@sp,fsr2l
 24435  0024B6  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24436  0024BA  C07D  FFDF         	movff	_sprintf$2255,indf2
 24437  0024BE  D7DB               	goto	l17459
 24438  0024C0                     l17481:
 24439                           
 24440                           ; BSR set to: 0
 24441                           ;doprnt.c: 1419: }
 24442                           ;doprnt.c: 1422: if(width)
 24443  0024C0  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24444  0024C2  1186               	iorwf	sprintf@width& (0+255),w,b
 24445  0024C4  E101 D0B9          	bz	l17553
 24446                           
 24447                           ; BSR set to: 0
 24448                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 24449  0024C8  C071  FFD9         	movff	sprintf@sp,fsr2l
 24450  0024CC  D932               	call	PL108	;call to abstracted procedure
 24451                           
 24452                           ; BSR set to: 0
 24453  0024CE  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24454  0024D0  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24455                           
 24456                           ; BSR set to: 0
 24457                           ;doprnt.c: 1425: while(--width);
 24458  0024D2  0786               	decf	sprintf@width& (0+255),f,b
 24459  0024D4  A0D8               	btfss	status,0,c
 24460  0024D6  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24461  0024D8  0100               	movlb	0	; () banked
 24462  0024DA  D7F2               	goto	l17481
 24463  0024DC                     l17489:
 24464                           
 24465                           ; BSR set to: 0
 24466                           ;doprnt.c: 1429: {
 24467                           ;doprnt.c: 1431: if(width
 24468                           ;doprnt.c: 1433: && !(flag & 0x08)
 24469                           ;doprnt.c: 1435: )
 24470  0024DC  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24471  0024DE  1186               	iorwf	sprintf@width& (0+255),w,b
 24472  0024E0  A4D8               	btfss	status,2,c
 24473                           
 24474                           ; BSR set to: 0
 24475  0024E2  B78D               	btfsc	sprintf@flag& (0+255),3,b
 24476  0024E4  D004               	goto	l17499
 24477  0024E6                     l17493:
 24478                           
 24479                           ; BSR set to: 0
 24480                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 24481  0024E6  C071  FFD9         	movff	sprintf@sp,fsr2l
 24482                           
 24483                           ; BSR set to: 0
 24484                           
 24485                           ; BSR set to: 0
 24486                           ;doprnt.c: 1438: while(--width);
 24487  0024EA  D8F1               	call	PL54	;call to abstracted procedure
 24488  0024EC  E1FC               	bnz	l17493
 24489  0024EE                     l17499:
 24490                           
 24491                           ; BSR set to: 0
 24492                           ;doprnt.c: 1445: if(flag & 0x03)
 24493  0024EE  518D               	movf	sprintf@flag& (0+255),w,b
 24494  0024F0  0B03               	andlw	3
 24495  0024F2  E009               	bz	l1869
 24496                           
 24497                           ; BSR set to: 0
 24498                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 24499  0024F4  C071  FFD9         	movff	sprintf@sp,fsr2l
 24500  0024F8  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24501  0024FC  0E2D               	movlw	45
 24502  0024FE  6EDF               	movwf	indf2,c
 24503                           
 24504                           ; BSR set to: 0
 24505  002500  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24506  002502  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24507  002504  D008               	goto	l17509
 24508  002506                     l1869:
 24509                           
 24510                           ; BSR set to: 0
 24511                           ;doprnt.c: 1450: else if(flag & 0x01)
 24512  002506  A18D               	btfss	sprintf@flag& (0+255),0,b
 24513  002508  D006               	goto	l17509
 24514                           
 24515                           ; BSR set to: 0
 24516                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 24517  00250A  C071  FFD9         	movff	sprintf@sp,fsr2l
 24518  00250E  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24519  002512  0E20               	movlw	32
 24520  002514  D7F4               	goto	L46
 24521  002516                     l17509:
 24522                           
 24523                           ; BSR set to: 0
 24524                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 24525  002516  0EC0               	movlw	192
 24526  002518  D8BF               	call	PL22	;call to abstracted procedure
 24527  00251A  0E40               	movlw	64
 24528  00251C  B4D8               	btfsc	status,2,c
 24529  00251E  1979               	xorwf	??_sprintf& (0+255),w,b
 24530  002520  E106               	bnz	l17515
 24531                           
 24532                           ; BSR set to: 0
 24533                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 24534  002522  C071  FFD9         	movff	sprintf@sp,fsr2l
 24535  002526  D905               	call	PL108	;call to abstracted procedure
 24536  002528                     l17513:
 24537                           
 24538                           ; BSR set to: 0
 24539  002528  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24540  00252A  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24541  00252C  D086               	goto	l17553
 24542  00252E                     l17515:
 24543                           
 24544                           ; BSR set to: 0
 24545                           ;doprnt.c: 1457: else
 24546                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24547  00252E  0EC0               	movlw	192
 24548  002530  D8B3               	call	PL22	;call to abstracted procedure
 24549  002532  0E80               	movlw	128
 24550  002534  B4D8               	btfsc	status,2,c
 24551  002536  1979               	xorwf	??_sprintf& (0+255),w,b
 24552  002538  E001 D07F          	bnz	l17553
 24553                           
 24554                           ; BSR set to: 0
 24555                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 24556  00253C  C071  FFD9         	movff	sprintf@sp,fsr2l
 24557  002540  D8F8               	call	PL108	;call to abstracted procedure
 24558                           
 24559                           ; BSR set to: 0
 24560  002542  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24561  002544  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24562                           
 24563                           ; BSR set to: 0
 24564                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 24565  002546  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 24566  002548  D003               	goto	l17525
 24567                           
 24568                           ; BSR set to: 0
 24569  00254A  6B80               	clrf	(_sprintf$2256+1)& (0+255),b
 24570  00254C  0E78               	movlw	120
 24571  00254E  D002               	goto	L47
 24572  002550                     l17525:
 24573                           
 24574                           ; BSR set to: 0
 24575  002550  6B80               	clrf	(_sprintf$2256+1)& (0+255),b
 24576  002552  0E58               	movlw	88
 24577  002554                     L47:
 24578  002554  6F7F               	movwf	_sprintf$2256& (0+255),b
 24579                           
 24580                           ; BSR set to: 0
 24581  002556  C071  FFD9         	movff	sprintf@sp,fsr2l
 24582  00255A  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24583  00255E  C07F  FFDF         	movff	_sprintf$2256,indf2
 24584  002562  D7E2               	goto	l17513
 24585  002564                     l17531:
 24586                           
 24587                           ; BSR set to: 0
 24588                           ;doprnt.c: 1493: case 0xC0:
 24589                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 24590  002564  C084  F079         	movff	sprintf@prec,??_sprintf
 24591  002568  C085  F07A         	movff	sprintf@prec+1,??_sprintf+1
 24592  00256C  90D8               	bcf	status,0,c
 24593  00256E  3779               	rlcf	??_sprintf& (0+255),f,b
 24594  002570  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24595  002572  90D8               	bcf	status,0,c
 24596  002574  3779               	rlcf	??_sprintf& (0+255),f,b
 24597  002576  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24598  002578  0E5C               	movlw	low _dpowers
 24599  00257A  2579               	addwf	??_sprintf& (0+255),w,b
 24600  00257C  6EF6               	movwf	tblptrl,c
 24601  00257E  0E6E               	movlw	high _dpowers
 24602  002580  D87C               	call	PL12	;call to abstracted procedure
 24603  002582  C088  F060         	movff	sprintf@_val,?___lldiv
 24604  002586  C089  F061         	movff	sprintf@_val+1,?___lldiv+1
 24605  00258A  C08A  F062         	movff	sprintf@_val+2,?___lldiv+2
 24606  00258E  C08B  F063         	movff	sprintf@_val+3,?___lldiv+3
 24607  002592  EC53  F02F         	call	___lldiv	;wreg free
 24608  002596  C063  F06B         	movff	?___lldiv+3,?___llmod+3
 24609  00259A  C062  F06A         	movff	?___lldiv+2,?___llmod+2
 24610  00259E  C061  F069         	movff	?___lldiv+1,?___llmod+1
 24611  0025A2  C060  F068         	movff	?___lldiv,?___llmod
 24612  0025A6  0E0A               	movlw	10
 24613  0025A8  6F6C               	movwf	(?___llmod+4)& (0+255),b
 24614  0025AA  0E00               	movlw	0
 24615  0025AC  6B6D               	clrf	(?___llmod+5)& (0+255),b
 24616  0025AE  6B6E               	clrf	(?___llmod+6)& (0+255),b
 24617  0025B0  6B6F               	clrf	(?___llmod+7)& (0+255),b
 24618  0025B2  EC70  F030         	call	___llmod	;wreg free
 24619  0025B6  5168               	movf	?___llmod& (0+255),w,b
 24620  0025B8  D02D               	goto	L48
 24621  0025BA                     l17533:
 24622                           
 24623                           ; BSR set to: 0
 24624                           ;doprnt.c: 1506: {
 24625                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 24626  0025BA  D876               	call	PL28	;call to abstracted procedure
 24627  0025BC  0E84               	movlw	low _hexpowers
 24628  0025BE  2579               	addwf	??_sprintf& (0+255),w,b
 24629  0025C0  6EF6               	movwf	tblptrl,c
 24630  0025C2  0E6E               	movlw	high _hexpowers
 24631  0025C4  D85A               	call	PL12	;call to abstracted procedure
 24632  0025C6  EC53  F02F         	call	___lldiv	;wreg free
 24633  0025CA  5160               	movf	?___lldiv& (0+255),w,b
 24634  0025CC  0B0F               	andlw	15
 24635  0025CE  6F7C               	movwf	sprintf@idx& (0+255),b
 24636                           
 24637                           ; BSR set to: 0
 24638                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 24639  0025D0  BB8D               	btfsc	sprintf@flag& (0+255),5,b
 24640  0025D2  D004               	goto	l17539
 24641                           
 24642                           ; BSR set to: 0
 24643  0025D4  0E7D               	movlw	high STR_308
 24644  0025D6  6F82               	movwf	(_sprintf$2262+1)& (0+255),b
 24645  0025D8  0EB8               	movlw	low STR_308
 24646  0025DA  D003               	goto	L49
 24647  0025DC                     l17539:
 24648                           
 24649                           ; BSR set to: 0
 24650  0025DC  0E7D               	movlw	high STR_307
 24651  0025DE  6F82               	movwf	(_sprintf$2262+1)& (0+255),b
 24652  0025E0  0EA7               	movlw	low STR_307
 24653  0025E2                     L49:
 24654  0025E2  6F81               	movwf	_sprintf$2262& (0+255),b
 24655                           
 24656                           ; BSR set to: 0
 24657  0025E4  517C               	movf	sprintf@idx& (0+255),w,b
 24658  0025E6  2581               	addwf	_sprintf$2262& (0+255),w,b
 24659  0025E8  6F79               	movwf	??_sprintf& (0+255),b
 24660  0025EA  0E00               	movlw	0
 24661  0025EC  2182               	addwfc	(_sprintf$2262+1)& (0+255),w,b
 24662  0025EE  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 24663  0025F0  C079  FFF6         	movff	??_sprintf,tblptrl
 24664  0025F4  C07A  FFF7         	movff	??_sprintf+1,tblptrh
 24665  0025F8  0008               	tblrd		*
 24666  0025FA  CFF5 F08C          	movff	tablat,sprintf@c
 24667                           
 24668                           ;doprnt.c: 1515: }
 24669                           ;doprnt.c: 1517: break;
 24670  0025FE  D016               	goto	l17549
 24671  002600                     l17543:
 24672                           
 24673                           ; BSR set to: 0
 24674                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 24675  002600  D853               	call	PL28	;call to abstracted procedure
 24676  002602  0E2C               	movlw	low _octpowers
 24677  002604  2579               	addwf	??_sprintf& (0+255),w,b
 24678  002606  6EF6               	movwf	tblptrl,c
 24679  002608  0E6E               	movlw	high _octpowers
 24680  00260A  D837               	call	PL12	;call to abstracted procedure
 24681  00260C  EC53  F02F         	call	___lldiv	;wreg free
 24682  002610  5160               	movf	?___lldiv& (0+255),w,b
 24683  002612  0B07               	andlw	7
 24684  002614                     L48:
 24685  002614  0F30               	addlw	48
 24686  002616  6F8C               	movwf	sprintf@c& (0+255),b
 24687                           
 24688                           ;doprnt.c: 1527: break;
 24689  002618  D009               	goto	l17549
 24690  00261A                     l17547:
 24691                           
 24692                           ; BSR set to: 0
 24693  00261A  518D               	movf	sprintf@flag& (0+255),w,b
 24694  00261C  0BC0               	andlw	192
 24695                           
 24696                           ; Switch size 1, requested type "space"
 24697                           ; Number of cases is 4, Range of values is 0 to 192
 24698                           ; switch strategies available:
 24699                           ; Name         Instructions Cycles
 24700                           ; simple_byte           13     7 (average)
 24701                           ;	Chosen strategy is simple_byte
 24702  00261E  E0A2               	bz	l17531
 24703  002620  0A40               	xorlw	64	; case 64
 24704  002622  E0EE               	bz	l17543
 24705  002624  0AC0               	xorlw	192	; case 128
 24706  002626  E0C9               	bz	l17533
 24707  002628  0A40               	xorlw	64	; case 192
 24708  00262A  E09C               	bz	l17531
 24709  00262C                     l17549:
 24710                           
 24711                           ; BSR set to: 0
 24712                           ;doprnt.c: 1531: ((*sp++ = (c)));
 24713  00262C  C071  FFD9         	movff	sprintf@sp,fsr2l
 24714  002630  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24715  002634  C08C  FFDF         	movff	sprintf@c,indf2
 24716  002638  D777               	goto	l17513
 24717  00263A                     l17553:
 24718                           
 24719                           ; BSR set to: 0
 24720  00263A  0784               	decf	sprintf@prec& (0+255),f,b
 24721  00263C  A0D8               	btfss	status,0,c
 24722  00263E  0785               	decf	(sprintf@prec+1)& (0+255),f,b
 24723  002640  0100               	movlb	0	; () banked
 24724  002642  2984               	incf	sprintf@prec& (0+255),w,b
 24725  002644  B4D8               	btfsc	status,2,c
 24726  002646  2985               	incf	(sprintf@prec+1)& (0+255),w,b
 24727  002648  E1E8               	bnz	l17547
 24728                           
 24729                           ; BSR set to: 0
 24730                           ;doprnt.c: 1532: }
 24731                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 24732  00264A  A78D               	btfss	sprintf@flag& (0+255),3,b
 24733  00264C  D00B               	goto	l17563
 24734                           
 24735                           ; BSR set to: 0
 24736  00264E  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24737  002650  0A80               	xorlw	128
 24738  002652  0F80               	addlw	-128
 24739  002654  0E01               	movlw	1
 24740  002656  B4D8               	btfsc	status,2,c
 24741  002658  5D86               	subwf	sprintf@width& (0+255),w,b
 24742  00265A  E304               	bnc	l17563
 24743  00265C                     l17557:
 24744                           
 24745                           ; BSR set to: 0
 24746                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 24747  00265C  C071  FFD9         	movff	sprintf@sp,fsr2l
 24748                           
 24749                           ; BSR set to: 0
 24750                           
 24751                           ; BSR set to: 0
 24752                           ;doprnt.c: 1538: while(--width);
 24753  002660  D836               	call	PL54	;call to abstracted procedure
 24754  002662  E1FC               	bnz	l17557
 24755  002664                     l17563:
 24756                           
 24757                           ; BSR set to: 0
 24758  002664  D853               	call	PL78	;call to abstracted procedure
 24759  002666  0100               	movlb	0	; () banked
 24760  002668  678C               	tstfsz	sprintf@c& (0+255),b
 24761  00266A  D4CA               	goto	l17229
 24762  00266C                     l17565:
 24763                           
 24764                           ; BSR set to: 0
 24765                           ;doprnt.c: 1545: *sp = 0;
 24766  00266C  C071  FFD9         	movff	sprintf@sp,fsr2l
 24767  002670  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24768  002674  0E00               	movlw	0
 24769  002676  6EDF               	movwf	indf2,c
 24770                           
 24771                           ; BSR set to: 0
 24772  002678  0C00               	retlw	0
 24773  00267A                     __end_of_sprintf:
 24774                           	opt stack 0
 24775  00267A                     PL12:
 24776                           	opt stack 25
 24777  00267A  217A               	addwfc	(??_sprintf+1)& (0+255),w,b
 24778  00267C  6EF7               	movwf	tblptrh,c
 24779  00267E  0009               	tblrd		*+
 24780  002680  CFF5 F064          	movff	tablat,?___lldiv+4
 24781  002684  0009               	tblrd		*+
 24782  002686  CFF5 F065          	movff	tablat,?___lldiv+5
 24783  00268A  0009               	tblrd		*+
 24784  00268C  CFF5 F066          	movff	tablat,?___lldiv+6
 24785  002690  000A               	tblrd		*-
 24786  002692  CFF5 F067          	movff	tablat,?___lldiv+7
 24787  002696  0012               	return	
 24788  002698                     __end_ofPL12:
 24789                           	opt stack 0
 24790  002698                     PL22:
 24791                           	opt stack 25
 24792  002698  158D               	andwf	sprintf@flag& (0+255),w,b
 24793  00269A  6F79               	movwf	??_sprintf& (0+255),b
 24794  00269C  0E08               	movlw	8
 24795  00269E  158E               	andwf	(sprintf@flag+1)& (0+255),w,b
 24796  0026A0  6F7A               	movwf	(??_sprintf+1)& (0+255),b
 24797  0026A2  517A               	movf	(??_sprintf+1)& (0+255),w,b
 24798  0026A4  0A08               	xorlw	8
 24799  0026A6  0012               	return	
 24800  0026A8                     __end_ofPL22:
 24801                           	opt stack 0
 24802  0026A8                     PL28:
 24803                           	opt stack 25
 24804  0026A8  C088  F060         	movff	sprintf@_val,?___lldiv
 24805  0026AC  C089  F061         	movff	sprintf@_val+1,?___lldiv+1
 24806  0026B0  C08A  F062         	movff	sprintf@_val+2,?___lldiv+2
 24807  0026B4  C08B  F063         	movff	sprintf@_val+3,?___lldiv+3
 24808  0026B8  C084  F079         	movff	sprintf@prec,??_sprintf
 24809  0026BC  C085  F07A         	movff	sprintf@prec+1,??_sprintf+1
 24810  0026C0  90D8               	bcf	status,0,c
 24811  0026C2  3779               	rlcf	??_sprintf& (0+255),f,b
 24812  0026C4  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24813  0026C6  90D8               	bcf	status,0,c
 24814  0026C8  3779               	rlcf	??_sprintf& (0+255),f,b
 24815  0026CA  377A               	rlcf	(??_sprintf+1)& (0+255),f,b
 24816  0026CC  0012               	return	
 24817  0026CE                     __end_ofPL28:
 24818                           	opt stack 0
 24819  0026CE                     PL54:
 24820                           	opt stack 25
 24821  0026CE  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24822  0026D2  0E20               	movlw	32
 24823  0026D4  6EDF               	movwf	indf2,c
 24824  0026D6  4B71               	infsnz	sprintf@sp& (0+255),f,b
 24825  0026D8  2B72               	incf	(sprintf@sp+1)& (0+255),f,b
 24826  0026DA  0786               	decf	sprintf@width& (0+255),f,b
 24827  0026DC  A0D8               	btfss	status,0,c
 24828  0026DE  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24829  0026E0  0100               	movlb	0	; () banked
 24830  0026E2  5187               	movf	(sprintf@width+1)& (0+255),w,b
 24831  0026E4  1186               	iorwf	sprintf@width& (0+255),w,b
 24832  0026E6  0012               	return	
 24833  0026E8                     __end_ofPL54:
 24834                           	opt stack 0
 24835  0026E8                     PL62:
 24836                           	opt stack 25
 24837  0026E8  6ED9               	movwf	fsr2l,c
 24838  0026EA  6ADA               	clrf	fsr2h,c
 24839  0026EC  CFDE F088          	movff	postinc2,sprintf@_val
 24840  0026F0  CFDE F089          	movff	postinc2,sprintf@_val+1
 24841  0026F4  CFDE F08A          	movff	postinc2,sprintf@_val+2
 24842  0026F8  CFDE F08B          	movff	postinc2,sprintf@_val+3
 24843  0026FC  0C04               	retlw	4
 24844  0026FE                     __end_ofPL62:
 24845                           	opt stack 0
 24846  0026FE                     PL72:
 24847                           	opt stack 25
 24848  0026FE  C071  FFD9         	movff	sprintf@sp,fsr2l
 24849  002702  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24850  002706  0E20               	movlw	32
 24851  002708  6EDF               	movwf	indf2,c
 24852  00270A  0C20               	retlw	32
 24853  00270C                     __end_ofPL72:
 24854                           	opt stack 0
 24855  00270C                     PL78:
 24856                           	opt stack 25
 24857  00270C  C073  FFF6         	movff	sprintf@f,tblptrl
 24858  002710  C074  FFF7         	movff	sprintf@f+1,tblptrh
 24859  002714  4B73               	infsnz	sprintf@f& (0+255),f,b
 24860  002716  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 24861  002718  0008               	tblrd		*
 24862  00271A  CFF5 F08C          	movff	tablat,sprintf@c
 24863  00271E  0012               	return	
 24864  002720                     __end_ofPL78:
 24865                           	opt stack 0
 24866  002720                     PL102:
 24867                           	opt stack 25
 24868  002720  4B73               	infsnz	sprintf@f& (0+255),f,b
 24869  002722  2B74               	incf	(sprintf@f+1)& (0+255),f,b
 24870  002724  C073  FFF6         	movff	sprintf@f,tblptrl
 24871  002728  C074  FFF7         	movff	sprintf@f+1,tblptrh
 24872  00272C  0008               	tblrd		*
 24873  00272E  50F5               	movf	tablat,w,c
 24874  002730  0012               	return	
 24875  002732                     __end_ofPL102:
 24876                           	opt stack 0
 24877  002732                     PL108:
 24878                           	opt stack 25
 24879  002732  C072  FFDA         	movff	sprintf@sp+1,fsr2h
 24880  002736  0E30               	movlw	48
 24881  002738  6EDF               	movwf	indf2,c
 24882  00273A  0C30               	retlw	48
 24883  00273C                     __end_ofPL108:
 24884                           	opt stack 0
 24885  00273C                     PL136:
 24886                           	opt stack 25
 24887  00273C  A0D8               	btfss	status,0,c
 24888  00273E  0787               	decf	(sprintf@width+1)& (0+255),f,b
 24889  002740  0100               	movlb	0	; () banked
 24890  002742  2986               	incf	sprintf@width& (0+255),w,b
 24891  002744  0012               	return	
 24892  002746                     __end_ofPL136:
 24893                           	opt stack 0
 24894                           tblptru	equ	0xFF8
 24895                           tblptrh	equ	0xFF7
 24896                           tblptrl	equ	0xFF6
 24897                           tablat	equ	0xFF5
 24898                           prodh	equ	0xFF4
 24899                           prodl	equ	0xFF3
 24900                           intcon	equ	0xFF2
 24901                           indf0	equ	0xFEF
 24902                           postinc0	equ	0xFEE
 24903                           fsr0h	equ	0xFEA
 24904                           fsr0l	equ	0xFE9
 24905                           wreg	equ	0xFE8
 24906                           indf1	equ	0xFE7
 24907                           postinc1	equ	0xFE6
 24908                           postdec1	equ	0xFE5
 24909                           fsr1h	equ	0xFE2
 24910                           fsr1l	equ	0xFE1
 24911                           indf2	equ	0xFDF
 24912                           postinc2	equ	0xFDE
 24913                           postdec2	equ	0xFDD
 24914                           plusw2	equ	0xFDB
 24915                           fsr2h	equ	0xFDA
 24916                           fsr2l	equ	0xFD9
 24917                           status	equ	0xFD8
 24918                           
 24919 ;; *************** function ___wmul *****************
 24920 ;; Defined at:
 24921 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 24922 ;; Parameters:    Size  Location     Type
 24923 ;;  multiplier      2    0[BANK0 ] unsigned int 
 24924 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 24925 ;; Auto vars:     Size  Location     Type
 24926 ;;  product         2    4[BANK0 ] unsigned int 
 24927 ;; Return value:  Size  Location     Type
 24928 ;;                  2    0[BANK0 ] unsigned int 
 24929 ;; Registers used:
 24930 ;;		wreg, status,2, status,0, prodl, prodh
 24931 ;; Tracked objects:
 24932 ;;		On entry : F/0
 24933 ;;		On exit  : F/0
 24934 ;;		Unchanged: 0/0
 24935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24936 ;;      Params:         0       4       0       0       0       0       0
 24937 ;;      Locals:         0       2       0       0       0       0       0
 24938 ;;      Temps:          0       0       0       0       0       0       0
 24939 ;;      Totals:         0       6       0       0       0       0       0
 24940 ;;Total ram usage:        6 bytes
 24941 ;; Hardware stack levels used:    1
 24942 ;; Hardware stack levels required when called:    3
 24943 ;; This function calls:
 24944 ;;		Nothing
 24945 ;; This function is called by:
 24946 ;;		_receivePrintEventVerbose
 24947 ;;		_receiveSendEventCANAL
 24948 ;;		_receiveSendMultiEventCANAL
 24949 ;;		_sprintf
 24950 ;;		_atoi
 24951 ;; This function uses a non-reentrant model
 24952 ;;
 24953                           
 24954                           	psect	text57
 24955  006734                     __ptext57:
 24956                           	opt stack 0
 24957  006734                     ___wmul:
 24958                           	opt stack 25
 24959                           
 24960                           ; BSR set to: 0
 24961                           
 24962                           ; BSR set to: 0
 24963                           ;incstack = 0
 24964                           ;incstack = 0
 24965  006734  5160               	movf	___wmul@multiplier& (0+255),w,b
 24966  006736  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24967  006738  CFF3 F064          	movff	prodl,___wmul@product
 24968  00673C  CFF4 F065          	movff	prodh,___wmul@product+1
 24969  006740  5160               	movf	___wmul@multiplier& (0+255),w,b
 24970  006742  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 24971  006744  D808               	call	PL112	;call to abstracted procedure
 24972  006746  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 24973  006748  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24974  00674A  D805               	call	PL112	;call to abstracted procedure
 24975                           
 24976                           ; BSR set to: 0
 24977  00674C  C064  F060         	movff	___wmul@product,?___wmul
 24978  006750  C065  F061         	movff	___wmul@product+1,?___wmul+1
 24979                           
 24980                           ; BSR set to: 0
 24981  006754  0012               	return	
 24982  006756                     __end_of___wmul:
 24983                           	opt stack 0
 24984  006756                     PL112:
 24985                           	opt stack 25
 24986  006756  CFF3 FFF4          	movff	prodl,prodh
 24987  00675A  6AF3               	clrf	prodl,c
 24988  00675C  50F3               	movf	prodl,w,c
 24989  00675E  2764               	addwf	___wmul@product& (0+255),f,b
 24990  006760  50F4               	movf	prodh,w,c
 24991  006762  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 24992  006764  0012               	return	
 24993  006766                     __end_ofPL112:
 24994                           	opt stack 0
 24995                           tblptru	equ	0xFF8
 24996                           tblptrh	equ	0xFF7
 24997                           tblptrl	equ	0xFF6
 24998                           tablat	equ	0xFF5
 24999                           prodh	equ	0xFF4
 25000                           prodl	equ	0xFF3
 25001                           intcon	equ	0xFF2
 25002                           indf0	equ	0xFEF
 25003                           postinc0	equ	0xFEE
 25004                           fsr0h	equ	0xFEA
 25005                           fsr0l	equ	0xFE9
 25006                           wreg	equ	0xFE8
 25007                           indf1	equ	0xFE7
 25008                           postinc1	equ	0xFE6
 25009                           postdec1	equ	0xFE5
 25010                           fsr1h	equ	0xFE2
 25011                           fsr1l	equ	0xFE1
 25012                           indf2	equ	0xFDF
 25013                           postinc2	equ	0xFDE
 25014                           postdec2	equ	0xFDD
 25015                           plusw2	equ	0xFDB
 25016                           fsr2h	equ	0xFDA
 25017                           fsr2l	equ	0xFD9
 25018                           status	equ	0xFD8
 25019                           
 25020 ;; *************** function ___llmod *****************
 25021 ;; Defined at:
 25022 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 25023 ;; Parameters:    Size  Location     Type
 25024 ;;  dividend        4    8[BANK0 ] unsigned long 
 25025 ;;  divisor         4   12[BANK0 ] unsigned long 
 25026 ;; Auto vars:     Size  Location     Type
 25027 ;;  counter         1   16[BANK0 ] unsigned char 
 25028 ;; Return value:  Size  Location     Type
 25029 ;;                  4    8[BANK0 ] unsigned long 
 25030 ;; Registers used:
 25031 ;;		wreg, status,2, status,0
 25032 ;; Tracked objects:
 25033 ;;		On entry : F/0
 25034 ;;		On exit  : F/0
 25035 ;;		Unchanged: 0/0
 25036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25037 ;;      Params:         0       8       0       0       0       0       0
 25038 ;;      Locals:         0       1       0       0       0       0       0
 25039 ;;      Temps:          0       0       0       0       0       0       0
 25040 ;;      Totals:         0       9       0       0       0       0       0
 25041 ;;Total ram usage:        9 bytes
 25042 ;; Hardware stack levels used:    1
 25043 ;; Hardware stack levels required when called:    3
 25044 ;; This function calls:
 25045 ;;		Nothing
 25046 ;; This function is called by:
 25047 ;;		_sprintf
 25048 ;;		_ultoa
 25049 ;; This function uses a non-reentrant model
 25050 ;;
 25051                           
 25052                           	psect	text58
 25053  0060E0                     __ptext58:
 25054                           	opt stack 0
 25055  0060E0                     ___llmod:
 25056                           	opt stack 24
 25057                           
 25058                           ; BSR set to: 0
 25059                           
 25060                           ; BSR set to: 0
 25061                           ;incstack = 0
 25062                           ;incstack = 0
 25063  0060E0  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 25064  0060E2  116C               	iorwf	___llmod@divisor& (0+255),w,b
 25065  0060E4  116D               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 25066  0060E6  116E               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 25067  0060E8  E023               	bz	l2534
 25068                           
 25069                           ; BSR set to: 0
 25070  0060EA  0E01               	movlw	1
 25071  0060EC  6F70               	movwf	___llmod@counter& (0+255),b
 25072  0060EE  D006               	goto	l18399
 25073  0060F0                     l18397:
 25074                           
 25075                           ; BSR set to: 0
 25076  0060F0  90D8               	bcf	status,0,c
 25077  0060F2  376C               	rlcf	___llmod@divisor& (0+255),f,b
 25078  0060F4  376D               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 25079  0060F6  376E               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 25080  0060F8  376F               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 25081  0060FA  2B70               	incf	___llmod@counter& (0+255),f,b
 25082  0060FC                     l18399:
 25083                           
 25084                           ; BSR set to: 0
 25085  0060FC  AF6F               	btfss	(___llmod@divisor+3)& (0+255),7,b
 25086  0060FE  D7F8               	goto	l18397
 25087  006100                     l18401:
 25088                           
 25089                           ; BSR set to: 0
 25090  006100  516C               	movf	___llmod@divisor& (0+255),w,b
 25091  006102  5D68               	subwf	___llmod@dividend& (0+255),w,b
 25092  006104  516D               	movf	(___llmod@divisor+1)& (0+255),w,b
 25093  006106  5969               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 25094  006108  516E               	movf	(___llmod@divisor+2)& (0+255),w,b
 25095  00610A  596A               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 25096  00610C  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 25097  00610E  596B               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 25098  006110  E308               	bnc	l18405
 25099                           
 25100                           ; BSR set to: 0
 25101  006112  516C               	movf	___llmod@divisor& (0+255),w,b
 25102  006114  5F68               	subwf	___llmod@dividend& (0+255),f,b
 25103  006116  516D               	movf	(___llmod@divisor+1)& (0+255),w,b
 25104  006118  5B69               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 25105  00611A  516E               	movf	(___llmod@divisor+2)& (0+255),w,b
 25106  00611C  5B6A               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 25107  00611E  516F               	movf	(___llmod@divisor+3)& (0+255),w,b
 25108  006120  5B6B               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 25109  006122                     l18405:
 25110                           
 25111                           ; BSR set to: 0
 25112  006122  90D8               	bcf	status,0,c
 25113  006124  336F               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 25114  006126  336E               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 25115  006128  336D               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 25116  00612A  336C               	rrcf	___llmod@divisor& (0+255),f,b
 25117                           
 25118                           ; BSR set to: 0
 25119  00612C  2F70               	decfsz	___llmod@counter& (0+255),f,b
 25120  00612E  D7E8               	goto	l18401
 25121  006130                     l2534:
 25122                           
 25123                           ; BSR set to: 0
 25124  006130  C068  F068         	movff	___llmod@dividend,?___llmod
 25125  006134  C069  F069         	movff	___llmod@dividend+1,?___llmod+1
 25126  006138  C06A  F06A         	movff	___llmod@dividend+2,?___llmod+2
 25127  00613C  C06B  F06B         	movff	___llmod@dividend+3,?___llmod+3
 25128                           
 25129                           ; BSR set to: 0
 25130  006140  0012               	return	
 25131  006142                     __end_of___llmod:
 25132                           	opt stack 0
 25133                           tblptru	equ	0xFF8
 25134                           tblptrh	equ	0xFF7
 25135                           tblptrl	equ	0xFF6
 25136                           tablat	equ	0xFF5
 25137                           prodh	equ	0xFF4
 25138                           prodl	equ	0xFF3
 25139                           intcon	equ	0xFF2
 25140                           indf0	equ	0xFEF
 25141                           postinc0	equ	0xFEE
 25142                           fsr0h	equ	0xFEA
 25143                           fsr0l	equ	0xFE9
 25144                           wreg	equ	0xFE8
 25145                           indf1	equ	0xFE7
 25146                           postinc1	equ	0xFE6
 25147                           postdec1	equ	0xFE5
 25148                           fsr1h	equ	0xFE2
 25149                           fsr1l	equ	0xFE1
 25150                           indf2	equ	0xFDF
 25151                           postinc2	equ	0xFDE
 25152                           postdec2	equ	0xFDD
 25153                           plusw2	equ	0xFDB
 25154                           fsr2h	equ	0xFDA
 25155                           fsr2l	equ	0xFD9
 25156                           status	equ	0xFD8
 25157                           
 25158 ;; *************** function ___lldiv *****************
 25159 ;; Defined at:
 25160 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 25161 ;; Parameters:    Size  Location     Type
 25162 ;;  dividend        4    0[BANK0 ] unsigned long 
 25163 ;;  divisor         4    4[BANK0 ] unsigned long 
 25164 ;; Auto vars:     Size  Location     Type
 25165 ;;  quotient        4   30[COMRAM] unsigned long 
 25166 ;;  counter         1   34[COMRAM] unsigned char 
 25167 ;; Return value:  Size  Location     Type
 25168 ;;                  4    0[BANK0 ] unsigned long 
 25169 ;; Registers used:
 25170 ;;		wreg, status,2, status,0
 25171 ;; Tracked objects:
 25172 ;;		On entry : F/0
 25173 ;;		On exit  : F/0
 25174 ;;		Unchanged: 0/0
 25175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25176 ;;      Params:         0       8       0       0       0       0       0
 25177 ;;      Locals:         5       0       0       0       0       0       0
 25178 ;;      Temps:          0       0       0       0       0       0       0
 25179 ;;      Totals:         5       8       0       0       0       0       0
 25180 ;;Total ram usage:       13 bytes
 25181 ;; Hardware stack levels used:    1
 25182 ;; Hardware stack levels required when called:    3
 25183 ;; This function calls:
 25184 ;;		Nothing
 25185 ;; This function is called by:
 25186 ;;		_sprintf
 25187 ;;		_ultoa
 25188 ;; This function uses a non-reentrant model
 25189 ;;
 25190                           
 25191                           	psect	text59
 25192  005EA6                     __ptext59:
 25193                           	opt stack 0
 25194  005EA6                     ___lldiv:
 25195                           	opt stack 24
 25196                           
 25197                           ; BSR set to: 0
 25198                           
 25199                           ; BSR set to: 0
 25200                           ;incstack = 0
 25201                           ;incstack = 0
 25202  005EA6  6A1F               	clrf	___lldiv@quotient,c
 25203  005EA8  6A20               	clrf	___lldiv@quotient+1,c
 25204  005EAA  6A21               	clrf	___lldiv@quotient+2,c
 25205  005EAC  6A22               	clrf	___lldiv@quotient+3,c
 25206                           
 25207                           ; BSR set to: 0
 25208  005EAE  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25209  005EB0  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 25210  005EB2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 25211  005EB4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 25212  005EB6  E029               	bz	l2524
 25213                           
 25214                           ; BSR set to: 0
 25215  005EB8  0E01               	movlw	1
 25216  005EBA  6E23               	movwf	___lldiv@counter,c
 25217  005EBC  D006               	goto	l14815
 25218  005EBE                     l14813:
 25219                           
 25220                           ; BSR set to: 0
 25221  005EBE  90D8               	bcf	status,0,c
 25222  005EC0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 25223  005EC2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 25224  005EC4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 25225  005EC6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 25226  005EC8  2A23               	incf	___lldiv@counter,f,c
 25227  005ECA                     l14815:
 25228                           
 25229                           ; BSR set to: 0
 25230  005ECA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 25231  005ECC  D7F8               	goto	l14813
 25232  005ECE                     l14817:
 25233                           
 25234                           ; BSR set to: 0
 25235  005ECE  90D8               	bcf	status,0,c
 25236  005ED0  361F               	rlcf	___lldiv@quotient,f,c
 25237  005ED2  3620               	rlcf	___lldiv@quotient+1,f,c
 25238  005ED4  3621               	rlcf	___lldiv@quotient+2,f,c
 25239  005ED6  3622               	rlcf	___lldiv@quotient+3,f,c
 25240                           
 25241                           ; BSR set to: 0
 25242  005ED8  5164               	movf	___lldiv@divisor& (0+255),w,b
 25243  005EDA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 25244  005EDC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25245  005EDE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 25246  005EE0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25247  005EE2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 25248  005EE4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25249  005EE6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 25250  005EE8  E309               	bnc	l14825
 25251                           
 25252                           ; BSR set to: 0
 25253  005EEA  5164               	movf	___lldiv@divisor& (0+255),w,b
 25254  005EEC  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 25255  005EEE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 25256  005EF0  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 25257  005EF2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 25258  005EF4  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 25259  005EF6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 25260  005EF8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 25261                           
 25262                           ; BSR set to: 0
 25263  005EFA  801F               	bsf	___lldiv@quotient,0,c
 25264  005EFC                     l14825:
 25265                           
 25266                           ; BSR set to: 0
 25267  005EFC  90D8               	bcf	status,0,c
 25268  005EFE  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 25269  005F00  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 25270  005F02  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 25271  005F04  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 25272                           
 25273                           ; BSR set to: 0
 25274  005F06  2E23               	decfsz	___lldiv@counter,f,c
 25275  005F08  D7E2               	goto	l14817
 25276  005F0A                     l2524:
 25277                           
 25278                           ; BSR set to: 0
 25279  005F0A  C01F  F060         	movff	___lldiv@quotient,?___lldiv
 25280  005F0E  C020  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 25281  005F12  C021  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 25282  005F16  C022  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 25283                           
 25284                           ; BSR set to: 0
 25285  005F1A  0012               	return	
 25286  005F1C                     __end_of___lldiv:
 25287                           	opt stack 0
 25288                           tblptru	equ	0xFF8
 25289                           tblptrh	equ	0xFF7
 25290                           tblptrl	equ	0xFF6
 25291                           tablat	equ	0xFF5
 25292                           prodh	equ	0xFF4
 25293                           prodl	equ	0xFF3
 25294                           intcon	equ	0xFF2
 25295                           indf0	equ	0xFEF
 25296                           postinc0	equ	0xFEE
 25297                           fsr0h	equ	0xFEA
 25298                           fsr0l	equ	0xFE9
 25299                           wreg	equ	0xFE8
 25300                           indf1	equ	0xFE7
 25301                           postinc1	equ	0xFE6
 25302                           postdec1	equ	0xFE5
 25303                           fsr1h	equ	0xFE2
 25304                           fsr1l	equ	0xFE1
 25305                           indf2	equ	0xFDF
 25306                           postinc2	equ	0xFDE
 25307                           postdec2	equ	0xFDD
 25308                           plusw2	equ	0xFDB
 25309                           fsr2h	equ	0xFDA
 25310                           fsr2l	equ	0xFD9
 25311                           status	equ	0xFD8
 25312                           
 25313 ;; *************** function _isdigit *****************
 25314 ;; Defined at:
 25315 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 25316 ;; Parameters:    Size  Location     Type
 25317 ;;  c               1    wreg     unsigned char 
 25318 ;; Auto vars:     Size  Location     Type
 25319 ;;  c               1   32[COMRAM] unsigned char 
 25320 ;; Return value:  Size  Location     Type
 25321 ;;		None               void
 25322 ;; Registers used:
 25323 ;;		wreg, status,2, status,0
 25324 ;; Tracked objects:
 25325 ;;		On entry : 0/0
 25326 ;;		On exit  : 0/0
 25327 ;;		Unchanged: 0/0
 25328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25329 ;;      Params:         0       0       0       0       0       0       0
 25330 ;;      Locals:         2       0       0       0       0       0       0
 25331 ;;      Temps:          1       0       0       0       0       0       0
 25332 ;;      Totals:         3       0       0       0       0       0       0
 25333 ;;Total ram usage:        3 bytes
 25334 ;; Hardware stack levels used:    1
 25335 ;; Hardware stack levels required when called:    3
 25336 ;; This function calls:
 25337 ;;		Nothing
 25338 ;; This function is called by:
 25339 ;;		_sprintf
 25340 ;;		_atoi
 25341 ;; This function uses a non-reentrant model
 25342 ;;
 25343                           
 25344                           	psect	text60
 25345  006858                     __ptext60:
 25346                           	opt stack 0
 25347  006858                     _isdigit:
 25348                           	opt stack 25
 25349                           
 25350                           ; BSR set to: 0
 25351                           ;incstack = 0
 25352                           ;incstack = 0
 25353                           ;isdigit@c stored from wreg
 25354  006858  CFE8 F021          	movff	wreg,isdigit@c
 25355  00685C  6A20               	clrf	_isdigit$3268,c
 25356  00685E  0E3A               	movlw	58
 25357  006860  6021               	cpfslt	isdigit@c,c
 25358  006862  D005               	goto	l14773
 25359  006864  0E2F               	movlw	47
 25360  006866  6421               	cpfsgt	isdigit@c,c
 25361  006868  D002               	goto	l14773
 25362  00686A  0E01               	movlw	1
 25363  00686C  6E20               	movwf	_isdigit$3268,c
 25364  00686E                     l14773:
 25365  00686E  C020  F01F         	movff	_isdigit$3268,??_isdigit
 25366  006872  301F               	rrcf	??_isdigit,w,c
 25367  006874  0012               	return	
 25368  006876                     __end_of_isdigit:
 25369                           	opt stack 0
 25370                           tblptru	equ	0xFF8
 25371                           tblptrh	equ	0xFF7
 25372                           tblptrl	equ	0xFF6
 25373                           tablat	equ	0xFF5
 25374                           prodh	equ	0xFF4
 25375                           prodl	equ	0xFF3
 25376                           intcon	equ	0xFF2
 25377                           indf0	equ	0xFEF
 25378                           postinc0	equ	0xFEE
 25379                           fsr0h	equ	0xFEA
 25380                           fsr0l	equ	0xFE9
 25381                           wreg	equ	0xFE8
 25382                           indf1	equ	0xFE7
 25383                           postinc1	equ	0xFE6
 25384                           postdec1	equ	0xFE5
 25385                           fsr1h	equ	0xFE2
 25386                           fsr1l	equ	0xFE1
 25387                           indf2	equ	0xFDF
 25388                           postinc2	equ	0xFDE
 25389                           postdec2	equ	0xFDD
 25390                           plusw2	equ	0xFDB
 25391                           fsr2h	equ	0xFDA
 25392                           fsr2l	equ	0xFD9
 25393                           status	equ	0xFD8
 25394                           
 25395 ;; *************** function _printFirmwareVersion *****************
 25396 ;; Defined at:
 25397 ;;		line 3266 in file "main.c"
 25398 ;; Parameters:    Size  Location     Type
 25399 ;;		None
 25400 ;; Auto vars:     Size  Location     Type
 25401 ;;  wrkbuf         20   20[BANK0 ] unsigned char [20]
 25402 ;; Return value:  Size  Location     Type
 25403 ;;		None               void
 25404 ;; Registers used:
 25405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25406 ;; Tracked objects:
 25407 ;;		On entry : 0/1
 25408 ;;		On exit  : 0/0
 25409 ;;		Unchanged: 0/0
 25410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25411 ;;      Params:         0       0       0       0       0       0       0
 25412 ;;      Locals:         0      20       0       0       0       0       0
 25413 ;;      Temps:          0       0       0       0       0       0       0
 25414 ;;      Totals:         0      20       0       0       0       0       0
 25415 ;;Total ram usage:       20 bytes
 25416 ;; Hardware stack levels used:    1
 25417 ;; Hardware stack levels required when called:    6
 25418 ;; This function calls:
 25419 ;;		_putsUSART
 25420 ;;		_WriteUSART
 25421 ;;		_itoa
 25422 ;; This function is called by:
 25423 ;;		_main
 25424 ;;		_doModeVerbose
 25425 ;; This function uses a non-reentrant model
 25426 ;;
 25427                           
 25428                           	psect	text61
 25429  005C96                     __ptext61:
 25430                           	opt stack 0
 25431  005C96                     _printFirmwareVersion:
 25432                           	opt stack 23
 25433                           
 25434                           ;main.c: 3267: char wrkbuf[20];
 25435                           ;main.c: 3268: putsUSART((char *) "Version: ");
 25436                           
 25437                           ;incstack = 0
 25438                           ;incstack = 0
 25439  005C96  0E7E               	movlw	high STR_298
 25440  005C98  6E21               	movwf	?_putsUSART+1,c
 25441  005C9A  0E75               	movlw	low STR_298
 25442  005C9C  6E20               	movwf	?_putsUSART,c
 25443  005C9E  ECB5  F031         	call	_putsUSART	;wreg free
 25444                           
 25445                           ;main.c: 3269: itoa(wrkbuf, 1, 10);
 25446  005CA2  0100               	movlb	0	; () banked
 25447  005CA4  D834               	call	PL70	;call to abstracted procedure
 25448  005CA6  EC64  F033         	call	_itoa	;wreg free
 25449                           
 25450                           ; BSR set to: 0
 25451                           ;main.c: 3270: putsUSART(wrkbuf);
 25452  005CAA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25453  005CAC  6E21               	movwf	?_putsUSART+1,c
 25454  005CAE  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25455  005CB0  6E20               	movwf	?_putsUSART,c
 25456  005CB2  ECB5  F031         	call	_putsUSART	;wreg free
 25457  005CB6                     l1368:
 25458  005CB6  A2AC               	btfss	4012,1,c	;volatile
 25459  005CB8  D7FE               	goto	l1368
 25460                           
 25461                           ;main.c: 3272: WriteUSART('.');
 25462  005CBA  0E2E               	movlw	46
 25463  005CBC  EC61  F034         	call	_WriteUSART
 25464                           
 25465                           ;main.c: 3273: itoa(wrkbuf, 1, 10);
 25466  005CC0  0100               	movlb	0	; () banked
 25467  005CC2  D825               	call	PL70	;call to abstracted procedure
 25468  005CC4  EC64  F033         	call	_itoa	;wreg free
 25469                           
 25470                           ; BSR set to: 0
 25471                           ;main.c: 3274: putsUSART(wrkbuf);
 25472  005CC8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25473  005CCA  6E21               	movwf	?_putsUSART+1,c
 25474  005CCC  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25475  005CCE  6E20               	movwf	?_putsUSART,c
 25476  005CD0  ECB5  F031         	call	_putsUSART	;wreg free
 25477  005CD4                     l1371:
 25478  005CD4  A2AC               	btfss	4012,1,c	;volatile
 25479  005CD6  D7FE               	goto	l1371
 25480                           
 25481                           ;main.c: 3276: WriteUSART('.');
 25482  005CD8  0E2E               	movlw	46
 25483  005CDA  EC61  F034         	call	_WriteUSART
 25484                           
 25485                           ;main.c: 3277: itoa(wrkbuf, 0, 10);
 25486  005CDE  0100               	movlb	0	; () banked
 25487  005CE0  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25488  005CE2  6F6D               	movwf	(?_itoa+1)& (0+255),b
 25489  005CE4  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25490  005CE6  6F6C               	movwf	?_itoa& (0+255),b
 25491  005CE8  6B6F               	clrf	(?_itoa+3)& (0+255),b
 25492  005CEA  6B6E               	clrf	(?_itoa+2)& (0+255),b
 25493  005CEC  6B71               	clrf	(?_itoa+5)& (0+255),b
 25494  005CEE  0E0A               	movlw	10
 25495  005CF0  6F70               	movwf	(?_itoa+4)& (0+255),b
 25496  005CF2  EC64  F033         	call	_itoa	;wreg free
 25497                           
 25498                           ; BSR set to: 0
 25499                           ;main.c: 3278: putsUSART(wrkbuf);
 25500  005CF6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25501  005CF8  6E21               	movwf	?_putsUSART+1,c
 25502  005CFA  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25503  005CFC  6E20               	movwf	?_putsUSART,c
 25504  005CFE  ECB5  F031         	call	_putsUSART	;wreg free
 25505                           
 25506                           ;main.c: 3279: putsUSART((char *) "\r\n");
 25507  005D02  0E73               	movlw	high (STR_239+51)
 25508  005D04  6E21               	movwf	?_putsUSART+1,c
 25509  005D06  0E1A               	movlw	low (STR_239+51)
 25510  005D08  6E20               	movwf	?_putsUSART,c
 25511  005D0A  EFB5  F031         	goto	_putsUSART	;wreg free
 25512  005D0E                     __end_of_printFirmwareVersion:
 25513                           	opt stack 0
 25514  005D0E                     PL70:
 25515                           	opt stack 23
 25516  005D0E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25517  005D10  6F6D               	movwf	(?_itoa+1)& (0+255),b
 25518  005D12  0E74               	movlw	low printFirmwareVersion@wrkbuf
 25519  005D14  6F6C               	movwf	?_itoa& (0+255),b
 25520  005D16  6B6F               	clrf	(?_itoa+3)& (0+255),b
 25521  005D18  0E01               	movlw	1
 25522  005D1A  6F6E               	movwf	(?_itoa+2)& (0+255),b
 25523  005D1C  6B71               	clrf	(?_itoa+5)& (0+255),b
 25524  005D1E  0E0A               	movlw	10
 25525  005D20  6F70               	movwf	(?_itoa+4)& (0+255),b
 25526  005D22  0C0A               	retlw	10
 25527  005D24                     __end_ofPL70:
 25528                           	opt stack 0
 25529                           tblptru	equ	0xFF8
 25530                           tblptrh	equ	0xFF7
 25531                           tblptrl	equ	0xFF6
 25532                           tablat	equ	0xFF5
 25533                           prodh	equ	0xFF4
 25534                           prodl	equ	0xFF3
 25535                           intcon	equ	0xFF2
 25536                           indf0	equ	0xFEF
 25537                           postinc0	equ	0xFEE
 25538                           fsr0h	equ	0xFEA
 25539                           fsr0l	equ	0xFE9
 25540                           wreg	equ	0xFE8
 25541                           indf1	equ	0xFE7
 25542                           postinc1	equ	0xFE6
 25543                           postdec1	equ	0xFE5
 25544                           fsr1h	equ	0xFE2
 25545                           fsr1l	equ	0xFE1
 25546                           indf2	equ	0xFDF
 25547                           postinc2	equ	0xFDE
 25548                           postdec2	equ	0xFDD
 25549                           plusw2	equ	0xFDB
 25550                           fsr2h	equ	0xFDA
 25551                           fsr2l	equ	0xFD9
 25552                           status	equ	0xFD8
 25553                           
 25554 ;; *************** function _itoa *****************
 25555 ;; Defined at:
 25556 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 25557 ;; Parameters:    Size  Location     Type
 25558 ;;  buf             2   12[BANK0 ] PTR unsigned char 
 25559 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25560 ;;  val             2   14[BANK0 ] int 
 25561 ;;  base            2   16[BANK0 ] int 
 25562 ;; Auto vars:     Size  Location     Type
 25563 ;;  cp              2    0        PTR unsigned char 
 25564 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25565 ;; Return value:  Size  Location     Type
 25566 ;;                  2   12[BANK0 ] PTR unsigned char 
 25567 ;; Registers used:
 25568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25569 ;; Tracked objects:
 25570 ;;		On entry : F/0
 25571 ;;		On exit  : F/0
 25572 ;;		Unchanged: 0/0
 25573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25574 ;;      Params:         0       6       0       0       0       0       0
 25575 ;;      Locals:         0       2       0       0       0       0       0
 25576 ;;      Temps:          0       0       0       0       0       0       0
 25577 ;;      Totals:         0       8       0       0       0       0       0
 25578 ;;Total ram usage:        8 bytes
 25579 ;; Hardware stack levels used:    1
 25580 ;; Hardware stack levels required when called:    5
 25581 ;; This function calls:
 25582 ;;		_utoa
 25583 ;; This function is called by:
 25584 ;;		_receiveSendEventSLCAN
 25585 ;;		_findNodes
 25586 ;;		_printGUID
 25587 ;;		_printNodeFirmwareVersion
 25588 ;;		_printFirmwareVersion
 25589 ;; This function uses a non-reentrant model
 25590 ;;
 25591                           
 25592                           	psect	text62
 25593  0066C8                     __ptext62:
 25594                           	opt stack 0
 25595  0066C8                     _itoa:
 25596                           	opt stack 23
 25597                           
 25598                           ; BSR set to: 0
 25599                           
 25600                           ;incstack = 0
 25601                           ;incstack = 0
 25602  0066C8  AF6F               	btfss	(itoa@val+1)& (0+255),7,b
 25603  0066CA  D00C               	goto	l14615
 25604                           
 25605                           ; BSR set to: 0
 25606  0066CC  C06C  FFD9         	movff	itoa@buf,fsr2l
 25607  0066D0  C06D  FFDA         	movff	itoa@buf+1,fsr2h
 25608  0066D4  0E2D               	movlw	45
 25609  0066D6  6EDF               	movwf	indf2,c
 25610                           
 25611                           ; BSR set to: 0
 25612  0066D8  4B6C               	infsnz	itoa@buf& (0+255),f,b
 25613  0066DA  2B6D               	incf	(itoa@buf+1)& (0+255),f,b
 25614                           
 25615                           ; BSR set to: 0
 25616  0066DC  6D6E               	negf	itoa@val& (0+255),b
 25617  0066DE  1F6F               	comf	(itoa@val+1)& (0+255),f,b
 25618  0066E0  B0D8               	btfsc	status,0,c
 25619  0066E2  2B6F               	incf	(itoa@val+1)& (0+255),f,b
 25620  0066E4                     l14615:
 25621                           
 25622                           ; BSR set to: 0
 25623  0066E4  C06C  F063         	movff	itoa@buf,?_utoa
 25624  0066E8  C06D  F064         	movff	itoa@buf+1,?_utoa+1
 25625  0066EC  C06E  F065         	movff	itoa@val,?_utoa+2
 25626  0066F0  C06F  F066         	movff	itoa@val+1,?_utoa+3
 25627  0066F4  C070  F067         	movff	itoa@base,?_utoa+4
 25628  0066F8  C071  F068         	movff	itoa@base+1,?_utoa+5
 25629  0066FC  EF17  F02D         	goto	_utoa	;wreg free
 25630  006700                     __end_of_itoa:
 25631                           	opt stack 0
 25632                           tblptru	equ	0xFF8
 25633                           tblptrh	equ	0xFF7
 25634                           tblptrl	equ	0xFF6
 25635                           tablat	equ	0xFF5
 25636                           prodh	equ	0xFF4
 25637                           prodl	equ	0xFF3
 25638                           intcon	equ	0xFF2
 25639                           indf0	equ	0xFEF
 25640                           postinc0	equ	0xFEE
 25641                           fsr0h	equ	0xFEA
 25642                           fsr0l	equ	0xFE9
 25643                           wreg	equ	0xFE8
 25644                           indf1	equ	0xFE7
 25645                           postinc1	equ	0xFE6
 25646                           postdec1	equ	0xFE5
 25647                           fsr1h	equ	0xFE2
 25648                           fsr1l	equ	0xFE1
 25649                           indf2	equ	0xFDF
 25650                           postinc2	equ	0xFDE
 25651                           postdec2	equ	0xFDD
 25652                           plusw2	equ	0xFDB
 25653                           fsr2h	equ	0xFDA
 25654                           fsr2l	equ	0xFD9
 25655                           status	equ	0xFD8
 25656                           
 25657 ;; *************** function _utoa *****************
 25658 ;; Defined at:
 25659 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 25660 ;; Parameters:    Size  Location     Type
 25661 ;;  buf             2    3[BANK0 ] PTR unsigned char 
 25662 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25663 ;;  val             2    5[BANK0 ] unsigned int 
 25664 ;;  base            2    7[BANK0 ] int 
 25665 ;; Auto vars:     Size  Location     Type
 25666 ;;  v               2    9[BANK0 ] unsigned int 
 25667 ;;  c               1   11[BANK0 ] unsigned char 
 25668 ;; Return value:  Size  Location     Type
 25669 ;;                  2    3[BANK0 ] PTR unsigned char 
 25670 ;; Registers used:
 25671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25672 ;; Tracked objects:
 25673 ;;		On entry : F/0
 25674 ;;		On exit  : F/0
 25675 ;;		Unchanged: 0/0
 25676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25677 ;;      Params:         0       6       0       0       0       0       0
 25678 ;;      Locals:         0       3       0       0       0       0       0
 25679 ;;      Temps:          0       0       0       0       0       0       0
 25680 ;;      Totals:         0       9       0       0       0       0       0
 25681 ;;Total ram usage:        9 bytes
 25682 ;; Hardware stack levels used:    1
 25683 ;; Hardware stack levels required when called:    4
 25684 ;; This function calls:
 25685 ;;		___lwdiv
 25686 ;;		___lwmod
 25687 ;; This function is called by:
 25688 ;;		_itoa
 25689 ;; This function uses a non-reentrant model
 25690 ;;
 25691                           
 25692                           	psect	text63
 25693  005A2E                     __ptext63:
 25694                           	opt stack 0
 25695  005A2E                     _utoa:
 25696                           	opt stack 23
 25697                           
 25698                           ; BSR set to: 0
 25699                           
 25700                           ; BSR set to: 0
 25701                           ;incstack = 0
 25702                           ;incstack = 0
 25703  005A2E  C065  F069         	movff	utoa@val,utoa@v
 25704  005A32  C066  F06A         	movff	utoa@val+1,utoa@v+1
 25705  005A36                     l14779:
 25706                           
 25707                           ; BSR set to: 0
 25708  005A36  C069  F01F         	movff	utoa@v,?___lwdiv
 25709  005A3A  C06A  F020         	movff	utoa@v+1,?___lwdiv+1
 25710  005A3E  C067  F021         	movff	utoa@base,?___lwdiv+2
 25711  005A42  C068  F022         	movff	utoa@base+1,?___lwdiv+3
 25712  005A46  EC04  F032         	call	___lwdiv	;wreg free
 25713  005A4A  C01F  F069         	movff	?___lwdiv,utoa@v
 25714  005A4E  C020  F06A         	movff	?___lwdiv+1,utoa@v+1
 25715                           
 25716                           ; BSR set to: 0
 25717  005A52  4B63               	infsnz	utoa@buf& (0+255),f,b
 25718  005A54  2B64               	incf	(utoa@buf+1)& (0+255),f,b
 25719                           
 25720                           ; BSR set to: 0
 25721  005A56  516A               	movf	(utoa@v+1)& (0+255),w,b
 25722  005A58  1169               	iorwf	utoa@v& (0+255),w,b
 25723  005A5A  E1ED               	bnz	l14779
 25724                           
 25725                           ; BSR set to: 0
 25726  005A5C  C063  FFD9         	movff	utoa@buf,fsr2l
 25727  005A60  C064  FFDA         	movff	utoa@buf+1,fsr2h
 25728  005A64  0E00               	movlw	0
 25729  005A66  6ADF               	clrf	indf2,c
 25730                           
 25731                           ; BSR set to: 0
 25732  005A68  0763               	decf	utoa@buf& (0+255),f,b
 25733  005A6A  A0D8               	btfss	status,0,c
 25734  005A6C  0764               	decf	(utoa@buf+1)& (0+255),f,b
 25735  005A6E                     l14789:
 25736                           
 25737                           ; BSR set to: 0
 25738  005A6E  C065  F01F         	movff	utoa@val,?___lwmod
 25739  005A72  C066  F020         	movff	utoa@val+1,?___lwmod+1
 25740  005A76  C067  F021         	movff	utoa@base,?___lwmod+2
 25741  005A7A  C068  F022         	movff	utoa@base+1,?___lwmod+3
 25742  005A7E  ECEE  F032         	call	___lwmod	;wreg free
 25743  005A82  501F               	movf	?___lwmod,w,c
 25744  005A84  6F6B               	movwf	utoa@c& (0+255),b
 25745                           
 25746                           ; BSR set to: 0
 25747  005A86  C065  F01F         	movff	utoa@val,?___lwdiv
 25748  005A8A  C066  F020         	movff	utoa@val+1,?___lwdiv+1
 25749  005A8E  C067  F021         	movff	utoa@base,?___lwdiv+2
 25750  005A92  C068  F022         	movff	utoa@base+1,?___lwdiv+3
 25751  005A96  EC04  F032         	call	___lwdiv	;wreg free
 25752  005A9A  C01F  F065         	movff	?___lwdiv,utoa@val
 25753  005A9E  C020  F066         	movff	?___lwdiv+1,utoa@val+1
 25754                           
 25755                           ; BSR set to: 0
 25756  005AA2  0E09               	movlw	9
 25757  005AA4  656B               	cpfsgt	utoa@c& (0+255),b
 25758  005AA6  D002               	goto	l2493
 25759                           
 25760                           ; BSR set to: 0
 25761  005AA8  0E07               	movlw	7
 25762  005AAA  276B               	addwf	utoa@c& (0+255),f,b
 25763  005AAC                     l2493:
 25764                           
 25765                           ; BSR set to: 0
 25766  005AAC  0E30               	movlw	48
 25767  005AAE  276B               	addwf	utoa@c& (0+255),f,b
 25768                           
 25769                           ; BSR set to: 0
 25770  005AB0  C063  FFD9         	movff	utoa@buf,fsr2l
 25771  005AB4  C064  FFDA         	movff	utoa@buf+1,fsr2h
 25772  005AB8  C06B  FFDF         	movff	utoa@c,indf2
 25773                           
 25774                           ; BSR set to: 0
 25775  005ABC  0763               	decf	utoa@buf& (0+255),f,b
 25776  005ABE  A0D8               	btfss	status,0,c
 25777  005AC0  0764               	decf	(utoa@buf+1)& (0+255),f,b
 25778                           
 25779                           ; BSR set to: 0
 25780  005AC2  5166               	movf	(utoa@val+1)& (0+255),w,b
 25781  005AC4  1165               	iorwf	utoa@val& (0+255),w,b
 25782  005AC6  E1D3               	bnz	l14789
 25783                           
 25784                           ; BSR set to: 0
 25785                           ;	Return value of _utoa is never used
 25786  005AC8  4B63               	infsnz	utoa@buf& (0+255),f,b
 25787  005ACA  2B64               	incf	(utoa@buf+1)& (0+255),f,b
 25788                           
 25789                           ; BSR set to: 0
 25790  005ACC  0012               	return	
 25791  005ACE                     __end_of_utoa:
 25792                           	opt stack 0
 25793                           tblptru	equ	0xFF8
 25794                           tblptrh	equ	0xFF7
 25795                           tblptrl	equ	0xFF6
 25796                           tablat	equ	0xFF5
 25797                           prodh	equ	0xFF4
 25798                           prodl	equ	0xFF3
 25799                           intcon	equ	0xFF2
 25800                           indf0	equ	0xFEF
 25801                           postinc0	equ	0xFEE
 25802                           fsr0h	equ	0xFEA
 25803                           fsr0l	equ	0xFE9
 25804                           wreg	equ	0xFE8
 25805                           indf1	equ	0xFE7
 25806                           postinc1	equ	0xFE6
 25807                           postdec1	equ	0xFE5
 25808                           fsr1h	equ	0xFE2
 25809                           fsr1l	equ	0xFE1
 25810                           indf2	equ	0xFDF
 25811                           postinc2	equ	0xFDE
 25812                           postdec2	equ	0xFDD
 25813                           plusw2	equ	0xFDB
 25814                           fsr2h	equ	0xFDA
 25815                           fsr2l	equ	0xFD9
 25816                           status	equ	0xFD8
 25817                           
 25818 ;; *************** function ___lwmod *****************
 25819 ;; Defined at:
 25820 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 25821 ;; Parameters:    Size  Location     Type
 25822 ;;  dividend        2   30[COMRAM] unsigned int 
 25823 ;;  divisor         2   32[COMRAM] unsigned int 
 25824 ;; Auto vars:     Size  Location     Type
 25825 ;;  counter         1   34[COMRAM] unsigned char 
 25826 ;; Return value:  Size  Location     Type
 25827 ;;                  2   30[COMRAM] unsigned int 
 25828 ;; Registers used:
 25829 ;;		wreg, status,2, status,0
 25830 ;; Tracked objects:
 25831 ;;		On entry : F/0
 25832 ;;		On exit  : F/0
 25833 ;;		Unchanged: F/0
 25834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25835 ;;      Params:         4       0       0       0       0       0       0
 25836 ;;      Locals:         1       0       0       0       0       0       0
 25837 ;;      Temps:          0       0       0       0       0       0       0
 25838 ;;      Totals:         5       0       0       0       0       0       0
 25839 ;;Total ram usage:        5 bytes
 25840 ;; Hardware stack levels used:    1
 25841 ;; Hardware stack levels required when called:    3
 25842 ;; This function calls:
 25843 ;;		Nothing
 25844 ;; This function is called by:
 25845 ;;		_utoa
 25846 ;; This function uses a non-reentrant model
 25847 ;;
 25848                           
 25849                           	psect	text64
 25850  0065DC                     __ptext64:
 25851                           	opt stack 0
 25852  0065DC                     ___lwmod:
 25853                           	opt stack 23
 25854                           
 25855                           ; BSR set to: 0
 25856                           
 25857                           ; BSR set to: 0
 25858                           ;incstack = 0
 25859                           ;incstack = 0
 25860  0065DC  5022               	movf	___lwmod@divisor+1,w,c
 25861  0065DE  1021               	iorwf	___lwmod@divisor,w,c
 25862  0065E0  E017               	bz	l2617
 25863                           
 25864                           ; BSR set to: 0
 25865  0065E2  0E01               	movlw	1
 25866  0065E4  6E23               	movwf	___lwmod@counter,c
 25867  0065E6  D004               	goto	l14873
 25868  0065E8                     l14871:
 25869                           
 25870                           ; BSR set to: 0
 25871  0065E8  90D8               	bcf	status,0,c
 25872  0065EA  3621               	rlcf	___lwmod@divisor,f,c
 25873  0065EC  3622               	rlcf	___lwmod@divisor+1,f,c
 25874  0065EE  2A23               	incf	___lwmod@counter,f,c
 25875  0065F0                     l14873:
 25876                           
 25877                           ; BSR set to: 0
 25878  0065F0  AE22               	btfss	___lwmod@divisor+1,7,c
 25879  0065F2  D7FA               	goto	l14871
 25880  0065F4                     l14875:
 25881                           
 25882                           ; BSR set to: 0
 25883  0065F4  5021               	movf	___lwmod@divisor,w,c
 25884  0065F6  5C1F               	subwf	___lwmod@dividend,w,c
 25885  0065F8  5022               	movf	___lwmod@divisor+1,w,c
 25886  0065FA  5820               	subwfb	___lwmod@dividend+1,w,c
 25887  0065FC  E304               	bnc	l14879
 25888                           
 25889                           ; BSR set to: 0
 25890  0065FE  5021               	movf	___lwmod@divisor,w,c
 25891  006600  5E1F               	subwf	___lwmod@dividend,f,c
 25892  006602  5022               	movf	___lwmod@divisor+1,w,c
 25893  006604  5A20               	subwfb	___lwmod@dividend+1,f,c
 25894  006606                     l14879:
 25895                           
 25896                           ; BSR set to: 0
 25897  006606  90D8               	bcf	status,0,c
 25898  006608  3222               	rrcf	___lwmod@divisor+1,f,c
 25899  00660A  3221               	rrcf	___lwmod@divisor,f,c
 25900                           
 25901                           ; BSR set to: 0
 25902  00660C  2E23               	decfsz	___lwmod@counter,f,c
 25903  00660E  D7F2               	goto	l14875
 25904  006610                     l2617:
 25905                           
 25906                           ; BSR set to: 0
 25907  006610  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
 25908  006614  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
 25909                           
 25910                           ; BSR set to: 0
 25911  006618  0012               	return	
 25912  00661A                     __end_of___lwmod:
 25913                           	opt stack 0
 25914                           tblptru	equ	0xFF8
 25915                           tblptrh	equ	0xFF7
 25916                           tblptrl	equ	0xFF6
 25917                           tablat	equ	0xFF5
 25918                           prodh	equ	0xFF4
 25919                           prodl	equ	0xFF3
 25920                           intcon	equ	0xFF2
 25921                           indf0	equ	0xFEF
 25922                           postinc0	equ	0xFEE
 25923                           fsr0h	equ	0xFEA
 25924                           fsr0l	equ	0xFE9
 25925                           wreg	equ	0xFE8
 25926                           indf1	equ	0xFE7
 25927                           postinc1	equ	0xFE6
 25928                           postdec1	equ	0xFE5
 25929                           fsr1h	equ	0xFE2
 25930                           fsr1l	equ	0xFE1
 25931                           indf2	equ	0xFDF
 25932                           postinc2	equ	0xFDE
 25933                           postdec2	equ	0xFDD
 25934                           plusw2	equ	0xFDB
 25935                           fsr2h	equ	0xFDA
 25936                           fsr2l	equ	0xFD9
 25937                           status	equ	0xFD8
 25938                           
 25939 ;; *************** function ___lwdiv *****************
 25940 ;; Defined at:
 25941 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 25942 ;; Parameters:    Size  Location     Type
 25943 ;;  dividend        2   30[COMRAM] unsigned int 
 25944 ;;  divisor         2   32[COMRAM] unsigned int 
 25945 ;; Auto vars:     Size  Location     Type
 25946 ;;  quotient        2    1[BANK0 ] unsigned int 
 25947 ;;  counter         1    0[BANK0 ] unsigned char 
 25948 ;; Return value:  Size  Location     Type
 25949 ;;                  2   30[COMRAM] unsigned int 
 25950 ;; Registers used:
 25951 ;;		wreg, status,2, status,0
 25952 ;; Tracked objects:
 25953 ;;		On entry : F/0
 25954 ;;		On exit  : F/0
 25955 ;;		Unchanged: 0/0
 25956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25957 ;;      Params:         4       0       0       0       0       0       0
 25958 ;;      Locals:         0       3       0       0       0       0       0
 25959 ;;      Temps:          0       0       0       0       0       0       0
 25960 ;;      Totals:         4       3       0       0       0       0       0
 25961 ;;Total ram usage:        7 bytes
 25962 ;; Hardware stack levels used:    1
 25963 ;; Hardware stack levels required when called:    3
 25964 ;; This function calls:
 25965 ;;		Nothing
 25966 ;; This function is called by:
 25967 ;;		_utoa
 25968 ;; This function uses a non-reentrant model
 25969 ;;
 25970                           
 25971                           	psect	text65
 25972  006408                     __ptext65:
 25973                           	opt stack 0
 25974  006408                     ___lwdiv:
 25975                           	opt stack 23
 25976                           
 25977                           ; BSR set to: 0
 25978                           
 25979                           ; BSR set to: 0
 25980                           ;incstack = 0
 25981                           ;incstack = 0
 25982  006408  6B61               	clrf	___lwdiv@quotient& (0+255),b
 25983  00640A  6B62               	clrf	(___lwdiv@quotient+1)& (0+255),b
 25984                           
 25985                           ; BSR set to: 0
 25986  00640C  5022               	movf	___lwdiv@divisor+1,w,c
 25987  00640E  1021               	iorwf	___lwdiv@divisor,w,c
 25988  006410  E01B               	bz	l2607
 25989                           
 25990                           ; BSR set to: 0
 25991  006412  0E01               	movlw	1
 25992  006414  6F60               	movwf	___lwdiv@counter& (0+255),b
 25993  006416  D004               	goto	l14853
 25994  006418                     l14851:
 25995                           
 25996                           ; BSR set to: 0
 25997  006418  90D8               	bcf	status,0,c
 25998  00641A  3621               	rlcf	___lwdiv@divisor,f,c
 25999  00641C  3622               	rlcf	___lwdiv@divisor+1,f,c
 26000  00641E  2B60               	incf	___lwdiv@counter& (0+255),f,b
 26001  006420                     l14853:
 26002                           
 26003                           ; BSR set to: 0
 26004  006420  AE22               	btfss	___lwdiv@divisor+1,7,c
 26005  006422  D7FA               	goto	l14851
 26006  006424                     l14855:
 26007                           
 26008                           ; BSR set to: 0
 26009  006424  90D8               	bcf	status,0,c
 26010  006426  3761               	rlcf	___lwdiv@quotient& (0+255),f,b
 26011  006428  3762               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 26012                           
 26013                           ; BSR set to: 0
 26014  00642A  5021               	movf	___lwdiv@divisor,w,c
 26015  00642C  5C1F               	subwf	___lwdiv@dividend,w,c
 26016  00642E  5022               	movf	___lwdiv@divisor+1,w,c
 26017  006430  5820               	subwfb	___lwdiv@dividend+1,w,c
 26018  006432  E305               	bnc	l14863
 26019                           
 26020                           ; BSR set to: 0
 26021  006434  5021               	movf	___lwdiv@divisor,w,c
 26022  006436  5E1F               	subwf	___lwdiv@dividend,f,c
 26023  006438  5022               	movf	___lwdiv@divisor+1,w,c
 26024  00643A  5A20               	subwfb	___lwdiv@dividend+1,f,c
 26025                           
 26026                           ; BSR set to: 0
 26027  00643C  8161               	bsf	___lwdiv@quotient& (0+255),0,b
 26028  00643E                     l14863:
 26029                           
 26030                           ; BSR set to: 0
 26031  00643E  90D8               	bcf	status,0,c
 26032  006440  3222               	rrcf	___lwdiv@divisor+1,f,c
 26033  006442  3221               	rrcf	___lwdiv@divisor,f,c
 26034                           
 26035                           ; BSR set to: 0
 26036  006444  2F60               	decfsz	___lwdiv@counter& (0+255),f,b
 26037  006446  D7EE               	goto	l14855
 26038  006448                     l2607:
 26039                           
 26040                           ; BSR set to: 0
 26041  006448  C061  F01F         	movff	___lwdiv@quotient,?___lwdiv
 26042  00644C  C062  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
 26043                           
 26044                           ; BSR set to: 0
 26045  006450  0012               	return	
 26046  006452                     __end_of___lwdiv:
 26047                           	opt stack 0
 26048                           tblptru	equ	0xFF8
 26049                           tblptrh	equ	0xFF7
 26050                           tblptrl	equ	0xFF6
 26051                           tablat	equ	0xFF5
 26052                           prodh	equ	0xFF4
 26053                           prodl	equ	0xFF3
 26054                           intcon	equ	0xFF2
 26055                           indf0	equ	0xFEF
 26056                           postinc0	equ	0xFEE
 26057                           fsr0h	equ	0xFEA
 26058                           fsr0l	equ	0xFE9
 26059                           wreg	equ	0xFE8
 26060                           indf1	equ	0xFE7
 26061                           postinc1	equ	0xFE6
 26062                           postdec1	equ	0xFE5
 26063                           fsr1h	equ	0xFE2
 26064                           fsr1l	equ	0xFE1
 26065                           indf2	equ	0xFDF
 26066                           postinc2	equ	0xFDE
 26067                           postdec2	equ	0xFDD
 26068                           plusw2	equ	0xFDB
 26069                           fsr2h	equ	0xFDA
 26070                           fsr2l	equ	0xFD9
 26071                           status	equ	0xFD8
 26072                           
 26073 ;; *************** function _vscp_restoreDefaults *****************
 26074 ;; Defined at:
 26075 ;;		line 3256 in file "main.c"
 26076 ;; Parameters:    Size  Location     Type
 26077 ;;		None
 26078 ;; Auto vars:     Size  Location     Type
 26079 ;;		None
 26080 ;; Return value:  Size  Location     Type
 26081 ;;		None               void
 26082 ;; Registers used:
 26083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26084 ;; Tracked objects:
 26085 ;;		On entry : 0/1
 26086 ;;		On exit  : 0/0
 26087 ;;		Unchanged: 0/0
 26088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26089 ;;      Params:         0       0       0       0       0       0       0
 26090 ;;      Locals:         0       0       0       0       0       0       0
 26091 ;;      Temps:          0       0       0       0       0       0       0
 26092 ;;      Totals:         0       0       0       0       0       0       0
 26093 ;;Total ram usage:        0 bytes
 26094 ;; Hardware stack levels used:    1
 26095 ;; Hardware stack levels required when called:    6
 26096 ;; This function calls:
 26097 ;;		_init_app_ram
 26098 ;;		_init_app_eeprom
 26099 ;; This function is called by:
 26100 ;;		_main
 26101 ;;		_doModeVerbose
 26102 ;; This function uses a non-reentrant model
 26103 ;;
 26104                           
 26105                           	psect	text66
 26106  006932                     __ptext66:
 26107                           	opt stack 0
 26108  006932                     _vscp_restoreDefaults:
 26109                           	opt stack 23
 26110                           
 26111                           ;main.c: 3257: init_app_eeprom();
 26112                           
 26113                           ; BSR set to: 0
 26114                           ;incstack = 0
 26115                           ;incstack = 0
 26116  006932  EC2E  F029         	call	_init_app_eeprom	;wreg free
 26117                           
 26118                           ;main.c: 3258: init_app_ram();
 26119  006936  EF72  F018         	goto	_init_app_ram	;wreg free
 26120  00693A                     __end_of_vscp_restoreDefaults:
 26121                           	opt stack 0
 26122                           tblptru	equ	0xFF8
 26123                           tblptrh	equ	0xFF7
 26124                           tblptrl	equ	0xFF6
 26125                           tablat	equ	0xFF5
 26126                           prodh	equ	0xFF4
 26127                           prodl	equ	0xFF3
 26128                           intcon	equ	0xFF2
 26129                           indf0	equ	0xFEF
 26130                           postinc0	equ	0xFEE
 26131                           fsr0h	equ	0xFEA
 26132                           fsr0l	equ	0xFE9
 26133                           wreg	equ	0xFE8
 26134                           indf1	equ	0xFE7
 26135                           postinc1	equ	0xFE6
 26136                           postdec1	equ	0xFE5
 26137                           fsr1h	equ	0xFE2
 26138                           fsr1l	equ	0xFE1
 26139                           indf2	equ	0xFDF
 26140                           postinc2	equ	0xFDE
 26141                           postdec2	equ	0xFDD
 26142                           plusw2	equ	0xFDB
 26143                           fsr2h	equ	0xFDA
 26144                           fsr2l	equ	0xFD9
 26145                           status	equ	0xFD8
 26146                           
 26147 ;; *************** function _init_app_eeprom *****************
 26148 ;; Defined at:
 26149 ;;		line 570 in file "main.c"
 26150 ;; Parameters:    Size  Location     Type
 26151 ;;		None
 26152 ;; Auto vars:     Size  Location     Type
 26153 ;;  i               1   34[COMRAM] unsigned char 
 26154 ;; Return value:  Size  Location     Type
 26155 ;;		None               void
 26156 ;; Registers used:
 26157 ;;		wreg, status,2, status,0, cstack
 26158 ;; Tracked objects:
 26159 ;;		On entry : 0/1
 26160 ;;		On exit  : 0/0
 26161 ;;		Unchanged: 0/0
 26162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26163 ;;      Params:         0       0       0       0       0       0       0
 26164 ;;      Locals:         1       0       0       0       0       0       0
 26165 ;;      Temps:          0       0       0       0       0       0       0
 26166 ;;      Totals:         1       0       0       0       0       0       0
 26167 ;;Total ram usage:        1 bytes
 26168 ;; Hardware stack levels used:    1
 26169 ;; Hardware stack levels required when called:    4
 26170 ;; This function calls:
 26171 ;;		_Busy_eep
 26172 ;;		_Write_b_eep
 26173 ;; This function is called by:
 26174 ;;		_vscp_restoreDefaults
 26175 ;; This function uses a non-reentrant model
 26176 ;;
 26177                           
 26178                           	psect	text67
 26179  00525C                     __ptext67:
 26180                           	opt stack 0
 26181  00525C                     _init_app_eeprom:
 26182                           	opt stack 24
 26183                           
 26184                           ;main.c: 571: uint8_t i;
 26185                           ;main.c: 573: (Busy_eep(), Write_b_eep(0x01,0x55));
 26186                           
 26187                           ;incstack = 0
 26188                           ;incstack = 0
 26189  00525C  EC9D  F034         	call	_Busy_eep	;wreg free
 26190  005260  6A20               	clrf	?_Write_b_eep+1,c
 26191  005262  0E01               	movlw	1
 26192  005264  6E1F               	movwf	?_Write_b_eep,c
 26193  005266  0E55               	movlw	85
 26194  005268  6E21               	movwf	?_Write_b_eep+2,c
 26195  00526A  EC80  F033         	call	_Write_b_eep	;wreg free
 26196                           
 26197                           ;main.c: 574: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26198  00526E  EC9D  F034         	call	_Busy_eep	;wreg free
 26199  005272  6A20               	clrf	?_Write_b_eep+1,c
 26200  005274  0E02               	movlw	2
 26201  005276  6E1F               	movwf	?_Write_b_eep,c
 26202  005278  0EAA               	movlw	170
 26203  00527A  6E21               	movwf	?_Write_b_eep+2,c
 26204  00527C  EC80  F033         	call	_Write_b_eep	;wreg free
 26205                           
 26206                           ;main.c: 575: (Busy_eep(), Write_b_eep(0x03,0));
 26207  005280  EC9D  F034         	call	_Busy_eep	;wreg free
 26208  005284  6A20               	clrf	?_Write_b_eep+1,c
 26209  005286  0E03               	movlw	3
 26210  005288  6E1F               	movwf	?_Write_b_eep,c
 26211  00528A  0E00               	movlw	0
 26212  00528C  6A21               	clrf	?_Write_b_eep+2,c
 26213  00528E  EC80  F033         	call	_Write_b_eep	;wreg free
 26214                           
 26215                           ;main.c: 576: (Busy_eep(), Write_b_eep(0x05,0));
 26216  005292  EC9D  F034         	call	_Busy_eep	;wreg free
 26217  005296  6A20               	clrf	?_Write_b_eep+1,c
 26218  005298  0E05               	movlw	5
 26219  00529A  6E1F               	movwf	?_Write_b_eep,c
 26220  00529C  0E00               	movlw	0
 26221  00529E  6A21               	clrf	?_Write_b_eep+2,c
 26222  0052A0  EC80  F033         	call	_Write_b_eep	;wreg free
 26223                           
 26224                           ;main.c: 577: (Busy_eep(), Write_b_eep(0x06,0));
 26225  0052A4  EC9D  F034         	call	_Busy_eep	;wreg free
 26226  0052A8  6A20               	clrf	?_Write_b_eep+1,c
 26227  0052AA  0E06               	movlw	6
 26228  0052AC  6E1F               	movwf	?_Write_b_eep,c
 26229  0052AE  0E00               	movlw	0
 26230  0052B0  6A21               	clrf	?_Write_b_eep+2,c
 26231  0052B2  EC80  F033         	call	_Write_b_eep	;wreg free
 26232                           
 26233                           ;main.c: 578: (Busy_eep(), Write_b_eep(0x09,20u));
 26234  0052B6  EC9D  F034         	call	_Busy_eep	;wreg free
 26235  0052BA  6A20               	clrf	?_Write_b_eep+1,c
 26236  0052BC  0E09               	movlw	9
 26237  0052BE  6E1F               	movwf	?_Write_b_eep,c
 26238  0052C0  0E14               	movlw	20
 26239  0052C2  6E21               	movwf	?_Write_b_eep+2,c
 26240  0052C4  EC80  F033         	call	_Write_b_eep	;wreg free
 26241                           
 26242                           ;main.c: 581: for ( i = 0x20; i < (0x5C + 4); i++ ) {
 26243  0052C8  0E20               	movlw	32
 26244  0052CA  6E23               	movwf	init_app_eeprom@i,c
 26245  0052CC                     l16703:
 26246                           
 26247                           ;main.c: 582: (Busy_eep(), Write_b_eep(0x20,0xFF));
 26248  0052CC  EC9D  F034         	call	_Busy_eep	;wreg free
 26249  0052D0  6A20               	clrf	?_Write_b_eep+1,c
 26250  0052D2  0E20               	movlw	32
 26251  0052D4  6E1F               	movwf	?_Write_b_eep,c
 26252  0052D6  0EFF               	movlw	255
 26253  0052D8  6821               	setf	?_Write_b_eep+2,c
 26254  0052DA  EC80  F033         	call	_Write_b_eep	;wreg free
 26255  0052DE  2A23               	incf	init_app_eeprom@i,f,c
 26256  0052E0  0E5F               	movlw	95
 26257  0052E2  6423               	cpfsgt	init_app_eeprom@i,c
 26258  0052E4  D7F3               	goto	l16703
 26259                           
 26260                           ;main.c: 583: }
 26261                           ;main.c: 586: for (i = 0x60; i < (0x64 + 4); i++) {
 26262  0052E6  0E60               	movlw	96
 26263  0052E8  6E23               	movwf	init_app_eeprom@i,c
 26264  0052EA                     l16717:
 26265                           
 26266                           ;main.c: 587: (Busy_eep(), Write_b_eep(0x60,0x00));
 26267  0052EA  EC9D  F034         	call	_Busy_eep	;wreg free
 26268  0052EE  6A20               	clrf	?_Write_b_eep+1,c
 26269  0052F0  0E60               	movlw	96
 26270  0052F2  6E1F               	movwf	?_Write_b_eep,c
 26271  0052F4  0E00               	movlw	0
 26272  0052F6  6A21               	clrf	?_Write_b_eep+2,c
 26273  0052F8  EC80  F033         	call	_Write_b_eep	;wreg free
 26274  0052FC  2A23               	incf	init_app_eeprom@i,f,c
 26275  0052FE  0E67               	movlw	103
 26276  005300  6423               	cpfsgt	init_app_eeprom@i,c
 26277  005302  D7F3               	goto	l16717
 26278                           
 26279                           ;main.c: 588: }
 26280                           ;main.c: 590: (Busy_eep(), Write_b_eep(0x65,0));
 26281  005304  EC9D  F034         	call	_Busy_eep	;wreg free
 26282  005308  6A20               	clrf	?_Write_b_eep+1,c
 26283  00530A  0E65               	movlw	101
 26284  00530C  6E1F               	movwf	?_Write_b_eep,c
 26285  00530E  0E00               	movlw	0
 26286  005310  6A21               	clrf	?_Write_b_eep+2,c
 26287  005312  EC80  F033         	call	_Write_b_eep	;wreg free
 26288                           
 26289                           ;main.c: 591: (Busy_eep(), Write_b_eep(0x66,0));
 26290  005316  EC9D  F034         	call	_Busy_eep	;wreg free
 26291  00531A  6A20               	clrf	?_Write_b_eep+1,c
 26292  00531C  0E66               	movlw	102
 26293  00531E  6E1F               	movwf	?_Write_b_eep,c
 26294  005320  6A21               	clrf	?_Write_b_eep+2,c
 26295  005322  EF80  F033         	goto	_Write_b_eep	;wreg free
 26296  005326                     __end_of_init_app_eeprom:
 26297                           	opt stack 0
 26298                           tblptru	equ	0xFF8
 26299                           tblptrh	equ	0xFF7
 26300                           tblptrl	equ	0xFF6
 26301                           tablat	equ	0xFF5
 26302                           prodh	equ	0xFF4
 26303                           prodl	equ	0xFF3
 26304                           intcon	equ	0xFF2
 26305                           indf0	equ	0xFEF
 26306                           postinc0	equ	0xFEE
 26307                           fsr0h	equ	0xFEA
 26308                           fsr0l	equ	0xFE9
 26309                           wreg	equ	0xFE8
 26310                           indf1	equ	0xFE7
 26311                           postinc1	equ	0xFE6
 26312                           postdec1	equ	0xFE5
 26313                           fsr1h	equ	0xFE2
 26314                           fsr1l	equ	0xFE1
 26315                           indf2	equ	0xFDF
 26316                           postinc2	equ	0xFDE
 26317                           postdec2	equ	0xFDD
 26318                           plusw2	equ	0xFDB
 26319                           fsr2h	equ	0xFDA
 26320                           fsr2l	equ	0xFD9
 26321                           status	equ	0xFD8
 26322                           
 26323 ;; *************** function _printMode *****************
 26324 ;; Defined at:
 26325 ;;		line 3287 in file "main.c"
 26326 ;; Parameters:    Size  Location     Type
 26327 ;;		None
 26328 ;; Auto vars:     Size  Location     Type
 26329 ;;		None
 26330 ;; Return value:  Size  Location     Type
 26331 ;;		None               void
 26332 ;; Registers used:
 26333 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26334 ;; Tracked objects:
 26335 ;;		On entry : 0/1
 26336 ;;		On exit  : 0/0
 26337 ;;		Unchanged: 0/0
 26338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26339 ;;      Params:         0       0       0       0       0       0       0
 26340 ;;      Locals:         0       0       0       0       0       0       0
 26341 ;;      Temps:          0       0       0       0       0       0       0
 26342 ;;      Totals:         0       0       0       0       0       0       0
 26343 ;;Total ram usage:        0 bytes
 26344 ;; Hardware stack levels used:    1
 26345 ;; Hardware stack levels required when called:    5
 26346 ;; This function calls:
 26347 ;;		_putsUSART
 26348 ;; This function is called by:
 26349 ;;		_main
 26350 ;; This function uses a non-reentrant model
 26351 ;;
 26352                           
 26353                           	psect	text68
 26354  005F92                     __ptext68:
 26355                           	opt stack 0
 26356  005F92                     _printMode:
 26357                           	opt stack 25
 26358                           
 26359                           ;main.c: 3288: putsUSART((char *) "Mode: ");
 26360                           
 26361                           ;incstack = 0
 26362                           ;incstack = 0
 26363  005F92  0E7F               	movlw	high STR_300
 26364  005F94  6E21               	movwf	?_putsUSART+1,c
 26365  005F96  0E11               	movlw	low STR_300
 26366  005F98  6E20               	movwf	?_putsUSART,c
 26367  005F9A  ECB5  F031         	call	_putsUSART	;wreg free
 26368                           
 26369                           ;main.c: 3289: if (0 == mode) {
 26370  005F9E  0101               	movlb	1	; () banked
 26371  005FA0  672B               	tstfsz	_mode& (0+255),b
 26372  005FA2  D007               	goto	l15207
 26373                           
 26374                           ; BSR set to: 1
 26375                           ;main.c: 3290: putsUSART((char *) "Verbose");
 26376  005FA4  0E7F               	movlw	high STR_301
 26377  005FA6  6E21               	movwf	?_putsUSART+1,c
 26378  005FA8  0E09               	movlw	low STR_301
 26379  005FAA  6E20               	movwf	?_putsUSART,c
 26380  005FAC  ECB5  F031         	call	_putsUSART	;wreg free
 26381                           
 26382                           ;main.c: 3291: } else if (1 == mode) {
 26383  005FB0  D023               	goto	l1378
 26384  005FB2                     l15207:
 26385                           
 26386                           ; BSR set to: 1
 26387  005FB2  052B               	decf	_mode& (0+255),w,b
 26388  005FB4  E107               	bnz	l15211
 26389                           
 26390                           ; BSR set to: 1
 26391                           ;main.c: 3292: putsUSART((char *) "VSCP Driver");
 26392  005FB6  0E7E               	movlw	high STR_302
 26393  005FB8  6E21               	movwf	?_putsUSART+1,c
 26394  005FBA  0E33               	movlw	low STR_302
 26395  005FBC  6E20               	movwf	?_putsUSART,c
 26396  005FBE  ECB5  F031         	call	_putsUSART	;wreg free
 26397                           
 26398                           ;main.c: 3293: } else if (2 == mode) {
 26399  005FC2  D01A               	goto	l1378
 26400  005FC4                     l15211:
 26401                           
 26402                           ; BSR set to: 1
 26403  005FC4  512B               	movf	_mode& (0+255),w,b
 26404  005FC6  0A02               	xorlw	2
 26405  005FC8  E107               	bnz	l15215
 26406                           
 26407                           ; BSR set to: 1
 26408                           ;main.c: 3294: putsUSART((char *) "SL Driver");
 26409  005FCA  0E7E               	movlw	high STR_303
 26410  005FCC  6E21               	movwf	?_putsUSART+1,c
 26411  005FCE  0E93               	movlw	low STR_303
 26412  005FD0  6E20               	movwf	?_putsUSART,c
 26413  005FD2  ECB5  F031         	call	_putsUSART	;wreg free
 26414                           
 26415                           ;main.c: 3295: } else if (3 == mode) {
 26416  005FD6  D010               	goto	l1378
 26417  005FD8                     l15215:
 26418                           
 26419                           ; BSR set to: 1
 26420  005FD8  512B               	movf	_mode& (0+255),w,b
 26421  005FDA  0A03               	xorlw	3
 26422  005FDC  E107               	bnz	l15219
 26423                           
 26424                           ; BSR set to: 1
 26425                           ;main.c: 3296: putsUSART((char *) "VSCP Node");
 26426  005FDE  0E7E               	movlw	high STR_304
 26427  005FE0  6E21               	movwf	?_putsUSART+1,c
 26428  005FE2  0E89               	movlw	low STR_304
 26429  005FE4  6E20               	movwf	?_putsUSART,c
 26430  005FE6  ECB5  F031         	call	_putsUSART	;wreg free
 26431                           
 26432                           ;main.c: 3297: } else {
 26433  005FEA  D006               	goto	l1378
 26434  005FEC                     l15219:
 26435                           
 26436                           ; BSR set to: 1
 26437                           ;main.c: 3298: putsUSART((char *) "Unknown (Verbose used)");
 26438  005FEC  0E7C               	movlw	high STR_305
 26439  005FEE  6E21               	movwf	?_putsUSART+1,c
 26440  005FF0  0E39               	movlw	low STR_305
 26441  005FF2  6E20               	movwf	?_putsUSART,c
 26442  005FF4  ECB5  F031         	call	_putsUSART	;wreg free
 26443  005FF8                     l1378:
 26444                           
 26445                           ;main.c: 3299: }
 26446                           ;main.c: 3300: putsUSART((char *) "\r\n");
 26447  005FF8  0E73               	movlw	high (STR_239+51)
 26448  005FFA  6E21               	movwf	?_putsUSART+1,c
 26449  005FFC  0E1A               	movlw	low (STR_239+51)
 26450  005FFE  6E20               	movwf	?_putsUSART,c
 26451  006000  EFB5  F031         	goto	_putsUSART	;wreg free
 26452  006004                     __end_of_printMode:
 26453                           	opt stack 0
 26454                           tblptru	equ	0xFF8
 26455                           tblptrh	equ	0xFF7
 26456                           tblptrl	equ	0xFF6
 26457                           tablat	equ	0xFF5
 26458                           prodh	equ	0xFF4
 26459                           prodl	equ	0xFF3
 26460                           intcon	equ	0xFF2
 26461                           indf0	equ	0xFEF
 26462                           postinc0	equ	0xFEE
 26463                           fsr0h	equ	0xFEA
 26464                           fsr0l	equ	0xFE9
 26465                           wreg	equ	0xFE8
 26466                           indf1	equ	0xFE7
 26467                           postinc1	equ	0xFE6
 26468                           postdec1	equ	0xFE5
 26469                           fsr1h	equ	0xFE2
 26470                           fsr1l	equ	0xFE1
 26471                           indf2	equ	0xFDF
 26472                           postinc2	equ	0xFDE
 26473                           postdec2	equ	0xFDD
 26474                           plusw2	equ	0xFDB
 26475                           fsr2h	equ	0xFDA
 26476                           fsr2l	equ	0xFD9
 26477                           status	equ	0xFD8
 26478                           
 26479 ;; *************** function _putsUSART *****************
 26480 ;; Defined at:
 26481 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 26482 ;; Parameters:    Size  Location     Type
 26483 ;;  data            2   31[COMRAM] PTR unsigned char 
 26484 ;;		 -> STR_306(3), STR_305(23), STR_304(10), STR_303(10), 
 26485 ;;		 -> STR_302(12), STR_301(8), STR_300(7), STR_299(3), 
 26486 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_298(10), STR_297(3), STR_294(20), 
 26487 ;;		 -> STR_293(3), STR_292(14), STR_291(3), STR_287(8), 
 26488 ;;		 -> STR_286(17), STR_285(3), STR_284(67), STR_283(3), 
 26489 ;;		 -> STR_282(27), STR_281(3), STR_280(67), STR_279(52), 
 26490 ;;		 -> STR_278(39), STR_277(62), STR_276(55), STR_275(49), 
 26491 ;;		 -> STR_274(67), STR_273(47), STR_272(47), STR_271(34), 
 26492 ;;		 -> STR_270(71), STR_269(20), STR_268(78), STR_267(24), 
 26493 ;;		 -> STR_266(77), STR_265(74), STR_264(76), STR_263(47), 
 26494 ;;		 -> STR_262(40), STR_261(39), STR_260(33), STR_259(23), 
 26495 ;;		 -> STR_258(56), STR_257(24), STR_256(44), STR_255(50), 
 26496 ;;		 -> STR_254(31), STR_253(50), STR_252(51), STR_251(46), 
 26497 ;;		 -> STR_250(44), STR_249(27), STR_248(39), STR_247(39), 
 26498 ;;		 -> STR_246(57), STR_245(55), STR_244(3), STR_241(24), 
 26499 ;;		 -> STR_240(58), STR_239(54), STR_238(59), STR_237(3), 
 26500 ;;		 -> STR_234(25), STR_233(52), STR_232(3), STR_229(24), 
 26501 ;;		 -> STR_228(3), STR_225(24), STR_224(3), STR_221(24), 
 26502 ;;		 -> STR_220(3), STR_217(23), STR_216(3), STR_213(21), 
 26503 ;;		 -> STR_212(3), STR_209(22), STR_208(3), STR_205(17), 
 26504 ;;		 -> STR_204(3), STR_201(18), STR_200(4), STR_199(11), 
 26505 ;;		 -> STR_198(2), STR_195(7), STR_192(7), STR_189(9), 
 26506 ;;		 -> STR_186(7), STR_183(8), STR_180(12), STR_177(7), 
 26507 ;;		 -> STR_176(2), STR_175(2), STR_174(6), STR_173(8), 
 26508 ;;		 -> STR_172(8), STR_171(20), STR_170(27), STR_169(6), 
 26509 ;;		 -> STR_168(33), STR_164(46), STR_163(22), STR_161(21), 
 26510 ;;		 -> STR_158(41), STR_157(23), STR_155(22), STR_152(26), 
 26511 ;;		 -> STR_150(32), STR_148(28), STR_139(6), STR_137(40), 
 26512 ;;		 -> STR_135(44), STR_132(6), STR_131(39), STR_129(36), 
 26513 ;;		 -> STR_127(37), STR_125(40), STR_123(37), STR_122(50), 
 26514 ;;		 -> STR_119(6), STR_116(41), STR_114(38), STR_112(39), 
 26515 ;;		 -> STR_110(42), STR_108(39), STR_107(66), STR_104(6), 
 26516 ;;		 -> STR_103(27), STR_102(3), STR_99(20), STR_98(52), 
 26517 ;;		 -> STR_94(8), STR_93(36), STR_90(8), STR_89(38), 
 26518 ;;		 -> STR_88(24), STR_86(33), STR_84(24), STR_82(52), 
 26519 ;;		 -> STR_80(54), STR_79(6), STR_78(3), STR_73(25), 
 26520 ;;		 -> STR_70(17), STR_69(3), STR_68(4), STR_67(3), 
 26521 ;;		 -> STR_64(4), STR_59(15), wrkbuf(80), STR_56(14), 
 26522 ;;		 -> STR_54(33), STR_52(24), STR_50(52), STR_48(6), 
 26523 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 26524 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 26525 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 26526 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 26527 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 26528 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 26529 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 26530 ;; Auto vars:     Size  Location     Type
 26531 ;;		None
 26532 ;; Return value:  Size  Location     Type
 26533 ;;		None               void
 26534 ;; Registers used:
 26535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26536 ;; Tracked objects:
 26537 ;;		On entry : 0/1
 26538 ;;		On exit  : 0/0
 26539 ;;		Unchanged: 0/0
 26540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26541 ;;      Params:         2       0       0       0       0       0       0
 26542 ;;      Locals:         0       0       0       0       0       0       0
 26543 ;;      Temps:          2       0       0       0       0       0       0
 26544 ;;      Totals:         4       0       0       0       0       0       0
 26545 ;;Total ram usage:        4 bytes
 26546 ;; Hardware stack levels used:    1
 26547 ;; Hardware stack levels required when called:    4
 26548 ;; This function calls:
 26549 ;;		_WriteUSART
 26550 ;; This function is called by:
 26551 ;;		_main
 26552 ;;		_doModeVerbose
 26553 ;;		_doModeSLCAN
 26554 ;;		_receivePrintEventVerbose
 26555 ;;		_receiveSendEventSLCAN
 26556 ;;		_printStatistics
 26557 ;;		_printErrors
 26558 ;;		_printHelp
 26559 ;;		_findNodes
 26560 ;;		_printGUID
 26561 ;;		_printMDF
 26562 ;;		_printNodeFirmwareVersion
 26563 ;;		_printFirmwareVersion
 26564 ;;		_printMode
 26565 ;; This function uses a non-reentrant model
 26566 ;;
 26567                           
 26568                           	psect	text69
 26569  00636A                     __ptext69:
 26570                           	opt stack 0
 26571  00636A                     _putsUSART:
 26572                           	opt stack 24
 26573  00636A                     l2025:
 26574  00636A  A2AC               	btfss	4012,1,c	;volatile
 26575  00636C  D7FE               	goto	l2025
 26576  00636E  5020               	movf	putsUSART@data,w,c
 26577  006370  6EF6               	movwf	tblptrl,c
 26578  006372  6EE9               	movwf	fsr0l,c
 26579  006374  0E05               	movlw	(high __ramtop+-1)
 26580  006376  6EEA               	movwf	fsr0h,c
 26581  006378  5021               	movf	putsUSART@data+1,w,c
 26582  00637A  64EA               	cpfsgt	fsr0h,c
 26583  00637C  D003               	bra	u19097
 26584  00637E  6EEA               	movwf	fsr0h,c
 26585  006380  50EF               	movf	indf0,w,c
 26586  006382  D003               	bra	u19090
 26587  006384                     u19097:
 26588  006384  6EF7               	movwf	tblptrh,c
 26589  006386  0008               	tblrd		*
 26590  006388  50F5               	movf	tablat,w,c
 26591  00638A                     u19090:
 26592  00638A  EC61  F034         	call	_WriteUSART
 26593  00638E  5020               	movf	putsUSART@data,w,c
 26594  006390  6E22               	movwf	??_putsUSART& (0+255),c
 26595  006392  5021               	movf	putsUSART@data+1,w,c
 26596  006394  6E23               	movwf	(??_putsUSART+1)& (0+255),c
 26597  006396  4A20               	infsnz	putsUSART@data,f,c
 26598  006398  2A21               	incf	putsUSART@data+1,f,c
 26599  00639A  5022               	movf	??_putsUSART,w,c
 26600  00639C  6EF6               	movwf	tblptrl,c
 26601  00639E  6EE9               	movwf	fsr0l,c
 26602  0063A0  0E05               	movlw	(high __ramtop+-1)
 26603  0063A2  6EEA               	movwf	fsr0h,c
 26604  0063A4  5023               	movf	??_putsUSART+1,w,c
 26605  0063A6  64EA               	cpfsgt	fsr0h,c
 26606  0063A8  D003               	bra	u19107
 26607  0063AA  6EEA               	movwf	fsr0h,c
 26608  0063AC  50EF               	movf	indf0,w,c
 26609  0063AE  D003               	bra	u19100
 26610  0063B0                     u19107:
 26611  0063B0  6EF7               	movwf	tblptrh,c
 26612  0063B2  0008               	tblrd		*
 26613  0063B4  50F5               	movf	tablat,w,c
 26614  0063B6                     u19100:
 26615  0063B6  0900               	iorlw	0
 26616  0063B8  B4D8               	btfsc	status,2,c
 26617  0063BA  0012               	return	
 26618  0063BC  D7D6               	goto	l2025
 26619  0063BE                     __end_of_putsUSART:
 26620                           	opt stack 0
 26621                           tblptru	equ	0xFF8
 26622                           tblptrh	equ	0xFF7
 26623                           tblptrl	equ	0xFF6
 26624                           tablat	equ	0xFF5
 26625                           prodh	equ	0xFF4
 26626                           prodl	equ	0xFF3
 26627                           intcon	equ	0xFF2
 26628                           indf0	equ	0xFEF
 26629                           postinc0	equ	0xFEE
 26630                           fsr0h	equ	0xFEA
 26631                           fsr0l	equ	0xFE9
 26632                           wreg	equ	0xFE8
 26633                           indf1	equ	0xFE7
 26634                           postinc1	equ	0xFE6
 26635                           postdec1	equ	0xFE5
 26636                           fsr1h	equ	0xFE2
 26637                           fsr1l	equ	0xFE1
 26638                           indf2	equ	0xFDF
 26639                           postinc2	equ	0xFDE
 26640                           postdec2	equ	0xFDD
 26641                           plusw2	equ	0xFDB
 26642                           fsr2h	equ	0xFDA
 26643                           fsr2l	equ	0xFD9
 26644                           status	equ	0xFD8
 26645                           
 26646 ;; *************** function _WriteUSART *****************
 26647 ;; Defined at:
 26648 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 26649 ;; Parameters:    Size  Location     Type
 26650 ;;  data            1    wreg     unsigned char 
 26651 ;; Auto vars:     Size  Location     Type
 26652 ;;  data            1   30[COMRAM] unsigned char 
 26653 ;; Return value:  Size  Location     Type
 26654 ;;		None               void
 26655 ;; Registers used:
 26656 ;;		wreg
 26657 ;; Tracked objects:
 26658 ;;		On entry : 0/1
 26659 ;;		On exit  : 0/0
 26660 ;;		Unchanged: 0/0
 26661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26662 ;;      Params:         0       0       0       0       0       0       0
 26663 ;;      Locals:         1       0       0       0       0       0       0
 26664 ;;      Temps:          0       0       0       0       0       0       0
 26665 ;;      Totals:         1       0       0       0       0       0       0
 26666 ;;Total ram usage:        1 bytes
 26667 ;; Hardware stack levels used:    1
 26668 ;; Hardware stack levels required when called:    3
 26669 ;; This function calls:
 26670 ;;		Nothing
 26671 ;; This function is called by:
 26672 ;;		_doModeVerbose
 26673 ;;		_sendEscapedUartData
 26674 ;;		_sendVSCPDriverErrorFrame
 26675 ;;		_sendVSCPDriverAck
 26676 ;;		_sendVSCPDriverNack
 26677 ;;		_sendVSCPDriverCommandReply
 26678 ;;		_receiveSendEventCANAL
 26679 ;;		_receiveSendMultiEventCANAL
 26680 ;;		_sendVSCPModeCapabilities
 26681 ;;		_receiveSendEventSLCAN
 26682 ;;		_printBinary
 26683 ;;		_findNodes
 26684 ;;		_printFirmwareVersion
 26685 ;;		_putsUSART
 26686 ;; This function uses a non-reentrant model
 26687 ;;
 26688                           
 26689                           	psect	text70
 26690  0068C2                     __ptext70:
 26691                           	opt stack 0
 26692  0068C2                     _WriteUSART:
 26693                           	opt stack 25
 26694                           
 26695                           ;incstack = 0
 26696                           ;incstack = 0
 26697                           ;WriteUSART@data stored from wreg
 26698  0068C2  CFE8 F01F          	movff	wreg,WriteUSART@data
 26699  0068C6  ACAC               	btfss	4012,6,c	;volatile
 26700  0068C8  D004               	goto	l16863
 26701  0068CA  90AC               	bcf	4012,0,c	;volatile
 26702  0068CC  0101               	movlb	1	; () banked
 26703  0068CE  B326               	btfsc	_USART_Status& (0+255),1,b
 26704                           
 26705                           ; BSR set to: 1
 26706  0068D0  80AC               	bsf	4012,0,c	;volatile
 26707  0068D2                     l16863:
 26708  0068D2  C01F  FFAD         	movff	WriteUSART@data,4013	;volatile
 26709  0068D6  0012               	return	
 26710  0068D8                     __end_of_WriteUSART:
 26711                           	opt stack 0
 26712                           tblptru	equ	0xFF8
 26713                           tblptrh	equ	0xFF7
 26714                           tblptrl	equ	0xFF6
 26715                           tablat	equ	0xFF5
 26716                           prodh	equ	0xFF4
 26717                           prodl	equ	0xFF3
 26718                           intcon	equ	0xFF2
 26719                           indf0	equ	0xFEF
 26720                           postinc0	equ	0xFEE
 26721                           fsr0h	equ	0xFEA
 26722                           fsr0l	equ	0xFE9
 26723                           wreg	equ	0xFE8
 26724                           indf1	equ	0xFE7
 26725                           postinc1	equ	0xFE6
 26726                           postdec1	equ	0xFE5
 26727                           fsr1h	equ	0xFE2
 26728                           fsr1l	equ	0xFE1
 26729                           indf2	equ	0xFDF
 26730                           postinc2	equ	0xFDE
 26731                           postdec2	equ	0xFDD
 26732                           plusw2	equ	0xFDB
 26733                           fsr2h	equ	0xFDA
 26734                           fsr2l	equ	0xFD9
 26735                           status	equ	0xFD8
 26736                           
 26737 ;; *************** function _init *****************
 26738 ;; Defined at:
 26739 ;;		line 442 in file "main.c"
 26740 ;; Parameters:    Size  Location     Type
 26741 ;;		None
 26742 ;; Auto vars:     Size  Location     Type
 26743 ;;		None
 26744 ;; Return value:  Size  Location     Type
 26745 ;;		None               void
 26746 ;; Registers used:
 26747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26748 ;; Tracked objects:
 26749 ;;		On entry : 0/1
 26750 ;;		On exit  : 0/0
 26751 ;;		Unchanged: 0/0
 26752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26753 ;;      Params:         0       0       0       0       0       0       0
 26754 ;;      Locals:         0       0       0       0       0       0       0
 26755 ;;      Temps:          0       0       0       0       0       0       0
 26756 ;;      Totals:         0       0       0       0       0       0       0
 26757 ;;Total ram usage:        0 bytes
 26758 ;; Hardware stack levels used:    1
 26759 ;; Hardware stack levels required when called:    6
 26760 ;; This function calls:
 26761 ;;		_WriteTimer0
 26762 ;;		_init_app_ram
 26763 ;;		_OpenUSART
 26764 ;;		_OpenTimer0
 26765 ;;		_OpenTimer3
 26766 ;;		_WriteTimer3
 26767 ;;		_ECANInitialize
 26768 ;; This function is called by:
 26769 ;;		_main
 26770 ;; This function uses a non-reentrant model
 26771 ;;
 26772                           
 26773                           	psect	text71
 26774  006200                     __ptext71:
 26775                           	opt stack 0
 26776  006200                     _init:
 26777                           	opt stack 24
 26778                           
 26779                           ;main.c: 444: init_app_ram();
 26780                           
 26781                           ;incstack = 0
 26782                           ;incstack = 0
 26783  006200  EC72  F018         	call	_init_app_ram	;wreg free
 26784                           
 26785                           ;main.c: 447: OSCCONbits.IRCF0 = 1;
 26786  006204  88D3               	bsf	4051,4,c	;volatile
 26787                           
 26788                           ;main.c: 448: OSCCONbits.IRCF1 = 1;
 26789  006206  8AD3               	bsf	4051,5,c	;volatile
 26790                           
 26791                           ;main.c: 449: OSCCONbits.IRCF2 = 1;
 26792  006208  8CD3               	bsf	4051,6,c	;volatile
 26793                           
 26794                           ;main.c: 450: OSCTUNEbits.PLLEN = 1;
 26795  00620A  8C9B               	bsf	3995,6,c	;volatile
 26796                           
 26797                           ;main.c: 452: TRISBbits.RB2 = 0;
 26798  00620C  9493               	bcf	3987,2,c	;volatile
 26799                           
 26800                           ;main.c: 453: TRISBbits.RB3 = 1;
 26801  00620E  8693               	bsf	3987,3,c	;volatile
 26802                           
 26803                           ;main.c: 455: TRISCbits.RC1 = 0;
 26804  006210  9294               	bcf	3988,1,c	;volatile
 26805                           
 26806                           ;main.c: 456: TRISCbits.RC4 = 0;
 26807  006212  9894               	bcf	3988,4,c	;volatile
 26808                           
 26809                           ;main.c: 457: TRISCbits.RC5 = 1;
 26810  006214  8A94               	bsf	3988,5,c	;volatile
 26811                           
 26812                           ;main.c: 458: TRISCbits.RC6 = 0;
 26813  006216  9C94               	bcf	3988,6,c	;volatile
 26814                           
 26815                           ;main.c: 459: TRISCbits.RC7 = 1;
 26816  006218  8E94               	bsf	3988,7,c	;volatile
 26817                           
 26818                           ;main.c: 461: PORTCbits.RC4 = 1;
 26819  00621A  8882               	bsf	3970,4,c	;volatile
 26820                           
 26821                           ;main.c: 465: OpenUSART( 0b01111111 &
 26822                           ;main.c: 466: 0b11111111 &
 26823                           ;main.c: 467: 0b11111110 &
 26824                           ;main.c: 468: 0b11111101 &
 26825                           ;main.c: 469: 0b11111111,
 26826                           ;main.c: 470: 21 );
 26827  00621C  6A20               	clrf	?_OpenUSART+1,c
 26828  00621E  0E15               	movlw	21
 26829  006220  6E1F               	movwf	?_OpenUSART,c
 26830  006222  0E7C               	movlw	124
 26831  006224  EC2F  F031         	call	_OpenUSART
 26832                           
 26833                           ;main.c: 472: RCIF = 0;
 26834  006228  9A9E               	bcf	3998,5,c	;volatile
 26835                           
 26836                           ;main.c: 473: RCIP = 0;
 26837  00622A  9A9F               	bcf	3999,5,c	;volatile
 26838                           
 26839                           ;main.c: 474: RCIE = 1;
 26840  00622C  8A9D               	bsf	3997,5,c	;volatile
 26841                           
 26842                           ;main.c: 475: PEIE = 1;
 26843  00622E  8CF2               	bsf	intcon,6,c	;volatile
 26844                           
 26845                           ;main.c: 478: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 26846  006230  0E92               	movlw	146
 26847  006232  EC3B  F034         	call	_OpenTimer0
 26848                           
 26849                           ;main.c: 479: WriteTimer0(0xfb1d);
 26850  006236  0EFB               	movlw	251
 26851  006238  6E20               	movwf	?_WriteTimer0+1,c
 26852  00623A  0E1D               	movlw	29
 26853  00623C  6E1F               	movwf	?_WriteTimer0,c
 26854  00623E  EC87  F034         	call	_WriteTimer0	;wreg free
 26855                           
 26856                           ;main.c: 482: OpenTimer3( 0b11111101 & 0b11001111 & 0b11111111 & 0b11111111 & 0b01111111
      +                           );
 26857  006242  0E4D               	movlw	77
 26858  006244  ECF9  F033         	call	_OpenTimer3
 26859                           
 26860                           ;main.c: 483: WriteTimer3( 0x0000 );
 26861  006248  0E00               	movlw	0
 26862  00624A  6A20               	clrf	?_WriteTimer3+1,c
 26863  00624C  6A1F               	clrf	?_WriteTimer3,c
 26864  00624E  EC75  F034         	call	_WriteTimer3	;wreg free
 26865                           
 26866                           ;main.c: 486: ECANInitialize();
 26867  006252  ECD6  F02E         	call	_ECANInitialize	;wreg free
 26868                           
 26869                           ;main.c: 510: RXBnIE = 1;
 26870  006256  82A3               	bsf	4003,1,c	;volatile
 26871                           
 26872                           ;main.c: 511: ERRIE = 1;
 26873  006258  8AA3               	bsf	4003,5,c	;volatile
 26874                           
 26875                           ;main.c: 513: (INTCONbits.GIE = 1);
 26876  00625A  8EF2               	bsf	intcon,7,c	;volatile
 26877  00625C  0012               	return	
 26878  00625E                     __end_of_init:
 26879                           	opt stack 0
 26880                           tblptru	equ	0xFF8
 26881                           tblptrh	equ	0xFF7
 26882                           tblptrl	equ	0xFF6
 26883                           tablat	equ	0xFF5
 26884                           prodh	equ	0xFF4
 26885                           prodl	equ	0xFF3
 26886                           intcon	equ	0xFF2
 26887                           indf0	equ	0xFEF
 26888                           postinc0	equ	0xFEE
 26889                           fsr0h	equ	0xFEA
 26890                           fsr0l	equ	0xFE9
 26891                           wreg	equ	0xFE8
 26892                           indf1	equ	0xFE7
 26893                           postinc1	equ	0xFE6
 26894                           postdec1	equ	0xFE5
 26895                           fsr1h	equ	0xFE2
 26896                           fsr1l	equ	0xFE1
 26897                           indf2	equ	0xFDF
 26898                           postinc2	equ	0xFDE
 26899                           postdec2	equ	0xFDD
 26900                           plusw2	equ	0xFDB
 26901                           fsr2h	equ	0xFDA
 26902                           fsr2l	equ	0xFD9
 26903                           status	equ	0xFD8
 26904                           
 26905 ;; *************** function _ECANInitialize *****************
 26906 ;; Defined at:
 26907 ;;		line 168 in file "ECAN.c"
 26908 ;; Parameters:    Size  Location     Type
 26909 ;;		None
 26910 ;; Auto vars:     Size  Location     Type
 26911 ;;		None
 26912 ;; Return value:  Size  Location     Type
 26913 ;;		None               void
 26914 ;; Registers used:
 26915 ;;		wreg, status,2, status,0, cstack
 26916 ;; Tracked objects:
 26917 ;;		On entry : 0/1
 26918 ;;		On exit  : 0/0
 26919 ;;		Unchanged: 0/0
 26920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26921 ;;      Params:         0       0       0       0       0       0       0
 26922 ;;      Locals:         0       0       0       0       0       0       0
 26923 ;;      Temps:          0       0       0       0       0       0       0
 26924 ;;      Totals:         0       0       0       0       0       0       0
 26925 ;;Total ram usage:        0 bytes
 26926 ;; Hardware stack levels used:    1
 26927 ;; Hardware stack levels required when called:    4
 26928 ;; This function calls:
 26929 ;;		_ECANSetOperationMode
 26930 ;; This function is called by:
 26931 ;;		_init
 26932 ;; This function uses a non-reentrant model
 26933 ;;
 26934                           
 26935                           	psect	text72
 26936  005DAC                     __ptext72:
 26937                           	opt stack 0
 26938  005DAC                     _ECANInitialize:
 26939                           	opt stack 25
 26940                           
 26941                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 26942                           
 26943                           ;incstack = 0
 26944                           ;incstack = 0
 26945  005DAC  0E80               	movlw	128
 26946  005DAE  EC4A  F034         	call	_ECANSetOperationMode
 26947                           
 26948                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 26949  005DB2  0E09               	movlw	9
 26950  005DB4  6E70               	movwf	3952,c	;volatile
 26951                           
 26952                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 26953  005DB6  0EFC               	movlw	252
 26954  005DB8  6E71               	movwf	3953,c	;volatile
 26955                           
 26956                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 26957                           ;ECAN.c: 181: (0 << 6) |
 26958                           ;ECAN.c: 182: (2-1);
 26959  005DBA  0E01               	movlw	1
 26960  005DBC  6E72               	movwf	3954,c	;volatile
 26961                           
 26962                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 26963  005DBE  0E20               	movlw	32
 26964  005DC0  6E73               	movwf	3955,c	;volatile
 26965                           
 26966                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 26967  005DC2  8E77               	bsf	3959,7,c	;volatile
 26968                           
 26969                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 26970  005DC4  9C77               	bcf	3959,6,c	;volatile
 26971                           
 26972                           ;ECAN.c: 205: RXB0CON = 0;
 26973  005DC6  6A60               	clrf	3936,c	;volatile
 26974                           
 26975                           ;ECAN.c: 211: RXB1CON = 0;
 26976  005DC8  010F               	movlb	15	; () banked
 26977  005DCA  6B50               	clrf	80,b	;volatile
 26978                           
 26979                           ; BSR set to: 15
 26980                           ;ECAN.c: 221: B0CON = 0;
 26981  005DCC  010E               	movlb	14	; () banked
 26982  005DCE  6B20               	clrf	32,b	;volatile
 26983                           
 26984                           ; BSR set to: 14
 26985                           ;ECAN.c: 231: B1CON = 0;
 26986  005DD0  6B30               	clrf	48,b	;volatile
 26987                           
 26988                           ; BSR set to: 14
 26989                           ;ECAN.c: 241: B2CON = 0;
 26990  005DD2  6B40               	clrf	64,b	;volatile
 26991                           
 26992                           ; BSR set to: 14
 26993                           ;ECAN.c: 251: B3CON = 0;
 26994  005DD4  6B50               	clrf	80,b	;volatile
 26995                           
 26996                           ; BSR set to: 14
 26997                           ;ECAN.c: 261: B4CON = 0;
 26998  005DD6  6B60               	clrf	96,b	;volatile
 26999                           
 27000                           ; BSR set to: 14
 27001                           ;ECAN.c: 271: B5CON = 0;
 27002  005DD8  6B70               	clrf	112,b	;volatile
 27003                           
 27004                           ; BSR set to: 14
 27005                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 27006  005DDA  010D               	movlb	13	; () banked
 27007  005DDC  6BF8               	clrf	248,b	;volatile
 27008                           
 27009                           ; BSR set to: 13
 27010                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 27011  005DDE  010F               	movlb	15	; () banked
 27012  005DE0  6B00               	clrf	0,b	;volatile
 27013                           
 27014                           ; BSR set to: 15
 27015  005DE2  0E08               	movlw	8
 27016  005DE4  6F01               	movwf	1,b	;volatile
 27017                           
 27018                           ; BSR set to: 15
 27019  005DE6  6B02               	clrf	2,b	;volatile
 27020                           
 27021                           ; BSR set to: 15
 27022  005DE8  6B03               	clrf	3,b	;volatile
 27023                           
 27024                           ; BSR set to: 15
 27025                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 27026  005DEA  0E01               	movlw	1
 27027  005DEC  010D               	movlb	13	; () banked
 27028  005DEE  6FD4               	movwf	212,b	;volatile
 27029                           
 27030                           ; BSR set to: 13
 27031                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 27032  005DF0  6BD5               	clrf	213,b	;volatile
 27033                           
 27034                           ; BSR set to: 13
 27035                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 27036  005DF2  6BE0               	clrf	224,b	;volatile
 27037                           
 27038                           ; BSR set to: 13
 27039                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 27040  005DF4  0E11               	movlw	17
 27041  005DF6  6FE1               	movwf	225,b	;volatile
 27042                           
 27043                           ; BSR set to: 13
 27044                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 27045  005DF8  6FE2               	movwf	226,b	;volatile
 27046                           
 27047                           ; BSR set to: 13
 27048                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 27049  005DFA  6BE3               	clrf	227,b	;volatile
 27050                           
 27051                           ; BSR set to: 13
 27052                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 27053  005DFC  6BE4               	clrf	228,b	;volatile
 27054                           
 27055                           ; BSR set to: 13
 27056                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 27057  005DFE  6BE5               	clrf	229,b	;volatile
 27058                           
 27059                           ; BSR set to: 13
 27060                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 27061  005E00  6BE6               	clrf	230,b	;volatile
 27062                           
 27063                           ; BSR set to: 13
 27064                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 27065  005E02  6BE7               	clrf	231,b	;volatile
 27066                           
 27067                           ; BSR set to: 13
 27068                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 27069  005E04  0E54               	movlw	84
 27070  005E06  6FF0               	movwf	240,b	;volatile
 27071                           
 27072                           ; BSR set to: 13
 27073                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 27074  005E08  0E05               	movlw	5
 27075  005E0A  6FF1               	movwf	241,b	;volatile
 27076                           
 27077                           ; BSR set to: 13
 27078                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 27079  005E0C  6BF2               	clrf	242,b	;volatile
 27080                           
 27081                           ; BSR set to: 13
 27082                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 27083  005E0E  6BF2               	clrf	242,b	;volatile
 27084                           
 27085                           ; BSR set to: 13
 27086                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 27087  005E10  010F               	movlb	15	; () banked
 27088  005E12  6B18               	clrf	24,b	;volatile
 27089                           
 27090                           ; BSR set to: 15
 27091  005E14  6B19               	clrf	25,b	;volatile
 27092                           
 27093                           ; BSR set to: 15
 27094  005E16  6B1A               	clrf	26,b	;volatile
 27095                           
 27096                           ; BSR set to: 15
 27097  005E18  6B1B               	clrf	27,b	;volatile
 27098                           
 27099                           ; BSR set to: 15
 27100                           ;ECAN.c: 482: RXM0EXIDM = 1;
 27101  005E1A  8719               	bsf	25,3,b	;volatile
 27102                           
 27103                           ; BSR set to: 15
 27104                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 27105  005E1C  6B1C               	clrf	28,b	;volatile
 27106                           
 27107                           ; BSR set to: 15
 27108  005E1E  6B1D               	clrf	29,b	;volatile
 27109                           
 27110                           ; BSR set to: 15
 27111  005E20  6B1E               	clrf	30,b	;volatile
 27112                           
 27113                           ; BSR set to: 15
 27114  005E22  6B1F               	clrf	31,b	;volatile
 27115                           
 27116                           ; BSR set to: 15
 27117                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 27118  005E24  871D               	bsf	29,3,b	;volatile
 27119                           
 27120                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 27121  005E26  0E20               	movlw	32
 27122  005E28  EF4A  F034         	goto	_ECANSetOperationMode
 27123  005E2C                     __end_of_ECANInitialize:
 27124                           	opt stack 0
 27125                           tblptru	equ	0xFF8
 27126                           tblptrh	equ	0xFF7
 27127                           tblptrl	equ	0xFF6
 27128                           tablat	equ	0xFF5
 27129                           prodh	equ	0xFF4
 27130                           prodl	equ	0xFF3
 27131                           intcon	equ	0xFF2
 27132                           indf0	equ	0xFEF
 27133                           postinc0	equ	0xFEE
 27134                           fsr0h	equ	0xFEA
 27135                           fsr0l	equ	0xFE9
 27136                           wreg	equ	0xFE8
 27137                           indf1	equ	0xFE7
 27138                           postinc1	equ	0xFE6
 27139                           postdec1	equ	0xFE5
 27140                           fsr1h	equ	0xFE2
 27141                           fsr1l	equ	0xFE1
 27142                           indf2	equ	0xFDF
 27143                           postinc2	equ	0xFDE
 27144                           postdec2	equ	0xFDD
 27145                           plusw2	equ	0xFDB
 27146                           fsr2h	equ	0xFDA
 27147                           fsr2l	equ	0xFD9
 27148                           status	equ	0xFD8
 27149                           
 27150 ;; *************** function _WriteTimer3 *****************
 27151 ;; Defined at:
 27152 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3write.c"
 27153 ;; Parameters:    Size  Location     Type
 27154 ;;  timer3          2   30[COMRAM] unsigned int 
 27155 ;; Auto vars:     Size  Location     Type
 27156 ;;  timer           2   32[COMRAM] struct Timers
 27157 ;; Return value:  Size  Location     Type
 27158 ;;		None               void
 27159 ;; Registers used:
 27160 ;;		None
 27161 ;; Tracked objects:
 27162 ;;		On entry : 0/1
 27163 ;;		On exit  : 0/0
 27164 ;;		Unchanged: 0/0
 27165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27166 ;;      Params:         2       0       0       0       0       0       0
 27167 ;;      Locals:         2       0       0       0       0       0       0
 27168 ;;      Temps:          0       0       0       0       0       0       0
 27169 ;;      Totals:         4       0       0       0       0       0       0
 27170 ;;Total ram usage:        4 bytes
 27171 ;; Hardware stack levels used:    1
 27172 ;; Hardware stack levels required when called:    3
 27173 ;; This function calls:
 27174 ;;		Nothing
 27175 ;; This function is called by:
 27176 ;;		_init
 27177 ;; This function uses a non-reentrant model
 27178 ;;
 27179                           
 27180                           	psect	text73
 27181  0068EA                     __ptext73:
 27182                           	opt stack 0
 27183  0068EA                     _WriteTimer3:
 27184                           	opt stack 26
 27185                           
 27186                           ;incstack = 0
 27187                           ;incstack = 0
 27188  0068EA  C01F  F021         	movff	WriteTimer3@timer3,WriteTimer3@timer
 27189  0068EE  C020  F022         	movff	WriteTimer3@timer3+1,WriteTimer3@timer+1
 27190  0068F2  C022  FFB3         	movff	WriteTimer3@timer+1,4019	;volatile
 27191  0068F6  C021  FFB2         	movff	WriteTimer3@timer,4018	;volatile
 27192  0068FA  0012               	return	
 27193  0068FC                     __end_of_WriteTimer3:
 27194                           	opt stack 0
 27195                           tblptru	equ	0xFF8
 27196                           tblptrh	equ	0xFF7
 27197                           tblptrl	equ	0xFF6
 27198                           tablat	equ	0xFF5
 27199                           prodh	equ	0xFF4
 27200                           prodl	equ	0xFF3
 27201                           intcon	equ	0xFF2
 27202                           indf0	equ	0xFEF
 27203                           postinc0	equ	0xFEE
 27204                           fsr0h	equ	0xFEA
 27205                           fsr0l	equ	0xFE9
 27206                           wreg	equ	0xFE8
 27207                           indf1	equ	0xFE7
 27208                           postinc1	equ	0xFE6
 27209                           postdec1	equ	0xFE5
 27210                           fsr1h	equ	0xFE2
 27211                           fsr1l	equ	0xFE1
 27212                           indf2	equ	0xFDF
 27213                           postinc2	equ	0xFDE
 27214                           postdec2	equ	0xFDD
 27215                           plusw2	equ	0xFDB
 27216                           fsr2h	equ	0xFDA
 27217                           fsr2l	equ	0xFD9
 27218                           status	equ	0xFD8
 27219                           
 27220 ;; *************** function _OpenTimer3 *****************
 27221 ;; Defined at:
 27222 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t3open.c"
 27223 ;; Parameters:    Size  Location     Type
 27224 ;;  config          1    wreg     unsigned char 
 27225 ;; Auto vars:     Size  Location     Type
 27226 ;;  config          1   30[COMRAM] unsigned char 
 27227 ;; Return value:  Size  Location     Type
 27228 ;;		None               void
 27229 ;; Registers used:
 27230 ;;		wreg, status,2, status,0
 27231 ;; Tracked objects:
 27232 ;;		On entry : 0/1
 27233 ;;		On exit  : 0/0
 27234 ;;		Unchanged: 0/0
 27235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27236 ;;      Params:         0       0       0       0       0       0       0
 27237 ;;      Locals:         1       0       0       0       0       0       0
 27238 ;;      Temps:          0       0       0       0       0       0       0
 27239 ;;      Totals:         1       0       0       0       0       0       0
 27240 ;;Total ram usage:        1 bytes
 27241 ;; Hardware stack levels used:    1
 27242 ;; Hardware stack levels required when called:    3
 27243 ;; This function calls:
 27244 ;;		Nothing
 27245 ;; This function is called by:
 27246 ;;		_init
 27247 ;; This function uses a non-reentrant model
 27248 ;;
 27249                           
 27250                           	psect	text74
 27251  0067F2                     __ptext74:
 27252                           	opt stack 0
 27253  0067F2                     _OpenTimer3:
 27254                           	opt stack 26
 27255                           
 27256                           ;incstack = 0
 27257                           ;incstack = 0
 27258                           ;OpenTimer3@config stored from wreg
 27259  0067F2  CFE8 F01F          	movff	wreg,OpenTimer3@config
 27260  0067F6  501F               	movf	OpenTimer3@config,w,c
 27261  0067F8  0B36               	andlw	54
 27262  0067FA  6EB1               	movwf	4017,c	;volatile
 27263  0067FC  6AB3               	clrf	4019,c	;volatile
 27264  0067FE  6AB2               	clrf	4018,c	;volatile
 27265  006800  92A1               	bcf	4001,1,c	;volatile
 27266  006802  AE1F               	btfss	OpenTimer3@config,7,c
 27267  006804  D002               	goto	l1966
 27268  006806  82A0               	bsf	4000,1,c	;volatile
 27269  006808  D001               	goto	l1967
 27270  00680A                     l1966:
 27271  00680A  92A0               	bcf	4000,1,c	;volatile
 27272  00680C                     l1967:
 27273  00680C  A01F               	btfss	OpenTimer3@config,0,c
 27274  00680E  D002               	goto	l1968
 27275  006810  8EB1               	bsf	4017,7,c	;volatile
 27276  006812  D001               	goto	l1969
 27277  006814                     l1968:
 27278  006814  9EB1               	bcf	4017,7,c	;volatile
 27279  006816                     l1969:
 27280  006816  80B1               	bsf	4017,0,c	;volatile
 27281  006818  0012               	return	
 27282  00681A                     __end_of_OpenTimer3:
 27283                           	opt stack 0
 27284                           tblptru	equ	0xFF8
 27285                           tblptrh	equ	0xFF7
 27286                           tblptrl	equ	0xFF6
 27287                           tablat	equ	0xFF5
 27288                           prodh	equ	0xFF4
 27289                           prodl	equ	0xFF3
 27290                           intcon	equ	0xFF2
 27291                           indf0	equ	0xFEF
 27292                           postinc0	equ	0xFEE
 27293                           fsr0h	equ	0xFEA
 27294                           fsr0l	equ	0xFE9
 27295                           wreg	equ	0xFE8
 27296                           indf1	equ	0xFE7
 27297                           postinc1	equ	0xFE6
 27298                           postdec1	equ	0xFE5
 27299                           fsr1h	equ	0xFE2
 27300                           fsr1l	equ	0xFE1
 27301                           indf2	equ	0xFDF
 27302                           postinc2	equ	0xFDE
 27303                           postdec2	equ	0xFDD
 27304                           plusw2	equ	0xFDB
 27305                           fsr2h	equ	0xFDA
 27306                           fsr2l	equ	0xFD9
 27307                           status	equ	0xFD8
 27308                           
 27309 ;; *************** function _OpenTimer0 *****************
 27310 ;; Defined at:
 27311 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 27312 ;; Parameters:    Size  Location     Type
 27313 ;;  config          1    wreg     unsigned char 
 27314 ;; Auto vars:     Size  Location     Type
 27315 ;;  config          1   30[COMRAM] unsigned char 
 27316 ;; Return value:  Size  Location     Type
 27317 ;;		None               void
 27318 ;; Registers used:
 27319 ;;		wreg, status,2, status,0
 27320 ;; Tracked objects:
 27321 ;;		On entry : 0/1
 27322 ;;		On exit  : 0/0
 27323 ;;		Unchanged: 0/0
 27324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27325 ;;      Params:         0       0       0       0       0       0       0
 27326 ;;      Locals:         1       0       0       0       0       0       0
 27327 ;;      Temps:          0       0       0       0       0       0       0
 27328 ;;      Totals:         1       0       0       0       0       0       0
 27329 ;;Total ram usage:        1 bytes
 27330 ;; Hardware stack levels used:    1
 27331 ;; Hardware stack levels required when called:    3
 27332 ;; This function calls:
 27333 ;;		Nothing
 27334 ;; This function is called by:
 27335 ;;		_init
 27336 ;; This function uses a non-reentrant model
 27337 ;;
 27338                           
 27339                           	psect	text75
 27340  006876                     __ptext75:
 27341                           	opt stack 0
 27342  006876                     _OpenTimer0:
 27343                           	opt stack 26
 27344                           
 27345                           ;incstack = 0
 27346                           ;incstack = 0
 27347                           ;OpenTimer0@config stored from wreg
 27348  006876  CFE8 F01F          	movff	wreg,OpenTimer0@config
 27349  00687A  501F               	movf	OpenTimer0@config,w,c
 27350  00687C  0B7F               	andlw	127
 27351  00687E  6ED5               	movwf	4053,c	;volatile
 27352  006880  6AD7               	clrf	4055,c	;volatile
 27353  006882  6AD6               	clrf	4054,c	;volatile
 27354  006884  94F2               	bcf	intcon,2,c	;volatile
 27355  006886  AE1F               	btfss	OpenTimer0@config,7,c
 27356  006888  D002               	goto	l1942
 27357  00688A  8AF2               	bsf	intcon,5,c	;volatile
 27358  00688C  D001               	goto	l1943
 27359  00688E                     l1942:
 27360  00688E  9AF2               	bcf	intcon,5,c	;volatile
 27361  006890                     l1943:
 27362  006890  8ED5               	bsf	4053,7,c	;volatile
 27363  006892  0012               	return	
 27364  006894                     __end_of_OpenTimer0:
 27365                           	opt stack 0
 27366                           tblptru	equ	0xFF8
 27367                           tblptrh	equ	0xFF7
 27368                           tblptrl	equ	0xFF6
 27369                           tablat	equ	0xFF5
 27370                           prodh	equ	0xFF4
 27371                           prodl	equ	0xFF3
 27372                           intcon	equ	0xFF2
 27373                           indf0	equ	0xFEF
 27374                           postinc0	equ	0xFEE
 27375                           fsr0h	equ	0xFEA
 27376                           fsr0l	equ	0xFE9
 27377                           wreg	equ	0xFE8
 27378                           indf1	equ	0xFE7
 27379                           postinc1	equ	0xFE6
 27380                           postdec1	equ	0xFE5
 27381                           fsr1h	equ	0xFE2
 27382                           fsr1l	equ	0xFE1
 27383                           indf2	equ	0xFDF
 27384                           postinc2	equ	0xFDE
 27385                           postdec2	equ	0xFDD
 27386                           plusw2	equ	0xFDB
 27387                           fsr2h	equ	0xFDA
 27388                           fsr2l	equ	0xFD9
 27389                           status	equ	0xFD8
 27390                           
 27391 ;; *************** function _OpenUSART *****************
 27392 ;; Defined at:
 27393 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 27394 ;; Parameters:    Size  Location     Type
 27395 ;;  config          1    wreg     unsigned char 
 27396 ;;  spbrg           2   30[COMRAM] unsigned int 
 27397 ;; Auto vars:     Size  Location     Type
 27398 ;;  config          1   32[COMRAM] unsigned char 
 27399 ;; Return value:  Size  Location     Type
 27400 ;;		None               void
 27401 ;; Registers used:
 27402 ;;		wreg, status,2
 27403 ;; Tracked objects:
 27404 ;;		On entry : 0/0
 27405 ;;		On exit  : 0/0
 27406 ;;		Unchanged: 0/0
 27407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27408 ;;      Params:         2       0       0       0       0       0       0
 27409 ;;      Locals:         1       0       0       0       0       0       0
 27410 ;;      Temps:          0       0       0       0       0       0       0
 27411 ;;      Totals:         3       0       0       0       0       0       0
 27412 ;;Total ram usage:        3 bytes
 27413 ;; Hardware stack levels used:    1
 27414 ;; Hardware stack levels required when called:    3
 27415 ;; This function calls:
 27416 ;;		Nothing
 27417 ;; This function is called by:
 27418 ;;		_init
 27419 ;;		_doModeVerbose
 27420 ;; This function uses a non-reentrant model
 27421 ;;
 27422                           
 27423                           	psect	text76
 27424  00625E                     __ptext76:
 27425                           	opt stack 0
 27426  00625E                     _OpenUSART:
 27427                           	opt stack 26
 27428                           
 27429                           ;incstack = 0
 27430                           ;incstack = 0
 27431                           ;OpenUSART@config stored from wreg
 27432  00625E  CFE8 F021          	movff	wreg,OpenUSART@config
 27433  006262  6AAC               	clrf	4012,c	;volatile
 27434  006264  6AAB               	clrf	4011,c	;volatile
 27435  006266  B021               	btfsc	OpenUSART@config,0,c
 27436  006268  88AC               	bsf	4012,4,c	;volatile
 27437  00626A  A221               	btfss	OpenUSART@config,1,c
 27438  00626C  D002               	goto	l12785
 27439  00626E  8CAC               	bsf	4012,6,c	;volatile
 27440  006270  8CAB               	bsf	4011,6,c	;volatile
 27441  006272                     l12785:
 27442  006272  B421               	btfsc	OpenUSART@config,2,c
 27443  006274  8EAC               	bsf	4012,7,c	;volatile
 27444  006276  A621               	btfss	OpenUSART@config,3,c
 27445  006278  D002               	goto	l2008
 27446  00627A  88AB               	bsf	4011,4,c	;volatile
 27447  00627C  D001               	goto	l12793
 27448  00627E                     l2008:
 27449  00627E  8AAB               	bsf	4011,5,c	;volatile
 27450  006280                     l12793:
 27451  006280  B821               	btfsc	OpenUSART@config,4,c
 27452  006282  84AC               	bsf	4012,2,c	;volatile
 27453  006284  989E               	bcf	3998,4,c	;volatile
 27454  006286  BA21               	btfsc	OpenUSART@config,5,c
 27455  006288  86AB               	bsf	4011,3,c	;volatile
 27456  00628A  AC21               	btfss	OpenUSART@config,6,c
 27457  00628C  D002               	goto	l2012
 27458  00628E  8A9D               	bsf	3997,5,c	;volatile
 27459  006290  D001               	goto	l2013
 27460  006292                     l2012:
 27461  006292  9A9D               	bcf	3997,5,c	;volatile
 27462  006294                     l2013:
 27463  006294  9A9E               	bcf	3998,5,c	;volatile
 27464  006296  AE21               	btfss	OpenUSART@config,7,c
 27465  006298  D002               	goto	l2014
 27466  00629A  889D               	bsf	3997,4,c	;volatile
 27467  00629C  D001               	goto	l2015
 27468  00629E                     l2014:
 27469  00629E  989D               	bcf	3997,4,c	;volatile
 27470  0062A0                     l2015:
 27471  0062A0  C01F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 27472  0062A4  5020               	movf	OpenUSART@spbrg+1,w,c
 27473  0062A6  6EB0               	movwf	4016,c	;volatile
 27474  0062A8  8AAC               	bsf	4012,5,c	;volatile
 27475  0062AA  8EAB               	bsf	4011,7,c	;volatile
 27476  0062AC  9C94               	bcf	3988,6,c	;volatile
 27477  0062AE  8E94               	bsf	3988,7,c	;volatile
 27478  0062B0  B8AC               	btfsc	4012,4,c	;volatile
 27479  0062B2  BEAC               	btfsc	4012,7,c	;volatile
 27480  0062B4  D001               	goto	l2017
 27481  0062B6  8C94               	bsf	3988,6,c	;volatile
 27482  0062B8                     l2017:
 27483  0062B8  0012               	return	
 27484  0062BA                     __end_of_OpenUSART:
 27485                           	opt stack 0
 27486                           tblptru	equ	0xFF8
 27487                           tblptrh	equ	0xFF7
 27488                           tblptrl	equ	0xFF6
 27489                           tablat	equ	0xFF5
 27490                           prodh	equ	0xFF4
 27491                           prodl	equ	0xFF3
 27492                           intcon	equ	0xFF2
 27493                           indf0	equ	0xFEF
 27494                           postinc0	equ	0xFEE
 27495                           fsr0h	equ	0xFEA
 27496                           fsr0l	equ	0xFE9
 27497                           wreg	equ	0xFE8
 27498                           indf1	equ	0xFE7
 27499                           postinc1	equ	0xFE6
 27500                           postdec1	equ	0xFE5
 27501                           fsr1h	equ	0xFE2
 27502                           fsr1l	equ	0xFE1
 27503                           indf2	equ	0xFDF
 27504                           postinc2	equ	0xFDE
 27505                           postdec2	equ	0xFDD
 27506                           plusw2	equ	0xFDB
 27507                           fsr2h	equ	0xFDA
 27508                           fsr2l	equ	0xFD9
 27509                           status	equ	0xFD8
 27510                           
 27511 ;; *************** function _init_app_ram *****************
 27512 ;; Defined at:
 27513 ;;		line 522 in file "main.c"
 27514 ;; Parameters:    Size  Location     Type
 27515 ;;		None
 27516 ;; Auto vars:     Size  Location     Type
 27517 ;;  i               1   41[BANK0 ] unsigned char 
 27518 ;; Return value:  Size  Location     Type
 27519 ;;		None               void
 27520 ;; Registers used:
 27521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27522 ;; Tracked objects:
 27523 ;;		On entry : 0/1
 27524 ;;		On exit  : 0/0
 27525 ;;		Unchanged: 0/0
 27526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27527 ;;      Params:         0       0       0       0       0       0       0
 27528 ;;      Locals:         0       1       0       0       0       0       0
 27529 ;;      Temps:          0      25       0       0       0       0       0
 27530 ;;      Totals:         0      26       0       0       0       0       0
 27531 ;;Total ram usage:       26 bytes
 27532 ;; Hardware stack levels used:    1
 27533 ;; Hardware stack levels required when called:    5
 27534 ;; This function calls:
 27535 ;;		_Read_b_eep
 27536 ;;		_ECANSetOperationMode
 27537 ;;		_setFilter
 27538 ;;		__CANIDToRegs
 27539 ;; This function is called by:
 27540 ;;		_init
 27541 ;;		_vscp_restoreDefaults
 27542 ;; This function uses a non-reentrant model
 27543 ;;
 27544                           
 27545                           	psect	text77
 27546  0030E4                     __ptext77:
 27547                           	opt stack 0
 27548  0030E4                     _init_app_ram:
 27549                           	opt stack 23
 27550                           
 27551                           ;main.c: 524: can_receiveOverruns = 0;
 27552                           
 27553                           ;incstack = 0
 27554                           ;incstack = 0
 27555  0030E4  0101               	movlb	1	; () banked
 27556  0030E6  6B00               	clrf	_can_receiveOverruns& (0+255),b
 27557  0030E8  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 27558  0030EA  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 27559  0030EC  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 27560                           
 27561                           ;main.c: 525: can_transmitOverruns = 0;
 27562  0030EE  6B04               	clrf	_can_transmitOverruns& (0+255),b
 27563  0030F0  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 27564  0030F2  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 27565  0030F4  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 27566                           
 27567                           ;main.c: 526: uart_receiveOverruns = 0;
 27568  0030F6  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 27569  0030F8  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 27570  0030FA  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 27571  0030FC  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 27572                           
 27573                           ;main.c: 527: uart_transmitOverruns = 0;
 27574  0030FE  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 27575  003100  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 27576  003102  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 27577  003104  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 27578                           
 27579                           ;main.c: 528: timer = 0;
 27580  003106  6A24               	clrf	_timer,c	;volatile
 27581  003108  6A25               	clrf	_timer+1,c	;volatile
 27582  00310A  6A26               	clrf	_timer+2,c	;volatile
 27583  00310C  6A27               	clrf	_timer+3,c	;volatile
 27584                           
 27585                           ; BSR set to: 1
 27586                           ;main.c: 530: bHex = Read_b_eep(0x06);
 27587  00310E  6A20               	clrf	?_Read_b_eep+1,c
 27588  003110  0E06               	movlw	6
 27589  003112  6E1F               	movwf	?_Read_b_eep,c
 27590  003114  EC7E  F034         	call	_Read_b_eep	;wreg free
 27591  003118  6E2C               	movwf	_bHex,c
 27592                           
 27593                           ;main.c: 531: mode = Read_b_eep(0x03);
 27594  00311A  6A20               	clrf	?_Read_b_eep+1,c
 27595  00311C  0E03               	movlw	3
 27596  00311E  6E1F               	movwf	?_Read_b_eep,c
 27597  003120  EC7E  F034         	call	_Read_b_eep	;wreg free
 27598  003124  0101               	movlb	1	; () banked
 27599  003126  6F2B               	movwf	_mode& (0+255),b
 27600                           
 27601                           ;main.c: 532: bLocalEcho = Read_b_eep(0x65);
 27602  003128  6A20               	clrf	?_Read_b_eep+1,c
 27603  00312A  0E65               	movlw	101
 27604  00312C  6E1F               	movwf	?_Read_b_eep,c
 27605  00312E  EC7E  F034         	call	_Read_b_eep	;wreg free
 27606  003132  0101               	movlb	1	; () banked
 27607  003134  6F2A               	movwf	_bLocalEcho& (0+255),b
 27608                           
 27609                           ;main.c: 533: bTimestamp = Read_b_eep(0x66);
 27610  003136  6A20               	clrf	?_Read_b_eep+1,c
 27611  003138  0E66               	movlw	102
 27612  00313A  6E1F               	movwf	?_Read_b_eep,c
 27613  00313C  EC7E  F034         	call	_Read_b_eep	;wreg free
 27614  003140  6E2F               	movwf	_bTimestamp,c
 27615                           
 27616                           ;main.c: 535: rwtimeout = Read_b_eep(0x09);
 27617  003142  6A20               	clrf	?_Read_b_eep+1,c
 27618  003144  0E09               	movlw	9
 27619  003146  6E1F               	movwf	?_Read_b_eep,c
 27620  003148  EC7E  F034         	call	_Read_b_eep	;wreg free
 27621  00314C  6E33               	movwf	_rwtimeout,c
 27622                           
 27623                           ;main.c: 540: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 27624  00314E  0E80               	movlw	128
 27625  003150  EC4A  F034         	call	_ECANSetOperationMode
 27626                           
 27627                           ;main.c: 542: for (uint8_t i=0; i<15; i++ ) {
 27628  003154  0100               	movlb	0	; () banked
 27629  003156  6B89               	clrf	init_app_ram@i& (0+255),b
 27630  003158                     l16531:
 27631                           
 27632                           ; BSR set to: 0
 27633                           ;main.c: 543: setFilter( i,
 27634                           ;main.c: 544: ((uint32_t)( Read_b_eep(0x20 + i*4)) << 24 ) +
 27635                           ;main.c: 545: ((uint32_t)( Read_b_eep(0x20 + 1 + i*4)) << 16 ) +
 27636                           ;main.c: 546: ((uint32_t)( Read_b_eep(0x20 + 2 + i*4)) << 8 ) +
 27637                           ;main.c: 547: ((uint32_t)( Read_b_eep(0x20 + 3 + i*4)) ), 0 );
 27638  003158  5189               	movf	init_app_ram@i& (0+255),w,b
 27639  00315A  6F70               	movwf	??_init_app_ram& (0+255),b
 27640  00315C  6B71               	clrf	(??_init_app_ram+1)& (0+255),b
 27641  00315E  90D8               	bcf	status,0,c
 27642  003160  3770               	rlcf	??_init_app_ram& (0+255),f,b
 27643  003162  3771               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27644  003164  90D8               	bcf	status,0,c
 27645  003166  3770               	rlcf	??_init_app_ram& (0+255),f,b
 27646  003168  3771               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27647  00316A  0E22               	movlw	34
 27648  00316C  2570               	addwf	??_init_app_ram& (0+255),w,b
 27649  00316E  6E1F               	movwf	?_Read_b_eep,c
 27650  003170  0E00               	movlw	0
 27651  003172  2171               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 27652  003174  6E20               	movwf	?_Read_b_eep+1,c
 27653  003176  EC7E  F034         	call	_Read_b_eep	;wreg free
 27654  00317A  0100               	movlb	0	; () banked
 27655  00317C  6F72               	movwf	(??_init_app_ram+2)& (0+255),b
 27656  00317E  C072  F073         	movff	??_init_app_ram+2,??_init_app_ram+3
 27657  003182  6B74               	clrf	(??_init_app_ram+4)& (0+255),b
 27658  003184  6B75               	clrf	(??_init_app_ram+5)& (0+255),b
 27659  003186  6B76               	clrf	(??_init_app_ram+6)& (0+255),b
 27660  003188  C075  F076         	movff	??_init_app_ram+5,??_init_app_ram+6
 27661  00318C  C074  F075         	movff	??_init_app_ram+4,??_init_app_ram+5
 27662  003190  C073  F074         	movff	??_init_app_ram+3,??_init_app_ram+4
 27663  003194  6B73               	clrf	(??_init_app_ram+3)& (0+255),b
 27664  003196  5189               	movf	init_app_ram@i& (0+255),w,b
 27665  003198  0D04               	mullw	4
 27666  00319A  0E21               	movlw	33
 27667  00319C  24F3               	addwf	prodl,w,c
 27668  00319E  6E1F               	movwf	?_Read_b_eep,c
 27669  0031A0  0E00               	movlw	0
 27670  0031A2  20F4               	addwfc	prodh,w,c
 27671  0031A4  6E20               	movwf	?_Read_b_eep+1,c
 27672  0031A6  EC7E  F034         	call	_Read_b_eep	;wreg free
 27673  0031AA  0100               	movlb	0	; () banked
 27674  0031AC  6F77               	movwf	(??_init_app_ram+7)& (0+255),b
 27675  0031AE  C077  F078         	movff	??_init_app_ram+7,??_init_app_ram+8
 27676  0031B2  6B79               	clrf	(??_init_app_ram+9)& (0+255),b
 27677  0031B4  6B7A               	clrf	(??_init_app_ram+10)& (0+255),b
 27678  0031B6  6B7B               	clrf	(??_init_app_ram+11)& (0+255),b
 27679  0031B8  C079  F07B         	movff	??_init_app_ram+9,??_init_app_ram+11
 27680  0031BC  C078  F07A         	movff	??_init_app_ram+8,??_init_app_ram+10
 27681  0031C0  6B79               	clrf	(??_init_app_ram+9)& (0+255),b
 27682  0031C2  6B78               	clrf	(??_init_app_ram+8)& (0+255),b
 27683  0031C4  5189               	movf	init_app_ram@i& (0+255),w,b
 27684  0031C6  0D04               	mullw	4
 27685  0031C8  0E20               	movlw	32
 27686  0031CA  24F3               	addwf	prodl,w,c
 27687  0031CC  6E1F               	movwf	?_Read_b_eep,c
 27688  0031CE  0E00               	movlw	0
 27689  0031D0  20F4               	addwfc	prodh,w,c
 27690  0031D2  6E20               	movwf	?_Read_b_eep+1,c
 27691  0031D4  EC7E  F034         	call	_Read_b_eep	;wreg free
 27692  0031D8  0100               	movlb	0	; () banked
 27693  0031DA  6F7C               	movwf	(??_init_app_ram+12)& (0+255),b
 27694  0031DC  C07C  F07D         	movff	??_init_app_ram+12,??_init_app_ram+13
 27695  0031E0  6B7E               	clrf	(??_init_app_ram+14)& (0+255),b
 27696  0031E2  6B7F               	clrf	(??_init_app_ram+15)& (0+255),b
 27697  0031E4  6B80               	clrf	(??_init_app_ram+16)& (0+255),b
 27698  0031E6  C07D  F080         	movff	??_init_app_ram+13,??_init_app_ram+16
 27699  0031EA  6B7F               	clrf	(??_init_app_ram+15)& (0+255),b
 27700  0031EC  6B7E               	clrf	(??_init_app_ram+14)& (0+255),b
 27701  0031EE  6B7D               	clrf	(??_init_app_ram+13)& (0+255),b
 27702  0031F0  5178               	movf	(??_init_app_ram+8)& (0+255),w,b
 27703  0031F2  257D               	addwf	(??_init_app_ram+13)& (0+255),w,b
 27704  0031F4  6F81               	movwf	(??_init_app_ram+17)& (0+255),b
 27705  0031F6  5179               	movf	(??_init_app_ram+9)& (0+255),w,b
 27706  0031F8  217E               	addwfc	(??_init_app_ram+14)& (0+255),w,b
 27707  0031FA  6F82               	movwf	(??_init_app_ram+18)& (0+255),b
 27708  0031FC  517A               	movf	(??_init_app_ram+10)& (0+255),w,b
 27709  0031FE  217F               	addwfc	(??_init_app_ram+15)& (0+255),w,b
 27710  003200  6F83               	movwf	(??_init_app_ram+19)& (0+255),b
 27711  003202  517B               	movf	(??_init_app_ram+11)& (0+255),w,b
 27712  003204  2180               	addwfc	(??_init_app_ram+16)& (0+255),w,b
 27713  003206  6F84               	movwf	(??_init_app_ram+20)& (0+255),b
 27714  003208  5173               	movf	(??_init_app_ram+3)& (0+255),w,b
 27715  00320A  2581               	addwf	(??_init_app_ram+17)& (0+255),w,b
 27716  00320C  6F85               	movwf	(??_init_app_ram+21)& (0+255),b
 27717  00320E  5174               	movf	(??_init_app_ram+4)& (0+255),w,b
 27718  003210  2182               	addwfc	(??_init_app_ram+18)& (0+255),w,b
 27719  003212  6F86               	movwf	(??_init_app_ram+22)& (0+255),b
 27720  003214  5175               	movf	(??_init_app_ram+5)& (0+255),w,b
 27721  003216  2183               	addwfc	(??_init_app_ram+19)& (0+255),w,b
 27722  003218  6F87               	movwf	(??_init_app_ram+23)& (0+255),b
 27723  00321A  5176               	movf	(??_init_app_ram+6)& (0+255),w,b
 27724  00321C  2184               	addwfc	(??_init_app_ram+20)& (0+255),w,b
 27725  00321E  6F88               	movwf	(??_init_app_ram+24)& (0+255),b
 27726  003220  5189               	movf	init_app_ram@i& (0+255),w,b
 27727  003222  0D04               	mullw	4
 27728  003224  0E23               	movlw	35
 27729  003226  24F3               	addwf	prodl,w,c
 27730  003228  6E1F               	movwf	?_Read_b_eep,c
 27731  00322A  0E00               	movlw	0
 27732  00322C  20F4               	addwfc	prodh,w,c
 27733  00322E  6E20               	movwf	?_Read_b_eep+1,c
 27734  003230  EC7E  F034         	call	_Read_b_eep	;wreg free
 27735  003234  0100               	movlb	0	; () banked
 27736  003236  2585               	addwf	(??_init_app_ram+21)& (0+255),w,b
 27737  003238  6F60               	movwf	?_setFilter& (0+255),b
 27738  00323A  0E00               	movlw	0
 27739  00323C  2186               	addwfc	(??_init_app_ram+22)& (0+255),w,b
 27740  00323E  6F61               	movwf	(?_setFilter+1)& (0+255),b
 27741  003240  0E00               	movlw	0
 27742  003242  2187               	addwfc	(??_init_app_ram+23)& (0+255),w,b
 27743  003244  6F62               	movwf	(?_setFilter+2)& (0+255),b
 27744  003246  0E00               	movlw	0
 27745  003248  2188               	addwfc	(??_init_app_ram+24)& (0+255),w,b
 27746  00324A  6F63               	movwf	(?_setFilter+3)& (0+255),b
 27747  00324C  6B64               	clrf	(?_setFilter+4)& (0+255),b
 27748  00324E  5189               	movf	init_app_ram@i& (0+255),w,b
 27749  003250  ECF6  F01A         	call	_setFilter
 27750  003254  0100               	movlb	0	; () banked
 27751  003256  2B89               	incf	init_app_ram@i& (0+255),f,b
 27752                           
 27753                           ; BSR set to: 0
 27754  003258  0E0E               	movlw	14
 27755  00325A  6589               	cpfsgt	init_app_ram@i& (0+255),b
 27756  00325C  D77D               	goto	l16531
 27757                           
 27758                           ; BSR set to: 0
 27759                           ;main.c: 548: }
 27760                           ;main.c: 550: _CANIDToRegs((BYTE*)&RXM0SIDH, ((uint32_t)( Read_b_eep(0x60)) << 24 ) + ((
      +                          uint32_t)( Read_b_eep(0x60 + 1)) << 16 ) + ((uint32_t)( Read_b_eep(0x60 + 2)) << 8 ) + (
      +                          ( Read_b_eep(0x60 + 3)) ), 1);
 27761  00325E  0E0F               	movlw	15	;volatile
 27762  003260  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 27763  003262  0E18               	movlw	24	;volatile
 27764  003264  6F60               	movwf	?__CANIDToRegs& (0+255),b
 27765  003266  6A20               	clrf	?_Read_b_eep+1,c
 27766  003268  0E62               	movlw	98
 27767  00326A  6E1F               	movwf	?_Read_b_eep,c
 27768  00326C  EC7E  F034         	call	_Read_b_eep	;wreg free
 27769  003270  D856               	call	PL36	;call to abstracted procedure
 27770  003272  0E61               	movlw	97
 27771  003274  6E1F               	movwf	?_Read_b_eep,c
 27772  003276  EC7E  F034         	call	_Read_b_eep	;wreg free
 27773  00327A  D870               	call	PL40	;call to abstracted procedure
 27774  00327C  0E60               	movlw	96
 27775  00327E  6E1F               	movwf	?_Read_b_eep,c
 27776  003280  EC7E  F034         	call	_Read_b_eep	;wreg free
 27777  003284  D826               	call	PL8	;call to abstracted procedure
 27778  003286  0E63               	movlw	99
 27779  003288  6E1F               	movwf	?_Read_b_eep,c
 27780  00328A  EC7E  F034         	call	_Read_b_eep	;wreg free
 27781  00328E  D857               	call	PL38	;call to abstracted procedure
 27782  003290  ECE9  F024         	call	__CANIDToRegs	;wreg free
 27783                           
 27784                           ;main.c: 556: _CANIDToRegs((BYTE*)&RXM1SIDH, ((uint32_t)( Read_b_eep(0x64)) << 24 ) + ((
      +                          uint32_t)( Read_b_eep(0x64 + 1)) << 16 ) + ((uint32_t)( Read_b_eep(0x64 + 2)) << 8 ) + (
      +                          (uint32_t)( Read_b_eep(0x64 + 3)) ), 1);
 27785  003294  0E0F               	movlw	15	;volatile
 27786  003296  0100               	movlb	0	; () banked
 27787  003298  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 27788  00329A  0E1C               	movlw	28	;volatile
 27789  00329C  6F60               	movwf	?__CANIDToRegs& (0+255),b
 27790  00329E  6A20               	clrf	?_Read_b_eep+1,c
 27791  0032A0  0E66               	movlw	102
 27792  0032A2  6E1F               	movwf	?_Read_b_eep,c
 27793  0032A4  EC7E  F034         	call	_Read_b_eep	;wreg free
 27794  0032A8  D83A               	call	PL36	;call to abstracted procedure
 27795  0032AA  0E65               	movlw	101
 27796  0032AC  6E1F               	movwf	?_Read_b_eep,c
 27797  0032AE  EC7E  F034         	call	_Read_b_eep	;wreg free
 27798  0032B2  D854               	call	PL40	;call to abstracted procedure
 27799  0032B4  0E64               	movlw	100
 27800  0032B6  6E1F               	movwf	?_Read_b_eep,c
 27801  0032B8  EC7E  F034         	call	_Read_b_eep	;wreg free
 27802  0032BC  D80A               	call	PL8	;call to abstracted procedure
 27803  0032BE  0E67               	movlw	103
 27804  0032C0  6E1F               	movwf	?_Read_b_eep,c
 27805  0032C2  EC7E  F034         	call	_Read_b_eep	;wreg free
 27806  0032C6  D83B               	call	PL38	;call to abstracted procedure
 27807  0032C8  ECE9  F024         	call	__CANIDToRegs	;wreg free
 27808                           
 27809                           ; BSR set to: 0
 27810                           ;main.c: 562: ECANSetOperationMode(0x20);
 27811  0032CC  0E20               	movlw	32
 27812  0032CE  EF4A  F034         	goto	_ECANSetOperationMode
 27813  0032D2                     __end_of_init_app_ram:
 27814                           	opt stack 0
 27815  0032D2                     PL8:
 27816                           	opt stack 23
 27817  0032D2  0100               	movlb	0	; () banked
 27818  0032D4  6F7A               	movwf	(??_init_app_ram+10)& (0+255),b
 27819  0032D6  C07A  F07B         	movff	??_init_app_ram+10,??_init_app_ram+11
 27820  0032DA  6B7C               	clrf	(??_init_app_ram+12)& (0+255),b
 27821  0032DC  6B7D               	clrf	(??_init_app_ram+13)& (0+255),b
 27822  0032DE  6B7E               	clrf	(??_init_app_ram+14)& (0+255),b
 27823  0032E0  C07B  F07E         	movff	??_init_app_ram+11,??_init_app_ram+14
 27824  0032E4  6B7D               	clrf	(??_init_app_ram+13)& (0+255),b
 27825  0032E6  6B7C               	clrf	(??_init_app_ram+12)& (0+255),b
 27826  0032E8  6B7B               	clrf	(??_init_app_ram+11)& (0+255),b
 27827  0032EA  5176               	movf	(??_init_app_ram+6)& (0+255),w,b
 27828  0032EC  257B               	addwf	(??_init_app_ram+11)& (0+255),w,b
 27829  0032EE  6F7F               	movwf	(??_init_app_ram+15)& (0+255),b
 27830  0032F0  5177               	movf	(??_init_app_ram+7)& (0+255),w,b
 27831  0032F2  217C               	addwfc	(??_init_app_ram+12)& (0+255),w,b
 27832  0032F4  6F80               	movwf	(??_init_app_ram+16)& (0+255),b
 27833  0032F6  5178               	movf	(??_init_app_ram+8)& (0+255),w,b
 27834  0032F8  217D               	addwfc	(??_init_app_ram+13)& (0+255),w,b
 27835  0032FA  6F81               	movwf	(??_init_app_ram+17)& (0+255),b
 27836  0032FC  5179               	movf	(??_init_app_ram+9)& (0+255),w,b
 27837  0032FE  217E               	addwfc	(??_init_app_ram+14)& (0+255),w,b
 27838  003300  6F82               	movwf	(??_init_app_ram+18)& (0+255),b
 27839  003302  5171               	movf	(??_init_app_ram+1)& (0+255),w,b
 27840  003304  257F               	addwf	(??_init_app_ram+15)& (0+255),w,b
 27841  003306  6F83               	movwf	(??_init_app_ram+19)& (0+255),b
 27842  003308  5172               	movf	(??_init_app_ram+2)& (0+255),w,b
 27843  00330A  2180               	addwfc	(??_init_app_ram+16)& (0+255),w,b
 27844  00330C  6F84               	movwf	(??_init_app_ram+20)& (0+255),b
 27845  00330E  5173               	movf	(??_init_app_ram+3)& (0+255),w,b
 27846  003310  2181               	addwfc	(??_init_app_ram+17)& (0+255),w,b
 27847  003312  6F85               	movwf	(??_init_app_ram+21)& (0+255),b
 27848  003314  5174               	movf	(??_init_app_ram+4)& (0+255),w,b
 27849  003316  2182               	addwfc	(??_init_app_ram+18)& (0+255),w,b
 27850  003318  6F86               	movwf	(??_init_app_ram+22)& (0+255),b
 27851  00331A  6A20               	clrf	?_Read_b_eep+1,c
 27852  00331C  0012               	return	
 27853  00331E                     __end_ofPL8:
 27854                           	opt stack 0
 27855  00331E                     PL36:
 27856                           	opt stack 23
 27857  00331E  0100               	movlb	0	; () banked
 27858  003320  6F70               	movwf	??_init_app_ram& (0+255),b
 27859  003322  C070  F071         	movff	??_init_app_ram,??_init_app_ram+1
 27860  003326  6B72               	clrf	(??_init_app_ram+2)& (0+255),b
 27861  003328  6B73               	clrf	(??_init_app_ram+3)& (0+255),b
 27862  00332A  6B74               	clrf	(??_init_app_ram+4)& (0+255),b
 27863  00332C  C073  F074         	movff	??_init_app_ram+3,??_init_app_ram+4
 27864  003330  C072  F073         	movff	??_init_app_ram+2,??_init_app_ram+3
 27865  003334  C071  F072         	movff	??_init_app_ram+1,??_init_app_ram+2
 27866  003338  6B71               	clrf	(??_init_app_ram+1)& (0+255),b
 27867  00333A  6A20               	clrf	?_Read_b_eep+1,c
 27868  00333C  0012               	return	
 27869  00333E                     __end_ofPL36:
 27870                           	opt stack 0
 27871  00333E                     PL38:
 27872                           	opt stack 23
 27873  00333E  0100               	movlb	0	; () banked
 27874  003340  2583               	addwf	(??_init_app_ram+19)& (0+255),w,b
 27875  003342  6F62               	movwf	(?__CANIDToRegs+2)& (0+255),b
 27876  003344  0E00               	movlw	0
 27877  003346  2184               	addwfc	(??_init_app_ram+20)& (0+255),w,b
 27878  003348  6F63               	movwf	(?__CANIDToRegs+3)& (0+255),b
 27879  00334A  0E00               	movlw	0
 27880  00334C  2185               	addwfc	(??_init_app_ram+21)& (0+255),w,b
 27881  00334E  6F64               	movwf	(?__CANIDToRegs+4)& (0+255),b
 27882  003350  0E00               	movlw	0
 27883  003352  2186               	addwfc	(??_init_app_ram+22)& (0+255),w,b
 27884  003354  6F65               	movwf	(?__CANIDToRegs+5)& (0+255),b
 27885  003356  0E01               	movlw	1
 27886  003358  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 27887  00335A  0C01               	retlw	1
 27888  00335C                     __end_ofPL38:
 27889                           	opt stack 0
 27890  00335C                     PL40:
 27891                           	opt stack 23
 27892  00335C  0100               	movlb	0	; () banked
 27893  00335E  6F75               	movwf	(??_init_app_ram+5)& (0+255),b
 27894  003360  C075  F076         	movff	??_init_app_ram+5,??_init_app_ram+6
 27895  003364  6B77               	clrf	(??_init_app_ram+7)& (0+255),b
 27896  003366  6B78               	clrf	(??_init_app_ram+8)& (0+255),b
 27897  003368  6B79               	clrf	(??_init_app_ram+9)& (0+255),b
 27898  00336A  C077  F079         	movff	??_init_app_ram+7,??_init_app_ram+9
 27899  00336E  C076  F078         	movff	??_init_app_ram+6,??_init_app_ram+8
 27900  003372  6B77               	clrf	(??_init_app_ram+7)& (0+255),b
 27901  003374  6B76               	clrf	(??_init_app_ram+6)& (0+255),b
 27902  003376  6A20               	clrf	?_Read_b_eep+1,c
 27903  003378  0012               	return	
 27904  00337A                     __end_ofPL40:
 27905                           	opt stack 0
 27906                           tblptru	equ	0xFF8
 27907                           tblptrh	equ	0xFF7
 27908                           tblptrl	equ	0xFF6
 27909                           tablat	equ	0xFF5
 27910                           prodh	equ	0xFF4
 27911                           prodl	equ	0xFF3
 27912                           intcon	equ	0xFF2
 27913                           indf0	equ	0xFEF
 27914                           postinc0	equ	0xFEE
 27915                           fsr0h	equ	0xFEA
 27916                           fsr0l	equ	0xFE9
 27917                           wreg	equ	0xFE8
 27918                           indf1	equ	0xFE7
 27919                           postinc1	equ	0xFE6
 27920                           postdec1	equ	0xFE5
 27921                           fsr1h	equ	0xFE2
 27922                           fsr1l	equ	0xFE1
 27923                           indf2	equ	0xFDF
 27924                           postinc2	equ	0xFDE
 27925                           postdec2	equ	0xFDD
 27926                           plusw2	equ	0xFDB
 27927                           fsr2h	equ	0xFDA
 27928                           fsr2l	equ	0xFD9
 27929                           status	equ	0xFD8
 27930                           
 27931 ;; *************** function __CANIDToRegs *****************
 27932 ;; Defined at:
 27933 ;;		line 1101 in file "ECAN.c"
 27934 ;; Parameters:    Size  Location     Type
 27935 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 27936 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 27937 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 27938 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 27939 ;;  val             4    2[BANK0 ] unsigned long 
 27940 ;;  type            1    6[BANK0 ] unsigned char 
 27941 ;; Auto vars:     Size  Location     Type
 27942 ;;  Value           1   34[COMRAM] PTR struct _CAN_MESSAGE_
 27943 ;;		 -> _CANIDToRegs@val(4), 
 27944 ;; Return value:  Size  Location     Type
 27945 ;;		None               void
 27946 ;; Registers used:
 27947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27948 ;; Tracked objects:
 27949 ;;		On entry : F/0
 27950 ;;		On exit  : F/0
 27951 ;;		Unchanged: 0/0
 27952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27953 ;;      Params:         0       7       0       0       0       0       0
 27954 ;;      Locals:         1       0       0       0       0       0       0
 27955 ;;      Temps:          2       0       0       0       0       0       0
 27956 ;;      Totals:         3       7       0       0       0       0       0
 27957 ;;Total ram usage:       10 bytes
 27958 ;; Hardware stack levels used:    1
 27959 ;; Hardware stack levels required when called:    3
 27960 ;; This function calls:
 27961 ;;		Nothing
 27962 ;; This function is called by:
 27963 ;;		_init_app_ram
 27964 ;;		_doModeVerbose
 27965 ;;		_ECANSendMessage
 27966 ;; This function uses a non-reentrant model
 27967 ;;
 27968                           
 27969                           	psect	text78
 27970  0049D2                     __ptext78:
 27971                           	opt stack 0
 27972  0049D2                     __CANIDToRegs:
 27973                           	opt stack 24
 27974                           
 27975                           ; BSR set to: 0
 27976                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 27977                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 27978                           
 27979                           ;incstack = 0
 27980                           ;incstack = 0
 27981  0049D2  0E62               	movlw	low __CANIDToRegs@val
 27982  0049D4  6E23               	movwf	__CANIDToRegs@Value,c
 27983                           
 27984                           ; BSR set to: 0
 27985                           ;ECAN.c: 1106: if ( type == 0 )
 27986  0049D6  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 27987  0049D8  D022               	goto	l16663
 27988                           
 27989                           ; BSR set to: 0
 27990                           ;ECAN.c: 1107: {
 27991                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 27992  0049DA  5023               	movf	__CANIDToRegs@Value,w,c
 27993  0049DC  6ED9               	movwf	fsr2l,c
 27994  0049DE  6ADA               	clrf	fsr2h,c
 27995  0049E0  50DF               	movf	indf2,w,c
 27996  0049E2  6E21               	movwf	??__CANIDToRegs& (0+255),c
 27997  0049E4  90D8               	bcf	status,0,c
 27998  0049E6  3221               	rrcf	??__CANIDToRegs,f,c
 27999  0049E8  90D8               	bcf	status,0,c
 28000  0049EA  3221               	rrcf	??__CANIDToRegs,f,c
 28001  0049EC  90D8               	bcf	status,0,c
 28002  0049EE  3021               	rrcf	??__CANIDToRegs,w,c
 28003                           
 28004                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 28005  0049F0  D858               	call	PL66	;call to abstracted procedure
 28006  0049F2  2AD9               	incf	fsr2l,f,c
 28007  0049F4  6ADA               	clrf	fsr2h,c
 28008  0049F6  D871               	call	PL134	;call to abstracted procedure
 28009  0049F8                     u21225:
 28010  0049F8  90D8               	bcf	status,0,c
 28011  0049FA  3621               	rlcf	??__CANIDToRegs,f,c
 28012  0049FC  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 28013  0049FE  D7FC               	goto	u21225
 28014  004A00  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28015                           
 28016                           ; BSR set to: 0
 28017                           ;ECAN.c: 1111: ptr++;
 28018                           
 28019                           ; BSR set to: 0
 28020                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 28021  004A04  D844               	call	PL34	;call to abstracted procedure
 28022  004A06  D869               	call	PL134	;call to abstracted procedure
 28023  004A08                     u21235:
 28024  004A08  90D8               	bcf	status,0,c
 28025  004A0A  3621               	rlcf	??__CANIDToRegs,f,c
 28026  004A0C  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 28027  004A0E  D7FC               	goto	u21235
 28028  004A10  5021               	movf	??__CANIDToRegs,w,c
 28029  004A12  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28030  004A16  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28031  004A1A  6EDF               	movwf	indf2,c
 28032                           
 28033                           ;ECAN.c: 1113: }
 28034  004A1C  D037               	goto	l1649
 28035  004A1E                     l16663:
 28036                           
 28037                           ; BSR set to: 0
 28038                           ;ECAN.c: 1114: else
 28039                           ;ECAN.c: 1115: {
 28040                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 28041  004A1E  D854               	call	PL96	;call to abstracted procedure
 28042  004A20  0E05               	movlw	5
 28043  004A22  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 28044  004A24                     u21245:
 28045  004A24  90D8               	bcf	status,0,c
 28046  004A26  3221               	rrcf	??__CANIDToRegs,f,c
 28047  004A28  2E22               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 28048  004A2A  D7FC               	goto	u21245
 28049  004A2C  5021               	movf	??__CANIDToRegs,w,c
 28050                           
 28051                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 28052  004A2E  D839               	call	PL66	;call to abstracted procedure
 28053  004A30  0E03               	movlw	3
 28054  004A32  D840               	call	PL86	;call to abstracted procedure
 28055  004A34  3621               	rlcf	??__CANIDToRegs,f,c
 28056  004A36  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28057                           
 28058                           ; BSR set to: 0
 28059                           ;ECAN.c: 1119: ptr++;
 28060                           
 28061                           ; BSR set to: 0
 28062                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 28063  004A3A  D829               	call	PL34	;call to abstracted procedure
 28064  004A3C  0E02               	movlw	2
 28065  004A3E  D83A               	call	PL86	;call to abstracted procedure
 28066  004A40  3421               	rlcf	??__CANIDToRegs,w,c
 28067  004A42  0BE0               	andlw	224
 28068  004A44  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28069  004A48  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28070  004A4C  6EDF               	movwf	indf2,c
 28071                           
 28072                           ; BSR set to: 0
 28073                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 28074  004A4E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28075  004A52  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28076  004A56  0E00               	movlw	0
 28077  004A58  86DB               	bsf	plusw2,3,c
 28078                           
 28079                           ; BSR set to: 0
 28080                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 28081  004A5A  D836               	call	PL96	;call to abstracted procedure
 28082  004A5C  0E03               	movlw	3
 28083  004A5E  1621               	andwf	??__CANIDToRegs,f,c
 28084  004A60  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28085                           
 28086                           ;ECAN.c: 1124: ptr++;
 28087                           
 28088                           ; BSR set to: 0
 28089                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 28090  004A64  D814               	call	PL34	;call to abstracted procedure
 28091  004A66  2AD9               	incf	fsr2l,f,c
 28092  004A68  6ADA               	clrf	fsr2h,c
 28093  004A6A  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 28094  004A6E  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 28095  004A72  CFDF FFE7          	movff	indf2,indf1
 28096                           
 28097                           ; BSR set to: 0
 28098                           ;ECAN.c: 1126: ptr++;
 28099  004A76  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 28100  004A78  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 28101                           
 28102                           ; BSR set to: 0
 28103                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 28104  004A7A  5023               	movf	__CANIDToRegs@Value,w,c
 28105  004A7C  6ED9               	movwf	fsr2l,c
 28106  004A7E  6ADA               	clrf	fsr2h,c
 28107  004A80  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 28108  004A84  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 28109  004A88  CFDF FFE7          	movff	indf2,indf1
 28110  004A8C                     l1649:
 28111                           
 28112                           ; BSR set to: 0
 28113  004A8C  0012               	return	
 28114  004A8E                     __end_of__CANIDToRegs:
 28115                           	opt stack 0
 28116  004A8E                     PL34:
 28117                           	opt stack 24
 28118  004A8E  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28119  004A92  5021               	movf	??__CANIDToRegs,w,c
 28120  004A94  12DF               	iorwf	indf2,f,c
 28121  004A96  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 28122  004A98  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 28123  004A9A  5023               	movf	__CANIDToRegs@Value,w,c
 28124  004A9C  6ED9               	movwf	fsr2l,c
 28125  004A9E  6ADA               	clrf	fsr2h,c
 28126  004AA0  0012               	return	
 28127  004AA2                     __end_ofPL34:
 28128                           	opt stack 0
 28129  004AA2                     PL66:
 28130                           	opt stack 24
 28131  004AA2  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28132  004AA6  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28133  004AAA  6EDF               	movwf	indf2,c
 28134  004AAC  5023               	movf	__CANIDToRegs@Value,w,c
 28135  004AAE  6ED9               	movwf	fsr2l,c
 28136  004AB0  6ADA               	clrf	fsr2h,c
 28137  004AB2  0012               	return	
 28138  004AB4                     __end_ofPL66:
 28139                           	opt stack 0
 28140  004AB4                     PL86:
 28141                           	opt stack 24
 28142  004AB4  26D9               	addwf	fsr2l,f,c
 28143  004AB6  6ADA               	clrf	fsr2h,c
 28144  004AB8  50DF               	movf	indf2,w,c
 28145  004ABA  6E21               	movwf	??__CANIDToRegs& (0+255),c
 28146  004ABC  90D8               	bcf	status,0,c
 28147  004ABE  3621               	rlcf	??__CANIDToRegs,f,c
 28148  004AC0  90D8               	bcf	status,0,c
 28149  004AC2  3621               	rlcf	??__CANIDToRegs,f,c
 28150  004AC4  90D8               	bcf	status,0,c
 28151  004AC6  0012               	return	
 28152  004AC8                     __end_ofPL86:
 28153                           	opt stack 0
 28154  004AC8                     PL96:
 28155                           	opt stack 24
 28156  004AC8  5023               	movf	__CANIDToRegs@Value,w,c
 28157  004ACA  6ED9               	movwf	fsr2l,c
 28158  004ACC  6ADA               	clrf	fsr2h,c
 28159  004ACE  0E02               	movlw	2
 28160  004AD0  26D9               	addwf	fsr2l,f,c
 28161  004AD2  6ADA               	clrf	fsr2h,c
 28162  004AD4  50DF               	movf	indf2,w,c
 28163  004AD6  6E21               	movwf	??__CANIDToRegs& (0+255),c
 28164  004AD8  0012               	return	
 28165  004ADA                     __end_ofPL96:
 28166                           	opt stack 0
 28167  004ADA                     PL134:
 28168                           	opt stack 24
 28169  004ADA  50DF               	movf	indf2,w,c
 28170  004ADC  6E21               	movwf	??__CANIDToRegs& (0+255),c
 28171  004ADE  0E05               	movlw	5
 28172  004AE0  6E22               	movwf	(??__CANIDToRegs+1)& (0+255),c
 28173  004AE2  0C05               	retlw	5
 28174  004AE4                     __end_ofPL134:
 28175                           	opt stack 0
 28176                           tblptru	equ	0xFF8
 28177                           tblptrh	equ	0xFF7
 28178                           tblptrl	equ	0xFF6
 28179                           tablat	equ	0xFF5
 28180                           prodh	equ	0xFF4
 28181                           prodl	equ	0xFF3
 28182                           intcon	equ	0xFF2
 28183                           indf0	equ	0xFEF
 28184                           postinc0	equ	0xFEE
 28185                           fsr0h	equ	0xFEA
 28186                           fsr0l	equ	0xFE9
 28187                           wreg	equ	0xFE8
 28188                           indf1	equ	0xFE7
 28189                           postinc1	equ	0xFE6
 28190                           postdec1	equ	0xFE5
 28191                           fsr1h	equ	0xFE2
 28192                           fsr1l	equ	0xFE1
 28193                           indf2	equ	0xFDF
 28194                           postinc2	equ	0xFDE
 28195                           postdec2	equ	0xFDD
 28196                           plusw2	equ	0xFDB
 28197                           fsr2h	equ	0xFDA
 28198                           fsr2l	equ	0xFD9
 28199                           status	equ	0xFD8
 28200                           
 28201 ;; *************** function _setFilter *****************
 28202 ;; Defined at:
 28203 ;;		line 3308 in file "main.c"
 28204 ;; Parameters:    Size  Location     Type
 28205 ;;  filter          1    wreg     unsigned char 
 28206 ;;  val             4    0[BANK0 ] unsigned long 
 28207 ;;  bPersistent     1    4[BANK0 ] enum E15660
 28208 ;; Auto vars:     Size  Location     Type
 28209 ;;  filter          1   11[BANK0 ] unsigned char 
 28210 ;;  eidl            1   15[BANK0 ] unsigned char 
 28211 ;;  eidh            1   14[BANK0 ] unsigned char 
 28212 ;;  sidl            1   13[BANK0 ] unsigned char 
 28213 ;;  sidh            1   12[BANK0 ] unsigned char 
 28214 ;; Return value:  Size  Location     Type
 28215 ;;		None               void
 28216 ;; Registers used:
 28217 ;;		wreg, status,2, status,0, cstack
 28218 ;; Tracked objects:
 28219 ;;		On entry : D/2
 28220 ;;		On exit  : 0/0
 28221 ;;		Unchanged: 0/0
 28222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28223 ;;      Params:         0       5       0       0       0       0       0
 28224 ;;      Locals:         0       5       0       0       0       0       0
 28225 ;;      Temps:          0       6       0       0       0       0       0
 28226 ;;      Totals:         0      16       0       0       0       0       0
 28227 ;;Total ram usage:       16 bytes
 28228 ;; Hardware stack levels used:    1
 28229 ;; Hardware stack levels required when called:    4
 28230 ;; This function calls:
 28231 ;;		_Busy_eep
 28232 ;;		_Write_b_eep
 28233 ;; This function is called by:
 28234 ;;		_init_app_ram
 28235 ;;		_doModeVerbose
 28236 ;; This function uses a non-reentrant model
 28237 ;;
 28238                           
 28239                           	psect	text79
 28240  0035EC                     __ptext79:
 28241                           	opt stack 0
 28242  0035EC                     _setFilter:
 28243                           	opt stack 25
 28244                           
 28245                           ; BSR set to: 0
 28246                           ;incstack = 0
 28247                           ;incstack = 0
 28248                           ;setFilter@filter stored from wreg
 28249  0035EC  CFE8 F06B          	movff	wreg,setFilter@filter
 28250                           
 28251                           ;main.c: 3309: uint8_t sidh = (long) val >> 21L;
 28252  0035F0  0E15               	movlw	21
 28253  0035F2  0100               	movlb	0	; () banked
 28254  0035F4  6F65               	movwf	??_setFilter& (0+255),b
 28255  0035F6  C060  F066         	movff	setFilter@val,??_setFilter+1
 28256  0035FA  C061  F067         	movff	setFilter@val+1,??_setFilter+2
 28257  0035FE  C062  F068         	movff	setFilter@val+2,??_setFilter+3
 28258  003602  C063  F069         	movff	setFilter@val+3,??_setFilter+4
 28259  003606                     u21185:
 28260  003606  6765               	tstfsz	??_setFilter& (0+255),b
 28261  003608  D001               	goto	u21186
 28262  00360A  D007               	goto	u21187
 28263  00360C                     u21186:
 28264  00360C  3569               	rlcf	(??_setFilter+4)& (0+255),w,b
 28265  00360E  3369               	rrcf	(??_setFilter+4)& (0+255),f,b
 28266  003610  3368               	rrcf	(??_setFilter+3)& (0+255),f,b
 28267  003612  3367               	rrcf	(??_setFilter+2)& (0+255),f,b
 28268  003614  3366               	rrcf	(??_setFilter+1)& (0+255),f,b
 28269  003616  2F65               	decfsz	??_setFilter& (0+255),f,b
 28270  003618  D7F6               	goto	u21185
 28271  00361A                     u21187:
 28272  00361A  5166               	movf	(??_setFilter+1)& (0+255),w,b
 28273  00361C  6F6C               	movwf	setFilter@sidh& (0+255),b
 28274                           
 28275                           ;main.c: 3310: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 28276                           ;main.c: 3311: ((long) (val) & 0x03L) |
 28277                           ;main.c: 3312: 0x08;
 28278  00361E  C060  F065         	movff	setFilter@val,??_setFilter
 28279  003622  0E03               	movlw	3
 28280  003624  1765               	andwf	??_setFilter& (0+255),f,b
 28281  003626  0E0D               	movlw	13
 28282  003628  6F66               	movwf	(??_setFilter+1)& (0+255),b
 28283  00362A  C060  F067         	movff	setFilter@val,??_setFilter+2
 28284  00362E  C061  F068         	movff	setFilter@val+1,??_setFilter+3
 28285  003632  C062  F069         	movff	setFilter@val+2,??_setFilter+4
 28286  003636  C063  F06A         	movff	setFilter@val+3,??_setFilter+5
 28287  00363A                     u21195:
 28288  00363A  6766               	tstfsz	(??_setFilter+1)& (0+255),b
 28289  00363C  D001               	goto	u21196
 28290  00363E  D007               	goto	u21197
 28291  003640                     u21196:
 28292  003640  356A               	rlcf	(??_setFilter+5)& (0+255),w,b
 28293  003642  336A               	rrcf	(??_setFilter+5)& (0+255),f,b
 28294  003644  3369               	rrcf	(??_setFilter+4)& (0+255),f,b
 28295  003646  3368               	rrcf	(??_setFilter+3)& (0+255),f,b
 28296  003648  3367               	rrcf	(??_setFilter+2)& (0+255),f,b
 28297  00364A  2F66               	decfsz	(??_setFilter+1)& (0+255),f,b
 28298  00364C  D7F6               	goto	u21195
 28299  00364E                     u21197:
 28300  00364E  5167               	movf	(??_setFilter+2)& (0+255),w,b
 28301  003650  0BE0               	andlw	224
 28302  003652  1165               	iorwf	??_setFilter& (0+255),w,b
 28303  003654  0908               	iorlw	8
 28304  003656  6F6D               	movwf	setFilter@sidl& (0+255),b
 28305                           
 28306                           ; BSR set to: 0
 28307                           ;main.c: 3313: uint8_t eidh = (long) val >> 8L;
 28308  003658  C061  F06E         	movff	setFilter@val+1,setFilter@eidh
 28309                           
 28310                           ; BSR set to: 0
 28311                           ;main.c: 3314: uint8_t eidl = val;
 28312  00365C  C060  F06F         	movff	setFilter@val,setFilter@eidl
 28313                           
 28314                           ;main.c: 3316: switch (filter) {
 28315  003660  D090               	goto	l16637
 28316  003662                     l1389:
 28317                           
 28318                           ; BSR set to: 0
 28319                           ;main.c: 3319: RXF0SIDH = sidh;
 28320  003662  C06C  FF00         	movff	setFilter@sidh,3840	;volatile
 28321                           
 28322                           ;main.c: 3320: RXF0SIDL = sidl;
 28323  003666  C06D  FF01         	movff	setFilter@sidl,3841	;volatile
 28324                           
 28325                           ;main.c: 3321: RXF0EIDH = eidh;
 28326  00366A  C06E  FF02         	movff	setFilter@eidh,3842	;volatile
 28327                           
 28328                           ;main.c: 3322: RXF0EIDL = eidl;
 28329  00366E  C06F  FF03         	movff	setFilter@eidl,3843	;volatile
 28330                           
 28331                           ;main.c: 3323: break;
 28332  003672  D0AA               	goto	l16639
 28333  003674                     l1391:
 28334                           
 28335                           ; BSR set to: 0
 28336                           ;main.c: 3326: RXF1SIDH = sidh;
 28337  003674  C06C  FF04         	movff	setFilter@sidh,3844	;volatile
 28338                           
 28339                           ;main.c: 3327: RXF1SIDL = sidl;
 28340  003678  C06D  FF05         	movff	setFilter@sidl,3845	;volatile
 28341                           
 28342                           ;main.c: 3328: RXF1EIDH = eidh;
 28343  00367C  C06E  FF06         	movff	setFilter@eidh,3846	;volatile
 28344                           
 28345                           ;main.c: 3329: RXF1EIDL = eidl;
 28346  003680  C06F  FF07         	movff	setFilter@eidl,3847	;volatile
 28347                           
 28348                           ;main.c: 3330: break;
 28349  003684  D0A1               	goto	l16639
 28350  003686                     l1392:
 28351                           
 28352                           ; BSR set to: 0
 28353                           ;main.c: 3333: RXF2SIDH = sidh;
 28354  003686  C06C  FF08         	movff	setFilter@sidh,3848	;volatile
 28355                           
 28356                           ;main.c: 3334: RXF2SIDL = sidl;
 28357  00368A  C06D  FF09         	movff	setFilter@sidl,3849	;volatile
 28358                           
 28359                           ;main.c: 3335: RXF2EIDH = eidh;
 28360  00368E  C06E  FF0A         	movff	setFilter@eidh,3850	;volatile
 28361                           
 28362                           ;main.c: 3336: RXF2EIDL = eidl;
 28363  003692  C06F  FF0B         	movff	setFilter@eidl,3851	;volatile
 28364                           
 28365                           ;main.c: 3337: break;
 28366  003696  D098               	goto	l16639
 28367  003698                     l1393:
 28368                           
 28369                           ; BSR set to: 0
 28370                           ;main.c: 3340: RXF3SIDH = sidh;
 28371  003698  C06C  FF0C         	movff	setFilter@sidh,3852	;volatile
 28372                           
 28373                           ;main.c: 3341: RXF3SIDL = sidl;
 28374  00369C  C06D  FF0D         	movff	setFilter@sidl,3853	;volatile
 28375                           
 28376                           ;main.c: 3342: RXF3EIDH = eidh;
 28377  0036A0  C06E  FF0E         	movff	setFilter@eidh,3854	;volatile
 28378                           
 28379                           ;main.c: 3343: RXF3EIDL = eidl;
 28380  0036A4  C06F  FF0F         	movff	setFilter@eidl,3855	;volatile
 28381                           
 28382                           ;main.c: 3344: break;
 28383  0036A8  D08F               	goto	l16639
 28384  0036AA                     l1394:
 28385                           
 28386                           ; BSR set to: 0
 28387                           ;main.c: 3347: RXF4SIDH = sidh;
 28388  0036AA  C06C  FF10         	movff	setFilter@sidh,3856	;volatile
 28389                           
 28390                           ;main.c: 3348: RXF4SIDL = sidl;
 28391  0036AE  C06D  FF11         	movff	setFilter@sidl,3857	;volatile
 28392                           
 28393                           ;main.c: 3349: RXF4EIDH = eidh;
 28394  0036B2  C06E  FF12         	movff	setFilter@eidh,3858	;volatile
 28395                           
 28396                           ;main.c: 3350: RXF4EIDL = eidl;
 28397  0036B6  C06F  FF13         	movff	setFilter@eidl,3859	;volatile
 28398                           
 28399                           ;main.c: 3351: break;
 28400  0036BA  D086               	goto	l16639
 28401  0036BC                     l1395:
 28402                           
 28403                           ; BSR set to: 0
 28404                           ;main.c: 3354: RXF5SIDH = sidh;
 28405  0036BC  C06C  FF14         	movff	setFilter@sidh,3860	;volatile
 28406                           
 28407                           ;main.c: 3355: RXF5SIDL = sidl;
 28408  0036C0  C06D  FF15         	movff	setFilter@sidl,3861	;volatile
 28409                           
 28410                           ;main.c: 3356: RXF5EIDH = eidh;
 28411  0036C4  C06E  FF16         	movff	setFilter@eidh,3862	;volatile
 28412                           
 28413                           ;main.c: 3357: RXF5EIDL = eidl;
 28414  0036C8  C06F  FF17         	movff	setFilter@eidl,3863	;volatile
 28415                           
 28416                           ;main.c: 3358: break;
 28417  0036CC  D07D               	goto	l16639
 28418  0036CE                     l1396:
 28419                           
 28420                           ; BSR set to: 0
 28421                           ;main.c: 3361: RXF6SIDH = sidh;
 28422  0036CE  C06C  FD60         	movff	setFilter@sidh,3424	;volatile
 28423                           
 28424                           ;main.c: 3362: RXF6SIDL = sidl;
 28425  0036D2  C06D  FD61         	movff	setFilter@sidl,3425	;volatile
 28426                           
 28427                           ;main.c: 3363: RXF6EIDH = eidh;
 28428  0036D6  C06E  FD62         	movff	setFilter@eidh,3426	;volatile
 28429                           
 28430                           ;main.c: 3364: RXF6EIDL = eidl;
 28431  0036DA  C06F  FD63         	movff	setFilter@eidl,3427	;volatile
 28432                           
 28433                           ;main.c: 3365: break;
 28434  0036DE  D074               	goto	l16639
 28435  0036E0                     l1397:
 28436                           
 28437                           ; BSR set to: 0
 28438                           ;main.c: 3368: RXF7SIDH = sidh;
 28439  0036E0  C06C  FD64         	movff	setFilter@sidh,3428	;volatile
 28440                           
 28441                           ;main.c: 3369: RXF7SIDL = sidl;
 28442  0036E4  C06D  FD65         	movff	setFilter@sidl,3429	;volatile
 28443                           
 28444                           ;main.c: 3370: RXF7EIDH = eidh;
 28445  0036E8  C06E  FD66         	movff	setFilter@eidh,3430	;volatile
 28446                           
 28447                           ;main.c: 3371: RXF7EIDL = eidl;
 28448  0036EC  C06F  FD67         	movff	setFilter@eidl,3431	;volatile
 28449                           
 28450                           ;main.c: 3372: break;
 28451  0036F0  D06B               	goto	l16639
 28452  0036F2                     l1398:
 28453                           
 28454                           ; BSR set to: 0
 28455                           ;main.c: 3375: RXF8SIDH = sidh;
 28456  0036F2  C06C  FD68         	movff	setFilter@sidh,3432	;volatile
 28457                           
 28458                           ;main.c: 3376: RXF8SIDL = sidl;
 28459  0036F6  C06D  FD69         	movff	setFilter@sidl,3433	;volatile
 28460                           
 28461                           ;main.c: 3377: RXF8EIDH = eidh;
 28462  0036FA  C06E  FD6A         	movff	setFilter@eidh,3434	;volatile
 28463                           
 28464                           ;main.c: 3378: RXF8EIDL = eidl;
 28465  0036FE  C06F  FD6B         	movff	setFilter@eidl,3435	;volatile
 28466                           
 28467                           ;main.c: 3379: break;
 28468  003702  D062               	goto	l16639
 28469  003704                     l1399:
 28470                           
 28471                           ; BSR set to: 0
 28472                           ;main.c: 3382: RXF9SIDH = sidh;
 28473  003704  C06C  FD70         	movff	setFilter@sidh,3440	;volatile
 28474                           
 28475                           ;main.c: 3383: RXF9SIDL = sidl;
 28476  003708  C06D  FD71         	movff	setFilter@sidl,3441	;volatile
 28477                           
 28478                           ;main.c: 3384: RXF9EIDH = eidh;
 28479  00370C  C06E  FD72         	movff	setFilter@eidh,3442	;volatile
 28480                           
 28481                           ;main.c: 3385: RXF9EIDL = eidl;
 28482  003710  C06F  FD73         	movff	setFilter@eidl,3443	;volatile
 28483                           
 28484                           ;main.c: 3386: break;
 28485  003714  D059               	goto	l16639
 28486  003716                     l1400:
 28487                           
 28488                           ; BSR set to: 0
 28489                           ;main.c: 3389: RXF10SIDH = sidh;
 28490  003716  C06C  FD74         	movff	setFilter@sidh,3444	;volatile
 28491                           
 28492                           ;main.c: 3390: RXF10SIDL = sidl;
 28493  00371A  C06D  FD75         	movff	setFilter@sidl,3445	;volatile
 28494                           
 28495                           ;main.c: 3391: RXF10EIDH = eidh;
 28496  00371E  C06E  FD76         	movff	setFilter@eidh,3446	;volatile
 28497                           
 28498                           ;main.c: 3392: RXF10EIDL = eidl;
 28499  003722  C06F  FD77         	movff	setFilter@eidl,3447	;volatile
 28500                           
 28501                           ;main.c: 3393: break;
 28502  003726  D050               	goto	l16639
 28503  003728                     l1401:
 28504                           
 28505                           ; BSR set to: 0
 28506                           ;main.c: 3396: RXF11SIDH = sidh;
 28507  003728  C06C  FD78         	movff	setFilter@sidh,3448	;volatile
 28508                           
 28509                           ;main.c: 3397: RXF11SIDL = sidl;
 28510  00372C  C06D  FD79         	movff	setFilter@sidl,3449	;volatile
 28511                           
 28512                           ;main.c: 3398: RXF11EIDH = eidh;
 28513  003730  C06E  FD7A         	movff	setFilter@eidh,3450	;volatile
 28514                           
 28515                           ;main.c: 3399: RXF11EIDL = eidl;
 28516  003734  C06F  FD7B         	movff	setFilter@eidl,3451	;volatile
 28517                           
 28518                           ;main.c: 3400: break;
 28519  003738  D047               	goto	l16639
 28520  00373A                     l1402:
 28521                           
 28522                           ; BSR set to: 0
 28523                           ;main.c: 3403: RXF12SIDH = sidh;
 28524  00373A  C06C  FD80         	movff	setFilter@sidh,3456	;volatile
 28525                           
 28526                           ;main.c: 3404: RXF12SIDL = sidl;
 28527  00373E  C06D  FD81         	movff	setFilter@sidl,3457	;volatile
 28528                           
 28529                           ;main.c: 3405: RXF12EIDH = eidh;
 28530  003742  C06E  FD82         	movff	setFilter@eidh,3458	;volatile
 28531                           
 28532                           ;main.c: 3406: RXF12EIDL = eidl;
 28533  003746  C06F  FD83         	movff	setFilter@eidl,3459	;volatile
 28534                           
 28535                           ;main.c: 3407: break;
 28536  00374A  D03E               	goto	l16639
 28537  00374C                     l1403:
 28538                           
 28539                           ; BSR set to: 0
 28540                           ;main.c: 3410: RXF13SIDH = sidh;
 28541  00374C  C06C  FD84         	movff	setFilter@sidh,3460	;volatile
 28542                           
 28543                           ;main.c: 3411: RXF13SIDL = sidl;
 28544  003750  C06D  FD85         	movff	setFilter@sidl,3461	;volatile
 28545                           
 28546                           ;main.c: 3412: RXF13EIDH = eidh;
 28547  003754  C06E  FD86         	movff	setFilter@eidh,3462	;volatile
 28548                           
 28549                           ;main.c: 3413: RXF13EIDL = eidl;
 28550  003758  C06F  FD87         	movff	setFilter@eidl,3463	;volatile
 28551                           
 28552                           ;main.c: 3414: break;
 28553  00375C  D035               	goto	l16639
 28554  00375E                     l1404:
 28555                           
 28556                           ; BSR set to: 0
 28557                           ;main.c: 3417: RXF14SIDH = sidh;
 28558  00375E  C06C  FD88         	movff	setFilter@sidh,3464	;volatile
 28559                           
 28560                           ;main.c: 3418: RXF14SIDL = sidl;
 28561  003762  C06D  FD89         	movff	setFilter@sidl,3465	;volatile
 28562                           
 28563                           ;main.c: 3419: RXF14EIDH = eidh;
 28564  003766  C06E  FD8A         	movff	setFilter@eidh,3466	;volatile
 28565                           
 28566                           ;main.c: 3420: RXF14EIDL = eidl;
 28567  00376A  C06F  FD8B         	movff	setFilter@eidl,3467	;volatile
 28568                           
 28569                           ;main.c: 3421: break;
 28570  00376E  D02C               	goto	l16639
 28571  003770                     l1405:
 28572                           
 28573                           ; BSR set to: 0
 28574                           ;main.c: 3424: RXF15SIDH = sidh;
 28575  003770  C06C  FD90         	movff	setFilter@sidh,3472	;volatile
 28576                           
 28577                           ;main.c: 3425: RXF15SIDL = sidl;
 28578  003774  C06D  FD91         	movff	setFilter@sidl,3473	;volatile
 28579                           
 28580                           ;main.c: 3426: RXF15EIDH = eidh;
 28581  003778  C06E  FD92         	movff	setFilter@eidh,3474	;volatile
 28582                           
 28583                           ;main.c: 3427: RXF15EIDL = eidl;
 28584  00377C  C06F  FD93         	movff	setFilter@eidl,3475	;volatile
 28585                           
 28586                           ;main.c: 3428: break;
 28587  003780  D023               	goto	l16639
 28588  003782                     l16637:
 28589                           
 28590                           ; BSR set to: 0
 28591  003782  516B               	movf	setFilter@filter& (0+255),w,b
 28592                           
 28593                           ; Switch size 1, requested type "space"
 28594                           ; Number of cases is 16, Range of values is 0 to 15
 28595                           ; switch strategies available:
 28596                           ; Name         Instructions Cycles
 28597                           ; simple_byte           49    25 (average)
 28598                           ;	Chosen strategy is simple_byte
 28599  003784  E101 D76D          	bz	l1389
 28600  003788  0A01               	xorlw	1	; case 1
 28601  00378A  E101 D773          	bz	l1391
 28602  00378E  0A03               	xorlw	3	; case 2
 28603  003790  E101 D779          	bz	l1392
 28604  003794  0A01               	xorlw	1	; case 3
 28605  003796  E080               	bz	l1393
 28606  003798  0A07               	xorlw	7	; case 4
 28607  00379A  E087               	bz	l1394
 28608  00379C  0A01               	xorlw	1	; case 5
 28609  00379E  E08E               	bz	l1395
 28610  0037A0  0A03               	xorlw	3	; case 6
 28611  0037A2  E095               	bz	l1396
 28612  0037A4  0A01               	xorlw	1	; case 7
 28613  0037A6  E09C               	bz	l1397
 28614  0037A8  0A0F               	xorlw	15	; case 8
 28615  0037AA  E0A3               	bz	l1398
 28616  0037AC  0A01               	xorlw	1	; case 9
 28617  0037AE  E0AA               	bz	l1399
 28618  0037B0  0A03               	xorlw	3	; case 10
 28619  0037B2  E0B1               	bz	l1400
 28620  0037B4  0A01               	xorlw	1	; case 11
 28621  0037B6  E0B8               	bz	l1401
 28622  0037B8  0A07               	xorlw	7	; case 12
 28623  0037BA  E0BF               	bz	l1402
 28624  0037BC  0A01               	xorlw	1	; case 13
 28625  0037BE  E0C6               	bz	l1403
 28626  0037C0  0A03               	xorlw	3	; case 14
 28627  0037C2  E0CD               	bz	l1404
 28628  0037C4  0A01               	xorlw	1	; case 15
 28629  0037C6  E0D4               	bz	l1405
 28630  0037C8                     l16639:
 28631                           
 28632                           ; BSR set to: 0
 28633                           ;main.c: 3431: if ( bPersistent ) {
 28634  0037C8  5164               	movf	setFilter@bPersistent& (0+255),w,b
 28635  0037CA  E034               	bz	l1407
 28636                           
 28637                           ; BSR set to: 0
 28638                           ;main.c: 3432: (Busy_eep(), Write_b_eep(0x20 + 0 + 4*filter,( ( id >> 24 ) & 0xff )));
 28639  0037CC  EC9D  F034         	call	_Busy_eep	;wreg free
 28640  0037D0  D832               	call	PL14	;call to abstracted procedure
 28641  0037D2  0E20               	movlw	32
 28642  0037D4  2565               	addwf	??_setFilter& (0+255),w,b
 28643  0037D6  6E1F               	movwf	?_Write_b_eep,c
 28644  0037D8  0E00               	movlw	0
 28645  0037DA  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28646  0037DC  6E20               	movwf	?_Write_b_eep+1,c
 28647  0037DE  C039  F021         	movff	_id+3,?_Write_b_eep+2
 28648  0037E2  EC80  F033         	call	_Write_b_eep	;wreg free
 28649                           
 28650                           ;main.c: 3433: (Busy_eep(), Write_b_eep(0x20 + 1 + 4*filter,( ( id >> 16 ) & 0xff )));
 28651  0037E6  EC9D  F034         	call	_Busy_eep	;wreg free
 28652  0037EA  D825               	call	PL14	;call to abstracted procedure
 28653  0037EC  0E21               	movlw	33
 28654  0037EE  2565               	addwf	??_setFilter& (0+255),w,b
 28655  0037F0  6E1F               	movwf	?_Write_b_eep,c
 28656  0037F2  0E00               	movlw	0
 28657  0037F4  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28658  0037F6  6E20               	movwf	?_Write_b_eep+1,c
 28659  0037F8  C038  F021         	movff	_id+2,?_Write_b_eep+2
 28660  0037FC  EC80  F033         	call	_Write_b_eep	;wreg free
 28661                           
 28662                           ;main.c: 3434: (Busy_eep(), Write_b_eep(0x20 + 2 + 4*filter,( ( id >> 8 ) & 0xff )));
 28663  003800  EC9D  F034         	call	_Busy_eep	;wreg free
 28664  003804  D818               	call	PL14	;call to abstracted procedure
 28665  003806  0E22               	movlw	34
 28666  003808  2565               	addwf	??_setFilter& (0+255),w,b
 28667  00380A  6E1F               	movwf	?_Write_b_eep,c
 28668  00380C  0E00               	movlw	0
 28669  00380E  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28670  003810  6E20               	movwf	?_Write_b_eep+1,c
 28671  003812  C037  F021         	movff	_id+1,?_Write_b_eep+2
 28672  003816  EC80  F033         	call	_Write_b_eep	;wreg free
 28673                           
 28674                           ;main.c: 3435: (Busy_eep(), Write_b_eep(0x20 + 3 + 4*filter,( id & 0xff )));
 28675  00381A  EC9D  F034         	call	_Busy_eep	;wreg free
 28676  00381E  D80B               	call	PL14	;call to abstracted procedure
 28677  003820  0E23               	movlw	35
 28678  003822  2565               	addwf	??_setFilter& (0+255),w,b
 28679  003824  6E1F               	movwf	?_Write_b_eep,c
 28680  003826  0E00               	movlw	0
 28681  003828  2166               	addwfc	(??_setFilter+1)& (0+255),w,b
 28682  00382A  6E20               	movwf	?_Write_b_eep+1,c
 28683  00382C  C036  F021         	movff	_id,?_Write_b_eep+2
 28684  003830  EC80  F033         	call	_Write_b_eep	;wreg free
 28685  003834                     l1407:
 28686  003834  0012               	return	
 28687  003836                     __end_of_setFilter:
 28688                           	opt stack 0
 28689  003836                     PL14:
 28690                           	opt stack 25
 28691  003836  0100               	movlb	0	; () banked
 28692  003838  516B               	movf	setFilter@filter& (0+255),w,b
 28693  00383A  6F65               	movwf	??_setFilter& (0+255),b
 28694  00383C  6B66               	clrf	(??_setFilter+1)& (0+255),b
 28695  00383E  90D8               	bcf	status,0,c
 28696  003840  3765               	rlcf	??_setFilter& (0+255),f,b
 28697  003842  3766               	rlcf	(??_setFilter+1)& (0+255),f,b
 28698  003844  90D8               	bcf	status,0,c
 28699  003846  3765               	rlcf	??_setFilter& (0+255),f,b
 28700  003848  3766               	rlcf	(??_setFilter+1)& (0+255),f,b
 28701  00384A  0012               	return	
 28702  00384C                     __end_ofPL14:
 28703                           	opt stack 0
 28704                           tblptru	equ	0xFF8
 28705                           tblptrh	equ	0xFF7
 28706                           tblptrl	equ	0xFF6
 28707                           tablat	equ	0xFF5
 28708                           prodh	equ	0xFF4
 28709                           prodl	equ	0xFF3
 28710                           intcon	equ	0xFF2
 28711                           indf0	equ	0xFEF
 28712                           postinc0	equ	0xFEE
 28713                           fsr0h	equ	0xFEA
 28714                           fsr0l	equ	0xFE9
 28715                           wreg	equ	0xFE8
 28716                           indf1	equ	0xFE7
 28717                           postinc1	equ	0xFE6
 28718                           postdec1	equ	0xFE5
 28719                           fsr1h	equ	0xFE2
 28720                           fsr1l	equ	0xFE1
 28721                           indf2	equ	0xFDF
 28722                           postinc2	equ	0xFDE
 28723                           postdec2	equ	0xFDD
 28724                           plusw2	equ	0xFDB
 28725                           fsr2h	equ	0xFDA
 28726                           fsr2l	equ	0xFD9
 28727                           status	equ	0xFD8
 28728                           
 28729 ;; *************** function _Write_b_eep *****************
 28730 ;; Defined at:
 28731 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 28732 ;; Parameters:    Size  Location     Type
 28733 ;;  badd            2   30[COMRAM] unsigned int 
 28734 ;;  bdat            1   32[COMRAM] unsigned char 
 28735 ;; Auto vars:     Size  Location     Type
 28736 ;;  GIE_BIT_VAL     1   33[COMRAM] unsigned char 
 28737 ;; Return value:  Size  Location     Type
 28738 ;;		None               void
 28739 ;; Registers used:
 28740 ;;		wreg, status,2
 28741 ;; Tracked objects:
 28742 ;;		On entry : 0/1
 28743 ;;		On exit  : 0/0
 28744 ;;		Unchanged: 0/0
 28745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28746 ;;      Params:         3       0       0       0       0       0       0
 28747 ;;      Locals:         1       0       0       0       0       0       0
 28748 ;;      Temps:          0       0       0       0       0       0       0
 28749 ;;      Totals:         4       0       0       0       0       0       0
 28750 ;;Total ram usage:        4 bytes
 28751 ;; Hardware stack levels used:    1
 28752 ;; Hardware stack levels required when called:    3
 28753 ;; This function calls:
 28754 ;;		Nothing
 28755 ;; This function is called by:
 28756 ;;		_init_app_eeprom
 28757 ;;		_doModeVerbose
 28758 ;;		_doModeVscp
 28759 ;;		_doModeSLCAN
 28760 ;;		_setFilter
 28761 ;; This function uses a non-reentrant model
 28762 ;;
 28763                           
 28764                           	psect	text80
 28765  006700                     __ptext80:
 28766                           	opt stack 0
 28767  006700                     _Write_b_eep:
 28768                           	opt stack 26
 28769                           
 28770                           ;incstack = 0
 28771                           ;incstack = 0
 28772  006700  C01F  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 28773  006704  C021  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 28774  006708  9EA6               	bcf	4006,7,c	;volatile
 28775  00670A  9CA6               	bcf	4006,6,c	;volatile
 28776  00670C  84A6               	bsf	4006,2,c	;volatile
 28777  00670E  0E00               	movlw	0
 28778  006710  BEF2               	btfsc	intcon,7,c	;volatile
 28779  006712  0E01               	movlw	1
 28780  006714  6E22               	movwf	Write_b_eep@GIE_BIT_VAL,c
 28781  006716  9EF2               	bcf	intcon,7,c	;volatile
 28782  006718  0E55               	movlw	85
 28783  00671A  6EA7               	movwf	4007,c	;volatile
 28784  00671C  0EAA               	movlw	170
 28785  00671E  6EA7               	movwf	4007,c	;volatile
 28786  006720  82A6               	bsf	4006,1,c	;volatile
 28787  006722                     l1926:
 28788  006722  B2A6               	btfsc	4006,1,c	;volatile
 28789  006724  D7FE               	goto	l1926
 28790  006726  B022               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 28791  006728  D002               	bra	u21295
 28792  00672A  9EF2               	bcf	intcon,7,c	;volatile
 28793  00672C  D001               	bra	u21296
 28794  00672E                     u21295:
 28795  00672E  8EF2               	bsf	intcon,7,c	;volatile
 28796  006730                     u21296:
 28797  006730  94A6               	bcf	4006,2,c	;volatile
 28798  006732  0012               	return	
 28799  006734                     __end_of_Write_b_eep:
 28800                           	opt stack 0
 28801                           tblptru	equ	0xFF8
 28802                           tblptrh	equ	0xFF7
 28803                           tblptrl	equ	0xFF6
 28804                           tablat	equ	0xFF5
 28805                           prodh	equ	0xFF4
 28806                           prodl	equ	0xFF3
 28807                           intcon	equ	0xFF2
 28808                           indf0	equ	0xFEF
 28809                           postinc0	equ	0xFEE
 28810                           fsr0h	equ	0xFEA
 28811                           fsr0l	equ	0xFE9
 28812                           wreg	equ	0xFE8
 28813                           indf1	equ	0xFE7
 28814                           postinc1	equ	0xFE6
 28815                           postdec1	equ	0xFE5
 28816                           fsr1h	equ	0xFE2
 28817                           fsr1l	equ	0xFE1
 28818                           indf2	equ	0xFDF
 28819                           postinc2	equ	0xFDE
 28820                           postdec2	equ	0xFDD
 28821                           plusw2	equ	0xFDB
 28822                           fsr2h	equ	0xFDA
 28823                           fsr2l	equ	0xFD9
 28824                           status	equ	0xFD8
 28825                           
 28826 ;; *************** function _Busy_eep *****************
 28827 ;; Defined at:
 28828 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 28829 ;; Parameters:    Size  Location     Type
 28830 ;;		None
 28831 ;; Auto vars:     Size  Location     Type
 28832 ;;		None
 28833 ;; Return value:  Size  Location     Type
 28834 ;;		None               void
 28835 ;; Registers used:
 28836 ;;		None
 28837 ;; Tracked objects:
 28838 ;;		On entry : 0/1
 28839 ;;		On exit  : 0/0
 28840 ;;		Unchanged: 0/0
 28841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28842 ;;      Params:         0       0       0       0       0       0       0
 28843 ;;      Locals:         0       0       0       0       0       0       0
 28844 ;;      Temps:          0       0       0       0       0       0       0
 28845 ;;      Totals:         0       0       0       0       0       0       0
 28846 ;;Total ram usage:        0 bytes
 28847 ;; Hardware stack levels used:    1
 28848 ;; Hardware stack levels required when called:    3
 28849 ;; This function calls:
 28850 ;;		Nothing
 28851 ;; This function is called by:
 28852 ;;		_init_app_eeprom
 28853 ;;		_doModeVerbose
 28854 ;;		_doModeVscp
 28855 ;;		_doModeSLCAN
 28856 ;;		_setFilter
 28857 ;; This function uses a non-reentrant model
 28858 ;;
 28859                           
 28860                           	psect	text81
 28861  00693A                     __ptext81:
 28862                           	opt stack 0
 28863  00693A                     _Busy_eep:
 28864                           	opt stack 26
 28865  00693A                     l1901:
 28866  00693A  A2A6               	btfss	4006,1,c	;volatile
 28867  00693C  0012               	return	
 28868  00693E  D7FD               	goto	l1901
 28869  006940                     __end_of_Busy_eep:
 28870                           	opt stack 0
 28871                           tblptru	equ	0xFF8
 28872                           tblptrh	equ	0xFF7
 28873                           tblptrl	equ	0xFF6
 28874                           tablat	equ	0xFF5
 28875                           prodh	equ	0xFF4
 28876                           prodl	equ	0xFF3
 28877                           intcon	equ	0xFF2
 28878                           indf0	equ	0xFEF
 28879                           postinc0	equ	0xFEE
 28880                           fsr0h	equ	0xFEA
 28881                           fsr0l	equ	0xFE9
 28882                           wreg	equ	0xFE8
 28883                           indf1	equ	0xFE7
 28884                           postinc1	equ	0xFE6
 28885                           postdec1	equ	0xFE5
 28886                           fsr1h	equ	0xFE2
 28887                           fsr1l	equ	0xFE1
 28888                           indf2	equ	0xFDF
 28889                           postinc2	equ	0xFDE
 28890                           postdec2	equ	0xFDD
 28891                           plusw2	equ	0xFDB
 28892                           fsr2h	equ	0xFDA
 28893                           fsr2l	equ	0xFD9
 28894                           status	equ	0xFD8
 28895                           
 28896 ;; *************** function _ECANSetOperationMode *****************
 28897 ;; Defined at:
 28898 ;;		line 1014 in file "ECAN.c"
 28899 ;; Parameters:    Size  Location     Type
 28900 ;;  mode            1    wreg     enum E16337
 28901 ;; Auto vars:     Size  Location     Type
 28902 ;;  mode            1   30[COMRAM] enum E16337
 28903 ;; Return value:  Size  Location     Type
 28904 ;;		None               void
 28905 ;; Registers used:
 28906 ;;		wreg, status,2, status,0
 28907 ;; Tracked objects:
 28908 ;;		On entry : 0/1
 28909 ;;		On exit  : 0/0
 28910 ;;		Unchanged: 0/0
 28911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28912 ;;      Params:         0       0       0       0       0       0       0
 28913 ;;      Locals:         1       0       0       0       0       0       0
 28914 ;;      Temps:          0       0       0       0       0       0       0
 28915 ;;      Totals:         1       0       0       0       0       0       0
 28916 ;;Total ram usage:        1 bytes
 28917 ;; Hardware stack levels used:    1
 28918 ;; Hardware stack levels required when called:    3
 28919 ;; This function calls:
 28920 ;;		Nothing
 28921 ;; This function is called by:
 28922 ;;		_main
 28923 ;;		_init_app_ram
 28924 ;;		_doModeVerbose
 28925 ;;		_doModeVscp
 28926 ;;		_doModeSLCAN
 28927 ;;		_ECANInitialize
 28928 ;; This function uses a non-reentrant model
 28929 ;;
 28930                           
 28931                           	psect	text82
 28932  006894                     __ptext82:
 28933                           	opt stack 0
 28934  006894                     _ECANSetOperationMode:
 28935                           	opt stack 26
 28936                           
 28937                           ;incstack = 0
 28938                           ;incstack = 0
 28939                           ;ECANSetOperationMode@mode stored from wreg
 28940  006894  CFE8 F01F          	movff	wreg,ECANSetOperationMode@mode
 28941                           
 28942                           ;ECAN.c: 1015: CANCON &= 0x1F;
 28943  006898  0E1F               	movlw	31
 28944  00689A  166F               	andwf	3951,f,c	;volatile
 28945                           
 28946                           ;ECAN.c: 1016: CANCON |= mode;
 28947  00689C  501F               	movf	ECANSetOperationMode@mode,w,c
 28948  00689E  126F               	iorwf	3951,f,c	;volatile
 28949  0068A0                     l15241:
 28950  0068A0  506F               	movf	3951,w,c	;volatile
 28951  0068A2  0BE0               	andlw	224
 28952  0068A4  181F               	xorwf	ECANSetOperationMode@mode,w,c
 28953  0068A6  B4D8               	btfsc	status,2,c
 28954  0068A8  0012               	return	
 28955  0068AA  D7FA               	goto	l15241
 28956  0068AC                     __end_of_ECANSetOperationMode:
 28957                           	opt stack 0
 28958                           tblptru	equ	0xFF8
 28959                           tblptrh	equ	0xFF7
 28960                           tblptrl	equ	0xFF6
 28961                           tablat	equ	0xFF5
 28962                           prodh	equ	0xFF4
 28963                           prodl	equ	0xFF3
 28964                           intcon	equ	0xFF2
 28965                           indf0	equ	0xFEF
 28966                           postinc0	equ	0xFEE
 28967                           fsr0h	equ	0xFEA
 28968                           fsr0l	equ	0xFE9
 28969                           wreg	equ	0xFE8
 28970                           indf1	equ	0xFE7
 28971                           postinc1	equ	0xFE6
 28972                           postdec1	equ	0xFE5
 28973                           fsr1h	equ	0xFE2
 28974                           fsr1l	equ	0xFE1
 28975                           indf2	equ	0xFDF
 28976                           postinc2	equ	0xFDE
 28977                           postdec2	equ	0xFDD
 28978                           plusw2	equ	0xFDB
 28979                           fsr2h	equ	0xFDA
 28980                           fsr2l	equ	0xFD9
 28981                           status	equ	0xFD8
 28982                           
 28983 ;; *************** function _Read_b_eep *****************
 28984 ;; Defined at:
 28985 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 28986 ;; Parameters:    Size  Location     Type
 28987 ;;  badd            2   30[COMRAM] unsigned int 
 28988 ;; Auto vars:     Size  Location     Type
 28989 ;;		None
 28990 ;; Return value:  Size  Location     Type
 28991 ;;                  1    wreg      unsigned char 
 28992 ;; Registers used:
 28993 ;;		wreg, status,2
 28994 ;; Tracked objects:
 28995 ;;		On entry : 0/1
 28996 ;;		On exit  : 0/0
 28997 ;;		Unchanged: 0/0
 28998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28999 ;;      Params:         2       0       0       0       0       0       0
 29000 ;;      Locals:         0       0       0       0       0       0       0
 29001 ;;      Temps:          0       0       0       0       0       0       0
 29002 ;;      Totals:         2       0       0       0       0       0       0
 29003 ;;Total ram usage:        2 bytes
 29004 ;; Hardware stack levels used:    1
 29005 ;; Hardware stack levels required when called:    3
 29006 ;; This function calls:
 29007 ;;		Nothing
 29008 ;; This function is called by:
 29009 ;;		_main
 29010 ;;		_init_app_ram
 29011 ;; This function uses a non-reentrant model
 29012 ;;
 29013                           
 29014                           	psect	text83
 29015  0068FC                     __ptext83:
 29016                           	opt stack 0
 29017  0068FC                     _Read_b_eep:
 29018                           	opt stack 24
 29019                           
 29020                           ;incstack = 0
 29021                           ;incstack = 0
 29022  0068FC  C01F  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 29023  006900  9CA6               	bcf	4006,6,c	;volatile
 29024  006902  9EA6               	bcf	4006,7,c	;volatile
 29025  006904  80A6               	bsf	4006,0,c	;volatile
 29026  006906  F000               	nop		;# 
 29027  006908  F000               	nop		;# 
 29028  00690A  50A8               	movf	4008,w,c	;volatile
 29029  00690C  0012               	return	
 29030  00690E                     __end_of_Read_b_eep:
 29031                           	opt stack 0
 29032                           tblptru	equ	0xFF8
 29033                           tblptrh	equ	0xFF7
 29034                           tblptrl	equ	0xFF6
 29035                           tablat	equ	0xFF5
 29036                           prodh	equ	0xFF4
 29037                           prodl	equ	0xFF3
 29038                           intcon	equ	0xFF2
 29039                           indf0	equ	0xFEF
 29040                           postinc0	equ	0xFEE
 29041                           fsr0h	equ	0xFEA
 29042                           fsr0l	equ	0xFE9
 29043                           wreg	equ	0xFE8
 29044                           indf1	equ	0xFE7
 29045                           postinc1	equ	0xFE6
 29046                           postdec1	equ	0xFE5
 29047                           fsr1h	equ	0xFE2
 29048                           fsr1l	equ	0xFE1
 29049                           indf2	equ	0xFDF
 29050                           postinc2	equ	0xFDE
 29051                           postdec2	equ	0xFDD
 29052                           plusw2	equ	0xFDB
 29053                           fsr2h	equ	0xFDA
 29054                           fsr2l	equ	0xFD9
 29055                           status	equ	0xFD8
 29056                           
 29057 ;; *************** function _WriteTimer0 *****************
 29058 ;; Defined at:
 29059 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 29060 ;; Parameters:    Size  Location     Type
 29061 ;;  timer0          2   30[COMRAM] unsigned int 
 29062 ;; Auto vars:     Size  Location     Type
 29063 ;;  timer           2   32[COMRAM] struct Timers
 29064 ;; Return value:  Size  Location     Type
 29065 ;;		None               void
 29066 ;; Registers used:
 29067 ;;		None
 29068 ;; Tracked objects:
 29069 ;;		On entry : 0/1
 29070 ;;		On exit  : 0/0
 29071 ;;		Unchanged: 0/0
 29072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29073 ;;      Params:         2       0       0       0       0       0       0
 29074 ;;      Locals:         2       0       0       0       0       0       0
 29075 ;;      Temps:          0       0       0       0       0       0       0
 29076 ;;      Totals:         4       0       0       0       0       0       0
 29077 ;;Total ram usage:        4 bytes
 29078 ;; Hardware stack levels used:    1
 29079 ;; Hardware stack levels required when called:    3
 29080 ;; This function calls:
 29081 ;;		Nothing
 29082 ;; This function is called by:
 29083 ;;		_init
 29084 ;; This function uses a non-reentrant model
 29085 ;;
 29086                           
 29087                           	psect	text84
 29088  00690E                     __ptext84:
 29089                           	opt stack 0
 29090  00690E                     _WriteTimer0:
 29091                           	opt stack 26
 29092                           
 29093                           ;incstack = 0
 29094                           ;incstack = 0
 29095  00690E  C01F  F021         	movff	WriteTimer0@timer0,WriteTimer0@timer
 29096  006912  C020  F022         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 29097  006916  C022  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 29098  00691A  C021  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 29099  00691E  0012               	return	
 29100  006920                     __end_of_WriteTimer0:
 29101                           	opt stack 0
 29102                           tblptru	equ	0xFF8
 29103                           tblptrh	equ	0xFF7
 29104                           tblptrl	equ	0xFF6
 29105                           tablat	equ	0xFF5
 29106                           prodh	equ	0xFF4
 29107                           prodl	equ	0xFF3
 29108                           intcon	equ	0xFF2
 29109                           indf0	equ	0xFEF
 29110                           postinc0	equ	0xFEE
 29111                           fsr0h	equ	0xFEA
 29112                           fsr0l	equ	0xFE9
 29113                           wreg	equ	0xFE8
 29114                           indf1	equ	0xFE7
 29115                           postinc1	equ	0xFE6
 29116                           postdec1	equ	0xFE5
 29117                           fsr1h	equ	0xFE2
 29118                           fsr1l	equ	0xFE1
 29119                           indf2	equ	0xFDF
 29120                           postinc2	equ	0xFDE
 29121                           postdec2	equ	0xFDD
 29122                           plusw2	equ	0xFDB
 29123                           fsr2h	equ	0xFDA
 29124                           fsr2l	equ	0xFD9
 29125                           status	equ	0xFD8
 29126                           
 29127 ;; *************** function _fifo_init *****************
 29128 ;; Defined at:
 29129 ;;		line 14 in file "fifo.c"
 29130 ;; Parameters:    Size  Location     Type
 29131 ;;  f               2    0[BANK0 ] PTR struct .
 29132 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29133 ;;  buf             2    2[BANK0 ] PTR const void 
 29134 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 29135 ;;  size            2    4[BANK0 ] unsigned short 
 29136 ;; Auto vars:     Size  Location     Type
 29137 ;;		None
 29138 ;; Return value:  Size  Location     Type
 29139 ;;		None               void
 29140 ;; Registers used:
 29141 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29142 ;; Tracked objects:
 29143 ;;		On entry : F/0
 29144 ;;		On exit  : F/0
 29145 ;;		Unchanged: 0/0
 29146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29147 ;;      Params:         0       6       0       0       0       0       0
 29148 ;;      Locals:         0       0       0       0       0       0       0
 29149 ;;      Temps:          0       0       0       0       0       0       0
 29150 ;;      Totals:         0       6       0       0       0       0       0
 29151 ;;Total ram usage:        6 bytes
 29152 ;; Hardware stack levels used:    1
 29153 ;; Hardware stack levels required when called:    3
 29154 ;; This function calls:
 29155 ;;		Nothing
 29156 ;; This function is called by:
 29157 ;;		_main
 29158 ;; This function uses a non-reentrant model
 29159 ;;
 29160                           
 29161                           	psect	text85
 29162  006520                     __ptext85:
 29163                           	opt stack 0
 29164  006520                     _fifo_init:
 29165                           	opt stack 27
 29166                           
 29167                           ; BSR set to: 0
 29168                           ;fifo.c: 15: f->head = 0;
 29169                           
 29170                           ;incstack = 0
 29171                           ;incstack = 0
 29172  006520  EE20 F002          	lfsr	2,2
 29173  006524  D816               	call	PL130	;call to abstracted procedure
 29174                           
 29175                           ;fifo.c: 16: f->tail = 0;
 29176  006526  EE20 F004          	lfsr	2,4
 29177  00652A  D813               	call	PL130	;call to abstracted procedure
 29178                           
 29179                           ;fifo.c: 17: f->size = size;
 29180  00652C  EE20 F006          	lfsr	2,6
 29181  006530  5160               	movf	fifo_init@f& (0+255),w,b
 29182  006532  26D9               	addwf	fsr2l,f,c
 29183  006534  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 29184  006536  22DA               	addwfc	fsr2h,f,c
 29185  006538  C064  FFDE         	movff	fifo_init@size,postinc2
 29186  00653C  C065  FFDD         	movff	fifo_init@size+1,postdec2
 29187                           
 29188                           ; BSR set to: 0
 29189                           ;fifo.c: 18: f->buf = buf;
 29190  006540  C060  FFD9         	movff	fifo_init@f,fsr2l
 29191  006544  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 29192  006548  C062  FFDE         	movff	fifo_init@buf,postinc2
 29193  00654C  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 29194                           
 29195                           ; BSR set to: 0
 29196  006550  0012               	return	
 29197  006552                     __end_of_fifo_init:
 29198                           	opt stack 0
 29199  006552                     PL130:
 29200                           	opt stack 27
 29201  006552  5160               	movf	fifo_init@f& (0+255),w,b
 29202  006554  26D9               	addwf	fsr2l,f,c
 29203  006556  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 29204  006558  22DA               	addwfc	fsr2h,f,c
 29205  00655A  6ADE               	clrf	postinc2,c
 29206  00655C  6ADD               	clrf	postdec2,c
 29207  00655E  0012               	return	
 29208  006560                     __end_ofPL130:
 29209                           	opt stack 0
 29210                           tblptru	equ	0xFF8
 29211                           tblptrh	equ	0xFF7
 29212                           tblptrl	equ	0xFF6
 29213                           tablat	equ	0xFF5
 29214                           prodh	equ	0xFF4
 29215                           prodl	equ	0xFF3
 29216                           intcon	equ	0xFF2
 29217                           indf0	equ	0xFEF
 29218                           postinc0	equ	0xFEE
 29219                           fsr0h	equ	0xFEA
 29220                           fsr0l	equ	0xFE9
 29221                           wreg	equ	0xFE8
 29222                           indf1	equ	0xFE7
 29223                           postinc1	equ	0xFE6
 29224                           postdec1	equ	0xFE5
 29225                           fsr1h	equ	0xFE2
 29226                           fsr1l	equ	0xFE1
 29227                           indf2	equ	0xFDF
 29228                           postinc2	equ	0xFDE
 29229                           postdec2	equ	0xFDD
 29230                           plusw2	equ	0xFDB
 29231                           fsr2h	equ	0xFDA
 29232                           fsr2l	equ	0xFD9
 29233                           status	equ	0xFD8
 29234                           
 29235 ;; *************** function _fifo_getFree *****************
 29236 ;; Defined at:
 29237 ;;		line 97 in file "fifo.c"
 29238 ;; Parameters:    Size  Location     Type
 29239 ;;  f               2   30[COMRAM] PTR struct .
 29240 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29241 ;; Auto vars:     Size  Location     Type
 29242 ;;		None
 29243 ;; Return value:  Size  Location     Type
 29244 ;;                  2   30[COMRAM] unsigned short 
 29245 ;; Registers used:
 29246 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29247 ;; Tracked objects:
 29248 ;;		On entry : F/1
 29249 ;;		On exit  : F/0
 29250 ;;		Unchanged: 0/0
 29251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29252 ;;      Params:         2       0       0       0       0       0       0
 29253 ;;      Locals:         0       0       0       0       0       0       0
 29254 ;;      Temps:          0       8       0       0       0       0       0
 29255 ;;      Totals:         2       8       0       0       0       0       0
 29256 ;;Total ram usage:       10 bytes
 29257 ;; Hardware stack levels used:    1
 29258 ;; Hardware stack levels required when called:    3
 29259 ;; This function calls:
 29260 ;;		Nothing
 29261 ;; This function is called by:
 29262 ;;		_main
 29263 ;; This function uses a non-reentrant model
 29264 ;;
 29265                           
 29266                           	psect	text86
 29267  0056EA                     __ptext86:
 29268                           	opt stack 0
 29269  0056EA                     _fifo_getFree:
 29270                           	opt stack 27
 29271                           
 29272                           ; BSR set to: 1
 29273                           ;fifo.c: 98: if (f->head < f->tail) {
 29274                           
 29275                           ; BSR set to: 0
 29276                           ;incstack = 0
 29277                           ;incstack = 0
 29278  0056EA  EE20 F004          	lfsr	2,4
 29279  0056EE  501F               	movf	fifo_getFree@f,w,c
 29280  0056F0  26D9               	addwf	fsr2l,f,c
 29281  0056F2  5020               	movf	fifo_getFree@f+1,w,c
 29282  0056F4  22DA               	addwfc	fsr2h,f,c
 29283  0056F6  EE10 F002          	lfsr	1,2
 29284  0056FA  501F               	movf	fifo_getFree@f,w,c
 29285  0056FC  26E1               	addwf	fsr1l,f,c
 29286  0056FE  5020               	movf	fifo_getFree@f+1,w,c
 29287  005700  22E2               	addwfc	fsr1h,f,c
 29288  005702  52E6               	movf	postinc1,f,c
 29289  005704  52DE               	movf	postinc2,f,c
 29290  005706  50DD               	movf	postdec2,w,c
 29291  005708  5CE5               	subwf	postdec1,w,c
 29292  00570A  E102               	bnz	u13245
 29293  00570C  50DF               	movf	indf2,w,c
 29294  00570E  5CE7               	subwf	indf1,w,c
 29295  005710                     u13245:
 29296  005710  E214               	bc	l11227
 29297                           
 29298                           ; BSR set to: 1
 29299                           ;fifo.c: 99: return (f->tail - f->head);
 29300  005712  EE20 F002          	lfsr	2,2
 29301  005716  D836               	call	PL100	;call to abstracted procedure
 29302  005718  EE20 F004          	lfsr	2,4
 29303  00571C  501F               	movf	fifo_getFree@f,w,c
 29304  00571E  26D9               	addwf	fsr2l,f,c
 29305  005720  5020               	movf	fifo_getFree@f+1,w,c
 29306  005722  22DA               	addwfc	fsr2h,f,c
 29307  005724  CFDE F062          	movff	postinc2,??_fifo_getFree+2
 29308  005728  CFDD F063          	movff	postdec2,??_fifo_getFree+3
 29309  00572C  0100               	movlb	0	; () banked
 29310  00572E  5160               	movf	??_fifo_getFree& (0+255),w,b
 29311  005730  5D62               	subwf	(??_fifo_getFree+2)& (0+255),w,b
 29312  005732  6E1F               	movwf	?_fifo_getFree,c
 29313  005734  5161               	movf	(??_fifo_getFree+1)& (0+255),w,b
 29314  005736  5963               	subwfb	(??_fifo_getFree+3)& (0+255),w,b
 29315  005738  D023               	goto	L50
 29316  00573A                     l11227:
 29317                           
 29318                           ; BSR set to: 1
 29319                           ;fifo.c: 101: else {
 29320                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 29321  00573A  EE20 F004          	lfsr	2,4
 29322  00573E  D822               	call	PL100	;call to abstracted procedure
 29323  005740  EE20 F002          	lfsr	2,2
 29324  005744  501F               	movf	fifo_getFree@f,w,c
 29325  005746  26D9               	addwf	fsr2l,f,c
 29326  005748  5020               	movf	fifo_getFree@f+1,w,c
 29327  00574A  22DA               	addwfc	fsr2h,f,c
 29328  00574C  CFDE F062          	movff	postinc2,??_fifo_getFree+2
 29329  005750  CFDD F063          	movff	postdec2,??_fifo_getFree+3
 29330  005754  EE20 F006          	lfsr	2,6
 29331  005758  501F               	movf	fifo_getFree@f,w,c
 29332  00575A  26D9               	addwf	fsr2l,f,c
 29333  00575C  5020               	movf	fifo_getFree@f+1,w,c
 29334  00575E  22DA               	addwfc	fsr2h,f,c
 29335  005760  CFDE F064          	movff	postinc2,??_fifo_getFree+4
 29336  005764  CFDD F065          	movff	postdec2,??_fifo_getFree+5
 29337  005768  0100               	movlb	0	; () banked
 29338  00576A  5162               	movf	(??_fifo_getFree+2)& (0+255),w,b
 29339  00576C  5D64               	subwf	(??_fifo_getFree+4)& (0+255),w,b
 29340  00576E  6F66               	movwf	(??_fifo_getFree+6)& (0+255),b
 29341  005770  5163               	movf	(??_fifo_getFree+3)& (0+255),w,b
 29342  005772  5965               	subwfb	(??_fifo_getFree+5)& (0+255),w,b
 29343  005774  6F67               	movwf	(??_fifo_getFree+7)& (0+255),b
 29344  005776  5160               	movf	??_fifo_getFree& (0+255),w,b
 29345  005778  2566               	addwf	(??_fifo_getFree+6)& (0+255),w,b
 29346  00577A  6E1F               	movwf	?_fifo_getFree,c
 29347  00577C  5161               	movf	(??_fifo_getFree+1)& (0+255),w,b
 29348  00577E  2167               	addwfc	(??_fifo_getFree+7)& (0+255),w,b
 29349  005780                     L50:
 29350  005780  6E20               	movwf	?_fifo_getFree+1,c
 29351                           
 29352                           ; BSR set to: 0
 29353  005782  0012               	return	
 29354  005784                     __end_of_fifo_getFree:
 29355                           	opt stack 0
 29356  005784                     PL100:
 29357                           	opt stack 27
 29358  005784  501F               	movf	fifo_getFree@f,w,c
 29359  005786  26D9               	addwf	fsr2l,f,c
 29360  005788  5020               	movf	fifo_getFree@f+1,w,c
 29361  00578A  22DA               	addwfc	fsr2h,f,c
 29362  00578C  CFDE F060          	movff	postinc2,??_fifo_getFree
 29363  005790  CFDD F061          	movff	postdec2,??_fifo_getFree+1
 29364  005794  0012               	return	
 29365  005796                     __end_ofPL100:
 29366                           	opt stack 0
 29367                           tblptru	equ	0xFF8
 29368                           tblptrh	equ	0xFF7
 29369                           tblptrl	equ	0xFF6
 29370                           tablat	equ	0xFF5
 29371                           prodh	equ	0xFF4
 29372                           prodl	equ	0xFF3
 29373                           intcon	equ	0xFF2
 29374                           indf0	equ	0xFEF
 29375                           postinc0	equ	0xFEE
 29376                           fsr0h	equ	0xFEA
 29377                           fsr0l	equ	0xFE9
 29378                           wreg	equ	0xFE8
 29379                           indf1	equ	0xFE7
 29380                           postinc1	equ	0xFE6
 29381                           postdec1	equ	0xFE5
 29382                           fsr1h	equ	0xFE2
 29383                           fsr1l	equ	0xFE1
 29384                           indf2	equ	0xFDF
 29385                           postinc2	equ	0xFDE
 29386                           postdec2	equ	0xFDD
 29387                           plusw2	equ	0xFDB
 29388                           fsr2h	equ	0xFDA
 29389                           fsr2l	equ	0xFD9
 29390                           status	equ	0xFD8
 29391                           
 29392 ;; *************** function _Interrupt *****************
 29393 ;; Defined at:
 29394 ;;		line 146 in file "main.c"
 29395 ;; Parameters:    Size  Location     Type
 29396 ;;		None
 29397 ;; Auto vars:     Size  Location     Type
 29398 ;;  fail            1   29[COMRAM] unsigned char 
 29399 ;;  c               1   28[COMRAM] unsigned char 
 29400 ;; Return value:  Size  Location     Type
 29401 ;;		None               void
 29402 ;; Registers used:
 29403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 29404 ;; Tracked objects:
 29405 ;;		On entry : 0/0
 29406 ;;		On exit  : 0/0
 29407 ;;		Unchanged: 0/0
 29408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29409 ;;      Params:         0       0       0       0       0       0       0
 29410 ;;      Locals:         2       0       0       0       0       0       0
 29411 ;;      Temps:          9       0       0       0       0       0       0
 29412 ;;      Totals:        11       0       0       0       0       0       0
 29413 ;;Total ram usage:       11 bytes
 29414 ;; Hardware stack levels used:    1
 29415 ;; Hardware stack levels required when called:    2
 29416 ;; This function calls:
 29417 ;;		_ReadUSART
 29418 ;;		_fifo_write
 29419 ;;		_ECANReceiveMessage
 29420 ;;		i1_fifo_getFree
 29421 ;;		i1_WriteTimer0
 29422 ;; This function is called by:
 29423 ;;		Interrupt level 1
 29424 ;; This function uses a non-reentrant model
 29425 ;;
 29426                           
 29427                           	psect	intcodelo
 29428  000418                     __pintcodelo:
 29429                           	opt stack 0
 29430  000418                     _Interrupt:
 29431                           	opt stack 20
 29432                           
 29433                           ; BSR set to: 0
 29434                           ;incstack = 0
 29435  000418  CFD8 F016          	movff	status,??_Interrupt+2
 29436  00041C  CFE8 F017          	movff	wreg,??_Interrupt+3
 29437  000420  CFE0 F018          	movff	bsr,??_Interrupt+4
 29438  000424  CFE1 F019          	movff	fsr1l,??_Interrupt+5
 29439  000428  CFE2 F01A          	movff	fsr1h,??_Interrupt+6
 29440  00042C  CFD9 F01B          	movff	fsr2l,??_Interrupt+7
 29441  000430  CFDA F01C          	movff	fsr2h,??_Interrupt+8
 29442  000434                     
 29443                           ;main.c: 147: uint8_t c;
 29444                           ;main.c: 150: if ( 1 == PIR1bits.RCIF ) {
 29445  000434  AA9E               	btfss	3998,5,c	;volatile
 29446  000436  D001               	goto	i1u1292_21
 29447  000438  D001               	goto	i1u1292_20
 29448  00043A                     i1u1292_21:
 29449  00043A  D02A               	goto	i1l415
 29450  00043C                     i1u1292_20:
 29451  00043C                     
 29452                           ;main.c: 152: c = ReadUSART();
 29453  00043C  EC0D  F034         	call	_ReadUSART	;wreg free
 29454  000440  6E1D               	movwf	Interrupt@c,c
 29455  000442                     
 29456                           ; BSR set to: 1
 29457                           ;main.c: 154: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 29458  000442  0E01               	movlw	high _serialInputFifo
 29459  000444  6E02               	movwf	?_fifo_write+1,c
 29460  000446  0EDD               	movlw	low _serialInputFifo
 29461  000448  6E01               	movwf	?_fifo_write,c
 29462  00044A  0E1D               	movlw	low Interrupt@c
 29463  00044C  6E03               	movwf	?_fifo_write+2,c
 29464  00044E  0E00               	movlw	high Interrupt@c
 29465  000450  6E04               	movwf	?_fifo_write+3,c
 29466  000452  0E0F               	movlw	15
 29467  000454  6E04               	movwf	?_fifo_write+3,c
 29468  000456  0E5F               	movlw	__accesstop+-1
 29469  000458  6403               	cpfsgt	?_fifo_write+2,c
 29470  00045A  6A04               	clrf	?_fifo_write+3,c
 29471  00045C  0E01               	movlw	1
 29472  00045E  6E05               	movwf	?_fifo_write+4,c
 29473  000460  0E00               	movlw	0
 29474  000462  6E06               	movwf	?_fifo_write+5,c
 29475  000464  0E00               	movlw	0
 29476  000466  6E07               	movwf	?_fifo_write+6,c
 29477  000468  0E00               	movlw	0
 29478  00046A  6E08               	movwf	?_fifo_write+7,c
 29479  00046C  ECC4  F023         	call	_fifo_write	;wreg free
 29480  000470  0401               	decf	?_fifo_write,w,c
 29481  000472  1002               	iorwf	?_fifo_write+1,w,c
 29482  000474  B4D8               	btfsc	status,2,c
 29483  000476  D001               	goto	i1u1293_21
 29484  000478  D001               	goto	i1u1293_20
 29485  00047A                     i1u1293_21:
 29486  00047A  D008               	goto	i1l11053
 29487  00047C                     i1u1293_20:
 29488  00047C                     
 29489                           ; BSR set to: 1
 29490                           ;main.c: 156: uart_receiveOverruns++;
 29491  00047C  0E01               	movlw	1
 29492  00047E  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 29493  000480  0E00               	movlw	0
 29494  000482  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 29495  000484  0E00               	movlw	0
 29496  000486  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 29497  000488  0E00               	movlw	0
 29498  00048A  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 29499  00048C                     i1l11053:
 29500                           
 29501                           ; BSR set to: 1
 29502                           ;main.c: 157: }
 29503                           ;main.c: 160: PIR1bits.RCIF = 0;
 29504  00048C  9A9E               	bcf	3998,5,c	;volatile
 29505                           
 29506                           ;main.c: 162: }
 29507  00048E  D07D               	goto	i1l417
 29508  000490                     i1l415:
 29509                           
 29510                           ;main.c: 164: else if (1 == INTCONbits.TMR0IF) {
 29511  000490  A4F2               	btfss	intcon,2,c	;volatile
 29512  000492  D001               	goto	i1u1294_21
 29513  000494  D001               	goto	i1u1294_20
 29514  000496                     i1u1294_21:
 29515  000496  D079               	goto	i1l417
 29516  000498                     i1u1294_20:
 29517  000498                     
 29518                           ;main.c: 166: WriteTimer0(0xfb1d);
 29519  000498  0EFB               	movlw	251
 29520  00049A  6E02               	movwf	?i1_WriteTimer0+1,c
 29521  00049C  0E1D               	movlw	29
 29522  00049E  6E01               	movwf	?i1_WriteTimer0,c
 29523  0004A0  EC90  F034         	call	i1_WriteTimer0	;wreg free
 29524  0004A4                     
 29525                           ;main.c: 168: timer++;
 29526  0004A4  0E01               	movlw	1
 29527  0004A6  2624               	addwf	_timer,f,c	;volatile
 29528  0004A8  0E00               	movlw	0
 29529  0004AA  2225               	addwfc	_timer+1,f,c	;volatile
 29530  0004AC  0E00               	movlw	0
 29531  0004AE  2226               	addwfc	_timer+2,f,c	;volatile
 29532  0004B0  0E00               	movlw	0
 29533  0004B2  2227               	addwfc	_timer+3,f,c	;volatile
 29534  0004B4                     
 29535                           ;main.c: 169: timekeeper++;
 29536  0004B4  0E01               	movlw	1
 29537  0004B6  0101               	movlb	1	; () banked
 29538  0004B8  2718               	addwf	_timekeeper& (0+255),f,b	;volatile
 29539  0004BA  0E00               	movlw	0
 29540  0004BC  2319               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 29541  0004BE  0E00               	movlw	0
 29542  0004C0  231A               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 29543  0004C2  0E00               	movlw	0
 29544  0004C4  231B               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 29545  0004C6                     
 29546                           ; BSR set to: 1
 29547                           ;main.c: 172: status_led_cnt++;
 29548  0004C6  4A28               	infsnz	_status_led_cnt,f,c	;volatile
 29549  0004C8  2A29               	incf	_status_led_cnt+1,f,c	;volatile
 29550  0004CA                     
 29551                           ; BSR set to: 1
 29552                           ;main.c: 173: if ( ( 2 == ledFunctionality ) &&
 29553                           ;main.c: 174: ( status_led_cnt > 1000 ) ) {
 29554  0004CA  5031               	movf	_ledFunctionality,w,c	;volatile
 29555  0004CC  0A02               	xorlw	2
 29556  0004CE  A4D8               	btfss	status,2,c
 29557  0004D0  D001               	goto	i1u1295_21
 29558  0004D2  D001               	goto	i1u1295_20
 29559  0004D4                     i1u1295_21:
 29560  0004D4  D00C               	goto	i1l11069
 29561  0004D6                     i1u1295_20:
 29562  0004D6                     
 29563                           ; BSR set to: 1
 29564  0004D6  0EE9               	movlw	233
 29565  0004D8  5C28               	subwf	_status_led_cnt,w,c	;volatile
 29566  0004DA  0E03               	movlw	3
 29567  0004DC  5829               	subwfb	_status_led_cnt+1,w,c	;volatile
 29568  0004DE  A0D8               	btfss	status,0,c
 29569  0004E0  D001               	goto	i1u1296_21
 29570  0004E2  D001               	goto	i1u1296_20
 29571  0004E4                     i1u1296_21:
 29572  0004E4  D004               	goto	i1l11069
 29573  0004E6                     i1u1296_20:
 29574  0004E6                     i1l11067:
 29575                           
 29576                           ; BSR set to: 1
 29577                           ;main.c: 175: LATC1 = ~LATC1;
 29578  0004E6  728B               	btg	3979,1,c	;volatile
 29579                           
 29580                           ;main.c: 176: status_led_cnt = 0;
 29581  0004E8  6A28               	clrf	_status_led_cnt,c	;volatile
 29582  0004EA  6A29               	clrf	_status_led_cnt+1,c	;volatile
 29583                           
 29584                           ;main.c: 177: }
 29585  0004EC  D04D               	goto	i1l420
 29586  0004EE                     i1l11069:
 29587                           
 29588                           ; BSR set to: 1
 29589                           ;main.c: 178: else if ( ( 3 == ledFunctionality ) &&
 29590                           ;main.c: 179: ( status_led_cnt > 400 ) ) {
 29591  0004EE  5031               	movf	_ledFunctionality,w,c	;volatile
 29592  0004F0  0A03               	xorlw	3
 29593  0004F2  A4D8               	btfss	status,2,c
 29594  0004F4  D001               	goto	i1u1297_21
 29595  0004F6  D001               	goto	i1u1297_20
 29596  0004F8                     i1u1297_21:
 29597  0004F8  D009               	goto	i1l11075
 29598  0004FA                     i1u1297_20:
 29599  0004FA                     
 29600                           ; BSR set to: 1
 29601  0004FA  0E91               	movlw	145
 29602  0004FC  5C28               	subwf	_status_led_cnt,w,c	;volatile
 29603  0004FE  0E01               	movlw	1
 29604  000500  5829               	subwfb	_status_led_cnt+1,w,c	;volatile
 29605  000502  A0D8               	btfss	status,0,c
 29606  000504  D001               	goto	i1u1298_21
 29607  000506  D001               	goto	i1u1298_20
 29608  000508                     i1u1298_21:
 29609  000508  D001               	goto	i1l11075
 29610  00050A                     i1u1298_20:
 29611  00050A  D7ED               	goto	i1l11067
 29612  00050C                     i1l11075:
 29613                           
 29614                           ; BSR set to: 1
 29615                           ;main.c: 183: else if ( ( 4 == ledFunctionality ) &&
 29616                           ;main.c: 184: ( status_led_cnt > 100 ) ) {
 29617  00050C  5031               	movf	_ledFunctionality,w,c	;volatile
 29618  00050E  0A04               	xorlw	4
 29619  000510  A4D8               	btfss	status,2,c
 29620  000512  D001               	goto	i1u1299_21
 29621  000514  D001               	goto	i1u1299_20
 29622  000516                     i1u1299_21:
 29623  000516  D009               	goto	i1l11081
 29624  000518                     i1u1299_20:
 29625  000518                     
 29626                           ; BSR set to: 1
 29627  000518  0E65               	movlw	101
 29628  00051A  5C28               	subwf	_status_led_cnt,w,c	;volatile
 29629  00051C  0E00               	movlw	0
 29630  00051E  5829               	subwfb	_status_led_cnt+1,w,c	;volatile
 29631  000520  A0D8               	btfss	status,0,c
 29632  000522  D001               	goto	i1u1300_21
 29633  000524  D001               	goto	i1u1300_20
 29634  000526                     i1u1300_21:
 29635  000526  D001               	goto	i1l11081
 29636  000528                     i1u1300_20:
 29637  000528  D7DE               	goto	i1l11067
 29638  00052A                     i1l11081:
 29639                           
 29640                           ; BSR set to: 1
 29641                           ;main.c: 188: else if ( ( 5 == ledFunctionality ) &&
 29642                           ;main.c: 189: (status_led_cnt > 70)) {
 29643  00052A  5031               	movf	_ledFunctionality,w,c	;volatile
 29644  00052C  0A05               	xorlw	5
 29645  00052E  A4D8               	btfss	status,2,c
 29646  000530  D001               	goto	i1u1301_21
 29647  000532  D001               	goto	i1u1301_20
 29648  000534                     i1u1301_21:
 29649  000534  D009               	goto	i1l11087
 29650  000536                     i1u1301_20:
 29651  000536                     
 29652                           ; BSR set to: 1
 29653  000536  0E47               	movlw	71
 29654  000538  5C28               	subwf	_status_led_cnt,w,c	;volatile
 29655  00053A  0E00               	movlw	0
 29656  00053C  5829               	subwfb	_status_led_cnt+1,w,c	;volatile
 29657  00053E  A0D8               	btfss	status,0,c
 29658  000540  D001               	goto	i1u1302_21
 29659  000542  D001               	goto	i1u1302_20
 29660  000544                     i1u1302_21:
 29661  000544  D001               	goto	i1l11087
 29662  000546                     i1u1302_20:
 29663  000546  D7CF               	goto	i1l11067
 29664  000548                     i1l11087:
 29665                           
 29666                           ; BSR set to: 1
 29667                           ;main.c: 193: else if ( ( 6 == ledFunctionality ) &&
 29668                           ;main.c: 194: ( status_led_cnt > 40 ) ) {
 29669  000548  5031               	movf	_ledFunctionality,w,c	;volatile
 29670  00054A  0A06               	xorlw	6
 29671  00054C  A4D8               	btfss	status,2,c
 29672  00054E  D001               	goto	i1u1303_21
 29673  000550  D001               	goto	i1u1303_20
 29674  000552                     i1u1303_21:
 29675  000552  D009               	goto	i1l11093
 29676  000554                     i1u1303_20:
 29677  000554                     
 29678                           ; BSR set to: 1
 29679  000554  0E29               	movlw	41
 29680  000556  5C28               	subwf	_status_led_cnt,w,c	;volatile
 29681  000558  0E00               	movlw	0
 29682  00055A  5829               	subwfb	_status_led_cnt+1,w,c	;volatile
 29683  00055C  A0D8               	btfss	status,0,c
 29684  00055E  D001               	goto	i1u1304_21
 29685  000560  D001               	goto	i1u1304_20
 29686  000562                     i1u1304_21:
 29687  000562  D001               	goto	i1l11093
 29688  000564                     i1u1304_20:
 29689  000564  D7C0               	goto	i1l11067
 29690  000566                     i1l11093:
 29691                           
 29692                           ; BSR set to: 1
 29693                           ;main.c: 198: else if ( 1 == ledFunctionality ) {
 29694  000566  0431               	decf	_ledFunctionality,w,c	;volatile
 29695  000568  A4D8               	btfss	status,2,c
 29696  00056A  D001               	goto	i1u1305_21
 29697  00056C  D001               	goto	i1u1305_20
 29698  00056E                     i1u1305_21:
 29699  00056E  D004               	goto	i1l429
 29700  000570                     i1u1305_20:
 29701  000570                     
 29702                           ; BSR set to: 1
 29703                           ;main.c: 199: LATC1 = 1;
 29704  000570  828B               	bsf	3979,1,c	;volatile
 29705                           
 29706                           ;main.c: 200: status_led_cnt = 0;
 29707  000572  6A28               	clrf	_status_led_cnt,c	;volatile
 29708  000574  6A29               	clrf	_status_led_cnt+1,c	;volatile
 29709                           
 29710                           ;main.c: 201: }
 29711  000576  D008               	goto	i1l420
 29712  000578                     i1l429:
 29713                           
 29714                           ; BSR set to: 1
 29715                           ;main.c: 202: else if ( 0 == ledFunctionality ) {
 29716  000578  6631               	tstfsz	_ledFunctionality,c	;volatile
 29717  00057A  D001               	goto	i1u1306_21
 29718  00057C  D001               	goto	i1u1306_20
 29719  00057E                     i1u1306_21:
 29720  00057E  D004               	goto	i1l426
 29721  000580                     i1u1306_20:
 29722  000580                     
 29723                           ; BSR set to: 1
 29724                           ;main.c: 203: LATC1 = 0;
 29725  000580  928B               	bcf	3979,1,c	;volatile
 29726                           
 29727                           ;main.c: 204: status_led_cnt = 0;
 29728  000582  6A28               	clrf	_status_led_cnt,c	;volatile
 29729  000584  6A29               	clrf	_status_led_cnt+1,c	;volatile
 29730  000586  D000               	goto	i1l420
 29731  000588                     i1l426:
 29732  000588                     i1l420:
 29733                           
 29734                           ; BSR set to: 1
 29735                           ;main.c: 205: }
 29736                           ;main.c: 207: INTCONbits.TMR0IF = 0;
 29737  000588  94F2               	bcf	intcon,2,c	;volatile
 29738  00058A                     i1l417:
 29739                           
 29740                           ;main.c: 208: }
 29741                           ;main.c: 211: if ( 1 == ERRIF ) {
 29742  00058A  AAA4               	btfss	4004,5,c	;volatile
 29743  00058C  D001               	goto	i1u1307_21
 29744  00058E  D001               	goto	i1u1307_20
 29745  000590                     i1u1307_21:
 29746  000590  D02A               	goto	i1l11119
 29747  000592                     i1u1307_20:
 29748  000592                     
 29749                           ;main.c: 214: if ( COMSTATbits.RXBnOVFL ) {
 29750  000592  AC74               	btfss	3956,6,c	;volatile
 29751  000594  D001               	goto	i1u1308_21
 29752  000596  D001               	goto	i1u1308_20
 29753  000598                     i1u1308_21:
 29754  000598  D00A               	goto	i1l11105
 29755  00059A                     i1u1308_20:
 29756  00059A                     
 29757                           ;main.c: 215: can_receiveOverruns++;
 29758  00059A  0E01               	movlw	1
 29759  00059C  0101               	movlb	1	; () banked
 29760  00059E  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 29761  0005A0  0E00               	movlw	0
 29762  0005A2  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 29763  0005A4  0E00               	movlw	0
 29764  0005A6  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 29765  0005A8  0E00               	movlw	0
 29766  0005AA  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 29767  0005AC                     
 29768                           ; BSR set to: 1
 29769                           ;main.c: 216: COMSTATbits.RXBnOVFL = 0;
 29770  0005AC  9C74               	bcf	3956,6,c	;volatile
 29771  0005AE                     i1l11105:
 29772                           
 29773                           ;main.c: 217: }
 29774                           ;main.c: 220: if ( COMSTATbits.TXBO ) {
 29775  0005AE  AA74               	btfss	3956,5,c	;volatile
 29776  0005B0  D001               	goto	i1u1309_21
 29777  0005B2  D001               	goto	i1u1309_20
 29778  0005B4                     i1u1309_21:
 29779  0005B4  D003               	goto	i1l434
 29780  0005B6                     i1u1309_20:
 29781  0005B6                     
 29782                           ;main.c: 222: ledFunctionality = 6;
 29783  0005B6  0E06               	movlw	6
 29784  0005B8  6E31               	movwf	_ledFunctionality,c	;volatile
 29785                           
 29786                           ;main.c: 223: }
 29787  0005BA  D014               	goto	i1l11117
 29788  0005BC                     i1l434:
 29789                           
 29790                           ;main.c: 224: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 29791  0005BC  B874               	btfsc	3956,4,c	;volatile
 29792  0005BE  D001               	goto	i1u1310_21
 29793  0005C0  D001               	goto	i1u1310_20
 29794  0005C2                     i1u1310_21:
 29795  0005C2  D004               	goto	i1l11111
 29796  0005C4                     i1u1310_20:
 29797  0005C4  A674               	btfss	3956,3,c	;volatile
 29798  0005C6  D001               	goto	i1u1311_21
 29799  0005C8  D001               	goto	i1u1311_20
 29800  0005CA                     i1u1311_21:
 29801  0005CA  D003               	goto	i1l436
 29802  0005CC                     i1u1311_20:
 29803  0005CC                     i1l11111:
 29804                           
 29805                           ;main.c: 226: ledFunctionality = 5;
 29806  0005CC  0E05               	movlw	5
 29807  0005CE  6E31               	movwf	_ledFunctionality,c	;volatile
 29808                           
 29809                           ;main.c: 227: }
 29810  0005D0  D009               	goto	i1l11117
 29811  0005D2                     i1l436:
 29812                           
 29813                           ;main.c: 228: else if ( COMSTATbits.EWARN ) {
 29814  0005D2  A074               	btfss	3956,0,c	;volatile
 29815  0005D4  D001               	goto	i1u1312_21
 29816  0005D6  D001               	goto	i1u1312_20
 29817  0005D8                     i1u1312_21:
 29818  0005D8  D003               	goto	i1l11115
 29819  0005DA                     i1u1312_20:
 29820  0005DA                     
 29821                           ;main.c: 230: ledFunctionality = 4;
 29822  0005DA  0E04               	movlw	4
 29823  0005DC  6E31               	movwf	_ledFunctionality,c	;volatile
 29824                           
 29825                           ;main.c: 231: }
 29826  0005DE  D002               	goto	i1l11117
 29827  0005E0                     i1l11115:
 29828                           
 29829                           ;main.c: 232: else {
 29830                           ;main.c: 234: ledFunctionality = 1;
 29831  0005E0  0E01               	movlw	1
 29832  0005E2  6E31               	movwf	_ledFunctionality,c	;volatile
 29833  0005E4                     i1l11117:
 29834                           
 29835                           ;main.c: 235: }
 29836                           ;main.c: 237: ERRIF = 0;
 29837  0005E4  9AA4               	bcf	4004,5,c	;volatile
 29838  0005E6                     i1l11119:
 29839                           
 29840                           ;main.c: 238: }
 29841                           ;main.c: 241: if ( RXBnIF ) {
 29842  0005E6  A2A4               	btfss	4004,1,c	;volatile
 29843  0005E8  D001               	goto	i1u1313_21
 29844  0005EA  D001               	goto	i1u1313_20
 29845  0005EC                     i1u1313_21:
 29846  0005EC  D0A1               	goto	i1l454
 29847  0005EE                     i1u1313_20:
 29848  0005EE                     
 29849                           ;main.c: 243: if ( ECANReceiveMessage((unsigned long *)&id,
 29850                           ;main.c: 244: (BYTE*)&data,
 29851                           ;main.c: 245: (BYTE*)&dlc,
 29852                           ;main.c: 246: &flags) ) {
 29853  0005EE  0101               	movlb	1	; () banked
 29854  0005F0  0E01               	movlw	high _data
 29855  0005F2  6E09               	movwf	?_ECANReceiveMessage+1,c
 29856  0005F4  0ED5               	movlw	low _data
 29857  0005F6  6E08               	movwf	?_ECANReceiveMessage,c
 29858  0005F8  0E3C               	movlw	low _dlc
 29859  0005FA  6E0A               	movwf	?_ECANReceiveMessage+2,c
 29860  0005FC  0E3D               	movlw	low _flags
 29861  0005FE  6E0B               	movwf	?_ECANReceiveMessage+3,c
 29862  000600  0E36               	movlw	_id& (0+255)
 29863  000602  EC35  F01D         	call	_ECANReceiveMessage
 29864  000606  0900               	iorlw	0
 29865  000608  B4D8               	btfsc	status,2,c
 29866  00060A  D001               	goto	i1u1314_21
 29867  00060C  D001               	goto	i1u1314_20
 29868  00060E                     i1u1314_21:
 29869  00060E  D08F               	goto	i1l11155
 29870  000610                     i1u1314_20:
 29871  000610                     
 29872                           ;main.c: 249: if ( flags & ECAN_RX_OVERFLOW ) {
 29873  000610  A63D               	btfss	_flags,3,c
 29874  000612  D001               	goto	i1u1315_21
 29875  000614  D001               	goto	i1u1315_20
 29876  000616                     i1u1315_21:
 29877  000616  D00E               	goto	i1l444
 29878  000618                     i1u1315_20:
 29879  000618                     
 29880                           ;main.c: 250: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 29881  000618  AA3D               	btfss	_flags,5,c
 29882  00061A  D001               	goto	i1u1316_21
 29883  00061C  D001               	goto	i1u1316_20
 29884  00061E                     i1u1316_21:
 29885  00061E  D087               	goto	i1l11155
 29886  000620                     i1u1316_20:
 29887  000620                     i1l11127:
 29888  000620  0E01               	movlw	1
 29889  000622  0101               	movlb	1	; () banked
 29890  000624  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 29891  000626  0E00               	movlw	0
 29892  000628  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 29893  00062A  0E00               	movlw	0
 29894  00062C  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 29895  00062E  0E00               	movlw	0
 29896  000630  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 29897  000632  D07D               	goto	i1l11155
 29898  000634                     i1l444:
 29899                           
 29900                           ;main.c: 252: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 29901                           ;main.c: 253: ( flags & ECAN_RX_XTD_FRAME ) ) {
 29902  000634  BC3D               	btfsc	_flags,6,c
 29903  000636  D001               	goto	i1u1317_21
 29904  000638  D001               	goto	i1u1317_20
 29905  00063A                     i1u1317_21:
 29906  00063A  D079               	goto	i1l11155
 29907  00063C                     i1u1317_20:
 29908  00063C  AA3D               	btfss	_flags,5,c
 29909  00063E  D001               	goto	i1u1318_21
 29910  000640  D001               	goto	i1u1318_20
 29911  000642                     i1u1318_21:
 29912  000642  D075               	goto	i1l11155
 29913  000644                     i1u1318_20:
 29914  000644                     
 29915                           ;main.c: 255: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 29916  000644  503C               	movf	_dlc,w,c
 29917  000646  6E14               	movwf	??_Interrupt& (0+255),c
 29918  000648  6A15               	clrf	(??_Interrupt+1)& (0+255),c
 29919  00064A  0E05               	movlw	5
 29920  00064C  2614               	addwf	??_Interrupt,f,c
 29921  00064E  0E00               	movlw	0
 29922  000650  2215               	addwfc	??_Interrupt+1,f,c
 29923  000652  0101               	movlb	1	; () banked
 29924  000654  0E01               	movlw	high _canInputFifo
 29925  000656  6E02               	movwf	?i1_fifo_getFree+1,c
 29926  000658  0ECD               	movlw	low _canInputFifo
 29927  00065A  6E01               	movwf	?i1_fifo_getFree,c
 29928  00065C  EC1F  F02C         	call	i1_fifo_getFree	;wreg free
 29929  000660  5014               	movf	??_Interrupt,w,c
 29930  000662  5C01               	subwf	?i1_fifo_getFree,w,c
 29931  000664  5015               	movf	??_Interrupt+1,w,c
 29932  000666  5802               	subwfb	?i1_fifo_getFree+1,w,c
 29933  000668  A0D8               	btfss	status,0,c
 29934  00066A  D001               	goto	i1u1319_21
 29935  00066C  D001               	goto	i1u1319_20
 29936  00066E                     i1u1319_21:
 29937  00066E  D7D8               	goto	i1l11127
 29938  000670                     i1u1319_20:
 29939  000670                     
 29940                           ; BSR set to: 1
 29941                           ;main.c: 256: uint8_t fail = 0;
 29942  000670  6A1E               	clrf	Interrupt@fail,c
 29943  000672                     
 29944                           ; BSR set to: 1
 29945                           ;main.c: 257: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 29946  000672  0E01               	movlw	high _canInputFifo
 29947  000674  6E02               	movwf	?_fifo_write+1,c
 29948  000676  0ECD               	movlw	low _canInputFifo
 29949  000678  6E01               	movwf	?_fifo_write,c
 29950  00067A  0E36               	movlw	low _id
 29951  00067C  6E03               	movwf	?_fifo_write+2,c
 29952  00067E  0E00               	movlw	high _id
 29953  000680  6E04               	movwf	?_fifo_write+3,c
 29954  000682  0E0F               	movlw	15
 29955  000684  6E04               	movwf	?_fifo_write+3,c
 29956  000686  0E5F               	movlw	__accesstop+-1
 29957  000688  6403               	cpfsgt	?_fifo_write+2,c
 29958  00068A  6A04               	clrf	?_fifo_write+3,c
 29959  00068C  0E04               	movlw	4
 29960  00068E  6E05               	movwf	?_fifo_write+4,c
 29961  000690  0E00               	movlw	0
 29962  000692  6E06               	movwf	?_fifo_write+5,c
 29963  000694  0E00               	movlw	0
 29964  000696  6E07               	movwf	?_fifo_write+6,c
 29965  000698  0E00               	movlw	0
 29966  00069A  6E08               	movwf	?_fifo_write+7,c
 29967  00069C  ECC4  F023         	call	_fifo_write	;wreg free
 29968  0006A0  5001               	movf	?_fifo_write,w,c
 29969  0006A2  0A04               	xorlw	4
 29970  0006A4  1002               	iorwf	?_fifo_write+1,w,c
 29971  0006A6  B4D8               	btfsc	status,2,c
 29972  0006A8  D001               	goto	i1u1320_21
 29973  0006AA  D001               	goto	i1u1320_20
 29974  0006AC                     i1u1320_21:
 29975  0006AC  D002               	goto	i1l11139
 29976  0006AE                     i1u1320_20:
 29977  0006AE                     
 29978                           ; BSR set to: 1
 29979                           ;main.c: 258: fail = 1;
 29980  0006AE  0E01               	movlw	1
 29981  0006B0  6E1E               	movwf	Interrupt@fail,c
 29982  0006B2                     i1l11139:
 29983                           
 29984                           ; BSR set to: 1
 29985                           ;main.c: 259: }
 29986                           ;main.c: 260: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 29987  0006B2  0E01               	movlw	high _canInputFifo
 29988  0006B4  6E02               	movwf	?_fifo_write+1,c
 29989  0006B6  0ECD               	movlw	low _canInputFifo
 29990  0006B8  6E01               	movwf	?_fifo_write,c
 29991  0006BA  0E3C               	movlw	low _dlc
 29992  0006BC  6E03               	movwf	?_fifo_write+2,c
 29993  0006BE  0E00               	movlw	high _dlc
 29994  0006C0  6E04               	movwf	?_fifo_write+3,c
 29995  0006C2  0E0F               	movlw	15
 29996  0006C4  6E04               	movwf	?_fifo_write+3,c
 29997  0006C6  0E5F               	movlw	__accesstop+-1
 29998  0006C8  6403               	cpfsgt	?_fifo_write+2,c
 29999  0006CA  6A04               	clrf	?_fifo_write+3,c
 30000  0006CC  0E01               	movlw	1
 30001  0006CE  6E05               	movwf	?_fifo_write+4,c
 30002  0006D0  0E00               	movlw	0
 30003  0006D2  6E06               	movwf	?_fifo_write+5,c
 30004  0006D4  0E00               	movlw	0
 30005  0006D6  6E07               	movwf	?_fifo_write+6,c
 30006  0006D8  0E00               	movlw	0
 30007  0006DA  6E08               	movwf	?_fifo_write+7,c
 30008  0006DC  ECC4  F023         	call	_fifo_write	;wreg free
 30009  0006E0  0401               	decf	?_fifo_write,w,c
 30010  0006E2  1002               	iorwf	?_fifo_write+1,w,c
 30011  0006E4  B4D8               	btfsc	status,2,c
 30012  0006E6  D001               	goto	i1u1321_21
 30013  0006E8  D001               	goto	i1u1321_20
 30014  0006EA                     i1u1321_21:
 30015  0006EA  D002               	goto	i1l11143
 30016  0006EC                     i1u1321_20:
 30017  0006EC                     
 30018                           ; BSR set to: 1
 30019                           ;main.c: 261: fail = 1;
 30020  0006EC  0E01               	movlw	1
 30021  0006EE  6E1E               	movwf	Interrupt@fail,c
 30022  0006F0                     i1l11143:
 30023                           
 30024                           ; BSR set to: 1
 30025                           ;main.c: 262: }
 30026                           ;main.c: 263: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 30027  0006F0  0E01               	movlw	high _canInputFifo
 30028  0006F2  6E02               	movwf	?_fifo_write+1,c
 30029  0006F4  0ECD               	movlw	low _canInputFifo
 30030  0006F6  6E01               	movwf	?_fifo_write,c
 30031  0006F8  0E01               	movlw	high _data
 30032  0006FA  6E04               	movwf	?_fifo_write+3,c
 30033  0006FC  0ED5               	movlw	low _data
 30034  0006FE  6E03               	movwf	?_fifo_write+2,c
 30035  000700  503C               	movf	_dlc,w,c
 30036  000702  6E05               	movwf	?_fifo_write+4,c
 30037  000704  6A06               	clrf	?_fifo_write+5,c
 30038  000706  6A07               	clrf	?_fifo_write+6,c
 30039  000708  6A08               	clrf	?_fifo_write+7,c
 30040  00070A  ECC4  F023         	call	_fifo_write	;wreg free
 30041  00070E  503C               	movf	_dlc,w,c
 30042  000710  1801               	xorwf	?_fifo_write,w,c
 30043  000712  1002               	iorwf	?_fifo_write+1,w,c
 30044  000714  B4D8               	btfsc	status,2,c
 30045  000716  D001               	goto	i1u1322_21
 30046  000718  D001               	goto	i1u1322_20
 30047  00071A                     i1u1322_21:
 30048  00071A  D002               	goto	i1l11147
 30049  00071C                     i1u1322_20:
 30050  00071C                     
 30051                           ; BSR set to: 1
 30052                           ;main.c: 264: fail = 1;
 30053  00071C  0E01               	movlw	1
 30054  00071E  6E1E               	movwf	Interrupt@fail,c
 30055  000720                     i1l11147:
 30056                           
 30057                           ; BSR set to: 1
 30058                           ;main.c: 265: }
 30059                           ;main.c: 267: fifo_canrxcount++;
 30060  000720  2A30               	incf	_fifo_canrxcount,f,c	;volatile
 30061  000722                     
 30062                           ; BSR set to: 1
 30063                           ;main.c: 269: if ( fail ) {
 30064  000722  501E               	movf	Interrupt@fail,w,c
 30065  000724  B4D8               	btfsc	status,2,c
 30066  000726  D001               	goto	i1u1323_21
 30067  000728  D001               	goto	i1u1323_20
 30068  00072A                     i1u1323_21:
 30069  00072A  D001               	goto	i1l11155
 30070  00072C                     i1u1323_20:
 30071  00072C  D779               	goto	i1l11127
 30072  00072E                     i1l11155:
 30073                           
 30074                           ;main.c: 276: }
 30075                           ;main.c: 278: }
 30076                           ;main.c: 280: }
 30077                           ;main.c: 283: RXBnIF = 0;
 30078  00072E  92A4               	bcf	4004,1,c	;volatile
 30079  000730                     i1l454:
 30080  000730  C01C  FFDA         	movff	??_Interrupt+8,fsr2h
 30081  000734  C01B  FFD9         	movff	??_Interrupt+7,fsr2l
 30082  000738  C01A  FFE2         	movff	??_Interrupt+6,fsr1h
 30083  00073C  C019  FFE1         	movff	??_Interrupt+5,fsr1l
 30084  000740  C018  FFE0         	movff	??_Interrupt+4,bsr
 30085  000744  C017  FFE8         	movff	??_Interrupt+3,wreg
 30086  000748  C016  FFD8         	movff	??_Interrupt+2,status
 30087  00074C  0010               	retfie	
 30088  00074E                     __end_of_Interrupt:
 30089                           	opt stack 0
 30090                           tblptru	equ	0xFF8
 30091                           tblptrh	equ	0xFF7
 30092                           tblptrl	equ	0xFF6
 30093                           tablat	equ	0xFF5
 30094                           prodh	equ	0xFF4
 30095                           prodl	equ	0xFF3
 30096                           intcon	equ	0xFF2
 30097                           indf0	equ	0xFEF
 30098                           postinc0	equ	0xFEE
 30099                           fsr0h	equ	0xFEA
 30100                           fsr0l	equ	0xFE9
 30101                           wreg	equ	0xFE8
 30102                           indf1	equ	0xFE7
 30103                           postinc1	equ	0xFE6
 30104                           postdec1	equ	0xFE5
 30105                           fsr1h	equ	0xFE2
 30106                           fsr1l	equ	0xFE1
 30107                           bsr	equ	0xFE0
 30108                           indf2	equ	0xFDF
 30109                           postinc2	equ	0xFDE
 30110                           postdec2	equ	0xFDD
 30111                           plusw2	equ	0xFDB
 30112                           fsr2h	equ	0xFDA
 30113                           fsr2l	equ	0xFD9
 30114                           status	equ	0xFD8
 30115                           
 30116 ;; *************** function i1_WriteTimer0 *****************
 30117 ;; Defined at:
 30118 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 30119 ;; Parameters:    Size  Location     Type
 30120 ;;  timer0          2    0[COMRAM] unsigned int 
 30121 ;; Auto vars:     Size  Location     Type
 30122 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 30123 ;; Return value:  Size  Location     Type
 30124 ;;		None               void
 30125 ;; Registers used:
 30126 ;;		None
 30127 ;; Tracked objects:
 30128 ;;		On entry : 0/0
 30129 ;;		On exit  : 0/0
 30130 ;;		Unchanged: 0/0
 30131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30132 ;;      Params:         2       0       0       0       0       0       0
 30133 ;;      Locals:         2       0       0       0       0       0       0
 30134 ;;      Temps:          0       0       0       0       0       0       0
 30135 ;;      Totals:         4       0       0       0       0       0       0
 30136 ;;Total ram usage:        4 bytes
 30137 ;; Hardware stack levels used:    1
 30138 ;; This function calls:
 30139 ;;		Nothing
 30140 ;; This function is called by:
 30141 ;;		_Interrupt
 30142 ;; This function uses a non-reentrant model
 30143 ;;
 30144                           
 30145                           	psect	text88
 30146  006920                     __ptext88:
 30147                           	opt stack 0
 30148  006920                     i1_WriteTimer0:
 30149                           	opt stack 21
 30150                           
 30151                           ;incstack = 0
 30152                           ;incstack = 0
 30153  006920  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 30154  006924  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 30155  006928  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 30156  00692C  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 30157  006930  0012               	return	
 30158  006932                     __end_ofi1_WriteTimer0:
 30159                           	opt stack 0
 30160                           tblptru	equ	0xFF8
 30161                           tblptrh	equ	0xFF7
 30162                           tblptrl	equ	0xFF6
 30163                           tablat	equ	0xFF5
 30164                           prodh	equ	0xFF4
 30165                           prodl	equ	0xFF3
 30166                           intcon	equ	0xFF2
 30167                           indf0	equ	0xFEF
 30168                           postinc0	equ	0xFEE
 30169                           fsr0h	equ	0xFEA
 30170                           fsr0l	equ	0xFE9
 30171                           wreg	equ	0xFE8
 30172                           indf1	equ	0xFE7
 30173                           postinc1	equ	0xFE6
 30174                           postdec1	equ	0xFE5
 30175                           fsr1h	equ	0xFE2
 30176                           fsr1l	equ	0xFE1
 30177                           bsr	equ	0xFE0
 30178                           indf2	equ	0xFDF
 30179                           postinc2	equ	0xFDE
 30180                           postdec2	equ	0xFDD
 30181                           plusw2	equ	0xFDB
 30182                           fsr2h	equ	0xFDA
 30183                           fsr2l	equ	0xFD9
 30184                           status	equ	0xFD8
 30185                           
 30186 ;; *************** function i1_fifo_getFree *****************
 30187 ;; Defined at:
 30188 ;;		line 97 in file "fifo.c"
 30189 ;; Parameters:    Size  Location     Type
 30190 ;;  f               2    0[COMRAM] PTR struct .
 30191 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 30192 ;; Auto vars:     Size  Location     Type
 30193 ;;		None
 30194 ;; Return value:  Size  Location     Type
 30195 ;;                  2    0[COMRAM] unsigned short 
 30196 ;; Registers used:
 30197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 30198 ;; Tracked objects:
 30199 ;;		On entry : F/1
 30200 ;;		On exit  : F/1
 30201 ;;		Unchanged: F/0
 30202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30203 ;;      Params:         2       0       0       0       0       0       0
 30204 ;;      Locals:         0       0       0       0       0       0       0
 30205 ;;      Temps:          8       0       0       0       0       0       0
 30206 ;;      Totals:        10       0       0       0       0       0       0
 30207 ;;Total ram usage:       10 bytes
 30208 ;; Hardware stack levels used:    1
 30209 ;; This function calls:
 30210 ;;		Nothing
 30211 ;; This function is called by:
 30212 ;;		_Interrupt
 30213 ;; This function uses a non-reentrant model
 30214 ;;
 30215                           
 30216                           	psect	text89
 30217  00583E                     __ptext89:
 30218                           	opt stack 0
 30219  00583E                     i1_fifo_getFree:
 30220                           	opt stack 21
 30221                           
 30222                           ; BSR set to: 1
 30223                           ;fifo.c: 98: if (f->head < f->tail) {
 30224                           
 30225                           ;incstack = 0
 30226                           ;incstack = 0
 30227  00583E  EE20 F004          	lfsr	2,4
 30228  005842  5001               	movf	i1fifo_getFree@f,w,c
 30229  005844  26D9               	addwf	fsr2l,f,c
 30230  005846  5002               	movf	i1fifo_getFree@f+1,w,c
 30231  005848  22DA               	addwfc	fsr2h,f,c
 30232  00584A  EE10 F002          	lfsr	1,2
 30233  00584E  5001               	movf	i1fifo_getFree@f,w,c
 30234  005850  26E1               	addwf	fsr1l,f,c
 30235  005852  5002               	movf	i1fifo_getFree@f+1,w,c
 30236  005854  22E2               	addwfc	fsr1h,f,c
 30237  005856  52E6               	movf	postinc1,f,c
 30238  005858  52DE               	movf	postinc2,f,c
 30239  00585A  50DD               	movf	postdec2,w,c
 30240  00585C  5CE5               	subwf	postdec1,w,c
 30241  00585E  E102               	bnz	i1u1262_25
 30242  005860  50DF               	movf	indf2,w,c
 30243  005862  5CE7               	subwf	indf1,w,c
 30244  005864                     i1u1262_25:
 30245  005864  E213               	bc	i1l10897
 30246                           
 30247                           ; BSR set to: 1
 30248                           ;fifo.c: 99: return (f->tail - f->head);
 30249  005866  EE20 F002          	lfsr	2,2
 30250  00586A  D834               	call	PL92	;call to abstracted procedure
 30251  00586C  EE20 F004          	lfsr	2,4
 30252  005870  5001               	movf	i1fifo_getFree@f,w,c
 30253  005872  26D9               	addwf	fsr2l,f,c
 30254  005874  5002               	movf	i1fifo_getFree@f+1,w,c
 30255  005876  22DA               	addwfc	fsr2h,f,c
 30256  005878  CFDE F005          	movff	postinc2,??i1_fifo_getFree+2
 30257  00587C  CFDD F006          	movff	postdec2,??i1_fifo_getFree+3
 30258  005880  5003               	movf	??i1_fifo_getFree,w,c
 30259  005882  5C05               	subwf	??i1_fifo_getFree+2,w,c
 30260  005884  6E01               	movwf	?i1_fifo_getFree,c
 30261  005886  5004               	movf	??i1_fifo_getFree+1,w,c
 30262  005888  5806               	subwfb	??i1_fifo_getFree+3,w,c
 30263  00588A  D022               	goto	L51
 30264  00588C                     i1l10897:
 30265                           
 30266                           ; BSR set to: 1
 30267                           ;fifo.c: 101: else {
 30268                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 30269  00588C  EE20 F004          	lfsr	2,4
 30270  005890  D821               	call	PL92	;call to abstracted procedure
 30271  005892  EE20 F002          	lfsr	2,2
 30272  005896  5001               	movf	i1fifo_getFree@f,w,c
 30273  005898  26D9               	addwf	fsr2l,f,c
 30274  00589A  5002               	movf	i1fifo_getFree@f+1,w,c
 30275  00589C  22DA               	addwfc	fsr2h,f,c
 30276  00589E  CFDE F005          	movff	postinc2,??i1_fifo_getFree+2
 30277  0058A2  CFDD F006          	movff	postdec2,??i1_fifo_getFree+3
 30278  0058A6  EE20 F006          	lfsr	2,6
 30279  0058AA  5001               	movf	i1fifo_getFree@f,w,c
 30280  0058AC  26D9               	addwf	fsr2l,f,c
 30281  0058AE  5002               	movf	i1fifo_getFree@f+1,w,c
 30282  0058B0  22DA               	addwfc	fsr2h,f,c
 30283  0058B2  CFDE F007          	movff	postinc2,??i1_fifo_getFree+4
 30284  0058B6  CFDD F008          	movff	postdec2,??i1_fifo_getFree+5
 30285  0058BA  5005               	movf	??i1_fifo_getFree+2,w,c
 30286  0058BC  5C07               	subwf	??i1_fifo_getFree+4,w,c
 30287  0058BE  6E09               	movwf	(??i1_fifo_getFree+6)& (0+255),c
 30288  0058C0  5006               	movf	??i1_fifo_getFree+3,w,c
 30289  0058C2  5808               	subwfb	??i1_fifo_getFree+5,w,c
 30290  0058C4  6E0A               	movwf	(??i1_fifo_getFree+7)& (0+255),c
 30291  0058C6  5003               	movf	??i1_fifo_getFree,w,c
 30292  0058C8  2409               	addwf	??i1_fifo_getFree+6,w,c
 30293  0058CA  6E01               	movwf	?i1_fifo_getFree,c
 30294  0058CC  5004               	movf	??i1_fifo_getFree+1,w,c
 30295  0058CE  200A               	addwfc	??i1_fifo_getFree+7,w,c
 30296  0058D0                     L51:
 30297  0058D0  6E02               	movwf	?i1_fifo_getFree+1,c
 30298                           
 30299                           ; BSR set to: 1
 30300  0058D2  0012               	return	
 30301  0058D4                     __end_ofi1_fifo_getFree:
 30302                           	opt stack 0
 30303  0058D4                     PL92:
 30304                           	opt stack 21
 30305  0058D4  5001               	movf	i1fifo_getFree@f,w,c
 30306  0058D6  26D9               	addwf	fsr2l,f,c
 30307  0058D8  5002               	movf	i1fifo_getFree@f+1,w,c
 30308  0058DA  22DA               	addwfc	fsr2h,f,c
 30309  0058DC  CFDE F003          	movff	postinc2,??i1_fifo_getFree
 30310  0058E0  CFDD F004          	movff	postdec2,??i1_fifo_getFree+1
 30311  0058E4  0012               	return	
 30312  0058E6                     __end_ofPL92:
 30313                           	opt stack 0
 30314                           tblptru	equ	0xFF8
 30315                           tblptrh	equ	0xFF7
 30316                           tblptrl	equ	0xFF6
 30317                           tablat	equ	0xFF5
 30318                           prodh	equ	0xFF4
 30319                           prodl	equ	0xFF3
 30320                           intcon	equ	0xFF2
 30321                           indf0	equ	0xFEF
 30322                           postinc0	equ	0xFEE
 30323                           fsr0h	equ	0xFEA
 30324                           fsr0l	equ	0xFE9
 30325                           wreg	equ	0xFE8
 30326                           indf1	equ	0xFE7
 30327                           postinc1	equ	0xFE6
 30328                           postdec1	equ	0xFE5
 30329                           fsr1h	equ	0xFE2
 30330                           fsr1l	equ	0xFE1
 30331                           bsr	equ	0xFE0
 30332                           indf2	equ	0xFDF
 30333                           postinc2	equ	0xFDE
 30334                           postdec2	equ	0xFDD
 30335                           plusw2	equ	0xFDB
 30336                           fsr2h	equ	0xFDA
 30337                           fsr2l	equ	0xFD9
 30338                           status	equ	0xFD8
 30339                           
 30340 ;; *************** function _ECANReceiveMessage *****************
 30341 ;; Defined at:
 30342 ;;		line 803 in file "ECAN.c"
 30343 ;; Parameters:    Size  Location     Type
 30344 ;;  id              1    wreg     PTR unsigned long 
 30345 ;;		 -> id(4), 
 30346 ;;  data            2    7[COMRAM] PTR unsigned char 
 30347 ;;		 -> data(8), 
 30348 ;;  dataLen         1    9[COMRAM] PTR unsigned char 
 30349 ;;		 -> dlc(1), 
 30350 ;;  msgFlags        1   10[COMRAM] PTR enum E16324
 30351 ;;		 -> flags(1), 
 30352 ;; Auto vars:     Size  Location     Type
 30353 ;;  id              1   13[COMRAM] PTR unsigned long 
 30354 ;;		 -> id(4), 
 30355 ;;  ptr             2   17[COMRAM] PTR unsigned char 
 30356 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30357 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30358 ;;  savedPtr        2   11[COMRAM] PTR unsigned char 
 30359 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30360 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30361 ;;  temp            1   16[COMRAM] struct .
 30362 ;;  mode            1   15[COMRAM] unsigned char 
 30363 ;;  i               1   14[COMRAM] unsigned char 
 30364 ;; Return value:  Size  Location     Type
 30365 ;;                  1    wreg      enum E15660
 30366 ;; Registers used:
 30367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 30368 ;; Tracked objects:
 30369 ;;		On entry : F/1
 30370 ;;		On exit  : 0/0
 30371 ;;		Unchanged: 0/0
 30372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30373 ;;      Params:         4       0       0       0       0       0       0
 30374 ;;      Locals:         8       0       0       0       0       0       0
 30375 ;;      Temps:          0       0       0       0       0       0       0
 30376 ;;      Totals:        12       0       0       0       0       0       0
 30377 ;;Total ram usage:       12 bytes
 30378 ;; Hardware stack levels used:    1
 30379 ;; Hardware stack levels required when called:    1
 30380 ;; This function calls:
 30381 ;;		__ECANPointBuffer
 30382 ;;		__RegsToCANID
 30383 ;; This function is called by:
 30384 ;;		_Interrupt
 30385 ;; This function uses a non-reentrant model
 30386 ;;
 30387                           
 30388                           	psect	text90
 30389  003A6A                     __ptext90:
 30390                           	opt stack 0
 30391  003A6A                     _ECANReceiveMessage:
 30392                           	opt stack 20
 30393                           
 30394                           ; BSR set to: 1
 30395                           ;incstack = 0
 30396                           ;incstack = 0
 30397                           ;ECANReceiveMessage@id stored from wreg
 30398  003A6A  CFE8 F00E          	movff	wreg,ECANReceiveMessage@id
 30399                           
 30400                           ; BSR set to: 1
 30401                           ;ECAN.c: 805: BYTE mode;
 30402                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 30403                           ;ECAN.c: 809: char i;
 30404                           ;ECAN.c: 810: BYTE_VAL temp;
 30405                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 30406  003A6E  6B27               	clrf	__ECANRxFilterHitInfo& (0+255),b
 30407                           
 30408                           ; BSR set to: 1
 30409                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 30410  003A70  5077               	movf	3959,w,c	;volatile
 30411  003A72  0BC0               	andlw	192
 30412  003A74  6E10               	movwf	ECANReceiveMessage@mode,c
 30413                           
 30414                           ; BSR set to: 1
 30415                           ;ECAN.c: 816: if ( mode == 0x00 )
 30416  003A76  6610               	tstfsz	ECANReceiveMessage@mode,c
 30417  003A78  D035               	goto	i1l10941
 30418                           
 30419                           ; BSR set to: 1
 30420                           ;ECAN.c: 822: {
 30421                           ;ECAN.c: 824: if ( RXB0FUL )
 30422  003A7A  AE60               	btfss	3936,7,c	;volatile
 30423  003A7C  D013               	goto	i1l1600
 30424                           
 30425                           ; BSR set to: 1
 30426                           ;ECAN.c: 825: {
 30427                           ;ECAN.c: 827: RXB0IF = 0;
 30428  003A7E  90A4               	bcf	4004,0,c	;volatile
 30429                           
 30430                           ;ECAN.c: 830: if ( RXB0OVFL )
 30431  003A80  AE74               	btfss	3956,7,c	;volatile
 30432  003A82  D006               	goto	i1l10917
 30433                           
 30434                           ; BSR set to: 1
 30435                           ;ECAN.c: 831: {
 30436                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 30437  003A84  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30438  003A86  6ED9               	movwf	fsr2l,c
 30439  003A88  6ADA               	clrf	fsr2h,c
 30440  003A8A  0E00               	movlw	0
 30441  003A8C  86DB               	bsf	plusw2,3,c
 30442                           
 30443                           ; BSR set to: 1
 30444                           ;ECAN.c: 833: RXB0OVFL = 0;
 30445  003A8E  9E74               	bcf	3956,7,c	;volatile
 30446  003A90                     i1l10917:
 30447                           
 30448                           ; BSR set to: 1
 30449                           ;ECAN.c: 834: }
 30450                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 30451  003A90  A060               	btfss	3936,0,c	;volatile
 30452  003A92  D002               	bra	i1u1266_25
 30453  003A94  8127               	bsf	__ECANRxFilterHitInfo& (0+255),0,b
 30454  003A96  D002               	bra	i1u1266_27
 30455  003A98                     i1u1266_25:
 30456  003A98  0101               	movlb	1	; () banked
 30457  003A9A  9127               	bcf	__ECANRxFilterHitInfo& (0+255),0,b
 30458  003A9C                     i1u1266_27:
 30459                           
 30460                           ; BSR set to: 1
 30461                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 30462  003A9C  0E0F               	movlw	15	;volatile
 30463  003A9E  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30464  003AA0  0E60               	movlw	96	;volatile
 30465  003AA2  D01C               	goto	L52
 30466  003AA4                     i1l1600:
 30467                           
 30468                           ; BSR set to: 1
 30469                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 30470  003AA4  010F               	movlb	15	; () banked
 30471  003AA6  AF50               	btfss	80,7,b	;volatile
 30472  003AA8  D01B               	goto	i1l10935
 30473                           
 30474                           ; BSR set to: 15
 30475                           ;ECAN.c: 842: {
 30476                           ;ECAN.c: 844: RXB1IF = 0;
 30477  003AAA  92A4               	bcf	4004,1,c	;volatile
 30478                           
 30479                           ;ECAN.c: 847: if ( RXB1OVFL )
 30480  003AAC  AC74               	btfss	3956,6,c	;volatile
 30481  003AAE  D006               	goto	i1l10927
 30482                           
 30483                           ; BSR set to: 15
 30484                           ;ECAN.c: 848: {
 30485                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 30486  003AB0  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30487  003AB2  6ED9               	movwf	fsr2l,c
 30488  003AB4  6ADA               	clrf	fsr2h,c
 30489  003AB6  0E00               	movlw	0
 30490  003AB8  86DB               	bsf	plusw2,3,c
 30491                           
 30492                           ; BSR set to: 15
 30493                           ;ECAN.c: 850: RXB1OVFL = 0;
 30494  003ABA  9C74               	bcf	3956,6,c	;volatile
 30495  003ABC                     i1l10927:
 30496                           
 30497                           ; BSR set to: 15
 30498                           ;ECAN.c: 851: }
 30499                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 30500  003ABC  5150               	movf	80,w,b	;volatile
 30501  003ABE  0B07               	andlw	7
 30502  003AC0  0101               	movlb	1	; () banked
 30503  003AC2  6F27               	movwf	__ECANRxFilterHitInfo& (0+255),b
 30504                           
 30505                           ; BSR set to: 1
 30506                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 30507  003AC4  0E02               	movlw	2
 30508  003AC6  6127               	cpfslt	__ECANRxFilterHitInfo& (0+255),b
 30509  003AC8  D005               	goto	i1l10933
 30510                           
 30511                           ; BSR set to: 1
 30512                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 30513  003ACA  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30514  003ACC  6ED9               	movwf	fsr2l,c
 30515  003ACE  6ADA               	clrf	fsr2h,c
 30516  003AD0  0E00               	movlw	0
 30517  003AD2  8EDB               	bsf	plusw2,7,c
 30518  003AD4                     i1l10933:
 30519                           
 30520                           ; BSR set to: 1
 30521                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 30522  003AD4  010F               	movlb	15	; () banked
 30523  003AD6  0E0F               	movlw	15	;volatile
 30524  003AD8  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30525  003ADA  0E50               	movlw	80	;volatile
 30526  003ADC                     L52:
 30527  003ADC  6E12               	movwf	ECANReceiveMessage@ptr,c
 30528                           
 30529                           ;ECAN.c: 860: }
 30530  003ADE  D066               	goto	i1l10995
 30531  003AE0                     i1l10935:
 30532                           
 30533                           ;ECAN.c: 861: else
 30534                           ;ECAN.c: 862: return FALSE;
 30535  003AE0  0E00               	movlw	0
 30536  003AE2  D0C5               	goto	i1l1607
 30537  003AE4                     i1l10941:
 30538                           
 30539                           ; BSR set to: 1
 30540                           ;ECAN.c: 869: else if ( mode == 0x40 )
 30541  003AE4  5010               	movf	ECANReceiveMessage@mode,w,c
 30542  003AE6  0A40               	xorlw	64
 30543  003AE8  E146               	bnz	i1l1610
 30544                           
 30545                           ; BSR set to: 1
 30546                           ;ECAN.c: 875: {
 30547                           ;ECAN.c: 876: if ( RXB0FUL )
 30548  003AEA  AE60               	btfss	3936,7,c	;volatile
 30549  003AEC  D004               	goto	i1l1611
 30550                           
 30551                           ; BSR set to: 1
 30552                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 30553  003AEE  0E0F               	movlw	15	;volatile
 30554  003AF0  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30555  003AF2  0E60               	movlw	96	;volatile
 30556  003AF4  D03E               	goto	L59
 30557  003AF6                     i1l1611:
 30558                           
 30559                           ; BSR set to: 1
 30560                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 30561  003AF6  010F               	movlb	15	; () banked
 30562  003AF8  AF50               	btfss	80,7,b	;volatile
 30563  003AFA  D004               	goto	i1l1613
 30564                           
 30565                           ; BSR set to: 15
 30566                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 30567  003AFC  0E0F               	movlw	15	;volatile
 30568  003AFE  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30569  003B00  0E50               	movlw	80	;volatile
 30570  003B02  D037               	goto	L59
 30571  003B04                     i1l1613:
 30572                           
 30573                           ; BSR set to: 15
 30574                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 30575  003B04  010D               	movlb	13
 30576  003B06  B5F8               	btfsc	248,2,b	;volatile
 30577  003B08  D007               	goto	i1l1615
 30578  003B0A  010E               	movlb	14
 30579  003B0C  AF20               	btfss	32,7,b	;volatile
 30580  003B0E  D004               	goto	i1l1615
 30581                           
 30582                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 30583  003B10  0E0E               	movlw	14	;volatile
 30584  003B12  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30585  003B14  0E20               	movlw	32	;volatile
 30586  003B16  D02D               	goto	L59
 30587  003B18                     i1l1615:
 30588                           
 30589                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 30590  003B18  010D               	movlb	13
 30591  003B1A  B7F8               	btfsc	248,3,b	;volatile
 30592  003B1C  D007               	goto	i1l1617
 30593  003B1E  010E               	movlb	14
 30594  003B20  AF30               	btfss	48,7,b	;volatile
 30595  003B22  D004               	goto	i1l1617
 30596                           
 30597                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 30598  003B24  0E0E               	movlw	14	;volatile
 30599  003B26  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30600  003B28  0E30               	movlw	48	;volatile
 30601  003B2A  D023               	goto	L59
 30602  003B2C                     i1l1617:
 30603                           
 30604                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 30605  003B2C  010D               	movlb	13
 30606  003B2E  B9F8               	btfsc	248,4,b	;volatile
 30607  003B30  D007               	goto	i1l1619
 30608  003B32  010E               	movlb	14
 30609  003B34  AF40               	btfss	64,7,b	;volatile
 30610  003B36  D004               	goto	i1l1619
 30611                           
 30612                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 30613  003B38  0E0E               	movlw	14	;volatile
 30614  003B3A  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30615  003B3C  0E40               	movlw	64	;volatile
 30616  003B3E  D019               	goto	L59
 30617  003B40                     i1l1619:
 30618                           
 30619                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 30620  003B40  010D               	movlb	13
 30621  003B42  BBF8               	btfsc	248,5,b	;volatile
 30622  003B44  D005               	goto	i1l1621
 30623  003B46  010E               	movlb	14
 30624  003B48  AF50               	btfss	80,7,b	;volatile
 30625  003B4A  D002               	goto	i1l1621
 30626                           
 30627                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 30628  003B4C  0E0E               	movlw	14	;volatile
 30629  003B4E  D7D7               	goto	L60
 30630  003B50                     i1l1621:
 30631                           
 30632                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 30633  003B50  010D               	movlb	13
 30634  003B52  BDF8               	btfsc	248,6,b	;volatile
 30635  003B54  D005               	goto	i1l1623
 30636  003B56  010E               	movlb	14
 30637  003B58  AF60               	btfss	96,7,b	;volatile
 30638  003B5A  D002               	goto	i1l1623
 30639                           
 30640                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 30641  003B5C  0E0E               	movlw	14	;volatile
 30642  003B5E  D7C8               	goto	L61
 30643  003B60                     i1l1623:
 30644                           
 30645                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 30646  003B60  010D               	movlb	13
 30647  003B62  BFF8               	btfsc	248,7,b	;volatile
 30648  003B64  D7BD               	goto	i1l10935
 30649  003B66  010E               	movlb	14
 30650  003B68  AF70               	btfss	112,7,b	;volatile
 30651  003B6A  D7BA               	goto	i1l10935
 30652                           
 30653                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 30654  003B6C  0E0E               	movlw	14	;volatile
 30655  003B6E  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30656  003B70  0E70               	movlw	112	;volatile
 30657  003B72                     L59:
 30658  003B72  6E12               	movwf	ECANReceiveMessage@ptr,c
 30659  003B74  D00A               	goto	i1l10985
 30660  003B76                     i1l1610:
 30661                           
 30662                           ; BSR set to: 1
 30663                           ;ECAN.c: 910: else
 30664                           ;ECAN.c: 915: {
 30665                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 30666  003B76  AE74               	btfss	3956,7,c	;volatile
 30667  003B78  D7B3               	goto	i1l10935
 30668                           
 30669                           ; BSR set to: 1
 30670                           ;ECAN.c: 919: {
 30671                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 30672  003B7A  506F               	movf	3951,w,c	;volatile
 30673  003B7C  0B07               	andlw	7
 30674  003B7E  EC8E  F02F         	call	__ECANPointBuffer
 30675  003B82  C001  F012         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 30676  003B86  C002  F013         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 30677  003B8A                     i1l10985:
 30678                           
 30679                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 30680  003B8A  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 30681  003B8E  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 30682  003B92  50DF               	movf	indf2,w,c
 30683  003B94  0B1F               	andlw	31
 30684  003B96  0101               	movlb	1	; () banked
 30685  003B98  6F27               	movwf	__ECANRxFilterHitInfo& (0+255),b
 30686                           
 30687                           ; BSR set to: 1
 30688                           ;ECAN.c: 934: RXB1IF = 0;
 30689  003B9A  92A4               	bcf	4004,1,c	;volatile
 30690                           
 30691                           ; BSR set to: 1
 30692                           ;ECAN.c: 936: if ( RXB1OVFL )
 30693  003B9C  AC74               	btfss	3956,6,c	;volatile
 30694  003B9E  D006               	goto	i1l10995
 30695                           
 30696                           ; BSR set to: 1
 30697                           ;ECAN.c: 937: {
 30698                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 30699  003BA0  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30700  003BA2  6ED9               	movwf	fsr2l,c
 30701  003BA4  6ADA               	clrf	fsr2h,c
 30702  003BA6  0E00               	movlw	0
 30703  003BA8  86DB               	bsf	plusw2,3,c
 30704                           
 30705                           ; BSR set to: 1
 30706                           ;ECAN.c: 939: RXB1OVFL = 0;
 30707  003BAA  9C74               	bcf	3956,6,c	;volatile
 30708  003BAC                     i1l10995:
 30709                           
 30710                           ;ECAN.c: 944: savedPtr = ptr;
 30711  003BAC  C012  F00C         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 30712  003BB0  C013  F00D         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 30713                           
 30714                           ;ECAN.c: 945: *msgFlags = 0;
 30715  003BB4  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30716  003BB6  6ED9               	movwf	fsr2l,c
 30717  003BB8  6ADA               	clrf	fsr2h,c
 30718  003BBA  6ADF               	clrf	indf2,c
 30719                           
 30720                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 30721  003BBC  EE20 F005          	lfsr	2,5
 30722  003BC0  D857               	call	PL126	;call to abstracted procedure
 30723                           
 30724                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 30725  003BC2  500A               	movf	ECANReceiveMessage@dataLen,w,c
 30726  003BC4  6ED9               	movwf	fsr2l,c
 30727  003BC6  6ADA               	clrf	fsr2h,c
 30728  003BC8  5011               	movf	ECANReceiveMessage@temp,w,c
 30729  003BCA  0B0F               	andlw	15
 30730  003BCC  6EDF               	movwf	indf2,c
 30731                           
 30732                           ;ECAN.c: 952: if ( temp.bits.b6 )
 30733  003BCE  AC11               	btfss	ECANReceiveMessage@temp,6,c
 30734  003BD0  D005               	goto	i1l1631
 30735                           
 30736                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 30737  003BD2  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30738  003BD4  6ED9               	movwf	fsr2l,c
 30739  003BD6  6ADA               	clrf	fsr2h,c
 30740  003BD8  0E00               	movlw	0
 30741  003BDA  8CDB               	bsf	plusw2,6,c
 30742  003BDC                     i1l1631:
 30743                           
 30744                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 30745  003BDC  EE20 F002          	lfsr	2,2
 30746  003BE0  D847               	call	PL126	;call to abstracted procedure
 30747                           
 30748                           ;ECAN.c: 957: if ( temp.bits.b3 )
 30749  003BE2  A611               	btfss	ECANReceiveMessage@temp,3,c
 30750  003BE4  D008               	goto	i1l1632
 30751                           
 30752                           ;ECAN.c: 958: {
 30753                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 30754  003BE6  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30755  003BE8  6ED9               	movwf	fsr2l,c
 30756  003BEA  6ADA               	clrf	fsr2h,c
 30757  003BEC  0E00               	movlw	0
 30758  003BEE  8ADB               	bsf	plusw2,5,c
 30759                           
 30760                           ;ECAN.c: 960: temp.Val = 1;
 30761  003BF0  0E01               	movlw	1
 30762  003BF2  6E11               	movwf	ECANReceiveMessage@temp,c
 30763                           
 30764                           ;ECAN.c: 961: }
 30765  003BF4  D001               	goto	i1l11013
 30766  003BF6                     i1l1632:
 30767                           
 30768                           ;ECAN.c: 962: else
 30769                           ;ECAN.c: 963: temp.Val = 0;
 30770  003BF6  6A11               	clrf	ECANReceiveMessage@temp,c
 30771  003BF8                     i1l11013:
 30772                           
 30773                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 30774  003BF8  2812               	incf	ECANReceiveMessage@ptr,w,c
 30775  003BFA  6E01               	movwf	?__RegsToCANID,c
 30776  003BFC  0E00               	movlw	0
 30777  003BFE  2013               	addwfc	ECANReceiveMessage@ptr+1,w,c
 30778  003C00  6E02               	movwf	?__RegsToCANID+1,c
 30779  003C02  C00E  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 30780  003C06  C011  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 30781  003C0A  EC5A  F024         	call	__RegsToCANID	;wreg free
 30782                           
 30783                           ;ECAN.c: 968: ptr += 6;
 30784  003C0E  0E06               	movlw	6
 30785  003C10  2612               	addwf	ECANReceiveMessage@ptr,f,c
 30786  003C12  0E00               	movlw	0
 30787  003C14  2213               	addwfc	ECANReceiveMessage@ptr+1,f,c
 30788                           
 30789                           ;ECAN.c: 969: temp.Val = *dataLen;
 30790  003C16  500A               	movf	ECANReceiveMessage@dataLen,w,c
 30791  003C18  6ED9               	movwf	fsr2l,c
 30792  003C1A  6ADA               	clrf	fsr2h,c
 30793  003C1C  50DF               	movf	indf2,w,c
 30794  003C1E  6E11               	movwf	ECANReceiveMessage@temp,c
 30795                           
 30796                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 30797  003C20  6A0F               	clrf	ECANReceiveMessage@i,c
 30798  003C22  D00F               	goto	i1l11029
 30799  003C24                     i1l11021:
 30800                           
 30801                           ;ECAN.c: 971: *data++ = *ptr++;
 30802  003C24  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 30803  003C28  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 30804  003C2C  C008  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 30805  003C30  C009  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 30806  003C34  CFDF FFE7          	movff	indf2,indf1
 30807  003C38  4A12               	infsnz	ECANReceiveMessage@ptr,f,c
 30808  003C3A  2A13               	incf	ECANReceiveMessage@ptr+1,f,c
 30809  003C3C  4A08               	infsnz	ECANReceiveMessage@data,f,c
 30810  003C3E  2A09               	incf	ECANReceiveMessage@data+1,f,c
 30811  003C40  2A0F               	incf	ECANReceiveMessage@i,f,c
 30812  003C42                     i1l11029:
 30813  003C42  5011               	movf	ECANReceiveMessage@temp,w,c
 30814  003C44  5C0F               	subwf	ECANReceiveMessage@i,w,c
 30815  003C46  E3EE               	bnc	i1l11021
 30816                           
 30817                           ;ECAN.c: 974: if ( IRXIF )
 30818  003C48  AEA4               	btfss	4004,7,c	;volatile
 30819  003C4A  D006               	goto	i1l11035
 30820                           
 30821                           ;ECAN.c: 975: {
 30822                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 30823  003C4C  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30824  003C4E  6ED9               	movwf	fsr2l,c
 30825  003C50  6ADA               	clrf	fsr2h,c
 30826  003C52  0E00               	movlw	0
 30827  003C54  88DB               	bsf	plusw2,4,c
 30828                           
 30829                           ;ECAN.c: 977: IRXIF = 0;
 30830  003C56  9EA4               	bcf	4004,7,c	;volatile
 30831  003C58                     i1l11035:
 30832                           
 30833                           ;ECAN.c: 978: }
 30834                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 30835  003C58  C00C  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 30836  003C5C  C00D  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 30837  003C60  0E7F               	movlw	127
 30838  003C62  16DF               	andwf	indf2,f,c
 30839                           
 30840                           ;ECAN.c: 985: if ( mode == 0x80 )
 30841  003C64  5010               	movf	ECANReceiveMessage@mode,w,c
 30842  003C66  0A80               	xorlw	128
 30843  003C68  B4D8               	btfsc	status,2,c
 30844                           
 30845                           ;ECAN.c: 986: FIFOEMPTY = 0;
 30846  003C6A  9E74               	bcf	3956,7,c	;volatile
 30847                           
 30848                           ;ECAN.c: 992: return TRUE;
 30849  003C6C  0E01               	movlw	1
 30850  003C6E                     i1l1607:
 30851  003C6E  0012               	return	
 30852  003C70                     __end_of_ECANReceiveMessage:
 30853                           	opt stack 0
 30854  003C70                     PL126:
 30855                           	opt stack 20
 30856  003C70  5012               	movf	ECANReceiveMessage@ptr,w,c
 30857  003C72  26D9               	addwf	fsr2l,f,c
 30858  003C74  5013               	movf	ECANReceiveMessage@ptr+1,w,c
 30859  003C76  22DA               	addwfc	fsr2h,f,c
 30860  003C78  50DF               	movf	indf2,w,c
 30861  003C7A  6E11               	movwf	ECANReceiveMessage@temp,c
 30862  003C7C  0012               	return	
 30863  003C7E                     __end_ofPL126:
 30864                           	opt stack 0
 30865                           tblptru	equ	0xFF8
 30866                           tblptrh	equ	0xFF7
 30867                           tblptrl	equ	0xFF6
 30868                           tablat	equ	0xFF5
 30869                           prodh	equ	0xFF4
 30870                           prodl	equ	0xFF3
 30871                           intcon	equ	0xFF2
 30872                           indf0	equ	0xFEF
 30873                           postinc0	equ	0xFEE
 30874                           fsr0h	equ	0xFEA
 30875                           fsr0l	equ	0xFE9
 30876                           wreg	equ	0xFE8
 30877                           indf1	equ	0xFE7
 30878                           postinc1	equ	0xFE6
 30879                           postdec1	equ	0xFE5
 30880                           fsr1h	equ	0xFE2
 30881                           fsr1l	equ	0xFE1
 30882                           bsr	equ	0xFE0
 30883                           indf2	equ	0xFDF
 30884                           postinc2	equ	0xFDE
 30885                           postdec2	equ	0xFDD
 30886                           plusw2	equ	0xFDB
 30887                           fsr2h	equ	0xFDA
 30888                           fsr2l	equ	0xFD9
 30889                           status	equ	0xFD8
 30890                           
 30891 ;; *************** function __RegsToCANID *****************
 30892 ;; Defined at:
 30893 ;;		line 1158 in file "ECAN.c"
 30894 ;; Parameters:    Size  Location     Type
 30895 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 30896 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30897 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30898 ;;  val             1    2[COMRAM] PTR unsigned long 
 30899 ;;		 -> id(4), 
 30900 ;;  type            1    3[COMRAM] unsigned char 
 30901 ;; Auto vars:     Size  Location     Type
 30902 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 30903 ;;		 -> id(4), 
 30904 ;; Return value:  Size  Location     Type
 30905 ;;		None               void
 30906 ;; Registers used:
 30907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 30908 ;; Tracked objects:
 30909 ;;		On entry : 1/1
 30910 ;;		On exit  : 1/1
 30911 ;;		Unchanged: 1/0
 30912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30913 ;;      Params:         4       0       0       0       0       0       0
 30914 ;;      Locals:         1       0       0       0       0       0       0
 30915 ;;      Temps:          2       0       0       0       0       0       0
 30916 ;;      Totals:         7       0       0       0       0       0       0
 30917 ;;Total ram usage:        7 bytes
 30918 ;; Hardware stack levels used:    1
 30919 ;; This function calls:
 30920 ;;		Nothing
 30921 ;; This function is called by:
 30922 ;;		_ECANReceiveMessage
 30923 ;; This function uses a non-reentrant model
 30924 ;;
 30925                           
 30926                           	psect	text91
 30927  0048B4                     __ptext91:
 30928                           	opt stack 0
 30929  0048B4                     __RegsToCANID:
 30930                           	opt stack 20
 30931                           
 30932                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 30933                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 30934                           
 30935                           ;incstack = 0
 30936                           ;incstack = 0
 30937  0048B4  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 30938                           
 30939                           ;ECAN.c: 1163: if ( type == 0 )
 30940  0048B8  6604               	tstfsz	__RegsToCANID@type,c
 30941  0048BA  D02B               	goto	i1l10673
 30942                           
 30943                           ;ECAN.c: 1164: {
 30944                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 30945  0048BC  5007               	movf	__RegsToCANID@Value,w,c
 30946  0048BE  6ED9               	movwf	fsr2l,c
 30947  0048C0  D86C               	call	PL80	;call to abstracted procedure
 30948  0048C2  3605               	rlcf	??__RegsToCANID,f,c
 30949  0048C4  90D8               	bcf	status,0,c
 30950  0048C6  3605               	rlcf	??__RegsToCANID,f,c
 30951  0048C8  90D8               	bcf	status,0,c
 30952  0048CA  3405               	rlcf	??__RegsToCANID,w,c
 30953  0048CC  6EDF               	movwf	indf2,c
 30954                           
 30955                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 30956  0048CE  5007               	movf	__RegsToCANID@Value,w,c
 30957  0048D0  6ED9               	movwf	fsr2l,c
 30958  0048D2  6ADA               	clrf	fsr2h,c
 30959  0048D4  2AD9               	incf	fsr2l,f,c
 30960  0048D6  6ADA               	clrf	fsr2h,c
 30961  0048D8  D873               	call	PL98	;call to abstracted procedure
 30962  0048DA                     i1u1225_25:
 30963  0048DA  90D8               	bcf	status,0,c
 30964  0048DC  3205               	rrcf	??__RegsToCANID,f,c
 30965  0048DE  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 30966  0048E0  D7FC               	goto	i1u1225_25
 30967  0048E2  5005               	movf	??__RegsToCANID,w,c
 30968                           
 30969                           ;ECAN.c: 1168: ptr++;
 30970                           
 30971                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 30972  0048E4  D863               	call	PL82	;call to abstracted procedure
 30973  0048E6  0E05               	movlw	5
 30974  0048E8  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 30975  0048EA                     i1u1226_25:
 30976  0048EA  90D8               	bcf	status,0,c
 30977  0048EC  3205               	rrcf	??__RegsToCANID,f,c
 30978  0048EE  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 30979  0048F0  D7FC               	goto	i1u1226_25
 30980  0048F2  5007               	movf	__RegsToCANID@Value,w,c
 30981  0048F4  6ED9               	movwf	fsr2l,c
 30982  0048F6  6ADA               	clrf	fsr2h,c
 30983  0048F8  5005               	movf	??__RegsToCANID,w,c
 30984  0048FA  12DF               	iorwf	indf2,f,c
 30985                           
 30986                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 30987  0048FC  D83D               	call	PL46	;call to abstracted procedure
 30988  0048FE  6ADF               	clrf	indf2,c
 30989                           
 30990                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 30991  004900  5007               	movf	__RegsToCANID@Value,w,c
 30992  004902  6ED9               	movwf	fsr2l,c
 30993  004904  6ADA               	clrf	fsr2h,c
 30994  004906  0E03               	movlw	3
 30995  004908  26D9               	addwf	fsr2l,f,c
 30996  00490A  6ADA               	clrf	fsr2h,c
 30997  00490C  0E00               	movlw	0
 30998  00490E  6EDF               	movwf	indf2,c
 30999                           
 31000                           ;ECAN.c: 1172: }
 31001  004910  D032               	goto	i1l1654
 31002  004912                     i1l10673:
 31003                           
 31004                           ;ECAN.c: 1173: else
 31005                           ;ECAN.c: 1174: {
 31006                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 31007  004912  D832               	call	PL46	;call to abstracted procedure
 31008  004914  D855               	call	PL98	;call to abstracted procedure
 31009  004916                     i1u1227_25:
 31010  004916  90D8               	bcf	status,0,c
 31011  004918  3605               	rlcf	??__RegsToCANID,f,c
 31012  00491A  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 31013  00491C  D7FC               	goto	i1u1227_25
 31014  00491E  5005               	movf	??__RegsToCANID,w,c
 31015  004920  6EDF               	movwf	indf2,c
 31016                           
 31017                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 31018  004922  5007               	movf	__RegsToCANID@Value,w,c
 31019  004924  6ED9               	movwf	fsr2l,c
 31020  004926  6ADA               	clrf	fsr2h,c
 31021  004928  0E03               	movlw	3
 31022  00492A  26D9               	addwf	fsr2l,f,c
 31023  00492C  D836               	call	PL80	;call to abstracted procedure
 31024  00492E  3205               	rrcf	??__RegsToCANID,f,c
 31025  004930  90D8               	bcf	status,0,c
 31026  004932  3205               	rrcf	??__RegsToCANID,f,c
 31027  004934  90D8               	bcf	status,0,c
 31028  004936  3005               	rrcf	??__RegsToCANID,w,c
 31029                           
 31030                           ;ECAN.c: 1178: ptr++;
 31031                           
 31032                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 31033  004938  D839               	call	PL82	;call to abstracted procedure
 31034  00493A  0E03               	movlw	3
 31035  00493C  1605               	andwf	??__RegsToCANID,f,c
 31036  00493E  D81C               	call	PL46	;call to abstracted procedure
 31037  004940  5005               	movf	??__RegsToCANID,w,c
 31038  004942  12DF               	iorwf	indf2,f,c
 31039                           
 31040                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 31041  004944  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31042  004948  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31043  00494C  50DF               	movf	indf2,w,c
 31044  00494E  6E05               	movwf	??__RegsToCANID& (0+255),c
 31045  004950  90D8               	bcf	status,0,c
 31046  004952  3205               	rrcf	??__RegsToCANID,f,c
 31047  004954  90D8               	bcf	status,0,c
 31048  004956  3205               	rrcf	??__RegsToCANID,f,c
 31049  004958  90D8               	bcf	status,0,c
 31050  00495A  3205               	rrcf	??__RegsToCANID,f,c
 31051  00495C  0E1C               	movlw	28
 31052  00495E  1605               	andwf	??__RegsToCANID,f,c
 31053  004960  D80B               	call	PL46	;call to abstracted procedure
 31054  004962  5005               	movf	??__RegsToCANID,w,c
 31055  004964  12DF               	iorwf	indf2,f,c
 31056                           
 31057                           ;ECAN.c: 1182: ptr++;
 31058                           
 31059                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 31060  004966  D80F               	call	PL74	;call to abstracted procedure
 31061  004968  2AE1               	incf	fsr1l,f,c
 31062  00496A  6AE2               	clrf	fsr1h,c
 31063  00496C  CFDF FFE7          	movff	indf2,indf1
 31064                           
 31065                           ;ECAN.c: 1184: ptr++;
 31066                           
 31067                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 31068  004970  D80A               	call	PL74	;call to abstracted procedure
 31069  004972  CFDF FFE7          	movff	indf2,indf1
 31070  004976                     i1l1654:
 31071  004976  0012               	return	
 31072  004978                     __end_of__RegsToCANID:
 31073                           	opt stack 0
 31074  004978                     PL46:
 31075                           	opt stack 20
 31076  004978  5007               	movf	__RegsToCANID@Value,w,c
 31077  00497A  6ED9               	movwf	fsr2l,c
 31078  00497C  6ADA               	clrf	fsr2h,c
 31079  00497E  0E02               	movlw	2
 31080  004980  26D9               	addwf	fsr2l,f,c
 31081  004982  6ADA               	clrf	fsr2h,c
 31082  004984  0012               	return	
 31083  004986                     __end_ofPL46:
 31084                           	opt stack 0
 31085  004986                     PL74:
 31086                           	opt stack 20
 31087  004986  4A01               	infsnz	__RegsToCANID@ptr,f,c
 31088  004988  2A02               	incf	__RegsToCANID@ptr+1,f,c
 31089  00498A  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31090  00498E  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31091  004992  5007               	movf	__RegsToCANID@Value,w,c
 31092  004994  6EE1               	movwf	fsr1l,c
 31093  004996  6AE2               	clrf	fsr1h,c
 31094  004998  0012               	return	
 31095  00499A                     __end_ofPL74:
 31096                           	opt stack 0
 31097  00499A                     PL80:
 31098                           	opt stack 20
 31099  00499A  6ADA               	clrf	fsr2h,c
 31100  00499C  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 31101  0049A0  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 31102  0049A4  50E7               	movf	indf1,w,c
 31103  0049A6  6E05               	movwf	??__RegsToCANID& (0+255),c
 31104  0049A8  90D8               	bcf	status,0,c
 31105  0049AA  0012               	return	
 31106  0049AC                     __end_ofPL80:
 31107                           	opt stack 0
 31108  0049AC                     PL82:
 31109                           	opt stack 20
 31110  0049AC  6EDF               	movwf	indf2,c
 31111  0049AE  4A01               	infsnz	__RegsToCANID@ptr,f,c
 31112  0049B0  2A02               	incf	__RegsToCANID@ptr+1,f,c
 31113  0049B2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31114  0049B6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31115  0049BA  50DF               	movf	indf2,w,c
 31116  0049BC  6E05               	movwf	??__RegsToCANID& (0+255),c
 31117  0049BE  0012               	return	
 31118  0049C0                     __end_ofPL82:
 31119                           	opt stack 0
 31120  0049C0                     PL98:
 31121                           	opt stack 20
 31122  0049C0  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 31123  0049C4  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 31124  0049C8  50E7               	movf	indf1,w,c
 31125  0049CA  6E05               	movwf	??__RegsToCANID& (0+255),c
 31126  0049CC  0E05               	movlw	5
 31127  0049CE  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 31128  0049D0  0C05               	retlw	5
 31129  0049D2                     __end_ofPL98:
 31130                           	opt stack 0
 31131                           tblptru	equ	0xFF8
 31132                           tblptrh	equ	0xFF7
 31133                           tblptrl	equ	0xFF6
 31134                           tablat	equ	0xFF5
 31135                           prodh	equ	0xFF4
 31136                           prodl	equ	0xFF3
 31137                           intcon	equ	0xFF2
 31138                           indf0	equ	0xFEF
 31139                           postinc0	equ	0xFEE
 31140                           fsr0h	equ	0xFEA
 31141                           fsr0l	equ	0xFE9
 31142                           wreg	equ	0xFE8
 31143                           indf1	equ	0xFE7
 31144                           postinc1	equ	0xFE6
 31145                           postdec1	equ	0xFE5
 31146                           fsr1h	equ	0xFE2
 31147                           fsr1l	equ	0xFE1
 31148                           bsr	equ	0xFE0
 31149                           indf2	equ	0xFDF
 31150                           postinc2	equ	0xFDE
 31151                           postdec2	equ	0xFDD
 31152                           plusw2	equ	0xFDB
 31153                           fsr2h	equ	0xFDA
 31154                           fsr2l	equ	0xFD9
 31155                           status	equ	0xFD8
 31156                           
 31157 ;; *************** function __ECANPointBuffer *****************
 31158 ;; Defined at:
 31159 ;;		line 1209 in file "ECAN.c"
 31160 ;; Parameters:    Size  Location     Type
 31161 ;;  b               1    wreg     unsigned char 
 31162 ;; Auto vars:     Size  Location     Type
 31163 ;;  b               1    3[COMRAM] unsigned char 
 31164 ;;  pt              2    4[COMRAM] PTR unsigned char 
 31165 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 31166 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 31167 ;; Return value:  Size  Location     Type
 31168 ;;                  2    0[COMRAM] PTR unsigned char 
 31169 ;; Registers used:
 31170 ;;		wreg, status,2, status,0
 31171 ;; Tracked objects:
 31172 ;;		On entry : F/1
 31173 ;;		On exit  : 0/0
 31174 ;;		Unchanged: 0/0
 31175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31176 ;;      Params:         3       0       0       0       0       0       0
 31177 ;;      Locals:         3       0       0       0       0       0       0
 31178 ;;      Temps:          0       0       0       0       0       0       0
 31179 ;;      Totals:         6       0       0       0       0       0       0
 31180 ;;Total ram usage:        6 bytes
 31181 ;; Hardware stack levels used:    1
 31182 ;; This function calls:
 31183 ;;		Nothing
 31184 ;; This function is called by:
 31185 ;;		_ECANReceiveMessage
 31186 ;; This function uses a non-reentrant model
 31187 ;;
 31188                           
 31189                           	psect	text92
 31190  005F1C                     __ptext92:
 31191                           	opt stack 0
 31192  005F1C                     __ECANPointBuffer:
 31193                           	opt stack 20
 31194                           
 31195                           ;incstack = 0
 31196                           ;incstack = 0
 31197                           ;__ECANPointBuffer@b stored from wreg
 31198  005F1C  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 31199                           
 31200                           ; BSR set to: 1
 31201                           ;ECAN.c: 1210: BYTE* pt;
 31202                           ;ECAN.c: 1212: switch(b)
 31203  005F20  D024               	goto	i1l10659
 31204  005F22                     i1l10641:
 31205                           
 31206                           ; BSR set to: 1
 31207                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 31208  005F22  0E0F               	movlw	15	;volatile
 31209  005F24  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31210  005F26  0E60               	movlw	96	;volatile
 31211  005F28  D01E               	goto	L68
 31212  005F2A                     i1l10643:
 31213                           
 31214                           ; BSR set to: 1
 31215                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 31216  005F2A  010F               	movlb	15	; () banked
 31217  005F2C  0E0F               	movlw	15	;volatile
 31218  005F2E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31219  005F30  0E50               	movlw	80	;volatile
 31220  005F32  D019               	goto	L68
 31221  005F34                     i1l10645:
 31222                           
 31223                           ; BSR set to: 1
 31224                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 31225  005F34  010E               	movlb	14	; () banked
 31226  005F36  0E0E               	movlw	14	;volatile
 31227  005F38  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31228  005F3A  0E20               	movlw	32	;volatile
 31229  005F3C  D014               	goto	L68
 31230  005F3E                     i1l10647:
 31231                           
 31232                           ; BSR set to: 1
 31233                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 31234  005F3E  010E               	movlb	14	; () banked
 31235  005F40  0E0E               	movlw	14	;volatile
 31236  005F42  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31237  005F44  0E30               	movlw	48	;volatile
 31238  005F46  D00F               	goto	L68
 31239  005F48                     i1l10649:
 31240                           
 31241                           ; BSR set to: 1
 31242                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 31243  005F48  010E               	movlb	14	; () banked
 31244  005F4A  0E0E               	movlw	14	;volatile
 31245  005F4C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31246  005F4E  0E40               	movlw	64	;volatile
 31247  005F50  D00A               	goto	L68
 31248  005F52                     i1l10651:
 31249                           
 31250                           ; BSR set to: 1
 31251                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 31252  005F52  010E               	movlb	14	; () banked
 31253  005F54  0E0E               	movlw	14	;volatile
 31254  005F56  D7EB               	goto	L69
 31255  005F58                     i1l10653:
 31256                           
 31257                           ; BSR set to: 1
 31258                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 31259  005F58  010E               	movlb	14	; () banked
 31260  005F5A  0E0E               	movlw	14	;volatile
 31261  005F5C  D7E3               	goto	L70
 31262  005F5E                     i1l10655:
 31263                           
 31264                           ; BSR set to: 1
 31265                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 31266  005F5E  010E               	movlb	14	; () banked
 31267  005F60  0E0E               	movlw	14	;volatile
 31268  005F62  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31269  005F64  0E70               	movlw	112	;volatile
 31270  005F66                     L68:
 31271  005F66  6E05               	movwf	__ECANPointBuffer@pt,c
 31272                           
 31273                           ;ECAN.c: 1237: break;
 31274  005F68  D00F               	goto	i1l1659
 31275  005F6A                     i1l10659:
 31276                           
 31277                           ; BSR set to: 1
 31278  005F6A  5004               	movf	__ECANPointBuffer@b,w,c
 31279                           
 31280                           ; Switch size 1, requested type "space"
 31281                           ; Number of cases is 7, Range of values is 0 to 6
 31282                           ; switch strategies available:
 31283                           ; Name         Instructions Cycles
 31284                           ; simple_byte           22    12 (average)
 31285                           ;	Chosen strategy is simple_byte
 31286  005F6C  E0DA               	bz	i1l10641
 31287  005F6E  0A01               	xorlw	1	; case 1
 31288  005F70  E0DC               	bz	i1l10643
 31289  005F72  0A03               	xorlw	3	; case 2
 31290  005F74  E0DF               	bz	i1l10645
 31291  005F76  0A01               	xorlw	1	; case 3
 31292  005F78  E0E2               	bz	i1l10647
 31293  005F7A  0A07               	xorlw	7	; case 4
 31294  005F7C  E0E5               	bz	i1l10649
 31295  005F7E  0A01               	xorlw	1	; case 5
 31296  005F80  E0E8               	bz	i1l10651
 31297  005F82  0A03               	xorlw	3	; case 6
 31298  005F84  E0E9               	bz	i1l10653
 31299  005F86  D7EB               	goto	i1l10655
 31300  005F88                     i1l1659:
 31301                           
 31302                           ;ECAN.c: 1239: return (pt);
 31303  005F88  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 31304  005F8C  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 31305  005F90  0012               	return	
 31306  005F92                     __end_of__ECANPointBuffer:
 31307                           	opt stack 0
 31308                           tblptru	equ	0xFF8
 31309                           tblptrh	equ	0xFF7
 31310                           tblptrl	equ	0xFF6
 31311                           tablat	equ	0xFF5
 31312                           prodh	equ	0xFF4
 31313                           prodl	equ	0xFF3
 31314                           intcon	equ	0xFF2
 31315                           indf0	equ	0xFEF
 31316                           postinc0	equ	0xFEE
 31317                           fsr0h	equ	0xFEA
 31318                           fsr0l	equ	0xFE9
 31319                           wreg	equ	0xFE8
 31320                           indf1	equ	0xFE7
 31321                           postinc1	equ	0xFE6
 31322                           postdec1	equ	0xFE5
 31323                           fsr1h	equ	0xFE2
 31324                           fsr1l	equ	0xFE1
 31325                           bsr	equ	0xFE0
 31326                           indf2	equ	0xFDF
 31327                           postinc2	equ	0xFDE
 31328                           postdec2	equ	0xFDD
 31329                           plusw2	equ	0xFDB
 31330                           fsr2h	equ	0xFDA
 31331                           fsr2l	equ	0xFD9
 31332                           status	equ	0xFD8
 31333                           
 31334 ;; *************** function _fifo_write *****************
 31335 ;; Defined at:
 31336 ;;		line 61 in file "fifo.c"
 31337 ;; Parameters:    Size  Location     Type
 31338 ;;  f               2    0[COMRAM] PTR struct .
 31339 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 31340 ;;  buf             2    2[COMRAM] PTR const void 
 31341 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 31342 ;;  nbytes          4    4[COMRAM] unsigned long 
 31343 ;; Auto vars:     Size  Location     Type
 31344 ;;  i               4   14[COMRAM] unsigned long 
 31345 ;;  p               2   12[COMRAM] PTR const unsigned char 
 31346 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 31347 ;; Return value:  Size  Location     Type
 31348 ;;                  2    0[COMRAM] unsigned short 
 31349 ;; Registers used:
 31350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 31351 ;; Tracked objects:
 31352 ;;		On entry : F/1
 31353 ;;		On exit  : F/1
 31354 ;;		Unchanged: F/0
 31355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31356 ;;      Params:         8       0       0       0       0       0       0
 31357 ;;      Locals:         6       0       0       0       0       0       0
 31358 ;;      Temps:          4       0       0       0       0       0       0
 31359 ;;      Totals:        18       0       0       0       0       0       0
 31360 ;;Total ram usage:       18 bytes
 31361 ;; Hardware stack levels used:    1
 31362 ;; This function calls:
 31363 ;;		Nothing
 31364 ;; This function is called by:
 31365 ;;		_Interrupt
 31366 ;; This function uses a non-reentrant model
 31367 ;;
 31368                           
 31369                           	psect	text93
 31370  004788                     __ptext93:
 31371                           	opt stack 0
 31372  004788                     _fifo_write:
 31373                           	opt stack 21
 31374                           
 31375                           ; BSR set to: 1
 31376                           ;fifo.c: 62: uint32_t i;
 31377                           ;fifo.c: 63: const uint8_t *p;
 31378                           ;fifo.c: 64: p = buf;
 31379                           
 31380                           ;incstack = 0
 31381                           ;incstack = 0
 31382  004788  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 31383  00478C  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 31384                           
 31385                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 31386  004790  6A0F               	clrf	fifo_write@i,c
 31387  004792  6A10               	clrf	fifo_write@i+1,c
 31388  004794  6A11               	clrf	fifo_write@i+2,c
 31389  004796  6A12               	clrf	fifo_write@i+3,c
 31390  004798  D068               	goto	i1l7097
 31391  00479A                     i1l7077:
 31392                           
 31393                           ; BSR set to: 1
 31394                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 31395                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 31396  00479A  EE20 F004          	lfsr	2,4
 31397  00479E  5001               	movf	fifo_write@f,w,c
 31398  0047A0  D872               	call	PL18	;call to abstracted procedure
 31399  0047A2  E102               	bnz	i1u682_25
 31400  0047A4  5009               	movf	??_fifo_write,w,c
 31401  0047A6  180B               	xorwf	??_fifo_write+2,w,c
 31402  0047A8                     i1u682_25:
 31403  0047A8  E011               	bz	i1l1686
 31404                           
 31405                           ; BSR set to: 1
 31406  0047AA  EE20 F006          	lfsr	2,6
 31407  0047AE  5001               	movf	fifo_write@f,w,c
 31408  0047B0  D86A               	call	PL18	;call to abstracted procedure
 31409  0047B2  E102               	bnz	i1u683_25
 31410  0047B4  5009               	movf	??_fifo_write,w,c
 31411  0047B6  180B               	xorwf	??_fifo_write+2,w,c
 31412  0047B8                     i1u683_25:
 31413  0047B8  E10E               	bnz	i1l7085
 31414                           
 31415                           ; BSR set to: 1
 31416  0047BA  EE20 F004          	lfsr	2,4
 31417  0047BE  5001               	movf	fifo_write@f,w,c
 31418  0047C0  26D9               	addwf	fsr2l,f,c
 31419  0047C2  5002               	movf	fifo_write@f+1,w,c
 31420  0047C4  22DA               	addwfc	fsr2h,f,c
 31421  0047C6  50DE               	movf	postinc2,w,c
 31422  0047C8  10DD               	iorwf	postdec2,w,c
 31423  0047CA  E105               	bnz	i1l7085
 31424  0047CC                     i1l1686:
 31425                           
 31426                           ; BSR set to: 1
 31427                           ;fifo.c: 71: return i;
 31428  0047CC  C00F  F001         	movff	fifo_write@i,?_fifo_write
 31429  0047D0  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 31430  0047D4  D057               	goto	i1l1687
 31431  0047D6                     i1l7085:
 31432                           
 31433                           ; BSR set to: 1
 31434                           ;fifo.c: 73: else {
 31435                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 31436  0047D6  C00D  FFD9         	movff	fifo_write@p,fsr2l
 31437  0047DA  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 31438  0047DE  EE10 F002          	lfsr	1,2
 31439  0047E2  5001               	movf	fifo_write@f,w,c
 31440  0047E4  26E1               	addwf	fsr1l,f,c
 31441  0047E6  5002               	movf	fifo_write@f+1,w,c
 31442  0047E8  22E2               	addwfc	fsr1h,f,c
 31443  0047EA  CFE6 F009          	movff	postinc1,??_fifo_write
 31444  0047EE  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 31445  0047F2  C001  FFE1         	movff	fifo_write@f,fsr1l
 31446  0047F6  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 31447  0047FA  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 31448  0047FE  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 31449  004802  5009               	movf	??_fifo_write,w,c
 31450  004804  240B               	addwf	??_fifo_write+2,w,c
 31451  004806  6EE1               	movwf	fsr1l,c
 31452  004808  500A               	movf	??_fifo_write+1,w,c
 31453  00480A  200C               	addwfc	??_fifo_write+3,w,c
 31454  00480C  6EE2               	movwf	fsr1h,c
 31455  00480E  CFDF FFE7          	movff	indf2,indf1
 31456                           
 31457                           ; BSR set to: 1
 31458  004812  4A0D               	infsnz	fifo_write@p,f,c
 31459  004814  2A0E               	incf	fifo_write@p+1,f,c
 31460                           
 31461                           ; BSR set to: 1
 31462                           ;fifo.c: 75: f->head++;
 31463  004816  EE20 F002          	lfsr	2,2
 31464  00481A  5001               	movf	fifo_write@f,w,c
 31465  00481C  26D9               	addwf	fsr2l,f,c
 31466  00481E  5002               	movf	fifo_write@f+1,w,c
 31467  004820  22DA               	addwfc	fsr2h,f,c
 31468  004822  2ADE               	incf	postinc2,f,c
 31469  004824  0E00               	movlw	0
 31470  004826  22DD               	addwfc	postdec2,f,c
 31471                           
 31472                           ; BSR set to: 1
 31473                           ;fifo.c: 77: if (f->head >= f->size) {
 31474  004828  EE20 F006          	lfsr	2,6
 31475  00482C  5001               	movf	fifo_write@f,w,c
 31476  00482E  26D9               	addwf	fsr2l,f,c
 31477  004830  5002               	movf	fifo_write@f+1,w,c
 31478  004832  22DA               	addwfc	fsr2h,f,c
 31479  004834  EE10 F002          	lfsr	1,2
 31480  004838  5001               	movf	fifo_write@f,w,c
 31481  00483A  26E1               	addwf	fsr1l,f,c
 31482  00483C  5002               	movf	fifo_write@f+1,w,c
 31483  00483E  22E2               	addwfc	fsr1h,f,c
 31484  004840  52E6               	movf	postinc1,f,c
 31485  004842  52DE               	movf	postinc2,f,c
 31486  004844  50DD               	movf	postdec2,w,c
 31487  004846  5CE5               	subwf	postdec1,w,c
 31488  004848  E102               	bnz	i1u685_25
 31489  00484A  50DF               	movf	indf2,w,c
 31490  00484C  5CE7               	subwf	indf1,w,c
 31491  00484E                     i1u685_25:
 31492  00484E  E308               	bnc	i1l7095
 31493                           
 31494                           ; BSR set to: 1
 31495                           ;fifo.c: 78: f->head = 0;
 31496  004850  EE20 F002          	lfsr	2,2
 31497  004854  5001               	movf	fifo_write@f,w,c
 31498  004856  26D9               	addwf	fsr2l,f,c
 31499  004858  5002               	movf	fifo_write@f+1,w,c
 31500  00485A  22DA               	addwfc	fsr2h,f,c
 31501  00485C  6ADE               	clrf	postinc2,c
 31502  00485E  6ADD               	clrf	postdec2,c
 31503  004860                     i1l7095:
 31504                           
 31505                           ; BSR set to: 1
 31506  004860  2A0F               	incf	fifo_write@i,f,c
 31507  004862  0E00               	movlw	0
 31508  004864  2210               	addwfc	fifo_write@i+1,f,c
 31509  004866  2211               	addwfc	fifo_write@i+2,f,c
 31510  004868  2212               	addwfc	fifo_write@i+3,f,c
 31511  00486A                     i1l7097:
 31512                           
 31513                           ; BSR set to: 1
 31514  00486A  5005               	movf	fifo_write@nbytes,w,c
 31515  00486C  5C0F               	subwf	fifo_write@i,w,c
 31516  00486E  5006               	movf	fifo_write@nbytes+1,w,c
 31517  004870  5810               	subwfb	fifo_write@i+1,w,c
 31518  004872  5007               	movf	fifo_write@nbytes+2,w,c
 31519  004874  5811               	subwfb	fifo_write@i+2,w,c
 31520  004876  5008               	movf	fifo_write@nbytes+3,w,c
 31521  004878  5812               	subwfb	fifo_write@i+3,w,c
 31522  00487A  E38F               	bnc	i1l7077
 31523                           
 31524                           ; BSR set to: 1
 31525                           ;fifo.c: 79: }
 31526                           ;fifo.c: 80: }
 31527                           ;fifo.c: 82: }
 31528                           ;fifo.c: 84: return nbytes;
 31529  00487C  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 31530  004880  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 31531  004884                     i1l1687:
 31532                           
 31533                           ; BSR set to: 1
 31534  004884  0012               	return	
 31535  004886                     __end_of_fifo_write:
 31536                           	opt stack 0
 31537  004886                     PL18:
 31538                           	opt stack 21
 31539  004886  26D9               	addwf	fsr2l,f,c
 31540  004888  5002               	movf	fifo_write@f+1,w,c
 31541  00488A  22DA               	addwfc	fsr2h,f,c
 31542  00488C  CFDE F009          	movff	postinc2,??_fifo_write
 31543  004890  CFDD F00A          	movff	postdec2,??_fifo_write+1
 31544  004894  EE20 F002          	lfsr	2,2
 31545  004898  5001               	movf	fifo_write@f,w,c
 31546  00489A  26D9               	addwf	fsr2l,f,c
 31547  00489C  5002               	movf	fifo_write@f+1,w,c
 31548  00489E  22DA               	addwfc	fsr2h,f,c
 31549  0048A0  CFDE F00B          	movff	postinc2,??_fifo_write+2
 31550  0048A4  CFDD F00C          	movff	postdec2,??_fifo_write+3
 31551  0048A8  2A0B               	incf	??_fifo_write+2,f,c
 31552  0048AA  0E00               	movlw	0
 31553  0048AC  220C               	addwfc	??_fifo_write+3,f,c
 31554  0048AE  500A               	movf	??_fifo_write+1,w,c
 31555  0048B0  180C               	xorwf	??_fifo_write+3,w,c
 31556  0048B2  0012               	return	
 31557  0048B4                     __end_ofPL18:
 31558                           	opt stack 0
 31559                           tblptru	equ	0xFF8
 31560                           tblptrh	equ	0xFF7
 31561                           tblptrl	equ	0xFF6
 31562                           tablat	equ	0xFF5
 31563                           prodh	equ	0xFF4
 31564                           prodl	equ	0xFF3
 31565                           intcon	equ	0xFF2
 31566                           indf0	equ	0xFEF
 31567                           postinc0	equ	0xFEE
 31568                           fsr0h	equ	0xFEA
 31569                           fsr0l	equ	0xFE9
 31570                           wreg	equ	0xFE8
 31571                           indf1	equ	0xFE7
 31572                           postinc1	equ	0xFE6
 31573                           postdec1	equ	0xFE5
 31574                           fsr1h	equ	0xFE2
 31575                           fsr1l	equ	0xFE1
 31576                           bsr	equ	0xFE0
 31577                           indf2	equ	0xFDF
 31578                           postinc2	equ	0xFDE
 31579                           postdec2	equ	0xFDD
 31580                           plusw2	equ	0xFDB
 31581                           fsr2h	equ	0xFDA
 31582                           fsr2l	equ	0xFD9
 31583                           status	equ	0xFD8
 31584                           
 31585 ;; *************** function _ReadUSART *****************
 31586 ;; Defined at:
 31587 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 31588 ;; Parameters:    Size  Location     Type
 31589 ;;		None
 31590 ;; Auto vars:     Size  Location     Type
 31591 ;;  data            1    0[COMRAM] unsigned char 
 31592 ;; Return value:  Size  Location     Type
 31593 ;;                  1    wreg      unsigned char 
 31594 ;; Registers used:
 31595 ;;		wreg, status,2, status,0
 31596 ;; Tracked objects:
 31597 ;;		On entry : 0/0
 31598 ;;		On exit  : F/1
 31599 ;;		Unchanged: 0/0
 31600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31601 ;;      Params:         0       0       0       0       0       0       0
 31602 ;;      Locals:         1       0       0       0       0       0       0
 31603 ;;      Temps:          0       0       0       0       0       0       0
 31604 ;;      Totals:         1       0       0       0       0       0       0
 31605 ;;Total ram usage:        1 bytes
 31606 ;; Hardware stack levels used:    1
 31607 ;; This function calls:
 31608 ;;		Nothing
 31609 ;; This function is called by:
 31610 ;;		_Interrupt
 31611 ;; This function uses a non-reentrant model
 31612 ;;
 31613                           
 31614                           	psect	text94
 31615  00681A                     __ptext94:
 31616                           	opt stack 0
 31617  00681A                     _ReadUSART:
 31618                           	opt stack 21
 31619                           
 31620                           ; BSR set to: 1
 31621                           ;incstack = 0
 31622                           ;incstack = 0
 31623  00681A  0EF2               	movlw	242
 31624  00681C  0101               	movlb	1	; () banked
 31625  00681E  1726               	andwf	_USART_Status& (0+255),f,b
 31626                           
 31627                           ; BSR set to: 1
 31628  006820  ACAB               	btfss	4011,6,c	;volatile
 31629  006822  D003               	goto	i1l2038
 31630                           
 31631                           ; BSR set to: 1
 31632  006824  9126               	bcf	_USART_Status& (0+255),0,b
 31633  006826  B0AB               	btfsc	4011,0,c	;volatile
 31634                           
 31635                           ; BSR set to: 1
 31636  006828  8126               	bsf	_USART_Status& (0+255),0,b
 31637  00682A                     i1l2038:
 31638                           
 31639                           ; BSR set to: 1
 31640  00682A  B4AB               	btfsc	4011,2,c	;volatile
 31641                           
 31642                           ; BSR set to: 1
 31643  00682C  8526               	bsf	_USART_Status& (0+255),2,b
 31644                           
 31645                           ; BSR set to: 1
 31646  00682E  B2AB               	btfsc	4011,1,c	;volatile
 31647                           
 31648                           ; BSR set to: 1
 31649  006830  8726               	bsf	_USART_Status& (0+255),3,b
 31650                           
 31651                           ; BSR set to: 1
 31652  006832  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 31653                           
 31654                           ; BSR set to: 1
 31655  006836  5001               	movf	ReadUSART@data,w,c
 31656                           
 31657                           ; BSR set to: 1
 31658  006838  0012               	return	
 31659  00683A                     __end_of_ReadUSART:
 31660                           	opt stack 0
 31661                           tblptru	equ	0xFF8
 31662                           tblptrh	equ	0xFF7
 31663                           tblptrl	equ	0xFF6
 31664                           tablat	equ	0xFF5
 31665                           prodh	equ	0xFF4
 31666                           prodl	equ	0xFF3
 31667                           intcon	equ	0xFF2
 31668                           indf0	equ	0xFEF
 31669                           postinc0	equ	0xFEE
 31670                           fsr0h	equ	0xFEA
 31671                           fsr0l	equ	0xFE9
 31672                           wreg	equ	0xFE8
 31673                           indf1	equ	0xFE7
 31674                           postinc1	equ	0xFE6
 31675                           postdec1	equ	0xFE5
 31676                           fsr1h	equ	0xFE2
 31677                           fsr1l	equ	0xFE1
 31678                           bsr	equ	0xFE0
 31679                           indf2	equ	0xFDF
 31680                           postinc2	equ	0xFDE
 31681                           postdec2	equ	0xFDD
 31682                           plusw2	equ	0xFDB
 31683                           fsr2h	equ	0xFDA
 31684                           fsr2l	equ	0xFD9
 31685                           status	equ	0xFD8
 31686                           tblptru	equ	0xFF8
 31687                           tblptrh	equ	0xFF7
 31688                           tblptrl	equ	0xFF6
 31689                           tablat	equ	0xFF5
 31690                           prodh	equ	0xFF4
 31691                           prodl	equ	0xFF3
 31692                           intcon	equ	0xFF2
 31693                           indf0	equ	0xFEF
 31694                           postinc0	equ	0xFEE
 31695                           fsr0h	equ	0xFEA
 31696                           fsr0l	equ	0xFE9
 31697                           wreg	equ	0xFE8
 31698                           indf1	equ	0xFE7
 31699                           postinc1	equ	0xFE6
 31700                           postdec1	equ	0xFE5
 31701                           fsr1h	equ	0xFE2
 31702                           fsr1l	equ	0xFE1
 31703                           bsr	equ	0xFE0
 31704                           indf2	equ	0xFDF
 31705                           postinc2	equ	0xFDE
 31706                           postdec2	equ	0xFDD
 31707                           plusw2	equ	0xFDB
 31708                           fsr2h	equ	0xFDA
 31709                           fsr2l	equ	0xFD9
 31710                           status	equ	0xFD8
 31711                           
 31712                           	psect	rparam
 31713  0000                     tblptru	equ	0xFF8
 31714                           tblptrh	equ	0xFF7
 31715                           tblptrl	equ	0xFF6
 31716                           tablat	equ	0xFF5
 31717                           prodh	equ	0xFF4
 31718                           prodl	equ	0xFF3
 31719                           intcon	equ	0xFF2
 31720                           indf0	equ	0xFEF
 31721                           postinc0	equ	0xFEE
 31722                           fsr0h	equ	0xFEA
 31723                           fsr0l	equ	0xFE9
 31724                           wreg	equ	0xFE8
 31725                           indf1	equ	0xFE7
 31726                           postinc1	equ	0xFE6
 31727                           postdec1	equ	0xFE5
 31728                           fsr1h	equ	0xFE2
 31729                           fsr1l	equ	0xFE1
 31730                           bsr	equ	0xFE0
 31731                           indf2	equ	0xFDF
 31732                           postinc2	equ	0xFDE
 31733                           postdec2	equ	0xFDD
 31734                           plusw2	equ	0xFDB
 31735                           fsr2h	equ	0xFDA
 31736                           fsr2l	equ	0xFD9
 31737                           status	equ	0xFD8
 31738                           tblptru	equ	0xFF8
 31739                           tblptrh	equ	0xFF7
 31740                           tblptrl	equ	0xFF6
 31741                           tablat	equ	0xFF5
 31742                           prodh	equ	0xFF4
 31743                           prodl	equ	0xFF3
 31744                           intcon	equ	0xFF2
 31745                           indf0	equ	0xFEF
 31746                           postinc0	equ	0xFEE
 31747                           fsr0h	equ	0xFEA
 31748                           fsr0l	equ	0xFE9
 31749                           wreg	equ	0xFE8
 31750                           indf1	equ	0xFE7
 31751                           postinc1	equ	0xFE6
 31752                           postdec1	equ	0xFE5
 31753                           fsr1h	equ	0xFE2
 31754                           fsr1l	equ	0xFE1
 31755                           bsr	equ	0xFE0
 31756                           indf2	equ	0xFDF
 31757                           postinc2	equ	0xFDE
 31758                           postdec2	equ	0xFDD
 31759                           plusw2	equ	0xFDB
 31760                           fsr2h	equ	0xFDA
 31761                           fsr2l	equ	0xFD9
 31762                           status	equ	0xFD8


Data Sizes:
    Strings     4443
    Constant    120
    Data        0
    BSS         1145
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      65
    BANK0           160    126     126
    BANK1           256      5     244
    BANK2           256     72     200
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ReadTimer3	unsigned int  size(1) Largest target is 2
		 -> WriteTimer3@timer(COMRAM[2]), ReadTimer3@timer(COMRAM[2]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_167(CODE[2]), STR_166(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_167(CODE[2]), STR_166(CODE[9]), STR_165(CODE[10]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_167(CODE[2]), STR_166(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_167(CODE[2]), STR_166(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_167(CODE[2]), STR_166(CODE[9]), STR_165(CODE[10]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_296(CODE[2]), STR_295(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_290(CODE[2]), 
		 -> STR_289(CODE[3]), STR_288(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_306(CODE[3]), STR_305(CODE[23]), STR_304(CODE[10]), STR_303(CODE[10]), 
		 -> STR_302(CODE[12]), STR_301(CODE[8]), STR_300(CODE[7]), STR_299(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_298(CODE[10]), STR_297(CODE[3]), STR_294(CODE[20]), 
		 -> STR_293(CODE[3]), STR_292(CODE[14]), STR_291(CODE[3]), STR_287(CODE[8]), 
		 -> STR_286(CODE[17]), STR_285(CODE[3]), STR_284(CODE[67]), STR_283(CODE[3]), 
		 -> STR_282(CODE[27]), STR_281(CODE[3]), STR_280(CODE[67]), STR_279(CODE[52]), 
		 -> STR_278(CODE[39]), STR_277(CODE[62]), STR_276(CODE[55]), STR_275(CODE[49]), 
		 -> STR_274(CODE[67]), STR_273(CODE[47]), STR_272(CODE[47]), STR_271(CODE[34]), 
		 -> STR_270(CODE[71]), STR_269(CODE[20]), STR_268(CODE[78]), STR_267(CODE[24]), 
		 -> STR_266(CODE[77]), STR_265(CODE[74]), STR_264(CODE[76]), STR_263(CODE[47]), 
		 -> STR_262(CODE[40]), STR_261(CODE[39]), STR_260(CODE[33]), STR_259(CODE[23]), 
		 -> STR_258(CODE[56]), STR_257(CODE[24]), STR_256(CODE[44]), STR_255(CODE[50]), 
		 -> STR_254(CODE[31]), STR_253(CODE[50]), STR_252(CODE[51]), STR_251(CODE[46]), 
		 -> STR_250(CODE[44]), STR_249(CODE[27]), STR_248(CODE[39]), STR_247(CODE[39]), 
		 -> STR_246(CODE[57]), STR_245(CODE[55]), STR_244(CODE[3]), STR_241(CODE[24]), 
		 -> STR_240(CODE[58]), STR_239(CODE[54]), STR_238(CODE[59]), STR_237(CODE[3]), 
		 -> STR_234(CODE[25]), STR_233(CODE[52]), STR_232(CODE[3]), STR_229(CODE[24]), 
		 -> STR_228(CODE[3]), STR_225(CODE[24]), STR_224(CODE[3]), STR_221(CODE[24]), 
		 -> STR_220(CODE[3]), STR_217(CODE[23]), STR_216(CODE[3]), STR_213(CODE[21]), 
		 -> STR_212(CODE[3]), STR_209(CODE[22]), STR_208(CODE[3]), STR_205(CODE[17]), 
		 -> STR_204(CODE[3]), STR_201(CODE[18]), STR_200(CODE[4]), STR_199(CODE[11]), 
		 -> STR_198(CODE[2]), STR_195(CODE[7]), STR_192(CODE[7]), STR_189(CODE[9]), 
		 -> STR_186(CODE[7]), STR_183(CODE[8]), STR_180(CODE[12]), STR_177(CODE[7]), 
		 -> STR_176(CODE[2]), STR_175(CODE[2]), STR_174(CODE[6]), STR_173(CODE[8]), 
		 -> STR_172(CODE[8]), STR_171(CODE[20]), STR_170(CODE[27]), STR_169(CODE[6]), 
		 -> STR_168(CODE[33]), STR_164(CODE[46]), STR_163(CODE[22]), STR_161(CODE[21]), 
		 -> STR_158(CODE[41]), STR_157(CODE[23]), STR_155(CODE[22]), STR_152(CODE[26]), 
		 -> STR_150(CODE[32]), STR_148(CODE[28]), STR_139(CODE[6]), STR_137(CODE[40]), 
		 -> STR_135(CODE[44]), STR_132(CODE[6]), STR_131(CODE[39]), STR_129(CODE[36]), 
		 -> STR_127(CODE[37]), STR_125(CODE[40]), STR_123(CODE[37]), STR_122(CODE[50]), 
		 -> STR_119(CODE[6]), STR_116(CODE[41]), STR_114(CODE[38]), STR_112(CODE[39]), 
		 -> STR_110(CODE[42]), STR_108(CODE[39]), STR_107(CODE[66]), STR_104(CODE[6]), 
		 -> STR_103(CODE[27]), STR_102(CODE[3]), STR_99(CODE[20]), STR_98(CODE[52]), 
		 -> STR_94(CODE[8]), STR_93(CODE[36]), STR_90(CODE[8]), STR_89(CODE[38]), 
		 -> STR_88(CODE[24]), STR_86(CODE[33]), STR_84(CODE[24]), STR_82(CODE[52]), 
		 -> STR_80(CODE[54]), STR_79(CODE[6]), STR_78(CODE[3]), STR_73(CODE[25]), 
		 -> STR_70(CODE[17]), STR_69(CODE[3]), STR_68(CODE[4]), STR_67(CODE[3]), 
		 -> STR_64(CODE[4]), STR_59(CODE[15]), wrkbuf(BANK1[80]), STR_56(CODE[14]), 
		 -> STR_54(CODE[33]), STR_52(CODE[24]), STR_50(CODE[52]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2262	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_308(CODE[17]), STR_307(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_243(CODE[3]), STR_242(CODE[7]), STR_236(CODE[3]), STR_235(CODE[7]), 
		 -> STR_231(CODE[4]), STR_230(CODE[8]), STR_227(CODE[4]), STR_226(CODE[8]), 
		 -> STR_223(CODE[4]), STR_222(CODE[8]), STR_219(CODE[4]), STR_218(CODE[8]), 
		 -> STR_215(CODE[4]), STR_214(CODE[7]), STR_211(CODE[4]), STR_210(CODE[7]), 
		 -> STR_207(CODE[4]), STR_206(CODE[7]), STR_203(CODE[4]), STR_202(CODE[7]), 
		 -> STR_197(CODE[3]), STR_196(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_191(CODE[3]), STR_190(CODE[7]), STR_188(CODE[3]), STR_187(CODE[7]), 
		 -> STR_185(CODE[3]), STR_184(CODE[7]), STR_182(CODE[4]), STR_181(CODE[8]), 
		 -> STR_179(CODE[3]), STR_178(CODE[7]), STR_101(CODE[3]), STR_100(CODE[7]), 
		 -> STR_96(CODE[4]), STR_95(CODE[8]), STR_92(CODE[4]), STR_91(CODE[8]), 
		 -> STR_77(CODE[3]), STR_76(CODE[7]), STR_75(CODE[3]), STR_74(CODE[7]), 
		 -> STR_72(CODE[6]), STR_71(CODE[10]), STR_66(CODE[3]), STR_65(CODE[7]), 
		 -> STR_63(CODE[3]), STR_62(CODE[7]), STR_61(CODE[3]), STR_60(CODE[7]), 
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2242$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(COMRAM[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(COMRAM[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(COMRAM[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(COMRAM[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(COMRAM[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(COMRAM[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1656	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_243(CODE[3]), STR_242(CODE[7]), 

    printErrors$1647	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_236(CODE[3]), STR_235(CODE[7]), 

    printErrors$1640	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_231(CODE[4]), STR_230(CODE[8]), 

    printErrors$1634	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_227(CODE[4]), STR_226(CODE[8]), 

    printErrors$1628	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_223(CODE[4]), STR_222(CODE[8]), 

    printErrors$1622	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_219(CODE[4]), STR_218(CODE[8]), 

    printStatistics$1615	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_215(CODE[4]), STR_214(CODE[7]), 

    printStatistics$1609	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_211(CODE[4]), STR_210(CODE[7]), 

    printStatistics$1603	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_207(CODE[4]), STR_206(CODE[7]), 

    printStatistics$1597	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_203(CODE[4]), STR_202(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1346(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1370(BANK2[1]), doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1527	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_197(CODE[3]), STR_196(CODE[7]), 

    receivePrintEventVerbose$1522	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    receivePrintEventVerbose$1517	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_191(CODE[3]), STR_190(CODE[7]), 

    receivePrintEventVerbose$1512	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_188(CODE[3]), STR_187(CODE[7]), 

    receivePrintEventVerbose$1507	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[3]), STR_184(CODE[7]), 

    receivePrintEventVerbose$1502	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    receivePrintEventVerbose$1497	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_179(CODE[3]), STR_178(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1410	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1387	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1376	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1367	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1361	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1352	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1348	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1338	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1334	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1329	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1321	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1316	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1312	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1307	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1295	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _main->_putsUSART
    _doModeSLCAN->_putsUSART
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_putsUSART
    _receiveSendEventSLCAN->_getCANFrame
    _ultoa->___lldiv
    _sendVSCPDriverErrorFrame->_crc8
    _sendVSCPDriverCommandReply->_crc8
    _sendVSCPModeCapabilities->_crc8
    _sendVSCPDriverAck->_crc8
    _sendVSCPDriverNack->_crc8
    _calcCRC->_crc8
    _receiveSendEventCANAL->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_crc8
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _doModeVerbose->_putsUSART
    _doModeVerbose->__CANIDToRegs
    _printBinary->_WriteUSART
    _findNodes->_putsUSART
    _printMDF->_putsUSART
    _printGUID->_putsUSART
    _printNodeFirmwareVersion->_putsUSART
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_putsUSART
    _printStatistics->_putsUSART
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _stristr->_strichr
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_putsUSART
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___lldiv
    ___wmul->_ReadTimer3
    ___llmod->___lldiv
    _printFirmwareVersion->_putsUSART
    _utoa->___lwmod
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->__CANIDToRegs
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Write_b_eep

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _vscp_restoreDefaults->_init_app_ram
    _init->_init_app_ram
    _init_app_ram->_setFilter

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  159191
                                            124 BANK0      2     2      0
                                              0 BANK1      5     0      5
                       _fifo_getFree
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9714
                                             51 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              0 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4117
                                             30 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1173
                                             17 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           4     4      0   24240
                                             84 BANK0      4     4      0
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             10 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             10 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3302
                                             51 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                             30 COMRAM     4     4      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             10 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                              7 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               23    23      0    4451
                                             14 BANK0     23    23      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                         _ReadTimer3
                        _getCANFrame
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          25    25      0    4919
                                             14 BANK0     25    25      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                         _ReadTimer3
                        _getCANFrame
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                              7 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                             30 COMRAM     5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       96    96      0  111274
                                            104 BANK0     20    20      0
                                              0 BANK2     72    72      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _OpenUSART
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4962
                                             83 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                             31 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4878
                                             83 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            6     6      0   25754
                                             98 BANK0      6     6      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5402
                                             92 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    7034
                                             92 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6814
                                             92 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4710
                                             83 BANK0      9     5      4
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             51 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             44 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                              7 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) _checkCANBusState                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                             30 COMRAM     2     2      0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7444
                                             47 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7336
                                             47 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1098
                                              8 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     354
                                              2 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     354
                                              2 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     168
                                             30 COMRAM     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1186
                                              8 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                             31 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                             34 COMRAM     1     1      0
                                              0 BANK0      8     2      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            24    24      0    9459
                                             47 BANK0     24    24      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
                         _ReadTimer3
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadTimer3                                           4     2      2      71
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1380
                                             14 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     906
                                             34 COMRAM     1     1      0
                                             10 BANK0      4     0      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     612
                                             30 COMRAM     4     4      0
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    6994
                                             17 BANK0     30    22      8
                         _ReadTimer3 (ARG)
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
                         _ReadTimer3 (ARG)
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                              8 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                             30 COMRAM     5     5      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1614
                                             20 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             12 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              3 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             30 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                             30 COMRAM     4     0      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    5040
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                             34 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                             31 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    5352
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                         _OpenTimer3
                        _WriteTimer3
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _WriteTimer3                                          4     2      2      68
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer3                                           1     1      0      66
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                        26    26      0    4710
                                             16 BANK0     26    26      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             32 COMRAM     3     3      0
                                              0 BANK0      7     0      7
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           16    11      5    3312
                                              0 BANK0     16    11      5
                         _Read_b_eep (ARG)
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                             30 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                             30 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _fifo_getFree                                        10     8      2     217
                                             30 COMRAM     2     0      2
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2363
                                             19 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                     i1_fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i1_fifo_getFree                                     10     8      2     511
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 12     8      4    1180
                                              7 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_getFree
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _OpenTimer3
     _WriteTimer3
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
           _Busy_eep (ARG)
           _Write_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _OpenUSART
     _setFilter
       _Read_b_eep (ARG)
       _Busy_eep (ARG)
       _Write_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
       _ReadTimer3
       ___wmul
         _ReadTimer3 (ARG)
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
         _ReadTimer3 (ARG)
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _ReadTimer3 (ARG)
       _isdigit (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___wmul (ARG)
         _ReadTimer3 (ARG)
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _ReadTimer3
       _getCANFrame
         _fifo_read
       ___wmul
         _ReadTimer3 (ARG)
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _ReadTimer3
       _getCANFrame
         _fifo_read
       ___wmul
         _ReadTimer3 (ARG)
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   i1_fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     48      C8       9       78.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      5      F4       7       95.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7E      7E       5       78.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      41       1       68.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     37B       3        0.0%
DATA                 0      0     577      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Oct 08 21:25:55 2015

        ??_receiveVSCPModeMultiCanalMsg 001F                   __end_of_doModeVerbose 1E34  
                          printBinary@i 0061                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0060                   __end_of_sendVSCPFrame 56EA  
            doModeVerbose@filter_nodeid 028E                                      PL2 1E34  
                                    PL4 1E44                                      PL6 1E52  
                                    PL8 32D2                                      _id 0036  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 6942  
                                   PL10 1E6E                                     PL20 1EB8  
                                   PL12 267A                                     PL30 1ED2  
                                   PL22 2698                                     PL14 3836  
                                   PL40 335C                                     PL32 1EE2  
                                   PL24 5BF2                                     PL16 3A38  
                                   PL50 1F22                                     PL42 1EF6  
                                   PL34 4A8E                                     PL26 4BE0  
                                   PL18 4886                                     PL60 5A20  
                                   PL52 1F3C                                     PL44 5240  
                                   PL36 331E                                     PL28 26A8  
                                   PL70 5D0E                                     PL62 26E8  
                                   PL54 26CE                                     PL46 4978  
                                   PL38 333E                                     PL80 499A  
                                   PL72 26FE                                     PL64 1F56  
                                   PL56 3A48                                     PL48 1F08  
                                   PL90 1F98                                     PL82 49AC  
                                   PL74 4986                                     PL66 4AA2  
                                   PL58 597C                                     PL92 58D4  
                                   PL84 509C                                     PL76 1F84  
                                   PL68 1F6E                                     PL94 3A58  
                                   PL86 4AB4                                     PL78 270C  
                                   PL96 4AC8                                     PL88 4DD6  
                                   PL98 49C0                 sendEscapedUartData@pcrc 0067  
                                   l505 6842                                     l507 684E  
                                   l523 07A4                                     l630 10C8  
                                   l622 1044                                     l606 0F86  
                                   l470 3FB4                                     l462 3F42  
                                   l519 0792                                     l471 3FBE  
                                   l463 3F82                                     l617 1018  
                                   l473 3FEC                                     l474 3FF6  
                                   l475 4014                                     l467 3F9E  
                                   l820 3504                                     l476 4016  
                                   l902 6158                                     l911 61A0  
                                   l920 54D2                                     l593 0EAE  
                                   l586 1E32                                     l914 54BE  
                                   l907 617C                                     l923 54EE  
                                   l932 5558                                     l597 106A  
                                   l941 58EA                                     l917 54C8  
                                   l781 35CE                                     l950 591A  
                                   l926 5510                                     l935 5562  
                                   l847 2B04                                     l944 58F4  
                                   l776 33C6                                     l953 593C  
                                   l929 5520                                     l857 2808  
                                   l962 5972                                     l794 345E  
                                   l882 2A08                                     l971 5998  
                                   l947 58FE                                     l980 59E0  
                                   l956 594C                                     l974 59A2  
                                   l983 59F0                                     l959 5968  
                                   l968 598E                                     l977 59BE  
                                   l986 5A0C                                     l899 614E  
                                   l995 50B6                                     l989 5A16  
                                   l998 50C0                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0079                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                  __size_of_WriteTimer3 0012                                     _dlc 003C  
                                   _pos 0032                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 0100                                     wreg 000FE8  
         __end_of_writeRegisterExtended 4CEE                                    PL100 5784  
                                  PL110 556C                                    PL102 2720  
                                  PL120 41CC                                    PL112 6756  
                                  PL104 2B06                                    PL130 6552  
                                  PL122 1FDA                                    PL114 517C  
                                  PL106 1FAA                                    PL140 35D8  
                                  PL132 3E6A                                    PL124 1FEA  
                                  PL116 1FBA                                    PL108 2732  
                                  PL134 4ADA                                    PL126 3C70  
                                  PL118 1FCA                         ReadTimer3@timer 0021  
                                  PL136 273C                                    PL128 5628  
                                  PL138 35D0                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1001 50CA  
                                  l1010 5118                                    l1004 50E6  
                                  l1013 5134                                    l1102 3892  
                                  l1022 5172                                    l1007 5108  
                                  l1016 5148                                    l1121 3A22  
                                  l1201 41C0                                    l1107 38CC  
                                  l1019 5168                                    l2012 6292  
                                  l1124 3A2C                                    l1204 41CA  
                                  l2013 6294                                    l2014 629E  
                                  l2015 62A0                                    l1063 2E2A  
                                  l1127 3A36                                    l1071 3CC4  
                                  l1400 3716                                    l2008 627E  
                                  l1064 2E3C                                    l1056 2D96  
                                  l1216 5428                                    l1208 4FC8  
                                  l1401 3728                                    l2017 62B8  
                                  l2025 636A                                    l1321 30E2  
                                  l1225 4E34                                    l1161 5592  
                                  l1402 373A                                    l1314 3068  
                                  l1074 3CCE                                    l1170 561E  
                                  l1403 374C                                    l1307 2FDE  
                                  l1219 54B4                                    l1243 4C40  
                                  l1155 557E                                    l1404 375E  
                                  l1332 46B0                                    l1228 4EDE  
                                  l1068 3CBA                                    l1092 3E68  
                                  l1164 55AE                                    l1405 3770  
                                  l1262 63E4                                    l1246 4CEC  
                                  l1086 3E54                                    l1158 5588  
                                  l1182 40B2                                    l1407 3834  
                                  l1415 5DAA                                    l1079 3D08  
                                  l1167 5614                                    l1191 413C  
                                  l1424 583C                                    l1328 4786  
                                  l1096 387E                                    l2217 4BD6  
                                  l1329 4682                                    l1089 3E5E  
                                  l1185 40EC                                    l1177 4080  
                                  l2218 4BDE                                    l1266 63F0  
                                  l1371 5CD4                                    l1419 668E  
                                  l1099 3888                                    l1198 41A0  
                                  l1391 3674                                    l1703 6012  
                                  l1711 6072                                    l1392 3686  
                                  l1368 5CB6                                    l1393 3698  
                                  l1705 601A                                    l1394 36AA  
                                  l1378 5FF8                                    l1730 5B02  
                                  l1395 36BC                                    l1731 5B68  
                                  l1396 36CE                                    l2524 5F0A  
                                  l1901 693A                                    l1397 36E0  
                                  l1389 3662                                    l1725 659C  
                                  l1398 36F2                                    l2534 6130  
                                  l1814 2292                                    l2710 5C94  
                                  l1399 3704                                    l2607 6448  
                                  l2712 5C88                                    l1649 4A8C  
                                  l2617 6610                                    l2713 5C8C  
                                  l1850 245C                                    l1842 23F4  
                                  l1762 2018                                    l1851 2460  
                                  l1675 521E                                    l1595 4656  
                                  l1587 45BA                                    l2660 61FE  
                                  l2493 5AAC                                    l1853 247C  
                                  l1589 45D8                                    l1926 6722  
                                  l1942 688E                                    l1678 523E  
                                  l1943 6890                                    l1848 2436  
                                  l2592 5078                                    l2737 648E  
                                  l1778 215E                                    l2746 65DA  
                                  l2682 5EA0                                    l2658 61A2  
                                  l1795 216E                                    l1779 210E  
                                  l2756 64D4                                    l1869 2506  
                                  l1966 680A                                    l1798 21A2  
                                  l1967 680C                                    l1799 21A6  
                                  l2679 5EA4                                    l1968 6814  
                                  l1969 6816                                    l2698 60DE  
                                  STR_1 7871                                    STR_2 7197  
                                  STR_3 7903                                    STR_4 72B0  
                                  STR_5 7A2A                                    STR_6 7FC1  
                                  STR_7 79EC                                    STR_8 7FA8  
                                  STR_9 7F6B                                    _PIE1 000F9D  
                                  _PEIE 007F96                          sendCANFrame@id 008C  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0020  
                                  _bDLE 0128                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 5A20                                    _bHex 002C  
          doModeVerbose@filter_priority 028C                                    _crc8 6690  
                                  _data 01D5                                    _caps 01F2  
                                  _atoi 4AE4                                    _main 3E78  
                                  _init 6200                                    _mode 012B  
                                  _itoa 66C8                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 5A2E                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 074E                            _sprintf$2262 0081  
                          _sprintf$2255 007D                            _sprintf$2256 007F  
          receiveSendMultiEventCANAL@id 0080               ECANReceiveMessage@dataLen 000A  
    __end_of_receiveSendMultiEventCANAL 3A38              _receiveSendMultiEventCANAL 384C  
                       i1fifo_getFree@f 0001                      doModeVerbose@count 02AF  
                 getVSCPFrame@pPriority 0070                      doModeVerbose@value 02B8  
                  __end_of_getVSCPFrame 5DAC                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 00A8  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 _B0CON 000E20                                   l11227 573A  
                                 _B1CON 000E30                                   l13035 684A  
                                 _B2CON 000E40                                   l15101 602A  
                                 l15007 3EDA                                   _B3CON 000E50  
                                 l16001 19D0                                   l15041 3F98  
                                 l15211 5FC4                                   l16021 1A58  
                                 l16005 19F0                                   l15053 3FC8  
                                 l15045 3FA8                                   l15215 5FD8  
                                 l15207 5FB2                                   l15223 5198  
                                 l16015 1A38                                   l15071 402E  
                                 l15039 3F84                                   _B4CON 000E60  
                                 l15241 68A0                                   l16105 1CB6  
                                 l16033 1A9E                                   l15401 0B70  
                                 l15321 0930                                   l15313 08FA  
                                 l15305 08C4                                   l16201 3404  
                                 l15057 3FD0                                   l15219 5FEC  
                                 l15235 5228                                   l16131 1D8A  
                                 l16115 1CE8                                   l16027 1A7A  
                                 l16211 342E                                   l15075 403A  
                                 l15067 4024                                   l15237 522C  
                                 l14445 6624                                   l17101 30D2  
                                 l17021 2EBC                                   l16133 1D98  
                                 l16117 1CF6                                   l16061 1B68  
                                 l16053 1B26                                   l15341 09D0  
                                 l15261 07A8                                   l14461 5B10  
                                 l15069 4028                                   l14615 66E4  
                                 l14447 6628                                   l17007 2E58  
                                 l16039 1AC4                                   l16143 1DFC  
                                 l15431 0C9E                                   l15423 0C52  
                                 l15415 0C02                                   l15407 0BAA  
                                 l15327 096C                                   l15247 075A  
                                 _B5CON 000E70                                   l12793 6280  
                                 l12785 6272                                   l16137 1DC6  
                                 l16081 1C10                                   l15513 0EFE  
                                 l15505 0EB6                                   l15441 0D16  
                                 l15425 0C62                                   l15409 0BB0  
                                 l15417 0C12                                   l15361 0A3E  
                                 l15353 0A12                                   l15345 09E6  
                                 l15337 09B4                                   l15281 0824  
                                 l16153 1E30                                   l16321 3548  
                                 l16305 351A                                   l16241 346E  
                                 l17035 2F20                                   l17115 4670  
                                 l16147 1E12                                   l16091 1C44  
                                 l15363 0A4E                                   l15099 6024  
                                 l16315 3534                                   l16251 3484  
                                 l16243 3474                                   l16227 3438  
                                 l14467 5B54                                   l16411 2844  
                                 l14813 5EBE                                   l17133 46C8  
                                 l17221 4EAE                                   l16093 1C52  
                                 l16069 1BAC                                   l15613 1180  
                                 l15605 1160                                   l15525 0F4C  
                                 l15437 0CDA                                   l15373 0AA4  
                                 l15357 0A28                                   l15349 09FC  
                                 l16149 1E1E                                   l15269 07C4  
                                 l16333 357A                                   l16237 3464  
                                 l16165 338C                                   l16421 286A  
                                 l14815 5ECA                                   l17311 21BE  
                                 l17151 4730                                   l17223 4EDC  
                                 l15535 0F98                                   l15607 1164  
                                 l15471 0DE2                                   l15463 0DAC  
                                 l15615 1190                                   l15447 0D52  
                                 l15391 0B28                                   l16327 3560  
                                 l16351 35C2                                   l16239 346A  
                                 l16191 33EA                                   l16167 3390  
                                 l16511 2AE4                                   l14825 5EFC  
                                 l14817 5ECE                                   l17401 2340  
                                 l17321 21EC                                   l17305 21AC  
                                 l17241 202E                                   l17081 3058  
                                 l17065 2FF8                                   l17049 2F84  
                                 l15561 103E                                   l15457 0D96  
                                 l15385 0AFE                                   l15297 088C  
                                 l15289 0856                                   l16345 35AE  
                                 l16353 35C8                                   l14761 659A  
                                 l14753 6588                                   l14745 6576  
                                 l16513 2AF0                                   l16505 2A76  
                                 l16531 3158                                   l14851 6418  
                                 l17403 2344                                   l17331 220E  
                                 l17235 2022                                   l18211 57C2  
                                 l17171 67A0                                   l15651 1280  
                                 l15547 0FE4                                   l15379 0AD4  
                                 l16339 3594                                   l16259 3490  
                                 l16187 33E2                                   l18115 4146  
                                 l18107 4100                                   l16507 2AD0  
                                 l14853 6420                                   l14773 686E  
                                 l17325 21F2                                   l17309 21B2  
                                 l17317 21D6                                   l17341 224C  
                                 l17253 206C                                   l17261 20B4  
                                 l17237 2026                                   l17245 2034  
                                 l17229 2000                                   l18213 57C4  
                                 l17077 3048                                   l17157 473E  
                                 l17173 67A8                                   l15813 15F4  
                                 l15805 15E4                                   l15709 13EC  
                                 l15741 14BC                                   l15661 12A2  
                                 l15653 1294                                   l15645 1216  
                                 l15637 1208                                   l15629 11D2  
                                 l15485 0E5A                                   l15397 0B52  
                                 l16269 34A2                                   l16357 35CC  
                                 l16445 2980                                   l16437 290C  
                                 l16517 2B02                                   ?_crc8 001F  
                                 l16703 52CC                                   l14863 643E  
                                 l14855 6424                                   l14871 65E8  
                                 l17423 23A4                                   l17335 221A  
                                 l17327 2200                                   l17239 202A  
                                 l18303 5484                                   l18311 62C4  
                                 l15831 1660                                   l15719 1422  
                                 l15575 1088                                   l15495 0E7C  
                                 l15487 0E6E                                   l15479 0DF0  
                                 l18151 650C                                   l16295 3506  
                                 l16287 34DC                                   l18119 415A  
                                 l16455 29AA                                   l16383 27B8  
                                 l14873 65F0                                   l18401 6100  
                                 l17513 2528                                   l17433 23D4  
                                 l17417 2378                                   l17281 2114  
                                 l18217 57C8                                   l17089 3082  
                                 l18161 668C                                   l18305 54B2  
                                 l18313 62CA                                   l15913 1802  
                                 l15905 17F2                                   l15841 16D2  
                                 l15737 1494                                   l15681 1328  
                                 l15673 12DC                                   l15665 12CE  
                                 l15585 10DA                                   l18145 64F0  
                                 l16377 2794                                   l14875 65F4  
                                 l14779 5A36                                   l17531 2564  
                                 l17515 252E                                   l17451 243A  
                                 l17427 23C2                                   l17419 238A  
                                 l17363 229C                                   l17291 216C  
                                 l17339 2220                                   l18411 6076  
                                 l17179 61CC                                   l18315 62D8  
                                 l15827 1630                                   l15819 1620  
                                 l15771 1540                                   l15763 1532  
                                 l18251 4FDA                                   l16475 2A0E  
                                 l16467 29EA                                   l16395 2800  
                                 l16637 3782                                   l16717 52EA  
                                 l14789 5A6E                                   l18405 6122  
                                 l17533 25BA                                   l17525 2550  
                                 l17509 2516                                   l17445 2412  
                                 l17373 22D0                                   l17349 225C  
                                 l17293 2172                                   l17285 214A  
                                 l17269 20DC                                   l18229 5802  
                                 l18421 60CA                                   l16901 4AE6  
                                 l18333 4554                                   l18317 62E2  
                                 l15693 1386                                   l15597 1122  
                                 l18261 501E                                   l16389 27DC  
                                 l16639 37C8                                   l16663 4A1E  
                                 l14879 6606                                   l17543 2600  
                                 l17439 23F8                                   l17375 22D4  
                                 l17367 22BA                                   l17287 2164  
                                 l16807 2CFE                                   l18415 60B2  
                                 l18431 65CA                                   l16911 4B40  
                                 l16903 4AEC                                   l18327 4542  
                                 l17703 5B94                                   l15935 1892  
                                 l15927 183C                                   l15919 182C  
                                 l15871 1752                                   l15863 1742  
                                 l15791 15A8                                   l15687 1360  
                                 l16479 2A24                                   l16399 2816  
                                 l17553 263A                                   l17465 248C  
                                 l17481 24C0                                   l17289 2168  
                                 l16833 2DA2                                   l18425 65AA  
                                 l16913 4B58                                   l18361 45DA  
                                 l18345 457E                                   l17641 534A  
                                 l17713 5BD0                                   l17625 4CBC  
                                 l15937 18A0                                   l15785 157A  
                                 l15777 156C                                   l15697 13B0  
                                 l16489 2A44                                   l17547 261A  
                                 l17539 25DC                                   l17475 24AC  
                                 l17459 2476                                   l17387 2308  
                                 l17299 218A                                   l17563 2664  
                                 l18195 5D4C                                   l16843 2E12  
                                 l16819 2D4C                                   l16755 2B6A  
                                 l18419 60C0                                   l16915 4B60  
                                 l16931 67DE                                   l18355 45BE  
                                 l17707 5BBA                                   l17627 4CEA  
                                 l15891 17B8                                   l17811 39F0  
                                 l16499 2A60                                   l17557 265C  
                                 l17549 262C                                   l17493 24E6  
                                 l17389 230C                                   l17565 266C  
                                 l16845 2E16                                   l16853 2E3A  
                                 l18429 65C6                                   l18445 649E  
                                 l18453 6458                                   l18381 4648  
                                 l17653 53CA                                   l17709 5BC2  
                                 l15981 1948                                   l15885 178C  
                                 l15877 177C                                   l17901 678C  
                                 l16863 68D2                                   l16847 2E1E  
                                 l16783 2C60                                   l18439 68BE  
                                 l16871 5E66                                   l18447 64A8  
                                 l18455 6462                                   l16919 4B9C  
                                 l16951 41F4                                   l16927 67CE  
                                 l18367 4608                                   l18375 4626  
                                 l17647 5396                                   l17583 63FA  
                                 l17575 63CA                                   l15991 1992  
                                 l15799 15B8                                   l17815 3A12  
                                 l17807 39CC                                   l17489 24DC  
                                 l16769 2BBC                                   l16777 2C46  
                                 l16873 5E8C                                   l16881 5C0E  
                                 l18385 464C                                   l17649 53AC  
                                 l17681 4D94                                   l15969 18B4  
                                 l17737 38B4                                   l17841 3CF0  
                                 l17499 24EE                                   l16795 2CB0  
                                 l16867 5E2E                                   l16891 5C48  
                                 l18387 464E                                   l15899 17C8  
                  __size_of_doModeSLCAN 03C0                                   l18397 60F0  
                                 l16965 4258                                   l17685 4DB2  
                                 l17677 4D76                                   l17669 4D12  
                                 l17749 38FA                                   l18399 60FC  
                                 l17679 4D7E                                   l17791 398A  
                                 l16993 4320                                   l17785 397E  
                                 l17881 3E2A                                   l16979 42BC  
                                 l17797 39A8                                   l17885 3E44  
                                 l17877 3E1E                                   l17975 4F86  
                                 l17897 676C                                   ?_atoi 0066  
                                 ?_main 01ED                                   ?_init 0001  
                                 ?_itoa 006C                           i1_WriteTimer0 6920  
                                 _EEADR 000FA9                                   STR_10 7F49  
                                 STR_11 7F6B                                   STR_12 7F83  
                                 STR_20 7F34                                   STR_13 7F6B  
                                 STR_21 7D0E                                   STR_30 7FF5  
                                 STR_14 7EAF                                   STR_22 7D22  
                                 STR_15 7F6B                                   STR_31 7FF5  
                                 STR_23 7D5E                                   STR_32 7FF5  
                                 STR_16 7F3B                                   STR_40 7D83  
                                 STR_24 7C50                                   STR_17 7F6B  
                                 STR_33 7FF5                                   STR_41 7FBC  
                                 STR_25 7AE9                                   STR_42 7F6B  
                                 STR_34 7FF5                                   STR_18 7EF9  
                                 STR_26 7CFA                                   STR_50 7353  
                                 STR_19 7F6B                                   STR_51 7E73  
                                 STR_35 7FF5                                   STR_43 7FD6  
                                 STR_27 7D71                                   STR_44 7F6B  
                                 STR_36 7F6B                                   STR_60 7F50  
                                 STR_28 7B7C                                   STR_52 7B64  
                                 STR_53 7E73                                   STR_61 7FEE  
                                 STR_29 7FEB                                   STR_45 7FB7  
                                 STR_37 7969                                   STR_46 7F6B  
                                 STR_62 7F50                                   STR_38 7FE8  
                                 STR_70 7DEB                                   STR_54 79AB  
                                 STR_39 7F6B                                   STR_55 7E73  
                                 STR_71 7E6B                                   STR_63 7FEE  
                                 STR_47 7F94                                   STR_48 7F6B  
                                 STR_72 7F71                                   STR_64 7EDD  
                                 STR_56 7E19                                   STR_80 731D  
                                 STR_65 7F50                                   STR_81 7F9E  
                                 STR_49 7F99                                   STR_57 7E6B  
                                 STR_73 7B1B                                   STR_82 7353  
                                 STR_90 7E1F                                   STR_74 7F50  
                                 STR_66 7FEE                                   STR_58 7F71  
                                 STR_83 7E73                                   STR_75 7FEE  
                                 STR_67 7FE2                                   STR_91 7ED1  
                                 STR_59 7DFC                                   STR_84 7B64  
                                 STR_76 7F50                                   STR_92 7FCE  
                                 STR_68 7FC6                                   STR_69 731A  
                                 STR_85 7E73                                   STR_77 7FEE  
                                 STR_93 78DF                                   STR_78 731A  
                                 STR_86 79AB                                   STR_94 7E1F  
                                 STR_79 7F6B                                   STR_95 7ED1  
                                 STR_87 7E73                                   STR_96 7FCE  
                                 STR_88 7B94                                   STR_97 7FAD  
                                 STR_89 7826                                   STR_98 7353  
                                 STR_99 7D36            __end_of_printFirmwareVersion 5D0E  
                                 _BSEL0 000DF8                         __end_of___lldiv 5F1C  
                                 ?_utoa 0063                         __end_of_calcCRC 6796  
                                 _T0CON 000FD5                         __end_of___llmod 6142  
                                 u20065 1E76                                   u20315 1BD2  
                                 u20075 16F8                                   u20500 340A  
                                 u20165 18DA                                   u20175 1922  
                                 u21225 49F8                                   u20345 1C78  
                                 u20185 196E                                   u21235 4A08  
                                 u13245 5710                                   u21245 4A24  
                                 u21510 4B00                                   u20375 1D1C  
                                 _LATC1 007C59                                   u21600 4BB0  
                                 u20704 34EC                                   _T3CON 000FB1  
                                 u21185 3606                                   u20385 1DBE  
                                 u20705 34EA                                   u21186 360C  
                                 u21530 4B18                                   u21195 363A  
                                 u21187 361A                                   u20395 1DEC  
                                 u21196 3640                                   u21197 364E  
                                 u21517 4AFA                                   u21550 4B36  
                                 u21295 672E                                   u21607 4BAA  
                                 u21296 6730                                   u20664 34B0  
                                 u21537 4B12                                   u20665 34AE  
                                 u21570 4B54                                   u21900 61F6  
                                 u21557 4B30                                   u21645 5670  
                                 u21590 4B86                                   u24207 3EEA  
                                 u20960 28D8                                   u21577 4B4E  
                                 u22634 63DA                                   u20970 28E2  
                                 u21907 61F0                                   u22635 63D6  
                                 u20980 28EC                                   u21597 4B80  
                                 u23285 4F1C                                   u20965 28D6  
                                 u20975 28E0                                   u21880 61BE  
                                 u20985 28EA                                   u18130 6644  
                                 u19100 63B6                                   u21887 61B8  
                                 u18137 663E                                   u23770 5D9E  
                                 u19107 63B0                                   u23950 630A  
                                 u23775 5D94                                   u19305 0800  
                                 u19090 638A                         __end_of___lwdiv 6452  
                                 u19315 083C                                   u23957 6300  
                                 u19325 0870                                   u19335 08A8  
                                 _ERRIE 007D1D                                   _ERRIF 007D25  
                                 u19097 6384                                   u19345 08E0  
                                 u19195 520A                                   u19355 0916  
                                 u19605 0D00                                   u19365 0956  
                                 u19615 0D3C                                   u19375 0992  
                                 u19625 0D78                                   u19475 0A74  
                                 u19565 0C38                            _vscpPriority 003F  
                                 u19585 0C88                                   u19595 0CC4  
                                 i1l420 0588                                   i1l415 0490  
                                 u19855 11B6                                   i1l417 058A  
                       __end_of___lwmod 661A                                   u19945 13D6  
                                 i1l434 05BC                                   i1l426 0588  
                                 i1l444 0634                                   i1l436 05D2  
                                 i1l429 0578                                   i1l454 0730  
                                 u19985 14E2                         sendCANFrame@dlc 0090  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0060                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TMR3L 000FB2                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B5                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 002D  
               readRegisterExtended@reg 00B5                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 001F                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 5ACE                                   crc8@m 0021  
                                 _flags 003D                         __end_of_dpowers 6E84  
                Write_b_eep@GIE_BIT_VAL 0022                        _checkCANBusState 683A  
                       __end_of_isdigit 6876                                   _timer 0024  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00DD                                   _ultoa 4FCA  
                            Interrupt@c 001D              ??_printNodeFirmwareVersion 0024  
                      _printErrors$1622 008F                        _printErrors$1640 0095  
                                 tablat 000FF5                        _printErrors$1634 0093  
                      _printErrors$1628 0091                        _printErrors$1647 0097  
                      _printErrors$1656 0099                 ??_receiveSendEventCANAL 006E  
           __end_of_sendEscapedUartData 61A2                                   plusw2 000FDB  
                                 utoa@c 006B                                   utoa@v 0069  
                                 status 000FD8                         __end_of_sprintf 267A  
               ??_receiveSendEventSLCAN 007E                         __end_of_strichr 65DC  
                       __end_of_strcspn 6498                         __end_of_toupper 68C2  
                       __end_of_stristr 5EA6                            __end_ofPL100 5796  
                          __end_ofPL110 557A                            __end_ofPL102 2732  
                          __end_ofPL120 41DA                            __end_ofPL112 6766  
                          __end_ofPL104 2B12                            __end_ofPL130 6560  
                          __end_ofPL122 1FEA                            __end_ofPL114 518A  
                          __end_ofPL106 1FBA                            __end_ofPL140 35EC  
                          __end_ofPL132 3E78                            __end_ofPL124 1FFA  
                          __end_ofPL116 1FCA                            __end_ofPL108 273C  
                          __end_ofPL134 4AE4                            __end_ofPL126 3C7E  
                          __end_ofPL118 1FDA                            __end_ofPL136 2746  
                          __end_ofPL128 5634                            __end_ofPL138 35D8  
     __size_of_receivePrintEventVerbose 032C                     doModeVerbose@i_1288 02B5  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1410 02C4  
                   doModeVerbose@p_1348 02BB                     doModeVerbose@p_1295 02B9  
                   doModeVerbose@p_1387 02C6                          WriteUSART@data 001F  
                  _ECANSetOperationMode 6894                            _canInputFifo 01CD  
                       __initialization 6314                  doModeVerbose@page_1344 02A8  
         receiveSendMultiEventCANAL@dlc 0084                            __end_of_crc8 66C8  
         receiveSendMultiEventCANAL@crc 0085                            __end_of_atoi 4BE0  
         receiveSendMultiEventCANAL@pos 0086                            __end_of_main 4046  
                          __end_of_init 625E                            __end_of_itoa 6700  
                            _ReadTimer3 68D8                            __end_of_utoa 5ACE  
                   doModeVerbose@ifmode 02BD                              _Read_b_eep 68FC  
                   doModeVerbose@maskno 02B2                        __end_of_Busy_eep 6940  
                   doModeVerbose@nodeid 02B0                           doModeSLCAN@id 009A  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A0  
                     ??_ECANSendMessage 006F                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00B8                                  ??_crc8 0022  
                 getVSCPFrame@pvscptype 006E                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0024                                  ??_main 00DC  
                     readRegister@value 00B6                                  ??_init 0024  
                                ??_itoa 0024                                  ??_utoa 0024  
                doModeVerbose@mask_type 0290                           __activetblptr 000002  
                       _stateVscpDriver 0035                       __RegsToCANID@type 0004  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000B  
                         ?_readRegister 00B3               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1352 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B6  
            ECANReceiveMessage@savedPtr 000C                                  _CANCON 000F6F  
                      ___llmod@dividend 0068                                  STR_100 7F50  
                                STR_101 7FEE                                  STR_102 731A  
                                STR_110 7622                                  STR_111 7FF5  
                                STR_103 7A63                                  STR_104 7F6B  
                                STR_200 7FCA                                  STR_120 7FA3  
                                STR_112 77B2                                  STR_121 7FF5  
                                STR_113 7FF5                                  STR_105 7F42  
                                STR_201 7D95                                  STR_130 7FF5  
                                STR_106 7FF5                                  STR_210 7F5E  
                                STR_202 7F5E                                  STR_114 7800  
                                STR_122 73EE                                  STR_115 7FF5  
                                STR_211 7FDE                                  STR_203 7FDE  
                                STR_123 784C                                  STR_131 778B  
                                STR_107 70A2                                  STR_220 731A  
                                STR_212 731A                                  STR_204 731A  
                                STR_132 7F6B                                  STR_124 7FF5  
                                STR_300 7F11                                  STR_140 7E9D  
                                STR_108 7716                                  STR_116 7675  
                                STR_117 7FF5                                  STR_109 7FF5  
                                STR_141 7F83                                  STR_133 7F8F  
                                STR_301 7F09                                  STR_205 7DDA  
                                STR_213 7CBD                                  STR_221 7BDC  
                                STR_125 76C6                                  STR_126 7FF5  
                                STR_142 7FA8                                  STR_214 7F5E  
                                STR_206 7F5E                                  STR_230 7F01  
                                STR_222 7F01                                  STR_134 7FDA  
                                STR_118 7E55                                  STR_302 7E33  
                                STR_150 79CC                                  STR_119 7F6B  
                                STR_143 7F49                                  STR_231 7FDE  
                                STR_223 7FDE                                  STR_215 7FDE  
                                STR_207 7FDE                                  STR_151 7F89  
                                STR_303 7E93                                  STR_127 7896  
                                STR_135 75F6                                  STR_232 731A  
                                STR_224 731A                                  STR_216 731A  
                                STR_208 731A                                  STR_128 7FF5  
                                STR_144 7F3B                                  STR_160 7EFE  
                                STR_136 7EF1                                  STR_304 7E89  
                                STR_152 7ACF                                  STR_240 715D  
                                STR_145 7EAF                                  STR_153 7F7D  
                                STR_161 7CA8                                  STR_209 7C92  
                                STR_305 7C39                                  STR_217 7C22  
                                STR_225 7BC4                                  STR_241 7BAC  
                                STR_129 78BB                                  STR_137 76EE  
                                STR_233 7387                                  STR_306 731A  
                                STR_162 7FD2                                  STR_154 7EFE  
                                STR_242 7F50                                  STR_226 7F01  
                                STR_218 7F01                                  STR_146 7F77  
                                STR_138 7E4A                                  STR_234 7B02  
                                STR_170 7A99                                  STR_250 75CA  
                                STR_139 7F6B                                  STR_235 7F50  
                                STR_243 7FEE                                  STR_227 7FDE  
                                STR_219 7FDE                                  STR_147 7EE9  
                                STR_307 7DA7                                  STR_171 7CE6  
                                STR_155 7C7C                                  STR_163 7C66  
                                STR_251 7570                                  STR_244 731A  
                                STR_228 731A                                  STR_236 7FEE  
                                STR_156 7FD2                                  STR_172 7EC1  
                                STR_180 7E27                                  STR_308 7DB8  
                                STR_148 7A47                                  STR_260 7948  
                                STR_164 7542                                  STR_252 73BB  
                                STR_237 731A                                  STR_229 7BC4  
                                STR_149 7FB2                                  STR_181 7F01  
                                STR_173 7EC9                                  STR_165 7E7F  
                                STR_157 7C0B                                  STR_261 773D  
                                STR_253 7420                                  STR_245 7242  
                                _EEDATA 000FA8                                  STR_190 7F50  
                                STR_182 7FDE                                  STR_174 7F65  
                                STR_166 7EB8                                  STR_254 7A0B  
                                STR_262 769E                                  STR_158 764C  
                                STR_246 71D1                                  STR_238 7122  
                                STR_270 6FD5                                  STR_191 7FEE  
                                STR_167 7FFD                                  STR_175 7FF3  
                                STR_183 7EE1                                  STR_159 7E3F  
                                STR_271 7926                                  STR_247 7764  
                                STR_263 7513                                  STR_255 7452  
                                STR_239 72E7                                  STR_248 7038  
                                STR_176 7FF1                                  STR_184 7F57  
                                STR_192 7F26                                  STR_168 798A  
                                STR_256 759E                                  STR_272 74E4  
                                STR_280 701C                                  STR_264 6F3F  
                                STR_281 731A                                  STR_169 7F6B  
                                STR_193 7F50                                  STR_185 7FEE  
                                STR_177 7F2D                                  STR_257 7B34  
                                STR_249 7A7E                                  STR_273 74B5  
                                STR_265 6F8B                                  STR_178 7F50  
                                STR_194 7FEE                                  STR_290 7FFB  
                                STR_186 7F1F                                  STR_282 7AB4  
                                STR_258 720A                                  STR_274 705F  
                                STR_266 6EF2                                  STR_291 731A  
                                STR_283 731A                                  STR_187 7F50  
                                STR_179 7FEE                                  STR_195 7F18  
                                STR_259 7BF4                                  STR_267 7B4C  
                                STR_275 7484                                  STR_284 701C  
                                STR_196 7F50                                  STR_188 7FEE  
                                STR_292 7E0B                                  STR_276 7279  
                                STR_268 6EA4                                  STR_293 731A  
                                STR_285 731A                                  STR_197 7FEE  
                                STR_189 7EA6                                  STR_269 7CD2  
                                STR_277 70E4                                  STR_198 7FF5  
                                STR_286 7DC9                                  STR_294 7D4A  
                                STR_278 77D9                                  STR_279 7353  
                                STR_295 7FFD                                  STR_287 7ED9  
                                STR_199 7E60                                  STR_288 7FF9  
                                STR_296 7FF7                                  STR_297 731A  
                                STR_289 7FE5                                  STR_298 7E75  
                                STR_299 731A                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 4EE0                                  _CIOCON 000F73  
                                ?_ultoa 0071            ??_sendVSCPDriverCommandReply 0024  
                  __end_of_fifo_getFree 5784                                  i1l2038 682A  
                                i1l1600 3AA4                           ?_init_app_ram 0001  
                                i1l1610 3B76                                  i1l1611 3AF6  
                                _MDSEL0 007BBE                                  i1l1621 3B50  
                                i1l1613 3B04                                  _MDSEL1 007BBF  
                                i1l1631 3BDC                                  i1l1623 3B60  
                                i1l1615 3B18                                  i1l1607 3C6E  
                                i1l1632 3BF6                                  i1l1617 3B2C  
                                i1l1619 3B40                                  i1l1654 4976  
                                i1l1659 5F88                                  i1l1686 47CC  
                                i1l1687 4884                              _OpenTimer0 6876  
                            _OpenTimer3 67F2                                  i1l7085 47D6  
                                i1l7077 479A                                  i1l7095 4860  
                                i1l7097 486A                         _init_app_eeprom 525C  
                    __size_of_ReadUSART 0020                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0008                  ECANReceiveMessage@mode 0010  
                ECANReceiveMessage@temp 0011                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0072  
            ??_sendVSCPDriverErrorFrame 0024                       getVSCPFrame@pSize 0071  
                    _doModeVerbose$1312 0295                      _doModeVerbose$1321 0299  
                    _doModeVerbose$1307 0293                      _doModeVerbose$1316 0297  
                    _doModeVerbose$1334 029D                      _doModeVerbose$1361 02A1  
                    _doModeVerbose$1329 029B                      _doModeVerbose$1338 029F  
                    _doModeVerbose$1367 02A3                      _doModeVerbose$1376 02A5  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0023  
                    __size_of_Interrupt 0336                              _bLocalEcho 012A  
              readRegisterExtended@page 00B3                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0023  
                                ___wmul 6734                              _bInitiated 0129  
                        __CFG_STVREN$ON 000000                               ??___lldiv 001F  
                             ??_calcCRC 0024                                  _cmdbuf 012D  
                             ??___llmod 0024                        OpenTimer0@config 001F  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0023  
                             ??___lwmod 0023           _receivePrintEventVerbose$1502 009A  
         _receivePrintEventVerbose$1512 009E           _receivePrintEventVerbose$1522 00A2  
         _receivePrintEventVerbose$1507 009C           _receivePrintEventVerbose$1517 00A0  
         _receivePrintEventVerbose$1527 00A4           _receivePrintEventVerbose$1497 0098  
         _receivePrintEventVerbose$3673 0094                                  _memcpy 64DE  
                                _memset 67C4                                  clear_0 631C  
                                clear_1 6330                                  clear_2 6342  
                                clear_3 634E                                  clear_4 635A  
                      OpenTimer3@config 001F                           ?_sendCANFrame 008C  
                                _strcat 62BA                                  _strchr 61A2  
                                _strcpy 6796                                  _strlen 661A  
                                _wrkbuf 017D                                  _strtok 5C00  
                                _strspn 6498     __size_of_sendVSCPDriverCommandReply 00CC  
                             ??_isdigit 001F                  receiveSendEventSLCAN@i 0086  
                      __end_of_printMDF 5BF2                            __mediumconst 6E2C  
                        ??_readRegister 00B7                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 007D                                  ultoa@v 0079  
                          ?_printErrors 0001                               ??_sprintf 0079  
                             ??_strichr 0024                               ??_strcspn 0023  
                             ??_toupper 001F                          ??_init_app_ram 0070  
                             ??_stristr 0024                              _bTimestamp 002F  
            ??_sendVSCPModeCapabilities 0024              doModeVerbose@mask_priority 028F  
                      __end_of_strnicmp 60E0                              __accesstop 0060  
               __end_of__initialization 6360                    _printFirmwareVersion 5C96  
                 __size_of_getVSCPFrame 0088                doModeVerbose@bPersistent 02AB  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1422 02C0  
                            _WriteUSART 68C2                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0190                             ?_ReadTimer3 001F  
                  _printStatistics$1603 0091                    _printStatistics$1615 0095  
                  _printStatistics$1609 0093                    _printStatistics$1597 008F  
                 _uart_transmitOverruns 0120                             ?_Read_b_eep 001F  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 509C  
                            __end_ofPL2 1E44                              __end_ofPL4 1E52  
                            __end_ofPL6 1E6E                              __end_ofPL8 331E  
                        ??_sendCANFrame 0024                       __end_of_ReadUSART 683A  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 0206  
                    sendVSCPFrame@pData 0099                         readRegister@reg 00B3  
               __size_ofi1_fifo_getFree 0096                    sendVSCPDriverAck@crc 006A  
                    __size_of_findNodes 0130                          doModeSLCAN@dlc 009E  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 0078                         _fifo_canrxcount 0030  
               __end_of_init_app_eeprom 5326                       __end_of_Interrupt 074E  
                         ReadUSART@data 0001                      readRegister@nodeid 00BB  
                        _status_led_cnt 0028                      __RegsToCANID@Value 0007  
                            _crc8_table 0300                       __end_of_OpenUSART 62BA  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C1  
                       setFilter@filter 006B                            sprintf@width 0086  
      __end_of_printNodeFirmwareVersion 53EE                              _doModeVscp 337A  
                               ??_ultoa 0024                            _getVSCPFrame 5D24  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                           ?_OpenTimer3 0001                              calcCRC@crc 006B  
                             ?_Busy_eep 0001                              calcCRC@len 0069  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 001F  
                    __size_of_init_crc8 0070                           setFilter@eidh 006E  
                         setFilter@eidl 006F                           setFilter@sidh 006C  
                         setFilter@sidl 006D                        ??_doModeVscpNode 001F  
                            _nTimeStamp 012C             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 5B6A                ECANSetOperationMode@mode 001F  
                               ?___wmul 0060                      __size_of_setFilter 024A  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0127                __end_of_checkCANBusState 6858  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 598A  
                               _B5RXFUL 007387                        WriteTimer0@timer 0021  
                         putsUSART@data 0020                    _readRegisterExtended 4DEA  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0021  
                         ??_WriteTimer3 0021                        WriteTimer3@timer 0021  
                        ??__RegsToCANID 0005                           ??_Write_b_eep 0022  
                 sendVSCPFrame@priority 0097                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 001F                                 ?_strchr 001F  
                               ?_strcpy 001F                                 ?_strlen 001F  
                               ?_strtok 0068                                 ?_strspn 0062  
                            _cntRxBytes 0108                              _cntTxBytes 0110  
                               i1l11021 3C24                                 i1l11013 3BF8  
                               i1l11101 059A                                 i1l11111 05CC  
                               i1l11103 05AC                                 i1l11121 05EE  
                               i1l11113 05DA                                 i1l11105 05AE  
                               i1l11035 3C58                                 i1l11131 0644  
                               i1l11123 0610                                 i1l11115 05E0  
                               i1l11107 05B6                                 i1l11051 047C  
                               i1l11029 3C42                                 i1l11141 06EC  
                               i1l11133 0670                                 i1l11125 0618  
                               i1l11109 05C4                                 i1l11117 05E4  
                               i1l11061 04C6                                 i1l11053 048C  
                               i1l11045 0434                                 i1l11143 06F0  
                               i1l11135 0672                                 i1l11127 0620  
                               i1l11119 05E6                                 i1l11071 04FA  
                               i1l11063 04CA                                 i1l11055 0498  
                               i1l11047 043C                                 i1l11145 071C  
                               i1l11137 06AE                                 i1l11129 063C  
                               i1l11081 052A                                 i1l11065 04D6  
                               i1l11057 04A4                                 i1l11049 0442  
                               i1l11147 0720                                 i1l11139 06B2  
                               i1l11155 072E                                 i1l11083 0536  
                               i1l11075 050C                                 i1l11067 04E6  
                               i1l11059 04B4                                 i1l11149 0722  
                               i1l11093 0566                                 i1l11077 0518  
                               i1l11069 04EE                                 i1l11095 0570  
                               i1l11087 0548                                 i1l10641 5F22  
                               i1l11097 0580                                 i1l11089 0554  
                               i1l10651 5F52                                 i1l10643 5F2A  
                               i1l11099 0592                      __size_of_printGUID 00E8  
                               i1l10653 5F58                                 i1l10645 5F34  
                               i1l10655 5F5E                                 i1l10647 5F3E  
                   ?_sendVSCPDriverNack 0001                                 i1l10649 5F48  
                               i1l10673 4912                                 i1l10659 5F6A  
                               i1l10933 3AD4                                 i1l10917 3A90  
                               i1l10941 3AE4                                 i1l10927 3ABC  
                               i1l10935 3AE0                                 i1l10985 3B8A  
                               i1l10897 588C                                 i1l10995 3BAC  
                            _fifo_write 4788                      __size_of_printHelp 0180  
                    __size_of_printMode 0072                   sendVSCPFrame@vscptype 0095  
                 __size_of_fifo_getFree 009A                 doModeVerbose@value_1346 02AE  
               doModeVerbose@value_1370 02AA                       sendCANFrame@pdata 0091  
                            _made_table 0124                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 5F1C                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0054      __end_of_sendVSCPDriverCommandReply 517C  
            _sendVSCPDriverCommandReply 50B0                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 4BEE  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 16E2  
                  sendEscapedUartData@c 0069                     __size_of_ReadTimer3 0012  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 001F        __end_of_sendVSCPDriverErrorFrame 556C  
        __size_of_receiveSendEventCANAL 01EC           __end_of_receiveSendEventCANAL 3E6A  
                  ??_sendVSCPDriverNack 0024              printFirmwareVersion@wrkbuf 0074  
        __size_of_receiveSendEventSLCAN 0186                         _ECANSendMessage 44EA  
         __end_of_receiveSendEventSLCAN 41CC                                 __Hparam 0000  
                     __end_of_findNodes 4788                                 __Lparam 0000  
                     __end_of_fifo_init 6552                       __end_of_fifo_read 5240  
                         ??_getCANFrame 0023                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B3                    __end_of_readRegister 54B6  
                             ?_printMDF 0001                                 _bSilent 002E  
             receiveVSCPModeCanalMsg@id 00AF                           ??_doModeSLCAN 0093  
                               ___lldiv 5EA6                         __size_of___wmul 0022  
                               _calcCRC 6766                         getCANFrame@pdlc 006A  
                               ___llmod 60E0                                 ___lwdiv 6408  
                             _FIFOEMPTY 007BA7                                 ___lwmod 65DC  
                 ?_readRegisterExtended 00B3             printNodeFirmwareVersion@buf 00BD  
                  __end_of_init_app_ram 32D2                            _fifo_getFree 56EA  
                          init_crc8@crc 0064                                 __pcinit 6314  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                   __size_of_OpenTimer3 0028                               ?_strnicmp 0060  
                               __ptext0 3E78                                 __ptext1 6940  
                               __ptext2 2746                                 __ptext3 5ACE  
                               __ptext4 6560                 receiveSendEventCANAL@id 007F  
                               __ptext5 4046                                 __ptext6 4FCA  
                               __ptext7 337A                                 __ptext8 54B6  
                               __ptext9 50B0                                 crc8@crc 001F  
         printNodeFirmwareVersion@value 00C0                       ??_printStatistics 0024  
                             _T0CONbits 000FD5                         __size_of_strcat 005A  
                       __size_of_strchr 005E                         __size_of_strcpy 002E  
                       __size_of_strlen 003C                       __end_of_hexpowers 6EA4  
                       __size_of_strtok 0096                         __size_of_strspn 0046  
                               _dpowers 6E5C                       __end_of_init_crc8 6074  
                               _isdigit 6858          printNodeFirmwareVersion@nodeid 00BC  
                             _T3CONbits 000FB1                     __end_of_WriteTimer0 6920  
                   __end_of_WriteTimer3 68FC                          _nibbleFromChar 6560  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 6734  
                               _sprintf 1FFA        __end_of_sendVSCPModeCapabilities 5628  
                     __end_of_setFilter 3836                                 _strichr 659E  
                        doModeVerbose@c 02B7                          doModeVerbose@i 02AD  
                        doModeVerbose@p 02BE                                 _strcspn 6452  
                               _toupper 68AC                             ?_doModeVscp 0001  
                               _stristr 5E2C                    __size_of_printBinary 004A  
                  end_of_initialization 6360                       __end_of_octpowers 6E5C  
                  __size_of_printErrors 02A6                                 memcpy@d 001F  
                               memcpy@n 0064                                 memcpy@s 0021  
                ??_printFirmwareVersion 0024                                 itoa@buf 006C  
                             i1u1300_20 0528                               i1u1300_21 0526  
                             i1u1301_20 0536                                 memset@c 0062  
                             i1u1301_21 0534                               i1u1310_20 05C4  
                             i1u1302_20 0546                               i1u1310_21 05C2  
                             i1u1302_21 0544                                 itoa@val 006E  
                               memset@n 0064                                 memset@p 001F  
                             i1u1311_20 05CC                               i1u1303_20 0554  
                             i1u1311_21 05CA                               i1u1303_21 0552  
                             i1u1320_20 06AE                               i1u1312_20 05DA  
                             i1u1304_20 0564                               i1u1320_21 06AC  
                             i1u1312_21 05D8                               i1u1304_21 0562  
                             i1u1321_20 06EC                               i1u1313_20 05EE  
                             i1u1305_20 0570                               i1u1321_21 06EA  
                             i1u1313_21 05EC                               i1u1305_21 056E  
                             i1u1225_25 48DA                               i1u1322_20 071C  
                             i1u1314_20 0610                               i1u1306_20 0580  
                             i1u1322_21 071A                               i1u1314_21 060E  
                             i1u1306_21 057E                           __Lmediumconst 6E2C  
                             i1u1226_25 48EA                               i1u1323_20 072C  
                             i1u1315_20 0618                               i1u1307_20 0592  
                             i1u1323_21 072A                               i1u1315_21 0616  
                             i1u1307_21 0590                               i1u1227_25 4916  
                             i1u1316_20 0620                               i1u1308_20 059A  
                             i1u1316_21 061E                               i1u1308_21 0598  
                             i1u1317_20 063C                               i1u1309_20 05B6  
                             i1u1317_21 063A                               i1u1309_21 05B4  
                  __end_of_sendCANFrame 6690                               i1u1318_20 0644  
                             i1u1318_21 0642                               i1u1262_25 5864  
                             i1u1319_20 0670                               i1u1319_21 066E  
                             i1u1266_25 3A98                               i1u1266_27 3A9C  
                             i1u1292_20 043C                               i1u1292_21 043A  
                             i1u1293_20 047C                               i1u1293_21 047A  
                             i1u1294_20 0498                               i1u1294_21 0496  
                             i1u1295_20 04D6                               i1u1295_21 04D4  
                             i1u1296_20 04E6                               i1u1296_21 04E4  
                             i1u1297_20 04FA                               i1u1297_21 04F8  
                             i1u1298_20 050A                               i1u1298_21 0508  
                             i1u1299_20 0518                               i1u1299_21 0516  
                   _can_receiveOverruns 0100                 receiveSendEventSLCAN@id 0081  
                     __end_of_printGUID 4DD6                         ___lldiv@divisor 0064  
                     __end_of_printHelp 44EA     receiveSendMultiEventCANAL@timestamp 007B  
                       ___lldiv@counter 0023                       __end_of_printMode 6004  
                     ECANSendMessage@id 0067                       ECANSendMessage@pb 0070  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0024  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 63BE  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 0752  
                               utoa@buf 0063       __size_of_printNodeFirmwareVersion 00C8  
                               utoa@val 0065               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 5634                                 strlen@s 001F  
                            _sequencyno 0034                              _timekeeper 0118  
                             _RXM0EXIDM 0078CB                                 strspn@i 0066  
                            ??_strnicmp 0066                               _PORTCbits 000F82  
                   __end_of_getCANFrame 583E                              findNodes@i 00C7  
                        i1_fifo_getFree 583E                  __end_of_nibbleFromChar 659E  
                   __end_of_doModeSLCAN 2B06                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 0068  
                            fifo_read@p 0066                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B3  
     sendVSCPDriverCommandReply@cmdCode 006A                     __size_of_WriteUSART 0016  
           sendVSCPModeCapabilities@crc 006A                 __end_of_ECANSendMessage 4658  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 2B12  
                            _vscpNodeId 003E                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 4978                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02B3  
                     doModeVerbose@preg 0284                          _init_crc8$2193 0060  
                ??_readRegisterExtended 00BA                          ?_doModeVerbose 0001  
                          ??_ReadTimer3 0021                            ??_Read_b_eep 0021  
                        ?_sendVSCPFrame 0093                  __end_ofi1_fifo_getFree 58D4  
                        __end_of___wmul 6756                     __size_of_doModeVscp 0256  
                           _WriteTimer0 690E                             _WriteTimer3 68EA  
                           _Write_b_eep 6700                          __end_of_memcpy 6520  
                        __end_of_memset 67F2       __size_of_sendVSCPDriverErrorFrame 00B6  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 6314                          __end_of_strchr 6200  
                        __end_of_strcpy 67C4                          __end_of_strlen 6656  
              doModeVerbose@filter_type 028D                          __end_of_strtok 5C96  
                        __end_of_strspn 64DE                             __end_ofPL10 1EB8  
                           __end_ofPL20 1ED2                             __end_ofPL12 2698  
                           __end_ofPL30 1EE2                             __end_ofPL22 26A8  
                           __end_ofPL14 384C                             __end_ofPL40 337A  
                           __end_ofPL32 1EF6                             __end_ofPL24 5C00  
                           __end_ofPL16 3A48                             __end_ofPL50 1F3C  
                           __end_ofPL42 1F08                             __end_ofPL34 4AA2  
                           __end_ofPL26 4BEE                             __end_ofPL18 48B4  
                           __end_ofPL60 5A2E                             __end_ofPL52 1F56  
                           __end_ofPL44 525C                             __end_ofPL36 333E  
                           __end_ofPL28 26CE                             __end_ofPL70 5D24  
                           __end_ofPL62 26FE                             __end_ofPL54 26E8  
                           __end_ofPL46 4986                             __end_ofPL38 335C  
                           __end_ofPL80 49AC                             __end_ofPL72 270C  
                           __end_ofPL64 1F6E                             __end_ofPL56 3A58  
                           __end_ofPL48 1F22                             __end_ofPL90 1FAA  
                           __end_ofPL82 49C0                             __end_ofPL74 499A  
                           __end_ofPL66 4AB4                             __end_ofPL58 598A  
                           __end_ofPL92 58E6                             __end_ofPL84 50B0  
                           __end_ofPL76 1F98                             __end_ofPL68 1F84  
                           __end_ofPL94 3A6A                             __end_ofPL86 4AC8  
                           __end_ofPL78 2720                             __end_ofPL96 4ADA  
                           __end_ofPL88 4DEA                             __end_ofPL98 49D2  
                   start_initialization 6314                               _ReadUSART 681A  
                       findNodes@nFound 00C4                   doModeVerbose@reg_1345 02A9  
                 doModeVerbose@filterno 02AC                 _receiveVSCPModeCanalMsg 4EE0  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 009F  
                          ??_OpenTimer0 001F                            ??_OpenTimer3 001F  
                  setFilter@bPersistent 0064                      __end_of_ReadTimer3 68EA  
sendVSCPDriverCommandReply@cmdReplyCode 006B                               _Interrupt 0418  
                        ??__CANIDToRegs 0021              readRegisterExtended@nodeid 00BE  
                             _OpenUSART 625E                      __end_of_Read_b_eep 690E  
                   sendVSCPFrame@nodeid 0096                         ___llmod@divisor 006C  
                 __size_of_readRegister 00C8                         ___llmod@counter 0070  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0012  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 01EE  
                        _findNodes$1702 00C2                __end_of__ECANPointBuffer 5F92  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 5796  
                              ??___wmul 0023       __size_of_sendVSCPModeCapabilities 00AE  
                     ?_hexStringToBytes 0060                             _doModeSLCAN 2746  
             ?_sendVSCPModeCapabilities 0001                       ?_checkCANBusState 0001  
            __end_of_ECANReceiveMessage 3C70                                ??_memcpy 001F  
                   readRegister@timeout 00B4                         ?i1_fifo_getFree 0001  
                              ??_memset 001F                   sendVSCPDriverNack@crc 006A  
              doModeVerbose@mask_nodeid 0291                   __end_ofi1_WriteTimer0 6932  
                    ??_hexStringToBytes 0065                      ??_checkCANBusState 001F  
                              ??_strcat 0023                                ??_strchr 0060  
                              ??_strcpy 0023                                ??_strlen 0021  
                    __end_of_OpenTimer0 6894                      __end_of_OpenTimer3 681A  
                              ??_strtok 0023                                ??_strspn 0023  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 0024  
                            ?_ReadUSART 0001                           __pcstackBANK0 0060  
                         __pcstackBANK1 01ED                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFF                            _readRegister 53EE  
                          _isdigit$3268 0020                   __size_of_sendCANFrame 003A  
           ?_sendVSCPDriverCommandReply 006A             sendVSCPDriverErrorFrame@crc 006B  
                      ?_ECANSendMessage 0067                       sendVSCPFrame@size 0098  
                          _init_app_ram 30E4                              ?_Interrupt 0001  
                            ?_OpenUSART 001F                             sprintf@_val 0088  
                           sprintf@flag 008D                             sprintf@prec 0084  
                             __pnvBANK1 01F2                        _ledFunctionality 0031  
              doModeVerbose@nodeid_1343 02B1                doModeVerbose@nodeid_1369 02B6  
                          setFilter@val 0060                        ___lwdiv@dividend 001F  
                       ??_doModeVerbose 00C8           __size_of_ECANSetOperationMode 0018  
                       _printStatistics 41DA                            ??_WriteUSART 001F  
                       ??_sendVSCPFrame 009B                          _ECANInitialize 5DAC  
                     _sendVSCPDriverAck 58E6                           __pmediumconst 6E2C  
                              ?___lldiv 0060                                ?_calcCRC 0067  
                              ?___llmod 0068                               _findNodes 4658  
                              ?___lwdiv 001F                                ?___lwmod 001F  
                             _fifo_init 6520                               _fifo_read 518A  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0088  
                           __pintcodelo 0418                            _sendCANFrame 6656  
                     WriteTimer0@timer0 001F                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0093  
                   ??_sendVSCPDriverAck 0024                       __size_of_strnicmp 006C  
                       printGUID@nodeid 00BC                       WriteTimer3@timer3 001F  
                   _sendEscapedUartData 6142                               _hexpowers 6E84  
                      ___lwdiv@quotient 0061                               _init_crc8 6004  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0071                                ?_strichr 0020  
                           _cntRxFrames 010C                            ??_doModeVscp 00B4  
                              ?_strcspn 0062                                ?_toupper 0001  
                              ?_stristr 0068                      __end_of_WriteUSART 68D8  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                       _can_inputBuffer 0400                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0093                               _setFilter 35EC  
                           strnicmp@len 0064                               _octpowers 6E2C  
                              _PIE1bits 000F9D                                _PIE2bits 000FA0  
           __size_of_sendVSCPDriverNack 0096                  __end_of_ECANInitialize 5E2C  
             __end_of_sendVSCPDriverAck 597C                                _PIR1bits 000F9E  
                              i1u682_25 47A8                   _receiveSendEventCANAL 3C7E  
                              i1u683_25 47B8                                _PIR2bits 000FA1  
                              i1u685_25 484E                        ECANSendMessage@i 0089  
                      ECANSendMessage@j 0084                    ?_sendEscapedUartData 0067  
                 _receiveSendEventSLCAN 4046                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007F                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 006C                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006A  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 4CEE                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C1  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 436A  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 5F92                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 35D0                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 4A8E                               _putsUSART 636A  
                           __stringdata 6EA4                       ___wmul@multiplier 0060  
                          __RegsToCANID 48B4                               _vscpClass 003A  
               ??_writeRegisterExtended 00BA                         Write_b_eep@badd 001F  
                       Write_b_eep@bdat 0021                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 008F  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 006F  
                         ??_printBinary 0020                        doModeVerbose@reg 02B4  
                         ??_printErrors 0024                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 0033  
             writeRegisterExtended@page 00B3    __end_of_receiveVSCPModeMultiCanalMsg 6944  
 __size_of_receiveVSCPModeMultiCanalMsg 0002            _receiveVSCPModeMultiCanalMsg 6942  
                           ??_Interrupt 0014                 __end_of_printStatistics 436A  
                           ??_OpenUSART 0021            writeRegisterExtended@timeout 00B6  
                              _Busy_eep 693A                __size_of_init_app_eeprom 00CA  
                            ?_setFilter 0060                         OpenUSART@config 0021  
                        findNodes@value 00C5            __end_of_vscp_restoreDefaults 693A  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 0078  
       __end_of_receiveVSCPModeCanalMsg 4FCA                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 000E  
                 ??_sendEscapedUartData 0024                                __Lrparam 0000  
                      __CANIDToRegs@val 0062                      __end_of_fifo_write 4886  
                      __CANIDToRegs@ptr 0060             receiveVSCPModeCanalMsg@data 00A7  
                            ?_printGUID 0001                             doModeVscp@c 00B7  
                            ?_printHelp 0001                              ?_printMode 0001  
                       nibbleFromChar@c 001F                        ??_nibbleFromChar 001F  
                      __size_of___lldiv 0076                        __size_of_calcCRC 0030  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                            ?_WriteTimer0 001F  
                          ?_WriteTimer3 001F                        getCANFrame@pdata 006C  
                          ?_Write_b_eep 001F                              ?_putsUSART 0020  
                       fifo_read@nbytes 0064                              sprintf@idx 007C  
                 hexStringToBytes@inhex 0063                                calcCRC@j 006A  
                            strcat@from 0021                                calcCRC@p 0067  
                      __size_of_isdigit 001E                         ___lwdiv@divisor 0021  
                       ___lwdiv@counter 0060                                __ptext10 557A  
                              __ptext11 6942                                __ptext20 6690  
                              __ptext12 4EE0                                __ptext21 6004  
                              __ptext13 64DE                                __ptext30 5326  
                              __ptext22 0752                                __ptext14 58E6  
                              __ptext31 62BA                                __ptext23 4BEE  
                              __ptext15 598A                                __ptext40 41DA  
                              __ptext32 53EE                                __ptext24 63BE  
                              __ptext16 6766                                __ptext41 4AE4  
                              __ptext33 5634                                __ptext25 4DEA  
                              __ptext17 3C7E                                __ptext50 661A  
                              __ptext42 5C00                                __ptext34 6656  
                              __ptext26 6796                                __ptext18 384C  
                              __ptext51 2B12                                __ptext43 6452  
                              __ptext35 44EA                                __ptext27 4658  
                              __ptext19 6142                                __ptext60 6858  
                              __ptext52 68D8                                __ptext44 6498  
                              __ptext36 683A                                __ptext28 5B6A  
                              __ptext61 5C96                                __ptext53 5D24  
                              __ptext45 61A2                                __ptext37 67C4  
                              __ptext29 4CEE                                __ptext70 68C2  
                              __ptext62 66C8                                __ptext54 5796  
                              __ptext46 5E2C                                __ptext38 436A  
                              __ptext71 6200                                __ptext63 5A2E  
                              __ptext55 518A                                __ptext47 659E  
                              __ptext39 2E3E                                __ptext80 6700  
                              __ptext72 5DAC                                __ptext64 65DC  
                              __ptext56 1FFA                                __ptext48 6074  
                              __ptext81 693A                                __ptext73 68EA  
                              __ptext65 6408                                __ptext57 6734  
                              __ptext49 68AC                                __ptext90 3A6A  
                              __ptext82 6894                                __ptext74 67F2  
                              __ptext66 6932                                __ptext58 60E0  
                              __ptext91 48B4                                __ptext83 68FC  
                              __ptext75 6876                                __ptext67 525C  
                              __ptext59 5EA6                                __ptext92 5F1C  
                              __ptext84 690E                                __ptext76 625E  
                              __ptext68 5F92                                __ptext93 4788  
                              __ptext85 6520                                __ptext77 30E4  
                              __ptext69 636A                                __ptext94 681A  
                              __ptext86 56EA                                __ptext78 49D2  
                              __ptext79 35EC                                __ptext88 6920  
                              __ptext89 583E                receiveSendEventCANAL@dlc 0083  
              receiveSendEventCANAL@crc 0084                          printMDF@nodeid 00BC  
                         ?_getVSCPFrame 006E                              strichr@chr 0022  
                      __size_of_sprintf 0680                              strichr@ptr 0020  
                      __size_of_strichr 003E                        __size_of_strcspn 0046  
                      __size_of_toupper 0016                        __size_of_stristr 007A  
                            strcpy@from 0021                          printGUID@value 00C0  
                   __end_of_printBinary 6408                           __size_of_crc8 0038  
                         __size_of_atoi 00FC                           __size_of_main 01CE  
                         __size_of_init 005E                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 30E4  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0060                              strnicmp@s2 0062  
                         init_app_ram@i 0089              __size_of_sendVSCPDriverAck 0096  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
                      ??i1_fifo_getFree 0003                _printNodeFirmwareVersion 5326  
                   ECANSendMessage@data 006B                ECANSendMessage@tempBSEL0 0085  
                              _printMDF 5B6A                               printMDF@i 00C0  
                             printMDF@p 00BE                            ?_getCANFrame 006A  
                   ECANSendMessage@mode 0082                     ECANSendMessage@temp 0088  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 006E  
                              atoi@sign 006A                             ??_findNodes 0024  
                          ?_doModeSLCAN 0001                             ??_fifo_init 001F  
                           ??_fifo_read 001F                                _vscpData 01E5  
         __size_of_readRegisterExtended 00F6                                main@argc 01ED  
                              main@argv 01EF                                _vscpSize 0040  
                    ??__ECANPointBuffer 0004                                _vscpType 0041  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006A  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A7  
                              _strnicmp 6074                        init_app_eeprom@i 0023  
           writeRegisterExtended@nodeid 00BE                           Interrupt@fail 001E  
                       _serialInputFifo 01DD                           findNodes@bDot 00C6  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 001F  
                   ECANReceiveMessage@i 000F                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A6  
                              itoa@base 0070                                isdigit@c 0021  
                    _ECANReceiveMessage 3A6A                                memset@p1 0060  
                           ??_init_crc8 001F                               ultoa@base 0077  
                        ??_getVSCPFrame 0074               __size_of_hexStringToBytes 009C  
             __size_of_checkCANBusState 001E                         sendVSCPFrame@id 00AF  
                              intlevel1 0000                               sprintf@ap 0083  
                             sprintf@sp 0071                    hexStringToBytes@size 0062  
                             strchr@chr 0021                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 0085                        ___lwmod@dividend 001F  
                             strchr@ptr 001F                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 0060                             ??_setFilter 0065  
                         printMDF@value 00BD     __size_of_receiveSendMultiEventCANAL 01EC  
                         fifo_getFree@f 001F                               strcspn@s1 0062  
                             strcspn@s2 0064      receiveSendMultiEventCANAL@msgcount 007A  
               ECANSendMessage@msgFlags 006E                              _OSCCONbits 000FD3  
                             strnicmp@r 0023                               stristr@s1 0068  
                             stristr@s2 006A                      ECANSendMessage@ptr 008A  
                     ??_init_app_eeprom 0023                   __size_of__CANIDToRegs 00BC  
                           ??_printGUID 0024                             ??_printHelp 0024  
                           ??_printMode 0024                _sendVSCPDriverErrorFrame 54B6  
                         ?_fifo_getFree 001F                  ECANSendMessage@dataLen 006D  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000C  
                           ??_putsUSART 0022                                utoa@base 0067  
                              ultoa@buf 0071                                ultoa@val 0073  
                         fifo_init@size 0064                                sprintf@c 008C  
                              sprintf@f 0073                     hexStringToBytes@buf 0060  
                              strcat@cp 0060                     hexStringToBytes@len 0068  
                        _doModeVscpNode 6940                                strcat@to 001F  
      __end_of_receivePrintEventVerbose 2E3E                  ECANSendMessage@buffers 0083  
                      ___lldiv@quotient 001F                         ___lwmod@divisor 0021  
          __end_of_ECANSetOperationMode 68AC                    _vscp_restoreDefaults 6932  
                          printGUID@buf 00BD                                strcpy@cp 0060  
                              strlen@cp 0021                                strcpy@to 001F  
                       ___lwmod@counter 0023                                strcspn@i 0066  
                              toupper@c 001F                             _printBinary 63BE  
                              strtok@s1 0068                                strtok@s2 006A  
                              strspn@s1 0062                                strspn@s2 0064  
                            _RXM1EXIDEN 0078EB                                strtok@sp 002A  
                ECANSendMessage@tempPtr 0086                             _printErrors 2E3E  
                          fifo_init@buf 0062                            fifo_read@buf 0062  
         sendVSCPDriverCommandReply@crc 006C                            __CANIDToRegs 49D2  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0126  
             readRegisterExtended@value 00B8                _sendVSCPModeCapabilities 557A  
        receiveSendEventCANAL@timestamp 007B                __size_of_ECANSendMessage 016E  
