

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Mar  8 14:54:52 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	text90,global,reloc=2,class=CODE,delta=1
   109                           	psect	text91,global,reloc=2,class=CODE,delta=1
   110                           	psect	text92,global,reloc=2,class=CODE,delta=1
   111                           	psect	text93,global,reloc=2,class=CODE,delta=1
   112                           	psect	text94,global,reloc=2,class=CODE,delta=1
   113                           	psect	text95,global,reloc=2,class=CODE,delta=1
   114                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   115                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   116                           	psect	pa_nodes,global,class=CODE,delta=1
   117  0000                     tblptru	equ	0xFF8
   118                           tblptrh	equ	0xFF7
   119                           tblptrl	equ	0xFF6
   120                           tablat	equ	0xFF5
   121                           prodh	equ	0xFF4
   122                           prodl	equ	0xFF3
   123                           intcon	equ	0xFF2
   124                           indf0	equ	0xFEF
   125                           fsr0h	equ	0xFEA
   126                           fsr0l	equ	0xFE9
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           postinc1	equ	0xFE6
   130                           postdec1	equ	0xFE5
   131                           fsr1h	equ	0xFE2
   132                           fsr1l	equ	0xFE1
   133                           indf2	equ	0xFDF
   134                           postinc2	equ	0xFDE
   135                           postdec2	equ	0xFDD
   136                           plusw2	equ	0xFDB
   137                           fsr2h	equ	0xFDA
   138                           fsr2l	equ	0xFD9
   139                           status	equ	0xFD8
   140                           
   141                           	psect	mediumconst
   142  006DEC                     __pmediumconst:
   143                           	opt stack 0
   144  006DEC                     _octpowers:
   145                           	opt stack 0
   146  006DEC  0001               	dw	1
   147  006DEE  0000               	dw	0
   148  006DF0  0008               	dw	8
   149  006DF2  0000               	dw	0
   150  006DF4  0040               	dw	64
   151  006DF6  0000               	dw	0
   152  006DF8  0200               	dw	512
   153  006DFA  0000               	dw	0
   154  006DFC  1000               	dw	4096
   155  006DFE  0000               	dw	0
   156  006E00  8000               	dw	32768
   157  006E02  0000               	dw	0
   158  006E04  0000               	dw	0
   159  006E06  0004               	dw	4
   160  006E08  0000               	dw	0
   161  006E0A  0020               	dw	32
   162  006E0C  0000               	dw	0
   163  006E0E  0100               	dw	256
   164  006E10  0000               	dw	0
   165  006E12  0800               	dw	2048
   166  006E14  0000               	dw	0
   167  006E16  4000               	dw	16384
   168  006E18  0000               	dw	0
   169  006E1A  0000               	dw	0
   170  006E1C                     __end_of_octpowers:
   171                           	opt stack 0
   172  006E1C                     _dpowers:
   173                           	opt stack 0
   174  006E1C  0001               	dw	1
   175  006E1E  0000               	dw	0
   176  006E20  000A               	dw	10
   177  006E22  0000               	dw	0
   178  006E24  0064               	dw	100
   179  006E26  0000               	dw	0
   180  006E28  03E8               	dw	1000
   181  006E2A  0000               	dw	0
   182  006E2C  2710               	dw	10000
   183  006E2E  0000               	dw	0
   184  006E30  86A0               	dw	34464
   185  006E32  0001               	dw	1
   186  006E34  4240               	dw	16960
   187  006E36  000F               	dw	15
   188  006E38  9680               	dw	38528
   189  006E3A  0098               	dw	152
   190  006E3C  E100               	dw	57600
   191  006E3E  05F5               	dw	1525
   192  006E40  CA00               	dw	51712
   193  006E42  3B9A               	dw	15258
   194  006E44                     __end_of_dpowers:
   195                           	opt stack 0
   196  006E44                     _hexpowers:
   197                           	opt stack 0
   198  006E44  0001               	dw	1
   199  006E46  0000               	dw	0
   200  006E48  0010               	dw	16
   201  006E4A  0000               	dw	0
   202  006E4C  0100               	dw	256
   203  006E4E  0000               	dw	0
   204  006E50  1000               	dw	4096
   205  006E52  0000               	dw	0
   206  006E54  0000               	dw	0
   207  006E56  0001               	dw	1
   208  006E58  0000               	dw	0
   209  006E5A  0010               	dw	16
   210  006E5C  0000               	dw	0
   211  006E5E  0100               	dw	256
   212  006E60  0000               	dw	0
   213  006E62  1000               	dw	4096
   214  006E64                     __end_of_hexpowers:
   215                           	opt stack 0
   216  0000                     _BRGCON1	set	3952
   217  0000                     _BRGCON2	set	3953
   218  0000                     _BRGCON3	set	3954
   219  0000                     _BSEL0	set	3576
   220  0000                     _CANCON	set	3951
   221  0000                     _CIOCON	set	3955
   222  0000                     _COMSTATbits	set	3956
   223  0000                     _ECANCON	set	3959
   224  0000                     _EEADR	set	4009
   225  0000                     _EECON1bits	set	4006
   226  0000                     _EECON2	set	4007
   227  0000                     _EEDATA	set	4008
   228  0000                     _INTCONbits	set	4082
   229  0000                     _MSEL0	set	3568
   230  0000                     _MSEL1	set	3569
   231  0000                     _MSEL2	set	3570
   232  0000                     _OSCCONbits	set	4051
   233  0000                     _OSCTUNEbits	set	3995
   234  0000                     _PIE1	set	3997
   235  0000                     _PIE1bits	set	3997
   236  0000                     _PIE2bits	set	4000
   237  0000                     _PIR1bits	set	3998
   238  0000                     _PIR2bits	set	4001
   239  0000                     _PORTCbits	set	3970
   240  0000                     _RCREG	set	4014
   241  0000                     _RCSTA	set	4011
   242  0000                     _RCSTAbits	set	4011
   243  0000                     _RXB1CONbits	set	3920
   244  0000                     _RXERRCNT	set	3957
   245  0000                     _RXF0EIDH	set	3842
   246  0000                     _RXF0EIDL	set	3843
   247  0000                     _RXF0SIDH	set	3840
   248  0000                     _RXF0SIDL	set	3841
   249  0000                     _RXF10EIDH	set	3446
   250  0000                     _RXF10EIDL	set	3447
   251  0000                     _RXF10SIDH	set	3444
   252  0000                     _RXF10SIDL	set	3445
   253  0000                     _RXF11EIDH	set	3450
   254  0000                     _RXF11EIDL	set	3451
   255  0000                     _RXF11SIDH	set	3448
   256  0000                     _RXF11SIDL	set	3449
   257  0000                     _RXF12EIDH	set	3458
   258  0000                     _RXF12EIDL	set	3459
   259  0000                     _RXF12SIDH	set	3456
   260  0000                     _RXF12SIDL	set	3457
   261  0000                     _RXF13EIDH	set	3462
   262  0000                     _RXF13EIDL	set	3463
   263  0000                     _RXF13SIDH	set	3460
   264  0000                     _RXF13SIDL	set	3461
   265  0000                     _RXF14EIDH	set	3466
   266  0000                     _RXF14EIDL	set	3467
   267  0000                     _RXF14SIDH	set	3464
   268  0000                     _RXF14SIDL	set	3465
   269  0000                     _RXF15EIDH	set	3474
   270  0000                     _RXF15EIDL	set	3475
   271  0000                     _RXF15SIDH	set	3472
   272  0000                     _RXF15SIDL	set	3473
   273  0000                     _RXF1EIDH	set	3846
   274  0000                     _RXF1EIDL	set	3847
   275  0000                     _RXF1SIDH	set	3844
   276  0000                     _RXF1SIDL	set	3845
   277  0000                     _RXF2EIDH	set	3850
   278  0000                     _RXF2EIDL	set	3851
   279  0000                     _RXF2SIDH	set	3848
   280  0000                     _RXF2SIDL	set	3849
   281  0000                     _RXF3EIDH	set	3854
   282  0000                     _RXF3EIDL	set	3855
   283  0000                     _RXF3SIDH	set	3852
   284  0000                     _RXF3SIDL	set	3853
   285  0000                     _RXF4EIDH	set	3858
   286  0000                     _RXF4EIDL	set	3859
   287  0000                     _RXF4SIDH	set	3856
   288  0000                     _RXF4SIDL	set	3857
   289  0000                     _RXF5EIDH	set	3862
   290  0000                     _RXF5EIDL	set	3863
   291  0000                     _RXF5SIDH	set	3860
   292  0000                     _RXF5SIDL	set	3861
   293  0000                     _RXF6EIDH	set	3426
   294  0000                     _RXF6EIDL	set	3427
   295  0000                     _RXF6SIDH	set	3424
   296  0000                     _RXF6SIDL	set	3425
   297  0000                     _RXF7EIDH	set	3430
   298  0000                     _RXF7EIDL	set	3431
   299  0000                     _RXF7SIDH	set	3428
   300  0000                     _RXF7SIDL	set	3429
   301  0000                     _RXF8EIDH	set	3434
   302  0000                     _RXF8EIDL	set	3435
   303  0000                     _RXF8SIDH	set	3432
   304  0000                     _RXF8SIDL	set	3433
   305  0000                     _RXF9EIDH	set	3442
   306  0000                     _RXF9EIDL	set	3443
   307  0000                     _RXF9SIDH	set	3440
   308  0000                     _RXF9SIDL	set	3441
   309  0000                     _RXFBCON0	set	3552
   310  0000                     _RXFBCON1	set	3553
   311  0000                     _RXFBCON2	set	3554
   312  0000                     _RXFBCON3	set	3555
   313  0000                     _RXFBCON4	set	3556
   314  0000                     _RXFBCON5	set	3557
   315  0000                     _RXFBCON6	set	3558
   316  0000                     _RXFBCON7	set	3559
   317  0000                     _RXFCON0	set	3540
   318  0000                     _RXFCON1	set	3541
   319  0000                     _RXM0EIDH	set	3866
   320  0000                     _RXM0EIDL	set	3867
   321  0000                     _RXM0SIDL	set	3865
   322  0000                     _RXM1EIDH	set	3870
   323  0000                     _RXM1EIDL	set	3871
   324  0000                     _RXM1SIDL	set	3869
   325  0000                     _SPBRG	set	4015
   326  0000                     _SPBRGH	set	4016
   327  0000                     _T0CON	set	4053
   328  0000                     _T0CONbits	set	4053
   329  0000                     _T3CON	set	4017
   330  0000                     _T3CONbits	set	4017
   331  0000                     _TMR0H	set	4055
   332  0000                     _TMR0L	set	4054
   333  0000                     _TMR3H	set	4019
   334  0000                     _TMR3L	set	4018
   335  0000                     _TRISBbits	set	3987
   336  0000                     _TRISCbits	set	3988
   337  0000                     _TXERRCNT	set	3958
   338  0000                     _TXREG	set	4013
   339  0000                     _TXSTA	set	4012
   340  0000                     _TXSTAbits	set	4012
   341  0000                     _B0RXFUL	set	28935
   342  0000                     _B0TXEN	set	28610
   343  0000                     _B1RXFUL	set	29063
   344  0000                     _B1TXEN	set	28611
   345  0000                     _B2RXFUL	set	29191
   346  0000                     _B2TXEN	set	28612
   347  0000                     _B3RXFUL	set	29319
   348  0000                     _B3TXEN	set	28613
   349  0000                     _B4RXFUL	set	29447
   350  0000                     _B4TXEN	set	28614
   351  0000                     _B5RXFUL	set	29575
   352  0000                     _B5TXEN	set	28615
   353  0000                     _ERRIE	set	32029
   354  0000                     _ERRIF	set	32037
   355  0000                     _FIFOEMPTY	set	31655
   356  0000                     _IRXIF	set	32039
   357  0000                     _LATC1	set	31833
   358  0000                     _MDSEL0	set	31678
   359  0000                     _MDSEL1	set	31679
   360  0000                     _PEIE	set	32662
   361  0000                     _RCIE	set	31981
   362  0000                     _RCIF	set	31989
   363  0000                     _RCIP	set	31997
   364  0000                     _RXB0FILHIT0	set	31488
   365  0000                     _RXB0FUL	set	31495
   366  0000                     _RXB0IF	set	32032
   367  0000                     _RXB0OVFL	set	31655
   368  0000                     _RXB1IF	set	32033
   369  0000                     _RXB1OVFL	set	31654
   370  0000                     _RXBnIE	set	32025
   371  0000                     _RXBnIF	set	32033
   372  0000                     _RXM0EXIDM	set	30923
   373  0000                     _RXM1EXIDEN	set	30955
   374  0000                     _B0CON	set	3616
   375  0000                     _B1CON	set	3632
   376  0000                     _B2CON	set	3648
   377  0000                     _B3CON	set	3664
   378  0000                     _B4CON	set	3680
   379  0000                     _B5CON	set	3696
   380  0000                     _RXB0CON	set	3936
   381  0000                     _RXB1CON	set	3920
   382  0000                     _RXM0SIDH	set	3864
   383  0000                     _RXM1SIDH	set	3868
   384  0000                     _TXB0CON	set	3904
   385  0000                     _TXB1CON	set	3888
   386  0000                     _TXB2CON	set	3872
   387  006E64                     __stringdata:
   388                           	opt stack 0
   389  006E64                     STR_270:
   390  006E64  20                 	db	32
   391  006E65  20                 	db	32
   392  006E66  20                 	db	32
   393  006E67  20                 	db	32
   394  006E68  20                 	db	32
   395  006E69  20                 	db	32
   396  006E6A  20                 	db	32
   397  006E6B  20                 	db	32
   398  006E6C  20                 	db	32
   399  006E6D  46                 	db	70	;'F'
   400  006E6E  6F                 	db	111	;'o'
   401  006E6F  72                 	db	114	;'r'
   402  006E70  6D                 	db	109	;'m'
   403  006E71  61                 	db	97	;'a'
   404  006E72  74                 	db	116	;'t'
   405  006E73  3A                 	db	58	;':'
   406  006E74  20                 	db	32
   407  006E75  66                 	db	102	;'f'
   408  006E76  69                 	db	105	;'i'
   409  006E77  6C                 	db	108	;'l'
   410  006E78  74                 	db	116	;'t'
   411  006E79  65                 	db	101	;'e'
   412  006E7A  72                 	db	114	;'r'
   413  006E7B  20                 	db	32
   414  006E7C  66                 	db	102	;'f'
   415  006E7D  69                 	db	105	;'i'
   416  006E7E  6C                 	db	108	;'l'
   417  006E7F  74                 	db	116	;'t'
   418  006E80  65                 	db	101	;'e'
   419  006E81  72                 	db	114	;'r'
   420  006E82  6E                 	db	110	;'n'
   421  006E83  6F                 	db	111	;'o'
   422  006E84  2C                 	db	44
   423  006E85  70                 	db	112	;'p'
   424  006E86  72                 	db	114	;'r'
   425  006E87  69                 	db	105	;'i'
   426  006E88  6F                 	db	111	;'o'
   427  006E89  2C                 	db	44
   428  006E8A  63                 	db	99	;'c'
   429  006E8B  6C                 	db	108	;'l'
   430  006E8C  61                 	db	97	;'a'
   431  006E8D  73                 	db	115	;'s'
   432  006E8E  73                 	db	115	;'s'
   433  006E8F  2C                 	db	44
   434  006E90  74                 	db	116	;'t'
   435  006E91  79                 	db	121	;'y'
   436  006E92  70                 	db	112	;'p'
   437  006E93  65                 	db	101	;'e'
   438  006E94  2C                 	db	44
   439  006E95  6E                 	db	110	;'n'
   440  006E96  6F                 	db	111	;'o'
   441  006E97  64                 	db	100	;'d'
   442  006E98  65                 	db	101	;'e'
   443  006E99  69                 	db	105	;'i'
   444  006E9A  64                 	db	100	;'d'
   445  006E9B  20                 	db	32
   446  006E9C  20                 	db	32
   447  006E9D  28                 	db	40
   448  006E9E  66                 	db	102	;'f'
   449  006E9F  69                 	db	105	;'i'
   450  006EA0  6C                 	db	108	;'l'
   451  006EA1  74                 	db	116	;'t'
   452  006EA2  65                 	db	101	;'e'
   453  006EA3  72                 	db	114	;'r'
   454  006EA4  6E                 	db	110	;'n'
   455  006EA5  6F                 	db	111	;'o'
   456  006EA6  20                 	db	32
   457  006EA7  3D                 	db	61	;'='
   458  006EA8  20                 	db	32
   459  006EA9  30                 	db	48	;'0'
   460  006EAA  2D                 	db	45
   461  006EAB  31                 	db	49	;'1'
   462  006EAC  35                 	db	53	;'5'
   463  006EAD  29                 	db	41
   464  006EAE  2E                 	db	46
   465  006EAF  0D                 	db	13
   466  006EB0  0A                 	db	10
   467  006EB1  00                 	db	0
   468  006EB2                     STR_268:
   469  006EB2  49                 	db	73	;'I'
   470  006EB3  4E                 	db	78	;'N'
   471  006EB4  46                 	db	70	;'F'
   472  006EB5  4F                 	db	79	;'O'
   473  006EB6  20                 	db	32
   474  006EB7  2D                 	db	45
   475  006EB8  20                 	db	32
   476  006EB9  47                 	db	71	;'G'
   477  006EBA  65                 	db	101	;'e'
   478  006EBB  74                 	db	116	;'t'
   479  006EBC  20                 	db	32
   480  006EBD  69                 	db	105	;'i'
   481  006EBE  6E                 	db	110	;'n'
   482  006EBF  66                 	db	102	;'f'
   483  006EC0  6F                 	db	111	;'o'
   484  006EC1  20                 	db	32
   485  006EC2  61                 	db	97	;'a'
   486  006EC3  62                 	db	98	;'b'
   487  006EC4  6F                 	db	111	;'o'
   488  006EC5  75                 	db	117	;'u'
   489  006EC6  74                 	db	116	;'t'
   490  006EC7  20                 	db	32
   491  006EC8  61                 	db	97	;'a'
   492  006EC9  6E                 	db	110	;'n'
   493  006ECA  20                 	db	32
   494  006ECB  65                 	db	101	;'e'
   495  006ECC  78                 	db	120	;'x'
   496  006ECD  69                 	db	105	;'i'
   497  006ECE  73                 	db	115	;'s'
   498  006ECF  74                 	db	116	;'t'
   499  006ED0  65                 	db	101	;'e'
   500  006ED1  6E                 	db	110	;'n'
   501  006ED2  74                 	db	116	;'t'
   502  006ED3  20                 	db	32
   503  006ED4  6E                 	db	110	;'n'
   504  006ED5  6F                 	db	111	;'o'
   505  006ED6  64                 	db	100	;'d'
   506  006ED7  65                 	db	101	;'e'
   507  006ED8  20                 	db	32
   508  006ED9  6F                 	db	111	;'o'
   509  006EDA  6E                 	db	110	;'n'
   510  006EDB  20                 	db	32
   511  006EDC  74                 	db	116	;'t'
   512  006EDD  68                 	db	104	;'h'
   513  006EDE  65                 	db	101	;'e'
   514  006EDF  20                 	db	32
   515  006EE0  62                 	db	98	;'b'
   516  006EE1  75                 	db	117	;'u'
   517  006EE2  73                 	db	115	;'s'
   518  006EE3  20                 	db	32
   519  006EE4  28                 	db	40
   520  006EE5  46                 	db	70	;'F'
   521  006EE6  6F                 	db	111	;'o'
   522  006EE7  72                 	db	114	;'r'
   523  006EE8  6D                 	db	109	;'m'
   524  006EE9  61                 	db	97	;'a'
   525  006EEA  74                 	db	116	;'t'
   526  006EEB  3A                 	db	58	;':'
   527  006EEC  20                 	db	32
   528  006EED  69                 	db	105	;'i'
   529  006EEE  6E                 	db	110	;'n'
   530  006EEF  66                 	db	102	;'f'
   531  006EF0  6F                 	db	111	;'o'
   532  006EF1  20                 	db	32
   533  006EF2  6E                 	db	110	;'n'
   534  006EF3  69                 	db	105	;'i'
   535  006EF4  63                 	db	99	;'c'
   536  006EF5  6B                 	db	107	;'k'
   537  006EF6  6E                 	db	110	;'n'
   538  006EF7  61                 	db	97	;'a'
   539  006EF8  6D                 	db	109	;'m'
   540  006EF9  65                 	db	101	;'e'
   541  006EFA  29                 	db	41
   542  006EFB  2E                 	db	46
   543  006EFC  0D                 	db	13
   544  006EFD  0A                 	db	10
   545  006EFE  00                 	db	0
   546  006EFF                     STR_266:
   547  006EFF  52                 	db	82	;'R'
   548  006F00  52                 	db	82	;'R'
   549  006F01  45                 	db	69	;'E'
   550  006F02  47                 	db	71	;'G'
   551  006F03  20                 	db	32
   552  006F04  2D                 	db	45
   553  006F05  20                 	db	32
   554  006F06  52                 	db	82	;'R'
   555  006F07  65                 	db	101	;'e'
   556  006F08  61                 	db	97	;'a'
   557  006F09  64                 	db	100	;'d'
   558  006F0A  20                 	db	32
   559  006F0B  72                 	db	114	;'r'
   560  006F0C  65                 	db	101	;'e'
   561  006F0D  67                 	db	103	;'g'
   562  006F0E  69                 	db	105	;'i'
   563  006F0F  73                 	db	115	;'s'
   564  006F10  74                 	db	116	;'t'
   565  006F11  65                 	db	101	;'e'
   566  006F12  72                 	db	114	;'r'
   567  006F13  28                 	db	40
   568  006F14  73                 	db	115	;'s'
   569  006F15  29                 	db	41
   570  006F16  20                 	db	32
   571  006F17  6F                 	db	111	;'o'
   572  006F18  66                 	db	102	;'f'
   573  006F19  20                 	db	32
   574  006F1A  6E                 	db	110	;'n'
   575  006F1B  6F                 	db	111	;'o'
   576  006F1C  64                 	db	100	;'d'
   577  006F1D  65                 	db	101	;'e'
   578  006F1E  20                 	db	32
   579  006F1F  28                 	db	40
   580  006F20  46                 	db	70	;'F'
   581  006F21  6F                 	db	111	;'o'
   582  006F22  72                 	db	114	;'r'
   583  006F23  6D                 	db	109	;'m'
   584  006F24  61                 	db	97	;'a'
   585  006F25  74                 	db	116	;'t'
   586  006F26  3A                 	db	58	;':'
   587  006F27  20                 	db	32
   588  006F28  72                 	db	114	;'r'
   589  006F29  72                 	db	114	;'r'
   590  006F2A  65                 	db	101	;'e'
   591  006F2B  67                 	db	103	;'g'
   592  006F2C  20                 	db	32
   593  006F2D  6E                 	db	110	;'n'
   594  006F2E  6F                 	db	111	;'o'
   595  006F2F  64                 	db	100	;'d'
   596  006F30  65                 	db	101	;'e'
   597  006F31  69                 	db	105	;'i'
   598  006F32  64                 	db	100	;'d'
   599  006F33  20                 	db	32
   600  006F34  5B                 	db	91	;'['
   601  006F35  70                 	db	112	;'p'
   602  006F36  61                 	db	97	;'a'
   603  006F37  67                 	db	103	;'g'
   604  006F38  65                 	db	101	;'e'
   605  006F39  3A                 	db	58	;':'
   606  006F3A  5D                 	db	93	;']'
   607  006F3B  72                 	db	114	;'r'
   608  006F3C  65                 	db	101	;'e'
   609  006F3D  67                 	db	103	;'g'
   610  006F3E  20                 	db	32
   611  006F3F  5B                 	db	91	;'['
   612  006F40  63                 	db	99	;'c'
   613  006F41  6F                 	db	111	;'o'
   614  006F42  75                 	db	117	;'u'
   615  006F43  6E                 	db	110	;'n'
   616  006F44  74                 	db	116	;'t'
   617  006F45  5D                 	db	93	;']'
   618  006F46  29                 	db	41
   619  006F47  2E                 	db	46
   620  006F48  0D                 	db	13
   621  006F49  0A                 	db	10
   622  006F4A  00                 	db	0
   623  006F4B                     STR_267:
   624  006F4B  57                 	db	87	;'W'
   625  006F4C  52                 	db	82	;'R'
   626  006F4D  45                 	db	69	;'E'
   627  006F4E  47                 	db	71	;'G'
   628  006F4F  20                 	db	32
   629  006F50  2D                 	db	45
   630  006F51  20                 	db	32
   631  006F52  57                 	db	87	;'W'
   632  006F53  72                 	db	114	;'r'
   633  006F54  69                 	db	105	;'i'
   634  006F55  74                 	db	116	;'t'
   635  006F56  65                 	db	101	;'e'
   636  006F57  20                 	db	32
   637  006F58  72                 	db	114	;'r'
   638  006F59  65                 	db	101	;'e'
   639  006F5A  67                 	db	103	;'g'
   640  006F5B  69                 	db	105	;'i'
   641  006F5C  73                 	db	115	;'s'
   642  006F5D  74                 	db	116	;'t'
   643  006F5E  65                 	db	101	;'e'
   644  006F5F  72                 	db	114	;'r'
   645  006F60  20                 	db	32
   646  006F61  6F                 	db	111	;'o'
   647  006F62  66                 	db	102	;'f'
   648  006F63  20                 	db	32
   649  006F64  6E                 	db	110	;'n'
   650  006F65  6F                 	db	111	;'o'
   651  006F66  64                 	db	100	;'d'
   652  006F67  65                 	db	101	;'e'
   653  006F68  20                 	db	32
   654  006F69  28                 	db	40
   655  006F6A  46                 	db	70	;'F'
   656  006F6B  6F                 	db	111	;'o'
   657  006F6C  72                 	db	114	;'r'
   658  006F6D  6D                 	db	109	;'m'
   659  006F6E  61                 	db	97	;'a'
   660  006F6F  74                 	db	116	;'t'
   661  006F70  3A                 	db	58	;':'
   662  006F71  20                 	db	32
   663  006F72  77                 	db	119	;'w'
   664  006F73  72                 	db	114	;'r'
   665  006F74  65                 	db	101	;'e'
   666  006F75  67                 	db	103	;'g'
   667  006F76  20                 	db	32
   668  006F77  6E                 	db	110	;'n'
   669  006F78  6F                 	db	111	;'o'
   670  006F79  64                 	db	100	;'d'
   671  006F7A  65                 	db	101	;'e'
   672  006F7B  69                 	db	105	;'i'
   673  006F7C  64                 	db	100	;'d'
   674  006F7D  20                 	db	32
   675  006F7E  5B                 	db	91	;'['
   676  006F7F  70                 	db	112	;'p'
   677  006F80  61                 	db	97	;'a'
   678  006F81  67                 	db	103	;'g'
   679  006F82  65                 	db	101	;'e'
   680  006F83  3A                 	db	58	;':'
   681  006F84  5D                 	db	93	;']'
   682  006F85  72                 	db	114	;'r'
   683  006F86  65                 	db	101	;'e'
   684  006F87  67                 	db	103	;'g'
   685  006F88  20                 	db	32
   686  006F89  63                 	db	99	;'c'
   687  006F8A  6F                 	db	111	;'o'
   688  006F8B  6E                 	db	110	;'n'
   689  006F8C  74                 	db	116	;'t'
   690  006F8D  65                 	db	101	;'e'
   691  006F8E  6E                 	db	110	;'n'
   692  006F8F  74                 	db	116	;'t'
   693  006F90  29                 	db	41
   694  006F91  2E                 	db	46
   695  006F92  0D                 	db	13
   696  006F93  0A                 	db	10
   697  006F94  00                 	db	0
   698  006F95                     STR_272:
   699  006F95  20                 	db	32
   700  006F96  20                 	db	32
   701  006F97  20                 	db	32
   702  006F98  20                 	db	32
   703  006F99  20                 	db	32
   704  006F9A  20                 	db	32
   705  006F9B  20                 	db	32
   706  006F9C  46                 	db	70	;'F'
   707  006F9D  6F                 	db	111	;'o'
   708  006F9E  72                 	db	114	;'r'
   709  006F9F  6D                 	db	109	;'m'
   710  006FA0  61                 	db	97	;'a'
   711  006FA1  74                 	db	116	;'t'
   712  006FA2  3A                 	db	58	;':'
   713  006FA3  20                 	db	32
   714  006FA4  6D                 	db	109	;'m'
   715  006FA5  61                 	db	97	;'a'
   716  006FA6  73                 	db	115	;'s'
   717  006FA7  6B                 	db	107	;'k'
   718  006FA8  20                 	db	32
   719  006FA9  6D                 	db	109	;'m'
   720  006FAA  61                 	db	97	;'a'
   721  006FAB  73                 	db	115	;'s'
   722  006FAC  6B                 	db	107	;'k'
   723  006FAD  6E                 	db	110	;'n'
   724  006FAE  6F                 	db	111	;'o'
   725  006FAF  2C                 	db	44
   726  006FB0  70                 	db	112	;'p'
   727  006FB1  72                 	db	114	;'r'
   728  006FB2  69                 	db	105	;'i'
   729  006FB3  6F                 	db	111	;'o'
   730  006FB4  2C                 	db	44
   731  006FB5  63                 	db	99	;'c'
   732  006FB6  6C                 	db	108	;'l'
   733  006FB7  61                 	db	97	;'a'
   734  006FB8  73                 	db	115	;'s'
   735  006FB9  73                 	db	115	;'s'
   736  006FBA  2C                 	db	44
   737  006FBB  74                 	db	116	;'t'
   738  006FBC  79                 	db	121	;'y'
   739  006FBD  70                 	db	112	;'p'
   740  006FBE  65                 	db	101	;'e'
   741  006FBF  2C                 	db	44
   742  006FC0  6E                 	db	110	;'n'
   743  006FC1  6F                 	db	111	;'o'
   744  006FC2  64                 	db	100	;'d'
   745  006FC3  65                 	db	101	;'e'
   746  006FC4  69                 	db	105	;'i'
   747  006FC5  64                 	db	100	;'d'
   748  006FC6  20                 	db	32
   749  006FC7  28                 	db	40
   750  006FC8  6D                 	db	109	;'m'
   751  006FC9  61                 	db	97	;'a'
   752  006FCA  73                 	db	115	;'s'
   753  006FCB  6B                 	db	107	;'k'
   754  006FCC  6E                 	db	110	;'n'
   755  006FCD  6F                 	db	111	;'o'
   756  006FCE  20                 	db	32
   757  006FCF  3D                 	db	61	;'='
   758  006FD0  20                 	db	32
   759  006FD1  30                 	db	48	;'0'
   760  006FD2  20                 	db	32
   761  006FD3  6F                 	db	111	;'o'
   762  006FD4  72                 	db	114	;'r'
   763  006FD5  20                 	db	32
   764  006FD6  31                 	db	49	;'1'
   765  006FD7  29                 	db	41
   766  006FD8  2E                 	db	46
   767  006FD9  0D                 	db	13
   768  006FDA  0A                 	db	10
   769  006FDB  00                 	db	0
   770  006FDC                     STR_282:
   771  006FDC  2D                 	db	45
   772  006FDD  2D                 	db	45
   773  006FDE  2D                 	db	45
   774  006FDF  2D                 	db	45
   775  006FE0  2D                 	db	45
   776  006FE1  2D                 	db	45
   777  006FE2  2D                 	db	45
   778  006FE3  2D                 	db	45
   779  006FE4  2D                 	db	45
   780  006FE5  2D                 	db	45
   781  006FE6  2D                 	db	45
   782  006FE7  2D                 	db	45
   783  006FE8  2D                 	db	45
   784  006FE9  2D                 	db	45
   785  006FEA  2D                 	db	45
   786  006FEB  2D                 	db	45
   787  006FEC  2D                 	db	45
   788  006FED  2D                 	db	45
   789  006FEE  2D                 	db	45
   790  006FEF  2D                 	db	45
   791  006FF0  2D                 	db	45
   792  006FF1  2D                 	db	45
   793  006FF2  2D                 	db	45
   794  006FF3  2D                 	db	45
   795  006FF4  2D                 	db	45
   796  006FF5  2D                 	db	45
   797  006FF6  2D                 	db	45
   798  006FF7  2D                 	db	45
   799  006FF8  2D                 	db	45
   800  006FF9  2D                 	db	45
   801  006FFA  2D                 	db	45
   802  006FFB  2D                 	db	45
   803  006FFC  2D                 	db	45
   804  006FFD  2D                 	db	45
   805  006FFE  2D                 	db	45
   806  006FFF  2D                 	db	45
   807  007000  2D                 	db	45
   808  007001  2D                 	db	45
   809  007002  2D                 	db	45
   810  007003  2D                 	db	45
   811  007004  2D                 	db	45
   812  007005  2D                 	db	45
   813  007006  2D                 	db	45
   814  007007  2D                 	db	45
   815  007008  2D                 	db	45
   816  007009  2D                 	db	45
   817  00700A  2D                 	db	45
   818  00700B  2D                 	db	45
   819  00700C  2D                 	db	45
   820  00700D  2D                 	db	45
   821  00700E  2D                 	db	45
   822  00700F  2D                 	db	45
   823  007010  2D                 	db	45
   824  007011  2D                 	db	45
   825  007012  2D                 	db	45
   826  007013  2D                 	db	45
   827  007014  2D                 	db	45
   828  007015  2D                 	db	45
   829  007016  2D                 	db	45
   830  007017  2D                 	db	45
   831  007018  2D                 	db	45
   832  007019  2D                 	db	45
   833  00701A  2D                 	db	45
   834  00701B  2D                 	db	45
   835  00701C  0D                 	db	13
   836  00701D  0A                 	db	10
   837  00701E  00                 	db	0
   838  00701F                     STR_276:
   839  00701F  20                 	db	32
   840  007020  20                 	db	32
   841  007021  20                 	db	32
   842  007022  20                 	db	32
   843  007023  52                 	db	82	;'R'
   844  007024  57                 	db	87	;'W'
   845  007025  54                 	db	84	;'T'
   846  007026  49                 	db	73	;'I'
   847  007027  4D                 	db	77	;'M'
   848  007028  45                 	db	69	;'E'
   849  007029  4F                 	db	79	;'O'
   850  00702A  55                 	db	85	;'U'
   851  00702B  54                 	db	84	;'T'
   852  00702C  20                 	db	32
   853  00702D  2D                 	db	45
   854  00702E  20                 	db	32
   855  00702F  53                 	db	83	;'S'
   856  007030  65                 	db	101	;'e'
   857  007031  74                 	db	116	;'t'
   858  007032  20                 	db	32
   859  007033  72                 	db	114	;'r'
   860  007034  65                 	db	101	;'e'
   861  007035  67                 	db	103	;'g'
   862  007036  69                 	db	105	;'i'
   863  007037  73                 	db	115	;'s'
   864  007038  74                 	db	116	;'t'
   865  007039  65                 	db	101	;'e'
   866  00703A  72                 	db	114	;'r'
   867  00703B  20                 	db	32
   868  00703C  72                 	db	114	;'r'
   869  00703D  65                 	db	101	;'e'
   870  00703E  61                 	db	97	;'a'
   871  00703F  64                 	db	100	;'d'
   872  007040  2F                 	db	47
   873  007041  77                 	db	119	;'w'
   874  007042  72                 	db	114	;'r'
   875  007043  69                 	db	105	;'i'
   876  007044  74                 	db	116	;'t'
   877  007045  65                 	db	101	;'e'
   878  007046  20                 	db	32
   879  007047  74                 	db	116	;'t'
   880  007048  69                 	db	105	;'i'
   881  007049  6D                 	db	109	;'m'
   882  00704A  65                 	db	101	;'e'
   883  00704B  6F                 	db	111	;'o'
   884  00704C  75                 	db	117	;'u'
   885  00704D  74                 	db	116	;'t'
   886  00704E  2E                 	db	46
   887  00704F  20                 	db	32
   888  007050  44                 	db	68	;'D'
   889  007051  65                 	db	101	;'e'
   890  007052  66                 	db	102	;'f'
   891  007053  61                 	db	97	;'a'
   892  007054  75                 	db	117	;'u'
   893  007055  6C                 	db	108	;'l'
   894  007056  74                 	db	116	;'t'
   895  007057  3D                 	db	61	;'='
   896  007058  32                 	db	50	;'2'
   897  007059  30                 	db	48	;'0'
   898  00705A  20                 	db	32
   899  00705B  6D                 	db	109	;'m'
   900  00705C  73                 	db	115	;'s'
   901  00705D  20                 	db	32
   902  00705E  2E                 	db	46
   903  00705F  0D                 	db	13
   904  007060  0A                 	db	10
   905  007061  00                 	db	0
   906  007062                     STR_107:
   907  007062  2D                 	db	45
   908  007063  45                 	db	69	;'E'
   909  007064  52                 	db	82	;'R'
   910  007065  52                 	db	82	;'R'
   911  007066  4F                 	db	79	;'O'
   912  007067  52                 	db	82	;'R'
   913  007068  20                 	db	32
   914  007069  2D                 	db	45
   915  00706A  20                 	db	32
   916  00706B  46                 	db	70	;'F'
   917  00706C  69                 	db	105	;'i'
   918  00706D  6C                 	db	108	;'l'
   919  00706E  74                 	db	116	;'t'
   920  00706F  65                 	db	101	;'e'
   921  007070  72                 	db	114	;'r'
   922  007071  20                 	db	32
   923  007072  6E                 	db	110	;'n'
   924  007073  75                 	db	117	;'u'
   925  007074  6D                 	db	109	;'m'
   926  007075  62                 	db	98	;'b'
   927  007076  65                 	db	101	;'e'
   928  007077  72                 	db	114	;'r'
   929  007078  20                 	db	32
   930  007079  63                 	db	99	;'c'
   931  00707A  61                 	db	97	;'a'
   932  00707B  6E                 	db	110	;'n'
   933  00707C  20                 	db	32
   934  00707D  6F                 	db	111	;'o'
   935  00707E  6E                 	db	110	;'n'
   936  00707F  6C                 	db	108	;'l'
   937  007080  79                 	db	121	;'y'
   938  007081  20                 	db	32
   939  007082  62                 	db	98	;'b'
   940  007083  65                 	db	101	;'e'
   941  007084  20                 	db	32
   942  007085  73                 	db	115	;'s'
   943  007086  65                 	db	101	;'e'
   944  007087  74                 	db	116	;'t'
   945  007088  20                 	db	32
   946  007089  74                 	db	116	;'t'
   947  00708A  6F                 	db	111	;'o'
   948  00708B  20                 	db	32
   949  00708C  61                 	db	97	;'a'
   950  00708D  20                 	db	32
   951  00708E  76                 	db	118	;'v'
   952  00708F  61                 	db	97	;'a'
   953  007090  6C                 	db	108	;'l'
   954  007091  75                 	db	117	;'u'
   955  007092  65                 	db	101	;'e'
   956  007093  20                 	db	32
   957  007094  62                 	db	98	;'b'
   958  007095  65                 	db	101	;'e'
   959  007096  74                 	db	116	;'t'
   960  007097  77                 	db	119	;'w'
   961  007098  65                 	db	101	;'e'
   962  007099  65                 	db	101	;'e'
   963  00709A  6E                 	db	110	;'n'
   964  00709B  20                 	db	32
   965  00709C  30                 	db	48	;'0'
   966  00709D  2D                 	db	45
   967  00709E  31                 	db	49	;'1'
   968  00709F  35                 	db	53	;'5'
   969  0070A0  2E                 	db	46
   970  0070A1  0D                 	db	13
   971  0070A2  0A                 	db	10
   972  0070A3  00                 	db	0
   973  0070A4                     STR_279:
   974  0070A4  20                 	db	32
   975  0070A5  20                 	db	32
   976  0070A6  20                 	db	32
   977  0070A7  20                 	db	32
   978  0070A8  4D                 	db	77	;'M'
   979  0070A9  4F                 	db	79	;'O'
   980  0070AA  44                 	db	68	;'D'
   981  0070AB  45                 	db	69	;'E'
   982  0070AC  20                 	db	32
   983  0070AD  2D                 	db	45
   984  0070AE  20                 	db	32
   985  0070AF  53                 	db	83	;'S'
   986  0070B0  65                 	db	101	;'e'
   987  0070B1  74                 	db	116	;'t'
   988  0070B2  20                 	db	32
   989  0070B3  61                 	db	97	;'a'
   990  0070B4  64                 	db	100	;'d'
   991  0070B5  61                 	db	97	;'a'
   992  0070B6  70                 	db	112	;'p'
   993  0070B7  74                 	db	116	;'t'
   994  0070B8  65                 	db	101	;'e'
   995  0070B9  72                 	db	114	;'r'
   996  0070BA  20                 	db	32
   997  0070BB  6D                 	db	109	;'m'
   998  0070BC  6F                 	db	111	;'o'
   999  0070BD  64                 	db	100	;'d'
  1000  0070BE  65                 	db	101	;'e'
  1001  0070BF  20                 	db	32
  1002  0070C0  74                 	db	116	;'t'
  1003  0070C1  68                 	db	104	;'h'
  1004  0070C2  61                 	db	97	;'a'
  1005  0070C3  74                 	db	116	;'t'
  1006  0070C4  20                 	db	32
  1007  0070C5  73                 	db	115	;'s'
  1008  0070C6  68                 	db	104	;'h'
  1009  0070C7  6F                 	db	111	;'o'
  1010  0070C8  75                 	db	117	;'u'
  1011  0070C9  6C                 	db	108	;'l'
  1012  0070CA  64                 	db	100	;'d'
  1013  0070CB  20                 	db	32
  1014  0070CC  62                 	db	98	;'b'
  1015  0070CD  65                 	db	101	;'e'
  1016  0070CE  20                 	db	32
  1017  0070CF  75                 	db	117	;'u'
  1018  0070D0  73                 	db	115	;'s'
  1019  0070D1  65                 	db	101	;'e'
  1020  0070D2  64                 	db	100	;'d'
  1021  0070D3  20                 	db	32
  1022  0070D4  6F                 	db	111	;'o'
  1023  0070D5  6E                 	db	110	;'n'
  1024  0070D6  20                 	db	32
  1025  0070D7  73                 	db	115	;'s'
  1026  0070D8  74                 	db	116	;'t'
  1027  0070D9  61                 	db	97	;'a'
  1028  0070DA  72                 	db	114	;'r'
  1029  0070DB  74                 	db	116	;'t'
  1030  0070DC  75                 	db	117	;'u'
  1031  0070DD  70                 	db	112	;'p'
  1032  0070DE  2E                 	db	46
  1033  0070DF  0D                 	db	13
  1034  0070E0  0A                 	db	10
  1035  0070E1  00                 	db	0
  1036  0070E2                     STR_240:
  1037  0070E2  54                 	db	84	;'T'
  1038  0070E3  72                 	db	114	;'r'
  1039  0070E4  61                 	db	97	;'a'
  1040  0070E5  6E                 	db	110	;'n'
  1041  0070E6  73                 	db	115	;'s'
  1042  0070E7  6D                 	db	109	;'m'
  1043  0070E8  69                 	db	105	;'i'
  1044  0070E9  74                 	db	116	;'t'
  1045  0070EA  74                 	db	116	;'t'
  1046  0070EB  65                 	db	101	;'e'
  1047  0070EC  72                 	db	114	;'r'
  1048  0070ED  20                 	db	32
  1049  0070EE  69                 	db	105	;'i'
  1050  0070EF  6E                 	db	110	;'n'
  1051  0070F0  20                 	db	32
  1052  0070F1  45                 	db	69	;'E'
  1053  0070F2  72                 	db	114	;'r'
  1054  0070F3  72                 	db	114	;'r'
  1055  0070F4  6F                 	db	111	;'o'
  1056  0070F5  72                 	db	114	;'r'
  1057  0070F6  20                 	db	32
  1058  0070F7  53                 	db	83	;'S'
  1059  0070F8  74                 	db	116	;'t'
  1060  0070F9  61                 	db	97	;'a'
  1061  0070FA  74                 	db	116	;'t'
  1062  0070FB  65                 	db	101	;'e'
  1063  0070FC  20                 	db	32
  1064  0070FD  57                 	db	87	;'W'
  1065  0070FE  61                 	db	97	;'a'
  1066  0070FF  72                 	db	114	;'r'
  1067  007100  6E                 	db	110	;'n'
  1068  007101  69                 	db	105	;'i'
  1069  007102  6E                 	db	110	;'n'
  1070  007103  67                 	db	103	;'g'
  1071  007104  20                 	db	32
  1072  007105  28                 	db	40
  1073  007106  31                 	db	49	;'1'
  1074  007107  32                 	db	50	;'2'
  1075  007108  38                 	db	56	;'8'
  1076  007109  20                 	db	32
  1077  00710A  3E                 	db	62	;'>'
  1078  00710B  20                 	db	32
  1079  00710C  54                 	db	84	;'T'
  1080  00710D  58                 	db	88	;'X'
  1081  00710E  45                 	db	69	;'E'
  1082  00710F  52                 	db	82	;'R'
  1083  007110  52                 	db	82	;'R'
  1084  007111  43                 	db	67	;'C'
  1085  007112  4E                 	db	78	;'N'
  1086  007113  54                 	db	84	;'T'
  1087  007114  20                 	db	32
  1088  007115  3E                 	db	62	;'>'
  1089  007116  20                 	db	32
  1090  007117  39                 	db	57	;'9'
  1091  007118  36                 	db	54	;'6'
  1092  007119  29                 	db	41
  1093  00711A  0D                 	db	13
  1094  00711B  0A                 	db	10
  1095  00711C  00                 	db	0
  1096  00711D                     STR_242:
  1097  00711D  54                 	db	84	;'T'
  1098  00711E  72                 	db	114	;'r'
  1099  00711F  61                 	db	97	;'a'
  1100  007120  6E                 	db	110	;'n'
  1101  007121  73                 	db	115	;'s'
  1102  007122  6D                 	db	109	;'m'
  1103  007123  69                 	db	105	;'i'
  1104  007124  74                 	db	116	;'t'
  1105  007125  74                 	db	116	;'t'
  1106  007126  65                 	db	101	;'e'
  1107  007127  72                 	db	114	;'r'
  1108  007128  20                 	db	32
  1109  007129  69                 	db	105	;'i'
  1110  00712A  6E                 	db	110	;'n'
  1111  00712B  20                 	db	32
  1112  00712C  45                 	db	69	;'E'
  1113  00712D  72                 	db	114	;'r'
  1114  00712E  72                 	db	114	;'r'
  1115  00712F  6F                 	db	111	;'o'
  1116  007130  72                 	db	114	;'r'
  1117  007131  20                 	db	32
  1118  007132  53                 	db	83	;'S'
  1119  007133  74                 	db	116	;'t'
  1120  007134  61                 	db	97	;'a'
  1121  007135  74                 	db	116	;'t'
  1122  007136  65                 	db	101	;'e'
  1123  007137  20                 	db	32
  1124  007138  42                 	db	66	;'B'
  1125  007139  75                 	db	117	;'u'
  1126  00713A  73                 	db	115	;'s'
  1127  00713B  20                 	db	32
  1128  00713C  50                 	db	80	;'P'
  1129  00713D  61                 	db	97	;'a'
  1130  00713E  73                 	db	115	;'s'
  1131  00713F  73                 	db	115	;'s'
  1132  007140  69                 	db	105	;'i'
  1133  007141  76                 	db	118	;'v'
  1134  007142  65                 	db	101	;'e'
  1135  007143  20                 	db	32
  1136  007144  28                 	db	40
  1137  007145  54                 	db	84	;'T'
  1138  007146  58                 	db	88	;'X'
  1139  007147  45                 	db	69	;'E'
  1140  007148  52                 	db	82	;'R'
  1141  007149  52                 	db	82	;'R'
  1142  00714A  43                 	db	67	;'C'
  1143  00714B  4E                 	db	78	;'N'
  1144  00714C  54                 	db	84	;'T'
  1145  00714D  20                 	db	32
  1146  00714E  3F                 	db	63	;'?'
  1147  00714F  20                 	db	32
  1148  007150  31                 	db	49	;'1'
  1149  007151  32                 	db	50	;'2'
  1150  007152  38                 	db	56	;'8'
  1151  007153  29                 	db	41
  1152  007154  0D                 	db	13
  1153  007155  0A                 	db	10
  1154  007156  00                 	db	0
  1155  007157                     STR_2:
  1156  007157  43                 	db	67	;'C'
  1157  007158  6F                 	db	111	;'o'
  1158  007159  70                 	db	112	;'p'
  1159  00715A  79                 	db	121	;'y'
  1160  00715B  72                 	db	114	;'r'
  1161  00715C  69                 	db	105	;'i'
  1162  00715D  67                 	db	103	;'g'
  1163  00715E  68                 	db	104	;'h'
  1164  00715F  74                 	db	116	;'t'
  1165  007160  20                 	db	32
  1166  007161  28                 	db	40
  1167  007162  43                 	db	67	;'C'
  1168  007163  29                 	db	41
  1169  007164  20                 	db	32
  1170  007165  32                 	db	50	;'2'
  1171  007166  30                 	db	48	;'0'
  1172  007167  31                 	db	49	;'1'
  1173  007168  34                 	db	52	;'4'
  1174  007169  2D                 	db	45
  1175  00716A  32                 	db	50	;'2'
  1176  00716B  30                 	db	48	;'0'
  1177  00716C  31                 	db	49	;'1'
  1178  00716D  35                 	db	53	;'5'
  1179  00716E  20                 	db	32
  1180  00716F  50                 	db	80	;'P'
  1181  007170  61                 	db	97	;'a'
  1182  007171  72                 	db	114	;'r'
  1183  007172  61                 	db	97	;'a'
  1184  007173  64                 	db	100	;'d'
  1185  007174  69                 	db	105	;'i'
  1186  007175  73                 	db	115	;'s'
  1187  007176  65                 	db	101	;'e'
  1188  007177  20                 	db	32
  1189  007178  6F                 	db	111	;'o'
  1190  007179  66                 	db	102	;'f'
  1191  00717A  20                 	db	32
  1192  00717B  74                 	db	116	;'t'
  1193  00717C  68                 	db	104	;'h'
  1194  00717D  65                 	db	101	;'e'
  1195  00717E  20                 	db	32
  1196  00717F  46                 	db	70	;'F'
  1197  007180  72                 	db	114	;'r'
  1198  007181  6F                 	db	111	;'o'
  1199  007182  67                 	db	103	;'g'
  1200  007183  20                 	db	32
  1201  007184  41                 	db	65	;'A'
  1202  007185  42                 	db	66	;'B'
  1203  007186  2C                 	db	44
  1204  007187  20                 	db	32
  1205  007188  53                 	db	83	;'S'
  1206  007189  77                 	db	119	;'w'
  1207  00718A  65                 	db	101	;'e'
  1208  00718B  64                 	db	100	;'d'
  1209  00718C  65                 	db	101	;'e'
  1210  00718D  6E                 	db	110	;'n'
  1211  00718E  0D                 	db	13
  1212  00718F  0A                 	db	10
  1213  007190  00                 	db	0
  1214  007191                     STR_248:
  1215  007191  52                 	db	82	;'R'
  1216  007192  65                 	db	101	;'e'
  1217  007193  63                 	db	99	;'c'
  1218  007194  65                 	db	101	;'e'
  1219  007195  69                 	db	105	;'i'
  1220  007196  76                 	db	118	;'v'
  1221  007197  65                 	db	101	;'e'
  1222  007198  72                 	db	114	;'r'
  1223  007199  20                 	db	32
  1224  00719A  20                 	db	32
  1225  00719B  69                 	db	105	;'i'
  1226  00719C  6E                 	db	110	;'n'
  1227  00719D  20                 	db	32
  1228  00719E  45                 	db	69	;'E'
  1229  00719F  72                 	db	114	;'r'
  1230  0071A0  72                 	db	114	;'r'
  1231  0071A1  6F                 	db	111	;'o'
  1232  0071A2  72                 	db	114	;'r'
  1233  0071A3  20                 	db	32
  1234  0071A4  53                 	db	83	;'S'
  1235  0071A5  74                 	db	116	;'t'
  1236  0071A6  61                 	db	97	;'a'
  1237  0071A7  74                 	db	116	;'t'
  1238  0071A8  65                 	db	101	;'e'
  1239  0071A9  20                 	db	32
  1240  0071AA  57                 	db	87	;'W'
  1241  0071AB  61                 	db	97	;'a'
  1242  0071AC  72                 	db	114	;'r'
  1243  0071AD  6E                 	db	110	;'n'
  1244  0071AE  69                 	db	105	;'i'
  1245  0071AF  6E                 	db	110	;'n'
  1246  0071B0  67                 	db	103	;'g'
  1247  0071B1  20                 	db	32
  1248  0071B2  28                 	db	40
  1249  0071B3  31                 	db	49	;'1'
  1250  0071B4  32                 	db	50	;'2'
  1251  0071B5  38                 	db	56	;'8'
  1252  0071B6  20                 	db	32
  1253  0071B7  3E                 	db	62	;'>'
  1254  0071B8  20                 	db	32
  1255  0071B9  52                 	db	82	;'R'
  1256  0071BA  58                 	db	88	;'X'
  1257  0071BB  45                 	db	69	;'E'
  1258  0071BC  52                 	db	82	;'R'
  1259  0071BD  52                 	db	82	;'R'
  1260  0071BE  43                 	db	67	;'C'
  1261  0071BF  4E                 	db	78	;'N'
  1262  0071C0  54                 	db	84	;'T'
  1263  0071C1  20                 	db	32
  1264  0071C2  3E                 	db	62	;'>'
  1265  0071C3  20                 	db	32
  1266  0071C4  39                 	db	57	;'9'
  1267  0071C5  36                 	db	54	;'6'
  1268  0071C6  29                 	db	41
  1269  0071C7  0D                 	db	13
  1270  0071C8  0A                 	db	10
  1271  0071C9  00                 	db	0
  1272  0071CA                     STR_260:
  1273  0071CA  20                 	db	32
  1274  0071CB  20                 	db	32
  1275  0071CC  20                 	db	32
  1276  0071CD  20                 	db	32
  1277  0071CE  20                 	db	32
  1278  0071CF  46                 	db	70	;'F'
  1279  0071D0  6F                 	db	111	;'o'
  1280  0071D1  72                 	db	114	;'r'
  1281  0071D2  6D                 	db	109	;'m'
  1282  0071D3  61                 	db	97	;'a'
  1283  0071D4  74                 	db	116	;'t'
  1284  0071D5  3A                 	db	58	;':'
  1285  0071D6  20                 	db	32
  1286  0071D7  70                 	db	112	;'p'
  1287  0071D8  72                 	db	114	;'r'
  1288  0071D9  69                 	db	105	;'i'
  1289  0071DA  6F                 	db	111	;'o'
  1290  0071DB  72                 	db	114	;'r'
  1291  0071DC  69                 	db	105	;'i'
  1292  0071DD  74                 	db	116	;'t'
  1293  0071DE  79                 	db	121	;'y'
  1294  0071DF  2C                 	db	44
  1295  0071E0  63                 	db	99	;'c'
  1296  0071E1  6C                 	db	108	;'l'
  1297  0071E2  61                 	db	97	;'a'
  1298  0071E3  73                 	db	115	;'s'
  1299  0071E4  73                 	db	115	;'s'
  1300  0071E5  2C                 	db	44
  1301  0071E6  74                 	db	116	;'t'
  1302  0071E7  79                 	db	121	;'y'
  1303  0071E8  70                 	db	112	;'p'
  1304  0071E9  65                 	db	101	;'e'
  1305  0071EA  2C                 	db	44
  1306  0071EB  6E                 	db	110	;'n'
  1307  0071EC  6F                 	db	111	;'o'
  1308  0071ED  64                 	db	100	;'d'
  1309  0071EE  65                 	db	101	;'e'
  1310  0071EF  69                 	db	105	;'i'
  1311  0071F0  64                 	db	100	;'d'
  1312  0071F1  2C                 	db	44
  1313  0071F2  63                 	db	99	;'c'
  1314  0071F3  6F                 	db	111	;'o'
  1315  0071F4  75                 	db	117	;'u'
  1316  0071F5  6E                 	db	110	;'n'
  1317  0071F6  74                 	db	116	;'t'
  1318  0071F7  2C                 	db	44
  1319  0071F8  64                 	db	100	;'d'
  1320  0071F9  61                 	db	97	;'a'
  1321  0071FA  74                 	db	116	;'t'
  1322  0071FB  61                 	db	97	;'a'
  1323  0071FC  2C                 	db	44
  1324  0071FD  2C                 	db	44
  1325  0071FE  2C                 	db	44
  1326  0071FF  0D                 	db	13
  1327  007200  0A                 	db	10
  1328  007201  00                 	db	0
  1329  007202                     STR_247:
  1330  007202  52                 	db	82	;'R'
  1331  007203  65                 	db	101	;'e'
  1332  007204  63                 	db	99	;'c'
  1333  007205  65                 	db	101	;'e'
  1334  007206  69                 	db	105	;'i'
  1335  007207  76                 	db	118	;'v'
  1336  007208  65                 	db	101	;'e'
  1337  007209  72                 	db	114	;'r'
  1338  00720A  20                 	db	32
  1339  00720B  69                 	db	105	;'i'
  1340  00720C  6E                 	db	110	;'n'
  1341  00720D  20                 	db	32
  1342  00720E  45                 	db	69	;'E'
  1343  00720F  72                 	db	114	;'r'
  1344  007210  72                 	db	114	;'r'
  1345  007211  6F                 	db	111	;'o'
  1346  007212  72                 	db	114	;'r'
  1347  007213  20                 	db	32
  1348  007214  53                 	db	83	;'S'
  1349  007215  74                 	db	116	;'t'
  1350  007216  61                 	db	97	;'a'
  1351  007217  74                 	db	116	;'t'
  1352  007218  65                 	db	101	;'e'
  1353  007219  20                 	db	32
  1354  00721A  42                 	db	66	;'B'
  1355  00721B  75                 	db	117	;'u'
  1356  00721C  73                 	db	115	;'s'
  1357  00721D  20                 	db	32
  1358  00721E  50                 	db	80	;'P'
  1359  00721F  61                 	db	97	;'a'
  1360  007220  73                 	db	115	;'s'
  1361  007221  73                 	db	115	;'s'
  1362  007222  69                 	db	105	;'i'
  1363  007223  76                 	db	118	;'v'
  1364  007224  65                 	db	101	;'e'
  1365  007225  20                 	db	32
  1366  007226  28                 	db	40
  1367  007227  52                 	db	82	;'R'
  1368  007228  58                 	db	88	;'X'
  1369  007229  45                 	db	69	;'E'
  1370  00722A  52                 	db	82	;'R'
  1371  00722B  52                 	db	82	;'R'
  1372  00722C  43                 	db	67	;'C'
  1373  00722D  4E                 	db	78	;'N'
  1374  00722E  54                 	db	84	;'T'
  1375  00722F  20                 	db	32
  1376  007230  3E                 	db	62	;'>'
  1377  007231  20                 	db	32
  1378  007232  31                 	db	49	;'1'
  1379  007233  32                 	db	50	;'2'
  1380  007234  37                 	db	55	;'7'
  1381  007235  29                 	db	41
  1382  007236  0D                 	db	13
  1383  007237  0A                 	db	10
  1384  007238  00                 	db	0
  1385  007239                     STR_278:
  1386  007239  20                 	db	32
  1387  00723A  20                 	db	32
  1388  00723B  20                 	db	32
  1389  00723C  20                 	db	32
  1390  00723D  53                 	db	83	;'S'
  1391  00723E  54                 	db	84	;'T'
  1392  00723F  41                 	db	65	;'A'
  1393  007240  52                 	db	82	;'R'
  1394  007241  54                 	db	84	;'T'
  1395  007242  49                 	db	73	;'I'
  1396  007243  46                 	db	70	;'F'
  1397  007244  20                 	db	32
  1398  007245  2D                 	db	45
  1399  007246  20                 	db	32
  1400  007247  53                 	db	83	;'S'
  1401  007248  65                 	db	101	;'e'
  1402  007249  74                 	db	116	;'t'
  1403  00724A  20                 	db	32
  1404  00724B  69                 	db	105	;'i'
  1405  00724C  6E                 	db	110	;'n'
  1406  00724D  74                 	db	116	;'t'
  1407  00724E  65                 	db	101	;'e'
  1408  00724F  72                 	db	114	;'r'
  1409  007250  66                 	db	102	;'f'
  1410  007251  61                 	db	97	;'a'
  1411  007252  63                 	db	99	;'c'
  1412  007253  65                 	db	101	;'e'
  1413  007254  20                 	db	32
  1414  007255  73                 	db	115	;'s'
  1415  007256  74                 	db	116	;'t'
  1416  007257  61                 	db	97	;'a'
  1417  007258  74                 	db	116	;'t'
  1418  007259  65                 	db	101	;'e'
  1419  00725A  20                 	db	32
  1420  00725B  74                 	db	116	;'t'
  1421  00725C  6F                 	db	111	;'o'
  1422  00725D  20                 	db	32
  1423  00725E  75                 	db	117	;'u'
  1424  00725F  73                 	db	115	;'s'
  1425  007260  65                 	db	101	;'e'
  1426  007261  20                 	db	32
  1427  007262  6F                 	db	111	;'o'
  1428  007263  6E                 	db	110	;'n'
  1429  007264  20                 	db	32
  1430  007265  73                 	db	115	;'s'
  1431  007266  74                 	db	116	;'t'
  1432  007267  61                 	db	97	;'a'
  1433  007268  72                 	db	114	;'r'
  1434  007269  74                 	db	116	;'t'
  1435  00726A  75                 	db	117	;'u'
  1436  00726B  70                 	db	112	;'p'
  1437  00726C  2E                 	db	46
  1438  00726D  0D                 	db	13
  1439  00726E  0A                 	db	10
  1440  00726F  00                 	db	0
  1441  007270                     STR_4:
  1442  007270  50                 	db	80	;'P'
  1443  007271  72                 	db	114	;'r'
  1444  007272  65                 	db	101	;'e'
  1445  007273  73                 	db	115	;'s'
  1446  007274  73                 	db	115	;'s'
  1447  007275  20                 	db	32
  1448  007276  27                 	db	39
  1449  007277  76                 	db	118	;'v'
  1450  007278  27                 	db	39
  1451  007279  20                 	db	32
  1452  00727A  77                 	db	119	;'w'
  1453  00727B  69                 	db	105	;'i'
  1454  00727C  74                 	db	116	;'t'
  1455  00727D  68                 	db	104	;'h'
  1456  00727E  69                 	db	105	;'i'
  1457  00727F  6E                 	db	110	;'n'
  1458  007280  20                 	db	32
  1459  007281  74                 	db	116	;'t'
  1460  007282  68                 	db	104	;'h'
  1461  007283  72                 	db	114	;'r'
  1462  007284  65                 	db	101	;'e'
  1463  007285  65                 	db	101	;'e'
  1464  007286  20                 	db	32
  1465  007287  73                 	db	115	;'s'
  1466  007288  65                 	db	101	;'e'
  1467  007289  63                 	db	99	;'c'
  1468  00728A  6F                 	db	111	;'o'
  1469  00728B  6E                 	db	110	;'n'
  1470  00728C  64                 	db	100	;'d'
  1471  00728D  73                 	db	115	;'s'
  1472  00728E  20                 	db	32
  1473  00728F  74                 	db	116	;'t'
  1474  007290  6F                 	db	111	;'o'
  1475  007291  20                 	db	32
  1476  007292  65                 	db	101	;'e'
  1477  007293  6E                 	db	110	;'n'
  1478  007294  74                 	db	116	;'t'
  1479  007295  65                 	db	101	;'e'
  1480  007296  72                 	db	114	;'r'
  1481  007297  20                 	db	32
  1482  007298  76                 	db	118	;'v'
  1483  007299  65                 	db	101	;'e'
  1484  00729A  72                 	db	114	;'r'
  1485  00729B  62                 	db	98	;'b'
  1486  00729C  6F                 	db	111	;'o'
  1487  00729D  73                 	db	115	;'s'
  1488  00729E  65                 	db	101	;'e'
  1489  00729F  20                 	db	32
  1490  0072A0  6D                 	db	109	;'m'
  1491  0072A1  6F                 	db	111	;'o'
  1492  0072A2  64                 	db	100	;'d'
  1493  0072A3  65                 	db	101	;'e'
  1494  0072A4  0D                 	db	13
  1495  0072A5  0A                 	db	10
  1496  0072A6  00                 	db	0
  1497  0072A7                     STR_241:
  1498  0072A7  54                 	db	84	;'T'
  1499  0072A8  72                 	db	114	;'r'
  1500  0072A9  61                 	db	97	;'a'
  1501  0072AA  6E                 	db	110	;'n'
  1502  0072AB  73                 	db	115	;'s'
  1503  0072AC  6D                 	db	109	;'m'
  1504  0072AD  69                 	db	105	;'i'
  1505  0072AE  74                 	db	116	;'t'
  1506  0072AF  74                 	db	116	;'t'
  1507  0072B0  65                 	db	101	;'e'
  1508  0072B1  72                 	db	114	;'r'
  1509  0072B2  20                 	db	32
  1510  0072B3  69                 	db	105	;'i'
  1511  0072B4  6E                 	db	110	;'n'
  1512  0072B5  20                 	db	32
  1513  0072B6  45                 	db	69	;'E'
  1514  0072B7  72                 	db	114	;'r'
  1515  0072B8  72                 	db	114	;'r'
  1516  0072B9  6F                 	db	111	;'o'
  1517  0072BA  72                 	db	114	;'r'
  1518  0072BB  20                 	db	32
  1519  0072BC  53                 	db	83	;'S'
  1520  0072BD  74                 	db	116	;'t'
  1521  0072BE  61                 	db	97	;'a'
  1522  0072BF  74                 	db	116	;'t'
  1523  0072C0  65                 	db	101	;'e'
  1524  0072C1  20                 	db	32
  1525  0072C2  42                 	db	66	;'B'
  1526  0072C3  75                 	db	117	;'u'
  1527  0072C4  73                 	db	115	;'s'
  1528  0072C5  20                 	db	32
  1529  0072C6  4F                 	db	79	;'O'
  1530  0072C7  46                 	db	70	;'F'
  1531  0072C8  46                 	db	70	;'F'
  1532  0072C9  20                 	db	32
  1533  0072CA  28                 	db	40
  1534  0072CB  54                 	db	84	;'T'
  1535  0072CC  58                 	db	88	;'X'
  1536  0072CD  45                 	db	69	;'E'
  1537  0072CE  52                 	db	82	;'R'
  1538  0072CF  52                 	db	82	;'R'
  1539  0072D0  43                 	db	67	;'C'
  1540  0072D1  4E                 	db	78	;'N'
  1541  0072D2  54                 	db	84	;'T'
  1542  0072D3  20                 	db	32
  1543  0072D4  3F                 	db	63	;'?'
  1544  0072D5  20                 	db	32
  1545  0072D6  32                 	db	50	;'2'
  1546  0072D7  35                 	db	53	;'5'
  1547  0072D8  36                 	db	54	;'6'
  1548  0072D9  29                 	db	41
  1549  0072DA  0D                 	db	13
  1550  0072DB  0A                 	db	10
  1551  0072DC  00                 	db	0
  1552  0072DD                     STR_80:
  1553  0072DD  2D                 	db	45
  1554  0072DE  45                 	db	69	;'E'
  1555  0072DF  52                 	db	82	;'R'
  1556  0072E0  52                 	db	82	;'R'
  1557  0072E1  4F                 	db	79	;'O'
  1558  0072E2  52                 	db	82	;'R'
  1559  0072E3  20                 	db	32
  1560  0072E4  2D                 	db	45
  1561  0072E5  20                 	db	32
  1562  0072E6  4F                 	db	79	;'O'
  1563  0072E7  6E                 	db	110	;'n'
  1564  0072E8  65                 	db	101	;'e'
  1565  0072E9  20                 	db	32
  1566  0072EA  6F                 	db	111	;'o'
  1567  0072EB  72                 	db	114	;'r'
  1568  0072EC  20                 	db	32
  1569  0072ED  6D                 	db	109	;'m'
  1570  0072EE  6F                 	db	111	;'o'
  1571  0072EF  72                 	db	114	;'r'
  1572  0072F0  65                 	db	101	;'e'
  1573  0072F1  20                 	db	32
  1574  0072F2  72                 	db	114	;'r'
  1575  0072F3  65                 	db	101	;'e'
  1576  0072F4  67                 	db	103	;'g'
  1577  0072F5  69                 	db	105	;'i'
  1578  0072F6  73                 	db	115	;'s'
  1579  0072F7  74                 	db	116	;'t'
  1580  0072F8  65                 	db	101	;'e'
  1581  0072F9  72                 	db	114	;'r'
  1582  0072FA  28                 	db	40
  1583  0072FB  73                 	db	115	;'s'
  1584  0072FC  29                 	db	41
  1585  0072FD  20                 	db	32
  1586  0072FE  63                 	db	99	;'c'
  1587  0072FF  6F                 	db	111	;'o'
  1588  007300  75                 	db	117	;'u'
  1589  007301  6C                 	db	108	;'l'
  1590  007302  64                 	db	100	;'d'
  1591  007303  20                 	db	32
  1592  007304  6E                 	db	110	;'n'
  1593  007305  6F                 	db	111	;'o'
  1594  007306  74                 	db	116	;'t'
  1595  007307  20                 	db	32
  1596  007308  62                 	db	98	;'b'
  1597  007309  65                 	db	101	;'e'
  1598  00730A  20                 	db	32
  1599  00730B  72                 	db	114	;'r'
  1600  00730C  65                 	db	101	;'e'
  1601  00730D  61                 	db	97	;'a'
  1602  00730E  64                 	db	100	;'d'
  1603  00730F  2E                 	db	46
  1604  007310  0D                 	db	13
  1605  007311  0A                 	db	10
  1606  007312  00                 	db	0
  1607  007313                     STR_50:
  1608  007313  2D                 	db	45
  1609  007314  45                 	db	69	;'E'
  1610  007315  52                 	db	82	;'R'
  1611  007316  52                 	db	82	;'R'
  1612  007317  4F                 	db	79	;'O'
  1613  007318  52                 	db	82	;'R'
  1614  007319  20                 	db	32
  1615  00731A  2D                 	db	45
  1616  00731B  20                 	db	32
  1617  00731C  43                 	db	67	;'C'
  1618  00731D  6F                 	db	111	;'o'
  1619  00731E  6D                 	db	109	;'m'
  1620  00731F  6D                 	db	109	;'m'
  1621  007320  61                 	db	97	;'a'
  1622  007321  6E                 	db	110	;'n'
  1623  007322  64                 	db	100	;'d'
  1624  007323  20                 	db	32
  1625  007324  6F                 	db	111	;'o'
  1626  007325  6E                 	db	110	;'n'
  1627  007326  6C                 	db	108	;'l'
  1628  007327  79                 	db	121	;'y'
  1629  007328  20                 	db	32
  1630  007329  77                 	db	119	;'w'
  1631  00732A  6F                 	db	111	;'o'
  1632  00732B  72                 	db	114	;'r'
  1633  00732C  6B                 	db	107	;'k'
  1634  00732D  73                 	db	115	;'s'
  1635  00732E  20                 	db	32
  1636  00732F  69                 	db	105	;'i'
  1637  007330  66                 	db	102	;'f'
  1638  007331  20                 	db	32
  1639  007332  69                 	db	105	;'i'
  1640  007333  6E                 	db	110	;'n'
  1641  007334  74                 	db	116	;'t'
  1642  007335  65                 	db	101	;'e'
  1643  007336  72                 	db	114	;'r'
  1644  007337  66                 	db	102	;'f'
  1645  007338  61                 	db	97	;'a'
  1646  007339  63                 	db	99	;'c'
  1647  00733A  65                 	db	101	;'e'
  1648  00733B  20                 	db	32
  1649  00733C  69                 	db	105	;'i'
  1650  00733D  73                 	db	115	;'s'
  1651  00733E  20                 	db	32
  1652  00733F  6F                 	db	111	;'o'
  1653  007340  70                 	db	112	;'p'
  1654  007341  65                 	db	101	;'e'
  1655  007342  6E                 	db	110	;'n'
  1656  007343  2E                 	db	46
  1657  007344  0D                 	db	13
  1658  007345  0A                 	db	10
  1659  007346  00                 	db	0
  1660  007347                     STR_235:
  1661  007347  54                 	db	84	;'T'
  1662  007348  72                 	db	114	;'r'
  1663  007349  61                 	db	97	;'a'
  1664  00734A  6E                 	db	110	;'n'
  1665  00734B  73                 	db	115	;'s'
  1666  00734C  6D                 	db	109	;'m'
  1667  00734D  69                 	db	105	;'i'
  1668  00734E  74                 	db	116	;'t'
  1669  00734F  74                 	db	116	;'t'
  1670  007350  65                 	db	101	;'e'
  1671  007351  72                 	db	114	;'r'
  1672  007352  20                 	db	32
  1673  007353  6F                 	db	111	;'o'
  1674  007354  72                 	db	114	;'r'
  1675  007355  20                 	db	32
  1676  007356  52                 	db	82	;'R'
  1677  007357  65                 	db	101	;'e'
  1678  007358  63                 	db	99	;'c'
  1679  007359  65                 	db	101	;'e'
  1680  00735A  69                 	db	105	;'i'
  1681  00735B  76                 	db	118	;'v'
  1682  00735C  65                 	db	101	;'e'
  1683  00735D  72                 	db	114	;'r'
  1684  00735E  20                 	db	32
  1685  00735F  69                 	db	105	;'i'
  1686  007360  73                 	db	115	;'s'
  1687  007361  20                 	db	32
  1688  007362  69                 	db	105	;'i'
  1689  007363  6E                 	db	110	;'n'
  1690  007364  20                 	db	32
  1691  007365  45                 	db	69	;'E'
  1692  007366  72                 	db	114	;'r'
  1693  007367  72                 	db	114	;'r'
  1694  007368  6F                 	db	111	;'o'
  1695  007369  72                 	db	114	;'r'
  1696  00736A  20                 	db	32
  1697  00736B  53                 	db	83	;'S'
  1698  00736C  74                 	db	116	;'t'
  1699  00736D  61                 	db	97	;'a'
  1700  00736E  74                 	db	116	;'t'
  1701  00736F  65                 	db	101	;'e'
  1702  007370  20                 	db	32
  1703  007371  57                 	db	87	;'W'
  1704  007372  61                 	db	97	;'a'
  1705  007373  72                 	db	114	;'r'
  1706  007374  6E                 	db	110	;'n'
  1707  007375  69                 	db	105	;'i'
  1708  007376  6E                 	db	110	;'n'
  1709  007377  67                 	db	103	;'g'
  1710  007378  0D                 	db	13
  1711  007379  0A                 	db	10
  1712  00737A  00                 	db	0
  1713  00737B                     STR_254:
  1714  00737B  4C                 	db	76	;'L'
  1715  00737C  49                 	db	73	;'I'
  1716  00737D  53                 	db	83	;'S'
  1717  00737E  54                 	db	84	;'T'
  1718  00737F  45                 	db	69	;'E'
  1719  007380  4E                 	db	78	;'N'
  1720  007381  20                 	db	32
  1721  007382  2D                 	db	45
  1722  007383  20                 	db	32
  1723  007384  4F                 	db	79	;'O'
  1724  007385  70                 	db	112	;'p'
  1725  007386  65                 	db	101	;'e'
  1726  007387  6E                 	db	110	;'n'
  1727  007388  20                 	db	32
  1728  007389  43                 	db	67	;'C'
  1729  00738A  41                 	db	65	;'A'
  1730  00738B  4E                 	db	78	;'N'
  1731  00738C  20                 	db	32
  1732  00738D  69                 	db	105	;'i'
  1733  00738E  6E                 	db	110	;'n'
  1734  00738F  74                 	db	116	;'t'
  1735  007390  65                 	db	101	;'e'
  1736  007391  72                 	db	114	;'r'
  1737  007392  66                 	db	102	;'f'
  1738  007393  61                 	db	97	;'a'
  1739  007394  63                 	db	99	;'c'
  1740  007395  65                 	db	101	;'e'
  1741  007396  20                 	db	32
  1742  007397  69                 	db	105	;'i'
  1743  007398  6E                 	db	110	;'n'
  1744  007399  20                 	db	32
  1745  00739A  6C                 	db	108	;'l'
  1746  00739B  69                 	db	105	;'i'
  1747  00739C  73                 	db	115	;'s'
  1748  00739D  74                 	db	116	;'t'
  1749  00739E  65                 	db	101	;'e'
  1750  00739F  6E                 	db	110	;'n'
  1751  0073A0  20                 	db	32
  1752  0073A1  6F                 	db	111	;'o'
  1753  0073A2  6E                 	db	110	;'n'
  1754  0073A3  6C                 	db	108	;'l'
  1755  0073A4  79                 	db	121	;'y'
  1756  0073A5  20                 	db	32
  1757  0073A6  6D                 	db	109	;'m'
  1758  0073A7  6F                 	db	111	;'o'
  1759  0073A8  64                 	db	100	;'d'
  1760  0073A9  65                 	db	101	;'e'
  1761  0073AA  2E                 	db	46
  1762  0073AB  0D                 	db	13
  1763  0073AC  0A                 	db	10
  1764  0073AD  00                 	db	0
  1765  0073AE                     STR_122:
  1766  0073AE  2D                 	db	45
  1767  0073AF  45                 	db	69	;'E'
  1768  0073B0  52                 	db	82	;'R'
  1769  0073B1  52                 	db	82	;'R'
  1770  0073B2  4F                 	db	79	;'O'
  1771  0073B3  52                 	db	82	;'R'
  1772  0073B4  20                 	db	32
  1773  0073B5  2D                 	db	45
  1774  0073B6  20                 	db	32
  1775  0073B7  4D                 	db	77	;'M'
  1776  0073B8  61                 	db	97	;'a'
  1777  0073B9  73                 	db	115	;'s'
  1778  0073BA  6B                 	db	107	;'k'
  1779  0073BB  20                 	db	32
  1780  0073BC  6E                 	db	110	;'n'
  1781  0073BD  75                 	db	117	;'u'
  1782  0073BE  6D                 	db	109	;'m'
  1783  0073BF  62                 	db	98	;'b'
  1784  0073C0  65                 	db	101	;'e'
  1785  0073C1  72                 	db	114	;'r'
  1786  0073C2  20                 	db	32
  1787  0073C3  63                 	db	99	;'c'
  1788  0073C4  61                 	db	97	;'a'
  1789  0073C5  6E                 	db	110	;'n'
  1790  0073C6  20                 	db	32
  1791  0073C7  6F                 	db	111	;'o'
  1792  0073C8  6E                 	db	110	;'n'
  1793  0073C9  6C                 	db	108	;'l'
  1794  0073CA  79                 	db	121	;'y'
  1795  0073CB  20                 	db	32
  1796  0073CC  62                 	db	98	;'b'
  1797  0073CD  65                 	db	101	;'e'
  1798  0073CE  20                 	db	32
  1799  0073CF  73                 	db	115	;'s'
  1800  0073D0  65                 	db	101	;'e'
  1801  0073D1  74                 	db	116	;'t'
  1802  0073D2  20                 	db	32
  1803  0073D3  61                 	db	97	;'a'
  1804  0073D4  73                 	db	115	;'s'
  1805  0073D5  20                 	db	32
  1806  0073D6  30                 	db	48	;'0'
  1807  0073D7  20                 	db	32
  1808  0073D8  6F                 	db	111	;'o'
  1809  0073D9  72                 	db	114	;'r'
  1810  0073DA  20                 	db	32
  1811  0073DB  31                 	db	49	;'1'
  1812  0073DC  2E                 	db	46
  1813  0073DD  0D                 	db	13
  1814  0073DE  0A                 	db	10
  1815  0073DF  00                 	db	0
  1816  0073E0                     STR_255:
  1817  0073E0  4C                 	db	76	;'L'
  1818  0073E1  4F                 	db	79	;'O'
  1819  0073E2  4F                 	db	79	;'O'
  1820  0073E3  50                 	db	80	;'P'
  1821  0073E4  42                 	db	66	;'B'
  1822  0073E5  41                 	db	65	;'A'
  1823  0073E6  43                 	db	67	;'C'
  1824  0073E7  4B                 	db	75	;'K'
  1825  0073E8  20                 	db	32
  1826  0073E9  2D                 	db	45
  1827  0073EA  20                 	db	32
  1828  0073EB  4F                 	db	79	;'O'
  1829  0073EC  70                 	db	112	;'p'
  1830  0073ED  65                 	db	101	;'e'
  1831  0073EE  6E                 	db	110	;'n'
  1832  0073EF  20                 	db	32
  1833  0073F0  43                 	db	67	;'C'
  1834  0073F1  41                 	db	65	;'A'
  1835  0073F2  4E                 	db	78	;'N'
  1836  0073F3  20                 	db	32
  1837  0073F4  69                 	db	105	;'i'
  1838  0073F5  6E                 	db	110	;'n'
  1839  0073F6  74                 	db	116	;'t'
  1840  0073F7  65                 	db	101	;'e'
  1841  0073F8  72                 	db	114	;'r'
  1842  0073F9  66                 	db	102	;'f'
  1843  0073FA  61                 	db	97	;'a'
  1844  0073FB  63                 	db	99	;'c'
  1845  0073FC  65                 	db	101	;'e'
  1846  0073FD  20                 	db	32
  1847  0073FE  69                 	db	105	;'i'
  1848  0073FF  6E                 	db	110	;'n'
  1849  007400  20                 	db	32
  1850  007401  6C                 	db	108	;'l'
  1851  007402  6F                 	db	111	;'o'
  1852  007403  6F                 	db	111	;'o'
  1853  007404  70                 	db	112	;'p'
  1854  007405  62                 	db	98	;'b'
  1855  007406  61                 	db	97	;'a'
  1856  007407  63                 	db	99	;'c'
  1857  007408  6B                 	db	107	;'k'
  1858  007409  20                 	db	32
  1859  00740A  6D                 	db	109	;'m'
  1860  00740B  6F                 	db	111	;'o'
  1861  00740C  64                 	db	100	;'d'
  1862  00740D  65                 	db	101	;'e'
  1863  00740E  2E                 	db	46
  1864  00740F  0D                 	db	13
  1865  007410  0A                 	db	10
  1866  007411  00                 	db	0
  1867  007412                     STR_257:
  1868  007412  56                 	db	86	;'V'
  1869  007413  45                 	db	69	;'E'
  1870  007414  52                 	db	82	;'R'
  1871  007415  53                 	db	83	;'S'
  1872  007416  49                 	db	73	;'I'
  1873  007417  4F                 	db	79	;'O'
  1874  007418  4E                 	db	78	;'N'
  1875  007419  20                 	db	32
  1876  00741A  2D                 	db	45
  1877  00741B  20                 	db	32
  1878  00741C  44                 	db	68	;'D'
  1879  00741D  69                 	db	105	;'i'
  1880  00741E  73                 	db	115	;'s'
  1881  00741F  70                 	db	112	;'p'
  1882  007420  6C                 	db	108	;'l'
  1883  007421  61                 	db	97	;'a'
  1884  007422  79                 	db	121	;'y'
  1885  007423  20                 	db	32
  1886  007424  66                 	db	102	;'f'
  1887  007425  69                 	db	105	;'i'
  1888  007426  72                 	db	114	;'r'
  1889  007427  6D                 	db	109	;'m'
  1890  007428  77                 	db	119	;'w'
  1891  007429  61                 	db	97	;'a'
  1892  00742A  72                 	db	114	;'r'
  1893  00742B  65                 	db	101	;'e'
  1894  00742C  20                 	db	32
  1895  00742D  76                 	db	118	;'v'
  1896  00742E  65                 	db	101	;'e'
  1897  00742F  72                 	db	114	;'r'
  1898  007430  73                 	db	115	;'s'
  1899  007431  69                 	db	105	;'i'
  1900  007432  6F                 	db	111	;'o'
  1901  007433  6E                 	db	110	;'n'
  1902  007434  20                 	db	32
  1903  007435  69                 	db	105	;'i'
  1904  007436  6E                 	db	110	;'n'
  1905  007437  66                 	db	102	;'f'
  1906  007438  6F                 	db	111	;'o'
  1907  007439  72                 	db	114	;'r'
  1908  00743A  6D                 	db	109	;'m'
  1909  00743B  61                 	db	97	;'a'
  1910  00743C  74                 	db	116	;'t'
  1911  00743D  69                 	db	105	;'i'
  1912  00743E  6F                 	db	111	;'o'
  1913  00743F  6E                 	db	110	;'n'
  1914  007440  2E                 	db	46
  1915  007441  0D                 	db	13
  1916  007442  0A                 	db	10
  1917  007443  00                 	db	0
  1918  007444                     STR_277:
  1919  007444  20                 	db	32
  1920  007445  20                 	db	32
  1921  007446  20                 	db	32
  1922  007447  20                 	db	32
  1923  007448  20                 	db	32
  1924  007449  20                 	db	32
  1925  00744A  20                 	db	32
  1926  00744B  20                 	db	32
  1927  00744C  20                 	db	32
  1928  00744D  20                 	db	32
  1929  00744E  20                 	db	32
  1930  00744F  20                 	db	32
  1931  007450  20                 	db	32
  1932  007451  20                 	db	32
  1933  007452  20                 	db	32
  1934  007453  20                 	db	32
  1935  007454  46                 	db	70	;'F'
  1936  007455  6F                 	db	111	;'o'
  1937  007456  72                 	db	114	;'r'
  1938  007457  6D                 	db	109	;'m'
  1939  007458  61                 	db	97	;'a'
  1940  007459  74                 	db	116	;'t'
  1941  00745A  3A                 	db	58	;':'
  1942  00745B  20                 	db	32
  1943  00745C  73                 	db	115	;'s'
  1944  00745D  65                 	db	101	;'e'
  1945  00745E  74                 	db	116	;'t'
  1946  00745F  20                 	db	32
  1947  007460  72                 	db	114	;'r'
  1948  007461  77                 	db	119	;'w'
  1949  007462  74                 	db	116	;'t'
  1950  007463  69                 	db	105	;'i'
  1951  007464  6D                 	db	109	;'m'
  1952  007465  65                 	db	101	;'e'
  1953  007466  6F                 	db	111	;'o'
  1954  007467  75                 	db	117	;'u'
  1955  007468  74                 	db	116	;'t'
  1956  007469  20                 	db	32
  1957  00746A  74                 	db	116	;'t'
  1958  00746B  69                 	db	105	;'i'
  1959  00746C  6D                 	db	109	;'m'
  1960  00746D  65                 	db	101	;'e'
  1961  00746E  6F                 	db	111	;'o'
  1962  00746F  75                 	db	117	;'u'
  1963  007470  74                 	db	116	;'t'
  1964  007471  2E                 	db	46
  1965  007472  0D                 	db	13
  1966  007473  0A                 	db	10
  1967  007474  00                 	db	0
  1968  007475                     STR_275:
  1969  007475  20                 	db	32
  1970  007476  20                 	db	32
  1971  007477  20                 	db	32
  1972  007478  20                 	db	32
  1973  007479  44                 	db	68	;'D'
  1974  00747A  45                 	db	69	;'E'
  1975  00747B  43                 	db	67	;'C'
  1976  00747C  49                 	db	73	;'I'
  1977  00747D  4D                 	db	77	;'M'
  1978  00747E  41                 	db	65	;'A'
  1979  00747F  4C                 	db	76	;'L'
  1980  007480  20                 	db	32
  1981  007481  2D                 	db	45
  1982  007482  20                 	db	32
  1983  007483  44                 	db	68	;'D'
  1984  007484  69                 	db	105	;'i'
  1985  007485  73                 	db	115	;'s'
  1986  007486  70                 	db	112	;'p'
  1987  007487  6C                 	db	108	;'l'
  1988  007488  61                 	db	97	;'a'
  1989  007489  79                 	db	121	;'y'
  1990  00748A  20                 	db	32
  1991  00748B  6E                 	db	110	;'n'
  1992  00748C  75                 	db	117	;'u'
  1993  00748D  6D                 	db	109	;'m'
  1994  00748E  65                 	db	101	;'e'
  1995  00748F  72                 	db	114	;'r'
  1996  007490  69                 	db	105	;'i'
  1997  007491  63                 	db	99	;'c'
  1998  007492  61                 	db	97	;'a'
  1999  007493  6C                 	db	108	;'l'
  2000  007494  73                 	db	115	;'s'
  2001  007495  20                 	db	32
  2002  007496  69                 	db	105	;'i'
  2003  007497  6E                 	db	110	;'n'
  2004  007498  20                 	db	32
  2005  007499  64                 	db	100	;'d'
  2006  00749A  65                 	db	101	;'e'
  2007  00749B  63                 	db	99	;'c'
  2008  00749C  69                 	db	105	;'i'
  2009  00749D  6D                 	db	109	;'m'
  2010  00749E  61                 	db	97	;'a'
  2011  00749F  6C                 	db	108	;'l'
  2012  0074A0  2E                 	db	46
  2013  0074A1  0D                 	db	13
  2014  0074A2  0A                 	db	10
  2015  0074A3  00                 	db	0
  2016  0074A4                     STR_274:
  2017  0074A4  20                 	db	32
  2018  0074A5  20                 	db	32
  2019  0074A6  20                 	db	32
  2020  0074A7  20                 	db	32
  2021  0074A8  48                 	db	72	;'H'
  2022  0074A9  45                 	db	69	;'E'
  2023  0074AA  58                 	db	88	;'X'
  2024  0074AB  20                 	db	32
  2025  0074AC  2D                 	db	45
  2026  0074AD  20                 	db	32
  2027  0074AE  44                 	db	68	;'D'
  2028  0074AF  69                 	db	105	;'i'
  2029  0074B0  73                 	db	115	;'s'
  2030  0074B1  70                 	db	112	;'p'
  2031  0074B2  6C                 	db	108	;'l'
  2032  0074B3  61                 	db	97	;'a'
  2033  0074B4  79                 	db	121	;'y'
  2034  0074B5  20                 	db	32
  2035  0074B6  6E                 	db	110	;'n'
  2036  0074B7  75                 	db	117	;'u'
  2037  0074B8  6D                 	db	109	;'m'
  2038  0074B9  65                 	db	101	;'e'
  2039  0074BA  72                 	db	114	;'r'
  2040  0074BB  69                 	db	105	;'i'
  2041  0074BC  63                 	db	99	;'c'
  2042  0074BD  61                 	db	97	;'a'
  2043  0074BE  6C                 	db	108	;'l'
  2044  0074BF  73                 	db	115	;'s'
  2045  0074C0  20                 	db	32
  2046  0074C1  69                 	db	105	;'i'
  2047  0074C2  6E                 	db	110	;'n'
  2048  0074C3  20                 	db	32
  2049  0074C4  68                 	db	104	;'h'
  2050  0074C5  65                 	db	101	;'e'
  2051  0074C6  78                 	db	120	;'x'
  2052  0074C7  61                 	db	97	;'a'
  2053  0074C8  64                 	db	100	;'d'
  2054  0074C9  65                 	db	101	;'e'
  2055  0074CA  63                 	db	99	;'c'
  2056  0074CB  69                 	db	105	;'i'
  2057  0074CC  6D                 	db	109	;'m'
  2058  0074CD  61                 	db	97	;'a'
  2059  0074CE  6C                 	db	108	;'l'
  2060  0074CF  2E                 	db	46
  2061  0074D0  0D                 	db	13
  2062  0074D1  0A                 	db	10
  2063  0074D2  00                 	db	0
  2064  0074D3                     STR_265:
  2065  0074D3  46                 	db	70	;'F'
  2066  0074D4  49                 	db	73	;'I'
  2067  0074D5  4E                 	db	78	;'N'
  2068  0074D6  44                 	db	68	;'D'
  2069  0074D7  20                 	db	32
  2070  0074D8  2D                 	db	45
  2071  0074D9  20                 	db	32
  2072  0074DA  46                 	db	70	;'F'
  2073  0074DB  69                 	db	105	;'i'
  2074  0074DC  6E                 	db	110	;'n'
  2075  0074DD  64                 	db	100	;'d'
  2076  0074DE  20                 	db	32
  2077  0074DF  61                 	db	97	;'a'
  2078  0074E0  76                 	db	118	;'v'
  2079  0074E1  61                 	db	97	;'a'
  2080  0074E2  69                 	db	105	;'i'
  2081  0074E3  6C                 	db	108	;'l'
  2082  0074E4  61                 	db	97	;'a'
  2083  0074E5  62                 	db	98	;'b'
  2084  0074E6  6C                 	db	108	;'l'
  2085  0074E7  65                 	db	101	;'e'
  2086  0074E8  20                 	db	32
  2087  0074E9  43                 	db	67	;'C'
  2088  0074EA  41                 	db	65	;'A'
  2089  0074EB  4E                 	db	78	;'N'
  2090  0074EC  34                 	db	52	;'4'
  2091  0074ED  56                 	db	86	;'V'
  2092  0074EE  53                 	db	83	;'S'
  2093  0074EF  43                 	db	67	;'C'
  2094  0074F0  50                 	db	80	;'P'
  2095  0074F1  20                 	db	32
  2096  0074F2  6E                 	db	110	;'n'
  2097  0074F3  6F                 	db	111	;'o'
  2098  0074F4  64                 	db	100	;'d'
  2099  0074F5  65                 	db	101	;'e'
  2100  0074F6  73                 	db	115	;'s'
  2101  0074F7  20                 	db	32
  2102  0074F8  6F                 	db	111	;'o'
  2103  0074F9  6E                 	db	110	;'n'
  2104  0074FA  20                 	db	32
  2105  0074FB  62                 	db	98	;'b'
  2106  0074FC  75                 	db	117	;'u'
  2107  0074FD  73                 	db	115	;'s'
  2108  0074FE  2E                 	db	46
  2109  0074FF  0D                 	db	13
  2110  007500  0A                 	db	10
  2111  007501  00                 	db	0
  2112  007502                     STR_164:
  2113  007502  2B                 	db	43
  2114  007503  45                 	db	69	;'E'
  2115  007504  52                 	db	82	;'R'
  2116  007505  52                 	db	82	;'R'
  2117  007506  4F                 	db	79	;'O'
  2118  007507  52                 	db	82	;'R'
  2119  007508  20                 	db	32
  2120  007509  2D                 	db	45
  2121  00750A  20                 	db	32
  2122  00750B  57                 	db	87	;'W'
  2123  00750C  72                 	db	114	;'r'
  2124  00750D  6F                 	db	111	;'o'
  2125  00750E  6E                 	db	110	;'n'
  2126  00750F  67                 	db	103	;'g'
  2127  007510  20                 	db	32
  2128  007511  61                 	db	97	;'a'
  2129  007512  72                 	db	114	;'r'
  2130  007513  67                 	db	103	;'g'
  2131  007514  75                 	db	117	;'u'
  2132  007515  6D                 	db	109	;'m'
  2133  007516  65                 	db	101	;'e'
  2134  007517  6E                 	db	110	;'n'
  2135  007518  74                 	db	116	;'t'
  2136  007519  20                 	db	32
  2137  00751A  74                 	db	116	;'t'
  2138  00751B  6F                 	db	111	;'o'
  2139  00751C  20                 	db	32
  2140  00751D  27                 	db	39
  2141  00751E  73                 	db	115	;'s'
  2142  00751F  65                 	db	101	;'e'
  2143  007520  74                 	db	116	;'t'
  2144  007521  20                 	db	32
  2145  007522  74                 	db	116	;'t'
  2146  007523  69                 	db	105	;'i'
  2147  007524  6D                 	db	109	;'m'
  2148  007525  65                 	db	101	;'e'
  2149  007526  73                 	db	115	;'s'
  2150  007527  74                 	db	116	;'t'
  2151  007528  61                 	db	97	;'a'
  2152  007529  6D                 	db	109	;'m'
  2153  00752A  70                 	db	112	;'p'
  2154  00752B  27                 	db	39
  2155  00752C  2E                 	db	46
  2156  00752D  0D                 	db	13
  2157  00752E  0A                 	db	10
  2158  00752F  00                 	db	0
  2159  007530                     STR_253:
  2160  007530  53                 	db	83	;'S'
  2161  007531  49                 	db	73	;'I'
  2162  007532  4C                 	db	76	;'L'
  2163  007533  45                 	db	69	;'E'
  2164  007534  4E                 	db	78	;'N'
  2165  007535  54                 	db	84	;'T'
  2166  007536  20                 	db	32
  2167  007537  2D                 	db	45
  2168  007538  20                 	db	32
  2169  007539  4F                 	db	79	;'O'
  2170  00753A  70                 	db	112	;'p'
  2171  00753B  65                 	db	101	;'e'
  2172  00753C  6E                 	db	110	;'n'
  2173  00753D  20                 	db	32
  2174  00753E  43                 	db	67	;'C'
  2175  00753F  41                 	db	65	;'A'
  2176  007540  4E                 	db	78	;'N'
  2177  007541  20                 	db	32
  2178  007542  69                 	db	105	;'i'
  2179  007543  6E                 	db	110	;'n'
  2180  007544  74                 	db	116	;'t'
  2181  007545  65                 	db	101	;'e'
  2182  007546  72                 	db	114	;'r'
  2183  007547  66                 	db	102	;'f'
  2184  007548  61                 	db	97	;'a'
  2185  007549  63                 	db	99	;'c'
  2186  00754A  65                 	db	101	;'e'
  2187  00754B  20                 	db	32
  2188  00754C  69                 	db	105	;'i'
  2189  00754D  6E                 	db	110	;'n'
  2190  00754E  20                 	db	32
  2191  00754F  73                 	db	115	;'s'
  2192  007550  69                 	db	105	;'i'
  2193  007551  6C                 	db	108	;'l'
  2194  007552  65                 	db	101	;'e'
  2195  007553  6E                 	db	110	;'n'
  2196  007554  74                 	db	116	;'t'
  2197  007555  20                 	db	32
  2198  007556  6D                 	db	109	;'m'
  2199  007557  6F                 	db	111	;'o'
  2200  007558  64                 	db	100	;'d'
  2201  007559  65                 	db	101	;'e'
  2202  00755A  2E                 	db	46
  2203  00755B  0D                 	db	13
  2204  00755C  0A                 	db	10
  2205  00755D  00                 	db	0
  2206  00755E                     STR_258:
  2207  00755E  49                 	db	73	;'I'
  2208  00755F  46                 	db	70	;'F'
  2209  007560  4D                 	db	77	;'M'
  2210  007561  4F                 	db	79	;'O'
  2211  007562  44                 	db	68	;'D'
  2212  007563  45                 	db	69	;'E'
  2213  007564  20                 	db	32
  2214  007565  2D                 	db	45
  2215  007566  20                 	db	32
  2216  007567  44                 	db	68	;'D'
  2217  007568  69                 	db	105	;'i'
  2218  007569  73                 	db	115	;'s'
  2219  00756A  70                 	db	112	;'p'
  2220  00756B  6C                 	db	108	;'l'
  2221  00756C  61                 	db	97	;'a'
  2222  00756D  79                 	db	121	;'y'
  2223  00756E  20                 	db	32
  2224  00756F  73                 	db	115	;'s'
  2225  007570  65                 	db	101	;'e'
  2226  007571  6C                 	db	108	;'l'
  2227  007572  65                 	db	101	;'e'
  2228  007573  63                 	db	99	;'c'
  2229  007574  74                 	db	116	;'t'
  2230  007575  65                 	db	101	;'e'
  2231  007576  64                 	db	100	;'d'
  2232  007577  20                 	db	32
  2233  007578  69                 	db	105	;'i'
  2234  007579  6E                 	db	110	;'n'
  2235  00757A  74                 	db	116	;'t'
  2236  00757B  65                 	db	101	;'e'
  2237  00757C  72                 	db	114	;'r'
  2238  00757D  66                 	db	102	;'f'
  2239  00757E  61                 	db	97	;'a'
  2240  00757F  63                 	db	99	;'c'
  2241  007580  65                 	db	101	;'e'
  2242  007581  20                 	db	32
  2243  007582  6D                 	db	109	;'m'
  2244  007583  6F                 	db	111	;'o'
  2245  007584  64                 	db	100	;'d'
  2246  007585  65                 	db	101	;'e'
  2247  007586  2E                 	db	46
  2248  007587  0D                 	db	13
  2249  007588  0A                 	db	10
  2250  007589  00                 	db	0
  2251  00758A                     STR_252:
  2252  00758A  4F                 	db	79	;'O'
  2253  00758B  50                 	db	80	;'P'
  2254  00758C  45                 	db	69	;'E'
  2255  00758D  4E                 	db	78	;'N'
  2256  00758E  20                 	db	32
  2257  00758F  2D                 	db	45
  2258  007590  20                 	db	32
  2259  007591  4F                 	db	79	;'O'
  2260  007592  70                 	db	112	;'p'
  2261  007593  65                 	db	101	;'e'
  2262  007594  6E                 	db	110	;'n'
  2263  007595  20                 	db	32
  2264  007596  43                 	db	67	;'C'
  2265  007597  41                 	db	65	;'A'
  2266  007598  4E                 	db	78	;'N'
  2267  007599  20                 	db	32
  2268  00759A  69                 	db	105	;'i'
  2269  00759B  6E                 	db	110	;'n'
  2270  00759C  74                 	db	116	;'t'
  2271  00759D  65                 	db	101	;'e'
  2272  00759E  72                 	db	114	;'r'
  2273  00759F  66                 	db	102	;'f'
  2274  0075A0  61                 	db	97	;'a'
  2275  0075A1  63                 	db	99	;'c'
  2276  0075A2  65                 	db	101	;'e'
  2277  0075A3  20                 	db	32
  2278  0075A4  69                 	db	105	;'i'
  2279  0075A5  6E                 	db	110	;'n'
  2280  0075A6  20                 	db	32
  2281  0075A7  6E                 	db	110	;'n'
  2282  0075A8  6F                 	db	111	;'o'
  2283  0075A9  72                 	db	114	;'r'
  2284  0075AA  6D                 	db	109	;'m'
  2285  0075AB  61                 	db	97	;'a'
  2286  0075AC  6C                 	db	108	;'l'
  2287  0075AD  20                 	db	32
  2288  0075AE  6D                 	db	109	;'m'
  2289  0075AF  6F                 	db	111	;'o'
  2290  0075B0  64                 	db	100	;'d'
  2291  0075B1  65                 	db	101	;'e'
  2292  0075B2  2E                 	db	46
  2293  0075B3  0D                 	db	13
  2294  0075B4  0A                 	db	10
  2295  0075B5  00                 	db	0
  2296  0075B6                     STR_135:
  2297  0075B6  2B                 	db	43
  2298  0075B7  4F                 	db	79	;'O'
  2299  0075B8  4B                 	db	75	;'K'
  2300  0075B9  20                 	db	32
  2301  0075BA  2D                 	db	45
  2302  0075BB  20                 	db	32
  2303  0075BC  4E                 	db	78	;'N'
  2304  0075BD  75                 	db	117	;'u'
  2305  0075BE  6D                 	db	109	;'m'
  2306  0075BF  65                 	db	101	;'e'
  2307  0075C0  72                 	db	114	;'r'
  2308  0075C1  69                 	db	105	;'i'
  2309  0075C2  63                 	db	99	;'c'
  2310  0075C3  61                 	db	97	;'a'
  2311  0075C4  6C                 	db	108	;'l'
  2312  0075C5  20                 	db	32
  2313  0075C6  6F                 	db	111	;'o'
  2314  0075C7  75                 	db	117	;'u'
  2315  0075C8  74                 	db	116	;'t'
  2316  0075C9  70                 	db	112	;'p'
  2317  0075CA  75                 	db	117	;'u'
  2318  0075CB  74                 	db	116	;'t'
  2319  0075CC  20                 	db	32
  2320  0075CD  6E                 	db	110	;'n'
  2321  0075CE  6F                 	db	111	;'o'
  2322  0075CF  77                 	db	119	;'w'
  2323  0075D0  20                 	db	32
  2324  0075D1  69                 	db	105	;'i'
  2325  0075D2  6E                 	db	110	;'n'
  2326  0075D3  20                 	db	32
  2327  0075D4  68                 	db	104	;'h'
  2328  0075D5  65                 	db	101	;'e'
  2329  0075D6  78                 	db	120	;'x'
  2330  0075D7  61                 	db	97	;'a'
  2331  0075D8  64                 	db	100	;'d'
  2332  0075D9  65                 	db	101	;'e'
  2333  0075DA  63                 	db	99	;'c'
  2334  0075DB  69                 	db	105	;'i'
  2335  0075DC  6D                 	db	109	;'m'
  2336  0075DD  61                 	db	97	;'a'
  2337  0075DE  6C                 	db	108	;'l'
  2338  0075DF  0D                 	db	13
  2339  0075E0  0A                 	db	10
  2340  0075E1  00                 	db	0
  2341  0075E2                     STR_110:
  2342  0075E2  2D                 	db	45
  2343  0075E3  45                 	db	69	;'E'
  2344  0075E4  52                 	db	82	;'R'
  2345  0075E5  52                 	db	82	;'R'
  2346  0075E6  4F                 	db	79	;'O'
  2347  0075E7  52                 	db	82	;'R'
  2348  0075E8  20                 	db	32
  2349  0075E9  2D                 	db	45
  2350  0075EA  20                 	db	32
  2351  0075EB  66                 	db	102	;'f'
  2352  0075EC  69                 	db	105	;'i'
  2353  0075ED  6C                 	db	108	;'l'
  2354  0075EE  74                 	db	116	;'t'
  2355  0075EF  65                 	db	101	;'e'
  2356  0075F0  72                 	db	114	;'r'
  2357  0075F1  20                 	db	32
  2358  0075F2  66                 	db	102	;'f'
  2359  0075F3  6F                 	db	111	;'o'
  2360  0075F4  72                 	db	114	;'r'
  2361  0075F5  20                 	db	32
  2362  0075F6  70                 	db	112	;'p'
  2363  0075F7  72                 	db	114	;'r'
  2364  0075F8  69                 	db	105	;'i'
  2365  0075F9  6F                 	db	111	;'o'
  2366  0075FA  72                 	db	114	;'r'
  2367  0075FB  69                 	db	105	;'i'
  2368  0075FC  74                 	db	116	;'t'
  2369  0075FD  79                 	db	121	;'y'
  2370  0075FE  20                 	db	32
  2371  0075FF  69                 	db	105	;'i'
  2372  007600  73                 	db	115	;'s'
  2373  007601  20                 	db	32
  2374  007602  6D                 	db	109	;'m'
  2375  007603  69                 	db	105	;'i'
  2376  007604  73                 	db	115	;'s'
  2377  007605  73                 	db	115	;'s'
  2378  007606  69                 	db	105	;'i'
  2379  007607  6E                 	db	110	;'n'
  2380  007608  67                 	db	103	;'g'
  2381  007609  0D                 	db	13
  2382  00760A  0A                 	db	10
  2383  00760B  00                 	db	0
  2384  00760C                     STR_158:
  2385  00760C  2B                 	db	43
  2386  00760D  45                 	db	69	;'E'
  2387  00760E  52                 	db	82	;'R'
  2388  00760F  52                 	db	82	;'R'
  2389  007610  4F                 	db	79	;'O'
  2390  007611  52                 	db	82	;'R'
  2391  007612  20                 	db	32
  2392  007613  2D                 	db	45
  2393  007614  20                 	db	32
  2394  007615  57                 	db	87	;'W'
  2395  007616  72                 	db	114	;'r'
  2396  007617  6F                 	db	111	;'o'
  2397  007618  6E                 	db	110	;'n'
  2398  007619  67                 	db	103	;'g'
  2399  00761A  20                 	db	32
  2400  00761B  61                 	db	97	;'a'
  2401  00761C  72                 	db	114	;'r'
  2402  00761D  67                 	db	103	;'g'
  2403  00761E  75                 	db	117	;'u'
  2404  00761F  6D                 	db	109	;'m'
  2405  007620  65                 	db	101	;'e'
  2406  007621  6E                 	db	110	;'n'
  2407  007622  74                 	db	116	;'t'
  2408  007623  20                 	db	32
  2409  007624  74                 	db	116	;'t'
  2410  007625  6F                 	db	111	;'o'
  2411  007626  20                 	db	32
  2412  007627  27                 	db	39
  2413  007628  73                 	db	115	;'s'
  2414  007629  65                 	db	101	;'e'
  2415  00762A  74                 	db	116	;'t'
  2416  00762B  20                 	db	32
  2417  00762C  65                 	db	101	;'e'
  2418  00762D  63                 	db	99	;'c'
  2419  00762E  68                 	db	104	;'h'
  2420  00762F  6F                 	db	111	;'o'
  2421  007630  27                 	db	39
  2422  007631  2E                 	db	46
  2423  007632  0D                 	db	13
  2424  007633  0A                 	db	10
  2425  007634  00                 	db	0
  2426  007635                     STR_116:
  2427  007635  2D                 	db	45
  2428  007636  45                 	db	69	;'E'
  2429  007637  52                 	db	82	;'R'
  2430  007638  52                 	db	82	;'R'
  2431  007639  4F                 	db	79	;'O'
  2432  00763A  52                 	db	82	;'R'
  2433  00763B  20                 	db	32
  2434  00763C  2D                 	db	45
  2435  00763D  20                 	db	32
  2436  00763E  66                 	db	102	;'f'
  2437  00763F  69                 	db	105	;'i'
  2438  007640  6C                 	db	108	;'l'
  2439  007641  74                 	db	116	;'t'
  2440  007642  65                 	db	101	;'e'
  2441  007643  72                 	db	114	;'r'
  2442  007644  20                 	db	32
  2443  007645  66                 	db	102	;'f'
  2444  007646  6F                 	db	111	;'o'
  2445  007647  72                 	db	114	;'r'
  2446  007648  20                 	db	32
  2447  007649  6E                 	db	110	;'n'
  2448  00764A  69                 	db	105	;'i'
  2449  00764B  64                 	db	100	;'d'
  2450  00764C  65                 	db	101	;'e'
  2451  00764D  20                 	db	32
  2452  00764E  69                 	db	105	;'i'
  2453  00764F  64                 	db	100	;'d'
  2454  007650  20                 	db	32
  2455  007651  69                 	db	105	;'i'
  2456  007652  73                 	db	115	;'s'
  2457  007653  20                 	db	32
  2458  007654  6D                 	db	109	;'m'
  2459  007655  69                 	db	105	;'i'
  2460  007656  73                 	db	115	;'s'
  2461  007657  73                 	db	115	;'s'
  2462  007658  69                 	db	105	;'i'
  2463  007659  6E                 	db	110	;'n'
  2464  00765A  67                 	db	103	;'g'
  2465  00765B  0D                 	db	13
  2466  00765C  0A                 	db	10
  2467  00765D  00                 	db	0
  2468  00765E                     STR_264:
  2469  00765E  48                 	db	72	;'H'
  2470  00765F  45                 	db	69	;'E'
  2471  007660  4C                 	db	76	;'L'
  2472  007661  50                 	db	80	;'P'
  2473  007662  20                 	db	32
  2474  007663  2D                 	db	45
  2475  007664  20                 	db	32
  2476  007665  44                 	db	68	;'D'
  2477  007666  69                 	db	105	;'i'
  2478  007667  73                 	db	115	;'s'
  2479  007668  70                 	db	112	;'p'
  2480  007669  6C                 	db	108	;'l'
  2481  00766A  61                 	db	97	;'a'
  2482  00766B  79                 	db	121	;'y'
  2483  00766C  20                 	db	32
  2484  00766D  74                 	db	116	;'t'
  2485  00766E  68                 	db	104	;'h'
  2486  00766F  69                 	db	105	;'i'
  2487  007670  73                 	db	115	;'s'
  2488  007671  20                 	db	32
  2489  007672  68                 	db	104	;'h'
  2490  007673  65                 	db	101	;'e'
  2491  007674  6C                 	db	108	;'l'
  2492  007675  70                 	db	112	;'p'
  2493  007676  20                 	db	32
  2494  007677  69                 	db	105	;'i'
  2495  007678  6E                 	db	110	;'n'
  2496  007679  66                 	db	102	;'f'
  2497  00767A  6F                 	db	111	;'o'
  2498  00767B  72                 	db	114	;'r'
  2499  00767C  6D                 	db	109	;'m'
  2500  00767D  61                 	db	97	;'a'
  2501  00767E  74                 	db	116	;'t'
  2502  00767F  69                 	db	105	;'i'
  2503  007680  6F                 	db	111	;'o'
  2504  007681  6E                 	db	110	;'n'
  2505  007682  2E                 	db	46
  2506  007683  0D                 	db	13
  2507  007684  0A                 	db	10
  2508  007685  00                 	db	0
  2509  007686                     STR_125:
  2510  007686  2D                 	db	45
  2511  007687  45                 	db	69	;'E'
  2512  007688  52                 	db	82	;'R'
  2513  007689  52                 	db	82	;'R'
  2514  00768A  4F                 	db	79	;'O'
  2515  00768B  52                 	db	82	;'R'
  2516  00768C  20                 	db	32
  2517  00768D  2D                 	db	45
  2518  00768E  20                 	db	32
  2519  00768F  6D                 	db	109	;'m'
  2520  007690  61                 	db	97	;'a'
  2521  007691  73                 	db	115	;'s'
  2522  007692  6B                 	db	107	;'k'
  2523  007693  20                 	db	32
  2524  007694  66                 	db	102	;'f'
  2525  007695  6F                 	db	111	;'o'
  2526  007696  72                 	db	114	;'r'
  2527  007697  20                 	db	32
  2528  007698  70                 	db	112	;'p'
  2529  007699  72                 	db	114	;'r'
  2530  00769A  69                 	db	105	;'i'
  2531  00769B  6F                 	db	111	;'o'
  2532  00769C  72                 	db	114	;'r'
  2533  00769D  69                 	db	105	;'i'
  2534  00769E  74                 	db	116	;'t'
  2535  00769F  79                 	db	121	;'y'
  2536  0076A0  20                 	db	32
  2537  0076A1  69                 	db	105	;'i'
  2538  0076A2  73                 	db	115	;'s'
  2539  0076A3  20                 	db	32
  2540  0076A4  6D                 	db	109	;'m'
  2541  0076A5  69                 	db	105	;'i'
  2542  0076A6  73                 	db	115	;'s'
  2543  0076A7  73                 	db	115	;'s'
  2544  0076A8  69                 	db	105	;'i'
  2545  0076A9  6E                 	db	110	;'n'
  2546  0076AA  67                 	db	103	;'g'
  2547  0076AB  0D                 	db	13
  2548  0076AC  0A                 	db	10
  2549  0076AD  00                 	db	0
  2550  0076AE                     STR_137:
  2551  0076AE  2B                 	db	43
  2552  0076AF  4F                 	db	79	;'O'
  2553  0076B0  4B                 	db	75	;'K'
  2554  0076B1  20                 	db	32
  2555  0076B2  2D                 	db	45
  2556  0076B3  20                 	db	32
  2557  0076B4  4E                 	db	78	;'N'
  2558  0076B5  75                 	db	117	;'u'
  2559  0076B6  6D                 	db	109	;'m'
  2560  0076B7  65                 	db	101	;'e'
  2561  0076B8  72                 	db	114	;'r'
  2562  0076B9  69                 	db	105	;'i'
  2563  0076BA  63                 	db	99	;'c'
  2564  0076BB  61                 	db	97	;'a'
  2565  0076BC  6C                 	db	108	;'l'
  2566  0076BD  20                 	db	32
  2567  0076BE  6F                 	db	111	;'o'
  2568  0076BF  75                 	db	117	;'u'
  2569  0076C0  74                 	db	116	;'t'
  2570  0076C1  70                 	db	112	;'p'
  2571  0076C2  75                 	db	117	;'u'
  2572  0076C3  74                 	db	116	;'t'
  2573  0076C4  20                 	db	32
  2574  0076C5  6E                 	db	110	;'n'
  2575  0076C6  6F                 	db	111	;'o'
  2576  0076C7  77                 	db	119	;'w'
  2577  0076C8  20                 	db	32
  2578  0076C9  69                 	db	105	;'i'
  2579  0076CA  6E                 	db	110	;'n'
  2580  0076CB  20                 	db	32
  2581  0076CC  64                 	db	100	;'d'
  2582  0076CD  65                 	db	101	;'e'
  2583  0076CE  63                 	db	99	;'c'
  2584  0076CF  69                 	db	105	;'i'
  2585  0076D0  6D                 	db	109	;'m'
  2586  0076D1  61                 	db	97	;'a'
  2587  0076D2  6C                 	db	108	;'l'
  2588  0076D3  0D                 	db	13
  2589  0076D4  0A                 	db	10
  2590  0076D5  00                 	db	0
  2591  0076D6                     STR_108:
  2592  0076D6  2D                 	db	45
  2593  0076D7  45                 	db	69	;'E'
  2594  0076D8  52                 	db	82	;'R'
  2595  0076D9  52                 	db	82	;'R'
  2596  0076DA  4F                 	db	79	;'O'
  2597  0076DB  52                 	db	82	;'R'
  2598  0076DC  20                 	db	32
  2599  0076DD  2D                 	db	45
  2600  0076DE  20                 	db	32
  2601  0076DF  4E                 	db	78	;'N'
  2602  0076E0  6F                 	db	111	;'o'
  2603  0076E1  20                 	db	32
  2604  0076E2  66                 	db	102	;'f'
  2605  0076E3  69                 	db	105	;'i'
  2606  0076E4  6C                 	db	108	;'l'
  2607  0076E5  74                 	db	116	;'t'
  2608  0076E6  65                 	db	101	;'e'
  2609  0076E7  72                 	db	114	;'r'
  2610  0076E8  20                 	db	32
  2611  0076E9  6E                 	db	110	;'n'
  2612  0076EA  75                 	db	117	;'u'
  2613  0076EB  6D                 	db	109	;'m'
  2614  0076EC  62                 	db	98	;'b'
  2615  0076ED  65                 	db	101	;'e'
  2616  0076EE  72                 	db	114	;'r'
  2617  0076EF  20                 	db	32
  2618  0076F0  73                 	db	115	;'s'
  2619  0076F1  70                 	db	112	;'p'
  2620  0076F2  65                 	db	101	;'e'
  2621  0076F3  63                 	db	99	;'c'
  2622  0076F4  69                 	db	105	;'i'
  2623  0076F5  66                 	db	102	;'f'
  2624  0076F6  69                 	db	105	;'i'
  2625  0076F7  65                 	db	101	;'e'
  2626  0076F8  64                 	db	100	;'d'
  2627  0076F9  2E                 	db	46
  2628  0076FA  0D                 	db	13
  2629  0076FB  0A                 	db	10
  2630  0076FC  00                 	db	0
  2631  0076FD                     STR_263:
  2632  0076FD  45                 	db	69	;'E'
  2633  0076FE  52                 	db	82	;'R'
  2634  0076FF  52                 	db	82	;'R'
  2635  007700  20                 	db	32
  2636  007701  2D                 	db	45
  2637  007702  20                 	db	32
  2638  007703  44                 	db	68	;'D'
  2639  007704  69                 	db	105	;'i'
  2640  007705  73                 	db	115	;'s'
  2641  007706  70                 	db	112	;'p'
  2642  007707  6C                 	db	108	;'l'
  2643  007708  61                 	db	97	;'a'
  2644  007709  79                 	db	121	;'y'
  2645  00770A  20                 	db	32
  2646  00770B  43                 	db	67	;'C'
  2647  00770C  41                 	db	65	;'A'
  2648  00770D  4E                 	db	78	;'N'
  2649  00770E  20                 	db	32
  2650  00770F  65                 	db	101	;'e'
  2651  007710  72                 	db	114	;'r'
  2652  007711  72                 	db	114	;'r'
  2653  007712  6F                 	db	111	;'o'
  2654  007713  72                 	db	114	;'r'
  2655  007714  20                 	db	32
  2656  007715  69                 	db	105	;'i'
  2657  007716  6E                 	db	110	;'n'
  2658  007717  66                 	db	102	;'f'
  2659  007718  6F                 	db	111	;'o'
  2660  007719  72                 	db	114	;'r'
  2661  00771A  6D                 	db	109	;'m'
  2662  00771B  61                 	db	97	;'a'
  2663  00771C  74                 	db	116	;'t'
  2664  00771D  69                 	db	105	;'i'
  2665  00771E  6F                 	db	111	;'o'
  2666  00771F  6E                 	db	110	;'n'
  2667  007720  2E                 	db	46
  2668  007721  0D                 	db	13
  2669  007722  0A                 	db	10
  2670  007723  00                 	db	0
  2671  007724                     STR_249:
  2672  007724  48                 	db	72	;'H'
  2673  007725  65                 	db	101	;'e'
  2674  007726  6C                 	db	108	;'l'
  2675  007727  70                 	db	112	;'p'
  2676  007728  20                 	db	32
  2677  007729  66                 	db	102	;'f'
  2678  00772A  6F                 	db	111	;'o'
  2679  00772B  72                 	db	114	;'r'
  2680  00772C  20                 	db	32
  2681  00772D  74                 	db	116	;'t'
  2682  00772E  68                 	db	104	;'h'
  2683  00772F  65                 	db	101	;'e'
  2684  007730  20                 	db	32
  2685  007731  46                 	db	70	;'F'
  2686  007732  72                 	db	114	;'r'
  2687  007733  61                 	db	97	;'a'
  2688  007734  6E                 	db	110	;'n'
  2689  007735  6B                 	db	107	;'k'
  2690  007736  66                 	db	102	;'f'
  2691  007737  75                 	db	117	;'u'
  2692  007738  72                 	db	114	;'r'
  2693  007739  74                 	db	116	;'t'
  2694  00773A  20                 	db	32
  2695  00773B  52                 	db	82	;'R'
  2696  00773C  53                 	db	83	;'S'
  2697  00773D  2D                 	db	45
  2698  00773E  32                 	db	50	;'2'
  2699  00773F  33                 	db	51	;'3'
  2700  007740  32                 	db	50	;'2'
  2701  007741  20                 	db	32
  2702  007742  6D                 	db	109	;'m'
  2703  007743  6F                 	db	111	;'o'
  2704  007744  64                 	db	100	;'d'
  2705  007745  75                 	db	117	;'u'
  2706  007746  6C                 	db	108	;'l'
  2707  007747  65                 	db	101	;'e'
  2708  007748  0D                 	db	13
  2709  007749  0A                 	db	10
  2710  00774A  00                 	db	0
  2711  00774B                     STR_131:
  2712  00774B  2D                 	db	45
  2713  00774C  45                 	db	69	;'E'
  2714  00774D  52                 	db	82	;'R'
  2715  00774E  52                 	db	82	;'R'
  2716  00774F  4F                 	db	79	;'O'
  2717  007750  52                 	db	82	;'R'
  2718  007751  20                 	db	32
  2719  007752  2D                 	db	45
  2720  007753  20                 	db	32
  2721  007754  6D                 	db	109	;'m'
  2722  007755  61                 	db	97	;'a'
  2723  007756  73                 	db	115	;'s'
  2724  007757  6B                 	db	107	;'k'
  2725  007758  20                 	db	32
  2726  007759  66                 	db	102	;'f'
  2727  00775A  6F                 	db	111	;'o'
  2728  00775B  72                 	db	114	;'r'
  2729  00775C  20                 	db	32
  2730  00775D  6E                 	db	110	;'n'
  2731  00775E  69                 	db	105	;'i'
  2732  00775F  64                 	db	100	;'d'
  2733  007760  65                 	db	101	;'e'
  2734  007761  20                 	db	32
  2735  007762  69                 	db	105	;'i'
  2736  007763  64                 	db	100	;'d'
  2737  007764  20                 	db	32
  2738  007765  69                 	db	105	;'i'
  2739  007766  73                 	db	115	;'s'
  2740  007767  20                 	db	32
  2741  007768  6D                 	db	109	;'m'
  2742  007769  69                 	db	105	;'i'
  2743  00776A  73                 	db	115	;'s'
  2744  00776B  73                 	db	115	;'s'
  2745  00776C  69                 	db	105	;'i'
  2746  00776D  6E                 	db	110	;'n'
  2747  00776E  67                 	db	103	;'g'
  2748  00776F  0D                 	db	13
  2749  007770  0A                 	db	10
  2750  007771  00                 	db	0
  2751  007772                     STR_112:
  2752  007772  2D                 	db	45
  2753  007773  45                 	db	69	;'E'
  2754  007774  52                 	db	82	;'R'
  2755  007775  52                 	db	82	;'R'
  2756  007776  4F                 	db	79	;'O'
  2757  007777  52                 	db	82	;'R'
  2758  007778  20                 	db	32
  2759  007779  2D                 	db	45
  2760  00777A  20                 	db	32
  2761  00777B  66                 	db	102	;'f'
  2762  00777C  69                 	db	105	;'i'
  2763  00777D  6C                 	db	108	;'l'
  2764  00777E  74                 	db	116	;'t'
  2765  00777F  65                 	db	101	;'e'
  2766  007780  72                 	db	114	;'r'
  2767  007781  20                 	db	32
  2768  007782  66                 	db	102	;'f'
  2769  007783  6F                 	db	111	;'o'
  2770  007784  72                 	db	114	;'r'
  2771  007785  20                 	db	32
  2772  007786  63                 	db	99	;'c'
  2773  007787  6C                 	db	108	;'l'
  2774  007788  61                 	db	97	;'a'
  2775  007789  73                 	db	115	;'s'
  2776  00778A  73                 	db	115	;'s'
  2777  00778B  20                 	db	32
  2778  00778C  69                 	db	105	;'i'
  2779  00778D  73                 	db	115	;'s'
  2780  00778E  20                 	db	32
  2781  00778F  6D                 	db	109	;'m'
  2782  007790  69                 	db	105	;'i'
  2783  007791  73                 	db	115	;'s'
  2784  007792  73                 	db	115	;'s'
  2785  007793  69                 	db	105	;'i'
  2786  007794  6E                 	db	110	;'n'
  2787  007795  67                 	db	103	;'g'
  2788  007796  0D                 	db	13
  2789  007797  0A                 	db	10
  2790  007798  00                 	db	0
  2791  007799                     STR_280:
  2792  007799  20                 	db	32
  2793  00779A  20                 	db	32
  2794  00779B  20                 	db	32
  2795  00779C  20                 	db	32
  2796  00779D  20                 	db	32
  2797  00779E  20                 	db	32
  2798  00779F  20                 	db	32
  2799  0077A0  20                 	db	32
  2800  0077A1  20                 	db	32
  2801  0077A2  20                 	db	32
  2802  0077A3  20                 	db	32
  2803  0077A4  4D                 	db	77	;'M'
  2804  0077A5  6F                 	db	111	;'o'
  2805  0077A6  64                 	db	100	;'d'
  2806  0077A7  65                 	db	101	;'e'
  2807  0077A8  73                 	db	115	;'s'
  2808  0077A9  3A                 	db	58	;':'
  2809  0077AA  20                 	db	32
  2810  0077AB  76                 	db	118	;'v'
  2811  0077AC  65                 	db	101	;'e'
  2812  0077AD  72                 	db	114	;'r'
  2813  0077AE  62                 	db	98	;'b'
  2814  0077AF  6F                 	db	111	;'o'
  2815  0077B0  73                 	db	115	;'s'
  2816  0077B1  65                 	db	101	;'e'
  2817  0077B2  7C                 	db	124
  2818  0077B3  76                 	db	118	;'v'
  2819  0077B4  73                 	db	115	;'s'
  2820  0077B5  63                 	db	99	;'c'
  2821  0077B6  70                 	db	112	;'p'
  2822  0077B7  7C                 	db	124
  2823  0077B8  73                 	db	115	;'s'
  2824  0077B9  6C                 	db	108	;'l'
  2825  0077BA  63                 	db	99	;'c'
  2826  0077BB  61                 	db	97	;'a'
  2827  0077BC  6E                 	db	110	;'n'
  2828  0077BD  0D                 	db	13
  2829  0077BE  0A                 	db	10
  2830  0077BF  00                 	db	0
  2831  0077C0                     STR_114:
  2832  0077C0  2D                 	db	45
  2833  0077C1  45                 	db	69	;'E'
  2834  0077C2  52                 	db	82	;'R'
  2835  0077C3  52                 	db	82	;'R'
  2836  0077C4  4F                 	db	79	;'O'
  2837  0077C5  52                 	db	82	;'R'
  2838  0077C6  20                 	db	32
  2839  0077C7  2D                 	db	45
  2840  0077C8  20                 	db	32
  2841  0077C9  66                 	db	102	;'f'
  2842  0077CA  69                 	db	105	;'i'
  2843  0077CB  6C                 	db	108	;'l'
  2844  0077CC  74                 	db	116	;'t'
  2845  0077CD  65                 	db	101	;'e'
  2846  0077CE  72                 	db	114	;'r'
  2847  0077CF  20                 	db	32
  2848  0077D0  66                 	db	102	;'f'
  2849  0077D1  6F                 	db	111	;'o'
  2850  0077D2  72                 	db	114	;'r'
  2851  0077D3  20                 	db	32
  2852  0077D4  74                 	db	116	;'t'
  2853  0077D5  79                 	db	121	;'y'
  2854  0077D6  70                 	db	112	;'p'
  2855  0077D7  65                 	db	101	;'e'
  2856  0077D8  20                 	db	32
  2857  0077D9  69                 	db	105	;'i'
  2858  0077DA  73                 	db	115	;'s'
  2859  0077DB  20                 	db	32
  2860  0077DC  6D                 	db	109	;'m'
  2861  0077DD  69                 	db	105	;'i'
  2862  0077DE  73                 	db	115	;'s'
  2863  0077DF  73                 	db	115	;'s'
  2864  0077E0  69                 	db	105	;'i'
  2865  0077E1  6E                 	db	110	;'n'
  2866  0077E2  67                 	db	103	;'g'
  2867  0077E3  0D                 	db	13
  2868  0077E4  0A                 	db	10
  2869  0077E5  00                 	db	0
  2870  0077E6                     STR_89:
  2871  0077E6  2B                 	db	43
  2872  0077E7  4F                 	db	79	;'O'
  2873  0077E8  4B                 	db	75	;'K'
  2874  0077E9  20                 	db	32
  2875  0077EA  2D                 	db	45
  2876  0077EB  20                 	db	32
  2877  0077EC  56                 	db	86	;'V'
  2878  0077ED  61                 	db	97	;'a'
  2879  0077EE  6C                 	db	108	;'l'
  2880  0077EF  75                 	db	117	;'u'
  2881  0077F0  65                 	db	101	;'e'
  2882  0077F1  20                 	db	32
  2883  0077F2  77                 	db	119	;'w'
  2884  0077F3  72                 	db	114	;'r'
  2885  0077F4  69                 	db	105	;'i'
  2886  0077F5  74                 	db	116	;'t'
  2887  0077F6  74                 	db	116	;'t'
  2888  0077F7  65                 	db	101	;'e'
  2889  0077F8  6E                 	db	110	;'n'
  2890  0077F9  20                 	db	32
  2891  0077FA  73                 	db	115	;'s'
  2892  0077FB  75                 	db	117	;'u'
  2893  0077FC  63                 	db	99	;'c'
  2894  0077FD  63                 	db	99	;'c'
  2895  0077FE  65                 	db	101	;'e'
  2896  0077FF  73                 	db	115	;'s'
  2897  007800  73                 	db	115	;'s'
  2898  007801  66                 	db	102	;'f'
  2899  007802  75                 	db	117	;'u'
  2900  007803  6C                 	db	108	;'l'
  2901  007804  6C                 	db	108	;'l'
  2902  007805  79                 	db	121	;'y'
  2903  007806  20                 	db	32
  2904  007807  66                 	db	102	;'f'
  2905  007808  6F                 	db	111	;'o'
  2906  007809  72                 	db	114	;'r'
  2907  00780A  20                 	db	32
  2908  00780B  00                 	db	0
  2909  00780C                     STR_123:
  2910  00780C  2D                 	db	45
  2911  00780D  45                 	db	69	;'E'
  2912  00780E  52                 	db	82	;'R'
  2913  00780F  52                 	db	82	;'R'
  2914  007810  4F                 	db	79	;'O'
  2915  007811  52                 	db	82	;'R'
  2916  007812  20                 	db	32
  2917  007813  2D                 	db	45
  2918  007814  20                 	db	32
  2919  007815  4E                 	db	78	;'N'
  2920  007816  6F                 	db	111	;'o'
  2921  007817  20                 	db	32
  2922  007818  6D                 	db	109	;'m'
  2923  007819  61                 	db	97	;'a'
  2924  00781A  73                 	db	115	;'s'
  2925  00781B  6B                 	db	107	;'k'
  2926  00781C  20                 	db	32
  2927  00781D  6E                 	db	110	;'n'
  2928  00781E  75                 	db	117	;'u'
  2929  00781F  6D                 	db	109	;'m'
  2930  007820  62                 	db	98	;'b'
  2931  007821  65                 	db	101	;'e'
  2932  007822  72                 	db	114	;'r'
  2933  007823  20                 	db	32
  2934  007824  73                 	db	115	;'s'
  2935  007825  70                 	db	112	;'p'
  2936  007826  65                 	db	101	;'e'
  2937  007827  63                 	db	99	;'c'
  2938  007828  69                 	db	105	;'i'
  2939  007829  66                 	db	102	;'f'
  2940  00782A  69                 	db	105	;'i'
  2941  00782B  65                 	db	101	;'e'
  2942  00782C  64                 	db	100	;'d'
  2943  00782D  2E                 	db	46
  2944  00782E  0D                 	db	13
  2945  00782F  0A                 	db	10
  2946  007830  00                 	db	0
  2947  007831                     STR_1:
  2948  007831  0D                 	db	13
  2949  007832  0A                 	db	10
  2950  007833  46                 	db	70	;'F'
  2951  007834  72                 	db	114	;'r'
  2952  007835  61                 	db	97	;'a'
  2953  007836  6E                 	db	110	;'n'
  2954  007837  6B                 	db	107	;'k'
  2955  007838  66                 	db	102	;'f'
  2956  007839  75                 	db	117	;'u'
  2957  00783A  72                 	db	114	;'r'
  2958  00783B  74                 	db	116	;'t'
  2959  00783C  20                 	db	32
  2960  00783D  52                 	db	82	;'R'
  2961  00783E  53                 	db	83	;'S'
  2962  00783F  2D                 	db	45
  2963  007840  32                 	db	50	;'2'
  2964  007841  33                 	db	51	;'3'
  2965  007842  32                 	db	50	;'2'
  2966  007843  20                 	db	32
  2967  007844  43                 	db	67	;'C'
  2968  007845  41                 	db	65	;'A'
  2969  007846  4E                 	db	78	;'N'
  2970  007847  34                 	db	52	;'4'
  2971  007848  56                 	db	86	;'V'
  2972  007849  53                 	db	83	;'S'
  2973  00784A  43                 	db	67	;'C'
  2974  00784B  50                 	db	80	;'P'
  2975  00784C  20                 	db	32
  2976  00784D  6D                 	db	109	;'m'
  2977  00784E  6F                 	db	111	;'o'
  2978  00784F  64                 	db	100	;'d'
  2979  007850  75                 	db	117	;'u'
  2980  007851  6C                 	db	108	;'l'
  2981  007852  65                 	db	101	;'e'
  2982  007853  0D                 	db	13
  2983  007854  0A                 	db	10
  2984  007855  00                 	db	0
  2985  007856                     STR_127:
  2986  007856  2D                 	db	45
  2987  007857  45                 	db	69	;'E'
  2988  007858  52                 	db	82	;'R'
  2989  007859  52                 	db	82	;'R'
  2990  00785A  4F                 	db	79	;'O'
  2991  00785B  52                 	db	82	;'R'
  2992  00785C  20                 	db	32
  2993  00785D  2D                 	db	45
  2994  00785E  20                 	db	32
  2995  00785F  6D                 	db	109	;'m'
  2996  007860  61                 	db	97	;'a'
  2997  007861  73                 	db	115	;'s'
  2998  007862  6B                 	db	107	;'k'
  2999  007863  20                 	db	32
  3000  007864  66                 	db	102	;'f'
  3001  007865  6F                 	db	111	;'o'
  3002  007866  72                 	db	114	;'r'
  3003  007867  20                 	db	32
  3004  007868  63                 	db	99	;'c'
  3005  007869  6C                 	db	108	;'l'
  3006  00786A  61                 	db	97	;'a'
  3007  00786B  73                 	db	115	;'s'
  3008  00786C  73                 	db	115	;'s'
  3009  00786D  20                 	db	32
  3010  00786E  69                 	db	105	;'i'
  3011  00786F  73                 	db	115	;'s'
  3012  007870  20                 	db	32
  3013  007871  6D                 	db	109	;'m'
  3014  007872  69                 	db	105	;'i'
  3015  007873  73                 	db	115	;'s'
  3016  007874  73                 	db	115	;'s'
  3017  007875  69                 	db	105	;'i'
  3018  007876  6E                 	db	110	;'n'
  3019  007877  67                 	db	103	;'g'
  3020  007878  0D                 	db	13
  3021  007879  0A                 	db	10
  3022  00787A  00                 	db	0
  3023  00787B                     STR_129:
  3024  00787B  2D                 	db	45
  3025  00787C  45                 	db	69	;'E'
  3026  00787D  52                 	db	82	;'R'
  3027  00787E  52                 	db	82	;'R'
  3028  00787F  4F                 	db	79	;'O'
  3029  007880  52                 	db	82	;'R'
  3030  007881  20                 	db	32
  3031  007882  2D                 	db	45
  3032  007883  20                 	db	32
  3033  007884  6D                 	db	109	;'m'
  3034  007885  61                 	db	97	;'a'
  3035  007886  73                 	db	115	;'s'
  3036  007887  6B                 	db	107	;'k'
  3037  007888  20                 	db	32
  3038  007889  66                 	db	102	;'f'
  3039  00788A  6F                 	db	111	;'o'
  3040  00788B  72                 	db	114	;'r'
  3041  00788C  20                 	db	32
  3042  00788D  74                 	db	116	;'t'
  3043  00788E  79                 	db	121	;'y'
  3044  00788F  70                 	db	112	;'p'
  3045  007890  65                 	db	101	;'e'
  3046  007891  20                 	db	32
  3047  007892  69                 	db	105	;'i'
  3048  007893  73                 	db	115	;'s'
  3049  007894  20                 	db	32
  3050  007895  6D                 	db	109	;'m'
  3051  007896  69                 	db	105	;'i'
  3052  007897  73                 	db	115	;'s'
  3053  007898  73                 	db	115	;'s'
  3054  007899  69                 	db	105	;'i'
  3055  00789A  6E                 	db	110	;'n'
  3056  00789B  67                 	db	103	;'g'
  3057  00789C  0D                 	db	13
  3058  00789D  0A                 	db	10
  3059  00789E  00                 	db	0
  3060  00789F                     STR_93:
  3061  00789F  2D                 	db	45
  3062  0078A0  45                 	db	69	;'E'
  3063  0078A1  52                 	db	82	;'R'
  3064  0078A2  52                 	db	82	;'R'
  3065  0078A3  4F                 	db	79	;'O'
  3066  0078A4  52                 	db	82	;'R'
  3067  0078A5  20                 	db	32
  3068  0078A6  2D                 	db	45
  3069  0078A7  20                 	db	32
  3070  0078A8  46                 	db	70	;'F'
  3071  0078A9  61                 	db	97	;'a'
  3072  0078AA  69                 	db	105	;'i'
  3073  0078AB  6C                 	db	108	;'l'
  3074  0078AC  65                 	db	101	;'e'
  3075  0078AD  64                 	db	100	;'d'
  3076  0078AE  20                 	db	32
  3077  0078AF  74                 	db	116	;'t'
  3078  0078B0  6F                 	db	111	;'o'
  3079  0078B1  20                 	db	32
  3080  0078B2  77                 	db	119	;'w'
  3081  0078B3  72                 	db	114	;'r'
  3082  0078B4  69                 	db	105	;'i'
  3083  0078B5  74                 	db	116	;'t'
  3084  0078B6  65                 	db	101	;'e'
  3085  0078B7  20                 	db	32
  3086  0078B8  76                 	db	118	;'v'
  3087  0078B9  61                 	db	97	;'a'
  3088  0078BA  6C                 	db	108	;'l'
  3089  0078BB  75                 	db	117	;'u'
  3090  0078BC  65                 	db	101	;'e'
  3091  0078BD  20                 	db	32
  3092  0078BE  66                 	db	102	;'f'
  3093  0078BF  6F                 	db	111	;'o'
  3094  0078C0  72                 	db	114	;'r'
  3095  0078C1  20                 	db	32
  3096  0078C2  00                 	db	0
  3097  0078C3                     STR_3:
  3098  0078C3  68                 	db	104	;'h'
  3099  0078C4  74                 	db	116	;'t'
  3100  0078C5  74                 	db	116	;'t'
  3101  0078C6  70                 	db	112	;'p'
  3102  0078C7  3A                 	db	58	;':'
  3103  0078C8  2F                 	db	47
  3104  0078C9  2F                 	db	47
  3105  0078CA  77                 	db	119	;'w'
  3106  0078CB  77                 	db	119	;'w'
  3107  0078CC  77                 	db	119	;'w'
  3108  0078CD  2E                 	db	46
  3109  0078CE  70                 	db	112	;'p'
  3110  0078CF  61                 	db	97	;'a'
  3111  0078D0  72                 	db	114	;'r'
  3112  0078D1  61                 	db	97	;'a'
  3113  0078D2  64                 	db	100	;'d'
  3114  0078D3  69                 	db	105	;'i'
  3115  0078D4  73                 	db	115	;'s'
  3116  0078D5  65                 	db	101	;'e'
  3117  0078D6  6F                 	db	111	;'o'
  3118  0078D7  66                 	db	102	;'f'
  3119  0078D8  74                 	db	116	;'t'
  3120  0078D9  68                 	db	104	;'h'
  3121  0078DA  65                 	db	101	;'e'
  3122  0078DB  66                 	db	102	;'f'
  3123  0078DC  72                 	db	114	;'r'
  3124  0078DD  6F                 	db	111	;'o'
  3125  0078DE  67                 	db	103	;'g'
  3126  0078DF  2E                 	db	46
  3127  0078E0  63                 	db	99	;'c'
  3128  0078E1  6F                 	db	111	;'o'
  3129  0078E2  6D                 	db	109	;'m'
  3130  0078E3  0D                 	db	13
  3131  0078E4  0A                 	db	10
  3132  0078E5  00                 	db	0
  3133  0078E6                     STR_166:
  3134  0078E6  2B                 	db	43
  3135  0078E7  4F                 	db	79	;'O'
  3136  0078E8  4B                 	db	75	;'K'
  3137  0078E9  20                 	db	32
  3138  0078EA  2D                 	db	45
  3139  0078EB  20                 	db	32
  3140  0078EC  4E                 	db	78	;'N'
  3141  0078ED  65                 	db	101	;'e'
  3142  0078EE  77                 	db	119	;'w'
  3143  0078EF  20                 	db	32
  3144  0078F0  62                 	db	98	;'b'
  3145  0078F1  61                 	db	97	;'a'
  3146  0078F2  75                 	db	117	;'u'
  3147  0078F3  64                 	db	100	;'d'
  3148  0078F4  72                 	db	114	;'r'
  3149  0078F5  61                 	db	97	;'a'
  3150  0078F6  74                 	db	116	;'t'
  3151  0078F7  65                 	db	101	;'e'
  3152  0078F8  20                 	db	32
  3153  0078F9  77                 	db	119	;'w'
  3154  0078FA  69                 	db	105	;'i'
  3155  0078FB  6C                 	db	108	;'l'
  3156  0078FC  6C                 	db	108	;'l'
  3157  0078FD  20                 	db	32
  3158  0078FE  62                 	db	98	;'b'
  3159  0078FF  65                 	db	101	;'e'
  3160  007900  20                 	db	32
  3161  007901  73                 	db	115	;'s'
  3162  007902  65                 	db	101	;'e'
  3163  007903  74                 	db	116	;'t'
  3164  007904  2E                 	db	46
  3165  007905  0D                 	db	13
  3166  007906  0A                 	db	10
  3167  007907  00                 	db	0
  3168  007908                     STR_273:
  3169  007908  53                 	db	83	;'S'
  3170  007909  45                 	db	69	;'E'
  3171  00790A  54                 	db	84	;'T'
  3172  00790B  20                 	db	32
  3173  00790C  2D                 	db	45
  3174  00790D  20                 	db	32
  3175  00790E  50                 	db	80	;'P'
  3176  00790F  65                 	db	101	;'e'
  3177  007910  72                 	db	114	;'r'
  3178  007911  73                 	db	115	;'s'
  3179  007912  69                 	db	105	;'i'
  3180  007913  73                 	db	115	;'s'
  3181  007914  74                 	db	116	;'t'
  3182  007915  65                 	db	101	;'e'
  3183  007916  6E                 	db	110	;'n'
  3184  007917  74                 	db	116	;'t'
  3185  007918  20                 	db	32
  3186  007919  66                 	db	102	;'f'
  3187  00791A  75                 	db	117	;'u'
  3188  00791B  6E                 	db	110	;'n'
  3189  00791C  63                 	db	99	;'c'
  3190  00791D  74                 	db	116	;'t'
  3191  00791E  69                 	db	105	;'i'
  3192  00791F  6F                 	db	111	;'o'
  3193  007920  6E                 	db	110	;'n'
  3194  007921  61                 	db	97	;'a'
  3195  007922  6C                 	db	108	;'l'
  3196  007923  69                 	db	105	;'i'
  3197  007924  74                 	db	116	;'t'
  3198  007925  79                 	db	121	;'y'
  3199  007926  2E                 	db	46
  3200  007927  0D                 	db	13
  3201  007928  0A                 	db	10
  3202  007929  00                 	db	0
  3203  00792A                     STR_262:
  3204  00792A  53                 	db	83	;'S'
  3205  00792B  54                 	db	84	;'T'
  3206  00792C  41                 	db	65	;'A'
  3207  00792D  54                 	db	84	;'T'
  3208  00792E  20                 	db	32
  3209  00792F  2D                 	db	45
  3210  007930  20                 	db	32
  3211  007931  44                 	db	68	;'D'
  3212  007932  69                 	db	105	;'i'
  3213  007933  73                 	db	115	;'s'
  3214  007934  70                 	db	112	;'p'
  3215  007935  6C                 	db	108	;'l'
  3216  007936  61                 	db	97	;'a'
  3217  007937  79                 	db	121	;'y'
  3218  007938  20                 	db	32
  3219  007939  43                 	db	67	;'C'
  3220  00793A  41                 	db	65	;'A'
  3221  00793B  4E                 	db	78	;'N'
  3222  00793C  20                 	db	32
  3223  00793D  73                 	db	115	;'s'
  3224  00793E  74                 	db	116	;'t'
  3225  00793F  61                 	db	97	;'a'
  3226  007940  74                 	db	116	;'t'
  3227  007941  69                 	db	105	;'i'
  3228  007942  73                 	db	115	;'s'
  3229  007943  74                 	db	116	;'t'
  3230  007944  69                 	db	105	;'i'
  3231  007945  63                 	db	99	;'c'
  3232  007946  73                 	db	115	;'s'
  3233  007947  2E                 	db	46
  3234  007948  0D                 	db	13
  3235  007949  0A                 	db	10
  3236  00794A  00                 	db	0
  3237  00794B                     STR_37:
  3238  00794B  2D                 	db	45
  3239  00794C  45                 	db	69	;'E'
  3240  00794D  52                 	db	82	;'R'
  3241  00794E  52                 	db	82	;'R'
  3242  00794F  4F                 	db	79	;'O'
  3243  007950  52                 	db	82	;'R'
  3244  007951  20                 	db	32
  3245  007952  2D                 	db	45
  3246  007953  20                 	db	32
  3247  007954  46                 	db	70	;'F'
  3248  007955  61                 	db	97	;'a'
  3249  007956  69                 	db	105	;'i'
  3250  007957  6C                 	db	108	;'l'
  3251  007958  65                 	db	101	;'e'
  3252  007959  64                 	db	100	;'d'
  3253  00795A  20                 	db	32
  3254  00795B  74                 	db	116	;'t'
  3255  00795C  6F                 	db	111	;'o'
  3256  00795D  20                 	db	32
  3257  00795E  73                 	db	115	;'s'
  3258  00795F  65                 	db	101	;'e'
  3259  007960  6E                 	db	110	;'n'
  3260  007961  64                 	db	100	;'d'
  3261  007962  20                 	db	32
  3262  007963  65                 	db	101	;'e'
  3263  007964  76                 	db	118	;'v'
  3264  007965  65                 	db	101	;'e'
  3265  007966  6E                 	db	110	;'n'
  3266  007967  74                 	db	116	;'t'
  3267  007968  2E                 	db	46
  3268  007969  0D                 	db	13
  3269  00796A  0A                 	db	10
  3270  00796B  00                 	db	0
  3271  00796C                     STR_170:
  3272  00796C  2D                 	db	45
  3273  00796D  45                 	db	69	;'E'
  3274  00796E  52                 	db	82	;'R'
  3275  00796F  52                 	db	82	;'R'
  3276  007970  4F                 	db	79	;'O'
  3277  007971  52                 	db	82	;'R'
  3278  007972  20                 	db	32
  3279  007973  2D                 	db	45
  3280  007974  20                 	db	32
  3281  007975  55                 	db	85	;'U'
  3282  007976  6E                 	db	110	;'n'
  3283  007977  6B                 	db	107	;'k'
  3284  007978  6E                 	db	110	;'n'
  3285  007979  6F                 	db	111	;'o'
  3286  00797A  77                 	db	119	;'w'
  3287  00797B  6E                 	db	110	;'n'
  3288  00797C  20                 	db	32
  3289  00797D  27                 	db	39
  3290  00797E  53                 	db	83	;'S'
  3291  00797F  45                 	db	69	;'E'
  3292  007980  54                 	db	84	;'T'
  3293  007981  27                 	db	39
  3294  007982  20                 	db	32
  3295  007983  63                 	db	99	;'c'
  3296  007984  6F                 	db	111	;'o'
  3297  007985  6D                 	db	109	;'m'
  3298  007986  6D                 	db	109	;'m'
  3299  007987  61                 	db	97	;'a'
  3300  007988  6E                 	db	110	;'n'
  3301  007989  64                 	db	100	;'d'
  3302  00798A  0D                 	db	13
  3303  00798B  0A                 	db	10
  3304  00798C  00                 	db	0
  3305  00798D                     STR_54:
  3306  00798D  2D                 	db	45
  3307  00798E  45                 	db	69	;'E'
  3308  00798F  52                 	db	82	;'R'
  3309  007990  52                 	db	82	;'R'
  3310  007991  4F                 	db	79	;'O'
  3311  007992  52                 	db	82	;'R'
  3312  007993  20                 	db	32
  3313  007994  2D                 	db	45
  3314  007995  20                 	db	32
  3315  007996  4E                 	db	78	;'N'
  3316  007997  65                 	db	101	;'e'
  3317  007998  65                 	db	101	;'e'
  3318  007999  64                 	db	100	;'d'
  3319  00799A  73                 	db	115	;'s'
  3320  00799B  20                 	db	32
  3321  00799C  5B                 	db	91	;'['
  3322  00799D  70                 	db	112	;'p'
  3323  00799E  61                 	db	97	;'a'
  3324  00799F  67                 	db	103	;'g'
  3325  0079A0  65                 	db	101	;'e'
  3326  0079A1  3A                 	db	58	;':'
  3327  0079A2  5D                 	db	93	;']'
  3328  0079A3  72                 	db	114	;'r'
  3329  0079A4  65                 	db	101	;'e'
  3330  0079A5  67                 	db	103	;'g'
  3331  0079A6  69                 	db	105	;'i'
  3332  0079A7  73                 	db	115	;'s'
  3333  0079A8  74                 	db	116	;'t'
  3334  0079A9  65                 	db	101	;'e'
  3335  0079AA  72                 	db	114	;'r'
  3336  0079AB  0D                 	db	13
  3337  0079AC  0A                 	db	10
  3338  0079AD  00                 	db	0
  3339  0079AE                     STR_150:
  3340  0079AE  2B                 	db	43
  3341  0079AF  4F                 	db	79	;'O'
  3342  0079B0  4B                 	db	75	;'K'
  3343  0079B1  20                 	db	32
  3344  0079B2  2D                 	db	45
  3345  0079B3  20                 	db	32
  3346  0079B4  4D                 	db	77	;'M'
  3347  0079B5  6F                 	db	111	;'o'
  3348  0079B6  64                 	db	100	;'d'
  3349  0079B7  65                 	db	101	;'e'
  3350  0079B8  20                 	db	32
  3351  0079B9  69                 	db	105	;'i'
  3352  0079BA  73                 	db	115	;'s'
  3353  0079BB  20                 	db	32
  3354  0079BC  6E                 	db	110	;'n'
  3355  0079BD  6F                 	db	111	;'o'
  3356  0079BE  77                 	db	119	;'w'
  3357  0079BF  20                 	db	32
  3358  0079C0  56                 	db	86	;'V'
  3359  0079C1  53                 	db	83	;'S'
  3360  0079C2  43                 	db	67	;'C'
  3361  0079C3  50                 	db	80	;'P'
  3362  0079C4  20                 	db	32
  3363  0079C5  44                 	db	68	;'D'
  3364  0079C6  72                 	db	114	;'r'
  3365  0079C7  69                 	db	105	;'i'
  3366  0079C8  76                 	db	118	;'v'
  3367  0079C9  65                 	db	101	;'e'
  3368  0079CA  72                 	db	114	;'r'
  3369  0079CB  0D                 	db	13
  3370  0079CC  0A                 	db	10
  3371  0079CD  00                 	db	0
  3372  0079CE                     STR_7:
  3373  0079CE  57                 	db	87	;'W'
  3374  0079CF  69                 	db	105	;'i'
  3375  0079D0  6C                 	db	108	;'l'
  3376  0079D1  6C                 	db	108	;'l'
  3377  0079D2  20                 	db	32
  3378  0079D3  65                 	db	101	;'e'
  3379  0079D4  6E                 	db	110	;'n'
  3380  0079D5  74                 	db	116	;'t'
  3381  0079D6  65                 	db	101	;'e'
  3382  0079D7  72                 	db	114	;'r'
  3383  0079D8  20                 	db	32
  3384  0079D9  62                 	db	98	;'b'
  3385  0079DA  6F                 	db	111	;'o'
  3386  0079DB  6F                 	db	111	;'o'
  3387  0079DC  74                 	db	116	;'t'
  3388  0079DD  6C                 	db	108	;'l'
  3389  0079DE  6F                 	db	111	;'o'
  3390  0079DF  61                 	db	97	;'a'
  3391  0079E0  64                 	db	100	;'d'
  3392  0079E1  65                 	db	101	;'e'
  3393  0079E2  72                 	db	114	;'r'
  3394  0079E3  20                 	db	32
  3395  0079E4  6E                 	db	110	;'n'
  3396  0079E5  6F                 	db	111	;'o'
  3397  0079E6  77                 	db	119	;'w'
  3398  0079E7  2E                 	db	46
  3399  0079E8  2E                 	db	46
  3400  0079E9  2E                 	db	46
  3401  0079EA  0D                 	db	13
  3402  0079EB  0A                 	db	10
  3403  0079EC  00                 	db	0
  3404  0079ED                     STR_256:
  3405  0079ED  43                 	db	67	;'C'
  3406  0079EE  4C                 	db	76	;'L'
  3407  0079EF  4F                 	db	79	;'O'
  3408  0079F0  53                 	db	83	;'S'
  3409  0079F1  45                 	db	69	;'E'
  3410  0079F2  20                 	db	32
  3411  0079F3  2D                 	db	45
  3412  0079F4  20                 	db	32
  3413  0079F5  43                 	db	67	;'C'
  3414  0079F6  6C                 	db	108	;'l'
  3415  0079F7  6F                 	db	111	;'o'
  3416  0079F8  73                 	db	115	;'s'
  3417  0079F9  65                 	db	101	;'e'
  3418  0079FA  20                 	db	32
  3419  0079FB  43                 	db	67	;'C'
  3420  0079FC  41                 	db	65	;'A'
  3421  0079FD  4E                 	db	78	;'N'
  3422  0079FE  20                 	db	32
  3423  0079FF  69                 	db	105	;'i'
  3424  007A00  6E                 	db	110	;'n'
  3425  007A01  74                 	db	116	;'t'
  3426  007A02  65                 	db	101	;'e'
  3427  007A03  72                 	db	114	;'r'
  3428  007A04  66                 	db	102	;'f'
  3429  007A05  61                 	db	97	;'a'
  3430  007A06  63                 	db	99	;'c'
  3431  007A07  65                 	db	101	;'e'
  3432  007A08  2E                 	db	46
  3433  007A09  0D                 	db	13
  3434  007A0A  0A                 	db	10
  3435  007A0B  00                 	db	0
  3436  007A0C                     STR_167:
  3437  007A0C  2B                 	db	43
  3438  007A0D  45                 	db	69	;'E'
  3439  007A0E  52                 	db	82	;'R'
  3440  007A0F  52                 	db	82	;'R'
  3441  007A10  4F                 	db	79	;'O'
  3442  007A11  52                 	db	82	;'R'
  3443  007A12  20                 	db	32
  3444  007A13  2D                 	db	45
  3445  007A14  20                 	db	32
  3446  007A15  49                 	db	73	;'I'
  3447  007A16  6E                 	db	110	;'n'
  3448  007A17  76                 	db	118	;'v'
  3449  007A18  61                 	db	97	;'a'
  3450  007A19  6C                 	db	108	;'l'
  3451  007A1A  69                 	db	105	;'i'
  3452  007A1B  64                 	db	100	;'d'
  3453  007A1C  20                 	db	32
  3454  007A1D  62                 	db	98	;'b'
  3455  007A1E  61                 	db	97	;'a'
  3456  007A1F  75                 	db	117	;'u'
  3457  007A20  64                 	db	100	;'d'
  3458  007A21  72                 	db	114	;'r'
  3459  007A22  61                 	db	97	;'a'
  3460  007A23  74                 	db	116	;'t'
  3461  007A24  65                 	db	101	;'e'
  3462  007A25  2E                 	db	46
  3463  007A26  0D                 	db	13
  3464  007A27  0A                 	db	10
  3465  007A28  00                 	db	0
  3466  007A29                     STR_5:
  3467  007A29  54                 	db	84	;'T'
  3468  007A2A  65                 	db	101	;'e'
  3469  007A2B  6D                 	db	109	;'m'
  3470  007A2C  70                 	db	112	;'p'
  3471  007A2D  6F                 	db	111	;'o'
  3472  007A2E  72                 	db	114	;'r'
  3473  007A2F  61                 	db	97	;'a'
  3474  007A30  72                 	db	114	;'r'
  3475  007A31  79                 	db	121	;'y'
  3476  007A32  20                 	db	32
  3477  007A33  76                 	db	118	;'v'
  3478  007A34  65                 	db	101	;'e'
  3479  007A35  72                 	db	114	;'r'
  3480  007A36  62                 	db	98	;'b'
  3481  007A37  6F                 	db	111	;'o'
  3482  007A38  73                 	db	115	;'s'
  3483  007A39  65                 	db	101	;'e'
  3484  007A3A  20                 	db	32
  3485  007A3B  6D                 	db	109	;'m'
  3486  007A3C  6F                 	db	111	;'o'
  3487  007A3D  64                 	db	100	;'d'
  3488  007A3E  65                 	db	101	;'e'
  3489  007A3F  20                 	db	32
  3490  007A40  73                 	db	115	;'s'
  3491  007A41  65                 	db	101	;'e'
  3492  007A42  74                 	db	116	;'t'
  3493  007A43  0D                 	db	13
  3494  007A44  0A                 	db	10
  3495  007A45  00                 	db	0
  3496  007A46                     STR_148:
  3497  007A46  2B                 	db	43
  3498  007A47  4F                 	db	79	;'O'
  3499  007A48  4B                 	db	75	;'K'
  3500  007A49  20                 	db	32
  3501  007A4A  2D                 	db	45
  3502  007A4B  20                 	db	32
  3503  007A4C  4D                 	db	77	;'M'
  3504  007A4D  6F                 	db	111	;'o'
  3505  007A4E  64                 	db	100	;'d'
  3506  007A4F  65                 	db	101	;'e'
  3507  007A50  20                 	db	32
  3508  007A51  69                 	db	105	;'i'
  3509  007A52  73                 	db	115	;'s'
  3510  007A53  20                 	db	32
  3511  007A54  6E                 	db	110	;'n'
  3512  007A55  6F                 	db	111	;'o'
  3513  007A56  77                 	db	119	;'w'
  3514  007A57  20                 	db	32
  3515  007A58  76                 	db	118	;'v'
  3516  007A59  65                 	db	101	;'e'
  3517  007A5A  72                 	db	114	;'r'
  3518  007A5B  62                 	db	98	;'b'
  3519  007A5C  6F                 	db	111	;'o'
  3520  007A5D  73                 	db	115	;'s'
  3521  007A5E  65                 	db	101	;'e'
  3522  007A5F  0D                 	db	13
  3523  007A60  0A                 	db	10
  3524  007A61  00                 	db	0
  3525  007A62                     STR_103:
  3526  007A62  2D                 	db	45
  3527  007A63  45                 	db	69	;'E'
  3528  007A64  52                 	db	82	;'R'
  3529  007A65  52                 	db	82	;'R'
  3530  007A66  4F                 	db	79	;'O'
  3531  007A67  52                 	db	82	;'R'
  3532  007A68  20                 	db	32
  3533  007A69  2D                 	db	45
  3534  007A6A  20                 	db	32
  3535  007A6B  4E                 	db	78	;'N'
  3536  007A6C  6F                 	db	111	;'o'
  3537  007A6D  64                 	db	100	;'d'
  3538  007A6E  65                 	db	101	;'e'
  3539  007A6F  20                 	db	32
  3540  007A70  6E                 	db	110	;'n'
  3541  007A71  6F                 	db	111	;'o'
  3542  007A72  74                 	db	116	;'t'
  3543  007A73  20                 	db	32
  3544  007A74  66                 	db	102	;'f'
  3545  007A75  6F                 	db	111	;'o'
  3546  007A76  75                 	db	117	;'u'
  3547  007A77  6E                 	db	110	;'n'
  3548  007A78  64                 	db	100	;'d'
  3549  007A79  2E                 	db	46
  3550  007A7A  0D                 	db	13
  3551  007A7B  0A                 	db	10
  3552  007A7C  00                 	db	0
  3553  007A7D                     STR_251:
  3554  007A7D  42                 	db	66	;'B'
  3555  007A7E  4F                 	db	79	;'O'
  3556  007A7F  4F                 	db	79	;'O'
  3557  007A80  54                 	db	84	;'T'
  3558  007A81  20                 	db	32
  3559  007A82  2D                 	db	45
  3560  007A83  20                 	db	32
  3561  007A84  45                 	db	69	;'E'
  3562  007A85  6E                 	db	110	;'n'
  3563  007A86  74                 	db	116	;'t'
  3564  007A87  65                 	db	101	;'e'
  3565  007A88  72                 	db	114	;'r'
  3566  007A89  20                 	db	32
  3567  007A8A  62                 	db	98	;'b'
  3568  007A8B  6F                 	db	111	;'o'
  3569  007A8C  6F                 	db	111	;'o'
  3570  007A8D  74                 	db	116	;'t'
  3571  007A8E  6C                 	db	108	;'l'
  3572  007A8F  6F                 	db	111	;'o'
  3573  007A90  61                 	db	97	;'a'
  3574  007A91  64                 	db	100	;'d'
  3575  007A92  65                 	db	101	;'e'
  3576  007A93  72                 	db	114	;'r'
  3577  007A94  2E                 	db	46
  3578  007A95  0D                 	db	13
  3579  007A96  0A                 	db	10
  3580  007A97  00                 	db	0
  3581  007A98                     STR_172:
  3582  007A98  2D                 	db	45
  3583  007A99  45                 	db	69	;'E'
  3584  007A9A  52                 	db	82	;'R'
  3585  007A9B  52                 	db	82	;'R'
  3586  007A9C  4F                 	db	79	;'O'
  3587  007A9D  52                 	db	82	;'R'
  3588  007A9E  20                 	db	32
  3589  007A9F  2D                 	db	45
  3590  007AA0  20                 	db	32
  3591  007AA1  55                 	db	85	;'U'
  3592  007AA2  6E                 	db	110	;'n'
  3593  007AA3  6B                 	db	107	;'k'
  3594  007AA4  6E                 	db	110	;'n'
  3595  007AA5  6F                 	db	111	;'o'
  3596  007AA6  77                 	db	119	;'w'
  3597  007AA7  6E                 	db	110	;'n'
  3598  007AA8  20                 	db	32
  3599  007AA9  63                 	db	99	;'c'
  3600  007AAA  6F                 	db	111	;'o'
  3601  007AAB  6D                 	db	109	;'m'
  3602  007AAC  6D                 	db	109	;'m'
  3603  007AAD  61                 	db	97	;'a'
  3604  007AAE  6E                 	db	110	;'n'
  3605  007AAF  64                 	db	100	;'d'
  3606  007AB0  0D                 	db	13
  3607  007AB1  0A                 	db	10
  3608  007AB2  00                 	db	0
  3609  007AB3                     STR_284:
  3610  007AB3  4E                 	db	78	;'N'
  3611  007AB4  6F                 	db	111	;'o'
  3612  007AB5  64                 	db	100	;'d'
  3613  007AB6  65                 	db	101	;'e'
  3614  007AB7  20                 	db	32
  3615  007AB8  66                 	db	102	;'f'
  3616  007AB9  6F                 	db	111	;'o'
  3617  007ABA  75                 	db	117	;'u'
  3618  007ABB  6E                 	db	110	;'n'
  3619  007ABC  64                 	db	100	;'d'
  3620  007ABD  20                 	db	32
  3621  007ABE  77                 	db	119	;'w'
  3622  007ABF  69                 	db	105	;'i'
  3623  007AC0  74                 	db	116	;'t'
  3624  007AC1  68                 	db	104	;'h'
  3625  007AC2  20                 	db	32
  3626  007AC3  6E                 	db	110	;'n'
  3627  007AC4  6F                 	db	111	;'o'
  3628  007AC5  64                 	db	100	;'d'
  3629  007AC6  65                 	db	101	;'e'
  3630  007AC7  20                 	db	32
  3631  007AC8  69                 	db	105	;'i'
  3632  007AC9  64                 	db	100	;'d'
  3633  007ACA  20                 	db	32
  3634  007ACB  3D                 	db	61	;'='
  3635  007ACC  20                 	db	32
  3636  007ACD  00                 	db	0
  3637  007ACE                     STR_152:
  3638  007ACE  2B                 	db	43
  3639  007ACF  4F                 	db	79	;'O'
  3640  007AD0  4B                 	db	75	;'K'
  3641  007AD1  20                 	db	32
  3642  007AD2  2D                 	db	45
  3643  007AD3  20                 	db	32
  3644  007AD4  4D                 	db	77	;'M'
  3645  007AD5  6F                 	db	111	;'o'
  3646  007AD6  64                 	db	100	;'d'
  3647  007AD7  65                 	db	101	;'e'
  3648  007AD8  20                 	db	32
  3649  007AD9  69                 	db	105	;'i'
  3650  007ADA  73                 	db	115	;'s'
  3651  007ADB  20                 	db	32
  3652  007ADC  6E                 	db	110	;'n'
  3653  007ADD  6F                 	db	111	;'o'
  3654  007ADE  77                 	db	119	;'w'
  3655  007ADF  20                 	db	32
  3656  007AE0  53                 	db	83	;'S'
  3657  007AE1  4C                 	db	76	;'L'
  3658  007AE2  43                 	db	67	;'C'
  3659  007AE3  41                 	db	65	;'A'
  3660  007AE4  4E                 	db	78	;'N'
  3661  007AE5  0D                 	db	13
  3662  007AE6  0A                 	db	10
  3663  007AE7  00                 	db	0
  3664  007AE8                     STR_25:
  3665  007AE8  2B                 	db	43
  3666  007AE9  4F                 	db	79	;'O'
  3667  007AEA  4B                 	db	75	;'K'
  3668  007AEB  20                 	db	32
  3669  007AEC  2D                 	db	45
  3670  007AED  20                 	db	32
  3671  007AEE  4C                 	db	76	;'L'
  3672  007AEF  69                 	db	105	;'i'
  3673  007AF0  73                 	db	115	;'s'
  3674  007AF1  74                 	db	116	;'t'
  3675  007AF2  65                 	db	101	;'e'
  3676  007AF3  6E                 	db	110	;'n'
  3677  007AF4  20                 	db	32
  3678  007AF5  6F                 	db	111	;'o'
  3679  007AF6  6E                 	db	110	;'n'
  3680  007AF7  6C                 	db	108	;'l'
  3681  007AF8  79                 	db	121	;'y'
  3682  007AF9  20                 	db	32
  3683  007AFA  6D                 	db	109	;'m'
  3684  007AFB  6F                 	db	111	;'o'
  3685  007AFC  64                 	db	100	;'d'
  3686  007AFD  65                 	db	101	;'e'
  3687  007AFE  0D                 	db	13
  3688  007AFF  0A                 	db	10
  3689  007B00  00                 	db	0
  3690  007B01                     STR_236:
  3691  007B01  54                 	db	84	;'T'
  3692  007B02  72                 	db	114	;'r'
  3693  007B03  61                 	db	97	;'a'
  3694  007B04  6E                 	db	110	;'n'
  3695  007B05  73                 	db	115	;'s'
  3696  007B06  6D                 	db	109	;'m'
  3697  007B07  69                 	db	105	;'i'
  3698  007B08  74                 	db	116	;'t'
  3699  007B09  20                 	db	32
  3700  007B0A  45                 	db	69	;'E'
  3701  007B0B  72                 	db	114	;'r'
  3702  007B0C  72                 	db	114	;'r'
  3703  007B0D  6F                 	db	111	;'o'
  3704  007B0E  72                 	db	114	;'r'
  3705  007B0F  20                 	db	32
  3706  007B10  43                 	db	67	;'C'
  3707  007B11  6F                 	db	111	;'o'
  3708  007B12  75                 	db	117	;'u'
  3709  007B13  6E                 	db	110	;'n'
  3710  007B14  74                 	db	116	;'t'
  3711  007B15  65                 	db	101	;'e'
  3712  007B16  72                 	db	114	;'r'
  3713  007B17  3A                 	db	58	;':'
  3714  007B18  20                 	db	32
  3715  007B19  00                 	db	0
  3716  007B1A                     STR_73:
  3717  007B1A  55                 	db	85	;'U'
  3718  007B1B  6E                 	db	110	;'n'
  3719  007B1C  61                 	db	97	;'a'
  3720  007B1D  62                 	db	98	;'b'
  3721  007B1E  6C                 	db	108	;'l'
  3722  007B1F  65                 	db	101	;'e'
  3723  007B20  20                 	db	32
  3724  007B21  74                 	db	116	;'t'
  3725  007B22  6F                 	db	111	;'o'
  3726  007B23  20                 	db	32
  3727  007B24  72                 	db	114	;'r'
  3728  007B25  65                 	db	101	;'e'
  3729  007B26  61                 	db	97	;'a'
  3730  007B27  64                 	db	100	;'d'
  3731  007B28  20                 	db	32
  3732  007B29  72                 	db	114	;'r'
  3733  007B2A  65                 	db	101	;'e'
  3734  007B2B  67                 	db	103	;'g'
  3735  007B2C  69                 	db	105	;'i'
  3736  007B2D  73                 	db	115	;'s'
  3737  007B2E  74                 	db	116	;'t'
  3738  007B2F  65                 	db	101	;'e'
  3739  007B30  72                 	db	114	;'r'
  3740  007B31  20                 	db	32
  3741  007B32  00                 	db	0
  3742  007B33                     STR_259:
  3743  007B33  54                 	db	84	;'T'
  3744  007B34  58                 	db	88	;'X'
  3745  007B35  20                 	db	32
  3746  007B36  2D                 	db	45
  3747  007B37  20                 	db	32
  3748  007B38  53                 	db	83	;'S'
  3749  007B39  65                 	db	101	;'e'
  3750  007B3A  6E                 	db	110	;'n'
  3751  007B3B  64                 	db	100	;'d'
  3752  007B3C  20                 	db	32
  3753  007B3D  43                 	db	67	;'C'
  3754  007B3E  41                 	db	65	;'A'
  3755  007B3F  4E                 	db	78	;'N'
  3756  007B40  20                 	db	32
  3757  007B41  66                 	db	102	;'f'
  3758  007B42  72                 	db	114	;'r'
  3759  007B43  61                 	db	97	;'a'
  3760  007B44  6D                 	db	109	;'m'
  3761  007B45  65                 	db	101	;'e'
  3762  007B46  20                 	db	32
  3763  007B47  2E                 	db	46
  3764  007B48  0D                 	db	13
  3765  007B49  0A                 	db	10
  3766  007B4A  00                 	db	0
  3767  007B4B                     STR_269:
  3768  007B4B  46                 	db	70	;'F'
  3769  007B4C  49                 	db	73	;'I'
  3770  007B4D  4C                 	db	76	;'L'
  3771  007B4E  54                 	db	84	;'T'
  3772  007B4F  45                 	db	69	;'E'
  3773  007B50  52                 	db	82	;'R'
  3774  007B51  20                 	db	32
  3775  007B52  2D                 	db	45
  3776  007B53  20                 	db	32
  3777  007B54  53                 	db	83	;'S'
  3778  007B55  65                 	db	101	;'e'
  3779  007B56  74                 	db	116	;'t'
  3780  007B57  20                 	db	32
  3781  007B58  66                 	db	102	;'f'
  3782  007B59  69                 	db	105	;'i'
  3783  007B5A  6C                 	db	108	;'l'
  3784  007B5B  74                 	db	116	;'t'
  3785  007B5C  65                 	db	101	;'e'
  3786  007B5D  72                 	db	114	;'r'
  3787  007B5E  20                 	db	32
  3788  007B5F  2E                 	db	46
  3789  007B60  0D                 	db	13
  3790  007B61  0A                 	db	10
  3791  007B62  00                 	db	0
  3792  007B63                     STR_52:
  3793  007B63  2D                 	db	45
  3794  007B64  45                 	db	69	;'E'
  3795  007B65  52                 	db	82	;'R'
  3796  007B66  52                 	db	82	;'R'
  3797  007B67  4F                 	db	79	;'O'
  3798  007B68  52                 	db	82	;'R'
  3799  007B69  20                 	db	32
  3800  007B6A  2D                 	db	45
  3801  007B6B  20                 	db	32
  3802  007B6C  4E                 	db	78	;'N'
  3803  007B6D  65                 	db	101	;'e'
  3804  007B6E  65                 	db	101	;'e'
  3805  007B6F  64                 	db	100	;'d'
  3806  007B70  73                 	db	115	;'s'
  3807  007B71  20                 	db	32
  3808  007B72  6E                 	db	110	;'n'
  3809  007B73  6F                 	db	111	;'o'
  3810  007B74  64                 	db	100	;'d'
  3811  007B75  65                 	db	101	;'e'
  3812  007B76  69                 	db	105	;'i'
  3813  007B77  64                 	db	100	;'d'
  3814  007B78  0D                 	db	13
  3815  007B79  0A                 	db	10
  3816  007B7A  00                 	db	0
  3817  007B7B                     STR_28:
  3818  007B7B  2D                 	db	45
  3819  007B7C  45                 	db	69	;'E'
  3820  007B7D  52                 	db	82	;'R'
  3821  007B7E  52                 	db	82	;'R'
  3822  007B7F  4F                 	db	79	;'O'
  3823  007B80  52                 	db	82	;'R'
  3824  007B81  20                 	db	32
  3825  007B82  2D                 	db	45
  3826  007B83  20                 	db	32
  3827  007B84  55                 	db	85	;'U'
  3828  007B85  6E                 	db	110	;'n'
  3829  007B86  6B                 	db	107	;'k'
  3830  007B87  6E                 	db	110	;'n'
  3831  007B88  6F                 	db	111	;'o'
  3832  007B89  77                 	db	119	;'w'
  3833  007B8A  6E                 	db	110	;'n'
  3834  007B8B  20                 	db	32
  3835  007B8C  6D                 	db	109	;'m'
  3836  007B8D  6F                 	db	111	;'o'
  3837  007B8E  64                 	db	100	;'d'
  3838  007B8F  65                 	db	101	;'e'
  3839  007B90  0D                 	db	13
  3840  007B91  0A                 	db	10
  3841  007B92  00                 	db	0
  3842  007B93                     STR_88:
  3843  007B93  2D                 	db	45
  3844  007B94  45                 	db	69	;'E'
  3845  007B95  52                 	db	82	;'R'
  3846  007B96  52                 	db	82	;'R'
  3847  007B97  4F                 	db	79	;'O'
  3848  007B98  52                 	db	82	;'R'
  3849  007B99  20                 	db	32
  3850  007B9A  2D                 	db	45
  3851  007B9B  20                 	db	32
  3852  007B9C  4E                 	db	78	;'N'
  3853  007B9D  65                 	db	101	;'e'
  3854  007B9E  65                 	db	101	;'e'
  3855  007B9F  64                 	db	100	;'d'
  3856  007BA0  20                 	db	32
  3857  007BA1  61                 	db	97	;'a'
  3858  007BA2  20                 	db	32
  3859  007BA3  76                 	db	118	;'v'
  3860  007BA4  61                 	db	97	;'a'
  3861  007BA5  6C                 	db	108	;'l'
  3862  007BA6  75                 	db	117	;'u'
  3863  007BA7  65                 	db	101	;'e'
  3864  007BA8  0D                 	db	13
  3865  007BA9  0A                 	db	10
  3866  007BAA  00                 	db	0
  3867  007BAB                     STR_243:
  3868  007BAB  52                 	db	82	;'R'
  3869  007BAC  65                 	db	101	;'e'
  3870  007BAD  63                 	db	99	;'c'
  3871  007BAE  65                 	db	101	;'e'
  3872  007BAF  69                 	db	105	;'i'
  3873  007BB0  76                 	db	118	;'v'
  3874  007BB1  65                 	db	101	;'e'
  3875  007BB2  20                 	db	32
  3876  007BB3  45                 	db	69	;'E'
  3877  007BB4  72                 	db	114	;'r'
  3878  007BB5  72                 	db	114	;'r'
  3879  007BB6  6F                 	db	111	;'o'
  3880  007BB7  72                 	db	114	;'r'
  3881  007BB8  20                 	db	32
  3882  007BB9  43                 	db	67	;'C'
  3883  007BBA  6F                 	db	111	;'o'
  3884  007BBB  75                 	db	117	;'u'
  3885  007BBC  6E                 	db	110	;'n'
  3886  007BBD  74                 	db	116	;'t'
  3887  007BBE  65                 	db	101	;'e'
  3888  007BBF  72                 	db	114	;'r'
  3889  007BC0  3A                 	db	58	;':'
  3890  007BC1  20                 	db	32
  3891  007BC2  00                 	db	0
  3892  007BC3                     STR_227:
  3893  007BC3  55                 	db	85	;'U'
  3894  007BC4  41                 	db	65	;'A'
  3895  007BC5  52                 	db	82	;'R'
  3896  007BC6  54                 	db	84	;'T'
  3897  007BC7  20                 	db	32
  3898  007BC8  52                 	db	82	;'R'
  3899  007BC9  65                 	db	101	;'e'
  3900  007BCA  63                 	db	99	;'c'
  3901  007BCB  65                 	db	101	;'e'
  3902  007BCC  69                 	db	105	;'i'
  3903  007BCD  76                 	db	118	;'v'
  3904  007BCE  65                 	db	101	;'e'
  3905  007BCF  20                 	db	32
  3906  007BD0  6F                 	db	111	;'o'
  3907  007BD1  76                 	db	118	;'v'
  3908  007BD2  65                 	db	101	;'e'
  3909  007BD3  72                 	db	114	;'r'
  3910  007BD4  72                 	db	114	;'r'
  3911  007BD5  75                 	db	117	;'u'
  3912  007BD6  6E                 	db	110	;'n'
  3913  007BD7  73                 	db	115	;'s'
  3914  007BD8  3A                 	db	58	;':'
  3915  007BD9  20                 	db	32
  3916  007BDA  00                 	db	0
  3917  007BDB                     STR_223:
  3918  007BDB  43                 	db	67	;'C'
  3919  007BDC  41                 	db	65	;'A'
  3920  007BDD  4E                 	db	78	;'N'
  3921  007BDE  20                 	db	32
  3922  007BDF  54                 	db	84	;'T'
  3923  007BE0  72                 	db	114	;'r'
  3924  007BE1  61                 	db	97	;'a'
  3925  007BE2  6E                 	db	110	;'n'
  3926  007BE3  73                 	db	115	;'s'
  3927  007BE4  6D                 	db	109	;'m'
  3928  007BE5  69                 	db	105	;'i'
  3929  007BE6  74                 	db	116	;'t'
  3930  007BE7  20                 	db	32
  3931  007BE8  6F                 	db	111	;'o'
  3932  007BE9  76                 	db	118	;'v'
  3933  007BEA  65                 	db	101	;'e'
  3934  007BEB  72                 	db	114	;'r'
  3935  007BEC  72                 	db	114	;'r'
  3936  007BED  75                 	db	117	;'u'
  3937  007BEE  6E                 	db	110	;'n'
  3938  007BEF  73                 	db	115	;'s'
  3939  007BF0  3A                 	db	58	;':'
  3940  007BF1  20                 	db	32
  3941  007BF2  00                 	db	0
  3942  007BF3                     STR_261:
  3943  007BF3  52                 	db	82	;'R'
  3944  007BF4  58                 	db	88	;'X'
  3945  007BF5  20                 	db	32
  3946  007BF6  2D                 	db	45
  3947  007BF7  20                 	db	32
  3948  007BF8  52                 	db	82	;'R'
  3949  007BF9  65                 	db	101	;'e'
  3950  007BFA  61                 	db	97	;'a'
  3951  007BFB  64                 	db	100	;'d'
  3952  007BFC  20                 	db	32
  3953  007BFD  43                 	db	67	;'C'
  3954  007BFE  41                 	db	65	;'A'
  3955  007BFF  4E                 	db	78	;'N'
  3956  007C00  20                 	db	32
  3957  007C01  66                 	db	102	;'f'
  3958  007C02  72                 	db	114	;'r'
  3959  007C03  61                 	db	97	;'a'
  3960  007C04  6D                 	db	109	;'m'
  3961  007C05  65                 	db	101	;'e'
  3962  007C06  2E                 	db	46
  3963  007C07  0D                 	db	13
  3964  007C08  0A                 	db	10
  3965  007C09  00                 	db	0
  3966  007C0A                     STR_157:
  3967  007C0A  2B                 	db	43
  3968  007C0B  4F                 	db	79	;'O'
  3969  007C0C  4B                 	db	75	;'K'
  3970  007C0D  20                 	db	32
  3971  007C0E  2D                 	db	45
  3972  007C0F  20                 	db	32
  3973  007C10  4C                 	db	76	;'L'
  3974  007C11  6F                 	db	111	;'o'
  3975  007C12  63                 	db	99	;'c'
  3976  007C13  61                 	db	97	;'a'
  3977  007C14  6C                 	db	108	;'l'
  3978  007C15  20                 	db	32
  3979  007C16  65                 	db	101	;'e'
  3980  007C17  63                 	db	99	;'c'
  3981  007C18  68                 	db	104	;'h'
  3982  007C19  6F                 	db	111	;'o'
  3983  007C1A  20                 	db	32
  3984  007C1B  6F                 	db	111	;'o'
  3985  007C1C  66                 	db	102	;'f'
  3986  007C1D  66                 	db	102	;'f'
  3987  007C1E  0D                 	db	13
  3988  007C1F  0A                 	db	10
  3989  007C20  00                 	db	0
  3990  007C21                     STR_219:
  3991  007C21  43                 	db	67	;'C'
  3992  007C22  41                 	db	65	;'A'
  3993  007C23  4E                 	db	78	;'N'
  3994  007C24  20                 	db	32
  3995  007C25  52                 	db	82	;'R'
  3996  007C26  65                 	db	101	;'e'
  3997  007C27  63                 	db	99	;'c'
  3998  007C28  65                 	db	101	;'e'
  3999  007C29  69                 	db	105	;'i'
  4000  007C2A  76                 	db	118	;'v'
  4001  007C2B  65                 	db	101	;'e'
  4002  007C2C  20                 	db	32
  4003  007C2D  6F                 	db	111	;'o'
  4004  007C2E  76                 	db	118	;'v'
  4005  007C2F  65                 	db	101	;'e'
  4006  007C30  72                 	db	114	;'r'
  4007  007C31  72                 	db	114	;'r'
  4008  007C32  75                 	db	117	;'u'
  4009  007C33  6E                 	db	110	;'n'
  4010  007C34  73                 	db	115	;'s'
  4011  007C35  3A                 	db	58	;':'
  4012  007C36  20                 	db	32
  4013  007C37  00                 	db	0
  4014  007C38                     STR_307:
  4015  007C38  55                 	db	85	;'U'
  4016  007C39  6E                 	db	110	;'n'
  4017  007C3A  6B                 	db	107	;'k'
  4018  007C3B  6E                 	db	110	;'n'
  4019  007C3C  6F                 	db	111	;'o'
  4020  007C3D  77                 	db	119	;'w'
  4021  007C3E  6E                 	db	110	;'n'
  4022  007C3F  20                 	db	32
  4023  007C40  28                 	db	40
  4024  007C41  56                 	db	86	;'V'
  4025  007C42  65                 	db	101	;'e'
  4026  007C43  72                 	db	114	;'r'
  4027  007C44  62                 	db	98	;'b'
  4028  007C45  6F                 	db	111	;'o'
  4029  007C46  73                 	db	115	;'s'
  4030  007C47  65                 	db	101	;'e'
  4031  007C48  20                 	db	32
  4032  007C49  75                 	db	117	;'u'
  4033  007C4A  73                 	db	115	;'s'
  4034  007C4B  65                 	db	101	;'e'
  4035  007C4C  64                 	db	100	;'d'
  4036  007C4D  29                 	db	41
  4037  007C4E  00                 	db	0
  4038  007C4F                     STR_24:
  4039  007C4F  2B                 	db	43
  4040  007C50  4F                 	db	79	;'O'
  4041  007C51  4B                 	db	75	;'K'
  4042  007C52  20                 	db	32
  4043  007C53  2D                 	db	45
  4044  007C54  20                 	db	32
  4045  007C55  4C                 	db	76	;'L'
  4046  007C56  6F                 	db	111	;'o'
  4047  007C57  6F                 	db	111	;'o'
  4048  007C58  70                 	db	112	;'p'
  4049  007C59  62                 	db	98	;'b'
  4050  007C5A  61                 	db	97	;'a'
  4051  007C5B  63                 	db	99	;'c'
  4052  007C5C  6B                 	db	107	;'k'
  4053  007C5D  20                 	db	32
  4054  007C5E  6D                 	db	109	;'m'
  4055  007C5F  6F                 	db	111	;'o'
  4056  007C60  64                 	db	100	;'d'
  4057  007C61  65                 	db	101	;'e'
  4058  007C62  0D                 	db	13
  4059  007C63  0A                 	db	10
  4060  007C64  00                 	db	0
  4061  007C65                     STR_163:
  4062  007C65  2B                 	db	43
  4063  007C66  4F                 	db	79	;'O'
  4064  007C67  4B                 	db	75	;'K'
  4065  007C68  20                 	db	32
  4066  007C69  2D                 	db	45
  4067  007C6A  20                 	db	32
  4068  007C6B  54                 	db	84	;'T'
  4069  007C6C  69                 	db	105	;'i'
  4070  007C6D  6D                 	db	109	;'m'
  4071  007C6E  65                 	db	101	;'e'
  4072  007C6F  73                 	db	115	;'s'
  4073  007C70  74                 	db	116	;'t'
  4074  007C71  61                 	db	97	;'a'
  4075  007C72  6D                 	db	109	;'m'
  4076  007C73  70                 	db	112	;'p'
  4077  007C74  20                 	db	32
  4078  007C75  6F                 	db	111	;'o'
  4079  007C76  66                 	db	102	;'f'
  4080  007C77  66                 	db	102	;'f'
  4081  007C78  0D                 	db	13
  4082  007C79  0A                 	db	10
  4083  007C7A  00                 	db	0
  4084  007C7B                     STR_155:
  4085  007C7B  2B                 	db	43
  4086  007C7C  4F                 	db	79	;'O'
  4087  007C7D  4B                 	db	75	;'K'
  4088  007C7E  20                 	db	32
  4089  007C7F  2D                 	db	45
  4090  007C80  20                 	db	32
  4091  007C81  4C                 	db	76	;'L'
  4092  007C82  6F                 	db	111	;'o'
  4093  007C83  63                 	db	99	;'c'
  4094  007C84  61                 	db	97	;'a'
  4095  007C85  6C                 	db	108	;'l'
  4096  007C86  20                 	db	32
  4097  007C87  65                 	db	101	;'e'
  4098  007C88  63                 	db	99	;'c'
  4099  007C89  68                 	db	104	;'h'
  4100  007C8A  6F                 	db	111	;'o'
  4101  007C8B  20                 	db	32
  4102  007C8C  6F                 	db	111	;'o'
  4103  007C8D  6E                 	db	110	;'n'
  4104  007C8E  0D                 	db	13
  4105  007C8F  0A                 	db	10
  4106  007C90  00                 	db	0
  4107  007C91                     STR_211:
  4108  007C91  52                 	db	82	;'R'
  4109  007C92  65                 	db	101	;'e'
  4110  007C93  63                 	db	99	;'c'
  4111  007C94  65                 	db	101	;'e'
  4112  007C95  69                 	db	105	;'i'
  4113  007C96  76                 	db	118	;'v'
  4114  007C97  65                 	db	101	;'e'
  4115  007C98  64                 	db	100	;'d'
  4116  007C99  20                 	db	32
  4117  007C9A  43                 	db	67	;'C'
  4118  007C9B  41                 	db	65	;'A'
  4119  007C9C  4E                 	db	78	;'N'
  4120  007C9D  20                 	db	32
  4121  007C9E  66                 	db	102	;'f'
  4122  007C9F  72                 	db	114	;'r'
  4123  007CA0  61                 	db	97	;'a'
  4124  007CA1  6D                 	db	109	;'m'
  4125  007CA2  65                 	db	101	;'e'
  4126  007CA3  73                 	db	115	;'s'
  4127  007CA4  3A                 	db	58	;':'
  4128  007CA5  20                 	db	32
  4129  007CA6  00                 	db	0
  4130  007CA7                     STR_161:
  4131  007CA7  2B                 	db	43
  4132  007CA8  4F                 	db	79	;'O'
  4133  007CA9  4B                 	db	75	;'K'
  4134  007CAA  20                 	db	32
  4135  007CAB  2D                 	db	45
  4136  007CAC  20                 	db	32
  4137  007CAD  54                 	db	84	;'T'
  4138  007CAE  69                 	db	105	;'i'
  4139  007CAF  6D                 	db	109	;'m'
  4140  007CB0  65                 	db	101	;'e'
  4141  007CB1  73                 	db	115	;'s'
  4142  007CB2  74                 	db	116	;'t'
  4143  007CB3  61                 	db	97	;'a'
  4144  007CB4  6D                 	db	109	;'m'
  4145  007CB5  70                 	db	112	;'p'
  4146  007CB6  20                 	db	32
  4147  007CB7  6F                 	db	111	;'o'
  4148  007CB8  6E                 	db	110	;'n'
  4149  007CB9  0D                 	db	13
  4150  007CBA  0A                 	db	10
  4151  007CBB  00                 	db	0
  4152  007CBC                     STR_215:
  4153  007CBC  52                 	db	82	;'R'
  4154  007CBD  65                 	db	101	;'e'
  4155  007CBE  63                 	db	99	;'c'
  4156  007CBF  65                 	db	101	;'e'
  4157  007CC0  69                 	db	105	;'i'
  4158  007CC1  76                 	db	118	;'v'
  4159  007CC2  65                 	db	101	;'e'
  4160  007CC3  64                 	db	100	;'d'
  4161  007CC4  20                 	db	32
  4162  007CC5  43                 	db	67	;'C'
  4163  007CC6  41                 	db	65	;'A'
  4164  007CC7  4E                 	db	78	;'N'
  4165  007CC8  20                 	db	32
  4166  007CC9  62                 	db	98	;'b'
  4167  007CCA  79                 	db	121	;'y'
  4168  007CCB  74                 	db	116	;'t'
  4169  007CCC  65                 	db	101	;'e'
  4170  007CCD  73                 	db	115	;'s'
  4171  007CCE  3A                 	db	58	;':'
  4172  007CCF  20                 	db	32
  4173  007CD0  00                 	db	0
  4174  007CD1                     STR_271:
  4175  007CD1  4D                 	db	77	;'M'
  4176  007CD2  41                 	db	65	;'A'
  4177  007CD3  53                 	db	83	;'S'
  4178  007CD4  4B                 	db	75	;'K'
  4179  007CD5  20                 	db	32
  4180  007CD6  2D                 	db	45
  4181  007CD7  20                 	db	32
  4182  007CD8  53                 	db	83	;'S'
  4183  007CD9  65                 	db	101	;'e'
  4184  007CDA  74                 	db	116	;'t'
  4185  007CDB  20                 	db	32
  4186  007CDC  6D                 	db	109	;'m'
  4187  007CDD  61                 	db	97	;'a'
  4188  007CDE  73                 	db	115	;'s'
  4189  007CDF  6B                 	db	107	;'k'
  4190  007CE0  20                 	db	32
  4191  007CE1  2E                 	db	46
  4192  007CE2  0D                 	db	13
  4193  007CE3  0A                 	db	10
  4194  007CE4  00                 	db	0
  4195  007CE5                     STR_173:
  4196  007CE5  4A                 	db	74	;'J'
  4197  007CE6  46                 	db	70	;'F'
  4198  007CE7  72                 	db	114	;'r'
  4199  007CE8  61                 	db	97	;'a'
  4200  007CE9  6E                 	db	110	;'n'
  4201  007CEA  6B                 	db	107	;'k'
  4202  007CEB  66                 	db	102	;'f'
  4203  007CEC  75                 	db	117	;'u'
  4204  007CED  72                 	db	114	;'r'
  4205  007CEE  74                 	db	116	;'t'
  4206  007CEF  20                 	db	32
  4207  007CF0  52                 	db	82	;'R'
  4208  007CF1  53                 	db	83	;'S'
  4209  007CF2  2D                 	db	45
  4210  007CF3  32                 	db	50	;'2'
  4211  007CF4  33                 	db	51	;'3'
  4212  007CF5  32                 	db	50	;'2'
  4213  007CF6  0D                 	db	13
  4214  007CF7  0A                 	db	10
  4215  007CF8  00                 	db	0
  4216  007CF9                     STR_26:
  4217  007CF9  2B                 	db	43
  4218  007CFA  4F                 	db	79	;'O'
  4219  007CFB  4B                 	db	75	;'K'
  4220  007CFC  20                 	db	32
  4221  007CFD  2D                 	db	45
  4222  007CFE  20                 	db	32
  4223  007CFF  43                 	db	67	;'C'
  4224  007D00  6C                 	db	108	;'l'
  4225  007D01  6F                 	db	111	;'o'
  4226  007D02  73                 	db	115	;'s'
  4227  007D03  65                 	db	101	;'e'
  4228  007D04  64                 	db	100	;'d'
  4229  007D05  20                 	db	32
  4230  007D06  6D                 	db	109	;'m'
  4231  007D07  6F                 	db	111	;'o'
  4232  007D08  64                 	db	100	;'d'
  4233  007D09  65                 	db	101	;'e'
  4234  007D0A  0D                 	db	13
  4235  007D0B  0A                 	db	10
  4236  007D0C  00                 	db	0
  4237  007D0D                     STR_21:
  4238  007D0D  2B                 	db	43
  4239  007D0E  4F                 	db	79	;'O'
  4240  007D0F  4B                 	db	75	;'K'
  4241  007D10  20                 	db	32
  4242  007D11  2D                 	db	45
  4243  007D12  20                 	db	32
  4244  007D13  4E                 	db	78	;'N'
  4245  007D14  6F                 	db	111	;'o'
  4246  007D15  72                 	db	114	;'r'
  4247  007D16  6D                 	db	109	;'m'
  4248  007D17  61                 	db	97	;'a'
  4249  007D18  6C                 	db	108	;'l'
  4250  007D19  20                 	db	32
  4251  007D1A  6D                 	db	109	;'m'
  4252  007D1B  6F                 	db	111	;'o'
  4253  007D1C  64                 	db	100	;'d'
  4254  007D1D  65                 	db	101	;'e'
  4255  007D1E  0D                 	db	13
  4256  007D1F  0A                 	db	10
  4257  007D20  00                 	db	0
  4258  007D21                     STR_22:
  4259  007D21  2B                 	db	43
  4260  007D22  4F                 	db	79	;'O'
  4261  007D23  4B                 	db	75	;'K'
  4262  007D24  20                 	db	32
  4263  007D25  2D                 	db	45
  4264  007D26  20                 	db	32
  4265  007D27  53                 	db	83	;'S'
  4266  007D28  69                 	db	105	;'i'
  4267  007D29  6C                 	db	108	;'l'
  4268  007D2A  65                 	db	101	;'e'
  4269  007D2B  6E                 	db	110	;'n'
  4270  007D2C  74                 	db	116	;'t'
  4271  007D2D  20                 	db	32
  4272  007D2E  6D                 	db	109	;'m'
  4273  007D2F  6F                 	db	111	;'o'
  4274  007D30  64                 	db	100	;'d'
  4275  007D31  65                 	db	101	;'e'
  4276  007D32  0D                 	db	13
  4277  007D33  0A                 	db	10
  4278  007D34  00                 	db	0
  4279  007D35                     STR_99:
  4280  007D35  49                 	db	73	;'I'
  4281  007D36  6E                 	db	110	;'n'
  4282  007D37  66                 	db	102	;'f'
  4283  007D38  6F                 	db	111	;'o'
  4284  007D39  20                 	db	32
  4285  007D3A  66                 	db	102	;'f'
  4286  007D3B  6F                 	db	111	;'o'
  4287  007D3C  72                 	db	114	;'r'
  4288  007D3D  20                 	db	32
  4289  007D3E  6E                 	db	110	;'n'
  4290  007D3F  6F                 	db	111	;'o'
  4291  007D40  64                 	db	100	;'d'
  4292  007D41  65                 	db	101	;'e'
  4293  007D42  20                 	db	32
  4294  007D43  69                 	db	105	;'i'
  4295  007D44  64                 	db	100	;'d'
  4296  007D45  20                 	db	32
  4297  007D46  3D                 	db	61	;'='
  4298  007D47  20                 	db	32
  4299  007D48  00                 	db	0
  4300  007D49                     STR_296:
  4301  007D49  46                 	db	70	;'F'
  4302  007D4A  69                 	db	105	;'i'
  4303  007D4B  72                 	db	114	;'r'
  4304  007D4C  6D                 	db	109	;'m'
  4305  007D4D  77                 	db	119	;'w'
  4306  007D4E  61                 	db	97	;'a'
  4307  007D4F  72                 	db	114	;'r'
  4308  007D50  65                 	db	101	;'e'
  4309  007D51  20                 	db	32
  4310  007D52  76                 	db	118	;'v'
  4311  007D53  65                 	db	101	;'e'
  4312  007D54  72                 	db	114	;'r'
  4313  007D55  73                 	db	115	;'s'
  4314  007D56  69                 	db	105	;'i'
  4315  007D57  6F                 	db	111	;'o'
  4316  007D58  6E                 	db	110	;'n'
  4317  007D59  20                 	db	32
  4318  007D5A  3D                 	db	61	;'='
  4319  007D5B  20                 	db	32
  4320  007D5C  00                 	db	0
  4321  007D5D                     STR_23:
  4322  007D5D  2B                 	db	43
  4323  007D5E  4F                 	db	79	;'O'
  4324  007D5F  4B                 	db	75	;'K'
  4325  007D60  20                 	db	32
  4326  007D61  2D                 	db	45
  4327  007D62  20                 	db	32
  4328  007D63  53                 	db	83	;'S'
  4329  007D64  6C                 	db	108	;'l'
  4330  007D65  65                 	db	101	;'e'
  4331  007D66  65                 	db	101	;'e'
  4332  007D67  70                 	db	112	;'p'
  4333  007D68  20                 	db	32
  4334  007D69  6D                 	db	109	;'m'
  4335  007D6A  6F                 	db	111	;'o'
  4336  007D6B  64                 	db	100	;'d'
  4337  007D6C  65                 	db	101	;'e'
  4338  007D6D  0D                 	db	13
  4339  007D6E  0A                 	db	10
  4340  007D6F  00                 	db	0
  4341  007D70                     STR_27:
  4342  007D70  2B                 	db	43
  4343  007D71  4F                 	db	79	;'O'
  4344  007D72  4B                 	db	75	;'K'
  4345  007D73  20                 	db	32
  4346  007D74  2D                 	db	45
  4347  007D75  20                 	db	32
  4348  007D76  42                 	db	66	;'B'
  4349  007D77  69                 	db	105	;'i'
  4350  007D78  74                 	db	116	;'t'
  4351  007D79  73                 	db	115	;'s'
  4352  007D7A  20                 	db	32
  4353  007D7B  6D                 	db	109	;'m'
  4354  007D7C  6F                 	db	111	;'o'
  4355  007D7D  64                 	db	100	;'d'
  4356  007D7E  65                 	db	101	;'e'
  4357  007D7F  0D                 	db	13
  4358  007D80  0A                 	db	10
  4359  007D81  00                 	db	0
  4360  007D82                     STR_40:
  4361  007D82  2B                 	db	43
  4362  007D83  4F                 	db	79	;'O'
  4363  007D84  4B                 	db	75	;'K'
  4364  007D85  20                 	db	32
  4365  007D86  2D                 	db	45
  4366  007D87  20                 	db	32
  4367  007D88  6E                 	db	110	;'n'
  4368  007D89  6F                 	db	111	;'o'
  4369  007D8A  20                 	db	32
  4370  007D8B  65                 	db	101	;'e'
  4371  007D8C  76                 	db	118	;'v'
  4372  007D8D  65                 	db	101	;'e'
  4373  007D8E  6E                 	db	110	;'n'
  4374  007D8F  74                 	db	116	;'t'
  4375  007D90  73                 	db	115	;'s'
  4376  007D91  0D                 	db	13
  4377  007D92  0A                 	db	10
  4378  007D93  00                 	db	0
  4379  007D94                     STR_203:
  4380  007D94  53                 	db	83	;'S'
  4381  007D95  65                 	db	101	;'e'
  4382  007D96  6E                 	db	110	;'n'
  4383  007D97  74                 	db	116	;'t'
  4384  007D98  20                 	db	32
  4385  007D99  43                 	db	67	;'C'
  4386  007D9A  41                 	db	65	;'A'
  4387  007D9B  4E                 	db	78	;'N'
  4388  007D9C  20                 	db	32
  4389  007D9D  66                 	db	102	;'f'
  4390  007D9E  72                 	db	114	;'r'
  4391  007D9F  61                 	db	97	;'a'
  4392  007DA0  6D                 	db	109	;'m'
  4393  007DA1  65                 	db	101	;'e'
  4394  007DA2  73                 	db	115	;'s'
  4395  007DA3  3A                 	db	58	;':'
  4396  007DA4  20                 	db	32
  4397  007DA5  00                 	db	0
  4398  007DA6                     STR_309:
  4399  007DA6  30                 	db	48	;'0'
  4400  007DA7  31                 	db	49	;'1'
  4401  007DA8  32                 	db	50	;'2'
  4402  007DA9  33                 	db	51	;'3'
  4403  007DAA  34                 	db	52	;'4'
  4404  007DAB  35                 	db	53	;'5'
  4405  007DAC  36                 	db	54	;'6'
  4406  007DAD  37                 	db	55	;'7'
  4407  007DAE  38                 	db	56	;'8'
  4408  007DAF  39                 	db	57	;'9'
  4409  007DB0  41                 	db	65	;'A'
  4410  007DB1  42                 	db	66	;'B'
  4411  007DB2  43                 	db	67	;'C'
  4412  007DB3  44                 	db	68	;'D'
  4413  007DB4  45                 	db	69	;'E'
  4414  007DB5  46                 	db	70	;'F'
  4415  007DB6  00                 	db	0
  4416  007DB7                     STR_310:
  4417  007DB7  30                 	db	48	;'0'
  4418  007DB8  31                 	db	49	;'1'
  4419  007DB9  32                 	db	50	;'2'
  4420  007DBA  33                 	db	51	;'3'
  4421  007DBB  34                 	db	52	;'4'
  4422  007DBC  35                 	db	53	;'5'
  4423  007DBD  36                 	db	54	;'6'
  4424  007DBE  37                 	db	55	;'7'
  4425  007DBF  38                 	db	56	;'8'
  4426  007DC0  39                 	db	57	;'9'
  4427  007DC1  61                 	db	97	;'a'
  4428  007DC2  62                 	db	98	;'b'
  4429  007DC3  63                 	db	99	;'c'
  4430  007DC4  64                 	db	100	;'d'
  4431  007DC5  65                 	db	101	;'e'
  4432  007DC6  66                 	db	102	;'f'
  4433  007DC7  00                 	db	0
  4434  007DC8                     STR_288:
  4435  007DC8  20                 	db	32
  4436  007DC9  6E                 	db	110	;'n'
  4437  007DCA  6F                 	db	111	;'o'
  4438  007DCB  64                 	db	100	;'d'
  4439  007DCC  65                 	db	101	;'e'
  4440  007DCD  28                 	db	40
  4441  007DCE  73                 	db	115	;'s'
  4442  007DCF  29                 	db	41
  4443  007DD0  20                 	db	32
  4444  007DD1  66                 	db	102	;'f'
  4445  007DD2  6F                 	db	111	;'o'
  4446  007DD3  75                 	db	117	;'u'
  4447  007DD4  6E                 	db	110	;'n'
  4448  007DD5  64                 	db	100	;'d'
  4449  007DD6  0D                 	db	13
  4450  007DD7  0A                 	db	10
  4451  007DD8  00                 	db	0
  4452  007DD9                     STR_207:
  4453  007DD9  53                 	db	83	;'S'
  4454  007DDA  65                 	db	101	;'e'
  4455  007DDB  6E                 	db	110	;'n'
  4456  007DDC  74                 	db	116	;'t'
  4457  007DDD  20                 	db	32
  4458  007DDE  43                 	db	67	;'C'
  4459  007DDF  41                 	db	65	;'A'
  4460  007DE0  4E                 	db	78	;'N'
  4461  007DE1  20                 	db	32
  4462  007DE2  62                 	db	98	;'b'
  4463  007DE3  79                 	db	121	;'y'
  4464  007DE4  74                 	db	116	;'t'
  4465  007DE5  65                 	db	101	;'e'
  4466  007DE6  73                 	db	115	;'s'
  4467  007DE7  3A                 	db	58	;':'
  4468  007DE8  20                 	db	32
  4469  007DE9  00                 	db	0
  4470  007DEA                     STR_70:
  4471  007DEA  2D                 	db	45
  4472  007DEB  45                 	db	69	;'E'
  4473  007DEC  52                 	db	82	;'R'
  4474  007DED  52                 	db	82	;'R'
  4475  007DEE  4F                 	db	79	;'O'
  4476  007DEF  52                 	db	82	;'R'
  4477  007DF0  20                 	db	32
  4478  007DF1  2D                 	db	45
  4479  007DF2  20                 	db	32
  4480  007DF3  6E                 	db	110	;'n'
  4481  007DF4  6F                 	db	111	;'o'
  4482  007DF5  64                 	db	100	;'d'
  4483  007DF6  65                 	db	101	;'e'
  4484  007DF7  69                 	db	105	;'i'
  4485  007DF8  64                 	db	100	;'d'
  4486  007DF9  3D                 	db	61	;'='
  4487  007DFA  00                 	db	0
  4488  007DFB                     STR_59:
  4489  007DFB  56                 	db	86	;'V'
  4490  007DFC  61                 	db	97	;'a'
  4491  007DFD  6C                 	db	108	;'l'
  4492  007DFE  75                 	db	117	;'u'
  4493  007DFF  65                 	db	101	;'e'
  4494  007E00  20                 	db	32
  4495  007E01  66                 	db	102	;'f'
  4496  007E02  6F                 	db	111	;'o'
  4497  007E03  72                 	db	114	;'r'
  4498  007E04  20                 	db	32
  4499  007E05  72                 	db	114	;'r'
  4500  007E06  65                 	db	101	;'e'
  4501  007E07  67                 	db	103	;'g'
  4502  007E08  20                 	db	32
  4503  007E09  00                 	db	0
  4504  007E0A                     STR_294:
  4505  007E0A  4D                 	db	77	;'M'
  4506  007E0B  44                 	db	68	;'D'
  4507  007E0C  46                 	db	70	;'F'
  4508  007E0D  20                 	db	32
  4509  007E0E  3D                 	db	61	;'='
  4510  007E0F  20                 	db	32
  4511  007E10  68                 	db	104	;'h'
  4512  007E11  74                 	db	116	;'t'
  4513  007E12  74                 	db	116	;'t'
  4514  007E13  70                 	db	112	;'p'
  4515  007E14  3A                 	db	58	;':'
  4516  007E15  2F                 	db	47
  4517  007E16  2F                 	db	47
  4518  007E17  00                 	db	0
  4519  007E18                     STR_56:
  4520  007E18  2B                 	db	43
  4521  007E19  4F                 	db	79	;'O'
  4522  007E1A  4B                 	db	75	;'K'
  4523  007E1B  20                 	db	32
  4524  007E1C  2D                 	db	45
  4525  007E1D  20                 	db	32
  4526  007E1E  6E                 	db	110	;'n'
  4527  007E1F  6F                 	db	111	;'o'
  4528  007E20  64                 	db	100	;'d'
  4529  007E21  65                 	db	101	;'e'
  4530  007E22  69                 	db	105	;'i'
  4531  007E23  64                 	db	100	;'d'
  4532  007E24  3D                 	db	61	;'='
  4533  007E25  00                 	db	0
  4534  007E26                     STR_182:
  4535  007E26  2C                 	db	44
  4536  007E27  74                 	db	116	;'t'
  4537  007E28  69                 	db	105	;'i'
  4538  007E29  6D                 	db	109	;'m'
  4539  007E2A  65                 	db	101	;'e'
  4540  007E2B  73                 	db	115	;'s'
  4541  007E2C  74                 	db	116	;'t'
  4542  007E2D  61                 	db	97	;'a'
  4543  007E2E  6D                 	db	109	;'m'
  4544  007E2F  70                 	db	112	;'p'
  4545  007E30  3D                 	db	61	;'='
  4546  007E31  00                 	db	0
  4547  007E32                     STR_304:
  4548  007E32  56                 	db	86	;'V'
  4549  007E33  53                 	db	83	;'S'
  4550  007E34  43                 	db	67	;'C'
  4551  007E35  50                 	db	80	;'P'
  4552  007E36  20                 	db	32
  4553  007E37  44                 	db	68	;'D'
  4554  007E38  72                 	db	114	;'r'
  4555  007E39  69                 	db	105	;'i'
  4556  007E3A  76                 	db	118	;'v'
  4557  007E3B  65                 	db	101	;'e'
  4558  007E3C  72                 	db	114	;'r'
  4559  007E3D  00                 	db	0
  4560  007E3E                     STR_159:
  4561  007E3E  54                 	db	84	;'T'
  4562  007E3F  49                 	db	73	;'I'
  4563  007E40  4D                 	db	77	;'M'
  4564  007E41  45                 	db	69	;'E'
  4565  007E42  53                 	db	83	;'S'
  4566  007E43  54                 	db	84	;'T'
  4567  007E44  41                 	db	65	;'A'
  4568  007E45  4D                 	db	77	;'M'
  4569  007E46  50                 	db	80	;'P'
  4570  007E47  20                 	db	32
  4571  007E48  00                 	db	0
  4572  007E49                     STR_138:
  4573  007E49  52                 	db	82	;'R'
  4574  007E4A  57                 	db	87	;'W'
  4575  007E4B  54                 	db	84	;'T'
  4576  007E4C  49                 	db	73	;'I'
  4577  007E4D  4D                 	db	77	;'M'
  4578  007E4E  45                 	db	69	;'E'
  4579  007E4F  4F                 	db	79	;'O'
  4580  007E50  55                 	db	85	;'U'
  4581  007E51  54                 	db	84	;'T'
  4582  007E52  20                 	db	32
  4583  007E53  00                 	db	0
  4584  007E54                     STR_118:
  4585  007E54  50                 	db	80	;'P'
  4586  007E55  45                 	db	69	;'E'
  4587  007E56  52                 	db	82	;'R'
  4588  007E57  53                 	db	83	;'S'
  4589  007E58  49                 	db	73	;'I'
  4590  007E59  53                 	db	83	;'S'
  4591  007E5A  54                 	db	84	;'T'
  4592  007E5B  45                 	db	69	;'E'
  4593  007E5C  4E                 	db	78	;'N'
  4594  007E5D  54                 	db	84	;'T'
  4595  007E5E  00                 	db	0
  4596  007E5F                     STR_201:
  4597  007E5F  2C                 	db	44
  4598  007E60  44                 	db	68	;'D'
  4599  007E61  61                 	db	97	;'a'
  4600  007E62  74                 	db	116	;'t'
  4601  007E63  61                 	db	97	;'a'
  4602  007E64  3D                 	db	61	;'='
  4603  007E65  6E                 	db	110	;'n'
  4604  007E66  6F                 	db	111	;'o'
  4605  007E67  6E                 	db	110	;'n'
  4606  007E68  65                 	db	101	;'e'
  4607  007E69  00                 	db	0
  4608  007E6A                     STR_57:
  4609  007E6A  30                 	db	48	;'0'
  4610  007E6B  78                 	db	120	;'x'
  4611  007E6C  25                 	db	37
  4612  007E6D  30                 	db	48	;'0'
  4613  007E6E  32                 	db	50	;'2'
  4614  007E6F  58                 	db	88	;'X'
  4615  007E70  20                 	db	32
  4616  007E71  2D                 	db	45
  4617  007E72  20                 	db	32
  4618  007E73  00                 	db	0
  4619  007E74                     STR_300:
  4620  007E74  56                 	db	86	;'V'
  4621  007E75  65                 	db	101	;'e'
  4622  007E76  72                 	db	114	;'r'
  4623  007E77  73                 	db	115	;'s'
  4624  007E78  69                 	db	105	;'i'
  4625  007E79  6F                 	db	111	;'o'
  4626  007E7A  6E                 	db	110	;'n'
  4627  007E7B  3A                 	db	58	;':'
  4628  007E7C  20                 	db	32
  4629  007E7D  00                 	db	0
  4630  007E7E                     STR_165:
  4631  007E7E  42                 	db	66	;'B'
  4632  007E7F  41                 	db	65	;'A'
  4633  007E80  55                 	db	85	;'U'
  4634  007E81  44                 	db	68	;'D'
  4635  007E82  52                 	db	82	;'R'
  4636  007E83  41                 	db	65	;'A'
  4637  007E84  54                 	db	84	;'T'
  4638  007E85  45                 	db	69	;'E'
  4639  007E86  20                 	db	32
  4640  007E87  00                 	db	0
  4641  007E88                     STR_306:
  4642  007E88  56                 	db	86	;'V'
  4643  007E89  53                 	db	83	;'S'
  4644  007E8A  43                 	db	67	;'C'
  4645  007E8B  50                 	db	80	;'P'
  4646  007E8C  20                 	db	32
  4647  007E8D  4E                 	db	78	;'N'
  4648  007E8E  6F                 	db	111	;'o'
  4649  007E8F  64                 	db	100	;'d'
  4650  007E90  65                 	db	101	;'e'
  4651  007E91  00                 	db	0
  4652  007E92                     STR_305:
  4653  007E92  53                 	db	83	;'S'
  4654  007E93  4C                 	db	76	;'L'
  4655  007E94  20                 	db	32
  4656  007E95  44                 	db	68	;'D'
  4657  007E96  72                 	db	114	;'r'
  4658  007E97  69                 	db	105	;'i'
  4659  007E98  76                 	db	118	;'v'
  4660  007E99  65                 	db	101	;'e'
  4661  007E9A  72                 	db	114	;'r'
  4662  007E9B  00                 	db	0
  4663  007E9C                     STR_140:
  4664  007E9C  53                 	db	83	;'S'
  4665  007E9D  54                 	db	84	;'T'
  4666  007E9E  41                 	db	65	;'A'
  4667  007E9F  52                 	db	82	;'R'
  4668  007EA0  54                 	db	84	;'T'
  4669  007EA1  49                 	db	73	;'I'
  4670  007EA2  46                 	db	70	;'F'
  4671  007EA3  20                 	db	32
  4672  007EA4  00                 	db	0
  4673  007EA5                     STR_191:
  4674  007EA5  2C                 	db	44
  4675  007EA6  6E                 	db	110	;'n'
  4676  007EA7  6F                 	db	111	;'o'
  4677  007EA8  64                 	db	100	;'d'
  4678  007EA9  65                 	db	101	;'e'
  4679  007EAA  69                 	db	105	;'i'
  4680  007EAB  64                 	db	100	;'d'
  4681  007EAC  3D                 	db	61	;'='
  4682  007EAD  00                 	db	0
  4683  007EAE                     STR_14:
  4684  007EAE  4C                 	db	76	;'L'
  4685  007EAF  4F                 	db	79	;'O'
  4686  007EB0  4F                 	db	79	;'O'
  4687  007EB1  50                 	db	80	;'P'
  4688  007EB2  42                 	db	66	;'B'
  4689  007EB3  41                 	db	65	;'A'
  4690  007EB4  43                 	db	67	;'C'
  4691  007EB5  4B                 	db	75	;'K'
  4692  007EB6  00                 	db	0
  4693  007EB7                     STR_168:
  4694  007EB7  44                 	db	68	;'D'
  4695  007EB8  45                 	db	69	;'E'
  4696  007EB9  46                 	db	70	;'F'
  4697  007EBA  41                 	db	65	;'A'
  4698  007EBB  55                 	db	85	;'U'
  4699  007EBC  4C                 	db	76	;'L'
  4700  007EBD  54                 	db	84	;'T'
  4701  007EBE  53                 	db	83	;'S'
  4702  007EBF  00                 	db	0
  4703  007EC0                     STR_174:
  4704  007EC0  56                 	db	86	;'V'
  4705  007EC1  31                 	db	49	;'1'
  4706  007EC2  30                 	db	48	;'0'
  4707  007EC3  31                 	db	49	;'1'
  4708  007EC4  31                 	db	49	;'1'
  4709  007EC5  0D                 	db	13
  4710  007EC6  0A                 	db	10
  4711  007EC7  00                 	db	0
  4712  007EC8                     STR_175:
  4713  007EC8  4E                 	db	78	;'N'
  4714  007EC9  31                 	db	49	;'1'
  4715  007ECA  39                 	db	57	;'9'
  4716  007ECB  37                 	db	55	;'7'
  4717  007ECC  37                 	db	55	;'7'
  4718  007ECD  0D                 	db	13
  4719  007ECE  0A                 	db	10
  4720  007ECF  00                 	db	0
  4721  007ED0                     STR_91:
  4722  007ED0  30                 	db	48	;'0'
  4723  007ED1  78                 	db	120	;'x'
  4724  007ED2  25                 	db	37
  4725  007ED3  30                 	db	48	;'0'
  4726  007ED4  32                 	db	50	;'2'
  4727  007ED5  58                 	db	88	;'X'
  4728  007ED6  0A                 	db	10
  4729  007ED7  00                 	db	0
  4730  007ED8                     STR_289:
  4731  007ED8  47                 	db	71	;'G'
  4732  007ED9  55                 	db	85	;'U'
  4733  007EDA  49                 	db	73	;'I'
  4734  007EDB  44                 	db	68	;'D'
  4735  007EDC  20                 	db	32
  4736  007EDD  3D                 	db	61	;'='
  4737  007EDE  20                 	db	32
  4738  007EDF  00                 	db	0
  4739  007EE0                     STR_185:
  4740  007EE0  2C                 	db	44
  4741  007EE1  63                 	db	99	;'c'
  4742  007EE2  6C                 	db	108	;'l'
  4743  007EE3  61                 	db	97	;'a'
  4744  007EE4  73                 	db	115	;'s'
  4745  007EE5  73                 	db	115	;'s'
  4746  007EE6  3D                 	db	61	;'='
  4747  007EE7  00                 	db	0
  4748  007EE8                     STR_147:
  4749  007EE8  56                 	db	86	;'V'
  4750  007EE9  45                 	db	69	;'E'
  4751  007EEA  52                 	db	82	;'R'
  4752  007EEB  42                 	db	66	;'B'
  4753  007EEC  4F                 	db	79	;'O'
  4754  007EED  53                 	db	83	;'S'
  4755  007EEE  45                 	db	69	;'E'
  4756  007EEF  00                 	db	0
  4757  007EF0                     STR_136:
  4758  007EF0  44                 	db	68	;'D'
  4759  007EF1  45                 	db	69	;'E'
  4760  007EF2  43                 	db	67	;'C'
  4761  007EF3  49                 	db	73	;'I'
  4762  007EF4  4D                 	db	77	;'M'
  4763  007EF5  41                 	db	65	;'A'
  4764  007EF6  4C                 	db	76	;'L'
  4765  007EF7  00                 	db	0
  4766  007EF8                     STR_18:
  4767  007EF8  56                 	db	86	;'V'
  4768  007EF9  45                 	db	69	;'E'
  4769  007EFA  52                 	db	82	;'R'
  4770  007EFB  53                 	db	83	;'S'
  4771  007EFC  49                 	db	73	;'I'
  4772  007EFD  4F                 	db	79	;'O'
  4773  007EFE  4E                 	db	78	;'N'
  4774  007EFF  00                 	db	0
  4775  007F00                     STR_183:
  4776  007F00  30                 	db	48	;'0'
  4777  007F01  78                 	db	120	;'x'
  4778  007F02  25                 	db	37
  4779  007F03  30                 	db	48	;'0'
  4780  007F04  38                 	db	56	;'8'
  4781  007F05  6C                 	db	108	;'l'
  4782  007F06  58                 	db	88	;'X'
  4783  007F07  00                 	db	0
  4784  007F08                     STR_303:
  4785  007F08  56                 	db	86	;'V'
  4786  007F09  65                 	db	101	;'e'
  4787  007F0A  72                 	db	114	;'r'
  4788  007F0B  62                 	db	98	;'b'
  4789  007F0C  6F                 	db	111	;'o'
  4790  007F0D  73                 	db	115	;'s'
  4791  007F0E  65                 	db	101	;'e'
  4792  007F0F  00                 	db	0
  4793  007F10                     STR_302:
  4794  007F10  4D                 	db	77	;'M'
  4795  007F11  6F                 	db	111	;'o'
  4796  007F12  64                 	db	100	;'d'
  4797  007F13  65                 	db	101	;'e'
  4798  007F14  3A                 	db	58	;':'
  4799  007F15  20                 	db	32
  4800  007F16  00                 	db	0
  4801  007F17                     STR_197:
  4802  007F17  2C                 	db	44
  4803  007F18  44                 	db	68	;'D'
  4804  007F19  61                 	db	97	;'a'
  4805  007F1A  74                 	db	116	;'t'
  4806  007F1B  61                 	db	97	;'a'
  4807  007F1C  3D                 	db	61	;'='
  4808  007F1D  00                 	db	0
  4809  007F1E                     STR_188:
  4810  007F1E  2C                 	db	44
  4811  007F1F  74                 	db	116	;'t'
  4812  007F20  79                 	db	121	;'y'
  4813  007F21  70                 	db	112	;'p'
  4814  007F22  65                 	db	101	;'e'
  4815  007F23  3D                 	db	61	;'='
  4816  007F24  00                 	db	0
  4817  007F25                     STR_194:
  4818  007F25  2C                 	db	44
  4819  007F26  73                 	db	115	;'s'
  4820  007F27  69                 	db	105	;'i'
  4821  007F28  7A                 	db	122	;'z'
  4822  007F29  65                 	db	101	;'e'
  4823  007F2A  3D                 	db	61	;'='
  4824  007F2B  00                 	db	0
  4825  007F2C                     STR_179:
  4826  007F2C  3C                 	db	60	;'<'
  4827  007F2D  50                 	db	80	;'P'
  4828  007F2E  72                 	db	114	;'r'
  4829  007F2F  69                 	db	105	;'i'
  4830  007F30  6F                 	db	111	;'o'
  4831  007F31  3D                 	db	61	;'='
  4832  007F32  00                 	db	0
  4833  007F33                     STR_20:
  4834  007F33  49                 	db	73	;'I'
  4835  007F34  46                 	db	70	;'F'
  4836  007F35  4D                 	db	77	;'M'
  4837  007F36  4F                 	db	79	;'O'
  4838  007F37  44                 	db	68	;'D'
  4839  007F38  45                 	db	69	;'E'
  4840  007F39  00                 	db	0
  4841  007F3A                     STR_16:
  4842  007F3A  4C                 	db	76	;'L'
  4843  007F3B  49                 	db	73	;'I'
  4844  007F3C  53                 	db	83	;'S'
  4845  007F3D  54                 	db	84	;'T'
  4846  007F3E  45                 	db	69	;'E'
  4847  007F3F  4E                 	db	78	;'N'
  4848  007F40  00                 	db	0
  4849  007F41                     STR_105:
  4850  007F41  46                 	db	70	;'F'
  4851  007F42  49                 	db	73	;'I'
  4852  007F43  4C                 	db	76	;'L'
  4853  007F44  54                 	db	84	;'T'
  4854  007F45  45                 	db	69	;'E'
  4855  007F46  52                 	db	82	;'R'
  4856  007F47  00                 	db	0
  4857  007F48                     STR_10:
  4858  007F48  53                 	db	83	;'S'
  4859  007F49  49                 	db	73	;'I'
  4860  007F4A  4C                 	db	76	;'L'
  4861  007F4B  45                 	db	69	;'E'
  4862  007F4C  4E                 	db	78	;'N'
  4863  007F4D  54                 	db	84	;'T'
  4864  007F4E  00                 	db	0
  4865  007F4F                     STR_60:
  4866  007F4F  30                 	db	48	;'0'
  4867  007F50  78                 	db	120	;'x'
  4868  007F51  25                 	db	37
  4869  007F52  30                 	db	48	;'0'
  4870  007F53  32                 	db	50	;'2'
  4871  007F54  58                 	db	88	;'X'
  4872  007F55  00                 	db	0
  4873  007F56                     STR_186:
  4874  007F56  30                 	db	48	;'0'
  4875  007F57  78                 	db	120	;'x'
  4876  007F58  25                 	db	37
  4877  007F59  30                 	db	48	;'0'
  4878  007F5A  34                 	db	52	;'4'
  4879  007F5B  58                 	db	88	;'X'
  4880  007F5C  00                 	db	0
  4881  007F5D                     STR_204:
  4882  007F5D  30                 	db	48	;'0'
  4883  007F5E  78                 	db	120	;'x'
  4884  007F5F  25                 	db	37
  4885  007F60  30                 	db	48	;'0'
  4886  007F61  38                 	db	56	;'8'
  4887  007F62  58                 	db	88	;'X'
  4888  007F63  00                 	db	0
  4889  007F64                     STR_176:
  4890  007F64  46                 	db	70	;'F'
  4891  007F65  30                 	db	48	;'0'
  4892  007F66  30                 	db	48	;'0'
  4893  007F67  0D                 	db	13
  4894  007F68  0A                 	db	10
  4895  007F69  00                 	db	0
  4896  007F6A                     STR_9:
  4897  007F6A  2B                 	db	43
  4898  007F6B  4F                 	db	79	;'O'
  4899  007F6C  4B                 	db	75	;'K'
  4900  007F6D  0D                 	db	13
  4901  007F6E  0A                 	db	10
  4902  007F6F  00                 	db	0
  4903  007F70                     STR_58:
  4904  007F70  25                 	db	37
  4905  007F71  64                 	db	100	;'d'
  4906  007F72  20                 	db	32
  4907  007F73  2D                 	db	45
  4908  007F74  20                 	db	32
  4909  007F75  00                 	db	0
  4910  007F76                     STR_146:
  4911  007F76  4D                 	db	77	;'M'
  4912  007F77  4F                 	db	79	;'O'
  4913  007F78  44                 	db	68	;'D'
  4914  007F79  45                 	db	69	;'E'
  4915  007F7A  20                 	db	32
  4916  007F7B  00                 	db	0
  4917  007F7C                     STR_153:
  4918  007F7C  45                 	db	69	;'E'
  4919  007F7D  43                 	db	67	;'C'
  4920  007F7E  48                 	db	72	;'H'
  4921  007F7F  4F                 	db	79	;'O'
  4922  007F80  20                 	db	32
  4923  007F81  00                 	db	0
  4924  007F82                     STR_12:
  4925  007F82  43                 	db	67	;'C'
  4926  007F83  4C                 	db	76	;'L'
  4927  007F84  4F                 	db	79	;'O'
  4928  007F85  53                 	db	83	;'S'
  4929  007F86  45                 	db	69	;'E'
  4930  007F87  00                 	db	0
  4931  007F88                     STR_151:
  4932  007F88  53                 	db	83	;'S'
  4933  007F89  4C                 	db	76	;'L'
  4934  007F8A  43                 	db	67	;'C'
  4935  007F8B  41                 	db	65	;'A'
  4936  007F8C  4E                 	db	78	;'N'
  4937  007F8D  00                 	db	0
  4938  007F8E                     STR_133:
  4939  007F8E  53                 	db	83	;'S'
  4940  007F8F  45                 	db	69	;'E'
  4941  007F90  54                 	db	84	;'T'
  4942  007F91  20                 	db	32
  4943  007F92  00                 	db	0
  4944  007F93                     STR_47:
  4945  007F93  46                 	db	70	;'F'
  4946  007F94  49                 	db	73	;'I'
  4947  007F95  4E                 	db	78	;'N'
  4948  007F96  44                 	db	68	;'D'
  4949  007F97  00                 	db	0
  4950  007F98                     STR_49:
  4951  007F98  52                 	db	82	;'R'
  4952  007F99  52                 	db	82	;'R'
  4953  007F9A  45                 	db	69	;'E'
  4954  007F9B  47                 	db	71	;'G'
  4955  007F9C  00                 	db	0
  4956  007F9D                     STR_81:
  4957  007F9D  57                 	db	87	;'W'
  4958  007F9E  52                 	db	82	;'R'
  4959  007F9F  45                 	db	69	;'E'
  4960  007FA0  47                 	db	71	;'G'
  4961  007FA1  00                 	db	0
  4962  007FA2                     STR_120:
  4963  007FA2  4D                 	db	77	;'M'
  4964  007FA3  41                 	db	65	;'A'
  4965  007FA4  53                 	db	83	;'S'
  4966  007FA5  4B                 	db	75	;'K'
  4967  007FA6  00                 	db	0
  4968  007FA7                     STR_8:
  4969  007FA7  4F                 	db	79	;'O'
  4970  007FA8  50                 	db	80	;'P'
  4971  007FA9  45                 	db	69	;'E'
  4972  007FAA  4E                 	db	78	;'N'
  4973  007FAB  00                 	db	0
  4974  007FAC                     STR_97:
  4975  007FAC  49                 	db	73	;'I'
  4976  007FAD  4E                 	db	78	;'N'
  4977  007FAE  46                 	db	70	;'F'
  4978  007FAF  4F                 	db	79	;'O'
  4979  007FB0  00                 	db	0
  4980  007FB1                     STR_149:
  4981  007FB1  56                 	db	86	;'V'
  4982  007FB2  53                 	db	83	;'S'
  4983  007FB3  43                 	db	67	;'C'
  4984  007FB4  50                 	db	80	;'P'
  4985  007FB5  00                 	db	0
  4986  007FB6                     STR_45:
  4987  007FB6  48                 	db	72	;'H'
  4988  007FB7  45                 	db	69	;'E'
  4989  007FB8  4C                 	db	76	;'L'
  4990  007FB9  50                 	db	80	;'P'
  4991  007FBA  00                 	db	0
  4992  007FBB                     STR_41:
  4993  007FBB  53                 	db	83	;'S'
  4994  007FBC  54                 	db	84	;'T'
  4995  007FBD  41                 	db	65	;'A'
  4996  007FBE  54                 	db	84	;'T'
  4997  007FBF  00                 	db	0
  4998  007FC0                     STR_6:
  4999  007FC0  42                 	db	66	;'B'
  5000  007FC1  4F                 	db	79	;'O'
  5001  007FC2  4F                 	db	79	;'O'
  5002  007FC3  54                 	db	84	;'T'
  5003  007FC4  00                 	db	0
  5004  007FC5                     STR_68:
  5005  007FC5  27                 	db	39
  5006  007FC6  20                 	db	32
  5007  007FC7  09                 	db	9
  5008  007FC8  00                 	db	0
  5009  007FC9                     STR_202:
  5010  007FC9  3E                 	db	62	;'>'
  5011  007FCA  0D                 	db	13
  5012  007FCB  0A                 	db	10
  5013  007FCC  00                 	db	0
  5014  007FCD                     STR_92:
  5015  007FCD  25                 	db	37
  5016  007FCE  64                 	db	100	;'d'
  5017  007FCF  0A                 	db	10
  5018  007FD0  00                 	db	0
  5019  007FD1                     STR_156:
  5020  007FD1  4F                 	db	79	;'O'
  5021  007FD2  46                 	db	70	;'F'
  5022  007FD3  46                 	db	70	;'F'
  5023  007FD4  00                 	db	0
  5024  007FD5                     STR_43:
  5025  007FD5  45                 	db	69	;'E'
  5026  007FD6  52                 	db	82	;'R'
  5027  007FD7  52                 	db	82	;'R'
  5028  007FD8  00                 	db	0
  5029  007FD9                     STR_134:
  5030  007FD9  48                 	db	72	;'H'
  5031  007FDA  45                 	db	69	;'E'
  5032  007FDB  58                 	db	88	;'X'
  5033  007FDC  00                 	db	0
  5034  007FDD                     STR_184:
  5035  007FDD  25                 	db	37
  5036  007FDE  6C                 	db	108	;'l'
  5037  007FDF  75                 	db	117	;'u'
  5038  007FE0  00                 	db	0
  5039  007FE1                     STR_67:
  5040  007FE1  09                 	db	9
  5041  007FE2  27                 	db	39
  5042  007FE3  00                 	db	0
  5043  007FE4                     STR_291:
  5044  007FE4  2D                 	db	45
  5045  007FE5  2D                 	db	45
  5046  007FE6  00                 	db	0
  5047  007FE7                     STR_38:
  5048  007FE7  52                 	db	82	;'R'
  5049  007FE8  58                 	db	88	;'X'
  5050  007FE9  00                 	db	0
  5051  007FEA                     STR_29:
  5052  007FEA  54                 	db	84	;'T'
  5053  007FEB  58                 	db	88	;'X'
  5054  007FEC  00                 	db	0
  5055  007FED                     STR_61:
  5056  007FED  25                 	db	37
  5057  007FEE  64                 	db	100	;'d'
  5058  007FEF  00                 	db	0
  5059  007FF0                     STR_178:
  5060  007FF0  07                 	db	7
  5061  007FF1  00                 	db	0
  5062  007FF2                     STR_177:
  5063  007FF2  0D                 	db	13
  5064  007FF3  00                 	db	0
  5065  007FF4                     STR_30:
  5066  007FF4  2C                 	db	44
  5067  007FF5  00                 	db	0
  5068  007FF6                     STR_298:
  5069  007FF6  2E                 	db	46
  5070  007FF7  00                 	db	0
  5071  007FF8                     STR_290:
  5072  007FF8  30                 	db	48	;'0'
  5073  007FF9  00                 	db	0
  5074  007FFA                     STR_292:
  5075  007FFA  3A                 	db	58	;':'
  5076  007FFB  00                 	db	0
  5077  007FFC                     STR_169:
  5078  007FFC  3F                 	db	63	;'?'
  5079  007FFD  00                 	db	0
  5080  007FFE                     __end_of__stringdata:
  5081                           	opt stack 0
  5082                           
  5083                           ; #config settings
  5084  007FFE  00                 	db	0	; dummy byte at the end
  5085  0000                     tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           indf0	equ	0xFEF
  5093                           fsr0h	equ	0xFEA
  5094                           fsr0l	equ	0xFE9
  5095                           wreg	equ	0xFE8
  5096                           indf1	equ	0xFE7
  5097                           postinc1	equ	0xFE6
  5098                           postdec1	equ	0xFE5
  5099                           fsr1h	equ	0xFE2
  5100                           fsr1l	equ	0xFE1
  5101                           indf2	equ	0xFDF
  5102                           postinc2	equ	0xFDE
  5103                           postdec2	equ	0xFDD
  5104                           plusw2	equ	0xFDB
  5105                           fsr2h	equ	0xFDA
  5106                           fsr2l	equ	0xFD9
  5107                           status	equ	0xFD8
  5108                           
  5109                           	psect	nvBANK0
  5110  0000FC                     __pnvBANK0:
  5111                           	opt stack 0
  5112  0000FC                     _caps:
  5113                           	opt stack 0
  5114  0000FC                     	ds	2
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           prodh	equ	0xFF4
  5120                           prodl	equ	0xFF3
  5121                           intcon	equ	0xFF2
  5122                           indf0	equ	0xFEF
  5123                           fsr0h	equ	0xFEA
  5124                           fsr0l	equ	0xFE9
  5125                           wreg	equ	0xFE8
  5126                           indf1	equ	0xFE7
  5127                           postinc1	equ	0xFE6
  5128                           postdec1	equ	0xFE5
  5129                           fsr1h	equ	0xFE2
  5130                           fsr1l	equ	0xFE1
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139                           	psect	cinit
  5140  00632E                     __pcinit:
  5141                           	opt stack 0
  5142  00632E                     start_initialization:
  5143                           	opt stack 0
  5144  00632E                     __initialization:
  5145                           	opt stack 0
  5146                           
  5147                           ; Clear objects allocated to BIGRAM (494 bytes)
  5148  00632E  EE04  F000         	lfsr	0,__pbssBIGRAM
  5149  006332  EE11 F0EE          	lfsr	1,494
  5150  006336                     clear_0:
  5151  006336  6AEE               	clrf	postinc0,c
  5152  006338  50E5               	movf	postdec1,w,c
  5153  00633A  50E1               	movf	fsr1l,w,c
  5154  00633C  E1FC               	bnz	clear_0
  5155  00633E  50E2               	movf	fsr1h,w,c
  5156  006340  E1FA               	bnz	clear_0
  5157                           
  5158                           ; Clear objects allocated to BANK3 (256 bytes)
  5159  006342  EE03  F000         	lfsr	0,__pbssBANK3
  5160  006346  EE11 F000          	lfsr	1,256
  5161  00634A                     clear_1:
  5162  00634A  6AEE               	clrf	postinc0,c
  5163  00634C  50E5               	movf	postdec1,w,c
  5164  00634E  50E1               	movf	fsr1l,w,c
  5165  006350  E1FC               	bnz	clear_1
  5166  006352  50E2               	movf	fsr1h,w,c
  5167  006354  E1FA               	bnz	clear_1
  5168                           
  5169                           ; Clear objects allocated to BANK2 (136 bytes)
  5170  006356  EE02  F000         	lfsr	0,__pbssBANK2
  5171  00635A  0E88               	movlw	136
  5172  00635C                     clear_2:
  5173  00635C  6AEE               	clrf	postinc0,c
  5174  00635E  06E8               	decf	wreg,f,c
  5175  006360  E1FD               	bnz	clear_2
  5176                           
  5177                           ; Clear objects allocated to BANK1 (179 bytes)
  5178  006362  EE01  F000         	lfsr	0,__pbssBANK1
  5179  006366  0EB3               	movlw	179
  5180  006368                     clear_3:
  5181  006368  6AEE               	clrf	postinc0,c
  5182  00636A  06E8               	decf	wreg,f,c
  5183  00636C  E1FD               	bnz	clear_3
  5184                           
  5185                           ; Clear objects allocated to BANK0 (54 bytes)
  5186  00636E  EE00  F0C6         	lfsr	0,__pbssBANK0
  5187  006372  0E36               	movlw	54
  5188  006374                     clear_4:
  5189  006374  6AEE               	clrf	postinc0,c
  5190  006376  06E8               	decf	wreg,f,c
  5191  006378  E1FD               	bnz	clear_4
  5192                           
  5193                           ; Clear objects allocated to COMRAM (26 bytes)
  5194  00637A  EE00  F028         	lfsr	0,__pbssCOMRAM
  5195  00637E  0E1A               	movlw	26
  5196  006380                     clear_5:
  5197  006380  6AEE               	clrf	postinc0,c
  5198  006382  06E8               	decf	wreg,f,c
  5199  006384  E1FD               	bnz	clear_5
  5200  006386                     end_of_initialization:
  5201                           	opt stack 0
  5202  006386                     __end_of__initialization:
  5203                           	opt stack 0
  5204  006386  0E00               	movlw	low (__Lmediumconst shr (0+16))
  5205  006388  6EF8               	movwf	tblptru,c
  5206  00638A  0100               	movlb	0
  5207  00638C  EF0D  F020         	goto	_main	;jump to C main() function
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           indf0	equ	0xFEF
  5216                           postinc0	equ	0xFEE
  5217                           fsr0h	equ	0xFEA
  5218                           fsr0l	equ	0xFE9
  5219                           wreg	equ	0xFE8
  5220                           indf1	equ	0xFE7
  5221                           postinc1	equ	0xFE6
  5222                           postdec1	equ	0xFE5
  5223                           fsr1h	equ	0xFE2
  5224                           fsr1l	equ	0xFE1
  5225                           indf2	equ	0xFDF
  5226                           postinc2	equ	0xFDE
  5227                           postdec2	equ	0xFDD
  5228                           plusw2	equ	0xFDB
  5229                           fsr2h	equ	0xFDA
  5230                           fsr2l	equ	0xFD9
  5231                           status	equ	0xFD8
  5232                           
  5233                           	psect	bssCOMRAM
  5234  000028                     __pbssCOMRAM:
  5235                           	opt stack 0
  5236  000028                     _made_table:
  5237                           	opt stack 0
  5238  000028                     	ds	2
  5239  00002A                     _status_led_cnt:
  5240                           	opt stack 0
  5241  00002A                     	ds	2
  5242  00002C                     strtok@sp:
  5243                           	opt stack 0
  5244  00002C                     	ds	2
  5245  00002E                     _USART_Status:
  5246                           	opt stack 0
  5247  00002E                     	ds	1
  5248  00002F                     __ECANRxFilterHitInfo:
  5249                           	opt stack 0
  5250  00002F                     	ds	1
  5251  000030                     _bDLE:
  5252                           	opt stack 0
  5253  000030                     	ds	1
  5254  000031                     _fifo_canrxcount:
  5255                           	opt stack 0
  5256  000031                     	ds	1
  5257  000032                     _ledFunctionality:
  5258                           	opt stack 0
  5259  000032                     	ds	1
  5260  000033                     _stateVscpDriver:
  5261                           	opt stack 0
  5262  000033                     	ds	1
  5263  000034                     _canInputFifo:
  5264                           	opt stack 0
  5265  000034                     	ds	8
  5266  00003C                     _id:
  5267                           	opt stack 0
  5268  00003C                     	ds	4
  5269  000040                     _dlc:
  5270                           	opt stack 0
  5271  000040                     	ds	1
  5272  000041                     _flags:
  5273                           	opt stack 0
  5274  000041                     	ds	1
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           indf0	equ	0xFEF
  5283                           postinc0	equ	0xFEE
  5284                           fsr0h	equ	0xFEA
  5285                           fsr0l	equ	0xFE9
  5286                           wreg	equ	0xFE8
  5287                           indf1	equ	0xFE7
  5288                           postinc1	equ	0xFE6
  5289                           postdec1	equ	0xFE5
  5290                           fsr1h	equ	0xFE2
  5291                           fsr1l	equ	0xFE1
  5292                           indf2	equ	0xFDF
  5293                           postinc2	equ	0xFDE
  5294                           postdec2	equ	0xFDD
  5295                           plusw2	equ	0xFDB
  5296                           fsr2h	equ	0xFDA
  5297                           fsr2l	equ	0xFD9
  5298                           status	equ	0xFD8
  5299                           
  5300                           	psect	bssBANK0
  5301  0000C6                     __pbssBANK0:
  5302                           	opt stack 0
  5303  0000C6                     _can_receiveOverruns:
  5304                           	opt stack 0
  5305  0000C6                     	ds	4
  5306  0000CA                     _can_transmitOverruns:
  5307                           	opt stack 0
  5308  0000CA                     	ds	4
  5309  0000CE                     _cntRxBytes:
  5310                           	opt stack 0
  5311  0000CE                     	ds	4
  5312  0000D2                     _cntRxFrames:
  5313                           	opt stack 0
  5314  0000D2                     	ds	4
  5315  0000D6                     _cntTxBytes:
  5316                           	opt stack 0
  5317  0000D6                     	ds	4
  5318  0000DA                     _cntTxFrames:
  5319                           	opt stack 0
  5320  0000DA                     	ds	4
  5321  0000DE                     _timekeeper:
  5322                           	opt stack 0
  5323  0000DE                     	ds	4
  5324  0000E2                     _timer:
  5325                           	opt stack 0
  5326  0000E2                     	ds	4
  5327  0000E6                     _uart_receiveOverruns:
  5328                           	opt stack 0
  5329  0000E6                     	ds	4
  5330  0000EA                     _uart_transmitOverruns:
  5331                           	opt stack 0
  5332  0000EA                     	ds	4
  5333  0000EE                     _bInitiated:
  5334                           	opt stack 0
  5335  0000EE                     	ds	1
  5336  0000EF                     _bOpen:
  5337                           	opt stack 0
  5338  0000EF                     	ds	1
  5339  0000F0                     _bTimestamp:
  5340                           	opt stack 0
  5341  0000F0                     	ds	1
  5342  0000F1                     _mode:
  5343                           	opt stack 0
  5344  0000F1                     	ds	1
  5345  0000F2                     _nTimeStamp:
  5346                           	opt stack 0
  5347  0000F2                     	ds	1
  5348  0000F3                     _sequencyno:
  5349                           	opt stack 0
  5350  0000F3                     	ds	1
  5351  0000F4                     _serialInputFifo:
  5352                           	opt stack 0
  5353  0000F4                     	ds	8
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           indf0	equ	0xFEF
  5362                           postinc0	equ	0xFEE
  5363                           fsr0h	equ	0xFEA
  5364                           fsr0l	equ	0xFE9
  5365                           wreg	equ	0xFE8
  5366                           indf1	equ	0xFE7
  5367                           postinc1	equ	0xFE6
  5368                           postdec1	equ	0xFE5
  5369                           fsr1h	equ	0xFE2
  5370                           fsr1l	equ	0xFE1
  5371                           indf2	equ	0xFDF
  5372                           postinc2	equ	0xFDE
  5373                           postdec2	equ	0xFDD
  5374                           plusw2	equ	0xFDB
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379                           	psect	bssBANK1
  5380  000100                     __pbssBANK1:
  5381                           	opt stack 0
  5382  000100                     _bHex:
  5383                           	opt stack 0
  5384  000100                     	ds	1
  5385  000101                     _bLocalEcho:
  5386                           	opt stack 0
  5387  000101                     	ds	1
  5388  000102                     _bSilent:
  5389                           	opt stack 0
  5390  000102                     	ds	1
  5391  000103                     _pos:
  5392                           	opt stack 0
  5393  000103                     	ds	1
  5394  000104                     _rwtimeout:
  5395                           	opt stack 0
  5396  000104                     	ds	1
  5397  000105                     _cmdbuf:
  5398                           	opt stack 0
  5399  000105                     	ds	80
  5400  000155                     _wrkbuf:
  5401                           	opt stack 0
  5402  000155                     	ds	80
  5403  0001A5                     _vscpData:
  5404                           	opt stack 0
  5405  0001A5                     	ds	8
  5406  0001AD                     _vscpClass:
  5407                           	opt stack 0
  5408  0001AD                     	ds	2
  5409  0001AF                     _vscpNodeId:
  5410                           	opt stack 0
  5411  0001AF                     	ds	1
  5412  0001B0                     _vscpPriority:
  5413                           	opt stack 0
  5414  0001B0                     	ds	1
  5415  0001B1                     _vscpSize:
  5416                           	opt stack 0
  5417  0001B1                     	ds	1
  5418  0001B2                     _vscpType:
  5419                           	opt stack 0
  5420  0001B2                     	ds	1
  5421                           tblptru	equ	0xFF8
  5422                           tblptrh	equ	0xFF7
  5423                           tblptrl	equ	0xFF6
  5424                           tablat	equ	0xFF5
  5425                           prodh	equ	0xFF4
  5426                           prodl	equ	0xFF3
  5427                           intcon	equ	0xFF2
  5428                           indf0	equ	0xFEF
  5429                           postinc0	equ	0xFEE
  5430                           fsr0h	equ	0xFEA
  5431                           fsr0l	equ	0xFE9
  5432                           wreg	equ	0xFE8
  5433                           indf1	equ	0xFE7
  5434                           postinc1	equ	0xFE6
  5435                           postdec1	equ	0xFE5
  5436                           fsr1h	equ	0xFE2
  5437                           fsr1l	equ	0xFE1
  5438                           indf2	equ	0xFDF
  5439                           postinc2	equ	0xFDE
  5440                           postdec2	equ	0xFDD
  5441                           plusw2	equ	0xFDB
  5442                           fsr2h	equ	0xFDA
  5443                           fsr2l	equ	0xFD9
  5444                           status	equ	0xFD8
  5445                           
  5446                           	psect	bssBANK2
  5447  000200                     __pbssBANK2:
  5448                           	opt stack 0
  5449  000200                     _serial_inputBuffer:
  5450                           	opt stack 0
  5451  000200                     	ds	128
  5452  000280                     _data:
  5453                           	opt stack 0
  5454  000280                     	ds	8
  5455                           tblptru	equ	0xFF8
  5456                           tblptrh	equ	0xFF7
  5457                           tblptrl	equ	0xFF6
  5458                           tablat	equ	0xFF5
  5459                           prodh	equ	0xFF4
  5460                           prodl	equ	0xFF3
  5461                           intcon	equ	0xFF2
  5462                           indf0	equ	0xFEF
  5463                           postinc0	equ	0xFEE
  5464                           fsr0h	equ	0xFEA
  5465                           fsr0l	equ	0xFE9
  5466                           wreg	equ	0xFE8
  5467                           indf1	equ	0xFE7
  5468                           postinc1	equ	0xFE6
  5469                           postdec1	equ	0xFE5
  5470                           fsr1h	equ	0xFE2
  5471                           fsr1l	equ	0xFE1
  5472                           indf2	equ	0xFDF
  5473                           postinc2	equ	0xFDE
  5474                           postdec2	equ	0xFDD
  5475                           plusw2	equ	0xFDB
  5476                           fsr2h	equ	0xFDA
  5477                           fsr2l	equ	0xFD9
  5478                           status	equ	0xFD8
  5479                           
  5480                           	psect	bssBANK3
  5481  000300                     __pbssBANK3:
  5482                           	opt stack 0
  5483  000300                     _crc8_table:
  5484                           	opt stack 0
  5485  000300                     	ds	256
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           intcon	equ	0xFF2
  5493                           indf0	equ	0xFEF
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           indf1	equ	0xFE7
  5499                           postinc1	equ	0xFE6
  5500                           postdec1	equ	0xFE5
  5501                           fsr1h	equ	0xFE2
  5502                           fsr1l	equ	0xFE1
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           plusw2	equ	0xFDB
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511                           	psect	bssBIGRAM
  5512  000400                     __pbssBIGRAM:
  5513                           	opt stack 0
  5514  000400                     _can_inputBuffer:
  5515                           	opt stack 0
  5516  000400                     	ds	494
  5517                           tblptru	equ	0xFF8
  5518                           tblptrh	equ	0xFF7
  5519                           tblptrl	equ	0xFF6
  5520                           tablat	equ	0xFF5
  5521                           prodh	equ	0xFF4
  5522                           prodl	equ	0xFF3
  5523                           intcon	equ	0xFF2
  5524                           indf0	equ	0xFEF
  5525                           postinc0	equ	0xFEE
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           indf1	equ	0xFE7
  5530                           postinc1	equ	0xFE6
  5531                           postdec1	equ	0xFE5
  5532                           fsr1h	equ	0xFE2
  5533                           fsr1l	equ	0xFE1
  5534                           indf2	equ	0xFDF
  5535                           postinc2	equ	0xFDE
  5536                           postdec2	equ	0xFDD
  5537                           plusw2	equ	0xFDB
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542                           	psect	cstackBANK2
  5543  000288                     __pcstackBANK2:
  5544                           	opt stack 0
  5545  000288                     doModeVerbose@id:
  5546                           	opt stack 0
  5547                           
  5548                           ; 4 bytes @ 0x0
  5549  000288                     	ds	4
  5550  00028C                     doModeVerbose@preg:
  5551                           	opt stack 0
  5552                           
  5553                           ; 2 bytes @ 0x4
  5554  00028C                     	ds	2
  5555  00028E                     doModeVerbose@preg_1357:
  5556                           	opt stack 0
  5557                           
  5558                           ; 2 bytes @ 0x6
  5559  00028E                     	ds	2
  5560  000290                     doModeVerbose@filter_class:
  5561                           	opt stack 0
  5562                           
  5563                           ; 2 bytes @ 0x8
  5564  000290                     	ds	2
  5565  000292                     doModeVerbose@mask_class:
  5566                           	opt stack 0
  5567                           
  5568                           ; 2 bytes @ 0xA
  5569  000292                     	ds	2
  5570  000294                     doModeVerbose@filter_priority:
  5571                           	opt stack 0
  5572                           
  5573                           ; 1 bytes @ 0xC
  5574  000294                     	ds	1
  5575  000295                     doModeVerbose@filter_type:
  5576                           	opt stack 0
  5577                           
  5578                           ; 1 bytes @ 0xD
  5579  000295                     	ds	1
  5580  000296                     doModeVerbose@filter_nodeid:
  5581                           	opt stack 0
  5582                           
  5583                           ; 1 bytes @ 0xE
  5584  000296                     	ds	1
  5585  000297                     doModeVerbose@mask_priority:
  5586                           	opt stack 0
  5587                           
  5588                           ; 1 bytes @ 0xF
  5589  000297                     	ds	1
  5590  000298                     doModeVerbose@mask_type:
  5591                           	opt stack 0
  5592                           
  5593                           ; 1 bytes @ 0x10
  5594  000298                     	ds	1
  5595  000299                     doModeVerbose@mask_nodeid:
  5596                           	opt stack 0
  5597                           
  5598                           ; 1 bytes @ 0x11
  5599  000299                     	ds	2
  5600  00029B                     _doModeVerbose$1312:
  5601                           	opt stack 0
  5602                           
  5603                           ; 2 bytes @ 0x13
  5604  00029B                     	ds	2
  5605  00029D                     _doModeVerbose$1317:
  5606                           	opt stack 0
  5607                           
  5608                           ; 2 bytes @ 0x15
  5609  00029D                     	ds	2
  5610  00029F                     _doModeVerbose$1321:
  5611                           	opt stack 0
  5612                           
  5613                           ; 2 bytes @ 0x17
  5614  00029F                     	ds	2
  5615  0002A1                     _doModeVerbose$1326:
  5616                           	opt stack 0
  5617                           
  5618                           ; 2 bytes @ 0x19
  5619  0002A1                     	ds	2
  5620  0002A3                     _doModeVerbose$1334:
  5621                           	opt stack 0
  5622                           
  5623                           ; 2 bytes @ 0x1B
  5624  0002A3                     	ds	2
  5625  0002A5                     _doModeVerbose$1339:
  5626                           	opt stack 0
  5627                           
  5628                           ; 2 bytes @ 0x1D
  5629  0002A5                     	ds	2
  5630  0002A7                     _doModeVerbose$1343:
  5631                           	opt stack 0
  5632                           
  5633                           ; 2 bytes @ 0x1F
  5634  0002A7                     	ds	2
  5635  0002A9                     _doModeVerbose$1366:
  5636                           	opt stack 0
  5637                           
  5638                           ; 2 bytes @ 0x21
  5639  0002A9                     	ds	2
  5640  0002AB                     _doModeVerbose$1372:
  5641                           	opt stack 0
  5642                           
  5643                           ; 2 bytes @ 0x23
  5644  0002AB                     	ds	2
  5645  0002AD                     _doModeVerbose$1381:
  5646                           	opt stack 0
  5647                           
  5648                           ; 2 bytes @ 0x25
  5649  0002AD                     	ds	2
  5650  0002AF                     doModeVerbose@rv:
  5651                           	opt stack 0
  5652                           
  5653                           ; 1 bytes @ 0x27
  5654  0002AF                     	ds	1
  5655  0002B0                     doModeVerbose@page_1349:
  5656                           	opt stack 0
  5657                           
  5658                           ; 1 bytes @ 0x28
  5659  0002B0                     	ds	1
  5660  0002B1                     doModeVerbose@reg_1350:
  5661                           	opt stack 0
  5662                           
  5663                           ; 1 bytes @ 0x29
  5664  0002B1                     	ds	1
  5665  0002B2                     doModeVerbose@value_1375:
  5666                           	opt stack 0
  5667                           
  5668                           ; 1 bytes @ 0x2A
  5669  0002B2                     	ds	1
  5670  0002B3                     doModeVerbose@bPersistent:
  5671                           	opt stack 0
  5672                           
  5673                           ; 1 bytes @ 0x2B
  5674  0002B3                     	ds	1
  5675  0002B4                     doModeVerbose@baudcode:
  5676                           	opt stack 0
  5677                           
  5678                           ; 4 bytes @ 0x2C
  5679  0002B4                     	ds	4
  5680  0002B8                     doModeVerbose@filterno:
  5681                           	opt stack 0
  5682                           
  5683                           ; 1 bytes @ 0x30
  5684  0002B8                     	ds	1
  5685  0002B9                     doModeVerbose@i:
  5686                           	opt stack 0
  5687                           
  5688                           ; 1 bytes @ 0x31
  5689  0002B9                     	ds	1
  5690  0002BA                     doModeVerbose@value_1351:
  5691                           	opt stack 0
  5692                           
  5693                           ; 1 bytes @ 0x32
  5694  0002BA                     	ds	1
  5695  0002BB                     doModeVerbose@count:
  5696                           	opt stack 0
  5697                           
  5698                           ; 1 bytes @ 0x33
  5699  0002BB                     	ds	1
  5700  0002BC                     doModeVerbose@nodeid:
  5701                           	opt stack 0
  5702                           
  5703                           ; 1 bytes @ 0x34
  5704  0002BC                     	ds	1
  5705  0002BD                     doModeVerbose@nodeid_1348:
  5706                           	opt stack 0
  5707                           
  5708                           ; 1 bytes @ 0x35
  5709  0002BD                     	ds	1
  5710  0002BE                     doModeVerbose@maskno:
  5711                           	opt stack 0
  5712                           
  5713                           ; 1 bytes @ 0x36
  5714  0002BE                     	ds	1
  5715  0002BF                     doModeVerbose@page:
  5716                           	opt stack 0
  5717                           
  5718                           ; 1 bytes @ 0x37
  5719  0002BF                     	ds	1
  5720  0002C0                     doModeVerbose@reg:
  5721                           	opt stack 0
  5722                           
  5723                           ; 1 bytes @ 0x38
  5724  0002C0                     	ds	1
  5725  0002C1                     doModeVerbose@i_1293:
  5726                           	opt stack 0
  5727                           
  5728                           ; 1 bytes @ 0x39
  5729  0002C1                     	ds	1
  5730  0002C2                     doModeVerbose@nodeid_1374:
  5731                           	opt stack 0
  5732                           
  5733                           ; 1 bytes @ 0x3A
  5734  0002C2                     	ds	1
  5735  0002C3                     doModeVerbose@c:
  5736                           	opt stack 0
  5737                           
  5738                           ; 1 bytes @ 0x3B
  5739  0002C3                     	ds	1
  5740  0002C4                     doModeVerbose@value:
  5741                           	opt stack 0
  5742                           
  5743                           ; 1 bytes @ 0x3C
  5744  0002C4                     	ds	1
  5745  0002C5                     doModeVerbose@p_1300:
  5746                           	opt stack 0
  5747                           
  5748                           ; 2 bytes @ 0x3D
  5749  0002C5                     	ds	2
  5750  0002C7                     doModeVerbose@p_1353:
  5751                           	opt stack 0
  5752                           
  5753                           ; 2 bytes @ 0x3F
  5754  0002C7                     	ds	2
  5755  0002C9                     doModeVerbose@ifmode:
  5756                           	opt stack 0
  5757                           
  5758                           ; 1 bytes @ 0x41
  5759  0002C9                     	ds	1
  5760  0002CA                     doModeVerbose@p:
  5761                           	opt stack 0
  5762                           
  5763                           ; 2 bytes @ 0x42
  5764  0002CA                     	ds	2
  5765  0002CC                     doModeVerbose@id_1427:
  5766                           	opt stack 0
  5767                           
  5768                           ; 4 bytes @ 0x44
  5769  0002CC                     	ds	4
  5770  0002D0                     doModeVerbose@p_1415:
  5771                           	opt stack 0
  5772                           
  5773                           ; 2 bytes @ 0x48
  5774  0002D0                     	ds	2
  5775  0002D2                     doModeVerbose@p_1392:
  5776                           	opt stack 0
  5777                           
  5778                           ; 2 bytes @ 0x4A
  5779  0002D2                     	ds	2
  5780                           tblptru	equ	0xFF8
  5781                           tblptrh	equ	0xFF7
  5782                           tblptrl	equ	0xFF6
  5783                           tablat	equ	0xFF5
  5784                           prodh	equ	0xFF4
  5785                           prodl	equ	0xFF3
  5786                           intcon	equ	0xFF2
  5787                           indf0	equ	0xFEF
  5788                           postinc0	equ	0xFEE
  5789                           fsr0h	equ	0xFEA
  5790                           fsr0l	equ	0xFE9
  5791                           wreg	equ	0xFE8
  5792                           indf1	equ	0xFE7
  5793                           postinc1	equ	0xFE6
  5794                           postdec1	equ	0xFE5
  5795                           fsr1h	equ	0xFE2
  5796                           fsr1l	equ	0xFE1
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           postdec2	equ	0xFDD
  5800                           plusw2	equ	0xFDB
  5801                           fsr2h	equ	0xFDA
  5802                           fsr2l	equ	0xFD9
  5803                           status	equ	0xFD8
  5804                           
  5805                           	psect	cstackBANK1
  5806  0001B3                     __pcstackBANK1:
  5807                           	opt stack 0
  5808  0001B3                     ??_doModeVerbose:
  5809                           
  5810                           ; 0 bytes @ 0x0
  5811  0001B3                     	ds	20
  5812  0001C7                     
  5813                           ; 2 bytes @ 0x14
  5814  0001C7                     	ds	2
  5815  0001C9                     
  5816                           ; 3 bytes @ 0x16
  5817  0001C9                     	ds	3
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           indf0	equ	0xFEF
  5826                           postinc0	equ	0xFEE
  5827                           fsr0h	equ	0xFEA
  5828                           fsr0l	equ	0xFE9
  5829                           wreg	equ	0xFE8
  5830                           indf1	equ	0xFE7
  5831                           postinc1	equ	0xFE6
  5832                           postdec1	equ	0xFE5
  5833                           fsr1h	equ	0xFE2
  5834                           fsr1l	equ	0xFE1
  5835                           indf2	equ	0xFDF
  5836                           postinc2	equ	0xFDE
  5837                           postdec2	equ	0xFDD
  5838                           plusw2	equ	0xFDB
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8
  5842                           
  5843                           	psect	cstackBANK0
  5844  000060                     __pcstackBANK0:
  5845                           	opt stack 0
  5846  000060                     ??_fifo_getFree:
  5847  000060                     ??_fifo_read:
  5848  000060                     ??_setFilter:
  5849  000060                     ??__CANIDToRegs:
  5850  000060                     ??_hexStringToBytes:
  5851  000060                     ?_crc8:
  5852                           	opt stack 0
  5853  000060                     ?_utoa:
  5854                           	opt stack 0
  5855  000060                     ?_strnicmp:
  5856                           	opt stack 0
  5857  000060                     ?_strspn:
  5858                           	opt stack 0
  5859  000060                     ?_strcspn:
  5860                           	opt stack 0
  5861  000060                     ___lldiv@counter:
  5862                           	opt stack 0
  5863  000060                     crc8@crc:
  5864                           	opt stack 0
  5865  000060                     utoa@buf:
  5866                           	opt stack 0
  5867  000060                     memcpy@d:
  5868                           	opt stack 0
  5869  000060                     strnicmp@s1:
  5870                           	opt stack 0
  5871  000060                     ___wmul@product:
  5872                           	opt stack 0
  5873  000060                     strcspn@s1:
  5874                           	opt stack 0
  5875  000060                     strspn@s1:
  5876                           	opt stack 0
  5877                           
  5878                           ; 2 bytes @ 0x0
  5879  000060                     	ds	1
  5880  000061                     ___lldiv@quotient:
  5881                           	opt stack 0
  5882                           
  5883                           ; 4 bytes @ 0x1
  5884  000061                     	ds	1
  5885  000062                     ?_atoi:
  5886                           	opt stack 0
  5887  000062                     __CANIDToRegs@Value:
  5888                           	opt stack 0
  5889  000062                     crc8@m:
  5890                           	opt stack 0
  5891  000062                     atoi@s:
  5892                           	opt stack 0
  5893  000062                     utoa@val:
  5894                           	opt stack 0
  5895  000062                     memcpy@s:
  5896                           	opt stack 0
  5897  000062                     strnicmp@s2:
  5898                           	opt stack 0
  5899  000062                     strcspn@s2:
  5900                           	opt stack 0
  5901  000062                     strspn@s2:
  5902                           	opt stack 0
  5903                           
  5904                           ; 2 bytes @ 0x2
  5905  000062                     	ds	1
  5906  000063                     ?_sendEscapedUartData:
  5907                           	opt stack 0
  5908  000063                     ?_calcCRC:
  5909                           	opt stack 0
  5910  000063                     ?_ECANSendMessage:
  5911                           	opt stack 0
  5912  000063                     sendEscapedUartData@pcrc:
  5913                           	opt stack 0
  5914  000063                     calcCRC@p:
  5915                           	opt stack 0
  5916  000063                     hexStringToBytes@len:
  5917                           	opt stack 0
  5918  000063                     ECANSendMessage@id:
  5919                           	opt stack 0
  5920                           
  5921                           ; 4 bytes @ 0x3
  5922  000063                     	ds	1
  5923  000064                     ??_atoi:
  5924  000064                     ?_strtok:
  5925                           	opt stack 0
  5926  000064                     fifo_read@p:
  5927                           	opt stack 0
  5928  000064                     utoa@base:
  5929                           	opt stack 0
  5930  000064                     strnicmp@len:
  5931                           	opt stack 0
  5932  000064                     strtok@s1:
  5933                           	opt stack 0
  5934                           
  5935                           ; 2 bytes @ 0x4
  5936  000064                     	ds	1
  5937  000065                     ?___llmod:
  5938                           	opt stack 0
  5939  000065                     sendEscapedUartData@c:
  5940                           	opt stack 0
  5941  000065                     calcCRC@len:
  5942                           	opt stack 0
  5943  000065                     hexStringToBytes@p:
  5944                           	opt stack 0
  5945  000065                     ___llmod@dividend:
  5946                           	opt stack 0
  5947                           
  5948                           ; 4 bytes @ 0x5
  5949  000065                     	ds	1
  5950  000066                     ?_sendVSCPDriverCommandReply:
  5951                           	opt stack 0
  5952  000066                     ?_stristr:
  5953                           	opt stack 0
  5954  000066                     sendVSCPDriverErrorFrame@errorcode:
  5955                           	opt stack 0
  5956  000066                     sendVSCPDriverAck@crc:
  5957                           	opt stack 0
  5958  000066                     sendVSCPDriverNack@crc:
  5959                           	opt stack 0
  5960  000066                     sendVSCPDriverCommandReply@cmdCode:
  5961                           	opt stack 0
  5962  000066                     sendVSCPModeCapabilities@crc:
  5963                           	opt stack 0
  5964  000066                     calcCRC@j:
  5965                           	opt stack 0
  5966  000066                     setFilter@nFilter:
  5967                           	opt stack 0
  5968  000066                     atoi@sign:
  5969                           	opt stack 0
  5970  000066                     fifo_read@i:
  5971                           	opt stack 0
  5972  000066                     utoa@v:
  5973                           	opt stack 0
  5974  000066                     stristr@s1:
  5975                           	opt stack 0
  5976  000066                     strtok@s2:
  5977                           	opt stack 0
  5978                           
  5979                           ; 2 bytes @ 0x6
  5980  000066                     	ds	1
  5981  000067                     sendVSCPDriverErrorFrame@crc:
  5982                           	opt stack 0
  5983  000067                     sendVSCPDriverCommandReply@cmdReplyCode:
  5984                           	opt stack 0
  5985  000067                     calcCRC@crc:
  5986                           	opt stack 0
  5987  000067                     setFilter@sidh:
  5988                           	opt stack 0
  5989  000067                     ECANSendMessage@data:
  5990                           	opt stack 0
  5991  000067                     hexStringToBytes@i:
  5992                           	opt stack 0
  5993  000067                     atoi@a:
  5994                           	opt stack 0
  5995                           
  5996                           ; 2 bytes @ 0x7
  5997  000067                     	ds	1
  5998  000068                     ?_getCANFrame:
  5999                           	opt stack 0
  6000  000068                     sendVSCPDriverCommandReply@crc:
  6001                           	opt stack 0
  6002  000068                     setFilter@sidl:
  6003                           	opt stack 0
  6004  000068                     utoa@c:
  6005                           	opt stack 0
  6006  000068                     getCANFrame@pdlc:
  6007                           	opt stack 0
  6008  000068                     stristr@s2:
  6009                           	opt stack 0
  6010                           
  6011                           ; 2 bytes @ 0x8
  6012  000068                     	ds	1
  6013  000069                     ?_itoa:
  6014                           	opt stack 0
  6015  000069                     setFilter@eidh:
  6016                           	opt stack 0
  6017  000069                     ECANSendMessage@dataLen:
  6018                           	opt stack 0
  6019  000069                     itoa@buf:
  6020                           	opt stack 0
  6021  000069                     ___llmod@divisor:
  6022                           	opt stack 0
  6023                           
  6024                           ; 4 bytes @ 0x9
  6025  000069                     	ds	1
  6026  00006A                     setFilter@eidl:
  6027                           	opt stack 0
  6028  00006A                     ECANSendMessage@msgFlags:
  6029                           	opt stack 0
  6030  00006A                     getCANFrame@pdata:
  6031                           	opt stack 0
  6032                           
  6033                           ; 2 bytes @ 0xA
  6034  00006A                     	ds	1
  6035  00006B                     ??_init_app_ram:
  6036  00006B                     ??_ECANSendMessage:
  6037  00006B                     itoa@val:
  6038                           	opt stack 0
  6039                           
  6040                           ; 2 bytes @ 0xB
  6041  00006B                     	ds	1
  6042  00006C                     ??_receiveSendMultiEventCANAL:
  6043  00006C                     ??_receiveSendEventCANAL:
  6044  00006C                     ?_getVSCPFrame:
  6045                           	opt stack 0
  6046  00006C                     getVSCPFrame@pvscpclass:
  6047                           	opt stack 0
  6048  00006C                     ECANSendMessage@pb:
  6049                           	opt stack 0
  6050                           
  6051                           ; 18 bytes @ 0xC
  6052  00006C                     	ds	1
  6053  00006D                     ?_sprintf:
  6054                           	opt stack 0
  6055  00006D                     ?_ultoa:
  6056                           	opt stack 0
  6057  00006D                     sprintf@sp:
  6058                           	opt stack 0
  6059  00006D                     itoa@base:
  6060                           	opt stack 0
  6061  00006D                     ultoa@buf:
  6062                           	opt stack 0
  6063                           
  6064                           ; 2 bytes @ 0xD
  6065  00006D                     	ds	1
  6066  00006E                     getVSCPFrame@pvscptype:
  6067                           	opt stack 0
  6068                           
  6069                           ; 2 bytes @ 0xE
  6070  00006E                     	ds	1
  6071  00006F                     sprintf@f:
  6072                           	opt stack 0
  6073  00006F                     ultoa@val:
  6074                           	opt stack 0
  6075  00006F                     printFirmwareVersion@wrkbuf:
  6076                           	opt stack 0
  6077                           
  6078                           ; 20 bytes @ 0xF
  6079  00006F                     	ds	1
  6080  000070                     getVSCPFrame@pNodeId:
  6081                           	opt stack 0
  6082  000070                     receiveSendEventCANAL@data:
  6083                           	opt stack 0
  6084  000070                     receiveSendMultiEventCANAL@data:
  6085                           	opt stack 0
  6086                           
  6087                           ; 8 bytes @ 0x10
  6088  000070                     	ds	2
  6089  000072                     getVSCPFrame@pPriority:
  6090                           	opt stack 0
  6091                           
  6092                           ; 2 bytes @ 0x12
  6093  000072                     	ds	1
  6094  000073                     ultoa@base:
  6095                           	opt stack 0
  6096                           
  6097                           ; 2 bytes @ 0x13
  6098  000073                     	ds	1
  6099  000074                     getVSCPFrame@pSize:
  6100                           	opt stack 0
  6101                           
  6102                           ; 2 bytes @ 0x14
  6103  000074                     	ds	1
  6104  000075                     ??_sprintf:
  6105  000075                     ultoa@v:
  6106                           	opt stack 0
  6107                           
  6108                           ; 4 bytes @ 0x15
  6109  000075                     	ds	1
  6110  000076                     getVSCPFrame@pData:
  6111                           	opt stack 0
  6112                           
  6113                           ; 2 bytes @ 0x16
  6114  000076                     	ds	2
  6115  000078                     ??_getVSCPFrame:
  6116  000078                     receiveSendEventCANAL@i:
  6117                           	opt stack 0
  6118  000078                     receiveSendMultiEventCANAL@msgcount:
  6119                           	opt stack 0
  6120  000078                     sprintf@idx:
  6121                           	opt stack 0
  6122                           
  6123                           ; 1 bytes @ 0x18
  6124  000078                     	ds	1
  6125  000079                     ultoa@c:
  6126                           	opt stack 0
  6127  000079                     _sprintf$2270:
  6128                           	opt stack 0
  6129  000079                     receiveSendEventCANAL@timestamp:
  6130                           	opt stack 0
  6131  000079                     receiveSendMultiEventCANAL@timestamp:
  6132                           	opt stack 0
  6133                           
  6134                           ; 4 bytes @ 0x19
  6135  000079                     	ds	1
  6136  00007A                     ??_receiveSendEventSLCAN:
  6137                           
  6138                           ; 0 bytes @ 0x1A
  6139  00007A                     	ds	1
  6140  00007B                     _sprintf$2271:
  6141                           	opt stack 0
  6142                           
  6143                           ; 2 bytes @ 0x1B
  6144  00007B                     	ds	1
  6145  00007C                     getVSCPFrame@id:
  6146                           	opt stack 0
  6147                           
  6148                           ; 4 bytes @ 0x1C
  6149  00007C                     	ds	1
  6150  00007D                     receiveSendMultiEventCANAL@i:
  6151                           	opt stack 0
  6152  00007D                     _sprintf$2277:
  6153                           	opt stack 0
  6154  00007D                     receiveSendEventCANAL@id:
  6155                           	opt stack 0
  6156  00007D                     receiveSendEventSLCAN@id:
  6157                           	opt stack 0
  6158                           
  6159                           ; 4 bytes @ 0x1D
  6160  00007D                     	ds	1
  6161  00007E                     ECANSendMessage@mode:
  6162                           	opt stack 0
  6163  00007E                     receiveSendMultiEventCANAL@id:
  6164                           	opt stack 0
  6165                           
  6166                           ; 4 bytes @ 0x1E
  6167  00007E                     	ds	1
  6168  00007F                     ECANSendMessage@buffers:
  6169                           	opt stack 0
  6170  00007F                     sprintf@ap:
  6171                           	opt stack 0
  6172                           
  6173                           ; 1 bytes @ 0x1F
  6174  00007F                     	ds	1
  6175  000080                     ECANSendMessage@j:
  6176                           	opt stack 0
  6177  000080                     sprintf@prec:
  6178                           	opt stack 0
  6179                           
  6180                           ; 2 bytes @ 0x20
  6181  000080                     	ds	1
  6182  000081                     receiveSendEventCANAL@dlc:
  6183                           	opt stack 0
  6184  000081                     receiveSendEventSLCAN@dlc:
  6185                           	opt stack 0
  6186  000081                     ECANSendMessage@tempBSEL0:
  6187                           	opt stack 0
  6188                           
  6189                           ; 1 bytes @ 0x21
  6190  000081                     	ds	1
  6191  000082                     receiveSendEventCANAL@crc:
  6192                           	opt stack 0
  6193  000082                     receiveSendMultiEventCANAL@dlc:
  6194                           	opt stack 0
  6195  000082                     receiveSendEventSLCAN@i:
  6196                           	opt stack 0
  6197  000082                     ECANSendMessage@tempPtr:
  6198                           	opt stack 0
  6199  000082                     sprintf@width:
  6200                           	opt stack 0
  6201                           
  6202                           ; 2 bytes @ 0x22
  6203  000082                     	ds	1
  6204  000083                     receiveSendMultiEventCANAL@crc:
  6205                           	opt stack 0
  6206                           
  6207                           ; 1 bytes @ 0x23
  6208  000083                     	ds	1
  6209  000084                     init_app_ram@i:
  6210                           	opt stack 0
  6211  000084                     receiveSendMultiEventCANAL@pos:
  6212                           	opt stack 0
  6213  000084                     ECANSendMessage@temp:
  6214                           	opt stack 0
  6215  000084                     sprintf@_val:
  6216                           	opt stack 0
  6217                           
  6218                           ; 4 bytes @ 0x24
  6219  000084                     	ds	1
  6220  000085                     ECANSendMessage@i:
  6221                           	opt stack 0
  6222                           
  6223                           ; 1 bytes @ 0x25
  6224  000085                     	ds	1
  6225  000086                     ECANSendMessage@ptr:
  6226                           	opt stack 0
  6227                           
  6228                           ; 2 bytes @ 0x26
  6229  000086                     	ds	2
  6230  000088                     ?_sendCANFrame:
  6231                           	opt stack 0
  6232  000088                     sprintf@c:
  6233                           	opt stack 0
  6234  000088                     sendCANFrame@id:
  6235                           	opt stack 0
  6236                           
  6237                           ; 4 bytes @ 0x28
  6238  000088                     	ds	1
  6239  000089                     sprintf@flag:
  6240                           	opt stack 0
  6241                           
  6242                           ; 2 bytes @ 0x29
  6243  000089                     	ds	2
  6244  00008B                     ??_receivePrintEventVerbose:
  6245  00008B                     _printStatistics$1606:
  6246                           	opt stack 0
  6247  00008B                     _printErrors$1631:
  6248                           	opt stack 0
  6249                           
  6250                           ; 2 bytes @ 0x2B
  6251  00008B                     	ds	1
  6252  00008C                     sendCANFrame@dlc:
  6253                           	opt stack 0
  6254                           
  6255                           ; 1 bytes @ 0x2C
  6256  00008C                     	ds	1
  6257  00008D                     _printStatistics$1612:
  6258                           	opt stack 0
  6259  00008D                     _printErrors$1637:
  6260                           	opt stack 0
  6261  00008D                     sendCANFrame@pdata:
  6262                           	opt stack 0
  6263                           
  6264                           ; 2 bytes @ 0x2D
  6265  00008D                     	ds	2
  6266  00008F                     ??_doModeSLCAN:
  6267  00008F                     ??_receiveVSCPModeCanalMsg:
  6268  00008F                     ?_sendVSCPFrame:
  6269                           	opt stack 0
  6270  00008F                     _printStatistics$1618:
  6271                           	opt stack 0
  6272  00008F                     _printErrors$1643:
  6273                           	opt stack 0
  6274  00008F                     sendVSCPFrame@vscpclass:
  6275                           	opt stack 0
  6276                           
  6277                           ; 2 bytes @ 0x2F
  6278  00008F                     	ds	1
  6279  000090                     _receivePrintEventVerbose$3691:
  6280                           	opt stack 0
  6281                           
  6282                           ; 4 bytes @ 0x30
  6283  000090                     	ds	1
  6284  000091                     sendVSCPFrame@vscptype:
  6285                           	opt stack 0
  6286  000091                     _printStatistics$1624:
  6287                           	opt stack 0
  6288  000091                     _printErrors$1649:
  6289                           	opt stack 0
  6290                           
  6291                           ; 2 bytes @ 0x31
  6292  000091                     	ds	1
  6293  000092                     sendVSCPFrame@nodeid:
  6294                           	opt stack 0
  6295                           
  6296                           ; 1 bytes @ 0x32
  6297  000092                     	ds	1
  6298  000093                     sendVSCPFrame@priority:
  6299                           	opt stack 0
  6300  000093                     _printErrors$1656:
  6301                           	opt stack 0
  6302                           
  6303                           ; 2 bytes @ 0x33
  6304  000093                     	ds	1
  6305  000094                     sendVSCPFrame@size:
  6306                           	opt stack 0
  6307  000094                     _receivePrintEventVerbose$1506:
  6308                           	opt stack 0
  6309                           
  6310                           ; 2 bytes @ 0x34
  6311  000094                     	ds	1
  6312  000095                     _printErrors$1665:
  6313                           	opt stack 0
  6314  000095                     sendVSCPFrame@pData:
  6315                           	opt stack 0
  6316                           
  6317                           ; 2 bytes @ 0x35
  6318  000095                     	ds	1
  6319  000096                     _receivePrintEventVerbose$1511:
  6320                           	opt stack 0
  6321  000096                     doModeSLCAN@id:
  6322                           	opt stack 0
  6323                           
  6324                           ; 4 bytes @ 0x36
  6325  000096                     	ds	1
  6326  000097                     ??_sendVSCPFrame:
  6327                           
  6328                           ; 0 bytes @ 0x37
  6329  000097                     	ds	1
  6330  000098                     _receivePrintEventVerbose$1516:
  6331                           	opt stack 0
  6332                           
  6333                           ; 2 bytes @ 0x38
  6334  000098                     	ds	2
  6335  00009A                     doModeSLCAN@dlc:
  6336                           	opt stack 0
  6337  00009A                     _receivePrintEventVerbose$1521:
  6338                           	opt stack 0
  6339                           
  6340                           ; 2 bytes @ 0x3A
  6341  00009A                     	ds	1
  6342  00009B                     doModeSLCAN@c:
  6343                           	opt stack 0
  6344                           
  6345                           ; 1 bytes @ 0x3B
  6346  00009B                     	ds	1
  6347  00009C                     doModeSLCAN@rv:
  6348                           	opt stack 0
  6349  00009C                     _receivePrintEventVerbose$1526:
  6350                           	opt stack 0
  6351                           
  6352                           ; 2 bytes @ 0x3C
  6353  00009C                     	ds	2
  6354  00009E                     _receivePrintEventVerbose$1531:
  6355                           	opt stack 0
  6356                           
  6357                           ; 2 bytes @ 0x3E
  6358  00009E                     	ds	2
  6359  0000A0                     _receivePrintEventVerbose$1536:
  6360                           	opt stack 0
  6361                           
  6362                           ; 2 bytes @ 0x40
  6363  0000A0                     	ds	2
  6364  0000A2                     receivePrintEventVerbose@i:
  6365                           	opt stack 0
  6366                           
  6367                           ; 1 bytes @ 0x42
  6368  0000A2                     	ds	1
  6369  0000A3                     receiveVSCPModeCanalMsg@data:
  6370                           	opt stack 0
  6371                           
  6372                           ; 8 bytes @ 0x43
  6373  0000A3                     	ds	8
  6374  0000AB                     receiveVSCPModeCanalMsg@id:
  6375                           	opt stack 0
  6376  0000AB                     sendVSCPFrame@id:
  6377                           	opt stack 0
  6378                           
  6379                           ; 4 bytes @ 0x4B
  6380  0000AB                     	ds	4
  6381  0000AF                     ?_readRegisterExtended:
  6382                           	opt stack 0
  6383  0000AF                     ?_writeRegisterExtended:
  6384                           	opt stack 0
  6385  0000AF                     ?_readRegister:
  6386                           	opt stack 0
  6387  0000AF                     receiveVSCPModeCanalMsg@dlc:
  6388                           	opt stack 0
  6389  0000AF                     readRegister@reg:
  6390                           	opt stack 0
  6391  0000AF                     readRegisterExtended@page:
  6392                           	opt stack 0
  6393  0000AF                     writeRegisterExtended@page:
  6394                           	opt stack 0
  6395                           
  6396                           ; 2 bytes @ 0x4F
  6397  0000AF                     	ds	1
  6398  0000B0                     ??_doModeVscp:
  6399  0000B0                     readRegister@timeout:
  6400                           	opt stack 0
  6401                           
  6402                           ; 2 bytes @ 0x50
  6403  0000B0                     	ds	1
  6404  0000B1                     readRegisterExtended@reg:
  6405                           	opt stack 0
  6406  0000B1                     writeRegisterExtended@reg:
  6407                           	opt stack 0
  6408                           
  6409                           ; 1 bytes @ 0x51
  6410  0000B1                     	ds	1
  6411  0000B2                     readRegister@value:
  6412                           	opt stack 0
  6413  0000B2                     readRegisterExtended@timeout:
  6414                           	opt stack 0
  6415  0000B2                     writeRegisterExtended@timeout:
  6416                           	opt stack 0
  6417                           
  6418                           ; 2 bytes @ 0x52
  6419  0000B2                     	ds	1
  6420  0000B3                     ??_readRegister:
  6421                           
  6422                           ; 0 bytes @ 0x53
  6423  0000B3                     	ds	1
  6424  0000B4                     doModeVscp@filter:
  6425                           	opt stack 0
  6426  0000B4                     readRegisterExtended@value:
  6427                           	opt stack 0
  6428  0000B4                     writeRegisterExtended@value:
  6429                           	opt stack 0
  6430                           
  6431                           ; 2 bytes @ 0x54
  6432  0000B4                     	ds	1
  6433  0000B5                     doModeVscp@mask:
  6434                           	opt stack 0
  6435                           
  6436                           ; 1 bytes @ 0x55
  6437  0000B5                     	ds	1
  6438  0000B6                     ??_readRegisterExtended:
  6439  0000B6                     ??_writeRegisterExtended:
  6440  0000B6                     doModeVscp@c:
  6441                           	opt stack 0
  6442                           
  6443                           ; 1 bytes @ 0x56
  6444  0000B6                     	ds	1
  6445  0000B7                     readRegister@nodeid:
  6446                           	opt stack 0
  6447                           
  6448                           ; 1 bytes @ 0x57
  6449  0000B7                     	ds	1
  6450  0000B8                     printGUID@nodeid:
  6451                           	opt stack 0
  6452  0000B8                     printMDF@nodeid:
  6453                           	opt stack 0
  6454  0000B8                     printNodeFirmwareVersion@nodeid:
  6455                           	opt stack 0
  6456                           
  6457                           ; 1 bytes @ 0x58
  6458  0000B8                     	ds	1
  6459  0000B9                     printMDF@value:
  6460                           	opt stack 0
  6461  0000B9                     printGUID@buf:
  6462                           	opt stack 0
  6463  0000B9                     printNodeFirmwareVersion@buf:
  6464                           	opt stack 0
  6465                           
  6466                           ; 3 bytes @ 0x59
  6467  0000B9                     	ds	1
  6468  0000BA                     readRegisterExtended@nodeid:
  6469                           	opt stack 0
  6470  0000BA                     writeRegisterExtended@nodeid:
  6471                           	opt stack 0
  6472  0000BA                     printMDF@p:
  6473                           	opt stack 0
  6474                           
  6475                           ; 2 bytes @ 0x5A
  6476  0000BA                     	ds	2
  6477  0000BC                     printGUID@value:
  6478                           	opt stack 0
  6479  0000BC                     printMDF@i:
  6480                           	opt stack 0
  6481  0000BC                     printNodeFirmwareVersion@value:
  6482                           	opt stack 0
  6483                           
  6484                           ; 1 bytes @ 0x5C
  6485  0000BC                     	ds	1
  6486  0000BD                     printGUID@i:
  6487                           	opt stack 0
  6488  0000BD                     printNodeFirmwareVersion@i:
  6489                           	opt stack 0
  6490                           
  6491                           ; 1 bytes @ 0x5D
  6492  0000BD                     	ds	1
  6493  0000BE                     _findNodes$1711:
  6494                           	opt stack 0
  6495                           
  6496                           ; 2 bytes @ 0x5E
  6497  0000BE                     	ds	2
  6498  0000C0                     findNodes@nFound:
  6499                           	opt stack 0
  6500                           
  6501                           ; 1 bytes @ 0x60
  6502  0000C0                     	ds	1
  6503  0000C1                     findNodes@value:
  6504                           	opt stack 0
  6505                           
  6506                           ; 1 bytes @ 0x61
  6507  0000C1                     	ds	1
  6508  0000C2                     findNodes@bDot:
  6509                           	opt stack 0
  6510                           
  6511                           ; 1 bytes @ 0x62
  6512  0000C2                     	ds	1
  6513  0000C3                     findNodes@i:
  6514                           	opt stack 0
  6515                           
  6516                           ; 1 bytes @ 0x63
  6517  0000C3                     	ds	1
  6518  0000C4                     ??_main:
  6519                           
  6520                           ; 0 bytes @ 0x64
  6521  0000C4                     	ds	1
  6522  0000C5                     main@c:
  6523                           	opt stack 0
  6524                           
  6525                           ; 1 bytes @ 0x65
  6526  0000C5                     	ds	1
  6527                           tblptru	equ	0xFF8
  6528                           tblptrh	equ	0xFF7
  6529                           tblptrl	equ	0xFF6
  6530                           tablat	equ	0xFF5
  6531                           prodh	equ	0xFF4
  6532                           prodl	equ	0xFF3
  6533                           intcon	equ	0xFF2
  6534                           indf0	equ	0xFEF
  6535                           postinc0	equ	0xFEE
  6536                           fsr0h	equ	0xFEA
  6537                           fsr0l	equ	0xFE9
  6538                           wreg	equ	0xFE8
  6539                           indf1	equ	0xFE7
  6540                           postinc1	equ	0xFE6
  6541                           postdec1	equ	0xFE5
  6542                           fsr1h	equ	0xFE2
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           plusw2	equ	0xFDB
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552                           	psect	cstackCOMRAM
  6553  000001                     __pcstackCOMRAM:
  6554                           	opt stack 0
  6555  000001                     ?__RegsToCANID:
  6556                           	opt stack 0
  6557  000001                     ?i1_WriteTimer0:
  6558                           	opt stack 0
  6559  000001                     ?_fifo_write:
  6560                           	opt stack 0
  6561  000001                     ?__ECANPointBuffer:
  6562                           	opt stack 0
  6563  000001                     ?i1_fifo_getFree:
  6564                           	opt stack 0
  6565  000001                     ReadUSART@data:
  6566                           	opt stack 0
  6567  000001                     __RegsToCANID@ptr:
  6568                           	opt stack 0
  6569  000001                     fifo_write@f:
  6570                           	opt stack 0
  6571  000001                     i1fifo_getFree@f:
  6572                           	opt stack 0
  6573  000001                     i1WriteTimer0@timer0:
  6574                           	opt stack 0
  6575                           
  6576                           ; 2 bytes @ 0x0
  6577  000001                     	ds	2
  6578  000003                     ??i1_fifo_getFree:
  6579  000003                     __RegsToCANID@val:
  6580                           	opt stack 0
  6581  000003                     fifo_write@buf:
  6582                           	opt stack 0
  6583  000003                     i1WriteTimer0@timer:
  6584                           	opt stack 0
  6585                           
  6586                           ; 2 bytes @ 0x2
  6587  000003                     	ds	1
  6588  000004                     __RegsToCANID@type:
  6589                           	opt stack 0
  6590  000004                     __ECANPointBuffer@b:
  6591                           	opt stack 0
  6592                           
  6593                           ; 1 bytes @ 0x3
  6594  000004                     	ds	1
  6595  000005                     ??__RegsToCANID:
  6596  000005                     __ECANPointBuffer@pt:
  6597                           	opt stack 0
  6598  000005                     fifo_write@nbytes:
  6599                           	opt stack 0
  6600                           
  6601                           ; 4 bytes @ 0x4
  6602  000005                     	ds	2
  6603  000007                     __RegsToCANID@Value:
  6604                           	opt stack 0
  6605                           
  6606                           ; 1 bytes @ 0x6
  6607  000007                     	ds	1
  6608  000008                     ?_ECANReceiveMessage:
  6609                           	opt stack 0
  6610  000008                     ECANReceiveMessage@data:
  6611                           	opt stack 0
  6612                           
  6613                           ; 2 bytes @ 0x7
  6614  000008                     	ds	1
  6615  000009                     ??_fifo_write:
  6616                           
  6617                           ; 0 bytes @ 0x8
  6618  000009                     	ds	1
  6619  00000A                     ECANReceiveMessage@dataLen:
  6620                           	opt stack 0
  6621                           
  6622                           ; 1 bytes @ 0x9
  6623  00000A                     	ds	1
  6624  00000B                     ECANReceiveMessage@msgFlags:
  6625                           	opt stack 0
  6626                           
  6627                           ; 1 bytes @ 0xA
  6628  00000B                     	ds	1
  6629  00000C                     ECANReceiveMessage@savedPtr:
  6630                           	opt stack 0
  6631                           
  6632                           ; 2 bytes @ 0xB
  6633  00000C                     	ds	1
  6634  00000D                     fifo_write@p:
  6635                           	opt stack 0
  6636                           
  6637                           ; 2 bytes @ 0xC
  6638  00000D                     	ds	1
  6639  00000E                     ECANReceiveMessage@id:
  6640                           	opt stack 0
  6641                           
  6642                           ; 1 bytes @ 0xD
  6643  00000E                     	ds	1
  6644  00000F                     ECANReceiveMessage@i:
  6645                           	opt stack 0
  6646  00000F                     fifo_write@i:
  6647                           	opt stack 0
  6648                           
  6649                           ; 4 bytes @ 0xE
  6650  00000F                     	ds	1
  6651  000010                     ECANReceiveMessage@mode:
  6652                           	opt stack 0
  6653                           
  6654                           ; 1 bytes @ 0xF
  6655  000010                     	ds	1
  6656  000011                     ECANReceiveMessage@temp:
  6657                           	opt stack 0
  6658                           
  6659                           ; 1 bytes @ 0x10
  6660  000011                     	ds	1
  6661  000012                     ECANReceiveMessage@ptr:
  6662                           	opt stack 0
  6663                           
  6664                           ; 2 bytes @ 0x11
  6665  000012                     	ds	2
  6666  000014                     ??_Interrupt:
  6667                           
  6668                           ; 0 bytes @ 0x13
  6669  000014                     	ds	9
  6670  00001D                     Interrupt@c:
  6671                           	opt stack 0
  6672                           
  6673                           ; 1 bytes @ 0x1C
  6674  00001D                     	ds	1
  6675  00001E                     Interrupt@fail:
  6676                           	opt stack 0
  6677                           
  6678                           ; 1 bytes @ 0x1D
  6679  00001E                     	ds	1
  6680  00001F                     ?_WriteTimer0:
  6681                           	opt stack 0
  6682  00001F                     ?_fifo_init:
  6683                           	opt stack 0
  6684  00001F                     ?_OpenUSART:
  6685                           	opt stack 0
  6686  00001F                     ?_WriteTimer3:
  6687                           	opt stack 0
  6688  00001F                     ?_Write_b_eep:
  6689                           	opt stack 0
  6690  00001F                     ??_isdigit:
  6691  00001F                     ?_Read_b_eep:
  6692                           	opt stack 0
  6693  00001F                     ?_fifo_getFree:
  6694                           	opt stack 0
  6695  00001F                     ?_fifo_read:
  6696                           	opt stack 0
  6697  00001F                     ?_memset:
  6698                           	opt stack 0
  6699  00001F                     ?_strcpy:
  6700                           	opt stack 0
  6701  00001F                     ?_strchr:
  6702                           	opt stack 0
  6703  00001F                     ?_strlen:
  6704                           	opt stack 0
  6705  00001F                     ?_memcpy:
  6706                           	opt stack 0
  6707  00001F                     ?_ReadTimer3:
  6708                           	opt stack 0
  6709  00001F                     ?_strcat:
  6710                           	opt stack 0
  6711  00001F                     ?___lwdiv:
  6712                           	opt stack 0
  6713  00001F                     ?___lwmod:
  6714                           	opt stack 0
  6715  00001F                     ?___lldiv:
  6716                           	opt stack 0
  6717  00001F                     ECANSetOperationMode@mode:
  6718                           	opt stack 0
  6719  00001F                     nibbleFromChar@c:
  6720                           	opt stack 0
  6721  00001F                     OpenTimer0@config:
  6722                           	opt stack 0
  6723  00001F                     OpenTimer3@config:
  6724                           	opt stack 0
  6725  00001F                     WriteUSART@data:
  6726                           	opt stack 0
  6727  00001F                     toupper@c:
  6728                           	opt stack 0
  6729  00001F                     fifo_init@f:
  6730                           	opt stack 0
  6731  00001F                     fifo_read@f:
  6732                           	opt stack 0
  6733  00001F                     fifo_getFree@f:
  6734                           	opt stack 0
  6735  00001F                     _init_crc8$2208:
  6736                           	opt stack 0
  6737  00001F                     Read_b_eep@badd:
  6738                           	opt stack 0
  6739  00001F                     Write_b_eep@badd:
  6740                           	opt stack 0
  6741  00001F                     WriteTimer0@timer0:
  6742                           	opt stack 0
  6743  00001F                     WriteTimer3@timer3:
  6744                           	opt stack 0
  6745  00001F                     OpenUSART@spbrg:
  6746                           	opt stack 0
  6747  00001F                     ___lwdiv@dividend:
  6748                           	opt stack 0
  6749  00001F                     ___lwmod@dividend:
  6750                           	opt stack 0
  6751  00001F                     memcpy@d1:
  6752                           	opt stack 0
  6753  00001F                     memset@p1:
  6754                           	opt stack 0
  6755  00001F                     strcat@to:
  6756                           	opt stack 0
  6757  00001F                     strchr@ptr:
  6758                           	opt stack 0
  6759  00001F                     strcpy@to:
  6760                           	opt stack 0
  6761  00001F                     strlen@s:
  6762                           	opt stack 0
  6763  00001F                     ___lldiv@dividend:
  6764                           	opt stack 0
  6765                           
  6766                           ; 4 bytes @ 0x1E
  6767  00001F                     	ds	1
  6768  000020                     ?_putsUSART:
  6769                           	opt stack 0
  6770  000020                     ??_printBinary:
  6771  000020                     ?_strichr:
  6772                           	opt stack 0
  6773  000020                     _isdigit$3283:
  6774                           	opt stack 0
  6775  000020                     putsUSART@data:
  6776                           	opt stack 0
  6777  000020                     strichr@ptr:
  6778                           	opt stack 0
  6779                           
  6780                           ; 2 bytes @ 0x1F
  6781  000020                     	ds	1
  6782  000021                     ?__CANIDToRegs:
  6783                           	opt stack 0
  6784  000021                     Write_b_eep@bdat:
  6785                           	opt stack 0
  6786  000021                     OpenUSART@config:
  6787                           	opt stack 0
  6788  000021                     isdigit@c:
  6789                           	opt stack 0
  6790  000021                     __CANIDToRegs@ptr:
  6791                           	opt stack 0
  6792  000021                     fifo_init@buf:
  6793                           	opt stack 0
  6794  000021                     fifo_read@buf:
  6795                           	opt stack 0
  6796  000021                     init_crc8@j:
  6797                           	opt stack 0
  6798  000021                     WriteTimer0@timer:
  6799                           	opt stack 0
  6800  000021                     ReadTimer3@timer:
  6801                           	opt stack 0
  6802  000021                     WriteTimer3@timer:
  6803                           	opt stack 0
  6804  000021                     ___lwdiv@divisor:
  6805                           	opt stack 0
  6806  000021                     ___lwmod@divisor:
  6807                           	opt stack 0
  6808  000021                     memcpy@s1:
  6809                           	opt stack 0
  6810  000021                     memset@c:
  6811                           	opt stack 0
  6812  000021                     strcat@from:
  6813                           	opt stack 0
  6814  000021                     strchr@chr:
  6815                           	opt stack 0
  6816  000021                     strcpy@from:
  6817                           	opt stack 0
  6818  000021                     strlen@cp:
  6819                           	opt stack 0
  6820                           
  6821                           ; 2 bytes @ 0x20
  6822  000021                     	ds	1
  6823  000022                     ??_putsUSART:
  6824  000022                     printBinary@value:
  6825                           	opt stack 0
  6826  000022                     changeBaudrate@nBaud:
  6827                           	opt stack 0
  6828  000022                     Write_b_eep@GIE_BIT_VAL:
  6829                           	opt stack 0
  6830  000022                     strichr@chr:
  6831                           	opt stack 0
  6832                           
  6833                           ; 2 bytes @ 0x21
  6834  000022                     	ds	1
  6835  000023                     ?_setFilter:
  6836                           	opt stack 0
  6837  000023                     ??_strchr:
  6838  000023                     ??_strnicmp:
  6839  000023                     ?_hexStringToBytes:
  6840                           	opt stack 0
  6841  000023                     ?___wmul:
  6842                           	opt stack 0
  6843  000023                     init_app_eeprom@i:
  6844                           	opt stack 0
  6845  000023                     init_crc8@crc:
  6846                           	opt stack 0
  6847  000023                     ___lwdiv@counter:
  6848                           	opt stack 0
  6849  000023                     ___lwmod@counter:
  6850                           	opt stack 0
  6851  000023                     printBinary@i:
  6852                           	opt stack 0
  6853  000023                     fifo_init@size:
  6854                           	opt stack 0
  6855  000023                     fifo_read@nbytes:
  6856                           	opt stack 0
  6857  000023                     hexStringToBytes@buf:
  6858                           	opt stack 0
  6859  000023                     memcpy@n:
  6860                           	opt stack 0
  6861  000023                     memset@n:
  6862                           	opt stack 0
  6863  000023                     strcat@cp:
  6864                           	opt stack 0
  6865  000023                     strcpy@cp:
  6866                           	opt stack 0
  6867  000023                     ___wmul@multiplier:
  6868                           	opt stack 0
  6869  000023                     setFilter@val:
  6870                           	opt stack 0
  6871  000023                     __CANIDToRegs@val:
  6872                           	opt stack 0
  6873  000023                     ___lldiv@divisor:
  6874                           	opt stack 0
  6875                           
  6876                           ; 4 bytes @ 0x22
  6877  000023                     	ds	1
  6878  000024                     init_crc8@i:
  6879                           	opt stack 0
  6880  000024                     ___lwdiv@quotient:
  6881                           	opt stack 0
  6882                           
  6883                           ; 2 bytes @ 0x23
  6884  000024                     	ds	1
  6885  000025                     getCANFrame@pid:
  6886                           	opt stack 0
  6887  000025                     hexStringToBytes@size:
  6888                           	opt stack 0
  6889  000025                     strnicmp@r:
  6890                           	opt stack 0
  6891  000025                     memset@p:
  6892                           	opt stack 0
  6893  000025                     ___wmul@multiplicand:
  6894                           	opt stack 0
  6895  000025                     strcspn@i:
  6896                           	opt stack 0
  6897  000025                     strspn@i:
  6898                           	opt stack 0
  6899                           
  6900                           ; 2 bytes @ 0x24
  6901  000025                     	ds	1
  6902  000026                     ??_crc8:
  6903  000026                     hexStringToBytes@inhex:
  6904                           	opt stack 0
  6905                           
  6906                           ; 2 bytes @ 0x25
  6907  000026                     	ds	1
  6908  000027                     setFilter@bPersistent:
  6909                           	opt stack 0
  6910  000027                     __CANIDToRegs@type:
  6911                           	opt stack 0
  6912  000027                     ___llmod@counter:
  6913                           	opt stack 0
  6914                           
  6915                           ; 1 bytes @ 0x26
  6916  000027                     	ds	1
  6917  000028                     tblptru	equ	0xFF8
  6918                           tblptrh	equ	0xFF7
  6919                           tblptrl	equ	0xFF6
  6920                           tablat	equ	0xFF5
  6921                           prodh	equ	0xFF4
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           indf0	equ	0xFEF
  6925                           postinc0	equ	0xFEE
  6926                           fsr0h	equ	0xFEA
  6927                           fsr0l	equ	0xFE9
  6928                           wreg	equ	0xFE8
  6929                           indf1	equ	0xFE7
  6930                           postinc1	equ	0xFE6
  6931                           postdec1	equ	0xFE5
  6932                           fsr1h	equ	0xFE2
  6933                           fsr1l	equ	0xFE1
  6934                           indf2	equ	0xFDF
  6935                           postinc2	equ	0xFDE
  6936                           postdec2	equ	0xFDD
  6937                           plusw2	equ	0xFDB
  6938                           fsr2h	equ	0xFDA
  6939                           fsr2l	equ	0xFD9
  6940                           status	equ	0xFD8
  6941                           
  6942                           ; 0 bytes @ 0x27
  6943 ;;
  6944 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6945 ;;
  6946 ;; *************** function _main *****************
  6947 ;; Defined at:
  6948 ;;		line 307 in file "main.c"
  6949 ;; Parameters:    Size  Location     Type
  6950 ;;  argc            2   20[BANK1 ] int 
  6951 ;;  argv            3   22[BANK1 ] PTR PTR unsigned char 
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  c               1  101[BANK0 ] unsigned char 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  2   20[BANK1 ] int 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : F/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6963 ;;      Params:         0       0       5       0       0       0       0
  6964 ;;      Locals:         0       1       0       0       0       0       0
  6965 ;;      Temps:          0       1       0       0       0       0       0
  6966 ;;      Totals:         0       2       5       0       0       0       0
  6967 ;;Total ram usage:        7 bytes
  6968 ;; Hardware stack levels required when called:   11
  6969 ;; This function calls:
  6970 ;;		_fifo_getFree
  6971 ;;		_fifo_init
  6972 ;;		_init_crc8
  6973 ;;		_Read_b_eep
  6974 ;;		_vscp_restoreDefaults
  6975 ;;		_init
  6976 ;;		_putsUSART
  6977 ;;		_printFirmwareVersion
  6978 ;;		_printMode
  6979 ;;		_fifo_read
  6980 ;;		_ECANSetOperationMode
  6981 ;;		_doModeVerbose
  6982 ;;		_doModeVscp
  6983 ;;		_doModeSLCAN
  6984 ;;		_doModeVscpNode
  6985 ;; This function is called by:
  6986 ;;		Startup code after reset
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text0
  6991  00401A                     __ptext0:
  6992                           	opt stack 0
  6993  00401A                     _main:
  6994                           	opt stack 20
  6995                           
  6996                           ;main.c: 309: caps.maxVscpFrames = 1;
  6997                           
  6998                           ;incstack = 0
  6999                           ;incstack = 0
  7000  00401A  0E01               	movlw	1
  7001  00401C  0100               	movlb	0	; () banked
  7002  00401E  6FFC               	movwf	_caps& (0+255),b
  7003                           
  7004                           ;main.c: 310: caps.maxCanalFrames = 1;
  7005  004020  6FFD               	movwf	(_caps+1)& (0+255),b
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 315: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  7009  004022  0E00               	movlw	high _serialInputFifo
  7010  004024  6E20               	movwf	?_fifo_init+1,c
  7011  004026  0EF4               	movlw	low _serialInputFifo
  7012  004028  6E1F               	movwf	?_fifo_init,c
  7013  00402A  0102               	movlb	2	; () banked
  7014  00402C  0E02               	movlw	high _serial_inputBuffer
  7015  00402E  6E22               	movwf	?_fifo_init+3,c
  7016  004030  0E00               	movlw	low _serial_inputBuffer
  7017  004032  6E21               	movwf	?_fifo_init+2,c
  7018  004034  6A24               	clrf	?_fifo_init+5,c
  7019  004036  0E80               	movlw	128
  7020  004038  6E23               	movwf	?_fifo_init+4,c
  7021  00403A  ECB8  F033         	call	_fifo_init	;wreg free
  7022                           
  7023                           ;main.c: 316: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  7024  00403E  0E34               	movlw	low _canInputFifo
  7025  004040  6E1F               	movwf	?_fifo_init,c
  7026  004042  0E00               	movlw	high _canInputFifo
  7027  004044  6E20               	movwf	?_fifo_init+1,c
  7028  004046  0E0F               	movlw	15
  7029  004048  6E20               	movwf	?_fifo_init+1,c
  7030  00404A  0E5F               	movlw	__accesstop+-1
  7031  00404C  641F               	cpfsgt	?_fifo_init,c
  7032  00404E  6A20               	clrf	?_fifo_init+1,c
  7033  004050  0E04               	movlw	high _can_inputBuffer
  7034  004052  6E22               	movwf	?_fifo_init+3,c
  7035  004054  0E00               	movlw	low _can_inputBuffer
  7036  004056  6E21               	movwf	?_fifo_init+2,c
  7037  004058  0E01               	movlw	1
  7038  00405A  6E24               	movwf	?_fifo_init+5,c
  7039  00405C  0EEE               	movlw	238
  7040  00405E  6E23               	movwf	?_fifo_init+4,c
  7041  004060  ECB8  F033         	call	_fifo_init	;wreg free
  7042                           
  7043                           ;main.c: 319: init_crc8();
  7044  004064  EC2E  F031         	call	_init_crc8	;wreg free
  7045                           
  7046                           ;main.c: 323: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  7047                           ;main.c: 324: ( 0xaa != Read_b_eep(0x02) ) ) {
  7048  004068  6A20               	clrf	?_Read_b_eep+1,c
  7049  00406A  0E01               	movlw	1
  7050  00406C  6E1F               	movwf	?_Read_b_eep,c
  7051  00406E  ECA7  F035         	call	_Read_b_eep	;wreg free
  7052  004072  0A55               	xorlw	85
  7053  004074  E107               	bnz	l15232
  7054  004076  6A20               	clrf	?_Read_b_eep+1,c
  7055  004078  0E02               	movlw	2
  7056  00407A  6E1F               	movwf	?_Read_b_eep,c
  7057  00407C  ECA7  F035         	call	_Read_b_eep	;wreg free
  7058  004080  0AAA               	xorlw	170
  7059  004082  A4D8               	btfss	status,2,c
  7060  004084                     l15232:
  7061                           
  7062                           ;main.c: 325: vscp_restoreDefaults();
  7063  004084  ECC2  F035         	call	_vscp_restoreDefaults	;wreg free
  7064                           
  7065                           ;main.c: 326: }
  7066                           ;main.c: 329: init();
  7067  004088  EC29  F032         	call	_init	;wreg free
  7068                           
  7069                           ;main.c: 333: _delay((unsigned long)((10)*(40000000/4000.0)));
  7070  00408C  0E82               	movlw	130
  7071  00408E  0100               	movlb	0	; () banked
  7072  004090  6FC4               	movwf	??_main& (0+255),b
  7073  004092  0EDD               	movlw	221
  7074  004094                     u25357:
  7075  004094  2EE8               	decfsz	wreg,f,c
  7076  004096  D7FE               	goto	u25357
  7077  004098  2FC4               	decfsz	??_main& (0+255),f,b
  7078  00409A  D7FC               	goto	u25357
  7079  00409C  D000               	nop2	
  7080                           
  7081                           ;main.c: 337: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  7082  00409E  0E78               	movlw	high STR_1
  7083  0040A0  6E21               	movwf	?_putsUSART+1,c
  7084  0040A2  0E31               	movlw	low STR_1
  7085  0040A4  6E20               	movwf	?_putsUSART,c
  7086  0040A6  ECDF  F032         	call	_putsUSART	;wreg free
  7087                           
  7088                           ;main.c: 338: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  7089  0040AA  0E71               	movlw	high STR_2
  7090  0040AC  6E21               	movwf	?_putsUSART+1,c
  7091  0040AE  0E57               	movlw	low STR_2
  7092  0040B0  6E20               	movwf	?_putsUSART,c
  7093  0040B2  ECDF  F032         	call	_putsUSART	;wreg free
  7094                           
  7095                           ;main.c: 339: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  7096  0040B6  0E78               	movlw	high STR_3
  7097  0040B8  6E21               	movwf	?_putsUSART+1,c
  7098  0040BA  0EC3               	movlw	low STR_3
  7099  0040BC  6E20               	movwf	?_putsUSART,c
  7100  0040BE  ECDF  F032         	call	_putsUSART	;wreg free
  7101                           
  7102                           ;main.c: 340: printFirmwareVersion();
  7103  0040C2  EC39  F02F         	call	_printFirmwareVersion	;wreg free
  7104                           
  7105                           ;main.c: 341: printMode();
  7106  0040C6  ECF5  F030         	call	_printMode	;wreg free
  7107                           
  7108                           ;main.c: 345: if ( 0 != mode ) {
  7109  0040CA  0100               	movlb	0	; () banked
  7110  0040CC  51F1               	movf	_mode& (0+255),w,b
  7111  0040CE  E037               	bz	l15266
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;main.c: 347: uint8_t c;
  7115                           ;main.c: 349: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  7116  0040D0  0E72               	movlw	high STR_4
  7117  0040D2  6E21               	movwf	?_putsUSART+1,c
  7118  0040D4  0E70               	movlw	low STR_4
  7119  0040D6  6E20               	movwf	?_putsUSART,c
  7120  0040D8  ECDF  F032         	call	_putsUSART	;wreg free
  7121                           
  7122                           ;main.c: 351: timekeeper = 0;
  7123  0040DC  0100               	movlb	0	; () banked
  7124  0040DE  6BDE               	clrf	_timekeeper& (0+255),b	;volatile
  7125  0040E0  6BDF               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  7126  0040E2  6BE0               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  7127  0040E4  6BE1               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;main.c: 352: ledFunctionality = 6;
  7131  0040E6  0E06               	movlw	6
  7132  0040E8  6E32               	movwf	_ledFunctionality,c	;volatile
  7133                           
  7134                           ;main.c: 353: while (timekeeper < 3000) {
  7135  0040EA  D020               	goto	l15264
  7136  0040EC                     l464:
  7137                           
  7138                           ; BSR set to: 0
  7139  0040EC  0004               	clrwdt		;# 
  7140                           
  7141                           ;main.c: 355: (INTCONbits.GIE = 0);
  7142  0040EE  9EF2               	bcf	intcon,7,c	;volatile
  7143                           
  7144                           ;main.c: 356: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  7145  0040F0  0100               	movlb	0	; () banked
  7146  0040F2  0E00               	movlw	high _serialInputFifo
  7147  0040F4  6E20               	movwf	?_fifo_read+1,c
  7148  0040F6  0EF4               	movlw	low _serialInputFifo
  7149  0040F8  6E1F               	movwf	?_fifo_read,c
  7150  0040FA  0E00               	movlw	high main@c
  7151  0040FC  6E22               	movwf	?_fifo_read+3,c
  7152  0040FE  0EC5               	movlw	low main@c
  7153  004100  6E21               	movwf	?_fifo_read+2,c
  7154  004102  6A24               	clrf	?_fifo_read+5,c
  7155  004104  0E01               	movlw	1
  7156  004106  6E23               	movwf	?_fifo_read+4,c
  7157  004108  ECA6  F029         	call	_fifo_read	;wreg free
  7158  00410C  041F               	decf	?_fifo_read,w,c
  7159  00410E  1020               	iorwf	?_fifo_read+1,w,c
  7160  004110  E10C               	bnz	l465
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;main.c: 357: (INTCONbits.GIE = 1);
  7164  004112  8EF2               	bsf	intcon,7,c	;volatile
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;main.c: 358: if ('v' == c) {
  7168  004114  51C5               	movf	main@c& (0+255),w,b
  7169  004116  0A76               	xorlw	118
  7170  004118  E108               	bnz	l465
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;main.c: 359: mode = 0;
  7174  00411A  6BF1               	clrf	_mode& (0+255),b
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;main.c: 360: putsUSART((char *) "Temporary verbose mode set\r\n");
  7178  00411C  0E7A               	movlw	high STR_5
  7179  00411E  6E21               	movwf	?_putsUSART+1,c
  7180  004120  0E29               	movlw	low STR_5
  7181  004122  6E20               	movwf	?_putsUSART,c
  7182  004124  ECDF  F032         	call	_putsUSART	;wreg free
  7183                           
  7184                           ;main.c: 361: break;
  7185  004128  D00A               	goto	l15266
  7186  00412A                     l465:
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;main.c: 362: }
  7190                           ;main.c: 363: }
  7191                           ;main.c: 364: (INTCONbits.GIE = 1);
  7192  00412A  8EF2               	bsf	intcon,7,c	;volatile
  7193  00412C                     l15264:
  7194                           
  7195                           ; BSR set to: 0
  7196  00412C  0EB8               	movlw	184
  7197  00412E  5DDE               	subwf	_timekeeper& (0+255),w,b	;volatile
  7198  004130  0E0B               	movlw	11
  7199  004132  59DF               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  7200  004134  0E00               	movlw	0
  7201  004136  59E0               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  7202  004138  0E00               	movlw	0
  7203  00413A  59E1               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  7204  00413C  E3D7               	bnc	l464
  7205  00413E                     l15266:
  7206                           
  7207                           ;main.c: 365: }
  7208                           ;main.c: 366: }
  7209                           ;main.c: 368: ledFunctionality = 1;
  7210  00413E  0E01               	movlw	1
  7211  004140  6E32               	movwf	_ledFunctionality,c	;volatile
  7212                           
  7213                           ;main.c: 373: switch ( Read_b_eep(0x07) ) {
  7214  004142  D01D               	goto	l15282
  7215  004144                     l469:
  7216                           
  7217                           ;main.c: 376: bSilent = 0;
  7218  004144  0101               	movlb	1	; () banked
  7219  004146  6B02               	clrf	_bSilent& (0+255),b
  7220                           
  7221                           ; BSR set to: 1
  7222                           ;main.c: 377: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7223  004148  0E00               	movlw	0
  7224  00414A  EC74  F035         	call	_ECANSetOperationMode
  7225                           
  7226                           ;main.c: 378: break;
  7227  00414E  D025               	goto	l475
  7228  004150                     l15270:
  7229                           
  7230                           ;main.c: 381: bSilent = 1;
  7231  004150  0E01               	movlw	1
  7232  004152  0101               	movlb	1	; () banked
  7233  004154  6F02               	movwf	_bSilent& (0+255),b
  7234                           
  7235                           ; BSR set to: 1
  7236                           ;main.c: 382: ECANSetOperationMode( ECAN_OP_MODE_NORMAL );
  7237  004156  0E00               	movlw	0
  7238  004158  EC74  F035         	call	_ECANSetOperationMode
  7239                           
  7240                           ;main.c: 383: break;
  7241  00415C  D01E               	goto	l475
  7242  00415E                     l472:
  7243                           
  7244                           ;main.c: 386: bSilent = 0;
  7245  00415E  0101               	movlb	1	; () banked
  7246  004160  6B02               	clrf	_bSilent& (0+255),b
  7247                           
  7248                           ; BSR set to: 1
  7249                           ;main.c: 387: ECANSetOperationMode( ECAN_OP_MODE_LISTEN );
  7250  004162  0E60               	movlw	96
  7251  004164  EC74  F035         	call	_ECANSetOperationMode
  7252                           
  7253                           ;main.c: 388: break;
  7254  004168  D018               	goto	l475
  7255  00416A                     l473:
  7256                           
  7257                           ;main.c: 391: bSilent = 0;
  7258  00416A  0101               	movlb	1	; () banked
  7259  00416C  6B02               	clrf	_bSilent& (0+255),b
  7260                           
  7261                           ; BSR set to: 1
  7262                           ;main.c: 392: ECANSetOperationMode( ECAN_OP_MODE_LOOP );
  7263  00416E  0E40               	movlw	64
  7264  004170  EC74  F035         	call	_ECANSetOperationMode
  7265                           
  7266                           ;main.c: 393: break;
  7267  004174  D012               	goto	l475
  7268  004176                     l15278:
  7269                           
  7270                           ;main.c: 396: ECANSetOperationMode( 0x20 );
  7271  004176  0E20               	movlw	32
  7272  004178  EC74  F035         	call	_ECANSetOperationMode
  7273                           
  7274                           ;main.c: 397: break;
  7275  00417C  D00E               	goto	l475
  7276  00417E                     l15282:
  7277  00417E  6A20               	clrf	?_Read_b_eep+1,c
  7278  004180  0E07               	movlw	7
  7279  004182  6E1F               	movwf	?_Read_b_eep,c
  7280  004184  ECA7  F035         	call	_Read_b_eep	;wreg free
  7281                           
  7282                           ; Switch size 1, requested type "space"
  7283                           ; Number of cases is 4, Range of values is 1 to 4
  7284                           ; switch strategies available:
  7285                           ; Name         Instructions Cycles
  7286                           ; simple_byte           13     7 (average)
  7287                           ;	Chosen strategy is simple_byte
  7288  004188  0A01               	xorlw	1	; case 1
  7289  00418A  E0DC               	bz	l469
  7290  00418C  0A03               	xorlw	3	; case 2
  7291  00418E  E0E0               	bz	l15270
  7292  004190  0A01               	xorlw	1	; case 3
  7293  004192  E0E5               	bz	l472
  7294  004194  0A07               	xorlw	7	; case 4
  7295  004196  E0E9               	bz	l473
  7296  004198  D7EE               	goto	l15278
  7297  00419A                     l475:
  7298  00419A  0004               	clrwdt		;# 
  7299                           
  7300                           ;main.c: 411: if ( RCSTAbits.OERR ) {
  7301  00419C  A2AB               	btfss	4011,1,c	;volatile
  7302  00419E  D002               	goto	l476
  7303                           
  7304                           ;main.c: 412: RCSTAbits.CREN = 0;
  7305  0041A0  98AB               	bcf	4011,4,c	;volatile
  7306                           
  7307                           ;main.c: 413: RCSTAbits.CREN = 1;
  7308  0041A2  88AB               	bsf	4011,4,c	;volatile
  7309  0041A4                     l476:
  7310                           
  7311                           ;main.c: 414: }
  7312                           ;main.c: 416: (INTCONbits.GIE = 0);
  7313  0041A4  9EF2               	bcf	intcon,7,c	;volatile
  7314                           
  7315                           ;main.c: 417: if ( fifo_getFree( &serialInputFifo ) < 100 ) {
  7316  0041A6  0100               	movlb	0	; () banked
  7317  0041A8  0E00               	movlw	high _serialInputFifo
  7318  0041AA  6E20               	movwf	?_fifo_getFree+1,c
  7319  0041AC  0EF4               	movlw	low _serialInputFifo
  7320  0041AE  6E1F               	movwf	?_fifo_getFree,c
  7321  0041B0  ECB7  F02C         	call	_fifo_getFree	;wreg free
  7322  0041B4  0E64               	movlw	100
  7323  0041B6  5C1F               	subwf	?_fifo_getFree,w,c
  7324  0041B8  0E00               	movlw	0
  7325  0041BA  5820               	subwfb	?_fifo_getFree+1,w,c
  7326  0041BC  E202               	bc	l477
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;main.c: 418: PORTCbits.RC4 = 0;
  7330  0041BE  9882               	bcf	3970,4,c	;volatile
  7331                           
  7332                           ;main.c: 419: }
  7333  0041C0  D001               	goto	l478
  7334  0041C2                     l477:
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;main.c: 420: else {
  7338                           ;main.c: 421: PORTCbits.RC4 = 1;
  7339  0041C2  8882               	bsf	3970,4,c	;volatile
  7340  0041C4                     l478:
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;main.c: 422: }
  7344                           ;main.c: 423: (INTCONbits.GIE = 1);
  7345  0041C4  8EF2               	bsf	intcon,7,c	;volatile
  7346                           
  7347                           ;main.c: 425: if (0 == mode) {
  7348  0041C6  67F1               	tstfsz	_mode& (0+255),b
  7349  0041C8  D003               	goto	l15292
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;main.c: 426: doModeVerbose();
  7353  0041CA  ECBF  F003         	call	_doModeVerbose	;wreg free
  7354                           
  7355                           ;main.c: 427: }
  7356  0041CE  D7E5               	goto	l475
  7357  0041D0                     l15292:
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;main.c: 428: else if (1 == mode) {
  7361  0041D0  05F1               	decf	_mode& (0+255),w,b
  7362  0041D2  E103               	bnz	l15296
  7363  0041D4                     l15294:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;main.c: 429: doModeVscp();
  7367  0041D4  ECA5  F015         	call	_doModeVscp	;wreg free
  7368                           
  7369                           ;main.c: 430: }
  7370  0041D8  D7E0               	goto	l475
  7371  0041DA                     l15296:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;main.c: 431: else if (2 == mode) {
  7375  0041DA  51F1               	movf	_mode& (0+255),w,b
  7376  0041DC  0A02               	xorlw	2
  7377  0041DE  E103               	bnz	l15300
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;main.c: 432: doModeSLCAN();
  7381  0041E0  ECB8  F013         	call	_doModeSLCAN	;wreg free
  7382                           
  7383                           ;main.c: 433: }
  7384  0041E4  D7DA               	goto	l475
  7385  0041E6                     l15300:
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;main.c: 434: else if (3 == mode) {
  7389  0041E6  51F1               	movf	_mode& (0+255),w,b
  7390  0041E8  0A03               	xorlw	3
  7391  0041EA  E1F4               	bnz	l15294
  7392                           
  7393                           ; BSR set to: 0
  7394                           ;main.c: 435: doModeVscpNode();
  7395  0041EC  ECC9  F035         	call	_doModeVscpNode	;wreg free
  7396                           
  7397                           ;main.c: 436: }
  7398  0041F0  D7D4               	goto	l475
  7399  0041F2                     __end_of_main:
  7400                           	opt stack 0
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           indf0	equ	0xFEF
  7409                           postinc0	equ	0xFEE
  7410                           fsr0h	equ	0xFEA
  7411                           fsr0l	equ	0xFE9
  7412                           wreg	equ	0xFE8
  7413                           indf1	equ	0xFE7
  7414                           postinc1	equ	0xFE6
  7415                           postdec1	equ	0xFE5
  7416                           fsr1h	equ	0xFE2
  7417                           fsr1l	equ	0xFE1
  7418                           indf2	equ	0xFDF
  7419                           postinc2	equ	0xFDE
  7420                           postdec2	equ	0xFDD
  7421                           plusw2	equ	0xFDB
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function _doModeVscpNode *****************
  7427 ;; Defined at:
  7428 ;;		line 2009 in file "main.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;		None               void
  7435 ;; Registers used:
  7436 ;;		None
  7437 ;; Tracked objects:
  7438 ;;		On entry : F/0
  7439 ;;		On exit  : F/0
  7440 ;;		Unchanged: F/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7442 ;;      Params:         0       0       0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0
  7445 ;;      Totals:         0       0       0       0       0       0       0
  7446 ;;Total ram usage:        0 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    3
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text1
  7457  006B92                     __ptext1:
  7458                           	opt stack 0
  7459  006B92                     _doModeVscpNode:
  7460                           	opt stack 27
  7461                           
  7462                           ; BSR set to: 0
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;incstack = 0
  7466                           ;incstack = 0
  7467  006B92  0012               	return	
  7468  006B94                     __end_of_doModeVscpNode:
  7469                           	opt stack 0
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           indf0	equ	0xFEF
  7478                           postinc0	equ	0xFEE
  7479                           fsr0h	equ	0xFEA
  7480                           fsr0l	equ	0xFE9
  7481                           wreg	equ	0xFE8
  7482                           indf1	equ	0xFE7
  7483                           postinc1	equ	0xFE6
  7484                           postdec1	equ	0xFE5
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           plusw2	equ	0xFDB
  7491                           fsr2h	equ	0xFDA
  7492                           fsr2l	equ	0xFD9
  7493                           status	equ	0xFD8
  7494                           
  7495 ;; *************** function _doModeSLCAN *****************
  7496 ;; Defined at:
  7497 ;;		line 1791 in file "main.c"
  7498 ;; Parameters:    Size  Location     Type
  7499 ;;		None
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  id              4   54[BANK0 ] unsigned long 
  7502 ;;  dlc             1   58[BANK0 ] unsigned char 
  7503 ;;  rv              1   60[BANK0 ] enum E15660
  7504 ;;  c               1   59[BANK0 ] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;		None               void
  7507 ;; Registers used:
  7508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : F/0
  7511 ;;		On exit  : E/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7514 ;;      Params:         0       0       0       0       0       0       0
  7515 ;;      Locals:         0       7       0       0       0       0       0
  7516 ;;      Temps:          0       7       0       0       0       0       0
  7517 ;;      Totals:         0      14       0       0       0       0       0
  7518 ;;Total ram usage:       14 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    7
  7521 ;; This function calls:
  7522 ;;		_putsUSART
  7523 ;;		_fifo_read
  7524 ;;		_ECANSetOperationMode
  7525 ;;		_Busy_eep
  7526 ;;		_Write_b_eep
  7527 ;;		_memset
  7528 ;;		_receiveSendEventSLCAN
  7529 ;;		_strlen
  7530 ;;		_hexStringToBytes
  7531 ;;		_memcpy
  7532 ;;		_sendCANFrame
  7533 ;; This function is called by:
  7534 ;;		_main
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text2
  7539  002770                     __ptext2:
  7540                           	opt stack 0
  7541  002770                     _doModeSLCAN:
  7542                           	opt stack 23
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;main.c: 1792: uint8_t c;
  7546                           ;main.c: 1793: BOOL rv = 0;
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;incstack = 0
  7550                           ;incstack = 0
  7551  002770  6B9C               	clrf	doModeSLCAN@rv& (0+255),b
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;main.c: 1796: receiveSendEventSLCAN();
  7555  002772  ECC5  F021         	call	_receiveSendEventSLCAN	;wreg free
  7556                           
  7557                           ;main.c: 1799: (INTCONbits.GIE = 0);
  7558  002776  9EF2               	bcf	intcon,7,c	;volatile
  7559                           
  7560                           ;main.c: 1801: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  7561  002778  0100               	movlb	0	; () banked
  7562  00277A  0E00               	movlw	high _serialInputFifo
  7563  00277C  6E20               	movwf	?_fifo_read+1,c
  7564  00277E  0EF4               	movlw	low _serialInputFifo
  7565  002780  6E1F               	movwf	?_fifo_read,c
  7566  002782  0E00               	movlw	high doModeSLCAN@c
  7567  002784  6E22               	movwf	?_fifo_read+3,c
  7568  002786  0E9B               	movlw	low doModeSLCAN@c
  7569  002788  6E21               	movwf	?_fifo_read+2,c
  7570  00278A  6A24               	clrf	?_fifo_read+5,c
  7571  00278C  0E01               	movlw	1
  7572  00278E  6E23               	movwf	?_fifo_read+4,c
  7573  002790  ECA6  F029         	call	_fifo_read	;wreg free
  7574  002794  041F               	decf	?_fifo_read,w,c
  7575  002796  1020               	iorwf	?_fifo_read+1,w,c
  7576  002798  E001 D1C8          	bnz	l16780
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;main.c: 1804: (INTCONbits.GIE = 1);
  7580  00279C  8EF2               	bsf	intcon,7,c	;volatile
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;main.c: 1806: if (0x0d != c) {
  7584  00279E  519B               	movf	doModeSLCAN@c& (0+255),w,b
  7585  0027A0  0A0D               	xorlw	13
  7586  0027A2  E101 D17C          	bz	l16768
  7587                           
  7588                           ; BSR set to: 0
  7589                           ;main.c: 1807: cmdbuf[ pos ] = c;
  7590  0027A6  0101               	movlb	1	; () banked
  7591  0027A8  D9C3               	call	PL50	;call to abstracted procedure
  7592  0027AA  C09B  FFDF         	movff	doModeSLCAN@c,indf2
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;main.c: 1808: pos++;
  7596  0027AE  2B03               	incf	_pos& (0+255),f,b
  7597  0027B0  D1BE               	goto	l847
  7598  0027B2                     l16640:
  7599                           
  7600                           ; BSR set to: 0
  7601                           ;main.c: 1816: if (1 == strlen(cmdbuf)) {
  7602  0027B2  0101               	movlb	1	; () banked
  7603  0027B4  0E01               	movlw	high _cmdbuf
  7604  0027B6  6E20               	movwf	?_strlen+1,c
  7605  0027B8  0E05               	movlw	low _cmdbuf
  7606  0027BA  6E1F               	movwf	?_strlen,c
  7607  0027BC  EC35  F034         	call	_strlen	;wreg free
  7608  0027C0  041F               	decf	?_strlen,w,c
  7609  0027C2  1020               	iorwf	?_strlen+1,w,c
  7610  0027C4  E001 D198          	bnz	l16770
  7611                           
  7612                           ;main.c: 1817: putsUSART((char *) "JFrankfurt RS-232\r\n");
  7613  0027C8  0E7C               	movlw	high STR_173
  7614  0027CA  6E21               	movwf	?_putsUSART+1,c
  7615  0027CC  0EE5               	movlw	low STR_173
  7616  0027CE  6E20               	movwf	?_putsUSART,c
  7617  0027D0  ECDF  F032         	call	_putsUSART	;wreg free
  7618  0027D4  D117               	goto	L4
  7619  0027D6                     l16646:
  7620                           
  7621                           ; BSR set to: 0
  7622                           ;main.c: 1824: if (1 == strlen(cmdbuf)) {
  7623  0027D6  0101               	movlb	1	; () banked
  7624  0027D8  0E01               	movlw	high _cmdbuf
  7625  0027DA  6E20               	movwf	?_strlen+1,c
  7626  0027DC  0E05               	movlw	low _cmdbuf
  7627  0027DE  6E1F               	movwf	?_strlen,c
  7628  0027E0  EC35  F034         	call	_strlen	;wreg free
  7629  0027E4  041F               	decf	?_strlen,w,c
  7630  0027E6  1020               	iorwf	?_strlen+1,w,c
  7631  0027E8  E001 D186          	bnz	l16770
  7632                           
  7633                           ;main.c: 1825: putsUSART((char *) "V1011\r\n");
  7634  0027EC  0E7E               	movlw	high STR_174
  7635  0027EE  6E21               	movwf	?_putsUSART+1,c
  7636  0027F0  0EC0               	movlw	low STR_174
  7637  0027F2  6E20               	movwf	?_putsUSART,c
  7638  0027F4  ECDF  F032         	call	_putsUSART	;wreg free
  7639  0027F8  D105               	goto	L4
  7640  0027FA                     l16652:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;main.c: 1832: if (1 == strlen(cmdbuf)) {
  7644  0027FA  0101               	movlb	1	; () banked
  7645  0027FC  0E01               	movlw	high _cmdbuf
  7646  0027FE  6E20               	movwf	?_strlen+1,c
  7647  002800  0E05               	movlw	low _cmdbuf
  7648  002802  6E1F               	movwf	?_strlen,c
  7649  002804  EC35  F034         	call	_strlen	;wreg free
  7650  002808  041F               	decf	?_strlen,w,c
  7651  00280A  1020               	iorwf	?_strlen+1,w,c
  7652  00280C  E001 D174          	bnz	l16770
  7653                           
  7654                           ;main.c: 1833: putsUSART((char *) "N1977\r\n");
  7655  002810  0E7E               	movlw	high STR_175
  7656  002812  6E21               	movwf	?_putsUSART+1,c
  7657  002814  0EC8               	movlw	low STR_175
  7658  002816  6E20               	movwf	?_putsUSART,c
  7659  002818  ECDF  F032         	call	_putsUSART	;wreg free
  7660  00281C  D0F3               	goto	L4
  7661  00281E                     l16658:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;main.c: 1842: bInitiated = 1;
  7665  00281E  0E01               	movlw	1
  7666  002820  6FEE               	movwf	_bInitiated& (0+255),b
  7667                           
  7668                           ;main.c: 1843: rv = 1;
  7669  002822  D0F2               	goto	L3
  7670  002824                     l857:
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;main.c: 1848: if (!bOpen) {
  7674  002824  67EF               	tstfsz	_bOpen& (0+255),b
  7675  002826  D003               	goto	l16662
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;main.c: 1849: bInitiated = 1;
  7679  002828  0E01               	movlw	1
  7680  00282A  6FEE               	movwf	_bInitiated& (0+255),b
  7681                           
  7682                           ;main.c: 1850: rv = 1;
  7683  00282C  6F9C               	movwf	doModeSLCAN@rv& (0+255),b
  7684  00282E                     l16662:
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;main.c: 1855: if (1 == strlen(cmdbuf)) {
  7688  00282E  0101               	movlb	1	; () banked
  7689  002830  0E01               	movlw	high _cmdbuf
  7690  002832  6E20               	movwf	?_strlen+1,c
  7691  002834  0E05               	movlw	low _cmdbuf
  7692  002836  6E1F               	movwf	?_strlen,c
  7693  002838  EC35  F034         	call	_strlen	;wreg free
  7694  00283C  041F               	decf	?_strlen,w,c
  7695  00283E  1020               	iorwf	?_strlen+1,w,c
  7696  002840  E001 D15A          	bnz	l16770
  7697                           
  7698                           ;main.c: 1856: if (!bOpen && bInitiated) {
  7699  002844  0100               	movlb	0	; () banked
  7700  002846  67EF               	tstfsz	_bOpen& (0+255),b
  7701  002848  D157               	goto	l16770
  7702                           
  7703                           ; BSR set to: 0
  7704  00284A  51EE               	movf	_bInitiated& (0+255),w,b
  7705  00284C  E101 D154          	bz	l16770
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;main.c: 1857: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7709  002850  0E00               	movlw	0
  7710  002852  EC74  F035         	call	_ECANSetOperationMode
  7711                           
  7712                           ;main.c: 1858: bOpen = 1;
  7713  002856  0E01               	movlw	1
  7714  002858  0100               	movlb	0	; () banked
  7715  00285A  6FEF               	movwf	_bOpen& (0+255),b
  7716  00285C  D0D3               	goto	L4
  7717  00285E                     l16674:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;main.c: 1866: if (1 == strlen(cmdbuf)) {
  7721  00285E  0101               	movlb	1	; () banked
  7722  002860  0E01               	movlw	high _cmdbuf
  7723  002862  6E20               	movwf	?_strlen+1,c
  7724  002864  0E05               	movlw	low _cmdbuf
  7725  002866  6E1F               	movwf	?_strlen,c
  7726  002868  EC35  F034         	call	_strlen	;wreg free
  7727  00286C  041F               	decf	?_strlen,w,c
  7728  00286E  1020               	iorwf	?_strlen+1,w,c
  7729  002870  E001 D142          	bnz	l16770
  7730                           
  7731                           ;main.c: 1867: if (bOpen) {
  7732  002874  0100               	movlb	0	; () banked
  7733  002876  51EF               	movf	_bOpen& (0+255),w,b
  7734  002878  E101 D0C4          	bz	L4
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;main.c: 1868: ECANSetOperationMode(0x20);
  7738  00287C  0E20               	movlw	32
  7739  00287E  EC74  F035         	call	_ECANSetOperationMode
  7740                           
  7741                           ;main.c: 1869: bOpen = 0;
  7742  002882  0100               	movlb	0	; () banked
  7743  002884  6BEF               	clrf	_bOpen& (0+255),b
  7744  002886  D0BE               	goto	L4
  7745  002888                     l16684:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;main.c: 1882: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7749  002888  51EF               	movf	_bOpen& (0+255),w,b
  7750  00288A  E101 D135          	bz	l16770
  7751                           
  7752                           ; BSR set to: 0
  7753  00288E  0101               	movlb	1	; () banked
  7754  002890  0E01               	movlw	high _cmdbuf
  7755  002892  6E20               	movwf	?_strlen+1,c
  7756  002894  0E05               	movlw	low _cmdbuf
  7757  002896  6E1F               	movwf	?_strlen,c
  7758  002898  EC35  F034         	call	_strlen	;wreg free
  7759  00289C  0E0A               	movlw	10
  7760  00289E  5C1F               	subwf	?_strlen,w,c
  7761  0028A0  0E00               	movlw	0
  7762  0028A2  5820               	subwfb	?_strlen+1,w,c
  7763  0028A4  E201 D128          	bnc	l16770
  7764                           
  7765                           ;main.c: 1884: uint32_t id;
  7766                           ;main.c: 1885: uint8_t dlc;
  7767                           ;main.c: 1887: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7768  0028A8  0101               	movlb	1	; () banked
  7769  0028AA  0E01               	movlw	high _wrkbuf
  7770  0028AC  6E24               	movwf	?_hexStringToBytes+1,c
  7771  0028AE  0E55               	movlw	low _wrkbuf
  7772  0028B0  6E23               	movwf	?_hexStringToBytes,c
  7773  0028B2  0E50               	movlw	80
  7774  0028B4  6E25               	movwf	?_hexStringToBytes+2,c
  7775  0028B6  0E01               	movlw	high _cmdbuf
  7776  0028B8  6E27               	movwf	?_hexStringToBytes+4,c
  7777  0028BA  0E05               	movlw	low _cmdbuf
  7778  0028BC  6E26               	movwf	?_hexStringToBytes+3,c
  7779  0028BE  EC53  F02E         	call	_hexStringToBytes	;wreg free
  7780  0028C2  6F8F               	movwf	??_doModeSLCAN& (0+255),b
  7781  0028C4  0E05               	movlw	5
  7782  0028C6  5D8F               	subwf	??_doModeSLCAN& (0+255),w,b
  7783  0028C8  E201 D116          	bnc	l16770
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;main.c: 1889: }
  7787                           ;main.c: 1891: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7788  0028CC  C158  F08F         	movff	_wrkbuf+3,??_doModeSLCAN
  7789  0028D0  0E08               	movlw	8
  7790  0028D2  278F               	addwf	??_doModeSLCAN& (0+255),f,b
  7791  0028D4  C157  F090         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7792  0028D8  0E10               	movlw	16
  7793  0028DA  2790               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7794  0028DC  C156  F091         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7795  0028E0  0E18               	movlw	24
  7796  0028E2  2791               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7797  0028E4  C155  F092         	movff	_wrkbuf,??_doModeSLCAN+3
  7798  0028E8  0100               	movlb	0	; () banked
  7799  0028EA  6B93               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7800  0028EC  6B94               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7801  0028EE  6B95               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7802  0028F0  2B91               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7803  0028F2  D001               	goto	u21700
  7804  0028F4                     u21705:
  7805  0028F4  D924               	call	PL116	;call to abstracted procedure
  7806  0028F6                     u21700:
  7807  0028F6  2F91               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7808  0028F8  D7FD               	goto	u21705
  7809  0028FA  2B90               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7810  0028FC  D001               	goto	u21710
  7811  0028FE                     u21715:
  7812  0028FE  D91F               	call	PL116	;call to abstracted procedure
  7813  002900                     u21710:
  7814  002900  2F90               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7815  002902  D7FD               	goto	u21715
  7816  002904  2B8F               	incf	??_doModeSLCAN& (0+255),f,b
  7817  002906  D001               	goto	u21720
  7818  002908                     u21725:
  7819  002908  D91A               	call	PL116	;call to abstracted procedure
  7820  00290A                     u21720:
  7821  00290A  2F8F               	decfsz	??_doModeSLCAN& (0+255),f,b
  7822  00290C  D7FD               	goto	u21725
  7823  00290E  C095  F099         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7824  002912  C094  F098         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7825  002916  C093  F097         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7826  00291A  C092  F096         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;main.c: 1892: dlc = vscpData[4];
  7830  00291E  C1A9  F09A         	movff	_vscpData+4,doModeSLCAN@dlc
  7831                           
  7832                           ; BSR set to: 0
  7833                           ;main.c: 1895: if (dlc > 8) break;
  7834  002922  0E08               	movlw	8
  7835  002924  659A               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7836  002926  D001               	goto	l16700
  7837  002928  D0E7               	goto	l16770
  7838  00292A                     l16700:
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;main.c: 1896: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7842  00292A  90D8               	bcf	status,0,c
  7843  00292C  359A               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7844  00292E  6F8F               	movwf	??_doModeSLCAN& (0+255),b
  7845  002930  6B90               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7846  002932  3790               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7847  002934  0E0A               	movlw	10
  7848  002936  278F               	addwf	??_doModeSLCAN& (0+255),f,b
  7849  002938  0E00               	movlw	0
  7850  00293A  2390               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7851  00293C  0101               	movlb	1	; () banked
  7852  00293E  0E01               	movlw	high _cmdbuf
  7853  002940  6E20               	movwf	?_strlen+1,c
  7854  002942  0E05               	movlw	low _cmdbuf
  7855  002944  6E1F               	movwf	?_strlen,c
  7856  002946  EC35  F034         	call	_strlen	;wreg free
  7857  00294A  0100               	movlb	0	; () banked
  7858  00294C  518F               	movf	??_doModeSLCAN& (0+255),w,b
  7859  00294E  5C1F               	subwf	?_strlen,w,c
  7860  002950  5190               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7861  002952  5820               	subwfb	?_strlen+1,w,c
  7862  002954  E201 D0D0          	bnc	l16770
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;main.c: 1898: memcpy(vscpData, vscpData + 5, dlc);
  7866  002958  0E01               	movlw	high _vscpData
  7867  00295A  6E20               	movwf	?_memcpy+1,c
  7868  00295C  0EA5               	movlw	low _vscpData
  7869  00295E  6E1F               	movwf	?_memcpy,c
  7870  002960  0EAA               	movlw	low (_vscpData+5)
  7871  002962  6F8F               	movwf	??_doModeSLCAN& (0+255),b
  7872  002964  0E01               	movlw	high (_vscpData+5)
  7873  002966  6F90               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7874  002968  C08F  F021         	movff	??_doModeSLCAN,?_memcpy+2
  7875  00296C  C090  F022         	movff	??_doModeSLCAN+1,?_memcpy+3
  7876  002970  C09A  F023         	movff	doModeSLCAN@dlc,?_memcpy+4
  7877  002974  6A24               	clrf	?_memcpy+5,c
  7878  002976  EC97  F033         	call	_memcpy	;wreg free
  7879                           
  7880                           ;main.c: 1900: rv = sendCANFrame(id, dlc, vscpData);
  7881  00297A  C096  F088         	movff	doModeSLCAN@id,?_sendCANFrame
  7882  00297E  C097  F089         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7883  002982  C098  F08A         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7884  002986  C099  F08B         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7885  00298A  C09A  F08C         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7886  00298E  0E01               	movlw	high _vscpData
  7887  002990  0100               	movlb	0	; () banked
  7888  002992  6F8E               	movwf	(?_sendCANFrame+6)& (0+255),b
  7889  002994  0EA5               	movlw	low _vscpData
  7890  002996  6F8D               	movwf	(?_sendCANFrame+5)& (0+255),b
  7891  002998  EC8D  F034         	call	_sendCANFrame	;wreg free
  7892  00299C  D035               	goto	L3
  7893  00299E                     l16708:
  7894                           
  7895                           ; BSR set to: 0
  7896                           ;main.c: 1915: if (bOpen && (strlen(cmdbuf) == 1)) {
  7897  00299E  51EF               	movf	_bOpen& (0+255),w,b
  7898  0029A0  E101 D0AA          	bz	l16770
  7899                           
  7900                           ; BSR set to: 0
  7901  0029A4  0101               	movlb	1	; () banked
  7902  0029A6  0E01               	movlw	high _cmdbuf
  7903  0029A8  6E20               	movwf	?_strlen+1,c
  7904  0029AA  0E05               	movlw	low _cmdbuf
  7905  0029AC  6E1F               	movwf	?_strlen,c
  7906  0029AE  EC35  F034         	call	_strlen	;wreg free
  7907  0029B2  041F               	decf	?_strlen,w,c
  7908  0029B4  1020               	iorwf	?_strlen+1,w,c
  7909  0029B6  E001 D09F          	bnz	l16770
  7910                           
  7911                           ;main.c: 1916: putsUSART((char *) "F00\r\n");
  7912  0029BA  0E7F               	movlw	high STR_176
  7913  0029BC  6E21               	movwf	?_putsUSART+1,c
  7914  0029BE  0E64               	movlw	low STR_176
  7915  0029C0  6E20               	movwf	?_putsUSART,c
  7916  0029C2  ECDF  F032         	call	_putsUSART	;wreg free
  7917  0029C6  D098               	goto	l16770
  7918  0029C8                     l16718:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;main.c: 1932: if (2 == strlen(cmdbuf)) {
  7922  0029C8  0101               	movlb	1	; () banked
  7923  0029CA  0E01               	movlw	high _cmdbuf
  7924  0029CC  6E20               	movwf	?_strlen+1,c
  7925  0029CE  0E05               	movlw	low _cmdbuf
  7926  0029D0  6E1F               	movwf	?_strlen,c
  7927  0029D2  EC35  F034         	call	_strlen	;wreg free
  7928  0029D6  501F               	movf	?_strlen,w,c
  7929  0029D8  0A02               	xorlw	2
  7930  0029DA  1020               	iorwf	?_strlen+1,w,c
  7931  0029DC  E001 D08C          	bnz	l16770
  7932                           
  7933                           ;main.c: 1933: if (!bOpen) {
  7934  0029E0  0100               	movlb	0	; () banked
  7935  0029E2  67EF               	tstfsz	_bOpen& (0+255),b
  7936  0029E4  D089               	goto	l16770
  7937                           
  7938                           ; BSR set to: 0
  7939                           ;main.c: 1934: if ('0' == cmdbuf[1]) {
  7940  0029E6  0101               	movlb	1	; () banked
  7941  0029E8  5106               	movf	(_cmdbuf+1)& (0+255),w,b
  7942  0029EA  0A30               	xorlw	48
  7943  0029EC  E10F               	bnz	l16730
  7944                           
  7945                           ; BSR set to: 1
  7946                           ;main.c: 1935: nTimeStamp = 0;
  7947  0029EE  0100               	movlb	0	; () banked
  7948  0029F0  6BF2               	clrf	_nTimeStamp& (0+255),b
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;main.c: 1937: (Busy_eep(), Write_b_eep(0x05,0));
  7952  0029F2  ECC6  F035         	call	_Busy_eep	;wreg free
  7953  0029F6  6A20               	clrf	?_Write_b_eep+1,c
  7954  0029F8  0E05               	movlw	5
  7955  0029FA  6E1F               	movwf	?_Write_b_eep,c
  7956  0029FC  0E00               	movlw	0
  7957  0029FE  6A21               	clrf	?_Write_b_eep+2,c
  7958  002A00  ECC5  F034         	call	_Write_b_eep	;wreg free
  7959  002A04                     L4:
  7960                           
  7961                           ;main.c: 1938: rv = 1;
  7962  002A04  0E01               	movlw	1
  7963  002A06  0100               	movlb	0	; () banked
  7964  002A08                     L3:
  7965  002A08  6F9C               	movwf	doModeSLCAN@rv& (0+255),b
  7966                           
  7967                           ;main.c: 1939: } else if ('1' == cmdbuf[1]) {
  7968  002A0A  D076               	goto	l16770
  7969  002A0C                     l16730:
  7970                           
  7971                           ; BSR set to: 1
  7972  002A0C  5106               	movf	(_cmdbuf+1)& (0+255),w,b
  7973  002A0E  0A31               	xorlw	49
  7974  002A10  E10D               	bnz	l882
  7975                           
  7976                           ; BSR set to: 1
  7977                           ;main.c: 1940: nTimeStamp = 1;
  7978  002A12  0E01               	movlw	1
  7979  002A14  0100               	movlb	0	; () banked
  7980  002A16  6FF2               	movwf	_nTimeStamp& (0+255),b
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;main.c: 1942: (Busy_eep(), Write_b_eep(0x05,1));
  7984  002A18  ECC6  F035         	call	_Busy_eep	;wreg free
  7985  002A1C  6A20               	clrf	?_Write_b_eep+1,c
  7986  002A1E  0E05               	movlw	5
  7987  002A20  6E1F               	movwf	?_Write_b_eep,c
  7988  002A22  0E01               	movlw	1
  7989  002A24  6E21               	movwf	?_Write_b_eep+2,c
  7990  002A26  ECC5  F034         	call	_Write_b_eep	;wreg free
  7991  002A2A  D7EC               	goto	L4
  7992  002A2C                     l882:
  7993                           
  7994                           ; BSR set to: 1
  7995                           ;main.c: 1946: rv = 0;
  7996  002A2C  0100               	movlb	0	; () banked
  7997  002A2E  6B9C               	clrf	doModeSLCAN@rv& (0+255),b
  7998  002A30  D063               	goto	l16770
  7999  002A32                     l16738:
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;main.c: 1954: (Busy_eep(), Write_b_eep(0x01,0xFF));
  8003  002A32  ECC6  F035         	call	_Busy_eep	;wreg free
  8004  002A36  6A20               	clrf	?_Write_b_eep+1,c
  8005  002A38  0E01               	movlw	1
  8006  002A3A  6E1F               	movwf	?_Write_b_eep,c
  8007  002A3C  0EFF               	movlw	255
  8008  002A3E  6821               	setf	?_Write_b_eep+2,c
  8009  002A40  ECC5  F034         	call	_Write_b_eep	;wreg free
  8010  002A44  00FF               	reset		;# 
  8011                           
  8012                           ;main.c: 1956: break;
  8013  002A46  D058               	goto	l16770
  8014  002A48                     l16742:
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;main.c: 1960: if ( 'v' == cmdbuf[1] &&
  8018                           ;main.c: 1961: 's' == cmdbuf[2] &&
  8019                           ;main.c: 1962: 'c' == cmdbuf[3] &&
  8020                           ;main.c: 1963: 'p' == cmdbuf[4] ) {
  8021  002A48  0101               	movlb	1	; () banked
  8022  002A4A  5106               	movf	(_cmdbuf+1)& (0+255),w,b
  8023  002A4C  0A76               	xorlw	118
  8024  002A4E  E10D               	bnz	l16752
  8025                           
  8026                           ; BSR set to: 1
  8027  002A50  5107               	movf	(_cmdbuf+2)& (0+255),w,b
  8028  002A52  0A73               	xorlw	115
  8029  002A54  E10A               	bnz	l16752
  8030                           
  8031                           ; BSR set to: 1
  8032  002A56  5108               	movf	(_cmdbuf+3)& (0+255),w,b
  8033  002A58  0A63               	xorlw	99
  8034  002A5A  E107               	bnz	l16752
  8035                           
  8036                           ; BSR set to: 1
  8037  002A5C  5109               	movf	(_cmdbuf+4)& (0+255),w,b
  8038  002A5E  0A70               	xorlw	112
  8039  002A60  E104               	bnz	l16752
  8040                           
  8041                           ; BSR set to: 1
  8042                           ;main.c: 1964: mode = 1;
  8043  002A62  0E01               	movlw	1
  8044  002A64  0100               	movlb	0	; () banked
  8045  002A66  6FF1               	movwf	_mode& (0+255),b
  8046                           
  8047                           ;main.c: 1965: }
  8048  002A68  D047               	goto	l16770
  8049  002A6A                     l16752:
  8050                           
  8051                           ; BSR set to: 1
  8052                           ;main.c: 1966: else if ( 'v' == cmdbuf[1] &&
  8053                           ;main.c: 1967: 'e' == cmdbuf[2] &&
  8054                           ;main.c: 1968: 'r' == cmdbuf[3] &&
  8055                           ;main.c: 1969: 'b' == cmdbuf[4] ) {
  8056  002A6A  5106               	movf	(_cmdbuf+1)& (0+255),w,b
  8057  002A6C  0A76               	xorlw	118
  8058  002A6E  E144               	bnz	l16770
  8059                           
  8060                           ; BSR set to: 1
  8061  002A70  5107               	movf	(_cmdbuf+2)& (0+255),w,b
  8062  002A72  0A65               	xorlw	101
  8063  002A74  E141               	bnz	l16770
  8064                           
  8065                           ; BSR set to: 1
  8066  002A76  5108               	movf	(_cmdbuf+3)& (0+255),w,b
  8067  002A78  0A72               	xorlw	114
  8068  002A7A  E13E               	bnz	l16770
  8069                           
  8070                           ; BSR set to: 1
  8071  002A7C  5109               	movf	(_cmdbuf+4)& (0+255),w,b
  8072  002A7E  0A62               	xorlw	98
  8073  002A80  E13B               	bnz	l16770
  8074                           
  8075                           ; BSR set to: 1
  8076                           ;main.c: 1970: mode = 0;
  8077  002A82  0100               	movlb	0	; () banked
  8078  002A84  6BF1               	clrf	_mode& (0+255),b
  8079  002A86  D038               	goto	l16770
  8080  002A88                     l16762:
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;main.c: 1975: {
  8084                           ;main.c: 1977: if (0 == strlen(cmdbuf)) {
  8085  002A88  0101               	movlb	1	; () banked
  8086  002A8A  0E01               	movlw	high _cmdbuf
  8087  002A8C  6E20               	movwf	?_strlen+1,c
  8088  002A8E  0E05               	movlw	low _cmdbuf
  8089  002A90  6E1F               	movwf	?_strlen,c
  8090  002A92  EC35  F034         	call	_strlen	;wreg free
  8091  002A96  5020               	movf	?_strlen+1,w,c
  8092  002A98  101F               	iorwf	?_strlen,w,c
  8093  002A9A  E0B4               	bz	L4
  8094  002A9C  D02D               	goto	l16770
  8095  002A9E                     l16768:
  8096                           
  8097                           ; BSR set to: 0
  8098  002A9E  519B               	movf	doModeSLCAN@c& (0+255),w,b
  8099                           
  8100                           ; Switch size 1, requested type "space"
  8101                           ; Number of cases is 17, Range of values is 64 to 116
  8102                           ; switch strategies available:
  8103                           ; Name         Instructions Cycles
  8104                           ; simple_byte           52    27 (average)
  8105                           ;	Chosen strategy is simple_byte
  8106  002AA0  0A40               	xorlw	64	; case 64
  8107  002AA2  E0D2               	bz	l16742
  8108  002AA4  0A02               	xorlw	2	; case 66
  8109  002AA6  E0C5               	bz	l16738
  8110  002AA8  0A01               	xorlw	1	; case 67
  8111  002AAA  E101 D6D8          	bz	l16674
  8112  002AAE  0A05               	xorlw	5	; case 70
  8113  002AB0  E101 D775          	bz	l16708
  8114  002AB4  0A0C               	xorlw	12	; case 74
  8115  002AB6  E101 D67C          	bz	l16640
  8116  002ABA  0A07               	xorlw	7	; case 77
  8117  002ABC  E0A3               	bz	L4
  8118  002ABE  0A03               	xorlw	3	; case 78
  8119  002AC0  E101 D69B          	bz	l16652
  8120  002AC4  0A01               	xorlw	1	; case 79
  8121  002AC6  E101 D6B2          	bz	l16662
  8122  002ACA  0A1D               	xorlw	29	; case 82
  8123  002ACC  E015               	bz	l16770
  8124  002ACE  0A01               	xorlw	1	; case 83
  8125  002AD0  E101 D6A5          	bz	l16658
  8126  002AD4  0A07               	xorlw	7	; case 84
  8127  002AD6  E101 D6D7          	bz	l16684
  8128  002ADA  0A02               	xorlw	2	; case 86
  8129  002ADC  E101 D67B          	bz	l16646
  8130  002AE0  0A0C               	xorlw	12	; case 90
  8131  002AE2  E101 D771          	bz	l16718
  8132  002AE6  0A37               	xorlw	55	; case 109
  8133  002AE8  E08D               	bz	L4
  8134  002AEA  0A1F               	xorlw	31	; case 114
  8135  002AEC  E005               	bz	l16770
  8136  002AEE  0A01               	xorlw	1	; case 115
  8137  002AF0  E101 D698          	bz	l857
  8138  002AF4  0A07               	xorlw	7	; case 116
  8139  002AF6  E1C8               	bnz	l16762
  8140  002AF8                     l16770:
  8141                           
  8142                           ;main.c: 1985: if (rv) {
  8143  002AF8  0100               	movlb	0	; () banked
  8144  002AFA  519C               	movf	doModeSLCAN@rv& (0+255),w,b
  8145  002AFC  E007               	bz	l16774
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;main.c: 1987: putsUSART((char *) "\r");
  8149  002AFE  0E7F               	movlw	high STR_177
  8150  002B00  6E21               	movwf	?_putsUSART+1,c
  8151  002B02  0EF2               	movlw	low STR_177
  8152  002B04  6E20               	movwf	?_putsUSART,c
  8153  002B06  ECDF  F032         	call	_putsUSART	;wreg free
  8154                           
  8155                           ;main.c: 1988: }
  8156  002B0A  D006               	goto	l16776
  8157  002B0C                     l16774:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;main.c: 1989: else {
  8161                           ;main.c: 1991: putsUSART((char *) "\a");
  8162  002B0C  0E7F               	movlw	high STR_178
  8163  002B0E  6E21               	movwf	?_putsUSART+1,c
  8164  002B10  0EF0               	movlw	low STR_178
  8165  002B12  6E20               	movwf	?_putsUSART,c
  8166  002B14  ECDF  F032         	call	_putsUSART	;wreg free
  8167  002B18                     l16776:
  8168                           
  8169                           ;main.c: 1992: }
  8170                           ;main.c: 1995: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  8171  002B18  0101               	movlb	1	; () banked
  8172  002B1A  0E01               	movlw	high _cmdbuf
  8173  002B1C  6E20               	movwf	?_memset+1,c
  8174  002B1E  0E05               	movlw	low _cmdbuf
  8175  002B20  ECE7  F02E         	call	PL30	;call to abstracted procedure
  8176  002B24  EC0E  F035         	call	_memset	;wreg free
  8177                           
  8178                           ;main.c: 1996: pos = 0;
  8179  002B28  0101               	movlb	1	; () banked
  8180  002B2A  6B03               	clrf	_pos& (0+255),b
  8181  002B2C                     l16780:
  8182                           
  8183                           ;main.c: 1998: }
  8184                           ;main.c: 2001: (INTCONbits.GIE = 1);
  8185  002B2C  8EF2               	bsf	intcon,7,c	;volatile
  8186  002B2E                     l847:
  8187  002B2E  0012               	return	
  8188  002B30                     __end_of_doModeSLCAN:
  8189                           	opt stack 0
  8190  002B30                     PL50:
  8191                           	opt stack 20
  8192  002B30  0E05               	movlw	low _cmdbuf
  8193  002B32  2503               	addwf	_pos& (0+255),w,b
  8194  002B34  6ED9               	movwf	fsr2l,c
  8195  002B36  6ADA               	clrf	fsr2h,c
  8196  002B38  0E01               	movlw	high _cmdbuf
  8197  002B3A  22DA               	addwfc	fsr2h,f,c
  8198  002B3C  0012               	return	
  8199  002B3E                     __end_ofPL50:
  8200                           	opt stack 0
  8201  002B3E                     PL116:
  8202                           	opt stack 23
  8203  002B3E  90D8               	bcf	status,0,c
  8204  002B40  3792               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  8205  002B42  3793               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  8206  002B44  3794               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  8207  002B46  3795               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  8208  002B48  0012               	return	
  8209  002B4A                     __end_ofPL116:
  8210                           	opt stack 0
  8211                           tblptru	equ	0xFF8
  8212                           tblptrh	equ	0xFF7
  8213                           tblptrl	equ	0xFF6
  8214                           tablat	equ	0xFF5
  8215                           prodh	equ	0xFF4
  8216                           prodl	equ	0xFF3
  8217                           intcon	equ	0xFF2
  8218                           indf0	equ	0xFEF
  8219                           postinc0	equ	0xFEE
  8220                           fsr0h	equ	0xFEA
  8221                           fsr0l	equ	0xFE9
  8222                           wreg	equ	0xFE8
  8223                           indf1	equ	0xFE7
  8224                           postinc1	equ	0xFE6
  8225                           postdec1	equ	0xFE5
  8226                           fsr1h	equ	0xFE2
  8227                           fsr1l	equ	0xFE1
  8228                           indf2	equ	0xFDF
  8229                           postinc2	equ	0xFDE
  8230                           postdec2	equ	0xFDD
  8231                           plusw2	equ	0xFDB
  8232                           fsr2h	equ	0xFDA
  8233                           fsr2l	equ	0xFD9
  8234                           status	equ	0xFD8
  8235                           
  8236 ;; *************** function _hexStringToBytes *****************
  8237 ;; Defined at:
  8238 ;;		line 35 in file "hexutils.c"
  8239 ;; Parameters:    Size  Location     Type
  8240 ;;  buf             2   34[COMRAM] PTR unsigned char 
  8241 ;;		 -> wrkbuf(80), 
  8242 ;;  size            1   36[COMRAM] unsigned char 
  8243 ;;  inhex           2   37[COMRAM] PTR unsigned char 
  8244 ;;		 -> cmdbuf(80), 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  i               2    7[BANK0 ] int 
  8247 ;;  p               2    5[BANK0 ] PTR unsigned char 
  8248 ;;		 -> cmdbuf(80), 
  8249 ;;  len             2    3[BANK0 ] int 
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      unsigned char 
  8252 ;; Registers used:
  8253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : F/1
  8256 ;;		On exit  : F/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8259 ;;      Params:         5       0       0       0       0       0       0
  8260 ;;      Locals:         0       6       0       0       0       0       0
  8261 ;;      Temps:          0       3       0       0       0       0       0
  8262 ;;      Totals:         5       9       0       0       0       0       0
  8263 ;;Total ram usage:       14 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    4
  8266 ;; This function calls:
  8267 ;;		_strlen
  8268 ;;		_nibbleFromChar
  8269 ;; This function is called by:
  8270 ;;		_doModeSLCAN
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text3
  8275  005CA6                     __ptext3:
  8276                           	opt stack 0
  8277  005CA6                     _hexStringToBytes:
  8278                           	opt stack 25
  8279                           
  8280                           ; BSR set to: 1
  8281                           ;hexutils.c: 36: uint8_t *p;
  8282                           ;hexutils.c: 37: int len, i;
  8283                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  8284                           
  8285                           ;incstack = 0
  8286                           ;incstack = 0
  8287  005CA6  C026  F01F         	movff	hexStringToBytes@inhex,?_strlen
  8288  005CAA  C027  F020         	movff	hexStringToBytes@inhex+1,?_strlen+1
  8289  005CAE  EC35  F034         	call	_strlen	;wreg free
  8290  005CB2  90D8               	bcf	status,0,c
  8291  005CB4  3020               	rrcf	?_strlen+1,w,c
  8292  005CB6  0100               	movlb	0	; () banked
  8293  005CB8  6F64               	movwf	(hexStringToBytes@len+1)& (0+255),b
  8294  005CBA  301F               	rrcf	?_strlen,w,c
  8295  005CBC  6F63               	movwf	hexStringToBytes@len& (0+255),b
  8296                           
  8297                           ; BSR set to: 0
  8298                           ;hexutils.c: 40: if (len > size) return 0;
  8299  005CBE  5025               	movf	hexStringToBytes@size,w,c
  8300  005CC0  6F60               	movwf	??_hexStringToBytes& (0+255),b
  8301  005CC2  6B61               	clrf	(??_hexStringToBytes+1)& (0+255),b
  8302  005CC4  5161               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  8303  005CC6  0A80               	xorlw	128
  8304  005CC8  6F62               	movwf	(??_hexStringToBytes+2)& (0+255),b
  8305  005CCA  5163               	movf	hexStringToBytes@len& (0+255),w,b
  8306  005CCC  5D60               	subwf	??_hexStringToBytes& (0+255),w,b
  8307  005CCE  5164               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8308  005CD0  0A80               	xorlw	128
  8309  005CD2  5962               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  8310  005CD4  E202               	bc	l1759
  8311                           
  8312                           ; BSR set to: 0
  8313  005CD6  0E00               	movlw	0
  8314  005CD8  D033               	goto	l1760
  8315  005CDA                     l1759:
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  8319  005CDA  6B67               	clrf	hexStringToBytes@i& (0+255),b
  8320  005CDC  6B68               	clrf	(hexStringToBytes@i+1)& (0+255),b
  8321  005CDE  C026  F065         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  8322  005CE2  C027  F066         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  8323  005CE6  D022               	goto	l18560
  8324  005CE8                     l18554:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  8328  005CE8  5167               	movf	hexStringToBytes@i& (0+255),w,b
  8329  005CEA  2423               	addwf	hexStringToBytes@buf,w,c
  8330  005CEC  6ED9               	movwf	fsr2l,c
  8331  005CEE  5168               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8332  005CF0  2024               	addwfc	hexStringToBytes@buf+1,w,c
  8333  005CF2  6EDA               	movwf	fsr2h,c
  8334  005CF4  EE10 F001          	lfsr	1,1
  8335  005CF8  5165               	movf	hexStringToBytes@p& (0+255),w,b
  8336  005CFA  26E1               	addwf	fsr1l,f,c
  8337  005CFC  5166               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  8338  005CFE  22E2               	addwfc	fsr1h,f,c
  8339  005D00  50E7               	movf	indf1,w,c
  8340  005D02  ECD8  F033         	call	_nibbleFromChar
  8341  005D06  6F60               	movwf	??_hexStringToBytes& (0+255),b
  8342  005D08  C065  FFE1         	movff	hexStringToBytes@p,fsr1l
  8343  005D0C  C066  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  8344  005D10  50E7               	movf	indf1,w,c
  8345  005D12  ECD8  F033         	call	_nibbleFromChar
  8346  005D16  6F61               	movwf	(??_hexStringToBytes+1)& (0+255),b
  8347  005D18  3961               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  8348  005D1A  0BF0               	andlw	240
  8349  005D1C  1160               	iorwf	??_hexStringToBytes& (0+255),w,b
  8350  005D1E  6EDF               	movwf	indf2,c
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;hexutils.c: 43: p += 2;
  8354  005D20  0E02               	movlw	2
  8355  005D22  2765               	addwf	hexStringToBytes@p& (0+255),f,b
  8356  005D24  0E00               	movlw	0
  8357  005D26  2366               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  8358                           
  8359                           ; BSR set to: 0
  8360  005D28  4B67               	infsnz	hexStringToBytes@i& (0+255),f,b
  8361  005D2A  2B68               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  8362  005D2C                     l18560:
  8363                           
  8364                           ; BSR set to: 0
  8365  005D2C  5168               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  8366  005D2E  0A80               	xorlw	128
  8367  005D30  6F60               	movwf	??_hexStringToBytes& (0+255),b
  8368  005D32  5163               	movf	hexStringToBytes@len& (0+255),w,b
  8369  005D34  5D67               	subwf	hexStringToBytes@i& (0+255),w,b
  8370  005D36  5164               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  8371  005D38  0A80               	xorlw	128
  8372  005D3A  5960               	subwfb	??_hexStringToBytes& (0+255),w,b
  8373  005D3C  E3D5               	bnc	l18554
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;hexutils.c: 44: }
  8377                           ;hexutils.c: 46: return i;
  8378  005D3E  5167               	movf	hexStringToBytes@i& (0+255),w,b
  8379  005D40                     l1760:
  8380                           
  8381                           ; BSR set to: 0
  8382  005D40  0012               	return	
  8383  005D42                     __end_of_hexStringToBytes:
  8384                           	opt stack 0
  8385                           tblptru	equ	0xFF8
  8386                           tblptrh	equ	0xFF7
  8387                           tblptrl	equ	0xFF6
  8388                           tablat	equ	0xFF5
  8389                           prodh	equ	0xFF4
  8390                           prodl	equ	0xFF3
  8391                           intcon	equ	0xFF2
  8392                           indf0	equ	0xFEF
  8393                           postinc0	equ	0xFEE
  8394                           fsr0h	equ	0xFEA
  8395                           fsr0l	equ	0xFE9
  8396                           wreg	equ	0xFE8
  8397                           indf1	equ	0xFE7
  8398                           postinc1	equ	0xFE6
  8399                           postdec1	equ	0xFE5
  8400                           fsr1h	equ	0xFE2
  8401                           fsr1l	equ	0xFE1
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _nibbleFromChar *****************
  8411 ;; Defined at:
  8412 ;;		line 20 in file "hexutils.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  c               1    wreg     unsigned char 
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  c               1   30[COMRAM] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      unsigned char 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, status,0
  8421 ;; Tracked objects:
  8422 ;;		On entry : F/0
  8423 ;;		On exit  : F/0
  8424 ;;		Unchanged: F/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8426 ;;      Params:         0       0       0       0       0       0       0
  8427 ;;      Locals:         1       0       0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0
  8429 ;;      Totals:         1       0       0       0       0       0       0
  8430 ;;Total ram usage:        1 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    3
  8433 ;; This function calls:
  8434 ;;		Nothing
  8435 ;; This function is called by:
  8436 ;;		_hexStringToBytes
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           	psect	text4
  8441  0067B0                     __ptext4:
  8442                           	opt stack 0
  8443  0067B0                     _nibbleFromChar:
  8444                           	opt stack 25
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;incstack = 0
  8448                           ;incstack = 0
  8449                           ;nibbleFromChar@c stored from wreg
  8450  0067B0  CFE8 F01F          	movff	wreg,nibbleFromChar@c
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  8454  0067B4  0E2F               	movlw	47
  8455  0067B6  641F               	cpfsgt	nibbleFromChar@c,c
  8456  0067B8  D006               	goto	l18838
  8457                           
  8458                           ; BSR set to: 0
  8459  0067BA  0E3A               	movlw	58
  8460  0067BC  601F               	cpfslt	nibbleFromChar@c,c
  8461  0067BE  D003               	goto	l18838
  8462                           
  8463                           ; BSR set to: 0
  8464  0067C0  501F               	movf	nibbleFromChar@c,w,c
  8465  0067C2  0FD0               	addlw	208
  8466  0067C4  D013               	goto	l1754
  8467  0067C6                     l18838:
  8468                           
  8469                           ; BSR set to: 0
  8470                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  8471  0067C6  0E60               	movlw	96
  8472  0067C8  641F               	cpfsgt	nibbleFromChar@c,c
  8473  0067CA  D006               	goto	l18846
  8474                           
  8475                           ; BSR set to: 0
  8476  0067CC  0E67               	movlw	103
  8477  0067CE  601F               	cpfslt	nibbleFromChar@c,c
  8478  0067D0  D003               	goto	l18846
  8479                           
  8480                           ; BSR set to: 0
  8481  0067D2  501F               	movf	nibbleFromChar@c,w,c
  8482  0067D4  0FA9               	addlw	169
  8483  0067D6  D00A               	goto	l1754
  8484  0067D8                     l18846:
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  8488  0067D8  0E40               	movlw	64
  8489  0067DA  641F               	cpfsgt	nibbleFromChar@c,c
  8490  0067DC  D006               	goto	l18854
  8491                           
  8492                           ; BSR set to: 0
  8493  0067DE  0E47               	movlw	71
  8494  0067E0  601F               	cpfslt	nibbleFromChar@c,c
  8495  0067E2  D003               	goto	l18854
  8496                           
  8497                           ; BSR set to: 0
  8498  0067E4  501F               	movf	nibbleFromChar@c,w,c
  8499  0067E6  0FC9               	addlw	201
  8500  0067E8  D001               	goto	l1754
  8501  0067EA                     l18854:
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;hexutils.c: 24: return 255;
  8505  0067EA  0EFF               	movlw	255
  8506  0067EC                     l1754:
  8507                           
  8508                           ; BSR set to: 0
  8509  0067EC  0012               	return	
  8510  0067EE                     __end_of_nibbleFromChar:
  8511                           	opt stack 0
  8512                           tblptru	equ	0xFF8
  8513                           tblptrh	equ	0xFF7
  8514                           tblptrl	equ	0xFF6
  8515                           tablat	equ	0xFF5
  8516                           prodh	equ	0xFF4
  8517                           prodl	equ	0xFF3
  8518                           intcon	equ	0xFF2
  8519                           indf0	equ	0xFEF
  8520                           postinc0	equ	0xFEE
  8521                           fsr0h	equ	0xFEA
  8522                           fsr0l	equ	0xFE9
  8523                           wreg	equ	0xFE8
  8524                           indf1	equ	0xFE7
  8525                           postinc1	equ	0xFE6
  8526                           postdec1	equ	0xFE5
  8527                           fsr1h	equ	0xFE2
  8528                           fsr1l	equ	0xFE1
  8529                           indf2	equ	0xFDF
  8530                           postinc2	equ	0xFDE
  8531                           postdec2	equ	0xFDD
  8532                           plusw2	equ	0xFDB
  8533                           fsr2h	equ	0xFDA
  8534                           fsr2l	equ	0xFD9
  8535                           status	equ	0xFD8
  8536                           
  8537 ;; *************** function _receiveSendEventSLCAN *****************
  8538 ;; Defined at:
  8539 ;;		line 2636 in file "main.c"
  8540 ;; Parameters:    Size  Location     Type
  8541 ;;		None
  8542 ;; Auto vars:     Size  Location     Type
  8543 ;;  id              4   29[BANK0 ] unsigned long 
  8544 ;;  i               2   34[BANK0 ] int 
  8545 ;;  dlc             1   33[BANK0 ] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  1    wreg      enum E15660
  8548 ;; Registers used:
  8549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : F/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8555 ;;      Params:         0       0       0       0       0       0       0
  8556 ;;      Locals:         0       7       0       0       0       0       0
  8557 ;;      Temps:          0       3       0       0       0       0       0
  8558 ;;      Totals:         0      10       0       0       0       0       0
  8559 ;;Total ram usage:       10 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    6
  8562 ;; This function calls:
  8563 ;;		_putsUSART
  8564 ;;		_WriteUSART
  8565 ;;		_strlen
  8566 ;;		_getCANFrame
  8567 ;;		_ultoa
  8568 ;;		_itoa
  8569 ;; This function is called by:
  8570 ;;		_doModeSLCAN
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text5
  8575  00438A                     __ptext5:
  8576                           	opt stack 0
  8577  00438A                     _receiveSendEventSLCAN:
  8578                           	opt stack 23
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;main.c: 2637: int i;
  8582                           ;main.c: 2638: uint8_t dlc;
  8583                           ;main.c: 2639: uint32_t id;
  8584                           ;main.c: 2641: if (getCANFrame(&id, &dlc, vscpData)) {
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;incstack = 0
  8588                           ;incstack = 0
  8589  00438A  0E00               	movlw	high receiveSendEventSLCAN@dlc
  8590  00438C  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
  8591  00438E  0E81               	movlw	low receiveSendEventSLCAN@dlc
  8592  004390  6F68               	movwf	?_getCANFrame& (0+255),b
  8593  004392  0E01               	movlw	high _vscpData
  8594  004394  0100               	movlb	0	; () banked
  8595  004396  6F6B               	movwf	(?_getCANFrame+3)& (0+255),b
  8596  004398  0EA5               	movlw	low _vscpData
  8597  00439A  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
  8598  00439C  0E7D               	movlw	receiveSendEventSLCAN@id& (0+255)
  8599  00439E  EC61  F02C         	call	_getCANFrame
  8600  0043A2  0900               	iorlw	0
  8601  0043A4  E101 D0AF          	bz	l1204
  8602                           
  8603                           ; BSR set to: 0
  8604                           ;main.c: 2644: cntRxFrames++;
  8605  0043A8  2BD2               	incf	_cntRxFrames& (0+255),f,b
  8606  0043AA  0E00               	movlw	0
  8607  0043AC  23D3               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  8608  0043AE  23D4               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  8609  0043B0  23D5               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  8610                           
  8611                           ;main.c: 2645: cntRxBytes += dlc;
  8612  0043B2  5181               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8613  0043B4  27CE               	addwf	_cntRxBytes& (0+255),f,b
  8614  0043B6  0E00               	movlw	0
  8615  0043B8  23CF               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  8616  0043BA  23D0               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  8617  0043BC  23D1               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  8618  0043BE                     l1177:
  8619                           
  8620                           ; BSR set to: 0
  8621  0043BE  A2AC               	btfss	4012,1,c	;volatile
  8622  0043C0  D7FE               	goto	l1177
  8623                           
  8624                           ; BSR set to: 0
  8625                           ;main.c: 2648: WriteUSART('T');
  8626  0043C2  0E54               	movlw	84
  8627  0043C4  EC8B  F035         	call	_WriteUSART
  8628                           
  8629                           ;main.c: 2650: ultoa(wrkbuf, id, 16);
  8630  0043C8  0E01               	movlw	high _wrkbuf
  8631  0043CA  0100               	movlb	0	; () banked
  8632  0043CC  6F6E               	movwf	(?_ultoa+1)& (0+255),b
  8633  0043CE  0E55               	movlw	low _wrkbuf
  8634  0043D0  6F6D               	movwf	?_ultoa& (0+255),b
  8635  0043D2  C07D  F06F         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  8636  0043D6  C07E  F070         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  8637  0043DA  C07F  F071         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  8638  0043DE  C080  F072         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  8639  0043E2  6B74               	clrf	(?_ultoa+7)& (0+255),b
  8640  0043E4  0E10               	movlw	16
  8641  0043E6  6F73               	movwf	(?_ultoa+6)& (0+255),b
  8642  0043E8  EC53  F028         	call	_ultoa	;wreg free
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 2652: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8646  0043EC  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8647  0043EE  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8648  0043F0                     l1182:
  8649                           
  8650                           ; BSR set to: 0
  8651  0043F0  A2AC               	btfss	4012,1,c	;volatile
  8652  0043F2  D7FE               	goto	l1182
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;main.c: 2654: WriteUSART('0');
  8656  0043F4  0E30               	movlw	48
  8657  0043F6  EC8B  F035         	call	_WriteUSART
  8658                           
  8659                           ; BSR set to: 0
  8660  0043FA  D886               	call	PL122	;call to abstracted procedure
  8661  0043FC  B4D8               	btfsc	status,2,c
  8662  0043FE  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8663  004400  E3F7               	bnc	l1182
  8664                           
  8665                           ; BSR set to: 0
  8666                           ;main.c: 2655: }
  8667                           ;main.c: 2656: putsUSART(wrkbuf);
  8668  004402  0101               	movlb	1	; () banked
  8669  004404  0E01               	movlw	high _wrkbuf
  8670  004406  6E21               	movwf	?_putsUSART+1,c
  8671  004408  0E55               	movlw	low _wrkbuf
  8672  00440A  6E20               	movwf	?_putsUSART,c
  8673  00440C  ECDF  F032         	call	_putsUSART	;wreg free
  8674                           
  8675                           ;main.c: 2659: itoa(wrkbuf, dlc, 16);
  8676  004410  0E01               	movlw	high _wrkbuf
  8677  004412  0100               	movlb	0	; () banked
  8678  004414  6F6A               	movwf	(?_itoa+1)& (0+255),b
  8679  004416  0E55               	movlw	low _wrkbuf
  8680  004418  6F69               	movwf	?_itoa& (0+255),b
  8681  00441A  C081  F06B         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8682  00441E  6B6C               	clrf	(?_itoa+3)& (0+255),b
  8683  004420  6B6E               	clrf	(?_itoa+5)& (0+255),b
  8684  004422  0E10               	movlw	16
  8685  004424  6F6D               	movwf	(?_itoa+4)& (0+255),b
  8686  004426  ECA9  F034         	call	_itoa	;wreg free
  8687  00442A                     l1185:
  8688                           
  8689                           ; BSR set to: 0
  8690  00442A  A2AC               	btfss	4012,1,c	;volatile
  8691  00442C  D7FE               	goto	l1185
  8692                           
  8693                           ; BSR set to: 0
  8694                           ;main.c: 2661: WriteUSART(wrkbuf[0]);
  8695  00442E  0101               	movlb	1	; () banked
  8696  004430  5155               	movf	_wrkbuf& (0+255),w,b
  8697  004432  EC8B  F035         	call	_WriteUSART
  8698                           
  8699                           ;main.c: 2664: for (i = 0; i < dlc; i++) {
  8700  004436  0100               	movlb	0	; () banked
  8701  004438  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8702  00443A  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8703  00443C  D02D               	goto	l18512
  8704  00443E                     l18500:
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;main.c: 2665: itoa(wrkbuf, vscpData[i], 16);
  8708  00443E  0E01               	movlw	high _wrkbuf
  8709  004440  0100               	movlb	0	; () banked
  8710  004442  6F6A               	movwf	(?_itoa+1)& (0+255),b
  8711  004444  0E55               	movlw	low _wrkbuf
  8712  004446  6F69               	movwf	?_itoa& (0+255),b
  8713  004448  0EA5               	movlw	low _vscpData
  8714  00444A  2582               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8715  00444C  6ED9               	movwf	fsr2l,c
  8716  00444E  0E01               	movlw	high _vscpData
  8717  004450  2183               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8718  004452  6EDA               	movwf	fsr2h,c
  8719  004454  50DF               	movf	indf2,w,c
  8720  004456  6F6B               	movwf	(?_itoa+2)& (0+255),b
  8721  004458  6B6C               	clrf	(?_itoa+3)& (0+255),b
  8722  00445A  6B6E               	clrf	(?_itoa+5)& (0+255),b
  8723  00445C  0E10               	movlw	16
  8724  00445E  6F6D               	movwf	(?_itoa+4)& (0+255),b
  8725  004460  ECA9  F034         	call	_itoa	;wreg free
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;main.c: 2667: if (2 != strlen(wrkbuf)) {
  8729  004464  0101               	movlb	1	; () banked
  8730  004466  0E01               	movlw	high _wrkbuf
  8731  004468  6E20               	movwf	?_strlen+1,c
  8732  00446A  0E55               	movlw	low _wrkbuf
  8733  00446C  6E1F               	movwf	?_strlen,c
  8734  00446E  EC35  F034         	call	_strlen	;wreg free
  8735  004472  501F               	movf	?_strlen,w,c
  8736  004474  0A02               	xorlw	2
  8737  004476  1020               	iorwf	?_strlen+1,w,c
  8738  004478  E005               	bz	l18508
  8739  00447A                     l1191:
  8740  00447A  A2AC               	btfss	4012,1,c	;volatile
  8741  00447C  D7FE               	goto	l1191
  8742                           
  8743                           ;main.c: 2669: WriteUSART('0');
  8744  00447E  0E30               	movlw	48
  8745  004480  EC8B  F035         	call	_WriteUSART
  8746  004484                     l18508:
  8747                           
  8748                           ;main.c: 2670: }
  8749                           ;main.c: 2672: putsUSART(wrkbuf);
  8750  004484  0101               	movlb	1	; () banked
  8751  004486  0E01               	movlw	high _wrkbuf
  8752  004488  6E21               	movwf	?_putsUSART+1,c
  8753  00448A  0E55               	movlw	low _wrkbuf
  8754  00448C  6E20               	movwf	?_putsUSART,c
  8755  00448E  ECDF  F032         	call	_putsUSART	;wreg free
  8756  004492  0100               	movlb	0	; () banked
  8757  004494  4B82               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8758  004496  2B83               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8759  004498                     l18512:
  8760                           
  8761                           ; BSR set to: 0
  8762  004498  5181               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8763  00449A  6F7A               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8764  00449C  6B7B               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8765  00449E  5183               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8766  0044A0  0A80               	xorlw	128
  8767  0044A2  6F7C               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8768  0044A4  517A               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8769  0044A6  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8770  0044A8  517B               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8771  0044AA  0A80               	xorlw	128
  8772  0044AC  597C               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8773  0044AE  E3C7               	bnc	l18500
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;main.c: 2673: }
  8777                           ;main.c: 2676: if (nTimeStamp) {
  8778  0044B0  51F2               	movf	_nTimeStamp& (0+255),w,b
  8779  0044B2  E024               	bz	l1201
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;main.c: 2677: ultoa(wrkbuf, timer, 16);
  8783  0044B4  0E01               	movlw	high _wrkbuf
  8784  0044B6  0100               	movlb	0	; () banked
  8785  0044B8  6F6E               	movwf	(?_ultoa+1)& (0+255),b
  8786  0044BA  0E55               	movlw	low _wrkbuf
  8787  0044BC  6F6D               	movwf	?_ultoa& (0+255),b
  8788  0044BE  C0E2  F06F         	movff	_timer,?_ultoa+2	;volatile
  8789  0044C2  C0E3  F070         	movff	_timer+1,?_ultoa+3	;volatile
  8790  0044C6  C0E4  F071         	movff	_timer+2,?_ultoa+4	;volatile
  8791  0044CA  C0E5  F072         	movff	_timer+3,?_ultoa+5	;volatile
  8792  0044CE  6B74               	clrf	(?_ultoa+7)& (0+255),b
  8793  0044D0  0E10               	movlw	16
  8794  0044D2  6F73               	movwf	(?_ultoa+6)& (0+255),b
  8795  0044D4  EC53  F028         	call	_ultoa	;wreg free
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;main.c: 2679: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8799  0044D8  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8800  0044DA  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8801  0044DC                     l1198:
  8802                           
  8803                           ; BSR set to: 0
  8804  0044DC  A2AC               	btfss	4012,1,c	;volatile
  8805  0044DE  D7FE               	goto	l1198
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;main.c: 2681: WriteUSART('0');
  8809  0044E0  0E30               	movlw	48
  8810  0044E2  EC8B  F035         	call	_WriteUSART
  8811                           
  8812                           ; BSR set to: 0
  8813  0044E6  D810               	call	PL122	;call to abstracted procedure
  8814  0044E8  B4D8               	btfsc	status,2,c
  8815  0044EA  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8816  0044EC  E3F7               	bnc	l1198
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 2682: }
  8820                           ;main.c: 2683: putsUSART(wrkbuf);
  8821  0044EE  0101               	movlb	1	; () banked
  8822  0044F0  0E01               	movlw	high _wrkbuf
  8823  0044F2  6E21               	movwf	?_putsUSART+1,c
  8824  0044F4  0E55               	movlw	low _wrkbuf
  8825  0044F6  6E20               	movwf	?_putsUSART,c
  8826  0044F8  ECDF  F032         	call	_putsUSART	;wreg free
  8827  0044FC                     l1201:
  8828  0044FC  A2AC               	btfss	4012,1,c	;volatile
  8829  0044FE  D7FE               	goto	l1201
  8830                           
  8831                           ;main.c: 2687: WriteUSART(0x0d);
  8832  004500  0E0D               	movlw	13
  8833  004502  EC8B  F035         	call	_WriteUSART
  8834  004506                     l1204:
  8835  004506  0012               	return	
  8836  004508                     __end_of_receiveSendEventSLCAN:
  8837                           	opt stack 0
  8838  004508                     PL122:
  8839                           	opt stack 23
  8840  004508  0100               	movlb	0	; () banked
  8841  00450A  4B82               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8842  00450C  2B83               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8843  00450E  5183               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8844  004510  0A80               	xorlw	128
  8845  004512  0F80               	addlw	-128
  8846  004514  0CB8               	retlw	184
  8847  004516                     __end_ofPL122:
  8848                           	opt stack 0
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           indf0	equ	0xFEF
  8857                           postinc0	equ	0xFEE
  8858                           fsr0h	equ	0xFEA
  8859                           fsr0l	equ	0xFE9
  8860                           wreg	equ	0xFE8
  8861                           indf1	equ	0xFE7
  8862                           postinc1	equ	0xFE6
  8863                           postdec1	equ	0xFE5
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           plusw2	equ	0xFDB
  8870                           fsr2h	equ	0xFDA
  8871                           fsr2l	equ	0xFD9
  8872                           status	equ	0xFD8
  8873                           
  8874 ;; *************** function _ultoa *****************
  8875 ;; Defined at:
  8876 ;;		line 34 in file "/opt/microchip/xc8/v1.21/sources/common/ltoa.c"
  8877 ;; Parameters:    Size  Location     Type
  8878 ;;  buf             2   13[BANK0 ] PTR unsigned char 
  8879 ;;		 -> wrkbuf(80), 
  8880 ;;  val             4   15[BANK0 ] unsigned long 
  8881 ;;  base            2   19[BANK0 ] int 
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  v               4   21[BANK0 ] unsigned long 
  8884 ;;  c               1   25[BANK0 ] unsigned char 
  8885 ;; Return value:  Size  Location     Type
  8886 ;;                  2   13[BANK0 ] PTR unsigned char 
  8887 ;; Registers used:
  8888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : F/0
  8891 ;;		On exit  : F/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8894 ;;      Params:         0       8       0       0       0       0       0
  8895 ;;      Locals:         0       5       0       0       0       0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0
  8897 ;;      Totals:         0      13       0       0       0       0       0
  8898 ;;Total ram usage:       13 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    4
  8901 ;; This function calls:
  8902 ;;		___lldiv
  8903 ;;		___llmod
  8904 ;; This function is called by:
  8905 ;;		_receiveSendEventSLCAN
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           	psect	text6
  8910  0050A6                     __ptext6:
  8911                           	opt stack 0
  8912  0050A6                     _ultoa:
  8913                           	opt stack 24
  8914                           
  8915                           ; BSR set to: 0
  8916                           
  8917                           ;incstack = 0
  8918                           ;incstack = 0
  8919  0050A6  C06F  F075         	movff	ultoa@val,ultoa@v
  8920  0050AA  C070  F076         	movff	ultoa@val+1,ultoa@v+1
  8921  0050AE  C071  F077         	movff	ultoa@val+2,ultoa@v+2
  8922  0050B2  C072  F078         	movff	ultoa@val+3,ultoa@v+3
  8923  0050B6                     l18676:
  8924                           
  8925                           ; BSR set to: 0
  8926  0050B6  C075  F01F         	movff	ultoa@v,?___lldiv
  8927  0050BA  C076  F020         	movff	ultoa@v+1,?___lldiv+1
  8928  0050BE  C077  F021         	movff	ultoa@v+2,?___lldiv+2
  8929  0050C2  C078  F022         	movff	ultoa@v+3,?___lldiv+3
  8930  0050C6  D858               	call	PL92	;call to abstracted procedure
  8931  0050C8  EC7F  F030         	call	___lldiv	;wreg free
  8932  0050CC  C022  F078         	movff	?___lldiv+3,ultoa@v+3
  8933  0050D0  C021  F077         	movff	?___lldiv+2,ultoa@v+2
  8934  0050D4  C020  F076         	movff	?___lldiv+1,ultoa@v+1
  8935  0050D8  C01F  F075         	movff	?___lldiv,ultoa@v
  8936                           
  8937                           ; BSR set to: 0
  8938  0050DC  4B6D               	infsnz	ultoa@buf& (0+255),f,b
  8939  0050DE  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
  8940                           
  8941                           ; BSR set to: 0
  8942  0050E0  5178               	movf	(ultoa@v+3)& (0+255),w,b
  8943  0050E2  1175               	iorwf	ultoa@v& (0+255),w,b
  8944  0050E4  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
  8945  0050E6  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
  8946  0050E8  E1E6               	bnz	l18676
  8947                           
  8948                           ; BSR set to: 0
  8949  0050EA  C06D  FFD9         	movff	ultoa@buf,fsr2l
  8950  0050EE  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  8951  0050F2  6ADF               	clrf	indf2,c
  8952                           
  8953                           ; BSR set to: 0
  8954  0050F4  076D               	decf	ultoa@buf& (0+255),f,b
  8955  0050F6  A0D8               	btfss	status,0,c
  8956  0050F8  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  8957  0050FA                     l18686:
  8958                           
  8959                           ; BSR set to: 0
  8960  0050FA  C06F  F065         	movff	ultoa@val,?___llmod
  8961  0050FE  C070  F066         	movff	ultoa@val+1,?___llmod+1
  8962  005102  C071  F067         	movff	ultoa@val+2,?___llmod+2
  8963  005106  C072  F068         	movff	ultoa@val+3,?___llmod+3
  8964  00510A  C073  F069         	movff	ultoa@base,?___llmod+4
  8965  00510E  C074  F06A         	movff	ultoa@base+1,?___llmod+5
  8966  005112  0E00               	movlw	0
  8967  005114  BF6A               	btfsc	(?___llmod+5)& (0+255),7,b
  8968  005116  0EFF               	movlw	-1
  8969  005118  6F6B               	movwf	(?___llmod+6)& (0+255),b
  8970  00511A  6F6C               	movwf	(?___llmod+7)& (0+255),b
  8971  00511C  ECC8  F031         	call	___llmod	;wreg free
  8972  005120  5165               	movf	?___llmod& (0+255),w,b
  8973  005122  6F79               	movwf	ultoa@c& (0+255),b
  8974                           
  8975                           ; BSR set to: 0
  8976  005124  C06F  F01F         	movff	ultoa@val,?___lldiv
  8977  005128  C070  F020         	movff	ultoa@val+1,?___lldiv+1
  8978  00512C  C071  F021         	movff	ultoa@val+2,?___lldiv+2
  8979  005130  C072  F022         	movff	ultoa@val+3,?___lldiv+3
  8980  005134  D821               	call	PL92	;call to abstracted procedure
  8981  005136  EC7F  F030         	call	___lldiv	;wreg free
  8982  00513A  C022  F072         	movff	?___lldiv+3,ultoa@val+3
  8983  00513E  C021  F071         	movff	?___lldiv+2,ultoa@val+2
  8984  005142  C020  F070         	movff	?___lldiv+1,ultoa@val+1
  8985  005146  C01F  F06F         	movff	?___lldiv,ultoa@val
  8986                           
  8987                           ; BSR set to: 0
  8988  00514A  0E09               	movlw	9
  8989  00514C  6579               	cpfsgt	ultoa@c& (0+255),b
  8990  00514E  D002               	goto	l2621
  8991                           
  8992                           ; BSR set to: 0
  8993  005150  0E07               	movlw	7
  8994  005152  2779               	addwf	ultoa@c& (0+255),f,b
  8995  005154                     l2621:
  8996                           
  8997                           ; BSR set to: 0
  8998  005154  0E30               	movlw	48
  8999  005156  2779               	addwf	ultoa@c& (0+255),f,b
  9000                           
  9001                           ; BSR set to: 0
  9002  005158  C06D  FFD9         	movff	ultoa@buf,fsr2l
  9003  00515C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  9004  005160  C079  FFDF         	movff	ultoa@c,indf2
  9005                           
  9006                           ; BSR set to: 0
  9007  005164  076D               	decf	ultoa@buf& (0+255),f,b
  9008  005166  A0D8               	btfss	status,0,c
  9009  005168  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012  00516A  5172               	movf	(ultoa@val+3)& (0+255),w,b
  9013  00516C  116F               	iorwf	ultoa@val& (0+255),w,b
  9014  00516E  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
  9015  005170  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
  9016  005172  B4D8               	btfsc	status,2,c
  9017                           
  9018                           ; BSR set to: 0
  9019  005174  0012               	return	
  9020  005176  D7C1               	goto	l18686
  9021  005178                     __end_of_ultoa:
  9022                           	opt stack 0
  9023  005178                     PL92:
  9024                           	opt stack 24
  9025  005178  C073  F023         	movff	ultoa@base,?___lldiv+4
  9026  00517C  C074  F024         	movff	ultoa@base+1,?___lldiv+5
  9027  005180  0E00               	movlw	0
  9028  005182  BE24               	btfsc	?___lldiv+5,7,c
  9029  005184  0EFF               	movlw	-1
  9030  005186  6E25               	movwf	?___lldiv+6,c
  9031  005188  6E26               	movwf	?___lldiv+7,c
  9032  00518A  0012               	return	
  9033  00518C                     __end_ofPL92:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           intcon	equ	0xFF2
  9042                           indf0	equ	0xFEF
  9043                           postinc0	equ	0xFEE
  9044                           fsr0h	equ	0xFEA
  9045                           fsr0l	equ	0xFE9
  9046                           wreg	equ	0xFE8
  9047                           indf1	equ	0xFE7
  9048                           postinc1	equ	0xFE6
  9049                           postdec1	equ	0xFE5
  9050                           fsr1h	equ	0xFE2
  9051                           fsr1l	equ	0xFE1
  9052                           indf2	equ	0xFDF
  9053                           postinc2	equ	0xFDE
  9054                           postdec2	equ	0xFDD
  9055                           plusw2	equ	0xFDB
  9056                           fsr2h	equ	0xFDA
  9057                           fsr2l	equ	0xFD9
  9058                           status	equ	0xFD8
  9059                           
  9060 ;; *************** function _doModeVscp *****************
  9061 ;; Defined at:
  9062 ;;		line 1438 in file "main.c"
  9063 ;; Parameters:    Size  Location     Type
  9064 ;;		None
  9065 ;; Auto vars:     Size  Location     Type
  9066 ;;  mask            1   85[BANK0 ] unsigned char 
  9067 ;;  filter          1   84[BANK0 ] unsigned char 
  9068 ;;  c               1   86[BANK0 ] unsigned char 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;		None               void
  9071 ;; Registers used:
  9072 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9078 ;;      Params:         0       0       0       0       0       0       0
  9079 ;;      Locals:         0       3       0       0       0       0       0
  9080 ;;      Temps:          0       4       0       0       0       0       0
  9081 ;;      Totals:         0       7       0       0       0       0       0
  9082 ;;Total ram usage:        7 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    7
  9085 ;; This function calls:
  9086 ;;		_fifo_read
  9087 ;;		_ECANSetOperationMode
  9088 ;;		_setFilter
  9089 ;;		_Busy_eep
  9090 ;;		_Write_b_eep
  9091 ;;		_changeBaudrate
  9092 ;;		_receiveSendMultiEventCANAL
  9093 ;;		_receiveSendEventCANAL
  9094 ;;		_calcCRC
  9095 ;;		_sendVSCPDriverNack
  9096 ;;		_sendVSCPDriverAck
  9097 ;;		_receiveVSCPModeCanalMsg
  9098 ;;		_receiveVSCPModeMultiCanalMsg
  9099 ;;		_sendVSCPModeCapabilities
  9100 ;;		_sendVSCPDriverCommandReply
  9101 ;;		_sendVSCPDriverErrorFrame
  9102 ;; This function is called by:
  9103 ;;		_main
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text7
  9108  002B4A                     __ptext7:
  9109                           	opt stack 0
  9110  002B4A                     _doModeVscp:
  9111                           	opt stack 23
  9112                           
  9113                           ;main.c: 1439: uint8_t c;
  9114                           ;main.c: 1442: if ( caps.maxCanalFrames > 1 ) {
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;incstack = 0
  9118                           ;incstack = 0
  9119  002B4A  0100               	movlb	0	; () banked
  9120  002B4C  EE20  F0FD         	lfsr	2,_caps+1
  9121  002B50  0E01               	movlw	1
  9122  002B52  64DF               	cpfsgt	indf2,c
  9123  002B54  D003               	goto	l16382
  9124                           
  9125                           ; BSR set to: 0
  9126                           ;main.c: 1445: receiveSendMultiEventCANAL();
  9127  002B56  EC03  F01D         	call	_receiveSendMultiEventCANAL	;wreg free
  9128                           
  9129                           ;main.c: 1446: }
  9130  002B5A  D002               	goto	l16384
  9131  002B5C                     l16382:
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;main.c: 1447: else {
  9135                           ;main.c: 1450: receiveSendEventCANAL();
  9136  002B5C  EC13  F01F         	call	_receiveSendEventCANAL	;wreg free
  9137  002B60                     l16384:
  9138                           
  9139                           ;main.c: 1451: }
  9140                           ;main.c: 1454: (INTCONbits.GIE = 0);
  9141  002B60  9EF2               	bcf	intcon,7,c	;volatile
  9142                           
  9143                           ;main.c: 1456: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  9144  002B62  0100               	movlb	0	; () banked
  9145  002B64  0E00               	movlw	high _serialInputFifo
  9146  002B66  6E20               	movwf	?_fifo_read+1,c
  9147  002B68  0EF4               	movlw	low _serialInputFifo
  9148  002B6A  6E1F               	movwf	?_fifo_read,c
  9149  002B6C  0E00               	movlw	high doModeVscp@c
  9150  002B6E  6E22               	movwf	?_fifo_read+3,c
  9151  002B70  0EB6               	movlw	low doModeVscp@c
  9152  002B72  6E21               	movwf	?_fifo_read+2,c
  9153  002B74  6A24               	clrf	?_fifo_read+5,c
  9154  002B76  0E01               	movlw	1
  9155  002B78  6E23               	movwf	?_fifo_read+4,c
  9156  002B7A  ECA6  F029         	call	_fifo_read	;wreg free
  9157  002B7E  041F               	decf	?_fifo_read,w,c
  9158  002B80  1020               	iorwf	?_fifo_read+1,w,c
  9159  002B82  E001 D16B          	bnz	l16620
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;main.c: 1459: (INTCONbits.GIE = 1);
  9163  002B86  8EF2               	bsf	intcon,7,c	;volatile
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;main.c: 1462: if ( pos >= sizeof( cmdbuf ) ) {
  9167  002B88  0E4F               	movlw	79
  9168  002B8A  0101               	movlb	1	; () banked
  9169  002B8C  6503               	cpfsgt	_pos& (0+255),b
  9170  002B8E  D003               	goto	l764
  9171                           
  9172                           ; BSR set to: 1
  9173                           ;main.c: 1464: pos = 0;
  9174  002B90  6B03               	clrf	_pos& (0+255),b
  9175                           
  9176                           ;main.c: 1465: bDLE = 0;
  9177  002B92  6A30               	clrf	_bDLE,c
  9178                           
  9179                           ;main.c: 1466: stateVscpDriver = 0;
  9180  002B94  6A33               	clrf	_stateVscpDriver,c
  9181  002B96                     l764:
  9182                           
  9183                           ; BSR set to: 1
  9184                           ;main.c: 1467: }
  9185                           ;main.c: 1469: if ( 0 == stateVscpDriver ) {
  9186  002B96  6633               	tstfsz	_stateVscpDriver,c
  9187  002B98  D00F               	goto	l16408
  9188                           
  9189                           ; BSR set to: 1
  9190                           ;main.c: 1471: if ( bDLE ) {
  9191  002B9A  5030               	movf	_bDLE,w,c
  9192  002B9C  E00A               	bz	l16404
  9193                           
  9194                           ; BSR set to: 1
  9195                           ;main.c: 1473: bDLE = 0;
  9196  002B9E  6A30               	clrf	_bDLE,c
  9197                           
  9198                           ; BSR set to: 1
  9199                           ;main.c: 1476: if ( 0x02 == c ) {
  9200  002BA0  0100               	movlb	0	; () banked
  9201  002BA2  51B6               	movf	doModeVscp@c& (0+255),w,b
  9202  002BA4  0A02               	xorlw	2
  9203  002BA6  E129               	bnz	l16444
  9204                           
  9205                           ; BSR set to: 0
  9206                           ;main.c: 1477: stateVscpDriver = 1;
  9207  002BA8  0E01               	movlw	1
  9208  002BAA  6E33               	movwf	_stateVscpDriver,c
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;main.c: 1478: pos = 0;
  9212  002BAC  0101               	movlb	1	; () banked
  9213  002BAE  6B03               	clrf	_pos& (0+255),b
  9214  002BB0  D024               	goto	l16444
  9215  002BB2                     l16404:
  9216                           
  9217                           ;main.c: 1481: else {
  9218                           ;main.c: 1482: bDLE = 1;
  9219  002BB2  0E01               	movlw	1
  9220  002BB4  6E30               	movwf	_bDLE,c
  9221  002BB6  D153               	goto	l769
  9222  002BB8                     l16408:
  9223                           
  9224                           ; BSR set to: 1
  9225                           ;main.c: 1486: else if ( 1 == stateVscpDriver ) {
  9226  002BB8  0433               	decf	_stateVscpDriver,w,c
  9227  002BBA  E11F               	bnz	l16444
  9228                           
  9229                           ; BSR set to: 1
  9230                           ;main.c: 1489: if ( bDLE ) {
  9231  002BBC  5030               	movf	_bDLE,w,c
  9232  002BBE  E018               	bz	l16428
  9233                           
  9234                           ; BSR set to: 1
  9235                           ;main.c: 1492: bDLE = 0;
  9236  002BC0  6A30               	clrf	_bDLE,c
  9237                           
  9238                           ; BSR set to: 1
  9239                           ;main.c: 1495: if ( 0x03 == c ) {
  9240  002BC2  0100               	movlb	0	; () banked
  9241  002BC4  51B6               	movf	doModeVscp@c& (0+255),w,b
  9242  002BC6  0A03               	xorlw	3
  9243  002BC8  E103               	bnz	l16418
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 1496: stateVscpDriver = 2;
  9247  002BCA  0E02               	movlw	2
  9248  002BCC  6E33               	movwf	_stateVscpDriver,c
  9249                           
  9250                           ;main.c: 1497: }
  9251  002BCE  D015               	goto	l16444
  9252  002BD0                     l16418:
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;main.c: 1499: else if (0x10 == c) {
  9256  002BD0  51B6               	movf	doModeVscp@c& (0+255),w,b
  9257  002BD2  0A10               	xorlw	16
  9258  002BD4  E112               	bnz	l16444
  9259  002BD6                     u21070:
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;main.c: 1501: cmdbuf[ pos++ ] = c;
  9263  002BD6  0101               	movlb	1	; () banked
  9264  002BD8  EC98  F015         	call	PL50	;call to abstracted procedure
  9265  002BDC  C0B6  FFDF         	movff	doModeVscp@c,indf2
  9266                           
  9267                           ; BSR set to: 0
  9268  002BE0  2B03               	incf	_pos& (0+255),f,b
  9269                           
  9270                           ; BSR set to: 1
  9271                           ;main.c: 1502: if ( pos >= sizeof( cmdbuf ) ) {
  9272  002BE2  0E4F               	movlw	79
  9273  002BE4  6503               	cpfsgt	_pos& (0+255),b
  9274  002BE6  D13B               	goto	l769
  9275                           
  9276                           ; BSR set to: 1
  9277                           ;main.c: 1505: bDLE = 0;
  9278  002BE8  6A30               	clrf	_bDLE,c
  9279                           
  9280                           ;main.c: 1506: pos = 0;
  9281  002BEA  6B03               	clrf	_pos& (0+255),b
  9282                           
  9283                           ;main.c: 1507: stateVscpDriver = 0;
  9284  002BEC  6A33               	clrf	_stateVscpDriver,c
  9285  002BEE  D137               	goto	l769
  9286  002BF0                     l16428:
  9287                           
  9288                           ; BSR set to: 1
  9289                           ;main.c: 1512: else {
  9290                           ;main.c: 1513: if (0x10 == c) {
  9291  002BF0  0100               	movlb	0	; () banked
  9292  002BF2  51B6               	movf	doModeVscp@c& (0+255),w,b
  9293  002BF4  0A10               	xorlw	16
  9294  002BF6  E0DD               	bz	l16404
  9295  002BF8  D7EE               	goto	u21070
  9296  002BFA                     l16444:
  9297                           
  9298                           ;main.c: 1529: }
  9299                           ;main.c: 1530: }
  9300                           ;main.c: 1531: }
  9301                           ;main.c: 1533: if (2 == stateVscpDriver) {
  9302  002BFA  5033               	movf	_stateVscpDriver,w,c
  9303  002BFC  0A02               	xorlw	2
  9304  002BFE  E001 D12D          	bnz	l16620
  9305                           
  9306                           ;main.c: 1536: stateVscpDriver = 0;
  9307  002C02  6A33               	clrf	_stateVscpDriver,c
  9308                           
  9309                           ;main.c: 1548: if (calcCRC(cmdbuf, pos)) {
  9310  002C04  0E01               	movlw	high _cmdbuf
  9311  002C06  0100               	movlb	0	; () banked
  9312  002C08  6F64               	movwf	(?_calcCRC+1)& (0+255),b
  9313  002C0A  0E05               	movlw	low _cmdbuf
  9314  002C0C  6F63               	movwf	?_calcCRC& (0+255),b
  9315  002C0E  C103  F065         	movff	_pos,?_calcCRC+2
  9316  002C12  ECDF  F034         	call	_calcCRC	;wreg free
  9317  002C16  0900               	iorlw	0
  9318  002C18  E003               	bz	l782
  9319                           
  9320                           ; BSR set to: 0
  9321                           ;main.c: 1549: sendVSCPDriverNack();
  9322  002C1A  ECB1  F02D         	call	_sendVSCPDriverNack	;wreg free
  9323  002C1E  D11F               	goto	l769
  9324  002C20                     l782:
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;main.c: 1551: }
  9328                           ;main.c: 1554: if (0 ==
  9329                           ;main.c: 1555: cmdbuf[ 0 ]) {
  9330  002C20  0101               	movlb	1	; () banked
  9331  002C22  6705               	tstfsz	_cmdbuf& (0+255),b
  9332  002C24  D003               	goto	l16456
  9333  002C26                     l16454:
  9334                           
  9335                           ;main.c: 1556: sendVSCPDriverAck();
  9336  002C26  EC5F  F02D         	call	_sendVSCPDriverAck	;wreg free
  9337                           
  9338                           ;main.c: 1557: }
  9339  002C2A  D115               	goto	l16616
  9340  002C2C                     l16456:
  9341                           
  9342                           ; BSR set to: 1
  9343                           ;main.c: 1559: else if (1 ==
  9344                           ;main.c: 1560: cmdbuf[ 0 ]) {
  9345  002C2C  0505               	decf	_cmdbuf& (0+255),w,b
  9346  002C2E  E103               	bnz	l16460
  9347  002C30                     l16458:
  9348                           
  9349                           ;main.c: 1561: sendVSCPDriverNack();
  9350  002C30  ECB1  F02D         	call	_sendVSCPDriverNack	;wreg free
  9351                           
  9352                           ;main.c: 1562: }
  9353  002C34  D110               	goto	l16616
  9354  002C36                     l16460:
  9355                           
  9356                           ; BSR set to: 1
  9357                           ;main.c: 1564: else if (2 ==
  9358                           ;main.c: 1565: cmdbuf[ 0 ]) {
  9359  002C36  5105               	movf	_cmdbuf& (0+255),w,b
  9360  002C38  0A02               	xorlw	2
  9361  002C3A  E105               	bnz	l16468
  9362                           
  9363                           ; BSR set to: 1
  9364                           ;main.c: 1566: if ( receiveVSCPModeCanalMsg() ) {
  9365  002C3C  ECC6  F028         	call	_receiveVSCPModeCanalMsg	;wreg free
  9366  002C40  0900               	iorlw	0
  9367  002C42  E1F1               	bnz	l16454
  9368  002C44  D7F5               	goto	l16458
  9369  002C46                     l16468:
  9370                           
  9371                           ; BSR set to: 1
  9372                           ;main.c: 1574: else if (6 ==
  9373                           ;main.c: 1575: cmdbuf[ 0 ]) {
  9374  002C46  5105               	movf	_cmdbuf& (0+255),w,b
  9375  002C48  0A06               	xorlw	6
  9376  002C4A  E103               	bnz	l16476
  9377                           
  9378                           ; BSR set to: 1
  9379                           ;main.c: 1576: if (receiveVSCPModeMultiCanalMsg()) {
  9380  002C4C  ECCA  F035         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  9381  002C50  D7F7               	goto	L5
  9382  002C52                     l16476:
  9383                           
  9384                           ; BSR set to: 1
  9385                           ;main.c: 1584: else if (6 ==
  9386                           ;main.c: 1585: cmdbuf[ 0 ]) {
  9387  002C52  5105               	movf	_cmdbuf& (0+255),w,b
  9388  002C54  0A06               	xorlw	6
  9389  002C56  E0EC               	bz	l16458
  9390                           
  9391                           ; BSR set to: 1
  9392                           ;main.c: 1589: else if (3 ==
  9393                           ;main.c: 1590: cmdbuf[ 0 ]) {
  9394  002C58  5105               	movf	_cmdbuf& (0+255),w,b
  9395  002C5A  0A03               	xorlw	3
  9396  002C5C  E163               	bnz	l16536
  9397                           
  9398                           ; BSR set to: 1
  9399                           ;main.c: 1592: if ( cmdbuf[ 5 ] ==
  9400                           ;main.c: 1593: 0) {
  9401  002C5E  670A               	tstfsz	(_cmdbuf+5)& (0+255),b
  9402  002C60  D001               	goto	l16486
  9403  002C62  D7E1               	goto	l16454
  9404  002C64                     l16486:
  9405                           
  9406                           ; BSR set to: 1
  9407                           ;main.c: 1597: else if ( cmdbuf[ 5 ] ==
  9408                           ;main.c: 1598: 1 ) {
  9409  002C64  050A               	decf	(_cmdbuf+5)& (0+255),w,b
  9410  002C66  E11E               	bnz	l16504
  9411                           
  9412                           ; BSR set to: 1
  9413                           ;main.c: 1600: if ( 2 == ( cmdbuf[ 3 ]<<8 +
  9414                           ;main.c: 1601: cmdbuf[ 4 ] ) ) {
  9415  002C68  C109  F0B0         	movff	_cmdbuf+4,??_doModeVscp
  9416  002C6C  0E08               	movlw	8
  9417  002C6E  0100               	movlb	0	; () banked
  9418  002C70  27B0               	addwf	??_doModeVscp& (0+255),f,b
  9419  002C72  D93B               	call	PL148	;call to abstracted procedure
  9420  002C74  D001               	goto	u21234
  9421  002C76                     u21235:
  9422  002C76  D935               	call	PL144	;call to abstracted procedure
  9423  002C78                     u21234:
  9424  002C78  2FB0               	decfsz	??_doModeVscp& (0+255),f,b
  9425  002C7A  D7FD               	goto	u21235
  9426  002C7C  51B1               	movf	(??_doModeVscp+1)& (0+255),w,b
  9427  002C7E  0A02               	xorlw	2
  9428  002C80  11B2               	iorwf	(??_doModeVscp+2)& (0+255),w,b
  9429  002C82  E1D6               	bnz	l16458
  9430                           
  9431                           ; BSR set to: 0
  9432                           ;main.c: 1603: if ( cmdbuf[ 5 + 1 ] < 4 ) {
  9433  002C84  0E04               	movlw	4
  9434  002C86  0101               	movlb	1	; () banked
  9435  002C88  610B               	cpfslt	(_cmdbuf+6)& (0+255),b
  9436  002C8A  D7D2               	goto	l16458
  9437                           
  9438                           ; BSR set to: 1
  9439                           ;main.c: 1604: mode = cmdbuf[ 5 + 1 ];
  9440  002C8C  C10B  F0F1         	movff	_cmdbuf+6,_mode
  9441                           
  9442                           ; BSR set to: 1
  9443                           ;main.c: 1605: (Busy_eep(), Write_b_eep(0x03,cmdbuf[ 5 + 1 ]));
  9444  002C90  ECC6  F035         	call	_Busy_eep	;wreg free
  9445  002C94  6A20               	clrf	?_Write_b_eep+1,c
  9446  002C96  0E03               	movlw	3
  9447  002C98  6E1F               	movwf	?_Write_b_eep,c
  9448  002C9A  C10B  F021         	movff	_cmdbuf+6,?_Write_b_eep+2
  9449  002C9E  ECC5  F034         	call	_Write_b_eep	;wreg free
  9450  002CA2  D7C1               	goto	l16454
  9451  002CA4                     l16504:
  9452                           
  9453                           ; BSR set to: 1
  9454                           ;main.c: 1619: else if ( cmdbuf[ 5 ] ==
  9455                           ;main.c: 1620: 2 ) {
  9456  002CA4  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9457  002CA6  0A02               	xorlw	2
  9458  002CA8  E121               	bnz	l16520
  9459                           
  9460                           ; BSR set to: 1
  9461                           ;main.c: 1622: if ( 2 == ( cmdbuf[ 3 ]<<8 +
  9462                           ;main.c: 1623: cmdbuf[ 4 ] ) ) {
  9463  002CAA  C109  F0B0         	movff	_cmdbuf+4,??_doModeVscp
  9464  002CAE  0E08               	movlw	8
  9465  002CB0  0100               	movlb	0	; () banked
  9466  002CB2  27B0               	addwf	??_doModeVscp& (0+255),f,b
  9467  002CB4  D91A               	call	PL148	;call to abstracted procedure
  9468  002CB6  D001               	goto	u21274
  9469  002CB8                     u21275:
  9470  002CB8  D914               	call	PL144	;call to abstracted procedure
  9471  002CBA                     u21274:
  9472  002CBA  2FB0               	decfsz	??_doModeVscp& (0+255),f,b
  9473  002CBC  D7FD               	goto	u21275
  9474  002CBE  51B1               	movf	(??_doModeVscp+1)& (0+255),w,b
  9475  002CC0  0A02               	xorlw	2
  9476  002CC2  11B2               	iorwf	(??_doModeVscp+2)& (0+255),w,b
  9477  002CC4  E1B5               	bnz	l16458
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;main.c: 1625: if ( cmdbuf[ 5 + 1 ] ) {
  9481  002CC6  0101               	movlb	1	; () banked
  9482  002CC8  510B               	movf	(_cmdbuf+6)& (0+255),w,b
  9483  002CCA  E004               	bz	l808
  9484                           
  9485                           ; BSR set to: 1
  9486                           ;main.c: 1626: bTimestamp = 1;
  9487  002CCC  0E01               	movlw	1
  9488  002CCE  0100               	movlb	0	; () banked
  9489  002CD0  6FF0               	movwf	_bTimestamp& (0+255),b
  9490                           
  9491                           ;main.c: 1627: }
  9492  002CD2  D002               	goto	l16512
  9493  002CD4                     l808:
  9494                           
  9495                           ; BSR set to: 1
  9496                           ;main.c: 1628: else {
  9497                           ;main.c: 1629: bTimestamp = 0;
  9498  002CD4  0100               	movlb	0	; () banked
  9499  002CD6  6BF0               	clrf	_bTimestamp& (0+255),b
  9500  002CD8                     l16512:
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;main.c: 1630: }
  9504                           ;main.c: 1632: (Busy_eep(), Write_b_eep(0x66,cmdbuf[ 5 + 1 ]));
  9505  002CD8  ECC6  F035         	call	_Busy_eep	;wreg free
  9506  002CDC  6A20               	clrf	?_Write_b_eep+1,c
  9507  002CDE  0E66               	movlw	102
  9508  002CE0  6E1F               	movwf	?_Write_b_eep,c
  9509  002CE2  C10B  F021         	movff	_cmdbuf+6,?_Write_b_eep+2
  9510  002CE6  ECC5  F034         	call	_Write_b_eep	;wreg free
  9511  002CEA  D79D               	goto	l16454
  9512  002CEC                     l16520:
  9513                           
  9514                           ; BSR set to: 1
  9515                           ;main.c: 1641: else if ( cmdbuf[ 5 ] ==
  9516                           ;main.c: 1642: 3 ) {
  9517  002CEC  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9518  002CEE  0A03               	xorlw	3
  9519  002CF0  E19F               	bnz	l16458
  9520                           
  9521                           ; BSR set to: 1
  9522                           ;main.c: 1644: if ( 2 == ( cmdbuf[ 3 ]<<8 +
  9523                           ;main.c: 1645: cmdbuf[ 4 ] ) ) {
  9524  002CF2  C109  F0B0         	movff	_cmdbuf+4,??_doModeVscp
  9525  002CF6  0E08               	movlw	8
  9526  002CF8  0100               	movlb	0	; () banked
  9527  002CFA  27B0               	addwf	??_doModeVscp& (0+255),f,b
  9528  002CFC  D8F6               	call	PL148	;call to abstracted procedure
  9529  002CFE  D001               	goto	u21314
  9530  002D00                     u21315:
  9531  002D00  D8F0               	call	PL144	;call to abstracted procedure
  9532  002D02                     u21314:
  9533  002D02  2FB0               	decfsz	??_doModeVscp& (0+255),f,b
  9534  002D04  D7FD               	goto	u21315
  9535  002D06  51B1               	movf	(??_doModeVscp+1)& (0+255),w,b
  9536  002D08  0A02               	xorlw	2
  9537  002D0A  11B2               	iorwf	(??_doModeVscp+2)& (0+255),w,b
  9538  002D0C  E191               	bnz	l16458
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;main.c: 1647: if ( cmdbuf[ 5 + 1 ] < 13 ) {
  9542  002D0E  0E0D               	movlw	13
  9543  002D10  0101               	movlb	1	; () banked
  9544  002D12  610B               	cpfslt	(_cmdbuf+6)& (0+255),b
  9545  002D14  D78D               	goto	l16458
  9546                           
  9547                           ; BSR set to: 1
  9548                           ;main.c: 1648: sendVSCPDriverAck();
  9549  002D16  EC5F  F02D         	call	_sendVSCPDriverAck	;wreg free
  9550                           
  9551                           ;main.c: 1649: changeBaudrate( cmdbuf[ 5 + 1 ] );
  9552  002D1A  0101               	movlb	1	; () banked
  9553  002D1C  510B               	movf	(_cmdbuf+6)& (0+255),w,b
  9554  002D1E  EC04  F030         	call	_changeBaudrate
  9555                           
  9556                           ;main.c: 1650: }
  9557  002D22  D099               	goto	l16616
  9558  002D24                     l16536:
  9559                           
  9560                           ; BSR set to: 1
  9561                           ;main.c: 1665: else if (4 ==
  9562                           ;main.c: 1666: cmdbuf[ 0 ]) {
  9563  002D24  5105               	movf	_cmdbuf& (0+255),w,b
  9564  002D26  0A04               	xorlw	4
  9565  002D28  E083               	bz	l16458
  9566                           
  9567                           ; BSR set to: 1
  9568                           ;main.c: 1670: else if (8 ==
  9569                           ;main.c: 1671: cmdbuf[ 0 ]) {
  9570  002D2A  5105               	movf	_cmdbuf& (0+255),w,b
  9571  002D2C  0A08               	xorlw	8
  9572  002D2E  E107               	bnz	l16546
  9573                           
  9574                           ; BSR set to: 1
  9575                           ;main.c: 1672: caps.maxVscpFrames = cmdbuf[ 5 ];
  9576  002D30  C10A  F0FC         	movff	_cmdbuf+5,_caps
  9577                           
  9578                           ;main.c: 1673: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  9579  002D34  C10B  F0FD         	movff	_cmdbuf+6,_caps+1
  9580                           
  9581                           ; BSR set to: 1
  9582                           ;main.c: 1674: sendVSCPModeCapabilities();
  9583  002D38  ECA5  F02B         	call	_sendVSCPModeCapabilities	;wreg free
  9584                           
  9585                           ;main.c: 1675: }
  9586  002D3C  D08C               	goto	l16616
  9587  002D3E                     l16546:
  9588                           
  9589                           ; BSR set to: 1
  9590                           ;main.c: 1677: else if (255 ==
  9591                           ;main.c: 1678: cmdbuf[ 0 ]) {
  9592  002D3E  2905               	incf	_cmdbuf& (0+255),w,b
  9593  002D40  E001 D086          	bnz	l16614
  9594                           
  9595                           ; BSR set to: 1
  9596                           ;main.c: 1680: if (cmdbuf[ 5 ] ==
  9597                           ;main.c: 1681: 0) {
  9598  002D44  670A               	tstfsz	(_cmdbuf+5)& (0+255),b
  9599  002D46  D006               	goto	l16552
  9600                           
  9601                           ; BSR set to: 1
  9602                           ;main.c: 1682: sendVSCPDriverCommandReply(0, 0);
  9603  002D48  0E00               	movlw	0
  9604  002D4A  0100               	movlb	0	; () banked
  9605  002D4C  6B66               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  9606  002D4E  EC39  F029         	call	_sendVSCPDriverCommandReply
  9607                           
  9608                           ;main.c: 1683: }
  9609  002D52  D081               	goto	l16616
  9610  002D54                     l16552:
  9611                           
  9612                           ; BSR set to: 1
  9613                           ;main.c: 1685: else if (cmdbuf[ 5 ] ==
  9614                           ;main.c: 1686: 1) {
  9615  002D54  050A               	decf	(_cmdbuf+5)& (0+255),w,b
  9616  002D56  E10A               	bnz	l16558
  9617                           
  9618                           ; BSR set to: 1
  9619                           ;main.c: 1687: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9620  002D58  0E00               	movlw	0
  9621  002D5A  EC74  F035         	call	_ECANSetOperationMode
  9622                           
  9623                           ;main.c: 1688: sendVSCPDriverCommandReply(0, 1);
  9624  002D5E  0E01               	movlw	1
  9625  002D60  0100               	movlb	0	; () banked
  9626  002D62  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9627  002D64  0E00               	movlw	0
  9628  002D66  EC39  F029         	call	_sendVSCPDriverCommandReply
  9629                           
  9630                           ;main.c: 1689: }
  9631  002D6A  D075               	goto	l16616
  9632  002D6C                     l16558:
  9633                           
  9634                           ; BSR set to: 1
  9635                           ;main.c: 1691: else if (cmdbuf[ 5 ] ==
  9636                           ;main.c: 1692: 2) {
  9637  002D6C  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9638  002D6E  0A02               	xorlw	2
  9639  002D70  E10A               	bnz	l16564
  9640                           
  9641                           ; BSR set to: 1
  9642                           ;main.c: 1693: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  9643  002D72  0E40               	movlw	64
  9644  002D74  EC74  F035         	call	_ECANSetOperationMode
  9645                           
  9646                           ;main.c: 1694: sendVSCPDriverCommandReply(0, 2);
  9647  002D78  0E02               	movlw	2
  9648  002D7A  0100               	movlb	0	; () banked
  9649  002D7C  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9650  002D7E  0E00               	movlw	0
  9651  002D80  EC39  F029         	call	_sendVSCPDriverCommandReply
  9652                           
  9653                           ;main.c: 1695: }
  9654  002D84  D068               	goto	l16616
  9655  002D86                     l16564:
  9656                           
  9657                           ; BSR set to: 1
  9658                           ;main.c: 1697: else if (cmdbuf[ 5 ] ==
  9659                           ;main.c: 1698: 3) {
  9660  002D86  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9661  002D88  0A03               	xorlw	3
  9662  002D8A  E10A               	bnz	l16570
  9663                           
  9664                           ; BSR set to: 1
  9665                           ;main.c: 1699: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  9666  002D8C  0E60               	movlw	96
  9667  002D8E  EC74  F035         	call	_ECANSetOperationMode
  9668                           
  9669                           ;main.c: 1700: sendVSCPDriverCommandReply(0, 3);
  9670  002D92  0E03               	movlw	3
  9671  002D94  0100               	movlb	0	; () banked
  9672  002D96  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9673  002D98  0E00               	movlw	0
  9674  002D9A  EC39  F029         	call	_sendVSCPDriverCommandReply
  9675                           
  9676                           ;main.c: 1701: }
  9677  002D9E  D05B               	goto	l16616
  9678  002DA0                     l16570:
  9679                           
  9680                           ; BSR set to: 1
  9681                           ;main.c: 1703: else if (cmdbuf[ 5 ] ==
  9682                           ;main.c: 1704: 4) {
  9683  002DA0  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9684  002DA2  0A04               	xorlw	4
  9685  002DA4  E10A               	bnz	l16576
  9686                           
  9687                           ; BSR set to: 1
  9688                           ;main.c: 1705: ECANSetOperationMode(0x20);
  9689  002DA6  0E20               	movlw	32
  9690  002DA8  EC74  F035         	call	_ECANSetOperationMode
  9691                           
  9692                           ;main.c: 1706: sendVSCPDriverCommandReply(0, 4);
  9693  002DAC  0E04               	movlw	4
  9694  002DAE  0100               	movlb	0	; () banked
  9695  002DB0  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9696  002DB2  0E00               	movlw	0
  9697  002DB4  EC39  F029         	call	_sendVSCPDriverCommandReply
  9698                           
  9699                           ;main.c: 1707: }
  9700  002DB8  D04E               	goto	l16616
  9701  002DBA                     l16576:
  9702                           
  9703                           ; BSR set to: 1
  9704                           ;main.c: 1709: else if (cmdbuf[ 5 ] ==
  9705                           ;main.c: 1710: 5) {
  9706  002DBA  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9707  002DBC  0A05               	xorlw	5
  9708  002DBE  E122               	bnz	l16594
  9709                           
  9710                           ; BSR set to: 1
  9711                           ;main.c: 1712: if ( ( ( cmdbuf[ 3 ] << 8 +
  9712                           ;main.c: 1713: cmdbuf[ 3 ] ) < 6 ) &&
  9713                           ;main.c: 1714: ( cmdbuf[ 5 + 1 ] < 16 ) ) {
  9714  002DC0  D872               	call	PL26	;call to abstracted procedure
  9715  002DC2  B4D8               	btfsc	status,2,c
  9716  002DC4  5DB1               	subwf	(??_doModeVscp+1)& (0+255),w,b
  9717  002DC6  E20B               	bc	l16584
  9718                           
  9719                           ; BSR set to: 0
  9720  002DC8  0E10               	movlw	16
  9721  002DCA  0101               	movlb	1	; () banked
  9722  002DCC  610B               	cpfslt	(_cmdbuf+6)& (0+255),b
  9723  002DCE  D007               	goto	l16584
  9724                           
  9725                           ; BSR set to: 1
  9726                           ;main.c: 1716: sendVSCPDriverCommandReply(1, 5);
  9727  002DD0  0E05               	movlw	5
  9728  002DD2  0100               	movlb	0	; () banked
  9729  002DD4  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9730  002DD6  0E01               	movlw	1
  9731  002DD8  EC39  F029         	call	_sendVSCPDriverCommandReply
  9732                           
  9733                           ;main.c: 1717: }
  9734  002DDC  D03C               	goto	l16616
  9735  002DDE                     l16584:
  9736                           
  9737                           ;main.c: 1718: else {
  9738                           ;main.c: 1720: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
  9739  002DDE  0E80               	movlw	128
  9740  002DE0  EC74  F035         	call	_ECANSetOperationMode
  9741                           
  9742                           ;main.c: 1722: uint8_t filter = ((uint32_t)cmdbuf[ 5 + 2 ]) << 24 +
  9743                           ;main.c: 1723: ((uint32_t)cmdbuf[ 5 + 3 ]) << 16 +
  9744                           ;main.c: 1724: ((uint32_t)cmdbuf[ 5 + 4 ]) << 8 +
  9745                           ;main.c: 1725: cmdbuf[ 5 + 5 ];
  9746  002DE4  D83D               	call	PL14	;call to abstracted procedure
  9747  002DE6  6FB4               	movwf	doModeVscp@filter& (0+255),b
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;main.c: 1726: setFilter( cmdbuf[ 5 + 1 ],
  9751                           ;main.c: 1727: filter,
  9752                           ;main.c: 1728: cmdbuf[ 5 + 6 ] );
  9753  002DE8  51B4               	movf	doModeVscp@filter& (0+255),w,b
  9754  002DEA  D872               	call	PL104	;call to abstracted procedure
  9755  002DEC  ECD3  F01B         	call	_setFilter
  9756                           
  9757                           ;main.c: 1731: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9758  002DF0  0E00               	movlw	0
  9759  002DF2  EC74  F035         	call	_ECANSetOperationMode
  9760                           
  9761                           ;main.c: 1733: sendVSCPDriverCommandReply(0, 5);
  9762  002DF6  0E05               	movlw	5
  9763  002DF8  0100               	movlb	0	; () banked
  9764  002DFA  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9765  002DFC  0E00               	movlw	0
  9766  002DFE  EC39  F029         	call	_sendVSCPDriverCommandReply
  9767  002E02  D029               	goto	l16616
  9768  002E04                     l16594:
  9769                           
  9770                           ; BSR set to: 1
  9771                           ;main.c: 1737: else if (cmdbuf[ 5 ] ==
  9772                           ;main.c: 1738: 6) {
  9773  002E04  510A               	movf	(_cmdbuf+5)& (0+255),w,b
  9774  002E06  0A06               	xorlw	6
  9775  002E08  E001 D712          	bnz	l16458
  9776                           
  9777                           ; BSR set to: 1
  9778                           ;main.c: 1740: if ( ( ( cmdbuf[ 3 ] << 8 +
  9779                           ;main.c: 1741: cmdbuf[ 3 ] ) < 6 ) &&
  9780                           ;main.c: 1742: ( cmdbuf[ 5 + 1 ] < 2 ) ) {
  9781  002E0C  D84C               	call	PL26	;call to abstracted procedure
  9782  002E0E  B4D8               	btfsc	status,2,c
  9783  002E10  5DB1               	subwf	(??_doModeVscp+1)& (0+255),w,b
  9784  002E12  E20B               	bc	l16602
  9785                           
  9786                           ; BSR set to: 0
  9787  002E14  0E02               	movlw	2
  9788  002E16  0101               	movlb	1	; () banked
  9789  002E18  610B               	cpfslt	(_cmdbuf+6)& (0+255),b
  9790  002E1A  D007               	goto	l16602
  9791                           
  9792                           ; BSR set to: 1
  9793                           ;main.c: 1744: sendVSCPDriverCommandReply(1, 5);
  9794  002E1C  0E05               	movlw	5
  9795  002E1E  0100               	movlb	0	; () banked
  9796  002E20  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9797  002E22  0E01               	movlw	1
  9798  002E24  EC39  F029         	call	_sendVSCPDriverCommandReply
  9799                           
  9800                           ;main.c: 1745: }
  9801  002E28  D016               	goto	l16616
  9802  002E2A                     l16602:
  9803                           
  9804                           ;main.c: 1746: else {
  9805                           ;main.c: 1748: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
  9806  002E2A  0E80               	movlw	128
  9807  002E2C  EC74  F035         	call	_ECANSetOperationMode
  9808                           
  9809                           ;main.c: 1750: uint8_t mask = ((uint32_t)cmdbuf[ 5 + 2 ]) << 24 +
  9810                           ;main.c: 1751: ((uint32_t)cmdbuf[ 5 + 3 ]) << 16 +
  9811                           ;main.c: 1752: ((uint32_t)cmdbuf[ 5 + 4 ]) << 8 +
  9812                           ;main.c: 1753: cmdbuf[ 5 + 5 ];
  9813  002E30  D817               	call	PL14	;call to abstracted procedure
  9814  002E32  6FB5               	movwf	doModeVscp@mask& (0+255),b
  9815                           
  9816                           ; BSR set to: 0
  9817                           ;main.c: 1754: setFilter( cmdbuf[ 5 + 1 ],
  9818                           ;main.c: 1755: mask,
  9819                           ;main.c: 1756: cmdbuf[ 5 + 6 ] );
  9820  002E34  51B5               	movf	doModeVscp@mask& (0+255),w,b
  9821  002E36  D84C               	call	PL104	;call to abstracted procedure
  9822  002E38  ECD3  F01B         	call	_setFilter
  9823                           
  9824                           ;main.c: 1759: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  9825  002E3C  0E00               	movlw	0
  9826  002E3E  EC74  F035         	call	_ECANSetOperationMode
  9827                           
  9828                           ;main.c: 1761: sendVSCPDriverCommandReply(1, 5);
  9829  002E42  0E05               	movlw	5
  9830  002E44  0100               	movlb	0	; () banked
  9831  002E46  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  9832  002E48  0E01               	movlw	1
  9833  002E4A  EC39  F029         	call	_sendVSCPDriverCommandReply
  9834  002E4E  D003               	goto	l16616
  9835  002E50                     l16614:
  9836                           
  9837                           ; BSR set to: 1
  9838                           ;main.c: 1769: else {
  9839                           ;main.c: 1771: sendVSCPDriverErrorFrame(2);
  9840  002E50  0E02               	movlw	2
  9841  002E52  EC43  F02B         	call	_sendVSCPDriverErrorFrame
  9842  002E56                     l16616:
  9843                           
  9844                           ;main.c: 1772: }
  9845                           ;main.c: 1775: pos = 0;
  9846  002E56  0101               	movlb	1	; () banked
  9847  002E58  6B03               	clrf	_pos& (0+255),b
  9848                           
  9849                           ; BSR set to: 1
  9850                           ;main.c: 1776: stateVscpDriver = 0;
  9851  002E5A  6A33               	clrf	_stateVscpDriver,c
  9852  002E5C                     l16620:
  9853                           
  9854                           ;main.c: 1778: }
  9855                           ;main.c: 1780: }
  9856                           ;main.c: 1783: (INTCONbits.GIE = 1);
  9857  002E5C  8EF2               	bsf	intcon,7,c	;volatile
  9858  002E5E                     l769:
  9859  002E5E  0012               	return	
  9860  002E60                     __end_of_doModeVscp:
  9861                           	opt stack 0
  9862  002E60                     PL14:
  9863                           	opt stack 23
  9864  002E60  C10F  F0B0         	movff	_cmdbuf+10,??_doModeVscp
  9865  002E64  0E08               	movlw	8
  9866  002E66  0100               	movlb	0	; () banked
  9867  002E68  27B0               	addwf	??_doModeVscp& (0+255),f,b
  9868  002E6A  C10E  F0B1         	movff	_cmdbuf+9,??_doModeVscp+1
  9869  002E6E  0E10               	movlw	16
  9870  002E70  27B1               	addwf	(??_doModeVscp+1)& (0+255),f,b
  9871  002E72  C10D  F0B2         	movff	_cmdbuf+8,??_doModeVscp+2
  9872  002E76  0E18               	movlw	24
  9873  002E78  27B2               	addwf	(??_doModeVscp+2)& (0+255),f,b
  9874  002E7A  C10C  F0B3         	movff	_cmdbuf+7,??_doModeVscp+3
  9875  002E7E  2BB2               	incf	(??_doModeVscp+2)& (0+255),f,b
  9876  002E80  D002               	goto	u21464
  9877  002E82                     u21465:
  9878  002E82  90D8               	bcf	status,0,c
  9879  002E84  37B3               	rlcf	(??_doModeVscp+3)& (0+255),f,b
  9880  002E86                     u21464:
  9881  002E86  2FB2               	decfsz	(??_doModeVscp+2)& (0+255),f,b
  9882  002E88  D7FC               	goto	u21465
  9883  002E8A  2BB1               	incf	(??_doModeVscp+1)& (0+255),f,b
  9884  002E8C  D002               	goto	u21474
  9885  002E8E                     u21475:
  9886  002E8E  90D8               	bcf	status,0,c
  9887  002E90  37B3               	rlcf	(??_doModeVscp+3)& (0+255),f,b
  9888  002E92                     u21474:
  9889  002E92  2FB1               	decfsz	(??_doModeVscp+1)& (0+255),f,b
  9890  002E94  D7FC               	goto	u21475
  9891  002E96  2BB0               	incf	??_doModeVscp& (0+255),f,b
  9892  002E98  D002               	goto	u21484
  9893  002E9A                     u21485:
  9894  002E9A  90D8               	bcf	status,0,c
  9895  002E9C  37B3               	rlcf	(??_doModeVscp+3)& (0+255),f,b
  9896  002E9E                     u21484:
  9897  002E9E  2FB0               	decfsz	??_doModeVscp& (0+255),f,b
  9898  002EA0  D7FC               	goto	u21485
  9899  002EA2  51B3               	movf	(??_doModeVscp+3)& (0+255),w,b
  9900  002EA4  0012               	return	
  9901  002EA6                     __end_ofPL14:
  9902                           	opt stack 0
  9903  002EA6                     PL26:
  9904                           	opt stack 23
  9905  002EA6  C108  F0B0         	movff	_cmdbuf+3,??_doModeVscp
  9906  002EAA  0E08               	movlw	8
  9907  002EAC  0100               	movlb	0	; () banked
  9908  002EAE  27B0               	addwf	??_doModeVscp& (0+255),f,b
  9909  002EB0  0101               	movlb	1	; () banked
  9910  002EB2  5108               	movf	(_cmdbuf+3)& (0+255),w,b
  9911  002EB4  0100               	movlb	0	; () banked
  9912  002EB6  6FB1               	movwf	(??_doModeVscp+1)& (0+255),b
  9913  002EB8  6BB2               	clrf	(??_doModeVscp+2)& (0+255),b
  9914  002EBA  2BB0               	incf	??_doModeVscp& (0+255),f,b
  9915  002EBC  D003               	goto	u21434
  9916  002EBE                     u21435:
  9917  002EBE  90D8               	bcf	status,0,c
  9918  002EC0  37B1               	rlcf	(??_doModeVscp+1)& (0+255),f,b
  9919  002EC2  37B2               	rlcf	(??_doModeVscp+2)& (0+255),f,b
  9920  002EC4                     u21434:
  9921  002EC4  2FB0               	decfsz	??_doModeVscp& (0+255),f,b
  9922  002EC6  D7FB               	goto	u21435
  9923  002EC8  51B2               	movf	(??_doModeVscp+2)& (0+255),w,b
  9924  002ECA  0A80               	xorlw	128
  9925  002ECC  0F80               	addlw	-128
  9926  002ECE  0C06               	retlw	6
  9927  002ED0                     __end_ofPL26:
  9928                           	opt stack 0
  9929  002ED0                     PL104:
  9930                           	opt stack 23
  9931  002ED0  6E23               	movwf	?_setFilter,c
  9932  002ED2  6A24               	clrf	?_setFilter+1,c
  9933  002ED4  6A25               	clrf	?_setFilter+2,c
  9934  002ED6  6A26               	clrf	?_setFilter+3,c
  9935  002ED8  C110  F027         	movff	_cmdbuf+11,?_setFilter+4
  9936  002EDC  0101               	movlb	1	; () banked
  9937  002EDE  510B               	movf	(_cmdbuf+6)& (0+255),w,b
  9938  002EE0  0012               	return	
  9939  002EE2                     __end_ofPL104:
  9940                           	opt stack 0
  9941  002EE2                     PL144:
  9942                           	opt stack 23
  9943  002EE2  90D8               	bcf	status,0,c
  9944  002EE4  37B1               	rlcf	(??_doModeVscp+1)& (0+255),f,b
  9945  002EE6  37B2               	rlcf	(??_doModeVscp+2)& (0+255),f,b
  9946  002EE8  0012               	return	
  9947  002EEA                     __end_ofPL144:
  9948                           	opt stack 0
  9949  002EEA                     PL148:
  9950                           	opt stack 23
  9951  002EEA  0101               	movlb	1	; () banked
  9952  002EEC  5108               	movf	(_cmdbuf+3)& (0+255),w,b
  9953  002EEE  0100               	movlb	0	; () banked
  9954  002EF0  6FB1               	movwf	(??_doModeVscp+1)& (0+255),b
  9955  002EF2  6BB2               	clrf	(??_doModeVscp+2)& (0+255),b
  9956  002EF4  2BB0               	incf	??_doModeVscp& (0+255),f,b
  9957  002EF6  0012               	return	
  9958  002EF8                     __end_ofPL148:
  9959                           	opt stack 0
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           intcon	equ	0xFF2
  9967                           indf0	equ	0xFEF
  9968                           postinc0	equ	0xFEE
  9969                           fsr0h	equ	0xFEA
  9970                           fsr0l	equ	0xFE9
  9971                           wreg	equ	0xFE8
  9972                           indf1	equ	0xFE7
  9973                           postinc1	equ	0xFE6
  9974                           postdec1	equ	0xFE5
  9975                           fsr1h	equ	0xFE2
  9976                           fsr1l	equ	0xFE1
  9977                           indf2	equ	0xFDF
  9978                           postinc2	equ	0xFDE
  9979                           postdec2	equ	0xFDD
  9980                           plusw2	equ	0xFDB
  9981                           fsr2h	equ	0xFDA
  9982                           fsr2l	equ	0xFD9
  9983                           status	equ	0xFD8
  9984                           
  9985 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9986 ;; Defined at:
  9987 ;;		line 2044 in file "main.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  errorcode       1    wreg     unsigned char 
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;  errorcode       1    6[BANK0 ] unsigned char 
  9992 ;;  crc             1    7[BANK0 ] unsigned char 
  9993 ;; Return value:  Size  Location     Type
  9994 ;;		None               void
  9995 ;; Registers used:
  9996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9997 ;; Tracked objects:
  9998 ;;		On entry : F/1
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10002 ;;      Params:         0       0       0       0       0       0       0
 10003 ;;      Locals:         0       2       0       0       0       0       0
 10004 ;;      Temps:          0       0       0       0       0       0       0
 10005 ;;      Totals:         0       2       0       0       0       0       0
 10006 ;;Total ram usage:        2 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; Hardware stack levels required when called:    6
 10009 ;; This function calls:
 10010 ;;		_WriteUSART
 10011 ;;		_sendEscapedUartData
 10012 ;;		_crc8
 10013 ;; This function is called by:
 10014 ;;		_doModeVscp
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text8
 10019  005686                     __ptext8:
 10020                           	opt stack 0
 10021  005686                     _sendVSCPDriverErrorFrame:
 10022                           	opt stack 23
 10023                           
 10024                           ;incstack = 0
 10025                           ;incstack = 0
 10026                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10027  005686  CFE8 F066          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10028                           
 10029                           ; BSR set to: 1
 10030                           ;main.c: 2045: uint8_t crc = 0;
 10031  00568A  0100               	movlb	0	; () banked
 10032  00568C  6B67               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10033  00568E                     l914:
 10034  00568E  A2AC               	btfss	4012,1,c	;volatile
 10035  005690  D7FE               	goto	l914
 10036                           
 10037                           ;main.c: 2049: WriteUSART(0x10);
 10038  005692  0E10               	movlw	16
 10039  005694  EC8B  F035         	call	_WriteUSART
 10040  005698                     l917:
 10041  005698  A2AC               	btfss	4012,1,c	;volatile
 10042  00569A  D7FE               	goto	l917
 10043                           
 10044                           ;main.c: 2051: WriteUSART(0x02);
 10045  00569C  0E02               	movlw	2
 10046  00569E  EC8B  F035         	call	_WriteUSART
 10047  0056A2                     l920:
 10048  0056A2  A2AC               	btfss	4012,1,c	;volatile
 10049  0056A4  D7FE               	goto	l920
 10050                           
 10051                           ;main.c: 2055: WriteUSART(253);
 10052  0056A6  0EFD               	movlw	253
 10053  0056A8  EC8B  F035         	call	_WriteUSART
 10054                           
 10055                           ;main.c: 2056: crc8(&crc, 253);
 10056  0056AC  0100               	movlb	0	; () banked
 10057  0056AE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10058  0056B0  6F61               	movwf	(?_crc8+1)& (0+255),b
 10059  0056B2  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10060  0056B4  6F60               	movwf	?_crc8& (0+255),b
 10061  0056B6  0EFD               	movlw	253
 10062  0056B8  6F62               	movwf	(?_crc8+2)& (0+255),b
 10063  0056BA  EC71  F034         	call	_crc8	;wreg free
 10064  0056BE                     l923:
 10065  0056BE  A2AC               	btfss	4012,1,c	;volatile
 10066  0056C0  D7FE               	goto	l923
 10067                           
 10068                           ;main.c: 2060: WriteUSART(0);
 10069  0056C2  0E00               	movlw	0
 10070  0056C4  EC8B  F035         	call	_WriteUSART
 10071                           
 10072                           ;main.c: 2061: crc8(&crc, 0);
 10073  0056C8  D839               	call	PL126	;call to abstracted procedure
 10074  0056CA  EC71  F034         	call	_crc8	;wreg free
 10075                           
 10076                           ; BSR set to: 3
 10077                           ;main.c: 2064: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10078  0056CE  0100               	movlb	0	; () banked
 10079  0056D0  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10080  0056D2  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10081  0056D4  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10082  0056D6  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10083  0056D8  0101               	movlb	1	; () banked
 10084  0056DA  5107               	movf	(_cmdbuf+2)& (0+255),w,b
 10085  0056DC  ECF9  F031         	call	_sendEscapedUartData
 10086  0056E0                     l926:
 10087  0056E0  A2AC               	btfss	4012,1,c	;volatile
 10088  0056E2  D7FE               	goto	l926
 10089                           
 10090                           ;main.c: 2068: WriteUSART(0);
 10091  0056E4  0E00               	movlw	0
 10092  0056E6  EC8B  F035         	call	_WriteUSART
 10093                           
 10094                           ;main.c: 2069: crc8(&crc, 0);
 10095  0056EA  D828               	call	PL126	;call to abstracted procedure
 10096  0056EC  EC71  F034         	call	_crc8	;wreg free
 10097  0056F0                     l929:
 10098  0056F0  A2AC               	btfss	4012,1,c	;volatile
 10099  0056F2  D7FE               	goto	l929
 10100                           
 10101                           ;main.c: 2071: WriteUSART(1);
 10102  0056F4  0E01               	movlw	1
 10103  0056F6  EC8B  F035         	call	_WriteUSART
 10104                           
 10105                           ;main.c: 2072: crc8(&crc, 1);
 10106  0056FA  0100               	movlb	0	; () banked
 10107  0056FC  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10108  0056FE  6F61               	movwf	(?_crc8+1)& (0+255),b
 10109  005700  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10110  005702  6F60               	movwf	?_crc8& (0+255),b
 10111  005704  0E01               	movlw	1
 10112  005706  6F62               	movwf	(?_crc8+2)& (0+255),b
 10113  005708  EC71  F034         	call	_crc8	;wreg free
 10114                           
 10115                           ; BSR set to: 3
 10116                           ;main.c: 2075: sendEscapedUartData(errorcode, &crc);
 10117  00570C  0100               	movlb	0	; () banked
 10118  00570E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10119  005710  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10120  005712  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10121  005714  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10122  005716  5166               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10123  005718  ECF9  F031         	call	_sendEscapedUartData
 10124                           
 10125                           ;main.c: 2078: sendEscapedUartData(crc, (0));
 10126  00571C  0100               	movlb	0	; () banked
 10127  00571E  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10128  005720  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10129  005722  5167               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10130  005724  ECF9  F031         	call	_sendEscapedUartData
 10131  005728                     l932:
 10132  005728  A2AC               	btfss	4012,1,c	;volatile
 10133  00572A  D7FE               	goto	l932
 10134                           
 10135                           ;main.c: 2082: WriteUSART(0x10);
 10136  00572C  0E10               	movlw	16
 10137  00572E  EC8B  F035         	call	_WriteUSART
 10138  005732                     l935:
 10139  005732  A2AC               	btfss	4012,1,c	;volatile
 10140  005734  D7FE               	goto	l935
 10141                           
 10142                           ;main.c: 2084: WriteUSART(0x03);
 10143  005736  0E03               	movlw	3
 10144  005738  EF8B  F035         	goto	_WriteUSART
 10145  00573C                     __end_of_sendVSCPDriverErrorFrame:
 10146                           	opt stack 0
 10147  00573C                     PL126:
 10148                           	opt stack 23
 10149  00573C  0100               	movlb	0	; () banked
 10150  00573E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10151  005740  6F61               	movwf	(?_crc8+1)& (0+255),b
 10152  005742  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10153  005744  6F60               	movwf	?_crc8& (0+255),b
 10154  005746  6B62               	clrf	(?_crc8+2)& (0+255),b
 10155  005748  0C00               	retlw	0
 10156  00574A                     __end_ofPL126:
 10157                           	opt stack 0
 10158                           tblptru	equ	0xFF8
 10159                           tblptrh	equ	0xFF7
 10160                           tblptrl	equ	0xFF6
 10161                           tablat	equ	0xFF5
 10162                           prodh	equ	0xFF4
 10163                           prodl	equ	0xFF3
 10164                           intcon	equ	0xFF2
 10165                           indf0	equ	0xFEF
 10166                           postinc0	equ	0xFEE
 10167                           fsr0h	equ	0xFEA
 10168                           fsr0l	equ	0xFE9
 10169                           wreg	equ	0xFE8
 10170                           indf1	equ	0xFE7
 10171                           postinc1	equ	0xFE6
 10172                           postdec1	equ	0xFE5
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           plusw2	equ	0xFDB
 10179                           fsr2h	equ	0xFDA
 10180                           fsr2l	equ	0xFD9
 10181                           status	equ	0xFD8
 10182                           
 10183 ;; *************** function _sendVSCPDriverCommandReply *****************
 10184 ;; Defined at:
 10185 ;;		line 2181 in file "main.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;  cmdReplyCode    1    wreg     unsigned char 
 10188 ;;  cmdCode         1    6[BANK0 ] unsigned char 
 10189 ;; Auto vars:     Size  Location     Type
 10190 ;;  cmdReplyCode    1    7[BANK0 ] unsigned char 
 10191 ;;  crc             1    8[BANK0 ] unsigned char 
 10192 ;; Return value:  Size  Location     Type
 10193 ;;		None               void
 10194 ;; Registers used:
 10195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : F/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10201 ;;      Params:         0       1       0       0       0       0       0
 10202 ;;      Locals:         0       2       0       0       0       0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0
 10204 ;;      Totals:         0       3       0       0       0       0       0
 10205 ;;Total ram usage:        3 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    6
 10208 ;; This function calls:
 10209 ;;		_WriteUSART
 10210 ;;		_sendEscapedUartData
 10211 ;;		_crc8
 10212 ;; This function is called by:
 10213 ;;		_doModeVscp
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           	psect	text9
 10218  005272                     __ptext9:
 10219                           	opt stack 0
 10220  005272                     _sendVSCPDriverCommandReply:
 10221                           	opt stack 23
 10222                           
 10223                           ;incstack = 0
 10224                           ;incstack = 0
 10225                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
 10226  005272  CFE8 F067          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;main.c: 2182: uint8_t crc = 0;
 10230  005276  6B68               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
 10231  005278                     l995:
 10232                           
 10233                           ; BSR set to: 0
 10234  005278  A2AC               	btfss	4012,1,c	;volatile
 10235  00527A  D7FE               	goto	l995
 10236                           
 10237                           ; BSR set to: 0
 10238                           ;main.c: 2186: WriteUSART(0x10);
 10239  00527C  0E10               	movlw	16
 10240  00527E  EC8B  F035         	call	_WriteUSART
 10241  005282                     l998:
 10242  005282  A2AC               	btfss	4012,1,c	;volatile
 10243  005284  D7FE               	goto	l998
 10244                           
 10245                           ;main.c: 2188: WriteUSART(0x02);
 10246  005286  0E02               	movlw	2
 10247  005288  EC8B  F035         	call	_WriteUSART
 10248  00528C                     l1001:
 10249  00528C  A2AC               	btfss	4012,1,c	;volatile
 10250  00528E  D7FE               	goto	l1001
 10251                           
 10252                           ;main.c: 2192: WriteUSART(254);
 10253  005290  0EFE               	movlw	254
 10254  005292  EC8B  F035         	call	_WriteUSART
 10255                           
 10256                           ;main.c: 2193: crc8(&crc, 254);
 10257  005296  0100               	movlb	0	; () banked
 10258  005298  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10259  00529A  6F61               	movwf	(?_crc8+1)& (0+255),b
 10260  00529C  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10261  00529E  6F60               	movwf	?_crc8& (0+255),b
 10262  0052A0  0EFE               	movlw	254
 10263  0052A2  6F62               	movwf	(?_crc8+2)& (0+255),b
 10264  0052A4  EC71  F034         	call	_crc8	;wreg free
 10265  0052A8                     l1004:
 10266  0052A8  A2AC               	btfss	4012,1,c	;volatile
 10267  0052AA  D7FE               	goto	l1004
 10268                           
 10269                           ;main.c: 2197: WriteUSART(0);
 10270  0052AC  0E00               	movlw	0
 10271  0052AE  EC8B  F035         	call	_WriteUSART
 10272                           
 10273                           ;main.c: 2198: crc8(&crc, 0);
 10274  0052B2  D845               	call	PL130	;call to abstracted procedure
 10275  0052B4  EC71  F034         	call	_crc8	;wreg free
 10276                           
 10277                           ; BSR set to: 3
 10278                           ;main.c: 2201: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10279  0052B8  0100               	movlb	0	; () banked
 10280  0052BA  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10281  0052BC  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10282  0052BE  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10283  0052C0  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10284  0052C2  0101               	movlb	1	; () banked
 10285  0052C4  5107               	movf	(_cmdbuf+2)& (0+255),w,b
 10286  0052C6  ECF9  F031         	call	_sendEscapedUartData
 10287  0052CA                     l1007:
 10288  0052CA  A2AC               	btfss	4012,1,c	;volatile
 10289  0052CC  D7FE               	goto	l1007
 10290                           
 10291                           ;main.c: 2205: WriteUSART(0);
 10292  0052CE  0E00               	movlw	0
 10293  0052D0  EC8B  F035         	call	_WriteUSART
 10294                           
 10295                           ;main.c: 2206: crc8(&crc, 0);
 10296  0052D4  D834               	call	PL130	;call to abstracted procedure
 10297  0052D6  EC71  F034         	call	_crc8	;wreg free
 10298  0052DA                     l1010:
 10299  0052DA  A2AC               	btfss	4012,1,c	;volatile
 10300  0052DC  D7FE               	goto	l1010
 10301                           
 10302                           ;main.c: 2208: WriteUSART(2);
 10303  0052DE  0E02               	movlw	2
 10304  0052E0  EC8B  F035         	call	_WriteUSART
 10305                           
 10306                           ;main.c: 2209: crc8(&crc, 2);
 10307  0052E4  0100               	movlb	0	; () banked
 10308  0052E6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10309  0052E8  6F61               	movwf	(?_crc8+1)& (0+255),b
 10310  0052EA  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10311  0052EC  6F60               	movwf	?_crc8& (0+255),b
 10312  0052EE  0E02               	movlw	2
 10313  0052F0  6F62               	movwf	(?_crc8+2)& (0+255),b
 10314  0052F2  EC71  F034         	call	_crc8	;wreg free
 10315  0052F6                     l1013:
 10316  0052F6  A2AC               	btfss	4012,1,c	;volatile
 10317  0052F8  D7FE               	goto	l1013
 10318                           
 10319                           ;main.c: 2213: sendEscapedUartData(cmdReplyCode, &crc);
 10320  0052FA  0100               	movlb	0	; () banked
 10321  0052FC  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10322  0052FE  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10323  005300  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10324  005302  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10325  005304  5167               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
 10326  005306  ECF9  F031         	call	_sendEscapedUartData
 10327  00530A                     l1016:
 10328  00530A  A2AC               	btfss	4012,1,c	;volatile
 10329  00530C  D7FE               	goto	l1016
 10330                           
 10331                           ;main.c: 2217: sendEscapedUartData(cmdCode, &crc);
 10332  00530E  0100               	movlb	0	; () banked
 10333  005310  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10334  005312  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10335  005314  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10336  005316  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10337  005318  5166               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
 10338  00531A  ECF9  F031         	call	_sendEscapedUartData
 10339                           
 10340                           ;main.c: 2220: sendEscapedUartData(crc, (0));
 10341  00531E  0100               	movlb	0	; () banked
 10342  005320  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10343  005322  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10344  005324  5168               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
 10345  005326  ECF9  F031         	call	_sendEscapedUartData
 10346  00532A                     l1019:
 10347  00532A  A2AC               	btfss	4012,1,c	;volatile
 10348  00532C  D7FE               	goto	l1019
 10349                           
 10350                           ;main.c: 2224: WriteUSART(0x10);
 10351  00532E  0E10               	movlw	16
 10352  005330  EC8B  F035         	call	_WriteUSART
 10353  005334                     l1022:
 10354  005334  A2AC               	btfss	4012,1,c	;volatile
 10355  005336  D7FE               	goto	l1022
 10356                           
 10357                           ;main.c: 2226: WriteUSART(0x03);
 10358  005338  0E03               	movlw	3
 10359  00533A  EF8B  F035         	goto	_WriteUSART
 10360  00533E                     __end_of_sendVSCPDriverCommandReply:
 10361                           	opt stack 0
 10362  00533E                     PL130:
 10363                           	opt stack 23
 10364  00533E  0100               	movlb	0	; () banked
 10365  005340  0E00               	movlw	high sendVSCPDriverCommandReply@crc
 10366  005342  6F61               	movwf	(?_crc8+1)& (0+255),b
 10367  005344  0E68               	movlw	low sendVSCPDriverCommandReply@crc
 10368  005346  6F60               	movwf	?_crc8& (0+255),b
 10369  005348  6B62               	clrf	(?_crc8+2)& (0+255),b
 10370  00534A  0C00               	retlw	0
 10371  00534C                     __end_ofPL130:
 10372                           	opt stack 0
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon	equ	0xFF2
 10380                           indf0	equ	0xFEF
 10381                           postinc0	equ	0xFEE
 10382                           fsr0h	equ	0xFEA
 10383                           fsr0l	equ	0xFE9
 10384                           wreg	equ	0xFE8
 10385                           indf1	equ	0xFE7
 10386                           postinc1	equ	0xFE6
 10387                           postdec1	equ	0xFE5
 10388                           fsr1h	equ	0xFE2
 10389                           fsr1l	equ	0xFE1
 10390                           indf2	equ	0xFDF
 10391                           postinc2	equ	0xFDE
 10392                           postdec2	equ	0xFDD
 10393                           plusw2	equ	0xFDB
 10394                           fsr2h	equ	0xFDA
 10395                           fsr2l	equ	0xFD9
 10396                           status	equ	0xFD8
 10397                           
 10398 ;; *************** function _sendVSCPModeCapabilities *****************
 10399 ;; Defined at:
 10400 ;;		line 2588 in file "main.c"
 10401 ;; Parameters:    Size  Location     Type
 10402 ;;		None
 10403 ;; Auto vars:     Size  Location     Type
 10404 ;;  crc             1    6[BANK0 ] unsigned char 
 10405 ;; Return value:  Size  Location     Type
 10406 ;;                  1    wreg      enum E15660
 10407 ;; Registers used:
 10408 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10409 ;; Tracked objects:
 10410 ;;		On entry : F/1
 10411 ;;		On exit  : 0/0
 10412 ;;		Unchanged: 0/0
 10413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10414 ;;      Params:         0       0       0       0       0       0       0
 10415 ;;      Locals:         0       1       0       0       0       0       0
 10416 ;;      Temps:          0       0       0       0       0       0       0
 10417 ;;      Totals:         0       1       0       0       0       0       0
 10418 ;;Total ram usage:        1 bytes
 10419 ;; Hardware stack levels used:    1
 10420 ;; Hardware stack levels required when called:    6
 10421 ;; This function calls:
 10422 ;;		_WriteUSART
 10423 ;;		_sendEscapedUartData
 10424 ;;		_crc8
 10425 ;; This function is called by:
 10426 ;;		_doModeVscp
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           	psect	text10
 10431  00574A                     __ptext10:
 10432                           	opt stack 0
 10433  00574A                     _sendVSCPModeCapabilities:
 10434                           	opt stack 23
 10435                           
 10436                           ; BSR set to: 1
 10437                           ;main.c: 2589: uint8_t crc = 0;
 10438                           
 10439                           ;incstack = 0
 10440                           ;incstack = 0
 10441  00574A  0100               	movlb	0	; () banked
 10442  00574C  6B66               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
 10443  00574E                     l1155:
 10444  00574E  A2AC               	btfss	4012,1,c	;volatile
 10445  005750  D7FE               	goto	l1155
 10446                           
 10447                           ;main.c: 2593: WriteUSART(0x10);
 10448  005752  0E10               	movlw	16
 10449  005754  EC8B  F035         	call	_WriteUSART
 10450  005758                     l1158:
 10451  005758  A2AC               	btfss	4012,1,c	;volatile
 10452  00575A  D7FE               	goto	l1158
 10453                           
 10454                           ;main.c: 2595: WriteUSART(0x02);
 10455  00575C  0E02               	movlw	2
 10456  00575E  EC8B  F035         	call	_WriteUSART
 10457  005762                     l1161:
 10458  005762  A2AC               	btfss	4012,1,c	;volatile
 10459  005764  D7FE               	goto	l1161
 10460                           
 10461                           ;main.c: 2599: WriteUSART(9);
 10462  005766  0E09               	movlw	9
 10463  005768  EC8B  F035         	call	_WriteUSART
 10464                           
 10465                           ;main.c: 2600: crc8(&crc, 9);
 10466  00576C  0100               	movlb	0	; () banked
 10467  00576E  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10468  005770  6F61               	movwf	(?_crc8+1)& (0+255),b
 10469  005772  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10470  005774  6F60               	movwf	?_crc8& (0+255),b
 10471  005776  0E09               	movlw	9
 10472  005778  6F62               	movwf	(?_crc8+2)& (0+255),b
 10473  00577A  EC71  F034         	call	_crc8	;wreg free
 10474  00577E                     l1164:
 10475  00577E  A2AC               	btfss	4012,1,c	;volatile
 10476  005780  D7FE               	goto	l1164
 10477                           
 10478                           ;main.c: 2604: WriteUSART(0);
 10479  005782  0E00               	movlw	0
 10480  005784  EC8B  F035         	call	_WriteUSART
 10481                           
 10482                           ;main.c: 2605: crc8(&crc, 0);
 10483  005788  0100               	movlb	0	; () banked
 10484  00578A  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10485  00578C  6F61               	movwf	(?_crc8+1)& (0+255),b
 10486  00578E  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10487  005790  6F60               	movwf	?_crc8& (0+255),b
 10488  005792  0E00               	movlw	0
 10489  005794  6B62               	clrf	(?_crc8+2)& (0+255),b
 10490  005796  EC71  F034         	call	_crc8	;wreg free
 10491                           
 10492                           ; BSR set to: 3
 10493                           ;main.c: 2608: sendEscapedUartData(sequencyno, &crc );
 10494  00579A  0100               	movlb	0	; () banked
 10495  00579C  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10496  00579E  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10497  0057A0  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10498  0057A2  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10499  0057A4  51F3               	movf	_sequencyno& (0+255),w,b
 10500  0057A6  ECF9  F031         	call	_sendEscapedUartData
 10501                           
 10502                           ;main.c: 2609: sequencyno++;
 10503  0057AA  0100               	movlb	0	; () banked
 10504  0057AC  2BF3               	incf	_sequencyno& (0+255),f,b
 10505                           
 10506                           ; BSR set to: 0
 10507                           ;main.c: 2612: sendEscapedUartData( 0, &crc );
 10508  0057AE  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10509  0057B0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10510  0057B2  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10511  0057B4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10512  0057B6  0E00               	movlw	0
 10513  0057B8  ECF9  F031         	call	_sendEscapedUartData
 10514                           
 10515                           ;main.c: 2613: sendEscapedUartData( 2, &crc );
 10516  0057BC  0100               	movlb	0	; () banked
 10517  0057BE  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10518  0057C0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10519  0057C2  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10520  0057C4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10521  0057C6  0E02               	movlw	2
 10522  0057C8  ECF9  F031         	call	_sendEscapedUartData
 10523                           
 10524                           ;main.c: 2616: sendEscapedUartData( 1, &crc );
 10525  0057CC  0100               	movlb	0	; () banked
 10526  0057CE  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10527  0057D0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10528  0057D2  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10529  0057D4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10530  0057D6  0E01               	movlw	1
 10531  0057D8  ECF9  F031         	call	_sendEscapedUartData
 10532                           
 10533                           ;main.c: 2617: sendEscapedUartData( 0, &crc );
 10534  0057DC  0100               	movlb	0	; () banked
 10535  0057DE  0E00               	movlw	high sendVSCPModeCapabilities@crc
 10536  0057E0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10537  0057E2  0E66               	movlw	low sendVSCPModeCapabilities@crc
 10538  0057E4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10539  0057E6  0E00               	movlw	0
 10540  0057E8  ECF9  F031         	call	_sendEscapedUartData
 10541                           
 10542                           ;main.c: 2620: sendEscapedUartData(crc, (0));
 10543  0057EC  0100               	movlb	0	; () banked
 10544  0057EE  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10545  0057F0  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10546  0057F2  5166               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
 10547  0057F4  ECF9  F031         	call	_sendEscapedUartData
 10548  0057F8                     l1167:
 10549  0057F8  A2AC               	btfss	4012,1,c	;volatile
 10550  0057FA  D7FE               	goto	l1167
 10551                           
 10552                           ;main.c: 2624: WriteUSART(0x10);
 10553  0057FC  0E10               	movlw	16
 10554  0057FE  EC8B  F035         	call	_WriteUSART
 10555  005802                     l1170:
 10556  005802  A2AC               	btfss	4012,1,c	;volatile
 10557  005804  D7FE               	goto	l1170
 10558                           
 10559                           ;main.c: 2626: WriteUSART(0x03);
 10560  005806  0E03               	movlw	3
 10561  005808  EF8B  F035         	goto	_WriteUSART
 10562  00580C                     __end_of_sendVSCPModeCapabilities:
 10563                           	opt stack 0
 10564                           tblptru	equ	0xFF8
 10565                           tblptrh	equ	0xFF7
 10566                           tblptrl	equ	0xFF6
 10567                           tablat	equ	0xFF5
 10568                           prodh	equ	0xFF4
 10569                           prodl	equ	0xFF3
 10570                           intcon	equ	0xFF2
 10571                           indf0	equ	0xFEF
 10572                           postinc0	equ	0xFEE
 10573                           fsr0h	equ	0xFEA
 10574                           fsr0l	equ	0xFE9
 10575                           wreg	equ	0xFE8
 10576                           indf1	equ	0xFE7
 10577                           postinc1	equ	0xFE6
 10578                           postdec1	equ	0xFE5
 10579                           fsr1h	equ	0xFE2
 10580                           fsr1l	equ	0xFE1
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
 10590 ;; Defined at:
 10591 ;;		line 2724 in file "main.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      enum E15660
 10598 ;; Registers used:
 10599 ;;		wreg
 10600 ;; Tracked objects:
 10601 ;;		On entry : F/1
 10602 ;;		On exit  : F/1
 10603 ;;		Unchanged: F/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10605 ;;      Params:         0       0       0       0       0       0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:    3
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_doModeVscp
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text11
 10620  006B94                     __ptext11:
 10621                           	opt stack 0
 10622  006B94                     _receiveVSCPModeMultiCanalMsg:
 10623                           	opt stack 26
 10624                           
 10625                           ; BSR set to: 1
 10626                           
 10627                           ; BSR set to: 1
 10628                           ;main.c: 2726: return 0;
 10629                           
 10630                           ;incstack = 0
 10631                           ;incstack = 0
 10632  006B94  0C00               	retlw	0
 10633  006B96                     __end_of_receiveVSCPModeMultiCanalMsg:
 10634                           	opt stack 0
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           prodh	equ	0xFF4
 10640                           prodl	equ	0xFF3
 10641                           intcon	equ	0xFF2
 10642                           indf0	equ	0xFEF
 10643                           postinc0	equ	0xFEE
 10644                           fsr0h	equ	0xFEA
 10645                           fsr0l	equ	0xFE9
 10646                           wreg	equ	0xFE8
 10647                           indf1	equ	0xFE7
 10648                           postinc1	equ	0xFE6
 10649                           postdec1	equ	0xFE5
 10650                           fsr1h	equ	0xFE2
 10651                           fsr1l	equ	0xFE1
 10652                           indf2	equ	0xFDF
 10653                           postinc2	equ	0xFDE
 10654                           postdec2	equ	0xFDD
 10655                           plusw2	equ	0xFDB
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8
 10659                           
 10660 ;; *************** function _receiveVSCPModeCanalMsg *****************
 10661 ;; Defined at:
 10662 ;;		line 2698 in file "main.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;		None
 10665 ;; Auto vars:     Size  Location     Type
 10666 ;;  data            8   67[BANK0 ] unsigned char [8]
 10667 ;;  id              4   75[BANK0 ] unsigned long 
 10668 ;;  dlc             1   79[BANK0 ] unsigned char 
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      enum E15660
 10671 ;; Registers used:
 10672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10673 ;; Tracked objects:
 10674 ;;		On entry : F/1
 10675 ;;		On exit  : F/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10678 ;;      Params:         0       0       0       0       0       0       0
 10679 ;;      Locals:         0      13       0       0       0       0       0
 10680 ;;      Temps:          0      20       0       0       0       0       0
 10681 ;;      Totals:         0      33       0       0       0       0       0
 10682 ;;Total ram usage:       33 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; Hardware stack levels required when called:    6
 10685 ;; This function calls:
 10686 ;;		_memcpy
 10687 ;;		_sendCANFrame
 10688 ;; This function is called by:
 10689 ;;		_doModeVscp
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           	psect	text12
 10694  00518C                     __ptext12:
 10695                           	opt stack 0
 10696  00518C                     _receiveVSCPModeCanalMsg:
 10697                           	opt stack 23
 10698                           
 10699                           ; BSR set to: 1
 10700                           ;main.c: 2699: uint32_t id;
 10701                           ;main.c: 2700: uint8_t dlc;
 10702                           ;main.c: 2701: uint8_t data[8];
 10703                           ;main.c: 2703: id = ((uint32_t) cmdbuf[5] << 26) |
 10704                           ;main.c: 2704: ((uint32_t) cmdbuf[5 + 1] << 16) |
 10705                           ;main.c: 2705: ((uint32_t) cmdbuf[5 + 2] << 8) |
 10706                           ;main.c: 2706: cmdbuf[5 + 3];
 10707                           
 10708                           ; BSR set to: 1
 10709                           ;incstack = 0
 10710                           ;incstack = 0
 10711  00518C  C10C  F08F         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
 10712  005190  0100               	movlb	0	; () banked
 10713  005192  6B90               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10714  005194  6B91               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
 10715  005196  6B92               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
 10716  005198  C091  F092         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
 10717  00519C  C090  F091         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
 10718  0051A0  C08F  F090         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
 10719  0051A4  6B8F               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
 10720  0051A6  C10B  F093         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
 10721  0051AA  6B94               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10722  0051AC  6B95               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
 10723  0051AE  6B96               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
 10724  0051B0  C094  F096         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
 10725  0051B4  C093  F095         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
 10726  0051B8  6B94               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
 10727  0051BA  6B93               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
 10728  0051BC  C10A  F097         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
 10729  0051C0  6B98               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
 10730  0051C2  6B99               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
 10731  0051C4  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
 10732  0051C6  0E1A               	movlw	26
 10733  0051C8                     u24195:
 10734  0051C8  90D8               	bcf	status,0,c
 10735  0051CA  3797               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
 10736  0051CC  3798               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
 10737  0051CE  3799               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
 10738  0051D0  379A               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
 10739  0051D2  2EE8               	decfsz	wreg,f,c
 10740  0051D4  D7F9               	goto	u24195
 10741  0051D6  5193               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
 10742  0051D8  1197               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
 10743  0051DA  6F9B               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
 10744  0051DC  5194               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
 10745  0051DE  1198               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
 10746  0051E0  6F9C               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
 10747  0051E2  5195               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
 10748  0051E4  1199               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
 10749  0051E6  6F9D               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
 10750  0051E8  5196               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
 10751  0051EA  119A               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
 10752  0051EC  6F9E               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
 10753  0051EE  518F               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
 10754  0051F0  119B               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
 10755  0051F2  6F9F               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
 10756  0051F4  5190               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
 10757  0051F6  119C               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
 10758  0051F8  6FA0               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
 10759  0051FA  5191               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
 10760  0051FC  119D               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
 10761  0051FE  6FA1               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
 10762  005200  5192               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
 10763  005202  119E               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
 10764  005204  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
 10765  005206  0101               	movlb	1	; () banked
 10766  005208  510D               	movf	(_cmdbuf+8)& (0+255),w,b
 10767  00520A  0100               	movlb	0	; () banked
 10768  00520C  119F               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
 10769  00520E  6FAB               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
 10770  005210  51A0               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
 10771  005212  6FAC               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
 10772  005214  51A1               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
 10773  005216  6FAD               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
 10774  005218  51A2               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
 10775  00521A  6FAE               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
 10776                           
 10777                           ;main.c: 2708: dlc = ( cmdbuf[4] - 4 );
 10778  00521C  0101               	movlb	1	; () banked
 10779  00521E  5109               	movf	(_cmdbuf+4)& (0+255),w,b
 10780  005220  0FFC               	addlw	252
 10781  005222  0100               	movlb	0	; () banked
 10782  005224  6FAF               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10783                           
 10784                           ; BSR set to: 0
 10785                           ;main.c: 2710: if ( dlc > 8 ) {
 10786  005226  0E08               	movlw	8
 10787  005228  65AF               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10788  00522A  D001               	goto	l18364
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;main.c: 2711: dlc = 8;
 10792  00522C  6FAF               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
 10793  00522E                     l18364:
 10794                           
 10795                           ; BSR set to: 0
 10796                           ;main.c: 2712: }
 10797                           ;main.c: 2713: memcpy( data, cmdbuf + 5 + 4, dlc );
 10798  00522E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10799  005230  6E20               	movwf	?_memcpy+1,c
 10800  005232  0EA3               	movlw	low receiveVSCPModeCanalMsg@data
 10801  005234  6E1F               	movwf	?_memcpy,c
 10802  005236  0E0E               	movlw	low (_cmdbuf+9)
 10803  005238  6F8F               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
 10804  00523A  0E01               	movlw	high (_cmdbuf+9)
 10805  00523C  6F90               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
 10806  00523E  C08F  F021         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
 10807  005242  C090  F022         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
 10808  005246  C0AF  F023         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
 10809  00524A  6A24               	clrf	?_memcpy+5,c
 10810  00524C  EC97  F033         	call	_memcpy	;wreg free
 10811                           
 10812                           ;main.c: 2715: return sendCANFrame(id, dlc, data);
 10813  005250  C0AB  F088         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
 10814  005254  C0AC  F089         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
 10815  005258  C0AD  F08A         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
 10816  00525C  C0AE  F08B         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
 10817  005260  C0AF  F08C         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
 10818  005264  0100               	movlb	0	; () banked
 10819  005266  0E00               	movlw	high receiveVSCPModeCanalMsg@data
 10820  005268  6F8E               	movwf	(?_sendCANFrame+6)& (0+255),b
 10821  00526A  0EA3               	movlw	low receiveVSCPModeCanalMsg@data
 10822  00526C  6F8D               	movwf	(?_sendCANFrame+5)& (0+255),b
 10823  00526E  EF8D  F034         	goto	_sendCANFrame	;wreg free
 10824  005272                     __end_of_receiveVSCPModeCanalMsg:
 10825                           	opt stack 0
 10826                           tblptru	equ	0xFF8
 10827                           tblptrh	equ	0xFF7
 10828                           tblptrl	equ	0xFF6
 10829                           tablat	equ	0xFF5
 10830                           prodh	equ	0xFF4
 10831                           prodl	equ	0xFF3
 10832                           intcon	equ	0xFF2
 10833                           indf0	equ	0xFEF
 10834                           postinc0	equ	0xFEE
 10835                           fsr0h	equ	0xFEA
 10836                           fsr0l	equ	0xFE9
 10837                           wreg	equ	0xFE8
 10838                           indf1	equ	0xFE7
 10839                           postinc1	equ	0xFE6
 10840                           postdec1	equ	0xFE5
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           indf2	equ	0xFDF
 10844                           postinc2	equ	0xFDE
 10845                           postdec2	equ	0xFDD
 10846                           plusw2	equ	0xFDB
 10847                           fsr2h	equ	0xFDA
 10848                           fsr2l	equ	0xFD9
 10849                           status	equ	0xFD8
 10850                           
 10851 ;; *************** function _memcpy *****************
 10852 ;; Defined at:
 10853 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/common/memcpy.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  d1              2   30[COMRAM] PTR void 
 10856 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10857 ;;  s1              2   32[COMRAM] PTR const void 
 10858 ;;		 -> vscpData(8), cmdbuf(80), 
 10859 ;;  n               2   34[COMRAM] unsigned int 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 10862 ;;		 -> vscpData(8), cmdbuf(80), 
 10863 ;;  d               2    0[BANK0 ] PTR unsigned char 
 10864 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  2   30[COMRAM] PTR void 
 10867 ;; Registers used:
 10868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10869 ;; Tracked objects:
 10870 ;;		On entry : F/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10874 ;;      Params:         6       0       0       0       0       0       0
 10875 ;;      Locals:         0       4       0       0       0       0       0
 10876 ;;      Temps:          0       0       0       0       0       0       0
 10877 ;;      Totals:         6       4       0       0       0       0       0
 10878 ;;Total ram usage:       10 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    3
 10881 ;; This function calls:
 10882 ;;		Nothing
 10883 ;; This function is called by:
 10884 ;;		_doModeSLCAN
 10885 ;;		_receiveVSCPModeCanalMsg
 10886 ;; This function uses a non-reentrant model
 10887 ;;
 10888                           
 10889                           	psect	text13
 10890  00672E                     __ptext13:
 10891                           	opt stack 0
 10892  00672E                     _memcpy:
 10893                           	opt stack 26
 10894                           
 10895                           ; BSR set to: 0
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;incstack = 0
 10899                           ;incstack = 0
 10900  00672E  C021  F062         	movff	memcpy@s1,memcpy@s
 10901  006732  C022  F063         	movff	memcpy@s1+1,memcpy@s+1
 10902  006736  C01F  F060         	movff	memcpy@d1,memcpy@d
 10903  00673A  C020  F061         	movff	memcpy@d1+1,memcpy@d+1
 10904  00673E  D00F               	goto	l18574
 10905  006740                     l18568:
 10906  006740  C062  FFD9         	movff	memcpy@s,fsr2l
 10907  006744  C063  FFDA         	movff	memcpy@s+1,fsr2h
 10908  006748  C060  FFE1         	movff	memcpy@d,fsr1l
 10909  00674C  C061  FFE2         	movff	memcpy@d+1,fsr1h
 10910  006750  CFDF FFE7          	movff	indf2,indf1
 10911  006754  0100               	movlb	0	; () banked
 10912  006756  4B62               	infsnz	memcpy@s& (0+255),f,b
 10913  006758  2B63               	incf	(memcpy@s+1)& (0+255),f,b
 10914                           
 10915                           ; BSR set to: 0
 10916  00675A  4B60               	infsnz	memcpy@d& (0+255),f,b
 10917  00675C  2B61               	incf	(memcpy@d+1)& (0+255),f,b
 10918  00675E                     l18574:
 10919                           
 10920                           ; BSR set to: 0
 10921  00675E  0623               	decf	memcpy@n,f,c
 10922  006760  A0D8               	btfss	status,0,c
 10923  006762  0624               	decf	memcpy@n+1,f,c
 10924  006764  2823               	incf	memcpy@n& (0+255),w,c
 10925  006766  B4D8               	btfsc	status,2,c
 10926  006768  2824               	incf	(memcpy@n+1)& (0+255),w,c
 10927  00676A  B4D8               	btfsc	status,2,c
 10928  00676C  0012               	return	
 10929  00676E  D7E8               	goto	l18568
 10930  006770                     __end_of_memcpy:
 10931                           	opt stack 0
 10932                           tblptru	equ	0xFF8
 10933                           tblptrh	equ	0xFF7
 10934                           tblptrl	equ	0xFF6
 10935                           tablat	equ	0xFF5
 10936                           prodh	equ	0xFF4
 10937                           prodl	equ	0xFF3
 10938                           intcon	equ	0xFF2
 10939                           indf0	equ	0xFEF
 10940                           postinc0	equ	0xFEE
 10941                           fsr0h	equ	0xFEA
 10942                           fsr0l	equ	0xFE9
 10943                           wreg	equ	0xFE8
 10944                           indf1	equ	0xFE7
 10945                           postinc1	equ	0xFE6
 10946                           postdec1	equ	0xFE5
 10947                           fsr1h	equ	0xFE2
 10948                           fsr1l	equ	0xFE1
 10949                           indf2	equ	0xFDF
 10950                           postinc2	equ	0xFDE
 10951                           postdec2	equ	0xFDD
 10952                           plusw2	equ	0xFDB
 10953                           fsr2h	equ	0xFDA
 10954                           fsr2l	equ	0xFD9
 10955                           status	equ	0xFD8
 10956                           
 10957 ;; *************** function _sendVSCPDriverAck *****************
 10958 ;; Defined at:
 10959 ;;		line 2092 in file "main.c"
 10960 ;; Parameters:    Size  Location     Type
 10961 ;;		None
 10962 ;; Auto vars:     Size  Location     Type
 10963 ;;  crc             1    6[BANK0 ] unsigned char 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;		None               void
 10966 ;; Registers used:
 10967 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/1
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10973 ;;      Params:         0       0       0       0       0       0       0
 10974 ;;      Locals:         0       1       0       0       0       0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0
 10976 ;;      Totals:         0       1       0       0       0       0       0
 10977 ;;Total ram usage:        1 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    6
 10980 ;; This function calls:
 10981 ;;		_WriteUSART
 10982 ;;		_sendEscapedUartData
 10983 ;;		_crc8
 10984 ;; This function is called by:
 10985 ;;		_doModeVscp
 10986 ;; This function uses a non-reentrant model
 10987 ;;
 10988                           
 10989                           	psect	text14
 10990  005ABE                     __ptext14:
 10991                           	opt stack 0
 10992  005ABE                     _sendVSCPDriverAck:
 10993                           	opt stack 23
 10994                           
 10995                           ;main.c: 2093: uint8_t crc = 0;
 10996                           
 10997                           ;incstack = 0
 10998                           ;incstack = 0
 10999  005ABE  0100               	movlb	0	; () banked
 11000  005AC0  6B66               	clrf	sendVSCPDriverAck@crc& (0+255),b
 11001  005AC2                     l941:
 11002  005AC2  A2AC               	btfss	4012,1,c	;volatile
 11003  005AC4  D7FE               	goto	l941
 11004                           
 11005                           ;main.c: 2097: WriteUSART(0x10);
 11006  005AC6  0E10               	movlw	16
 11007  005AC8  EC8B  F035         	call	_WriteUSART
 11008  005ACC                     l944:
 11009  005ACC  A2AC               	btfss	4012,1,c	;volatile
 11010  005ACE  D7FE               	goto	l944
 11011                           
 11012                           ;main.c: 2099: WriteUSART(0x02);
 11013  005AD0  0E02               	movlw	2
 11014  005AD2  EC8B  F035         	call	_WriteUSART
 11015  005AD6                     l947:
 11016  005AD6  A2AC               	btfss	4012,1,c	;volatile
 11017  005AD8  D7FE               	goto	l947
 11018                           
 11019                           ;main.c: 2103: WriteUSART(251);
 11020  005ADA  0EFB               	movlw	251
 11021  005ADC  EC8B  F035         	call	_WriteUSART
 11022                           
 11023                           ;main.c: 2104: crc8(&crc, 251);
 11024  005AE0  0100               	movlb	0	; () banked
 11025  005AE2  0E00               	movlw	high sendVSCPDriverAck@crc
 11026  005AE4  6F61               	movwf	(?_crc8+1)& (0+255),b
 11027  005AE6  0E66               	movlw	low sendVSCPDriverAck@crc
 11028  005AE8  6F60               	movwf	?_crc8& (0+255),b
 11029  005AEA  0EFB               	movlw	251
 11030  005AEC  6F62               	movwf	(?_crc8+2)& (0+255),b
 11031  005AEE  EC71  F034         	call	_crc8	;wreg free
 11032  005AF2                     l950:
 11033  005AF2  A2AC               	btfss	4012,1,c	;volatile
 11034  005AF4  D7FE               	goto	l950
 11035                           
 11036                           ;main.c: 2108: WriteUSART(0);
 11037  005AF6  0E00               	movlw	0
 11038  005AF8  EC8B  F035         	call	_WriteUSART
 11039                           
 11040                           ;main.c: 2109: crc8(&crc, 0);
 11041  005AFC  D82B               	call	PL66	;call to abstracted procedure
 11042  005AFE  EC71  F034         	call	_crc8	;wreg free
 11043                           
 11044                           ; BSR set to: 3
 11045                           ;main.c: 2112: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 11046  005B02  0100               	movlb	0	; () banked
 11047  005B04  0E00               	movlw	high sendVSCPDriverAck@crc
 11048  005B06  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11049  005B08  0E66               	movlw	low sendVSCPDriverAck@crc
 11050  005B0A  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11051  005B0C  0101               	movlb	1	; () banked
 11052  005B0E  5107               	movf	(_cmdbuf+2)& (0+255),w,b
 11053  005B10  ECF9  F031         	call	_sendEscapedUartData
 11054  005B14                     l953:
 11055  005B14  A2AC               	btfss	4012,1,c	;volatile
 11056  005B16  D7FE               	goto	l953
 11057                           
 11058                           ;main.c: 2116: WriteUSART(0);
 11059  005B18  0E00               	movlw	0
 11060  005B1A  EC8B  F035         	call	_WriteUSART
 11061                           
 11062                           ;main.c: 2117: crc8(&crc, 0);
 11063  005B1E  D81A               	call	PL66	;call to abstracted procedure
 11064  005B20  EC71  F034         	call	_crc8	;wreg free
 11065  005B24                     l956:
 11066  005B24  A2AC               	btfss	4012,1,c	;volatile
 11067  005B26  D7FE               	goto	l956
 11068                           
 11069                           ;main.c: 2119: WriteUSART(0);
 11070  005B28  0E00               	movlw	0
 11071  005B2A  EC8B  F035         	call	_WriteUSART
 11072                           
 11073                           ;main.c: 2120: crc8(&crc, 0);
 11074  005B2E  D812               	call	PL66	;call to abstracted procedure
 11075  005B30  EC71  F034         	call	_crc8	;wreg free
 11076                           
 11077                           ; BSR set to: 3
 11078                           ;main.c: 2123: sendEscapedUartData(crc, (0));
 11079  005B34  0100               	movlb	0	; () banked
 11080  005B36  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11081  005B38  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 11082  005B3A  5166               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 11083  005B3C  ECF9  F031         	call	_sendEscapedUartData
 11084  005B40                     l959:
 11085  005B40  A2AC               	btfss	4012,1,c	;volatile
 11086  005B42  D7FE               	goto	l959
 11087                           
 11088                           ;main.c: 2127: WriteUSART(0x10);
 11089  005B44  0E10               	movlw	16
 11090  005B46  EC8B  F035         	call	_WriteUSART
 11091  005B4A                     l962:
 11092  005B4A  A2AC               	btfss	4012,1,c	;volatile
 11093  005B4C  D7FE               	goto	l962
 11094                           
 11095                           ;main.c: 2129: WriteUSART(0x03);
 11096  005B4E  0E03               	movlw	3
 11097  005B50  EF8B  F035         	goto	_WriteUSART
 11098  005B54                     __end_of_sendVSCPDriverAck:
 11099                           	opt stack 0
 11100  005B54                     PL66:
 11101                           	opt stack 23
 11102  005B54  0100               	movlb	0	; () banked
 11103  005B56  0E00               	movlw	high sendVSCPDriverAck@crc
 11104  005B58  6F61               	movwf	(?_crc8+1)& (0+255),b
 11105  005B5A  0E66               	movlw	low sendVSCPDriverAck@crc
 11106  005B5C  6F60               	movwf	?_crc8& (0+255),b
 11107  005B5E  6B62               	clrf	(?_crc8+2)& (0+255),b
 11108  005B60  0C00               	retlw	0
 11109  005B62                     __end_ofPL66:
 11110                           	opt stack 0
 11111                           tblptru	equ	0xFF8
 11112                           tblptrh	equ	0xFF7
 11113                           tblptrl	equ	0xFF6
 11114                           tablat	equ	0xFF5
 11115                           prodh	equ	0xFF4
 11116                           prodl	equ	0xFF3
 11117                           intcon	equ	0xFF2
 11118                           indf0	equ	0xFEF
 11119                           postinc0	equ	0xFEE
 11120                           fsr0h	equ	0xFEA
 11121                           fsr0l	equ	0xFE9
 11122                           wreg	equ	0xFE8
 11123                           indf1	equ	0xFE7
 11124                           postinc1	equ	0xFE6
 11125                           postdec1	equ	0xFE5
 11126                           fsr1h	equ	0xFE2
 11127                           fsr1l	equ	0xFE1
 11128                           indf2	equ	0xFDF
 11129                           postinc2	equ	0xFDE
 11130                           postdec2	equ	0xFDD
 11131                           plusw2	equ	0xFDB
 11132                           fsr2h	equ	0xFDA
 11133                           fsr2l	equ	0xFD9
 11134                           status	equ	0xFD8
 11135                           
 11136 ;; *************** function _sendVSCPDriverNack *****************
 11137 ;; Defined at:
 11138 ;;		line 2136 in file "main.c"
 11139 ;; Parameters:    Size  Location     Type
 11140 ;;		None
 11141 ;; Auto vars:     Size  Location     Type
 11142 ;;  crc             1    6[BANK0 ] unsigned char 
 11143 ;; Return value:  Size  Location     Type
 11144 ;;		None               void
 11145 ;; Registers used:
 11146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11147 ;; Tracked objects:
 11148 ;;		On entry : E/0
 11149 ;;		On exit  : 0/0
 11150 ;;		Unchanged: 0/0
 11151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11152 ;;      Params:         0       0       0       0       0       0       0
 11153 ;;      Locals:         0       1       0       0       0       0       0
 11154 ;;      Temps:          0       0       0       0       0       0       0
 11155 ;;      Totals:         0       1       0       0       0       0       0
 11156 ;;Total ram usage:        1 bytes
 11157 ;; Hardware stack levels used:    1
 11158 ;; Hardware stack levels required when called:    6
 11159 ;; This function calls:
 11160 ;;		_WriteUSART
 11161 ;;		_sendEscapedUartData
 11162 ;;		_crc8
 11163 ;; This function is called by:
 11164 ;;		_doModeVscp
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text15
 11169  005B62                     __ptext15:
 11170                           	opt stack 0
 11171  005B62                     _sendVSCPDriverNack:
 11172                           	opt stack 23
 11173                           
 11174                           ;main.c: 2137: uint8_t crc = 0;
 11175                           
 11176                           ;incstack = 0
 11177                           ;incstack = 0
 11178  005B62  0100               	movlb	0	; () banked
 11179  005B64  6B66               	clrf	sendVSCPDriverNack@crc& (0+255),b
 11180  005B66                     l968:
 11181  005B66  A2AC               	btfss	4012,1,c	;volatile
 11182  005B68  D7FE               	goto	l968
 11183                           
 11184                           ;main.c: 2141: WriteUSART(0x10);
 11185  005B6A  0E10               	movlw	16
 11186  005B6C  EC8B  F035         	call	_WriteUSART
 11187  005B70                     l971:
 11188  005B70  A2AC               	btfss	4012,1,c	;volatile
 11189  005B72  D7FE               	goto	l971
 11190                           
 11191                           ;main.c: 2143: WriteUSART(0x02);
 11192  005B74  0E02               	movlw	2
 11193  005B76  EC8B  F035         	call	_WriteUSART
 11194  005B7A                     l974:
 11195  005B7A  A2AC               	btfss	4012,1,c	;volatile
 11196  005B7C  D7FE               	goto	l974
 11197                           
 11198                           ;main.c: 2147: WriteUSART(252);
 11199  005B7E  0EFC               	movlw	252
 11200  005B80  EC8B  F035         	call	_WriteUSART
 11201                           
 11202                           ;main.c: 2148: crc8(&crc, 252);
 11203  005B84  0100               	movlb	0	; () banked
 11204  005B86  0E00               	movlw	high sendVSCPDriverNack@crc
 11205  005B88  6F61               	movwf	(?_crc8+1)& (0+255),b
 11206  005B8A  0E66               	movlw	low sendVSCPDriverNack@crc
 11207  005B8C  6F60               	movwf	?_crc8& (0+255),b
 11208  005B8E  0EFC               	movlw	252
 11209  005B90  6F62               	movwf	(?_crc8+2)& (0+255),b
 11210  005B92  EC71  F034         	call	_crc8	;wreg free
 11211  005B96                     l977:
 11212  005B96  A2AC               	btfss	4012,1,c	;volatile
 11213  005B98  D7FE               	goto	l977
 11214                           
 11215                           ;main.c: 2152: WriteUSART(0);
 11216  005B9A  0E00               	movlw	0
 11217  005B9C  EC8B  F035         	call	_WriteUSART
 11218                           
 11219                           ;main.c: 2153: crc8(&crc, 0);
 11220  005BA0  D82B               	call	PL62	;call to abstracted procedure
 11221  005BA2  EC71  F034         	call	_crc8	;wreg free
 11222                           
 11223                           ; BSR set to: 3
 11224                           ;main.c: 2156: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 11225  005BA6  0100               	movlb	0	; () banked
 11226  005BA8  0E00               	movlw	high sendVSCPDriverNack@crc
 11227  005BAA  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11228  005BAC  0E66               	movlw	low sendVSCPDriverNack@crc
 11229  005BAE  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11230  005BB0  0101               	movlb	1	; () banked
 11231  005BB2  5107               	movf	(_cmdbuf+2)& (0+255),w,b
 11232  005BB4  ECF9  F031         	call	_sendEscapedUartData
 11233  005BB8                     l980:
 11234  005BB8  A2AC               	btfss	4012,1,c	;volatile
 11235  005BBA  D7FE               	goto	l980
 11236                           
 11237                           ;main.c: 2160: WriteUSART(0);
 11238  005BBC  0E00               	movlw	0
 11239  005BBE  EC8B  F035         	call	_WriteUSART
 11240                           
 11241                           ;main.c: 2161: crc8(&crc, 0);
 11242  005BC2  D81A               	call	PL62	;call to abstracted procedure
 11243  005BC4  EC71  F034         	call	_crc8	;wreg free
 11244  005BC8                     l983:
 11245  005BC8  A2AC               	btfss	4012,1,c	;volatile
 11246  005BCA  D7FE               	goto	l983
 11247                           
 11248                           ;main.c: 2163: WriteUSART(0);
 11249  005BCC  0E00               	movlw	0
 11250  005BCE  EC8B  F035         	call	_WriteUSART
 11251                           
 11252                           ;main.c: 2164: crc8(&crc, 0);
 11253  005BD2  D812               	call	PL62	;call to abstracted procedure
 11254  005BD4  EC71  F034         	call	_crc8	;wreg free
 11255                           
 11256                           ; BSR set to: 3
 11257                           ;main.c: 2167: sendEscapedUartData(crc, (0));
 11258  005BD8  0100               	movlb	0	; () banked
 11259  005BDA  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11260  005BDC  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 11261  005BDE  5166               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 11262  005BE0  ECF9  F031         	call	_sendEscapedUartData
 11263  005BE4                     l986:
 11264  005BE4  A2AC               	btfss	4012,1,c	;volatile
 11265  005BE6  D7FE               	goto	l986
 11266                           
 11267                           ;main.c: 2171: WriteUSART(0x10);
 11268  005BE8  0E10               	movlw	16
 11269  005BEA  EC8B  F035         	call	_WriteUSART
 11270  005BEE                     l989:
 11271  005BEE  A2AC               	btfss	4012,1,c	;volatile
 11272  005BF0  D7FE               	goto	l989
 11273                           
 11274                           ;main.c: 2173: WriteUSART(0x03);
 11275  005BF2  0E03               	movlw	3
 11276  005BF4  EF8B  F035         	goto	_WriteUSART
 11277  005BF8                     __end_of_sendVSCPDriverNack:
 11278                           	opt stack 0
 11279  005BF8                     PL62:
 11280                           	opt stack 23
 11281  005BF8  0100               	movlb	0	; () banked
 11282  005BFA  0E00               	movlw	high sendVSCPDriverNack@crc
 11283  005BFC  6F61               	movwf	(?_crc8+1)& (0+255),b
 11284  005BFE  0E66               	movlw	low sendVSCPDriverNack@crc
 11285  005C00  6F60               	movwf	?_crc8& (0+255),b
 11286  005C02  6B62               	clrf	(?_crc8+2)& (0+255),b
 11287  005C04  0C00               	retlw	0
 11288  005C06                     __end_ofPL62:
 11289                           	opt stack 0
 11290                           tblptru	equ	0xFF8
 11291                           tblptrh	equ	0xFF7
 11292                           tblptrl	equ	0xFF6
 11293                           tablat	equ	0xFF5
 11294                           prodh	equ	0xFF4
 11295                           prodl	equ	0xFF3
 11296                           intcon	equ	0xFF2
 11297                           indf0	equ	0xFEF
 11298                           postinc0	equ	0xFEE
 11299                           fsr0h	equ	0xFEA
 11300                           fsr0l	equ	0xFE9
 11301                           wreg	equ	0xFE8
 11302                           indf1	equ	0xFE7
 11303                           postinc1	equ	0xFE6
 11304                           postdec1	equ	0xFE5
 11305                           fsr1h	equ	0xFE2
 11306                           fsr1l	equ	0xFE1
 11307                           indf2	equ	0xFDF
 11308                           postinc2	equ	0xFDE
 11309                           postdec2	equ	0xFDD
 11310                           plusw2	equ	0xFDB
 11311                           fsr2h	equ	0xFDA
 11312                           fsr2l	equ	0xFD9
 11313                           status	equ	0xFD8
 11314                           
 11315 ;; *************** function _calcCRC *****************
 11316 ;; Defined at:
 11317 ;;		line 2940 in file "main.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;  p               2    3[BANK0 ] PTR unsigned char 
 11320 ;;		 -> cmdbuf(80), 
 11321 ;;  len             1    5[BANK0 ] unsigned char 
 11322 ;; Auto vars:     Size  Location     Type
 11323 ;;  crc             1    7[BANK0 ] unsigned char 
 11324 ;;  j               1    6[BANK0 ] unsigned char 
 11325 ;; Return value:  Size  Location     Type
 11326 ;;                  1    wreg      unsigned char 
 11327 ;; Registers used:
 11328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11329 ;; Tracked objects:
 11330 ;;		On entry : F/0
 11331 ;;		On exit  : F/0
 11332 ;;		Unchanged: 0/0
 11333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11334 ;;      Params:         0       3       0       0       0       0       0
 11335 ;;      Locals:         0       2       0       0       0       0       0
 11336 ;;      Temps:          0       0       0       0       0       0       0
 11337 ;;      Totals:         0       5       0       0       0       0       0
 11338 ;;Total ram usage:        5 bytes
 11339 ;; Hardware stack levels used:    1
 11340 ;; Hardware stack levels required when called:    5
 11341 ;; This function calls:
 11342 ;;		_crc8
 11343 ;; This function is called by:
 11344 ;;		_doModeVscp
 11345 ;; This function uses a non-reentrant model
 11346 ;;
 11347                           
 11348                           	psect	text16
 11349  0069BE                     __ptext16:
 11350                           	opt stack 0
 11351  0069BE                     _calcCRC:
 11352                           	opt stack 24
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;main.c: 2941: uint8_t j;
 11356                           ;main.c: 2942: uint8_t crc = 0;
 11357                           
 11358                           ;incstack = 0
 11359                           ;incstack = 0
 11360  0069BE  6B67               	clrf	calcCRC@crc& (0+255),b
 11361                           
 11362                           ;main.c: 2944: for (j = 0; j < len; j++) {
 11363  0069C0  6B66               	clrf	calcCRC@j& (0+255),b
 11364  0069C2  D010               	goto	l18292
 11365  0069C4                     l18288:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;main.c: 2945: crc8(&crc, p[j]);
 11369  0069C4  0E00               	movlw	high calcCRC@crc
 11370  0069C6  6F61               	movwf	(?_crc8+1)& (0+255),b
 11371  0069C8  0E67               	movlw	low calcCRC@crc
 11372  0069CA  6F60               	movwf	?_crc8& (0+255),b
 11373  0069CC  5166               	movf	calcCRC@j& (0+255),w,b
 11374  0069CE  2563               	addwf	calcCRC@p& (0+255),w,b
 11375  0069D0  6ED9               	movwf	fsr2l,c
 11376  0069D2  0E00               	movlw	0
 11377  0069D4  2164               	addwfc	(calcCRC@p+1)& (0+255),w,b
 11378  0069D6  6EDA               	movwf	fsr2h,c
 11379  0069D8  50DF               	movf	indf2,w,c
 11380  0069DA  6F62               	movwf	(?_crc8+2)& (0+255),b
 11381  0069DC  EC71  F034         	call	_crc8	;wreg free
 11382                           
 11383                           ; BSR set to: 3
 11384  0069E0  0100               	movlb	0	; () banked
 11385  0069E2  2B66               	incf	calcCRC@j& (0+255),f,b
 11386  0069E4                     l18292:
 11387                           
 11388                           ; BSR set to: 0
 11389  0069E4  5165               	movf	calcCRC@len& (0+255),w,b
 11390  0069E6  5D66               	subwf	calcCRC@j& (0+255),w,b
 11391  0069E8  E3ED               	bnc	l18288
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;main.c: 2946: }
 11395                           ;main.c: 2948: return crc;
 11396  0069EA  5167               	movf	calcCRC@crc& (0+255),w,b
 11397                           
 11398                           ; BSR set to: 0
 11399  0069EC  0012               	return	
 11400  0069EE                     __end_of_calcCRC:
 11401                           	opt stack 0
 11402                           tblptru	equ	0xFF8
 11403                           tblptrh	equ	0xFF7
 11404                           tblptrl	equ	0xFF6
 11405                           tablat	equ	0xFF5
 11406                           prodh	equ	0xFF4
 11407                           prodl	equ	0xFF3
 11408                           intcon	equ	0xFF2
 11409                           indf0	equ	0xFEF
 11410                           postinc0	equ	0xFEE
 11411                           fsr0h	equ	0xFEA
 11412                           fsr0l	equ	0xFE9
 11413                           wreg	equ	0xFE8
 11414                           indf1	equ	0xFE7
 11415                           postinc1	equ	0xFE6
 11416                           postdec1	equ	0xFE5
 11417                           fsr1h	equ	0xFE2
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           plusw2	equ	0xFDB
 11423                           fsr2h	equ	0xFDA
 11424                           fsr2l	equ	0xFD9
 11425                           status	equ	0xFD8
 11426                           
 11427 ;; *************** function _receiveSendEventCANAL *****************
 11428 ;; Defined at:
 11429 ;;		line 2293 in file "main.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  timestamp       4   25[BANK0 ] unsigned long 
 11434 ;;  crc             1   34[BANK0 ] unsigned char 
 11435 ;;  data            8   16[BANK0 ] unsigned char [8]
 11436 ;;  id              4   29[BANK0 ] unsigned long 
 11437 ;;  dlc             1   33[BANK0 ] unsigned char 
 11438 ;;  i               1   24[BANK0 ] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      enum E15660
 11441 ;; Registers used:
 11442 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11443 ;; Tracked objects:
 11444 ;;		On entry : F/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11448 ;;      Params:         0       0       0       0       0       0       0
 11449 ;;      Locals:         0      19       0       0       0       0       0
 11450 ;;      Temps:          0       4       0       0       0       0       0
 11451 ;;      Totals:         0      23       0       0       0       0       0
 11452 ;;Total ram usage:       23 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    6
 11455 ;; This function calls:
 11456 ;;		_WriteUSART
 11457 ;;		_sendEscapedUartData
 11458 ;;		_crc8
 11459 ;;		_ReadTimer3
 11460 ;;		_getCANFrame
 11461 ;;		___wmul
 11462 ;; This function is called by:
 11463 ;;		_doModeVscp
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           	psect	text17
 11468  003E26                     __ptext17:
 11469                           	opt stack 0
 11470  003E26                     _receiveSendEventCANAL:
 11471                           	opt stack 23
 11472                           
 11473                           ; BSR set to: 0
 11474                           ;main.c: 2294: uint8_t i;
 11475                           ;main.c: 2295: uint32_t id;
 11476                           ;main.c: 2296: uint8_t dlc;
 11477                           ;main.c: 2297: uint8_t data[8];
 11478                           ;main.c: 2299: if ( getCANFrame( &id, &dlc, &data ) ) {
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;incstack = 0
 11482                           ;incstack = 0
 11483  003E26  0E00               	movlw	high receiveSendEventCANAL@dlc
 11484  003E28  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
 11485  003E2A  0E81               	movlw	low receiveSendEventCANAL@dlc
 11486  003E2C  6F68               	movwf	?_getCANFrame& (0+255),b
 11487  003E2E  0E00               	movlw	high receiveSendEventCANAL@data
 11488  003E30  6F6B               	movwf	(?_getCANFrame+3)& (0+255),b
 11489  003E32  0E70               	movlw	low receiveSendEventCANAL@data
 11490  003E34  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
 11491  003E36  0E7D               	movlw	receiveSendEventCANAL@id& (0+255)
 11492  003E38  EC61  F02C         	call	_getCANFrame
 11493  003E3C  0900               	iorlw	0
 11494  003E3E  E101 D0E4          	bz	l1092
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;main.c: 2301: uint8_t crc = 0;
 11498  003E42  6B82               	clrf	receiveSendEventCANAL@crc& (0+255),b
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;main.c: 2304: cntRxFrames++;
 11502  003E44  2BD2               	incf	_cntRxFrames& (0+255),f,b
 11503  003E46  0E00               	movlw	0
 11504  003E48  23D3               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11505  003E4A  23D4               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11506  003E4C  23D5               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11507                           
 11508                           ;main.c: 2305: cntRxBytes += dlc;
 11509  003E4E  5181               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11510  003E50  27CE               	addwf	_cntRxBytes& (0+255),f,b
 11511  003E52  0E00               	movlw	0
 11512  003E54  23CF               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11513  003E56  23D0               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11514  003E58  23D1               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11515  003E5A                     l1068:
 11516                           
 11517                           ; BSR set to: 0
 11518  003E5A  A2AC               	btfss	4012,1,c	;volatile
 11519  003E5C  D7FE               	goto	l1068
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;main.c: 2309: WriteUSART(0x10);
 11523  003E5E  0E10               	movlw	16
 11524  003E60  EC8B  F035         	call	_WriteUSART
 11525  003E64                     l1071:
 11526  003E64  A2AC               	btfss	4012,1,c	;volatile
 11527  003E66  D7FE               	goto	l1071
 11528                           
 11529                           ;main.c: 2311: WriteUSART(0x02);
 11530  003E68  0E02               	movlw	2
 11531  003E6A  EC8B  F035         	call	_WriteUSART
 11532  003E6E                     l1074:
 11533  003E6E  A2AC               	btfss	4012,1,c	;volatile
 11534  003E70  D7FE               	goto	l1074
 11535                           
 11536                           ;main.c: 2315: if ( bTimestamp ) {
 11537  003E72  0100               	movlb	0	; () banked
 11538  003E74  51F0               	movf	_bTimestamp& (0+255),w,b
 11539  003E76  E00D               	bz	l18232
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;main.c: 2316: WriteUSART( 11 );
 11543  003E78  0E0B               	movlw	11
 11544  003E7A  EC8B  F035         	call	_WriteUSART
 11545                           
 11546                           ;main.c: 2317: crc8(&crc, 11 );
 11547  003E7E  0100               	movlb	0	; () banked
 11548  003E80  0E00               	movlw	high receiveSendEventCANAL@crc
 11549  003E82  6F61               	movwf	(?_crc8+1)& (0+255),b
 11550  003E84  0E82               	movlw	low receiveSendEventCANAL@crc
 11551  003E86  6F60               	movwf	?_crc8& (0+255),b
 11552  003E88  0E0B               	movlw	11
 11553  003E8A  6F62               	movwf	(?_crc8+2)& (0+255),b
 11554  003E8C  EC71  F034         	call	_crc8	;wreg free
 11555                           
 11556                           ;main.c: 2318: }
 11557  003E90  D00C               	goto	l1079
 11558  003E92                     l18232:
 11559                           
 11560                           ; BSR set to: 0
 11561                           ;main.c: 2319: else {
 11562                           ;main.c: 2320: WriteUSART(2);
 11563  003E92  0E02               	movlw	2
 11564  003E94  EC8B  F035         	call	_WriteUSART
 11565                           
 11566                           ;main.c: 2321: crc8(&crc, 2);
 11567  003E98  0100               	movlb	0	; () banked
 11568  003E9A  0E00               	movlw	high receiveSendEventCANAL@crc
 11569  003E9C  6F61               	movwf	(?_crc8+1)& (0+255),b
 11570  003E9E  0E82               	movlw	low receiveSendEventCANAL@crc
 11571  003EA0  6F60               	movwf	?_crc8& (0+255),b
 11572  003EA2  0E02               	movlw	2
 11573  003EA4  6F62               	movwf	(?_crc8+2)& (0+255),b
 11574  003EA6  EC71  F034         	call	_crc8	;wreg free
 11575  003EAA                     l1079:
 11576  003EAA  A2AC               	btfss	4012,1,c	;volatile
 11577  003EAC  D7FE               	goto	l1079
 11578                           
 11579                           ;main.c: 2326: WriteUSART(0);
 11580  003EAE  0E00               	movlw	0
 11581  003EB0  EC8B  F035         	call	_WriteUSART
 11582                           
 11583                           ;main.c: 2327: crc8(&crc, 0);
 11584  003EB4  0100               	movlb	0	; () banked
 11585  003EB6  0E00               	movlw	high receiveSendEventCANAL@crc
 11586  003EB8  6F61               	movwf	(?_crc8+1)& (0+255),b
 11587  003EBA  0E82               	movlw	low receiveSendEventCANAL@crc
 11588  003EBC  6F60               	movwf	?_crc8& (0+255),b
 11589  003EBE  0E00               	movlw	0
 11590  003EC0  6B62               	clrf	(?_crc8+2)& (0+255),b
 11591  003EC2  EC71  F034         	call	_crc8	;wreg free
 11592                           
 11593                           ; BSR set to: 3
 11594                           ;main.c: 2330: sendEscapedUartData(sequencyno, &crc);
 11595  003EC6  0100               	movlb	0	; () banked
 11596  003EC8  0E00               	movlw	high receiveSendEventCANAL@crc
 11597  003ECA  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11598  003ECC  0E82               	movlw	low receiveSendEventCANAL@crc
 11599  003ECE  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11600  003ED0  51F3               	movf	_sequencyno& (0+255),w,b
 11601  003ED2  ECF9  F031         	call	_sendEscapedUartData
 11602                           
 11603                           ;main.c: 2331: sequencyno++;
 11604  003ED6  0100               	movlb	0	; () banked
 11605  003ED8  2BF3               	incf	_sequencyno& (0+255),f,b
 11606                           
 11607                           ; BSR set to: 0
 11608                           ;main.c: 2334: sendEscapedUartData(0, &crc);
 11609  003EDA  0E00               	movlw	high receiveSendEventCANAL@crc
 11610  003EDC  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11611  003EDE  0E82               	movlw	low receiveSendEventCANAL@crc
 11612  003EE0  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11613  003EE2  0E00               	movlw	0
 11614  003EE4  ECF9  F031         	call	_sendEscapedUartData
 11615                           
 11616                           ;main.c: 2335: sendEscapedUartData(5 + dlc, &crc);
 11617  003EE8  D891               	call	PL138	;call to abstracted procedure
 11618  003EEA  0F05               	addlw	5
 11619  003EEC  ECF9  F031         	call	_sendEscapedUartData
 11620                           
 11621                           ;main.c: 2341: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 11622  003EF0  0100               	movlb	0	; () banked
 11623  003EF2  0E00               	movlw	high receiveSendEventCANAL@crc
 11624  003EF4  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11625  003EF6  0E82               	movlw	low receiveSendEventCANAL@crc
 11626  003EF8  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11627  003EFA  5180               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 11628  003EFC  ECF9  F031         	call	_sendEscapedUartData
 11629                           
 11630                           ;main.c: 2342: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 11631  003F00  0100               	movlb	0	; () banked
 11632  003F02  0E00               	movlw	high receiveSendEventCANAL@crc
 11633  003F04  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11634  003F06  0E82               	movlw	low receiveSendEventCANAL@crc
 11635  003F08  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11636  003F0A  517F               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 11637  003F0C  ECF9  F031         	call	_sendEscapedUartData
 11638                           
 11639                           ;main.c: 2343: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 11640  003F10  0100               	movlb	0	; () banked
 11641  003F12  0E00               	movlw	high receiveSendEventCANAL@crc
 11642  003F14  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11643  003F16  0E82               	movlw	low receiveSendEventCANAL@crc
 11644  003F18  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11645  003F1A  517E               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 11646  003F1C  ECF9  F031         	call	_sendEscapedUartData
 11647                           
 11648                           ;main.c: 2344: sendEscapedUartData((id & 0xff), &crc);
 11649  003F20  0100               	movlb	0	; () banked
 11650  003F22  0E00               	movlw	high receiveSendEventCANAL@crc
 11651  003F24  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11652  003F26  0E82               	movlw	low receiveSendEventCANAL@crc
 11653  003F28  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11654  003F2A  517D               	movf	receiveSendEventCANAL@id& (0+255),w,b
 11655  003F2C  ECF9  F031         	call	_sendEscapedUartData
 11656                           
 11657                           ;main.c: 2347: if ( bTimestamp ) {
 11658  003F30  0100               	movlb	0	; () banked
 11659  003F32  51F0               	movf	_bTimestamp& (0+255),w,b
 11660  003F34  E045               	bz	l18268
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;main.c: 2348: uint32_t timestamp = (timer<<16) | ReadTimer3()*10;
 11664  003F36  EC95  F035         	call	_ReadTimer3	;wreg free
 11665  003F3A  C01F  F023         	movff	?_ReadTimer3,?___wmul
 11666  003F3E  C020  F024         	movff	?_ReadTimer3+1,?___wmul+1
 11667  003F42  6A26               	clrf	?___wmul+3,c
 11668  003F44  0E0A               	movlw	10
 11669  003F46  6E25               	movwf	?___wmul+2,c
 11670  003F48  EC53  F034         	call	___wmul	;wreg free
 11671  003F4C  C0E2  F06C         	movff	_timer,??_receiveSendEventCANAL	;volatile
 11672  003F50  C0E3  F06D         	movff	_timer+1,??_receiveSendEventCANAL+1	;volatile
 11673  003F54  C0E4  F06E         	movff	_timer+2,??_receiveSendEventCANAL+2	;volatile
 11674  003F58  C0E5  F06F         	movff	_timer+3,??_receiveSendEventCANAL+3	;volatile
 11675  003F5C  C06D  F06F         	movff	??_receiveSendEventCANAL+1,??_receiveSendEventCANAL+3
 11676  003F60  C06C  F06E         	movff	??_receiveSendEventCANAL,??_receiveSendEventCANAL+2
 11677  003F64  6B6D               	clrf	(??_receiveSendEventCANAL+1)& (0+255),b
 11678  003F66  6B6C               	clrf	??_receiveSendEventCANAL& (0+255),b
 11679  003F68  5123               	movf	?___wmul& (0+255),w,b
 11680  003F6A  116C               	iorwf	??_receiveSendEventCANAL& (0+255),w,b
 11681  003F6C  6F79               	movwf	receiveSendEventCANAL@timestamp& (0+255),b
 11682  003F6E  5124               	movf	(?___wmul+1)& (0+255),w,b
 11683  003F70  116D               	iorwf	(??_receiveSendEventCANAL+1)& (0+255),w,b
 11684  003F72  6F7A               	movwf	(receiveSendEventCANAL@timestamp+1)& (0+255),b
 11685  003F74  0E00               	movlw	0
 11686  003F76  116E               	iorwf	(??_receiveSendEventCANAL+2)& (0+255),w,b
 11687  003F78  6F7B               	movwf	(receiveSendEventCANAL@timestamp+2)& (0+255),b
 11688  003F7A  0E00               	movlw	0
 11689  003F7C  116F               	iorwf	(??_receiveSendEventCANAL+3)& (0+255),w,b
 11690  003F7E  6F7C               	movwf	(receiveSendEventCANAL@timestamp+3)& (0+255),b
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;main.c: 2349: sendEscapedUartData( ((timestamp >> 24) & 0xff), &crc);
 11694  003F80  0E00               	movlw	high receiveSendEventCANAL@crc
 11695  003F82  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11696  003F84  0E82               	movlw	low receiveSendEventCANAL@crc
 11697  003F86  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11698  003F88  0100               	movlb	0	; () banked
 11699  003F8A  517C               	movf	(receiveSendEventCANAL@timestamp+3)& (0+255),w,b
 11700  003F8C  ECF9  F031         	call	_sendEscapedUartData
 11701                           
 11702                           ;main.c: 2350: sendEscapedUartData(((timestamp >> 16) & 0xff), &crc);
 11703  003F90  0100               	movlb	0	; () banked
 11704  003F92  0E00               	movlw	high receiveSendEventCANAL@crc
 11705  003F94  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11706  003F96  0E82               	movlw	low receiveSendEventCANAL@crc
 11707  003F98  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11708  003F9A  517B               	movf	(receiveSendEventCANAL@timestamp+2)& (0+255),w,b
 11709  003F9C  ECF9  F031         	call	_sendEscapedUartData
 11710                           
 11711                           ;main.c: 2351: sendEscapedUartData(((timestamp >> 8) & 0xff), &crc);
 11712  003FA0  0100               	movlb	0	; () banked
 11713  003FA2  0E00               	movlw	high receiveSendEventCANAL@crc
 11714  003FA4  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11715  003FA6  0E82               	movlw	low receiveSendEventCANAL@crc
 11716  003FA8  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11717  003FAA  517A               	movf	(receiveSendEventCANAL@timestamp+1)& (0+255),w,b
 11718  003FAC  ECF9  F031         	call	_sendEscapedUartData
 11719                           
 11720                           ;main.c: 2352: sendEscapedUartData((timestamp & 0xff), &crc);
 11721  003FB0  0100               	movlb	0	; () banked
 11722  003FB2  0E00               	movlw	high receiveSendEventCANAL@crc
 11723  003FB4  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11724  003FB6  0E82               	movlw	low receiveSendEventCANAL@crc
 11725  003FB8  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11726  003FBA  5179               	movf	receiveSendEventCANAL@timestamp& (0+255),w,b
 11727  003FBC  ECF9  F031         	call	_sendEscapedUartData
 11728  003FC0                     l18268:
 11729                           
 11730                           ;main.c: 2353: }
 11731                           ;main.c: 2356: sendEscapedUartData(dlc, &crc);
 11732  003FC0  D825               	call	PL138	;call to abstracted procedure
 11733  003FC2  ECF9  F031         	call	_sendEscapedUartData
 11734                           
 11735                           ;main.c: 2359: for (i = 0; i < dlc; i++) {
 11736  003FC6  0100               	movlb	0	; () banked
 11737  003FC8  6B78               	clrf	receiveSendEventCANAL@i& (0+255),b
 11738  003FCA  D00D               	goto	l18276
 11739  003FCC                     l18272:
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;main.c: 2360: sendEscapedUartData( data[ i ], &crc );
 11743  003FCC  0E00               	movlw	high receiveSendEventCANAL@crc
 11744  003FCE  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11745  003FD0  0E82               	movlw	low receiveSendEventCANAL@crc
 11746  003FD2  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11747  003FD4  5178               	movf	receiveSendEventCANAL@i& (0+255),w,b
 11748  003FD6  0F70               	addlw	low receiveSendEventCANAL@data
 11749  003FD8  6ED9               	movwf	fsr2l,c
 11750  003FDA  6ADA               	clrf	fsr2h,c
 11751  003FDC  50DF               	movf	indf2,w,c
 11752  003FDE  ECF9  F031         	call	_sendEscapedUartData
 11753  003FE2  0100               	movlb	0	; () banked
 11754  003FE4  2B78               	incf	receiveSendEventCANAL@i& (0+255),f,b
 11755  003FE6                     l18276:
 11756                           
 11757                           ; BSR set to: 0
 11758  003FE6  5181               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11759  003FE8  5D78               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 11760  003FEA  E3F0               	bnc	l18272
 11761                           
 11762                           ; BSR set to: 0
 11763                           ;main.c: 2361: }
 11764                           ;main.c: 2366: sendEscapedUartData(crc, (0));
 11765  003FEC  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11766  003FEE  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 11767  003FF0  5182               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 11768  003FF2  ECF9  F031         	call	_sendEscapedUartData
 11769  003FF6                     l1086:
 11770  003FF6  A2AC               	btfss	4012,1,c	;volatile
 11771  003FF8  D7FE               	goto	l1086
 11772                           
 11773                           ;main.c: 2370: WriteUSART(0x10);
 11774  003FFA  0E10               	movlw	16
 11775  003FFC  EC8B  F035         	call	_WriteUSART
 11776  004000                     l1089:
 11777  004000  A2AC               	btfss	4012,1,c	;volatile
 11778  004002  D7FE               	goto	l1089
 11779                           
 11780                           ;main.c: 2372: WriteUSART(0x03);
 11781  004004  0E03               	movlw	3
 11782  004006  EC8B  F035         	call	_WriteUSART
 11783  00400A                     l1092:
 11784  00400A  0012               	return	
 11785  00400C                     __end_of_receiveSendEventCANAL:
 11786                           	opt stack 0
 11787  00400C                     PL138:
 11788                           	opt stack 23
 11789  00400C  0100               	movlb	0	; () banked
 11790  00400E  0E00               	movlw	high receiveSendEventCANAL@crc
 11791  004010  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11792  004012  0E82               	movlw	low receiveSendEventCANAL@crc
 11793  004014  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11794  004016  5181               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 11795  004018  0012               	return	
 11796  00401A                     __end_ofPL138:
 11797                           	opt stack 0
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           indf0	equ	0xFEF
 11806                           postinc0	equ	0xFEE
 11807                           fsr0h	equ	0xFEA
 11808                           fsr0l	equ	0xFE9
 11809                           wreg	equ	0xFE8
 11810                           indf1	equ	0xFE7
 11811                           postinc1	equ	0xFE6
 11812                           postdec1	equ	0xFE5
 11813                           fsr1h	equ	0xFE2
 11814                           fsr1l	equ	0xFE1
 11815                           indf2	equ	0xFDF
 11816                           postinc2	equ	0xFDE
 11817                           postdec2	equ	0xFDD
 11818                           plusw2	equ	0xFDB
 11819                           fsr2h	equ	0xFDA
 11820                           fsr2l	equ	0xFD9
 11821                           status	equ	0xFD8
 11822                           
 11823 ;; *************** function _receiveSendMultiEventCANAL *****************
 11824 ;; Defined at:
 11825 ;;		line 2385 in file "main.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;		None
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;  timestamp       4   25[BANK0 ] unsigned long 
 11830 ;;  crc             1   35[BANK0 ] unsigned char 
 11831 ;;  data            8   16[BANK0 ] unsigned char [8]
 11832 ;;  id              4   30[BANK0 ] unsigned long 
 11833 ;;  pos             1   36[BANK0 ] unsigned char 
 11834 ;;  dlc             1   34[BANK0 ] unsigned char 
 11835 ;;  i               1   29[BANK0 ] unsigned char 
 11836 ;;  msgcount        1   24[BANK0 ] unsigned char 
 11837 ;; Return value:  Size  Location     Type
 11838 ;;                  1    wreg      enum E15660
 11839 ;; Registers used:
 11840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11841 ;; Tracked objects:
 11842 ;;		On entry : F/0
 11843 ;;		On exit  : 0/0
 11844 ;;		Unchanged: 0/0
 11845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11846 ;;      Params:         0       0       0       0       0       0       0
 11847 ;;      Locals:         0      21       0       0       0       0       0
 11848 ;;      Temps:          0       4       0       0       0       0       0
 11849 ;;      Totals:         0      25       0       0       0       0       0
 11850 ;;Total ram usage:       25 bytes
 11851 ;; Hardware stack levels used:    1
 11852 ;; Hardware stack levels required when called:    6
 11853 ;; This function calls:
 11854 ;;		_WriteUSART
 11855 ;;		_sendEscapedUartData
 11856 ;;		_crc8
 11857 ;;		_ReadTimer3
 11858 ;;		_getCANFrame
 11859 ;;		___wmul
 11860 ;; This function is called by:
 11861 ;;		_doModeVscp
 11862 ;; This function uses a non-reentrant model
 11863 ;;
 11864                           
 11865                           	psect	text18
 11866  003A06                     __ptext18:
 11867                           	opt stack 0
 11868  003A06                     _receiveSendMultiEventCANAL:
 11869                           	opt stack 23
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;main.c: 2386: uint8_t i;
 11873                           ;main.c: 2387: uint8_t pos=0;
 11874                           
 11875                           ;incstack = 0
 11876                           ;incstack = 0
 11877  003A06  6B84               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 11878                           
 11879                           ;main.c: 2388: uint8_t msgcount=0;
 11880  003A08  6B78               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;main.c: 2389: uint32_t id;
 11884                           ;main.c: 2390: uint8_t dlc;
 11885                           ;main.c: 2391: uint8_t data[8];
 11886                           ;main.c: 2393: if ( getCANFrame( &id, &dlc, &data ) ) {
 11887  003A0A  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 11888  003A0C  D8FD               	call	PL100	;call to abstracted procedure
 11889  003A0E  EC61  F02C         	call	_getCANFrame
 11890  003A12  0900               	iorlw	0
 11891  003A14  E101 D0E7          	bz	l1127
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;main.c: 2395: uint8_t crc = 0;
 11895  003A18  6B83               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 2398: cntRxFrames++;
 11899  003A1A  2BD2               	incf	_cntRxFrames& (0+255),f,b
 11900  003A1C  0E00               	movlw	0
 11901  003A1E  23D3               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 11902  003A20  23D4               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 11903  003A22  23D5               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 11904                           
 11905                           ;main.c: 2399: cntRxBytes += dlc;
 11906  003A24  5182               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 11907  003A26  27CE               	addwf	_cntRxBytes& (0+255),f,b
 11908  003A28  0E00               	movlw	0
 11909  003A2A  23CF               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 11910  003A2C  23D0               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 11911  003A2E  23D1               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 11912  003A30                     l1096:
 11913                           
 11914                           ; BSR set to: 0
 11915  003A30  A2AC               	btfss	4012,1,c	;volatile
 11916  003A32  D7FE               	goto	l1096
 11917                           
 11918                           ; BSR set to: 0
 11919                           ;main.c: 2403: WriteUSART(0x10);
 11920  003A34  0E10               	movlw	16
 11921  003A36  EC8B  F035         	call	_WriteUSART
 11922  003A3A                     l1099:
 11923  003A3A  A2AC               	btfss	4012,1,c	;volatile
 11924  003A3C  D7FE               	goto	l1099
 11925                           
 11926                           ;main.c: 2405: WriteUSART(0x02);
 11927  003A3E  0E02               	movlw	2
 11928  003A40  EC8B  F035         	call	_WriteUSART
 11929  003A44                     l1102:
 11930  003A44  A2AC               	btfss	4012,1,c	;volatile
 11931  003A46  D7FE               	goto	l1102
 11932                           
 11933                           ;main.c: 2409: if ( bTimestamp ) {
 11934  003A48  0100               	movlb	0	; () banked
 11935  003A4A  51F0               	movf	_bTimestamp& (0+255),w,b
 11936  003A4C  E00D               	bz	l18128
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;main.c: 2410: WriteUSART( 12 );
 11940  003A4E  0E0C               	movlw	12
 11941  003A50  EC8B  F035         	call	_WriteUSART
 11942                           
 11943                           ;main.c: 2411: crc8(&crc, 12 );
 11944  003A54  0100               	movlb	0	; () banked
 11945  003A56  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11946  003A58  6F61               	movwf	(?_crc8+1)& (0+255),b
 11947  003A5A  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 11948  003A5C  6F60               	movwf	?_crc8& (0+255),b
 11949  003A5E  0E0C               	movlw	12
 11950  003A60  6F62               	movwf	(?_crc8+2)& (0+255),b
 11951  003A62  EC71  F034         	call	_crc8	;wreg free
 11952                           
 11953                           ;main.c: 2412: }
 11954  003A66  D00C               	goto	l1107
 11955  003A68                     l18128:
 11956                           
 11957                           ; BSR set to: 0
 11958                           ;main.c: 2413: else {
 11959                           ;main.c: 2414: WriteUSART( 6 );
 11960  003A68  0E06               	movlw	6
 11961  003A6A  EC8B  F035         	call	_WriteUSART
 11962                           
 11963                           ;main.c: 2415: crc8(&crc, 6 );
 11964  003A6E  0100               	movlb	0	; () banked
 11965  003A70  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11966  003A72  6F61               	movwf	(?_crc8+1)& (0+255),b
 11967  003A74  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 11968  003A76  6F60               	movwf	?_crc8& (0+255),b
 11969  003A78  0E06               	movlw	6
 11970  003A7A  6F62               	movwf	(?_crc8+2)& (0+255),b
 11971  003A7C  EC71  F034         	call	_crc8	;wreg free
 11972  003A80                     l1107:
 11973  003A80  A2AC               	btfss	4012,1,c	;volatile
 11974  003A82  D7FE               	goto	l1107
 11975                           
 11976                           ;main.c: 2420: WriteUSART(0);
 11977  003A84  0E00               	movlw	0
 11978  003A86  EC8B  F035         	call	_WriteUSART
 11979                           
 11980                           ;main.c: 2421: crc8(&crc, 0);
 11981  003A8A  0100               	movlb	0	; () banked
 11982  003A8C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11983  003A8E  6F61               	movwf	(?_crc8+1)& (0+255),b
 11984  003A90  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 11985  003A92  6F60               	movwf	?_crc8& (0+255),b
 11986  003A94  0E00               	movlw	0
 11987  003A96  6B62               	clrf	(?_crc8+2)& (0+255),b
 11988  003A98  EC71  F034         	call	_crc8	;wreg free
 11989                           
 11990                           ; BSR set to: 3
 11991                           ;main.c: 2424: sendEscapedUartData(sequencyno, &crc);
 11992  003A9C  0100               	movlb	0	; () banked
 11993  003A9E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 11994  003AA0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 11995  003AA2  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 11996  003AA4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 11997  003AA6  51F3               	movf	_sequencyno& (0+255),w,b
 11998  003AA8  ECF9  F031         	call	_sendEscapedUartData
 11999                           
 12000                           ;main.c: 2425: sequencyno++;
 12001  003AAC  0100               	movlb	0	; () banked
 12002  003AAE  2BF3               	incf	_sequencyno& (0+255),f,b
 12003  003AB0                     l18140:
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;main.c: 2435: wrkbuf[ pos ] = (id >> 24) & 0xff;
 12007  003AB0  D8A3               	call	PL68	;call to abstracted procedure
 12008  003AB2  C081  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;main.c: 2436: pos++;
 12012                           
 12013                           ; BSR set to: 0
 12014                           ;main.c: 2437: wrkbuf[ pos ] = (id >> 16) & 0xff;
 12015  003AB6  D898               	call	PL18	;call to abstracted procedure
 12016  003AB8  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 12017                           
 12018                           ; BSR set to: 0
 12019                           ;main.c: 2438: pos++;
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 2439: wrkbuf[ pos ] = (id >> 8) & 0xff;
 12023  003ABC  D895               	call	PL18	;call to abstracted procedure
 12024  003ABE  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 12025                           
 12026                           ; BSR set to: 0
 12027                           ;main.c: 2440: pos++;
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;main.c: 2441: wrkbuf[ pos ] = id & 0xff;
 12031  003AC2  D892               	call	PL18	;call to abstracted procedure
 12032  003AC4  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 2442: pos++;
 12036  003AC8  2B84               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12037                           
 12038                           ; BSR set to: 0
 12039                           ;main.c: 2444: if ( bTimestamp ) {
 12040  003ACA  51F0               	movf	_bTimestamp& (0+255),w,b
 12041  003ACC  E032               	bz	l18176
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;main.c: 2445: uint32_t timestamp = (timer<<16) | ReadTimer3()*10;
 12045  003ACE  EC95  F035         	call	_ReadTimer3	;wreg free
 12046  003AD2  C01F  F023         	movff	?_ReadTimer3,?___wmul
 12047  003AD6  C020  F024         	movff	?_ReadTimer3+1,?___wmul+1
 12048  003ADA  6A26               	clrf	?___wmul+3,c
 12049  003ADC  0E0A               	movlw	10
 12050  003ADE  6E25               	movwf	?___wmul+2,c
 12051  003AE0  EC53  F034         	call	___wmul	;wreg free
 12052  003AE4  C0E2  F06C         	movff	_timer,??_receiveSendMultiEventCANAL	;volatile
 12053  003AE8  C0E3  F06D         	movff	_timer+1,??_receiveSendMultiEventCANAL+1	;volatile
 12054  003AEC  C0E4  F06E         	movff	_timer+2,??_receiveSendMultiEventCANAL+2	;volatile
 12055  003AF0  C0E5  F06F         	movff	_timer+3,??_receiveSendMultiEventCANAL+3	;volatile
 12056  003AF4  C06D  F06F         	movff	??_receiveSendMultiEventCANAL+1,??_receiveSendMultiEventCANAL+3
 12057  003AF8  C06C  F06E         	movff	??_receiveSendMultiEventCANAL,??_receiveSendMultiEventCANAL+2
 12058  003AFC  6B6D               	clrf	(??_receiveSendMultiEventCANAL+1)& (0+255),b
 12059  003AFE  6B6C               	clrf	??_receiveSendMultiEventCANAL& (0+255),b
 12060  003B00  5123               	movf	?___wmul& (0+255),w,b
 12061  003B02  116C               	iorwf	??_receiveSendMultiEventCANAL& (0+255),w,b
 12062  003B04  6F79               	movwf	receiveSendMultiEventCANAL@timestamp& (0+255),b
 12063  003B06  5124               	movf	(?___wmul+1)& (0+255),w,b
 12064  003B08  116D               	iorwf	(??_receiveSendMultiEventCANAL+1)& (0+255),w,b
 12065  003B0A  6F7A               	movwf	(receiveSendMultiEventCANAL@timestamp+1)& (0+255),b
 12066  003B0C  0E00               	movlw	0
 12067  003B0E  116E               	iorwf	(??_receiveSendMultiEventCANAL+2)& (0+255),w,b
 12068  003B10  6F7B               	movwf	(receiveSendMultiEventCANAL@timestamp+2)& (0+255),b
 12069  003B12  0E00               	movlw	0
 12070  003B14  116F               	iorwf	(??_receiveSendMultiEventCANAL+3)& (0+255),w,b
 12071  003B16  6F7C               	movwf	(receiveSendMultiEventCANAL@timestamp+3)& (0+255),b
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;main.c: 2446: wrkbuf[ pos ] = (timestamp >> 24) & 0xff;
 12075  003B18  D86F               	call	PL68	;call to abstracted procedure
 12076  003B1A  C07C  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+3,indf2
 12077                           
 12078                           ; BSR set to: 0
 12079                           ;main.c: 2447: pos++;
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;main.c: 2448: wrkbuf[ pos ] = (timestamp >> 16) & 0xff;
 12083  003B1E  D864               	call	PL18	;call to abstracted procedure
 12084  003B20  C07B  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+2,indf2
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 2449: pos++;
 12088                           
 12089                           ; BSR set to: 0
 12090                           ;main.c: 2450: wrkbuf[ pos ] = (timestamp >> 8) & 0xff;
 12091  003B24  D861               	call	PL18	;call to abstracted procedure
 12092  003B26  C07A  FFDF         	movff	receiveSendMultiEventCANAL@timestamp+1,indf2
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;main.c: 2451: pos++;
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;main.c: 2452: wrkbuf[ pos ] = timestamp & 0xff;
 12099  003B2A  D85E               	call	PL18	;call to abstracted procedure
 12100  003B2C  C079  FFDF         	movff	receiveSendMultiEventCANAL@timestamp,indf2
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 2453: pos++;
 12104  003B30  2B84               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12105  003B32                     l18176:
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;main.c: 2454: }
 12109                           ;main.c: 2457: wrkbuf[ pos ] = dlc;
 12110  003B32  D862               	call	PL68	;call to abstracted procedure
 12111  003B34  C082  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 12112                           
 12113                           ; BSR set to: 0
 12114                           ;main.c: 2458: pos++;
 12115  003B38  2B84               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12116                           
 12117                           ; BSR set to: 0
 12118                           ;main.c: 2461: for (i = 0; i < dlc; i++) {
 12119  003B3A  6B7D               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 12120  003B3C  D00F               	goto	l18188
 12121  003B3E                     l18182:
 12122                           
 12123                           ; BSR set to: 0
 12124                           ;main.c: 2462: wrkbuf[ pos ] = data[ i ];
 12125  003B3E  517D               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12126  003B40  0F70               	addlw	low receiveSendMultiEventCANAL@data
 12127  003B42  6ED9               	movwf	fsr2l,c
 12128  003B44  6ADA               	clrf	fsr2h,c
 12129  003B46  0E55               	movlw	low _wrkbuf
 12130  003B48  0100               	movlb	0	; () banked
 12131  003B4A  2584               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12132  003B4C  6EE1               	movwf	fsr1l,c
 12133  003B4E  6AE2               	clrf	fsr1h,c
 12134  003B50  0E01               	movlw	high _wrkbuf
 12135  003B52  22E2               	addwfc	fsr1h,f,c
 12136  003B54  CFDF FFE7          	movff	indf2,indf1
 12137                           
 12138                           ; BSR set to: 1
 12139                           ;main.c: 2463: pos++;
 12140  003B58  2B84               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12141                           
 12142                           ; BSR set to: 0
 12143  003B5A  2B7D               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 12144  003B5C                     l18188:
 12145                           
 12146                           ; BSR set to: 0
 12147  003B5C  5182               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 12148  003B5E  5D7D               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12149  003B60  E3EE               	bnc	l18182
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;main.c: 2464: }
 12153                           ;main.c: 2466: msgcount++;
 12154  003B62  2B78               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;main.c: 2468: } while ( ( msgcount < caps.maxCanalFrames ) &&
 12158                           ;main.c: 2469: ( msgcount < 5 ) &&
 12159                           ;main.c: 2470: getCANFrame( &id, &dlc, &data ) );
 12160  003B64  51FD               	movf	(_caps+1)& (0+255),w,b
 12161  003B66  6178               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 12162  003B68  D009               	goto	l18198
 12163                           
 12164                           ; BSR set to: 0
 12165  003B6A  0E05               	movlw	5
 12166  003B6C  6178               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 12167  003B6E  D006               	goto	l18198
 12168                           
 12169                           ; BSR set to: 0
 12170  003B70  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 12171  003B72  D84A               	call	PL100	;call to abstracted procedure
 12172  003B74  EC61  F02C         	call	_getCANFrame
 12173  003B78  0900               	iorlw	0
 12174  003B7A  E19A               	bnz	l18140
 12175  003B7C                     l18198:
 12176                           
 12177                           ; BSR set to: 0
 12178                           ;main.c: 2475: sendEscapedUartData(0, &crc);
 12179  003B7C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12180  003B7E  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12181  003B80  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 12182  003B82  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 12183  003B84  0E00               	movlw	0
 12184  003B86  ECF9  F031         	call	_sendEscapedUartData
 12185                           
 12186                           ;main.c: 2476: sendEscapedUartData(pos, &crc);
 12187  003B8A  0100               	movlb	0	; () banked
 12188  003B8C  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12189  003B8E  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12190  003B90  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 12191  003B92  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 12192  003B94  5184               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12193  003B96  ECF9  F031         	call	_sendEscapedUartData
 12194                           
 12195                           ;main.c: 2479: for (i = 0; i < pos; i++) {
 12196  003B9A  0100               	movlb	0	; () banked
 12197  003B9C  6B7D               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 12198  003B9E  D011               	goto	l18206
 12199  003BA0                     l18202:
 12200                           
 12201                           ; BSR set to: 0
 12202                           ;main.c: 2480: sendEscapedUartData( wrkbuf[ i ], &crc);
 12203  003BA0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 12204  003BA2  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 12205  003BA4  0E83               	movlw	low receiveSendMultiEventCANAL@crc
 12206  003BA6  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 12207  003BA8  0E55               	movlw	low _wrkbuf
 12208  003BAA  0100               	movlb	0	; () banked
 12209  003BAC  257D               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12210  003BAE  6ED9               	movwf	fsr2l,c
 12211  003BB0  6ADA               	clrf	fsr2h,c
 12212  003BB2  0101               	movlb	1	; () banked
 12213  003BB4  0E01               	movlw	high _wrkbuf
 12214  003BB6  22DA               	addwfc	fsr2h,f,c
 12215  003BB8  50DF               	movf	indf2,w,c
 12216  003BBA  ECF9  F031         	call	_sendEscapedUartData
 12217  003BBE  0100               	movlb	0	; () banked
 12218  003BC0  2B7D               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 12219  003BC2                     l18206:
 12220                           
 12221                           ; BSR set to: 0
 12222  003BC2  5184               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12223  003BC4  5D7D               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 12224  003BC6  E3EC               	bnc	l18202
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;main.c: 2481: }
 12228                           ;main.c: 2484: sendEscapedUartData(crc, (0));
 12229  003BC8  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 12230  003BCA  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 12231  003BCC  5183               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 12232  003BCE  ECF9  F031         	call	_sendEscapedUartData
 12233  003BD2                     l1121:
 12234  003BD2  A2AC               	btfss	4012,1,c	;volatile
 12235  003BD4  D7FE               	goto	l1121
 12236                           
 12237                           ;main.c: 2488: WriteUSART(0x10);
 12238  003BD6  0E10               	movlw	16
 12239  003BD8  EC8B  F035         	call	_WriteUSART
 12240  003BDC                     l1124:
 12241  003BDC  A2AC               	btfss	4012,1,c	;volatile
 12242  003BDE  D7FE               	goto	l1124
 12243                           
 12244                           ;main.c: 2490: WriteUSART(0x03);
 12245  003BE0  0E03               	movlw	3
 12246  003BE2  EC8B  F035         	call	_WriteUSART
 12247  003BE6                     l1127:
 12248  003BE6  0012               	return	
 12249  003BE8                     __end_of_receiveSendMultiEventCANAL:
 12250                           	opt stack 0
 12251  003BE8                     PL18:
 12252                           	opt stack 23
 12253  003BE8  2B84               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 12254  003BEA  0E55               	movlw	low _wrkbuf
 12255  003BEC  2584               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12256  003BEE  6ED9               	movwf	fsr2l,c
 12257  003BF0  6ADA               	clrf	fsr2h,c
 12258  003BF2  0E01               	movlw	high _wrkbuf
 12259  003BF4  22DA               	addwfc	fsr2h,f,c
 12260  003BF6  0012               	return	
 12261  003BF8                     __end_ofPL18:
 12262                           	opt stack 0
 12263  003BF8                     PL68:
 12264                           	opt stack 23
 12265  003BF8  0E55               	movlw	low _wrkbuf
 12266  003BFA  0100               	movlb	0	; () banked
 12267  003BFC  2584               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 12268  003BFE  6ED9               	movwf	fsr2l,c
 12269  003C00  6ADA               	clrf	fsr2h,c
 12270  003C02  0E01               	movlw	high _wrkbuf
 12271  003C04  22DA               	addwfc	fsr2h,f,c
 12272  003C06  0012               	return	
 12273  003C08                     __end_ofPL68:
 12274                           	opt stack 0
 12275  003C08                     PL100:
 12276                           	opt stack 23
 12277  003C08  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
 12278  003C0A  0E82               	movlw	low receiveSendMultiEventCANAL@dlc
 12279  003C0C  6F68               	movwf	?_getCANFrame& (0+255),b
 12280  003C0E  0E00               	movlw	high receiveSendMultiEventCANAL@data
 12281  003C10  6F6B               	movwf	(?_getCANFrame+3)& (0+255),b
 12282  003C12  0E70               	movlw	low receiveSendMultiEventCANAL@data
 12283  003C14  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
 12284  003C16  0E7E               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 12285  003C18  0012               	return	
 12286  003C1A                     __end_ofPL100:
 12287                           	opt stack 0
 12288                           tblptru	equ	0xFF8
 12289                           tblptrh	equ	0xFF7
 12290                           tblptrl	equ	0xFF6
 12291                           tablat	equ	0xFF5
 12292                           prodh	equ	0xFF4
 12293                           prodl	equ	0xFF3
 12294                           intcon	equ	0xFF2
 12295                           indf0	equ	0xFEF
 12296                           postinc0	equ	0xFEE
 12297                           fsr0h	equ	0xFEA
 12298                           fsr0l	equ	0xFE9
 12299                           wreg	equ	0xFE8
 12300                           indf1	equ	0xFE7
 12301                           postinc1	equ	0xFE6
 12302                           postdec1	equ	0xFE5
 12303                           fsr1h	equ	0xFE2
 12304                           fsr1l	equ	0xFE1
 12305                           indf2	equ	0xFDF
 12306                           postinc2	equ	0xFDE
 12307                           postdec2	equ	0xFDD
 12308                           plusw2	equ	0xFDB
 12309                           fsr2h	equ	0xFDA
 12310                           fsr2l	equ	0xFD9
 12311                           status	equ	0xFD8
 12312                           
 12313 ;; *************** function _sendEscapedUartData *****************
 12314 ;; Defined at:
 12315 ;;		line 2018 in file "main.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;  c               1    wreg     unsigned char 
 12318 ;;  pcrc            2    3[BANK0 ] PTR unsigned char 
 12319 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 12320 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 12321 ;;		 -> NULL(0), 
 12322 ;; Auto vars:     Size  Location     Type
 12323 ;;  c               1    5[BANK0 ] unsigned char 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;		None               void
 12326 ;; Registers used:
 12327 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12328 ;; Tracked objects:
 12329 ;;		On entry : E/1
 12330 ;;		On exit  : C/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12333 ;;      Params:         0       2       0       0       0       0       0
 12334 ;;      Locals:         0       1       0       0       0       0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0
 12336 ;;      Totals:         0       3       0       0       0       0       0
 12337 ;;Total ram usage:        3 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    5
 12340 ;; This function calls:
 12341 ;;		_WriteUSART
 12342 ;;		_crc8
 12343 ;; This function is called by:
 12344 ;;		_sendVSCPDriverErrorFrame
 12345 ;;		_sendVSCPDriverAck
 12346 ;;		_sendVSCPDriverNack
 12347 ;;		_sendVSCPDriverCommandReply
 12348 ;;		_receiveSendEventCANAL
 12349 ;;		_receiveSendMultiEventCANAL
 12350 ;;		_sendVSCPModeCapabilities
 12351 ;; This function uses a non-reentrant model
 12352 ;;
 12353                           
 12354                           	psect	text19
 12355  0063F2                     __ptext19:
 12356                           	opt stack 0
 12357  0063F2                     _sendEscapedUartData:
 12358                           	opt stack 23
 12359                           
 12360                           ;incstack = 0
 12361                           ;incstack = 0
 12362                           ;sendEscapedUartData@c stored from wreg
 12363  0063F2  CFE8 F065          	movff	wreg,sendEscapedUartData@c
 12364                           
 12365                           ;main.c: 2019: if (0x10 == c) {
 12366  0063F6  0100               	movlb	0	; () banked
 12367  0063F8  5165               	movf	sendEscapedUartData@c& (0+255),w,b
 12368  0063FA  0A10               	xorlw	16
 12369  0063FC  E117               	bnz	l907
 12370  0063FE                     l899:
 12371  0063FE  A2AC               	btfss	4012,1,c	;volatile
 12372  006400  D7FE               	goto	l899
 12373                           
 12374                           ;main.c: 2022: WriteUSART(0x10);
 12375  006402  0E10               	movlw	16
 12376  006404  EC8B  F035         	call	_WriteUSART
 12377  006408                     l902:
 12378  006408  A2AC               	btfss	4012,1,c	;volatile
 12379  00640A  D7FE               	goto	l902
 12380                           
 12381                           ;main.c: 2026: WriteUSART(0x10);
 12382  00640C  0E10               	movlw	16
 12383  00640E  EC8B  F035         	call	_WriteUSART
 12384                           
 12385                           ;main.c: 2027: if ((0) != pcrc) crc8(pcrc, 0x10);
 12386  006412  0100               	movlb	0	; () banked
 12387  006414  5164               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 12388  006416  1163               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 12389  006418  E01B               	bz	l911
 12390                           
 12391                           ; BSR set to: 0
 12392  00641A  C063  F060         	movff	sendEscapedUartData@pcrc,?_crc8
 12393  00641E  C064  F061         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 12394  006422  0E10               	movlw	16
 12395  006424  6F62               	movwf	(?_crc8+2)& (0+255),b
 12396  006426  EC71  F034         	call	_crc8	;wreg free
 12397  00642A  D012               	goto	l911
 12398  00642C                     l907:
 12399  00642C  A2AC               	btfss	4012,1,c	;volatile
 12400  00642E  D7FE               	goto	l907
 12401                           
 12402                           ;main.c: 2033: WriteUSART(c);
 12403  006430  0100               	movlb	0	; () banked
 12404  006432  5165               	movf	sendEscapedUartData@c& (0+255),w,b
 12405  006434  EC8B  F035         	call	_WriteUSART
 12406                           
 12407                           ;main.c: 2034: if ((0) != pcrc) crc8(pcrc, c);
 12408  006438  0100               	movlb	0	; () banked
 12409  00643A  5164               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 12410  00643C  1163               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 12411  00643E  E008               	bz	l911
 12412                           
 12413                           ; BSR set to: 0
 12414  006440  C063  F060         	movff	sendEscapedUartData@pcrc,?_crc8
 12415  006444  C064  F061         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 12416  006448  C065  F062         	movff	sendEscapedUartData@c,?_crc8+2
 12417  00644C  EC71  F034         	call	_crc8	;wreg free
 12418  006450                     l911:
 12419  006450  0012               	return	
 12420  006452                     __end_of_sendEscapedUartData:
 12421                           	opt stack 0
 12422                           tblptru	equ	0xFF8
 12423                           tblptrh	equ	0xFF7
 12424                           tblptrl	equ	0xFF6
 12425                           tablat	equ	0xFF5
 12426                           prodh	equ	0xFF4
 12427                           prodl	equ	0xFF3
 12428                           intcon	equ	0xFF2
 12429                           indf0	equ	0xFEF
 12430                           postinc0	equ	0xFEE
 12431                           fsr0h	equ	0xFEA
 12432                           fsr0l	equ	0xFE9
 12433                           wreg	equ	0xFE8
 12434                           indf1	equ	0xFE7
 12435                           postinc1	equ	0xFE6
 12436                           postdec1	equ	0xFE5
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           plusw2	equ	0xFDB
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           
 12447 ;; *************** function _crc8 *****************
 12448 ;; Defined at:
 12449 ;;		line 47 in file "crc8.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  crc             2    0[BANK0 ] PTR unsigned char 
 12452 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 12453 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 12454 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 12455 ;;  m               1    2[BANK0 ] unsigned char 
 12456 ;; Auto vars:     Size  Location     Type
 12457 ;;		None
 12458 ;; Return value:  Size  Location     Type
 12459 ;;		None               void
 12460 ;; Registers used:
 12461 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12462 ;; Tracked objects:
 12463 ;;		On entry : F/0
 12464 ;;		On exit  : F/3
 12465 ;;		Unchanged: 0/0
 12466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12467 ;;      Params:         0       3       0       0       0       0       0
 12468 ;;      Locals:         0       0       0       0       0       0       0
 12469 ;;      Temps:          2       0       0       0       0       0       0
 12470 ;;      Totals:         2       3       0       0       0       0       0
 12471 ;;Total ram usage:        5 bytes
 12472 ;; Hardware stack levels used:    1
 12473 ;; Hardware stack levels required when called:    4
 12474 ;; This function calls:
 12475 ;;		_init_crc8
 12476 ;; This function is called by:
 12477 ;;		_sendEscapedUartData
 12478 ;;		_sendVSCPDriverErrorFrame
 12479 ;;		_sendVSCPDriverAck
 12480 ;;		_sendVSCPDriverNack
 12481 ;;		_sendVSCPDriverCommandReply
 12482 ;;		_receiveSendEventCANAL
 12483 ;;		_receiveSendMultiEventCANAL
 12484 ;;		_sendVSCPModeCapabilities
 12485 ;;		_calcCRC
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           	psect	text20
 12490  0068E2                     __ptext20:
 12491                           	opt stack 0
 12492  0068E2                     _crc8:
 12493                           	opt stack 24
 12494                           
 12495                           ; BSR set to: 0
 12496                           ;crc8.c: 48: if ( !made_table ) {
 12497                           
 12498                           ;incstack = 0
 12499                           ;incstack = 0
 12500  0068E2  5029               	movf	_made_table+1,w,c
 12501  0068E4  1028               	iorwf	_made_table,w,c
 12502  0068E6  B4D8               	btfsc	status,2,c
 12503                           
 12504                           ; BSR set to: 0
 12505                           ;crc8.c: 49: init_crc8();
 12506  0068E8  EC2E  F031         	call	_init_crc8	;wreg free
 12507                           
 12508                           ;crc8.c: 50: }
 12509                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 12510  0068EC  C060  FFD9         	movff	crc8@crc,fsr2l
 12511  0068F0  C061  FFDA         	movff	crc8@crc+1,fsr2h
 12512  0068F4  50DF               	movf	indf2,w,c
 12513  0068F6  0100               	movlb	0	; () banked
 12514  0068F8  1962               	xorwf	crc8@m& (0+255),w,b
 12515  0068FA  6E26               	movwf	??_crc8& (0+255),c
 12516  0068FC  6A27               	clrf	(??_crc8+1)& (0+255),c
 12517  0068FE  0103               	movlb	3	; () banked
 12518  006900  0E00               	movlw	low _crc8_table
 12519  006902  2426               	addwf	??_crc8,w,c
 12520  006904  6ED9               	movwf	fsr2l,c
 12521  006906  0E03               	movlw	high _crc8_table
 12522  006908  2027               	addwfc	??_crc8+1,w,c
 12523  00690A  6EDA               	movwf	fsr2h,c
 12524  00690C  C060  FFE1         	movff	crc8@crc,fsr1l
 12525  006910  C061  FFE2         	movff	crc8@crc+1,fsr1h
 12526  006914  CFDF FFE7          	movff	indf2,indf1
 12527                           
 12528                           ; BSR set to: 3
 12529  006918  0012               	return	
 12530  00691A                     __end_of_crc8:
 12531                           	opt stack 0
 12532                           tblptru	equ	0xFF8
 12533                           tblptrh	equ	0xFF7
 12534                           tblptrl	equ	0xFF6
 12535                           tablat	equ	0xFF5
 12536                           prodh	equ	0xFF4
 12537                           prodl	equ	0xFF3
 12538                           intcon	equ	0xFF2
 12539                           indf0	equ	0xFEF
 12540                           postinc0	equ	0xFEE
 12541                           fsr0h	equ	0xFEA
 12542                           fsr0l	equ	0xFE9
 12543                           wreg	equ	0xFE8
 12544                           indf1	equ	0xFE7
 12545                           postinc1	equ	0xFE6
 12546                           postdec1	equ	0xFE5
 12547                           fsr1h	equ	0xFE2
 12548                           fsr1l	equ	0xFE1
 12549                           indf2	equ	0xFDF
 12550                           postinc2	equ	0xFDE
 12551                           postdec2	equ	0xFDD
 12552                           plusw2	equ	0xFDB
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _init_crc8 *****************
 12558 ;; Defined at:
 12559 ;;		line 25 in file "crc8.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;		None
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;  i               2   35[COMRAM] int 
 12564 ;;  j               2   32[COMRAM] int 
 12565 ;;  crc             1   34[COMRAM] unsigned char 
 12566 ;; Return value:  Size  Location     Type
 12567 ;;		None               void
 12568 ;; Registers used:
 12569 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12570 ;; Tracked objects:
 12571 ;;		On entry : 0/0
 12572 ;;		On exit  : 0/0
 12573 ;;		Unchanged: 0/0
 12574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12575 ;;      Params:         0       0       0       0       0       0       0
 12576 ;;      Locals:         7       0       0       0       0       0       0
 12577 ;;      Temps:          0       0       0       0       0       0       0
 12578 ;;      Totals:         7       0       0       0       0       0       0
 12579 ;;Total ram usage:        7 bytes
 12580 ;; Hardware stack levels used:    1
 12581 ;; Hardware stack levels required when called:    3
 12582 ;; This function calls:
 12583 ;;		Nothing
 12584 ;; This function is called by:
 12585 ;;		_main
 12586 ;;		_crc8
 12587 ;; This function uses a non-reentrant model
 12588 ;;
 12589                           
 12590                           	psect	text21
 12591  00625C                     __ptext21:
 12592                           	opt stack 0
 12593  00625C                     _init_crc8:
 12594                           	opt stack 24
 12595                           
 12596                           ;crc8.c: 26: int i,j;
 12597                           ;crc8.c: 27: unsigned char crc;
 12598                           ;crc8.c: 29: if (!made_table) {
 12599                           
 12600                           ; BSR set to: 3
 12601                           ;incstack = 0
 12602                           ;incstack = 0
 12603  00625C  5029               	movf	_made_table+1,w,c
 12604  00625E  1028               	iorwf	_made_table,w,c
 12605  006260  E131               	bnz	l1740
 12606                           
 12607                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 12608  006262  6A24               	clrf	init_crc8@i,c
 12609  006264  6A25               	clrf	init_crc8@i+1,c
 12610  006266                     l1732:
 12611                           
 12612                           ;crc8.c: 31: crc = i;
 12613  006266  C024  F023         	movff	init_crc8@i,init_crc8@crc
 12614                           
 12615                           ;crc8.c: 32: for (j=0; j<8; j++) {
 12616  00626A  6A21               	clrf	init_crc8@j,c
 12617  00626C  6A22               	clrf	init_crc8@j+1,c
 12618  00626E                     l1734:
 12619                           
 12620                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 12621  00626E  BE23               	btfsc	init_crc8@crc,7,c
 12622  006270  D003               	goto	l15324
 12623  006272  6A1F               	clrf	_init_crc8$2208,c
 12624  006274  6A20               	clrf	_init_crc8$2208+1,c
 12625  006276  D003               	goto	l15326
 12626  006278                     l15324:
 12627  006278  6A20               	clrf	_init_crc8$2208+1,c
 12628  00627A  0E07               	movlw	7
 12629  00627C  6E1F               	movwf	_init_crc8$2208,c
 12630  00627E                     l15326:
 12631  00627E  5023               	movf	init_crc8@crc,w,c
 12632  006280  2423               	addwf	init_crc8@crc,w,c
 12633  006282  181F               	xorwf	_init_crc8$2208,w,c
 12634  006284  6E23               	movwf	init_crc8@crc,c
 12635  006286  4A21               	infsnz	init_crc8@j,f,c
 12636  006288  2A22               	incf	init_crc8@j+1,f,c
 12637  00628A  5022               	movf	init_crc8@j+1,w,c
 12638  00628C  0A80               	xorlw	128
 12639  00628E  0F80               	addlw	-128
 12640  006290  0E08               	movlw	8
 12641  006292  B4D8               	btfsc	status,2,c
 12642  006294  5C21               	subwf	init_crc8@j,w,c
 12643  006296  E3EB               	bnc	l1734
 12644                           
 12645                           ;crc8.c: 34: }
 12646                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 12647  006298  0103               	movlb	3	; () banked
 12648  00629A  0E00               	movlw	low _crc8_table
 12649  00629C  2424               	addwf	init_crc8@i,w,c
 12650  00629E  6ED9               	movwf	fsr2l,c
 12651  0062A0  0E03               	movlw	high _crc8_table
 12652  0062A2  2025               	addwfc	init_crc8@i+1,w,c
 12653  0062A4  6EDA               	movwf	fsr2h,c
 12654  0062A6  C023  FFDF         	movff	init_crc8@crc,indf2
 12655                           
 12656                           ; BSR set to: 3
 12657  0062AA  4A24               	infsnz	init_crc8@i,f,c
 12658  0062AC  2A25               	incf	init_crc8@i+1,f,c
 12659                           
 12660                           ; BSR set to: 3
 12661  0062AE  5025               	movf	init_crc8@i+1,w,c
 12662  0062B0  0A80               	xorlw	128
 12663  0062B2  0F7F               	addlw	-129
 12664  0062B4  0E00               	movlw	0
 12665  0062B6  B4D8               	btfsc	status,2,c
 12666  0062B8  5C24               	subwf	init_crc8@i,w,c
 12667  0062BA  E3D5               	bnc	l1732
 12668                           
 12669                           ; BSR set to: 3
 12670                           ;crc8.c: 37: }
 12671                           ;crc8.c: 38: made_table=1;
 12672  0062BC  0E00               	movlw	0
 12673  0062BE  6E29               	movwf	_made_table+1,c
 12674  0062C0  0E01               	movlw	1
 12675  0062C2  6E28               	movwf	_made_table,c
 12676  0062C4                     l1740:
 12677  0062C4  0012               	return	
 12678  0062C6                     __end_of_init_crc8:
 12679                           	opt stack 0
 12680                           tblptru	equ	0xFF8
 12681                           tblptrh	equ	0xFF7
 12682                           tblptrl	equ	0xFF6
 12683                           tablat	equ	0xFF5
 12684                           prodh	equ	0xFF4
 12685                           prodl	equ	0xFF3
 12686                           intcon	equ	0xFF2
 12687                           indf0	equ	0xFEF
 12688                           postinc0	equ	0xFEE
 12689                           fsr0h	equ	0xFEA
 12690                           fsr0l	equ	0xFE9
 12691                           wreg	equ	0xFE8
 12692                           indf1	equ	0xFE7
 12693                           postinc1	equ	0xFE6
 12694                           postdec1	equ	0xFE5
 12695                           fsr1h	equ	0xFE2
 12696                           fsr1l	equ	0xFE1
 12697                           indf2	equ	0xFDF
 12698                           postinc2	equ	0xFDE
 12699                           postdec2	equ	0xFDD
 12700                           plusw2	equ	0xFDB
 12701                           fsr2h	equ	0xFDA
 12702                           fsr2l	equ	0xFD9
 12703                           status	equ	0xFD8
 12704                           
 12705 ;; *************** function _doModeVerbose *****************
 12706 ;; Defined at:
 12707 ;;		line 643 in file "main.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;		None
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;  baudcode        4   44[BANK2 ] unsigned long 
 12712 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 12713 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12714 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12715 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12716 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12717 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12718 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12719 ;;		 -> cmdbuf(80), 
 12720 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 12721 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 12722 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 12723 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 12724 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 12725 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 12726 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 12727 ;;		 -> cmdbuf(80), 
 12728 ;;  id              4   68[BANK2 ] unsigned long 
 12729 ;;  p               2   72[BANK2 ] PTR unsigned char 
 12730 ;;		 -> NULL(0), cmdbuf(80), 
 12731 ;;  mask_class      2   10[BANK2 ] unsigned short 
 12732 ;;  maskno          1   54[BANK2 ] unsigned char 
 12733 ;;  bPersistent     1    0        enum E15660
 12734 ;;  mask_nodeid     1   17[BANK2 ] unsigned char 
 12735 ;;  mask_type       1   16[BANK2 ] unsigned char 
 12736 ;;  mask_priorit    1   15[BANK2 ] unsigned char 
 12737 ;;  id              4    0[BANK2 ] unsigned long 
 12738 ;;  p               2   74[BANK2 ] PTR unsigned char 
 12739 ;;		 -> NULL(0), cmdbuf(80), 
 12740 ;;  filter_class    2    8[BANK2 ] unsigned short 
 12741 ;;  filterno        1   48[BANK2 ] unsigned char 
 12742 ;;  bPersistent     1   43[BANK2 ] enum E15660
 12743 ;;  filter_nodei    1   14[BANK2 ] unsigned char 
 12744 ;;  filter_type     1   13[BANK2 ] unsigned char 
 12745 ;;  filter_prior    1   12[BANK2 ] unsigned char 
 12746 ;;  nodeid          1   58[BANK2 ] unsigned char 
 12747 ;;  value           1   42[BANK2 ] unsigned char 
 12748 ;;  p               2   63[BANK2 ] PTR unsigned char 
 12749 ;;		 -> NULL(0), cmdbuf(80), 
 12750 ;;  nodeid          1   53[BANK2 ] unsigned char 
 12751 ;;  value           1   50[BANK2 ] unsigned char 
 12752 ;;  reg             1   41[BANK2 ] unsigned char 
 12753 ;;  page            1   40[BANK2 ] unsigned char 
 12754 ;;  p               2   61[BANK2 ] PTR unsigned char 
 12755 ;;		 -> NULL(0), cmdbuf(80), 
 12756 ;;  value           1   60[BANK2 ] unsigned char 
 12757 ;;  i               1   57[BANK2 ] unsigned char 
 12758 ;;  reg             1   56[BANK2 ] unsigned char 
 12759 ;;  page            1   55[BANK2 ] unsigned char 
 12760 ;;  nodeid          1   52[BANK2 ] unsigned char 
 12761 ;;  count           1   51[BANK2 ] unsigned char 
 12762 ;;  rv              1   39[BANK2 ] enum E15660
 12763 ;;  p               2   66[BANK2 ] PTR unsigned char 
 12764 ;;		 -> NULL(0), cmdbuf(80), 
 12765 ;;  ifmode          1   65[BANK2 ] enum E16362
 12766 ;;  c               1   59[BANK2 ] unsigned char 
 12767 ;;  i               1   49[BANK2 ] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;		None               void
 12770 ;; Registers used:
 12771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 12772 ;; Tracked objects:
 12773 ;;		On entry : F/0
 12774 ;;		On exit  : C/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12777 ;;      Params:         0       0       0       0       0       0       0
 12778 ;;      Locals:         0       0       0      76       0       0       0
 12779 ;;      Temps:          0       0      20       0       0       0       0
 12780 ;;      Totals:         0       0      20      76       0       0       0
 12781 ;;Total ram usage:       96 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:   10
 12784 ;; This function calls:
 12785 ;;		_vscp_restoreDefaults
 12786 ;;		_putsUSART
 12787 ;;		_printFirmwareVersion
 12788 ;;		_fifo_read
 12789 ;;		_ECANSetOperationMode
 12790 ;;		_setFilter
 12791 ;;		__CANIDToRegs
 12792 ;;		_Busy_eep
 12793 ;;		_Write_b_eep
 12794 ;;		_receivePrintEventVerbose
 12795 ;;		_WriteUSART
 12796 ;;		_stristr
 12797 ;;		_strtok
 12798 ;;		_atoi
 12799 ;;		_memset
 12800 ;;		_sendVSCPFrame
 12801 ;;		_printStatistics
 12802 ;;		_printErrors
 12803 ;;		_printHelp
 12804 ;;		_findNodes
 12805 ;;		_strcpy
 12806 ;;		_strchr
 12807 ;;		_readRegisterExtended
 12808 ;;		_sprintf
 12809 ;;		_printBinary
 12810 ;;		_writeRegisterExtended
 12811 ;;		_printNodeFirmwareVersion
 12812 ;;		_printGUID
 12813 ;;		_printMDF
 12814 ;;		_changeBaudrate
 12815 ;; This function is called by:
 12816 ;;		_main
 12817 ;; This function uses a non-reentrant model
 12818 ;;
 12819                           
 12820                           	psect	text22
 12821  00077E                     __ptext22:
 12822                           	opt stack 0
 12823  00077E                     _doModeVerbose:
 12824                           	opt stack 20
 12825                           
 12826                           ; BSR set to: 0
 12827                           ;main.c: 644: uint8_t c;
 12828                           ;main.c: 645: uint8_t i;
 12829                           ;main.c: 648: if (!bSilent) {
 12830                           
 12831                           ;incstack = 0
 12832                           ;incstack = 0
 12833  00077E  0101               	movlb	1	; () banked
 12834  000780  6702               	tstfsz	_bSilent& (0+255),b
 12835  000782  D002               	goto	l15472
 12836                           
 12837                           ; BSR set to: 1
 12838                           ;main.c: 649: receivePrintEventVerbose();
 12839  000784  EC7C  F017         	call	_receivePrintEventVerbose	;wreg free
 12840  000788                     l15472:
 12841                           
 12842                           ;main.c: 650: }
 12843                           ;main.c: 653: (INTCONbits.GIE = 0);
 12844  000788  9EF2               	bcf	intcon,7,c	;volatile
 12845                           
 12846                           ;main.c: 655: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 12847  00078A  0E00               	movlw	high _serialInputFifo
 12848  00078C  6E20               	movwf	?_fifo_read+1,c
 12849  00078E  0EF4               	movlw	low _serialInputFifo
 12850  000790  6E1F               	movwf	?_fifo_read,c
 12851  000792  0102               	movlb	2	; () banked
 12852  000794  0E02               	movlw	high doModeVerbose@c
 12853  000796  6E22               	movwf	?_fifo_read+3,c
 12854  000798  0EC3               	movlw	low doModeVerbose@c
 12855  00079A  6E21               	movwf	?_fifo_read+2,c
 12856  00079C  6A24               	clrf	?_fifo_read+5,c
 12857  00079E  0E01               	movlw	1
 12858  0007A0  6E23               	movwf	?_fifo_read+4,c
 12859  0007A2  ECA6  F029         	call	_fifo_read	;wreg free
 12860  0007A6  041F               	decf	?_fifo_read,w,c
 12861  0007A8  1020               	iorwf	?_fifo_read+1,w,c
 12862  0007AA  E002 EF25  F00F    	bnz	l16376
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;main.c: 658: (INTCONbits.GIE = 1);
 12866  0007B0  8EF2               	bsf	intcon,7,c	;volatile
 12867                           
 12868                           ; BSR set to: 0
 12869                           ;main.c: 661: if ( bLocalEcho ) {
 12870  0007B2  0101               	movlb	1	; () banked
 12871  0007B4  5101               	movf	_bLocalEcho& (0+255),w,b
 12872  0007B6  E00F               	bz	l15486
 12873                           
 12874                           ; BSR set to: 1
 12875                           ;main.c: 662: WriteUSART( c );
 12876  0007B8  0102               	movlb	2	; () banked
 12877  0007BA  51C3               	movf	doModeVerbose@c& (0+255),w,b
 12878  0007BC  EC8B  F035         	call	_WriteUSART
 12879  0007C0                     l521:
 12880  0007C0  A2AC               	btfss	4012,1,c	;volatile
 12881  0007C2  D7FE               	goto	l521
 12882                           
 12883                           ;main.c: 664: if ( 0x0d == c ) {
 12884  0007C4  0102               	movlb	2	; () banked
 12885  0007C6  51C3               	movf	doModeVerbose@c& (0+255),w,b
 12886  0007C8  0A0D               	xorlw	13
 12887  0007CA  E105               	bnz	l15486
 12888                           
 12889                           ; BSR set to: 2
 12890                           ;main.c: 665: WriteUSART( 0x0a );
 12891  0007CC  0E0A               	movlw	10
 12892  0007CE  EC8B  F035         	call	_WriteUSART
 12893  0007D2                     l525:
 12894  0007D2  A2AC               	btfss	4012,1,c	;volatile
 12895  0007D4  D7FE               	goto	l525
 12896  0007D6                     l15486:
 12897                           
 12898                           ;main.c: 667: }
 12899                           ;main.c: 668: }
 12900                           ;main.c: 671: cmdbuf[ pos++ ] = c;
 12901  0007D6  0101               	movlb	1	; () banked
 12902  0007D8  EC98  F015         	call	PL50	;call to abstracted procedure
 12903  0007DC  C2C3  FFDF         	movff	doModeVerbose@c,indf2
 12904                           
 12905                           ; BSR set to: 2
 12906  0007E0  2B03               	incf	_pos& (0+255),f,b
 12907                           
 12908                           ; BSR set to: 1
 12909                           ;main.c: 672: if (pos >= sizeof( cmdbuf ) ) {
 12910  0007E2  0E4F               	movlw	79
 12911  0007E4  6503               	cpfsgt	_pos& (0+255),b
 12912  0007E6  D001               	goto	l15494
 12913                           
 12914                           ; BSR set to: 1
 12915                           ;main.c: 675: pos = 0;
 12916  0007E8  6B03               	clrf	_pos& (0+255),b
 12917  0007EA                     l15494:
 12918                           
 12919                           ; BSR set to: 1
 12920                           ;main.c: 676: }
 12921                           ;main.c: 679: if (0x0d == c) {
 12922  0007EA  0102               	movlb	2	; () banked
 12923  0007EC  51C3               	movf	doModeVerbose@c& (0+255),w,b
 12924  0007EE  0A0D               	xorlw	13
 12925  0007F0  E002 EF25  F00F    	bnz	l16376
 12926                           
 12927                           ; BSR set to: 2
 12928                           ;main.c: 681: cmdbuf[ pos ] = 0;
 12929  0007F6  0101               	movlb	1	; () banked
 12930  0007F8  EC98  F015         	call	PL50	;call to abstracted procedure
 12931  0007FC  6ADF               	clrf	indf2,c
 12932                           
 12933                           ; BSR set to: 1
 12934                           ;main.c: 684: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 12935  0007FE  0100               	movlb	0	; () banked
 12936  000800  6F67               	movwf	(?_stristr+1)& (0+255),b
 12937  000802  0E05               	movlw	low _cmdbuf
 12938  000804  6F66               	movwf	?_stristr& (0+255),b
 12939  000806  0E7F               	movlw	high STR_6
 12940  000808  6F69               	movwf	(?_stristr+3)& (0+255),b
 12941  00080A  0EC0               	movlw	low STR_6
 12942  00080C  6F68               	movwf	(?_stristr+2)& (0+255),b
 12943  00080E  EC42  F030         	call	_stristr	;wreg free
 12944  000812  EC27  F00F         	call	PL2	;call to abstracted procedure
 12945  000816  E104               	bnz	u19865
 12946  000818  0100               	movlb	0	; () banked
 12947  00081A  5166               	movf	?_stristr& (0+255),w,b
 12948  00081C  0101               	movlb	1	; () banked
 12949  00081E  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 12950  000820                     u19865:
 12951  000820  E111               	bnz	l15506
 12952                           
 12953                           ; BSR set to: 1
 12954                           ;main.c: 685: putsUSART((char *) "Will enter bootloader now...\r\n");
 12955  000822  0E79               	movlw	high STR_7
 12956  000824  6E21               	movwf	?_putsUSART+1,c
 12957  000826  0ECE               	movlw	low STR_7
 12958  000828  6E20               	movwf	?_putsUSART,c
 12959  00082A  ECDF  F032         	call	_putsUSART	;wreg free
 12960                           
 12961                           ;main.c: 686: (Busy_eep(), Write_b_eep(0x00,0xFF));
 12962  00082E  ECC6  F035         	call	_Busy_eep	;wreg free
 12963  000832  6A20               	clrf	?_Write_b_eep+1,c
 12964  000834  6A1F               	clrf	?_Write_b_eep,c
 12965  000836  0EFF               	movlw	255
 12966  000838  6821               	setf	?_Write_b_eep+2,c
 12967  00083A  ECC5  F034         	call	_Write_b_eep	;wreg free
 12968  00083E  00FF               	reset		;# 
 12969                           
 12970                           ;main.c: 688: }
 12971  000840  EF1B  F00F         	goto	l16372
 12972  000844                     l15506:
 12973                           
 12974                           ; BSR set to: 1
 12975                           ;main.c: 690: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 12976  000844  ECD9  F00F         	call	PL84	;call to abstracted procedure
 12977  000848  EC42  F030         	call	_stristr	;wreg free
 12978  00084C  EC27  F00F         	call	PL2	;call to abstracted procedure
 12979  000850  E104               	bnz	u19875
 12980  000852  0100               	movlb	0	; () banked
 12981  000854  5166               	movf	?_stristr& (0+255),w,b
 12982  000856  0101               	movlb	1	; () banked
 12983  000858  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 12984  00085A                     u19875:
 12985  00085A  E10C               	bnz	l15514
 12986                           
 12987                           ; BSR set to: 1
 12988                           ;main.c: 691: bSilent = 0;
 12989  00085C  6B02               	clrf	_bSilent& (0+255),b
 12990                           
 12991                           ; BSR set to: 1
 12992                           ;main.c: 692: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 12993  00085E  0E00               	movlw	0
 12994  000860  EC74  F035         	call	_ECANSetOperationMode
 12995                           
 12996                           ;main.c: 693: putsUSART((char *) "+OK\r\n");
 12997  000864  0E7F               	movlw	high STR_9
 12998  000866  6E21               	movwf	?_putsUSART+1,c
 12999  000868  0E6A               	movlw	low STR_9
 13000  00086A  6E20               	movwf	?_putsUSART,c
 13001  00086C  ECDF  F032         	call	_putsUSART	;wreg free
 13002                           
 13003                           ;main.c: 694: }
 13004  000870  EF1B  F00F         	goto	l16372
 13005  000874                     l15514:
 13006                           
 13007                           ; BSR set to: 1
 13008                           ;main.c: 696: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 13009  000874  0E01               	movlw	high _cmdbuf
 13010  000876  ECE3  F00F         	call	PL112	;call to abstracted procedure
 13011  00087A  EC42  F030         	call	_stristr	;wreg free
 13012  00087E  EC27  F00F         	call	PL2	;call to abstracted procedure
 13013  000882  E104               	bnz	u19885
 13014  000884  0100               	movlb	0	; () banked
 13015  000886  5166               	movf	?_stristr& (0+255),w,b
 13016  000888  0101               	movlb	1	; () banked
 13017  00088A  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13018  00088C                     u19885:
 13019  00088C  E10D               	bnz	l15522
 13020                           
 13021                           ; BSR set to: 1
 13022                           ;main.c: 697: bSilent = 1;
 13023  00088E  0E01               	movlw	1
 13024  000890  6F02               	movwf	_bSilent& (0+255),b
 13025                           
 13026                           ; BSR set to: 1
 13027                           ;main.c: 698: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 13028  000892  0E00               	movlw	0
 13029  000894  EC74  F035         	call	_ECANSetOperationMode
 13030                           
 13031                           ;main.c: 699: putsUSART((char *) "+OK\r\n");
 13032  000898  0E7F               	movlw	high STR_9
 13033  00089A  6E21               	movwf	?_putsUSART+1,c
 13034  00089C  0E6A               	movlw	low STR_9
 13035  00089E  6E20               	movwf	?_putsUSART,c
 13036  0008A0  ECDF  F032         	call	_putsUSART	;wreg free
 13037                           
 13038                           ;main.c: 700: }
 13039  0008A4  EF1B  F00F         	goto	l16372
 13040  0008A8                     l15522:
 13041                           
 13042                           ; BSR set to: 1
 13043                           ;main.c: 702: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 13044  0008A8  0E01               	movlw	high _cmdbuf
 13045  0008AA  0100               	movlb	0	; () banked
 13046  0008AC  EC0C  F010         	call	PL132	;call to abstracted procedure
 13047  0008B0  EC42  F030         	call	_stristr	;wreg free
 13048  0008B4  EC27  F00F         	call	PL2	;call to abstracted procedure
 13049  0008B8  E104               	bnz	u19895
 13050  0008BA  0100               	movlb	0	; () banked
 13051  0008BC  5166               	movf	?_stristr& (0+255),w,b
 13052  0008BE  0101               	movlb	1	; () banked
 13053  0008C0  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13054  0008C2                     u19895:
 13055  0008C2  E10D               	bnz	l15530
 13056                           
 13057                           ; BSR set to: 1
 13058                           ;main.c: 703: bSilent = 1;
 13059  0008C4  0E01               	movlw	1
 13060  0008C6  6F02               	movwf	_bSilent& (0+255),b
 13061                           
 13062                           ; BSR set to: 1
 13063                           ;main.c: 704: ECANSetOperationMode( ECAN_OP_MODE_CONFIG );
 13064  0008C8  0E80               	movlw	128
 13065  0008CA  EC74  F035         	call	_ECANSetOperationMode
 13066                           
 13067                           ;main.c: 705: putsUSART((char *) "+OK\r\n");
 13068  0008CE  0E7F               	movlw	high STR_9
 13069  0008D0  6E21               	movwf	?_putsUSART+1,c
 13070  0008D2  0E6A               	movlw	low STR_9
 13071  0008D4  6E20               	movwf	?_putsUSART,c
 13072  0008D6  ECDF  F032         	call	_putsUSART	;wreg free
 13073                           
 13074                           ;main.c: 706: }
 13075  0008DA  EF1B  F00F         	goto	l16372
 13076  0008DE                     l15530:
 13077                           
 13078                           ; BSR set to: 1
 13079                           ;main.c: 708: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 13080  0008DE  0E01               	movlw	high _cmdbuf
 13081  0008E0  0100               	movlb	0	; () banked
 13082  0008E2  EC04  F010         	call	PL128	;call to abstracted procedure
 13083  0008E6  EC42  F030         	call	_stristr	;wreg free
 13084  0008EA  EC27  F00F         	call	PL2	;call to abstracted procedure
 13085  0008EE  E104               	bnz	u19905
 13086  0008F0  0100               	movlb	0	; () banked
 13087  0008F2  5166               	movf	?_stristr& (0+255),w,b
 13088  0008F4  0101               	movlb	1	; () banked
 13089  0008F6  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13090  0008F8                     u19905:
 13091  0008F8  E10C               	bnz	l15538
 13092                           
 13093                           ; BSR set to: 1
 13094                           ;main.c: 709: bSilent = 0;
 13095  0008FA  6B02               	clrf	_bSilent& (0+255),b
 13096                           
 13097                           ; BSR set to: 1
 13098                           ;main.c: 710: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 13099  0008FC  0E40               	movlw	64
 13100  0008FE  EC74  F035         	call	_ECANSetOperationMode
 13101                           
 13102                           ;main.c: 711: putsUSART((char *) "+OK\r\n");
 13103  000902  0E7F               	movlw	high STR_9
 13104  000904  6E21               	movwf	?_putsUSART+1,c
 13105  000906  0E6A               	movlw	low STR_9
 13106  000908  6E20               	movwf	?_putsUSART,c
 13107  00090A  ECDF  F032         	call	_putsUSART	;wreg free
 13108                           
 13109                           ;main.c: 712: }
 13110  00090E  EF1B  F00F         	goto	l16372
 13111  000912                     l15538:
 13112                           
 13113                           ; BSR set to: 1
 13114                           ;main.c: 714: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 13115  000912  0E01               	movlw	high _cmdbuf
 13116  000914  0100               	movlb	0	; () banked
 13117  000916  ECFC  F00F         	call	PL124	;call to abstracted procedure
 13118  00091A  EC42  F030         	call	_stristr	;wreg free
 13119  00091E  EC27  F00F         	call	PL2	;call to abstracted procedure
 13120  000922  E104               	bnz	u19915
 13121  000924  0100               	movlb	0	; () banked
 13122  000926  5166               	movf	?_stristr& (0+255),w,b
 13123  000928  0101               	movlb	1	; () banked
 13124  00092A  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13125  00092C                     u19915:
 13126  00092C  E10C               	bnz	l15546
 13127                           
 13128                           ; BSR set to: 1
 13129                           ;main.c: 715: bSilent = 0;
 13130  00092E  6B02               	clrf	_bSilent& (0+255),b
 13131                           
 13132                           ; BSR set to: 1
 13133                           ;main.c: 716: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 13134  000930  0E60               	movlw	96
 13135  000932  EC74  F035         	call	_ECANSetOperationMode
 13136                           
 13137                           ;main.c: 717: putsUSART((char *) "+OK\r\n");
 13138  000936  0E7F               	movlw	high STR_9
 13139  000938  6E21               	movwf	?_putsUSART+1,c
 13140  00093A  0E6A               	movlw	low STR_9
 13141  00093C  6E20               	movwf	?_putsUSART,c
 13142  00093E  ECDF  F032         	call	_putsUSART	;wreg free
 13143                           
 13144                           ;main.c: 718: }
 13145  000942  EF1B  F00F         	goto	l16372
 13146  000946                     l15546:
 13147                           
 13148                           ; BSR set to: 1
 13149                           ;main.c: 720: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 13150  000946  0E01               	movlw	high _cmdbuf
 13151  000948  0100               	movlb	0	; () banked
 13152  00094A  6F67               	movwf	(?_stristr+1)& (0+255),b
 13153  00094C  0E05               	movlw	low _cmdbuf
 13154  00094E  6F66               	movwf	?_stristr& (0+255),b
 13155  000950  0E7E               	movlw	high STR_18
 13156  000952  6F69               	movwf	(?_stristr+3)& (0+255),b
 13157  000954  0EF8               	movlw	low STR_18
 13158  000956  6F68               	movwf	(?_stristr+2)& (0+255),b
 13159  000958  EC42  F030         	call	_stristr	;wreg free
 13160  00095C  EC27  F00F         	call	PL2	;call to abstracted procedure
 13161  000960  E104               	bnz	u19925
 13162  000962  0100               	movlb	0	; () banked
 13163  000964  5166               	movf	?_stristr& (0+255),w,b
 13164  000966  0101               	movlb	1	; () banked
 13165  000968  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13166  00096A                     u19925:
 13167  00096A  E10A               	bnz	l15552
 13168                           
 13169                           ; BSR set to: 1
 13170                           ;main.c: 721: printFirmwareVersion();
 13171  00096C  EC39  F02F         	call	_printFirmwareVersion	;wreg free
 13172                           
 13173                           ;main.c: 722: putsUSART((char *) "+OK\r\n");
 13174  000970  0E7F               	movlw	high STR_9
 13175  000972  6E21               	movwf	?_putsUSART+1,c
 13176  000974  0E6A               	movlw	low STR_9
 13177  000976  6E20               	movwf	?_putsUSART,c
 13178  000978  ECDF  F032         	call	_putsUSART	;wreg free
 13179                           
 13180                           ;main.c: 723: }
 13181  00097C  EF1B  F00F         	goto	l16372
 13182  000980                     l15552:
 13183                           
 13184                           ; BSR set to: 1
 13185                           ;main.c: 725: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 13186  000980  0E01               	movlw	high _cmdbuf
 13187  000982  0100               	movlb	0	; () banked
 13188  000984  6F67               	movwf	(?_stristr+1)& (0+255),b
 13189  000986  0E05               	movlw	low _cmdbuf
 13190  000988  6F66               	movwf	?_stristr& (0+255),b
 13191  00098A  0E7F               	movlw	high STR_20
 13192  00098C  6F69               	movwf	(?_stristr+3)& (0+255),b
 13193  00098E  0E33               	movlw	low STR_20
 13194  000990  6F68               	movwf	(?_stristr+2)& (0+255),b
 13195  000992  EC42  F030         	call	_stristr	;wreg free
 13196  000996  EC27  F00F         	call	PL2	;call to abstracted procedure
 13197  00099A  E104               	bnz	u19935
 13198  00099C  0100               	movlb	0	; () banked
 13199  00099E  5166               	movf	?_stristr& (0+255),w,b
 13200  0009A0  0101               	movlb	1	; () banked
 13201  0009A2  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13202  0009A4                     u19935:
 13203  0009A4  E161               	bnz	l15588
 13204                           
 13205                           ; BSR set to: 1
 13206                           ;main.c: 726: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 13207  0009A6  506F               	movf	3951,w,c	;volatile
 13208  0009A8  0BE0               	andlw	224
 13209  0009AA  0102               	movlb	2	; () banked
 13210  0009AC  6FC9               	movwf	doModeVerbose@ifmode& (0+255),b
 13211                           
 13212                           ; BSR set to: 2
 13213                           ;main.c: 727: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 13214  0009AE  67C9               	tstfsz	doModeVerbose@ifmode& (0+255),b
 13215  0009B0  D00B               	goto	l15562
 13216                           
 13217                           ; BSR set to: 2
 13218  0009B2  0101               	movlb	1	; () banked
 13219  0009B4  6702               	tstfsz	_bSilent& (0+255),b
 13220  0009B6  D008               	goto	l15562
 13221                           
 13222                           ; BSR set to: 1
 13223                           ;main.c: 728: putsUSART((char *) "+OK - Normal mode\r\n");
 13224  0009B8  0E7D               	movlw	high STR_21
 13225  0009BA  6E21               	movwf	?_putsUSART+1,c
 13226  0009BC  0E0D               	movlw	low STR_21
 13227  0009BE  6E20               	movwf	?_putsUSART,c
 13228  0009C0  ECDF  F032         	call	_putsUSART	;wreg free
 13229                           
 13230                           ;main.c: 729: }
 13231  0009C4  EF1B  F00F         	goto	l16372
 13232  0009C8                     l15562:
 13233                           
 13234                           ;main.c: 730: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 13235  0009C8  0102               	movlb	2	; () banked
 13236  0009CA  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13237  0009CC  0E01               	movlw	1
 13238  0009CE  A4D8               	btfss	status,2,c
 13239  0009D0  0E00               	movlw	0
 13240  0009D2  0101               	movlb	1	; () banked
 13241  0009D4  1502               	andwf	_bSilent& (0+255),w,b
 13242  0009D6  E008               	bz	l15566
 13243                           
 13244                           ; BSR set to: 1
 13245                           ;main.c: 731: putsUSART((char *) "+OK - Silent mode\r\n");
 13246  0009D8  0E7D               	movlw	high STR_22
 13247  0009DA  6E21               	movwf	?_putsUSART+1,c
 13248  0009DC  0E21               	movlw	low STR_22
 13249  0009DE  6E20               	movwf	?_putsUSART,c
 13250  0009E0  ECDF  F032         	call	_putsUSART	;wreg free
 13251                           
 13252                           ;main.c: 732: }
 13253  0009E4  EF1B  F00F         	goto	l16372
 13254  0009E8                     l15566:
 13255                           
 13256                           ; BSR set to: 1
 13257                           ;main.c: 733: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 13258  0009E8  0102               	movlb	2	; () banked
 13259  0009EA  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13260  0009EC  0A20               	xorlw	32
 13261  0009EE  E108               	bnz	l15570
 13262                           
 13263                           ; BSR set to: 2
 13264                           ;main.c: 734: putsUSART((char *) "+OK - Sleep mode\r\n");
 13265  0009F0  0E7D               	movlw	high STR_23
 13266  0009F2  6E21               	movwf	?_putsUSART+1,c
 13267  0009F4  0E5D               	movlw	low STR_23
 13268  0009F6  6E20               	movwf	?_putsUSART,c
 13269  0009F8  ECDF  F032         	call	_putsUSART	;wreg free
 13270                           
 13271                           ;main.c: 735: }
 13272  0009FC  EF1B  F00F         	goto	l16372
 13273  000A00                     l15570:
 13274                           
 13275                           ; BSR set to: 2
 13276                           ;main.c: 736: else if (ECAN_OP_MODE_LOOP == ifmode) {
 13277  000A00  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13278  000A02  0A40               	xorlw	64
 13279  000A04  E108               	bnz	l15574
 13280                           
 13281                           ; BSR set to: 2
 13282                           ;main.c: 737: putsUSART((char *) "+OK - Loopback mode\r\n");
 13283  000A06  0E7C               	movlw	high STR_24
 13284  000A08  6E21               	movwf	?_putsUSART+1,c
 13285  000A0A  0E4F               	movlw	low STR_24
 13286  000A0C  6E20               	movwf	?_putsUSART,c
 13287  000A0E  ECDF  F032         	call	_putsUSART	;wreg free
 13288                           
 13289                           ;main.c: 738: }
 13290  000A12  EF1B  F00F         	goto	l16372
 13291  000A16                     l15574:
 13292                           
 13293                           ; BSR set to: 2
 13294                           ;main.c: 739: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 13295  000A16  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13296  000A18  0A60               	xorlw	96
 13297  000A1A  E108               	bnz	l15578
 13298                           
 13299                           ; BSR set to: 2
 13300                           ;main.c: 740: putsUSART((char *) "+OK - Listen only mode\r\n");
 13301  000A1C  0E7A               	movlw	high STR_25
 13302  000A1E  6E21               	movwf	?_putsUSART+1,c
 13303  000A20  0EE8               	movlw	low STR_25
 13304  000A22  6E20               	movwf	?_putsUSART,c
 13305  000A24  ECDF  F032         	call	_putsUSART	;wreg free
 13306                           
 13307                           ;main.c: 741: }
 13308  000A28  EF1B  F00F         	goto	l16372
 13309  000A2C                     l15578:
 13310                           
 13311                           ; BSR set to: 2
 13312                           ;main.c: 742: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 13313  000A2C  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13314  000A2E  0A80               	xorlw	128
 13315  000A30  E108               	bnz	l15582
 13316                           
 13317                           ; BSR set to: 2
 13318                           ;main.c: 743: putsUSART((char *) "+OK - Closed mode\r\n");
 13319  000A32  0E7C               	movlw	high STR_26
 13320  000A34  6E21               	movwf	?_putsUSART+1,c
 13321  000A36  0EF9               	movlw	low STR_26
 13322  000A38  6E20               	movwf	?_putsUSART,c
 13323  000A3A  ECDF  F032         	call	_putsUSART	;wreg free
 13324                           
 13325                           ;main.c: 744: }
 13326  000A3E  EF1B  F00F         	goto	l16372
 13327  000A42                     l15582:
 13328                           
 13329                           ; BSR set to: 2
 13330                           ;main.c: 745: else if (ECAN_OP_MODE_BITS == ifmode) {
 13331  000A42  51C9               	movf	doModeVerbose@ifmode& (0+255),w,b
 13332  000A44  0AE0               	xorlw	224
 13333  000A46  E108               	bnz	l15586
 13334                           
 13335                           ; BSR set to: 2
 13336                           ;main.c: 746: putsUSART((char *) "+OK - Bits mode\r\n");
 13337  000A48  0E7D               	movlw	high STR_27
 13338  000A4A  6E21               	movwf	?_putsUSART+1,c
 13339  000A4C  0E70               	movlw	low STR_27
 13340  000A4E  6E20               	movwf	?_putsUSART,c
 13341  000A50  ECDF  F032         	call	_putsUSART	;wreg free
 13342                           
 13343                           ;main.c: 747: }
 13344  000A54  EF1B  F00F         	goto	l16372
 13345  000A58                     l15586:
 13346                           
 13347                           ; BSR set to: 2
 13348                           ;main.c: 748: else {
 13349                           ;main.c: 749: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 13350  000A58  0E7B               	movlw	high STR_28
 13351  000A5A  6E21               	movwf	?_putsUSART+1,c
 13352  000A5C  0E7B               	movlw	low STR_28
 13353  000A5E  6E20               	movwf	?_putsUSART,c
 13354  000A60  ECDF  F032         	call	_putsUSART	;wreg free
 13355  000A64  EF1B  F00F         	goto	l16372
 13356  000A68                     l15588:
 13357                           
 13358                           ; BSR set to: 1
 13359                           ;main.c: 754: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 13360  000A68  0E01               	movlw	high _cmdbuf
 13361  000A6A  0100               	movlb	0	; () banked
 13362  000A6C  6F67               	movwf	(?_stristr+1)& (0+255),b
 13363  000A6E  0E05               	movlw	low _cmdbuf
 13364  000A70  6F66               	movwf	?_stristr& (0+255),b
 13365  000A72  0E7F               	movlw	high STR_29
 13366  000A74  6F69               	movwf	(?_stristr+3)& (0+255),b
 13367  000A76  0EEA               	movlw	low STR_29
 13368  000A78  6F68               	movwf	(?_stristr+2)& (0+255),b
 13369  000A7A  EC42  F030         	call	_stristr	;wreg free
 13370  000A7E  EC27  F00F         	call	PL2	;call to abstracted procedure
 13371  000A82  E104               	bnz	u20035
 13372  000A84  0100               	movlb	0	; () banked
 13373  000A86  5166               	movf	?_stristr& (0+255),w,b
 13374  000A88  0101               	movlb	1	; () banked
 13375  000A8A  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13376  000A8C                     u20035:
 13377  000A8C  E001 D0D9          	bnz	l15642
 13378                           
 13379                           ; BSR set to: 1
 13380                           ;main.c: 756: char *p = strtok(cmdbuf, ",");
 13381  000A90  EC88  F00F         	call	PL38	;call to abstracted procedure
 13382  000A94  ECEE  F02E         	call	_strtok	;wreg free
 13383  000A98  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13384  000A9C  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13385                           
 13386                           ; BSR set to: 0
 13387                           ;main.c: 759: vscpPriority = 3;
 13388  000AA0  0E03               	movlw	3
 13389  000AA2  0101               	movlb	1	; () banked
 13390  000AA4  6FB0               	movwf	_vscpPriority& (0+255),b
 13391                           
 13392                           ; BSR set to: 1
 13393                           ;main.c: 760: if ((0) != p) {
 13394  000AA6  0102               	movlb	2	; () banked
 13395  000AA8  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13396  000AAA  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13397  000AAC  E009               	bz	l15598
 13398                           
 13399                           ; BSR set to: 2
 13400                           ;main.c: 761: vscpPriority = atoi(p);
 13401  000AAE  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13402  000AB2  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13403  000AB6  ECD0  F026         	call	_atoi	;wreg free
 13404  000ABA  5162               	movf	?_atoi& (0+255),w,b
 13405  000ABC  0101               	movlb	1	; () banked
 13406  000ABE  6FB0               	movwf	_vscpPriority& (0+255),b
 13407  000AC0                     l15598:
 13408                           
 13409                           ;main.c: 762: }
 13410                           ;main.c: 765: vscpClass = 0;
 13411  000AC0  0101               	movlb	1	; () banked
 13412  000AC2  6BAD               	clrf	_vscpClass& (0+255),b
 13413  000AC4  6BAE               	clrf	(_vscpClass+1)& (0+255),b
 13414                           
 13415                           ; BSR set to: 1
 13416                           ;main.c: 766: if ((0) != (p = strtok((0), ","))) {
 13417  000AC6  EC31  F00F         	call	PL4	;call to abstracted procedure
 13418  000ACA  ECEE  F02E         	call	_strtok	;wreg free
 13419  000ACE  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13420  000AD2  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13421  000AD6  0102               	movlb	2	; () banked
 13422  000AD8  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13423  000ADA  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13424  000ADC  E00A               	bz	l15604
 13425                           
 13426                           ; BSR set to: 2
 13427                           ;main.c: 767: vscpClass = atoi(p);
 13428  000ADE  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13429  000AE2  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13430  000AE6  ECD0  F026         	call	_atoi	;wreg free
 13431  000AEA  C062  F1AD         	movff	?_atoi,_vscpClass
 13432  000AEE  C063  F1AE         	movff	?_atoi+1,_vscpClass+1
 13433  000AF2                     l15604:
 13434                           
 13435                           ;main.c: 768: }
 13436                           ;main.c: 771: vscpType = 0;
 13437  000AF2  0101               	movlb	1	; () banked
 13438  000AF4  6BB2               	clrf	_vscpType& (0+255),b
 13439                           
 13440                           ; BSR set to: 1
 13441                           ;main.c: 772: if ((0) != (p = strtok((0), ","))) {
 13442  000AF6  EC31  F00F         	call	PL4	;call to abstracted procedure
 13443  000AFA  ECEE  F02E         	call	_strtok	;wreg free
 13444  000AFE  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13445  000B02  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13446  000B06  0102               	movlb	2	; () banked
 13447  000B08  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13448  000B0A  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13449  000B0C  E009               	bz	l15610
 13450                           
 13451                           ; BSR set to: 2
 13452                           ;main.c: 773: vscpType = atoi(p);
 13453  000B0E  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13454  000B12  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13455  000B16  ECD0  F026         	call	_atoi	;wreg free
 13456  000B1A  5162               	movf	?_atoi& (0+255),w,b
 13457  000B1C  0101               	movlb	1	; () banked
 13458  000B1E  6FB2               	movwf	_vscpType& (0+255),b
 13459  000B20                     l15610:
 13460                           
 13461                           ;main.c: 774: }
 13462                           ;main.c: 777: vscpNodeId = 0;
 13463  000B20  0101               	movlb	1	; () banked
 13464  000B22  6BAF               	clrf	_vscpNodeId& (0+255),b
 13465                           
 13466                           ; BSR set to: 1
 13467                           ;main.c: 778: if ((0) != (p = strtok((0), ","))) {
 13468  000B24  EC31  F00F         	call	PL4	;call to abstracted procedure
 13469  000B28  ECEE  F02E         	call	_strtok	;wreg free
 13470  000B2C  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13471  000B30  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13472  000B34  0102               	movlb	2	; () banked
 13473  000B36  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13474  000B38  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13475  000B3A  E009               	bz	l15616
 13476                           
 13477                           ; BSR set to: 2
 13478                           ;main.c: 779: vscpNodeId = atoi(p);
 13479  000B3C  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13480  000B40  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13481  000B44  ECD0  F026         	call	_atoi	;wreg free
 13482  000B48  5162               	movf	?_atoi& (0+255),w,b
 13483  000B4A  0101               	movlb	1	; () banked
 13484  000B4C  6FAF               	movwf	_vscpNodeId& (0+255),b
 13485  000B4E                     l15616:
 13486                           
 13487                           ;main.c: 780: }
 13488                           ;main.c: 783: vscpSize = 0;
 13489  000B4E  0101               	movlb	1	; () banked
 13490  000B50  6BB1               	clrf	_vscpSize& (0+255),b
 13491                           
 13492                           ; BSR set to: 1
 13493                           ;main.c: 784: if ((0) != (p = strtok((0), ","))) {
 13494  000B52  EC31  F00F         	call	PL4	;call to abstracted procedure
 13495  000B56  ECEE  F02E         	call	_strtok	;wreg free
 13496  000B5A  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13497  000B5E  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13498  000B62  0102               	movlb	2	; () banked
 13499  000B64  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13500  000B66  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13501  000B68  E009               	bz	l15622
 13502                           
 13503                           ; BSR set to: 2
 13504                           ;main.c: 785: vscpSize = atoi(p);
 13505  000B6A  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13506  000B6E  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13507  000B72  ECD0  F026         	call	_atoi	;wreg free
 13508  000B76  5162               	movf	?_atoi& (0+255),w,b
 13509  000B78  0101               	movlb	1	; () banked
 13510  000B7A  6FB1               	movwf	_vscpSize& (0+255),b
 13511  000B7C                     l15622:
 13512                           
 13513                           ;main.c: 786: }
 13514                           ;main.c: 788: memset( vscpData, 0, 8 );
 13515  000B7C  0101               	movlb	1	; () banked
 13516  000B7E  0E01               	movlw	high _vscpData
 13517  000B80  6E20               	movwf	?_memset+1,c
 13518  000B82  0EA5               	movlw	low _vscpData
 13519  000B84  6E1F               	movwf	?_memset,c
 13520  000B86  6A22               	clrf	?_memset+3,c
 13521  000B88  6A21               	clrf	?_memset+2,c
 13522  000B8A  6A24               	clrf	?_memset+5,c
 13523  000B8C  0E08               	movlw	8
 13524  000B8E  6E23               	movwf	?_memset+4,c
 13525  000B90  EC0E  F035         	call	_memset	;wreg free
 13526                           
 13527                           ;main.c: 789: for (i = 0; i < vscpSize; i++) {
 13528  000B94  0102               	movlb	2	; () banked
 13529  000B96  6BB9               	clrf	doModeVerbose@i& (0+255),b
 13530  000B98  D01D               	goto	l15632
 13531  000B9A                     l15626:
 13532                           
 13533                           ; BSR set to: 2
 13534                           ;main.c: 790: if ((0) != (p = strtok((0), ","))) {
 13535  000B9A  EC31  F00F         	call	PL4	;call to abstracted procedure
 13536  000B9E  ECEE  F02E         	call	_strtok	;wreg free
 13537  000BA2  C064  F2CA         	movff	?_strtok,doModeVerbose@p
 13538  000BA6  C065  F2CB         	movff	?_strtok+1,doModeVerbose@p+1
 13539  000BAA  0102               	movlb	2	; () banked
 13540  000BAC  51CB               	movf	(doModeVerbose@p+1)& (0+255),w,b
 13541  000BAE  11CA               	iorwf	doModeVerbose@p& (0+255),w,b
 13542  000BB0  E016               	bz	l15634
 13543                           
 13544                           ; BSR set to: 2
 13545                           ;main.c: 791: vscpData[ i ] = atoi(p);
 13546  000BB2  0EA5               	movlw	low _vscpData
 13547  000BB4  25B9               	addwf	doModeVerbose@i& (0+255),w,b
 13548  000BB6  6ED9               	movwf	fsr2l,c
 13549  000BB8  6ADA               	clrf	fsr2h,c
 13550  000BBA  0101               	movlb	1	; () banked
 13551  000BBC  0E01               	movlw	high _vscpData
 13552  000BBE  22DA               	addwfc	fsr2h,f,c
 13553  000BC0  C2CA  F062         	movff	doModeVerbose@p,?_atoi
 13554  000BC4  C2CB  F063         	movff	doModeVerbose@p+1,?_atoi+1
 13555  000BC8  ECD0  F026         	call	_atoi	;wreg free
 13556  000BCC  5162               	movf	?_atoi& (0+255),w,b
 13557  000BCE  6EDF               	movwf	indf2,c
 13558                           
 13559                           ; BSR set to: 0
 13560                           
 13561                           ;main.c: 792: }
 13562  000BD0  0102               	movlb	2	; () banked
 13563  000BD2  2BB9               	incf	doModeVerbose@i& (0+255),f,b
 13564  000BD4                     l15632:
 13565                           
 13566                           ; BSR set to: 2
 13567  000BD4  0101               	movlb	1	; () banked
 13568  000BD6  51B1               	movf	_vscpSize& (0+255),w,b
 13569  000BD8  0102               	movlb	2	; () banked
 13570  000BDA  5DB9               	subwf	doModeVerbose@i& (0+255),w,b
 13571  000BDC  E3DE               	bnc	l15626
 13572  000BDE                     l15634:
 13573                           
 13574                           ; BSR set to: 2
 13575                           ;main.c: 795: }
 13576                           ;main.c: 796: }
 13577                           ;main.c: 798: if ( sendVSCPFrame(vscpClass,
 13578                           ;main.c: 799: vscpType,
 13579                           ;main.c: 800: vscpNodeId,
 13580                           ;main.c: 801: vscpPriority,
 13581                           ;main.c: 802: vscpSize,
 13582                           ;main.c: 803: vscpData ) ) {
 13583  000BDE  C1AD  F08F         	movff	_vscpClass,?_sendVSCPFrame
 13584  000BE2  C1AE  F090         	movff	_vscpClass+1,?_sendVSCPFrame+1
 13585  000BE6  C1B2  F091         	movff	_vscpType,?_sendVSCPFrame+2
 13586  000BEA  C1AF  F092         	movff	_vscpNodeId,?_sendVSCPFrame+3
 13587  000BEE  C1B0  F093         	movff	_vscpPriority,?_sendVSCPFrame+4
 13588  000BF2  C1B1  F094         	movff	_vscpSize,?_sendVSCPFrame+5
 13589  000BF6  0E01               	movlw	high _vscpData
 13590  000BF8  0100               	movlb	0	; () banked
 13591  000BFA  6F96               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 13592  000BFC  0EA5               	movlw	low _vscpData
 13593  000BFE  6F95               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 13594  000C00  EC06  F02C         	call	_sendVSCPFrame	;wreg free
 13595  000C04  0900               	iorlw	0
 13596  000C06  E015               	bz	l15640
 13597                           
 13598                           ; BSR set to: 0
 13599                           ;main.c: 805: cntTxFrames++;
 13600  000C08  2BDA               	incf	_cntTxFrames& (0+255),f,b
 13601  000C0A  0E00               	movlw	0
 13602  000C0C  23DB               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 13603  000C0E  23DC               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 13604  000C10  23DD               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 13605                           
 13606                           ;main.c: 806: cntTxBytes += vscpSize;
 13607  000C12  0101               	movlb	1	; () banked
 13608  000C14  51B1               	movf	_vscpSize& (0+255),w,b
 13609  000C16  0100               	movlb	0	; () banked
 13610  000C18  27D6               	addwf	_cntTxBytes& (0+255),f,b
 13611  000C1A  0E00               	movlw	0
 13612  000C1C  23D7               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 13613  000C1E  23D8               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 13614  000C20  23D9               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 13615                           
 13616                           ; BSR set to: 0
 13617                           ;main.c: 807: putsUSART((char *) "+OK\r\n");
 13618  000C22  0E7F               	movlw	high STR_9
 13619  000C24  6E21               	movwf	?_putsUSART+1,c
 13620  000C26  0E6A               	movlw	low STR_9
 13621  000C28  6E20               	movwf	?_putsUSART,c
 13622  000C2A  ECDF  F032         	call	_putsUSART	;wreg free
 13623                           
 13624                           ;main.c: 808: }
 13625  000C2E  EF1B  F00F         	goto	l16372
 13626  000C32                     l15640:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;main.c: 809: else {
 13630                           ;main.c: 810: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 13631  000C32  0E79               	movlw	high STR_37
 13632  000C34  6E21               	movwf	?_putsUSART+1,c
 13633  000C36  0E4B               	movlw	low STR_37
 13634  000C38  6E20               	movwf	?_putsUSART,c
 13635  000C3A  ECDF  F032         	call	_putsUSART	;wreg free
 13636  000C3E  EF1B  F00F         	goto	l16372
 13637  000C42                     l15642:
 13638                           
 13639                           ; BSR set to: 1
 13640                           ;main.c: 814: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 13641  000C42  0E01               	movlw	high _cmdbuf
 13642  000C44  0100               	movlb	0	; () banked
 13643  000C46  6F67               	movwf	(?_stristr+1)& (0+255),b
 13644  000C48  0E05               	movlw	low _cmdbuf
 13645  000C4A  6F66               	movwf	?_stristr& (0+255),b
 13646  000C4C  0E7F               	movlw	high STR_38
 13647  000C4E  6F69               	movwf	(?_stristr+3)& (0+255),b
 13648  000C50  0EE7               	movlw	low STR_38
 13649  000C52  6F68               	movwf	(?_stristr+2)& (0+255),b
 13650  000C54  EC42  F030         	call	_stristr	;wreg free
 13651  000C58  EC27  F00F         	call	PL2	;call to abstracted procedure
 13652  000C5C  E104               	bnz	u20125
 13653  000C5E  0100               	movlb	0	; () banked
 13654  000C60  5166               	movf	?_stristr& (0+255),w,b
 13655  000C62  0101               	movlb	1	; () banked
 13656  000C64  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13657  000C66                     u20125:
 13658  000C66  E114               	bnz	l15650
 13659                           
 13660                           ; BSR set to: 1
 13661                           ;main.c: 815: if (receivePrintEventVerbose()) {
 13662  000C68  EC7C  F017         	call	_receivePrintEventVerbose	;wreg free
 13663  000C6C  0900               	iorlw	0
 13664  000C6E  E008               	bz	l15648
 13665                           
 13666                           ;main.c: 816: putsUSART((char *) "+OK\r\n");
 13667  000C70  0E7F               	movlw	high STR_9
 13668  000C72  6E21               	movwf	?_putsUSART+1,c
 13669  000C74  0E6A               	movlw	low STR_9
 13670  000C76  6E20               	movwf	?_putsUSART,c
 13671  000C78  ECDF  F032         	call	_putsUSART	;wreg free
 13672                           
 13673                           ;main.c: 817: }
 13674  000C7C  EF1B  F00F         	goto	l16372
 13675  000C80                     l15648:
 13676                           
 13677                           ;main.c: 818: else {
 13678                           ;main.c: 819: putsUSART((char *) "+OK - no events\r\n");
 13679  000C80  0E7D               	movlw	high STR_40
 13680  000C82  6E21               	movwf	?_putsUSART+1,c
 13681  000C84  0E82               	movlw	low STR_40
 13682  000C86  6E20               	movwf	?_putsUSART,c
 13683  000C88  ECDF  F032         	call	_putsUSART	;wreg free
 13684  000C8C  EF1B  F00F         	goto	l16372
 13685  000C90                     l15650:
 13686                           
 13687                           ; BSR set to: 1
 13688                           ;main.c: 823: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 13689  000C90  0E01               	movlw	high _cmdbuf
 13690  000C92  0100               	movlb	0	; () banked
 13691  000C94  6F67               	movwf	(?_stristr+1)& (0+255),b
 13692  000C96  0E05               	movlw	low _cmdbuf
 13693  000C98  6F66               	movwf	?_stristr& (0+255),b
 13694  000C9A  0E7F               	movlw	high STR_41
 13695  000C9C  6F69               	movwf	(?_stristr+3)& (0+255),b
 13696  000C9E  0EBB               	movlw	low STR_41
 13697  000CA0  6F68               	movwf	(?_stristr+2)& (0+255),b
 13698  000CA2  EC42  F030         	call	_stristr	;wreg free
 13699  000CA6  EC27  F00F         	call	PL2	;call to abstracted procedure
 13700  000CAA  E104               	bnz	u20145
 13701  000CAC  0100               	movlb	0	; () banked
 13702  000CAE  5166               	movf	?_stristr& (0+255),w,b
 13703  000CB0  0101               	movlb	1	; () banked
 13704  000CB2  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13705  000CB4                     u20145:
 13706  000CB4  E10A               	bnz	l15656
 13707                           
 13708                           ; BSR set to: 1
 13709                           ;main.c: 824: printStatistics();
 13710  000CB6  ECF9  F020         	call	_printStatistics	;wreg free
 13711                           
 13712                           ;main.c: 825: putsUSART((char *) "+OK\r\n");
 13713  000CBA  0E7F               	movlw	high STR_9
 13714  000CBC  6E21               	movwf	?_putsUSART+1,c
 13715  000CBE  0E6A               	movlw	low STR_9
 13716  000CC0  6E20               	movwf	?_putsUSART,c
 13717  000CC2  ECDF  F032         	call	_putsUSART	;wreg free
 13718                           
 13719                           ;main.c: 826: }
 13720  000CC6  EF1B  F00F         	goto	l16372
 13721  000CCA                     l15656:
 13722                           
 13723                           ; BSR set to: 1
 13724                           ;main.c: 828: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 13725  000CCA  0E01               	movlw	high _cmdbuf
 13726  000CCC  0100               	movlb	0	; () banked
 13727  000CCE  6F67               	movwf	(?_stristr+1)& (0+255),b
 13728  000CD0  0E05               	movlw	low _cmdbuf
 13729  000CD2  6F66               	movwf	?_stristr& (0+255),b
 13730  000CD4  0E7F               	movlw	high STR_43
 13731  000CD6  6F69               	movwf	(?_stristr+3)& (0+255),b
 13732  000CD8  0ED5               	movlw	low STR_43
 13733  000CDA  6F68               	movwf	(?_stristr+2)& (0+255),b
 13734  000CDC  EC42  F030         	call	_stristr	;wreg free
 13735  000CE0  EC27  F00F         	call	PL2	;call to abstracted procedure
 13736  000CE4  E104               	bnz	u20155
 13737  000CE6  0100               	movlb	0	; () banked
 13738  000CE8  5166               	movf	?_stristr& (0+255),w,b
 13739  000CEA  0101               	movlb	1	; () banked
 13740  000CEC  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13741  000CEE                     u20155:
 13742  000CEE  E10A               	bnz	l15662
 13743                           
 13744                           ; BSR set to: 1
 13745                           ;main.c: 829: printErrors();
 13746  000CF0  EC2B  F019         	call	_printErrors	;wreg free
 13747                           
 13748                           ;main.c: 830: putsUSART((char *) "+OK\r\n");
 13749  000CF4  0E7F               	movlw	high STR_9
 13750  000CF6  6E21               	movwf	?_putsUSART+1,c
 13751  000CF8  0E6A               	movlw	low STR_9
 13752  000CFA  6E20               	movwf	?_putsUSART,c
 13753  000CFC  ECDF  F032         	call	_putsUSART	;wreg free
 13754                           
 13755                           ;main.c: 831: }
 13756  000D00  EF1B  F00F         	goto	l16372
 13757  000D04                     l15662:
 13758                           
 13759                           ; BSR set to: 1
 13760                           ;main.c: 833: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 13761  000D04  0E01               	movlw	high _cmdbuf
 13762  000D06  0100               	movlb	0	; () banked
 13763  000D08  6F67               	movwf	(?_stristr+1)& (0+255),b
 13764  000D0A  0E05               	movlw	low _cmdbuf
 13765  000D0C  6F66               	movwf	?_stristr& (0+255),b
 13766  000D0E  0E7F               	movlw	high STR_45
 13767  000D10  6F69               	movwf	(?_stristr+3)& (0+255),b
 13768  000D12  0EB6               	movlw	low STR_45
 13769  000D14  6F68               	movwf	(?_stristr+2)& (0+255),b
 13770  000D16  EC42  F030         	call	_stristr	;wreg free
 13771  000D1A  EC27  F00F         	call	PL2	;call to abstracted procedure
 13772  000D1E  E104               	bnz	u20165
 13773  000D20  0100               	movlb	0	; () banked
 13774  000D22  5166               	movf	?_stristr& (0+255),w,b
 13775  000D24  0101               	movlb	1	; () banked
 13776  000D26  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13777  000D28                     u20165:
 13778  000D28  E10A               	bnz	l15666
 13779                           
 13780                           ; BSR set to: 1
 13781                           ;main.c: 834: printHelp();
 13782  000D2A  EC8B  F022         	call	_printHelp	;wreg free
 13783                           
 13784                           ;main.c: 835: putsUSART((char *) "+OK\r\n");
 13785  000D2E  0E7F               	movlw	high STR_9
 13786  000D30  6E21               	movwf	?_putsUSART+1,c
 13787  000D32  0E6A               	movlw	low STR_9
 13788  000D34  6E20               	movwf	?_putsUSART,c
 13789  000D36  ECDF  F032         	call	_putsUSART	;wreg free
 13790                           
 13791                           ;main.c: 836: }
 13792  000D3A  EF1B  F00F         	goto	l16372
 13793  000D3E                     l15666:
 13794                           
 13795                           ; BSR set to: 1
 13796                           ;main.c: 838: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 13797  000D3E  0E01               	movlw	high _cmdbuf
 13798  000D40  0100               	movlb	0	; () banked
 13799  000D42  6F67               	movwf	(?_stristr+1)& (0+255),b
 13800  000D44  0E05               	movlw	low _cmdbuf
 13801  000D46  6F66               	movwf	?_stristr& (0+255),b
 13802  000D48  0E7F               	movlw	high STR_47
 13803  000D4A  6F69               	movwf	(?_stristr+3)& (0+255),b
 13804  000D4C  0E93               	movlw	low STR_47
 13805  000D4E  6F68               	movwf	(?_stristr+2)& (0+255),b
 13806  000D50  EC42  F030         	call	_stristr	;wreg free
 13807  000D54  EC27  F00F         	call	PL2	;call to abstracted procedure
 13808  000D58  E104               	bnz	u20175
 13809  000D5A  0100               	movlb	0	; () banked
 13810  000D5C  5166               	movf	?_stristr& (0+255),w,b
 13811  000D5E  0101               	movlb	1	; () banked
 13812  000D60  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13813  000D62                     u20175:
 13814  000D62  E10A               	bnz	l15672
 13815                           
 13816                           ; BSR set to: 1
 13817                           ;main.c: 839: findNodes();
 13818  000D64  EC02  F024         	call	_findNodes	;wreg free
 13819                           
 13820                           ;main.c: 840: putsUSART((char *) "+OK\r\n");
 13821  000D68  0E7F               	movlw	high STR_9
 13822  000D6A  6E21               	movwf	?_putsUSART+1,c
 13823  000D6C  0E6A               	movlw	low STR_9
 13824  000D6E  6E20               	movwf	?_putsUSART,c
 13825  000D70  ECDF  F032         	call	_putsUSART	;wreg free
 13826                           
 13827                           ;main.c: 841: }
 13828  000D74  EF1B  F00F         	goto	l16372
 13829  000D78                     l15672:
 13830                           
 13831                           ; BSR set to: 1
 13832                           ;main.c: 844: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 13833  000D78  0E01               	movlw	high _cmdbuf
 13834  000D7A  0100               	movlb	0	; () banked
 13835  000D7C  6F67               	movwf	(?_stristr+1)& (0+255),b
 13836  000D7E  0E05               	movlw	low _cmdbuf
 13837  000D80  6F66               	movwf	?_stristr& (0+255),b
 13838  000D82  0E7F               	movlw	high STR_49
 13839  000D84  6F69               	movwf	(?_stristr+3)& (0+255),b
 13840  000D86  0E98               	movlw	low STR_49
 13841  000D88  6F68               	movwf	(?_stristr+2)& (0+255),b
 13842  000D8A  EC42  F030         	call	_stristr	;wreg free
 13843  000D8E  EC27  F00F         	call	PL2	;call to abstracted procedure
 13844  000D92  E104               	bnz	u20185
 13845  000D94  0100               	movlb	0	; () banked
 13846  000D96  5166               	movf	?_stristr& (0+255),w,b
 13847  000D98  0101               	movlb	1	; () banked
 13848  000D9A  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 13849  000D9C                     u20185:
 13850  000D9C  E001 D213          	bnz	l15840
 13851                           
 13852                           ; BSR set to: 1
 13853                           ;main.c: 846: uint8_t i;
 13854                           ;main.c: 847: uint8_t nodeid;
 13855                           ;main.c: 848: uint8_t page = 0;
 13856  000DA0  0102               	movlb	2	; () banked
 13857  000DA2  6BBF               	clrf	doModeVerbose@page& (0+255),b
 13858                           
 13859                           ; BSR set to: 2
 13860                           ;main.c: 849: uint8_t reg;
 13861                           ;main.c: 850: uint8_t value;
 13862                           ;main.c: 851: uint8_t count = 1;
 13863  000DA4  0E01               	movlw	1
 13864  000DA6  6FBB               	movwf	doModeVerbose@count& (0+255),b
 13865                           
 13866                           ; BSR set to: 2
 13867                           ;main.c: 853: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 13868  000DA8  506F               	movf	3951,w,c	;volatile
 13869  000DAA  0BE0               	andlw	224
 13870  000DAC  E012               	bz	l15688
 13871                           
 13872                           ; BSR set to: 2
 13873                           ;main.c: 854: putsUSART( (char *)"-ERROR - Command only works if interface is open.\r\n"
      +                           );
 13874  000DAE  0E73               	movlw	high STR_50
 13875  000DB0  6E21               	movwf	?_putsUSART+1,c
 13876  000DB2  0E13               	movlw	low STR_50
 13877  000DB4  6E20               	movwf	?_putsUSART,c
 13878  000DB6  ECDF  F032         	call	_putsUSART	;wreg free
 13879  000DBA                     l15682:
 13880                           
 13881                           ;main.c: 855: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 13882  000DBA  0101               	movlb	1	; () banked
 13883  000DBC  0E01               	movlw	high _cmdbuf
 13884  000DBE  6E20               	movwf	?_memset+1,c
 13885  000DC0  0E05               	movlw	low _cmdbuf
 13886  000DC2  ECE7  F02E         	call	PL30	;call to abstracted procedure
 13887  000DC6  EC0E  F035         	call	_memset	;wreg free
 13888                           
 13889                           ;main.c: 856: pos = 0;
 13890  000DCA  0101               	movlb	1	; () banked
 13891  000DCC  6B03               	clrf	_pos& (0+255),b
 13892  000DCE  EF26  F00F         	goto	l588
 13893  000DD2                     l15688:
 13894                           
 13895                           ; BSR set to: 2
 13896                           ;main.c: 858: }
 13897                           ;main.c: 860: strcpy(cmdbuf, cmdbuf + 5);
 13898  000DD2  0101               	movlb	1	; () banked
 13899  000DD4  EC40  F00F         	call	PL8	;call to abstracted procedure
 13900  000DD8  ECF7  F034         	call	_strcpy	;wreg free
 13901                           
 13902                           ; BSR set to: 1
 13903                           ;main.c: 861: char *p = strtok(cmdbuf, " ");
 13904  000DDC  0E01               	movlw	high _cmdbuf
 13905  000DDE  EC92  F00F         	call	PL48	;call to abstracted procedure
 13906  000DE2  ECEE  F02E         	call	_strtok	;wreg free
 13907  000DE6  C064  F2C5         	movff	?_strtok,doModeVerbose@p_1300
 13908  000DEA  C065  F2C6         	movff	?_strtok+1,doModeVerbose@p_1300+1
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;main.c: 862: if ((0) != p) {
 13912  000DEE  0102               	movlb	2	; () banked
 13913  000DF0  51C6               	movf	(doModeVerbose@p_1300+1)& (0+255),w,b
 13914  000DF2  11C5               	iorwf	doModeVerbose@p_1300& (0+255),w,b
 13915  000DF4  E00A               	bz	l15696
 13916                           
 13917                           ; BSR set to: 2
 13918                           ;main.c: 863: nodeid = atoi(p);
 13919  000DF6  C2C5  F062         	movff	doModeVerbose@p_1300,?_atoi
 13920  000DFA  C2C6  F063         	movff	doModeVerbose@p_1300+1,?_atoi+1
 13921  000DFE  ECD0  F026         	call	_atoi	;wreg free
 13922  000E02  5162               	movf	?_atoi& (0+255),w,b
 13923  000E04  0102               	movlb	2	; () banked
 13924  000E06  6FBC               	movwf	doModeVerbose@nodeid& (0+255),b
 13925                           
 13926                           ;main.c: 864: }
 13927  000E08  D007               	goto	l15704
 13928  000E0A                     l15696:
 13929                           
 13930                           ; BSR set to: 2
 13931                           ;main.c: 865: else {
 13932                           ;main.c: 866: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13933  000E0A  0E7B               	movlw	high STR_52
 13934  000E0C  6E21               	movwf	?_putsUSART+1,c
 13935  000E0E  0E63               	movlw	low STR_52
 13936  000E10  6E20               	movwf	?_putsUSART,c
 13937  000E12  ECDF  F032         	call	_putsUSART	;wreg free
 13938  000E16  D7D1               	goto	l15682
 13939  000E18                     l15704:
 13940                           
 13941                           ; BSR set to: 2
 13942                           ;main.c: 870: }
 13943                           ;main.c: 872: if ((0) != (p = strtok((0), " "))) {
 13944  000E18  EC80  F00F         	call	PL36	;call to abstracted procedure
 13945  000E1C  ECEE  F02E         	call	_strtok	;wreg free
 13946  000E20  C064  F2C5         	movff	?_strtok,doModeVerbose@p_1300
 13947  000E24  C065  F2C6         	movff	?_strtok+1,doModeVerbose@p_1300+1
 13948  000E28  0102               	movlb	2	; () banked
 13949  000E2A  51C6               	movf	(doModeVerbose@p_1300+1)& (0+255),w,b
 13950  000E2C  11C5               	iorwf	doModeVerbose@p_1300& (0+255),w,b
 13951  000E2E  E033               	bz	l15712
 13952                           
 13953                           ; BSR set to: 2
 13954                           ;main.c: 874: char *preg;
 13955                           ;main.c: 875: if (preg = strchr(p, ':')) {
 13956  000E30  C2C5  F01F         	movff	doModeVerbose@p_1300,?_strchr
 13957  000E34  C2C6  F020         	movff	doModeVerbose@p_1300+1,?_strchr+1
 13958  000E38  6A22               	clrf	?_strchr+3,c
 13959  000E3A  0E3A               	movlw	58
 13960  000E3C  6E21               	movwf	?_strchr+2,c
 13961  000E3E  EC58  F032         	call	_strchr	;wreg free
 13962  000E42  C01F  F28C         	movff	?_strchr,doModeVerbose@preg
 13963  000E46  C020  F28D         	movff	?_strchr+1,doModeVerbose@preg+1
 13964  000E4A  0102               	movlb	2	; () banked
 13965  000E4C  518D               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 13966  000E4E  118C               	iorwf	doModeVerbose@preg& (0+255),w,b
 13967  000E50  E018               	bz	l15710
 13968                           
 13969                           ; BSR set to: 2
 13970                           ;main.c: 876: page = atoi(p);
 13971  000E52  C2C5  F062         	movff	doModeVerbose@p_1300,?_atoi
 13972  000E56  C2C6  F063         	movff	doModeVerbose@p_1300+1,?_atoi+1
 13973  000E5A  ECD0  F026         	call	_atoi	;wreg free
 13974  000E5E  5162               	movf	?_atoi& (0+255),w,b
 13975  000E60  0102               	movlb	2	; () banked
 13976  000E62  6FBF               	movwf	doModeVerbose@page& (0+255),b
 13977                           
 13978                           ;main.c: 877: reg = atoi(preg + 1);
 13979  000E64  298C               	incf	doModeVerbose@preg& (0+255),w,b
 13980  000E66  0101               	movlb	1	; () banked
 13981  000E68  6FB3               	movwf	??_doModeVerbose& (0+255),b
 13982  000E6A  0E00               	movlw	0
 13983  000E6C  0102               	movlb	2	; () banked
 13984  000E6E  218D               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 13985  000E70  0101               	movlb	1	; () banked
 13986  000E72  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 13987  000E74  C1B3  F062         	movff	??_doModeVerbose,?_atoi
 13988  000E78  C1B4  F063         	movff	??_doModeVerbose+1,?_atoi+1
 13989  000E7C  ECD0  F026         	call	_atoi	;wreg free
 13990  000E80  D006               	goto	L7
 13991  000E82                     l15710:
 13992                           
 13993                           ; BSR set to: 2
 13994                           ;main.c: 879: else {
 13995                           ;main.c: 880: reg = atoi(p);
 13996  000E82  C2C5  F062         	movff	doModeVerbose@p_1300,?_atoi
 13997  000E86  C2C6  F063         	movff	doModeVerbose@p_1300+1,?_atoi+1
 13998  000E8A  ECD0  F026         	call	_atoi	;wreg free
 13999  000E8E                     L7:
 14000  000E8E  5162               	movf	?_atoi& (0+255),w,b
 14001  000E90  0102               	movlb	2	; () banked
 14002  000E92  6FC0               	movwf	doModeVerbose@reg& (0+255),b
 14003  000E94  D007               	goto	l15720
 14004  000E96                     l15712:
 14005                           
 14006                           ; BSR set to: 2
 14007                           ;main.c: 884: else {
 14008                           ;main.c: 885: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 14009  000E96  0E79               	movlw	high STR_54
 14010  000E98  6E21               	movwf	?_putsUSART+1,c
 14011  000E9A  0E8D               	movlw	low STR_54
 14012  000E9C  6E20               	movwf	?_putsUSART,c
 14013  000E9E  ECDF  F032         	call	_putsUSART	;wreg free
 14014  000EA2  D78B               	goto	l15682
 14015  000EA4                     l15720:
 14016                           
 14017                           ; BSR set to: 2
 14018                           ;main.c: 889: }
 14019                           ;main.c: 892: if ((0) != (p = strtok((0), " "))) {
 14020  000EA4  EC80  F00F         	call	PL36	;call to abstracted procedure
 14021  000EA8  ECEE  F02E         	call	_strtok	;wreg free
 14022  000EAC  C064  F2C5         	movff	?_strtok,doModeVerbose@p_1300
 14023  000EB0  C065  F2C6         	movff	?_strtok+1,doModeVerbose@p_1300+1
 14024  000EB4  0102               	movlb	2	; () banked
 14025  000EB6  51C6               	movf	(doModeVerbose@p_1300+1)& (0+255),w,b
 14026  000EB8  11C5               	iorwf	doModeVerbose@p_1300& (0+255),w,b
 14027  000EBA  E00D               	bz	l595
 14028                           
 14029                           ; BSR set to: 2
 14030                           ;main.c: 893: count = atoi(p);
 14031  000EBC  C2C5  F062         	movff	doModeVerbose@p_1300,?_atoi
 14032  000EC0  C2C6  F063         	movff	doModeVerbose@p_1300+1,?_atoi+1
 14033  000EC4  ECD0  F026         	call	_atoi	;wreg free
 14034  000EC8  5162               	movf	?_atoi& (0+255),w,b
 14035  000ECA  0102               	movlb	2	; () banked
 14036  000ECC  6FBB               	movwf	doModeVerbose@count& (0+255),b
 14037                           
 14038                           ; BSR set to: 2
 14039                           ;main.c: 894: if (0 == count) count = 1;
 14040  000ECE  67BB               	tstfsz	doModeVerbose@count& (0+255),b
 14041  000ED0  D002               	goto	l595
 14042                           
 14043                           ; BSR set to: 2
 14044  000ED2  0E01               	movlw	1
 14045  000ED4  6FBB               	movwf	doModeVerbose@count& (0+255),b
 14046  000ED6                     l595:
 14047                           
 14048                           ; BSR set to: 2
 14049                           ;main.c: 895: }
 14050                           ;main.c: 897: BOOL rv = 1;
 14051  000ED6  0E01               	movlw	1
 14052  000ED8  6FAF               	movwf	doModeVerbose@rv& (0+255),b
 14053                           
 14054                           ; BSR set to: 2
 14055                           ;main.c: 898: for ( i = 0; i < count; i++ ) {
 14056  000EDA  6BC1               	clrf	doModeVerbose@i_1293& (0+255),b
 14057  000EDC  D15E               	goto	l15832
 14058  000EDE                     l15730:
 14059                           
 14060                           ; BSR set to: 2
 14061                           ;main.c: 900: if ( readRegisterExtended( nodeid,
 14062                           ;main.c: 901: page,
 14063                           ;main.c: 902: (reg + i) & 0xff,
 14064                           ;main.c: 903: rwtimeout,
 14065                           ;main.c: 904: &value ) ) {
 14066  000EDE  0100               	movlb	0	; () banked
 14067  000EE0  C2BF  F0AF         	movff	doModeVerbose@page,?_readRegisterExtended
 14068  000EE4  6BB0               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14069  000EE6  0102               	movlb	2	; () banked
 14070  000EE8  51C0               	movf	doModeVerbose@reg& (0+255),w,b
 14071  000EEA  25C1               	addwf	doModeVerbose@i_1293& (0+255),w,b
 14072  000EEC  0100               	movlb	0	; () banked
 14073  000EEE  6FB1               	movwf	(?_readRegisterExtended+2)& (0+255),b
 14074  000EF0  C104  F0B2         	movff	_rwtimeout,?_readRegisterExtended+3
 14075  000EF4  6BB3               	clrf	(?_readRegisterExtended+4)& (0+255),b
 14076  000EF6  0E02               	movlw	high doModeVerbose@value
 14077  000EF8  6FB5               	movwf	(?_readRegisterExtended+6)& (0+255),b
 14078  000EFA  0EC4               	movlw	low doModeVerbose@value
 14079  000EFC  6FB4               	movwf	(?_readRegisterExtended+5)& (0+255),b
 14080  000EFE  0102               	movlb	2	; () banked
 14081  000F00  51BC               	movf	doModeVerbose@nodeid& (0+255),w,b
 14082  000F02  EC54  F027         	call	_readRegisterExtended
 14083  000F06  0900               	iorlw	0
 14084  000F08  E101 D0C7          	bz	l599
 14085                           
 14086                           ;main.c: 905: putsUSART((char *) "+OK - nodeid=");
 14087  000F0C  0E7E               	movlw	high STR_56
 14088  000F0E  6E21               	movwf	?_putsUSART+1,c
 14089  000F10  0E18               	movlw	low STR_56
 14090  000F12  6E20               	movwf	?_putsUSART,c
 14091  000F14  ECDF  F032         	call	_putsUSART	;wreg free
 14092                           
 14093                           ;main.c: 906: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 14094  000F18  0101               	movlb	1	; () banked
 14095  000F1A  6700               	tstfsz	_bHex& (0+255),b
 14096  000F1C  D005               	goto	l15738
 14097                           
 14098                           ; BSR set to: 1
 14099  000F1E  0E7F               	movlw	high STR_58
 14100  000F20  0102               	movlb	2	; () banked
 14101  000F22  6F9C               	movwf	(_doModeVerbose$1312+1)& (0+255),b
 14102  000F24  0E70               	movlw	low STR_58
 14103  000F26  D004               	goto	L8
 14104  000F28                     l15738:
 14105                           
 14106                           ; BSR set to: 1
 14107  000F28  0E7E               	movlw	high STR_57
 14108  000F2A  0102               	movlb	2	; () banked
 14109  000F2C  6F9C               	movwf	(_doModeVerbose$1312+1)& (0+255),b
 14110  000F2E  0E6A               	movlw	low STR_57
 14111  000F30                     L8:
 14112  000F30  6F9B               	movwf	_doModeVerbose$1312& (0+255),b
 14113                           
 14114                           ; BSR set to: 2
 14115  000F32  0E01               	movlw	high _wrkbuf
 14116  000F34  0100               	movlb	0	; () banked
 14117  000F36  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14118  000F38  0E55               	movlw	low _wrkbuf
 14119  000F3A  6F6D               	movwf	?_sprintf& (0+255),b
 14120  000F3C  C29B  F06F         	movff	_doModeVerbose$1312,?_sprintf+2
 14121  000F40  C29C  F070         	movff	_doModeVerbose$1312+1,?_sprintf+3
 14122  000F44  C2BC  F071         	movff	doModeVerbose@nodeid,?_sprintf+4
 14123  000F48  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14124  000F4A  EC14  F010         	call	_sprintf	;wreg free
 14125                           
 14126                           ; BSR set to: 0
 14127                           ;main.c: 907: putsUSART(wrkbuf);
 14128  000F4E  0101               	movlb	1	; () banked
 14129  000F50  0E01               	movlw	high _wrkbuf
 14130  000F52  6E21               	movwf	?_putsUSART+1,c
 14131  000F54  0E55               	movlw	low _wrkbuf
 14132  000F56  6E20               	movwf	?_putsUSART,c
 14133  000F58  ECDF  F032         	call	_putsUSART	;wreg free
 14134                           
 14135                           ;main.c: 908: putsUSART((char *) "Value for reg ");
 14136  000F5C  0E7D               	movlw	high STR_59
 14137  000F5E  6E21               	movwf	?_putsUSART+1,c
 14138  000F60  0EFB               	movlw	low STR_59
 14139  000F62  6E20               	movwf	?_putsUSART,c
 14140  000F64  ECDF  F032         	call	_putsUSART	;wreg free
 14141                           
 14142                           ;main.c: 909: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 14143  000F68  0101               	movlb	1	; () banked
 14144  000F6A  6700               	tstfsz	_bHex& (0+255),b
 14145  000F6C  D005               	goto	l15750
 14146                           
 14147                           ; BSR set to: 1
 14148  000F6E  0E7F               	movlw	high STR_61
 14149  000F70  0102               	movlb	2	; () banked
 14150  000F72  6F9E               	movwf	(_doModeVerbose$1317+1)& (0+255),b
 14151  000F74  0EED               	movlw	low STR_61
 14152  000F76  D004               	goto	L9
 14153  000F78                     l15750:
 14154                           
 14155                           ; BSR set to: 1
 14156  000F78  0E7F               	movlw	high STR_60
 14157  000F7A  0102               	movlb	2	; () banked
 14158  000F7C  6F9E               	movwf	(_doModeVerbose$1317+1)& (0+255),b
 14159  000F7E  0E4F               	movlw	low STR_60
 14160  000F80                     L9:
 14161  000F80  6F9D               	movwf	_doModeVerbose$1317& (0+255),b
 14162                           
 14163                           ; BSR set to: 2
 14164  000F82  0E01               	movlw	high _wrkbuf
 14165  000F84  0100               	movlb	0	; () banked
 14166  000F86  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14167  000F88  0E55               	movlw	low _wrkbuf
 14168  000F8A  6F6D               	movwf	?_sprintf& (0+255),b
 14169  000F8C  C29D  F06F         	movff	_doModeVerbose$1317,?_sprintf+2
 14170  000F90  C29E  F070         	movff	_doModeVerbose$1317+1,?_sprintf+3
 14171  000F94  C2BF  F071         	movff	doModeVerbose@page,?_sprintf+4
 14172  000F98  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14173  000F9A  EC14  F010         	call	_sprintf	;wreg free
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;main.c: 910: putsUSART(wrkbuf);
 14177  000F9E  0101               	movlb	1	; () banked
 14178  000FA0  0E01               	movlw	high _wrkbuf
 14179  000FA2  6E21               	movwf	?_putsUSART+1,c
 14180  000FA4  0E55               	movlw	low _wrkbuf
 14181  000FA6  6E20               	movwf	?_putsUSART,c
 14182  000FA8  ECDF  F032         	call	_putsUSART	;wreg free
 14183                           
 14184                           ;main.c: 911: WriteUSART(':');
 14185  000FAC  0E3A               	movlw	58
 14186  000FAE  EC8B  F035         	call	_WriteUSART
 14187  000FB2                     l608:
 14188  000FB2  A2AC               	btfss	4012,1,c	;volatile
 14189  000FB4  D7FE               	goto	l608
 14190                           
 14191                           ;main.c: 913: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 14192  000FB6  0101               	movlb	1	; () banked
 14193  000FB8  6700               	tstfsz	_bHex& (0+255),b
 14194  000FBA  D005               	goto	l15760
 14195                           
 14196                           ; BSR set to: 1
 14197  000FBC  0E7F               	movlw	high STR_61
 14198  000FBE  0102               	movlb	2	; () banked
 14199  000FC0  6FA0               	movwf	(_doModeVerbose$1321+1)& (0+255),b
 14200  000FC2  0EED               	movlw	low STR_61
 14201  000FC4  D004               	goto	L10
 14202  000FC6                     l15760:
 14203                           
 14204                           ; BSR set to: 1
 14205  000FC6  0E7F               	movlw	high STR_60
 14206  000FC8  0102               	movlb	2	; () banked
 14207  000FCA  6FA0               	movwf	(_doModeVerbose$1321+1)& (0+255),b
 14208  000FCC  0E4F               	movlw	low STR_60
 14209  000FCE                     L10:
 14210  000FCE  6F9F               	movwf	_doModeVerbose$1321& (0+255),b
 14211                           
 14212                           ; BSR set to: 2
 14213  000FD0  0E01               	movlw	high _wrkbuf
 14214  000FD2  0100               	movlb	0	; () banked
 14215  000FD4  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14216  000FD6  0E55               	movlw	low _wrkbuf
 14217  000FD8  6F6D               	movwf	?_sprintf& (0+255),b
 14218  000FDA  C29F  F06F         	movff	_doModeVerbose$1321,?_sprintf+2
 14219  000FDE  C2A0  F070         	movff	_doModeVerbose$1321+1,?_sprintf+3
 14220  000FE2  EC9B  F00F         	call	PL54	;call to abstracted procedure
 14221  000FE6  EC14  F010         	call	_sprintf	;wreg free
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;main.c: 914: putsUSART(wrkbuf);
 14225  000FEA  0101               	movlb	1	; () banked
 14226  000FEC  0E01               	movlw	high _wrkbuf
 14227  000FEE  6E21               	movwf	?_putsUSART+1,c
 14228  000FF0  0E55               	movlw	low _wrkbuf
 14229  000FF2  6E20               	movwf	?_putsUSART,c
 14230  000FF4  ECDF  F032         	call	_putsUSART	;wreg free
 14231                           
 14232                           ;main.c: 915: putsUSART((char *) " = ");
 14233  000FF8  0E7E               	movlw	high (STR_289+4)
 14234  000FFA  6E21               	movwf	?_putsUSART+1,c
 14235  000FFC  0EDC               	movlw	low (STR_289+4)
 14236  000FFE  6E20               	movwf	?_putsUSART,c
 14237  001000  ECDF  F032         	call	_putsUSART	;wreg free
 14238                           
 14239                           ;main.c: 916: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 14240  001004  0101               	movlb	1	; () banked
 14241  001006  6700               	tstfsz	_bHex& (0+255),b
 14242  001008  D005               	goto	l15772
 14243                           
 14244                           ; BSR set to: 1
 14245  00100A  0E7F               	movlw	high STR_61
 14246  00100C  0102               	movlb	2	; () banked
 14247  00100E  6FA2               	movwf	(_doModeVerbose$1326+1)& (0+255),b
 14248  001010  0EED               	movlw	low STR_61
 14249  001012  D004               	goto	L11
 14250  001014                     l15772:
 14251                           
 14252                           ; BSR set to: 1
 14253  001014  0E7F               	movlw	high STR_60
 14254  001016  0102               	movlb	2	; () banked
 14255  001018  6FA2               	movwf	(_doModeVerbose$1326+1)& (0+255),b
 14256  00101A  0E4F               	movlw	low STR_60
 14257  00101C                     L11:
 14258  00101C  6FA1               	movwf	_doModeVerbose$1326& (0+255),b
 14259                           
 14260                           ; BSR set to: 2
 14261  00101E  0E01               	movlw	high _wrkbuf
 14262  001020  0100               	movlb	0	; () banked
 14263  001022  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14264  001024  0E55               	movlw	low _wrkbuf
 14265  001026  6F6D               	movwf	?_sprintf& (0+255),b
 14266  001028  C2A1  F06F         	movff	_doModeVerbose$1326,?_sprintf+2
 14267  00102C  C2A2  F070         	movff	_doModeVerbose$1326+1,?_sprintf+3
 14268  001030  C2C4  F071         	movff	doModeVerbose@value,?_sprintf+4
 14269  001034  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14270  001036  EC14  F010         	call	_sprintf	;wreg free
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;main.c: 917: putsUSART(wrkbuf);
 14274  00103A  0101               	movlb	1	; () banked
 14275  00103C  0E01               	movlw	high _wrkbuf
 14276  00103E  6E21               	movwf	?_putsUSART+1,c
 14277  001040  0E55               	movlw	low _wrkbuf
 14278  001042  6E20               	movwf	?_putsUSART,c
 14279  001044  ECDF  F032         	call	_putsUSART	;wreg free
 14280  001048                     l619:
 14281  001048  A2AC               	btfss	4012,1,c	;volatile
 14282  00104A  D7FE               	goto	l619
 14283                           
 14284                           ;main.c: 919: putsUSART((char *)"\t\'");
 14285  00104C  0E7F               	movlw	high STR_67
 14286  00104E  6E21               	movwf	?_putsUSART+1,c
 14287  001050  0EE1               	movlw	low STR_67
 14288  001052  6E20               	movwf	?_putsUSART,c
 14289  001054  ECDF  F032         	call	_putsUSART	;wreg free
 14290                           
 14291                           ;main.c: 920: if ((value > 32) && (value < 127)) {
 14292  001058  0E20               	movlw	32
 14293  00105A  0102               	movlb	2	; () banked
 14294  00105C  65C4               	cpfsgt	doModeVerbose@value& (0+255),b
 14295  00105E  D007               	goto	l15786
 14296                           
 14297                           ; BSR set to: 2
 14298  001060  0E7F               	movlw	127
 14299  001062  61C4               	cpfslt	doModeVerbose@value& (0+255),b
 14300  001064  D004               	goto	l15786
 14301                           
 14302                           ; BSR set to: 2
 14303                           ;main.c: 921: WriteUSART(value);
 14304  001066  51C4               	movf	doModeVerbose@value& (0+255),w,b
 14305  001068  EC8B  F035         	call	_WriteUSART
 14306                           
 14307                           ;main.c: 922: }
 14308  00106C  D003               	goto	l624
 14309  00106E                     l15786:
 14310                           
 14311                           ; BSR set to: 2
 14312                           ;main.c: 923: else {
 14313                           ;main.c: 924: WriteUSART('.');
 14314  00106E  0E2E               	movlw	46
 14315  001070  EC8B  F035         	call	_WriteUSART
 14316  001074                     l624:
 14317  001074  A2AC               	btfss	4012,1,c	;volatile
 14318  001076  D7FE               	goto	l624
 14319                           
 14320                           ;main.c: 927: putsUSART((char *)"\' \t");
 14321  001078  0E7F               	movlw	high STR_68
 14322  00107A  6E21               	movwf	?_putsUSART+1,c
 14323  00107C  0EC5               	movlw	low STR_68
 14324  00107E  6E20               	movwf	?_putsUSART,c
 14325  001080  ECDF  F032         	call	_putsUSART	;wreg free
 14326                           
 14327                           ;main.c: 928: printBinary(value);
 14328  001084  0102               	movlb	2	; () banked
 14329  001086  51C4               	movf	doModeVerbose@value& (0+255),w,b
 14330  001088  EC2E  F033         	call	_printBinary
 14331                           
 14332                           ;main.c: 929: putsUSART((char *) "\r\n");
 14333  00108C  0E72               	movlw	high (STR_241+51)
 14334  00108E  6E21               	movwf	?_putsUSART+1,c
 14335  001090  0EDA               	movlw	low (STR_241+51)
 14336  001092  6E20               	movwf	?_putsUSART,c
 14337  001094  ECDF  F032         	call	_putsUSART	;wreg free
 14338                           
 14339                           ;main.c: 930: }
 14340  001098  D07E               	goto	l15830
 14341  00109A                     l599:
 14342                           
 14343                           ;main.c: 931: else {
 14344                           ;main.c: 932: rv = 0;
 14345  00109A  0102               	movlb	2	; () banked
 14346  00109C  6BAF               	clrf	doModeVerbose@rv& (0+255),b
 14347                           
 14348                           ; BSR set to: 2
 14349                           ;main.c: 933: putsUSART((char *) "-ERROR - nodeid=");
 14350  00109E  0E7D               	movlw	high STR_70
 14351  0010A0  6E21               	movwf	?_putsUSART+1,c
 14352  0010A2  0EEA               	movlw	low STR_70
 14353  0010A4  6E20               	movwf	?_putsUSART,c
 14354  0010A6  ECDF  F032         	call	_putsUSART	;wreg free
 14355                           
 14356                           ;main.c: 934: sprintf(wrkbuf, bHex ? "0x%02X - " : "%d - ", nodeid);
 14357  0010AA  0101               	movlb	1	; () banked
 14358  0010AC  6700               	tstfsz	_bHex& (0+255),b
 14359  0010AE  D005               	goto	l15800
 14360                           
 14361                           ; BSR set to: 1
 14362  0010B0  0E7F               	movlw	high STR_58
 14363  0010B2  0102               	movlb	2	; () banked
 14364  0010B4  6FA4               	movwf	(_doModeVerbose$1334+1)& (0+255),b
 14365  0010B6  0E70               	movlw	low STR_58
 14366  0010B8  D004               	goto	L12
 14367  0010BA                     l15800:
 14368                           
 14369                           ; BSR set to: 1
 14370  0010BA  0E7E               	movlw	high STR_57
 14371  0010BC  0102               	movlb	2	; () banked
 14372  0010BE  6FA4               	movwf	(_doModeVerbose$1334+1)& (0+255),b
 14373  0010C0  0E6A               	movlw	low STR_57
 14374  0010C2                     L12:
 14375  0010C2  6FA3               	movwf	_doModeVerbose$1334& (0+255),b
 14376                           
 14377                           ; BSR set to: 2
 14378  0010C4  0E01               	movlw	high _wrkbuf
 14379  0010C6  0100               	movlb	0	; () banked
 14380  0010C8  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14381  0010CA  0E55               	movlw	low _wrkbuf
 14382  0010CC  6F6D               	movwf	?_sprintf& (0+255),b
 14383  0010CE  C2A3  F06F         	movff	_doModeVerbose$1334,?_sprintf+2
 14384  0010D2  C2A4  F070         	movff	_doModeVerbose$1334+1,?_sprintf+3
 14385  0010D6  C2BC  F071         	movff	doModeVerbose@nodeid,?_sprintf+4
 14386  0010DA  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14387  0010DC  EC14  F010         	call	_sprintf	;wreg free
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;main.c: 935: putsUSART(wrkbuf);
 14391  0010E0  0101               	movlb	1	; () banked
 14392  0010E2  0E01               	movlw	high _wrkbuf
 14393  0010E4  6E21               	movwf	?_putsUSART+1,c
 14394  0010E6  0E55               	movlw	low _wrkbuf
 14395  0010E8  6E20               	movwf	?_putsUSART,c
 14396  0010EA  ECDF  F032         	call	_putsUSART	;wreg free
 14397                           
 14398                           ;main.c: 936: putsUSART((char *) "Unable to read register ");
 14399  0010EE  0E7B               	movlw	high STR_73
 14400  0010F0  6E21               	movwf	?_putsUSART+1,c
 14401  0010F2  0E1A               	movlw	low STR_73
 14402  0010F4  6E20               	movwf	?_putsUSART,c
 14403  0010F6  ECDF  F032         	call	_putsUSART	;wreg free
 14404  0010FA                     l632:
 14405  0010FA  A2AC               	btfss	4012,1,c	;volatile
 14406  0010FC  D7FE               	goto	l632
 14407                           
 14408                           ;main.c: 938: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 14409  0010FE  0101               	movlb	1	; () banked
 14410  001100  6700               	tstfsz	_bHex& (0+255),b
 14411  001102  D005               	goto	l15810
 14412                           
 14413                           ; BSR set to: 1
 14414  001104  0E7F               	movlw	high STR_61
 14415  001106  0102               	movlb	2	; () banked
 14416  001108  6FA6               	movwf	(_doModeVerbose$1339+1)& (0+255),b
 14417  00110A  0EED               	movlw	low STR_61
 14418  00110C  D004               	goto	L13
 14419  00110E                     l15810:
 14420                           
 14421                           ; BSR set to: 1
 14422  00110E  0E7F               	movlw	high STR_60
 14423  001110  0102               	movlb	2	; () banked
 14424  001112  6FA6               	movwf	(_doModeVerbose$1339+1)& (0+255),b
 14425  001114  0E4F               	movlw	low STR_60
 14426  001116                     L13:
 14427  001116  6FA5               	movwf	_doModeVerbose$1339& (0+255),b
 14428                           
 14429                           ; BSR set to: 2
 14430  001118  0E01               	movlw	high _wrkbuf
 14431  00111A  0100               	movlb	0	; () banked
 14432  00111C  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14433  00111E  0E55               	movlw	low _wrkbuf
 14434  001120  6F6D               	movwf	?_sprintf& (0+255),b
 14435  001122  C2A5  F06F         	movff	_doModeVerbose$1339,?_sprintf+2
 14436  001126  C2A6  F070         	movff	_doModeVerbose$1339+1,?_sprintf+3
 14437  00112A  C2BF  F071         	movff	doModeVerbose@page,?_sprintf+4
 14438  00112E  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14439  001130  EC14  F010         	call	_sprintf	;wreg free
 14440                           
 14441                           ; BSR set to: 0
 14442                           ;main.c: 939: putsUSART(wrkbuf);
 14443  001134  0101               	movlb	1	; () banked
 14444  001136  0E01               	movlw	high _wrkbuf
 14445  001138  6E21               	movwf	?_putsUSART+1,c
 14446  00113A  0E55               	movlw	low _wrkbuf
 14447  00113C  6E20               	movwf	?_putsUSART,c
 14448  00113E  ECDF  F032         	call	_putsUSART	;wreg free
 14449                           
 14450                           ;main.c: 940: WriteUSART(':');
 14451  001142  0E3A               	movlw	58
 14452  001144  EC8B  F035         	call	_WriteUSART
 14453                           
 14454                           ;main.c: 941: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 14455  001148  0101               	movlb	1	; () banked
 14456  00114A  6700               	tstfsz	_bHex& (0+255),b
 14457  00114C  D005               	goto	l15822
 14458                           
 14459                           ; BSR set to: 1
 14460  00114E  0E7F               	movlw	high STR_61
 14461  001150  0102               	movlb	2	; () banked
 14462  001152  6FA8               	movwf	(_doModeVerbose$1343+1)& (0+255),b
 14463  001154  0EED               	movlw	low STR_61
 14464  001156  D004               	goto	L14
 14465  001158                     l15822:
 14466                           
 14467                           ; BSR set to: 1
 14468  001158  0E7F               	movlw	high STR_60
 14469  00115A  0102               	movlb	2	; () banked
 14470  00115C  6FA8               	movwf	(_doModeVerbose$1343+1)& (0+255),b
 14471  00115E  0E4F               	movlw	low STR_60
 14472  001160                     L14:
 14473  001160  6FA7               	movwf	_doModeVerbose$1343& (0+255),b
 14474                           
 14475                           ; BSR set to: 2
 14476  001162  0E01               	movlw	high _wrkbuf
 14477  001164  0100               	movlb	0	; () banked
 14478  001166  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14479  001168  0E55               	movlw	low _wrkbuf
 14480  00116A  6F6D               	movwf	?_sprintf& (0+255),b
 14481  00116C  C2A7  F06F         	movff	_doModeVerbose$1343,?_sprintf+2
 14482  001170  C2A8  F070         	movff	_doModeVerbose$1343+1,?_sprintf+3
 14483  001174  EC9B  F00F         	call	PL54	;call to abstracted procedure
 14484  001178  EC14  F010         	call	_sprintf	;wreg free
 14485                           
 14486                           ; BSR set to: 0
 14487                           ;main.c: 942: putsUSART(wrkbuf);
 14488  00117C  0101               	movlb	1	; () banked
 14489  00117E  0E01               	movlw	high _wrkbuf
 14490  001180  6E21               	movwf	?_putsUSART+1,c
 14491  001182  0E55               	movlw	low _wrkbuf
 14492  001184  6E20               	movwf	?_putsUSART,c
 14493  001186  ECDF  F032         	call	_putsUSART	;wreg free
 14494                           
 14495                           ;main.c: 944: putsUSART((char *) "\r\n");
 14496  00118A  0E72               	movlw	high (STR_241+51)
 14497  00118C  6E21               	movwf	?_putsUSART+1,c
 14498  00118E  0EDA               	movlw	low (STR_241+51)
 14499  001190  6E20               	movwf	?_putsUSART,c
 14500  001192  ECDF  F032         	call	_putsUSART	;wreg free
 14501  001196                     l15830:
 14502  001196  0102               	movlb	2	; () banked
 14503  001198  2BC1               	incf	doModeVerbose@i_1293& (0+255),f,b
 14504  00119A                     l15832:
 14505                           
 14506                           ; BSR set to: 2
 14507  00119A  51BB               	movf	doModeVerbose@count& (0+255),w,b
 14508  00119C  5DC1               	subwf	doModeVerbose@i_1293& (0+255),w,b
 14509  00119E  E201 D69E          	bnc	l15730
 14510                           
 14511                           ; BSR set to: 2
 14512                           ;main.c: 945: }
 14513                           ;main.c: 946: }
 14514                           ;main.c: 948: if (rv) {
 14515  0011A2  51AF               	movf	doModeVerbose@rv& (0+255),w,b
 14516  0011A4  E008               	bz	l15838
 14517                           
 14518                           ; BSR set to: 2
 14519                           ;main.c: 949: putsUSART((char *) "+OK\r\n");
 14520  0011A6  0E7F               	movlw	high STR_9
 14521  0011A8  6E21               	movwf	?_putsUSART+1,c
 14522  0011AA  0E6A               	movlw	low STR_9
 14523  0011AC  6E20               	movwf	?_putsUSART,c
 14524  0011AE  ECDF  F032         	call	_putsUSART	;wreg free
 14525                           
 14526                           ;main.c: 950: }
 14527  0011B2  EF1B  F00F         	goto	l16372
 14528  0011B6                     l15838:
 14529                           
 14530                           ; BSR set to: 2
 14531                           ;main.c: 951: else {
 14532                           ;main.c: 952: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 14533  0011B6  0E72               	movlw	high STR_80
 14534  0011B8  6E21               	movwf	?_putsUSART+1,c
 14535  0011BA  0EDD               	movlw	low STR_80
 14536  0011BC  6E20               	movwf	?_putsUSART,c
 14537  0011BE  ECDF  F032         	call	_putsUSART	;wreg free
 14538  0011C2  EF1B  F00F         	goto	l16372
 14539  0011C6                     l15840:
 14540                           
 14541                           ; BSR set to: 1
 14542                           ;main.c: 958: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 14543  0011C6  0E01               	movlw	high _cmdbuf
 14544  0011C8  0100               	movlb	0	; () banked
 14545  0011CA  6F67               	movwf	(?_stristr+1)& (0+255),b
 14546  0011CC  0E05               	movlw	low _cmdbuf
 14547  0011CE  6F66               	movwf	?_stristr& (0+255),b
 14548  0011D0  0E7F               	movlw	high STR_81
 14549  0011D2  6F69               	movwf	(?_stristr+3)& (0+255),b
 14550  0011D4  0E9D               	movlw	low STR_81
 14551  0011D6  6F68               	movwf	(?_stristr+2)& (0+255),b
 14552  0011D8  EC42  F030         	call	_stristr	;wreg free
 14553  0011DC  EC27  F00F         	call	PL2	;call to abstracted procedure
 14554  0011E0  E104               	bnz	u20415
 14555  0011E2  0100               	movlb	0	; () banked
 14556  0011E4  5166               	movf	?_stristr& (0+255),w,b
 14557  0011E6  0101               	movlb	1	; () banked
 14558  0011E8  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 14559  0011EA                     u20415:
 14560  0011EA  E001 D0FE          	bnz	l15922
 14561                           
 14562                           ; BSR set to: 1
 14563                           ;main.c: 960: uint8_t nodeid;
 14564                           ;main.c: 961: uint8_t page = 0;
 14565  0011EE  0102               	movlb	2	; () banked
 14566  0011F0  6BB0               	clrf	doModeVerbose@page_1349& (0+255),b
 14567                           
 14568                           ; BSR set to: 2
 14569                           ;main.c: 962: uint8_t reg;
 14570                           ;main.c: 963: uint8_t value;
 14571                           ;main.c: 965: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14572  0011F2  506F               	movf	3951,w,c	;volatile
 14573  0011F4  0BE0               	andlw	224
 14574  0011F6  E007               	bz	l15854
 14575                           
 14576                           ; BSR set to: 2
 14577                           ;main.c: 966: putsUSART( (char *)"-ERROR - Command only works if interface is open.\r\n"
      +                           );
 14578  0011F8  0E73               	movlw	high STR_50
 14579  0011FA  6E21               	movwf	?_putsUSART+1,c
 14580  0011FC  0E13               	movlw	low STR_50
 14581  0011FE  6E20               	movwf	?_putsUSART,c
 14582  001200  ECDF  F032         	call	_putsUSART	;wreg free
 14583  001204  D5DA               	goto	l15682
 14584  001206                     l15854:
 14585                           
 14586                           ; BSR set to: 2
 14587                           ;main.c: 970: }
 14588                           ;main.c: 972: strcpy(cmdbuf, cmdbuf + 5);
 14589  001206  0101               	movlb	1	; () banked
 14590  001208  EC40  F00F         	call	PL8	;call to abstracted procedure
 14591  00120C  ECF7  F034         	call	_strcpy	;wreg free
 14592                           
 14593                           ; BSR set to: 1
 14594                           ;main.c: 973: char *p = strtok(cmdbuf, " ");
 14595  001210  0E01               	movlw	high _cmdbuf
 14596  001212  EC92  F00F         	call	PL48	;call to abstracted procedure
 14597  001216  ECEE  F02E         	call	_strtok	;wreg free
 14598  00121A  C064  F2C7         	movff	?_strtok,doModeVerbose@p_1353
 14599  00121E  C065  F2C8         	movff	?_strtok+1,doModeVerbose@p_1353+1
 14600                           
 14601                           ; BSR set to: 0
 14602                           ;main.c: 974: if ((0) != p) {
 14603  001222  0102               	movlb	2	; () banked
 14604  001224  51C8               	movf	(doModeVerbose@p_1353+1)& (0+255),w,b
 14605  001226  11C7               	iorwf	doModeVerbose@p_1353& (0+255),w,b
 14606  001228  E00A               	bz	l15862
 14607                           
 14608                           ; BSR set to: 2
 14609                           ;main.c: 975: nodeid = atoi(p);
 14610  00122A  C2C7  F062         	movff	doModeVerbose@p_1353,?_atoi
 14611  00122E  C2C8  F063         	movff	doModeVerbose@p_1353+1,?_atoi+1
 14612  001232  ECD0  F026         	call	_atoi	;wreg free
 14613  001236  5162               	movf	?_atoi& (0+255),w,b
 14614  001238  0102               	movlb	2	; () banked
 14615  00123A  6FBD               	movwf	doModeVerbose@nodeid_1348& (0+255),b
 14616                           
 14617                           ;main.c: 976: }
 14618  00123C  D007               	goto	l15870
 14619  00123E                     l15862:
 14620                           
 14621                           ; BSR set to: 2
 14622                           ;main.c: 977: else {
 14623                           ;main.c: 978: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 14624  00123E  0E7B               	movlw	high STR_52
 14625  001240  6E21               	movwf	?_putsUSART+1,c
 14626  001242  0E63               	movlw	low STR_52
 14627  001244  6E20               	movwf	?_putsUSART,c
 14628  001246  ECDF  F032         	call	_putsUSART	;wreg free
 14629  00124A  D5B7               	goto	l15682
 14630  00124C                     l15870:
 14631                           
 14632                           ; BSR set to: 2
 14633                           ;main.c: 982: }
 14634                           ;main.c: 984: if ( (0) != ( p = strtok((0), " ") ) ) {
 14635  00124C  EC80  F00F         	call	PL36	;call to abstracted procedure
 14636  001250  ECEE  F02E         	call	_strtok	;wreg free
 14637  001254  C064  F2C7         	movff	?_strtok,doModeVerbose@p_1353
 14638  001258  C065  F2C8         	movff	?_strtok+1,doModeVerbose@p_1353+1
 14639  00125C  0102               	movlb	2	; () banked
 14640  00125E  51C8               	movf	(doModeVerbose@p_1353+1)& (0+255),w,b
 14641  001260  11C7               	iorwf	doModeVerbose@p_1353& (0+255),w,b
 14642  001262  E033               	bz	l15878
 14643                           
 14644                           ; BSR set to: 2
 14645                           ;main.c: 986: char *preg;
 14646                           ;main.c: 987: if (preg = strchr(p, ':')) {
 14647  001264  C2C7  F01F         	movff	doModeVerbose@p_1353,?_strchr
 14648  001268  C2C8  F020         	movff	doModeVerbose@p_1353+1,?_strchr+1
 14649  00126C  6A22               	clrf	?_strchr+3,c
 14650  00126E  0E3A               	movlw	58
 14651  001270  6E21               	movwf	?_strchr+2,c
 14652  001272  EC58  F032         	call	_strchr	;wreg free
 14653  001276  C01F  F28E         	movff	?_strchr,doModeVerbose@preg_1357
 14654  00127A  C020  F28F         	movff	?_strchr+1,doModeVerbose@preg_1357+1
 14655  00127E  0102               	movlb	2	; () banked
 14656  001280  518F               	movf	(doModeVerbose@preg_1357+1)& (0+255),w,b
 14657  001282  118E               	iorwf	doModeVerbose@preg_1357& (0+255),w,b
 14658  001284  E018               	bz	l15876
 14659                           
 14660                           ; BSR set to: 2
 14661                           ;main.c: 988: page = atoi(p);
 14662  001286  C2C7  F062         	movff	doModeVerbose@p_1353,?_atoi
 14663  00128A  C2C8  F063         	movff	doModeVerbose@p_1353+1,?_atoi+1
 14664  00128E  ECD0  F026         	call	_atoi	;wreg free
 14665  001292  5162               	movf	?_atoi& (0+255),w,b
 14666  001294  0102               	movlb	2	; () banked
 14667  001296  6FB0               	movwf	doModeVerbose@page_1349& (0+255),b
 14668                           
 14669                           ;main.c: 989: reg = atoi(preg + 1);
 14670  001298  298E               	incf	doModeVerbose@preg_1357& (0+255),w,b
 14671  00129A  0101               	movlb	1	; () banked
 14672  00129C  6FB3               	movwf	??_doModeVerbose& (0+255),b
 14673  00129E  0E00               	movlw	0
 14674  0012A0  0102               	movlb	2	; () banked
 14675  0012A2  218F               	addwfc	(doModeVerbose@preg_1357+1)& (0+255),w,b
 14676  0012A4  0101               	movlb	1	; () banked
 14677  0012A6  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 14678  0012A8  C1B3  F062         	movff	??_doModeVerbose,?_atoi
 14679  0012AC  C1B4  F063         	movff	??_doModeVerbose+1,?_atoi+1
 14680  0012B0  ECD0  F026         	call	_atoi	;wreg free
 14681  0012B4  D006               	goto	L15
 14682  0012B6                     l15876:
 14683                           
 14684                           ; BSR set to: 2
 14685                           ;main.c: 991: else {
 14686                           ;main.c: 992: reg = atoi(p);
 14687  0012B6  C2C7  F062         	movff	doModeVerbose@p_1353,?_atoi
 14688  0012BA  C2C8  F063         	movff	doModeVerbose@p_1353+1,?_atoi+1
 14689  0012BE  ECD0  F026         	call	_atoi	;wreg free
 14690  0012C2                     L15:
 14691  0012C2  5162               	movf	?_atoi& (0+255),w,b
 14692  0012C4  0102               	movlb	2	; () banked
 14693  0012C6  6FB1               	movwf	doModeVerbose@reg_1350& (0+255),b
 14694  0012C8  D007               	goto	l15886
 14695  0012CA                     l15878:
 14696                           
 14697                           ; BSR set to: 2
 14698                           ;main.c: 996: else {
 14699                           ;main.c: 997: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 14700  0012CA  0E79               	movlw	high STR_54
 14701  0012CC  6E21               	movwf	?_putsUSART+1,c
 14702  0012CE  0E8D               	movlw	low STR_54
 14703  0012D0  6E20               	movwf	?_putsUSART,c
 14704  0012D2  ECDF  F032         	call	_putsUSART	;wreg free
 14705  0012D6  D571               	goto	l15682
 14706  0012D8                     l15886:
 14707                           
 14708                           ; BSR set to: 2
 14709                           ;main.c: 1001: }
 14710                           ;main.c: 1004: if ((0) != (p = strtok((0), " "))) {
 14711  0012D8  EC80  F00F         	call	PL36	;call to abstracted procedure
 14712  0012DC  ECEE  F02E         	call	_strtok	;wreg free
 14713  0012E0  C064  F2C7         	movff	?_strtok,doModeVerbose@p_1353
 14714  0012E4  C065  F2C8         	movff	?_strtok+1,doModeVerbose@p_1353+1
 14715  0012E8  0102               	movlb	2	; () banked
 14716  0012EA  51C8               	movf	(doModeVerbose@p_1353+1)& (0+255),w,b
 14717  0012EC  11C7               	iorwf	doModeVerbose@p_1353& (0+255),w,b
 14718  0012EE  E00A               	bz	l15890
 14719                           
 14720                           ; BSR set to: 2
 14721                           ;main.c: 1005: value = atoi(p);
 14722  0012F0  C2C7  F062         	movff	doModeVerbose@p_1353,?_atoi
 14723  0012F4  C2C8  F063         	movff	doModeVerbose@p_1353+1,?_atoi+1
 14724  0012F8  ECD0  F026         	call	_atoi	;wreg free
 14725  0012FC  5162               	movf	?_atoi& (0+255),w,b
 14726  0012FE  0102               	movlb	2	; () banked
 14727  001300  6FBA               	movwf	doModeVerbose@value_1351& (0+255),b
 14728                           
 14729                           ;main.c: 1006: }
 14730  001302  D007               	goto	l15898
 14731  001304                     l15890:
 14732                           
 14733                           ; BSR set to: 2
 14734                           ;main.c: 1007: else {
 14735                           ;main.c: 1008: putsUSART((char *) "-ERROR - Need a value\r\n");
 14736  001304  0E7B               	movlw	high STR_88
 14737  001306  6E21               	movwf	?_putsUSART+1,c
 14738  001308  0E93               	movlw	low STR_88
 14739  00130A  6E20               	movwf	?_putsUSART,c
 14740  00130C  ECDF  F032         	call	_putsUSART	;wreg free
 14741  001310  D554               	goto	l15682
 14742  001312                     l15898:
 14743                           
 14744                           ; BSR set to: 2
 14745                           ;main.c: 1012: }
 14746                           ;main.c: 1014: if (writeRegisterExtended(nodeid,
 14747                           ;main.c: 1015: page,
 14748                           ;main.c: 1016: reg,
 14749                           ;main.c: 1017: rwtimeout,
 14750                           ;main.c: 1018: &value)) {
 14751  001312  0100               	movlb	0	; () banked
 14752  001314  C2B0  F0AF         	movff	doModeVerbose@page_1349,?_writeRegisterExtended
 14753  001318  6BB0               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 14754  00131A  C2B1  F0B1         	movff	doModeVerbose@reg_1350,?_writeRegisterExtended+2
 14755  00131E  C104  F0B2         	movff	_rwtimeout,?_writeRegisterExtended+3
 14756  001322  6BB3               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 14757  001324  0E02               	movlw	high doModeVerbose@value_1351
 14758  001326  6FB5               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 14759  001328  0EBA               	movlw	low doModeVerbose@value_1351
 14760  00132A  6FB4               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 14761  00132C  0102               	movlb	2	; () banked
 14762  00132E  51BD               	movf	doModeVerbose@nodeid_1348& (0+255),w,b
 14763  001330  EC4B  F026         	call	_writeRegisterExtended
 14764  001334  0900               	iorlw	0
 14765  001336  E030               	bz	l15912
 14766                           
 14767                           ;main.c: 1019: putsUSART((char *) "+OK - Value written successfully for ");
 14768  001338  0E77               	movlw	high STR_89
 14769  00133A  6E21               	movwf	?_putsUSART+1,c
 14770  00133C  0EE6               	movlw	low STR_89
 14771  00133E  6E20               	movwf	?_putsUSART,c
 14772  001340  ECDF  F032         	call	_putsUSART	;wreg free
 14773                           
 14774                           ;main.c: 1020: putsUSART((char *) "nodeid=");
 14775  001344  0E7E               	movlw	high (STR_56+6)
 14776  001346  6E21               	movwf	?_putsUSART+1,c
 14777  001348  0E1E               	movlw	low (STR_56+6)
 14778  00134A  6E20               	movwf	?_putsUSART,c
 14779  00134C  ECDF  F032         	call	_putsUSART	;wreg free
 14780                           
 14781                           ;main.c: 1021: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14782  001350  0101               	movlb	1	; () banked
 14783  001352  6700               	tstfsz	_bHex& (0+255),b
 14784  001354  D005               	goto	l15906
 14785                           
 14786                           ; BSR set to: 1
 14787  001356  0E7F               	movlw	high STR_92
 14788  001358  0102               	movlb	2	; () banked
 14789  00135A  6FAA               	movwf	(_doModeVerbose$1366+1)& (0+255),b
 14790  00135C  0ECD               	movlw	low STR_92
 14791  00135E  D004               	goto	L16
 14792  001360                     l15906:
 14793                           
 14794                           ; BSR set to: 1
 14795  001360  0E7E               	movlw	high STR_91
 14796  001362  0102               	movlb	2	; () banked
 14797  001364  6FAA               	movwf	(_doModeVerbose$1366+1)& (0+255),b
 14798  001366  0ED0               	movlw	low STR_91
 14799  001368                     L16:
 14800  001368  6FA9               	movwf	_doModeVerbose$1366& (0+255),b
 14801                           
 14802                           ; BSR set to: 2
 14803  00136A  0E01               	movlw	high _wrkbuf
 14804  00136C  0100               	movlb	0	; () banked
 14805  00136E  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14806  001370  0E55               	movlw	low _wrkbuf
 14807  001372  6F6D               	movwf	?_sprintf& (0+255),b
 14808  001374  C2A9  F06F         	movff	_doModeVerbose$1366,?_sprintf+2
 14809  001378  C2AA  F070         	movff	_doModeVerbose$1366+1,?_sprintf+3
 14810  00137C  C2BD  F071         	movff	doModeVerbose@nodeid_1348,?_sprintf+4
 14811  001380  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14812  001382  EC14  F010         	call	_sprintf	;wreg free
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;main.c: 1022: putsUSART(wrkbuf);
 14816  001386  0101               	movlb	1	; () banked
 14817  001388  0E01               	movlw	high _wrkbuf
 14818  00138A  6E21               	movwf	?_putsUSART+1,c
 14819  00138C  0E55               	movlw	low _wrkbuf
 14820  00138E  6E20               	movwf	?_putsUSART,c
 14821  001390  ECDF  F032         	call	_putsUSART	;wreg free
 14822                           
 14823                           ;main.c: 1023: }
 14824  001394  EF1B  F00F         	goto	l16372
 14825  001398                     l15912:
 14826                           
 14827                           ;main.c: 1024: else {
 14828                           ;main.c: 1025: putsUSART((char *) "-ERROR - Failed to write value for ");
 14829  001398  0E78               	movlw	high STR_93
 14830  00139A  6E21               	movwf	?_putsUSART+1,c
 14831  00139C  0E9F               	movlw	low STR_93
 14832  00139E  6E20               	movwf	?_putsUSART,c
 14833  0013A0  ECDF  F032         	call	_putsUSART	;wreg free
 14834                           
 14835                           ;main.c: 1026: putsUSART((char *) "nodeid=");
 14836  0013A4  0E7E               	movlw	high (STR_56+6)
 14837  0013A6  6E21               	movwf	?_putsUSART+1,c
 14838  0013A8  0E1E               	movlw	low (STR_56+6)
 14839  0013AA  6E20               	movwf	?_putsUSART,c
 14840  0013AC  ECDF  F032         	call	_putsUSART	;wreg free
 14841                           
 14842                           ;main.c: 1027: sprintf(wrkbuf, bHex ? "0x%02X\n" : "%d\n", nodeid);
 14843  0013B0  0101               	movlb	1	; () banked
 14844  0013B2  6700               	tstfsz	_bHex& (0+255),b
 14845  0013B4  D005               	goto	l15918
 14846                           
 14847                           ; BSR set to: 1
 14848  0013B6  0E7F               	movlw	high STR_92
 14849  0013B8  0102               	movlb	2	; () banked
 14850  0013BA  6FAC               	movwf	(_doModeVerbose$1372+1)& (0+255),b
 14851  0013BC  0ECD               	movlw	low STR_92
 14852  0013BE  D004               	goto	L17
 14853  0013C0                     l15918:
 14854                           
 14855                           ; BSR set to: 1
 14856  0013C0  0E7E               	movlw	high STR_91
 14857  0013C2  0102               	movlb	2	; () banked
 14858  0013C4  6FAC               	movwf	(_doModeVerbose$1372+1)& (0+255),b
 14859  0013C6  0ED0               	movlw	low STR_91
 14860  0013C8                     L17:
 14861  0013C8  6FAB               	movwf	_doModeVerbose$1372& (0+255),b
 14862                           
 14863                           ; BSR set to: 2
 14864  0013CA  0E01               	movlw	high _wrkbuf
 14865  0013CC  0100               	movlb	0	; () banked
 14866  0013CE  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14867  0013D0  0E55               	movlw	low _wrkbuf
 14868  0013D2  6F6D               	movwf	?_sprintf& (0+255),b
 14869  0013D4  C2AB  F06F         	movff	_doModeVerbose$1372,?_sprintf+2
 14870  0013D8  C2AC  F070         	movff	_doModeVerbose$1372+1,?_sprintf+3
 14871  0013DC  C2BD  F071         	movff	doModeVerbose@nodeid_1348,?_sprintf+4
 14872  0013E0  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14873  0013E2  EC14  F010         	call	_sprintf	;wreg free
 14874  0013E6  EF1B  F00F         	goto	l16372
 14875  0013EA                     l15922:
 14876                           
 14877                           ; BSR set to: 1
 14878                           ;main.c: 1033: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 14879  0013EA  0E01               	movlw	high _cmdbuf
 14880  0013EC  0100               	movlb	0	; () banked
 14881  0013EE  6F67               	movwf	(?_stristr+1)& (0+255),b
 14882  0013F0  0E05               	movlw	low _cmdbuf
 14883  0013F2  6F66               	movwf	?_stristr& (0+255),b
 14884  0013F4  0E7F               	movlw	high STR_97
 14885  0013F6  6F69               	movwf	(?_stristr+3)& (0+255),b
 14886  0013F8  0EAC               	movlw	low STR_97
 14887  0013FA  6F68               	movwf	(?_stristr+2)& (0+255),b
 14888  0013FC  EC42  F030         	call	_stristr	;wreg free
 14889  001400  EC27  F00F         	call	PL2	;call to abstracted procedure
 14890  001404  E104               	bnz	u20505
 14891  001406  0100               	movlb	0	; () banked
 14892  001408  5166               	movf	?_stristr& (0+255),w,b
 14893  00140A  0101               	movlb	1	; () banked
 14894  00140C  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 14895  00140E                     u20505:
 14896  00140E  E173               	bnz	l15966
 14897                           
 14898                           ; BSR set to: 1
 14899                           ;main.c: 1035: uint8_t nodeid;
 14900                           ;main.c: 1036: uint8_t value;
 14901                           ;main.c: 1038: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 14902  001410  506F               	movf	3951,w,c	;volatile
 14903  001412  0BE0               	andlw	224
 14904  001414  E007               	bz	l15934
 14905                           
 14906                           ; BSR set to: 1
 14907                           ;main.c: 1039: putsUSART( (char *)"-ERROR - Command only works if interface is open.\r\n
      +                          " );
 14908  001416  0E73               	movlw	high STR_50
 14909  001418  6E21               	movwf	?_putsUSART+1,c
 14910  00141A  0E13               	movlw	low STR_50
 14911  00141C  6E20               	movwf	?_putsUSART,c
 14912  00141E  ECDF  F032         	call	_putsUSART	;wreg free
 14913  001422  D4CB               	goto	l15682
 14914  001424                     l15934:
 14915                           
 14916                           ; BSR set to: 1
 14917                           ;main.c: 1043: }
 14918                           ;main.c: 1045: strcpy(cmdbuf, cmdbuf + 5);
 14919  001424  EC40  F00F         	call	PL8	;call to abstracted procedure
 14920  001428  ECF7  F034         	call	_strcpy	;wreg free
 14921                           
 14922                           ; BSR set to: 1
 14923                           ;main.c: 1046: nodeid = atoi(cmdbuf);
 14924  00142C  0E01               	movlw	high _cmdbuf
 14925  00142E  0100               	movlb	0	; () banked
 14926  001430  6F63               	movwf	(?_atoi+1)& (0+255),b
 14927  001432  0E05               	movlw	low _cmdbuf
 14928  001434  6F62               	movwf	?_atoi& (0+255),b
 14929  001436  ECD0  F026         	call	_atoi	;wreg free
 14930  00143A  5162               	movf	?_atoi& (0+255),w,b
 14931  00143C  0102               	movlb	2	; () banked
 14932  00143E  6FC2               	movwf	doModeVerbose@nodeid_1374& (0+255),b
 14933                           
 14934                           ; BSR set to: 2
 14935                           ;main.c: 1048: putsUSART((char *) "Info for node id = ");
 14936  001440  0E7D               	movlw	high STR_99
 14937  001442  6E21               	movwf	?_putsUSART+1,c
 14938  001444  0E35               	movlw	low STR_99
 14939  001446  6E20               	movwf	?_putsUSART,c
 14940  001448  ECDF  F032         	call	_putsUSART	;wreg free
 14941                           
 14942                           ;main.c: 1049: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 14943  00144C  0101               	movlb	1	; () banked
 14944  00144E  6700               	tstfsz	_bHex& (0+255),b
 14945  001450  D005               	goto	l15944
 14946                           
 14947                           ; BSR set to: 1
 14948  001452  0E7F               	movlw	high STR_61
 14949  001454  0102               	movlb	2	; () banked
 14950  001456  6FAE               	movwf	(_doModeVerbose$1381+1)& (0+255),b
 14951  001458  0EED               	movlw	low STR_61
 14952  00145A  D004               	goto	L18
 14953  00145C                     l15944:
 14954                           
 14955                           ; BSR set to: 1
 14956  00145C  0E7F               	movlw	high STR_60
 14957  00145E  0102               	movlb	2	; () banked
 14958  001460  6FAE               	movwf	(_doModeVerbose$1381+1)& (0+255),b
 14959  001462  0E4F               	movlw	low STR_60
 14960  001464                     L18:
 14961  001464  6FAD               	movwf	_doModeVerbose$1381& (0+255),b
 14962                           
 14963                           ; BSR set to: 2
 14964  001466  0E01               	movlw	high _wrkbuf
 14965  001468  0100               	movlb	0	; () banked
 14966  00146A  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 14967  00146C  0E55               	movlw	low _wrkbuf
 14968  00146E  6F6D               	movwf	?_sprintf& (0+255),b
 14969  001470  C2AD  F06F         	movff	_doModeVerbose$1381,?_sprintf+2
 14970  001474  C2AE  F070         	movff	_doModeVerbose$1381+1,?_sprintf+3
 14971  001478  C2C2  F071         	movff	doModeVerbose@nodeid_1374,?_sprintf+4
 14972  00147C  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14973  00147E  EC14  F010         	call	_sprintf	;wreg free
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;main.c: 1050: putsUSART(wrkbuf);
 14977  001482  0101               	movlb	1	; () banked
 14978  001484  0E01               	movlw	high _wrkbuf
 14979  001486  6E21               	movwf	?_putsUSART+1,c
 14980  001488  0E55               	movlw	low _wrkbuf
 14981  00148A  6E20               	movwf	?_putsUSART,c
 14982  00148C  ECDF  F032         	call	_putsUSART	;wreg free
 14983                           
 14984                           ;main.c: 1051: putsUSART((char *) "\r\n");
 14985  001490  0E72               	movlw	high (STR_241+51)
 14986  001492  6E21               	movwf	?_putsUSART+1,c
 14987  001494  0EDA               	movlw	low (STR_241+51)
 14988  001496  6E20               	movwf	?_putsUSART,c
 14989  001498  ECDF  F032         	call	_putsUSART	;wreg free
 14990                           
 14991                           ;main.c: 1053: if (!readRegisterExtended(nodeid,
 14992                           ;main.c: 1054: 0,
 14993                           ;main.c: 1055: 0xd0,
 14994                           ;main.c: 1056: rwtimeout,
 14995                           ;main.c: 1057: &value)) {
 14996  00149C  0100               	movlb	0	; () banked
 14997  00149E  6BB0               	clrf	(?_readRegisterExtended+1)& (0+255),b
 14998  0014A0  6BAF               	clrf	?_readRegisterExtended& (0+255),b
 14999  0014A2  0ED0               	movlw	208
 15000  0014A4  6FB1               	movwf	(?_readRegisterExtended+2)& (0+255),b
 15001  0014A6  C104  F0B2         	movff	_rwtimeout,?_readRegisterExtended+3
 15002  0014AA  6BB3               	clrf	(?_readRegisterExtended+4)& (0+255),b
 15003  0014AC  0E02               	movlw	high doModeVerbose@value_1375
 15004  0014AE  6FB5               	movwf	(?_readRegisterExtended+6)& (0+255),b
 15005  0014B0  0EB2               	movlw	low doModeVerbose@value_1375
 15006  0014B2  6FB4               	movwf	(?_readRegisterExtended+5)& (0+255),b
 15007  0014B4  0102               	movlb	2	; () banked
 15008  0014B6  51C2               	movf	doModeVerbose@nodeid_1374& (0+255),w,b
 15009  0014B8  EC54  F027         	call	_readRegisterExtended
 15010  0014BC  0900               	iorlw	0
 15011  0014BE  E107               	bnz	l15962
 15012                           
 15013                           ;main.c: 1058: putsUSART((char *) "-ERROR - Node not found.\r\n");
 15014  0014C0  0E7A               	movlw	high STR_103
 15015  0014C2  6E21               	movwf	?_putsUSART+1,c
 15016  0014C4  0E62               	movlw	low STR_103
 15017  0014C6  6E20               	movwf	?_putsUSART,c
 15018  0014C8  ECDF  F032         	call	_putsUSART	;wreg free
 15019  0014CC  D476               	goto	l15682
 15020  0014CE                     l15962:
 15021                           
 15022                           ;main.c: 1062: }
 15023                           ;main.c: 1064: printNodeFirmwareVersion(nodeid);
 15024  0014CE  0102               	movlb	2	; () banked
 15025  0014D0  51C2               	movf	doModeVerbose@nodeid_1374& (0+255),w,b
 15026  0014D2  EC79  F02A         	call	_printNodeFirmwareVersion
 15027                           
 15028                           ;main.c: 1065: printGUID(nodeid);
 15029  0014D6  0102               	movlb	2	; () banked
 15030  0014D8  51C2               	movf	doModeVerbose@nodeid_1374& (0+255),w,b
 15031  0014DA  ECD4  F027         	call	_printGUID
 15032                           
 15033                           ;main.c: 1066: printMDF(nodeid);
 15034  0014DE  0102               	movlb	2	; () banked
 15035  0014E0  51C2               	movf	doModeVerbose@nodeid_1374& (0+255),w,b
 15036  0014E2  ECA1  F02E         	call	_printMDF
 15037                           
 15038                           ;main.c: 1067: putsUSART((char *) "+OK\r\n");
 15039  0014E6  0E7F               	movlw	high STR_9
 15040  0014E8  6E21               	movwf	?_putsUSART+1,c
 15041  0014EA  0E6A               	movlw	low STR_9
 15042  0014EC  6E20               	movwf	?_putsUSART,c
 15043  0014EE  ECDF  F032         	call	_putsUSART	;wreg free
 15044                           
 15045                           ;main.c: 1068: }
 15046  0014F2  EF1B  F00F         	goto	l16372
 15047  0014F6                     l15966:
 15048                           
 15049                           ; BSR set to: 1
 15050                           ;main.c: 1072: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 15051  0014F6  0E01               	movlw	high _cmdbuf
 15052  0014F8  0100               	movlb	0	; () banked
 15053  0014FA  6F67               	movwf	(?_stristr+1)& (0+255),b
 15054  0014FC  0E05               	movlw	low _cmdbuf
 15055  0014FE  6F66               	movwf	?_stristr& (0+255),b
 15056  001500  0E7F               	movlw	high STR_105
 15057  001502  6F69               	movwf	(?_stristr+3)& (0+255),b
 15058  001504  0E41               	movlw	low STR_105
 15059  001506  6F68               	movwf	(?_stristr+2)& (0+255),b
 15060  001508  EC42  F030         	call	_stristr	;wreg free
 15061  00150C  EC27  F00F         	call	PL2	;call to abstracted procedure
 15062  001510  E104               	bnz	u20545
 15063  001512  0100               	movlb	0	; () banked
 15064  001514  5166               	movf	?_stristr& (0+255),w,b
 15065  001516  0101               	movlb	1	; () banked
 15066  001518  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 15067  00151A                     u20545:
 15068  00151A  E001 D0F4          	bnz	l16066
 15069                           
 15070                           ; BSR set to: 1
 15071                           ;main.c: 1075: uint8_t filterno;
 15072                           ;main.c: 1076: uint8_t filter_priority;
 15073                           ;main.c: 1077: uint16_t filter_class;
 15074                           ;main.c: 1078: uint8_t filter_type;
 15075                           ;main.c: 1079: uint8_t filter_nodeid;
 15076                           ;main.c: 1080: BOOL bPersistent = 0;
 15077  00151E  0102               	movlb	2	; () banked
 15078  001520  6BB3               	clrf	doModeVerbose@bPersistent& (0+255),b
 15079                           
 15080                           ; BSR set to: 2
 15081                           ;main.c: 1082: strcpy(cmdbuf, cmdbuf + 8);
 15082  001522  EC72  F00F         	call	PL22	;call to abstracted procedure
 15083  001526  ECF7  F034         	call	_strcpy	;wreg free
 15084                           
 15085                           ; BSR set to: 1
 15086                           ;main.c: 1083: char *p = strtok(cmdbuf, ",");
 15087  00152A  EC88  F00F         	call	PL38	;call to abstracted procedure
 15088  00152E  ECEE  F02E         	call	_strtok	;wreg free
 15089  001532  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15090  001536  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15091                           
 15092                           ; BSR set to: 0
 15093                           ;main.c: 1084: if ((0) != p) {
 15094  00153A  0102               	movlb	2	; () banked
 15095  00153C  51D3               	movf	(doModeVerbose@p_1392+1)& (0+255),w,b
 15096  00153E  11D2               	iorwf	doModeVerbose@p_1392& (0+255),w,b
 15097  001540  E013               	bz	l15988
 15098                           
 15099                           ; BSR set to: 2
 15100                           ;main.c: 1085: filterno = atoi(p);
 15101  001542  C2D2  F062         	movff	doModeVerbose@p_1392,?_atoi
 15102  001546  C2D3  F063         	movff	doModeVerbose@p_1392+1,?_atoi+1
 15103  00154A  ECD0  F026         	call	_atoi	;wreg free
 15104  00154E  5162               	movf	?_atoi& (0+255),w,b
 15105  001550  0102               	movlb	2	; () banked
 15106  001552  6FB8               	movwf	doModeVerbose@filterno& (0+255),b
 15107                           
 15108                           ; BSR set to: 2
 15109                           ;main.c: 1086: if (filterno > 15) {
 15110  001554  0E0F               	movlw	15
 15111  001556  65B8               	cpfsgt	doModeVerbose@filterno& (0+255),b
 15112  001558  D00E               	goto	l15996
 15113                           
 15114                           ; BSR set to: 2
 15115                           ;main.c: 1087: putsUSART((char *) "-ERROR - Filter number can only be set to a value bet
      +                          ween 0-15.\r\n");
 15116  00155A  0E70               	movlw	high STR_107
 15117  00155C  6E21               	movwf	?_putsUSART+1,c
 15118  00155E  0E62               	movlw	low STR_107
 15119  001560  6E20               	movwf	?_putsUSART,c
 15120  001562  ECDF  F032         	call	_putsUSART	;wreg free
 15121  001566  D429               	goto	l15682
 15122  001568                     l15988:
 15123                           
 15124                           ; BSR set to: 2
 15125                           ;main.c: 1093: else {
 15126                           ;main.c: 1094: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 15127  001568  0E76               	movlw	high STR_108
 15128  00156A  6E21               	movwf	?_putsUSART+1,c
 15129  00156C  0ED6               	movlw	low STR_108
 15130  00156E  6E20               	movwf	?_putsUSART,c
 15131  001570  ECDF  F032         	call	_putsUSART	;wreg free
 15132  001574  D422               	goto	l15682
 15133  001576                     l15996:
 15134                           
 15135                           ; BSR set to: 2
 15136                           ;main.c: 1098: }
 15137                           ;main.c: 1101: p = strtok((0), ",");
 15138  001576  EC31  F00F         	call	PL4	;call to abstracted procedure
 15139  00157A  ECEE  F02E         	call	_strtok	;wreg free
 15140  00157E  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15141  001582  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;main.c: 1102: if ((0) != p) {
 15145  001586  0102               	movlb	2	; () banked
 15146  001588  51D3               	movf	(doModeVerbose@p_1392+1)& (0+255),w,b
 15147  00158A  11D2               	iorwf	doModeVerbose@p_1392& (0+255),w,b
 15148  00158C  E00A               	bz	l16002
 15149                           
 15150                           ; BSR set to: 2
 15151                           ;main.c: 1103: filter_priority = atoi(p);
 15152  00158E  C2D2  F062         	movff	doModeVerbose@p_1392,?_atoi
 15153  001592  C2D3  F063         	movff	doModeVerbose@p_1392+1,?_atoi+1
 15154  001596  ECD0  F026         	call	_atoi	;wreg free
 15155  00159A  5162               	movf	?_atoi& (0+255),w,b
 15156  00159C  0102               	movlb	2	; () banked
 15157  00159E  6F94               	movwf	doModeVerbose@filter_priority& (0+255),b
 15158                           
 15159                           ;main.c: 1104: }
 15160  0015A0  D007               	goto	l16010
 15161  0015A2                     l16002:
 15162                           
 15163                           ; BSR set to: 2
 15164                           ;main.c: 1105: else {
 15165                           ;main.c: 1106: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 15166  0015A2  0E75               	movlw	high STR_110
 15167  0015A4  6E21               	movwf	?_putsUSART+1,c
 15168  0015A6  0EE2               	movlw	low STR_110
 15169  0015A8  6E20               	movwf	?_putsUSART,c
 15170  0015AA  ECDF  F032         	call	_putsUSART	;wreg free
 15171  0015AE  D405               	goto	l15682
 15172  0015B0                     l16010:
 15173                           
 15174                           ; BSR set to: 2
 15175                           ;main.c: 1110: }
 15176                           ;main.c: 1113: p = strtok((0), ",");
 15177  0015B0  EC31  F00F         	call	PL4	;call to abstracted procedure
 15178  0015B4  ECEE  F02E         	call	_strtok	;wreg free
 15179  0015B8  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15180  0015BC  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15181                           
 15182                           ; BSR set to: 0
 15183                           ;main.c: 1114: if ((0) != p) {
 15184  0015C0  0102               	movlb	2	; () banked
 15185  0015C2  51D3               	movf	(doModeVerbose@p_1392+1)& (0+255),w,b
 15186  0015C4  11D2               	iorwf	doModeVerbose@p_1392& (0+255),w,b
 15187  0015C6  E00B               	bz	l16016
 15188                           
 15189                           ; BSR set to: 2
 15190                           ;main.c: 1115: filter_class = atoi(p);
 15191  0015C8  C2D2  F062         	movff	doModeVerbose@p_1392,?_atoi
 15192  0015CC  C2D3  F063         	movff	doModeVerbose@p_1392+1,?_atoi+1
 15193  0015D0  ECD0  F026         	call	_atoi	;wreg free
 15194  0015D4  C062  F290         	movff	?_atoi,doModeVerbose@filter_class
 15195  0015D8  C063  F291         	movff	?_atoi+1,doModeVerbose@filter_class+1
 15196                           
 15197                           ;main.c: 1116: }
 15198  0015DC  D008               	goto	l16024
 15199  0015DE                     l16016:
 15200                           
 15201                           ; BSR set to: 2
 15202                           ;main.c: 1117: else {
 15203                           ;main.c: 1118: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 15204  0015DE  0E77               	movlw	high STR_112
 15205  0015E0  6E21               	movwf	?_putsUSART+1,c
 15206  0015E2  0E72               	movlw	low STR_112
 15207  0015E4  6E20               	movwf	?_putsUSART,c
 15208  0015E6  ECDF  F032         	call	_putsUSART	;wreg free
 15209  0015EA  EFDD  F006         	goto	l15682
 15210  0015EE                     l16024:
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;main.c: 1122: }
 15214                           ;main.c: 1125: p = strtok((0), ",");
 15215  0015EE  EC39  F00F         	call	PL6	;call to abstracted procedure
 15216  0015F2  ECEE  F02E         	call	_strtok	;wreg free
 15217  0015F6  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15218  0015FA  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;main.c: 1126: if ((0) != p) {
 15222  0015FE  0102               	movlb	2	; () banked
 15223  001600  51D3               	movf	(doModeVerbose@p_1392+1)& (0+255),w,b
 15224  001602  11D2               	iorwf	doModeVerbose@p_1392& (0+255),w,b
 15225  001604  E00A               	bz	l16030
 15226                           
 15227                           ; BSR set to: 2
 15228                           ;main.c: 1127: filter_type = atoi(p);
 15229  001606  C2D2  F062         	movff	doModeVerbose@p_1392,?_atoi
 15230  00160A  C2D3  F063         	movff	doModeVerbose@p_1392+1,?_atoi+1
 15231  00160E  ECD0  F026         	call	_atoi	;wreg free
 15232  001612  5162               	movf	?_atoi& (0+255),w,b
 15233  001614  0102               	movlb	2	; () banked
 15234  001616  6F95               	movwf	doModeVerbose@filter_type& (0+255),b
 15235                           
 15236                           ;main.c: 1128: }
 15237  001618  D008               	goto	l16038
 15238  00161A                     l16030:
 15239                           
 15240                           ; BSR set to: 2
 15241                           ;main.c: 1129: else {
 15242                           ;main.c: 1130: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 15243  00161A  0E77               	movlw	high STR_114
 15244  00161C  6E21               	movwf	?_putsUSART+1,c
 15245  00161E  0EC0               	movlw	low STR_114
 15246  001620  6E20               	movwf	?_putsUSART,c
 15247  001622  ECDF  F032         	call	_putsUSART	;wreg free
 15248  001626  EFDD  F006         	goto	l15682
 15249  00162A                     l16038:
 15250                           
 15251                           ; BSR set to: 2
 15252                           ;main.c: 1134: }
 15253                           ;main.c: 1137: p = strtok((0), ",");
 15254  00162A  EC31  F00F         	call	PL4	;call to abstracted procedure
 15255  00162E  ECEE  F02E         	call	_strtok	;wreg free
 15256  001632  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15257  001636  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15258                           
 15259                           ; BSR set to: 0
 15260                           ;main.c: 1138: if ((0) != p) {
 15261  00163A  0102               	movlb	2	; () banked
 15262  00163C  51D3               	movf	(doModeVerbose@p_1392+1)& (0+255),w,b
 15263  00163E  11D2               	iorwf	doModeVerbose@p_1392& (0+255),w,b
 15264  001640  E00A               	bz	l16044
 15265                           
 15266                           ; BSR set to: 2
 15267                           ;main.c: 1139: filter_nodeid = atoi(p);
 15268  001642  C2D2  F062         	movff	doModeVerbose@p_1392,?_atoi
 15269  001646  C2D3  F063         	movff	doModeVerbose@p_1392+1,?_atoi+1
 15270  00164A  ECD0  F026         	call	_atoi	;wreg free
 15271  00164E  5162               	movf	?_atoi& (0+255),w,b
 15272  001650  0102               	movlb	2	; () banked
 15273  001652  6F96               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 15274                           
 15275                           ;main.c: 1140: }
 15276  001654  D008               	goto	l16052
 15277  001656                     l16044:
 15278                           
 15279                           ; BSR set to: 2
 15280                           ;main.c: 1141: else {
 15281                           ;main.c: 1142: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 15282  001656  0E76               	movlw	high STR_116
 15283  001658  6E21               	movwf	?_putsUSART+1,c
 15284  00165A  0E35               	movlw	low STR_116
 15285  00165C  6E20               	movwf	?_putsUSART,c
 15286  00165E  ECDF  F032         	call	_putsUSART	;wreg free
 15287  001662  EFDD  F006         	goto	l15682
 15288  001666                     l16052:
 15289                           
 15290                           ; BSR set to: 2
 15291                           ;main.c: 1146: }
 15292                           ;main.c: 1149: p = strtok((0), ",");
 15293  001666  DBFD               	call	PL4	;call to abstracted procedure
 15294  001668  ECEE  F02E         	call	_strtok	;wreg free
 15295  00166C  C064  F2D2         	movff	?_strtok,doModeVerbose@p_1392
 15296  001670  C065  F2D3         	movff	?_strtok+1,doModeVerbose@p_1392+1
 15297                           
 15298                           ;main.c: 1150: if ( (0) != stristr(p, "PERSISTENT") ) {
 15299  001674  C2D2  F066         	movff	doModeVerbose@p_1392,?_stristr
 15300  001678  C2D3  F067         	movff	doModeVerbose@p_1392+1,?_stristr+1
 15301  00167C  0E7E               	movlw	high STR_118
 15302  00167E  6F69               	movwf	(?_stristr+3)& (0+255),b
 15303  001680  0E54               	movlw	low STR_118
 15304  001682  6F68               	movwf	(?_stristr+2)& (0+255),b
 15305  001684  EC42  F030         	call	_stristr	;wreg free
 15306  001688  5167               	movf	(?_stristr+1)& (0+255),w,b
 15307  00168A  1166               	iorwf	?_stristr& (0+255),w,b
 15308  00168C  E003               	bz	l16056
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;main.c: 1151: bPersistent = 1;
 15312  00168E  0E01               	movlw	1
 15313  001690  0102               	movlb	2	; () banked
 15314  001692  6FB3               	movwf	doModeVerbose@bPersistent& (0+255),b
 15315  001694                     l16056:
 15316                           
 15317                           ;main.c: 1152: }
 15318                           ;main.c: 1155: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15319  001694  0E80               	movlw	128
 15320  001696  EC74  F035         	call	_ECANSetOperationMode
 15321                           
 15322                           ;main.c: 1157: uint32_t id = ((uint32_t) filter_priority << 26) |
 15323                           ;main.c: 1158: ((uint32_t) filter_class << 16) |
 15324                           ;main.c: 1159: ((uint32_t) filter_type << 8) |
 15325                           ;main.c: 1160: filter_nodeid;
 15326  00169A  C295  F1B3         	movff	doModeVerbose@filter_type,??_doModeVerbose
 15327  00169E  ECA9  F00F         	call	PL58	;call to abstracted procedure
 15328  0016A2  5190               	movf	doModeVerbose@filter_class& (0+255),w,b
 15329  0016A4  0101               	movlb	1	; () banked
 15330  0016A6  6FB7               	movwf	(??_doModeVerbose+4)& (0+255),b
 15331  0016A8  0102               	movlb	2	; () banked
 15332  0016AA  5191               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 15333  0016AC  ECCE  F00F         	call	PL78	;call to abstracted procedure
 15334  0016B0  C294  F1BB         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 15335  0016B4  DBF2               	call	PL12	;call to abstracted procedure
 15336  0016B6  5196               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 15337  0016B8  0101               	movlb	1	; () banked
 15338  0016BA  11C3               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 15339  0016BC  0102               	movlb	2	; () banked
 15340  0016BE  6F88               	movwf	doModeVerbose@id& (0+255),b
 15341  0016C0  0101               	movlb	1	; () banked
 15342  0016C2  51C4               	movf	(??_doModeVerbose+17)& (0+255),w,b
 15343  0016C4  0102               	movlb	2	; () banked
 15344  0016C6  6F89               	movwf	(doModeVerbose@id+1)& (0+255),b
 15345  0016C8  0101               	movlb	1	; () banked
 15346  0016CA  51C5               	movf	(??_doModeVerbose+18)& (0+255),w,b
 15347  0016CC  0102               	movlb	2	; () banked
 15348  0016CE  6F8A               	movwf	(doModeVerbose@id+2)& (0+255),b
 15349  0016D0  0101               	movlb	1	; () banked
 15350  0016D2  51C6               	movf	(??_doModeVerbose+19)& (0+255),w,b
 15351  0016D4  0102               	movlb	2	; () banked
 15352  0016D6  6F8B               	movwf	(doModeVerbose@id+3)& (0+255),b
 15353                           
 15354                           ; BSR set to: 2
 15355                           ;main.c: 1162: setFilter(filterno, id, bPersistent );
 15356  0016D8  C288  F023         	movff	doModeVerbose@id,?_setFilter
 15357  0016DC  C289  F024         	movff	doModeVerbose@id+1,?_setFilter+1
 15358  0016E0  C28A  F025         	movff	doModeVerbose@id+2,?_setFilter+2
 15359  0016E4  C28B  F026         	movff	doModeVerbose@id+3,?_setFilter+3
 15360  0016E8  C2B3  F027         	movff	doModeVerbose@bPersistent,?_setFilter+4
 15361  0016EC  51B8               	movf	doModeVerbose@filterno& (0+255),w,b
 15362  0016EE  ECD3  F01B         	call	_setFilter
 15363                           
 15364                           ;main.c: 1165: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 15365  0016F2  0E00               	movlw	0
 15366  0016F4  EC74  F035         	call	_ECANSetOperationMode
 15367                           
 15368                           ;main.c: 1167: putsUSART((char *) "+OK\r\n");
 15369  0016F8  0E7F               	movlw	high STR_9
 15370  0016FA  6E21               	movwf	?_putsUSART+1,c
 15371  0016FC  0E6A               	movlw	low STR_9
 15372  0016FE  6E20               	movwf	?_putsUSART,c
 15373  001700  ECDF  F032         	call	_putsUSART	;wreg free
 15374                           
 15375                           ;main.c: 1168: }
 15376  001704  D398               	goto	l16372
 15377  001706                     l16066:
 15378                           
 15379                           ; BSR set to: 1
 15380                           ;main.c: 1172: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 15381  001706  0E01               	movlw	high _cmdbuf
 15382  001708  0100               	movlb	0	; () banked
 15383  00170A  6F67               	movwf	(?_stristr+1)& (0+255),b
 15384  00170C  0E05               	movlw	low _cmdbuf
 15385  00170E  6F66               	movwf	?_stristr& (0+255),b
 15386  001710  0E7F               	movlw	high STR_120
 15387  001712  6F69               	movwf	(?_stristr+3)& (0+255),b
 15388  001714  0EA2               	movlw	low STR_120
 15389  001716  6F68               	movwf	(?_stristr+2)& (0+255),b
 15390  001718  EC42  F030         	call	_stristr	;wreg free
 15391  00171C  DB98               	call	PL2	;call to abstracted procedure
 15392  00171E  E104               	bnz	u20635
 15393  001720  0100               	movlb	0	; () banked
 15394  001722  5166               	movf	?_stristr& (0+255),w,b
 15395  001724  0101               	movlb	1	; () banked
 15396  001726  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 15397  001728                     u20635:
 15398  001728  E001 D0E6          	bnz	l16194
 15399                           
 15400                           ; BSR set to: 1
 15401                           ;main.c: 1181: strcpy(cmdbuf, cmdbuf + 8);
 15402                           
 15403                           ; BSR set to: 1
 15404  00172C  0E01               	movlw	high _cmdbuf
 15405  00172E  6E20               	movwf	?_strcpy+1,c
 15406  001730  0E05               	movlw	low _cmdbuf
 15407  001732  6E1F               	movwf	?_strcpy,c
 15408  001734  0E0D               	movlw	low (_cmdbuf+8)
 15409  001736  6FB3               	movwf	??_doModeVerbose& (0+255),b
 15410  001738  0E01               	movlw	high (_cmdbuf+8)
 15411  00173A  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 15412  00173C  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 15413  001740  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 15414  001744  ECF7  F034         	call	_strcpy	;wreg free
 15415                           
 15416                           ; BSR set to: 1
 15417                           ;main.c: 1182: char *p = strtok(cmdbuf, ",");
 15418  001748  DBE3               	call	PL38	;call to abstracted procedure
 15419  00174A  ECEE  F02E         	call	_strtok	;wreg free
 15420  00174E  C064  F2D0         	movff	?_strtok,doModeVerbose@p_1415
 15421  001752  C065  F2D1         	movff	?_strtok+1,doModeVerbose@p_1415+1
 15422                           
 15423                           ; BSR set to: 0
 15424                           ;main.c: 1183: if ((0) != p) {
 15425  001756  0102               	movlb	2	; () banked
 15426  001758  51D1               	movf	(doModeVerbose@p_1415+1)& (0+255),w,b
 15427  00175A  11D0               	iorwf	doModeVerbose@p_1415& (0+255),w,b
 15428  00175C  E014               	bz	l16088
 15429                           
 15430                           ; BSR set to: 2
 15431                           ;main.c: 1184: maskno = atoi(p);
 15432  00175E  C2D0  F062         	movff	doModeVerbose@p_1415,?_atoi
 15433  001762  C2D1  F063         	movff	doModeVerbose@p_1415+1,?_atoi+1
 15434  001766  ECD0  F026         	call	_atoi	;wreg free
 15435  00176A  5162               	movf	?_atoi& (0+255),w,b
 15436  00176C  0102               	movlb	2	; () banked
 15437  00176E  6FBE               	movwf	doModeVerbose@maskno& (0+255),b
 15438                           
 15439                           ; BSR set to: 2
 15440                           ;main.c: 1185: if (maskno > 1) {
 15441  001770  0E01               	movlw	1
 15442  001772  65BE               	cpfsgt	doModeVerbose@maskno& (0+255),b
 15443  001774  D010               	goto	l16096
 15444                           
 15445                           ; BSR set to: 2
 15446                           ;main.c: 1186: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 15447  001776  0E73               	movlw	high STR_122
 15448  001778  6E21               	movwf	?_putsUSART+1,c
 15449  00177A  0EAE               	movlw	low STR_122
 15450  00177C  6E20               	movwf	?_putsUSART,c
 15451  00177E  ECDF  F032         	call	_putsUSART	;wreg free
 15452  001782  EFDD  F006         	goto	l15682
 15453  001786                     l16088:
 15454                           
 15455                           ; BSR set to: 2
 15456                           ;main.c: 1192: else {
 15457                           ;main.c: 1193: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 15458  001786  0E78               	movlw	high STR_123
 15459  001788  6E21               	movwf	?_putsUSART+1,c
 15460  00178A  0E0C               	movlw	low STR_123
 15461  00178C  6E20               	movwf	?_putsUSART,c
 15462  00178E  ECDF  F032         	call	_putsUSART	;wreg free
 15463  001792  EFDD  F006         	goto	l15682
 15464  001796                     l16096:
 15465                           
 15466                           ; BSR set to: 2
 15467                           ;main.c: 1197: }
 15468                           ;main.c: 1200: p = strtok((0), ",");
 15469  001796  DB65               	call	PL4	;call to abstracted procedure
 15470  001798  ECEE  F02E         	call	_strtok	;wreg free
 15471  00179C  C064  F2D0         	movff	?_strtok,doModeVerbose@p_1415
 15472  0017A0  C065  F2D1         	movff	?_strtok+1,doModeVerbose@p_1415+1
 15473                           
 15474                           ; BSR set to: 0
 15475                           ;main.c: 1201: if ((0) != p) {
 15476  0017A4  0102               	movlb	2	; () banked
 15477  0017A6  51D1               	movf	(doModeVerbose@p_1415+1)& (0+255),w,b
 15478  0017A8  11D0               	iorwf	doModeVerbose@p_1415& (0+255),w,b
 15479  0017AA  E00A               	bz	l16102
 15480                           
 15481                           ; BSR set to: 2
 15482                           ;main.c: 1202: mask_priority = atoi(p);
 15483  0017AC  C2D0  F062         	movff	doModeVerbose@p_1415,?_atoi
 15484  0017B0  C2D1  F063         	movff	doModeVerbose@p_1415+1,?_atoi+1
 15485  0017B4  ECD0  F026         	call	_atoi	;wreg free
 15486  0017B8  5162               	movf	?_atoi& (0+255),w,b
 15487  0017BA  0102               	movlb	2	; () banked
 15488  0017BC  6F97               	movwf	doModeVerbose@mask_priority& (0+255),b
 15489                           
 15490                           ;main.c: 1203: }
 15491  0017BE  D008               	goto	l16110
 15492  0017C0                     l16102:
 15493                           
 15494                           ; BSR set to: 2
 15495                           ;main.c: 1204: else {
 15496                           ;main.c: 1205: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 15497  0017C0  0E76               	movlw	high STR_125
 15498  0017C2  6E21               	movwf	?_putsUSART+1,c
 15499  0017C4  0E86               	movlw	low STR_125
 15500  0017C6  6E20               	movwf	?_putsUSART,c
 15501  0017C8  ECDF  F032         	call	_putsUSART	;wreg free
 15502  0017CC  EFDD  F006         	goto	l15682
 15503  0017D0                     l16110:
 15504                           
 15505                           ; BSR set to: 2
 15506                           ;main.c: 1209: }
 15507                           ;main.c: 1212: p = strtok((0), ",");
 15508  0017D0  DB48               	call	PL4	;call to abstracted procedure
 15509  0017D2  ECEE  F02E         	call	_strtok	;wreg free
 15510  0017D6  C064  F2D0         	movff	?_strtok,doModeVerbose@p_1415
 15511  0017DA  C065  F2D1         	movff	?_strtok+1,doModeVerbose@p_1415+1
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;main.c: 1213: if ((0) != p) {
 15515  0017DE  0102               	movlb	2	; () banked
 15516  0017E0  51D1               	movf	(doModeVerbose@p_1415+1)& (0+255),w,b
 15517  0017E2  11D0               	iorwf	doModeVerbose@p_1415& (0+255),w,b
 15518  0017E4  E00B               	bz	l16116
 15519                           
 15520                           ; BSR set to: 2
 15521                           ;main.c: 1214: mask_class = atoi(p);
 15522  0017E6  C2D0  F062         	movff	doModeVerbose@p_1415,?_atoi
 15523  0017EA  C2D1  F063         	movff	doModeVerbose@p_1415+1,?_atoi+1
 15524  0017EE  ECD0  F026         	call	_atoi	;wreg free
 15525  0017F2  C062  F292         	movff	?_atoi,doModeVerbose@mask_class
 15526  0017F6  C063  F293         	movff	?_atoi+1,doModeVerbose@mask_class+1
 15527                           
 15528                           ;main.c: 1215: }
 15529  0017FA  D008               	goto	l16124
 15530  0017FC                     l16116:
 15531                           
 15532                           ; BSR set to: 2
 15533                           ;main.c: 1216: else {
 15534                           ;main.c: 1217: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 15535  0017FC  0E78               	movlw	high STR_127
 15536  0017FE  6E21               	movwf	?_putsUSART+1,c
 15537  001800  0E56               	movlw	low STR_127
 15538  001802  6E20               	movwf	?_putsUSART,c
 15539  001804  ECDF  F032         	call	_putsUSART	;wreg free
 15540  001808  EFDD  F006         	goto	l15682
 15541  00180C                     l16124:
 15542                           
 15543                           ; BSR set to: 0
 15544                           ;main.c: 1221: }
 15545                           ;main.c: 1224: p = strtok((0), ",");
 15546  00180C  DB32               	call	PL6	;call to abstracted procedure
 15547  00180E  ECEE  F02E         	call	_strtok	;wreg free
 15548  001812  C064  F2D0         	movff	?_strtok,doModeVerbose@p_1415
 15549  001816  C065  F2D1         	movff	?_strtok+1,doModeVerbose@p_1415+1
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;main.c: 1225: if ((0) != p) {
 15553  00181A  0102               	movlb	2	; () banked
 15554  00181C  51D1               	movf	(doModeVerbose@p_1415+1)& (0+255),w,b
 15555  00181E  11D0               	iorwf	doModeVerbose@p_1415& (0+255),w,b
 15556  001820  E00A               	bz	l16130
 15557                           
 15558                           ; BSR set to: 2
 15559                           ;main.c: 1226: mask_type = atoi(p);
 15560  001822  C2D0  F062         	movff	doModeVerbose@p_1415,?_atoi
 15561  001826  C2D1  F063         	movff	doModeVerbose@p_1415+1,?_atoi+1
 15562  00182A  ECD0  F026         	call	_atoi	;wreg free
 15563  00182E  5162               	movf	?_atoi& (0+255),w,b
 15564  001830  0102               	movlb	2	; () banked
 15565  001832  6F98               	movwf	doModeVerbose@mask_type& (0+255),b
 15566                           
 15567                           ;main.c: 1227: }
 15568  001834  D008               	goto	l16138
 15569  001836                     l16130:
 15570                           
 15571                           ; BSR set to: 2
 15572                           ;main.c: 1228: else {
 15573                           ;main.c: 1229: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 15574  001836  0E78               	movlw	high STR_129
 15575  001838  6E21               	movwf	?_putsUSART+1,c
 15576  00183A  0E7B               	movlw	low STR_129
 15577  00183C  6E20               	movwf	?_putsUSART,c
 15578  00183E  ECDF  F032         	call	_putsUSART	;wreg free
 15579  001842  EFDD  F006         	goto	l15682
 15580  001846                     l16138:
 15581                           
 15582                           ; BSR set to: 2
 15583                           ;main.c: 1233: }
 15584                           ;main.c: 1236: p = strtok((0), ",");
 15585  001846  DB0D               	call	PL4	;call to abstracted procedure
 15586  001848  ECEE  F02E         	call	_strtok	;wreg free
 15587  00184C  C064  F2D0         	movff	?_strtok,doModeVerbose@p_1415
 15588  001850  C065  F2D1         	movff	?_strtok+1,doModeVerbose@p_1415+1
 15589                           
 15590                           ; BSR set to: 0
 15591                           ;main.c: 1237: if ((0) != p) {
 15592  001854  0102               	movlb	2	; () banked
 15593  001856  51D1               	movf	(doModeVerbose@p_1415+1)& (0+255),w,b
 15594  001858  11D0               	iorwf	doModeVerbose@p_1415& (0+255),w,b
 15595  00185A  E00A               	bz	l16144
 15596                           
 15597                           ; BSR set to: 2
 15598                           ;main.c: 1238: mask_nodeid = atoi(p);
 15599  00185C  C2D0  F062         	movff	doModeVerbose@p_1415,?_atoi
 15600  001860  C2D1  F063         	movff	doModeVerbose@p_1415+1,?_atoi+1
 15601  001864  ECD0  F026         	call	_atoi	;wreg free
 15602  001868  5162               	movf	?_atoi& (0+255),w,b
 15603  00186A  0102               	movlb	2	; () banked
 15604  00186C  6F99               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 15605                           
 15606                           ;main.c: 1239: }
 15607  00186E  D008               	goto	l16152
 15608  001870                     l16144:
 15609                           
 15610                           ; BSR set to: 2
 15611                           ;main.c: 1240: else {
 15612                           ;main.c: 1241: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 15613  001870  0E77               	movlw	high STR_131
 15614  001872  6E21               	movwf	?_putsUSART+1,c
 15615  001874  0E4B               	movlw	low STR_131
 15616  001876  6E20               	movwf	?_putsUSART,c
 15617  001878  ECDF  F032         	call	_putsUSART	;wreg free
 15618  00187C  EFDD  F006         	goto	l15682
 15619  001880                     l16152:
 15620                           
 15621                           ; BSR set to: 2
 15622                           ;main.c: 1245: }
 15623                           ;main.c: 1246: uint32_t id = ((uint32_t) mask_priority << 26) |
 15624                           ;main.c: 1247: ((uint32_t) mask_class << 16) |
 15625                           ;main.c: 1248: ((uint32_t) mask_type << 8) |
 15626                           ;main.c: 1249: mask_nodeid;
 15627  001880  C298  F1B3         	movff	doModeVerbose@mask_type,??_doModeVerbose
 15628  001884  DB66               	call	PL58	;call to abstracted procedure
 15629  001886  5192               	movf	doModeVerbose@mask_class& (0+255),w,b
 15630  001888  0101               	movlb	1	; () banked
 15631  00188A  6FB7               	movwf	(??_doModeVerbose+4)& (0+255),b
 15632  00188C  0102               	movlb	2	; () banked
 15633  00188E  5193               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 15634  001890  DB85               	call	PL78	;call to abstracted procedure
 15635  001892  C297  F1BB         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 15636  001896  DB01               	call	PL12	;call to abstracted procedure
 15637  001898  5199               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 15638  00189A  0101               	movlb	1	; () banked
 15639  00189C  11C3               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 15640  00189E  0102               	movlb	2	; () banked
 15641  0018A0  6FCC               	movwf	doModeVerbose@id_1427& (0+255),b
 15642  0018A2  0101               	movlb	1	; () banked
 15643  0018A4  51C4               	movf	(??_doModeVerbose+17)& (0+255),w,b
 15644  0018A6  0102               	movlb	2	; () banked
 15645  0018A8  6FCD               	movwf	(doModeVerbose@id_1427+1)& (0+255),b
 15646  0018AA  0101               	movlb	1	; () banked
 15647  0018AC  51C5               	movf	(??_doModeVerbose+18)& (0+255),w,b
 15648  0018AE  0102               	movlb	2	; () banked
 15649  0018B0  6FCE               	movwf	(doModeVerbose@id_1427+2)& (0+255),b
 15650  0018B2  0101               	movlb	1	; () banked
 15651  0018B4  51C6               	movf	(??_doModeVerbose+19)& (0+255),w,b
 15652  0018B6  0102               	movlb	2	; () banked
 15653  0018B8  6FCF               	movwf	(doModeVerbose@id_1427+3)& (0+255),b
 15654                           
 15655                           ; BSR set to: 2
 15656                           ;main.c: 1252: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 15657  0018BA  0E80               	movlw	128
 15658  0018BC  EC74  F035         	call	_ECANSetOperationMode
 15659                           
 15660                           ;main.c: 1254: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 15661                           ;main.c: 1255: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 15662  0018C0  0102               	movlb	2	; () banked
 15663  0018C2  51BE               	movf	doModeVerbose@maskno& (0+255),w,b
 15664  0018C4  E008               	bz	l16160
 15665                           
 15666                           ; BSR set to: 2
 15667  0018C6  010F               	movlb	15	; () banked
 15668  0018C8  0E0F               	movlw	15	;volatile
 15669  0018CA  6E22               	movwf	?__CANIDToRegs+1,c
 15670  0018CC  0E18               	movlw	24	;volatile
 15671  0018CE  DB4E               	call	PL70	;call to abstracted procedure
 15672  0018D0  ECC1  F025         	call	__CANIDToRegs	;wreg free
 15673  0018D4  D007               	goto	l16162
 15674  0018D6                     l16160:
 15675                           
 15676                           ; BSR set to: 2
 15677  0018D6  010F               	movlb	15	; () banked
 15678  0018D8  0E0F               	movlw	15	;volatile
 15679  0018DA  6E22               	movwf	?__CANIDToRegs+1,c
 15680  0018DC  0E1C               	movlw	28	;volatile
 15681  0018DE  DB46               	call	PL70	;call to abstracted procedure
 15682  0018E0  ECC1  F025         	call	__CANIDToRegs	;wreg free
 15683  0018E4                     l16162:
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;main.c: 1258: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 15687  0018E4  0E00               	movlw	0
 15688  0018E6  EC74  F035         	call	_ECANSetOperationMode
 15689                           
 15690                           ;main.c: 1272: }
 15691                           ;main.c: 1273: }
 15692                           ;main.c: 1275: putsUSART((char *) "+OK\r\n");
 15693  0018EA  0E7F               	movlw	high STR_9
 15694  0018EC  6E21               	movwf	?_putsUSART+1,c
 15695  0018EE  0E6A               	movlw	low STR_9
 15696  0018F0  6E20               	movwf	?_putsUSART,c
 15697  0018F2  ECDF  F032         	call	_putsUSART	;wreg free
 15698                           
 15699                           ;main.c: 1277: }
 15700  0018F6  D29F               	goto	l16372
 15701  0018F8                     l16194:
 15702                           
 15703                           ; BSR set to: 1
 15704                           ;main.c: 1289: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 15705  0018F8  0E01               	movlw	high _cmdbuf
 15706  0018FA  0100               	movlb	0	; () banked
 15707  0018FC  6F67               	movwf	(?_stristr+1)& (0+255),b
 15708  0018FE  0E05               	movlw	low _cmdbuf
 15709  001900  6F66               	movwf	?_stristr& (0+255),b
 15710  001902  0E7F               	movlw	high STR_133
 15711  001904  6F69               	movwf	(?_stristr+3)& (0+255),b
 15712  001906  0E8E               	movlw	low STR_133
 15713  001908  6F68               	movwf	(?_stristr+2)& (0+255),b
 15714  00190A  EC42  F030         	call	_stristr	;wreg free
 15715  00190E  DA9F               	call	PL2	;call to abstracted procedure
 15716  001910  E104               	bnz	u20725
 15717  001912  0100               	movlb	0	; () banked
 15718  001914  5166               	movf	?_stristr& (0+255),w,b
 15719  001916  0101               	movlb	1	; () banked
 15720  001918  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 15721  00191A                     u20725:
 15722  00191A  E001 D27C          	bnz	l16366
 15723                           
 15724                           ; BSR set to: 1
 15725                           ;main.c: 1292: strcpy(cmdbuf, cmdbuf + 4);
 15726  00191E  0E01               	movlw	high _cmdbuf
 15727  001920  6E20               	movwf	?_strcpy+1,c
 15728  001922  0E05               	movlw	low _cmdbuf
 15729  001924  6E1F               	movwf	?_strcpy,c
 15730  001926  0E09               	movlw	low (_cmdbuf+4)
 15731  001928  6FB3               	movwf	??_doModeVerbose& (0+255),b
 15732  00192A  0E01               	movlw	high (_cmdbuf+4)
 15733  00192C  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 15734  00192E  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 15735  001932  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 15736  001936  ECF7  F034         	call	_strcpy	;wreg free
 15737                           
 15738                           ; BSR set to: 1
 15739                           ;main.c: 1295: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 15740  00193A  0E01               	movlw	high _cmdbuf
 15741  00193C  0100               	movlb	0	; () banked
 15742  00193E  6F67               	movwf	(?_stristr+1)& (0+255),b
 15743  001940  0E05               	movlw	low _cmdbuf
 15744  001942  6F66               	movwf	?_stristr& (0+255),b
 15745  001944  0E7F               	movlw	high STR_134
 15746  001946  6F69               	movwf	(?_stristr+3)& (0+255),b
 15747  001948  0ED9               	movlw	low STR_134
 15748  00194A  6F68               	movwf	(?_stristr+2)& (0+255),b
 15749  00194C  EC42  F030         	call	_stristr	;wreg free
 15750  001950  DA7E               	call	PL2	;call to abstracted procedure
 15751  001952  E104               	bnz	u20735
 15752  001954  0100               	movlb	0	; () banked
 15753  001956  5166               	movf	?_stristr& (0+255),w,b
 15754  001958  0101               	movlb	1	; () banked
 15755  00195A  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 15756  00195C                     u20735:
 15757  00195C  E112               	bnz	l16206
 15758                           
 15759                           ; BSR set to: 1
 15760                           ;main.c: 1296: bHex = 1;
 15761  00195E  0E01               	movlw	1
 15762  001960  6F00               	movwf	_bHex& (0+255),b
 15763                           
 15764                           ; BSR set to: 1
 15765                           ;main.c: 1297: (Busy_eep(), Write_b_eep(0x06,1));
 15766  001962  ECC6  F035         	call	_Busy_eep	;wreg free
 15767  001966  6A20               	clrf	?_Write_b_eep+1,c
 15768  001968  0E06               	movlw	6
 15769  00196A  6E1F               	movwf	?_Write_b_eep,c
 15770  00196C  0E01               	movlw	1
 15771  00196E  6E21               	movwf	?_Write_b_eep+2,c
 15772  001970  ECC5  F034         	call	_Write_b_eep	;wreg free
 15773                           
 15774                           ;main.c: 1298: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 15775  001974  0E75               	movlw	high STR_135
 15776  001976  6E21               	movwf	?_putsUSART+1,c
 15777  001978  0EB6               	movlw	low STR_135
 15778  00197A  6E20               	movwf	?_putsUSART,c
 15779  00197C  ECDF  F032         	call	_putsUSART	;wreg free
 15780                           
 15781                           ;main.c: 1299: }
 15782  001980  D25A               	goto	l16372
 15783  001982                     l16206:
 15784                           
 15785                           ; BSR set to: 1
 15786                           ;main.c: 1301: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 15787  001982  0E01               	movlw	high _cmdbuf
 15788  001984  0100               	movlb	0	; () banked
 15789  001986  6F67               	movwf	(?_stristr+1)& (0+255),b
 15790  001988  0E05               	movlw	low _cmdbuf
 15791  00198A  6F66               	movwf	?_stristr& (0+255),b
 15792  00198C  0E7E               	movlw	high STR_136
 15793  00198E  6F69               	movwf	(?_stristr+3)& (0+255),b
 15794  001990  0EF0               	movlw	low STR_136
 15795  001992  6F68               	movwf	(?_stristr+2)& (0+255),b
 15796  001994  EC42  F030         	call	_stristr	;wreg free
 15797  001998  DA5A               	call	PL2	;call to abstracted procedure
 15798  00199A  E104               	bnz	u20745
 15799  00199C  0100               	movlb	0	; () banked
 15800  00199E  5166               	movf	?_stristr& (0+255),w,b
 15801  0019A0  0101               	movlb	1	; () banked
 15802  0019A2  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 15803  0019A4                     u20745:
 15804  0019A4  E111               	bnz	l16216
 15805                           
 15806                           ; BSR set to: 1
 15807                           ;main.c: 1302: bHex = 0;
 15808  0019A6  6B00               	clrf	_bHex& (0+255),b
 15809                           
 15810                           ; BSR set to: 1
 15811                           ;main.c: 1303: (Busy_eep(), Write_b_eep(0x06,0));
 15812  0019A8  ECC6  F035         	call	_Busy_eep	;wreg free
 15813  0019AC  6A20               	clrf	?_Write_b_eep+1,c
 15814  0019AE  0E06               	movlw	6
 15815  0019B0  6E1F               	movwf	?_Write_b_eep,c
 15816  0019B2  0E00               	movlw	0
 15817  0019B4  6A21               	clrf	?_Write_b_eep+2,c
 15818  0019B6  ECC5  F034         	call	_Write_b_eep	;wreg free
 15819                           
 15820                           ;main.c: 1304: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 15821  0019BA  0E76               	movlw	high STR_137
 15822  0019BC  6E21               	movwf	?_putsUSART+1,c
 15823  0019BE  0EAE               	movlw	low STR_137
 15824  0019C0  6E20               	movwf	?_putsUSART,c
 15825  0019C2  ECDF  F032         	call	_putsUSART	;wreg free
 15826                           
 15827                           ;main.c: 1305: }
 15828  0019C6  D237               	goto	l16372
 15829  0019C8                     l16216:
 15830                           
 15831                           ; BSR set to: 1
 15832                           ;main.c: 1306: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 15833  0019C8  0E01               	movlw	high _cmdbuf
 15834  0019CA  0100               	movlb	0	; () banked
 15835  0019CC  6F67               	movwf	(?_stristr+1)& (0+255),b
 15836  0019CE  0E05               	movlw	low _cmdbuf
 15837  0019D0  6F66               	movwf	?_stristr& (0+255),b
 15838  0019D2  0E7E               	movlw	high STR_138
 15839  0019D4  6F69               	movwf	(?_stristr+3)& (0+255),b
 15840  0019D6  0E49               	movlw	low STR_138
 15841  0019D8  6F68               	movwf	(?_stristr+2)& (0+255),b
 15842  0019DA  EC42  F030         	call	_stristr	;wreg free
 15843  0019DE  5167               	movf	(?_stristr+1)& (0+255),w,b
 15844  0019E0  1166               	iorwf	?_stristr& (0+255),w,b
 15845  0019E2  E023               	bz	l16230
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;main.c: 1307: strcpy(cmdbuf, cmdbuf + 10);
 15849  0019E4  0101               	movlb	1	; () banked
 15850  0019E6  0E01               	movlw	high _cmdbuf
 15851  0019E8  DACD               	call	PL72	;call to abstracted procedure
 15852  0019EA  ECF7  F034         	call	_strcpy	;wreg free
 15853                           
 15854                           ; BSR set to: 1
 15855                           ;main.c: 1308: rwtimeout = atoi(cmdbuf);
 15856  0019EE  0E01               	movlw	high _cmdbuf
 15857  0019F0  0100               	movlb	0	; () banked
 15858  0019F2  6F63               	movwf	(?_atoi+1)& (0+255),b
 15859  0019F4  0E05               	movlw	low _cmdbuf
 15860  0019F6  6F62               	movwf	?_atoi& (0+255),b
 15861  0019F8  ECD0  F026         	call	_atoi	;wreg free
 15862  0019FC  5162               	movf	?_atoi& (0+255),w,b
 15863  0019FE  0101               	movlb	1	; () banked
 15864  001A00  6F04               	movwf	_rwtimeout& (0+255),b
 15865                           
 15866                           ; BSR set to: 1
 15867                           ;main.c: 1309: if (rwtimeout < 20u) {
 15868  001A02  0E14               	movlw	20
 15869  001A04  6104               	cpfslt	_rwtimeout& (0+255),b
 15870  001A06  D001               	goto	l16226
 15871                           
 15872                           ; BSR set to: 1
 15873                           ;main.c: 1310: rwtimeout = 20u;
 15874  001A08  6F04               	movwf	_rwtimeout& (0+255),b
 15875  001A0A                     l16226:
 15876                           
 15877                           ; BSR set to: 1
 15878                           ;main.c: 1311: }
 15879                           ;main.c: 1312: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 15880  001A0A  ECC6  F035         	call	_Busy_eep	;wreg free
 15881  001A0E  6A20               	clrf	?_Write_b_eep+1,c
 15882  001A10  0E09               	movlw	9
 15883  001A12  6E1F               	movwf	?_Write_b_eep,c
 15884  001A14  C104  F021         	movff	_rwtimeout,?_Write_b_eep+2
 15885  001A18  ECC5  F034         	call	_Write_b_eep	;wreg free
 15886                           
 15887                           ;main.c: 1313: putsUSART((char *) "+OK\r\n");
 15888  001A1C  0E7F               	movlw	high STR_9
 15889  001A1E  6E21               	movwf	?_putsUSART+1,c
 15890  001A20  0E6A               	movlw	low STR_9
 15891  001A22  6E20               	movwf	?_putsUSART,c
 15892  001A24  ECDF  F032         	call	_putsUSART	;wreg free
 15893                           
 15894                           ;main.c: 1314: }
 15895  001A28  D206               	goto	l16372
 15896  001A2A                     l16230:
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;main.c: 1316: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 15900  001A2A  0E01               	movlw	high _cmdbuf
 15901  001A2C  0100               	movlb	0	; () banked
 15902  001A2E  6F67               	movwf	(?_stristr+1)& (0+255),b
 15903  001A30  0E05               	movlw	low _cmdbuf
 15904  001A32  6F66               	movwf	?_stristr& (0+255),b
 15905  001A34  0E7E               	movlw	high STR_140
 15906  001A36  6F69               	movwf	(?_stristr+3)& (0+255),b
 15907  001A38  0E9C               	movlw	low STR_140
 15908  001A3A  6F68               	movwf	(?_stristr+2)& (0+255),b
 15909  001A3C  EC42  F030         	call	_stristr	;wreg free
 15910  001A40  5167               	movf	(?_stristr+1)& (0+255),w,b
 15911  001A42  1166               	iorwf	?_stristr& (0+255),w,b
 15912  001A44  E05B               	bz	l16264
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;main.c: 1317: strcpy(cmdbuf, cmdbuf + 8);
 15916  001A46  DA4E               	call	PL22	;call to abstracted procedure
 15917  001A48  ECF7  F034         	call	_strcpy	;wreg free
 15918                           
 15919                           ; BSR set to: 1
 15920                           ;main.c: 1318: if (0 != stristr(cmdbuf, "CLOSE")) {
 15921  001A4C  0E01               	movlw	high _cmdbuf
 15922  001A4E  0100               	movlb	0	; () banked
 15923  001A50  DAE3               	call	PL132	;call to abstracted procedure
 15924  001A52  EC42  F030         	call	_stristr	;wreg free
 15925  001A56  5167               	movf	(?_stristr+1)& (0+255),w,b
 15926  001A58  1166               	iorwf	?_stristr& (0+255),w,b
 15927  001A5A  E00A               	bz	l16240
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;main.c: 1319: (Busy_eep(), Write_b_eep(0x07,0));
 15931  001A5C  ECC6  F035         	call	_Busy_eep	;wreg free
 15932  001A60  6A20               	clrf	?_Write_b_eep+1,c
 15933  001A62  0E07               	movlw	7
 15934  001A64  6E1F               	movwf	?_Write_b_eep,c
 15935  001A66  0E00               	movlw	0
 15936  001A68  6A21               	clrf	?_Write_b_eep+2,c
 15937  001A6A  ECC5  F034         	call	_Write_b_eep	;wreg free
 15938                           
 15939                           ;main.c: 1320: }
 15940  001A6E  D1E3               	goto	l16372
 15941  001A70                     l16240:
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;main.c: 1321: else if (0 != stristr(cmdbuf, "OPEN")) {
 15945  001A70  DAA0               	call	PL84	;call to abstracted procedure
 15946  001A72  EC42  F030         	call	_stristr	;wreg free
 15947  001A76  5167               	movf	(?_stristr+1)& (0+255),w,b
 15948  001A78  1166               	iorwf	?_stristr& (0+255),w,b
 15949  001A7A  E00A               	bz	l16246
 15950                           
 15951                           ; BSR set to: 0
 15952                           ;main.c: 1322: (Busy_eep(), Write_b_eep(0x07,1));
 15953  001A7C  ECC6  F035         	call	_Busy_eep	;wreg free
 15954  001A80  6A20               	clrf	?_Write_b_eep+1,c
 15955  001A82  0E07               	movlw	7
 15956  001A84  6E1F               	movwf	?_Write_b_eep,c
 15957  001A86  0E01               	movlw	1
 15958  001A88  6E21               	movwf	?_Write_b_eep+2,c
 15959  001A8A  ECC5  F034         	call	_Write_b_eep	;wreg free
 15960                           
 15961                           ;main.c: 1323: }
 15962  001A8E  D1D3               	goto	l16372
 15963  001A90                     l16246:
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;main.c: 1324: else if (0 != stristr(cmdbuf, "SILENT")) {
 15967  001A90  0E01               	movlw	high _cmdbuf
 15968  001A92  DA99               	call	PL112	;call to abstracted procedure
 15969  001A94  EC42  F030         	call	_stristr	;wreg free
 15970  001A98  5167               	movf	(?_stristr+1)& (0+255),w,b
 15971  001A9A  1166               	iorwf	?_stristr& (0+255),w,b
 15972  001A9C  E00A               	bz	l16252
 15973                           
 15974                           ; BSR set to: 0
 15975                           ;main.c: 1325: (Busy_eep(), Write_b_eep(0x07,2));
 15976  001A9E  ECC6  F035         	call	_Busy_eep	;wreg free
 15977  001AA2  6A20               	clrf	?_Write_b_eep+1,c
 15978  001AA4  0E07               	movlw	7
 15979  001AA6  6E1F               	movwf	?_Write_b_eep,c
 15980  001AA8  0E02               	movlw	2
 15981  001AAA  6E21               	movwf	?_Write_b_eep+2,c
 15982  001AAC  ECC5  F034         	call	_Write_b_eep	;wreg free
 15983                           
 15984                           ;main.c: 1326: }
 15985  001AB0  D1C2               	goto	l16372
 15986  001AB2                     l16252:
 15987                           
 15988                           ; BSR set to: 0
 15989                           ;main.c: 1327: else if (0 != stristr(cmdbuf, "LISTEN")) {
 15990  001AB2  0E01               	movlw	high _cmdbuf
 15991  001AB4  0100               	movlb	0	; () banked
 15992  001AB6  DAA0               	call	PL124	;call to abstracted procedure
 15993  001AB8  EC42  F030         	call	_stristr	;wreg free
 15994  001ABC  5167               	movf	(?_stristr+1)& (0+255),w,b
 15995  001ABE  1166               	iorwf	?_stristr& (0+255),w,b
 15996  001AC0  E00A               	bz	l16258
 15997                           
 15998                           ; BSR set to: 0
 15999                           ;main.c: 1328: (Busy_eep(), Write_b_eep(0x07,3));
 16000  001AC2  ECC6  F035         	call	_Busy_eep	;wreg free
 16001  001AC6  6A20               	clrf	?_Write_b_eep+1,c
 16002  001AC8  0E07               	movlw	7
 16003  001ACA  6E1F               	movwf	?_Write_b_eep,c
 16004  001ACC  0E03               	movlw	3
 16005  001ACE  6E21               	movwf	?_Write_b_eep+2,c
 16006  001AD0  ECC5  F034         	call	_Write_b_eep	;wreg free
 16007                           
 16008                           ;main.c: 1329: }
 16009  001AD4  D1B0               	goto	l16372
 16010  001AD6                     l16258:
 16011                           
 16012                           ; BSR set to: 0
 16013                           ;main.c: 1330: else if (0 != stristr(cmdbuf, "LOOPBACK")) {
 16014  001AD6  0E01               	movlw	high _cmdbuf
 16015  001AD8  0100               	movlb	0	; () banked
 16016  001ADA  DA96               	call	PL128	;call to abstracted procedure
 16017  001ADC  EC42  F030         	call	_stristr	;wreg free
 16018  001AE0  5167               	movf	(?_stristr+1)& (0+255),w,b
 16019  001AE2  1166               	iorwf	?_stristr& (0+255),w,b
 16020  001AE4  E101 D1A7          	bz	l16372
 16021                           
 16022                           ; BSR set to: 0
 16023                           ;main.c: 1331: (Busy_eep(), Write_b_eep(0x07,4));
 16024  001AE8  ECC6  F035         	call	_Busy_eep	;wreg free
 16025  001AEC  6A20               	clrf	?_Write_b_eep+1,c
 16026  001AEE  0E07               	movlw	7
 16027  001AF0  6E1F               	movwf	?_Write_b_eep,c
 16028  001AF2  0E04               	movlw	4
 16029  001AF4  6E21               	movwf	?_Write_b_eep+2,c
 16030  001AF6  ECC5  F034         	call	_Write_b_eep	;wreg free
 16031                           
 16032                           ; BSR set to: 0
 16033  001AFA  D19D               	goto	l16372
 16034  001AFC                     l16264:
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;main.c: 1334: else if (0 != stristr(cmdbuf, "MODE ")) {
 16038  001AFC  0E01               	movlw	high _cmdbuf
 16039  001AFE  0100               	movlb	0	; () banked
 16040  001B00  6F67               	movwf	(?_stristr+1)& (0+255),b
 16041  001B02  0E05               	movlw	low _cmdbuf
 16042  001B04  6F66               	movwf	?_stristr& (0+255),b
 16043  001B06  0E7F               	movlw	high STR_146
 16044  001B08  6F69               	movwf	(?_stristr+3)& (0+255),b
 16045  001B0A  0E76               	movlw	low STR_146
 16046  001B0C  6F68               	movwf	(?_stristr+2)& (0+255),b
 16047  001B0E  EC42  F030         	call	_stristr	;wreg free
 16048  001B12  5167               	movf	(?_stristr+1)& (0+255),w,b
 16049  001B14  1166               	iorwf	?_stristr& (0+255),w,b
 16050  001B16  E064               	bz	l16294
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;main.c: 1335: strcpy(cmdbuf, cmdbuf + 5);
 16054  001B18  0101               	movlb	1	; () banked
 16055  001B1A  D9B2               	call	PL8	;call to abstracted procedure
 16056  001B1C  ECF7  F034         	call	_strcpy	;wreg free
 16057                           
 16058                           ; BSR set to: 1
 16059                           ;main.c: 1336: if (0 != stristr(cmdbuf, "VERBOSE")) {
 16060  001B20  0E01               	movlw	high _cmdbuf
 16061  001B22  0100               	movlb	0	; () banked
 16062  001B24  6F67               	movwf	(?_stristr+1)& (0+255),b
 16063  001B26  0E05               	movlw	low _cmdbuf
 16064  001B28  6F66               	movwf	?_stristr& (0+255),b
 16065  001B2A  0E7E               	movlw	high STR_147
 16066  001B2C  6F69               	movwf	(?_stristr+3)& (0+255),b
 16067  001B2E  0EE8               	movlw	low STR_147
 16068  001B30  6F68               	movwf	(?_stristr+2)& (0+255),b
 16069  001B32  EC42  F030         	call	_stristr	;wreg free
 16070  001B36  5167               	movf	(?_stristr+1)& (0+255),w,b
 16071  001B38  1166               	iorwf	?_stristr& (0+255),w,b
 16072  001B3A  E011               	bz	l16278
 16073                           
 16074                           ; BSR set to: 0
 16075                           ;main.c: 1337: mode = 0;
 16076  001B3C  6BF1               	clrf	_mode& (0+255),b
 16077                           
 16078                           ; BSR set to: 0
 16079                           ;main.c: 1338: (Busy_eep(), Write_b_eep(0x03,0));
 16080  001B3E  ECC6  F035         	call	_Busy_eep	;wreg free
 16081  001B42  6A20               	clrf	?_Write_b_eep+1,c
 16082  001B44  0E03               	movlw	3
 16083  001B46  6E1F               	movwf	?_Write_b_eep,c
 16084  001B48  0E00               	movlw	0
 16085  001B4A  6A21               	clrf	?_Write_b_eep+2,c
 16086  001B4C  ECC5  F034         	call	_Write_b_eep	;wreg free
 16087                           
 16088                           ;main.c: 1339: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 16089  001B50  0E7A               	movlw	high STR_148
 16090  001B52  6E21               	movwf	?_putsUSART+1,c
 16091  001B54  0E46               	movlw	low STR_148
 16092  001B56  6E20               	movwf	?_putsUSART,c
 16093  001B58  ECDF  F032         	call	_putsUSART	;wreg free
 16094                           
 16095                           ;main.c: 1340: }
 16096  001B5C  D16C               	goto	l16372
 16097  001B5E                     l16278:
 16098                           
 16099                           ; BSR set to: 0
 16100                           ;main.c: 1341: else if (0 != stristr(cmdbuf, "VSCP")) {
 16101  001B5E  0E01               	movlw	high _cmdbuf
 16102  001B60  0100               	movlb	0	; () banked
 16103  001B62  6F67               	movwf	(?_stristr+1)& (0+255),b
 16104  001B64  0E05               	movlw	low _cmdbuf
 16105  001B66  6F66               	movwf	?_stristr& (0+255),b
 16106  001B68  0E7F               	movlw	high STR_149
 16107  001B6A  6F69               	movwf	(?_stristr+3)& (0+255),b
 16108  001B6C  0EB1               	movlw	low STR_149
 16109  001B6E  6F68               	movwf	(?_stristr+2)& (0+255),b
 16110  001B70  EC42  F030         	call	_stristr	;wreg free
 16111  001B74  5167               	movf	(?_stristr+1)& (0+255),w,b
 16112  001B76  1166               	iorwf	?_stristr& (0+255),w,b
 16113  001B78  E012               	bz	l16286
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;main.c: 1342: mode = 1;
 16117  001B7A  0E01               	movlw	1
 16118  001B7C  6FF1               	movwf	_mode& (0+255),b
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;main.c: 1343: (Busy_eep(), Write_b_eep(0x03,1));
 16122  001B7E  ECC6  F035         	call	_Busy_eep	;wreg free
 16123  001B82  6A20               	clrf	?_Write_b_eep+1,c
 16124  001B84  0E03               	movlw	3
 16125  001B86  6E1F               	movwf	?_Write_b_eep,c
 16126  001B88  0E01               	movlw	1
 16127  001B8A  6E21               	movwf	?_Write_b_eep+2,c
 16128  001B8C  ECC5  F034         	call	_Write_b_eep	;wreg free
 16129                           
 16130                           ;main.c: 1344: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 16131  001B90  0E79               	movlw	high STR_150
 16132  001B92  6E21               	movwf	?_putsUSART+1,c
 16133  001B94  0EAE               	movlw	low STR_150
 16134  001B96  6E20               	movwf	?_putsUSART,c
 16135  001B98  ECDF  F032         	call	_putsUSART	;wreg free
 16136                           
 16137                           ;main.c: 1345: }
 16138  001B9C  D14C               	goto	l16372
 16139  001B9E                     l16286:
 16140                           
 16141                           ; BSR set to: 0
 16142                           ;main.c: 1346: else if (0 != stristr(cmdbuf, "SLCAN")) {
 16143  001B9E  0E01               	movlw	high _cmdbuf
 16144  001BA0  0100               	movlb	0	; () banked
 16145  001BA2  6F67               	movwf	(?_stristr+1)& (0+255),b
 16146  001BA4  0E05               	movlw	low _cmdbuf
 16147  001BA6  6F66               	movwf	?_stristr& (0+255),b
 16148  001BA8  0E7F               	movlw	high STR_151
 16149  001BAA  6F69               	movwf	(?_stristr+3)& (0+255),b
 16150  001BAC  0E88               	movlw	low STR_151
 16151  001BAE  6F68               	movwf	(?_stristr+2)& (0+255),b
 16152  001BB0  EC42  F030         	call	_stristr	;wreg free
 16153  001BB4  5167               	movf	(?_stristr+1)& (0+255),w,b
 16154  001BB6  1166               	iorwf	?_stristr& (0+255),w,b
 16155  001BB8  E101 D13D          	bz	l16372
 16156                           
 16157                           ; BSR set to: 0
 16158                           ;main.c: 1347: mode = 2;
 16159  001BBC  0E02               	movlw	2
 16160  001BBE  6FF1               	movwf	_mode& (0+255),b
 16161                           
 16162                           ; BSR set to: 0
 16163                           ;main.c: 1348: (Busy_eep(), Write_b_eep(0x03,2));
 16164  001BC0  ECC6  F035         	call	_Busy_eep	;wreg free
 16165  001BC4  6A20               	clrf	?_Write_b_eep+1,c
 16166  001BC6  0E03               	movlw	3
 16167  001BC8  6E1F               	movwf	?_Write_b_eep,c
 16168  001BCA  0E02               	movlw	2
 16169  001BCC  6E21               	movwf	?_Write_b_eep+2,c
 16170  001BCE  ECC5  F034         	call	_Write_b_eep	;wreg free
 16171                           
 16172                           ;main.c: 1349: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 16173  001BD2  0E7A               	movlw	high STR_152
 16174  001BD4  6E21               	movwf	?_putsUSART+1,c
 16175  001BD6  0ECE               	movlw	low STR_152
 16176  001BD8  6E20               	movwf	?_putsUSART,c
 16177  001BDA  ECDF  F032         	call	_putsUSART	;wreg free
 16178  001BDE  D12B               	goto	l16372
 16179  001BE0                     l16294:
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;main.c: 1353: else if (cmdbuf == stristr(cmdbuf, "ECHO ")) {
 16183  001BE0  0E01               	movlw	high _cmdbuf
 16184  001BE2  0100               	movlb	0	; () banked
 16185  001BE4  6F67               	movwf	(?_stristr+1)& (0+255),b
 16186  001BE6  0E05               	movlw	low _cmdbuf
 16187  001BE8  6F66               	movwf	?_stristr& (0+255),b
 16188  001BEA  0E7F               	movlw	high STR_153
 16189  001BEC  6F69               	movwf	(?_stristr+3)& (0+255),b
 16190  001BEE  0E7C               	movlw	low STR_153
 16191  001BF0  6F68               	movwf	(?_stristr+2)& (0+255),b
 16192  001BF2  EC42  F030         	call	_stristr	;wreg free
 16193  001BF6  D92B               	call	PL2	;call to abstracted procedure
 16194  001BF8  E104               	bnz	u20875
 16195  001BFA  0100               	movlb	0	; () banked
 16196  001BFC  5166               	movf	?_stristr& (0+255),w,b
 16197  001BFE  0101               	movlb	1	; () banked
 16198  001C00  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 16199  001C02                     u20875:
 16200  001C02  E13F               	bnz	l16318
 16201                           
 16202                           ; BSR set to: 1
 16203                           ;main.c: 1354: strcpy(cmdbuf, cmdbuf + 5);
 16204  001C04  D93D               	call	PL8	;call to abstracted procedure
 16205  001C06  ECF7  F034         	call	_strcpy	;wreg free
 16206                           
 16207                           ; BSR set to: 1
 16208                           ;main.c: 1355: if (0 != stristr(cmdbuf, "ON")) {
 16209  001C0A  0E01               	movlw	high _cmdbuf
 16210  001C0C  0100               	movlb	0	; () banked
 16211  001C0E  D9EC               	call	PL120	;call to abstracted procedure
 16212  001C10  EC42  F030         	call	_stristr	;wreg free
 16213  001C14  5167               	movf	(?_stristr+1)& (0+255),w,b
 16214  001C16  1166               	iorwf	?_stristr& (0+255),w,b
 16215  001C18  E013               	bz	l16306
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;main.c: 1356: bLocalEcho = 1;
 16219  001C1A  0E01               	movlw	1
 16220  001C1C  0101               	movlb	1	; () banked
 16221  001C1E  6F01               	movwf	_bLocalEcho& (0+255),b
 16222                           
 16223                           ; BSR set to: 1
 16224                           ;main.c: 1357: (Busy_eep(), Write_b_eep(0x65,1));
 16225  001C20  ECC6  F035         	call	_Busy_eep	;wreg free
 16226  001C24  6A20               	clrf	?_Write_b_eep+1,c
 16227  001C26  0E65               	movlw	101
 16228  001C28  6E1F               	movwf	?_Write_b_eep,c
 16229  001C2A  0E01               	movlw	1
 16230  001C2C  6E21               	movwf	?_Write_b_eep+2,c
 16231  001C2E  ECC5  F034         	call	_Write_b_eep	;wreg free
 16232                           
 16233                           ;main.c: 1358: putsUSART((char *) "+OK - Local echo on\r\n");
 16234  001C32  0E7C               	movlw	high STR_155
 16235  001C34  6E21               	movwf	?_putsUSART+1,c
 16236  001C36  0E7B               	movlw	low STR_155
 16237  001C38  6E20               	movwf	?_putsUSART,c
 16238  001C3A  ECDF  F032         	call	_putsUSART	;wreg free
 16239                           
 16240                           ;main.c: 1359: }
 16241  001C3E  D0FB               	goto	l16372
 16242  001C40                     l16306:
 16243                           
 16244                           ; BSR set to: 0
 16245                           ;main.c: 1360: else if (0 != stristr(cmdbuf, "OFF")) {
 16246  001C40  0E01               	movlw	high _cmdbuf
 16247  001C42  0100               	movlb	0	; () banked
 16248  001C44  D9C9               	call	PL118	;call to abstracted procedure
 16249  001C46  EC42  F030         	call	_stristr	;wreg free
 16250  001C4A  5167               	movf	(?_stristr+1)& (0+255),w,b
 16251  001C4C  1166               	iorwf	?_stristr& (0+255),w,b
 16252  001C4E  E012               	bz	l16316
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;main.c: 1361: bLocalEcho = 0;
 16256  001C50  0101               	movlb	1	; () banked
 16257  001C52  6B01               	clrf	_bLocalEcho& (0+255),b
 16258                           
 16259                           ; BSR set to: 1
 16260                           ;main.c: 1362: (Busy_eep(), Write_b_eep(0x65,0));
 16261  001C54  ECC6  F035         	call	_Busy_eep	;wreg free
 16262  001C58  6A20               	clrf	?_Write_b_eep+1,c
 16263  001C5A  0E65               	movlw	101
 16264  001C5C  6E1F               	movwf	?_Write_b_eep,c
 16265  001C5E  0E00               	movlw	0
 16266  001C60  6A21               	clrf	?_Write_b_eep+2,c
 16267  001C62  ECC5  F034         	call	_Write_b_eep	;wreg free
 16268                           
 16269                           ;main.c: 1363: putsUSART((char *) "+OK - Local echo off\r\n");
 16270  001C66  0E7C               	movlw	high STR_157
 16271  001C68  6E21               	movwf	?_putsUSART+1,c
 16272  001C6A  0E0A               	movlw	low STR_157
 16273  001C6C  6E20               	movwf	?_putsUSART,c
 16274  001C6E  ECDF  F032         	call	_putsUSART	;wreg free
 16275                           
 16276                           ;main.c: 1364: }
 16277  001C72  D0E1               	goto	l16372
 16278  001C74                     l16316:
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;main.c: 1365: else {
 16282                           ;main.c: 1366: putsUSART((char *) "+ERROR - Wrong argument to 'set echo'.\r\n");
 16283  001C74  0E76               	movlw	high STR_158
 16284  001C76  6E21               	movwf	?_putsUSART+1,c
 16285  001C78  0E0C               	movlw	low STR_158
 16286  001C7A  6E20               	movwf	?_putsUSART,c
 16287  001C7C  ECDF  F032         	call	_putsUSART	;wreg free
 16288  001C80  D0DA               	goto	l16372
 16289  001C82                     l16318:
 16290                           
 16291                           ; BSR set to: 1
 16292                           ;main.c: 1370: else if (cmdbuf == stristr(cmdbuf, "TIMESTAMP ")) {
 16293  001C82  0E01               	movlw	high _cmdbuf
 16294  001C84  0100               	movlb	0	; () banked
 16295  001C86  6F67               	movwf	(?_stristr+1)& (0+255),b
 16296  001C88  0E05               	movlw	low _cmdbuf
 16297  001C8A  6F66               	movwf	?_stristr& (0+255),b
 16298  001C8C  0E7E               	movlw	high STR_159
 16299  001C8E  6F69               	movwf	(?_stristr+3)& (0+255),b
 16300  001C90  0E3E               	movlw	low STR_159
 16301  001C92  6F68               	movwf	(?_stristr+2)& (0+255),b
 16302  001C94  EC42  F030         	call	_stristr	;wreg free
 16303  001C98  D8DA               	call	PL2	;call to abstracted procedure
 16304  001C9A  E104               	bnz	u20905
 16305  001C9C  0100               	movlb	0	; () banked
 16306  001C9E  5166               	movf	?_stristr& (0+255),w,b
 16307  001CA0  0101               	movlb	1	; () banked
 16308  001CA2  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 16309  001CA4                     u20905:
 16310  001CA4  E13E               	bnz	l16342
 16311                           
 16312                           ; BSR set to: 1
 16313                           ;main.c: 1371: strcpy(cmdbuf, cmdbuf + 10);
 16314  001CA6  0E01               	movlw	high _cmdbuf
 16315  001CA8  D96D               	call	PL72	;call to abstracted procedure
 16316  001CAA  ECF7  F034         	call	_strcpy	;wreg free
 16317                           
 16318                           ; BSR set to: 1
 16319                           ;main.c: 1372: if (0 != stristr(cmdbuf, "ON")) {
 16320  001CAE  0E01               	movlw	high _cmdbuf
 16321  001CB0  0100               	movlb	0	; () banked
 16322  001CB2  D99A               	call	PL120	;call to abstracted procedure
 16323  001CB4  EC42  F030         	call	_stristr	;wreg free
 16324  001CB8  5167               	movf	(?_stristr+1)& (0+255),w,b
 16325  001CBA  1166               	iorwf	?_stristr& (0+255),w,b
 16326  001CBC  E012               	bz	l16330
 16327                           
 16328                           ; BSR set to: 0
 16329                           ;main.c: 1373: bTimestamp = 1;
 16330  001CBE  0E01               	movlw	1
 16331  001CC0  6FF0               	movwf	_bTimestamp& (0+255),b
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;main.c: 1374: (Busy_eep(), Write_b_eep(0x66,1));
 16335  001CC2  ECC6  F035         	call	_Busy_eep	;wreg free
 16336  001CC6  6A20               	clrf	?_Write_b_eep+1,c
 16337  001CC8  0E66               	movlw	102
 16338  001CCA  6E1F               	movwf	?_Write_b_eep,c
 16339  001CCC  0E01               	movlw	1
 16340  001CCE  6E21               	movwf	?_Write_b_eep+2,c
 16341  001CD0  ECC5  F034         	call	_Write_b_eep	;wreg free
 16342                           
 16343                           ;main.c: 1375: putsUSART((char *) "+OK - Timestamp on\r\n");
 16344  001CD4  0E7C               	movlw	high STR_161
 16345  001CD6  6E21               	movwf	?_putsUSART+1,c
 16346  001CD8  0EA7               	movlw	low STR_161
 16347  001CDA  6E20               	movwf	?_putsUSART,c
 16348  001CDC  ECDF  F032         	call	_putsUSART	;wreg free
 16349                           
 16350                           ;main.c: 1376: }
 16351  001CE0  D0AA               	goto	l16372
 16352  001CE2                     l16330:
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;main.c: 1377: else if (0 != stristr(cmdbuf, "OFF")) {
 16356  001CE2  0E01               	movlw	high _cmdbuf
 16357  001CE4  0100               	movlb	0	; () banked
 16358  001CE6  D978               	call	PL118	;call to abstracted procedure
 16359  001CE8  EC42  F030         	call	_stristr	;wreg free
 16360  001CEC  5167               	movf	(?_stristr+1)& (0+255),w,b
 16361  001CEE  1166               	iorwf	?_stristr& (0+255),w,b
 16362  001CF0  E011               	bz	l16340
 16363                           
 16364                           ; BSR set to: 0
 16365                           ;main.c: 1378: bTimestamp = 0;
 16366  001CF2  6BF0               	clrf	_bTimestamp& (0+255),b
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;main.c: 1379: (Busy_eep(), Write_b_eep(0x66,0));
 16370  001CF4  ECC6  F035         	call	_Busy_eep	;wreg free
 16371  001CF8  6A20               	clrf	?_Write_b_eep+1,c
 16372  001CFA  0E66               	movlw	102
 16373  001CFC  6E1F               	movwf	?_Write_b_eep,c
 16374  001CFE  0E00               	movlw	0
 16375  001D00  6A21               	clrf	?_Write_b_eep+2,c
 16376  001D02  ECC5  F034         	call	_Write_b_eep	;wreg free
 16377                           
 16378                           ;main.c: 1380: putsUSART((char *) "+OK - Timestamp off\r\n");
 16379  001D06  0E7C               	movlw	high STR_163
 16380  001D08  6E21               	movwf	?_putsUSART+1,c
 16381  001D0A  0E65               	movlw	low STR_163
 16382  001D0C  6E20               	movwf	?_putsUSART,c
 16383  001D0E  ECDF  F032         	call	_putsUSART	;wreg free
 16384                           
 16385                           ;main.c: 1381: }
 16386  001D12  D091               	goto	l16372
 16387  001D14                     l16340:
 16388                           
 16389                           ; BSR set to: 0
 16390                           ;main.c: 1382: else {
 16391                           ;main.c: 1383: putsUSART((char *) "+ERROR - Wrong argument to 'set timestamp'.\r\n");
 16392  001D14  0E75               	movlw	high STR_164
 16393  001D16  6E21               	movwf	?_putsUSART+1,c
 16394  001D18  0E02               	movlw	low STR_164
 16395  001D1A  6E20               	movwf	?_putsUSART,c
 16396  001D1C  ECDF  F032         	call	_putsUSART	;wreg free
 16397  001D20  D08A               	goto	l16372
 16398  001D22                     l16342:
 16399                           
 16400                           ; BSR set to: 1
 16401                           ;main.c: 1387: else if (cmdbuf == stristr(cmdbuf, "BAUDRATE ")) {
 16402  001D22  0E01               	movlw	high _cmdbuf
 16403  001D24  0100               	movlb	0	; () banked
 16404  001D26  6F67               	movwf	(?_stristr+1)& (0+255),b
 16405  001D28  0E05               	movlw	low _cmdbuf
 16406  001D2A  6F66               	movwf	?_stristr& (0+255),b
 16407  001D2C  0E7E               	movlw	high STR_165
 16408  001D2E  6F69               	movwf	(?_stristr+3)& (0+255),b
 16409  001D30  0E7E               	movlw	low STR_165
 16410  001D32  6F68               	movwf	(?_stristr+2)& (0+255),b
 16411  001D34  EC42  F030         	call	_stristr	;wreg free
 16412  001D38  D88A               	call	PL2	;call to abstracted procedure
 16413  001D3A  E104               	bnz	u20935
 16414  001D3C  0100               	movlb	0	; () banked
 16415  001D3E  5166               	movf	?_stristr& (0+255),w,b
 16416  001D40  0101               	movlb	1	; () banked
 16417  001D42  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 16418  001D44                     u20935:
 16419  001D44  E13A               	bnz	l16356
 16420                           
 16421                           ; BSR set to: 1
 16422                           ;main.c: 1389: uint32_t baudcode;
 16423                           ;main.c: 1390: strcpy( cmdbuf, cmdbuf + 9 );
 16424  001D46  0E01               	movlw	high _cmdbuf
 16425  001D48  6E20               	movwf	?_strcpy+1,c
 16426  001D4A  0E05               	movlw	low _cmdbuf
 16427  001D4C  6E1F               	movwf	?_strcpy,c
 16428  001D4E  0E0E               	movlw	low (_cmdbuf+9)
 16429  001D50  6FB3               	movwf	??_doModeVerbose& (0+255),b
 16430  001D52  0E01               	movlw	high (_cmdbuf+9)
 16431  001D54  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 16432  001D56  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 16433  001D5A  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16434  001D5E  ECF7  F034         	call	_strcpy	;wreg free
 16435                           
 16436                           ; BSR set to: 1
 16437                           ;main.c: 1392: baudcode = atoi( cmdbuf );
 16438  001D62  0E01               	movlw	high _cmdbuf
 16439  001D64  0100               	movlb	0	; () banked
 16440  001D66  6F63               	movwf	(?_atoi+1)& (0+255),b
 16441  001D68  0E05               	movlw	low _cmdbuf
 16442  001D6A  6F62               	movwf	?_atoi& (0+255),b
 16443  001D6C  ECD0  F026         	call	_atoi	;wreg free
 16444  001D70  C062  F2B4         	movff	?_atoi,doModeVerbose@baudcode
 16445  001D74  0102               	movlb	2	; () banked
 16446  001D76  C063  F2B5         	movff	?_atoi+1,doModeVerbose@baudcode+1
 16447  001D7A  0E00               	movlw	0
 16448  001D7C  BFB5               	btfsc	(doModeVerbose@baudcode+1)& (0+255),7,b
 16449  001D7E  0EFF               	movlw	-1
 16450  001D80  6FB6               	movwf	(doModeVerbose@baudcode+2)& (0+255),b
 16451  001D82  6FB7               	movwf	(doModeVerbose@baudcode+3)& (0+255),b
 16452                           
 16453                           ; BSR set to: 2
 16454                           ;main.c: 1393: if ( baudcode < 13 ) {
 16455  001D84  0E0D               	movlw	13
 16456  001D86  5DB4               	subwf	doModeVerbose@baudcode& (0+255),w,b
 16457  001D88  0E00               	movlw	0
 16458  001D8A  59B5               	subwfb	(doModeVerbose@baudcode+1)& (0+255),w,b
 16459  001D8C  0E00               	movlw	0
 16460  001D8E  59B6               	subwfb	(doModeVerbose@baudcode+2)& (0+255),w,b
 16461  001D90  0E00               	movlw	0
 16462  001D92  59B7               	subwfb	(doModeVerbose@baudcode+3)& (0+255),w,b
 16463  001D94  E20B               	bc	l16354
 16464                           
 16465                           ; BSR set to: 2
 16466                           ;main.c: 1394: putsUSART((char *) "+OK - New baudrate will be set.\r\n");
 16467  001D96  0E78               	movlw	high STR_166
 16468  001D98  6E21               	movwf	?_putsUSART+1,c
 16469  001D9A  0EE6               	movlw	low STR_166
 16470  001D9C  6E20               	movwf	?_putsUSART,c
 16471  001D9E  ECDF  F032         	call	_putsUSART	;wreg free
 16472                           
 16473                           ;main.c: 1395: changeBaudrate( baudcode );
 16474  001DA2  0102               	movlb	2	; () banked
 16475  001DA4  51B4               	movf	doModeVerbose@baudcode& (0+255),w,b
 16476  001DA6  EC04  F030         	call	_changeBaudrate
 16477                           
 16478                           ;main.c: 1396: }
 16479  001DAA  D045               	goto	l16372
 16480  001DAC                     l16354:
 16481                           
 16482                           ; BSR set to: 2
 16483                           ;main.c: 1397: else {
 16484                           ;main.c: 1398: putsUSART((char *) "+ERROR - Invalid baudrate.\r\n");
 16485  001DAC  0E7A               	movlw	high STR_167
 16486  001DAE  6E21               	movwf	?_putsUSART+1,c
 16487  001DB0  0E0C               	movlw	low STR_167
 16488  001DB2  6E20               	movwf	?_putsUSART,c
 16489  001DB4  ECDF  F032         	call	_putsUSART	;wreg free
 16490  001DB8  D03E               	goto	l16372
 16491  001DBA                     l16356:
 16492                           
 16493                           ; BSR set to: 1
 16494                           ;main.c: 1403: else if (cmdbuf == stristr(cmdbuf, "DEFAULTS")) {
 16495  001DBA  0E01               	movlw	high _cmdbuf
 16496  001DBC  0100               	movlb	0	; () banked
 16497  001DBE  6F67               	movwf	(?_stristr+1)& (0+255),b
 16498  001DC0  0E05               	movlw	low _cmdbuf
 16499  001DC2  6F66               	movwf	?_stristr& (0+255),b
 16500  001DC4  0E7E               	movlw	high STR_168
 16501  001DC6  6F69               	movwf	(?_stristr+3)& (0+255),b
 16502  001DC8  0EB7               	movlw	low STR_168
 16503  001DCA  6F68               	movwf	(?_stristr+2)& (0+255),b
 16504  001DCC  EC42  F030         	call	_stristr	;wreg free
 16505  001DD0  D83E               	call	PL2	;call to abstracted procedure
 16506  001DD2  E104               	bnz	u20955
 16507  001DD4  0100               	movlb	0	; () banked
 16508  001DD6  5166               	movf	?_stristr& (0+255),w,b
 16509  001DD8  0101               	movlb	1	; () banked
 16510  001DDA  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 16511  001DDC                     u20955:
 16512  001DDC  E103               	bnz	l16360
 16513                           
 16514                           ; BSR set to: 1
 16515                           ;main.c: 1404: vscp_restoreDefaults();
 16516  001DDE  ECC2  F035         	call	_vscp_restoreDefaults	;wreg free
 16517                           
 16518                           ;main.c: 1405: }
 16519  001DE2  D029               	goto	l16372
 16520  001DE4                     l16360:
 16521                           
 16522                           ; BSR set to: 1
 16523                           ;main.c: 1407: else if (cmdbuf == stristr(cmdbuf, "?")) {
 16524  001DE4  0E01               	movlw	high _cmdbuf
 16525  001DE6  0100               	movlb	0	; () banked
 16526  001DE8  6F67               	movwf	(?_stristr+1)& (0+255),b
 16527  001DEA  0E05               	movlw	low _cmdbuf
 16528  001DEC  6F66               	movwf	?_stristr& (0+255),b
 16529  001DEE  0E7F               	movlw	high STR_169
 16530  001DF0  6F69               	movwf	(?_stristr+3)& (0+255),b
 16531  001DF2  0EFC               	movlw	low STR_169
 16532  001DF4  6F68               	movwf	(?_stristr+2)& (0+255),b
 16533  001DF6  EC42  F030         	call	_stristr	;wreg free
 16534  001DFA  D829               	call	PL2	;call to abstracted procedure
 16535  001DFC  E104               	bnz	u20965
 16536  001DFE  0100               	movlb	0	; () banked
 16537  001E00  5166               	movf	?_stristr& (0+255),w,b
 16538  001E02  0101               	movlb	1	; () banked
 16539  001E04  19B3               	xorwf	??_doModeVerbose& (0+255),w,b
 16540  001E06                     u20965:
 16541  001E06  E017               	bz	l16372
 16542                           
 16543                           ; BSR set to: 1
 16544                           ;main.c: 1410: else {
 16545                           ;main.c: 1411: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 16546  001E08  0E79               	movlw	high STR_170
 16547  001E0A  6E21               	movwf	?_putsUSART+1,c
 16548  001E0C  0E6C               	movlw	low STR_170
 16549  001E0E  6E20               	movwf	?_putsUSART,c
 16550  001E10  ECDF  F032         	call	_putsUSART	;wreg free
 16551  001E14  D010               	goto	l16372
 16552  001E16                     l16366:
 16553                           
 16554                           ; BSR set to: 1
 16555                           ;main.c: 1415: else {
 16556                           ;main.c: 1416: if ( 0x0d == cmdbuf[ 0 ] ) {
 16557  001E16  5105               	movf	_cmdbuf& (0+255),w,b
 16558  001E18  0A0D               	xorlw	13
 16559  001E1A  E107               	bnz	l16370
 16560                           
 16561                           ; BSR set to: 1
 16562                           ;main.c: 1417: putsUSART((char *) "+OK\r\n");
 16563  001E1C  0E7F               	movlw	high STR_9
 16564  001E1E  6E21               	movwf	?_putsUSART+1,c
 16565  001E20  0E6A               	movlw	low STR_9
 16566  001E22  6E20               	movwf	?_putsUSART,c
 16567  001E24  ECDF  F032         	call	_putsUSART	;wreg free
 16568                           
 16569                           ;main.c: 1418: }
 16570  001E28  D006               	goto	l16372
 16571  001E2A                     l16370:
 16572                           
 16573                           ; BSR set to: 1
 16574                           ;main.c: 1419: else {
 16575                           ;main.c: 1420: putsUSART((char *) "-ERROR - Unknown command\r\n");
 16576  001E2A  0E7A               	movlw	high STR_172
 16577  001E2C  6E21               	movwf	?_putsUSART+1,c
 16578  001E2E  0E98               	movlw	low STR_172
 16579  001E30  6E20               	movwf	?_putsUSART,c
 16580  001E32  ECDF  F032         	call	_putsUSART	;wreg free
 16581  001E36                     l16372:
 16582                           
 16583                           ;main.c: 1421: }
 16584                           ;main.c: 1422: }
 16585                           ;main.c: 1424: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 16586  001E36  0101               	movlb	1	; () banked
 16587  001E38  0E01               	movlw	high _cmdbuf
 16588  001E3A  6E20               	movwf	?_memset+1,c
 16589  001E3C  0E05               	movlw	low _cmdbuf
 16590  001E3E  ECE7  F02E         	call	PL30	;call to abstracted procedure
 16591  001E42  EC0E  F035         	call	_memset	;wreg free
 16592                           
 16593                           ;main.c: 1425: pos = 0;
 16594  001E46  0101               	movlb	1	; () banked
 16595  001E48  6B03               	clrf	_pos& (0+255),b
 16596  001E4A                     l16376:
 16597                           
 16598                           ;main.c: 1426: }
 16599                           ;main.c: 1427: }
 16600                           ;main.c: 1430: (INTCONbits.GIE = 1);
 16601  001E4A  8EF2               	bsf	intcon,7,c	;volatile
 16602  001E4C                     l588:
 16603  001E4C  0012               	return	
 16604  001E4E                     __end_of_doModeVerbose:
 16605                           	opt stack 0
 16606  001E4E                     PL2:
 16607                           	opt stack 20
 16608  001E4E  0E05               	movlw	low _cmdbuf
 16609  001E50  0101               	movlb	1	; () banked
 16610  001E52  6FB3               	movwf	??_doModeVerbose& (0+255),b
 16611  001E54  0E01               	movlw	high _cmdbuf
 16612  001E56  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 16613  001E58  0100               	movlb	0	; () banked
 16614  001E5A  5167               	movf	(?_stristr+1)& (0+255),w,b
 16615  001E5C  0101               	movlb	1	; () banked
 16616  001E5E  19B4               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 16617  001E60  0012               	return	
 16618  001E62                     __end_ofPL2:
 16619                           	opt stack 0
 16620  001E62                     PL4:
 16621                           	opt stack 20
 16622  001E62  0100               	movlb	0	; () banked
 16623  001E64  6B65               	clrf	(?_strtok+1)& (0+255),b
 16624  001E66  6B64               	clrf	?_strtok& (0+255),b
 16625  001E68  0E7F               	movlw	high STR_30
 16626  001E6A  6F67               	movwf	(?_strtok+3)& (0+255),b
 16627  001E6C  0EF4               	movlw	low STR_30
 16628  001E6E  6F66               	movwf	(?_strtok+2)& (0+255),b
 16629  001E70  0012               	return	
 16630  001E72                     __end_ofPL4:
 16631                           	opt stack 0
 16632  001E72                     PL6:
 16633                           	opt stack 20
 16634  001E72  6B65               	clrf	(?_strtok+1)& (0+255),b
 16635  001E74  6B64               	clrf	?_strtok& (0+255),b
 16636  001E76  0E7F               	movlw	high STR_30
 16637  001E78  6F67               	movwf	(?_strtok+3)& (0+255),b
 16638  001E7A  0EF4               	movlw	low STR_30
 16639  001E7C  6F66               	movwf	(?_strtok+2)& (0+255),b
 16640  001E7E  0012               	return	
 16641  001E80                     __end_ofPL6:
 16642                           	opt stack 0
 16643  001E80                     PL8:
 16644                           	opt stack 20
 16645  001E80  0E01               	movlw	high _cmdbuf
 16646  001E82  6E20               	movwf	?_strcpy+1,c
 16647  001E84  0E05               	movlw	low _cmdbuf
 16648  001E86  6E1F               	movwf	?_strcpy,c
 16649  001E88  0E0A               	movlw	low (_cmdbuf+5)
 16650  001E8A  6FB3               	movwf	??_doModeVerbose& (0+255),b
 16651  001E8C  0E01               	movlw	high (_cmdbuf+5)
 16652  001E8E  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 16653  001E90  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 16654  001E94  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16655  001E98  0012               	return	
 16656  001E9A                     __end_ofPL8:
 16657                           	opt stack 0
 16658  001E9A                     PL12:
 16659                           	opt stack 20
 16660  001E9A  6BBC               	clrf	(??_doModeVerbose+9)& (0+255),b
 16661  001E9C  6BBD               	clrf	(??_doModeVerbose+10)& (0+255),b
 16662  001E9E  6BBE               	clrf	(??_doModeVerbose+11)& (0+255),b
 16663  001EA0  0E1A               	movlw	26
 16664  001EA2                     u20625:
 16665  001EA2  90D8               	bcf	status,0,c
 16666  001EA4  37BB               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 16667  001EA6  37BC               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 16668  001EA8  37BD               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 16669  001EAA  37BE               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 16670  001EAC  2EE8               	decfsz	wreg,f,c
 16671  001EAE  D7F9               	goto	u20625
 16672  001EB0  51B7               	movf	(??_doModeVerbose+4)& (0+255),w,b
 16673  001EB2  11BB               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 16674  001EB4  6FBF               	movwf	(??_doModeVerbose+12)& (0+255),b
 16675  001EB6  51B8               	movf	(??_doModeVerbose+5)& (0+255),w,b
 16676  001EB8  11BC               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 16677  001EBA  6FC0               	movwf	(??_doModeVerbose+13)& (0+255),b
 16678  001EBC  51B9               	movf	(??_doModeVerbose+6)& (0+255),w,b
 16679  001EBE  11BD               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 16680  001EC0  6FC1               	movwf	(??_doModeVerbose+14)& (0+255),b
 16681  001EC2  51BA               	movf	(??_doModeVerbose+7)& (0+255),w,b
 16682  001EC4  11BE               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 16683  001EC6  6FC2               	movwf	(??_doModeVerbose+15)& (0+255),b
 16684  001EC8  51B3               	movf	??_doModeVerbose& (0+255),w,b
 16685  001ECA  11BF               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 16686  001ECC  6FC3               	movwf	(??_doModeVerbose+16)& (0+255),b
 16687  001ECE  51B4               	movf	(??_doModeVerbose+1)& (0+255),w,b
 16688  001ED0  11C0               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 16689  001ED2  6FC4               	movwf	(??_doModeVerbose+17)& (0+255),b
 16690  001ED4  51B5               	movf	(??_doModeVerbose+2)& (0+255),w,b
 16691  001ED6  11C1               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 16692  001ED8  6FC5               	movwf	(??_doModeVerbose+18)& (0+255),b
 16693  001EDA  51B6               	movf	(??_doModeVerbose+3)& (0+255),w,b
 16694  001EDC  11C2               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 16695  001EDE  6FC6               	movwf	(??_doModeVerbose+19)& (0+255),b
 16696  001EE0  0102               	movlb	2	; () banked
 16697  001EE2  0012               	return	
 16698  001EE4                     __end_ofPL12:
 16699                           	opt stack 0
 16700  001EE4                     PL22:
 16701                           	opt stack 20
 16702  001EE4  0101               	movlb	1	; () banked
 16703  001EE6  0E01               	movlw	high _cmdbuf
 16704  001EE8  6E20               	movwf	?_strcpy+1,c
 16705  001EEA  0E05               	movlw	low _cmdbuf
 16706  001EEC  6E1F               	movwf	?_strcpy,c
 16707  001EEE  0E0D               	movlw	low (_cmdbuf+8)
 16708  001EF0  6FB3               	movwf	??_doModeVerbose& (0+255),b
 16709  001EF2  0E01               	movlw	high (_cmdbuf+8)
 16710  001EF4  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 16711  001EF6  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 16712  001EFA  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16713  001EFE  0012               	return	
 16714  001F00                     __end_ofPL22:
 16715                           	opt stack 0
 16716  001F00                     PL36:
 16717                           	opt stack 20
 16718  001F00  0100               	movlb	0	; () banked
 16719  001F02  6B65               	clrf	(?_strtok+1)& (0+255),b
 16720  001F04  6B64               	clrf	?_strtok& (0+255),b
 16721  001F06  0E7E               	movlw	high (STR_57+8)
 16722  001F08  6F67               	movwf	(?_strtok+3)& (0+255),b
 16723  001F0A  0E72               	movlw	low (STR_57+8)
 16724  001F0C  6F66               	movwf	(?_strtok+2)& (0+255),b
 16725  001F0E  0012               	return	
 16726  001F10                     __end_ofPL36:
 16727                           	opt stack 0
 16728  001F10                     PL38:
 16729                           	opt stack 20
 16730  001F10  0E01               	movlw	high _cmdbuf
 16731  001F12  0100               	movlb	0	; () banked
 16732  001F14  6F65               	movwf	(?_strtok+1)& (0+255),b
 16733  001F16  0E05               	movlw	low _cmdbuf
 16734  001F18  6F64               	movwf	?_strtok& (0+255),b
 16735  001F1A  0E7F               	movlw	high STR_30
 16736  001F1C  6F67               	movwf	(?_strtok+3)& (0+255),b
 16737  001F1E  0EF4               	movlw	low STR_30
 16738  001F20  6F66               	movwf	(?_strtok+2)& (0+255),b
 16739  001F22  0012               	return	
 16740  001F24                     __end_ofPL38:
 16741                           	opt stack 0
 16742  001F24                     PL48:
 16743                           	opt stack 20
 16744  001F24  0100               	movlb	0	; () banked
 16745  001F26  6F65               	movwf	(?_strtok+1)& (0+255),b
 16746  001F28  0E05               	movlw	low _cmdbuf
 16747  001F2A  6F64               	movwf	?_strtok& (0+255),b
 16748  001F2C  0E7E               	movlw	high (STR_57+8)
 16749  001F2E  6F67               	movwf	(?_strtok+3)& (0+255),b
 16750  001F30  0E72               	movlw	low (STR_57+8)
 16751  001F32  6F66               	movwf	(?_strtok+2)& (0+255),b
 16752  001F34  0012               	return	
 16753  001F36                     __end_ofPL48:
 16754                           	opt stack 0
 16755  001F36                     PL54:
 16756                           	opt stack 20
 16757  001F36  0102               	movlb	2	; () banked
 16758  001F38  51C1               	movf	doModeVerbose@i_1293& (0+255),w,b
 16759  001F3A  C2C0  F1B3         	movff	doModeVerbose@reg,??_doModeVerbose
 16760  001F3E  0101               	movlb	1	; () banked
 16761  001F40  6BB4               	clrf	(??_doModeVerbose+1)& (0+255),b
 16762  001F42  27B3               	addwf	??_doModeVerbose& (0+255),f,b
 16763  001F44  0E00               	movlw	0
 16764  001F46  23B4               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 16765  001F48  51B3               	movf	??_doModeVerbose& (0+255),w,b
 16766  001F4A  0100               	movlb	0	; () banked
 16767  001F4C  6F71               	movwf	(?_sprintf+4)& (0+255),b
 16768  001F4E  6B72               	clrf	(?_sprintf+5)& (0+255),b
 16769  001F50  0012               	return	
 16770  001F52                     __end_ofPL54:
 16771                           	opt stack 0
 16772  001F52                     PL58:
 16773                           	opt stack 20
 16774  001F52  0101               	movlb	1	; () banked
 16775  001F54  6BB4               	clrf	(??_doModeVerbose+1)& (0+255),b
 16776  001F56  6BB5               	clrf	(??_doModeVerbose+2)& (0+255),b
 16777  001F58  6BB6               	clrf	(??_doModeVerbose+3)& (0+255),b
 16778  001F5A  C1B5  F1B6         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 16779  001F5E  C1B4  F1B5         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 16780  001F62  C1B3  F1B4         	movff	??_doModeVerbose,??_doModeVerbose+1
 16781  001F66  6BB3               	clrf	??_doModeVerbose& (0+255),b
 16782  001F68  0102               	movlb	2	; () banked
 16783  001F6A  0012               	return	
 16784  001F6C                     __end_ofPL58:
 16785                           	opt stack 0
 16786  001F6C                     PL70:
 16787                           	opt stack 20
 16788  001F6C  6E21               	movwf	?__CANIDToRegs,c
 16789  001F6E  C2CC  F023         	movff	doModeVerbose@id_1427,?__CANIDToRegs+2
 16790  001F72  C2CD  F024         	movff	doModeVerbose@id_1427+1,?__CANIDToRegs+3
 16791  001F76  C2CE  F025         	movff	doModeVerbose@id_1427+2,?__CANIDToRegs+4
 16792  001F7A  C2CF  F026         	movff	doModeVerbose@id_1427+3,?__CANIDToRegs+5
 16793  001F7E  0E01               	movlw	1
 16794  001F80  6E27               	movwf	?__CANIDToRegs+6,c
 16795  001F82  0C01               	retlw	1
 16796  001F84                     __end_ofPL70:
 16797                           	opt stack 0
 16798  001F84                     PL72:
 16799                           	opt stack 20
 16800  001F84  6E20               	movwf	?_strcpy+1,c
 16801  001F86  0E05               	movlw	low _cmdbuf
 16802  001F88  6E1F               	movwf	?_strcpy,c
 16803  001F8A  0E0F               	movlw	low (_cmdbuf+10)
 16804  001F8C  6FB3               	movwf	??_doModeVerbose& (0+255),b
 16805  001F8E  0E01               	movlw	high (_cmdbuf+10)
 16806  001F90  6FB4               	movwf	(??_doModeVerbose+1)& (0+255),b
 16807  001F92  C1B3  F021         	movff	??_doModeVerbose,?_strcpy+2
 16808  001F96  C1B4  F022         	movff	??_doModeVerbose+1,?_strcpy+3
 16809  001F9A  0012               	return	
 16810  001F9C                     __end_ofPL72:
 16811                           	opt stack 0
 16812  001F9C                     PL78:
 16813                           	opt stack 20
 16814  001F9C  0101               	movlb	1	; () banked
 16815  001F9E  6FB8               	movwf	(??_doModeVerbose+5)& (0+255),b
 16816  001FA0  6BB9               	clrf	(??_doModeVerbose+6)& (0+255),b
 16817  001FA2  6BBA               	clrf	(??_doModeVerbose+7)& (0+255),b
 16818  001FA4  C1B8  F1BA         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 16819  001FA8  C1B7  F1B9         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 16820  001FAC  6BB8               	clrf	(??_doModeVerbose+5)& (0+255),b
 16821  001FAE  6BB7               	clrf	(??_doModeVerbose+4)& (0+255),b
 16822  001FB0  0012               	return	
 16823  001FB2                     __end_ofPL78:
 16824                           	opt stack 0
 16825  001FB2                     PL84:
 16826                           	opt stack 20
 16827  001FB2  0E01               	movlw	high _cmdbuf
 16828  001FB4  0100               	movlb	0	; () banked
 16829  001FB6  6F67               	movwf	(?_stristr+1)& (0+255),b
 16830  001FB8  0E05               	movlw	low _cmdbuf
 16831  001FBA  6F66               	movwf	?_stristr& (0+255),b
 16832  001FBC  0E7F               	movlw	high STR_8
 16833  001FBE  6F69               	movwf	(?_stristr+3)& (0+255),b
 16834  001FC0  0EA7               	movlw	low STR_8
 16835  001FC2  6F68               	movwf	(?_stristr+2)& (0+255),b
 16836  001FC4  0012               	return	
 16837  001FC6                     __end_ofPL84:
 16838                           	opt stack 0
 16839  001FC6                     PL112:
 16840                           	opt stack 20
 16841  001FC6  0100               	movlb	0	; () banked
 16842  001FC8  6F67               	movwf	(?_stristr+1)& (0+255),b
 16843  001FCA  0E05               	movlw	low _cmdbuf
 16844  001FCC  6F66               	movwf	?_stristr& (0+255),b
 16845  001FCE  0E7F               	movlw	high STR_10
 16846  001FD0  6F69               	movwf	(?_stristr+3)& (0+255),b
 16847  001FD2  0E48               	movlw	low STR_10
 16848  001FD4  6F68               	movwf	(?_stristr+2)& (0+255),b
 16849  001FD6  0012               	return	
 16850  001FD8                     __end_ofPL112:
 16851                           	opt stack 0
 16852  001FD8                     PL118:
 16853                           	opt stack 20
 16854  001FD8  6F67               	movwf	(?_stristr+1)& (0+255),b
 16855  001FDA  0E05               	movlw	low _cmdbuf
 16856  001FDC  6F66               	movwf	?_stristr& (0+255),b
 16857  001FDE  0E7F               	movlw	high STR_156
 16858  001FE0  6F69               	movwf	(?_stristr+3)& (0+255),b
 16859  001FE2  0ED1               	movlw	low STR_156
 16860  001FE4  6F68               	movwf	(?_stristr+2)& (0+255),b
 16861  001FE6  0012               	return	
 16862  001FE8                     __end_ofPL118:
 16863                           	opt stack 0
 16864  001FE8                     PL120:
 16865                           	opt stack 20
 16866  001FE8  6F67               	movwf	(?_stristr+1)& (0+255),b
 16867  001FEA  0E05               	movlw	low _cmdbuf
 16868  001FEC  6F66               	movwf	?_stristr& (0+255),b
 16869  001FEE  0E7E               	movlw	high (STR_18+5)
 16870  001FF0  6F69               	movwf	(?_stristr+3)& (0+255),b
 16871  001FF2  0EFD               	movlw	low (STR_18+5)
 16872  001FF4  6F68               	movwf	(?_stristr+2)& (0+255),b
 16873  001FF6  0012               	return	
 16874  001FF8                     __end_ofPL120:
 16875                           	opt stack 0
 16876  001FF8                     PL124:
 16877                           	opt stack 20
 16878  001FF8  6F67               	movwf	(?_stristr+1)& (0+255),b
 16879  001FFA  0E05               	movlw	low _cmdbuf
 16880  001FFC  6F66               	movwf	?_stristr& (0+255),b
 16881  001FFE  0E7F               	movlw	high STR_16
 16882  002000  6F69               	movwf	(?_stristr+3)& (0+255),b
 16883  002002  0E3A               	movlw	low STR_16
 16884  002004  6F68               	movwf	(?_stristr+2)& (0+255),b
 16885  002006  0012               	return	
 16886  002008                     __end_ofPL124:
 16887                           	opt stack 0
 16888  002008                     PL128:
 16889                           	opt stack 20
 16890  002008  6F67               	movwf	(?_stristr+1)& (0+255),b
 16891  00200A  0E05               	movlw	low _cmdbuf
 16892  00200C  6F66               	movwf	?_stristr& (0+255),b
 16893  00200E  0E7E               	movlw	high STR_14
 16894  002010  6F69               	movwf	(?_stristr+3)& (0+255),b
 16895  002012  0EAE               	movlw	low STR_14
 16896  002014  6F68               	movwf	(?_stristr+2)& (0+255),b
 16897  002016  0012               	return	
 16898  002018                     __end_ofPL128:
 16899                           	opt stack 0
 16900  002018                     PL132:
 16901                           	opt stack 20
 16902  002018  6F67               	movwf	(?_stristr+1)& (0+255),b
 16903  00201A  0E05               	movlw	low _cmdbuf
 16904  00201C  6F66               	movwf	?_stristr& (0+255),b
 16905  00201E  0E7F               	movlw	high STR_12
 16906  002020  6F69               	movwf	(?_stristr+3)& (0+255),b
 16907  002022  0E82               	movlw	low STR_12
 16908  002024  6F68               	movwf	(?_stristr+2)& (0+255),b
 16909  002026  0012               	return	
 16910  002028                     __end_ofPL132:
 16911                           	opt stack 0
 16912                           tblptru	equ	0xFF8
 16913                           tblptrh	equ	0xFF7
 16914                           tblptrl	equ	0xFF6
 16915                           tablat	equ	0xFF5
 16916                           prodh	equ	0xFF4
 16917                           prodl	equ	0xFF3
 16918                           intcon	equ	0xFF2
 16919                           indf0	equ	0xFEF
 16920                           postinc0	equ	0xFEE
 16921                           fsr0h	equ	0xFEA
 16922                           fsr0l	equ	0xFE9
 16923                           wreg	equ	0xFE8
 16924                           indf1	equ	0xFE7
 16925                           postinc1	equ	0xFE6
 16926                           postdec1	equ	0xFE5
 16927                           fsr1h	equ	0xFE2
 16928                           fsr1l	equ	0xFE1
 16929                           indf2	equ	0xFDF
 16930                           postinc2	equ	0xFDE
 16931                           postdec2	equ	0xFDD
 16932                           plusw2	equ	0xFDB
 16933                           fsr2h	equ	0xFDA
 16934                           fsr2l	equ	0xFD9
 16935                           status	equ	0xFD8
 16936                           
 16937 ;; *************** function _changeBaudrate *****************
 16938 ;; Defined at:
 16939 ;;		line 3508 in file "main.c"
 16940 ;; Parameters:    Size  Location     Type
 16941 ;;  nBaud           1    wreg     unsigned char 
 16942 ;; Auto vars:     Size  Location     Type
 16943 ;;  nBaud           1   33[COMRAM] unsigned char 
 16944 ;; Return value:  Size  Location     Type
 16945 ;;		None               void
 16946 ;; Registers used:
 16947 ;;		wreg, status,2, status,0, cstack
 16948 ;; Tracked objects:
 16949 ;;		On entry : C/1
 16950 ;;		On exit  : 0/0
 16951 ;;		Unchanged: 0/0
 16952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16953 ;;      Params:         0       0       0       0       0       0       0
 16954 ;;      Locals:         1       0       0       0       0       0       0
 16955 ;;      Temps:          0       0       0       0       0       0       0
 16956 ;;      Totals:         1       0       0       0       0       0       0
 16957 ;;Total ram usage:        1 bytes
 16958 ;; Hardware stack levels used:    1
 16959 ;; Hardware stack levels required when called:    4
 16960 ;; This function calls:
 16961 ;;		_OpenUSART
 16962 ;; This function is called by:
 16963 ;;		_doModeVerbose
 16964 ;;		_doModeVscp
 16965 ;; This function uses a non-reentrant model
 16966 ;;
 16967                           
 16968                           	psect	text23
 16969  006008                     __ptext23:
 16970                           	opt stack 0
 16971  006008                     _changeBaudrate:
 16972                           	opt stack 25
 16973                           
 16974                           ;incstack = 0
 16975                           ;incstack = 0
 16976                           ;changeBaudrate@nBaud stored from wreg
 16977  006008  CFE8 F022          	movff	wreg,changeBaudrate@nBaud
 16978                           
 16979                           ;main.c: 3509: switch( nBaud ) {
 16980  00600C  D015               	goto	l18102
 16981  00600E                     l18074:
 16982                           
 16983                           ;main.c: 3512: nBaud = 19;
 16984  00600E  0E13               	movlw	19
 16985  006010  D011               	goto	L27
 16986  006012                     l18076:
 16987                           
 16988                           ;main.c: 3516: nBaud = 10;
 16989  006012  0E0A               	movlw	10
 16990  006014  D00F               	goto	L27
 16991  006016                     l18078:
 16992                           
 16993                           ;main.c: 3520: nBaud = 9;
 16994  006016  0E09               	movlw	9
 16995  006018  D00D               	goto	L27
 16996  00601A                     l18080:
 16997                           
 16998                           ;main.c: 3524: nBaud = 4;
 16999  00601A  0E04               	movlw	4
 17000  00601C  D00B               	goto	L27
 17001  00601E                     l18084:
 17002                           
 17003                           ;main.c: 3532: nBaud = 3;
 17004  00601E  0E03               	movlw	3
 17005  006020  D009               	goto	L27
 17006  006022                     l18086:
 17007                           
 17008                           ;main.c: 3536: nBaud = 2;
 17009  006022  0E02               	movlw	2
 17010  006024  D007               	goto	L27
 17011  006026                     l18090:
 17012                           
 17013                           ;main.c: 3544: nBaud = 64;
 17014  006026  0E40               	movlw	64
 17015  006028  D005               	goto	L27
 17016  00602A                     l18092:
 17017                           
 17018                           ;main.c: 3548: nBaud = 128;
 17019  00602A  0E80               	movlw	128
 17020  00602C  D003               	goto	L27
 17021  00602E                     l18096:
 17022                           
 17023                           ;main.c: 3556: nBaud = 42;
 17024  00602E  0E2A               	movlw	42
 17025  006030  D001               	goto	L27
 17026  006032                     l18098:
 17027                           
 17028                           ;main.c: 3561: nBaud = 21;
 17029  006032  0E15               	movlw	21
 17030  006034                     L27:
 17031  006034  6E22               	movwf	changeBaudrate@nBaud,c
 17032                           
 17033                           ;main.c: 3562: break;
 17034  006036  D01B               	goto	l18104
 17035  006038                     l18102:
 17036  006038  5022               	movf	changeBaudrate@nBaud,w,c
 17037                           
 17038                           ; Switch size 1, requested type "space"
 17039                           ; Number of cases is 13, Range of values is 0 to 12
 17040                           ; switch strategies available:
 17041                           ; Name         Instructions Cycles
 17042                           ; simple_byte           40    21 (average)
 17043                           ;	Chosen strategy is simple_byte
 17044  00603A  E0FB               	bz	l18098
 17045  00603C  0A01               	xorlw	1	; case 1
 17046  00603E  E0E7               	bz	l18074
 17047  006040  0A03               	xorlw	3	; case 2
 17048  006042  E0E7               	bz	l18076
 17049  006044  0A01               	xorlw	1	; case 3
 17050  006046  E0E7               	bz	l18078
 17051  006048  0A07               	xorlw	7	; case 4
 17052  00604A  E0E7               	bz	l18080
 17053  00604C  0A01               	xorlw	1	; case 5
 17054  00604E  E0E5               	bz	l18080
 17055  006050  0A03               	xorlw	3	; case 6
 17056  006052  E0E5               	bz	l18084
 17057  006054  0A01               	xorlw	1	; case 7
 17058  006056  E0E5               	bz	l18086
 17059  006058  0A0F               	xorlw	15	; case 8
 17060  00605A  E0E3               	bz	l18086
 17061  00605C  0A01               	xorlw	1	; case 9
 17062  00605E  E0E3               	bz	l18090
 17063  006060  0A03               	xorlw	3	; case 10
 17064  006062  E0E3               	bz	l18092
 17065  006064  0A01               	xorlw	1	; case 11
 17066  006066  E0DF               	bz	l18090
 17067  006068  0A07               	xorlw	7	; case 12
 17068  00606A  E0E1               	bz	l18096
 17069  00606C  D7E2               	goto	l18098
 17070  00606E                     l18104:
 17071                           
 17072                           ;main.c: 3565: RCSTA&=0b01001111,TXSTAbits.TXEN=0,PIE1&=0b11001111;
 17073  00606E  0E4F               	movlw	79
 17074  006070  16AB               	andwf	4011,f,c	;volatile
 17075  006072  9AAC               	bcf	4012,5,c	;volatile
 17076  006074  0ECF               	movlw	207
 17077  006076  169D               	andwf	3997,f,c	;volatile
 17078                           
 17079                           ;main.c: 3566: OpenUSART( 0b01111111 &
 17080                           ;main.c: 3567: 0b11111111 &
 17081                           ;main.c: 3568: 0b11111110 &
 17082                           ;main.c: 3569: 0b11111101 &
 17083                           ;main.c: 3570: 0b11111111,
 17084                           ;main.c: 3571: nBaud );
 17085  006078  C022  F01F         	movff	changeBaudrate@nBaud,?_OpenUSART
 17086  00607C  6A20               	clrf	?_OpenUSART+1,c
 17087  00607E  0E7C               	movlw	124
 17088  006080  EF86  F032         	goto	_OpenUSART
 17089  006084                     __end_of_changeBaudrate:
 17090                           	opt stack 0
 17091                           tblptru	equ	0xFF8
 17092                           tblptrh	equ	0xFF7
 17093                           tblptrl	equ	0xFF6
 17094                           tablat	equ	0xFF5
 17095                           prodh	equ	0xFF4
 17096                           prodl	equ	0xFF3
 17097                           intcon	equ	0xFF2
 17098                           indf0	equ	0xFEF
 17099                           postinc0	equ	0xFEE
 17100                           fsr0h	equ	0xFEA
 17101                           fsr0l	equ	0xFE9
 17102                           wreg	equ	0xFE8
 17103                           indf1	equ	0xFE7
 17104                           postinc1	equ	0xFE6
 17105                           postdec1	equ	0xFE5
 17106                           fsr1h	equ	0xFE2
 17107                           fsr1l	equ	0xFE1
 17108                           indf2	equ	0xFDF
 17109                           postinc2	equ	0xFDE
 17110                           postdec2	equ	0xFDD
 17111                           plusw2	equ	0xFDB
 17112                           fsr2h	equ	0xFDA
 17113                           fsr2l	equ	0xFD9
 17114                           status	equ	0xFD8
 17115                           
 17116 ;; *************** function _writeRegisterExtended *****************
 17117 ;; Defined at:
 17118 ;;		line 2888 in file "main.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;  nodeid          1    wreg     unsigned char 
 17121 ;;  page            2   79[BANK0 ] unsigned short 
 17122 ;;  reg             1   81[BANK0 ] unsigned char 
 17123 ;;  timeout         2   82[BANK0 ] unsigned short 
 17124 ;;  value           2   84[BANK0 ] PTR unsigned char 
 17125 ;;		 -> doModeVerbose@value_1351(1), 
 17126 ;; Auto vars:     Size  Location     Type
 17127 ;;  nodeid          1   90[BANK0 ] unsigned char 
 17128 ;; Return value:  Size  Location     Type
 17129 ;;                  1    wreg      enum E15660
 17130 ;; Registers used:
 17131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17132 ;; Tracked objects:
 17133 ;;		On entry : F/2
 17134 ;;		On exit  : E/0
 17135 ;;		Unchanged: 0/0
 17136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17137 ;;      Params:         0       7       0       0       0       0       0
 17138 ;;      Locals:         0       1       0       0       0       0       0
 17139 ;;      Temps:          0       4       0       0       0       0       0
 17140 ;;      Totals:         0      12       0       0       0       0       0
 17141 ;;Total ram usage:       12 bytes
 17142 ;; Hardware stack levels used:    1
 17143 ;; Hardware stack levels required when called:    7
 17144 ;; This function calls:
 17145 ;;		_checkCANBusState
 17146 ;;		_sendVSCPFrame
 17147 ;;		_getVSCPFrame
 17148 ;; This function is called by:
 17149 ;;		_doModeVerbose
 17150 ;; This function uses a non-reentrant model
 17151 ;;
 17152                           
 17153                           	psect	text24
 17154  004C96                     __ptext24:
 17155                           	opt stack 0
 17156  004C96                     _writeRegisterExtended:
 17157                           	opt stack 22
 17158                           
 17159                           ;incstack = 0
 17160                           ;incstack = 0
 17161                           ;writeRegisterExtended@nodeid stored from wreg
 17162  004C96  CFE8 F0BA          	movff	wreg,writeRegisterExtended@nodeid
 17163                           
 17164                           ; BSR set to: 2
 17165                           ;main.c: 2889: vscpData[ 0 ] = nodeid;
 17166  004C9A  C0BA  F1A5         	movff	writeRegisterExtended@nodeid,_vscpData
 17167                           
 17168                           ; BSR set to: 2
 17169                           ;main.c: 2890: vscpData[ 1 ] = page >> 8;
 17170  004C9E  0100               	movlb	0	; () banked
 17171  004CA0  51B0               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 17172  004CA2  0101               	movlb	1	; () banked
 17173  004CA4  6FA6               	movwf	(_vscpData+1)& (0+255),b
 17174                           
 17175                           ; BSR set to: 1
 17176                           ;main.c: 2891: vscpData[ 2 ] = page & 0xff;
 17177  004CA6  C0AF  F1A7         	movff	writeRegisterExtended@page,_vscpData+2
 17178                           
 17179                           ; BSR set to: 1
 17180                           ;main.c: 2892: vscpData[ 3 ] = reg;
 17181  004CAA  C0B1  F1A8         	movff	writeRegisterExtended@reg,_vscpData+3
 17182                           
 17183                           ; BSR set to: 1
 17184                           ;main.c: 2893: vscpData[ 4 ] = *value;
 17185  004CAE  C0B4  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17186  004CB2  C0B5  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17187  004CB6  50DF               	movf	indf2,w,c
 17188  004CB8  6FA9               	movwf	(_vscpData+4)& (0+255),b
 17189                           
 17190                           ; BSR set to: 1
 17191                           ;main.c: 2895: if (sendVSCPFrame(0,
 17192                           ;main.c: 2896: 38,
 17193                           ;main.c: 2897: 0,
 17194                           ;main.c: 2898: 0,
 17195                           ;main.c: 2899: 5,
 17196                           ;main.c: 2900: vscpData)) {
 17197  004CBA  0100               	movlb	0	; () banked
 17198  004CBC  6B90               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17199  004CBE  6B8F               	clrf	?_sendVSCPFrame& (0+255),b
 17200  004CC0  0E26               	movlw	38
 17201  004CC2  6F91               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17202  004CC4  6B92               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17203  004CC6  6B93               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17204  004CC8  0E05               	movlw	5
 17205  004CCA  6F94               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17206  004CCC  0E01               	movlw	high _vscpData
 17207  004CCE  6F96               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17208  004CD0  0EA5               	movlw	low _vscpData
 17209  004CD2  6F95               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17210  004CD4  EC06  F02C         	call	_sendVSCPFrame	;wreg free
 17211  004CD8  0900               	iorlw	0
 17212  004CDA  E060               	bz	l17980
 17213                           
 17214                           ; BSR set to: 0
 17215                           ;main.c: 2902: timekeeper = 0;
 17216  004CDC  6BDE               	clrf	_timekeeper& (0+255),b	;volatile
 17217  004CDE  6BDF               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17218  004CE0  6BE0               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17219  004CE2  6BE1               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17220                           
 17221                           ;main.c: 2903: while (timekeeper < timeout) {
 17222  004CE4  D04B               	goto	l17978
 17223  004CE6                     l1243:
 17224                           
 17225                           ; BSR set to: 0
 17226  004CE6  0004               	clrwdt		;# 
 17227                           
 17228                           ;main.c: 2906: checkCANBusState();
 17229  004CE8  EC38  F035         	call	_checkCANBusState	;wreg free
 17230                           
 17231                           ;main.c: 2908: if (getVSCPFrame(&vscpClass,
 17232                           ;main.c: 2909: &vscpType,
 17233                           ;main.c: 2910: &vscpNodeId,
 17234                           ;main.c: 2911: &vscpPriority,
 17235                           ;main.c: 2912: &vscpSize,
 17236                           ;main.c: 2913: vscpData)) {
 17237  004CEC  0E01               	movlw	high _vscpClass
 17238  004CEE  0100               	movlb	0	; () banked
 17239  004CF0  6F6D               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17240  004CF2  0EAD               	movlw	low _vscpClass
 17241  004CF4  6F6C               	movwf	?_getVSCPFrame& (0+255),b
 17242  004CF6  0E01               	movlw	high _vscpType
 17243  004CF8  6F6F               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17244  004CFA  0EB2               	movlw	low _vscpType
 17245  004CFC  6F6E               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17246  004CFE  0E01               	movlw	high _vscpNodeId
 17247  004D00  6F71               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17248  004D02  0EAF               	movlw	low _vscpNodeId
 17249  004D04  6F70               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17250  004D06  0E01               	movlw	high _vscpPriority
 17251  004D08  6F73               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17252  004D0A  0EB0               	movlw	low _vscpPriority
 17253  004D0C  6F72               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17254  004D0E  0E01               	movlw	high _vscpSize
 17255  004D10  6F75               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17256  004D12  0EB1               	movlw	low _vscpSize
 17257  004D14  6F74               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17258  004D16  0E01               	movlw	high _vscpData
 17259  004D18  6F77               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17260  004D1A  0EA5               	movlw	low _vscpData
 17261  004D1C  6F76               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17262  004D1E  EC81  F02F         	call	_getVSCPFrame	;wreg free
 17263  004D22  0900               	iorlw	0
 17264  004D24  E02B               	bz	l17978
 17265                           
 17266                           ; BSR set to: 0
 17267                           ;main.c: 2915: if ((nodeid == vscpNodeId) &&
 17268                           ;main.c: 2916: (5 == vscpSize) &&
 17269                           ;main.c: 2917: (0 == vscpData[ 0 ]) &&
 17270                           ;main.c: 2918: ((page >> 8) == vscpData[ 1 ]) &&
 17271                           ;main.c: 2919: ((page & 0xff) == vscpData[ 2 ]) &&
 17272                           ;main.c: 2920: (reg == vscpData[ 3 ]) &&
 17273                           ;main.c: 2921: (*value == vscpData[ 4 ])) {
 17274  004D26  0101               	movlb	1	; () banked
 17275  004D28  51AF               	movf	_vscpNodeId& (0+255),w,b
 17276  004D2A  0100               	movlb	0	; () banked
 17277  004D2C  63BA               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 17278  004D2E  D026               	goto	l17978
 17279                           
 17280                           ; BSR set to: 0
 17281  004D30  0101               	movlb	1	; () banked
 17282  004D32  51B1               	movf	_vscpSize& (0+255),w,b
 17283  004D34  0A05               	xorlw	5
 17284  004D36  E122               	bnz	l17978
 17285                           
 17286                           ; BSR set to: 1
 17287  004D38  67A5               	tstfsz	_vscpData& (0+255),b
 17288  004D3A  D020               	goto	l17978
 17289                           
 17290                           ; BSR set to: 1
 17291  004D3C  0100               	movlb	0	; () banked
 17292  004D3E  51B0               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 17293  004D40  0101               	movlb	1	; () banked
 17294  004D42  19A6               	xorwf	(_vscpData+1)& (0+255),w,b
 17295  004D44  E11B               	bnz	l17978
 17296                           
 17297                           ; BSR set to: 1
 17298  004D46  0100               	movlb	0	; () banked
 17299  004D48  51AF               	movf	writeRegisterExtended@page& (0+255),w,b
 17300  004D4A  EE21  F0A7         	lfsr	2,_vscpData+2
 17301  004D4E  62DF               	cpfseq	indf2,c
 17302  004D50  D015               	goto	l17978
 17303                           
 17304                           ; BSR set to: 1
 17305  004D52  51B1               	movf	writeRegisterExtended@reg& (0+255),w,b
 17306  004D54  0101               	movlb	1	; () banked
 17307  004D56  EE21  F0A8         	lfsr	2,_vscpData+3
 17308  004D5A  62DF               	cpfseq	indf2,c
 17309  004D5C  D00F               	goto	l17978
 17310                           
 17311                           ; BSR set to: 1
 17312  004D5E  51A9               	movf	(_vscpData+4)& (0+255),w,b
 17313  004D60  C0B4  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17314  004D64  C0B5  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17315  004D68  62DF               	cpfseq	indf2,c
 17316  004D6A  D008               	goto	l17978
 17317                           
 17318                           ; BSR set to: 1
 17319                           ;main.c: 2922: *value = vscpData[ 1 ];
 17320  004D6C  C0B4  FFD9         	movff	writeRegisterExtended@value,fsr2l
 17321  004D70  C0B5  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 17322  004D74  C1A6  FFDF         	movff	_vscpData+1,indf2
 17323                           
 17324                           ; BSR set to: 1
 17325                           ;main.c: 2923: return 1;
 17326  004D78  0E01               	movlw	1
 17327  004D7A  D011               	goto	l1246
 17328  004D7C                     l17978:
 17329  004D7C  0100               	movlb	0	; () banked
 17330  004D7E  51B2               	movf	writeRegisterExtended@timeout& (0+255),w,b
 17331  004D80  6FB6               	movwf	??_writeRegisterExtended& (0+255),b
 17332  004D82  51B3               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 17333  004D84  6FB7               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 17334  004D86  6BB8               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 17335  004D88  6BB9               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 17336  004D8A  51B6               	movf	??_writeRegisterExtended& (0+255),w,b
 17337  004D8C  5DDE               	subwf	_timekeeper& (0+255),w,b	;volatile
 17338  004D8E  51B7               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 17339  004D90  59DF               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17340  004D92  51B8               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 17341  004D94  59E0               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17342  004D96  51B9               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 17343  004D98  59E1               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17344  004D9A  E3A5               	bnc	l1243
 17345  004D9C                     l17980:
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;main.c: 2924: }
 17349                           ;main.c: 2926: }
 17350                           ;main.c: 2928: }
 17351                           ;main.c: 2930: }
 17352                           ;main.c: 2932: return 0;
 17353  004D9C  0E00               	movlw	0
 17354  004D9E                     l1246:
 17355  004D9E  0012               	return	
 17356  004DA0                     __end_of_writeRegisterExtended:
 17357                           	opt stack 0
 17358                           tblptru	equ	0xFF8
 17359                           tblptrh	equ	0xFF7
 17360                           tblptrl	equ	0xFF6
 17361                           tablat	equ	0xFF5
 17362                           prodh	equ	0xFF4
 17363                           prodl	equ	0xFF3
 17364                           intcon	equ	0xFF2
 17365                           indf0	equ	0xFEF
 17366                           postinc0	equ	0xFEE
 17367                           fsr0h	equ	0xFEA
 17368                           fsr0l	equ	0xFE9
 17369                           wreg	equ	0xFE8
 17370                           indf1	equ	0xFE7
 17371                           postinc1	equ	0xFE6
 17372                           postdec1	equ	0xFE5
 17373                           fsr1h	equ	0xFE2
 17374                           fsr1l	equ	0xFE1
 17375                           indf2	equ	0xFDF
 17376                           postinc2	equ	0xFDE
 17377                           postdec2	equ	0xFDD
 17378                           plusw2	equ	0xFDB
 17379                           fsr2h	equ	0xFDA
 17380                           fsr2l	equ	0xFD9
 17381                           status	equ	0xFD8
 17382                           
 17383 ;; *************** function _printBinary *****************
 17384 ;; Defined at:
 17385 ;;		line 2976 in file "main.c"
 17386 ;; Parameters:    Size  Location     Type
 17387 ;;  value           1    wreg     unsigned char 
 17388 ;; Auto vars:     Size  Location     Type
 17389 ;;  value           1   33[COMRAM] unsigned char 
 17390 ;;  i               2   34[COMRAM] int 
 17391 ;; Return value:  Size  Location     Type
 17392 ;;		None               void
 17393 ;; Registers used:
 17394 ;;		wreg, status,2, status,0, cstack
 17395 ;; Tracked objects:
 17396 ;;		On entry : F/2
 17397 ;;		On exit  : 0/0
 17398 ;;		Unchanged: 0/0
 17399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17400 ;;      Params:         0       0       0       0       0       0       0
 17401 ;;      Locals:         3       0       0       0       0       0       0
 17402 ;;      Temps:          2       0       0       0       0       0       0
 17403 ;;      Totals:         5       0       0       0       0       0       0
 17404 ;;Total ram usage:        5 bytes
 17405 ;; Hardware stack levels used:    1
 17406 ;; Hardware stack levels required when called:    4
 17407 ;; This function calls:
 17408 ;;		_WriteUSART
 17409 ;; This function is called by:
 17410 ;;		_doModeVerbose
 17411 ;; This function uses a non-reentrant model
 17412 ;;
 17413                           
 17414                           	psect	text25
 17415  00665C                     __ptext25:
 17416                           	opt stack 0
 17417  00665C                     _printBinary:
 17418                           	opt stack 25
 17419                           
 17420                           ;incstack = 0
 17421                           ;incstack = 0
 17422                           ;printBinary@value stored from wreg
 17423  00665C  CFE8 F022          	movff	wreg,printBinary@value
 17424                           
 17425                           ; BSR set to: 2
 17426                           ;main.c: 2977: int i;
 17427                           ;main.c: 2979: for (i = 7; i >= 0; i--) {
 17428  006660  6A24               	clrf	printBinary@i+1,c
 17429  006662  0E07               	movlw	7
 17430  006664  6E23               	movwf	printBinary@i,c
 17431  006666                     l17928:
 17432                           
 17433                           ;main.c: 2980: if (value & (1 << i)) {
 17434  006666  C023  F020         	movff	printBinary@i,??_printBinary
 17435  00666A  0E01               	movlw	1
 17436  00666C  6E21               	movwf	(??_printBinary+1)& (0+255),c
 17437  00666E  2A20               	incf	??_printBinary,f,c
 17438  006670  D002               	goto	u23544
 17439  006672                     u23545:
 17440  006672  90D8               	bcf	status,0,c
 17441  006674  3621               	rlcf	??_printBinary+1,f,c
 17442  006676                     u23544:
 17443  006676  2E20               	decfsz	??_printBinary,f,c
 17444  006678  D7FC               	goto	u23545
 17445  00667A  5021               	movf	??_printBinary+1,w,c
 17446  00667C  1422               	andwf	printBinary@value,w,c
 17447  00667E  E006               	bz	l1266
 17448  006680                     l1262:
 17449  006680  A2AC               	btfss	4012,1,c	;volatile
 17450  006682  D7FE               	goto	l1262
 17451                           
 17452                           ;main.c: 2982: WriteUSART('1');
 17453  006684  0E31               	movlw	49
 17454  006686  EC8B  F035         	call	_WriteUSART
 17455                           
 17456                           ;main.c: 2983: } else {
 17457  00668A  D005               	goto	l17936
 17458  00668C                     l1266:
 17459  00668C  A2AC               	btfss	4012,1,c	;volatile
 17460  00668E  D7FE               	goto	l1266
 17461                           
 17462                           ;main.c: 2985: WriteUSART('0');
 17463  006690  0E30               	movlw	48
 17464  006692  EC8B  F035         	call	_WriteUSART
 17465  006696                     l17936:
 17466  006696  0623               	decf	printBinary@i,f,c
 17467  006698  A0D8               	btfss	status,0,c
 17468  00669A  0624               	decf	printBinary@i+1,f,c
 17469  00669C  BE24               	btfsc	printBinary@i+1,7,c
 17470  00669E  0012               	return	
 17471  0066A0  D7E2               	goto	l17928
 17472  0066A2                     __end_of_printBinary:
 17473                           	opt stack 0
 17474                           tblptru	equ	0xFF8
 17475                           tblptrh	equ	0xFF7
 17476                           tblptrl	equ	0xFF6
 17477                           tablat	equ	0xFF5
 17478                           prodh	equ	0xFF4
 17479                           prodl	equ	0xFF3
 17480                           intcon	equ	0xFF2
 17481                           indf0	equ	0xFEF
 17482                           postinc0	equ	0xFEE
 17483                           fsr0h	equ	0xFEA
 17484                           fsr0l	equ	0xFE9
 17485                           wreg	equ	0xFE8
 17486                           indf1	equ	0xFE7
 17487                           postinc1	equ	0xFE6
 17488                           postdec1	equ	0xFE5
 17489                           fsr1h	equ	0xFE2
 17490                           fsr1l	equ	0xFE1
 17491                           indf2	equ	0xFDF
 17492                           postinc2	equ	0xFDE
 17493                           postdec2	equ	0xFDD
 17494                           plusw2	equ	0xFDB
 17495                           fsr2h	equ	0xFDA
 17496                           fsr2l	equ	0xFD9
 17497                           status	equ	0xFD8
 17498                           
 17499 ;; *************** function _readRegisterExtended *****************
 17500 ;; Defined at:
 17501 ;;		line 2785 in file "main.c"
 17502 ;; Parameters:    Size  Location     Type
 17503 ;;  nodeid          1    wreg     unsigned char 
 17504 ;;  page            2   79[BANK0 ] unsigned short 
 17505 ;;  reg             1   81[BANK0 ] unsigned char 
 17506 ;;  timeout         2   82[BANK0 ] unsigned short 
 17507 ;;  value           2   84[BANK0 ] PTR unsigned char 
 17508 ;;		 -> doModeVerbose@value_1375(1), doModeVerbose@value(1), 
 17509 ;; Auto vars:     Size  Location     Type
 17510 ;;  nodeid          1   90[BANK0 ] unsigned char 
 17511 ;; Return value:  Size  Location     Type
 17512 ;;                  1    wreg      enum E15660
 17513 ;; Registers used:
 17514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17515 ;; Tracked objects:
 17516 ;;		On entry : F/2
 17517 ;;		On exit  : E/0
 17518 ;;		Unchanged: 0/0
 17519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17520 ;;      Params:         0       7       0       0       0       0       0
 17521 ;;      Locals:         0       1       0       0       0       0       0
 17522 ;;      Temps:          0       4       0       0       0       0       0
 17523 ;;      Totals:         0      12       0       0       0       0       0
 17524 ;;Total ram usage:       12 bytes
 17525 ;; Hardware stack levels used:    1
 17526 ;; Hardware stack levels required when called:    7
 17527 ;; This function calls:
 17528 ;;		_checkCANBusState
 17529 ;;		_sendVSCPFrame
 17530 ;;		_getVSCPFrame
 17531 ;; This function is called by:
 17532 ;;		_doModeVerbose
 17533 ;; This function uses a non-reentrant model
 17534 ;;
 17535                           
 17536                           	psect	text26
 17537  004EA8                     __ptext26:
 17538                           	opt stack 0
 17539  004EA8                     _readRegisterExtended:
 17540                           	opt stack 22
 17541                           
 17542                           ;incstack = 0
 17543                           ;incstack = 0
 17544                           ;readRegisterExtended@nodeid stored from wreg
 17545  004EA8  CFE8 F0BA          	movff	wreg,readRegisterExtended@nodeid
 17546                           
 17547                           ; BSR set to: 2
 17548                           ;main.c: 2786: vscpData[ 0 ] = nodeid;
 17549  004EAC  C0BA  F1A5         	movff	readRegisterExtended@nodeid,_vscpData
 17550                           
 17551                           ; BSR set to: 2
 17552                           ;main.c: 2787: vscpData[ 1 ] = page >> 8;
 17553  004EB0  0100               	movlb	0	; () banked
 17554  004EB2  51B0               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 17555  004EB4  0101               	movlb	1	; () banked
 17556  004EB6  6FA6               	movwf	(_vscpData+1)& (0+255),b
 17557                           
 17558                           ; BSR set to: 1
 17559                           ;main.c: 2788: vscpData[ 2 ] = page & 0xff;
 17560  004EB8  C0AF  F1A7         	movff	readRegisterExtended@page,_vscpData+2
 17561                           
 17562                           ; BSR set to: 1
 17563                           ;main.c: 2789: vscpData[ 3 ] = reg;
 17564  004EBC  C0B1  F1A8         	movff	readRegisterExtended@reg,_vscpData+3
 17565                           
 17566                           ; BSR set to: 1
 17567                           ;main.c: 2790: vscpData[ 4 ] = 1;
 17568  004EC0  0E01               	movlw	1
 17569  004EC2  6FA9               	movwf	(_vscpData+4)& (0+255),b
 17570                           
 17571                           ; BSR set to: 1
 17572                           ;main.c: 2792: if ( sendVSCPFrame(0,
 17573                           ;main.c: 2793: 37,
 17574                           ;main.c: 2794: 0,
 17575                           ;main.c: 2795: 0,
 17576                           ;main.c: 2796: 5,
 17577                           ;main.c: 2797: vscpData ) ) {
 17578  004EC4  0100               	movlb	0	; () banked
 17579  004EC6  6B90               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17580  004EC8  6B8F               	clrf	?_sendVSCPFrame& (0+255),b
 17581  004ECA  0E25               	movlw	37
 17582  004ECC  6F91               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17583  004ECE  6B92               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17584  004ED0  6B93               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17585  004ED2  0E05               	movlw	5
 17586  004ED4  6F94               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17587  004ED6  0E01               	movlw	high _vscpData
 17588  004ED8  6F96               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17589  004EDA  0EA5               	movlw	low _vscpData
 17590  004EDC  6F95               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17591  004EDE  EC06  F02C         	call	_sendVSCPFrame	;wreg free
 17592  004EE2  0900               	iorlw	0
 17593  004EE4  E05F               	bz	l17576
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;main.c: 2799: timekeeper = 0;
 17597  004EE6  6BDE               	clrf	_timekeeper& (0+255),b	;volatile
 17598  004EE8  6BDF               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17599  004EEA  6BE0               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17600  004EEC  6BE1               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17601                           
 17602                           ;main.c: 2800: while (timekeeper < timeout) {
 17603  004EEE  D04A               	goto	l17574
 17604  004EF0                     l1225:
 17605                           
 17606                           ; BSR set to: 0
 17607  004EF0  0004               	clrwdt		;# 
 17608                           
 17609                           ;main.c: 2803: checkCANBusState();
 17610  004EF2  EC38  F035         	call	_checkCANBusState	;wreg free
 17611                           
 17612                           ;main.c: 2805: if ( getVSCPFrame( &vscpClass,
 17613                           ;main.c: 2806: &vscpType,
 17614                           ;main.c: 2807: &vscpNodeId,
 17615                           ;main.c: 2808: &vscpPriority,
 17616                           ;main.c: 2809: &vscpSize,
 17617                           ;main.c: 2810: vscpData ) ) {
 17618  004EF6  0E01               	movlw	high _vscpClass
 17619  004EF8  0100               	movlb	0	; () banked
 17620  004EFA  6F6D               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17621  004EFC  0EAD               	movlw	low _vscpClass
 17622  004EFE  6F6C               	movwf	?_getVSCPFrame& (0+255),b
 17623  004F00  0E01               	movlw	high _vscpType
 17624  004F02  6F6F               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17625  004F04  0EB2               	movlw	low _vscpType
 17626  004F06  6F6E               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17627  004F08  0E01               	movlw	high _vscpNodeId
 17628  004F0A  6F71               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17629  004F0C  0EAF               	movlw	low _vscpNodeId
 17630  004F0E  6F70               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17631  004F10  0E01               	movlw	high _vscpPriority
 17632  004F12  6F73               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17633  004F14  0EB0               	movlw	low _vscpPriority
 17634  004F16  6F72               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17635  004F18  0E01               	movlw	high _vscpSize
 17636  004F1A  6F75               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17637  004F1C  0EB1               	movlw	low _vscpSize
 17638  004F1E  6F74               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17639  004F20  0E01               	movlw	high _vscpData
 17640  004F22  6F77               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17641  004F24  0EA5               	movlw	low _vscpData
 17642  004F26  6F76               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17643  004F28  EC81  F02F         	call	_getVSCPFrame	;wreg free
 17644  004F2C  0900               	iorlw	0
 17645  004F2E  E02A               	bz	l17574
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;main.c: 2811: if ( ( nodeid == vscpNodeId ) &&
 17649                           ;main.c: 2812: ( 0 == vscpClass ) &&
 17650                           ;main.c: 2813: ( 39 == vscpType ) &&
 17651                           ;main.c: 2814: ( 5 == vscpSize ) &&
 17652                           ;main.c: 2815: ( 0 == vscpData[ 0 ] ) &&
 17653                           ;main.c: 2816: ( (page >> 8) == vscpData[ 1 ] ) &&
 17654                           ;main.c: 2817: ( (page & 0xff) == vscpData[ 2 ] ) &&
 17655                           ;main.c: 2818: ( reg == vscpData[ 3 ] ) ) {
 17656  004F30  0101               	movlb	1	; () banked
 17657  004F32  51AF               	movf	_vscpNodeId& (0+255),w,b
 17658  004F34  0100               	movlb	0	; () banked
 17659  004F36  63BA               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 17660  004F38  D025               	goto	l17574
 17661                           
 17662                           ; BSR set to: 0
 17663  004F3A  0101               	movlb	1	; () banked
 17664  004F3C  51AE               	movf	(_vscpClass+1)& (0+255),w,b
 17665  004F3E  11AD               	iorwf	_vscpClass& (0+255),w,b
 17666  004F40  E121               	bnz	l17574
 17667                           
 17668                           ; BSR set to: 1
 17669  004F42  51B2               	movf	_vscpType& (0+255),w,b
 17670  004F44  0A27               	xorlw	39
 17671  004F46  E11E               	bnz	l17574
 17672                           
 17673                           ; BSR set to: 1
 17674  004F48  51B1               	movf	_vscpSize& (0+255),w,b
 17675  004F4A  0A05               	xorlw	5
 17676  004F4C  E11B               	bnz	l17574
 17677                           
 17678                           ; BSR set to: 1
 17679  004F4E  67A5               	tstfsz	_vscpData& (0+255),b
 17680  004F50  D019               	goto	l17574
 17681                           
 17682                           ; BSR set to: 1
 17683  004F52  0100               	movlb	0	; () banked
 17684  004F54  51B0               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 17685  004F56  0101               	movlb	1	; () banked
 17686  004F58  19A6               	xorwf	(_vscpData+1)& (0+255),w,b
 17687  004F5A  E114               	bnz	l17574
 17688                           
 17689                           ; BSR set to: 1
 17690  004F5C  0100               	movlb	0	; () banked
 17691  004F5E  51AF               	movf	readRegisterExtended@page& (0+255),w,b
 17692  004F60  EE21  F0A7         	lfsr	2,_vscpData+2
 17693  004F64  62DF               	cpfseq	indf2,c
 17694  004F66  D00E               	goto	l17574
 17695                           
 17696                           ; BSR set to: 1
 17697  004F68  51B1               	movf	readRegisterExtended@reg& (0+255),w,b
 17698  004F6A  0101               	movlb	1	; () banked
 17699  004F6C  EE21  F0A8         	lfsr	2,_vscpData+3
 17700  004F70  62DF               	cpfseq	indf2,c
 17701  004F72  D008               	goto	l17574
 17702                           
 17703                           ; BSR set to: 1
 17704                           ;main.c: 2819: *value = vscpData[ 4 ];
 17705  004F74  C0B4  FFD9         	movff	readRegisterExtended@value,fsr2l
 17706  004F78  C0B5  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 17707  004F7C  C1A9  FFDF         	movff	_vscpData+4,indf2
 17708                           
 17709                           ; BSR set to: 1
 17710                           ;main.c: 2820: return 1;
 17711  004F80  0E01               	movlw	1
 17712  004F82  D011               	goto	l1228
 17713  004F84                     l17574:
 17714  004F84  0100               	movlb	0	; () banked
 17715  004F86  51B2               	movf	readRegisterExtended@timeout& (0+255),w,b
 17716  004F88  6FB6               	movwf	??_readRegisterExtended& (0+255),b
 17717  004F8A  51B3               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 17718  004F8C  6FB7               	movwf	(??_readRegisterExtended+1)& (0+255),b
 17719  004F8E  6BB8               	clrf	(??_readRegisterExtended+2)& (0+255),b
 17720  004F90  6BB9               	clrf	(??_readRegisterExtended+3)& (0+255),b
 17721  004F92  51B6               	movf	??_readRegisterExtended& (0+255),w,b
 17722  004F94  5DDE               	subwf	_timekeeper& (0+255),w,b	;volatile
 17723  004F96  51B7               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 17724  004F98  59DF               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17725  004F9A  51B8               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 17726  004F9C  59E0               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17727  004F9E  51B9               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 17728  004FA0  59E1               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17729  004FA2  E3A6               	bnc	l1225
 17730  004FA4                     l17576:
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;main.c: 2821: }
 17734                           ;main.c: 2822: }
 17735                           ;main.c: 2823: }
 17736                           ;main.c: 2824: }
 17737                           ;main.c: 2826: return 0;
 17738  004FA4  0E00               	movlw	0
 17739  004FA6                     l1228:
 17740  004FA6  0012               	return	
 17741  004FA8                     __end_of_readRegisterExtended:
 17742                           	opt stack 0
 17743                           tblptru	equ	0xFF8
 17744                           tblptrh	equ	0xFF7
 17745                           tblptrl	equ	0xFF6
 17746                           tablat	equ	0xFF5
 17747                           prodh	equ	0xFF4
 17748                           prodl	equ	0xFF3
 17749                           intcon	equ	0xFF2
 17750                           indf0	equ	0xFEF
 17751                           postinc0	equ	0xFEE
 17752                           fsr0h	equ	0xFEA
 17753                           fsr0l	equ	0xFE9
 17754                           wreg	equ	0xFE8
 17755                           indf1	equ	0xFE7
 17756                           postinc1	equ	0xFE6
 17757                           postdec1	equ	0xFE5
 17758                           fsr1h	equ	0xFE2
 17759                           fsr1l	equ	0xFE1
 17760                           indf2	equ	0xFDF
 17761                           postinc2	equ	0xFDE
 17762                           postdec2	equ	0xFDD
 17763                           plusw2	equ	0xFDB
 17764                           fsr2h	equ	0xFDA
 17765                           fsr2l	equ	0xFD9
 17766                           status	equ	0xFD8
 17767                           
 17768 ;; *************** function _strcpy *****************
 17769 ;; Defined at:
 17770 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/strcpy.c"
 17771 ;; Parameters:    Size  Location     Type
 17772 ;;  to              2   30[COMRAM] PTR unsigned char 
 17773 ;;		 -> cmdbuf(80), 
 17774 ;;  from            2   32[COMRAM] PTR const unsigned char 
 17775 ;;		 -> cmdbuf(80), 
 17776 ;; Auto vars:     Size  Location     Type
 17777 ;;  cp              2   34[COMRAM] PTR unsigned char 
 17778 ;;		 -> cmdbuf(80), 
 17779 ;; Return value:  Size  Location     Type
 17780 ;;                  2   30[COMRAM] PTR unsigned char 
 17781 ;; Registers used:
 17782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17783 ;; Tracked objects:
 17784 ;;		On entry : F/1
 17785 ;;		On exit  : F/1
 17786 ;;		Unchanged: F/0
 17787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17788 ;;      Params:         4       0       0       0       0       0       0
 17789 ;;      Locals:         2       0       0       0       0       0       0
 17790 ;;      Temps:          0       0       0       0       0       0       0
 17791 ;;      Totals:         6       0       0       0       0       0       0
 17792 ;;Total ram usage:        6 bytes
 17793 ;; Hardware stack levels used:    1
 17794 ;; Hardware stack levels required when called:    3
 17795 ;; This function calls:
 17796 ;;		Nothing
 17797 ;; This function is called by:
 17798 ;;		_doModeVerbose
 17799 ;; This function uses a non-reentrant model
 17800 ;;
 17801                           
 17802                           	psect	text27
 17803  0069EE                     __ptext27:
 17804                           	opt stack 0
 17805  0069EE                     _strcpy:
 17806                           	opt stack 26
 17807                           
 17808                           ; BSR set to: 1
 17809                           
 17810                           ;incstack = 0
 17811                           ;incstack = 0
 17812  0069EE  C01F  F023         	movff	strcpy@to,strcpy@cp
 17813  0069F2  C020  F024         	movff	strcpy@to+1,strcpy@cp+1
 17814  0069F6  D004               	goto	l17526
 17815  0069F8                     l17524:
 17816                           
 17817                           ; BSR set to: 1
 17818  0069F8  4A23               	infsnz	strcpy@cp,f,c
 17819  0069FA  2A24               	incf	strcpy@cp+1,f,c
 17820  0069FC  4A21               	infsnz	strcpy@from,f,c
 17821  0069FE  2A22               	incf	strcpy@from+1,f,c
 17822  006A00                     l17526:
 17823                           
 17824                           ; BSR set to: 1
 17825  006A00  C021  FFD9         	movff	strcpy@from,fsr2l
 17826  006A04  C022  FFDA         	movff	strcpy@from+1,fsr2h
 17827  006A08  C023  FFE1         	movff	strcpy@cp,fsr1l
 17828  006A0C  C024  FFE2         	movff	strcpy@cp+1,fsr1h
 17829  006A10  CFDF FFE7          	movff	indf2,indf1
 17830  006A14  50E7               	movf	indf1,w,c
 17831  006A16  B4D8               	btfsc	status,2,c
 17832                           
 17833                           ; BSR set to: 1
 17834  006A18  0012               	return	
 17835  006A1A  D7EE               	goto	l17524
 17836  006A1C                     __end_of_strcpy:
 17837                           	opt stack 0
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           indf0	equ	0xFEF
 17846                           postinc0	equ	0xFEE
 17847                           fsr0h	equ	0xFEA
 17848                           fsr0l	equ	0xFE9
 17849                           wreg	equ	0xFE8
 17850                           indf1	equ	0xFE7
 17851                           postinc1	equ	0xFE6
 17852                           postdec1	equ	0xFE5
 17853                           fsr1h	equ	0xFE2
 17854                           fsr1l	equ	0xFE1
 17855                           indf2	equ	0xFDF
 17856                           postinc2	equ	0xFDE
 17857                           postdec2	equ	0xFDD
 17858                           plusw2	equ	0xFDB
 17859                           fsr2h	equ	0xFDA
 17860                           fsr2l	equ	0xFD9
 17861                           status	equ	0xFD8
 17862                           
 17863 ;; *************** function _findNodes *****************
 17864 ;; Defined at:
 17865 ;;		line 3126 in file "main.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;		None
 17868 ;; Auto vars:     Size  Location     Type
 17869 ;;  i               1   99[BANK0 ] unsigned char 
 17870 ;;  bDot            1   98[BANK0 ] enum E15660
 17871 ;;  value           1   97[BANK0 ] unsigned char 
 17872 ;;  nFound          1   96[BANK0 ] unsigned char 
 17873 ;; Return value:  Size  Location     Type
 17874 ;;		None               void
 17875 ;; Registers used:
 17876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 17877 ;; Tracked objects:
 17878 ;;		On entry : F/1
 17879 ;;		On exit  : 0/0
 17880 ;;		Unchanged: 0/0
 17881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17882 ;;      Params:         0       0       0       0       0       0       0
 17883 ;;      Locals:         0       6       0       0       0       0       0
 17884 ;;      Temps:          0       0       0       0       0       0       0
 17885 ;;      Totals:         0       6       0       0       0       0       0
 17886 ;;Total ram usage:        6 bytes
 17887 ;; Hardware stack levels used:    1
 17888 ;; Hardware stack levels required when called:    9
 17889 ;; This function calls:
 17890 ;;		_putsUSART
 17891 ;;		_WriteUSART
 17892 ;;		_printNodeFirmwareVersion
 17893 ;;		_printGUID
 17894 ;;		_printMDF
 17895 ;;		_itoa
 17896 ;;		_readRegister
 17897 ;; This function is called by:
 17898 ;;		_doModeVerbose
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text28
 17903  004804                     __ptext28:
 17904                           	opt stack 0
 17905  004804                     _findNodes:
 17906                           	opt stack 20
 17907                           
 17908                           ; BSR set to: 1
 17909                           ;main.c: 3127: uint8_t nFound = 0;
 17910                           
 17911                           ; BSR set to: 1
 17912                           ;incstack = 0
 17913                           ;incstack = 0
 17914  004804  0100               	movlb	0	; () banked
 17915  004806  6BC0               	clrf	findNodes@nFound& (0+255),b
 17916                           
 17917                           ;main.c: 3128: uint8_t i;
 17918                           ;main.c: 3129: uint8_t value;
 17919                           ;main.c: 3130: BOOL bDot = 0;
 17920  004808  6BC2               	clrf	findNodes@bDot& (0+255),b
 17921                           
 17922                           ; BSR set to: 0
 17923                           ;main.c: 3132: if ( ECAN_OP_MODE_NORMAL != (CANCON & ECAN_OP_MODE_BITS) ) {
 17924  00480A  506F               	movf	3951,w,c	;volatile
 17925  00480C  0BE0               	andlw	224
 17926  00480E  E007               	bz	l17468
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;main.c: 3133: putsUSART( (char *)"-ERROR - Command only works if interface is open.\r\n
      +                          " );
 17930  004810  0E73               	movlw	high STR_50
 17931  004812  6E21               	movwf	?_putsUSART+1,c
 17932  004814  0E13               	movlw	low STR_50
 17933  004816  6E20               	movwf	?_putsUSART,c
 17934  004818  ECDF  F032         	call	_putsUSART	;wreg free
 17935  00481C  D08C               	goto	l1328
 17936  00481E                     l17468:
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;main.c: 3135: }
 17940                           ;main.c: 3137: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 17941  00481E  0E6F               	movlw	high STR_282
 17942  004820  6E21               	movwf	?_putsUSART+1,c
 17943  004822  0EDC               	movlw	low STR_282
 17944  004824  6E20               	movwf	?_putsUSART,c
 17945  004826  ECDF  F032         	call	_putsUSART	;wreg free
 17946                           
 17947                           ;main.c: 3139: for (i = 1; i != 0; i++) {
 17948  00482A  0E01               	movlw	1
 17949  00482C  0100               	movlb	0	; () banked
 17950  00482E  6FC3               	movwf	findNodes@i& (0+255),b
 17951  004830                     l1329:
 17952                           
 17953                           ; BSR set to: 0
 17954  004830  0004               	clrwdt		;# 
 17955                           
 17956                           ;main.c: 3143: if (readRegister( i,
 17957                           ;main.c: 3144: 0xE0,
 17958                           ;main.c: 3145: rwtimeout,
 17959                           ;main.c: 3146: &value ) ) {
 17960  004832  0EE0               	movlw	224
 17961  004834  0100               	movlb	0	; () banked
 17962  004836  6FAF               	movwf	?_readRegister& (0+255),b
 17963  004838  C104  F0B0         	movff	_rwtimeout,?_readRegister+1
 17964  00483C  6BB1               	clrf	(?_readRegister+2)& (0+255),b
 17965  00483E  0EC1               	movlw	low findNodes@value
 17966  004840  6FB2               	movwf	(?_readRegister+3)& (0+255),b
 17967  004842  51C3               	movf	findNodes@i& (0+255),w,b
 17968  004844  EC10  F02A         	call	_readRegister
 17969  004848  0900               	iorlw	0
 17970  00484A  E04A               	bz	l17504
 17971                           
 17972                           ;main.c: 3147: if ( bDot ) {
 17973  00484C  0100               	movlb	0	; () banked
 17974  00484E  51C2               	movf	findNodes@bDot& (0+255),w,b
 17975  004850  E006               	bz	l1332
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;main.c: 3148: putsUSART((char *) "\r\n");
 17979  004852  0E72               	movlw	high (STR_241+51)
 17980  004854  6E21               	movwf	?_putsUSART+1,c
 17981  004856  0EDA               	movlw	low (STR_241+51)
 17982  004858  6E20               	movwf	?_putsUSART,c
 17983  00485A  ECDF  F032         	call	_putsUSART	;wreg free
 17984  00485E                     l1332:
 17985                           
 17986                           ;main.c: 3149: }
 17987                           ;main.c: 3150: putsUSART((char *) "Node found with node id = ");
 17988  00485E  0E7A               	movlw	high STR_284
 17989  004860  6E21               	movwf	?_putsUSART+1,c
 17990  004862  0EB3               	movlw	low STR_284
 17991  004864  6E20               	movwf	?_putsUSART,c
 17992  004866  ECDF  F032         	call	_putsUSART	;wreg free
 17993                           
 17994                           ;main.c: 3151: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 17995  00486A  0101               	movlb	1	; () banked
 17996  00486C  6700               	tstfsz	_bHex& (0+255),b
 17997  00486E  D004               	goto	l17486
 17998                           
 17999                           ; BSR set to: 1
 18000  004870  0100               	movlb	0	; () banked
 18001  004872  6BBF               	clrf	(_findNodes$1711+1)& (0+255),b
 18002  004874  0E0A               	movlw	10
 18003  004876  D003               	goto	L28
 18004  004878                     l17486:
 18005                           
 18006                           ; BSR set to: 1
 18007  004878  0100               	movlb	0	; () banked
 18008  00487A  6BBF               	clrf	(_findNodes$1711+1)& (0+255),b
 18009  00487C  0E10               	movlw	16
 18010  00487E                     L28:
 18011  00487E  6FBE               	movwf	_findNodes$1711& (0+255),b
 18012                           
 18013                           ; BSR set to: 0
 18014  004880  0E01               	movlw	high _wrkbuf
 18015  004882  0100               	movlb	0	; () banked
 18016  004884  6F6A               	movwf	(?_itoa+1)& (0+255),b
 18017  004886  0E55               	movlw	low _wrkbuf
 18018  004888  6F69               	movwf	?_itoa& (0+255),b
 18019  00488A  C1AF  F06B         	movff	_vscpNodeId,?_itoa+2
 18020  00488E  6B6C               	clrf	(?_itoa+3)& (0+255),b
 18021  004890  C0BE  F06D         	movff	_findNodes$1711,?_itoa+4
 18022  004894  C0BF  F06E         	movff	_findNodes$1711+1,?_itoa+5
 18023  004898  ECA9  F034         	call	_itoa	;wreg free
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;main.c: 3152: putsUSART(wrkbuf);
 18027  00489C  0101               	movlb	1	; () banked
 18028  00489E  0E01               	movlw	high _wrkbuf
 18029  0048A0  6E21               	movwf	?_putsUSART+1,c
 18030  0048A2  0E55               	movlw	low _wrkbuf
 18031  0048A4  6E20               	movwf	?_putsUSART,c
 18032  0048A6  ECDF  F032         	call	_putsUSART	;wreg free
 18033                           
 18034                           ;main.c: 3153: putsUSART((char *) "\r\n");
 18035  0048AA  0E72               	movlw	high (STR_241+51)
 18036  0048AC  6E21               	movwf	?_putsUSART+1,c
 18037  0048AE  0EDA               	movlw	low (STR_241+51)
 18038  0048B0  6E20               	movwf	?_putsUSART,c
 18039  0048B2  ECDF  F032         	call	_putsUSART	;wreg free
 18040                           
 18041                           ;main.c: 3154: printNodeFirmwareVersion(i);
 18042  0048B6  0100               	movlb	0	; () banked
 18043  0048B8  51C3               	movf	findNodes@i& (0+255),w,b
 18044  0048BA  EC79  F02A         	call	_printNodeFirmwareVersion
 18045                           
 18046                           ;main.c: 3155: printGUID(i);
 18047  0048BE  0100               	movlb	0	; () banked
 18048  0048C0  51C3               	movf	findNodes@i& (0+255),w,b
 18049  0048C2  ECD4  F027         	call	_printGUID
 18050                           
 18051                           ;main.c: 3156: printMDF(i);
 18052  0048C6  0100               	movlb	0	; () banked
 18053  0048C8  51C3               	movf	findNodes@i& (0+255),w,b
 18054  0048CA  ECA1  F02E         	call	_printMDF
 18055                           
 18056                           ;main.c: 3157: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 18057  0048CE  0E6F               	movlw	high STR_282
 18058  0048D0  6E21               	movwf	?_putsUSART+1,c
 18059  0048D2  0EDC               	movlw	low STR_282
 18060  0048D4  6E20               	movwf	?_putsUSART,c
 18061  0048D6  ECDF  F032         	call	_putsUSART	;wreg free
 18062                           
 18063                           ;main.c: 3158: nFound++;
 18064  0048DA  0100               	movlb	0	; () banked
 18065  0048DC  2BC0               	incf	findNodes@nFound& (0+255),f,b
 18066                           
 18067                           ;main.c: 3159: }
 18068  0048DE  D007               	goto	l17510
 18069  0048E0                     l17504:
 18070                           
 18071                           ;main.c: 3160: else {
 18072                           ;main.c: 3161: bDot = 1;
 18073  0048E0  0E01               	movlw	1
 18074  0048E2  0100               	movlb	0	; () banked
 18075  0048E4  6FC2               	movwf	findNodes@bDot& (0+255),b
 18076                           
 18077                           ; BSR set to: 0
 18078                           ;main.c: 3162: WriteUSART('.');
 18079  0048E6  0E2E               	movlw	46
 18080  0048E8  EC8B  F035         	call	_WriteUSART
 18081                           
 18082                           ;main.c: 3163: (!TXSTAbits.TRMT);
 18083  0048EC  50AC               	movf	4012,w,c	;volatile
 18084  0048EE                     l17510:
 18085  0048EE  0100               	movlb	0	; () banked
 18086  0048F0  2BC3               	incf	findNodes@i& (0+255),f,b
 18087                           
 18088                           ; BSR set to: 0
 18089  0048F2  67C3               	tstfsz	findNodes@i& (0+255),b
 18090  0048F4  D79D               	goto	l1329
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;main.c: 3164: }
 18094                           ;main.c: 3166: }
 18095                           ;main.c: 3168: putsUSART((char *) "\r\n");
 18096  0048F6  0E72               	movlw	high (STR_241+51)
 18097  0048F8  6E21               	movwf	?_putsUSART+1,c
 18098  0048FA  0EDA               	movlw	low (STR_241+51)
 18099  0048FC  6E20               	movwf	?_putsUSART,c
 18100  0048FE  ECDF  F032         	call	_putsUSART	;wreg free
 18101                           
 18102                           ;main.c: 3169: itoa(wrkbuf, nFound, 10);
 18103  004902  0E01               	movlw	high _wrkbuf
 18104  004904  0100               	movlb	0	; () banked
 18105  004906  6F6A               	movwf	(?_itoa+1)& (0+255),b
 18106  004908  0E55               	movlw	low _wrkbuf
 18107  00490A  6F69               	movwf	?_itoa& (0+255),b
 18108  00490C  C0C0  F06B         	movff	findNodes@nFound,?_itoa+2
 18109  004910  6B6C               	clrf	(?_itoa+3)& (0+255),b
 18110  004912  6B6E               	clrf	(?_itoa+5)& (0+255),b
 18111  004914  0E0A               	movlw	10
 18112  004916  6F6D               	movwf	(?_itoa+4)& (0+255),b
 18113  004918  ECA9  F034         	call	_itoa	;wreg free
 18114                           
 18115                           ; BSR set to: 0
 18116                           ;main.c: 3170: putsUSART(wrkbuf);
 18117  00491C  0101               	movlb	1	; () banked
 18118  00491E  0E01               	movlw	high _wrkbuf
 18119  004920  6E21               	movwf	?_putsUSART+1,c
 18120  004922  0E55               	movlw	low _wrkbuf
 18121  004924  6E20               	movwf	?_putsUSART,c
 18122  004926  ECDF  F032         	call	_putsUSART	;wreg free
 18123                           
 18124                           ;main.c: 3171: putsUSART((char *) " node(s) found\r\n");
 18125  00492A  0E7D               	movlw	high STR_288
 18126  00492C  6E21               	movwf	?_putsUSART+1,c
 18127  00492E  0EC8               	movlw	low STR_288
 18128  004930  6E20               	movwf	?_putsUSART,c
 18129  004932  ECDF  F032         	call	_putsUSART	;wreg free
 18130  004936                     l1328:
 18131  004936  0012               	return	
 18132  004938                     __end_of_findNodes:
 18133                           	opt stack 0
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           indf0	equ	0xFEF
 18142                           postinc0	equ	0xFEE
 18143                           fsr0h	equ	0xFEA
 18144                           fsr0l	equ	0xFE9
 18145                           wreg	equ	0xFE8
 18146                           indf1	equ	0xFE7
 18147                           postinc1	equ	0xFE6
 18148                           postdec1	equ	0xFE5
 18149                           fsr1h	equ	0xFE2
 18150                           fsr1l	equ	0xFE1
 18151                           indf2	equ	0xFDF
 18152                           postinc2	equ	0xFDE
 18153                           postdec2	equ	0xFDD
 18154                           plusw2	equ	0xFDB
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8
 18158                           
 18159 ;; *************** function _printMDF *****************
 18160 ;; Defined at:
 18161 ;;		line 3222 in file "main.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  nodeid          1    wreg     unsigned char 
 18164 ;; Auto vars:     Size  Location     Type
 18165 ;;  nodeid          1   88[BANK0 ] unsigned char 
 18166 ;;  p               2   90[BANK0 ] PTR unsigned char 
 18167 ;;		 -> wrkbuf(80), 
 18168 ;;  i               1   92[BANK0 ] unsigned char 
 18169 ;;  value           1   89[BANK0 ] unsigned char 
 18170 ;; Return value:  Size  Location     Type
 18171 ;;		None               void
 18172 ;; Registers used:
 18173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18174 ;; Tracked objects:
 18175 ;;		On entry : D/2
 18176 ;;		On exit  : 0/0
 18177 ;;		Unchanged: 0/0
 18178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18179 ;;      Params:         0       0       0       0       0       0       0
 18180 ;;      Locals:         0       5       0       0       0       0       0
 18181 ;;      Temps:          0       0       0       0       0       0       0
 18182 ;;      Totals:         0       5       0       0       0       0       0
 18183 ;;Total ram usage:        5 bytes
 18184 ;; Hardware stack levels used:    1
 18185 ;; Hardware stack levels required when called:    8
 18186 ;; This function calls:
 18187 ;;		_putsUSART
 18188 ;;		_memset
 18189 ;;		_readRegister
 18190 ;; This function is called by:
 18191 ;;		_doModeVerbose
 18192 ;;		_findNodes
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text29
 18197  005D42                     __ptext29:
 18198                           	opt stack 0
 18199  005D42                     _printMDF:
 18200                           	opt stack 21
 18201                           
 18202                           ;incstack = 0
 18203                           ;incstack = 0
 18204                           ;printMDF@nodeid stored from wreg
 18205  005D42  CFE8 F0B8          	movff	wreg,printMDF@nodeid
 18206                           
 18207                           ;main.c: 3223: uint8_t i;
 18208                           ;main.c: 3224: uint8_t value;
 18209                           ;main.c: 3225: char *p = wrkbuf;
 18210  005D46  0E01               	movlw	high _wrkbuf
 18211  005D48  0100               	movlb	0	; () banked
 18212  005D4A  6FBB               	movwf	(printMDF@p+1)& (0+255),b
 18213  005D4C  0E55               	movlw	low _wrkbuf
 18214  005D4E  6FBA               	movwf	printMDF@p& (0+255),b
 18215                           
 18216                           ; BSR set to: 0
 18217                           ;main.c: 3226: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 18218  005D50  0101               	movlb	1	; () banked
 18219  005D52  0E01               	movlw	high _wrkbuf
 18220  005D54  6E20               	movwf	?_memset+1,c
 18221  005D56  0E55               	movlw	low _wrkbuf
 18222  005D58  D83A               	call	PL30	;call to abstracted procedure
 18223  005D5A  EC0E  F035         	call	_memset	;wreg free
 18224                           
 18225                           ;main.c: 3227: putsUSART((char *) "MDF = http://");
 18226  005D5E  0E7E               	movlw	high STR_294
 18227  005D60  6E21               	movwf	?_putsUSART+1,c
 18228  005D62  0E0A               	movlw	low STR_294
 18229  005D64  6E20               	movwf	?_putsUSART,c
 18230  005D66  ECDF  F032         	call	_putsUSART	;wreg free
 18231                           
 18232                           ;main.c: 3229: for (i = 0; i < 32; i++) {
 18233  005D6A  0100               	movlb	0	; () banked
 18234  005D6C  6BBC               	clrf	printMDF@i& (0+255),b
 18235  005D6E                     l18056:
 18236                           
 18237                           ; BSR set to: 0
 18238                           ;main.c: 3230: if (readRegister(nodeid,
 18239                           ;main.c: 3231: 0xE0 + i,
 18240                           ;main.c: 3232: rwtimeout,
 18241                           ;main.c: 3233: &value)) {
 18242  005D6E  51BC               	movf	printMDF@i& (0+255),w,b
 18243  005D70  0FE0               	addlw	224
 18244  005D72  6FAF               	movwf	?_readRegister& (0+255),b
 18245  005D74  0100               	movlb	0	; () banked
 18246  005D76  C104  F0B0         	movff	_rwtimeout,?_readRegister+1
 18247  005D7A  6BB1               	clrf	(?_readRegister+2)& (0+255),b
 18248  005D7C  0EB9               	movlw	low printMDF@value
 18249  005D7E  6FB2               	movwf	(?_readRegister+3)& (0+255),b
 18250  005D80  51B8               	movf	printMDF@nodeid& (0+255),w,b
 18251  005D82  EC10  F02A         	call	_readRegister
 18252  005D86  0900               	iorlw	0
 18253  005D88  E00A               	bz	l18062
 18254                           
 18255                           ;main.c: 3234: *p = value;
 18256  005D8A  C0BA  FFD9         	movff	printMDF@p,fsr2l
 18257  005D8E  C0BB  FFDA         	movff	printMDF@p+1,fsr2h
 18258  005D92  C0B9  FFDF         	movff	printMDF@value,indf2
 18259  005D96                     l18060:
 18260                           
 18261                           ;main.c: 3235: p++;
 18262  005D96  0100               	movlb	0	; () banked
 18263  005D98  4BBA               	infsnz	printMDF@p& (0+255),f,b
 18264  005D9A  2BBB               	incf	(printMDF@p+1)& (0+255),f,b
 18265                           
 18266                           ;main.c: 3237: }
 18267  005D9C  D007               	goto	l18066
 18268  005D9E                     l18062:
 18269                           
 18270                           ;main.c: 3238: else {
 18271                           ;main.c: 3239: *p = '?';
 18272  005D9E  C0BA  FFD9         	movff	printMDF@p,fsr2l
 18273  005DA2  C0BB  FFDA         	movff	printMDF@p+1,fsr2h
 18274  005DA6  0E3F               	movlw	63
 18275  005DA8  6EDF               	movwf	indf2,c
 18276  005DAA  D7F5               	goto	l18060
 18277  005DAC                     l18066:
 18278                           
 18279                           ; BSR set to: 0
 18280  005DAC  2BBC               	incf	printMDF@i& (0+255),f,b
 18281                           
 18282                           ; BSR set to: 0
 18283  005DAE  0E1F               	movlw	31
 18284  005DB0  65BC               	cpfsgt	printMDF@i& (0+255),b
 18285  005DB2  D7DD               	goto	l18056
 18286                           
 18287                           ; BSR set to: 0
 18288                           ;main.c: 3241: }
 18289                           ;main.c: 3242: }
 18290                           ;main.c: 3244: putsUSART(wrkbuf);
 18291  005DB4  0101               	movlb	1	; () banked
 18292  005DB6  0E01               	movlw	high _wrkbuf
 18293  005DB8  6E21               	movwf	?_putsUSART+1,c
 18294  005DBA  0E55               	movlw	low _wrkbuf
 18295  005DBC  6E20               	movwf	?_putsUSART,c
 18296  005DBE  ECDF  F032         	call	_putsUSART	;wreg free
 18297                           
 18298                           ;main.c: 3245: putsUSART((char *) "\r\n");
 18299  005DC2  0E72               	movlw	high (STR_241+51)
 18300  005DC4  6E21               	movwf	?_putsUSART+1,c
 18301  005DC6  0EDA               	movlw	low (STR_241+51)
 18302  005DC8  6E20               	movwf	?_putsUSART,c
 18303  005DCA  EFDF  F032         	goto	_putsUSART	;wreg free
 18304  005DCE                     __end_of_printMDF:
 18305                           	opt stack 0
 18306  005DCE                     PL30:
 18307                           	opt stack 20
 18308  005DCE  6E1F               	movwf	?_memset,c
 18309  005DD0  6A22               	clrf	?_memset+3,c
 18310  005DD2  6A21               	clrf	?_memset+2,c
 18311  005DD4  6A24               	clrf	?_memset+5,c
 18312  005DD6  0E50               	movlw	80
 18313  005DD8  6E23               	movwf	?_memset+4,c
 18314  005DDA  0C50               	retlw	80
 18315  005DDC                     __end_ofPL30:
 18316                           	opt stack 0
 18317                           tblptru	equ	0xFF8
 18318                           tblptrh	equ	0xFF7
 18319                           tblptrl	equ	0xFF6
 18320                           tablat	equ	0xFF5
 18321                           prodh	equ	0xFF4
 18322                           prodl	equ	0xFF3
 18323                           intcon	equ	0xFF2
 18324                           indf0	equ	0xFEF
 18325                           postinc0	equ	0xFEE
 18326                           fsr0h	equ	0xFEA
 18327                           fsr0l	equ	0xFE9
 18328                           wreg	equ	0xFE8
 18329                           indf1	equ	0xFE7
 18330                           postinc1	equ	0xFE6
 18331                           postdec1	equ	0xFE5
 18332                           fsr1h	equ	0xFE2
 18333                           fsr1l	equ	0xFE1
 18334                           indf2	equ	0xFDF
 18335                           postinc2	equ	0xFDE
 18336                           postdec2	equ	0xFDD
 18337                           plusw2	equ	0xFDB
 18338                           fsr2h	equ	0xFDA
 18339                           fsr2l	equ	0xFD9
 18340                           status	equ	0xFD8
 18341                           
 18342 ;; *************** function _printGUID *****************
 18343 ;; Defined at:
 18344 ;;		line 3181 in file "main.c"
 18345 ;; Parameters:    Size  Location     Type
 18346 ;;  nodeid          1    wreg     unsigned char 
 18347 ;; Auto vars:     Size  Location     Type
 18348 ;;  nodeid          1   88[BANK0 ] unsigned char 
 18349 ;;  buf             3   89[BANK0 ] unsigned char [3]
 18350 ;;  i               1   93[BANK0 ] unsigned char 
 18351 ;;  value           1   92[BANK0 ] unsigned char 
 18352 ;; Return value:  Size  Location     Type
 18353 ;;		None               void
 18354 ;; Registers used:
 18355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18356 ;; Tracked objects:
 18357 ;;		On entry : D/2
 18358 ;;		On exit  : 0/0
 18359 ;;		Unchanged: 0/0
 18360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18361 ;;      Params:         0       0       0       0       0       0       0
 18362 ;;      Locals:         0       6       0       0       0       0       0
 18363 ;;      Temps:          0       0       0       0       0       0       0
 18364 ;;      Totals:         0       6       0       0       0       0       0
 18365 ;;Total ram usage:        6 bytes
 18366 ;; Hardware stack levels used:    1
 18367 ;; Hardware stack levels required when called:    8
 18368 ;; This function calls:
 18369 ;;		_putsUSART
 18370 ;;		_memset
 18371 ;;		_strlen
 18372 ;;		_itoa
 18373 ;;		_readRegister
 18374 ;;		_strcat
 18375 ;; This function is called by:
 18376 ;;		_doModeVerbose
 18377 ;;		_findNodes
 18378 ;; This function uses a non-reentrant model
 18379 ;;
 18380                           
 18381                           	psect	text30
 18382  004FA8                     __ptext30:
 18383                           	opt stack 0
 18384  004FA8                     _printGUID:
 18385                           	opt stack 21
 18386                           
 18387                           ;incstack = 0
 18388                           ;incstack = 0
 18389                           ;printGUID@nodeid stored from wreg
 18390  004FA8  CFE8 F0B8          	movff	wreg,printGUID@nodeid
 18391                           
 18392                           ;main.c: 3182: uint8_t i;
 18393                           ;main.c: 3183: uint8_t value;
 18394                           ;main.c: 3184: char buf[3];
 18395                           ;main.c: 3186: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 18396  004FAC  0101               	movlb	1	; () banked
 18397  004FAE  0E01               	movlw	high _wrkbuf
 18398  004FB0  6E20               	movwf	?_memset+1,c
 18399  004FB2  0E55               	movlw	low _wrkbuf
 18400  004FB4  ECE7  F02E         	call	PL30	;call to abstracted procedure
 18401  004FB8  EC0E  F035         	call	_memset	;wreg free
 18402                           
 18403                           ;main.c: 3187: putsUSART((char *) "GUID = ");
 18404  004FBC  0E7E               	movlw	high STR_289
 18405  004FBE  6E21               	movwf	?_putsUSART+1,c
 18406  004FC0  0ED8               	movlw	low STR_289
 18407  004FC2  6E20               	movwf	?_putsUSART,c
 18408  004FC4  ECDF  F032         	call	_putsUSART	;wreg free
 18409                           
 18410                           ;main.c: 3189: for (i = 0; i < 16; i++) {
 18411  004FC8  0100               	movlb	0	; () banked
 18412  004FCA  6BBD               	clrf	printGUID@i& (0+255),b
 18413  004FCC                     l18022:
 18414                           
 18415                           ; BSR set to: 0
 18416                           ;main.c: 3190: if (readRegister(nodeid,
 18417                           ;main.c: 3191: 0xD0 + i,
 18418                           ;main.c: 3192: rwtimeout,
 18419                           ;main.c: 3193: &value)) {
 18420  004FCC  51BD               	movf	printGUID@i& (0+255),w,b
 18421  004FCE  0FD0               	addlw	208
 18422  004FD0  6FAF               	movwf	?_readRegister& (0+255),b
 18423  004FD2  0100               	movlb	0	; () banked
 18424  004FD4  C104  F0B0         	movff	_rwtimeout,?_readRegister+1
 18425  004FD8  6BB1               	clrf	(?_readRegister+2)& (0+255),b
 18426  004FDA  0EBC               	movlw	low printGUID@value
 18427  004FDC  6FB2               	movwf	(?_readRegister+3)& (0+255),b
 18428  004FDE  51B8               	movf	printGUID@nodeid& (0+255),w,b
 18429  004FE0  EC10  F02A         	call	_readRegister
 18430  004FE4  0900               	iorlw	0
 18431  004FE6  E029               	bz	l18032
 18432                           
 18433                           ;main.c: 3194: itoa(buf, value, 16);
 18434  004FE8  0100               	movlb	0	; () banked
 18435  004FEA  0E00               	movlw	high printGUID@buf
 18436  004FEC  6F6A               	movwf	(?_itoa+1)& (0+255),b
 18437  004FEE  0EB9               	movlw	low printGUID@buf
 18438  004FF0  6F69               	movwf	?_itoa& (0+255),b
 18439  004FF2  C0BC  F06B         	movff	printGUID@value,?_itoa+2
 18440  004FF6  6B6C               	clrf	(?_itoa+3)& (0+255),b
 18441  004FF8  6B6E               	clrf	(?_itoa+5)& (0+255),b
 18442  004FFA  0E10               	movlw	16
 18443  004FFC  6F6D               	movwf	(?_itoa+4)& (0+255),b
 18444  004FFE  ECA9  F034         	call	_itoa	;wreg free
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;main.c: 3195: if (1 == strlen(buf)) {
 18448  005002  0E00               	movlw	high printGUID@buf
 18449  005004  6E20               	movwf	?_strlen+1,c
 18450  005006  0EB9               	movlw	low printGUID@buf
 18451  005008  6E1F               	movwf	?_strlen,c
 18452  00500A  EC35  F034         	call	_strlen	;wreg free
 18453  00500E  041F               	decf	?_strlen,w,c
 18454  005010  1020               	iorwf	?_strlen+1,w,c
 18455  005012  E10F               	bnz	l18030
 18456                           
 18457                           ;main.c: 3196: strcat(wrkbuf, "0");
 18458  005014  0101               	movlb	1	; () banked
 18459  005016  0E01               	movlw	high _wrkbuf
 18460  005018  6E20               	movwf	?_strcat+1,c
 18461  00501A  0E55               	movlw	low _wrkbuf
 18462  00501C  6E1F               	movwf	?_strcat,c
 18463  00501E  0E7F               	movlw	high STR_290
 18464  005020  6E22               	movwf	?_strcat+3,c
 18465  005022  0EF8               	movlw	low STR_290
 18466  005024  6E21               	movwf	?_strcat+2,c
 18467  005026  ECB4  F032         	call	_strcat	;wreg free
 18468                           
 18469                           ;main.c: 3197: strcat(wrkbuf, buf);
 18470  00502A  D833               	call	PL96	;call to abstracted procedure
 18471  00502C  ECB4  F032         	call	_strcat	;wreg free
 18472                           
 18473                           ;main.c: 3198: } else {
 18474  005030  D00F               	goto	l18034
 18475  005032                     l18030:
 18476                           
 18477                           ;main.c: 3199: strcat(wrkbuf, buf);
 18478  005032  D82F               	call	PL96	;call to abstracted procedure
 18479  005034  ECB4  F032         	call	_strcat	;wreg free
 18480  005038  D00B               	goto	l18034
 18481  00503A                     l18032:
 18482                           
 18483                           ;main.c: 3203: strcat(wrkbuf, "--");
 18484  00503A  0101               	movlb	1	; () banked
 18485  00503C  0E01               	movlw	high _wrkbuf
 18486  00503E  6E20               	movwf	?_strcat+1,c
 18487  005040  0E55               	movlw	low _wrkbuf
 18488  005042  6E1F               	movwf	?_strcat,c
 18489  005044  0E7F               	movlw	high STR_291
 18490  005046  6E22               	movwf	?_strcat+3,c
 18491  005048  0EE4               	movlw	low STR_291
 18492  00504A  6E21               	movwf	?_strcat+2,c
 18493  00504C  ECB4  F032         	call	_strcat	;wreg free
 18494  005050                     l18034:
 18495                           
 18496                           ;main.c: 3204: }
 18497                           ;main.c: 3206: if (i < 15) {
 18498  005050  0E0F               	movlw	15
 18499  005052  0100               	movlb	0	; () banked
 18500  005054  61BD               	cpfslt	printGUID@i& (0+255),b
 18501  005056  D00B               	goto	l18038
 18502                           
 18503                           ; BSR set to: 0
 18504                           ;main.c: 3207: strcat(wrkbuf, ":");
 18505  005058  0101               	movlb	1	; () banked
 18506  00505A  0E01               	movlw	high _wrkbuf
 18507  00505C  6E20               	movwf	?_strcat+1,c
 18508  00505E  0E55               	movlw	low _wrkbuf
 18509  005060  6E1F               	movwf	?_strcat,c
 18510  005062  0E7F               	movlw	high STR_292
 18511  005064  6E22               	movwf	?_strcat+3,c
 18512  005066  0EFA               	movlw	low STR_292
 18513  005068  6E21               	movwf	?_strcat+2,c
 18514  00506A  ECB4  F032         	call	_strcat	;wreg free
 18515  00506E                     l18038:
 18516  00506E  0100               	movlb	0	; () banked
 18517  005070  2BBD               	incf	printGUID@i& (0+255),f,b
 18518                           
 18519                           ; BSR set to: 0
 18520  005072  0E0F               	movlw	15
 18521  005074  65BD               	cpfsgt	printGUID@i& (0+255),b
 18522  005076  D7AA               	goto	l18022
 18523                           
 18524                           ; BSR set to: 0
 18525                           ;main.c: 3208: }
 18526                           ;main.c: 3210: }
 18527                           ;main.c: 3212: putsUSART(wrkbuf);
 18528  005078  0101               	movlb	1	; () banked
 18529  00507A  0E01               	movlw	high _wrkbuf
 18530  00507C  6E21               	movwf	?_putsUSART+1,c
 18531  00507E  0E55               	movlw	low _wrkbuf
 18532  005080  6E20               	movwf	?_putsUSART,c
 18533  005082  ECDF  F032         	call	_putsUSART	;wreg free
 18534                           
 18535                           ;main.c: 3213: putsUSART((char *) "\r\n");
 18536  005086  0E72               	movlw	high (STR_241+51)
 18537  005088  6E21               	movwf	?_putsUSART+1,c
 18538  00508A  0EDA               	movlw	low (STR_241+51)
 18539  00508C  6E20               	movwf	?_putsUSART,c
 18540  00508E  EFDF  F032         	goto	_putsUSART	;wreg free
 18541  005092                     __end_of_printGUID:
 18542                           	opt stack 0
 18543  005092                     PL96:
 18544                           	opt stack 21
 18545  005092  0E01               	movlw	high _wrkbuf
 18546  005094  6E20               	movwf	?_strcat+1,c
 18547  005096  0E55               	movlw	low _wrkbuf
 18548  005098  6E1F               	movwf	?_strcat,c
 18549  00509A  0100               	movlb	0	; () banked
 18550  00509C  0E00               	movlw	high printGUID@buf
 18551  00509E  6E22               	movwf	?_strcat+3,c
 18552  0050A0  0EB9               	movlw	low printGUID@buf
 18553  0050A2  6E21               	movwf	?_strcat+2,c
 18554  0050A4  0012               	return	
 18555  0050A6                     __end_ofPL96:
 18556                           	opt stack 0
 18557                           tblptru	equ	0xFF8
 18558                           tblptrh	equ	0xFF7
 18559                           tblptrl	equ	0xFF6
 18560                           tablat	equ	0xFF5
 18561                           prodh	equ	0xFF4
 18562                           prodl	equ	0xFF3
 18563                           intcon	equ	0xFF2
 18564                           indf0	equ	0xFEF
 18565                           postinc0	equ	0xFEE
 18566                           fsr0h	equ	0xFEA
 18567                           fsr0l	equ	0xFE9
 18568                           wreg	equ	0xFE8
 18569                           indf1	equ	0xFE7
 18570                           postinc1	equ	0xFE6
 18571                           postdec1	equ	0xFE5
 18572                           fsr1h	equ	0xFE2
 18573                           fsr1l	equ	0xFE1
 18574                           indf2	equ	0xFDF
 18575                           postinc2	equ	0xFDE
 18576                           postdec2	equ	0xFDD
 18577                           plusw2	equ	0xFDB
 18578                           fsr2h	equ	0xFDA
 18579                           fsr2l	equ	0xFD9
 18580                           status	equ	0xFD8
 18581                           
 18582 ;; *************** function _printNodeFirmwareVersion *****************
 18583 ;; Defined at:
 18584 ;;		line 3253 in file "main.c"
 18585 ;; Parameters:    Size  Location     Type
 18586 ;;  nodeid          1    wreg     unsigned char 
 18587 ;; Auto vars:     Size  Location     Type
 18588 ;;  nodeid          1   88[BANK0 ] unsigned char 
 18589 ;;  buf             3   89[BANK0 ] unsigned char [3]
 18590 ;;  i               1   93[BANK0 ] unsigned char 
 18591 ;;  value           1   92[BANK0 ] unsigned char 
 18592 ;; Return value:  Size  Location     Type
 18593 ;;		None               void
 18594 ;; Registers used:
 18595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18596 ;; Tracked objects:
 18597 ;;		On entry : D/2
 18598 ;;		On exit  : 0/0
 18599 ;;		Unchanged: 0/0
 18600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18601 ;;      Params:         0       0       0       0       0       0       0
 18602 ;;      Locals:         0       6       0       0       0       0       0
 18603 ;;      Temps:          0       0       0       0       0       0       0
 18604 ;;      Totals:         0       6       0       0       0       0       0
 18605 ;;Total ram usage:        6 bytes
 18606 ;; Hardware stack levels used:    1
 18607 ;; Hardware stack levels required when called:    8
 18608 ;; This function calls:
 18609 ;;		_putsUSART
 18610 ;;		_memset
 18611 ;;		_itoa
 18612 ;;		_readRegister
 18613 ;;		_strcat
 18614 ;; This function is called by:
 18615 ;;		_doModeVerbose
 18616 ;;		_findNodes
 18617 ;; This function uses a non-reentrant model
 18618 ;;
 18619                           
 18620                           	psect	text31
 18621  0054F2                     __ptext31:
 18622                           	opt stack 0
 18623  0054F2                     _printNodeFirmwareVersion:
 18624                           	opt stack 21
 18625                           
 18626                           ;incstack = 0
 18627                           ;incstack = 0
 18628                           ;printNodeFirmwareVersion@nodeid stored from wreg
 18629  0054F2  CFE8 F0B8          	movff	wreg,printNodeFirmwareVersion@nodeid
 18630                           
 18631                           ;main.c: 3254: uint8_t i;
 18632                           ;main.c: 3255: uint8_t value;
 18633                           ;main.c: 3256: char buf[3];
 18634                           ;main.c: 3258: memset( wrkbuf, 0, sizeof(wrkbuf) );
 18635  0054F6  0101               	movlb	1	; () banked
 18636  0054F8  0E01               	movlw	high _wrkbuf
 18637  0054FA  6E20               	movwf	?_memset+1,c
 18638  0054FC  0E55               	movlw	low _wrkbuf
 18639  0054FE  ECE7  F02E         	call	PL30	;call to abstracted procedure
 18640  005502  EC0E  F035         	call	_memset	;wreg free
 18641                           
 18642                           ;main.c: 3259: putsUSART((char *) "Firmware version = ");
 18643  005506  0E7D               	movlw	high STR_296
 18644  005508  6E21               	movwf	?_putsUSART+1,c
 18645  00550A  0E49               	movlw	low STR_296
 18646  00550C  6E20               	movwf	?_putsUSART,c
 18647  00550E  ECDF  F032         	call	_putsUSART	;wreg free
 18648                           
 18649                           ;main.c: 3261: for (i = 0; i < 3; i++) {
 18650  005512  0100               	movlb	0	; () banked
 18651  005514  6BBD               	clrf	printNodeFirmwareVersion@i& (0+255),b
 18652  005516                     l17994:
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;main.c: 3262: if (readRegister(nodeid,
 18656                           ;main.c: 3263: 0x94 + i,
 18657                           ;main.c: 3264: rwtimeout,
 18658                           ;main.c: 3265: &value)) {
 18659  005516  51BD               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 18660  005518  0F94               	addlw	148
 18661  00551A  6FAF               	movwf	?_readRegister& (0+255),b
 18662  00551C  0100               	movlb	0	; () banked
 18663  00551E  C104  F0B0         	movff	_rwtimeout,?_readRegister+1
 18664  005522  6BB1               	clrf	(?_readRegister+2)& (0+255),b
 18665  005524  0EBC               	movlw	low printNodeFirmwareVersion@value
 18666  005526  6FB2               	movwf	(?_readRegister+3)& (0+255),b
 18667  005528  51B8               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 18668  00552A  EC10  F02A         	call	_readRegister
 18669  00552E  0900               	iorlw	0
 18670  005530  E019               	bz	l18000
 18671                           
 18672                           ;main.c: 3266: itoa(buf, value, 16);
 18673  005532  0100               	movlb	0	; () banked
 18674  005534  0E00               	movlw	high printNodeFirmwareVersion@buf
 18675  005536  6F6A               	movwf	(?_itoa+1)& (0+255),b
 18676  005538  0EB9               	movlw	low printNodeFirmwareVersion@buf
 18677  00553A  6F69               	movwf	?_itoa& (0+255),b
 18678  00553C  C0BC  F06B         	movff	printNodeFirmwareVersion@value,?_itoa+2
 18679  005540  6B6C               	clrf	(?_itoa+3)& (0+255),b
 18680  005542  6B6E               	clrf	(?_itoa+5)& (0+255),b
 18681  005544  0E10               	movlw	16
 18682  005546  6F6D               	movwf	(?_itoa+4)& (0+255),b
 18683  005548  ECA9  F034         	call	_itoa	;wreg free
 18684                           
 18685                           ; BSR set to: 0
 18686                           ;main.c: 3267: strcat(wrkbuf, buf);
 18687  00554C  0E01               	movlw	high _wrkbuf
 18688  00554E  6E20               	movwf	?_strcat+1,c
 18689  005550  0E55               	movlw	low _wrkbuf
 18690  005552  6E1F               	movwf	?_strcat,c
 18691  005554  0100               	movlb	0	; () banked
 18692  005556  0E00               	movlw	high printNodeFirmwareVersion@buf
 18693  005558  6E22               	movwf	?_strcat+3,c
 18694  00555A  0EB9               	movlw	low printNodeFirmwareVersion@buf
 18695  00555C  6E21               	movwf	?_strcat+2,c
 18696  00555E  ECB4  F032         	call	_strcat	;wreg free
 18697                           
 18698                           ;main.c: 3268: }
 18699  005562  D00B               	goto	l18002
 18700  005564                     l18000:
 18701                           
 18702                           ;main.c: 3269: else {
 18703                           ;main.c: 3270: strcat(wrkbuf, "?");
 18704  005564  0101               	movlb	1	; () banked
 18705  005566  0E01               	movlw	high _wrkbuf
 18706  005568  6E20               	movwf	?_strcat+1,c
 18707  00556A  0E55               	movlw	low _wrkbuf
 18708  00556C  6E1F               	movwf	?_strcat,c
 18709  00556E  0E7F               	movlw	high STR_169
 18710  005570  6E22               	movwf	?_strcat+3,c
 18711  005572  0EFC               	movlw	low STR_169
 18712  005574  6E21               	movwf	?_strcat+2,c
 18713  005576  ECB4  F032         	call	_strcat	;wreg free
 18714  00557A                     l18002:
 18715                           
 18716                           ;main.c: 3271: }
 18717                           ;main.c: 3273: if (i < 2) {
 18718  00557A  0E02               	movlw	2
 18719  00557C  0100               	movlb	0	; () banked
 18720  00557E  61BD               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 18721  005580  D00B               	goto	l18006
 18722                           
 18723                           ; BSR set to: 0
 18724                           ;main.c: 3274: strcat(wrkbuf, ".");
 18725  005582  0101               	movlb	1	; () banked
 18726  005584  0E01               	movlw	high _wrkbuf
 18727  005586  6E20               	movwf	?_strcat+1,c
 18728  005588  0E55               	movlw	low _wrkbuf
 18729  00558A  6E1F               	movwf	?_strcat,c
 18730  00558C  0E7F               	movlw	high STR_298
 18731  00558E  6E22               	movwf	?_strcat+3,c
 18732  005590  0EF6               	movlw	low STR_298
 18733  005592  6E21               	movwf	?_strcat+2,c
 18734  005594  ECB4  F032         	call	_strcat	;wreg free
 18735  005598                     l18006:
 18736  005598  0100               	movlb	0	; () banked
 18737  00559A  2BBD               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 18738                           
 18739                           ; BSR set to: 0
 18740  00559C  0E02               	movlw	2
 18741  00559E  65BD               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 18742  0055A0  D7BA               	goto	l17994
 18743                           
 18744                           ; BSR set to: 0
 18745                           ;main.c: 3275: }
 18746                           ;main.c: 3277: }
 18747                           ;main.c: 3279: putsUSART(wrkbuf);
 18748  0055A2  0101               	movlb	1	; () banked
 18749  0055A4  0E01               	movlw	high _wrkbuf
 18750  0055A6  6E21               	movwf	?_putsUSART+1,c
 18751  0055A8  0E55               	movlw	low _wrkbuf
 18752  0055AA  6E20               	movwf	?_putsUSART,c
 18753  0055AC  ECDF  F032         	call	_putsUSART	;wreg free
 18754                           
 18755                           ;main.c: 3280: putsUSART((char *) "\r\n");
 18756  0055B0  0E72               	movlw	high (STR_241+51)
 18757  0055B2  6E21               	movwf	?_putsUSART+1,c
 18758  0055B4  0EDA               	movlw	low (STR_241+51)
 18759  0055B6  6E20               	movwf	?_putsUSART,c
 18760  0055B8  EFDF  F032         	goto	_putsUSART	;wreg free
 18761  0055BC                     __end_of_printNodeFirmwareVersion:
 18762                           	opt stack 0
 18763                           tblptru	equ	0xFF8
 18764                           tblptrh	equ	0xFF7
 18765                           tblptrl	equ	0xFF6
 18766                           tablat	equ	0xFF5
 18767                           prodh	equ	0xFF4
 18768                           prodl	equ	0xFF3
 18769                           intcon	equ	0xFF2
 18770                           indf0	equ	0xFEF
 18771                           postinc0	equ	0xFEE
 18772                           fsr0h	equ	0xFEA
 18773                           fsr0l	equ	0xFE9
 18774                           wreg	equ	0xFE8
 18775                           indf1	equ	0xFE7
 18776                           postinc1	equ	0xFE6
 18777                           postdec1	equ	0xFE5
 18778                           fsr1h	equ	0xFE2
 18779                           fsr1l	equ	0xFE1
 18780                           indf2	equ	0xFDF
 18781                           postinc2	equ	0xFDE
 18782                           postdec2	equ	0xFDD
 18783                           plusw2	equ	0xFDB
 18784                           fsr2h	equ	0xFDA
 18785                           fsr2l	equ	0xFD9
 18786                           status	equ	0xFD8
 18787                           
 18788 ;; *************** function _strcat *****************
 18789 ;; Defined at:
 18790 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/strcat.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;  to              2   30[COMRAM] PTR unsigned char 
 18793 ;;		 -> wrkbuf(80), 
 18794 ;;  from            2   32[COMRAM] PTR const unsigned char 
 18795 ;;		 -> STR_298(2), STR_297(2), printNodeFirmwareVersion@buf(3), STR_292(2), 
 18796 ;;		 -> STR_291(3), STR_290(2), printGUID@buf(3), 
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;  cp              2   34[COMRAM] PTR unsigned char 
 18799 ;;		 -> wrkbuf(80), 
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  2   30[COMRAM] PTR unsigned char 
 18802 ;; Registers used:
 18803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18804 ;; Tracked objects:
 18805 ;;		On entry : E/1
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18809 ;;      Params:         4       0       0       0       0       0       0
 18810 ;;      Locals:         2       0       0       0       0       0       0
 18811 ;;      Temps:          0       0       0       0       0       0       0
 18812 ;;      Totals:         6       0       0       0       0       0       0
 18813 ;;Total ram usage:        6 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    3
 18816 ;; This function calls:
 18817 ;;		Nothing
 18818 ;; This function is called by:
 18819 ;;		_printGUID
 18820 ;;		_printNodeFirmwareVersion
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           	psect	text32
 18825  006568                     __ptext32:
 18826                           	opt stack 0
 18827  006568                     _strcat:
 18828                           	opt stack 25
 18829                           
 18830                           ;incstack = 0
 18831                           ;incstack = 0
 18832  006568  C01F  F023         	movff	strcat@to,strcat@cp
 18833  00656C  C020  F024         	movff	strcat@to+1,strcat@cp+1
 18834  006570  D002               	goto	l18750
 18835  006572                     l18748:
 18836  006572  4A23               	infsnz	strcat@cp,f,c
 18837  006574  2A24               	incf	strcat@cp+1,f,c
 18838  006576                     l18750:
 18839  006576  C023  FFD9         	movff	strcat@cp,fsr2l
 18840  00657A  C024  FFDA         	movff	strcat@cp+1,fsr2h
 18841  00657E  50DF               	movf	indf2,w,c
 18842  006580  E005               	bz	l18754
 18843  006582  D7F7               	goto	l18748
 18844  006584                     l18752:
 18845  006584  4A23               	infsnz	strcat@cp,f,c
 18846  006586  2A24               	incf	strcat@cp+1,f,c
 18847  006588  4A21               	infsnz	strcat@from,f,c
 18848  00658A  2A22               	incf	strcat@from+1,f,c
 18849  00658C                     l18754:
 18850  00658C  C021  FFF6         	movff	strcat@from,tblptrl
 18851  006590  C022  FFF7         	movff	strcat@from+1,tblptrh
 18852  006594  6AF8               	clrf	tblptru,c
 18853  006596  C023  FFD9         	movff	strcat@cp,fsr2l
 18854  00659A  C024  FFDA         	movff	strcat@cp+1,fsr2h
 18855  00659E  0E05               	movlw	(high __ramtop+-1)
 18856  0065A0  64F7               	cpfsgt	tblptrh,c
 18857  0065A2  D003               	bra	u24907
 18858  0065A4  0008               	tblrd		*
 18859  0065A6  50F5               	movf	tablat,w,c
 18860  0065A8  D005               	bra	u24900
 18861  0065AA                     u24907:
 18862  0065AA  CFF6 FFE9          	movff	tblptrl,fsr0l
 18863  0065AE  CFF7 FFEA          	movff	tblptrh,fsr0h
 18864  0065B2  50EF               	movf	indf0,w,c
 18865  0065B4                     u24900:
 18866  0065B4  6EDF               	movwf	indf2,c
 18867  0065B6  50DF               	movf	indf2,w,c
 18868  0065B8  B4D8               	btfsc	status,2,c
 18869  0065BA  0012               	return	
 18870  0065BC  D7E3               	goto	l18752
 18871  0065BE                     __end_of_strcat:
 18872                           	opt stack 0
 18873                           tblptru	equ	0xFF8
 18874                           tblptrh	equ	0xFF7
 18875                           tblptrl	equ	0xFF6
 18876                           tablat	equ	0xFF5
 18877                           prodh	equ	0xFF4
 18878                           prodl	equ	0xFF3
 18879                           intcon	equ	0xFF2
 18880                           indf0	equ	0xFEF
 18881                           postinc0	equ	0xFEE
 18882                           fsr0h	equ	0xFEA
 18883                           fsr0l	equ	0xFE9
 18884                           wreg	equ	0xFE8
 18885                           indf1	equ	0xFE7
 18886                           postinc1	equ	0xFE6
 18887                           postdec1	equ	0xFE5
 18888                           fsr1h	equ	0xFE2
 18889                           fsr1l	equ	0xFE1
 18890                           indf2	equ	0xFDF
 18891                           postinc2	equ	0xFDE
 18892                           postdec2	equ	0xFDD
 18893                           plusw2	equ	0xFDB
 18894                           fsr2h	equ	0xFDA
 18895                           fsr2l	equ	0xFD9
 18896                           status	equ	0xFD8
 18897                           
 18898 ;; *************** function _readRegister *****************
 18899 ;; Defined at:
 18900 ;;		line 2738 in file "main.c"
 18901 ;; Parameters:    Size  Location     Type
 18902 ;;  nodeid          1    wreg     unsigned char 
 18903 ;;  reg             1   79[BANK0 ] unsigned char 
 18904 ;;  timeout         2   80[BANK0 ] unsigned short 
 18905 ;;  value           1   82[BANK0 ] PTR unsigned char 
 18906 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 18907 ;; Auto vars:     Size  Location     Type
 18908 ;;  nodeid          1   87[BANK0 ] unsigned char 
 18909 ;; Return value:  Size  Location     Type
 18910 ;;                  1    wreg      enum E15660
 18911 ;; Registers used:
 18912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18913 ;; Tracked objects:
 18914 ;;		On entry : F/0
 18915 ;;		On exit  : E/0
 18916 ;;		Unchanged: 0/0
 18917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18918 ;;      Params:         0       4       0       0       0       0       0
 18919 ;;      Locals:         0       1       0       0       0       0       0
 18920 ;;      Temps:          0       4       0       0       0       0       0
 18921 ;;      Totals:         0       9       0       0       0       0       0
 18922 ;;Total ram usage:        9 bytes
 18923 ;; Hardware stack levels used:    1
 18924 ;; Hardware stack levels required when called:    7
 18925 ;; This function calls:
 18926 ;;		_checkCANBusState
 18927 ;;		_sendVSCPFrame
 18928 ;;		_getVSCPFrame
 18929 ;; This function is called by:
 18930 ;;		_findNodes
 18931 ;;		_printGUID
 18932 ;;		_printMDF
 18933 ;;		_printNodeFirmwareVersion
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           	psect	text33
 18938  005420                     __ptext33:
 18939                           	opt stack 0
 18940  005420                     _readRegister:
 18941                           	opt stack 21
 18942                           
 18943                           ;incstack = 0
 18944                           ;incstack = 0
 18945                           ;readRegister@nodeid stored from wreg
 18946  005420  CFE8 F0B7          	movff	wreg,readRegister@nodeid
 18947                           
 18948                           ; BSR set to: 0
 18949                           ;main.c: 2739: vscpData[ 0 ] = nodeid;
 18950  005424  C0B7  F1A5         	movff	readRegister@nodeid,_vscpData
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;main.c: 2740: vscpData[ 1 ] = reg;
 18954  005428  C0AF  F1A6         	movff	readRegister@reg,_vscpData+1
 18955                           
 18956                           ; BSR set to: 0
 18957                           ;main.c: 2742: if (sendVSCPFrame(0,
 18958                           ;main.c: 2743: 9,
 18959                           ;main.c: 2744: 0,
 18960                           ;main.c: 2745: 0,
 18961                           ;main.c: 2746: 2,
 18962                           ;main.c: 2747: vscpData)) {
 18963  00542C  6B90               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 18964  00542E  6B8F               	clrf	?_sendVSCPFrame& (0+255),b
 18965  005430  0E09               	movlw	9
 18966  005432  6F91               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 18967  005434  6B92               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 18968  005436  6B93               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 18969  005438  0E02               	movlw	2
 18970  00543A  6F94               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 18971  00543C  0E01               	movlw	high _vscpData
 18972  00543E  0100               	movlb	0	; () banked
 18973  005440  6F96               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 18974  005442  0EA5               	movlw	low _vscpData
 18975  005444  6F95               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 18976  005446  EC06  F02C         	call	_sendVSCPFrame	;wreg free
 18977  00544A  0900               	iorlw	0
 18978  00544C  E050               	bz	l18742
 18979                           
 18980                           ; BSR set to: 0
 18981                           ;main.c: 2749: timekeeper = 0;
 18982  00544E  6BDE               	clrf	_timekeeper& (0+255),b	;volatile
 18983  005450  6BDF               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 18984  005452  6BE0               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 18985  005454  6BE1               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 18986                           
 18987                           ;main.c: 2750: while (timekeeper < timeout) {
 18988  005456  D03B               	goto	l18740
 18989  005458                     l1216:
 18990                           
 18991                           ; BSR set to: 0
 18992  005458  0004               	clrwdt		;# 
 18993                           
 18994                           ;main.c: 2753: checkCANBusState();
 18995  00545A  EC38  F035         	call	_checkCANBusState	;wreg free
 18996                           
 18997                           ;main.c: 2755: if (getVSCPFrame(&vscpClass,
 18998                           ;main.c: 2756: &vscpType,
 18999                           ;main.c: 2757: &vscpNodeId,
 19000                           ;main.c: 2758: &vscpPriority,
 19001                           ;main.c: 2759: &vscpSize,
 19002                           ;main.c: 2760: vscpData)) {
 19003  00545E  0E01               	movlw	high _vscpClass
 19004  005460  0100               	movlb	0	; () banked
 19005  005462  6F6D               	movwf	(?_getVSCPFrame+1)& (0+255),b
 19006  005464  0EAD               	movlw	low _vscpClass
 19007  005466  6F6C               	movwf	?_getVSCPFrame& (0+255),b
 19008  005468  0E01               	movlw	high _vscpType
 19009  00546A  6F6F               	movwf	(?_getVSCPFrame+3)& (0+255),b
 19010  00546C  0EB2               	movlw	low _vscpType
 19011  00546E  6F6E               	movwf	(?_getVSCPFrame+2)& (0+255),b
 19012  005470  0E01               	movlw	high _vscpNodeId
 19013  005472  6F71               	movwf	(?_getVSCPFrame+5)& (0+255),b
 19014  005474  0EAF               	movlw	low _vscpNodeId
 19015  005476  6F70               	movwf	(?_getVSCPFrame+4)& (0+255),b
 19016  005478  0E01               	movlw	high _vscpPriority
 19017  00547A  6F73               	movwf	(?_getVSCPFrame+7)& (0+255),b
 19018  00547C  0EB0               	movlw	low _vscpPriority
 19019  00547E  6F72               	movwf	(?_getVSCPFrame+6)& (0+255),b
 19020  005480  0E01               	movlw	high _vscpSize
 19021  005482  6F75               	movwf	(?_getVSCPFrame+9)& (0+255),b
 19022  005484  0EB1               	movlw	low _vscpSize
 19023  005486  6F74               	movwf	(?_getVSCPFrame+8)& (0+255),b
 19024  005488  0E01               	movlw	high _vscpData
 19025  00548A  6F77               	movwf	(?_getVSCPFrame+11)& (0+255),b
 19026  00548C  0EA5               	movlw	low _vscpData
 19027  00548E  6F76               	movwf	(?_getVSCPFrame+10)& (0+255),b
 19028  005490  EC81  F02F         	call	_getVSCPFrame	;wreg free
 19029  005494  0900               	iorlw	0
 19030  005496  E01B               	bz	l18740
 19031                           
 19032                           ; BSR set to: 0
 19033                           ;main.c: 2761: if ((nodeid == vscpNodeId) &&
 19034                           ;main.c: 2762: (0 == vscpClass) &&
 19035                           ;main.c: 2763: (10 == vscpType) &&
 19036                           ;main.c: 2764: (2 == vscpSize) &&
 19037                           ;main.c: 2765: (reg == vscpData[ 0 ])) {
 19038  005498  0101               	movlb	1	; () banked
 19039  00549A  51AF               	movf	_vscpNodeId& (0+255),w,b
 19040  00549C  0100               	movlb	0	; () banked
 19041  00549E  63B7               	cpfseq	readRegister@nodeid& (0+255),b
 19042  0054A0  D016               	goto	l18740
 19043                           
 19044                           ; BSR set to: 0
 19045  0054A2  0101               	movlb	1	; () banked
 19046  0054A4  51AE               	movf	(_vscpClass+1)& (0+255),w,b
 19047  0054A6  11AD               	iorwf	_vscpClass& (0+255),w,b
 19048  0054A8  E112               	bnz	l18740
 19049                           
 19050                           ; BSR set to: 1
 19051  0054AA  51B2               	movf	_vscpType& (0+255),w,b
 19052  0054AC  0A0A               	xorlw	10
 19053  0054AE  E10F               	bnz	l18740
 19054                           
 19055                           ; BSR set to: 1
 19056  0054B0  51B1               	movf	_vscpSize& (0+255),w,b
 19057  0054B2  0A02               	xorlw	2
 19058  0054B4  E10C               	bnz	l18740
 19059                           
 19060                           ; BSR set to: 1
 19061  0054B6  51A5               	movf	_vscpData& (0+255),w,b
 19062  0054B8  0100               	movlb	0	; () banked
 19063  0054BA  63AF               	cpfseq	readRegister@reg& (0+255),b
 19064  0054BC  D008               	goto	l18740
 19065                           
 19066                           ; BSR set to: 0
 19067                           ;main.c: 2766: *value = vscpData[ 1 ];
 19068  0054BE  51B2               	movf	readRegister@value& (0+255),w,b
 19069  0054C0  6ED9               	movwf	fsr2l,c
 19070  0054C2  6ADA               	clrf	fsr2h,c
 19071  0054C4  0101               	movlb	1	; () banked
 19072  0054C6  C1A6  FFDF         	movff	_vscpData+1,indf2
 19073                           
 19074                           ; BSR set to: 1
 19075                           ;main.c: 2767: return 1;
 19076  0054CA  0E01               	movlw	1
 19077  0054CC  D011               	goto	l1219
 19078  0054CE                     l18740:
 19079  0054CE  0100               	movlb	0	; () banked
 19080  0054D0  51B0               	movf	readRegister@timeout& (0+255),w,b
 19081  0054D2  6FB3               	movwf	??_readRegister& (0+255),b
 19082  0054D4  51B1               	movf	(readRegister@timeout+1)& (0+255),w,b
 19083  0054D6  6FB4               	movwf	(??_readRegister+1)& (0+255),b
 19084  0054D8  6BB5               	clrf	(??_readRegister+2)& (0+255),b
 19085  0054DA  6BB6               	clrf	(??_readRegister+3)& (0+255),b
 19086  0054DC  51B3               	movf	??_readRegister& (0+255),w,b
 19087  0054DE  5DDE               	subwf	_timekeeper& (0+255),w,b	;volatile
 19088  0054E0  51B4               	movf	(??_readRegister+1)& (0+255),w,b
 19089  0054E2  59DF               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 19090  0054E4  51B5               	movf	(??_readRegister+2)& (0+255),w,b
 19091  0054E6  59E0               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 19092  0054E8  51B6               	movf	(??_readRegister+3)& (0+255),w,b
 19093  0054EA  59E1               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 19094  0054EC  E3B5               	bnc	l1216
 19095  0054EE                     l18742:
 19096                           
 19097                           ; BSR set to: 0
 19098                           ;main.c: 2768: }
 19099                           ;main.c: 2769: }
 19100                           ;main.c: 2770: }
 19101                           ;main.c: 2771: }
 19102                           ;main.c: 2773: return 0;
 19103  0054EE  0E00               	movlw	0
 19104  0054F0                     l1219:
 19105  0054F0  0012               	return	
 19106  0054F2                     __end_of_readRegister:
 19107                           	opt stack 0
 19108                           tblptru	equ	0xFF8
 19109                           tblptrh	equ	0xFF7
 19110                           tblptrl	equ	0xFF6
 19111                           tablat	equ	0xFF5
 19112                           prodh	equ	0xFF4
 19113                           prodl	equ	0xFF3
 19114                           intcon	equ	0xFF2
 19115                           indf0	equ	0xFEF
 19116                           postinc0	equ	0xFEE
 19117                           fsr0h	equ	0xFEA
 19118                           fsr0l	equ	0xFE9
 19119                           wreg	equ	0xFE8
 19120                           indf1	equ	0xFE7
 19121                           postinc1	equ	0xFE6
 19122                           postdec1	equ	0xFE5
 19123                           fsr1h	equ	0xFE2
 19124                           fsr1l	equ	0xFE1
 19125                           indf2	equ	0xFDF
 19126                           postinc2	equ	0xFDE
 19127                           postdec2	equ	0xFDD
 19128                           plusw2	equ	0xFDB
 19129                           fsr2h	equ	0xFDA
 19130                           fsr2l	equ	0xFD9
 19131                           status	equ	0xFD8
 19132                           
 19133 ;; *************** function _sendVSCPFrame *****************
 19134 ;; Defined at:
 19135 ;;		line 3584 in file "main.c"
 19136 ;; Parameters:    Size  Location     Type
 19137 ;;  vscpclass       2   47[BANK0 ] unsigned short 
 19138 ;;  vscptype        1   49[BANK0 ] unsigned char 
 19139 ;;  nodeid          1   50[BANK0 ] unsigned char 
 19140 ;;  priority        1   51[BANK0 ] unsigned char 
 19141 ;;  size            1   52[BANK0 ] unsigned char 
 19142 ;;  pData           2   53[BANK0 ] PTR unsigned char 
 19143 ;;		 -> vscpData(8), 
 19144 ;; Auto vars:     Size  Location     Type
 19145 ;;  id              4   75[BANK0 ] unsigned long 
 19146 ;; Return value:  Size  Location     Type
 19147 ;;                  1    wreg      unsigned char 
 19148 ;; Registers used:
 19149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19150 ;; Tracked objects:
 19151 ;;		On entry : F/0
 19152 ;;		On exit  : F/0
 19153 ;;		Unchanged: 0/0
 19154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19155 ;;      Params:         0       8       0       0       0       0       0
 19156 ;;      Locals:         0       4       0       0       0       0       0
 19157 ;;      Temps:          0      20       0       0       0       0       0
 19158 ;;      Totals:         0      32       0       0       0       0       0
 19159 ;;Total ram usage:       32 bytes
 19160 ;; Hardware stack levels used:    1
 19161 ;; Hardware stack levels required when called:    6
 19162 ;; This function calls:
 19163 ;;		_sendCANFrame
 19164 ;; This function is called by:
 19165 ;;		_doModeVerbose
 19166 ;;		_readRegister
 19167 ;;		_readRegisterExtended
 19168 ;;		_writeRegisterExtended
 19169 ;; This function uses a non-reentrant model
 19170 ;;
 19171                           
 19172                           	psect	text34
 19173  00580C                     __ptext34:
 19174                           	opt stack 0
 19175  00580C                     _sendVSCPFrame:
 19176                           	opt stack 21
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;main.c: 3585: uint32_t id = ((uint32_t) priority << 26) |
 19180                           ;main.c: 3586: ((uint32_t) vscpclass << 16) |
 19181                           ;main.c: 3587: ((uint32_t) vscptype << 8) |
 19182                           ;main.c: 3588: nodeid;
 19183                           
 19184                           ;incstack = 0
 19185                           ;incstack = 0
 19186  00580C  C091  F097         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 19187  005810  6B98               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 19188  005812  6B99               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 19189  005814  6B9A               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 19190  005816  C099  F09A         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 19191  00581A  C098  F099         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 19192  00581E  C097  F098         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 19193  005822  6B97               	clrf	??_sendVSCPFrame& (0+255),b
 19194  005824  518F               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 19195  005826  6F9B               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 19196  005828  5190               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 19197  00582A  6F9C               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 19198  00582C  6B9D               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 19199  00582E  6B9E               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 19200  005830  C09C  F09E         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 19201  005834  C09B  F09D         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 19202  005838  6B9C               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 19203  00583A  6B9B               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 19204  00583C  C093  F09F         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 19205  005840  6BA0               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 19206  005842  6BA1               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 19207  005844  6BA2               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 19208  005846  0E1A               	movlw	26
 19209  005848                     u22555:
 19210  005848  90D8               	bcf	status,0,c
 19211  00584A  379F               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 19212  00584C  37A0               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 19213  00584E  37A1               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 19214  005850  37A2               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 19215  005852  2EE8               	decfsz	wreg,f,c
 19216  005854  D7F9               	goto	u22555
 19217  005856  519B               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 19218  005858  119F               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 19219  00585A  6FA3               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 19220  00585C  519C               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 19221  00585E  11A0               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 19222  005860  6FA4               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 19223  005862  519D               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 19224  005864  11A1               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 19225  005866  6FA5               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 19226  005868  519E               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 19227  00586A  11A2               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 19228  00586C  6FA6               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 19229  00586E  5197               	movf	??_sendVSCPFrame& (0+255),w,b
 19230  005870  11A3               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 19231  005872  6FA7               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 19232  005874  5198               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 19233  005876  11A4               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 19234  005878  6FA8               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 19235  00587A  5199               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 19236  00587C  11A5               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 19237  00587E  6FA9               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 19238  005880  519A               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 19239  005882  11A6               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 19240  005884  6FAA               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 19241  005886  5192               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 19242  005888  11A7               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 19243  00588A  6FAB               	movwf	sendVSCPFrame@id& (0+255),b
 19244  00588C  51A8               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 19245  00588E  6FAC               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 19246  005890  51A9               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 19247  005892  6FAD               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 19248  005894  51AA               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 19249  005896  6FAE               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;main.c: 3590: if (!sendCANFrame(id, size, pData)) {
 19253  005898  C0AB  F088         	movff	sendVSCPFrame@id,?_sendCANFrame
 19254  00589C  C0AC  F089         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 19255  0058A0  C0AD  F08A         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 19256  0058A4  C0AE  F08B         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 19257  0058A8  C094  F08C         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 19258  0058AC  C095  F08D         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 19259  0058B0  C096  F08E         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 19260  0058B4  EC8D  F034         	call	_sendCANFrame	;wreg free
 19261  0058B8  0900               	iorlw	0
 19262                           
 19263                           ; BSR set to: 0
 19264                           ;main.c: 3592: return 0;
 19265  0058BA  0E00               	movlw	0
 19266  0058BC  A4D8               	btfss	status,2,c
 19267                           
 19268                           ; BSR set to: 0
 19269                           ;main.c: 3593: }
 19270                           ;main.c: 3595: return 1;
 19271  0058BE  0E01               	movlw	1
 19272                           
 19273                           ; BSR set to: 0
 19274  0058C0  0012               	return	
 19275  0058C2                     __end_of_sendVSCPFrame:
 19276                           	opt stack 0
 19277                           tblptru	equ	0xFF8
 19278                           tblptrh	equ	0xFF7
 19279                           tblptrl	equ	0xFF6
 19280                           tablat	equ	0xFF5
 19281                           prodh	equ	0xFF4
 19282                           prodl	equ	0xFF3
 19283                           intcon	equ	0xFF2
 19284                           indf0	equ	0xFEF
 19285                           postinc0	equ	0xFEE
 19286                           fsr0h	equ	0xFEA
 19287                           fsr0l	equ	0xFE9
 19288                           wreg	equ	0xFE8
 19289                           indf1	equ	0xFE7
 19290                           postinc1	equ	0xFE6
 19291                           postdec1	equ	0xFE5
 19292                           fsr1h	equ	0xFE2
 19293                           fsr1l	equ	0xFE1
 19294                           indf2	equ	0xFDF
 19295                           postinc2	equ	0xFDE
 19296                           postdec2	equ	0xFDD
 19297                           plusw2	equ	0xFDB
 19298                           fsr2h	equ	0xFDA
 19299                           fsr2l	equ	0xFD9
 19300                           status	equ	0xFD8
 19301                           
 19302 ;; *************** function _sendCANFrame *****************
 19303 ;; Defined at:
 19304 ;;		line 3630 in file "main.c"
 19305 ;; Parameters:    Size  Location     Type
 19306 ;;  id              4   40[BANK0 ] unsigned long 
 19307 ;;  dlc             1   44[BANK0 ] unsigned char 
 19308 ;;  pdata           2   45[BANK0 ] PTR unsigned char 
 19309 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 19310 ;; Auto vars:     Size  Location     Type
 19311 ;;		None
 19312 ;; Return value:  Size  Location     Type
 19313 ;;                  1    wreg      unsigned char 
 19314 ;; Registers used:
 19315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19316 ;; Tracked objects:
 19317 ;;		On entry : F/0
 19318 ;;		On exit  : F/0
 19319 ;;		Unchanged: 0/0
 19320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19321 ;;      Params:         0       7       0       0       0       0       0
 19322 ;;      Locals:         0       0       0       0       0       0       0
 19323 ;;      Temps:          0       0       0       0       0       0       0
 19324 ;;      Totals:         0       7       0       0       0       0       0
 19325 ;;Total ram usage:        7 bytes
 19326 ;; Hardware stack levels used:    1
 19327 ;; Hardware stack levels required when called:    5
 19328 ;; This function calls:
 19329 ;;		_ECANSendMessage
 19330 ;; This function is called by:
 19331 ;;		_doModeSLCAN
 19332 ;;		_receiveVSCPModeCanalMsg
 19333 ;;		_sendVSCPFrame
 19334 ;; This function uses a non-reentrant model
 19335 ;;
 19336                           
 19337                           	psect	text35
 19338  00691A                     __ptext35:
 19339                           	opt stack 0
 19340  00691A                     _sendCANFrame:
 19341                           	opt stack 24
 19342                           
 19343                           ; BSR set to: 0
 19344                           ;main.c: 3631: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 19345                           
 19346                           ; BSR set to: 0
 19347                           ;incstack = 0
 19348                           ;incstack = 0
 19349  00691A  C088  F063         	movff	sendCANFrame@id,?_ECANSendMessage
 19350  00691E  C089  F064         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 19351  006922  C08A  F065         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 19352  006926  C08B  F066         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 19353  00692A  C08D  F067         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 19354  00692E  C08E  F068         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 19355  006932  C08C  F069         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 19356  006936  0E20               	movlw	32
 19357  006938  6F6A               	movwf	(?_ECANSendMessage+7)& (0+255),b
 19358  00693A  EC4B  F023         	call	_ECANSendMessage	;wreg free
 19359  00693E  0900               	iorlw	0
 19360  006940  E106               	bnz	l18584
 19361                           
 19362                           ; BSR set to: 0
 19363                           ;main.c: 3633: can_transmitOverruns++;
 19364  006942  2BCA               	incf	_can_transmitOverruns& (0+255),f,b
 19365  006944  0E00               	movlw	0
 19366  006946  23CB               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 19367  006948  23CC               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 19368  00694A  23CD               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 19369                           
 19370                           ; BSR set to: 0
 19371                           ;main.c: 3634: return 0;
 19372  00694C  D001               	goto	l1448
 19373  00694E                     l18584:
 19374                           
 19375                           ; BSR set to: 0
 19376                           ;main.c: 3635: }
 19377                           ;main.c: 3637: return 1;
 19378  00694E  0E01               	movlw	1
 19379  006950                     l1448:
 19380                           
 19381                           ; BSR set to: 0
 19382  006950  0012               	return	
 19383  006952                     __end_of_sendCANFrame:
 19384                           	opt stack 0
 19385                           tblptru	equ	0xFF8
 19386                           tblptrh	equ	0xFF7
 19387                           tblptrl	equ	0xFF6
 19388                           tablat	equ	0xFF5
 19389                           prodh	equ	0xFF4
 19390                           prodl	equ	0xFF3
 19391                           intcon	equ	0xFF2
 19392                           indf0	equ	0xFEF
 19393                           postinc0	equ	0xFEE
 19394                           fsr0h	equ	0xFEA
 19395                           fsr0l	equ	0xFE9
 19396                           wreg	equ	0xFE8
 19397                           indf1	equ	0xFE7
 19398                           postinc1	equ	0xFE6
 19399                           postdec1	equ	0xFE5
 19400                           fsr1h	equ	0xFE2
 19401                           fsr1l	equ	0xFE1
 19402                           indf2	equ	0xFDF
 19403                           postinc2	equ	0xFDE
 19404                           postdec2	equ	0xFDD
 19405                           plusw2	equ	0xFDB
 19406                           fsr2h	equ	0xFDA
 19407                           fsr2l	equ	0xFD9
 19408                           status	equ	0xFD8
 19409                           
 19410 ;; *************** function _ECANSendMessage *****************
 19411 ;; Defined at:
 19412 ;;		line 617 in file "ECAN.c"
 19413 ;; Parameters:    Size  Location     Type
 19414 ;;  id              4    3[BANK0 ] unsigned long 
 19415 ;;  data            2    7[BANK0 ] PTR unsigned char 
 19416 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 19417 ;;  dataLen         1    9[BANK0 ] unsigned char 
 19418 ;;  msgFlags        1   10[BANK0 ] enum E16306
 19419 ;; Auto vars:     Size  Location     Type
 19420 ;;  pb             18   12[BANK0 ] PTR unsigned char [9]
 19421 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19422 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19423 ;;		 -> B0CON(1), 
 19424 ;;  ptr             2   38[BANK0 ] PTR unsigned char 
 19425 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19426 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19427 ;;		 -> B0CON(1), 
 19428 ;;  tempPtr         2   34[BANK0 ] PTR unsigned char 
 19429 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 19430 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 19431 ;;		 -> B0CON(1), 
 19432 ;;  i               1   37[BANK0 ] unsigned char 
 19433 ;;  temp            1   36[BANK0 ] unsigned char 
 19434 ;;  tempBSEL0       1   33[BANK0 ] struct .
 19435 ;;  j               1   32[BANK0 ] unsigned char 
 19436 ;;  buffers         1   31[BANK0 ] unsigned char 
 19437 ;;  mode            1   30[BANK0 ] unsigned char 
 19438 ;; Return value:  Size  Location     Type
 19439 ;;                  1    wreg      enum E15660
 19440 ;; Registers used:
 19441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19442 ;; Tracked objects:
 19443 ;;		On entry : F/0
 19444 ;;		On exit  : F/0
 19445 ;;		Unchanged: 0/0
 19446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19447 ;;      Params:         0       8       0       0       0       0       0
 19448 ;;      Locals:         0      28       0       0       0       0       0
 19449 ;;      Temps:          0       1       0       0       0       0       0
 19450 ;;      Totals:         0      37       0       0       0       0       0
 19451 ;;Total ram usage:       37 bytes
 19452 ;; Hardware stack levels used:    1
 19453 ;; Hardware stack levels required when called:    4
 19454 ;; This function calls:
 19455 ;;		__CANIDToRegs
 19456 ;; This function is called by:
 19457 ;;		_sendCANFrame
 19458 ;; This function uses a non-reentrant model
 19459 ;;
 19460                           
 19461                           	psect	text36
 19462  004696                     __ptext36:
 19463                           	opt stack 0
 19464  004696                     _ECANSendMessage:
 19465                           	opt stack 24
 19466                           
 19467                           ; BSR set to: 0
 19468                           ;ECAN.c: 619: BYTE mode;
 19469                           ;ECAN.c: 620: BYTE buffers;
 19470                           ;ECAN.c: 628: BYTE i,j;
 19471                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 19472                           ;ECAN.c: 630: BYTE* pb[9];
 19473                           ;ECAN.c: 631: BYTE temp;
 19474                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 19475                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;incstack = 0
 19479                           ;incstack = 0
 19480  004696  0E0F               	movlw	15	;volatile
 19481  004698  0100               	movlb	0	; () banked
 19482  00469A  6F6D               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 19483  00469C  0E40               	movlw	64	;volatile
 19484  00469E  6F6C               	movwf	ECANSendMessage@pb& (0+255),b
 19485                           
 19486                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 19487  0046A0  0E0F               	movlw	15	;volatile
 19488  0046A2  6F6F               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 19489  0046A4  0E30               	movlw	48	;volatile
 19490  0046A6  6F6E               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 19491                           
 19492                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 19493  0046A8  0E0F               	movlw	15	;volatile
 19494  0046AA  6F71               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 19495  0046AC  0E20               	movlw	32	;volatile
 19496  0046AE  6F70               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 19497                           
 19498                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 19499  0046B0  0E0E               	movlw	14	;volatile
 19500  0046B2  6F73               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 19501  0046B4  0E20               	movlw	32	;volatile
 19502  0046B6  6F72               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 19503                           
 19504                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 19505  0046B8  0E0E               	movlw	14	;volatile
 19506  0046BA  6F75               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 19507  0046BC  0E30               	movlw	48	;volatile
 19508  0046BE  6F74               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 19509                           
 19510                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 19511  0046C0  0E0E               	movlw	14	;volatile
 19512  0046C2  6F77               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 19513  0046C4  0E40               	movlw	64	;volatile
 19514  0046C6  6F76               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 19515                           
 19516                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 19517  0046C8  0E0E               	movlw	14	;volatile
 19518  0046CA  6F79               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 19519  0046CC  0E50               	movlw	80	;volatile
 19520  0046CE  6F78               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 19521                           
 19522                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 19523  0046D0  0E0E               	movlw	14	;volatile
 19524  0046D2  6F7B               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 19525  0046D4  0E60               	movlw	96	;volatile
 19526  0046D6  6F7A               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 19527                           
 19528                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 19529  0046D8  0E0E               	movlw	14	;volatile
 19530  0046DA  6F7D               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 19531  0046DC  0E70               	movlw	112	;volatile
 19532  0046DE  6F7C               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 19533                           
 19534                           ; BSR set to: 0
 19535                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 19536  0046E0  5077               	movf	3959,w,c	;volatile
 19537  0046E2  0BC0               	andlw	192
 19538  0046E4  6F7E               	movwf	ECANSendMessage@mode& (0+255),b
 19539                           
 19540                           ; BSR set to: 0
 19541                           ;ECAN.c: 660: if ( mode == 0x00 )
 19542  0046E6  677E               	tstfsz	ECANSendMessage@mode& (0+255),b
 19543  0046E8  D002               	goto	l18764
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;ECAN.c: 661: buffers = 2;
 19547  0046EA  0E02               	movlw	2
 19548  0046EC  D001               	goto	L29
 19549  0046EE                     l18764:
 19550                           
 19551                           ; BSR set to: 0
 19552                           ;ECAN.c: 662: else
 19553                           ;ECAN.c: 663: buffers = 8;
 19554  0046EE  0E08               	movlw	8
 19555  0046F0                     L29:
 19556  0046F0  6F7F               	movwf	ECANSendMessage@buffers& (0+255),b
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 19560  0046F2  010D               	movlb	13	; () banked
 19561  0046F4  90D8               	bcf	status,0,c
 19562  0046F6  31F8               	rrcf	248,w,b	;volatile
 19563  0046F8  0100               	movlb	0	; () banked
 19564  0046FA  6F81               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 19568  0046FC  6B85               	clrf	ECANSendMessage@i& (0+255),b
 19569  0046FE  D07D               	goto	l18824
 19570  004700                     l18770:
 19571                           
 19572                           ; BSR set to: 0
 19573                           ;ECAN.c: 688: {
 19574                           ;ECAN.c: 693: ptr = pb[i];
 19575  004700  5185               	movf	ECANSendMessage@i& (0+255),w,b
 19576  004702  0D02               	mullw	2
 19577  004704  50F3               	movf	prodl,w,c
 19578  004706  0F6C               	addlw	low ECANSendMessage@pb
 19579  004708  6ED9               	movwf	fsr2l,c
 19580  00470A  6ADA               	clrf	fsr2h,c
 19581  00470C  CFDE F086          	movff	postinc2,ECANSendMessage@ptr
 19582  004710  CFDD F087          	movff	postdec2,ECANSendMessage@ptr+1
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;ECAN.c: 694: tempPtr = ptr;
 19586  004714  C086  F082         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 19587  004718  C087  F083         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 19588                           
 19589                           ; BSR set to: 0
 19590                           ;ECAN.c: 702: if ( i > 2 )
 19591  00471C  0E02               	movlw	2
 19592  00471E  6585               	cpfsgt	ECANSendMessage@i& (0+255),b
 19593  004720  D004               	goto	l18782
 19594                           
 19595                           ; BSR set to: 0
 19596                           ;ECAN.c: 703: {
 19597                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 19598  004722  90D8               	bcf	status,0,c
 19599  004724  3381               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 19600                           
 19601                           ; BSR set to: 0
 19602                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 19603  004726  A181               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 19604  004728  D067               	goto	l18822
 19605  00472A                     l18782:
 19606                           
 19607                           ; BSR set to: 0
 19608                           ;ECAN.c: 714: }
 19609                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 19610  00472A  C086  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19611  00472E  C087  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19612  004732  50DF               	movf	indf2,w,c
 19613  004734  6F6B               	movwf	??_ECANSendMessage& (0+255),b
 19614  004736  B76B               	btfsc	??_ECANSendMessage& (0+255),3,b
 19615  004738  D05F               	goto	l18822
 19616                           
 19617                           ; BSR set to: 0
 19618                           ;ECAN.c: 721: {
 19619                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 19620  00473A  C086  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19621  00473E  C087  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19622  004742  0EFC               	movlw	252
 19623  004744  16DF               	andwf	indf2,f,c
 19624                           
 19625                           ; BSR set to: 0
 19626                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 19627  004746  C06A  F06B         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 19628  00474A  0E03               	movlw	3
 19629  00474C  176B               	andwf	??_ECANSendMessage& (0+255),f,b
 19630  00474E  C086  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 19631  004752  C087  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 19632  004756  516B               	movf	??_ECANSendMessage& (0+255),w,b
 19633  004758  12DF               	iorwf	indf2,f,c
 19634                           
 19635                           ; BSR set to: 0
 19636                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 19637  00475A  AD6A               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 19638  00475C  D004               	goto	l1616
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 19642  00475E  5169               	movf	ECANSendMessage@dataLen& (0+255),w,b
 19643  004760  0940               	iorlw	64
 19644  004762  6F84               	movwf	ECANSendMessage@temp& (0+255),b
 19645  004764  D002               	goto	l18792
 19646  004766                     l1616:
 19647                           
 19648                           ; BSR set to: 0
 19649                           ;ECAN.c: 729: else
 19650                           ;ECAN.c: 730: temp = dataLen;
 19651  004766  C069  F084         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 19652  00476A                     l18792:
 19653                           
 19654                           ; BSR set to: 0
 19655                           ;ECAN.c: 732: *(ptr+5) = temp;
 19656  00476A  EE20 F005          	lfsr	2,5
 19657  00476E  5186               	movf	ECANSendMessage@ptr& (0+255),w,b
 19658  004770  26D9               	addwf	fsr2l,f,c
 19659  004772  5187               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 19660  004774  22DA               	addwfc	fsr2h,f,c
 19661  004776  C084  FFDF         	movff	ECANSendMessage@temp,indf2
 19662                           
 19663                           ; BSR set to: 0
 19664                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 19665  00477A  AB6A               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 19666  00477C  D003               	goto	l1618
 19667                           
 19668                           ; BSR set to: 0
 19669                           ;ECAN.c: 736: temp = 1;
 19670  00477E  0E01               	movlw	1
 19671  004780  6F84               	movwf	ECANSendMessage@temp& (0+255),b
 19672  004782  D001               	goto	l18798
 19673  004784                     l1618:
 19674                           
 19675                           ; BSR set to: 0
 19676                           ;ECAN.c: 738: else
 19677                           ;ECAN.c: 739: temp = 0;
 19678  004784  6B84               	clrf	ECANSendMessage@temp& (0+255),b
 19679  004786                     l18798:
 19680                           
 19681                           ; BSR set to: 0
 19682                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 19683  004786  2986               	incf	ECANSendMessage@ptr& (0+255),w,b
 19684  004788  6E21               	movwf	?__CANIDToRegs,c
 19685  00478A  0E00               	movlw	0
 19686  00478C  2187               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 19687  00478E  6E22               	movwf	?__CANIDToRegs+1,c
 19688  004790  C063  F023         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 19689  004794  C064  F024         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 19690  004798  C065  F025         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 19691  00479C  C066  F026         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 19692  0047A0  C084  F027         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 19693  0047A4  ECC1  F025         	call	__CANIDToRegs	;wreg free
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;ECAN.c: 745: ptr += 6;
 19697  0047A8  0E06               	movlw	6
 19698  0047AA  2786               	addwf	ECANSendMessage@ptr& (0+255),f,b
 19699  0047AC  0E00               	movlw	0
 19700  0047AE  2387               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 19701                           
 19702                           ; BSR set to: 0
 19703                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 19704  0047B0  6B80               	clrf	ECANSendMessage@j& (0+255),b
 19705  0047B2  D00F               	goto	l18812
 19706  0047B4                     l18804:
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;ECAN.c: 748: *ptr++ = *data++;
 19710  0047B4  C067  FFD9         	movff	ECANSendMessage@data,fsr2l
 19711  0047B8  C068  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 19712  0047BC  C086  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 19713  0047C0  C087  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 19714  0047C4  CFDF FFE7          	movff	indf2,indf1
 19715                           
 19716                           ; BSR set to: 0
 19717  0047C8  4B67               	infsnz	ECANSendMessage@data& (0+255),f,b
 19718  0047CA  2B68               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 19719                           
 19720                           ; BSR set to: 0
 19721  0047CC  4B86               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 19722  0047CE  2B87               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 19723                           
 19724                           ; BSR set to: 0
 19725  0047D0  2B80               	incf	ECANSendMessage@j& (0+255),f,b
 19726  0047D2                     l18812:
 19727                           
 19728                           ; BSR set to: 0
 19729  0047D2  5169               	movf	ECANSendMessage@dataLen& (0+255),w,b
 19730  0047D4  5D80               	subwf	ECANSendMessage@j& (0+255),w,b
 19731  0047D6  E3EE               	bnc	l18804
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 19735  0047D8  C082  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19736  0047DC  C083  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19737  0047E0  50DF               	movf	indf2,w,c
 19738  0047E2  6F6B               	movwf	??_ECANSendMessage& (0+255),b
 19739  0047E4  B56B               	btfsc	??_ECANSendMessage& (0+255),2,b
 19740  0047E6  D006               	goto	l18818
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;ECAN.c: 753: *tempPtr |= 0x08;
 19744  0047E8  C082  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 19745  0047EC  C083  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 19746  0047F0  0E00               	movlw	0
 19747  0047F2  86DB               	bsf	plusw2,3,c
 19748  0047F4                     l18818:
 19749                           
 19750                           ; BSR set to: 0
 19751                           ;ECAN.c: 755: return TRUE;
 19752  0047F4  0E01               	movlw	1
 19753  0047F6  D005               	goto	l1624
 19754  0047F8                     l18822:
 19755                           
 19756                           ; BSR set to: 0
 19757  0047F8  2B85               	incf	ECANSendMessage@i& (0+255),f,b
 19758  0047FA                     l18824:
 19759                           
 19760                           ; BSR set to: 0
 19761  0047FA  517F               	movf	ECANSendMessage@buffers& (0+255),w,b
 19762  0047FC  5D85               	subwf	ECANSendMessage@i& (0+255),w,b
 19763  0047FE  E380               	bnc	l18770
 19764                           
 19765                           ; BSR set to: 0
 19766                           ;ECAN.c: 756: }
 19767                           ;ECAN.c: 757: }
 19768                           ;ECAN.c: 760: return FALSE;
 19769  004800  0E00               	movlw	0
 19770  004802                     l1624:
 19771                           
 19772                           ; BSR set to: 0
 19773  004802  0012               	return	
 19774  004804                     __end_of_ECANSendMessage:
 19775                           	opt stack 0
 19776                           tblptru	equ	0xFF8
 19777                           tblptrh	equ	0xFF7
 19778                           tblptrl	equ	0xFF6
 19779                           tablat	equ	0xFF5
 19780                           prodh	equ	0xFF4
 19781                           prodl	equ	0xFF3
 19782                           intcon	equ	0xFF2
 19783                           indf0	equ	0xFEF
 19784                           postinc0	equ	0xFEE
 19785                           fsr0h	equ	0xFEA
 19786                           fsr0l	equ	0xFE9
 19787                           wreg	equ	0xFE8
 19788                           indf1	equ	0xFE7
 19789                           postinc1	equ	0xFE6
 19790                           postdec1	equ	0xFE5
 19791                           fsr1h	equ	0xFE2
 19792                           fsr1l	equ	0xFE1
 19793                           indf2	equ	0xFDF
 19794                           postinc2	equ	0xFDE
 19795                           postdec2	equ	0xFDD
 19796                           plusw2	equ	0xFDB
 19797                           fsr2h	equ	0xFDA
 19798                           fsr2l	equ	0xFD9
 19799                           status	equ	0xFD8
 19800                           
 19801 ;; *************** function _checkCANBusState *****************
 19802 ;; Defined at:
 19803 ;;		line 617 in file "main.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;		None
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;		None
 19808 ;; Return value:  Size  Location     Type
 19809 ;;		None               void
 19810 ;; Registers used:
 19811 ;;		wreg, status,2
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19817 ;;      Params:         0       0       0       0       0       0       0
 19818 ;;      Locals:         0       0       0       0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0
 19820 ;;      Totals:         0       0       0       0       0       0       0
 19821 ;;Total ram usage:        0 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    3
 19824 ;; This function calls:
 19825 ;;		Nothing
 19826 ;; This function is called by:
 19827 ;;		_readRegister
 19828 ;;		_readRegisterExtended
 19829 ;;		_writeRegisterExtended
 19830 ;; This function uses a non-reentrant model
 19831 ;;
 19832                           
 19833                           	psect	text37
 19834  006A70                     __ptext37:
 19835                           	opt stack 0
 19836  006A70                     _checkCANBusState:
 19837                           	opt stack 24
 19838                           
 19839                           ;main.c: 619: if ( COMSTATbits.TXBO ) {
 19840                           
 19841                           ; BSR set to: 0
 19842                           ;incstack = 0
 19843                           ;incstack = 0
 19844  006A70  AA74               	btfss	3956,5,c	;volatile
 19845  006A72  D002               	goto	l507
 19846                           
 19847                           ;main.c: 621: ledFunctionality = 6;
 19848  006A74  0E06               	movlw	6
 19849  006A76  D009               	goto	L30
 19850  006A78                     l507:
 19851                           
 19852                           ;main.c: 623: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
 19853  006A78  B874               	btfsc	3956,4,c	;volatile
 19854  006A7A  D002               	goto	l17092
 19855  006A7C  A674               	btfss	3956,3,c	;volatile
 19856  006A7E  D002               	goto	l509
 19857  006A80                     l17092:
 19858                           
 19859                           ;main.c: 625: ledFunctionality = 5;
 19860  006A80  0E05               	movlw	5
 19861  006A82  D003               	goto	L30
 19862  006A84                     l509:
 19863                           
 19864                           ;main.c: 629: ledFunctionality = 4;
 19865  006A84  0E04               	movlw	4
 19866                           
 19867                           ;main.c: 627: else if ( COMSTATbits.EWARN ) {
 19868  006A86  A074               	btfss	3956,0,c	;volatile
 19869                           
 19870                           ;main.c: 631: else {
 19871                           ;main.c: 633: ledFunctionality = 1;
 19872                           
 19873                           ;main.c: 630: }
 19874  006A88  0E01               	movlw	1
 19875  006A8A                     L30:
 19876  006A8A  6E32               	movwf	_ledFunctionality,c	;volatile
 19877  006A8C  0012               	return	
 19878  006A8E                     __end_of_checkCANBusState:
 19879                           	opt stack 0
 19880                           tblptru	equ	0xFF8
 19881                           tblptrh	equ	0xFF7
 19882                           tblptrl	equ	0xFF6
 19883                           tablat	equ	0xFF5
 19884                           prodh	equ	0xFF4
 19885                           prodl	equ	0xFF3
 19886                           intcon	equ	0xFF2
 19887                           indf0	equ	0xFEF
 19888                           postinc0	equ	0xFEE
 19889                           fsr0h	equ	0xFEA
 19890                           fsr0l	equ	0xFE9
 19891                           wreg	equ	0xFE8
 19892                           indf1	equ	0xFE7
 19893                           postinc1	equ	0xFE6
 19894                           postdec1	equ	0xFE5
 19895                           fsr1h	equ	0xFE2
 19896                           fsr1l	equ	0xFE1
 19897                           indf2	equ	0xFDF
 19898                           postinc2	equ	0xFDE
 19899                           postdec2	equ	0xFDD
 19900                           plusw2	equ	0xFDB
 19901                           fsr2h	equ	0xFDA
 19902                           fsr2l	equ	0xFD9
 19903                           status	equ	0xFD8
 19904                           
 19905 ;; *************** function _memset *****************
 19906 ;; Defined at:
 19907 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/memset.c"
 19908 ;; Parameters:    Size  Location     Type
 19909 ;;  p1              2   30[COMRAM] PTR void 
 19910 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19911 ;;  c               2   32[COMRAM] int 
 19912 ;;  n               2   34[COMRAM] unsigned int 
 19913 ;; Auto vars:     Size  Location     Type
 19914 ;;  p               2   36[COMRAM] PTR unsigned char 
 19915 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 19916 ;; Return value:  Size  Location     Type
 19917 ;;                  2   30[COMRAM] PTR void 
 19918 ;; Registers used:
 19919 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19920 ;; Tracked objects:
 19921 ;;		On entry : F/1
 19922 ;;		On exit  : 0/0
 19923 ;;		Unchanged: 0/0
 19924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19925 ;;      Params:         6       0       0       0       0       0       0
 19926 ;;      Locals:         2       0       0       0       0       0       0
 19927 ;;      Temps:          0       0       0       0       0       0       0
 19928 ;;      Totals:         8       0       0       0       0       0       0
 19929 ;;Total ram usage:        8 bytes
 19930 ;; Hardware stack levels used:    1
 19931 ;; Hardware stack levels required when called:    3
 19932 ;; This function calls:
 19933 ;;		Nothing
 19934 ;; This function is called by:
 19935 ;;		_doModeVerbose
 19936 ;;		_doModeSLCAN
 19937 ;;		_printGUID
 19938 ;;		_printMDF
 19939 ;;		_printNodeFirmwareVersion
 19940 ;; This function uses a non-reentrant model
 19941 ;;
 19942                           
 19943                           	psect	text38
 19944  006A1C                     __ptext38:
 19945                           	opt stack 0
 19946  006A1C                     _memset:
 19947                           	opt stack 26
 19948                           
 19949                           ; BSR set to: 1
 19950                           
 19951                           ;incstack = 0
 19952                           ;incstack = 0
 19953  006A1C  C01F  F025         	movff	memset@p1,memset@p
 19954  006A20  C020  F026         	movff	memset@p1+1,memset@p+1
 19955  006A24  D008               	goto	l17284
 19956  006A26                     l17280:
 19957  006A26  C025  FFD9         	movff	memset@p,fsr2l
 19958  006A2A  C026  FFDA         	movff	memset@p+1,fsr2h
 19959  006A2E  C021  FFDF         	movff	memset@c,indf2
 19960  006A32  4A25               	infsnz	memset@p,f,c
 19961  006A34  2A26               	incf	memset@p+1,f,c
 19962  006A36                     l17284:
 19963  006A36  0623               	decf	memset@n,f,c
 19964  006A38  A0D8               	btfss	status,0,c
 19965  006A3A  0624               	decf	memset@n+1,f,c
 19966  006A3C  2823               	incf	memset@n& (0+255),w,c
 19967  006A3E  B4D8               	btfsc	status,2,c
 19968  006A40  2824               	incf	(memset@n+1)& (0+255),w,c
 19969  006A42  B4D8               	btfsc	status,2,c
 19970  006A44  0012               	return	
 19971  006A46  D7EF               	goto	l17280
 19972  006A48                     __end_of_memset:
 19973                           	opt stack 0
 19974                           tblptru	equ	0xFF8
 19975                           tblptrh	equ	0xFF7
 19976                           tblptrl	equ	0xFF6
 19977                           tablat	equ	0xFF5
 19978                           prodh	equ	0xFF4
 19979                           prodl	equ	0xFF3
 19980                           intcon	equ	0xFF2
 19981                           indf0	equ	0xFEF
 19982                           postinc0	equ	0xFEE
 19983                           fsr0h	equ	0xFEA
 19984                           fsr0l	equ	0xFE9
 19985                           wreg	equ	0xFE8
 19986                           indf1	equ	0xFE7
 19987                           postinc1	equ	0xFE6
 19988                           postdec1	equ	0xFE5
 19989                           fsr1h	equ	0xFE2
 19990                           fsr1l	equ	0xFE1
 19991                           indf2	equ	0xFDF
 19992                           postinc2	equ	0xFDE
 19993                           postdec2	equ	0xFDD
 19994                           plusw2	equ	0xFDB
 19995                           fsr2h	equ	0xFDA
 19996                           fsr2l	equ	0xFD9
 19997                           status	equ	0xFD8
 19998                           
 19999 ;; *************** function _printHelp *****************
 20000 ;; Defined at:
 20001 ;;		line 3085 in file "main.c"
 20002 ;; Parameters:    Size  Location     Type
 20003 ;;		None
 20004 ;; Auto vars:     Size  Location     Type
 20005 ;;		None
 20006 ;; Return value:  Size  Location     Type
 20007 ;;		None               void
 20008 ;; Registers used:
 20009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20010 ;; Tracked objects:
 20011 ;;		On entry : F/1
 20012 ;;		On exit  : 0/0
 20013 ;;		Unchanged: 0/0
 20014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20015 ;;      Params:         0       0       0       0       0       0       0
 20016 ;;      Locals:         0       0       0       0       0       0       0
 20017 ;;      Temps:          0       0       0       0       0       0       0
 20018 ;;      Totals:         0       0       0       0       0       0       0
 20019 ;;Total ram usage:        0 bytes
 20020 ;; Hardware stack levels used:    1
 20021 ;; Hardware stack levels required when called:    5
 20022 ;; This function calls:
 20023 ;;		_putsUSART
 20024 ;; This function is called by:
 20025 ;;		_doModeVerbose
 20026 ;; This function uses a non-reentrant model
 20027 ;;
 20028                           
 20029                           	psect	text39
 20030  004516                     __ptext39:
 20031                           	opt stack 0
 20032  004516                     _printHelp:
 20033                           	opt stack 24
 20034                           
 20035                           ; BSR set to: 1
 20036                           ;main.c: 3086: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 20037                           
 20038                           ;incstack = 0
 20039                           ;incstack = 0
 20040  004516  0E77               	movlw	high STR_249
 20041  004518  6E21               	movwf	?_putsUSART+1,c
 20042  00451A  0E24               	movlw	low STR_249
 20043  00451C  6E20               	movwf	?_putsUSART,c
 20044  00451E  ECDF  F032         	call	_putsUSART	;wreg free
 20045                           
 20046                           ;main.c: 3087: putsUSART((char *) "------------------------------------\r\n");
 20047  004522  0E6F               	movlw	high (STR_282+28)
 20048  004524  6E21               	movwf	?_putsUSART+1,c
 20049  004526  0EF8               	movlw	low (STR_282+28)
 20050  004528  6E20               	movwf	?_putsUSART,c
 20051  00452A  ECDF  F032         	call	_putsUSART	;wreg free
 20052                           
 20053                           ;main.c: 3088: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 20054  00452E  0E7A               	movlw	high STR_251
 20055  004530  6E21               	movwf	?_putsUSART+1,c
 20056  004532  0E7D               	movlw	low STR_251
 20057  004534  6E20               	movwf	?_putsUSART,c
 20058  004536  ECDF  F032         	call	_putsUSART	;wreg free
 20059                           
 20060                           ;main.c: 3089: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 20061  00453A  0E75               	movlw	high STR_252
 20062  00453C  6E21               	movwf	?_putsUSART+1,c
 20063  00453E  0E8A               	movlw	low STR_252
 20064  004540  6E20               	movwf	?_putsUSART,c
 20065  004542  ECDF  F032         	call	_putsUSART	;wreg free
 20066                           
 20067                           ;main.c: 3090: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 20068  004546  0E75               	movlw	high STR_253
 20069  004548  6E21               	movwf	?_putsUSART+1,c
 20070  00454A  0E30               	movlw	low STR_253
 20071  00454C  6E20               	movwf	?_putsUSART,c
 20072  00454E  ECDF  F032         	call	_putsUSART	;wreg free
 20073                           
 20074                           ;main.c: 3091: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 20075  004552  0E73               	movlw	high STR_254
 20076  004554  6E21               	movwf	?_putsUSART+1,c
 20077  004556  0E7B               	movlw	low STR_254
 20078  004558  6E20               	movwf	?_putsUSART,c
 20079  00455A  ECDF  F032         	call	_putsUSART	;wreg free
 20080                           
 20081                           ;main.c: 3092: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 20082  00455E  0E73               	movlw	high STR_255
 20083  004560  6E21               	movwf	?_putsUSART+1,c
 20084  004562  0EE0               	movlw	low STR_255
 20085  004564  6E20               	movwf	?_putsUSART,c
 20086  004566  ECDF  F032         	call	_putsUSART	;wreg free
 20087                           
 20088                           ;main.c: 3093: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 20089  00456A  0E79               	movlw	high STR_256
 20090  00456C  6E21               	movwf	?_putsUSART+1,c
 20091  00456E  0EED               	movlw	low STR_256
 20092  004570  6E20               	movwf	?_putsUSART,c
 20093  004572  ECDF  F032         	call	_putsUSART	;wreg free
 20094                           
 20095                           ;main.c: 3094: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 20096  004576  0E74               	movlw	high STR_257
 20097  004578  6E21               	movwf	?_putsUSART+1,c
 20098  00457A  0E12               	movlw	low STR_257
 20099  00457C  6E20               	movwf	?_putsUSART,c
 20100  00457E  ECDF  F032         	call	_putsUSART	;wreg free
 20101                           
 20102                           ;main.c: 3095: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 20103  004582  0E75               	movlw	high STR_258
 20104  004584  6E21               	movwf	?_putsUSART+1,c
 20105  004586  0E5E               	movlw	low STR_258
 20106  004588  6E20               	movwf	?_putsUSART,c
 20107  00458A  ECDF  F032         	call	_putsUSART	;wreg free
 20108                           
 20109                           ;main.c: 3096: putsUSART((char *) "TX - Send CAN frame .\r\n");
 20110  00458E  0E7B               	movlw	high STR_259
 20111  004590  6E21               	movwf	?_putsUSART+1,c
 20112  004592  0E33               	movlw	low STR_259
 20113  004594  6E20               	movwf	?_putsUSART,c
 20114  004596  ECDF  F032         	call	_putsUSART	;wreg free
 20115                           
 20116                           ;main.c: 3097: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 20117  00459A  0E71               	movlw	high STR_260
 20118  00459C  6E21               	movwf	?_putsUSART+1,c
 20119  00459E  0ECA               	movlw	low STR_260
 20120  0045A0  6E20               	movwf	?_putsUSART,c
 20121  0045A2  ECDF  F032         	call	_putsUSART	;wreg free
 20122                           
 20123                           ;main.c: 3098: putsUSART((char *) "RX - Read CAN frame.\r\n");
 20124  0045A6  0E7B               	movlw	high STR_261
 20125  0045A8  6E21               	movwf	?_putsUSART+1,c
 20126  0045AA  0EF3               	movlw	low STR_261
 20127  0045AC  6E20               	movwf	?_putsUSART,c
 20128  0045AE  ECDF  F032         	call	_putsUSART	;wreg free
 20129                           
 20130                           ;main.c: 3099: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 20131  0045B2  0E79               	movlw	high STR_262
 20132  0045B4  6E21               	movwf	?_putsUSART+1,c
 20133  0045B6  0E2A               	movlw	low STR_262
 20134  0045B8  6E20               	movwf	?_putsUSART,c
 20135  0045BA  ECDF  F032         	call	_putsUSART	;wreg free
 20136                           
 20137                           ;main.c: 3100: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 20138  0045BE  0E76               	movlw	high STR_263
 20139  0045C0  6E21               	movwf	?_putsUSART+1,c
 20140  0045C2  0EFD               	movlw	low STR_263
 20141  0045C4  6E20               	movwf	?_putsUSART,c
 20142  0045C6  ECDF  F032         	call	_putsUSART	;wreg free
 20143                           
 20144                           ;main.c: 3101: putsUSART((char *) "HELP - Display this help information.\r\n");
 20145  0045CA  0E76               	movlw	high STR_264
 20146  0045CC  6E21               	movwf	?_putsUSART+1,c
 20147  0045CE  0E5E               	movlw	low STR_264
 20148  0045D0  6E20               	movwf	?_putsUSART,c
 20149  0045D2  ECDF  F032         	call	_putsUSART	;wreg free
 20150                           
 20151                           ;main.c: 3102: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 20152  0045D6  0E74               	movlw	high STR_265
 20153  0045D8  6E21               	movwf	?_putsUSART+1,c
 20154  0045DA  0ED3               	movlw	low STR_265
 20155  0045DC  6E20               	movwf	?_putsUSART,c
 20156  0045DE  ECDF  F032         	call	_putsUSART	;wreg free
 20157                           
 20158                           ;main.c: 3103: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg nodeid 
      +                          [page:]reg [count]).\r\n");
 20159  0045E2  0E6E               	movlw	high STR_266
 20160  0045E4  6E21               	movwf	?_putsUSART+1,c
 20161  0045E6  0EFF               	movlw	low STR_266
 20162  0045E8  6E20               	movwf	?_putsUSART,c
 20163  0045EA  ECDF  F032         	call	_putsUSART	;wreg free
 20164                           
 20165                           ;main.c: 3104: putsUSART((char *) "WREG - Write register of node (Format: wreg nodeid [p
      +                          age:]reg content).\r\n");
 20166  0045EE  0E6F               	movlw	high STR_267
 20167  0045F0  6E21               	movwf	?_putsUSART+1,c
 20168  0045F2  0E4B               	movlw	low STR_267
 20169  0045F4  6E20               	movwf	?_putsUSART,c
 20170  0045F6  ECDF  F032         	call	_putsUSART	;wreg free
 20171                           
 20172                           ;main.c: 3105: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 20173  0045FA  0E6E               	movlw	high STR_268
 20174  0045FC  6E21               	movwf	?_putsUSART+1,c
 20175  0045FE  0EB2               	movlw	low STR_268
 20176  004600  6E20               	movwf	?_putsUSART,c
 20177  004602  ECDF  F032         	call	_putsUSART	;wreg free
 20178                           
 20179                           ;main.c: 3106: putsUSART((char *) "FILTER - Set filter .\r\n");
 20180  004606  0E7B               	movlw	high STR_269
 20181  004608  6E21               	movwf	?_putsUSART+1,c
 20182  00460A  0E4B               	movlw	low STR_269
 20183  00460C  6E20               	movwf	?_putsUSART,c
 20184  00460E  ECDF  F032         	call	_putsUSART	;wreg free
 20185                           
 20186                           ;main.c: 3107: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 20187  004612  0E6E               	movlw	high STR_270
 20188  004614  6E21               	movwf	?_putsUSART+1,c
 20189  004616  0E64               	movlw	low STR_270
 20190  004618  6E20               	movwf	?_putsUSART,c
 20191  00461A  ECDF  F032         	call	_putsUSART	;wreg free
 20192                           
 20193                           ;main.c: 3108: putsUSART((char *) "MASK - Set mask .\r\n");
 20194  00461E  0E7C               	movlw	high STR_271
 20195  004620  6E21               	movwf	?_putsUSART+1,c
 20196  004622  0ED1               	movlw	low STR_271
 20197  004624  6E20               	movwf	?_putsUSART,c
 20198  004626  ECDF  F032         	call	_putsUSART	;wreg free
 20199                           
 20200                           ;main.c: 3109: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 20201  00462A  0E6F               	movlw	high STR_272
 20202  00462C  6E21               	movwf	?_putsUSART+1,c
 20203  00462E  0E95               	movlw	low STR_272
 20204  004630  6E20               	movwf	?_putsUSART,c
 20205  004632  ECDF  F032         	call	_putsUSART	;wreg free
 20206                           
 20207                           ;main.c: 3110: putsUSART((char *) "SET - Persistent functionality.\r\n");
 20208  004636  0E79               	movlw	high STR_273
 20209  004638  6E21               	movwf	?_putsUSART+1,c
 20210  00463A  0E08               	movlw	low STR_273
 20211  00463C  6E20               	movwf	?_putsUSART,c
 20212  00463E  ECDF  F032         	call	_putsUSART	;wreg free
 20213                           
 20214                           ;main.c: 3111: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 20215  004642  0E74               	movlw	high STR_274
 20216  004644  6E21               	movwf	?_putsUSART+1,c
 20217  004646  0EA4               	movlw	low STR_274
 20218  004648  6E20               	movwf	?_putsUSART,c
 20219  00464A  ECDF  F032         	call	_putsUSART	;wreg free
 20220                           
 20221                           ;main.c: 3112: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 20222  00464E  0E74               	movlw	high STR_275
 20223  004650  6E21               	movwf	?_putsUSART+1,c
 20224  004652  0E75               	movlw	low STR_275
 20225  004654  6E20               	movwf	?_putsUSART,c
 20226  004656  ECDF  F032         	call	_putsUSART	;wreg free
 20227                           
 20228                           ;main.c: 3113: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=20 ms .\r\n");
 20229  00465A  0E70               	movlw	high STR_276
 20230  00465C  6E21               	movwf	?_putsUSART+1,c
 20231  00465E  0E1F               	movlw	low STR_276
 20232  004660  6E20               	movwf	?_putsUSART,c
 20233  004662  ECDF  F032         	call	_putsUSART	;wreg free
 20234                           
 20235                           ;main.c: 3114: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 20236  004666  0E74               	movlw	high STR_277
 20237  004668  6E21               	movwf	?_putsUSART+1,c
 20238  00466A  0E44               	movlw	low STR_277
 20239  00466C  6E20               	movwf	?_putsUSART,c
 20240  00466E  ECDF  F032         	call	_putsUSART	;wreg free
 20241                           
 20242                           ;main.c: 3115: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 20243  004672  0E72               	movlw	high STR_278
 20244  004674  6E21               	movwf	?_putsUSART+1,c
 20245  004676  0E39               	movlw	low STR_278
 20246  004678  6E20               	movwf	?_putsUSART,c
 20247  00467A  ECDF  F032         	call	_putsUSART	;wreg free
 20248                           
 20249                           ;main.c: 3116: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 20250  00467E  0E70               	movlw	high STR_279
 20251  004680  6E21               	movwf	?_putsUSART+1,c
 20252  004682  0EA4               	movlw	low STR_279
 20253  004684  6E20               	movwf	?_putsUSART,c
 20254  004686  ECDF  F032         	call	_putsUSART	;wreg free
 20255                           
 20256                           ;main.c: 3117: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 20257  00468A  0E77               	movlw	high STR_280
 20258  00468C  6E21               	movwf	?_putsUSART+1,c
 20259  00468E  0E99               	movlw	low STR_280
 20260  004690  6E20               	movwf	?_putsUSART,c
 20261  004692  EFDF  F032         	goto	_putsUSART	;wreg free
 20262  004696                     __end_of_printHelp:
 20263                           	opt stack 0
 20264                           tblptru	equ	0xFF8
 20265                           tblptrh	equ	0xFF7
 20266                           tblptrl	equ	0xFF6
 20267                           tablat	equ	0xFF5
 20268                           prodh	equ	0xFF4
 20269                           prodl	equ	0xFF3
 20270                           intcon	equ	0xFF2
 20271                           indf0	equ	0xFEF
 20272                           postinc0	equ	0xFEE
 20273                           fsr0h	equ	0xFEA
 20274                           fsr0l	equ	0xFE9
 20275                           wreg	equ	0xFE8
 20276                           indf1	equ	0xFE7
 20277                           postinc1	equ	0xFE6
 20278                           postdec1	equ	0xFE5
 20279                           fsr1h	equ	0xFE2
 20280                           fsr1l	equ	0xFE1
 20281                           indf2	equ	0xFDF
 20282                           postinc2	equ	0xFDE
 20283                           postdec2	equ	0xFDD
 20284                           plusw2	equ	0xFDB
 20285                           fsr2h	equ	0xFDA
 20286                           fsr2l	equ	0xFD9
 20287                           status	equ	0xFD8
 20288                           
 20289 ;; *************** function _printErrors *****************
 20290 ;; Defined at:
 20291 ;;		line 3022 in file "main.c"
 20292 ;; Parameters:    Size  Location     Type
 20293 ;;		None
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;		None
 20296 ;; Return value:  Size  Location     Type
 20297 ;;		None               void
 20298 ;; Registers used:
 20299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20300 ;; Tracked objects:
 20301 ;;		On entry : F/1
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20305 ;;      Params:         0       0       0       0       0       0       0
 20306 ;;      Locals:         0      12       0       0       0       0       0
 20307 ;;      Temps:          0       0       0       0       0       0       0
 20308 ;;      Totals:         0      12       0       0       0       0       0
 20309 ;;Total ram usage:       12 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; Hardware stack levels required when called:    5
 20312 ;; This function calls:
 20313 ;;		_putsUSART
 20314 ;;		_sprintf
 20315 ;; This function is called by:
 20316 ;;		_doModeVerbose
 20317 ;; This function uses a non-reentrant model
 20318 ;;
 20319                           
 20320                           	psect	text40
 20321  003256                     __ptext40:
 20322                           	opt stack 0
 20323  003256                     _printErrors:
 20324                           	opt stack 24
 20325                           
 20326                           ; BSR set to: 1
 20327                           ;main.c: 3023: putsUSART((char *) "CAN Receive overruns: ");
 20328                           
 20329                           ;incstack = 0
 20330                           ;incstack = 0
 20331  003256  0E7C               	movlw	high STR_219
 20332  003258  6E21               	movwf	?_putsUSART+1,c
 20333  00325A  0E21               	movlw	low STR_219
 20334  00325C  6E20               	movwf	?_putsUSART,c
 20335  00325E  ECDF  F032         	call	_putsUSART	;wreg free
 20336                           
 20337                           ;main.c: 3024: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 20338  003262  0101               	movlb	1	; () banked
 20339  003264  6700               	tstfsz	_bHex& (0+255),b
 20340  003266  D005               	goto	l17360
 20341                           
 20342                           ; BSR set to: 1
 20343  003268  0E7F               	movlw	high STR_184
 20344  00326A  0100               	movlb	0	; () banked
 20345  00326C  6F8C               	movwf	(_printErrors$1631+1)& (0+255),b
 20346  00326E  0EDD               	movlw	low STR_184
 20347  003270  D004               	goto	L31
 20348  003272                     l17360:
 20349                           
 20350                           ; BSR set to: 1
 20351  003272  0E7F               	movlw	high STR_183
 20352  003274  0100               	movlb	0	; () banked
 20353  003276  6F8C               	movwf	(_printErrors$1631+1)& (0+255),b
 20354  003278  0E00               	movlw	low STR_183
 20355  00327A                     L31:
 20356  00327A  6F8B               	movwf	_printErrors$1631& (0+255),b
 20357                           
 20358                           ; BSR set to: 0
 20359  00327C  0E01               	movlw	high _wrkbuf
 20360  00327E  0100               	movlb	0	; () banked
 20361  003280  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20362  003282  0E55               	movlw	low _wrkbuf
 20363  003284  6F6D               	movwf	?_sprintf& (0+255),b
 20364  003286  C08B  F06F         	movff	_printErrors$1631,?_sprintf+2
 20365  00328A  C08C  F070         	movff	_printErrors$1631+1,?_sprintf+3
 20366  00328E  C0C6  F071         	movff	_can_receiveOverruns,?_sprintf+4
 20367  003292  C0C7  F072         	movff	_can_receiveOverruns+1,?_sprintf+5
 20368  003296  C0C8  F073         	movff	_can_receiveOverruns+2,?_sprintf+6
 20369  00329A  C0C9  F074         	movff	_can_receiveOverruns+3,?_sprintf+7
 20370  00329E  EC14  F010         	call	_sprintf	;wreg free
 20371                           
 20372                           ; BSR set to: 0
 20373                           ;main.c: 3025: putsUSART(wrkbuf);
 20374  0032A2  0101               	movlb	1	; () banked
 20375  0032A4  0E01               	movlw	high _wrkbuf
 20376  0032A6  6E21               	movwf	?_putsUSART+1,c
 20377  0032A8  0E55               	movlw	low _wrkbuf
 20378  0032AA  6E20               	movwf	?_putsUSART,c
 20379  0032AC  ECDF  F032         	call	_putsUSART	;wreg free
 20380                           
 20381                           ;main.c: 3026: putsUSART((char *) "\r\n");
 20382  0032B0  0E72               	movlw	high (STR_241+51)
 20383  0032B2  6E21               	movwf	?_putsUSART+1,c
 20384  0032B4  0EDA               	movlw	low (STR_241+51)
 20385  0032B6  6E20               	movwf	?_putsUSART,c
 20386  0032B8  ECDF  F032         	call	_putsUSART	;wreg free
 20387                           
 20388                           ;main.c: 3028: putsUSART((char *) "CAN Transmit overruns: ");
 20389  0032BC  0E7B               	movlw	high STR_223
 20390  0032BE  6E21               	movwf	?_putsUSART+1,c
 20391  0032C0  0EDB               	movlw	low STR_223
 20392  0032C2  6E20               	movwf	?_putsUSART,c
 20393  0032C4  ECDF  F032         	call	_putsUSART	;wreg free
 20394                           
 20395                           ;main.c: 3029: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 20396  0032C8  0101               	movlb	1	; () banked
 20397  0032CA  6700               	tstfsz	_bHex& (0+255),b
 20398  0032CC  D005               	goto	l17374
 20399                           
 20400                           ; BSR set to: 1
 20401  0032CE  0E7F               	movlw	high STR_184
 20402  0032D0  0100               	movlb	0	; () banked
 20403  0032D2  6F8E               	movwf	(_printErrors$1637+1)& (0+255),b
 20404  0032D4  0EDD               	movlw	low STR_184
 20405  0032D6  D004               	goto	L32
 20406  0032D8                     l17374:
 20407                           
 20408                           ; BSR set to: 1
 20409  0032D8  0E7F               	movlw	high STR_183
 20410  0032DA  0100               	movlb	0	; () banked
 20411  0032DC  6F8E               	movwf	(_printErrors$1637+1)& (0+255),b
 20412  0032DE  0E00               	movlw	low STR_183
 20413  0032E0                     L32:
 20414  0032E0  6F8D               	movwf	_printErrors$1637& (0+255),b
 20415                           
 20416                           ; BSR set to: 0
 20417  0032E2  0E01               	movlw	high _wrkbuf
 20418  0032E4  0100               	movlb	0	; () banked
 20419  0032E6  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20420  0032E8  0E55               	movlw	low _wrkbuf
 20421  0032EA  6F6D               	movwf	?_sprintf& (0+255),b
 20422  0032EC  C08D  F06F         	movff	_printErrors$1637,?_sprintf+2
 20423  0032F0  C08E  F070         	movff	_printErrors$1637+1,?_sprintf+3
 20424  0032F4  C0CA  F071         	movff	_can_transmitOverruns,?_sprintf+4
 20425  0032F8  C0CB  F072         	movff	_can_transmitOverruns+1,?_sprintf+5
 20426  0032FC  C0CC  F073         	movff	_can_transmitOverruns+2,?_sprintf+6
 20427  003300  C0CD  F074         	movff	_can_transmitOverruns+3,?_sprintf+7
 20428  003304  EC14  F010         	call	_sprintf	;wreg free
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;main.c: 3030: putsUSART(wrkbuf);
 20432  003308  0101               	movlb	1	; () banked
 20433  00330A  0E01               	movlw	high _wrkbuf
 20434  00330C  6E21               	movwf	?_putsUSART+1,c
 20435  00330E  0E55               	movlw	low _wrkbuf
 20436  003310  6E20               	movwf	?_putsUSART,c
 20437  003312  ECDF  F032         	call	_putsUSART	;wreg free
 20438                           
 20439                           ;main.c: 3031: putsUSART((char *) "\r\n");
 20440  003316  0E72               	movlw	high (STR_241+51)
 20441  003318  6E21               	movwf	?_putsUSART+1,c
 20442  00331A  0EDA               	movlw	low (STR_241+51)
 20443  00331C  6E20               	movwf	?_putsUSART,c
 20444  00331E  ECDF  F032         	call	_putsUSART	;wreg free
 20445                           
 20446                           ;main.c: 3033: putsUSART((char *) "UART Receive overruns: ");
 20447  003322  0E7B               	movlw	high STR_227
 20448  003324  6E21               	movwf	?_putsUSART+1,c
 20449  003326  0EC3               	movlw	low STR_227
 20450  003328  6E20               	movwf	?_putsUSART,c
 20451  00332A  ECDF  F032         	call	_putsUSART	;wreg free
 20452                           
 20453                           ;main.c: 3034: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 20454  00332E  0101               	movlb	1	; () banked
 20455  003330  6700               	tstfsz	_bHex& (0+255),b
 20456  003332  D005               	goto	l17388
 20457                           
 20458                           ; BSR set to: 1
 20459  003334  0E7F               	movlw	high STR_184
 20460  003336  0100               	movlb	0	; () banked
 20461  003338  6F90               	movwf	(_printErrors$1643+1)& (0+255),b
 20462  00333A  0EDD               	movlw	low STR_184
 20463  00333C  D004               	goto	L33
 20464  00333E                     l17388:
 20465                           
 20466                           ; BSR set to: 1
 20467  00333E  0E7F               	movlw	high STR_183
 20468  003340  0100               	movlb	0	; () banked
 20469  003342  6F90               	movwf	(_printErrors$1643+1)& (0+255),b
 20470  003344  0E00               	movlw	low STR_183
 20471  003346                     L33:
 20472  003346  6F8F               	movwf	_printErrors$1643& (0+255),b
 20473                           
 20474                           ; BSR set to: 0
 20475  003348  0E01               	movlw	high _wrkbuf
 20476  00334A  0100               	movlb	0	; () banked
 20477  00334C  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20478  00334E  0E55               	movlw	low _wrkbuf
 20479  003350  6F6D               	movwf	?_sprintf& (0+255),b
 20480  003352  C08F  F06F         	movff	_printErrors$1643,?_sprintf+2
 20481  003356  C090  F070         	movff	_printErrors$1643+1,?_sprintf+3
 20482  00335A  C0E6  F071         	movff	_uart_receiveOverruns,?_sprintf+4
 20483  00335E  C0E7  F072         	movff	_uart_receiveOverruns+1,?_sprintf+5
 20484  003362  C0E8  F073         	movff	_uart_receiveOverruns+2,?_sprintf+6
 20485  003366  C0E9  F074         	movff	_uart_receiveOverruns+3,?_sprintf+7
 20486  00336A  EC14  F010         	call	_sprintf	;wreg free
 20487                           
 20488                           ; BSR set to: 0
 20489                           ;main.c: 3035: putsUSART(wrkbuf);
 20490  00336E  0101               	movlb	1	; () banked
 20491  003370  0E01               	movlw	high _wrkbuf
 20492  003372  6E21               	movwf	?_putsUSART+1,c
 20493  003374  0E55               	movlw	low _wrkbuf
 20494  003376  6E20               	movwf	?_putsUSART,c
 20495  003378  ECDF  F032         	call	_putsUSART	;wreg free
 20496                           
 20497                           ;main.c: 3036: putsUSART((char *) "\r\n");
 20498  00337C  0E72               	movlw	high (STR_241+51)
 20499  00337E  6E21               	movwf	?_putsUSART+1,c
 20500  003380  0EDA               	movlw	low (STR_241+51)
 20501  003382  6E20               	movwf	?_putsUSART,c
 20502  003384  ECDF  F032         	call	_putsUSART	;wreg free
 20503                           
 20504                           ;main.c: 3038: putsUSART((char *) "UART Receive overruns: ");
 20505  003388  0E7B               	movlw	high STR_227
 20506  00338A  6E21               	movwf	?_putsUSART+1,c
 20507  00338C  0EC3               	movlw	low STR_227
 20508  00338E  6E20               	movwf	?_putsUSART,c
 20509  003390  ECDF  F032         	call	_putsUSART	;wreg free
 20510                           
 20511                           ;main.c: 3039: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 20512  003394  0101               	movlb	1	; () banked
 20513  003396  6700               	tstfsz	_bHex& (0+255),b
 20514  003398  D005               	goto	l17402
 20515                           
 20516                           ; BSR set to: 1
 20517  00339A  0E7F               	movlw	high STR_184
 20518  00339C  0100               	movlb	0	; () banked
 20519  00339E  6F92               	movwf	(_printErrors$1649+1)& (0+255),b
 20520  0033A0  0EDD               	movlw	low STR_184
 20521  0033A2  D004               	goto	L34
 20522  0033A4                     l17402:
 20523                           
 20524                           ; BSR set to: 1
 20525  0033A4  0E7F               	movlw	high STR_183
 20526  0033A6  0100               	movlb	0	; () banked
 20527  0033A8  6F92               	movwf	(_printErrors$1649+1)& (0+255),b
 20528  0033AA  0E00               	movlw	low STR_183
 20529  0033AC                     L34:
 20530  0033AC  6F91               	movwf	_printErrors$1649& (0+255),b
 20531                           
 20532                           ; BSR set to: 0
 20533  0033AE  0E01               	movlw	high _wrkbuf
 20534  0033B0  0100               	movlb	0	; () banked
 20535  0033B2  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20536  0033B4  0E55               	movlw	low _wrkbuf
 20537  0033B6  6F6D               	movwf	?_sprintf& (0+255),b
 20538  0033B8  C091  F06F         	movff	_printErrors$1649,?_sprintf+2
 20539  0033BC  C092  F070         	movff	_printErrors$1649+1,?_sprintf+3
 20540  0033C0  C0EA  F071         	movff	_uart_transmitOverruns,?_sprintf+4
 20541  0033C4  C0EB  F072         	movff	_uart_transmitOverruns+1,?_sprintf+5
 20542  0033C8  C0EC  F073         	movff	_uart_transmitOverruns+2,?_sprintf+6
 20543  0033CC  C0ED  F074         	movff	_uart_transmitOverruns+3,?_sprintf+7
 20544  0033D0  EC14  F010         	call	_sprintf	;wreg free
 20545                           
 20546                           ; BSR set to: 0
 20547                           ;main.c: 3040: putsUSART(wrkbuf);
 20548  0033D4  0101               	movlb	1	; () banked
 20549  0033D6  0E01               	movlw	high _wrkbuf
 20550  0033D8  6E21               	movwf	?_putsUSART+1,c
 20551  0033DA  0E55               	movlw	low _wrkbuf
 20552  0033DC  6E20               	movwf	?_putsUSART,c
 20553  0033DE  ECDF  F032         	call	_putsUSART	;wreg free
 20554                           
 20555                           ;main.c: 3041: putsUSART((char *) "\r\n");
 20556  0033E2  0E72               	movlw	high (STR_241+51)
 20557  0033E4  6E21               	movwf	?_putsUSART+1,c
 20558  0033E6  0EDA               	movlw	low (STR_241+51)
 20559  0033E8  6E20               	movwf	?_putsUSART,c
 20560  0033EA  ECDF  F032         	call	_putsUSART	;wreg free
 20561                           
 20562                           ;main.c: 3043: if (COMSTATbits.EWARN) {
 20563  0033EE  A074               	btfss	3956,0,c	;volatile
 20564  0033F0  D006               	goto	l1307
 20565                           
 20566                           ;main.c: 3044: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 20567  0033F2  0E73               	movlw	high STR_235
 20568  0033F4  6E21               	movwf	?_putsUSART+1,c
 20569  0033F6  0E47               	movlw	low STR_235
 20570  0033F8  6E20               	movwf	?_putsUSART,c
 20571  0033FA  ECDF  F032         	call	_putsUSART	;wreg free
 20572  0033FE                     l1307:
 20573                           
 20574                           ;main.c: 3045: }
 20575                           ;main.c: 3047: putsUSART((char *) "Transmit Error Counter: ");
 20576  0033FE  0E7B               	movlw	high STR_236
 20577  003400  6E21               	movwf	?_putsUSART+1,c
 20578  003402  0E01               	movlw	low STR_236
 20579  003404  6E20               	movwf	?_putsUSART,c
 20580  003406  ECDF  F032         	call	_putsUSART	;wreg free
 20581                           
 20582                           ;main.c: 3048: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 20583  00340A  0101               	movlb	1	; () banked
 20584  00340C  6700               	tstfsz	_bHex& (0+255),b
 20585  00340E  D005               	goto	l17418
 20586                           
 20587                           ; BSR set to: 1
 20588  003410  0E7F               	movlw	high STR_61
 20589  003412  0100               	movlb	0	; () banked
 20590  003414  6F94               	movwf	(_printErrors$1656+1)& (0+255),b
 20591  003416  0EED               	movlw	low STR_61
 20592  003418  D004               	goto	L35
 20593  00341A                     l17418:
 20594                           
 20595                           ; BSR set to: 1
 20596  00341A  0E7F               	movlw	high STR_60
 20597  00341C  0100               	movlb	0	; () banked
 20598  00341E  6F94               	movwf	(_printErrors$1656+1)& (0+255),b
 20599  003420  0E4F               	movlw	low STR_60
 20600  003422                     L35:
 20601  003422  6F93               	movwf	_printErrors$1656& (0+255),b
 20602                           
 20603                           ; BSR set to: 0
 20604  003424  0E01               	movlw	high _wrkbuf
 20605  003426  0100               	movlb	0	; () banked
 20606  003428  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20607  00342A  0E55               	movlw	low _wrkbuf
 20608  00342C  6F6D               	movwf	?_sprintf& (0+255),b
 20609  00342E  C093  F06F         	movff	_printErrors$1656,?_sprintf+2
 20610  003432  C094  F070         	movff	_printErrors$1656+1,?_sprintf+3
 20611  003436  CF76 F071          	movff	3958,?_sprintf+4	;volatile
 20612  00343A  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20613  00343C  EC14  F010         	call	_sprintf	;wreg free
 20614                           
 20615                           ; BSR set to: 0
 20616                           ;main.c: 3049: putsUSART(wrkbuf);
 20617  003440  0101               	movlb	1	; () banked
 20618  003442  0E01               	movlw	high _wrkbuf
 20619  003444  6E21               	movwf	?_putsUSART+1,c
 20620  003446  0E55               	movlw	low _wrkbuf
 20621  003448  6E20               	movwf	?_putsUSART,c
 20622  00344A  ECDF  F032         	call	_putsUSART	;wreg free
 20623                           
 20624                           ;main.c: 3050: putsUSART((char *) "\r\n");
 20625  00344E  0E72               	movlw	high (STR_241+51)
 20626  003450  6E21               	movwf	?_putsUSART+1,c
 20627  003452  0EDA               	movlw	low (STR_241+51)
 20628  003454  6E20               	movwf	?_putsUSART,c
 20629  003456  ECDF  F032         	call	_putsUSART	;wreg free
 20630                           
 20631                           ;main.c: 3052: if (COMSTATbits.TXWARN) {
 20632  00345A  A474               	btfss	3956,2,c	;volatile
 20633  00345C  D006               	goto	l17430
 20634                           
 20635                           ;main.c: 3053: putsUSART((char *) "Transmitter in Error State Warning (128 > TXERRCNT > 
      +                          96)\r\n");
 20636  00345E  0E70               	movlw	high STR_240
 20637  003460  6E21               	movwf	?_putsUSART+1,c
 20638  003462  0EE2               	movlw	low STR_240
 20639  003464  6E20               	movwf	?_putsUSART,c
 20640  003466  ECDF  F032         	call	_putsUSART	;wreg free
 20641  00346A                     l17430:
 20642                           
 20643                           ;main.c: 3054: }
 20644                           ;main.c: 3056: if (COMSTATbits.TXBO) {
 20645  00346A  AA74               	btfss	3956,5,c	;volatile
 20646  00346C  D006               	goto	l17434
 20647                           
 20648                           ;main.c: 3057: putsUSART((char *) "Transmitter in Error State Bus OFF (TXERRCNT ? 256)\r
      +                          \n");
 20649  00346E  0E72               	movlw	high STR_241
 20650  003470  6E21               	movwf	?_putsUSART+1,c
 20651  003472  0EA7               	movlw	low STR_241
 20652  003474  6E20               	movwf	?_putsUSART,c
 20653  003476  ECDF  F032         	call	_putsUSART	;wreg free
 20654  00347A                     l17434:
 20655                           
 20656                           ;main.c: 3058: }
 20657                           ;main.c: 3060: if (COMSTATbits.TXBP) {
 20658  00347A  A874               	btfss	3956,4,c	;volatile
 20659  00347C  D006               	goto	l1314
 20660                           
 20661                           ;main.c: 3061: putsUSART((char *) "Transmitter in Error State Bus Passive (TXERRCNT ? 12
      +                          8)\r\n");
 20662  00347E  0E71               	movlw	high STR_242
 20663  003480  6E21               	movwf	?_putsUSART+1,c
 20664  003482  0E1D               	movlw	low STR_242
 20665  003484  6E20               	movwf	?_putsUSART,c
 20666  003486  ECDF  F032         	call	_putsUSART	;wreg free
 20667  00348A                     l1314:
 20668                           
 20669                           ;main.c: 3062: }
 20670                           ;main.c: 3064: putsUSART((char *) "Receive Error Counter: ");
 20671  00348A  0E7B               	movlw	high STR_243
 20672  00348C  6E21               	movwf	?_putsUSART+1,c
 20673  00348E  0EAB               	movlw	low STR_243
 20674  003490  6E20               	movwf	?_putsUSART,c
 20675  003492  ECDF  F032         	call	_putsUSART	;wreg free
 20676                           
 20677                           ;main.c: 3065: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 20678  003496  0101               	movlb	1	; () banked
 20679  003498  6700               	tstfsz	_bHex& (0+255),b
 20680  00349A  D005               	goto	l17442
 20681                           
 20682                           ; BSR set to: 1
 20683  00349C  0E7F               	movlw	high STR_61
 20684  00349E  0100               	movlb	0	; () banked
 20685  0034A0  6F96               	movwf	(_printErrors$1665+1)& (0+255),b
 20686  0034A2  0EED               	movlw	low STR_61
 20687  0034A4  D004               	goto	L36
 20688  0034A6                     l17442:
 20689                           
 20690                           ; BSR set to: 1
 20691  0034A6  0E7F               	movlw	high STR_60
 20692  0034A8  0100               	movlb	0	; () banked
 20693  0034AA  6F96               	movwf	(_printErrors$1665+1)& (0+255),b
 20694  0034AC  0E4F               	movlw	low STR_60
 20695  0034AE                     L36:
 20696  0034AE  6F95               	movwf	_printErrors$1665& (0+255),b
 20697                           
 20698                           ; BSR set to: 0
 20699  0034B0  0E01               	movlw	high _wrkbuf
 20700  0034B2  0100               	movlb	0	; () banked
 20701  0034B4  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20702  0034B6  0E55               	movlw	low _wrkbuf
 20703  0034B8  6F6D               	movwf	?_sprintf& (0+255),b
 20704  0034BA  C095  F06F         	movff	_printErrors$1665,?_sprintf+2
 20705  0034BE  C096  F070         	movff	_printErrors$1665+1,?_sprintf+3
 20706  0034C2  CF75 F071          	movff	3957,?_sprintf+4	;volatile
 20707  0034C6  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20708  0034C8  EC14  F010         	call	_sprintf	;wreg free
 20709                           
 20710                           ; BSR set to: 0
 20711                           ;main.c: 3066: putsUSART(wrkbuf);
 20712  0034CC  0101               	movlb	1	; () banked
 20713  0034CE  0E01               	movlw	high _wrkbuf
 20714  0034D0  6E21               	movwf	?_putsUSART+1,c
 20715  0034D2  0E55               	movlw	low _wrkbuf
 20716  0034D4  6E20               	movwf	?_putsUSART,c
 20717  0034D6  ECDF  F032         	call	_putsUSART	;wreg free
 20718                           
 20719                           ;main.c: 3067: putsUSART((char *) "\r\n");
 20720  0034DA  0E72               	movlw	high (STR_241+51)
 20721  0034DC  6E21               	movwf	?_putsUSART+1,c
 20722  0034DE  0EDA               	movlw	low (STR_241+51)
 20723  0034E0  6E20               	movwf	?_putsUSART,c
 20724  0034E2  ECDF  F032         	call	_putsUSART	;wreg free
 20725                           
 20726                           ;main.c: 3069: if (COMSTATbits.RXBP) {
 20727  0034E6  A674               	btfss	3956,3,c	;volatile
 20728  0034E8  D006               	goto	l17454
 20729                           
 20730                           ;main.c: 3070: putsUSART((char *) "Receiver in Error State Bus Passive (RXERRCNT > 127)\
      +                          r\n");
 20731  0034EA  0E72               	movlw	high STR_247
 20732  0034EC  6E21               	movwf	?_putsUSART+1,c
 20733  0034EE  0E02               	movlw	low STR_247
 20734  0034F0  6E20               	movwf	?_putsUSART,c
 20735  0034F2  ECDF  F032         	call	_putsUSART	;wreg free
 20736  0034F6                     l17454:
 20737                           
 20738                           ;main.c: 3071: }
 20739                           ;main.c: 3073: if (COMSTATbits.RXWARN) {
 20740  0034F6  A274               	btfss	3956,1,c	;volatile
 20741  0034F8  D006               	goto	l1321
 20742                           
 20743                           ;main.c: 3074: putsUSART((char *) "Receiver  in Error State Warning (128 > RXERRCNT > 96
      +                          )\r\n");
 20744  0034FA  0E71               	movlw	high STR_248
 20745  0034FC  6E21               	movwf	?_putsUSART+1,c
 20746  0034FE  0E91               	movlw	low STR_248
 20747  003500  6E20               	movwf	?_putsUSART,c
 20748  003502  ECDF  F032         	call	_putsUSART	;wreg free
 20749  003506                     l1321:
 20750  003506  0012               	return	
 20751  003508                     __end_of_printErrors:
 20752                           	opt stack 0
 20753                           tblptru	equ	0xFF8
 20754                           tblptrh	equ	0xFF7
 20755                           tblptrl	equ	0xFF6
 20756                           tablat	equ	0xFF5
 20757                           prodh	equ	0xFF4
 20758                           prodl	equ	0xFF3
 20759                           intcon	equ	0xFF2
 20760                           indf0	equ	0xFEF
 20761                           postinc0	equ	0xFEE
 20762                           fsr0h	equ	0xFEA
 20763                           fsr0l	equ	0xFE9
 20764                           wreg	equ	0xFE8
 20765                           indf1	equ	0xFE7
 20766                           postinc1	equ	0xFE6
 20767                           postdec1	equ	0xFE5
 20768                           fsr1h	equ	0xFE2
 20769                           fsr1l	equ	0xFE1
 20770                           indf2	equ	0xFDF
 20771                           postinc2	equ	0xFDE
 20772                           postdec2	equ	0xFDD
 20773                           plusw2	equ	0xFDB
 20774                           fsr2h	equ	0xFDA
 20775                           fsr2l	equ	0xFD9
 20776                           status	equ	0xFD8
 20777                           
 20778 ;; *************** function _printStatistics *****************
 20779 ;; Defined at:
 20780 ;;		line 2995 in file "main.c"
 20781 ;; Parameters:    Size  Location     Type
 20782 ;;		None
 20783 ;; Auto vars:     Size  Location     Type
 20784 ;;		None
 20785 ;; Return value:  Size  Location     Type
 20786 ;;		None               void
 20787 ;; Registers used:
 20788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20789 ;; Tracked objects:
 20790 ;;		On entry : F/1
 20791 ;;		On exit  : 0/0
 20792 ;;		Unchanged: 0/0
 20793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20794 ;;      Params:         0       0       0       0       0       0       0
 20795 ;;      Locals:         0       8       0       0       0       0       0
 20796 ;;      Temps:          0       0       0       0       0       0       0
 20797 ;;      Totals:         0       8       0       0       0       0       0
 20798 ;;Total ram usage:        8 bytes
 20799 ;; Hardware stack levels used:    1
 20800 ;; Hardware stack levels required when called:    5
 20801 ;; This function calls:
 20802 ;;		_putsUSART
 20803 ;;		_sprintf
 20804 ;; This function is called by:
 20805 ;;		_doModeVerbose
 20806 ;; This function uses a non-reentrant model
 20807 ;;
 20808                           
 20809                           	psect	text41
 20810  0041F2                     __ptext41:
 20811                           	opt stack 0
 20812  0041F2                     _printStatistics:
 20813                           	opt stack 24
 20814                           
 20815                           ; BSR set to: 1
 20816                           ;main.c: 2996: putsUSART((char *) "Sent CAN frames: ");
 20817                           
 20818                           ;incstack = 0
 20819                           ;incstack = 0
 20820  0041F2  0E7D               	movlw	high STR_203
 20821  0041F4  6E21               	movwf	?_putsUSART+1,c
 20822  0041F6  0E94               	movlw	low STR_203
 20823  0041F8  6E20               	movwf	?_putsUSART,c
 20824  0041FA  ECDF  F032         	call	_putsUSART	;wreg free
 20825                           
 20826                           ;main.c: 2997: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 20827  0041FE  0101               	movlb	1	; () banked
 20828  004200  6700               	tstfsz	_bHex& (0+255),b
 20829  004202  D005               	goto	l17304
 20830                           
 20831                           ; BSR set to: 1
 20832  004204  0E7F               	movlw	high STR_184
 20833  004206  0100               	movlb	0	; () banked
 20834  004208  6F8C               	movwf	(_printStatistics$1606+1)& (0+255),b
 20835  00420A  0EDD               	movlw	low STR_184
 20836  00420C  D004               	goto	L37
 20837  00420E                     l17304:
 20838                           
 20839                           ; BSR set to: 1
 20840  00420E  0E7F               	movlw	high STR_204
 20841  004210  0100               	movlb	0	; () banked
 20842  004212  6F8C               	movwf	(_printStatistics$1606+1)& (0+255),b
 20843  004214  0E5D               	movlw	low STR_204
 20844  004216                     L37:
 20845  004216  6F8B               	movwf	_printStatistics$1606& (0+255),b
 20846                           
 20847                           ; BSR set to: 0
 20848  004218  0E01               	movlw	high _wrkbuf
 20849  00421A  0100               	movlb	0	; () banked
 20850  00421C  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20851  00421E  0E55               	movlw	low _wrkbuf
 20852  004220  6F6D               	movwf	?_sprintf& (0+255),b
 20853  004222  C08B  F06F         	movff	_printStatistics$1606,?_sprintf+2
 20854  004226  C08C  F070         	movff	_printStatistics$1606+1,?_sprintf+3
 20855  00422A  C0DA  F071         	movff	_cntTxFrames,?_sprintf+4
 20856  00422E  C0DB  F072         	movff	_cntTxFrames+1,?_sprintf+5
 20857  004232  C0DC  F073         	movff	_cntTxFrames+2,?_sprintf+6
 20858  004236  C0DD  F074         	movff	_cntTxFrames+3,?_sprintf+7
 20859  00423A  EC14  F010         	call	_sprintf	;wreg free
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;main.c: 2998: putsUSART(wrkbuf);
 20863  00423E  0101               	movlb	1	; () banked
 20864  004240  0E01               	movlw	high _wrkbuf
 20865  004242  6E21               	movwf	?_putsUSART+1,c
 20866  004244  0E55               	movlw	low _wrkbuf
 20867  004246  6E20               	movwf	?_putsUSART,c
 20868  004248  ECDF  F032         	call	_putsUSART	;wreg free
 20869                           
 20870                           ;main.c: 2999: putsUSART((char *) "\r\n");
 20871  00424C  0E72               	movlw	high (STR_241+51)
 20872  00424E  6E21               	movwf	?_putsUSART+1,c
 20873  004250  0EDA               	movlw	low (STR_241+51)
 20874  004252  6E20               	movwf	?_putsUSART,c
 20875  004254  ECDF  F032         	call	_putsUSART	;wreg free
 20876                           
 20877                           ;main.c: 3001: putsUSART((char *) "Sent CAN bytes: ");
 20878  004258  0E7D               	movlw	high STR_207
 20879  00425A  6E21               	movwf	?_putsUSART+1,c
 20880  00425C  0ED9               	movlw	low STR_207
 20881  00425E  6E20               	movwf	?_putsUSART,c
 20882  004260  ECDF  F032         	call	_putsUSART	;wreg free
 20883                           
 20884                           ;main.c: 3002: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 20885  004264  0101               	movlb	1	; () banked
 20886  004266  6700               	tstfsz	_bHex& (0+255),b
 20887  004268  D005               	goto	l17318
 20888                           
 20889                           ; BSR set to: 1
 20890  00426A  0E7F               	movlw	high STR_184
 20891  00426C  0100               	movlb	0	; () banked
 20892  00426E  6F8E               	movwf	(_printStatistics$1612+1)& (0+255),b
 20893  004270  0EDD               	movlw	low STR_184
 20894  004272  D004               	goto	L38
 20895  004274                     l17318:
 20896                           
 20897                           ; BSR set to: 1
 20898  004274  0E7F               	movlw	high STR_204
 20899  004276  0100               	movlb	0	; () banked
 20900  004278  6F8E               	movwf	(_printStatistics$1612+1)& (0+255),b
 20901  00427A  0E5D               	movlw	low STR_204
 20902  00427C                     L38:
 20903  00427C  6F8D               	movwf	_printStatistics$1612& (0+255),b
 20904                           
 20905                           ; BSR set to: 0
 20906  00427E  0E01               	movlw	high _wrkbuf
 20907  004280  0100               	movlb	0	; () banked
 20908  004282  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20909  004284  0E55               	movlw	low _wrkbuf
 20910  004286  6F6D               	movwf	?_sprintf& (0+255),b
 20911  004288  C08D  F06F         	movff	_printStatistics$1612,?_sprintf+2
 20912  00428C  C08E  F070         	movff	_printStatistics$1612+1,?_sprintf+3
 20913  004290  C0D6  F071         	movff	_cntTxBytes,?_sprintf+4
 20914  004294  C0D7  F072         	movff	_cntTxBytes+1,?_sprintf+5
 20915  004298  C0D8  F073         	movff	_cntTxBytes+2,?_sprintf+6
 20916  00429C  C0D9  F074         	movff	_cntTxBytes+3,?_sprintf+7
 20917  0042A0  EC14  F010         	call	_sprintf	;wreg free
 20918                           
 20919                           ; BSR set to: 0
 20920                           ;main.c: 3003: putsUSART(wrkbuf);
 20921  0042A4  0101               	movlb	1	; () banked
 20922  0042A6  0E01               	movlw	high _wrkbuf
 20923  0042A8  6E21               	movwf	?_putsUSART+1,c
 20924  0042AA  0E55               	movlw	low _wrkbuf
 20925  0042AC  6E20               	movwf	?_putsUSART,c
 20926  0042AE  ECDF  F032         	call	_putsUSART	;wreg free
 20927                           
 20928                           ;main.c: 3004: putsUSART((char *) "\r\n");
 20929  0042B2  0E72               	movlw	high (STR_241+51)
 20930  0042B4  6E21               	movwf	?_putsUSART+1,c
 20931  0042B6  0EDA               	movlw	low (STR_241+51)
 20932  0042B8  6E20               	movwf	?_putsUSART,c
 20933  0042BA  ECDF  F032         	call	_putsUSART	;wreg free
 20934                           
 20935                           ;main.c: 3006: putsUSART((char *) "Received CAN frames: ");
 20936  0042BE  0E7C               	movlw	high STR_211
 20937  0042C0  6E21               	movwf	?_putsUSART+1,c
 20938  0042C2  0E91               	movlw	low STR_211
 20939  0042C4  6E20               	movwf	?_putsUSART,c
 20940  0042C6  ECDF  F032         	call	_putsUSART	;wreg free
 20941                           
 20942                           ;main.c: 3007: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 20943  0042CA  0101               	movlb	1	; () banked
 20944  0042CC  6700               	tstfsz	_bHex& (0+255),b
 20945  0042CE  D005               	goto	l17332
 20946                           
 20947                           ; BSR set to: 1
 20948  0042D0  0E7F               	movlw	high STR_184
 20949  0042D2  0100               	movlb	0	; () banked
 20950  0042D4  6F90               	movwf	(_printStatistics$1618+1)& (0+255),b
 20951  0042D6  0EDD               	movlw	low STR_184
 20952  0042D8  D004               	goto	L39
 20953  0042DA                     l17332:
 20954                           
 20955                           ; BSR set to: 1
 20956  0042DA  0E7F               	movlw	high STR_204
 20957  0042DC  0100               	movlb	0	; () banked
 20958  0042DE  6F90               	movwf	(_printStatistics$1618+1)& (0+255),b
 20959  0042E0  0E5D               	movlw	low STR_204
 20960  0042E2                     L39:
 20961  0042E2  6F8F               	movwf	_printStatistics$1618& (0+255),b
 20962                           
 20963                           ; BSR set to: 0
 20964  0042E4  0E01               	movlw	high _wrkbuf
 20965  0042E6  0100               	movlb	0	; () banked
 20966  0042E8  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20967  0042EA  0E55               	movlw	low _wrkbuf
 20968  0042EC  6F6D               	movwf	?_sprintf& (0+255),b
 20969  0042EE  C08F  F06F         	movff	_printStatistics$1618,?_sprintf+2
 20970  0042F2  C090  F070         	movff	_printStatistics$1618+1,?_sprintf+3
 20971  0042F6  C0D2  F071         	movff	_cntRxFrames,?_sprintf+4
 20972  0042FA  C0D3  F072         	movff	_cntRxFrames+1,?_sprintf+5
 20973  0042FE  C0D4  F073         	movff	_cntRxFrames+2,?_sprintf+6
 20974  004302  C0D5  F074         	movff	_cntRxFrames+3,?_sprintf+7
 20975  004306  EC14  F010         	call	_sprintf	;wreg free
 20976                           
 20977                           ; BSR set to: 0
 20978                           ;main.c: 3008: putsUSART(wrkbuf);
 20979  00430A  0101               	movlb	1	; () banked
 20980  00430C  0E01               	movlw	high _wrkbuf
 20981  00430E  6E21               	movwf	?_putsUSART+1,c
 20982  004310  0E55               	movlw	low _wrkbuf
 20983  004312  6E20               	movwf	?_putsUSART,c
 20984  004314  ECDF  F032         	call	_putsUSART	;wreg free
 20985                           
 20986                           ;main.c: 3009: putsUSART((char *) "\r\n");
 20987  004318  0E72               	movlw	high (STR_241+51)
 20988  00431A  6E21               	movwf	?_putsUSART+1,c
 20989  00431C  0EDA               	movlw	low (STR_241+51)
 20990  00431E  6E20               	movwf	?_putsUSART,c
 20991  004320  ECDF  F032         	call	_putsUSART	;wreg free
 20992                           
 20993                           ;main.c: 3011: putsUSART((char *) "Received CAN bytes: ");
 20994  004324  0E7C               	movlw	high STR_215
 20995  004326  6E21               	movwf	?_putsUSART+1,c
 20996  004328  0EBC               	movlw	low STR_215
 20997  00432A  6E20               	movwf	?_putsUSART,c
 20998  00432C  ECDF  F032         	call	_putsUSART	;wreg free
 20999                           
 21000                           ;main.c: 3012: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 21001  004330  0101               	movlb	1	; () banked
 21002  004332  6700               	tstfsz	_bHex& (0+255),b
 21003  004334  D005               	goto	l17346
 21004                           
 21005                           ; BSR set to: 1
 21006  004336  0E7F               	movlw	high STR_184
 21007  004338  0100               	movlb	0	; () banked
 21008  00433A  6F92               	movwf	(_printStatistics$1624+1)& (0+255),b
 21009  00433C  0EDD               	movlw	low STR_184
 21010  00433E  D004               	goto	L40
 21011  004340                     l17346:
 21012                           
 21013                           ; BSR set to: 1
 21014  004340  0E7F               	movlw	high STR_204
 21015  004342  0100               	movlb	0	; () banked
 21016  004344  6F92               	movwf	(_printStatistics$1624+1)& (0+255),b
 21017  004346  0E5D               	movlw	low STR_204
 21018  004348                     L40:
 21019  004348  6F91               	movwf	_printStatistics$1624& (0+255),b
 21020                           
 21021                           ; BSR set to: 0
 21022  00434A  0E01               	movlw	high _wrkbuf
 21023  00434C  0100               	movlb	0	; () banked
 21024  00434E  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 21025  004350  0E55               	movlw	low _wrkbuf
 21026  004352  6F6D               	movwf	?_sprintf& (0+255),b
 21027  004354  C091  F06F         	movff	_printStatistics$1624,?_sprintf+2
 21028  004358  C092  F070         	movff	_printStatistics$1624+1,?_sprintf+3
 21029  00435C  C0CE  F071         	movff	_cntRxBytes,?_sprintf+4
 21030  004360  C0CF  F072         	movff	_cntRxBytes+1,?_sprintf+5
 21031  004364  C0D0  F073         	movff	_cntRxBytes+2,?_sprintf+6
 21032  004368  C0D1  F074         	movff	_cntRxBytes+3,?_sprintf+7
 21033  00436C  EC14  F010         	call	_sprintf	;wreg free
 21034                           
 21035                           ; BSR set to: 0
 21036                           ;main.c: 3013: putsUSART(wrkbuf);
 21037  004370  0101               	movlb	1	; () banked
 21038  004372  0E01               	movlw	high _wrkbuf
 21039  004374  6E21               	movwf	?_putsUSART+1,c
 21040  004376  0E55               	movlw	low _wrkbuf
 21041  004378  6E20               	movwf	?_putsUSART,c
 21042  00437A  ECDF  F032         	call	_putsUSART	;wreg free
 21043                           
 21044                           ;main.c: 3014: putsUSART((char *) "\r\n");
 21045  00437E  0E72               	movlw	high (STR_241+51)
 21046  004380  6E21               	movwf	?_putsUSART+1,c
 21047  004382  0EDA               	movlw	low (STR_241+51)
 21048  004384  6E20               	movwf	?_putsUSART,c
 21049  004386  EFDF  F032         	goto	_putsUSART	;wreg free
 21050  00438A                     __end_of_printStatistics:
 21051                           	opt stack 0
 21052                           tblptru	equ	0xFF8
 21053                           tblptrh	equ	0xFF7
 21054                           tblptrl	equ	0xFF6
 21055                           tablat	equ	0xFF5
 21056                           prodh	equ	0xFF4
 21057                           prodl	equ	0xFF3
 21058                           intcon	equ	0xFF2
 21059                           indf0	equ	0xFEF
 21060                           postinc0	equ	0xFEE
 21061                           fsr0h	equ	0xFEA
 21062                           fsr0l	equ	0xFE9
 21063                           wreg	equ	0xFE8
 21064                           indf1	equ	0xFE7
 21065                           postinc1	equ	0xFE6
 21066                           postdec1	equ	0xFE5
 21067                           fsr1h	equ	0xFE2
 21068                           fsr1l	equ	0xFE1
 21069                           indf2	equ	0xFDF
 21070                           postinc2	equ	0xFDE
 21071                           postdec2	equ	0xFDD
 21072                           plusw2	equ	0xFDB
 21073                           fsr2h	equ	0xFDA
 21074                           fsr2l	equ	0xFD9
 21075                           status	equ	0xFD8
 21076                           
 21077 ;; *************** function _atoi *****************
 21078 ;; Defined at:
 21079 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/atoi.c"
 21080 ;; Parameters:    Size  Location     Type
 21081 ;;  s               2    2[BANK0 ] PTR const unsigned char 
 21082 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21083 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21084 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21085 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21086 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21087 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 21088 ;;		 -> cmdbuf(80), 
 21089 ;; Auto vars:     Size  Location     Type
 21090 ;;  a               2    7[BANK0 ] int 
 21091 ;;  sign            1    6[BANK0 ] unsigned char 
 21092 ;; Return value:  Size  Location     Type
 21093 ;;                  2    2[BANK0 ] int 
 21094 ;; Registers used:
 21095 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21096 ;; Tracked objects:
 21097 ;;		On entry : C/2
 21098 ;;		On exit  : F/0
 21099 ;;		Unchanged: 0/0
 21100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21101 ;;      Params:         0       2       0       0       0       0       0
 21102 ;;      Locals:         0       3       0       0       0       0       0
 21103 ;;      Temps:          0       2       0       0       0       0       0
 21104 ;;      Totals:         0       7       0       0       0       0       0
 21105 ;;Total ram usage:        7 bytes
 21106 ;; Hardware stack levels used:    1
 21107 ;; Hardware stack levels required when called:    4
 21108 ;; This function calls:
 21109 ;;		_isdigit
 21110 ;;		___wmul
 21111 ;; This function is called by:
 21112 ;;		_doModeVerbose
 21113 ;; This function uses a non-reentrant model
 21114 ;;
 21115                           
 21116                           	psect	text42
 21117  004DA0                     __ptext42:
 21118                           	opt stack 0
 21119  004DA0                     _atoi:
 21120                           	opt stack 25
 21121                           
 21122                           ;incstack = 0
 21123                           ;incstack = 0
 21124  004DA0  D003               	goto	l17256
 21125  004DA2                     l17254:
 21126  004DA2  0100               	movlb	0	; () banked
 21127  004DA4  4B62               	infsnz	atoi@s& (0+255),f,b
 21128  004DA6  2B63               	incf	(atoi@s+1)& (0+255),f,b
 21129  004DA8                     l17256:
 21130  004DA8  0100               	movlb	0	; () banked
 21131  004DAA  D877               	call	PL32	;call to abstracted procedure
 21132  004DAC  64EA               	cpfsgt	fsr0h,c
 21133  004DAE  D003               	bra	u22427
 21134  004DB0  6EEA               	movwf	fsr0h,c
 21135  004DB2  50EF               	movf	indf0,w,c
 21136  004DB4  D003               	bra	u22420
 21137  004DB6                     u22427:
 21138  004DB6  6EF7               	movwf	tblptrh,c
 21139  004DB8  0008               	tblrd		*
 21140  004DBA  50F5               	movf	tablat,w,c
 21141  004DBC                     u22420:
 21142  004DBC  0A20               	xorlw	32
 21143  004DBE  E0F1               	bz	l17254
 21144  004DC0  0100               	movlb	0	; () banked
 21145  004DC2  D86B               	call	PL32	;call to abstracted procedure
 21146  004DC4  64EA               	cpfsgt	fsr0h,c
 21147  004DC6  D003               	bra	u22447
 21148  004DC8  6EEA               	movwf	fsr0h,c
 21149  004DCA  50EF               	movf	indf0,w,c
 21150  004DCC  D003               	bra	u22440
 21151  004DCE                     u22447:
 21152  004DCE  6EF7               	movwf	tblptrh,c
 21153  004DD0  0008               	tblrd		*
 21154  004DD2  50F5               	movf	tablat,w,c
 21155  004DD4                     u22440:
 21156  004DD4  0A09               	xorlw	9
 21157  004DD6  E0E5               	bz	l17254
 21158  004DD8  0100               	movlb	0	; () banked
 21159  004DDA  6B67               	clrf	atoi@a& (0+255),b
 21160  004DDC  6B68               	clrf	(atoi@a+1)& (0+255),b
 21161  004DDE  6B66               	clrf	atoi@sign& (0+255),b
 21162                           
 21163                           ; BSR set to: 0
 21164  004DE0  D85C               	call	PL32	;call to abstracted procedure
 21165  004DE2  64EA               	cpfsgt	fsr0h,c
 21166  004DE4  D003               	bra	u22467
 21167  004DE6  6EEA               	movwf	fsr0h,c
 21168  004DE8  50EF               	movf	indf0,w,c
 21169  004DEA  D003               	bra	u22460
 21170  004DEC                     u22467:
 21171  004DEC  6EF7               	movwf	tblptrh,c
 21172  004DEE  0008               	tblrd		*
 21173  004DF0  50F5               	movf	tablat,w,c
 21174  004DF2                     u22460:
 21175  004DF2  0A2D               	xorlw	45
 21176  004DF4  E103               	bnz	l17264
 21177  004DF6  0100               	movlb	0	; () banked
 21178  004DF8  2B66               	incf	atoi@sign& (0+255),f,b
 21179  004DFA  D00D               	goto	L41
 21180  004DFC                     l17264:
 21181  004DFC  0100               	movlb	0	; () banked
 21182  004DFE  D84D               	call	PL32	;call to abstracted procedure
 21183  004E00  64EA               	cpfsgt	fsr0h,c
 21184  004E02  D003               	bra	u22487
 21185  004E04  6EEA               	movwf	fsr0h,c
 21186  004E06  50EF               	movf	indf0,w,c
 21187  004E08  D003               	bra	u22480
 21188  004E0A                     u22487:
 21189  004E0A  6EF7               	movwf	tblptrh,c
 21190  004E0C  0008               	tblrd		*
 21191  004E0E  50F5               	movf	tablat,w,c
 21192  004E10                     u22480:
 21193  004E10  0A2B               	xorlw	43
 21194  004E12  E121               	bnz	l17272
 21195  004E14                     l17266:
 21196  004E14  0100               	movlb	0	; () banked
 21197  004E16                     L41:
 21198  004E16  4B62               	infsnz	atoi@s& (0+255),f,b
 21199  004E18  2B63               	incf	(atoi@s+1)& (0+255),f,b
 21200  004E1A  D01D               	goto	l17272
 21201  004E1C                     l17268:
 21202  004E1C  C067  F023         	movff	atoi@a,?___wmul
 21203  004E20  C068  F024         	movff	atoi@a+1,?___wmul+1
 21204  004E24  6A26               	clrf	?___wmul+3,c
 21205  004E26  0E0A               	movlw	10
 21206  004E28  6E25               	movwf	?___wmul+2,c
 21207  004E2A  EC53  F034         	call	___wmul	;wreg free
 21208  004E2E  D835               	call	PL32	;call to abstracted procedure
 21209  004E30  64EA               	cpfsgt	fsr0h,c
 21210  004E32  D003               	bra	u22507
 21211  004E34  6EEA               	movwf	fsr0h,c
 21212  004E36  50EF               	movf	indf0,w,c
 21213  004E38  D003               	bra	u22500
 21214  004E3A                     u22507:
 21215  004E3A  6EF7               	movwf	tblptrh,c
 21216  004E3C  0008               	tblrd		*
 21217  004E3E  50F5               	movf	tablat,w,c
 21218  004E40                     u22500:
 21219  004E40  2623               	addwf	?___wmul,f,c
 21220  004E42  0E00               	movlw	0
 21221  004E44  2224               	addwfc	?___wmul+1,f,c
 21222  004E46  0ED0               	movlw	208
 21223  004E48  2423               	addwf	?___wmul,w,c
 21224  004E4A  0100               	movlb	0	; () banked
 21225  004E4C  6F67               	movwf	atoi@a& (0+255),b
 21226  004E4E  0EFF               	movlw	255
 21227  004E50  2024               	addwfc	?___wmul+1,w,c
 21228  004E52  6F68               	movwf	(atoi@a+1)& (0+255),b
 21229  004E54  D7DF               	goto	l17266
 21230  004E56                     l17272:
 21231  004E56  0100               	movlb	0	; () banked
 21232  004E58  D820               	call	PL32	;call to abstracted procedure
 21233  004E5A  64EA               	cpfsgt	fsr0h,c
 21234  004E5C  D003               	bra	u22517
 21235  004E5E  6EEA               	movwf	fsr0h,c
 21236  004E60  50EF               	movf	indf0,w,c
 21237  004E62  D003               	bra	u22510
 21238  004E64                     u22517:
 21239  004E64  6EF7               	movwf	tblptrh,c
 21240  004E66  0008               	tblrd		*
 21241  004E68  50F5               	movf	tablat,w,c
 21242  004E6A                     u22510:
 21243  004E6A  EC47  F035         	call	_isdigit
 21244  004E6E  E2D6               	bc	l17268
 21245  004E70  0100               	movlb	0	; () banked
 21246  004E72  5166               	movf	atoi@sign& (0+255),w,b
 21247  004E74  E00D               	bz	l2246
 21248                           
 21249                           ; BSR set to: 0
 21250  004E76  C067  F064         	movff	atoi@a,??_atoi
 21251  004E7A  C068  F065         	movff	atoi@a+1,??_atoi+1
 21252  004E7E  1F64               	comf	??_atoi& (0+255),f,b
 21253  004E80  1F65               	comf	(??_atoi+1)& (0+255),f,b
 21254  004E82  4B64               	infsnz	??_atoi& (0+255),f,b
 21255  004E84  2B65               	incf	(??_atoi+1)& (0+255),f,b
 21256  004E86  C064  F062         	movff	??_atoi,?_atoi
 21257  004E8A  C065  F063         	movff	??_atoi+1,?_atoi+1
 21258  004E8E  D004               	goto	l2247
 21259  004E90                     l2246:
 21260                           
 21261                           ; BSR set to: 0
 21262  004E90  C067  F062         	movff	atoi@a,?_atoi
 21263  004E94  C068  F063         	movff	atoi@a+1,?_atoi+1
 21264  004E98                     l2247:
 21265                           
 21266                           ; BSR set to: 0
 21267  004E98  0012               	return	
 21268  004E9A                     __end_of_atoi:
 21269                           	opt stack 0
 21270  004E9A                     PL32:
 21271                           	opt stack 25
 21272  004E9A  5162               	movf	atoi@s& (0+255),w,b
 21273  004E9C  6EF6               	movwf	tblptrl,c
 21274  004E9E  6EE9               	movwf	fsr0l,c
 21275  004EA0  0E05               	movlw	(high __ramtop+-1)
 21276  004EA2  6EEA               	movwf	fsr0h,c
 21277  004EA4  5163               	movf	(atoi@s+1)& (0+255),w,b
 21278  004EA6  0012               	return	
 21279  004EA8                     __end_ofPL32:
 21280                           	opt stack 0
 21281                           tblptru	equ	0xFF8
 21282                           tblptrh	equ	0xFF7
 21283                           tblptrl	equ	0xFF6
 21284                           tablat	equ	0xFF5
 21285                           prodh	equ	0xFF4
 21286                           prodl	equ	0xFF3
 21287                           intcon	equ	0xFF2
 21288                           indf0	equ	0xFEF
 21289                           postinc0	equ	0xFEE
 21290                           fsr0h	equ	0xFEA
 21291                           fsr0l	equ	0xFE9
 21292                           wreg	equ	0xFE8
 21293                           indf1	equ	0xFE7
 21294                           postinc1	equ	0xFE6
 21295                           postdec1	equ	0xFE5
 21296                           fsr1h	equ	0xFE2
 21297                           fsr1l	equ	0xFE1
 21298                           indf2	equ	0xFDF
 21299                           postinc2	equ	0xFDE
 21300                           postdec2	equ	0xFDD
 21301                           plusw2	equ	0xFDB
 21302                           fsr2h	equ	0xFDA
 21303                           fsr2l	equ	0xFD9
 21304                           status	equ	0xFD8
 21305                           
 21306 ;; *************** function _strtok *****************
 21307 ;; Defined at:
 21308 ;;		line 11 in file "/opt/microchip/xc8/v1.21/sources/common/strtok.c"
 21309 ;; Parameters:    Size  Location     Type
 21310 ;;  s1              2    4[BANK0 ] PTR unsigned char 
 21311 ;;		 -> NULL(0), cmdbuf(80), 
 21312 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 21313 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21314 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21315 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21316 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21317 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21318 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21319 ;; Auto vars:     Size  Location     Type
 21320 ;;		None
 21321 ;; Return value:  Size  Location     Type
 21322 ;;                  2    4[BANK0 ] PTR unsigned char 
 21323 ;; Registers used:
 21324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21325 ;; Tracked objects:
 21326 ;;		On entry : F/0
 21327 ;;		On exit  : F/0
 21328 ;;		Unchanged: 0/0
 21329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21330 ;;      Params:         0       4       0       0       0       0       0
 21331 ;;      Locals:         0       0       0       0       0       0       0
 21332 ;;      Temps:          0       0       0       0       0       0       0
 21333 ;;      Totals:         0       4       0       0       0       0       0
 21334 ;;Total ram usage:        4 bytes
 21335 ;; Hardware stack levels used:    1
 21336 ;; Hardware stack levels required when called:    5
 21337 ;; This function calls:
 21338 ;;		_strspn
 21339 ;;		_strcspn
 21340 ;; This function is called by:
 21341 ;;		_doModeVerbose
 21342 ;; This function uses a non-reentrant model
 21343 ;;
 21344                           
 21345                           	psect	text43
 21346  005DDC                     __ptext43:
 21347                           	opt stack 0
 21348  005DDC                     _strtok:
 21349                           	opt stack 24
 21350                           
 21351                           ; BSR set to: 0
 21352                           
 21353                           ; BSR set to: 0
 21354                           ;incstack = 0
 21355                           ;incstack = 0
 21356  005DDC  5165               	movf	(strtok@s1+1)& (0+255),w,b
 21357  005DDE  1164               	iorwf	strtok@s1& (0+255),w,b
 21358  005DE0  E104               	bnz	l17234
 21359                           
 21360                           ; BSR set to: 0
 21361  005DE2  C02C  F064         	movff	strtok@sp,strtok@s1
 21362  005DE6  C02D  F065         	movff	strtok@sp+1,strtok@s1+1
 21363  005DEA                     l17234:
 21364                           
 21365                           ; BSR set to: 0
 21366  005DEA  5165               	movf	(strtok@s1+1)& (0+255),w,b
 21367  005DEC  1164               	iorwf	strtok@s1& (0+255),w,b
 21368  005DEE  E017               	bz	L42
 21369                           
 21370                           ; BSR set to: 0
 21371                           
 21372                           ; BSR set to: 0
 21373  005DF0  C064  F060         	movff	strtok@s1,?_strspn
 21374  005DF4  C065  F061         	movff	strtok@s1+1,?_strspn+1
 21375  005DF8  C066  F062         	movff	strtok@s2,?_strspn+2
 21376  005DFC  C067  F063         	movff	strtok@s2+1,?_strspn+3
 21377  005E00  EC74  F033         	call	_strspn	;wreg free
 21378  005E04  0100               	movlb	0	; () banked
 21379  005E06  5160               	movf	?_strspn& (0+255),w,b
 21380  005E08  2764               	addwf	strtok@s1& (0+255),f,b
 21381  005E0A  5161               	movf	(?_strspn+1)& (0+255),w,b
 21382  005E0C  2365               	addwfc	(strtok@s1+1)& (0+255),f,b
 21383                           
 21384                           ; BSR set to: 0
 21385  005E0E  C064  FFD9         	movff	strtok@s1,fsr2l
 21386  005E12  C065  FFDA         	movff	strtok@s1+1,fsr2h
 21387  005E16  50DF               	movf	indf2,w,c
 21388  005E18  E105               	bnz	l17244
 21389                           
 21390                           ; BSR set to: 0
 21391  005E1A  6A2C               	clrf	strtok@sp,c
 21392  005E1C  6A2D               	clrf	strtok@sp+1,c
 21393  005E1E                     L42:
 21394  005E1E  6B64               	clrf	?_strtok& (0+255),b
 21395  005E20  6B65               	clrf	(?_strtok+1)& (0+255),b
 21396  005E22  D026               	goto	l2739
 21397  005E24                     l17244:
 21398                           
 21399                           ; BSR set to: 0
 21400  005E24  C064  F060         	movff	strtok@s1,?_strcspn
 21401  005E28  C065  F061         	movff	strtok@s1+1,?_strcspn+1
 21402  005E2C  C066  F062         	movff	strtok@s2,?_strcspn+2
 21403  005E30  C067  F063         	movff	strtok@s2+1,?_strcspn+3
 21404  005E34  EC51  F033         	call	_strcspn	;wreg free
 21405  005E38  0100               	movlb	0	; () banked
 21406  005E3A  5160               	movf	?_strcspn& (0+255),w,b
 21407  005E3C  2564               	addwf	strtok@s1& (0+255),w,b
 21408  005E3E  6E2C               	movwf	strtok@sp,c
 21409  005E40  5161               	movf	(?_strcspn+1)& (0+255),w,b
 21410  005E42  2165               	addwfc	(strtok@s1+1)& (0+255),w,b
 21411  005E44  6E2D               	movwf	strtok@sp+1,c
 21412                           
 21413                           ; BSR set to: 0
 21414  005E46  C02C  FFD9         	movff	strtok@sp,fsr2l
 21415  005E4A  C02D  FFDA         	movff	strtok@sp+1,fsr2h
 21416  005E4E  50DF               	movf	indf2,w,c
 21417  005E50  E009               	bz	l2741
 21418                           
 21419                           ; BSR set to: 0
 21420  005E52  C02C  FFD9         	movff	strtok@sp,fsr2l
 21421  005E56  C02D  FFDA         	movff	strtok@sp+1,fsr2h
 21422  005E5A  0E00               	movlw	0
 21423  005E5C  6EDF               	movwf	indf2,c
 21424                           
 21425                           ; BSR set to: 0
 21426  005E5E  4A2C               	infsnz	strtok@sp,f,c
 21427  005E60  2A2D               	incf	strtok@sp+1,f,c
 21428  005E62  D002               	goto	l2742
 21429  005E64                     l2741:
 21430                           
 21431                           ; BSR set to: 0
 21432  005E64  6A2C               	clrf	strtok@sp,c
 21433  005E66  6A2D               	clrf	strtok@sp+1,c
 21434  005E68                     l2742:
 21435                           
 21436                           ; BSR set to: 0
 21437  005E68  C064  F064         	movff	strtok@s1,?_strtok
 21438  005E6C  C065  F065         	movff	strtok@s1+1,?_strtok+1
 21439  005E70                     l2739:
 21440                           
 21441                           ; BSR set to: 0
 21442  005E70  0012               	return	
 21443  005E72                     __end_of_strtok:
 21444                           	opt stack 0
 21445                           tblptru	equ	0xFF8
 21446                           tblptrh	equ	0xFF7
 21447                           tblptrl	equ	0xFF6
 21448                           tablat	equ	0xFF5
 21449                           prodh	equ	0xFF4
 21450                           prodl	equ	0xFF3
 21451                           intcon	equ	0xFF2
 21452                           indf0	equ	0xFEF
 21453                           postinc0	equ	0xFEE
 21454                           fsr0h	equ	0xFEA
 21455                           fsr0l	equ	0xFE9
 21456                           wreg	equ	0xFE8
 21457                           indf1	equ	0xFE7
 21458                           postinc1	equ	0xFE6
 21459                           postdec1	equ	0xFE5
 21460                           fsr1h	equ	0xFE2
 21461                           fsr1l	equ	0xFE1
 21462                           indf2	equ	0xFDF
 21463                           postinc2	equ	0xFDE
 21464                           postdec2	equ	0xFDD
 21465                           plusw2	equ	0xFDB
 21466                           fsr2h	equ	0xFDA
 21467                           fsr2l	equ	0xFD9
 21468                           status	equ	0xFD8
 21469                           
 21470 ;; *************** function _strcspn *****************
 21471 ;; Defined at:
 21472 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/strcspn.c"
 21473 ;; Parameters:    Size  Location     Type
 21474 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 21475 ;;		 -> NULL(0), cmdbuf(80), 
 21476 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 21477 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21478 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21479 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21480 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21481 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21482 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21483 ;; Auto vars:     Size  Location     Type
 21484 ;;  i               2   36[COMRAM] unsigned int 
 21485 ;; Return value:  Size  Location     Type
 21486 ;;                  2    0[BANK0 ] unsigned int 
 21487 ;; Registers used:
 21488 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21489 ;; Tracked objects:
 21490 ;;		On entry : F/0
 21491 ;;		On exit  : 0/0
 21492 ;;		Unchanged: 0/0
 21493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21494 ;;      Params:         0       4       0       0       0       0       0
 21495 ;;      Locals:         2       0       0       0       0       0       0
 21496 ;;      Temps:          0       0       0       0       0       0       0
 21497 ;;      Totals:         2       4       0       0       0       0       0
 21498 ;;Total ram usage:        6 bytes
 21499 ;; Hardware stack levels used:    1
 21500 ;; Hardware stack levels required when called:    4
 21501 ;; This function calls:
 21502 ;;		_strchr
 21503 ;; This function is called by:
 21504 ;;		_strtok
 21505 ;; This function uses a non-reentrant model
 21506 ;;
 21507                           
 21508                           	psect	text44
 21509  0066A2                     __ptext44:
 21510                           	opt stack 0
 21511  0066A2                     _strcspn:
 21512                           	opt stack 24
 21513                           
 21514                           ; BSR set to: 0
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;incstack = 0
 21518                           ;incstack = 0
 21519  0066A2  6A25               	clrf	strcspn@i,c
 21520  0066A4  6A26               	clrf	strcspn@i+1,c
 21521  0066A6  D005               	goto	l19022
 21522  0066A8                     l19020:
 21523  0066A8  0100               	movlb	0	; () banked
 21524  0066AA  4B60               	infsnz	strcspn@s1& (0+255),f,b
 21525  0066AC  2B61               	incf	(strcspn@s1+1)& (0+255),f,b
 21526  0066AE  4A25               	infsnz	strcspn@i,f,c
 21527  0066B0  2A26               	incf	strcspn@i+1,f,c
 21528  0066B2                     l19022:
 21529                           
 21530                           ; BSR set to: 0
 21531  0066B2  C060  FFD9         	movff	strcspn@s1,fsr2l
 21532  0066B6  C061  FFDA         	movff	strcspn@s1+1,fsr2h
 21533  0066BA  50DF               	movf	indf2,w,c
 21534  0066BC  E010               	bz	l2766
 21535                           
 21536                           ; BSR set to: 0
 21537  0066BE  C062  F01F         	movff	strcspn@s2,?_strchr
 21538  0066C2  C063  F020         	movff	strcspn@s2+1,?_strchr+1
 21539  0066C6  C060  FFD9         	movff	strcspn@s1,fsr2l
 21540  0066CA  C061  FFDA         	movff	strcspn@s1+1,fsr2h
 21541  0066CE  50DF               	movf	indf2,w,c
 21542  0066D0  6E21               	movwf	?_strchr+2,c
 21543  0066D2  6A22               	clrf	?_strchr+3,c
 21544  0066D4  EC58  F032         	call	_strchr	;wreg free
 21545  0066D8  5020               	movf	?_strchr+1,w,c
 21546  0066DA  101F               	iorwf	?_strchr,w,c
 21547  0066DC  E0E5               	bz	l19020
 21548  0066DE                     l2766:
 21549  0066DE  C025  F060         	movff	strcspn@i,?_strcspn
 21550  0066E2  C026  F061         	movff	strcspn@i+1,?_strcspn+1
 21551  0066E6  0012               	return	
 21552  0066E8                     __end_of_strcspn:
 21553                           	opt stack 0
 21554                           tblptru	equ	0xFF8
 21555                           tblptrh	equ	0xFF7
 21556                           tblptrl	equ	0xFF6
 21557                           tablat	equ	0xFF5
 21558                           prodh	equ	0xFF4
 21559                           prodl	equ	0xFF3
 21560                           intcon	equ	0xFF2
 21561                           indf0	equ	0xFEF
 21562                           postinc0	equ	0xFEE
 21563                           fsr0h	equ	0xFEA
 21564                           fsr0l	equ	0xFE9
 21565                           wreg	equ	0xFE8
 21566                           indf1	equ	0xFE7
 21567                           postinc1	equ	0xFE6
 21568                           postdec1	equ	0xFE5
 21569                           fsr1h	equ	0xFE2
 21570                           fsr1l	equ	0xFE1
 21571                           indf2	equ	0xFDF
 21572                           postinc2	equ	0xFDE
 21573                           postdec2	equ	0xFDD
 21574                           plusw2	equ	0xFDB
 21575                           fsr2h	equ	0xFDA
 21576                           fsr2l	equ	0xFD9
 21577                           status	equ	0xFD8
 21578                           
 21579 ;; *************** function _strspn *****************
 21580 ;; Defined at:
 21581 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/strspn.c"
 21582 ;; Parameters:    Size  Location     Type
 21583 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 21584 ;;		 -> NULL(0), cmdbuf(80), 
 21585 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 21586 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21587 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21588 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21589 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21590 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21591 ;;		 -> STR_32(2), STR_31(2), STR_30(2), 
 21592 ;; Auto vars:     Size  Location     Type
 21593 ;;  i               2   36[COMRAM] unsigned int 
 21594 ;; Return value:  Size  Location     Type
 21595 ;;                  2    0[BANK0 ] unsigned int 
 21596 ;; Registers used:
 21597 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21598 ;; Tracked objects:
 21599 ;;		On entry : F/0
 21600 ;;		On exit  : 0/0
 21601 ;;		Unchanged: 0/0
 21602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21603 ;;      Params:         0       4       0       0       0       0       0
 21604 ;;      Locals:         2       0       0       0       0       0       0
 21605 ;;      Temps:          0       0       0       0       0       0       0
 21606 ;;      Totals:         2       4       0       0       0       0       0
 21607 ;;Total ram usage:        6 bytes
 21608 ;; Hardware stack levels used:    1
 21609 ;; Hardware stack levels required when called:    4
 21610 ;; This function calls:
 21611 ;;		_strchr
 21612 ;; This function is called by:
 21613 ;;		_strtok
 21614 ;; This function uses a non-reentrant model
 21615 ;;
 21616                           
 21617                           	psect	text45
 21618  0066E8                     __ptext45:
 21619                           	opt stack 0
 21620  0066E8                     _strspn:
 21621                           	opt stack 24
 21622                           
 21623                           ; BSR set to: 0
 21624                           
 21625                           ;incstack = 0
 21626                           ;incstack = 0
 21627  0066E8  6A25               	clrf	strspn@i,c
 21628  0066EA  6A26               	clrf	strspn@i+1,c
 21629  0066EC  D005               	goto	l19014
 21630  0066EE                     l19012:
 21631  0066EE  0100               	movlb	0	; () banked
 21632  0066F0  4B60               	infsnz	strspn@s1& (0+255),f,b
 21633  0066F2  2B61               	incf	(strspn@s1+1)& (0+255),f,b
 21634  0066F4  4A25               	infsnz	strspn@i,f,c
 21635  0066F6  2A26               	incf	strspn@i+1,f,c
 21636  0066F8                     l19014:
 21637                           
 21638                           ; BSR set to: 0
 21639  0066F8  C060  FFD9         	movff	strspn@s1,fsr2l
 21640  0066FC  C061  FFDA         	movff	strspn@s1+1,fsr2h
 21641  006700  50DF               	movf	indf2,w,c
 21642  006702  E010               	bz	l2785
 21643                           
 21644                           ; BSR set to: 0
 21645  006704  C062  F01F         	movff	strspn@s2,?_strchr
 21646  006708  C063  F020         	movff	strspn@s2+1,?_strchr+1
 21647  00670C  C060  FFD9         	movff	strspn@s1,fsr2l
 21648  006710  C061  FFDA         	movff	strspn@s1+1,fsr2h
 21649  006714  50DF               	movf	indf2,w,c
 21650  006716  6E21               	movwf	?_strchr+2,c
 21651  006718  6A22               	clrf	?_strchr+3,c
 21652  00671A  EC58  F032         	call	_strchr	;wreg free
 21653  00671E  5020               	movf	?_strchr+1,w,c
 21654  006720  101F               	iorwf	?_strchr,w,c
 21655  006722  E1E5               	bnz	l19012
 21656  006724                     l2785:
 21657  006724  C025  F060         	movff	strspn@i,?_strspn
 21658  006728  C026  F061         	movff	strspn@i+1,?_strspn+1
 21659  00672C  0012               	return	
 21660  00672E                     __end_of_strspn:
 21661                           	opt stack 0
 21662                           tblptru	equ	0xFF8
 21663                           tblptrh	equ	0xFF7
 21664                           tblptrl	equ	0xFF6
 21665                           tablat	equ	0xFF5
 21666                           prodh	equ	0xFF4
 21667                           prodl	equ	0xFF3
 21668                           intcon	equ	0xFF2
 21669                           indf0	equ	0xFEF
 21670                           postinc0	equ	0xFEE
 21671                           fsr0h	equ	0xFEA
 21672                           fsr0l	equ	0xFE9
 21673                           wreg	equ	0xFE8
 21674                           indf1	equ	0xFE7
 21675                           postinc1	equ	0xFE6
 21676                           postdec1	equ	0xFE5
 21677                           fsr1h	equ	0xFE2
 21678                           fsr1l	equ	0xFE1
 21679                           indf2	equ	0xFDF
 21680                           postinc2	equ	0xFDE
 21681                           postdec2	equ	0xFDD
 21682                           plusw2	equ	0xFDB
 21683                           fsr2h	equ	0xFDA
 21684                           fsr2l	equ	0xFD9
 21685                           status	equ	0xFD8
 21686                           
 21687 ;; *************** function _strchr *****************
 21688 ;; Defined at:
 21689 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/strchr.c"
 21690 ;; Parameters:    Size  Location     Type
 21691 ;;  ptr             2   30[COMRAM] PTR const unsigned char 
 21692 ;;		 -> STR_130(2), STR_128(2), STR_126(2), STR_124(2), 
 21693 ;;		 -> STR_121(2), STR_117(2), STR_115(2), STR_113(2), 
 21694 ;;		 -> STR_111(2), STR_109(2), STR_106(2), STR_87(2), 
 21695 ;;		 -> STR_85(2), STR_83(2), STR_55(2), STR_53(2), 
 21696 ;;		 -> STR_51(2), STR_35(2), STR_34(2), STR_33(2), 
 21697 ;;		 -> STR_32(2), STR_31(2), NULL(0), STR_30(2), 
 21698 ;;		 -> cmdbuf(80), 
 21699 ;;  chr             2   32[COMRAM] int 
 21700 ;; Auto vars:     Size  Location     Type
 21701 ;;		None
 21702 ;; Return value:  Size  Location     Type
 21703 ;;                  2   30[COMRAM] PTR unsigned char 
 21704 ;; Registers used:
 21705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 21706 ;; Tracked objects:
 21707 ;;		On entry : D/2
 21708 ;;		On exit  : 0/0
 21709 ;;		Unchanged: 0/0
 21710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21711 ;;      Params:         4       0       0       0       0       0       0
 21712 ;;      Locals:         0       0       0       0       0       0       0
 21713 ;;      Temps:          2       0       0       0       0       0       0
 21714 ;;      Totals:         6       0       0       0       0       0       0
 21715 ;;Total ram usage:        6 bytes
 21716 ;; Hardware stack levels used:    1
 21717 ;; Hardware stack levels required when called:    3
 21718 ;; This function calls:
 21719 ;;		Nothing
 21720 ;; This function is called by:
 21721 ;;		_doModeVerbose
 21722 ;;		_strcspn
 21723 ;;		_strspn
 21724 ;; This function uses a non-reentrant model
 21725 ;;
 21726                           
 21727                           	psect	text46
 21728  0064B0                     __ptext46:
 21729                           	opt stack 0
 21730  0064B0                     _strchr:
 21731                           	opt stack 26
 21732  0064B0                     l2687:
 21733  0064B0  501F               	movf	strchr@ptr,w,c
 21734  0064B2  6EF6               	movwf	tblptrl,c
 21735  0064B4  6EE9               	movwf	fsr0l,c
 21736  0064B6  0E05               	movlw	(high __ramtop+-1)
 21737  0064B8  6EEA               	movwf	fsr0h,c
 21738  0064BA  5020               	movf	strchr@ptr+1,w,c
 21739  0064BC  64EA               	cpfsgt	fsr0h,c
 21740  0064BE  D003               	bra	u22797
 21741  0064C0  6EEA               	movwf	fsr0h,c
 21742  0064C2  50EF               	movf	indf0,w,c
 21743  0064C4  D003               	bra	u22790
 21744  0064C6                     u22797:
 21745  0064C6  6EF7               	movwf	tblptrh,c
 21746  0064C8  0008               	tblrd		*
 21747  0064CA  50F5               	movf	tablat,w,c
 21748  0064CC                     u22790:
 21749  0064CC  1821               	xorwf	strchr@chr,w,c
 21750  0064CE  E105               	bnz	l17532
 21751  0064D0  C01F  F01F         	movff	strchr@ptr,?_strchr
 21752  0064D4  C020  F020         	movff	strchr@ptr+1,?_strchr+1
 21753  0064D8  D018               	goto	l2689
 21754  0064DA                     l17532:
 21755  0064DA  501F               	movf	strchr@ptr,w,c
 21756  0064DC  6E23               	movwf	??_strchr& (0+255),c
 21757  0064DE  5020               	movf	strchr@ptr+1,w,c
 21758  0064E0  6E24               	movwf	(??_strchr+1)& (0+255),c
 21759  0064E2  4A1F               	infsnz	strchr@ptr,f,c
 21760  0064E4  2A20               	incf	strchr@ptr+1,f,c
 21761  0064E6  5023               	movf	??_strchr,w,c
 21762  0064E8  6EF6               	movwf	tblptrl,c
 21763  0064EA  6EE9               	movwf	fsr0l,c
 21764  0064EC  0E05               	movlw	(high __ramtop+-1)
 21765  0064EE  6EEA               	movwf	fsr0h,c
 21766  0064F0  5024               	movf	??_strchr+1,w,c
 21767  0064F2  64EA               	cpfsgt	fsr0h,c
 21768  0064F4  D003               	bra	u22817
 21769  0064F6  6EEA               	movwf	fsr0h,c
 21770  0064F8  50EF               	movf	indf0,w,c
 21771  0064FA  D003               	bra	u22810
 21772  0064FC                     u22817:
 21773  0064FC  6EF7               	movwf	tblptrh,c
 21774  0064FE  0008               	tblrd		*
 21775  006500  50F5               	movf	tablat,w,c
 21776  006502                     u22810:
 21777  006502  0900               	iorlw	0
 21778  006504  E1D5               	bnz	l2687
 21779  006506  6A1F               	clrf	?_strchr,c
 21780  006508  6A20               	clrf	?_strchr+1,c
 21781  00650A                     l2689:
 21782  00650A  0012               	return	
 21783  00650C                     __end_of_strchr:
 21784                           	opt stack 0
 21785                           tblptru	equ	0xFF8
 21786                           tblptrh	equ	0xFF7
 21787                           tblptrl	equ	0xFF6
 21788                           tablat	equ	0xFF5
 21789                           prodh	equ	0xFF4
 21790                           prodl	equ	0xFF3
 21791                           intcon	equ	0xFF2
 21792                           indf0	equ	0xFEF
 21793                           postinc0	equ	0xFEE
 21794                           fsr0h	equ	0xFEA
 21795                           fsr0l	equ	0xFE9
 21796                           wreg	equ	0xFE8
 21797                           indf1	equ	0xFE7
 21798                           postinc1	equ	0xFE6
 21799                           postdec1	equ	0xFE5
 21800                           fsr1h	equ	0xFE2
 21801                           fsr1l	equ	0xFE1
 21802                           indf2	equ	0xFDF
 21803                           postinc2	equ	0xFDE
 21804                           postdec2	equ	0xFDD
 21805                           plusw2	equ	0xFDB
 21806                           fsr2h	equ	0xFDA
 21807                           fsr2l	equ	0xFD9
 21808                           status	equ	0xFD8
 21809                           
 21810 ;; *************** function _stristr *****************
 21811 ;; Defined at:
 21812 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/stristr.c"
 21813 ;; Parameters:    Size  Location     Type
 21814 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 21815 ;;		 -> NULL(0), cmdbuf(80), 
 21816 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 21817 ;;		 -> STR_169(2), STR_168(9), STR_165(10), STR_162(4), 
 21818 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 21819 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 21820 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 21821 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 21822 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 21823 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 21824 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 21825 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 21826 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 21827 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 21828 ;; Auto vars:     Size  Location     Type
 21829 ;;		None
 21830 ;; Return value:  Size  Location     Type
 21831 ;;                  2    6[BANK0 ] PTR unsigned char 
 21832 ;; Registers used:
 21833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 21834 ;; Tracked objects:
 21835 ;;		On entry : F/0
 21836 ;;		On exit  : F/0
 21837 ;;		Unchanged: 0/0
 21838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21839 ;;      Params:         0       4       0       0       0       0       0
 21840 ;;      Locals:         0       0       0       0       0       0       0
 21841 ;;      Temps:          0       0       0       0       0       0       0
 21842 ;;      Totals:         0       4       0       0       0       0       0
 21843 ;;Total ram usage:        4 bytes
 21844 ;; Hardware stack levels used:    1
 21845 ;; Hardware stack levels required when called:    5
 21846 ;; This function calls:
 21847 ;;		_strlen
 21848 ;;		_strnicmp
 21849 ;;		_strichr
 21850 ;; This function is called by:
 21851 ;;		_doModeVerbose
 21852 ;; This function uses a non-reentrant model
 21853 ;;
 21854                           
 21855                           	psect	text47
 21856  006084                     __ptext47:
 21857                           	opt stack 0
 21858  006084                     _stristr:
 21859                           	opt stack 24
 21860                           
 21861                           ; BSR set to: 0
 21862                           
 21863                           ;incstack = 0
 21864                           ;incstack = 0
 21865  006084  D02F               	goto	l17226
 21866  006086                     l17220:
 21867                           
 21868                           ; BSR set to: 0
 21869  006086  C066  F060         	movff	stristr@s1,?_strnicmp
 21870  00608A  C067  F061         	movff	stristr@s1+1,?_strnicmp+1
 21871  00608E  C068  F062         	movff	stristr@s2,?_strnicmp+2
 21872  006092  C069  F063         	movff	stristr@s2+1,?_strnicmp+3
 21873  006096  C068  F01F         	movff	stristr@s2,?_strlen
 21874  00609A  C069  F020         	movff	stristr@s2+1,?_strlen+1
 21875  00609E  EC35  F034         	call	_strlen	;wreg free
 21876  0060A2  C01F  F064         	movff	?_strlen,?_strnicmp+4
 21877  0060A6  C020  F065         	movff	?_strlen+1,?_strnicmp+5
 21878  0060AA  EC63  F031         	call	_strnicmp	;wreg free
 21879  0060AE  5161               	movf	(?_strnicmp+1)& (0+255),w,b
 21880  0060B0  1160               	iorwf	?_strnicmp& (0+255),w,b
 21881  0060B2  E105               	bnz	l17224
 21882                           
 21883                           ; BSR set to: 0
 21884  0060B4  C066  F066         	movff	stristr@s1,?_stristr
 21885  0060B8  C067  F067         	movff	stristr@s1+1,?_stristr+1
 21886  0060BC  D01F               	goto	l2708
 21887  0060BE                     l17224:
 21888                           
 21889                           ; BSR set to: 0
 21890  0060BE  2966               	incf	stristr@s1& (0+255),w,b
 21891  0060C0  6E20               	movwf	?_strichr,c
 21892  0060C2  0E00               	movlw	0
 21893  0060C4  2167               	addwfc	(stristr@s1+1)& (0+255),w,b
 21894  0060C6  6E21               	movwf	?_strichr+1,c
 21895  0060C8  C068  FFF6         	movff	stristr@s2,tblptrl
 21896  0060CC  C069  FFF7         	movff	stristr@s2+1,tblptrh
 21897  0060D0  0008               	tblrd		*
 21898  0060D2  50F5               	movf	tablat,w,c
 21899  0060D4  6E22               	movwf	?_strichr+2,c
 21900  0060D6  6A23               	clrf	?_strichr+3,c
 21901  0060D8  ECF7  F033         	call	_strichr	;wreg free
 21902  0060DC  C020  F066         	movff	?_strichr,stristr@s1
 21903  0060E0  C021  F067         	movff	?_strichr+1,stristr@s1+1
 21904  0060E4                     l17226:
 21905  0060E4  0100               	movlb	0	; () banked
 21906  0060E6  5167               	movf	(stristr@s1+1)& (0+255),w,b
 21907  0060E8  1166               	iorwf	stristr@s1& (0+255),w,b
 21908  0060EA  E006               	bz	l2711
 21909                           
 21910                           ; BSR set to: 0
 21911  0060EC  C066  FFD9         	movff	stristr@s1,fsr2l
 21912  0060F0  C067  FFDA         	movff	stristr@s1+1,fsr2h
 21913  0060F4  50DF               	movf	indf2,w,c
 21914  0060F6  E1C7               	bnz	l17220
 21915  0060F8                     l2711:
 21916                           
 21917                           ; BSR set to: 0
 21918  0060F8  6B66               	clrf	?_stristr& (0+255),b
 21919  0060FA  6B67               	clrf	(?_stristr+1)& (0+255),b
 21920  0060FC                     l2708:
 21921                           
 21922                           ; BSR set to: 0
 21923  0060FC  0012               	return	
 21924  0060FE                     __end_of_stristr:
 21925                           	opt stack 0
 21926                           tblptru	equ	0xFF8
 21927                           tblptrh	equ	0xFF7
 21928                           tblptrl	equ	0xFF6
 21929                           tablat	equ	0xFF5
 21930                           prodh	equ	0xFF4
 21931                           prodl	equ	0xFF3
 21932                           intcon	equ	0xFF2
 21933                           indf0	equ	0xFEF
 21934                           postinc0	equ	0xFEE
 21935                           fsr0h	equ	0xFEA
 21936                           fsr0l	equ	0xFE9
 21937                           wreg	equ	0xFE8
 21938                           indf1	equ	0xFE7
 21939                           postinc1	equ	0xFE6
 21940                           postdec1	equ	0xFE5
 21941                           fsr1h	equ	0xFE2
 21942                           fsr1l	equ	0xFE1
 21943                           indf2	equ	0xFDF
 21944                           postinc2	equ	0xFDE
 21945                           postdec2	equ	0xFDD
 21946                           plusw2	equ	0xFDB
 21947                           fsr2h	equ	0xFDA
 21948                           fsr2l	equ	0xFD9
 21949                           status	equ	0xFD8
 21950                           
 21951 ;; *************** function _strichr *****************
 21952 ;; Defined at:
 21953 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/strichr.c"
 21954 ;; Parameters:    Size  Location     Type
 21955 ;;  ptr             2   31[COMRAM] PTR const unsigned char 
 21956 ;;		 -> NULL(0), cmdbuf(80), 
 21957 ;;  chr             2   33[COMRAM] int 
 21958 ;; Auto vars:     Size  Location     Type
 21959 ;;		None
 21960 ;; Return value:  Size  Location     Type
 21961 ;;                  2   31[COMRAM] PTR unsigned char 
 21962 ;; Registers used:
 21963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21964 ;; Tracked objects:
 21965 ;;		On entry : F/0
 21966 ;;		On exit  : 0/0
 21967 ;;		Unchanged: 0/0
 21968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21969 ;;      Params:         4       0       0       0       0       0       0
 21970 ;;      Locals:         0       0       0       0       0       0       0
 21971 ;;      Temps:          0       0       0       0       0       0       0
 21972 ;;      Totals:         4       0       0       0       0       0       0
 21973 ;;Total ram usage:        4 bytes
 21974 ;; Hardware stack levels used:    1
 21975 ;; Hardware stack levels required when called:    4
 21976 ;; This function calls:
 21977 ;;		_toupper
 21978 ;; This function is called by:
 21979 ;;		_stristr
 21980 ;; This function uses a non-reentrant model
 21981 ;;
 21982                           
 21983                           	psect	text48
 21984  0067EE                     __ptext48:
 21985                           	opt stack 0
 21986  0067EE                     _strichr:
 21987                           	opt stack 24
 21988                           
 21989                           ; BSR set to: 0
 21990                           
 21991                           ; BSR set to: 0
 21992                           ;incstack = 0
 21993                           ;incstack = 0
 21994  0067EE  5022               	movf	strichr@chr,w,c
 21995  0067F0  EC80  F035         	call	_toupper
 21996  0067F4  6E22               	movwf	strichr@chr,c
 21997  0067F6  6A23               	clrf	strichr@chr+1,c
 21998  0067F8  D010               	goto	l18998
 21999  0067FA                     l18992:
 22000  0067FA  C020  FFD9         	movff	strichr@ptr,fsr2l
 22001  0067FE  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 22002  006802  50DF               	movf	indf2,w,c
 22003  006804  EC80  F035         	call	_toupper
 22004  006808  1822               	xorwf	strichr@chr,w,c
 22005  00680A  E105               	bnz	l18996
 22006  00680C  C020  F020         	movff	strichr@ptr,?_strichr
 22007  006810  C021  F021         	movff	strichr@ptr+1,?_strichr+1
 22008  006814  D00A               	goto	l2775
 22009  006816                     l18996:
 22010  006816  4A20               	infsnz	strichr@ptr,f,c
 22011  006818  2A21               	incf	strichr@ptr+1,f,c
 22012  00681A                     l18998:
 22013  00681A  C020  FFD9         	movff	strichr@ptr,fsr2l
 22014  00681E  C021  FFDA         	movff	strichr@ptr+1,fsr2h
 22015  006822  50DF               	movf	indf2,w,c
 22016  006824  E1EA               	bnz	l18992
 22017  006826  6A20               	clrf	?_strichr,c
 22018  006828  6A21               	clrf	?_strichr+1,c
 22019  00682A                     l2775:
 22020  00682A  0012               	return	
 22021  00682C                     __end_of_strichr:
 22022                           	opt stack 0
 22023                           tblptru	equ	0xFF8
 22024                           tblptrh	equ	0xFF7
 22025                           tblptrl	equ	0xFF6
 22026                           tablat	equ	0xFF5
 22027                           prodh	equ	0xFF4
 22028                           prodl	equ	0xFF3
 22029                           intcon	equ	0xFF2
 22030                           indf0	equ	0xFEF
 22031                           postinc0	equ	0xFEE
 22032                           fsr0h	equ	0xFEA
 22033                           fsr0l	equ	0xFE9
 22034                           wreg	equ	0xFE8
 22035                           indf1	equ	0xFE7
 22036                           postinc1	equ	0xFE6
 22037                           postdec1	equ	0xFE5
 22038                           fsr1h	equ	0xFE2
 22039                           fsr1l	equ	0xFE1
 22040                           indf2	equ	0xFDF
 22041                           postinc2	equ	0xFDE
 22042                           postdec2	equ	0xFDD
 22043                           plusw2	equ	0xFDB
 22044                           fsr2h	equ	0xFDA
 22045                           fsr2l	equ	0xFD9
 22046                           status	equ	0xFD8
 22047                           
 22048 ;; *************** function _strnicmp *****************
 22049 ;; Defined at:
 22050 ;;		line 6 in file "/opt/microchip/xc8/v1.21/sources/common/strnicmp.c"
 22051 ;; Parameters:    Size  Location     Type
 22052 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 22053 ;;		 -> NULL(0), cmdbuf(80), 
 22054 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 22055 ;;		 -> STR_169(2), STR_168(9), STR_165(10), STR_162(4), 
 22056 ;;		 -> STR_160(3), STR_159(11), STR_156(4), STR_154(3), 
 22057 ;;		 -> STR_153(6), STR_151(6), STR_149(5), STR_147(8), 
 22058 ;;		 -> STR_146(6), STR_145(9), STR_144(7), STR_143(7), 
 22059 ;;		 -> STR_142(5), STR_141(6), STR_140(9), STR_138(11), 
 22060 ;;		 -> STR_136(8), STR_134(4), STR_133(5), STR_120(5), 
 22061 ;;		 -> STR_118(11), STR_105(7), STR_97(5), STR_81(5), 
 22062 ;;		 -> STR_49(5), STR_47(5), STR_45(5), STR_43(4), 
 22063 ;;		 -> STR_41(5), STR_38(3), STR_29(3), STR_20(7), 
 22064 ;;		 -> STR_18(8), STR_16(7), STR_14(9), STR_12(6), 
 22065 ;;		 -> STR_10(7), STR_8(5), STR_6(5), 
 22066 ;;  len             2    4[BANK0 ] unsigned int 
 22067 ;; Auto vars:     Size  Location     Type
 22068 ;;  r               1   36[COMRAM] char 
 22069 ;; Return value:  Size  Location     Type
 22070 ;;                  2    0[BANK0 ] int 
 22071 ;; Registers used:
 22072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 22073 ;; Tracked objects:
 22074 ;;		On entry : 0/0
 22075 ;;		On exit  : F/0
 22076 ;;		Unchanged: 0/0
 22077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22078 ;;      Params:         0       6       0       0       0       0       0
 22079 ;;      Locals:         1       0       0       0       0       0       0
 22080 ;;      Temps:          2       0       0       0       0       0       0
 22081 ;;      Totals:         3       6       0       0       0       0       0
 22082 ;;Total ram usage:        9 bytes
 22083 ;; Hardware stack levels used:    1
 22084 ;; Hardware stack levels required when called:    4
 22085 ;; This function calls:
 22086 ;;		_toupper
 22087 ;; This function is called by:
 22088 ;;		_stristr
 22089 ;; This function uses a non-reentrant model
 22090 ;;
 22091                           
 22092                           	psect	text49
 22093  0062C6                     __ptext49:
 22094                           	opt stack 0
 22095  0062C6                     _strnicmp:
 22096                           	opt stack 24
 22097                           
 22098                           ;incstack = 0
 22099                           ;incstack = 0
 22100  0062C6  D028               	goto	l18988
 22101  0062C8                     l18978:
 22102                           
 22103                           ; BSR set to: 0
 22104  0062C8  C062  FFF6         	movff	strnicmp@s2,tblptrl
 22105  0062CC  C063  FFF7         	movff	strnicmp@s2+1,tblptrh
 22106  0062D0  0008               	tblrd		*
 22107  0062D2  50F5               	movf	tablat,w,c
 22108  0062D4  EC80  F035         	call	_toupper
 22109  0062D8  6E23               	movwf	??_strnicmp& (0+255),c
 22110  0062DA  C060  FFD9         	movff	strnicmp@s1,fsr2l
 22111  0062DE  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 22112  0062E2  50DF               	movf	indf2,w,c
 22113  0062E4  EC80  F035         	call	_toupper
 22114  0062E8  6E24               	movwf	(??_strnicmp+1)& (0+255),c
 22115  0062EA  5023               	movf	??_strnicmp,w,c
 22116  0062EC  5C24               	subwf	??_strnicmp+1,w,c
 22117  0062EE  6E25               	movwf	strnicmp@r,c
 22118  0062F0  6625               	tstfsz	strnicmp@r& (0+255),c
 22119  0062F2  D006               	goto	l18982
 22120  0062F4  C060  FFD9         	movff	strnicmp@s1,fsr2l
 22121  0062F8  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 22122  0062FC  50DF               	movf	indf2,w,c
 22123  0062FE  E107               	bnz	l18986
 22124  006300                     l18982:
 22125  006300  5025               	movf	strnicmp@r,w,c
 22126  006302  0100               	movlb	0	; () banked
 22127  006304  6F60               	movwf	?_strnicmp& (0+255),b
 22128  006306  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 22129  006308  BF60               	btfsc	?_strnicmp& (0+255),7,b
 22130  00630A  0761               	decf	(?_strnicmp+1)& (0+255),f,b
 22131  00630C  D00F               	goto	l2727
 22132  00630E                     l18986:
 22133  00630E  0100               	movlb	0	; () banked
 22134  006310  4B60               	infsnz	strnicmp@s1& (0+255),f,b
 22135  006312  2B61               	incf	(strnicmp@s1+1)& (0+255),f,b
 22136  006314  4B62               	infsnz	strnicmp@s2& (0+255),f,b
 22137  006316  2B63               	incf	(strnicmp@s2+1)& (0+255),f,b
 22138  006318                     l18988:
 22139  006318  0100               	movlb	0	; () banked
 22140  00631A  0764               	decf	strnicmp@len& (0+255),f,b
 22141  00631C  A0D8               	btfss	status,0,c
 22142  00631E  0765               	decf	(strnicmp@len+1)& (0+255),f,b
 22143  006320  2964               	incf	strnicmp@len& (0+255),w,b
 22144  006322  B4D8               	btfsc	status,2,c
 22145  006324  2965               	incf	(strnicmp@len+1)& (0+255),w,b
 22146  006326  E1D0               	bnz	l18978
 22147                           
 22148                           ; BSR set to: 0
 22149  006328  6B60               	clrf	?_strnicmp& (0+255),b
 22150  00632A  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 22151  00632C                     l2727:
 22152                           
 22153                           ; BSR set to: 0
 22154  00632C  0012               	return	
 22155  00632E                     __end_of_strnicmp:
 22156                           	opt stack 0
 22157                           tblptru	equ	0xFF8
 22158                           tblptrh	equ	0xFF7
 22159                           tblptrl	equ	0xFF6
 22160                           tablat	equ	0xFF5
 22161                           prodh	equ	0xFF4
 22162                           prodl	equ	0xFF3
 22163                           intcon	equ	0xFF2
 22164                           indf0	equ	0xFEF
 22165                           postinc0	equ	0xFEE
 22166                           fsr0h	equ	0xFEA
 22167                           fsr0l	equ	0xFE9
 22168                           wreg	equ	0xFE8
 22169                           indf1	equ	0xFE7
 22170                           postinc1	equ	0xFE6
 22171                           postdec1	equ	0xFE5
 22172                           fsr1h	equ	0xFE2
 22173                           fsr1l	equ	0xFE1
 22174                           indf2	equ	0xFDF
 22175                           postinc2	equ	0xFDE
 22176                           postdec2	equ	0xFDD
 22177                           plusw2	equ	0xFDB
 22178                           fsr2h	equ	0xFDA
 22179                           fsr2l	equ	0xFD9
 22180                           status	equ	0xFD8
 22181                           
 22182 ;; *************** function _toupper *****************
 22183 ;; Defined at:
 22184 ;;		line 9 in file "/opt/microchip/xc8/v1.21/sources/common/toupper.c"
 22185 ;; Parameters:    Size  Location     Type
 22186 ;;  c               1    wreg     unsigned char 
 22187 ;; Auto vars:     Size  Location     Type
 22188 ;;  c               1   30[COMRAM] unsigned char 
 22189 ;; Return value:  Size  Location     Type
 22190 ;;                  1    wreg      unsigned char 
 22191 ;; Registers used:
 22192 ;;		wreg, status,2, status,0
 22193 ;; Tracked objects:
 22194 ;;		On entry : 0/0
 22195 ;;		On exit  : 0/0
 22196 ;;		Unchanged: 0/0
 22197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22198 ;;      Params:         0       0       0       0       0       0       0
 22199 ;;      Locals:         1       0       0       0       0       0       0
 22200 ;;      Temps:          0       0       0       0       0       0       0
 22201 ;;      Totals:         1       0       0       0       0       0       0
 22202 ;;Total ram usage:        1 bytes
 22203 ;; Hardware stack levels used:    1
 22204 ;; Hardware stack levels required when called:    3
 22205 ;; This function calls:
 22206 ;;		Nothing
 22207 ;; This function is called by:
 22208 ;;		_strnicmp
 22209 ;;		_strichr
 22210 ;; This function uses a non-reentrant model
 22211 ;;
 22212                           
 22213                           	psect	text50
 22214  006B00                     __ptext50:
 22215                           	opt stack 0
 22216  006B00                     _toupper:
 22217                           	opt stack 24
 22218                           
 22219                           ; BSR set to: 0
 22220                           ;incstack = 0
 22221                           ;incstack = 0
 22222                           ;toupper@c stored from wreg
 22223  006B00  CFE8 F01F          	movff	wreg,toupper@c
 22224  006B04  0E7B               	movlw	123
 22225  006B06  601F               	cpfslt	toupper@c,c
 22226  006B08  D004               	goto	l19006
 22227  006B0A  0E60               	movlw	96
 22228  006B0C  641F               	cpfsgt	toupper@c,c
 22229  006B0E  D001               	goto	l19006
 22230  006B10  9A1F               	bcf	toupper@c,5,c
 22231  006B12                     l19006:
 22232  006B12  501F               	movf	toupper@c,w,c
 22233  006B14  0012               	return	
 22234  006B16                     __end_of_toupper:
 22235                           	opt stack 0
 22236                           tblptru	equ	0xFF8
 22237                           tblptrh	equ	0xFF7
 22238                           tblptrl	equ	0xFF6
 22239                           tablat	equ	0xFF5
 22240                           prodh	equ	0xFF4
 22241                           prodl	equ	0xFF3
 22242                           intcon	equ	0xFF2
 22243                           indf0	equ	0xFEF
 22244                           postinc0	equ	0xFEE
 22245                           fsr0h	equ	0xFEA
 22246                           fsr0l	equ	0xFE9
 22247                           wreg	equ	0xFE8
 22248                           indf1	equ	0xFE7
 22249                           postinc1	equ	0xFE6
 22250                           postdec1	equ	0xFE5
 22251                           fsr1h	equ	0xFE2
 22252                           fsr1l	equ	0xFE1
 22253                           indf2	equ	0xFDF
 22254                           postinc2	equ	0xFDE
 22255                           postdec2	equ	0xFDD
 22256                           plusw2	equ	0xFDB
 22257                           fsr2h	equ	0xFDA
 22258                           fsr2l	equ	0xFD9
 22259                           status	equ	0xFD8
 22260                           
 22261 ;; *************** function _strlen *****************
 22262 ;; Defined at:
 22263 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/strlen.c"
 22264 ;; Parameters:    Size  Location     Type
 22265 ;;  s               2   30[COMRAM] PTR const unsigned char 
 22266 ;;		 -> printGUID@buf(3), STR_169(2), STR_168(9), STR_165(10), 
 22267 ;;		 -> STR_162(4), STR_160(3), STR_159(11), STR_156(4), 
 22268 ;;		 -> STR_154(3), STR_153(6), STR_151(6), STR_149(5), 
 22269 ;;		 -> STR_147(8), STR_146(6), STR_145(9), STR_144(7), 
 22270 ;;		 -> STR_143(7), STR_142(5), STR_141(6), STR_140(9), 
 22271 ;;		 -> STR_138(11), STR_136(8), STR_134(4), STR_133(5), 
 22272 ;;		 -> STR_120(5), STR_118(11), STR_105(7), STR_97(5), 
 22273 ;;		 -> STR_81(5), wrkbuf(80), STR_49(5), STR_47(5), 
 22274 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 22275 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 22276 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 22277 ;;		 -> STR_6(5), cmdbuf(80), 
 22278 ;; Auto vars:     Size  Location     Type
 22279 ;;  cp              2   32[COMRAM] PTR const unsigned char 
 22280 ;;		 -> printGUID@buf(3), STR_169(2), STR_168(9), STR_165(10), 
 22281 ;;		 -> STR_162(4), STR_160(3), STR_159(11), STR_156(4), 
 22282 ;;		 -> STR_154(3), STR_153(6), STR_151(6), STR_149(5), 
 22283 ;;		 -> STR_147(8), STR_146(6), STR_145(9), STR_144(7), 
 22284 ;;		 -> STR_143(7), STR_142(5), STR_141(6), STR_140(9), 
 22285 ;;		 -> STR_138(11), STR_136(8), STR_134(4), STR_133(5), 
 22286 ;;		 -> STR_120(5), STR_118(11), STR_105(7), STR_97(5), 
 22287 ;;		 -> STR_81(5), wrkbuf(80), STR_49(5), STR_47(5), 
 22288 ;;		 -> STR_45(5), STR_43(4), STR_41(5), STR_38(3), 
 22289 ;;		 -> STR_29(3), STR_20(7), STR_18(8), STR_16(7), 
 22290 ;;		 -> STR_14(9), STR_12(6), STR_10(7), STR_8(5), 
 22291 ;;		 -> STR_6(5), cmdbuf(80), 
 22292 ;; Return value:  Size  Location     Type
 22293 ;;                  2   30[COMRAM] unsigned int 
 22294 ;; Registers used:
 22295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 22296 ;; Tracked objects:
 22297 ;;		On entry : E/1
 22298 ;;		On exit  : 0/0
 22299 ;;		Unchanged: 0/0
 22300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22301 ;;      Params:         2       0       0       0       0       0       0
 22302 ;;      Locals:         2       0       0       0       0       0       0
 22303 ;;      Temps:          0       0       0       0       0       0       0
 22304 ;;      Totals:         4       0       0       0       0       0       0
 22305 ;;Total ram usage:        4 bytes
 22306 ;; Hardware stack levels used:    1
 22307 ;; Hardware stack levels required when called:    3
 22308 ;; This function calls:
 22309 ;;		Nothing
 22310 ;; This function is called by:
 22311 ;;		_doModeSLCAN
 22312 ;;		_receiveSendEventSLCAN
 22313 ;;		_printGUID
 22314 ;;		_hexStringToBytes
 22315 ;;		_stristr
 22316 ;; This function uses a non-reentrant model
 22317 ;;
 22318                           
 22319                           	psect	text51
 22320  00686A                     __ptext51:
 22321                           	opt stack 0
 22322  00686A                     _strlen:
 22323                           	opt stack 25
 22324                           
 22325                           ;incstack = 0
 22326                           ;incstack = 0
 22327  00686A  C01F  F021         	movff	strlen@s,strlen@cp
 22328  00686E  C020  F022         	movff	strlen@s+1,strlen@cp+1
 22329  006872  D002               	goto	l18540
 22330  006874                     l18538:
 22331  006874  4A21               	infsnz	strlen@cp,f,c
 22332  006876  2A22               	incf	strlen@cp+1,f,c
 22333  006878                     l18540:
 22334  006878  5021               	movf	strlen@cp,w,c
 22335  00687A  6EF6               	movwf	tblptrl,c
 22336  00687C  6EE9               	movwf	fsr0l,c
 22337  00687E  0E05               	movlw	(high __ramtop+-1)
 22338  006880  6EEA               	movwf	fsr0h,c
 22339  006882  5022               	movf	strlen@cp+1,w,c
 22340  006884  64EA               	cpfsgt	fsr0h,c
 22341  006886  D003               	bra	u24577
 22342  006888  6EEA               	movwf	fsr0h,c
 22343  00688A  50EF               	movf	indf0,w,c
 22344  00688C  D003               	bra	u24570
 22345  00688E                     u24577:
 22346  00688E  6EF7               	movwf	tblptrh,c
 22347  006890  0008               	tblrd		*
 22348  006892  50F5               	movf	tablat,w,c
 22349  006894                     u24570:
 22350  006894  0900               	iorlw	0
 22351  006896  E1EE               	bnz	l18538
 22352  006898  501F               	movf	strlen@s,w,c
 22353  00689A  5C21               	subwf	strlen@cp,w,c
 22354  00689C  6E1F               	movwf	?_strlen,c
 22355  00689E  5020               	movf	strlen@s+1,w,c
 22356  0068A0  5822               	subwfb	strlen@cp+1,w,c
 22357  0068A2  6E20               	movwf	?_strlen+1,c
 22358  0068A4  0012               	return	
 22359  0068A6                     __end_of_strlen:
 22360                           	opt stack 0
 22361                           tblptru	equ	0xFF8
 22362                           tblptrh	equ	0xFF7
 22363                           tblptrl	equ	0xFF6
 22364                           tablat	equ	0xFF5
 22365                           prodh	equ	0xFF4
 22366                           prodl	equ	0xFF3
 22367                           intcon	equ	0xFF2
 22368                           indf0	equ	0xFEF
 22369                           postinc0	equ	0xFEE
 22370                           fsr0h	equ	0xFEA
 22371                           fsr0l	equ	0xFE9
 22372                           wreg	equ	0xFE8
 22373                           indf1	equ	0xFE7
 22374                           postinc1	equ	0xFE6
 22375                           postdec1	equ	0xFE5
 22376                           fsr1h	equ	0xFE2
 22377                           fsr1l	equ	0xFE1
 22378                           indf2	equ	0xFDF
 22379                           postinc2	equ	0xFDE
 22380                           postdec2	equ	0xFDD
 22381                           plusw2	equ	0xFDB
 22382                           fsr2h	equ	0xFDA
 22383                           fsr2l	equ	0xFD9
 22384                           status	equ	0xFD8
 22385                           
 22386 ;; *************** function _receivePrintEventVerbose *****************
 22387 ;; Defined at:
 22388 ;;		line 2234 in file "main.c"
 22389 ;; Parameters:    Size  Location     Type
 22390 ;;		None
 22391 ;; Auto vars:     Size  Location     Type
 22392 ;;  i               1   66[BANK0 ] unsigned char 
 22393 ;; Return value:  Size  Location     Type
 22394 ;;                  1    wreg      enum E15660
 22395 ;; Registers used:
 22396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22397 ;; Tracked objects:
 22398 ;;		On entry : F/1
 22399 ;;		On exit  : 0/0
 22400 ;;		Unchanged: 0/0
 22401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22402 ;;      Params:         0       0       0       0       0       0       0
 22403 ;;      Locals:         0      19       0       0       0       0       0
 22404 ;;      Temps:          0       5       0       0       0       0       0
 22405 ;;      Totals:         0      24       0       0       0       0       0
 22406 ;;Total ram usage:       24 bytes
 22407 ;; Hardware stack levels used:    1
 22408 ;; Hardware stack levels required when called:    6
 22409 ;; This function calls:
 22410 ;;		_putsUSART
 22411 ;;		_sprintf
 22412 ;;		_getVSCPFrame
 22413 ;;		_ReadTimer3
 22414 ;;		___wmul
 22415 ;; This function is called by:
 22416 ;;		_doModeVerbose
 22417 ;; This function uses a non-reentrant model
 22418 ;;
 22419                           
 22420                           	psect	text52
 22421  002EF8                     __ptext52:
 22422                           	opt stack 0
 22423  002EF8                     _receivePrintEventVerbose:
 22424                           	opt stack 23
 22425                           
 22426                           ; BSR set to: 1
 22427                           ;main.c: 2235: uint8_t i;
 22428                           ;main.c: 2237: if ( getVSCPFrame(&vscpClass,
 22429                           ;main.c: 2238: &vscpType,
 22430                           ;main.c: 2239: &vscpNodeId,
 22431                           ;main.c: 2240: &vscpPriority,
 22432                           ;main.c: 2241: &vscpSize,
 22433                           ;main.c: 2242: vscpData)) {
 22434                           
 22435                           ;incstack = 0
 22436                           ;incstack = 0
 22437  002EF8  0E01               	movlw	high _vscpClass
 22438  002EFA  0100               	movlb	0	; () banked
 22439  002EFC  6F6D               	movwf	(?_getVSCPFrame+1)& (0+255),b
 22440  002EFE  0EAD               	movlw	low _vscpClass
 22441  002F00  6F6C               	movwf	?_getVSCPFrame& (0+255),b
 22442  002F02  0E01               	movlw	high _vscpType
 22443  002F04  6F6F               	movwf	(?_getVSCPFrame+3)& (0+255),b
 22444  002F06  0EB2               	movlw	low _vscpType
 22445  002F08  6F6E               	movwf	(?_getVSCPFrame+2)& (0+255),b
 22446  002F0A  0E01               	movlw	high _vscpNodeId
 22447  002F0C  6F71               	movwf	(?_getVSCPFrame+5)& (0+255),b
 22448  002F0E  0EAF               	movlw	low _vscpNodeId
 22449  002F10  6F70               	movwf	(?_getVSCPFrame+4)& (0+255),b
 22450  002F12  0E01               	movlw	high _vscpPriority
 22451  002F14  6F73               	movwf	(?_getVSCPFrame+7)& (0+255),b
 22452  002F16  0EB0               	movlw	low _vscpPriority
 22453  002F18  6F72               	movwf	(?_getVSCPFrame+6)& (0+255),b
 22454  002F1A  0E01               	movlw	high _vscpSize
 22455  002F1C  6F75               	movwf	(?_getVSCPFrame+9)& (0+255),b
 22456  002F1E  0EB1               	movlw	low _vscpSize
 22457  002F20  6F74               	movwf	(?_getVSCPFrame+8)& (0+255),b
 22458  002F22  0E01               	movlw	high _vscpData
 22459  002F24  6F77               	movwf	(?_getVSCPFrame+11)& (0+255),b
 22460  002F26  0EA5               	movlw	low _vscpData
 22461  002F28  6F76               	movwf	(?_getVSCPFrame+10)& (0+255),b
 22462  002F2A  EC81  F02F         	call	_getVSCPFrame	;wreg free
 22463  002F2E  0900               	iorlw	0
 22464  002F30  E101 D18F          	bz	l17206
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;main.c: 2245: cntRxFrames++;
 22468  002F34  2BD2               	incf	_cntRxFrames& (0+255),f,b
 22469  002F36  0E00               	movlw	0
 22470  002F38  23D3               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 22471  002F3A  23D4               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 22472  002F3C  23D5               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 22473                           
 22474                           ;main.c: 2246: cntRxBytes += vscpSize;
 22475  002F3E  0101               	movlb	1	; () banked
 22476  002F40  51B1               	movf	_vscpSize& (0+255),w,b
 22477  002F42  0100               	movlb	0	; () banked
 22478  002F44  27CE               	addwf	_cntRxBytes& (0+255),f,b
 22479  002F46  0E00               	movlw	0
 22480  002F48  23CF               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 22481  002F4A  23D0               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 22482  002F4C  23D1               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 22483                           
 22484                           ; BSR set to: 0
 22485                           ;main.c: 2248: putsUSART((char *) "<Prio=");
 22486  002F4E  0E7F               	movlw	high STR_179
 22487  002F50  6E21               	movwf	?_putsUSART+1,c
 22488  002F52  0E2C               	movlw	low STR_179
 22489  002F54  6E20               	movwf	?_putsUSART,c
 22490  002F56  ECDF  F032         	call	_putsUSART	;wreg free
 22491                           
 22492                           ;main.c: 2249: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 22493  002F5A  0101               	movlb	1	; () banked
 22494  002F5C  6700               	tstfsz	_bHex& (0+255),b
 22495  002F5E  D005               	goto	l17108
 22496                           
 22497                           ; BSR set to: 1
 22498  002F60  0E7F               	movlw	high STR_61
 22499  002F62  0100               	movlb	0	; () banked
 22500  002F64  6F95               	movwf	(_receivePrintEventVerbose$1506+1)& (0+255),b
 22501  002F66  0EED               	movlw	low STR_61
 22502  002F68  D004               	goto	L43
 22503  002F6A                     l17108:
 22504                           
 22505                           ; BSR set to: 1
 22506  002F6A  0E7F               	movlw	high STR_60
 22507  002F6C  0100               	movlb	0	; () banked
 22508  002F6E  6F95               	movwf	(_receivePrintEventVerbose$1506+1)& (0+255),b
 22509  002F70  0E4F               	movlw	low STR_60
 22510  002F72                     L43:
 22511  002F72  6F94               	movwf	_receivePrintEventVerbose$1506& (0+255),b
 22512                           
 22513                           ; BSR set to: 0
 22514  002F74  0E01               	movlw	high _wrkbuf
 22515  002F76  0100               	movlb	0	; () banked
 22516  002F78  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22517  002F7A  0E55               	movlw	low _wrkbuf
 22518  002F7C  6F6D               	movwf	?_sprintf& (0+255),b
 22519  002F7E  C094  F06F         	movff	_receivePrintEventVerbose$1506,?_sprintf+2
 22520  002F82  C095  F070         	movff	_receivePrintEventVerbose$1506+1,?_sprintf+3
 22521  002F86  C1B0  F071         	movff	_vscpPriority,?_sprintf+4
 22522  002F8A  6B72               	clrf	(?_sprintf+5)& (0+255),b
 22523  002F8C  EC14  F010         	call	_sprintf	;wreg free
 22524                           
 22525                           ; BSR set to: 0
 22526                           ;main.c: 2250: putsUSART(wrkbuf);
 22527  002F90  0101               	movlb	1	; () banked
 22528  002F92  0E01               	movlw	high _wrkbuf
 22529  002F94  6E21               	movwf	?_putsUSART+1,c
 22530  002F96  0E55               	movlw	low _wrkbuf
 22531  002F98  6E20               	movwf	?_putsUSART,c
 22532  002F9A  ECDF  F032         	call	_putsUSART	;wreg free
 22533                           
 22534                           ;main.c: 2251: if ( bTimestamp ) {
 22535  002F9E  0100               	movlb	0	; () banked
 22536  002FA0  51F0               	movf	_bTimestamp& (0+255),w,b
 22537  002FA2  E052               	bz	l17130
 22538                           
 22539                           ; BSR set to: 0
 22540                           ;main.c: 2252: putsUSART((char *) ",timestamp=");
 22541  002FA4  0E7E               	movlw	high STR_182
 22542  002FA6  6E21               	movwf	?_putsUSART+1,c
 22543  002FA8  0E26               	movlw	low STR_182
 22544  002FAA  6E20               	movwf	?_putsUSART,c
 22545  002FAC  ECDF  F032         	call	_putsUSART	;wreg free
 22546                           
 22547                           ;main.c: 2253: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", (timer<<16) | ReadTimer3()*10 );
 22548  002FB0  0101               	movlb	1	; () banked
 22549  002FB2  6700               	tstfsz	_bHex& (0+255),b
 22550  002FB4  D005               	goto	l17122
 22551                           
 22552                           ; BSR set to: 1
 22553  002FB6  0E7F               	movlw	high STR_184
 22554  002FB8  0100               	movlb	0	; () banked
 22555  002FBA  6F97               	movwf	(_receivePrintEventVerbose$1511+1)& (0+255),b
 22556  002FBC  0EDD               	movlw	low STR_184
 22557  002FBE  D004               	goto	L44
 22558  002FC0                     l17122:
 22559                           
 22560                           ; BSR set to: 1
 22561  002FC0  0E7F               	movlw	high STR_183
 22562  002FC2  0100               	movlb	0	; () banked
 22563  002FC4  6F97               	movwf	(_receivePrintEventVerbose$1511+1)& (0+255),b
 22564  002FC6  0E00               	movlw	low STR_183
 22565  002FC8                     L44:
 22566  002FC8  6F96               	movwf	_receivePrintEventVerbose$1511& (0+255),b
 22567                           
 22568                           ; BSR set to: 0
 22569  002FCA  EC95  F035         	call	_ReadTimer3	;wreg free
 22570  002FCE  C01F  F023         	movff	?_ReadTimer3,?___wmul
 22571  002FD2  C020  F024         	movff	?_ReadTimer3+1,?___wmul+1
 22572  002FD6  6A26               	clrf	?___wmul+3,c
 22573  002FD8  0E0A               	movlw	10
 22574  002FDA  6E25               	movwf	?___wmul+2,c
 22575  002FDC  EC53  F034         	call	___wmul	;wreg free
 22576  002FE0  C0E2  F08B         	movff	_timer,??_receivePrintEventVerbose	;volatile
 22577  002FE4  C0E3  F08C         	movff	_timer+1,??_receivePrintEventVerbose+1	;volatile
 22578  002FE8  C0E4  F08D         	movff	_timer+2,??_receivePrintEventVerbose+2	;volatile
 22579  002FEC  C0E5  F08E         	movff	_timer+3,??_receivePrintEventVerbose+3	;volatile
 22580  002FF0  C08C  F08E         	movff	??_receivePrintEventVerbose+1,??_receivePrintEventVerbose+3
 22581  002FF4  C08B  F08D         	movff	??_receivePrintEventVerbose,??_receivePrintEventVerbose+2
 22582  002FF8  6B8C               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 22583  002FFA  6B8B               	clrf	??_receivePrintEventVerbose& (0+255),b
 22584  002FFC  5123               	movf	?___wmul& (0+255),w,b
 22585  002FFE  118B               	iorwf	??_receivePrintEventVerbose& (0+255),w,b
 22586  003000  6F90               	movwf	_receivePrintEventVerbose$3691& (0+255),b	;volatile
 22587  003002  5124               	movf	(?___wmul+1)& (0+255),w,b
 22588  003004  118C               	iorwf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 22589  003006  6F91               	movwf	(_receivePrintEventVerbose$3691+1)& (0+255),b	;volatile
 22590  003008  0E00               	movlw	0
 22591  00300A  118D               	iorwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 22592  00300C  6F92               	movwf	(_receivePrintEventVerbose$3691+2)& (0+255),b	;volatile
 22593  00300E  0E00               	movlw	0
 22594  003010  118E               	iorwf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 22595  003012  6F93               	movwf	(_receivePrintEventVerbose$3691+3)& (0+255),b	;volatile
 22596                           
 22597                           ; BSR set to: 0
 22598  003014  0E01               	movlw	high _wrkbuf
 22599  003016  0100               	movlb	0	; () banked
 22600  003018  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22601  00301A  0E55               	movlw	low _wrkbuf
 22602  00301C  6F6D               	movwf	?_sprintf& (0+255),b
 22603  00301E  C096  F06F         	movff	_receivePrintEventVerbose$1511,?_sprintf+2
 22604  003022  C097  F070         	movff	_receivePrintEventVerbose$1511+1,?_sprintf+3
 22605  003026  C090  F071         	movff	_receivePrintEventVerbose$3691,?_sprintf+4	;volatile
 22606  00302A  C091  F072         	movff	_receivePrintEventVerbose$3691+1,?_sprintf+5	;volatile
 22607  00302E  C092  F073         	movff	_receivePrintEventVerbose$3691+2,?_sprintf+6	;volatile
 22608  003032  C093  F074         	movff	_receivePrintEventVerbose$3691+3,?_sprintf+7	;volatile
 22609  003036  EC14  F010         	call	_sprintf	;wreg free
 22610                           
 22611                           ; BSR set to: 0
 22612                           ;main.c: 2254: putsUSART(wrkbuf);
 22613  00303A  0101               	movlb	1	; () banked
 22614  00303C  0E01               	movlw	high _wrkbuf
 22615  00303E  6E21               	movwf	?_putsUSART+1,c
 22616  003040  0E55               	movlw	low _wrkbuf
 22617  003042  6E20               	movwf	?_putsUSART,c
 22618  003044  ECDF  F032         	call	_putsUSART	;wreg free
 22619  003048                     l17130:
 22620                           
 22621                           ;main.c: 2255: }
 22622                           ;main.c: 2256: putsUSART((char *) ",class=");
 22623  003048  0E7E               	movlw	high STR_185
 22624  00304A  6E21               	movwf	?_putsUSART+1,c
 22625  00304C  0EE0               	movlw	low STR_185
 22626  00304E  6E20               	movwf	?_putsUSART,c
 22627  003050  ECDF  F032         	call	_putsUSART	;wreg free
 22628                           
 22629                           ;main.c: 2257: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 22630  003054  0101               	movlb	1	; () banked
 22631  003056  6700               	tstfsz	_bHex& (0+255),b
 22632  003058  D005               	goto	l17136
 22633                           
 22634                           ; BSR set to: 1
 22635  00305A  0E7F               	movlw	high STR_61
 22636  00305C  0100               	movlb	0	; () banked
 22637  00305E  6F99               	movwf	(_receivePrintEventVerbose$1516+1)& (0+255),b
 22638  003060  0EED               	movlw	low STR_61
 22639  003062  D004               	goto	L45
 22640  003064                     l17136:
 22641                           
 22642                           ; BSR set to: 1
 22643  003064  0E7F               	movlw	high STR_186
 22644  003066  0100               	movlb	0	; () banked
 22645  003068  6F99               	movwf	(_receivePrintEventVerbose$1516+1)& (0+255),b
 22646  00306A  0E56               	movlw	low STR_186
 22647  00306C                     L45:
 22648  00306C  6F98               	movwf	_receivePrintEventVerbose$1516& (0+255),b
 22649                           
 22650                           ; BSR set to: 0
 22651  00306E  0E01               	movlw	high _wrkbuf
 22652  003070  0100               	movlb	0	; () banked
 22653  003072  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22654  003074  0E55               	movlw	low _wrkbuf
 22655  003076  6F6D               	movwf	?_sprintf& (0+255),b
 22656  003078  C098  F06F         	movff	_receivePrintEventVerbose$1516,?_sprintf+2
 22657  00307C  C099  F070         	movff	_receivePrintEventVerbose$1516+1,?_sprintf+3
 22658  003080  C1AD  F071         	movff	_vscpClass,?_sprintf+4
 22659  003084  C1AE  F072         	movff	_vscpClass+1,?_sprintf+5
 22660  003088  EC14  F010         	call	_sprintf	;wreg free
 22661                           
 22662                           ; BSR set to: 0
 22663                           ;main.c: 2258: putsUSART(wrkbuf);
 22664  00308C  0101               	movlb	1	; () banked
 22665  00308E  0E01               	movlw	high _wrkbuf
 22666  003090  6E21               	movwf	?_putsUSART+1,c
 22667  003092  0E55               	movlw	low _wrkbuf
 22668  003094  6E20               	movwf	?_putsUSART,c
 22669  003096  ECDF  F032         	call	_putsUSART	;wreg free
 22670                           
 22671                           ;main.c: 2259: putsUSART((char *) ",type=");
 22672  00309A  0E7F               	movlw	high STR_188
 22673  00309C  6E21               	movwf	?_putsUSART+1,c
 22674  00309E  0E1E               	movlw	low STR_188
 22675  0030A0  6E20               	movwf	?_putsUSART,c
 22676  0030A2  ECDF  F032         	call	_putsUSART	;wreg free
 22677                           
 22678                           ;main.c: 2260: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 22679  0030A6  0101               	movlb	1	; () banked
 22680  0030A8  6700               	tstfsz	_bHex& (0+255),b
 22681  0030AA  D005               	goto	l17148
 22682                           
 22683                           ; BSR set to: 1
 22684  0030AC  0E7F               	movlw	high STR_61
 22685  0030AE  0100               	movlb	0	; () banked
 22686  0030B0  6F9B               	movwf	(_receivePrintEventVerbose$1521+1)& (0+255),b
 22687  0030B2  0EED               	movlw	low STR_61
 22688  0030B4  D004               	goto	L46
 22689  0030B6                     l17148:
 22690                           
 22691                           ; BSR set to: 1
 22692  0030B6  0E7F               	movlw	high STR_60
 22693  0030B8  0100               	movlb	0	; () banked
 22694  0030BA  6F9B               	movwf	(_receivePrintEventVerbose$1521+1)& (0+255),b
 22695  0030BC  0E4F               	movlw	low STR_60
 22696  0030BE                     L46:
 22697  0030BE  6F9A               	movwf	_receivePrintEventVerbose$1521& (0+255),b
 22698                           
 22699                           ; BSR set to: 0
 22700  0030C0  0E01               	movlw	high _wrkbuf
 22701  0030C2  0100               	movlb	0	; () banked
 22702  0030C4  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22703  0030C6  0E55               	movlw	low _wrkbuf
 22704  0030C8  6F6D               	movwf	?_sprintf& (0+255),b
 22705  0030CA  C09A  F06F         	movff	_receivePrintEventVerbose$1521,?_sprintf+2
 22706  0030CE  C09B  F070         	movff	_receivePrintEventVerbose$1521+1,?_sprintf+3
 22707  0030D2  C1B2  F071         	movff	_vscpType,?_sprintf+4
 22708  0030D6  6B72               	clrf	(?_sprintf+5)& (0+255),b
 22709  0030D8  EC14  F010         	call	_sprintf	;wreg free
 22710                           
 22711                           ; BSR set to: 0
 22712                           ;main.c: 2261: putsUSART(wrkbuf);
 22713  0030DC  0101               	movlb	1	; () banked
 22714  0030DE  0E01               	movlw	high _wrkbuf
 22715  0030E0  6E21               	movwf	?_putsUSART+1,c
 22716  0030E2  0E55               	movlw	low _wrkbuf
 22717  0030E4  6E20               	movwf	?_putsUSART,c
 22718  0030E6  ECDF  F032         	call	_putsUSART	;wreg free
 22719                           
 22720                           ;main.c: 2262: putsUSART((char *) ",nodeid=");
 22721  0030EA  0E7E               	movlw	high STR_191
 22722  0030EC  6E21               	movwf	?_putsUSART+1,c
 22723  0030EE  0EA5               	movlw	low STR_191
 22724  0030F0  6E20               	movwf	?_putsUSART,c
 22725  0030F2  ECDF  F032         	call	_putsUSART	;wreg free
 22726                           
 22727                           ;main.c: 2263: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 22728  0030F6  0101               	movlb	1	; () banked
 22729  0030F8  6700               	tstfsz	_bHex& (0+255),b
 22730  0030FA  D005               	goto	l17160
 22731                           
 22732                           ; BSR set to: 1
 22733  0030FC  0E7F               	movlw	high STR_61
 22734  0030FE  0100               	movlb	0	; () banked
 22735  003100  6F9D               	movwf	(_receivePrintEventVerbose$1526+1)& (0+255),b
 22736  003102  0EED               	movlw	low STR_61
 22737  003104  D004               	goto	L47
 22738  003106                     l17160:
 22739                           
 22740                           ; BSR set to: 1
 22741  003106  0E7F               	movlw	high STR_60
 22742  003108  0100               	movlb	0	; () banked
 22743  00310A  6F9D               	movwf	(_receivePrintEventVerbose$1526+1)& (0+255),b
 22744  00310C  0E4F               	movlw	low STR_60
 22745  00310E                     L47:
 22746  00310E  6F9C               	movwf	_receivePrintEventVerbose$1526& (0+255),b
 22747                           
 22748                           ; BSR set to: 0
 22749  003110  0E01               	movlw	high _wrkbuf
 22750  003112  0100               	movlb	0	; () banked
 22751  003114  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22752  003116  0E55               	movlw	low _wrkbuf
 22753  003118  6F6D               	movwf	?_sprintf& (0+255),b
 22754  00311A  C09C  F06F         	movff	_receivePrintEventVerbose$1526,?_sprintf+2
 22755  00311E  C09D  F070         	movff	_receivePrintEventVerbose$1526+1,?_sprintf+3
 22756  003122  C1AF  F071         	movff	_vscpNodeId,?_sprintf+4
 22757  003126  6B72               	clrf	(?_sprintf+5)& (0+255),b
 22758  003128  EC14  F010         	call	_sprintf	;wreg free
 22759                           
 22760                           ; BSR set to: 0
 22761                           ;main.c: 2264: putsUSART(wrkbuf);
 22762  00312C  0101               	movlb	1	; () banked
 22763  00312E  0E01               	movlw	high _wrkbuf
 22764  003130  6E21               	movwf	?_putsUSART+1,c
 22765  003132  0E55               	movlw	low _wrkbuf
 22766  003134  6E20               	movwf	?_putsUSART,c
 22767  003136  ECDF  F032         	call	_putsUSART	;wreg free
 22768                           
 22769                           ;main.c: 2265: putsUSART((char *) ",size=");
 22770  00313A  0E7F               	movlw	high STR_194
 22771  00313C  6E21               	movwf	?_putsUSART+1,c
 22772  00313E  0E25               	movlw	low STR_194
 22773  003140  6E20               	movwf	?_putsUSART,c
 22774  003142  ECDF  F032         	call	_putsUSART	;wreg free
 22775                           
 22776                           ;main.c: 2266: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 22777  003146  0101               	movlb	1	; () banked
 22778  003148  6700               	tstfsz	_bHex& (0+255),b
 22779  00314A  D005               	goto	l17172
 22780                           
 22781                           ; BSR set to: 1
 22782  00314C  0E7F               	movlw	high STR_61
 22783  00314E  0100               	movlb	0	; () banked
 22784  003150  6F9F               	movwf	(_receivePrintEventVerbose$1531+1)& (0+255),b
 22785  003152  0EED               	movlw	low STR_61
 22786  003154  D004               	goto	L48
 22787  003156                     l17172:
 22788                           
 22789                           ; BSR set to: 1
 22790  003156  0E7F               	movlw	high STR_60
 22791  003158  0100               	movlb	0	; () banked
 22792  00315A  6F9F               	movwf	(_receivePrintEventVerbose$1531+1)& (0+255),b
 22793  00315C  0E4F               	movlw	low STR_60
 22794  00315E                     L48:
 22795  00315E  6F9E               	movwf	_receivePrintEventVerbose$1531& (0+255),b
 22796                           
 22797                           ; BSR set to: 0
 22798  003160  0E01               	movlw	high _wrkbuf
 22799  003162  0100               	movlb	0	; () banked
 22800  003164  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22801  003166  0E55               	movlw	low _wrkbuf
 22802  003168  6F6D               	movwf	?_sprintf& (0+255),b
 22803  00316A  C09E  F06F         	movff	_receivePrintEventVerbose$1531,?_sprintf+2
 22804  00316E  C09F  F070         	movff	_receivePrintEventVerbose$1531+1,?_sprintf+3
 22805  003172  C1B1  F071         	movff	_vscpSize,?_sprintf+4
 22806  003176  6B72               	clrf	(?_sprintf+5)& (0+255),b
 22807  003178  EC14  F010         	call	_sprintf	;wreg free
 22808                           
 22809                           ; BSR set to: 0
 22810                           ;main.c: 2267: putsUSART(wrkbuf);
 22811  00317C  0101               	movlb	1	; () banked
 22812  00317E  0E01               	movlw	high _wrkbuf
 22813  003180  6E21               	movwf	?_putsUSART+1,c
 22814  003182  0E55               	movlw	low _wrkbuf
 22815  003184  6E20               	movwf	?_putsUSART,c
 22816  003186  ECDF  F032         	call	_putsUSART	;wreg free
 22817                           
 22818                           ;main.c: 2268: if (vscpSize > 0) {
 22819  00318A  0101               	movlb	1	; () banked
 22820  00318C  51B1               	movf	_vscpSize& (0+255),w,b
 22821  00318E  E053               	bz	l17200
 22822                           
 22823                           ; BSR set to: 1
 22824                           ;main.c: 2269: putsUSART((char *) ",Data=");
 22825  003190  0E7F               	movlw	high STR_197
 22826  003192  6E21               	movwf	?_putsUSART+1,c
 22827  003194  0E17               	movlw	low STR_197
 22828  003196  6E20               	movwf	?_putsUSART,c
 22829  003198  ECDF  F032         	call	_putsUSART	;wreg free
 22830                           
 22831                           ;main.c: 2270: for (i = 0; i < vscpSize; i++) {
 22832  00319C  0100               	movlb	0	; () banked
 22833  00319E  6BA2               	clrf	receivePrintEventVerbose@i& (0+255),b
 22834  0031A0  D044               	goto	l17198
 22835  0031A2                     l1056:
 22836                           
 22837                           ; BSR set to: 0
 22838                           ;main.c: 2272: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 22839  0031A2  0101               	movlb	1	; () banked
 22840  0031A4  6700               	tstfsz	_bHex& (0+255),b
 22841  0031A6  D005               	goto	l17186
 22842                           
 22843                           ; BSR set to: 1
 22844  0031A8  0E7F               	movlw	high STR_61
 22845  0031AA  0100               	movlb	0	; () banked
 22846  0031AC  6FA1               	movwf	(_receivePrintEventVerbose$1536+1)& (0+255),b
 22847  0031AE  0EED               	movlw	low STR_61
 22848  0031B0  D004               	goto	L49
 22849  0031B2                     l17186:
 22850                           
 22851                           ; BSR set to: 1
 22852  0031B2  0E7F               	movlw	high STR_60
 22853  0031B4  0100               	movlb	0	; () banked
 22854  0031B6  6FA1               	movwf	(_receivePrintEventVerbose$1536+1)& (0+255),b
 22855  0031B8  0E4F               	movlw	low STR_60
 22856  0031BA                     L49:
 22857  0031BA  6FA0               	movwf	_receivePrintEventVerbose$1536& (0+255),b
 22858                           
 22859                           ; BSR set to: 0
 22860  0031BC  0E01               	movlw	high _wrkbuf
 22861  0031BE  0100               	movlb	0	; () banked
 22862  0031C0  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 22863  0031C2  0E55               	movlw	low _wrkbuf
 22864  0031C4  6F6D               	movwf	?_sprintf& (0+255),b
 22865  0031C6  C0A0  F06F         	movff	_receivePrintEventVerbose$1536,?_sprintf+2
 22866  0031CA  C0A1  F070         	movff	_receivePrintEventVerbose$1536+1,?_sprintf+3
 22867  0031CE  0EA5               	movlw	low _vscpData
 22868  0031D0  25A2               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 22869  0031D2  6ED9               	movwf	fsr2l,c
 22870  0031D4  6ADA               	clrf	fsr2h,c
 22871  0031D6  0E01               	movlw	high _vscpData
 22872  0031D8  22DA               	addwfc	fsr2h,f,c
 22873  0031DA  50DF               	movf	indf2,w,c
 22874  0031DC  6F71               	movwf	(?_sprintf+4)& (0+255),b
 22875  0031DE  6B72               	clrf	(?_sprintf+5)& (0+255),b
 22876  0031E0  EC14  F010         	call	_sprintf	;wreg free
 22877                           
 22878                           ; BSR set to: 0
 22879                           ;main.c: 2273: putsUSART(wrkbuf);
 22880  0031E4  0101               	movlb	1	; () banked
 22881  0031E6  0E01               	movlw	high _wrkbuf
 22882  0031E8  6E21               	movwf	?_putsUSART+1,c
 22883  0031EA  0E55               	movlw	low _wrkbuf
 22884  0031EC  6E20               	movwf	?_putsUSART,c
 22885  0031EE  ECDF  F032         	call	_putsUSART	;wreg free
 22886                           
 22887                           ;main.c: 2274: if (i < (vscpSize - 1)) {
 22888  0031F2  0EFF               	movlw	255
 22889  0031F4  0101               	movlb	1	; () banked
 22890  0031F6  25B1               	addwf	_vscpSize& (0+255),w,b
 22891  0031F8  0100               	movlb	0	; () banked
 22892  0031FA  6F8B               	movwf	??_receivePrintEventVerbose& (0+255),b
 22893  0031FC  6B8C               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 22894  0031FE  0EFF               	movlw	255
 22895  003200  238C               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 22896  003202  51A2               	movf	receivePrintEventVerbose@i& (0+255),w,b
 22897  003204  6F8D               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 22898  003206  6B8E               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 22899  003208  518E               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 22900  00320A  0A80               	xorlw	128
 22901  00320C  6F8F               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 22902  00320E  518B               	movf	??_receivePrintEventVerbose& (0+255),w,b
 22903  003210  5D8D               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 22904  003212  518C               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 22905  003214  0A80               	xorlw	128
 22906  003216  598F               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 22907  003218  E206               	bc	l17196
 22908                           
 22909                           ; BSR set to: 0
 22910                           ;main.c: 2275: putsUSART((char *) ",");
 22911  00321A  0E7F               	movlw	high STR_30
 22912  00321C  6E21               	movwf	?_putsUSART+1,c
 22913  00321E  0EF4               	movlw	low STR_30
 22914  003220  6E20               	movwf	?_putsUSART,c
 22915  003222  ECDF  F032         	call	_putsUSART	;wreg free
 22916  003226                     l17196:
 22917  003226  0100               	movlb	0	; () banked
 22918  003228  2BA2               	incf	receivePrintEventVerbose@i& (0+255),f,b
 22919  00322A                     l17198:
 22920                           
 22921                           ; BSR set to: 0
 22922  00322A  0101               	movlb	1	; () banked
 22923  00322C  51B1               	movf	_vscpSize& (0+255),w,b
 22924  00322E  0100               	movlb	0	; () banked
 22925  003230  5DA2               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 22926  003232  E207               	bc	l1063
 22927  003234  D7B6               	goto	l1056
 22928  003236                     l17200:
 22929                           
 22930                           ; BSR set to: 1
 22931                           ;main.c: 2279: putsUSART((char *) ",Data=none");
 22932  003236  0E7E               	movlw	high STR_201
 22933  003238  6E21               	movwf	?_putsUSART+1,c
 22934  00323A  0E5F               	movlw	low STR_201
 22935  00323C  6E20               	movwf	?_putsUSART,c
 22936  00323E  ECDF  F032         	call	_putsUSART	;wreg free
 22937  003242                     l1063:
 22938                           
 22939                           ;main.c: 2280: }
 22940                           ;main.c: 2281: putsUSART((char *) ">\r\n");
 22941  003242  0E7F               	movlw	high STR_202
 22942  003244  6E21               	movwf	?_putsUSART+1,c
 22943  003246  0EC9               	movlw	low STR_202
 22944  003248  6E20               	movwf	?_putsUSART,c
 22945  00324A  ECDF  F032         	call	_putsUSART	;wreg free
 22946                           
 22947                           ;main.c: 2282: return 1;
 22948  00324E  0E01               	movlw	1
 22949  003250  D001               	goto	l1064
 22950  003252                     l17206:
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;main.c: 2283: }
 22954                           ;main.c: 2285: return 0;
 22955  003252  0E00               	movlw	0
 22956  003254                     l1064:
 22957  003254  0012               	return	
 22958  003256                     __end_of_receivePrintEventVerbose:
 22959                           	opt stack 0
 22960                           tblptru	equ	0xFF8
 22961                           tblptrh	equ	0xFF7
 22962                           tblptrl	equ	0xFF6
 22963                           tablat	equ	0xFF5
 22964                           prodh	equ	0xFF4
 22965                           prodl	equ	0xFF3
 22966                           intcon	equ	0xFF2
 22967                           indf0	equ	0xFEF
 22968                           postinc0	equ	0xFEE
 22969                           fsr0h	equ	0xFEA
 22970                           fsr0l	equ	0xFE9
 22971                           wreg	equ	0xFE8
 22972                           indf1	equ	0xFE7
 22973                           postinc1	equ	0xFE6
 22974                           postdec1	equ	0xFE5
 22975                           fsr1h	equ	0xFE2
 22976                           fsr1l	equ	0xFE1
 22977                           indf2	equ	0xFDF
 22978                           postinc2	equ	0xFDE
 22979                           postdec2	equ	0xFDD
 22980                           plusw2	equ	0xFDB
 22981                           fsr2h	equ	0xFDA
 22982                           fsr2l	equ	0xFD9
 22983                           status	equ	0xFD8
 22984                           
 22985 ;; *************** function _ReadTimer3 *****************
 22986 ;; Defined at:
 22987 ;;		line 14 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t3read.c"
 22988 ;; Parameters:    Size  Location     Type
 22989 ;;		None
 22990 ;; Auto vars:     Size  Location     Type
 22991 ;;  timer           2   32[COMRAM] struct Timers
 22992 ;; Return value:  Size  Location     Type
 22993 ;;                  2   30[COMRAM] unsigned int 
 22994 ;; Registers used:
 22995 ;;		None
 22996 ;; Tracked objects:
 22997 ;;		On entry : F/0
 22998 ;;		On exit  : F/0
 22999 ;;		Unchanged: F/0
 23000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23001 ;;      Params:         2       0       0       0       0       0       0
 23002 ;;      Locals:         2       0       0       0       0       0       0
 23003 ;;      Temps:          0       0       0       0       0       0       0
 23004 ;;      Totals:         4       0       0       0       0       0       0
 23005 ;;Total ram usage:        4 bytes
 23006 ;; Hardware stack levels used:    1
 23007 ;; Hardware stack levels required when called:    3
 23008 ;; This function calls:
 23009 ;;		Nothing
 23010 ;; This function is called by:
 23011 ;;		_receivePrintEventVerbose
 23012 ;;		_receiveSendEventCANAL
 23013 ;;		_receiveSendMultiEventCANAL
 23014 ;; This function uses a non-reentrant model
 23015 ;;
 23016                           
 23017                           	psect	text53
 23018  006B2A                     __ptext53:
 23019                           	opt stack 0
 23020  006B2A                     _ReadTimer3:
 23021                           	opt stack 25
 23022                           
 23023                           ; BSR set to: 0
 23024                           
 23025                           ;incstack = 0
 23026                           ;incstack = 0
 23027  006B2A  CFB2 F021          	movff	4018,ReadTimer3@timer	;volatile
 23028  006B2E  CFB3 F022          	movff	4019,ReadTimer3@timer+1	;volatile
 23029  006B32  C021  F01F         	movff	ReadTimer3@timer,?_ReadTimer3
 23030  006B36  C022  F020         	movff	ReadTimer3@timer+1,?_ReadTimer3+1
 23031                           
 23032                           ; BSR set to: 0
 23033  006B3A  0012               	return	
 23034  006B3C                     __end_of_ReadTimer3:
 23035                           	opt stack 0
 23036                           tblptru	equ	0xFF8
 23037                           tblptrh	equ	0xFF7
 23038                           tblptrl	equ	0xFF6
 23039                           tablat	equ	0xFF5
 23040                           prodh	equ	0xFF4
 23041                           prodl	equ	0xFF3
 23042                           intcon	equ	0xFF2
 23043                           indf0	equ	0xFEF
 23044                           postinc0	equ	0xFEE
 23045                           fsr0h	equ	0xFEA
 23046                           fsr0l	equ	0xFE9
 23047                           wreg	equ	0xFE8
 23048                           indf1	equ	0xFE7
 23049                           postinc1	equ	0xFE6
 23050                           postdec1	equ	0xFE5
 23051                           fsr1h	equ	0xFE2
 23052                           fsr1l	equ	0xFE1
 23053                           indf2	equ	0xFDF
 23054                           postinc2	equ	0xFDE
 23055                           postdec2	equ	0xFDD
 23056                           plusw2	equ	0xFDB
 23057                           fsr2h	equ	0xFDA
 23058                           fsr2l	equ	0xFD9
 23059                           status	equ	0xFD8
 23060                           
 23061 ;; *************** function _getVSCPFrame *****************
 23062 ;; Defined at:
 23063 ;;		line 3609 in file "main.c"
 23064 ;; Parameters:    Size  Location     Type
 23065 ;;  pvscpclass      2   12[BANK0 ] PTR unsigned short 
 23066 ;;		 -> vscpClass(2), 
 23067 ;;  pvscptype       2   14[BANK0 ] PTR unsigned char 
 23068 ;;		 -> vscpType(1), 
 23069 ;;  pNodeId         2   16[BANK0 ] PTR unsigned char 
 23070 ;;		 -> vscpNodeId(1), 
 23071 ;;  pPriority       2   18[BANK0 ] PTR unsigned char 
 23072 ;;		 -> vscpPriority(1), 
 23073 ;;  pSize           2   20[BANK0 ] PTR unsigned char 
 23074 ;;		 -> vscpSize(1), 
 23075 ;;  pData           2   22[BANK0 ] PTR unsigned char 
 23076 ;;		 -> vscpData(8), 
 23077 ;; Auto vars:     Size  Location     Type
 23078 ;;  id              4   28[BANK0 ] unsigned long 
 23079 ;; Return value:  Size  Location     Type
 23080 ;;                  1    wreg      unsigned char 
 23081 ;; Registers used:
 23082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 23083 ;; Tracked objects:
 23084 ;;		On entry : F/0
 23085 ;;		On exit  : F/0
 23086 ;;		Unchanged: 0/0
 23087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23088 ;;      Params:         0      12       0       0       0       0       0
 23089 ;;      Locals:         0       4       0       0       0       0       0
 23090 ;;      Temps:          0       4       0       0       0       0       0
 23091 ;;      Totals:         0      20       0       0       0       0       0
 23092 ;;Total ram usage:       20 bytes
 23093 ;; Hardware stack levels used:    1
 23094 ;; Hardware stack levels required when called:    5
 23095 ;; This function calls:
 23096 ;;		_getCANFrame
 23097 ;; This function is called by:
 23098 ;;		_receivePrintEventVerbose
 23099 ;;		_readRegister
 23100 ;;		_readRegisterExtended
 23101 ;;		_writeRegisterExtended
 23102 ;; This function uses a non-reentrant model
 23103 ;;
 23104                           
 23105                           	psect	text54
 23106  005F02                     __ptext54:
 23107                           	opt stack 0
 23108  005F02                     _getVSCPFrame:
 23109                           	opt stack 22
 23110                           
 23111                           ; BSR set to: 0
 23112                           ;main.c: 3610: uint32_t id;
 23113                           ;main.c: 3612: if (!getCANFrame(&id, pSize, pData)) {
 23114                           
 23115                           ; BSR set to: 0
 23116                           ;incstack = 0
 23117                           ;incstack = 0
 23118  005F02  C074  F068         	movff	getVSCPFrame@pSize,?_getCANFrame
 23119  005F06  C075  F069         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 23120  005F0A  C076  F06A         	movff	getVSCPFrame@pData,?_getCANFrame+2
 23121  005F0E  C077  F06B         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 23122  005F12  0E7C               	movlw	getVSCPFrame@id& (0+255)
 23123  005F14  EC61  F02C         	call	_getCANFrame
 23124  005F18  0900               	iorlw	0
 23125  005F1A  E102               	bnz	l18618
 23126                           
 23127                           ; BSR set to: 0
 23128                           ;main.c: 3613: return 0;
 23129  005F1C  0E00               	movlw	0
 23130  005F1E  D033               	goto	l1444
 23131  005F20                     l18618:
 23132                           
 23133                           ; BSR set to: 0
 23134                           ;main.c: 3614: }
 23135                           ;main.c: 3616: *pNodeId = id & 0x0ff;
 23136  005F20  C070  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 23137  005F24  C071  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 23138  005F28  C07C  FFDF         	movff	getVSCPFrame@id,indf2
 23139                           
 23140                           ;main.c: 3617: *pvscptype = (id >> 8) & 0xff;
 23141  005F2C  C06E  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 23142  005F30  C06F  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 23143  005F34  C07D  FFDF         	movff	getVSCPFrame@id+1,indf2
 23144                           
 23145                           ; BSR set to: 0
 23146                           ;main.c: 3618: *pvscpclass = (id >> 16) & 0x1ff;
 23147  005F38  0100               	movlb	0	; () banked
 23148  005F3A  517E               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 23149  005F3C  6F78               	movwf	??_getVSCPFrame& (0+255),b
 23150  005F3E  0E01               	movlw	1
 23151  005F40  157F               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 23152  005F42  6F79               	movwf	(??_getVSCPFrame+1)& (0+255),b
 23153  005F44  C06C  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 23154  005F48  C06D  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 23155  005F4C  C078  FFDE         	movff	??_getVSCPFrame,postinc2
 23156  005F50  C079  FFDD         	movff	??_getVSCPFrame+1,postdec2
 23157                           
 23158                           ; BSR set to: 0
 23159                           ;main.c: 3619: *pPriority = (uint16_t) (0x07 & (id >> 26));
 23160  005F54  C07C  F078         	movff	getVSCPFrame@id,??_getVSCPFrame
 23161  005F58  C07D  F079         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 23162  005F5C  C07E  F07A         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 23163  005F60  C07F  F07B         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 23164  005F64  0E1B               	movlw	27
 23165  005F66  D005               	goto	u24710
 23166  005F68                     u24715:
 23167  005F68  90D8               	bcf	status,0,c
 23168  005F6A  337B               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 23169  005F6C  337A               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 23170  005F6E  3379               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 23171  005F70  3378               	rrcf	??_getVSCPFrame& (0+255),f,b
 23172  005F72                     u24710:
 23173  005F72  2EE8               	decfsz	wreg,f,c
 23174  005F74  D7F9               	goto	u24715
 23175  005F76  5178               	movf	??_getVSCPFrame& (0+255),w,b
 23176  005F78  0B07               	andlw	7
 23177  005F7A  C072  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 23178  005F7E  C073  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 23179  005F82  6EDF               	movwf	indf2,c
 23180                           
 23181                           ; BSR set to: 0
 23182                           ;main.c: 3621: return 1;
 23183  005F84  0E01               	movlw	1
 23184  005F86                     l1444:
 23185                           
 23186                           ; BSR set to: 0
 23187  005F86  0012               	return	
 23188  005F88                     __end_of_getVSCPFrame:
 23189                           	opt stack 0
 23190                           tblptru	equ	0xFF8
 23191                           tblptrh	equ	0xFF7
 23192                           tblptrl	equ	0xFF6
 23193                           tablat	equ	0xFF5
 23194                           prodh	equ	0xFF4
 23195                           prodl	equ	0xFF3
 23196                           intcon	equ	0xFF2
 23197                           indf0	equ	0xFEF
 23198                           postinc0	equ	0xFEE
 23199                           fsr0h	equ	0xFEA
 23200                           fsr0l	equ	0xFE9
 23201                           wreg	equ	0xFE8
 23202                           indf1	equ	0xFE7
 23203                           postinc1	equ	0xFE6
 23204                           postdec1	equ	0xFE5
 23205                           fsr1h	equ	0xFE2
 23206                           fsr1l	equ	0xFE1
 23207                           indf2	equ	0xFDF
 23208                           postinc2	equ	0xFDE
 23209                           postdec2	equ	0xFDD
 23210                           plusw2	equ	0xFDB
 23211                           fsr2h	equ	0xFDA
 23212                           fsr2l	equ	0xFD9
 23213                           status	equ	0xFD8
 23214                           
 23215 ;; *************** function _getCANFrame *****************
 23216 ;; Defined at:
 23217 ;;		line 3645 in file "main.c"
 23218 ;; Parameters:    Size  Location     Type
 23219 ;;  pid             1    wreg     PTR unsigned long 
 23220 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 23221 ;;  pdlc            2    8[BANK0 ] PTR unsigned char 
 23222 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 23223 ;;  pdata           2   10[BANK0 ] PTR unsigned char 
 23224 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 23225 ;; Auto vars:     Size  Location     Type
 23226 ;;  pid             1   36[COMRAM] PTR unsigned long 
 23227 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 23228 ;; Return value:  Size  Location     Type
 23229 ;;                  1    wreg      unsigned char 
 23230 ;; Registers used:
 23231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 23232 ;; Tracked objects:
 23233 ;;		On entry : F/0
 23234 ;;		On exit  : F/0
 23235 ;;		Unchanged: 0/0
 23236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23237 ;;      Params:         0       4       0       0       0       0       0
 23238 ;;      Locals:         1       0       0       0       0       0       0
 23239 ;;      Temps:          0       0       0       0       0       0       0
 23240 ;;      Totals:         1       4       0       0       0       0       0
 23241 ;;Total ram usage:        5 bytes
 23242 ;; Hardware stack levels used:    1
 23243 ;; Hardware stack levels required when called:    4
 23244 ;; This function calls:
 23245 ;;		_fifo_read
 23246 ;; This function is called by:
 23247 ;;		_receiveSendEventCANAL
 23248 ;;		_receiveSendMultiEventCANAL
 23249 ;;		_receiveSendEventSLCAN
 23250 ;;		_getVSCPFrame
 23251 ;; This function uses a non-reentrant model
 23252 ;;
 23253                           
 23254                           	psect	text55
 23255  0058C2                     __ptext55:
 23256                           	opt stack 0
 23257  0058C2                     _getCANFrame:
 23258                           	opt stack 24
 23259                           
 23260                           ; BSR set to: 0
 23261                           ;incstack = 0
 23262                           ;incstack = 0
 23263                           ;getCANFrame@pid stored from wreg
 23264  0058C2  CFE8 F025          	movff	wreg,getCANFrame@pid
 23265                           
 23266                           ; BSR set to: 0
 23267                           ;main.c: 3646: if ( fifo_canrxcount ) {
 23268  0058C6  5031               	movf	_fifo_canrxcount,w,c	;volatile
 23269  0058C8  E011               	bz	l18638
 23270                           
 23271                           ; BSR set to: 0
 23272                           ;main.c: 3649: (INTCONbits.GIE = 0);
 23273  0058CA  9EF2               	bcf	intcon,7,c	;volatile
 23274                           
 23275                           ; BSR set to: 0
 23276                           ;main.c: 3650: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 23277  0058CC  D848               	call	PL64	;call to abstracted procedure
 23278  0058CE  641F               	cpfsgt	?_fifo_read,c
 23279  0058D0  6A20               	clrf	?_fifo_read+1,c
 23280  0058D2  C025  F021         	movff	getCANFrame@pid,?_fifo_read+2
 23281  0058D6  6A22               	clrf	?_fifo_read+3,c
 23282  0058D8  6A24               	clrf	?_fifo_read+5,c
 23283  0058DA  0E04               	movlw	4
 23284  0058DC  6E23               	movwf	?_fifo_read+4,c
 23285  0058DE  ECA6  F029         	call	_fifo_read	;wreg free
 23286  0058E2  501F               	movf	?_fifo_read,w,c
 23287  0058E4  0A04               	xorlw	4
 23288  0058E6  1020               	iorwf	?_fifo_read+1,w,c
 23289  0058E8  E003               	bz	l18642
 23290  0058EA                     l18636:
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;main.c: 3651: (INTCONbits.GIE = 1);
 23294  0058EA  8EF2               	bsf	intcon,7,c	;volatile
 23295  0058EC                     l18638:
 23296                           
 23297                           ; BSR set to: 0
 23298                           ;main.c: 3652: return 0;
 23299  0058EC  0E00               	movlw	0
 23300  0058EE  D036               	goto	l1453
 23301  0058F0                     l18642:
 23302                           
 23303                           ; BSR set to: 0
 23304                           ;main.c: 3653: }
 23305                           ;main.c: 3656: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 23306  0058F0  D836               	call	PL64	;call to abstracted procedure
 23307  0058F2  641F               	cpfsgt	?_fifo_read,c
 23308  0058F4  6A20               	clrf	?_fifo_read+1,c
 23309  0058F6  C068  F021         	movff	getCANFrame@pdlc,?_fifo_read+2
 23310  0058FA  C069  F022         	movff	getCANFrame@pdlc+1,?_fifo_read+3
 23311  0058FE  6A24               	clrf	?_fifo_read+5,c
 23312  005900  0E01               	movlw	1
 23313  005902  6E23               	movwf	?_fifo_read+4,c
 23314  005904  ECA6  F029         	call	_fifo_read	;wreg free
 23315  005908  041F               	decf	?_fifo_read,w,c
 23316  00590A  1020               	iorwf	?_fifo_read+1,w,c
 23317  00590C  E1EE               	bnz	l18636
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;main.c: 3659: }
 23321                           ;main.c: 3662: if ( *pdlc > 8 ) {
 23322  00590E  C068  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23323  005912  C069  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23324  005916  0E08               	movlw	8
 23325  005918  64DF               	cpfsgt	indf2,c
 23326  00591A  D005               	goto	l18654
 23327                           
 23328                           ; BSR set to: 0
 23329                           ;main.c: 3663: *pdlc = 0;
 23330  00591C  C068  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23331  005920  C069  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23332  005924  6ADF               	clrf	indf2,c
 23333  005926                     l18654:
 23334                           
 23335                           ; BSR set to: 0
 23336                           ;main.c: 3664: }
 23337                           ;main.c: 3667: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 23338  005926  D81B               	call	PL64	;call to abstracted procedure
 23339  005928  641F               	cpfsgt	?_fifo_read,c
 23340  00592A  6A20               	clrf	?_fifo_read+1,c
 23341  00592C  C06A  F021         	movff	getCANFrame@pdata,?_fifo_read+2
 23342  005930  C06B  F022         	movff	getCANFrame@pdata+1,?_fifo_read+3
 23343  005934  C068  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23344  005938  C069  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23345  00593C  50DF               	movf	indf2,w,c
 23346  00593E  6E23               	movwf	?_fifo_read+4,c
 23347  005940  6A24               	clrf	?_fifo_read+5,c
 23348  005942  ECA6  F029         	call	_fifo_read	;wreg free
 23349  005946  C068  FFD9         	movff	getCANFrame@pdlc,fsr2l
 23350  00594A  C069  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 23351  00594E  50DF               	movf	indf2,w,c
 23352  005950  181F               	xorwf	?_fifo_read,w,c
 23353  005952  1020               	iorwf	?_fifo_read+1,w,c
 23354  005954  E1CA               	bnz	l18636
 23355                           
 23356                           ; BSR set to: 0
 23357                           ;main.c: 3670: }
 23358                           ;main.c: 3672: fifo_canrxcount--;
 23359  005956  0631               	decf	_fifo_canrxcount,f,c	;volatile
 23360                           
 23361                           ; BSR set to: 0
 23362                           ;main.c: 3674: (INTCONbits.GIE = 1);
 23363  005958  8EF2               	bsf	intcon,7,c	;volatile
 23364                           
 23365                           ; BSR set to: 0
 23366                           ;main.c: 3676: return 1;
 23367  00595A  0E01               	movlw	1
 23368  00595C                     l1453:
 23369                           
 23370                           ; BSR set to: 0
 23371  00595C  0012               	return	
 23372  00595E                     __end_of_getCANFrame:
 23373                           	opt stack 0
 23374  00595E                     PL64:
 23375                           	opt stack 24
 23376  00595E  0E34               	movlw	low _canInputFifo
 23377  005960  6E1F               	movwf	?_fifo_read,c
 23378  005962  0E00               	movlw	high _canInputFifo
 23379  005964  6E20               	movwf	?_fifo_read+1,c
 23380  005966  0E0F               	movlw	15
 23381  005968  6E20               	movwf	?_fifo_read+1,c
 23382  00596A  0E5F               	movlw	__accesstop+-1
 23383  00596C  0012               	return	
 23384  00596E                     __end_ofPL64:
 23385                           	opt stack 0
 23386                           tblptru	equ	0xFF8
 23387                           tblptrh	equ	0xFF7
 23388                           tblptrl	equ	0xFF6
 23389                           tablat	equ	0xFF5
 23390                           prodh	equ	0xFF4
 23391                           prodl	equ	0xFF3
 23392                           intcon	equ	0xFF2
 23393                           indf0	equ	0xFEF
 23394                           postinc0	equ	0xFEE
 23395                           fsr0h	equ	0xFEA
 23396                           fsr0l	equ	0xFE9
 23397                           wreg	equ	0xFE8
 23398                           indf1	equ	0xFE7
 23399                           postinc1	equ	0xFE6
 23400                           postdec1	equ	0xFE5
 23401                           fsr1h	equ	0xFE2
 23402                           fsr1l	equ	0xFE1
 23403                           indf2	equ	0xFDF
 23404                           postinc2	equ	0xFDE
 23405                           postdec2	equ	0xFDD
 23406                           plusw2	equ	0xFDB
 23407                           fsr2h	equ	0xFDA
 23408                           fsr2l	equ	0xFD9
 23409                           status	equ	0xFD8
 23410                           
 23411 ;; *************** function _fifo_read *****************
 23412 ;; Defined at:
 23413 ;;		line 29 in file "fifo.c"
 23414 ;; Parameters:    Size  Location     Type
 23415 ;;  f               2   30[COMRAM] PTR struct .
 23416 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 23417 ;;  buf             2   32[COMRAM] PTR const void 
 23418 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 23419 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 23420 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 23421 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 23422 ;;  nbytes          2   34[COMRAM] unsigned short 
 23423 ;; Auto vars:     Size  Location     Type
 23424 ;;  i               2    6[BANK0 ] unsigned short 
 23425 ;;  p               2    4[BANK0 ] PTR unsigned char 
 23426 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 23427 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 23428 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 23429 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 23430 ;; Return value:  Size  Location     Type
 23431 ;;                  2   30[COMRAM] unsigned short 
 23432 ;; Registers used:
 23433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23434 ;; Tracked objects:
 23435 ;;		On entry : D/0
 23436 ;;		On exit  : F/0
 23437 ;;		Unchanged: 0/0
 23438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23439 ;;      Params:         6       0       0       0       0       0       0
 23440 ;;      Locals:         0       4       0       0       0       0       0
 23441 ;;      Temps:          0       4       0       0       0       0       0
 23442 ;;      Totals:         6       8       0       0       0       0       0
 23443 ;;Total ram usage:       14 bytes
 23444 ;; Hardware stack levels used:    1
 23445 ;; Hardware stack levels required when called:    3
 23446 ;; This function calls:
 23447 ;;		Nothing
 23448 ;; This function is called by:
 23449 ;;		_main
 23450 ;;		_doModeVerbose
 23451 ;;		_doModeVscp
 23452 ;;		_doModeSLCAN
 23453 ;;		_getCANFrame
 23454 ;; This function uses a non-reentrant model
 23455 ;;
 23456                           
 23457                           	psect	text56
 23458  00534C                     __ptext56:
 23459                           	opt stack 0
 23460  00534C                     _fifo_read:
 23461                           	opt stack 24
 23462                           
 23463                           ;fifo.c: 30: uint16_t i;
 23464                           ;fifo.c: 31: uint8_t *p;
 23465                           ;fifo.c: 32: p = buf;
 23466                           
 23467                           ; BSR set to: 0
 23468                           ;incstack = 0
 23469                           ;incstack = 0
 23470  00534C  C021  F064         	movff	fifo_read@buf,fifo_read@p
 23471  005350  C022  F065         	movff	fifo_read@buf+1,fifo_read@p+1
 23472                           
 23473                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 23474  005354  0100               	movlb	0	; () banked
 23475  005356  6B66               	clrf	fifo_read@i& (0+255),b
 23476  005358  6B67               	clrf	(fifo_read@i+1)& (0+255),b
 23477  00535A  D04A               	goto	l15462
 23478  00535C                     l15448:
 23479                           
 23480                           ; BSR set to: 0
 23481                           ;fifo.c: 36: if ( f->tail != f->head ) {
 23482  00535C  EE20 F002          	lfsr	2,2
 23483  005360  D851               	call	PL52	;call to abstracted procedure
 23484  005362  18E5               	xorwf	postdec1,w,c
 23485  005364  CFDF FFE8          	movff	indf2,wreg
 23486  005368  B4D8               	btfsc	status,2,c
 23487  00536A  18E7               	xorwf	indf1,w,c
 23488  00536C  E03A               	bz	l1704
 23489                           
 23490                           ; BSR set to: 0
 23491                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 23492  00536E  EE20 F004          	lfsr	2,4
 23493  005372  501F               	movf	fifo_read@f,w,c
 23494  005374  26D9               	addwf	fsr2l,f,c
 23495  005376  5020               	movf	fifo_read@f+1,w,c
 23496  005378  22DA               	addwfc	fsr2h,f,c
 23497  00537A  CFDE F060          	movff	postinc2,??_fifo_read
 23498  00537E  CFDD F061          	movff	postdec2,??_fifo_read+1
 23499  005382  C01F  FFD9         	movff	fifo_read@f,fsr2l
 23500  005386  C020  FFDA         	movff	fifo_read@f+1,fsr2h
 23501  00538A  CFDE F062          	movff	postinc2,??_fifo_read+2
 23502  00538E  CFDD F063          	movff	postdec2,??_fifo_read+3
 23503  005392  5160               	movf	??_fifo_read& (0+255),w,b
 23504  005394  2562               	addwf	(??_fifo_read+2)& (0+255),w,b
 23505  005396  6ED9               	movwf	fsr2l,c
 23506  005398  5161               	movf	(??_fifo_read+1)& (0+255),w,b
 23507  00539A  2163               	addwfc	(??_fifo_read+3)& (0+255),w,b
 23508  00539C  6EDA               	movwf	fsr2h,c
 23509  00539E  C064  FFE1         	movff	fifo_read@p,fsr1l
 23510  0053A2  C065  FFE2         	movff	fifo_read@p+1,fsr1h
 23511  0053A6  CFDF FFE7          	movff	indf2,indf1
 23512                           
 23513                           ; BSR set to: 0
 23514  0053AA  4B64               	infsnz	fifo_read@p& (0+255),f,b
 23515  0053AC  2B65               	incf	(fifo_read@p+1)& (0+255),f,b
 23516                           
 23517                           ; BSR set to: 0
 23518                           ;fifo.c: 38: f->tail++;
 23519  0053AE  EE20 F004          	lfsr	2,4
 23520  0053B2  501F               	movf	fifo_read@f,w,c
 23521  0053B4  26D9               	addwf	fsr2l,f,c
 23522  0053B6  5020               	movf	fifo_read@f+1,w,c
 23523  0053B8  22DA               	addwfc	fsr2h,f,c
 23524  0053BA  2ADE               	incf	postinc2,f,c
 23525  0053BC  0E00               	movlw	0
 23526  0053BE  22DD               	addwfc	postdec2,f,c
 23527                           
 23528                           ; BSR set to: 0
 23529                           ;fifo.c: 39: if (f->tail >= f->size) {
 23530  0053C0  EE20 F006          	lfsr	2,6
 23531  0053C4  D81F               	call	PL52	;call to abstracted procedure
 23532  0053C6  5CE5               	subwf	postdec1,w,c
 23533  0053C8  E102               	bnz	u19755
 23534  0053CA  50DF               	movf	indf2,w,c
 23535  0053CC  5CE7               	subwf	indf1,w,c
 23536  0053CE                     u19755:
 23537  0053CE  E30E               	bnc	l15460
 23538                           
 23539                           ; BSR set to: 0
 23540                           ;fifo.c: 40: f->tail = 0;
 23541  0053D0  EE20 F004          	lfsr	2,4
 23542  0053D4  501F               	movf	fifo_read@f,w,c
 23543  0053D6  26D9               	addwf	fsr2l,f,c
 23544  0053D8  5020               	movf	fifo_read@f+1,w,c
 23545  0053DA  22DA               	addwfc	fsr2h,f,c
 23546  0053DC  6ADE               	clrf	postinc2,c
 23547  0053DE  6ADD               	clrf	postdec2,c
 23548  0053E0  D005               	goto	l15460
 23549  0053E2                     l1704:
 23550                           
 23551                           ; BSR set to: 0
 23552                           ;fifo.c: 43: else {
 23553                           ;fifo.c: 44: return i;
 23554  0053E2  C066  F01F         	movff	fifo_read@i,?_fifo_read
 23555  0053E6  C067  F020         	movff	fifo_read@i+1,?_fifo_read+1
 23556  0053EA  D00B               	goto	l1707
 23557  0053EC                     l15460:
 23558                           
 23559                           ; BSR set to: 0
 23560  0053EC  4B66               	infsnz	fifo_read@i& (0+255),f,b
 23561  0053EE  2B67               	incf	(fifo_read@i+1)& (0+255),f,b
 23562  0053F0                     l15462:
 23563                           
 23564                           ; BSR set to: 0
 23565  0053F0  5023               	movf	fifo_read@nbytes,w,c
 23566  0053F2  5D66               	subwf	fifo_read@i& (0+255),w,b
 23567  0053F4  5024               	movf	fifo_read@nbytes+1,w,c
 23568  0053F6  5967               	subwfb	(fifo_read@i+1)& (0+255),w,b
 23569  0053F8  E3B1               	bnc	l15448
 23570                           
 23571                           ; BSR set to: 0
 23572                           ;fifo.c: 45: }
 23573                           ;fifo.c: 47: }
 23574                           ;fifo.c: 49: return nbytes;
 23575  0053FA  C023  F01F         	movff	fifo_read@nbytes,?_fifo_read
 23576  0053FE  C024  F020         	movff	fifo_read@nbytes+1,?_fifo_read+1
 23577  005402                     l1707:
 23578                           
 23579                           ; BSR set to: 0
 23580  005402  0012               	return	
 23581  005404                     __end_of_fifo_read:
 23582                           	opt stack 0
 23583  005404                     PL52:
 23584                           	opt stack 24
 23585  005404  501F               	movf	fifo_read@f,w,c
 23586  005406  26D9               	addwf	fsr2l,f,c
 23587  005408  5020               	movf	fifo_read@f+1,w,c
 23588  00540A  22DA               	addwfc	fsr2h,f,c
 23589  00540C  EE10 F004          	lfsr	1,4
 23590  005410  501F               	movf	fifo_read@f,w,c
 23591  005412  26E1               	addwf	fsr1l,f,c
 23592  005414  5020               	movf	fifo_read@f+1,w,c
 23593  005416  22E2               	addwfc	fsr1h,f,c
 23594  005418  52E6               	movf	postinc1,f,c
 23595  00541A  52DE               	movf	postinc2,f,c
 23596  00541C  50DD               	movf	postdec2,w,c
 23597  00541E  0012               	return	
 23598  005420                     __end_ofPL52:
 23599                           	opt stack 0
 23600                           tblptru	equ	0xFF8
 23601                           tblptrh	equ	0xFF7
 23602                           tblptrl	equ	0xFF6
 23603                           tablat	equ	0xFF5
 23604                           prodh	equ	0xFF4
 23605                           prodl	equ	0xFF3
 23606                           intcon	equ	0xFF2
 23607                           indf0	equ	0xFEF
 23608                           postinc0	equ	0xFEE
 23609                           fsr0h	equ	0xFEA
 23610                           fsr0l	equ	0xFE9
 23611                           wreg	equ	0xFE8
 23612                           indf1	equ	0xFE7
 23613                           postinc1	equ	0xFE6
 23614                           postdec1	equ	0xFE5
 23615                           fsr1h	equ	0xFE2
 23616                           fsr1l	equ	0xFE1
 23617                           indf2	equ	0xFDF
 23618                           postinc2	equ	0xFDE
 23619                           postdec2	equ	0xFDD
 23620                           plusw2	equ	0xFDB
 23621                           fsr2h	equ	0xFDA
 23622                           fsr2l	equ	0xFD9
 23623                           status	equ	0xFD8
 23624                           
 23625 ;; *************** function _sprintf *****************
 23626 ;; Defined at:
 23627 ;;		line 493 in file "/opt/microchip/xc8/v1.21/sources/common/doprnt.c"
 23628 ;; Parameters:    Size  Location     Type
 23629 ;;  sp              2   13[BANK0 ] PTR unsigned char 
 23630 ;;		 -> wrkbuf(80), 
 23631 ;;  f               2   15[BANK0 ] PTR const unsigned char 
 23632 ;;		 -> STR_245(3), STR_244(7), STR_238(3), STR_237(7), 
 23633 ;;		 -> STR_233(4), STR_232(8), STR_229(4), STR_228(8), 
 23634 ;;		 -> STR_225(4), STR_224(8), STR_221(4), STR_220(8), 
 23635 ;;		 -> STR_217(4), STR_216(7), STR_213(4), STR_212(7), 
 23636 ;;		 -> STR_209(4), STR_208(7), STR_205(4), STR_204(7), 
 23637 ;;		 -> STR_199(3), STR_198(7), STR_196(3), STR_195(7), 
 23638 ;;		 -> STR_193(3), STR_192(7), STR_190(3), STR_189(7), 
 23639 ;;		 -> STR_187(3), STR_186(7), STR_184(4), STR_183(8), 
 23640 ;;		 -> STR_181(3), STR_180(7), STR_101(3), STR_100(7), 
 23641 ;;		 -> STR_96(4), STR_95(8), STR_92(4), STR_91(8), 
 23642 ;;		 -> STR_77(3), STR_76(7), STR_75(3), STR_74(7), 
 23643 ;;		 -> STR_72(6), STR_71(10), STR_66(3), STR_65(7), 
 23644 ;;		 -> STR_63(3), STR_62(7), STR_61(3), STR_60(7), 
 23645 ;;		 -> STR_58(6), STR_57(10), 
 23646 ;; Auto vars:     Size  Location     Type
 23647 ;;  idx             1   24[BANK0 ] unsigned char 
 23648 ;;  _val            4   36[BANK0 ] struct .
 23649 ;;  flag            2   41[BANK0 ] unsigned short 
 23650 ;;  width           2   34[BANK0 ] int 
 23651 ;;  prec            2   32[BANK0 ] int 
 23652 ;;  c               1   40[BANK0 ] char 
 23653 ;;  ap              1   31[BANK0 ] PTR void [1]
 23654 ;;		 -> ?_sprintf(2), 
 23655 ;; Return value:  Size  Location     Type
 23656 ;;                  2   13[BANK0 ] int 
 23657 ;; Registers used:
 23658 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23659 ;; Tracked objects:
 23660 ;;		On entry : F/0
 23661 ;;		On exit  : F/0
 23662 ;;		Unchanged: 0/0
 23663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23664 ;;      Params:         0       8       0       0       0       0       0
 23665 ;;      Locals:         0      19       0       0       0       0       0
 23666 ;;      Temps:          0       3       0       0       0       0       0
 23667 ;;      Totals:         0      30       0       0       0       0       0
 23668 ;;Total ram usage:       30 bytes
 23669 ;; Hardware stack levels used:    1
 23670 ;; Hardware stack levels required when called:    4
 23671 ;; This function calls:
 23672 ;;		_isdigit
 23673 ;;		___lldiv
 23674 ;;		___llmod
 23675 ;;		___wmul
 23676 ;; This function is called by:
 23677 ;;		_doModeVerbose
 23678 ;;		_receivePrintEventVerbose
 23679 ;;		_printStatistics
 23680 ;;		_printErrors
 23681 ;; This function uses a non-reentrant model
 23682 ;;
 23683                           
 23684                           	psect	text57
 23685  002028                     __ptext57:
 23686                           	opt stack 0
 23687  002028                     _sprintf:
 23688                           	opt stack 25
 23689                           
 23690                           ; BSR set to: 0
 23691                           ;doprnt.c: 494: va_list ap;
 23692                           ;doprnt.c: 499: signed char c;
 23693                           ;doprnt.c: 501: int width;
 23694                           ;doprnt.c: 504: int prec;
 23695                           ;doprnt.c: 508: unsigned short flag;
 23696                           ;doprnt.c: 527: union {
 23697                           ;doprnt.c: 528: unsigned long _val;
 23698                           ;doprnt.c: 529: struct {
 23699                           ;doprnt.c: 530: const char * _cp;
 23700                           ;doprnt.c: 531: unsigned _len;
 23701                           ;doprnt.c: 532: } _str;
 23702                           ;doprnt.c: 533: } _val;
 23703                           ;doprnt.c: 542: *ap = __va_start();
 23704                           
 23705                           ; BSR set to: 0
 23706                           ;incstack = 0
 23707                           ;incstack = 0
 23708  002028  0E71               	movlw	low (?_sprintf+4)
 23709  00202A  6F7F               	movwf	sprintf@ap& (0+255),b
 23710                           
 23711                           ;doprnt.c: 545: while(c = *f++) {
 23712  00202C  D330               	goto	l17916
 23713  00202E                     l17582:
 23714                           
 23715                           ; BSR set to: 0
 23716                           ;doprnt.c: 547: if(c != '%')
 23717  00202E  5188               	movf	sprintf@c& (0+255),w,b
 23718  002030  0A25               	xorlw	37
 23719  002032  E009               	bz	l1791
 23720                           
 23721                           ; BSR set to: 0
 23722                           ;doprnt.c: 549: {
 23723                           ;doprnt.c: 550: ((*sp++ = (c)));
 23724  002034  C06D  FFD9         	movff	sprintf@sp,fsr2l
 23725  002038  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 23726  00203C  C088  FFDF         	movff	sprintf@c,indf2
 23727                           
 23728                           ; BSR set to: 0
 23729  002040  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 23730  002042  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 23731                           
 23732                           ;doprnt.c: 551: continue;
 23733  002044  D324               	goto	l17916
 23734  002046                     l1791:
 23735                           
 23736                           ; BSR set to: 0
 23737                           ;doprnt.c: 552: }
 23738                           ;doprnt.c: 555: width = 0;
 23739  002046  6B82               	clrf	sprintf@width& (0+255),b
 23740  002048  6B83               	clrf	(sprintf@width+1)& (0+255),b
 23741                           
 23742                           ;doprnt.c: 557: flag = 0;
 23743  00204A  6B89               	clrf	sprintf@flag& (0+255),b
 23744  00204C  6B8A               	clrf	(sprintf@flag+1)& (0+255),b
 23745  00204E  D009               	goto	l17598
 23746  002050                     l17588:
 23747                           
 23748                           ; BSR set to: 0
 23749                           ;doprnt.c: 563: flag |= 0x08;
 23750  002050  8789               	bsf	sprintf@flag& (0+255),3,b
 23751  002052  D005               	goto	L50
 23752  002054                     l17590:
 23753                           
 23754                           ; BSR set to: 0
 23755                           ;doprnt.c: 570: flag |= 0x01;
 23756  002054  8189               	bsf	sprintf@flag& (0+255),0,b
 23757  002056  D003               	goto	L50
 23758  002058                     l17592:
 23759                           
 23760                           ; BSR set to: 0
 23761                           ;doprnt.c: 583: flag |= 0x800;
 23762  002058  878A               	bsf	(sprintf@flag+1)& (0+255),3,b
 23763  00205A  D001               	goto	L50
 23764  00205C                     l17594:
 23765                           
 23766                           ; BSR set to: 0
 23767                           ;doprnt.c: 589: flag |= 0x04;
 23768  00205C  8589               	bsf	sprintf@flag& (0+255),2,b
 23769  00205E                     L50:
 23770                           
 23771                           ;doprnt.c: 590: f++;
 23772  00205E  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23773  002060  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23774  002062                     l17598:
 23775                           
 23776                           ; BSR set to: 0
 23777  002062  C06F  FFF6         	movff	sprintf@f,tblptrl
 23778  002066  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23779  00206A  0008               	tblrd		*
 23780  00206C  50F5               	movf	tablat,w,c
 23781                           
 23782                           ; Switch size 1, requested type "space"
 23783                           ; Number of cases is 4, Range of values is 32 to 48
 23784                           ; switch strategies available:
 23785                           ; Name         Instructions Cycles
 23786                           ; simple_byte           13     7 (average)
 23787                           ;	Chosen strategy is simple_byte
 23788  00206E  0A20               	xorlw	32	; case 32
 23789  002070  E0F1               	bz	l17590
 23790  002072  0A03               	xorlw	3	; case 35
 23791  002074  E0F1               	bz	l17592
 23792  002076  0A0E               	xorlw	14	; case 45
 23793  002078  E0EB               	bz	l17588
 23794  00207A  0A1D               	xorlw	29	; case 48
 23795  00207C  E0EF               	bz	l17594
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;doprnt.c: 602: if(flag & 0x08)
 23799  00207E  B789               	btfsc	sprintf@flag& (0+255),3,b
 23800                           
 23801                           ; BSR set to: 0
 23802                           ;doprnt.c: 603: flag &= ~0x04;
 23803  002080  9589               	bcf	sprintf@flag& (0+255),2,b
 23804                           
 23805                           ; BSR set to: 0
 23806                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 23807  002082  C06F  FFF6         	movff	sprintf@f,tblptrl
 23808  002086  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23809  00208A  0008               	tblrd		*
 23810  00208C  50F5               	movf	tablat,w,c
 23811  00208E  EC47  F035         	call	_isdigit
 23812  002092  E326               	bnc	l17614
 23813                           
 23814                           ;doprnt.c: 607: width = 0;
 23815  002094  0100               	movlb	0	; () banked
 23816  002096  6B82               	clrf	sprintf@width& (0+255),b
 23817  002098  6B83               	clrf	(sprintf@width+1)& (0+255),b
 23818  00209A                     l17606:
 23819                           
 23820                           ;doprnt.c: 609: width *= 10;
 23821  00209A  C082  F023         	movff	sprintf@width,?___wmul
 23822  00209E  C083  F024         	movff	sprintf@width+1,?___wmul+1
 23823  0020A2  6A26               	clrf	?___wmul+3,c
 23824  0020A4  0E0A               	movlw	10
 23825  0020A6  6E25               	movwf	?___wmul+2,c
 23826  0020A8  EC53  F034         	call	___wmul	;wreg free
 23827  0020AC  C023  F082         	movff	?___wmul,sprintf@width
 23828  0020B0  C024  F083         	movff	?___wmul+1,sprintf@width+1
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;doprnt.c: 610: width += *f++ - '0';
 23832  0020B4  C06F  FFF6         	movff	sprintf@f,tblptrl
 23833  0020B8  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23834  0020BC  0008               	tblrd		*
 23835  0020BE  CFF5 F075          	movff	tablat,??_sprintf
 23836  0020C2  0ED0               	movlw	208
 23837  0020C4  2575               	addwf	??_sprintf& (0+255),w,b
 23838  0020C6  6F76               	movwf	(??_sprintf+1)& (0+255),b
 23839  0020C8  6B77               	clrf	(??_sprintf+2)& (0+255),b
 23840  0020CA  0EFF               	movlw	255
 23841  0020CC  2377               	addwfc	(??_sprintf+2)& (0+255),f,b
 23842  0020CE  5176               	movf	(??_sprintf+1)& (0+255),w,b
 23843  0020D0  2782               	addwf	sprintf@width& (0+255),f,b
 23844  0020D2  5177               	movf	(??_sprintf+2)& (0+255),w,b
 23845  0020D4  2383               	addwfc	(sprintf@width+1)& (0+255),f,b
 23846                           
 23847                           ; BSR set to: 0
 23848                           
 23849                           ; BSR set to: 0
 23850                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 23851  0020D6  DB39               	call	PL110	;call to abstracted procedure
 23852  0020D8  EC47  F035         	call	_isdigit
 23853  0020DC  E315               	bnc	l17622
 23854  0020DE  D7DD               	goto	l17606
 23855  0020E0                     l17614:
 23856  0020E0  0100               	movlb	0	; () banked
 23857  0020E2  C06F  FFF6         	movff	sprintf@f,tblptrl
 23858  0020E6  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23859  0020EA  0008               	tblrd		*
 23860  0020EC  50F5               	movf	tablat,w,c
 23861  0020EE  0A2A               	xorlw	42
 23862  0020F0  E10B               	bnz	l17622
 23863                           
 23864                           ; BSR set to: 0
 23865                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 23866  0020F2  517F               	movf	sprintf@ap& (0+255),w,b
 23867  0020F4  6ED9               	movwf	fsr2l,c
 23868  0020F6  6ADA               	clrf	fsr2h,c
 23869  0020F8  CFDE F082          	movff	postinc2,sprintf@width
 23870  0020FC  CFDD F083          	movff	postdec2,sprintf@width+1
 23871                           
 23872                           ; BSR set to: 0
 23873  002100  0E02               	movlw	2
 23874  002102  277F               	addwf	sprintf@ap& (0+255),f,b
 23875                           
 23876                           ; BSR set to: 0
 23877                           ;doprnt.c: 615: f++;
 23878  002104  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23879  002106  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23880  002108                     l17622:
 23881                           
 23882                           ;doprnt.c: 617: }
 23883                           ;doprnt.c: 620: if(*f == '.') {
 23884  002108  0100               	movlb	0	; () banked
 23885  00210A  C06F  FFF6         	movff	sprintf@f,tblptrl
 23886  00210E  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23887  002112  0008               	tblrd		*
 23888  002114  50F5               	movf	tablat,w,c
 23889  002116  0A2E               	xorlw	46
 23890  002118  E137               	bnz	l1807
 23891                           
 23892                           ; BSR set to: 0
 23893                           ;doprnt.c: 621: flag |= 0x4000;
 23894  00211A  8D8A               	bsf	(sprintf@flag+1)& (0+255),6,b
 23895                           
 23896                           ;doprnt.c: 622: f++;
 23897                           
 23898                           ; BSR set to: 0
 23899                           ;doprnt.c: 624: if(*f == '*') {
 23900  00211C  DB16               	call	PL110	;call to abstracted procedure
 23901  00211E  0A2A               	xorlw	42
 23902  002120  E10C               	bnz	l1808
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 23906  002122  517F               	movf	sprintf@ap& (0+255),w,b
 23907  002124  6ED9               	movwf	fsr2l,c
 23908  002126  6ADA               	clrf	fsr2h,c
 23909  002128  CFDE F080          	movff	postinc2,sprintf@prec
 23910  00212C  CFDD F081          	movff	postdec2,sprintf@prec+1
 23911                           
 23912                           ; BSR set to: 0
 23913  002130  0E02               	movlw	2
 23914  002132  277F               	addwf	sprintf@ap& (0+255),f,b
 23915                           
 23916                           ; BSR set to: 0
 23917                           ;doprnt.c: 626: f++;
 23918  002134  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23919  002136  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23920                           
 23921                           ;doprnt.c: 627: } else
 23922  002138  D088               	goto	l17692
 23923  00213A                     l1808:
 23924                           
 23925                           ; BSR set to: 0
 23926                           ;doprnt.c: 629: {
 23927                           ;doprnt.c: 630: prec = 0;
 23928  00213A  6B80               	clrf	sprintf@prec& (0+255),b
 23929  00213C  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 23930                           
 23931                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 23932  00213E  D01A               	goto	l17638
 23933  002140                     l17634:
 23934                           
 23935                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 23936  002140  C080  F023         	movff	sprintf@prec,?___wmul
 23937  002144  C081  F024         	movff	sprintf@prec+1,?___wmul+1
 23938  002148  6A26               	clrf	?___wmul+3,c
 23939  00214A  0E0A               	movlw	10
 23940  00214C  6E25               	movwf	?___wmul+2,c
 23941  00214E  EC53  F034         	call	___wmul	;wreg free
 23942  002152  C06F  FFF6         	movff	sprintf@f,tblptrl
 23943  002156  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23944  00215A  0008               	tblrd		*
 23945  00215C  50F5               	movf	tablat,w,c
 23946  00215E  2623               	addwf	?___wmul,f,c
 23947  002160  0E00               	movlw	0
 23948  002162  2224               	addwfc	?___wmul+1,f,c
 23949  002164  0ED0               	movlw	208
 23950  002166  2423               	addwf	?___wmul,w,c
 23951  002168  6F80               	movwf	sprintf@prec& (0+255),b
 23952  00216A  0EFF               	movlw	255
 23953  00216C  2024               	addwfc	?___wmul+1,w,c
 23954  00216E  6F81               	movwf	(sprintf@prec+1)& (0+255),b
 23955                           
 23956                           ; BSR set to: 0
 23957  002170  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23958  002172  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23959  002174                     l17638:
 23960                           
 23961                           ; BSR set to: 0
 23962  002174  C06F  FFF6         	movff	sprintf@f,tblptrl
 23963  002178  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23964  00217C  0008               	tblrd		*
 23965  00217E  50F5               	movf	tablat,w,c
 23966  002180  EC47  F035         	call	_isdigit
 23967  002184  E362               	bnc	l17692
 23968  002186  D7DC               	goto	l17634
 23969  002188                     l1807:
 23970                           
 23971                           ; BSR set to: 0
 23972                           ;doprnt.c: 635: prec = 0;
 23973  002188  6B80               	clrf	sprintf@prec& (0+255),b
 23974  00218A  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 23975  00218C  D05E               	goto	l17692
 23976  00218E                     l17640:
 23977                           
 23978                           ; BSR set to: 0
 23979                           ;doprnt.c: 652: flag |= 0x10;
 23980  00218E  8989               	bsf	sprintf@flag& (0+255),4,b
 23981                           
 23982                           ;doprnt.c: 653: goto loop;
 23983  002190  D05C               	goto	l17692
 23984  002192                     l17642:
 23985                           
 23986                           ; BSR set to: 0
 23987                           ;doprnt.c: 700: flag |= 0x40;
 23988  002192  8D89               	bsf	sprintf@flag& (0+255),6,b
 23989                           
 23990                           ;doprnt.c: 702: break;
 23991  002194  D070               	goto	l17694
 23992  002196                     l17644:
 23993                           
 23994                           ; BSR set to: 0
 23995                           ;doprnt.c: 723: flag |= 0x20;
 23996  002196  8B89               	bsf	sprintf@flag& (0+255),5,b
 23997  002198                     l1824:
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;doprnt.c: 730: flag |= 0x80;
 24001  002198  8F89               	bsf	sprintf@flag& (0+255),7,b
 24002                           
 24003                           ;doprnt.c: 732: break;
 24004  00219A  D06D               	goto	l17694
 24005  00219C                     l17646:
 24006                           
 24007                           ; BSR set to: 0
 24008                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 24009  00219C  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24010  00219E  1180               	iorwf	sprintf@prec& (0+255),w,b
 24011  0021A0  E009               	bz	l17652
 24012                           
 24013                           ; BSR set to: 0
 24014  0021A2  5185               	movf	(sprintf@_val+1)& (0+255),w,b
 24015  0021A4  5D80               	subwf	sprintf@prec& (0+255),w,b
 24016  0021A6  5186               	movf	(sprintf@_val+2)& (0+255),w,b
 24017  0021A8  5981               	subwfb	(sprintf@prec+1)& (0+255),w,b
 24018  0021AA  E204               	bc	l17652
 24019                           
 24020                           ; BSR set to: 0
 24021                           ;doprnt.c: 763: _val._str._len = prec;
 24022  0021AC  C080  F085         	movff	sprintf@prec,sprintf@_val+1
 24023  0021B0  C081  F086         	movff	sprintf@prec+1,sprintf@_val+2
 24024  0021B4                     l17652:
 24025                           
 24026                           ; BSR set to: 0
 24027                           ;doprnt.c: 766: if(width > _val._str._len)
 24028  0021B4  5182               	movf	sprintf@width& (0+255),w,b
 24029  0021B6  5D85               	subwf	(sprintf@_val+1)& (0+255),w,b
 24030  0021B8  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24031  0021BA  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24032  0021BC  E207               	bc	l1827
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;doprnt.c: 767: width -= _val._str._len;
 24036  0021BE  EE20  F085         	lfsr	2,sprintf@_val+1
 24037  0021C2  50DE               	movf	postinc2,w,c
 24038  0021C4  5F82               	subwf	sprintf@width& (0+255),f,b
 24039  0021C6  50DD               	movf	postdec2,w,c
 24040  0021C8  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 24041  0021CA  D002               	goto	l1828
 24042  0021CC                     l1827:
 24043                           
 24044                           ; BSR set to: 0
 24045                           ;doprnt.c: 768: else
 24046                           ;doprnt.c: 769: width = 0;
 24047  0021CC  6B82               	clrf	sprintf@width& (0+255),b
 24048  0021CE  6B83               	clrf	(sprintf@width+1)& (0+255),b
 24049  0021D0                     l1828:
 24050                           
 24051                           ; BSR set to: 0
 24052                           ;doprnt.c: 771: if(!(flag & 0x08))
 24053  0021D0  A789               	btfss	sprintf@flag& (0+255),3,b
 24054  0021D2  D004               	goto	l17662
 24055  0021D4  D015               	goto	l17670
 24056  0021D6                     l17658:
 24057                           
 24058                           ; BSR set to: 0
 24059                           ;doprnt.c: 774: ((*sp++ = (' ')));
 24060  0021D6  DAA8               	call	PL82	;call to abstracted procedure
 24061                           
 24062                           ; BSR set to: 0
 24063  0021D8  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24064  0021DA  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24065  0021DC                     l17662:
 24066                           
 24067                           ; BSR set to: 0
 24068  0021DC  0782               	decf	sprintf@width& (0+255),f,b
 24069  0021DE  DAC3               	call	PL146	;call to abstracted procedure
 24070  0021E0  B4D8               	btfsc	status,2,c
 24071  0021E2  2983               	incf	(sprintf@width+1)& (0+255),w,b
 24072  0021E4  E00D               	bz	l17670
 24073  0021E6  D7F7               	goto	l17658
 24074  0021E8                     l17664:
 24075                           
 24076                           ; BSR set to: 0
 24077                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 24078  0021E8  5184               	movf	sprintf@_val& (0+255),w,b
 24079  0021EA  6ED9               	movwf	fsr2l,c
 24080  0021EC  6ADA               	clrf	fsr2h,c
 24081  0021EE  C06D  FFE1         	movff	sprintf@sp,fsr1l
 24082  0021F2  C06E  FFE2         	movff	sprintf@sp+1,fsr1h
 24083  0021F6  CFDF FFE7          	movff	indf2,indf1
 24084                           
 24085                           ; BSR set to: 0
 24086  0021FA  2B84               	incf	sprintf@_val& (0+255),f,b
 24087                           
 24088                           ; BSR set to: 0
 24089  0021FC  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24090  0021FE  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24091  002200                     l17670:
 24092                           
 24093                           ; BSR set to: 0
 24094  002200  0785               	decf	(sprintf@_val+1)& (0+255),f,b
 24095  002202  A0D8               	btfss	status,0,c
 24096  002204  0786               	decf	(sprintf@_val+2)& (0+255),f,b
 24097  002206  0100               	movlb	0	; () banked
 24098  002208  2985               	incf	(sprintf@_val+1)& (0+255),w,b
 24099  00220A  B4D8               	btfsc	status,2,c
 24100  00220C  2986               	incf	(sprintf@_val+2)& (0+255),w,b
 24101  00220E  E1EC               	bnz	l17664
 24102                           
 24103                           ; BSR set to: 0
 24104                           ;doprnt.c: 779: if(flag & 0x08)
 24105  002210  B789               	btfsc	sprintf@flag& (0+255),3,b
 24106  002212  D004               	goto	l17678
 24107  002214  D23C               	goto	l17916
 24108  002216                     l17674:
 24109                           
 24110                           ; BSR set to: 0
 24111                           ;doprnt.c: 781: ((*sp++ = (' ')));
 24112  002216  DA88               	call	PL82	;call to abstracted procedure
 24113                           
 24114                           ; BSR set to: 0
 24115  002218  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24116  00221A  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24117  00221C                     l17678:
 24118                           
 24119                           ; BSR set to: 0
 24120  00221C  0782               	decf	sprintf@width& (0+255),f,b
 24121  00221E  DAA3               	call	PL146	;call to abstracted procedure
 24122  002220  B4D8               	btfsc	status,2,c
 24123  002222  2983               	incf	(sprintf@width+1)& (0+255),w,b
 24124  002224  E101 D233          	bz	l17916
 24125  002228  D7F6               	goto	l17674
 24126  00222A                     l17680:
 24127                           
 24128                           ; BSR set to: 0
 24129                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 24130  00222A  517F               	movf	sprintf@ap& (0+255),w,b
 24131  00222C  6ED9               	movwf	fsr2l,c
 24132  00222E  6ADA               	clrf	fsr2h,c
 24133  002230  50DF               	movf	indf2,w,c
 24134  002232  6F88               	movwf	sprintf@c& (0+255),b
 24135                           
 24136                           ; BSR set to: 0
 24137  002234  0E02               	movlw	2
 24138  002236  277F               	addwf	sprintf@ap& (0+255),f,b
 24139  002238                     l17684:
 24140                           
 24141                           ; BSR set to: 0
 24142                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 24143  002238  0E88               	movlw	low sprintf@c
 24144  00223A  6F84               	movwf	sprintf@_val& (0+255),b
 24145                           
 24146                           ; BSR set to: 0
 24147                           ;doprnt.c: 815: _val._str._len = 1;
 24148  00223C  6B86               	clrf	(sprintf@_val+2)& (0+255),b
 24149  00223E  0E01               	movlw	1
 24150  002240  6F85               	movwf	(sprintf@_val+1)& (0+255),b
 24151                           
 24152                           ;doprnt.c: 816: goto dostring;
 24153  002242  D7AC               	goto	l17646
 24154  002244                     l17688:
 24155                           
 24156                           ; BSR set to: 0
 24157                           ;doprnt.c: 827: flag |= 0xC0;
 24158  002244  0EC0               	movlw	192
 24159  002246  1389               	iorwf	sprintf@flag& (0+255),f,b
 24160                           
 24161                           ;doprnt.c: 828: break;
 24162  002248  D016               	goto	l17694
 24163  00224A                     l17692:
 24164  00224A  0100               	movlb	0	; () banked
 24165  00224C  DA74               	call	PL86	;call to abstracted procedure
 24166  00224E  5188               	movf	sprintf@c& (0+255),w,b
 24167                           
 24168                           ; Switch size 1, requested type "space"
 24169                           ; Number of cases is 9, Range of values is 0 to 120
 24170                           ; switch strategies available:
 24171                           ; Name         Instructions Cycles
 24172                           ; simple_byte           28    15 (average)
 24173                           ;	Chosen strategy is simple_byte
 24174  002250  E101 D221          	bz	l17918
 24175  002254  0A58               	xorlw	88	; case 88
 24176  002256  E09F               	bz	l17644
 24177  002258  0A3B               	xorlw	59	; case 99
 24178  00225A  E0E7               	bz	l17680
 24179  00225C  0A07               	xorlw	7	; case 100
 24180  00225E  E00B               	bz	l17694
 24181  002260  0A0D               	xorlw	13	; case 105
 24182  002262  E009               	bz	l17694
 24183  002264  0A05               	xorlw	5	; case 108
 24184  002266  E093               	bz	l17640
 24185  002268  0A03               	xorlw	3	; case 111
 24186  00226A  E093               	bz	l17642
 24187  00226C  0A1A               	xorlw	26	; case 117
 24188  00226E  E0EA               	bz	l17688
 24189  002270  0A0D               	xorlw	13	; case 120
 24190  002272  E092               	bz	l1824
 24191  002274  D7E1               	goto	l17684
 24192  002276                     l17694:
 24193                           
 24194                           ; BSR set to: 0
 24195                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 24196  002276  5189               	movf	sprintf@flag& (0+255),w,b
 24197  002278  0BC0               	andlw	192
 24198  00227A  E120               	bnz	l1843
 24199                           
 24200                           ; BSR set to: 0
 24201                           ;doprnt.c: 1260: {
 24202                           ;doprnt.c: 1262: if(flag & 0x10)
 24203  00227C  A989               	btfss	sprintf@flag& (0+255),4,b
 24204  00227E  D003               	goto	l17702
 24205                           
 24206                           ; BSR set to: 0
 24207                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 24208  002280  517F               	movf	sprintf@ap& (0+255),w,b
 24209                           
 24210                           ; BSR set to: 0
 24211  002282  DA47               	call	PL76	;call to abstracted procedure
 24212  002284  D00D               	goto	L51
 24213  002286                     l17702:
 24214                           
 24215                           ; BSR set to: 0
 24216                           ;doprnt.c: 1264: else
 24217                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 24218  002286  517F               	movf	sprintf@ap& (0+255),w,b
 24219  002288  6ED9               	movwf	fsr2l,c
 24220  00228A  6ADA               	clrf	fsr2h,c
 24221  00228C  CFDE F084          	movff	postinc2,sprintf@_val
 24222  002290  CFDD F085          	movff	postdec2,sprintf@_val+1
 24223  002294  0E00               	movlw	0
 24224  002296  BF85               	btfsc	(sprintf@_val+1)& (0+255),7,b
 24225  002298  0EFF               	movlw	-1
 24226  00229A  6F86               	movwf	(sprintf@_val+2)& (0+255),b
 24227  00229C  6F87               	movwf	(sprintf@_val+3)& (0+255),b
 24228                           
 24229                           ; BSR set to: 0
 24230  00229E  0E02               	movlw	2
 24231  0022A0                     L51:
 24232  0022A0  277F               	addwf	sprintf@ap& (0+255),f,b
 24233                           
 24234                           ; BSR set to: 0
 24235                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 24236  0022A2  AF87               	btfss	(sprintf@_val+3)& (0+255),7,b
 24237  0022A4  D01F               	goto	l17720
 24238                           
 24239                           ; BSR set to: 0
 24240                           ;doprnt.c: 1269: flag |= 0x03;
 24241  0022A6  0E03               	movlw	3
 24242  0022A8  1389               	iorwf	sprintf@flag& (0+255),f,b
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;doprnt.c: 1270: _val._val = -_val._val;
 24246  0022AA  1F87               	comf	(sprintf@_val+3)& (0+255),f,b
 24247  0022AC  1F86               	comf	(sprintf@_val+2)& (0+255),f,b
 24248  0022AE  1F85               	comf	(sprintf@_val+1)& (0+255),f,b
 24249  0022B0  6D84               	negf	sprintf@_val& (0+255),b
 24250  0022B2  0E00               	movlw	0
 24251  0022B4  2385               	addwfc	(sprintf@_val+1)& (0+255),f,b
 24252  0022B6  2386               	addwfc	(sprintf@_val+2)& (0+255),f,b
 24253  0022B8  2387               	addwfc	(sprintf@_val+3)& (0+255),f,b
 24254  0022BA  D014               	goto	l17720
 24255  0022BC                     l1843:
 24256                           
 24257                           ; BSR set to: 0
 24258                           ;doprnt.c: 1275: else
 24259                           ;doprnt.c: 1280: {
 24260                           ;doprnt.c: 1288: if(flag & 0x10)
 24261  0022BC  A989               	btfss	sprintf@flag& (0+255),4,b
 24262  0022BE  D003               	goto	l17716
 24263                           
 24264                           ; BSR set to: 0
 24265                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 24266  0022C0  517F               	movf	sprintf@ap& (0+255),w,b
 24267                           
 24268                           ; BSR set to: 0
 24269  0022C2  DA27               	call	PL76	;call to abstracted procedure
 24270  0022C4  D00E               	goto	L52
 24271  0022C6                     l17716:
 24272                           
 24273                           ; BSR set to: 0
 24274                           ;doprnt.c: 1290: else
 24275                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 24276  0022C6  517F               	movf	sprintf@ap& (0+255),w,b
 24277  0022C8  6ED9               	movwf	fsr2l,c
 24278  0022CA  6ADA               	clrf	fsr2h,c
 24279  0022CC  CFDE F075          	movff	postinc2,??_sprintf
 24280  0022D0  CFDD F076          	movff	postdec2,??_sprintf+1
 24281  0022D4  C075  F084         	movff	??_sprintf,sprintf@_val
 24282  0022D8  C076  F085         	movff	??_sprintf+1,sprintf@_val+1
 24283  0022DC  6B86               	clrf	(sprintf@_val+2)& (0+255),b
 24284  0022DE  6B87               	clrf	(sprintf@_val+3)& (0+255),b
 24285                           
 24286                           ; BSR set to: 0
 24287  0022E0  0E02               	movlw	2
 24288  0022E2                     L52:
 24289  0022E2  277F               	addwf	sprintf@ap& (0+255),f,b
 24290  0022E4                     l17720:
 24291                           
 24292                           ; BSR set to: 0
 24293                           ;doprnt.c: 1294: }
 24294                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 24295  0022E4  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24296  0022E6  1180               	iorwf	sprintf@prec& (0+255),w,b
 24297  0022E8  E15C               	bnz	l17770
 24298                           
 24299                           ; BSR set to: 0
 24300  0022EA  5187               	movf	(sprintf@_val+3)& (0+255),w,b
 24301  0022EC  1184               	iorwf	sprintf@_val& (0+255),w,b
 24302  0022EE  1185               	iorwf	(sprintf@_val+1)& (0+255),w,b
 24303  0022F0  1186               	iorwf	(sprintf@_val+2)& (0+255),w,b
 24304  0022F2  E157               	bnz	l17770
 24305                           
 24306                           ; BSR set to: 0
 24307                           ;doprnt.c: 1298: prec++;
 24308  0022F4  4B80               	infsnz	sprintf@prec& (0+255),f,b
 24309  0022F6  2B81               	incf	(sprintf@prec+1)& (0+255),f,b
 24310  0022F8  D054               	goto	l17770
 24311  0022FA                     l17726:
 24312                           
 24313                           ; BSR set to: 0
 24314                           ;doprnt.c: 1309: case 0xC0:
 24315                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 24316  0022FA  0E01               	movlw	1
 24317  0022FC  6F88               	movwf	sprintf@c& (0+255),b
 24318  0022FE                     l17728:
 24319                           
 24320                           ; BSR set to: 0
 24321  0022FE  5188               	movf	sprintf@c& (0+255),w,b
 24322  002300  0A0A               	xorlw	10
 24323  002302  E058               	bz	l17772
 24324                           
 24325                           ; BSR set to: 0
 24326                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 24327  002304  5188               	movf	sprintf@c& (0+255),w,b
 24328  002306  0D04               	mullw	4
 24329  002308  0E1C               	movlw	low _dpowers
 24330  00230A  24F3               	addwf	prodl,w,c
 24331  00230C  6EF6               	movwf	tblptrl,c
 24332  00230E  0E6E               	movlw	high _dpowers
 24333  002310  20F4               	addwfc	prodh,w,c
 24334  002312  6EF7               	movwf	tblptrh,c
 24335  002314  0009               	tblrd		*+
 24336  002316  50F5               	movf	tablat,w,c
 24337  002318  5D84               	subwf	sprintf@_val& (0+255),w,b
 24338  00231A  0009               	tblrd		*+
 24339  00231C  50F5               	movf	tablat,w,c
 24340  00231E  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24341  002320  0009               	tblrd		*+
 24342  002322  50F5               	movf	tablat,w,c
 24343  002324  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24344  002326  0009               	tblrd		*+
 24345  002328  50F5               	movf	tablat,w,c
 24346  00232A  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24347  00232C  E343               	bnc	l17772
 24348                           
 24349                           ; BSR set to: 0
 24350  00232E  2B88               	incf	sprintf@c& (0+255),f,b
 24351  002330  D7E6               	goto	l17728
 24352  002332                     l17740:
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 24356  002332  0E01               	movlw	1
 24357  002334  6F88               	movwf	sprintf@c& (0+255),b
 24358  002336                     l17742:
 24359                           
 24360                           ; BSR set to: 0
 24361  002336  5188               	movf	sprintf@c& (0+255),w,b
 24362  002338  0A08               	xorlw	8
 24363  00233A  E03C               	bz	l17772
 24364                           
 24365                           ; BSR set to: 0
 24366                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 24367  00233C  5188               	movf	sprintf@c& (0+255),w,b
 24368  00233E  0D04               	mullw	4
 24369  002340  0E44               	movlw	low _hexpowers
 24370  002342  24F3               	addwf	prodl,w,c
 24371  002344  6EF6               	movwf	tblptrl,c
 24372  002346  0E6E               	movlw	high _hexpowers
 24373  002348  20F4               	addwfc	prodh,w,c
 24374  00234A  6EF7               	movwf	tblptrh,c
 24375  00234C  0009               	tblrd		*+
 24376  00234E  50F5               	movf	tablat,w,c
 24377  002350  5D84               	subwf	sprintf@_val& (0+255),w,b
 24378  002352  0009               	tblrd		*+
 24379  002354  50F5               	movf	tablat,w,c
 24380  002356  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24381  002358  0009               	tblrd		*+
 24382  00235A  50F5               	movf	tablat,w,c
 24383  00235C  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24384  00235E  0009               	tblrd		*+
 24385  002360  50F5               	movf	tablat,w,c
 24386  002362  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24387  002364  E327               	bnc	l17772
 24388                           
 24389                           ; BSR set to: 0
 24390  002366  2B88               	incf	sprintf@c& (0+255),f,b
 24391  002368  D7E6               	goto	l17742
 24392  00236A                     l17754:
 24393                           
 24394                           ; BSR set to: 0
 24395                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 24396  00236A  0E01               	movlw	1
 24397  00236C  6F88               	movwf	sprintf@c& (0+255),b
 24398  00236E                     l17756:
 24399                           
 24400                           ; BSR set to: 0
 24401  00236E  5188               	movf	sprintf@c& (0+255),w,b
 24402  002370  0A0C               	xorlw	12
 24403  002372  E020               	bz	l17772
 24404                           
 24405                           ; BSR set to: 0
 24406                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 24407  002374  5188               	movf	sprintf@c& (0+255),w,b
 24408  002376  0D04               	mullw	4
 24409  002378  0EEC               	movlw	low _octpowers
 24410  00237A  24F3               	addwf	prodl,w,c
 24411  00237C  6EF6               	movwf	tblptrl,c
 24412  00237E  0E6D               	movlw	high _octpowers
 24413  002380  20F4               	addwfc	prodh,w,c
 24414  002382  6EF7               	movwf	tblptrh,c
 24415  002384  0009               	tblrd		*+
 24416  002386  50F5               	movf	tablat,w,c
 24417  002388  5D84               	subwf	sprintf@_val& (0+255),w,b
 24418  00238A  0009               	tblrd		*+
 24419  00238C  50F5               	movf	tablat,w,c
 24420  00238E  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 24421  002390  0009               	tblrd		*+
 24422  002392  50F5               	movf	tablat,w,c
 24423  002394  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 24424  002396  0009               	tblrd		*+
 24425  002398  50F5               	movf	tablat,w,c
 24426  00239A  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 24427  00239C  E30B               	bnc	l17772
 24428                           
 24429                           ; BSR set to: 0
 24430  00239E  2B88               	incf	sprintf@c& (0+255),f,b
 24431  0023A0  D7E6               	goto	l17756
 24432  0023A2                     l17770:
 24433                           
 24434                           ; BSR set to: 0
 24435  0023A2  5189               	movf	sprintf@flag& (0+255),w,b
 24436  0023A4  0BC0               	andlw	192
 24437                           
 24438                           ; Switch size 1, requested type "space"
 24439                           ; Number of cases is 4, Range of values is 0 to 192
 24440                           ; switch strategies available:
 24441                           ; Name         Instructions Cycles
 24442                           ; simple_byte           13     7 (average)
 24443                           ;	Chosen strategy is simple_byte
 24444  0023A6  E0A9               	bz	l17726
 24445  0023A8  0A40               	xorlw	64	; case 64
 24446  0023AA  E0DF               	bz	l17754
 24447  0023AC  0AC0               	xorlw	192	; case 128
 24448  0023AE  E0C1               	bz	l17740
 24449  0023B0  0A40               	xorlw	64	; case 192
 24450  0023B2  E0A3               	bz	l17726
 24451  0023B4                     l17772:
 24452                           
 24453                           ; BSR set to: 0
 24454                           ;doprnt.c: 1346: if(c < prec)
 24455  0023B4  0E80               	movlw	128
 24456  0023B6  BF88               	btfsc	sprintf@c& (0+255),7,b
 24457  0023B8  0E7F               	movlw	127
 24458  0023BA  6F75               	movwf	??_sprintf& (0+255),b
 24459  0023BC  5180               	movf	sprintf@prec& (0+255),w,b
 24460  0023BE  5D88               	subwf	sprintf@c& (0+255),w,b
 24461  0023C0  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24462  0023C2  0A80               	xorlw	128
 24463  0023C4  5975               	subwfb	??_sprintf& (0+255),w,b
 24464  0023C6  E203               	bc	l17776
 24465                           
 24466                           ; BSR set to: 0
 24467                           ;doprnt.c: 1347: c = prec;
 24468  0023C8  C080  F088         	movff	sprintf@prec,sprintf@c
 24469  0023CC  D00F               	goto	l17780
 24470  0023CE                     l17776:
 24471                           
 24472                           ; BSR set to: 0
 24473                           ;doprnt.c: 1348: else if(prec < c)
 24474  0023CE  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24475  0023D0  0A80               	xorlw	128
 24476  0023D2  6F75               	movwf	??_sprintf& (0+255),b
 24477  0023D4  5188               	movf	sprintf@c& (0+255),w,b
 24478  0023D6  5D80               	subwf	sprintf@prec& (0+255),w,b
 24479  0023D8  0E80               	movlw	128
 24480  0023DA  BF88               	btfsc	sprintf@c& (0+255),7,b
 24481  0023DC  0E7F               	movlw	127
 24482  0023DE  5975               	subwfb	??_sprintf& (0+255),w,b
 24483  0023E0  E205               	bc	l17780
 24484                           
 24485                           ; BSR set to: 0
 24486                           ;doprnt.c: 1349: prec = c;
 24487  0023E2  5188               	movf	sprintf@c& (0+255),w,b
 24488  0023E4  6F80               	movwf	sprintf@prec& (0+255),b
 24489  0023E6  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 24490  0023E8  BF80               	btfsc	sprintf@prec& (0+255),7,b
 24491  0023EA  0781               	decf	(sprintf@prec+1)& (0+255),f,b
 24492  0023EC                     l17780:
 24493                           
 24494                           ; BSR set to: 0
 24495                           ;doprnt.c: 1352: if(width && flag & 0x03)
 24496  0023EC  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24497  0023EE  1182               	iorwf	sprintf@width& (0+255),w,b
 24498  0023F0  E006               	bz	l17786
 24499                           
 24500                           ; BSR set to: 0
 24501  0023F2  5189               	movf	sprintf@flag& (0+255),w,b
 24502  0023F4  0B03               	andlw	3
 24503  0023F6  E003               	bz	l17786
 24504                           
 24505                           ; BSR set to: 0
 24506                           ;doprnt.c: 1353: width--;
 24507  0023F8  0782               	decf	sprintf@width& (0+255),f,b
 24508  0023FA  A0D8               	btfss	status,0,c
 24509  0023FC  0783               	decf	(sprintf@width+1)& (0+255),f,b
 24510  0023FE                     l17786:
 24511                           
 24512                           ; BSR set to: 0
 24513                           ;doprnt.c: 1355: if(flag & 0x4000) {
 24514  0023FE  AD8A               	btfss	(sprintf@flag+1)& (0+255),6,b
 24515  002400  D010               	goto	l17792
 24516                           
 24517                           ; BSR set to: 0
 24518                           ;doprnt.c: 1356: if(width > prec)
 24519  002402  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24520  002404  0A80               	xorlw	128
 24521  002406  6F75               	movwf	??_sprintf& (0+255),b
 24522  002408  5182               	movf	sprintf@width& (0+255),w,b
 24523  00240A  5D80               	subwf	sprintf@prec& (0+255),w,b
 24524  00240C  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24525  00240E  0A80               	xorlw	128
 24526  002410  5975               	subwfb	??_sprintf& (0+255),w,b
 24527  002412  E205               	bc	l1871
 24528                           
 24529                           ; BSR set to: 0
 24530                           ;doprnt.c: 1357: width -= prec;
 24531  002414  5180               	movf	sprintf@prec& (0+255),w,b
 24532  002416  5F82               	subwf	sprintf@width& (0+255),f,b
 24533  002418  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 24534  00241A  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 24535  00241C  D002               	goto	l17792
 24536  00241E                     l1871:
 24537                           
 24538                           ; BSR set to: 0
 24539                           ;doprnt.c: 1358: else
 24540                           ;doprnt.c: 1359: width = 0;
 24541  00241E  6B82               	clrf	sprintf@width& (0+255),b
 24542  002420  6B83               	clrf	(sprintf@width+1)& (0+255),b
 24543  002422                     l17792:
 24544                           
 24545                           ; BSR set to: 0
 24546                           ;doprnt.c: 1360: }
 24547                           ;doprnt.c: 1364: if((flag & (
 24548                           ;doprnt.c: 1366: 0x04|
 24549                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 24550  002422  0EC4               	movlw	196
 24551  002424  D94E               	call	PL28	;call to abstracted procedure
 24552  002426  0E40               	movlw	64
 24553  002428  B4D8               	btfsc	status,2,c
 24554  00242A  1975               	xorwf	??_sprintf& (0+255),w,b
 24555  00242C  E107               	bnz	l17798
 24556                           
 24557                           ; BSR set to: 0
 24558                           ;doprnt.c: 1369: if(width)
 24559  00242E  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24560  002430  1182               	iorwf	sprintf@width& (0+255),w,b
 24561  002432  E018               	bz	l17804
 24562                           
 24563                           ; BSR set to: 0
 24564                           ;doprnt.c: 1370: width--;
 24565  002434  0782               	decf	sprintf@width& (0+255),f,b
 24566  002436  A0D8               	btfss	status,0,c
 24567  002438  0783               	decf	(sprintf@width+1)& (0+255),f,b
 24568  00243A  D014               	goto	l17804
 24569  00243C                     l17798:
 24570                           
 24571                           ; BSR set to: 0
 24572                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24573  00243C  0EC0               	movlw	192
 24574  00243E  D941               	call	PL28	;call to abstracted procedure
 24575  002440  0E80               	movlw	128
 24576  002442  B4D8               	btfsc	status,2,c
 24577  002444  1975               	xorwf	??_sprintf& (0+255),w,b
 24578  002446  E10E               	bnz	l17804
 24579                           
 24580                           ; BSR set to: 0
 24581                           ;doprnt.c: 1379: if(width > 2)
 24582  002448  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24583  00244A  0A80               	xorlw	128
 24584  00244C  0F80               	addlw	-128
 24585  00244E  0E03               	movlw	3
 24586  002450  B4D8               	btfsc	status,2,c
 24587  002452  5D82               	subwf	sprintf@width& (0+255),w,b
 24588  002454  E305               	bnc	l1877
 24589                           
 24590                           ; BSR set to: 0
 24591                           ;doprnt.c: 1380: width -= 2;
 24592  002456  0EFE               	movlw	254
 24593  002458  2782               	addwf	sprintf@width& (0+255),f,b
 24594  00245A  0EFF               	movlw	255
 24595  00245C  2383               	addwfc	(sprintf@width+1)& (0+255),f,b
 24596  00245E  D002               	goto	l17804
 24597  002460                     l1877:
 24598                           
 24599                           ; BSR set to: 0
 24600                           ;doprnt.c: 1381: else
 24601                           ;doprnt.c: 1382: width = 0;
 24602  002460  6B82               	clrf	sprintf@width& (0+255),b
 24603  002462  6B83               	clrf	(sprintf@width+1)& (0+255),b
 24604  002464                     l17804:
 24605                           
 24606                           ; BSR set to: 0
 24607                           ;doprnt.c: 1383: }
 24608                           ;doprnt.c: 1388: if(width > c)
 24609  002464  0E80               	movlw	128
 24610  002466  BF88               	btfsc	sprintf@c& (0+255),7,b
 24611  002468  0E7F               	movlw	127
 24612  00246A  6F75               	movwf	??_sprintf& (0+255),b
 24613  00246C  5182               	movf	sprintf@width& (0+255),w,b
 24614  00246E  5D88               	subwf	sprintf@c& (0+255),w,b
 24615  002470  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24616  002472  0A80               	xorlw	128
 24617  002474  5975               	subwfb	??_sprintf& (0+255),w,b
 24618  002476  E207               	bc	l1879
 24619                           
 24620                           ; BSR set to: 0
 24621                           ;doprnt.c: 1389: width -= c;
 24622  002478  5188               	movf	sprintf@c& (0+255),w,b
 24623  00247A  5F82               	subwf	sprintf@width& (0+255),f,b
 24624  00247C  0E00               	movlw	0
 24625  00247E  BF88               	btfsc	sprintf@c& (0+255),7,b
 24626  002480  0EFF               	movlw	255
 24627  002482  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 24628  002484  D002               	goto	l1880
 24629  002486                     l1879:
 24630                           
 24631                           ; BSR set to: 0
 24632                           ;doprnt.c: 1390: else
 24633                           ;doprnt.c: 1391: width = 0;
 24634  002486  6B82               	clrf	sprintf@width& (0+255),b
 24635  002488  6B83               	clrf	(sprintf@width+1)& (0+255),b
 24636  00248A                     l1880:
 24637                           
 24638                           ; BSR set to: 0
 24639                           ;doprnt.c: 1394: if(flag & 0x04) {
 24640  00248A  A589               	btfss	sprintf@flag& (0+255),2,b
 24641  00248C  D03C               	goto	l17842
 24642                           
 24643                           ; BSR set to: 0
 24644                           ;doprnt.c: 1399: if(flag & 0x03)
 24645  00248E  5189               	movf	sprintf@flag& (0+255),w,b
 24646  002490  0B03               	andlw	3
 24647  002492  E009               	bz	l1882
 24648                           
 24649                           ; BSR set to: 0
 24650                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 24651  002494  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24652  002498  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24653  00249C  0E2D               	movlw	45
 24654  00249E  6EDF               	movwf	indf2,c
 24655  0024A0                     l17812:
 24656                           
 24657                           ; BSR set to: 0
 24658  0024A0  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24659  0024A2  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24660  0024A4  D022               	goto	l17834
 24661  0024A6                     l1882:
 24662                           
 24663                           ; BSR set to: 0
 24664                           ;doprnt.c: 1403: else
 24665                           ;doprnt.c: 1406: if(flag & 0x01)
 24666  0024A6  A189               	btfss	sprintf@flag& (0+255),0,b
 24667  0024A8  D006               	goto	l17818
 24668                           
 24669                           ; BSR set to: 0
 24670                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 24671  0024AA  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24672  0024AE  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24673  0024B2  0E20               	movlw	32
 24674  0024B4  D7F4               	goto	L53
 24675  0024B6                     l17818:
 24676                           
 24677                           ; BSR set to: 0
 24678                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24679  0024B6  0EC0               	movlw	192
 24680  0024B8  D904               	call	PL28	;call to abstracted procedure
 24681  0024BA  0E80               	movlw	128
 24682  0024BC  B4D8               	btfsc	status,2,c
 24683  0024BE  1975               	xorwf	??_sprintf& (0+255),w,b
 24684  0024C0  E114               	bnz	l17834
 24685                           
 24686                           ; BSR set to: 0
 24687                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 24688  0024C2  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24689  0024C6  D94A               	call	PL134	;call to abstracted procedure
 24690                           
 24691                           ; BSR set to: 0
 24692  0024C8  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24693  0024CA  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24694                           
 24695                           ; BSR set to: 0
 24696                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 24697  0024CC  BB89               	btfsc	sprintf@flag& (0+255),5,b
 24698  0024CE  D003               	goto	l17828
 24699                           
 24700                           ; BSR set to: 0
 24701  0024D0  6B7A               	clrf	(_sprintf$2270+1)& (0+255),b
 24702  0024D2  0E78               	movlw	120
 24703  0024D4  D002               	goto	L54
 24704  0024D6                     l17828:
 24705                           
 24706                           ; BSR set to: 0
 24707  0024D6  6B7A               	clrf	(_sprintf$2270+1)& (0+255),b
 24708  0024D8  0E58               	movlw	88
 24709  0024DA                     L54:
 24710  0024DA  6F79               	movwf	_sprintf$2270& (0+255),b
 24711                           
 24712                           ; BSR set to: 0
 24713  0024DC  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24714  0024E0  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24715  0024E4  C079  FFDF         	movff	_sprintf$2270,indf2
 24716  0024E8  D7DB               	goto	l17812
 24717  0024EA                     l17834:
 24718                           
 24719                           ; BSR set to: 0
 24720                           ;doprnt.c: 1419: }
 24721                           ;doprnt.c: 1422: if(width)
 24722  0024EA  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24723  0024EC  1182               	iorwf	sprintf@width& (0+255),w,b
 24724  0024EE  E101 D0B9          	bz	l17906
 24725                           
 24726                           ; BSR set to: 0
 24727                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 24728  0024F2  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24729  0024F6  D932               	call	PL134	;call to abstracted procedure
 24730                           
 24731                           ; BSR set to: 0
 24732  0024F8  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24733  0024FA  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24734                           
 24735                           ; BSR set to: 0
 24736                           ;doprnt.c: 1425: while(--width);
 24737  0024FC  0782               	decf	sprintf@width& (0+255),f,b
 24738  0024FE  A0D8               	btfss	status,0,c
 24739  002500  0783               	decf	(sprintf@width+1)& (0+255),f,b
 24740  002502  0100               	movlb	0	; () banked
 24741  002504  D7F2               	goto	l17834
 24742  002506                     l17842:
 24743                           
 24744                           ; BSR set to: 0
 24745                           ;doprnt.c: 1429: {
 24746                           ;doprnt.c: 1431: if(width
 24747                           ;doprnt.c: 1433: && !(flag & 0x08)
 24748                           ;doprnt.c: 1435: )
 24749  002506  5183               	movf	(sprintf@width+1)& (0+255),w,b
 24750  002508  1182               	iorwf	sprintf@width& (0+255),w,b
 24751  00250A  A4D8               	btfss	status,2,c
 24752                           
 24753                           ; BSR set to: 0
 24754  00250C  B789               	btfsc	sprintf@flag& (0+255),3,b
 24755  00250E  D004               	goto	l17852
 24756  002510                     l17846:
 24757                           
 24758                           ; BSR set to: 0
 24759                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 24760  002510  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24761                           
 24762                           ; BSR set to: 0
 24763                           
 24764                           ; BSR set to: 0
 24765                           ;doprnt.c: 1438: while(--width);
 24766  002514  D8F1               	call	PL60	;call to abstracted procedure
 24767  002516  E1FC               	bnz	l17846
 24768  002518                     l17852:
 24769                           
 24770                           ; BSR set to: 0
 24771                           ;doprnt.c: 1445: if(flag & 0x03)
 24772  002518  5189               	movf	sprintf@flag& (0+255),w,b
 24773  00251A  0B03               	andlw	3
 24774  00251C  E009               	bz	l1898
 24775                           
 24776                           ; BSR set to: 0
 24777                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 24778  00251E  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24779  002522  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24780  002526  0E2D               	movlw	45
 24781  002528  6EDF               	movwf	indf2,c
 24782                           
 24783                           ; BSR set to: 0
 24784  00252A  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24785  00252C  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24786  00252E  D008               	goto	l17862
 24787  002530                     l1898:
 24788                           
 24789                           ; BSR set to: 0
 24790                           ;doprnt.c: 1450: else if(flag & 0x01)
 24791  002530  A189               	btfss	sprintf@flag& (0+255),0,b
 24792  002532  D006               	goto	l17862
 24793                           
 24794                           ; BSR set to: 0
 24795                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 24796  002534  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24797  002538  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24798  00253C  0E20               	movlw	32
 24799  00253E  D7F4               	goto	L55
 24800  002540                     l17862:
 24801                           
 24802                           ; BSR set to: 0
 24803                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 24804  002540  0EC0               	movlw	192
 24805  002542  D8BF               	call	PL28	;call to abstracted procedure
 24806  002544  0E40               	movlw	64
 24807  002546  B4D8               	btfsc	status,2,c
 24808  002548  1975               	xorwf	??_sprintf& (0+255),w,b
 24809  00254A  E106               	bnz	l17868
 24810                           
 24811                           ; BSR set to: 0
 24812                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 24813  00254C  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24814  002550  D905               	call	PL134	;call to abstracted procedure
 24815  002552                     l17866:
 24816                           
 24817                           ; BSR set to: 0
 24818  002552  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24819  002554  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24820  002556  D086               	goto	l17906
 24821  002558                     l17868:
 24822                           
 24823                           ; BSR set to: 0
 24824                           ;doprnt.c: 1457: else
 24825                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 24826  002558  0EC0               	movlw	192
 24827  00255A  D8B3               	call	PL28	;call to abstracted procedure
 24828  00255C  0E80               	movlw	128
 24829  00255E  B4D8               	btfsc	status,2,c
 24830  002560  1975               	xorwf	??_sprintf& (0+255),w,b
 24831  002562  E001 D07F          	bnz	l17906
 24832                           
 24833                           ; BSR set to: 0
 24834                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 24835  002566  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24836  00256A  D8F8               	call	PL134	;call to abstracted procedure
 24837                           
 24838                           ; BSR set to: 0
 24839  00256C  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 24840  00256E  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 24841                           
 24842                           ; BSR set to: 0
 24843                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 24844  002570  BB89               	btfsc	sprintf@flag& (0+255),5,b
 24845  002572  D003               	goto	l17878
 24846                           
 24847                           ; BSR set to: 0
 24848  002574  6B7C               	clrf	(_sprintf$2271+1)& (0+255),b
 24849  002576  0E78               	movlw	120
 24850  002578  D002               	goto	L56
 24851  00257A                     l17878:
 24852                           
 24853                           ; BSR set to: 0
 24854  00257A  6B7C               	clrf	(_sprintf$2271+1)& (0+255),b
 24855  00257C  0E58               	movlw	88
 24856  00257E                     L56:
 24857  00257E  6F7B               	movwf	_sprintf$2271& (0+255),b
 24858                           
 24859                           ; BSR set to: 0
 24860  002580  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24861  002584  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24862  002588  C07B  FFDF         	movff	_sprintf$2271,indf2
 24863  00258C  D7E2               	goto	l17866
 24864  00258E                     l17884:
 24865                           
 24866                           ; BSR set to: 0
 24867                           ;doprnt.c: 1493: case 0xC0:
 24868                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 24869  00258E  C080  F075         	movff	sprintf@prec,??_sprintf
 24870  002592  C081  F076         	movff	sprintf@prec+1,??_sprintf+1
 24871  002596  90D8               	bcf	status,0,c
 24872  002598  3775               	rlcf	??_sprintf& (0+255),f,b
 24873  00259A  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 24874  00259C  90D8               	bcf	status,0,c
 24875  00259E  3775               	rlcf	??_sprintf& (0+255),f,b
 24876  0025A0  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 24877  0025A2  0E1C               	movlw	low _dpowers
 24878  0025A4  2575               	addwf	??_sprintf& (0+255),w,b
 24879  0025A6  6EF6               	movwf	tblptrl,c
 24880  0025A8  0E6E               	movlw	high _dpowers
 24881  0025AA  D87C               	call	PL16	;call to abstracted procedure
 24882  0025AC  C084  F01F         	movff	sprintf@_val,?___lldiv
 24883  0025B0  C085  F020         	movff	sprintf@_val+1,?___lldiv+1
 24884  0025B4  C086  F021         	movff	sprintf@_val+2,?___lldiv+2
 24885  0025B8  C087  F022         	movff	sprintf@_val+3,?___lldiv+3
 24886  0025BC  EC7F  F030         	call	___lldiv	;wreg free
 24887  0025C0  C022  F068         	movff	?___lldiv+3,?___llmod+3
 24888  0025C4  C021  F067         	movff	?___lldiv+2,?___llmod+2
 24889  0025C8  C020  F066         	movff	?___lldiv+1,?___llmod+1
 24890  0025CC  C01F  F065         	movff	?___lldiv,?___llmod
 24891  0025D0  0E0A               	movlw	10
 24892  0025D2  6F69               	movwf	(?___llmod+4)& (0+255),b
 24893  0025D4  0E00               	movlw	0
 24894  0025D6  6B6A               	clrf	(?___llmod+5)& (0+255),b
 24895  0025D8  6B6B               	clrf	(?___llmod+6)& (0+255),b
 24896  0025DA  6B6C               	clrf	(?___llmod+7)& (0+255),b
 24897  0025DC  ECC8  F031         	call	___llmod	;wreg free
 24898  0025E0  5165               	movf	?___llmod& (0+255),w,b
 24899  0025E2  D02D               	goto	L57
 24900  0025E4                     l17886:
 24901                           
 24902                           ; BSR set to: 0
 24903                           ;doprnt.c: 1506: {
 24904                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 24905  0025E4  D876               	call	PL34	;call to abstracted procedure
 24906  0025E6  0E44               	movlw	low _hexpowers
 24907  0025E8  2575               	addwf	??_sprintf& (0+255),w,b
 24908  0025EA  6EF6               	movwf	tblptrl,c
 24909  0025EC  0E6E               	movlw	high _hexpowers
 24910  0025EE  D85A               	call	PL16	;call to abstracted procedure
 24911  0025F0  EC7F  F030         	call	___lldiv	;wreg free
 24912  0025F4  501F               	movf	?___lldiv,w,c
 24913  0025F6  0B0F               	andlw	15
 24914  0025F8  6F78               	movwf	sprintf@idx& (0+255),b
 24915                           
 24916                           ; BSR set to: 0
 24917                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 24918  0025FA  BB89               	btfsc	sprintf@flag& (0+255),5,b
 24919  0025FC  D004               	goto	l17892
 24920                           
 24921                           ; BSR set to: 0
 24922  0025FE  0E7D               	movlw	high STR_310
 24923  002600  6F7E               	movwf	(_sprintf$2277+1)& (0+255),b
 24924  002602  0EB7               	movlw	low STR_310
 24925  002604  D003               	goto	L58
 24926  002606                     l17892:
 24927                           
 24928                           ; BSR set to: 0
 24929  002606  0E7D               	movlw	high STR_309
 24930  002608  6F7E               	movwf	(_sprintf$2277+1)& (0+255),b
 24931  00260A  0EA6               	movlw	low STR_309
 24932  00260C                     L58:
 24933  00260C  6F7D               	movwf	_sprintf$2277& (0+255),b
 24934                           
 24935                           ; BSR set to: 0
 24936  00260E  5178               	movf	sprintf@idx& (0+255),w,b
 24937  002610  257D               	addwf	_sprintf$2277& (0+255),w,b
 24938  002612  6F75               	movwf	??_sprintf& (0+255),b
 24939  002614  0E00               	movlw	0
 24940  002616  217E               	addwfc	(_sprintf$2277+1)& (0+255),w,b
 24941  002618  6F76               	movwf	(??_sprintf+1)& (0+255),b
 24942  00261A  C075  FFF6         	movff	??_sprintf,tblptrl
 24943  00261E  C076  FFF7         	movff	??_sprintf+1,tblptrh
 24944  002622  0008               	tblrd		*
 24945  002624  CFF5 F088          	movff	tablat,sprintf@c
 24946                           
 24947                           ;doprnt.c: 1515: }
 24948                           ;doprnt.c: 1517: break;
 24949  002628  D016               	goto	l17902
 24950  00262A                     l17896:
 24951                           
 24952                           ; BSR set to: 0
 24953                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 24954  00262A  D853               	call	PL34	;call to abstracted procedure
 24955  00262C  0EEC               	movlw	low _octpowers
 24956  00262E  2575               	addwf	??_sprintf& (0+255),w,b
 24957  002630  6EF6               	movwf	tblptrl,c
 24958  002632  0E6D               	movlw	high _octpowers
 24959  002634  D837               	call	PL16	;call to abstracted procedure
 24960  002636  EC7F  F030         	call	___lldiv	;wreg free
 24961  00263A  501F               	movf	?___lldiv,w,c
 24962  00263C  0B07               	andlw	7
 24963  00263E                     L57:
 24964  00263E  0F30               	addlw	48
 24965  002640  6F88               	movwf	sprintf@c& (0+255),b
 24966                           
 24967                           ;doprnt.c: 1527: break;
 24968  002642  D009               	goto	l17902
 24969  002644                     l17900:
 24970                           
 24971                           ; BSR set to: 0
 24972  002644  5189               	movf	sprintf@flag& (0+255),w,b
 24973  002646  0BC0               	andlw	192
 24974                           
 24975                           ; Switch size 1, requested type "space"
 24976                           ; Number of cases is 4, Range of values is 0 to 192
 24977                           ; switch strategies available:
 24978                           ; Name         Instructions Cycles
 24979                           ; simple_byte           13     7 (average)
 24980                           ;	Chosen strategy is simple_byte
 24981  002648  E0A2               	bz	l17884
 24982  00264A  0A40               	xorlw	64	; case 64
 24983  00264C  E0EE               	bz	l17896
 24984  00264E  0AC0               	xorlw	192	; case 128
 24985  002650  E0C9               	bz	l17886
 24986  002652  0A40               	xorlw	64	; case 192
 24987  002654  E09C               	bz	l17884
 24988  002656                     l17902:
 24989                           
 24990                           ; BSR set to: 0
 24991                           ;doprnt.c: 1531: ((*sp++ = (c)));
 24992  002656  C06D  FFD9         	movff	sprintf@sp,fsr2l
 24993  00265A  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 24994  00265E  C088  FFDF         	movff	sprintf@c,indf2
 24995  002662  D777               	goto	l17866
 24996  002664                     l17906:
 24997                           
 24998                           ; BSR set to: 0
 24999  002664  0780               	decf	sprintf@prec& (0+255),f,b
 25000  002666  A0D8               	btfss	status,0,c
 25001  002668  0781               	decf	(sprintf@prec+1)& (0+255),f,b
 25002  00266A  0100               	movlb	0	; () banked
 25003  00266C  2980               	incf	sprintf@prec& (0+255),w,b
 25004  00266E  B4D8               	btfsc	status,2,c
 25005  002670  2981               	incf	(sprintf@prec+1)& (0+255),w,b
 25006  002672  E1E8               	bnz	l17900
 25007                           
 25008                           ; BSR set to: 0
 25009                           ;doprnt.c: 1532: }
 25010                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 25011  002674  A789               	btfss	sprintf@flag& (0+255),3,b
 25012  002676  D00B               	goto	l17916
 25013                           
 25014                           ; BSR set to: 0
 25015  002678  5183               	movf	(sprintf@width+1)& (0+255),w,b
 25016  00267A  0A80               	xorlw	128
 25017  00267C  0F80               	addlw	-128
 25018  00267E  0E01               	movlw	1
 25019  002680  B4D8               	btfsc	status,2,c
 25020  002682  5D82               	subwf	sprintf@width& (0+255),w,b
 25021  002684  E304               	bnc	l17916
 25022  002686                     l17910:
 25023                           
 25024                           ; BSR set to: 0
 25025                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 25026  002686  C06D  FFD9         	movff	sprintf@sp,fsr2l
 25027                           
 25028                           ; BSR set to: 0
 25029                           
 25030                           ; BSR set to: 0
 25031                           ;doprnt.c: 1538: while(--width);
 25032  00268A  D836               	call	PL60	;call to abstracted procedure
 25033  00268C  E1FC               	bnz	l17910
 25034  00268E                     l17916:
 25035                           
 25036                           ; BSR set to: 0
 25037  00268E  D853               	call	PL86	;call to abstracted procedure
 25038  002690  0100               	movlb	0	; () banked
 25039  002692  6788               	tstfsz	sprintf@c& (0+255),b
 25040  002694  D4CC               	goto	l17582
 25041  002696                     l17918:
 25042                           
 25043                           ; BSR set to: 0
 25044                           ;doprnt.c: 1545: *sp = 0;
 25045  002696  C06D  FFD9         	movff	sprintf@sp,fsr2l
 25046  00269A  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 25047  00269E  0E00               	movlw	0
 25048  0026A0  6EDF               	movwf	indf2,c
 25049                           
 25050                           ; BSR set to: 0
 25051  0026A2  0C00               	retlw	0
 25052  0026A4                     __end_of_sprintf:
 25053                           	opt stack 0
 25054  0026A4                     PL16:
 25055                           	opt stack 25
 25056  0026A4  2176               	addwfc	(??_sprintf+1)& (0+255),w,b
 25057  0026A6  6EF7               	movwf	tblptrh,c
 25058  0026A8  0009               	tblrd		*+
 25059  0026AA  CFF5 F023          	movff	tablat,?___lldiv+4
 25060  0026AE  0009               	tblrd		*+
 25061  0026B0  CFF5 F024          	movff	tablat,?___lldiv+5
 25062  0026B4  0009               	tblrd		*+
 25063  0026B6  CFF5 F025          	movff	tablat,?___lldiv+6
 25064  0026BA  000A               	tblrd		*-
 25065  0026BC  CFF5 F026          	movff	tablat,?___lldiv+7
 25066  0026C0  0012               	return	
 25067  0026C2                     __end_ofPL16:
 25068                           	opt stack 0
 25069  0026C2                     PL28:
 25070                           	opt stack 25
 25071  0026C2  1589               	andwf	sprintf@flag& (0+255),w,b
 25072  0026C4  6F75               	movwf	??_sprintf& (0+255),b
 25073  0026C6  0E08               	movlw	8
 25074  0026C8  158A               	andwf	(sprintf@flag+1)& (0+255),w,b
 25075  0026CA  6F76               	movwf	(??_sprintf+1)& (0+255),b
 25076  0026CC  5176               	movf	(??_sprintf+1)& (0+255),w,b
 25077  0026CE  0A08               	xorlw	8
 25078  0026D0  0012               	return	
 25079  0026D2                     __end_ofPL28:
 25080                           	opt stack 0
 25081  0026D2                     PL34:
 25082                           	opt stack 25
 25083  0026D2  C084  F01F         	movff	sprintf@_val,?___lldiv
 25084  0026D6  C085  F020         	movff	sprintf@_val+1,?___lldiv+1
 25085  0026DA  C086  F021         	movff	sprintf@_val+2,?___lldiv+2
 25086  0026DE  C087  F022         	movff	sprintf@_val+3,?___lldiv+3
 25087  0026E2  C080  F075         	movff	sprintf@prec,??_sprintf
 25088  0026E6  C081  F076         	movff	sprintf@prec+1,??_sprintf+1
 25089  0026EA  90D8               	bcf	status,0,c
 25090  0026EC  3775               	rlcf	??_sprintf& (0+255),f,b
 25091  0026EE  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 25092  0026F0  90D8               	bcf	status,0,c
 25093  0026F2  3775               	rlcf	??_sprintf& (0+255),f,b
 25094  0026F4  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 25095  0026F6  0012               	return	
 25096  0026F8                     __end_ofPL34:
 25097                           	opt stack 0
 25098  0026F8                     PL60:
 25099                           	opt stack 25
 25100  0026F8  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 25101  0026FC  0E20               	movlw	32
 25102  0026FE  6EDF               	movwf	indf2,c
 25103  002700  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 25104  002702  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 25105  002704  0782               	decf	sprintf@width& (0+255),f,b
 25106  002706  A0D8               	btfss	status,0,c
 25107  002708  0783               	decf	(sprintf@width+1)& (0+255),f,b
 25108  00270A  0100               	movlb	0	; () banked
 25109  00270C  5183               	movf	(sprintf@width+1)& (0+255),w,b
 25110  00270E  1182               	iorwf	sprintf@width& (0+255),w,b
 25111  002710  0012               	return	
 25112  002712                     __end_ofPL60:
 25113                           	opt stack 0
 25114  002712                     PL76:
 25115                           	opt stack 25
 25116  002712  6ED9               	movwf	fsr2l,c
 25117  002714  6ADA               	clrf	fsr2h,c
 25118  002716  CFDE F084          	movff	postinc2,sprintf@_val
 25119  00271A  CFDE F085          	movff	postinc2,sprintf@_val+1
 25120  00271E  CFDE F086          	movff	postinc2,sprintf@_val+2
 25121  002722  CFDE F087          	movff	postinc2,sprintf@_val+3
 25122  002726  0C04               	retlw	4
 25123  002728                     __end_ofPL76:
 25124                           	opt stack 0
 25125  002728                     PL82:
 25126                           	opt stack 25
 25127  002728  C06D  FFD9         	movff	sprintf@sp,fsr2l
 25128  00272C  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 25129  002730  0E20               	movlw	32
 25130  002732  6EDF               	movwf	indf2,c
 25131  002734  0C20               	retlw	32
 25132  002736                     __end_ofPL82:
 25133                           	opt stack 0
 25134  002736                     PL86:
 25135                           	opt stack 25
 25136  002736  C06F  FFF6         	movff	sprintf@f,tblptrl
 25137  00273A  C070  FFF7         	movff	sprintf@f+1,tblptrh
 25138  00273E  4B6F               	infsnz	sprintf@f& (0+255),f,b
 25139  002740  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 25140  002742  0008               	tblrd		*
 25141  002744  CFF5 F088          	movff	tablat,sprintf@c
 25142  002748  0012               	return	
 25143  00274A                     __end_ofPL86:
 25144                           	opt stack 0
 25145  00274A                     PL110:
 25146                           	opt stack 25
 25147  00274A  4B6F               	infsnz	sprintf@f& (0+255),f,b
 25148  00274C  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 25149  00274E  C06F  FFF6         	movff	sprintf@f,tblptrl
 25150  002752  C070  FFF7         	movff	sprintf@f+1,tblptrh
 25151  002756  0008               	tblrd		*
 25152  002758  50F5               	movf	tablat,w,c
 25153  00275A  0012               	return	
 25154  00275C                     __end_ofPL110:
 25155                           	opt stack 0
 25156  00275C                     PL134:
 25157                           	opt stack 25
 25158  00275C  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 25159  002760  0E30               	movlw	48
 25160  002762  6EDF               	movwf	indf2,c
 25161  002764  0C30               	retlw	48
 25162  002766                     __end_ofPL134:
 25163                           	opt stack 0
 25164  002766                     PL146:
 25165                           	opt stack 25
 25166  002766  A0D8               	btfss	status,0,c
 25167  002768  0783               	decf	(sprintf@width+1)& (0+255),f,b
 25168  00276A  0100               	movlb	0	; () banked
 25169  00276C  2982               	incf	sprintf@width& (0+255),w,b
 25170  00276E  0012               	return	
 25171  002770                     __end_ofPL146:
 25172                           	opt stack 0
 25173                           tblptru	equ	0xFF8
 25174                           tblptrh	equ	0xFF7
 25175                           tblptrl	equ	0xFF6
 25176                           tablat	equ	0xFF5
 25177                           prodh	equ	0xFF4
 25178                           prodl	equ	0xFF3
 25179                           intcon	equ	0xFF2
 25180                           indf0	equ	0xFEF
 25181                           postinc0	equ	0xFEE
 25182                           fsr0h	equ	0xFEA
 25183                           fsr0l	equ	0xFE9
 25184                           wreg	equ	0xFE8
 25185                           indf1	equ	0xFE7
 25186                           postinc1	equ	0xFE6
 25187                           postdec1	equ	0xFE5
 25188                           fsr1h	equ	0xFE2
 25189                           fsr1l	equ	0xFE1
 25190                           indf2	equ	0xFDF
 25191                           postinc2	equ	0xFDE
 25192                           postdec2	equ	0xFDD
 25193                           plusw2	equ	0xFDB
 25194                           fsr2h	equ	0xFDA
 25195                           fsr2l	equ	0xFD9
 25196                           status	equ	0xFD8
 25197                           
 25198 ;; *************** function ___wmul *****************
 25199 ;; Defined at:
 25200 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/wmul.c"
 25201 ;; Parameters:    Size  Location     Type
 25202 ;;  multiplier      2   34[COMRAM] unsigned int 
 25203 ;;  multiplicand    2   36[COMRAM] unsigned int 
 25204 ;; Auto vars:     Size  Location     Type
 25205 ;;  product         2    0[BANK0 ] unsigned int 
 25206 ;; Return value:  Size  Location     Type
 25207 ;;                  2   34[COMRAM] unsigned int 
 25208 ;; Registers used:
 25209 ;;		wreg, status,2, status,0, prodl, prodh
 25210 ;; Tracked objects:
 25211 ;;		On entry : 0/0
 25212 ;;		On exit  : F/0
 25213 ;;		Unchanged: 0/0
 25214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25215 ;;      Params:         4       0       0       0       0       0       0
 25216 ;;      Locals:         0       2       0       0       0       0       0
 25217 ;;      Temps:          0       0       0       0       0       0       0
 25218 ;;      Totals:         4       2       0       0       0       0       0
 25219 ;;Total ram usage:        6 bytes
 25220 ;; Hardware stack levels used:    1
 25221 ;; Hardware stack levels required when called:    3
 25222 ;; This function calls:
 25223 ;;		Nothing
 25224 ;; This function is called by:
 25225 ;;		_receivePrintEventVerbose
 25226 ;;		_receiveSendEventCANAL
 25227 ;;		_receiveSendMultiEventCANAL
 25228 ;;		_sprintf
 25229 ;;		_atoi
 25230 ;; This function uses a non-reentrant model
 25231 ;;
 25232                           
 25233                           	psect	text58
 25234  0068A6                     __ptext58:
 25235                           	opt stack 0
 25236  0068A6                     ___wmul:
 25237                           	opt stack 25
 25238                           
 25239                           ; BSR set to: 0
 25240                           ;incstack = 0
 25241                           ;incstack = 0
 25242  0068A6  5023               	movf	___wmul@multiplier,w,c
 25243  0068A8  0225               	mulwf	___wmul@multiplicand,c
 25244  0068AA  CFF3 F060          	movff	prodl,___wmul@product
 25245  0068AE  CFF4 F061          	movff	prodh,___wmul@product+1
 25246  0068B2  5023               	movf	___wmul@multiplier,w,c
 25247  0068B4  0226               	mulwf	___wmul@multiplicand+1,c
 25248  0068B6  CFF3 FFF4          	movff	prodl,prodh
 25249  0068BA  6AF3               	clrf	prodl,c
 25250  0068BC  50F3               	movf	prodl,w,c
 25251  0068BE  0100               	movlb	0	; () banked
 25252  0068C0  2760               	addwf	___wmul@product& (0+255),f,b
 25253  0068C2  50F4               	movf	prodh,w,c
 25254  0068C4  2361               	addwfc	(___wmul@product+1)& (0+255),f,b
 25255  0068C6  5024               	movf	___wmul@multiplier+1,w,c
 25256  0068C8  0225               	mulwf	___wmul@multiplicand,c
 25257  0068CA  CFF3 FFF4          	movff	prodl,prodh
 25258  0068CE  6AF3               	clrf	prodl,c
 25259  0068D0  50F3               	movf	prodl,w,c
 25260  0068D2  2760               	addwf	___wmul@product& (0+255),f,b
 25261  0068D4  50F4               	movf	prodh,w,c
 25262  0068D6  2361               	addwfc	(___wmul@product+1)& (0+255),f,b
 25263                           
 25264                           ; BSR set to: 0
 25265  0068D8  C060  F023         	movff	___wmul@product,?___wmul
 25266  0068DC  C061  F024         	movff	___wmul@product+1,?___wmul+1
 25267                           
 25268                           ; BSR set to: 0
 25269  0068E0  0012               	return	
 25270  0068E2                     __end_of___wmul:
 25271                           	opt stack 0
 25272                           tblptru	equ	0xFF8
 25273                           tblptrh	equ	0xFF7
 25274                           tblptrl	equ	0xFF6
 25275                           tablat	equ	0xFF5
 25276                           prodh	equ	0xFF4
 25277                           prodl	equ	0xFF3
 25278                           intcon	equ	0xFF2
 25279                           indf0	equ	0xFEF
 25280                           postinc0	equ	0xFEE
 25281                           fsr0h	equ	0xFEA
 25282                           fsr0l	equ	0xFE9
 25283                           wreg	equ	0xFE8
 25284                           indf1	equ	0xFE7
 25285                           postinc1	equ	0xFE6
 25286                           postdec1	equ	0xFE5
 25287                           fsr1h	equ	0xFE2
 25288                           fsr1l	equ	0xFE1
 25289                           indf2	equ	0xFDF
 25290                           postinc2	equ	0xFDE
 25291                           postdec2	equ	0xFDD
 25292                           plusw2	equ	0xFDB
 25293                           fsr2h	equ	0xFDA
 25294                           fsr2l	equ	0xFD9
 25295                           status	equ	0xFD8
 25296                           
 25297 ;; *************** function ___llmod *****************
 25298 ;; Defined at:
 25299 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/llmod.c"
 25300 ;; Parameters:    Size  Location     Type
 25301 ;;  dividend        4    5[BANK0 ] unsigned long 
 25302 ;;  divisor         4    9[BANK0 ] unsigned long 
 25303 ;; Auto vars:     Size  Location     Type
 25304 ;;  counter         1   38[COMRAM] unsigned char 
 25305 ;; Return value:  Size  Location     Type
 25306 ;;                  4    5[BANK0 ] unsigned long 
 25307 ;; Registers used:
 25308 ;;		wreg, status,2, status,0
 25309 ;; Tracked objects:
 25310 ;;		On entry : F/0
 25311 ;;		On exit  : F/0
 25312 ;;		Unchanged: 0/0
 25313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25314 ;;      Params:         0       8       0       0       0       0       0
 25315 ;;      Locals:         1       0       0       0       0       0       0
 25316 ;;      Temps:          0       0       0       0       0       0       0
 25317 ;;      Totals:         1       8       0       0       0       0       0
 25318 ;;Total ram usage:        9 bytes
 25319 ;; Hardware stack levels used:    1
 25320 ;; Hardware stack levels required when called:    3
 25321 ;; This function calls:
 25322 ;;		Nothing
 25323 ;; This function is called by:
 25324 ;;		_sprintf
 25325 ;;		_ultoa
 25326 ;; This function uses a non-reentrant model
 25327 ;;
 25328                           
 25329                           	psect	text59
 25330  006390                     __ptext59:
 25331                           	opt stack 0
 25332  006390                     ___llmod:
 25333                           	opt stack 24
 25334                           
 25335                           ; BSR set to: 0
 25336                           
 25337                           ; BSR set to: 0
 25338                           ;incstack = 0
 25339                           ;incstack = 0
 25340  006390  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 25341  006392  1169               	iorwf	___llmod@divisor& (0+255),w,b
 25342  006394  116A               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 25343  006396  116B               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 25344  006398  E023               	bz	l2563
 25345                           
 25346                           ; BSR set to: 0
 25347  00639A  0E01               	movlw	1
 25348  00639C  6E27               	movwf	___llmod@counter,c
 25349  00639E  D006               	goto	l18928
 25350  0063A0                     l18926:
 25351                           
 25352                           ; BSR set to: 0
 25353  0063A0  90D8               	bcf	status,0,c
 25354  0063A2  3769               	rlcf	___llmod@divisor& (0+255),f,b
 25355  0063A4  376A               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 25356  0063A6  376B               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 25357  0063A8  376C               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 25358  0063AA  2A27               	incf	___llmod@counter,f,c
 25359  0063AC                     l18928:
 25360                           
 25361                           ; BSR set to: 0
 25362  0063AC  AF6C               	btfss	(___llmod@divisor+3)& (0+255),7,b
 25363  0063AE  D7F8               	goto	l18926
 25364  0063B0                     l18930:
 25365                           
 25366                           ; BSR set to: 0
 25367  0063B0  5169               	movf	___llmod@divisor& (0+255),w,b
 25368  0063B2  5D65               	subwf	___llmod@dividend& (0+255),w,b
 25369  0063B4  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 25370  0063B6  5966               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 25371  0063B8  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 25372  0063BA  5967               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 25373  0063BC  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 25374  0063BE  5968               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 25375  0063C0  E308               	bnc	l18934
 25376                           
 25377                           ; BSR set to: 0
 25378  0063C2  5169               	movf	___llmod@divisor& (0+255),w,b
 25379  0063C4  5F65               	subwf	___llmod@dividend& (0+255),f,b
 25380  0063C6  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 25381  0063C8  5B66               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 25382  0063CA  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 25383  0063CC  5B67               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 25384  0063CE  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 25385  0063D0  5B68               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 25386  0063D2                     l18934:
 25387                           
 25388                           ; BSR set to: 0
 25389  0063D2  90D8               	bcf	status,0,c
 25390  0063D4  336C               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 25391  0063D6  336B               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 25392  0063D8  336A               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 25393  0063DA  3369               	rrcf	___llmod@divisor& (0+255),f,b
 25394                           
 25395                           ; BSR set to: 0
 25396  0063DC  2E27               	decfsz	___llmod@counter,f,c
 25397  0063DE  D7E8               	goto	l18930
 25398  0063E0                     l2563:
 25399                           
 25400                           ; BSR set to: 0
 25401  0063E0  C065  F065         	movff	___llmod@dividend,?___llmod
 25402  0063E4  C066  F066         	movff	___llmod@dividend+1,?___llmod+1
 25403  0063E8  C067  F067         	movff	___llmod@dividend+2,?___llmod+2
 25404  0063EC  C068  F068         	movff	___llmod@dividend+3,?___llmod+3
 25405                           
 25406                           ; BSR set to: 0
 25407  0063F0  0012               	return	
 25408  0063F2                     __end_of___llmod:
 25409                           	opt stack 0
 25410                           tblptru	equ	0xFF8
 25411                           tblptrh	equ	0xFF7
 25412                           tblptrl	equ	0xFF6
 25413                           tablat	equ	0xFF5
 25414                           prodh	equ	0xFF4
 25415                           prodl	equ	0xFF3
 25416                           intcon	equ	0xFF2
 25417                           indf0	equ	0xFEF
 25418                           postinc0	equ	0xFEE
 25419                           fsr0h	equ	0xFEA
 25420                           fsr0l	equ	0xFE9
 25421                           wreg	equ	0xFE8
 25422                           indf1	equ	0xFE7
 25423                           postinc1	equ	0xFE6
 25424                           postdec1	equ	0xFE5
 25425                           fsr1h	equ	0xFE2
 25426                           fsr1l	equ	0xFE1
 25427                           indf2	equ	0xFDF
 25428                           postinc2	equ	0xFDE
 25429                           postdec2	equ	0xFDD
 25430                           plusw2	equ	0xFDB
 25431                           fsr2h	equ	0xFDA
 25432                           fsr2l	equ	0xFD9
 25433                           status	equ	0xFD8
 25434                           
 25435 ;; *************** function ___lldiv *****************
 25436 ;; Defined at:
 25437 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/lldiv.c"
 25438 ;; Parameters:    Size  Location     Type
 25439 ;;  dividend        4   30[COMRAM] unsigned long 
 25440 ;;  divisor         4   34[COMRAM] unsigned long 
 25441 ;; Auto vars:     Size  Location     Type
 25442 ;;  quotient        4    1[BANK0 ] unsigned long 
 25443 ;;  counter         1    0[BANK0 ] unsigned char 
 25444 ;; Return value:  Size  Location     Type
 25445 ;;                  4   30[COMRAM] unsigned long 
 25446 ;; Registers used:
 25447 ;;		wreg, status,2, status,0
 25448 ;; Tracked objects:
 25449 ;;		On entry : F/0
 25450 ;;		On exit  : F/0
 25451 ;;		Unchanged: 0/0
 25452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25453 ;;      Params:         8       0       0       0       0       0       0
 25454 ;;      Locals:         0       5       0       0       0       0       0
 25455 ;;      Temps:          0       0       0       0       0       0       0
 25456 ;;      Totals:         8       5       0       0       0       0       0
 25457 ;;Total ram usage:       13 bytes
 25458 ;; Hardware stack levels used:    1
 25459 ;; Hardware stack levels required when called:    3
 25460 ;; This function calls:
 25461 ;;		Nothing
 25462 ;; This function is called by:
 25463 ;;		_sprintf
 25464 ;;		_ultoa
 25465 ;; This function uses a non-reentrant model
 25466 ;;
 25467                           
 25468                           	psect	text60
 25469  0060FE                     __ptext60:
 25470                           	opt stack 0
 25471  0060FE                     ___lldiv:
 25472                           	opt stack 24
 25473                           
 25474                           ; BSR set to: 0
 25475                           
 25476                           ; BSR set to: 0
 25477                           ;incstack = 0
 25478                           ;incstack = 0
 25479  0060FE  6B61               	clrf	___lldiv@quotient& (0+255),b
 25480  006100  6B62               	clrf	(___lldiv@quotient+1)& (0+255),b
 25481  006102  6B63               	clrf	(___lldiv@quotient+2)& (0+255),b
 25482  006104  6B64               	clrf	(___lldiv@quotient+3)& (0+255),b
 25483                           
 25484                           ; BSR set to: 0
 25485  006106  5026               	movf	___lldiv@divisor+3,w,c
 25486  006108  1023               	iorwf	___lldiv@divisor,w,c
 25487  00610A  1024               	iorwf	___lldiv@divisor+1,w,c
 25488  00610C  1025               	iorwf	___lldiv@divisor+2,w,c
 25489  00610E  E029               	bz	l2553
 25490                           
 25491                           ; BSR set to: 0
 25492  006110  0E01               	movlw	1
 25493  006112  6F60               	movwf	___lldiv@counter& (0+255),b
 25494  006114  D006               	goto	l18908
 25495  006116                     l18906:
 25496                           
 25497                           ; BSR set to: 0
 25498  006116  90D8               	bcf	status,0,c
 25499  006118  3623               	rlcf	___lldiv@divisor,f,c
 25500  00611A  3624               	rlcf	___lldiv@divisor+1,f,c
 25501  00611C  3625               	rlcf	___lldiv@divisor+2,f,c
 25502  00611E  3626               	rlcf	___lldiv@divisor+3,f,c
 25503  006120  2B60               	incf	___lldiv@counter& (0+255),f,b
 25504  006122                     l18908:
 25505                           
 25506                           ; BSR set to: 0
 25507  006122  AE26               	btfss	___lldiv@divisor+3,7,c
 25508  006124  D7F8               	goto	l18906
 25509  006126                     l18910:
 25510                           
 25511                           ; BSR set to: 0
 25512  006126  90D8               	bcf	status,0,c
 25513  006128  3761               	rlcf	___lldiv@quotient& (0+255),f,b
 25514  00612A  3762               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 25515  00612C  3763               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 25516  00612E  3764               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 25517                           
 25518                           ; BSR set to: 0
 25519  006130  5023               	movf	___lldiv@divisor,w,c
 25520  006132  5C1F               	subwf	___lldiv@dividend,w,c
 25521  006134  5024               	movf	___lldiv@divisor+1,w,c
 25522  006136  5820               	subwfb	___lldiv@dividend+1,w,c
 25523  006138  5025               	movf	___lldiv@divisor+2,w,c
 25524  00613A  5821               	subwfb	___lldiv@dividend+2,w,c
 25525  00613C  5026               	movf	___lldiv@divisor+3,w,c
 25526  00613E  5822               	subwfb	___lldiv@dividend+3,w,c
 25527  006140  E309               	bnc	l18918
 25528                           
 25529                           ; BSR set to: 0
 25530  006142  5023               	movf	___lldiv@divisor,w,c
 25531  006144  5E1F               	subwf	___lldiv@dividend,f,c
 25532  006146  5024               	movf	___lldiv@divisor+1,w,c
 25533  006148  5A20               	subwfb	___lldiv@dividend+1,f,c
 25534  00614A  5025               	movf	___lldiv@divisor+2,w,c
 25535  00614C  5A21               	subwfb	___lldiv@dividend+2,f,c
 25536  00614E  5026               	movf	___lldiv@divisor+3,w,c
 25537  006150  5A22               	subwfb	___lldiv@dividend+3,f,c
 25538                           
 25539                           ; BSR set to: 0
 25540  006152  8161               	bsf	___lldiv@quotient& (0+255),0,b
 25541  006154                     l18918:
 25542                           
 25543                           ; BSR set to: 0
 25544  006154  90D8               	bcf	status,0,c
 25545  006156  3226               	rrcf	___lldiv@divisor+3,f,c
 25546  006158  3225               	rrcf	___lldiv@divisor+2,f,c
 25547  00615A  3224               	rrcf	___lldiv@divisor+1,f,c
 25548  00615C  3223               	rrcf	___lldiv@divisor,f,c
 25549                           
 25550                           ; BSR set to: 0
 25551  00615E  2F60               	decfsz	___lldiv@counter& (0+255),f,b
 25552  006160  D7E2               	goto	l18910
 25553  006162                     l2553:
 25554                           
 25555                           ; BSR set to: 0
 25556  006162  C061  F01F         	movff	___lldiv@quotient,?___lldiv
 25557  006166  C062  F020         	movff	___lldiv@quotient+1,?___lldiv+1
 25558  00616A  C063  F021         	movff	___lldiv@quotient+2,?___lldiv+2
 25559  00616E  C064  F022         	movff	___lldiv@quotient+3,?___lldiv+3
 25560                           
 25561                           ; BSR set to: 0
 25562  006172  0012               	return	
 25563  006174                     __end_of___lldiv:
 25564                           	opt stack 0
 25565                           tblptru	equ	0xFF8
 25566                           tblptrh	equ	0xFF7
 25567                           tblptrl	equ	0xFF6
 25568                           tablat	equ	0xFF5
 25569                           prodh	equ	0xFF4
 25570                           prodl	equ	0xFF3
 25571                           intcon	equ	0xFF2
 25572                           indf0	equ	0xFEF
 25573                           postinc0	equ	0xFEE
 25574                           fsr0h	equ	0xFEA
 25575                           fsr0l	equ	0xFE9
 25576                           wreg	equ	0xFE8
 25577                           indf1	equ	0xFE7
 25578                           postinc1	equ	0xFE6
 25579                           postdec1	equ	0xFE5
 25580                           fsr1h	equ	0xFE2
 25581                           fsr1l	equ	0xFE1
 25582                           indf2	equ	0xFDF
 25583                           postinc2	equ	0xFDE
 25584                           postdec2	equ	0xFDD
 25585                           plusw2	equ	0xFDB
 25586                           fsr2h	equ	0xFDA
 25587                           fsr2l	equ	0xFD9
 25588                           status	equ	0xFD8
 25589                           
 25590 ;; *************** function _isdigit *****************
 25591 ;; Defined at:
 25592 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/common/isdigit.c"
 25593 ;; Parameters:    Size  Location     Type
 25594 ;;  c               1    wreg     unsigned char 
 25595 ;; Auto vars:     Size  Location     Type
 25596 ;;  c               1   32[COMRAM] unsigned char 
 25597 ;; Return value:  Size  Location     Type
 25598 ;;		None               void
 25599 ;; Registers used:
 25600 ;;		wreg, status,2, status,0
 25601 ;; Tracked objects:
 25602 ;;		On entry : 0/0
 25603 ;;		On exit  : 0/0
 25604 ;;		Unchanged: 0/0
 25605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25606 ;;      Params:         0       0       0       0       0       0       0
 25607 ;;      Locals:         2       0       0       0       0       0       0
 25608 ;;      Temps:          1       0       0       0       0       0       0
 25609 ;;      Totals:         3       0       0       0       0       0       0
 25610 ;;Total ram usage:        3 bytes
 25611 ;; Hardware stack levels used:    1
 25612 ;; Hardware stack levels required when called:    3
 25613 ;; This function calls:
 25614 ;;		Nothing
 25615 ;; This function is called by:
 25616 ;;		_sprintf
 25617 ;;		_atoi
 25618 ;; This function uses a non-reentrant model
 25619 ;;
 25620                           
 25621                           	psect	text61
 25622  006A8E                     __ptext61:
 25623                           	opt stack 0
 25624  006A8E                     _isdigit:
 25625                           	opt stack 25
 25626                           
 25627                           ; BSR set to: 0
 25628                           ;incstack = 0
 25629                           ;incstack = 0
 25630                           ;isdigit@c stored from wreg
 25631  006A8E  CFE8 F021          	movff	wreg,isdigit@c
 25632  006A92  6A20               	clrf	_isdigit$3283,c
 25633  006A94  0E3A               	movlw	58
 25634  006A96  6021               	cpfslt	isdigit@c,c
 25635  006A98  D005               	goto	l18866
 25636  006A9A  0E2F               	movlw	47
 25637  006A9C  6421               	cpfsgt	isdigit@c,c
 25638  006A9E  D002               	goto	l18866
 25639  006AA0  0E01               	movlw	1
 25640  006AA2  6E20               	movwf	_isdigit$3283,c
 25641  006AA4                     l18866:
 25642  006AA4  C020  F01F         	movff	_isdigit$3283,??_isdigit
 25643  006AA8  301F               	rrcf	??_isdigit,w,c
 25644  006AAA  0012               	return	
 25645  006AAC                     __end_of_isdigit:
 25646                           	opt stack 0
 25647                           tblptru	equ	0xFF8
 25648                           tblptrh	equ	0xFF7
 25649                           tblptrl	equ	0xFF6
 25650                           tablat	equ	0xFF5
 25651                           prodh	equ	0xFF4
 25652                           prodl	equ	0xFF3
 25653                           intcon	equ	0xFF2
 25654                           indf0	equ	0xFEF
 25655                           postinc0	equ	0xFEE
 25656                           fsr0h	equ	0xFEA
 25657                           fsr0l	equ	0xFE9
 25658                           wreg	equ	0xFE8
 25659                           indf1	equ	0xFE7
 25660                           postinc1	equ	0xFE6
 25661                           postdec1	equ	0xFE5
 25662                           fsr1h	equ	0xFE2
 25663                           fsr1l	equ	0xFE1
 25664                           indf2	equ	0xFDF
 25665                           postinc2	equ	0xFDE
 25666                           postdec2	equ	0xFDD
 25667                           plusw2	equ	0xFDB
 25668                           fsr2h	equ	0xFDA
 25669                           fsr2l	equ	0xFD9
 25670                           status	equ	0xFD8
 25671                           
 25672 ;; *************** function _printFirmwareVersion *****************
 25673 ;; Defined at:
 25674 ;;		line 3298 in file "main.c"
 25675 ;; Parameters:    Size  Location     Type
 25676 ;;		None
 25677 ;; Auto vars:     Size  Location     Type
 25678 ;;  wrkbuf         20   15[BANK0 ] unsigned char [20]
 25679 ;; Return value:  Size  Location     Type
 25680 ;;		None               void
 25681 ;; Registers used:
 25682 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 25683 ;; Tracked objects:
 25684 ;;		On entry : 0/0
 25685 ;;		On exit  : 0/0
 25686 ;;		Unchanged: 0/0
 25687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25688 ;;      Params:         0       0       0       0       0       0       0
 25689 ;;      Locals:         0      20       0       0       0       0       0
 25690 ;;      Temps:          0       0       0       0       0       0       0
 25691 ;;      Totals:         0      20       0       0       0       0       0
 25692 ;;Total ram usage:       20 bytes
 25693 ;; Hardware stack levels used:    1
 25694 ;; Hardware stack levels required when called:    6
 25695 ;; This function calls:
 25696 ;;		_putsUSART
 25697 ;;		_WriteUSART
 25698 ;;		_itoa
 25699 ;; This function is called by:
 25700 ;;		_main
 25701 ;;		_doModeVerbose
 25702 ;; This function uses a non-reentrant model
 25703 ;;
 25704                           
 25705                           	psect	text62
 25706  005E72                     __ptext62:
 25707                           	opt stack 0
 25708  005E72                     _printFirmwareVersion:
 25709                           	opt stack 23
 25710                           
 25711                           ;main.c: 3299: char wrkbuf[20];
 25712                           ;main.c: 3300: putsUSART((char *) "Version: ");
 25713                           
 25714                           ;incstack = 0
 25715                           ;incstack = 0
 25716  005E72  0E7E               	movlw	high STR_300
 25717  005E74  6E21               	movwf	?_putsUSART+1,c
 25718  005E76  0E74               	movlw	low STR_300
 25719  005E78  6E20               	movwf	?_putsUSART,c
 25720  005E7A  ECDF  F032         	call	_putsUSART	;wreg free
 25721                           
 25722                           ;main.c: 3301: itoa(wrkbuf, 1, 10);
 25723  005E7E  0100               	movlb	0	; () banked
 25724  005E80  D835               	call	PL80	;call to abstracted procedure
 25725  005E82  ECA9  F034         	call	_itoa	;wreg free
 25726                           
 25727                           ; BSR set to: 0
 25728                           ;main.c: 3302: putsUSART(wrkbuf);
 25729  005E86  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25730  005E88  6E21               	movwf	?_putsUSART+1,c
 25731  005E8A  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 25732  005E8C  6E20               	movwf	?_putsUSART,c
 25733  005E8E  ECDF  F032         	call	_putsUSART	;wreg free
 25734  005E92                     l1368:
 25735  005E92  A2AC               	btfss	4012,1,c	;volatile
 25736  005E94  D7FE               	goto	l1368
 25737                           
 25738                           ;main.c: 3304: WriteUSART('.');
 25739  005E96  0E2E               	movlw	46
 25740  005E98  EC8B  F035         	call	_WriteUSART
 25741                           
 25742                           ;main.c: 3305: itoa(wrkbuf, 1, 10);
 25743  005E9C  0100               	movlb	0	; () banked
 25744  005E9E  D826               	call	PL80	;call to abstracted procedure
 25745  005EA0  ECA9  F034         	call	_itoa	;wreg free
 25746                           
 25747                           ; BSR set to: 0
 25748                           ;main.c: 3306: putsUSART(wrkbuf);
 25749  005EA4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25750  005EA6  6E21               	movwf	?_putsUSART+1,c
 25751  005EA8  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 25752  005EAA  6E20               	movwf	?_putsUSART,c
 25753  005EAC  ECDF  F032         	call	_putsUSART	;wreg free
 25754  005EB0                     l1371:
 25755  005EB0  A2AC               	btfss	4012,1,c	;volatile
 25756  005EB2  D7FE               	goto	l1371
 25757                           
 25758                           ;main.c: 3308: WriteUSART('.');
 25759  005EB4  0E2E               	movlw	46
 25760  005EB6  EC8B  F035         	call	_WriteUSART
 25761                           
 25762                           ;main.c: 3309: itoa(wrkbuf, 2, 10);
 25763  005EBA  0100               	movlb	0	; () banked
 25764  005EBC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25765  005EBE  6F6A               	movwf	(?_itoa+1)& (0+255),b
 25766  005EC0  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 25767  005EC2  6F69               	movwf	?_itoa& (0+255),b
 25768  005EC4  6B6C               	clrf	(?_itoa+3)& (0+255),b
 25769  005EC6  0E02               	movlw	2
 25770  005EC8  6F6B               	movwf	(?_itoa+2)& (0+255),b
 25771  005ECA  6B6E               	clrf	(?_itoa+5)& (0+255),b
 25772  005ECC  0E0A               	movlw	10
 25773  005ECE  6F6D               	movwf	(?_itoa+4)& (0+255),b
 25774  005ED0  ECA9  F034         	call	_itoa	;wreg free
 25775                           
 25776                           ; BSR set to: 0
 25777                           ;main.c: 3310: putsUSART(wrkbuf);
 25778  005ED4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25779  005ED6  6E21               	movwf	?_putsUSART+1,c
 25780  005ED8  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 25781  005EDA  6E20               	movwf	?_putsUSART,c
 25782  005EDC  ECDF  F032         	call	_putsUSART	;wreg free
 25783                           
 25784                           ;main.c: 3311: putsUSART((char *) "\r\n");
 25785  005EE0  0E72               	movlw	high (STR_241+51)
 25786  005EE2  6E21               	movwf	?_putsUSART+1,c
 25787  005EE4  0EDA               	movlw	low (STR_241+51)
 25788  005EE6  6E20               	movwf	?_putsUSART,c
 25789  005EE8  EFDF  F032         	goto	_putsUSART	;wreg free
 25790  005EEC                     __end_of_printFirmwareVersion:
 25791                           	opt stack 0
 25792  005EEC                     PL80:
 25793                           	opt stack 23
 25794  005EEC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 25795  005EEE  6F6A               	movwf	(?_itoa+1)& (0+255),b
 25796  005EF0  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 25797  005EF2  6F69               	movwf	?_itoa& (0+255),b
 25798  005EF4  6B6C               	clrf	(?_itoa+3)& (0+255),b
 25799  005EF6  0E01               	movlw	1
 25800  005EF8  6F6B               	movwf	(?_itoa+2)& (0+255),b
 25801  005EFA  6B6E               	clrf	(?_itoa+5)& (0+255),b
 25802  005EFC  0E0A               	movlw	10
 25803  005EFE  6F6D               	movwf	(?_itoa+4)& (0+255),b
 25804  005F00  0C0A               	retlw	10
 25805  005F02                     __end_ofPL80:
 25806                           	opt stack 0
 25807                           tblptru	equ	0xFF8
 25808                           tblptrh	equ	0xFF7
 25809                           tblptrl	equ	0xFF6
 25810                           tablat	equ	0xFF5
 25811                           prodh	equ	0xFF4
 25812                           prodl	equ	0xFF3
 25813                           intcon	equ	0xFF2
 25814                           indf0	equ	0xFEF
 25815                           postinc0	equ	0xFEE
 25816                           fsr0h	equ	0xFEA
 25817                           fsr0l	equ	0xFE9
 25818                           wreg	equ	0xFE8
 25819                           indf1	equ	0xFE7
 25820                           postinc1	equ	0xFE6
 25821                           postdec1	equ	0xFE5
 25822                           fsr1h	equ	0xFE2
 25823                           fsr1l	equ	0xFE1
 25824                           indf2	equ	0xFDF
 25825                           postinc2	equ	0xFDE
 25826                           postdec2	equ	0xFDD
 25827                           plusw2	equ	0xFDB
 25828                           fsr2h	equ	0xFDA
 25829                           fsr2l	equ	0xFD9
 25830                           status	equ	0xFD8
 25831                           
 25832 ;; *************** function _itoa *****************
 25833 ;; Defined at:
 25834 ;;		line 5 in file "/opt/microchip/xc8/v1.21/sources/common/itoa.c"
 25835 ;; Parameters:    Size  Location     Type
 25836 ;;  buf             2    9[BANK0 ] PTR unsigned char 
 25837 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25838 ;;  val             2   11[BANK0 ] int 
 25839 ;;  base            2   13[BANK0 ] int 
 25840 ;; Auto vars:     Size  Location     Type
 25841 ;;  cp              2    0        PTR unsigned char 
 25842 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25843 ;; Return value:  Size  Location     Type
 25844 ;;                  2    9[BANK0 ] PTR unsigned char 
 25845 ;; Registers used:
 25846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25847 ;; Tracked objects:
 25848 ;;		On entry : F/0
 25849 ;;		On exit  : F/0
 25850 ;;		Unchanged: 0/0
 25851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25852 ;;      Params:         0       6       0       0       0       0       0
 25853 ;;      Locals:         2       0       0       0       0       0       0
 25854 ;;      Temps:          0       0       0       0       0       0       0
 25855 ;;      Totals:         2       6       0       0       0       0       0
 25856 ;;Total ram usage:        8 bytes
 25857 ;; Hardware stack levels used:    1
 25858 ;; Hardware stack levels required when called:    5
 25859 ;; This function calls:
 25860 ;;		_utoa
 25861 ;; This function is called by:
 25862 ;;		_receiveSendEventSLCAN
 25863 ;;		_findNodes
 25864 ;;		_printGUID
 25865 ;;		_printNodeFirmwareVersion
 25866 ;;		_printFirmwareVersion
 25867 ;; This function uses a non-reentrant model
 25868 ;;
 25869                           
 25870                           	psect	text63
 25871  006952                     __ptext63:
 25872                           	opt stack 0
 25873  006952                     _itoa:
 25874                           	opt stack 23
 25875                           
 25876                           ; BSR set to: 0
 25877                           
 25878                           ;incstack = 0
 25879                           ;incstack = 0
 25880  006952  AF6C               	btfss	(itoa@val+1)& (0+255),7,b
 25881  006954  D00C               	goto	l18708
 25882                           
 25883                           ; BSR set to: 0
 25884  006956  C069  FFD9         	movff	itoa@buf,fsr2l
 25885  00695A  C06A  FFDA         	movff	itoa@buf+1,fsr2h
 25886  00695E  0E2D               	movlw	45
 25887  006960  6EDF               	movwf	indf2,c
 25888                           
 25889                           ; BSR set to: 0
 25890  006962  4B69               	infsnz	itoa@buf& (0+255),f,b
 25891  006964  2B6A               	incf	(itoa@buf+1)& (0+255),f,b
 25892                           
 25893                           ; BSR set to: 0
 25894  006966  6D6B               	negf	itoa@val& (0+255),b
 25895  006968  1F6C               	comf	(itoa@val+1)& (0+255),f,b
 25896  00696A  B0D8               	btfsc	status,0,c
 25897  00696C  2B6C               	incf	(itoa@val+1)& (0+255),f,b
 25898  00696E                     l18708:
 25899                           
 25900                           ; BSR set to: 0
 25901  00696E  C069  F060         	movff	itoa@buf,?_utoa
 25902  006972  C06A  F061         	movff	itoa@buf+1,?_utoa+1
 25903  006976  C06B  F062         	movff	itoa@val,?_utoa+2
 25904  00697A  C06C  F063         	movff	itoa@val+1,?_utoa+3
 25905  00697E  C06D  F064         	movff	itoa@base,?_utoa+4
 25906  006982  C06E  F065         	movff	itoa@base+1,?_utoa+5
 25907  006986  EF03  F02E         	goto	_utoa	;wreg free
 25908  00698A                     __end_of_itoa:
 25909                           	opt stack 0
 25910                           tblptru	equ	0xFF8
 25911                           tblptrh	equ	0xFF7
 25912                           tblptrl	equ	0xFF6
 25913                           tablat	equ	0xFF5
 25914                           prodh	equ	0xFF4
 25915                           prodl	equ	0xFF3
 25916                           intcon	equ	0xFF2
 25917                           indf0	equ	0xFEF
 25918                           postinc0	equ	0xFEE
 25919                           fsr0h	equ	0xFEA
 25920                           fsr0l	equ	0xFE9
 25921                           wreg	equ	0xFE8
 25922                           indf1	equ	0xFE7
 25923                           postinc1	equ	0xFE6
 25924                           postdec1	equ	0xFE5
 25925                           fsr1h	equ	0xFE2
 25926                           fsr1l	equ	0xFE1
 25927                           indf2	equ	0xFDF
 25928                           postinc2	equ	0xFDE
 25929                           postdec2	equ	0xFDD
 25930                           plusw2	equ	0xFDB
 25931                           fsr2h	equ	0xFDA
 25932                           fsr2l	equ	0xFD9
 25933                           status	equ	0xFD8
 25934                           
 25935 ;; *************** function _utoa *****************
 25936 ;; Defined at:
 25937 ;;		line 18 in file "/opt/microchip/xc8/v1.21/sources/common/itoa.c"
 25938 ;; Parameters:    Size  Location     Type
 25939 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25940 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 25941 ;;  val             2    2[BANK0 ] unsigned int 
 25942 ;;  base            2    4[BANK0 ] int 
 25943 ;; Auto vars:     Size  Location     Type
 25944 ;;  v               2    6[BANK0 ] unsigned int 
 25945 ;;  c               1    8[BANK0 ] unsigned char 
 25946 ;; Return value:  Size  Location     Type
 25947 ;;                  2    0[BANK0 ] PTR unsigned char 
 25948 ;; Registers used:
 25949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25950 ;; Tracked objects:
 25951 ;;		On entry : F/0
 25952 ;;		On exit  : F/0
 25953 ;;		Unchanged: 0/0
 25954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25955 ;;      Params:         0       6       0       0       0       0       0
 25956 ;;      Locals:         0       3       0       0       0       0       0
 25957 ;;      Temps:          0       0       0       0       0       0       0
 25958 ;;      Totals:         0       9       0       0       0       0       0
 25959 ;;Total ram usage:        9 bytes
 25960 ;; Hardware stack levels used:    1
 25961 ;; Hardware stack levels required when called:    4
 25962 ;; This function calls:
 25963 ;;		___lwdiv
 25964 ;;		___lwmod
 25965 ;; This function is called by:
 25966 ;;		_itoa
 25967 ;; This function uses a non-reentrant model
 25968 ;;
 25969                           
 25970                           	psect	text64
 25971  005C06                     __ptext64:
 25972                           	opt stack 0
 25973  005C06                     _utoa:
 25974                           	opt stack 23
 25975                           
 25976                           ; BSR set to: 0
 25977                           
 25978                           ; BSR set to: 0
 25979                           ;incstack = 0
 25980                           ;incstack = 0
 25981  005C06  C062  F066         	movff	utoa@val,utoa@v
 25982  005C0A  C063  F067         	movff	utoa@val+1,utoa@v+1
 25983  005C0E                     l18872:
 25984                           
 25985                           ; BSR set to: 0
 25986  005C0E  C066  F01F         	movff	utoa@v,?___lwdiv
 25987  005C12  C067  F020         	movff	utoa@v+1,?___lwdiv+1
 25988  005C16  C064  F021         	movff	utoa@base,?___lwdiv+2
 25989  005C1A  C065  F022         	movff	utoa@base+1,?___lwdiv+3
 25990  005C1E  EC09  F033         	call	___lwdiv	;wreg free
 25991  005C22  C01F  F066         	movff	?___lwdiv,utoa@v
 25992  005C26  C020  F067         	movff	?___lwdiv+1,utoa@v+1
 25993                           
 25994                           ; BSR set to: 0
 25995  005C2A  4B60               	infsnz	utoa@buf& (0+255),f,b
 25996  005C2C  2B61               	incf	(utoa@buf+1)& (0+255),f,b
 25997                           
 25998                           ; BSR set to: 0
 25999  005C2E  5167               	movf	(utoa@v+1)& (0+255),w,b
 26000  005C30  1166               	iorwf	utoa@v& (0+255),w,b
 26001  005C32  E1ED               	bnz	l18872
 26002                           
 26003                           ; BSR set to: 0
 26004  005C34  C060  FFD9         	movff	utoa@buf,fsr2l
 26005  005C38  C061  FFDA         	movff	utoa@buf+1,fsr2h
 26006  005C3C  0E00               	movlw	0
 26007  005C3E  6ADF               	clrf	indf2,c
 26008                           
 26009                           ; BSR set to: 0
 26010  005C40  0760               	decf	utoa@buf& (0+255),f,b
 26011  005C42  A0D8               	btfss	status,0,c
 26012  005C44  0761               	decf	(utoa@buf+1)& (0+255),f,b
 26013  005C46                     l18882:
 26014                           
 26015                           ; BSR set to: 0
 26016  005C46  C062  F01F         	movff	utoa@val,?___lwmod
 26017  005C4A  C063  F020         	movff	utoa@val+1,?___lwmod+1
 26018  005C4E  C064  F021         	movff	utoa@base,?___lwmod+2
 26019  005C52  C065  F022         	movff	utoa@base+1,?___lwmod+3
 26020  005C56  EC16  F034         	call	___lwmod	;wreg free
 26021  005C5A  501F               	movf	?___lwmod,w,c
 26022  005C5C  6F68               	movwf	utoa@c& (0+255),b
 26023                           
 26024                           ; BSR set to: 0
 26025  005C5E  C062  F01F         	movff	utoa@val,?___lwdiv
 26026  005C62  C063  F020         	movff	utoa@val+1,?___lwdiv+1
 26027  005C66  C064  F021         	movff	utoa@base,?___lwdiv+2
 26028  005C6A  C065  F022         	movff	utoa@base+1,?___lwdiv+3
 26029  005C6E  EC09  F033         	call	___lwdiv	;wreg free
 26030  005C72  C01F  F062         	movff	?___lwdiv,utoa@val
 26031  005C76  C020  F063         	movff	?___lwdiv+1,utoa@val+1
 26032                           
 26033                           ; BSR set to: 0
 26034  005C7A  0E09               	movlw	9
 26035  005C7C  6568               	cpfsgt	utoa@c& (0+255),b
 26036  005C7E  D002               	goto	l2522
 26037                           
 26038                           ; BSR set to: 0
 26039  005C80  0E07               	movlw	7
 26040  005C82  2768               	addwf	utoa@c& (0+255),f,b
 26041  005C84                     l2522:
 26042                           
 26043                           ; BSR set to: 0
 26044  005C84  0E30               	movlw	48
 26045  005C86  2768               	addwf	utoa@c& (0+255),f,b
 26046                           
 26047                           ; BSR set to: 0
 26048  005C88  C060  FFD9         	movff	utoa@buf,fsr2l
 26049  005C8C  C061  FFDA         	movff	utoa@buf+1,fsr2h
 26050  005C90  C068  FFDF         	movff	utoa@c,indf2
 26051                           
 26052                           ; BSR set to: 0
 26053  005C94  0760               	decf	utoa@buf& (0+255),f,b
 26054  005C96  A0D8               	btfss	status,0,c
 26055  005C98  0761               	decf	(utoa@buf+1)& (0+255),f,b
 26056                           
 26057                           ; BSR set to: 0
 26058  005C9A  5163               	movf	(utoa@val+1)& (0+255),w,b
 26059  005C9C  1162               	iorwf	utoa@val& (0+255),w,b
 26060  005C9E  E1D3               	bnz	l18882
 26061                           
 26062                           ; BSR set to: 0
 26063                           ;	Return value of _utoa is never used
 26064  005CA0  4B60               	infsnz	utoa@buf& (0+255),f,b
 26065  005CA2  2B61               	incf	(utoa@buf+1)& (0+255),f,b
 26066                           
 26067                           ; BSR set to: 0
 26068  005CA4  0012               	return	
 26069  005CA6                     __end_of_utoa:
 26070                           	opt stack 0
 26071                           tblptru	equ	0xFF8
 26072                           tblptrh	equ	0xFF7
 26073                           tblptrl	equ	0xFF6
 26074                           tablat	equ	0xFF5
 26075                           prodh	equ	0xFF4
 26076                           prodl	equ	0xFF3
 26077                           intcon	equ	0xFF2
 26078                           indf0	equ	0xFEF
 26079                           postinc0	equ	0xFEE
 26080                           fsr0h	equ	0xFEA
 26081                           fsr0l	equ	0xFE9
 26082                           wreg	equ	0xFE8
 26083                           indf1	equ	0xFE7
 26084                           postinc1	equ	0xFE6
 26085                           postdec1	equ	0xFE5
 26086                           fsr1h	equ	0xFE2
 26087                           fsr1l	equ	0xFE1
 26088                           indf2	equ	0xFDF
 26089                           postinc2	equ	0xFDE
 26090                           postdec2	equ	0xFDD
 26091                           plusw2	equ	0xFDB
 26092                           fsr2h	equ	0xFDA
 26093                           fsr2l	equ	0xFD9
 26094                           status	equ	0xFD8
 26095                           
 26096 ;; *************** function ___lwmod *****************
 26097 ;; Defined at:
 26098 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/lwmod.c"
 26099 ;; Parameters:    Size  Location     Type
 26100 ;;  dividend        2   30[COMRAM] unsigned int 
 26101 ;;  divisor         2   32[COMRAM] unsigned int 
 26102 ;; Auto vars:     Size  Location     Type
 26103 ;;  counter         1   34[COMRAM] unsigned char 
 26104 ;; Return value:  Size  Location     Type
 26105 ;;                  2   30[COMRAM] unsigned int 
 26106 ;; Registers used:
 26107 ;;		wreg, status,2, status,0
 26108 ;; Tracked objects:
 26109 ;;		On entry : F/0
 26110 ;;		On exit  : F/0
 26111 ;;		Unchanged: F/0
 26112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26113 ;;      Params:         4       0       0       0       0       0       0
 26114 ;;      Locals:         1       0       0       0       0       0       0
 26115 ;;      Temps:          0       0       0       0       0       0       0
 26116 ;;      Totals:         5       0       0       0       0       0       0
 26117 ;;Total ram usage:        5 bytes
 26118 ;; Hardware stack levels used:    1
 26119 ;; Hardware stack levels required when called:    3
 26120 ;; This function calls:
 26121 ;;		Nothing
 26122 ;; This function is called by:
 26123 ;;		_utoa
 26124 ;; This function uses a non-reentrant model
 26125 ;;
 26126                           
 26127                           	psect	text65
 26128  00682C                     __ptext65:
 26129                           	opt stack 0
 26130  00682C                     ___lwmod:
 26131                           	opt stack 23
 26132                           
 26133                           ; BSR set to: 0
 26134                           
 26135                           ; BSR set to: 0
 26136                           ;incstack = 0
 26137                           ;incstack = 0
 26138  00682C  5022               	movf	___lwmod@divisor+1,w,c
 26139  00682E  1021               	iorwf	___lwmod@divisor,w,c
 26140  006830  E017               	bz	l2646
 26141                           
 26142                           ; BSR set to: 0
 26143  006832  0E01               	movlw	1
 26144  006834  6E23               	movwf	___lwmod@counter,c
 26145  006836  D004               	goto	l18966
 26146  006838                     l18964:
 26147                           
 26148                           ; BSR set to: 0
 26149  006838  90D8               	bcf	status,0,c
 26150  00683A  3621               	rlcf	___lwmod@divisor,f,c
 26151  00683C  3622               	rlcf	___lwmod@divisor+1,f,c
 26152  00683E  2A23               	incf	___lwmod@counter,f,c
 26153  006840                     l18966:
 26154                           
 26155                           ; BSR set to: 0
 26156  006840  AE22               	btfss	___lwmod@divisor+1,7,c
 26157  006842  D7FA               	goto	l18964
 26158  006844                     l18968:
 26159                           
 26160                           ; BSR set to: 0
 26161  006844  5021               	movf	___lwmod@divisor,w,c
 26162  006846  5C1F               	subwf	___lwmod@dividend,w,c
 26163  006848  5022               	movf	___lwmod@divisor+1,w,c
 26164  00684A  5820               	subwfb	___lwmod@dividend+1,w,c
 26165  00684C  E304               	bnc	l18972
 26166                           
 26167                           ; BSR set to: 0
 26168  00684E  5021               	movf	___lwmod@divisor,w,c
 26169  006850  5E1F               	subwf	___lwmod@dividend,f,c
 26170  006852  5022               	movf	___lwmod@divisor+1,w,c
 26171  006854  5A20               	subwfb	___lwmod@dividend+1,f,c
 26172  006856                     l18972:
 26173                           
 26174                           ; BSR set to: 0
 26175  006856  90D8               	bcf	status,0,c
 26176  006858  3222               	rrcf	___lwmod@divisor+1,f,c
 26177  00685A  3221               	rrcf	___lwmod@divisor,f,c
 26178                           
 26179                           ; BSR set to: 0
 26180  00685C  2E23               	decfsz	___lwmod@counter,f,c
 26181  00685E  D7F2               	goto	l18968
 26182  006860                     l2646:
 26183                           
 26184                           ; BSR set to: 0
 26185  006860  C01F  F01F         	movff	___lwmod@dividend,?___lwmod
 26186  006864  C020  F020         	movff	___lwmod@dividend+1,?___lwmod+1
 26187                           
 26188                           ; BSR set to: 0
 26189  006868  0012               	return	
 26190  00686A                     __end_of___lwmod:
 26191                           	opt stack 0
 26192                           tblptru	equ	0xFF8
 26193                           tblptrh	equ	0xFF7
 26194                           tblptrl	equ	0xFF6
 26195                           tablat	equ	0xFF5
 26196                           prodh	equ	0xFF4
 26197                           prodl	equ	0xFF3
 26198                           intcon	equ	0xFF2
 26199                           indf0	equ	0xFEF
 26200                           postinc0	equ	0xFEE
 26201                           fsr0h	equ	0xFEA
 26202                           fsr0l	equ	0xFE9
 26203                           wreg	equ	0xFE8
 26204                           indf1	equ	0xFE7
 26205                           postinc1	equ	0xFE6
 26206                           postdec1	equ	0xFE5
 26207                           fsr1h	equ	0xFE2
 26208                           fsr1l	equ	0xFE1
 26209                           indf2	equ	0xFDF
 26210                           postinc2	equ	0xFDE
 26211                           postdec2	equ	0xFDD
 26212                           plusw2	equ	0xFDB
 26213                           fsr2h	equ	0xFDA
 26214                           fsr2l	equ	0xFD9
 26215                           status	equ	0xFD8
 26216                           
 26217 ;; *************** function ___lwdiv *****************
 26218 ;; Defined at:
 26219 ;;		line 10 in file "/opt/microchip/xc8/v1.21/sources/common/lwdiv.c"
 26220 ;; Parameters:    Size  Location     Type
 26221 ;;  dividend        2   30[COMRAM] unsigned int 
 26222 ;;  divisor         2   32[COMRAM] unsigned int 
 26223 ;; Auto vars:     Size  Location     Type
 26224 ;;  quotient        2   35[COMRAM] unsigned int 
 26225 ;;  counter         1   34[COMRAM] unsigned char 
 26226 ;; Return value:  Size  Location     Type
 26227 ;;                  2   30[COMRAM] unsigned int 
 26228 ;; Registers used:
 26229 ;;		wreg, status,2, status,0
 26230 ;; Tracked objects:
 26231 ;;		On entry : F/0
 26232 ;;		On exit  : F/0
 26233 ;;		Unchanged: F/0
 26234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26235 ;;      Params:         4       0       0       0       0       0       0
 26236 ;;      Locals:         3       0       0       0       0       0       0
 26237 ;;      Temps:          0       0       0       0       0       0       0
 26238 ;;      Totals:         7       0       0       0       0       0       0
 26239 ;;Total ram usage:        7 bytes
 26240 ;; Hardware stack levels used:    1
 26241 ;; Hardware stack levels required when called:    3
 26242 ;; This function calls:
 26243 ;;		Nothing
 26244 ;; This function is called by:
 26245 ;;		_utoa
 26246 ;; This function uses a non-reentrant model
 26247 ;;
 26248                           
 26249                           	psect	text66
 26250  006612                     __ptext66:
 26251                           	opt stack 0
 26252  006612                     ___lwdiv:
 26253                           	opt stack 23
 26254                           
 26255                           ; BSR set to: 0
 26256                           
 26257                           ; BSR set to: 0
 26258                           ;incstack = 0
 26259                           ;incstack = 0
 26260  006612  6A24               	clrf	___lwdiv@quotient,c
 26261  006614  6A25               	clrf	___lwdiv@quotient+1,c
 26262                           
 26263                           ; BSR set to: 0
 26264  006616  5022               	movf	___lwdiv@divisor+1,w,c
 26265  006618  1021               	iorwf	___lwdiv@divisor,w,c
 26266  00661A  E01B               	bz	l2636
 26267                           
 26268                           ; BSR set to: 0
 26269  00661C  0E01               	movlw	1
 26270  00661E  6E23               	movwf	___lwdiv@counter,c
 26271  006620  D004               	goto	l18946
 26272  006622                     l18944:
 26273                           
 26274                           ; BSR set to: 0
 26275  006622  90D8               	bcf	status,0,c
 26276  006624  3621               	rlcf	___lwdiv@divisor,f,c
 26277  006626  3622               	rlcf	___lwdiv@divisor+1,f,c
 26278  006628  2A23               	incf	___lwdiv@counter,f,c
 26279  00662A                     l18946:
 26280                           
 26281                           ; BSR set to: 0
 26282  00662A  AE22               	btfss	___lwdiv@divisor+1,7,c
 26283  00662C  D7FA               	goto	l18944
 26284  00662E                     l18948:
 26285                           
 26286                           ; BSR set to: 0
 26287  00662E  90D8               	bcf	status,0,c
 26288  006630  3624               	rlcf	___lwdiv@quotient,f,c
 26289  006632  3625               	rlcf	___lwdiv@quotient+1,f,c
 26290                           
 26291                           ; BSR set to: 0
 26292  006634  5021               	movf	___lwdiv@divisor,w,c
 26293  006636  5C1F               	subwf	___lwdiv@dividend,w,c
 26294  006638  5022               	movf	___lwdiv@divisor+1,w,c
 26295  00663A  5820               	subwfb	___lwdiv@dividend+1,w,c
 26296  00663C  E305               	bnc	l18956
 26297                           
 26298                           ; BSR set to: 0
 26299  00663E  5021               	movf	___lwdiv@divisor,w,c
 26300  006640  5E1F               	subwf	___lwdiv@dividend,f,c
 26301  006642  5022               	movf	___lwdiv@divisor+1,w,c
 26302  006644  5A20               	subwfb	___lwdiv@dividend+1,f,c
 26303                           
 26304                           ; BSR set to: 0
 26305  006646  8024               	bsf	___lwdiv@quotient,0,c
 26306  006648                     l18956:
 26307                           
 26308                           ; BSR set to: 0
 26309  006648  90D8               	bcf	status,0,c
 26310  00664A  3222               	rrcf	___lwdiv@divisor+1,f,c
 26311  00664C  3221               	rrcf	___lwdiv@divisor,f,c
 26312                           
 26313                           ; BSR set to: 0
 26314  00664E  2E23               	decfsz	___lwdiv@counter,f,c
 26315  006650  D7EE               	goto	l18948
 26316  006652                     l2636:
 26317                           
 26318                           ; BSR set to: 0
 26319  006652  C024  F01F         	movff	___lwdiv@quotient,?___lwdiv
 26320  006656  C025  F020         	movff	___lwdiv@quotient+1,?___lwdiv+1
 26321                           
 26322                           ; BSR set to: 0
 26323  00665A  0012               	return	
 26324  00665C                     __end_of___lwdiv:
 26325                           	opt stack 0
 26326                           tblptru	equ	0xFF8
 26327                           tblptrh	equ	0xFF7
 26328                           tblptrl	equ	0xFF6
 26329                           tablat	equ	0xFF5
 26330                           prodh	equ	0xFF4
 26331                           prodl	equ	0xFF3
 26332                           intcon	equ	0xFF2
 26333                           indf0	equ	0xFEF
 26334                           postinc0	equ	0xFEE
 26335                           fsr0h	equ	0xFEA
 26336                           fsr0l	equ	0xFE9
 26337                           wreg	equ	0xFE8
 26338                           indf1	equ	0xFE7
 26339                           postinc1	equ	0xFE6
 26340                           postdec1	equ	0xFE5
 26341                           fsr1h	equ	0xFE2
 26342                           fsr1l	equ	0xFE1
 26343                           indf2	equ	0xFDF
 26344                           postinc2	equ	0xFDE
 26345                           postdec2	equ	0xFDD
 26346                           plusw2	equ	0xFDB
 26347                           fsr2h	equ	0xFDA
 26348                           fsr2l	equ	0xFD9
 26349                           status	equ	0xFD8
 26350                           
 26351 ;; *************** function _vscp_restoreDefaults *****************
 26352 ;; Defined at:
 26353 ;;		line 3288 in file "main.c"
 26354 ;; Parameters:    Size  Location     Type
 26355 ;;		None
 26356 ;; Auto vars:     Size  Location     Type
 26357 ;;		None
 26358 ;; Return value:  Size  Location     Type
 26359 ;;		None               void
 26360 ;; Registers used:
 26361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26362 ;; Tracked objects:
 26363 ;;		On entry : 0/0
 26364 ;;		On exit  : 0/0
 26365 ;;		Unchanged: 0/0
 26366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26367 ;;      Params:         0       0       0       0       0       0       0
 26368 ;;      Locals:         0       0       0       0       0       0       0
 26369 ;;      Temps:          0       0       0       0       0       0       0
 26370 ;;      Totals:         0       0       0       0       0       0       0
 26371 ;;Total ram usage:        0 bytes
 26372 ;; Hardware stack levels used:    1
 26373 ;; Hardware stack levels required when called:    6
 26374 ;; This function calls:
 26375 ;;		_init_app_ram
 26376 ;;		_init_app_eeprom
 26377 ;; This function is called by:
 26378 ;;		_main
 26379 ;;		_doModeVerbose
 26380 ;; This function uses a non-reentrant model
 26381 ;;
 26382                           
 26383                           	psect	text67
 26384  006B84                     __ptext67:
 26385                           	opt stack 0
 26386  006B84                     _vscp_restoreDefaults:
 26387                           	opt stack 23
 26388                           
 26389                           ;main.c: 3289: init_app_eeprom();
 26390                           
 26391                           ; BSR set to: 0
 26392                           ;incstack = 0
 26393                           ;incstack = 0
 26394  006B84  ECDE  F02A         	call	_init_app_eeprom	;wreg free
 26395                           
 26396                           ;main.c: 3290: init_app_ram();
 26397  006B88  EF84  F01A         	goto	_init_app_ram	;wreg free
 26398  006B8C                     __end_of_vscp_restoreDefaults:
 26399                           	opt stack 0
 26400                           tblptru	equ	0xFF8
 26401                           tblptrh	equ	0xFF7
 26402                           tblptrl	equ	0xFF6
 26403                           tablat	equ	0xFF5
 26404                           prodh	equ	0xFF4
 26405                           prodl	equ	0xFF3
 26406                           intcon	equ	0xFF2
 26407                           indf0	equ	0xFEF
 26408                           postinc0	equ	0xFEE
 26409                           fsr0h	equ	0xFEA
 26410                           fsr0l	equ	0xFE9
 26411                           wreg	equ	0xFE8
 26412                           indf1	equ	0xFE7
 26413                           postinc1	equ	0xFE6
 26414                           postdec1	equ	0xFE5
 26415                           fsr1h	equ	0xFE2
 26416                           fsr1l	equ	0xFE1
 26417                           indf2	equ	0xFDF
 26418                           postinc2	equ	0xFDE
 26419                           postdec2	equ	0xFDD
 26420                           plusw2	equ	0xFDB
 26421                           fsr2h	equ	0xFDA
 26422                           fsr2l	equ	0xFD9
 26423                           status	equ	0xFD8
 26424                           
 26425 ;; *************** function _init_app_eeprom *****************
 26426 ;; Defined at:
 26427 ;;		line 584 in file "main.c"
 26428 ;; Parameters:    Size  Location     Type
 26429 ;;		None
 26430 ;; Auto vars:     Size  Location     Type
 26431 ;;  i               1   34[COMRAM] unsigned char 
 26432 ;; Return value:  Size  Location     Type
 26433 ;;		None               void
 26434 ;; Registers used:
 26435 ;;		wreg, status,2, status,0, cstack
 26436 ;; Tracked objects:
 26437 ;;		On entry : 0/0
 26438 ;;		On exit  : 0/0
 26439 ;;		Unchanged: 0/0
 26440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26441 ;;      Params:         0       0       0       0       0       0       0
 26442 ;;      Locals:         1       0       0       0       0       0       0
 26443 ;;      Temps:          0       0       0       0       0       0       0
 26444 ;;      Totals:         1       0       0       0       0       0       0
 26445 ;;Total ram usage:        1 bytes
 26446 ;; Hardware stack levels used:    1
 26447 ;; Hardware stack levels required when called:    4
 26448 ;; This function calls:
 26449 ;;		_Busy_eep
 26450 ;;		_Write_b_eep
 26451 ;; This function is called by:
 26452 ;;		_vscp_restoreDefaults
 26453 ;; This function uses a non-reentrant model
 26454 ;;
 26455                           
 26456                           	psect	text68
 26457  0055BC                     __ptext68:
 26458                           	opt stack 0
 26459  0055BC                     _init_app_eeprom:
 26460                           	opt stack 24
 26461                           
 26462                           ;main.c: 585: uint8_t i;
 26463                           ;main.c: 587: (Busy_eep(), Write_b_eep(0x01,0x55));
 26464                           
 26465                           ;incstack = 0
 26466                           ;incstack = 0
 26467  0055BC  ECC6  F035         	call	_Busy_eep	;wreg free
 26468  0055C0  6A20               	clrf	?_Write_b_eep+1,c
 26469  0055C2  0E01               	movlw	1
 26470  0055C4  6E1F               	movwf	?_Write_b_eep,c
 26471  0055C6  0E55               	movlw	85
 26472  0055C8  6E21               	movwf	?_Write_b_eep+2,c
 26473  0055CA  ECC5  F034         	call	_Write_b_eep	;wreg free
 26474                           
 26475                           ;main.c: 588: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26476  0055CE  ECC6  F035         	call	_Busy_eep	;wreg free
 26477  0055D2  6A20               	clrf	?_Write_b_eep+1,c
 26478  0055D4  0E02               	movlw	2
 26479  0055D6  6E1F               	movwf	?_Write_b_eep,c
 26480  0055D8  0EAA               	movlw	170
 26481  0055DA  6E21               	movwf	?_Write_b_eep+2,c
 26482  0055DC  ECC5  F034         	call	_Write_b_eep	;wreg free
 26483                           
 26484                           ;main.c: 589: (Busy_eep(), Write_b_eep(0x03,0));
 26485  0055E0  ECC6  F035         	call	_Busy_eep	;wreg free
 26486  0055E4  6A20               	clrf	?_Write_b_eep+1,c
 26487  0055E6  0E03               	movlw	3
 26488  0055E8  6E1F               	movwf	?_Write_b_eep,c
 26489  0055EA  0E00               	movlw	0
 26490  0055EC  6A21               	clrf	?_Write_b_eep+2,c
 26491  0055EE  ECC5  F034         	call	_Write_b_eep	;wreg free
 26492                           
 26493                           ;main.c: 590: (Busy_eep(), Write_b_eep(0x05,0));
 26494  0055F2  ECC6  F035         	call	_Busy_eep	;wreg free
 26495  0055F6  6A20               	clrf	?_Write_b_eep+1,c
 26496  0055F8  0E05               	movlw	5
 26497  0055FA  6E1F               	movwf	?_Write_b_eep,c
 26498  0055FC  0E00               	movlw	0
 26499  0055FE  6A21               	clrf	?_Write_b_eep+2,c
 26500  005600  ECC5  F034         	call	_Write_b_eep	;wreg free
 26501                           
 26502                           ;main.c: 591: (Busy_eep(), Write_b_eep(0x06,0));
 26503  005604  ECC6  F035         	call	_Busy_eep	;wreg free
 26504  005608  6A20               	clrf	?_Write_b_eep+1,c
 26505  00560A  0E06               	movlw	6
 26506  00560C  6E1F               	movwf	?_Write_b_eep,c
 26507  00560E  0E00               	movlw	0
 26508  005610  6A21               	clrf	?_Write_b_eep+2,c
 26509  005612  ECC5  F034         	call	_Write_b_eep	;wreg free
 26510                           
 26511                           ;main.c: 592: (Busy_eep(), Write_b_eep(0x09,20u));
 26512  005616  ECC6  F035         	call	_Busy_eep	;wreg free
 26513  00561A  6A20               	clrf	?_Write_b_eep+1,c
 26514  00561C  0E09               	movlw	9
 26515  00561E  6E1F               	movwf	?_Write_b_eep,c
 26516  005620  0E14               	movlw	20
 26517  005622  6E21               	movwf	?_Write_b_eep+2,c
 26518  005624  ECC5  F034         	call	_Write_b_eep	;wreg free
 26519                           
 26520                           ;main.c: 595: for ( i = 0x20; i < (0x5C + 4); i++ ) {
 26521  005628  0E20               	movlw	32
 26522  00562A  6E23               	movwf	init_app_eeprom@i,c
 26523  00562C                     l17044:
 26524                           
 26525                           ;main.c: 596: (Busy_eep(), Write_b_eep(0x20,0xFF));
 26526  00562C  ECC6  F035         	call	_Busy_eep	;wreg free
 26527  005630  6A20               	clrf	?_Write_b_eep+1,c
 26528  005632  0E20               	movlw	32
 26529  005634  6E1F               	movwf	?_Write_b_eep,c
 26530  005636  0EFF               	movlw	255
 26531  005638  6821               	setf	?_Write_b_eep+2,c
 26532  00563A  ECC5  F034         	call	_Write_b_eep	;wreg free
 26533  00563E  2A23               	incf	init_app_eeprom@i,f,c
 26534  005640  0E5F               	movlw	95
 26535  005642  6423               	cpfsgt	init_app_eeprom@i,c
 26536  005644  D7F3               	goto	l17044
 26537                           
 26538                           ;main.c: 597: }
 26539                           ;main.c: 600: for (i = 0x60; i < (0x64 + 4); i++) {
 26540  005646  0E60               	movlw	96
 26541  005648  6E23               	movwf	init_app_eeprom@i,c
 26542  00564A                     l17058:
 26543                           
 26544                           ;main.c: 601: (Busy_eep(), Write_b_eep(0x60,0x00));
 26545  00564A  ECC6  F035         	call	_Busy_eep	;wreg free
 26546  00564E  6A20               	clrf	?_Write_b_eep+1,c
 26547  005650  0E60               	movlw	96
 26548  005652  6E1F               	movwf	?_Write_b_eep,c
 26549  005654  0E00               	movlw	0
 26550  005656  6A21               	clrf	?_Write_b_eep+2,c
 26551  005658  ECC5  F034         	call	_Write_b_eep	;wreg free
 26552  00565C  2A23               	incf	init_app_eeprom@i,f,c
 26553  00565E  0E67               	movlw	103
 26554  005660  6423               	cpfsgt	init_app_eeprom@i,c
 26555  005662  D7F3               	goto	l17058
 26556                           
 26557                           ;main.c: 602: }
 26558                           ;main.c: 604: (Busy_eep(), Write_b_eep(0x65,0));
 26559  005664  ECC6  F035         	call	_Busy_eep	;wreg free
 26560  005668  6A20               	clrf	?_Write_b_eep+1,c
 26561  00566A  0E65               	movlw	101
 26562  00566C  6E1F               	movwf	?_Write_b_eep,c
 26563  00566E  0E00               	movlw	0
 26564  005670  6A21               	clrf	?_Write_b_eep+2,c
 26565  005672  ECC5  F034         	call	_Write_b_eep	;wreg free
 26566                           
 26567                           ;main.c: 605: (Busy_eep(), Write_b_eep(0x66,0));
 26568  005676  ECC6  F035         	call	_Busy_eep	;wreg free
 26569  00567A  6A20               	clrf	?_Write_b_eep+1,c
 26570  00567C  0E66               	movlw	102
 26571  00567E  6E1F               	movwf	?_Write_b_eep,c
 26572  005680  6A21               	clrf	?_Write_b_eep+2,c
 26573  005682  EFC5  F034         	goto	_Write_b_eep	;wreg free
 26574  005686                     __end_of_init_app_eeprom:
 26575                           	opt stack 0
 26576                           tblptru	equ	0xFF8
 26577                           tblptrh	equ	0xFF7
 26578                           tblptrl	equ	0xFF6
 26579                           tablat	equ	0xFF5
 26580                           prodh	equ	0xFF4
 26581                           prodl	equ	0xFF3
 26582                           intcon	equ	0xFF2
 26583                           indf0	equ	0xFEF
 26584                           postinc0	equ	0xFEE
 26585                           fsr0h	equ	0xFEA
 26586                           fsr0l	equ	0xFE9
 26587                           wreg	equ	0xFE8
 26588                           indf1	equ	0xFE7
 26589                           postinc1	equ	0xFE6
 26590                           postdec1	equ	0xFE5
 26591                           fsr1h	equ	0xFE2
 26592                           fsr1l	equ	0xFE1
 26593                           indf2	equ	0xFDF
 26594                           postinc2	equ	0xFDE
 26595                           postdec2	equ	0xFDD
 26596                           plusw2	equ	0xFDB
 26597                           fsr2h	equ	0xFDA
 26598                           fsr2l	equ	0xFD9
 26599                           status	equ	0xFD8
 26600                           
 26601 ;; *************** function _printMode *****************
 26602 ;; Defined at:
 26603 ;;		line 3319 in file "main.c"
 26604 ;; Parameters:    Size  Location     Type
 26605 ;;		None
 26606 ;; Auto vars:     Size  Location     Type
 26607 ;;		None
 26608 ;; Return value:  Size  Location     Type
 26609 ;;		None               void
 26610 ;; Registers used:
 26611 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26612 ;; Tracked objects:
 26613 ;;		On entry : 0/0
 26614 ;;		On exit  : 0/0
 26615 ;;		Unchanged: 0/0
 26616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26617 ;;      Params:         0       0       0       0       0       0       0
 26618 ;;      Locals:         0       0       0       0       0       0       0
 26619 ;;      Temps:          0       0       0       0       0       0       0
 26620 ;;      Totals:         0       0       0       0       0       0       0
 26621 ;;Total ram usage:        0 bytes
 26622 ;; Hardware stack levels used:    1
 26623 ;; Hardware stack levels required when called:    5
 26624 ;; This function calls:
 26625 ;;		_putsUSART
 26626 ;; This function is called by:
 26627 ;;		_main
 26628 ;; This function uses a non-reentrant model
 26629 ;;
 26630                           
 26631                           	psect	text69
 26632  0061EA                     __ptext69:
 26633                           	opt stack 0
 26634  0061EA                     _printMode:
 26635                           	opt stack 25
 26636                           
 26637                           ;main.c: 3320: putsUSART((char *) "Mode: ");
 26638                           
 26639                           ;incstack = 0
 26640                           ;incstack = 0
 26641  0061EA  0E7F               	movlw	high STR_302
 26642  0061EC  6E21               	movwf	?_putsUSART+1,c
 26643  0061EE  0E10               	movlw	low STR_302
 26644  0061F0  6E20               	movwf	?_putsUSART,c
 26645  0061F2  ECDF  F032         	call	_putsUSART	;wreg free
 26646                           
 26647                           ;main.c: 3321: if (0 == mode) {
 26648  0061F6  0100               	movlb	0	; () banked
 26649  0061F8  67F1               	tstfsz	_mode& (0+255),b
 26650  0061FA  D007               	goto	l15432
 26651                           
 26652                           ; BSR set to: 0
 26653                           ;main.c: 3322: putsUSART((char *) "Verbose");
 26654  0061FC  0E7F               	movlw	high STR_303
 26655  0061FE  6E21               	movwf	?_putsUSART+1,c
 26656  006200  0E08               	movlw	low STR_303
 26657  006202  6E20               	movwf	?_putsUSART,c
 26658  006204  ECDF  F032         	call	_putsUSART	;wreg free
 26659                           
 26660                           ;main.c: 3323: } else if (1 == mode) {
 26661  006208  D023               	goto	l1378
 26662  00620A                     l15432:
 26663                           
 26664                           ; BSR set to: 0
 26665  00620A  05F1               	decf	_mode& (0+255),w,b
 26666  00620C  E107               	bnz	l15436
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;main.c: 3324: putsUSART((char *) "VSCP Driver");
 26670  00620E  0E7E               	movlw	high STR_304
 26671  006210  6E21               	movwf	?_putsUSART+1,c
 26672  006212  0E32               	movlw	low STR_304
 26673  006214  6E20               	movwf	?_putsUSART,c
 26674  006216  ECDF  F032         	call	_putsUSART	;wreg free
 26675                           
 26676                           ;main.c: 3325: } else if (2 == mode) {
 26677  00621A  D01A               	goto	l1378
 26678  00621C                     l15436:
 26679                           
 26680                           ; BSR set to: 0
 26681  00621C  51F1               	movf	_mode& (0+255),w,b
 26682  00621E  0A02               	xorlw	2
 26683  006220  E107               	bnz	l15440
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;main.c: 3326: putsUSART((char *) "SL Driver");
 26687  006222  0E7E               	movlw	high STR_305
 26688  006224  6E21               	movwf	?_putsUSART+1,c
 26689  006226  0E92               	movlw	low STR_305
 26690  006228  6E20               	movwf	?_putsUSART,c
 26691  00622A  ECDF  F032         	call	_putsUSART	;wreg free
 26692                           
 26693                           ;main.c: 3327: } else if (3 == mode) {
 26694  00622E  D010               	goto	l1378
 26695  006230                     l15440:
 26696                           
 26697                           ; BSR set to: 0
 26698  006230  51F1               	movf	_mode& (0+255),w,b
 26699  006232  0A03               	xorlw	3
 26700  006234  E107               	bnz	l15444
 26701                           
 26702                           ; BSR set to: 0
 26703                           ;main.c: 3328: putsUSART((char *) "VSCP Node");
 26704  006236  0E7E               	movlw	high STR_306
 26705  006238  6E21               	movwf	?_putsUSART+1,c
 26706  00623A  0E88               	movlw	low STR_306
 26707  00623C  6E20               	movwf	?_putsUSART,c
 26708  00623E  ECDF  F032         	call	_putsUSART	;wreg free
 26709                           
 26710                           ;main.c: 3329: } else {
 26711  006242  D006               	goto	l1378
 26712  006244                     l15444:
 26713                           
 26714                           ; BSR set to: 0
 26715                           ;main.c: 3330: putsUSART((char *) "Unknown (Verbose used)");
 26716  006244  0E7C               	movlw	high STR_307
 26717  006246  6E21               	movwf	?_putsUSART+1,c
 26718  006248  0E38               	movlw	low STR_307
 26719  00624A  6E20               	movwf	?_putsUSART,c
 26720  00624C  ECDF  F032         	call	_putsUSART	;wreg free
 26721  006250                     l1378:
 26722                           
 26723                           ;main.c: 3331: }
 26724                           ;main.c: 3332: putsUSART((char *) "\r\n");
 26725  006250  0E72               	movlw	high (STR_241+51)
 26726  006252  6E21               	movwf	?_putsUSART+1,c
 26727  006254  0EDA               	movlw	low (STR_241+51)
 26728  006256  6E20               	movwf	?_putsUSART,c
 26729  006258  EFDF  F032         	goto	_putsUSART	;wreg free
 26730  00625C                     __end_of_printMode:
 26731                           	opt stack 0
 26732                           tblptru	equ	0xFF8
 26733                           tblptrh	equ	0xFF7
 26734                           tblptrl	equ	0xFF6
 26735                           tablat	equ	0xFF5
 26736                           prodh	equ	0xFF4
 26737                           prodl	equ	0xFF3
 26738                           intcon	equ	0xFF2
 26739                           indf0	equ	0xFEF
 26740                           postinc0	equ	0xFEE
 26741                           fsr0h	equ	0xFEA
 26742                           fsr0l	equ	0xFE9
 26743                           wreg	equ	0xFE8
 26744                           indf1	equ	0xFE7
 26745                           postinc1	equ	0xFE6
 26746                           postdec1	equ	0xFE5
 26747                           fsr1h	equ	0xFE2
 26748                           fsr1l	equ	0xFE1
 26749                           indf2	equ	0xFDF
 26750                           postinc2	equ	0xFDE
 26751                           postdec2	equ	0xFDD
 26752                           plusw2	equ	0xFDB
 26753                           fsr2h	equ	0xFDA
 26754                           fsr2l	equ	0xFD9
 26755                           status	equ	0xFD8
 26756                           
 26757 ;; *************** function _putsUSART *****************
 26758 ;; Defined at:
 26759 ;;		line 15 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/USART/uputs.c"
 26760 ;; Parameters:    Size  Location     Type
 26761 ;;  data            2   31[COMRAM] PTR unsigned char 
 26762 ;;		 -> STR_308(3), STR_307(23), STR_306(10), STR_305(10), 
 26763 ;;		 -> STR_304(12), STR_303(8), STR_302(7), STR_301(3), 
 26764 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_300(10), STR_299(3), STR_296(20), 
 26765 ;;		 -> STR_295(3), STR_294(14), STR_293(3), STR_289(8), 
 26766 ;;		 -> STR_288(17), STR_287(3), STR_286(67), STR_285(3), 
 26767 ;;		 -> STR_284(27), STR_283(3), STR_282(67), STR_281(52), 
 26768 ;;		 -> STR_280(39), STR_279(62), STR_278(55), STR_277(49), 
 26769 ;;		 -> STR_276(67), STR_275(47), STR_274(47), STR_273(34), 
 26770 ;;		 -> STR_272(71), STR_271(20), STR_270(78), STR_269(24), 
 26771 ;;		 -> STR_268(77), STR_267(74), STR_266(76), STR_265(47), 
 26772 ;;		 -> STR_264(40), STR_263(39), STR_262(33), STR_261(23), 
 26773 ;;		 -> STR_260(56), STR_259(24), STR_258(44), STR_257(50), 
 26774 ;;		 -> STR_256(31), STR_255(50), STR_254(51), STR_253(46), 
 26775 ;;		 -> STR_252(44), STR_251(27), STR_250(39), STR_249(39), 
 26776 ;;		 -> STR_248(57), STR_247(55), STR_246(3), STR_243(24), 
 26777 ;;		 -> STR_242(58), STR_241(54), STR_240(59), STR_239(3), 
 26778 ;;		 -> STR_236(25), STR_235(52), STR_234(3), STR_231(24), 
 26779 ;;		 -> STR_230(3), STR_227(24), STR_226(3), STR_223(24), 
 26780 ;;		 -> STR_222(3), STR_219(23), STR_218(3), STR_215(21), 
 26781 ;;		 -> STR_214(3), STR_211(22), STR_210(3), STR_207(17), 
 26782 ;;		 -> STR_206(3), STR_203(18), STR_202(4), STR_201(11), 
 26783 ;;		 -> STR_200(2), STR_197(7), STR_194(7), STR_191(9), 
 26784 ;;		 -> STR_188(7), STR_185(8), STR_182(12), STR_179(7), 
 26785 ;;		 -> STR_178(2), STR_177(2), STR_176(6), STR_175(8), 
 26786 ;;		 -> STR_174(8), STR_173(20), STR_172(27), STR_171(6), 
 26787 ;;		 -> STR_170(33), STR_167(29), STR_166(34), STR_164(46), 
 26788 ;;		 -> STR_163(22), STR_161(21), STR_158(41), STR_157(23), 
 26789 ;;		 -> STR_155(22), STR_152(26), STR_150(32), STR_148(28), 
 26790 ;;		 -> STR_139(6), STR_137(40), STR_135(44), STR_132(6), 
 26791 ;;		 -> STR_131(39), STR_129(36), STR_127(37), STR_125(40), 
 26792 ;;		 -> STR_123(37), STR_122(50), STR_119(6), STR_116(41), 
 26793 ;;		 -> STR_114(38), STR_112(39), STR_110(42), STR_108(39), 
 26794 ;;		 -> STR_107(66), STR_104(6), STR_103(27), STR_102(3), 
 26795 ;;		 -> STR_99(20), STR_98(52), STR_94(8), STR_93(36), 
 26796 ;;		 -> STR_90(8), STR_89(38), STR_88(24), STR_86(33), 
 26797 ;;		 -> STR_84(24), STR_82(52), STR_80(54), STR_79(6), 
 26798 ;;		 -> STR_78(3), STR_73(25), STR_70(17), STR_69(3), 
 26799 ;;		 -> STR_68(4), STR_67(3), STR_64(4), STR_59(15), 
 26800 ;;		 -> wrkbuf(80), STR_56(14), STR_54(33), STR_52(24), 
 26801 ;;		 -> STR_50(52), STR_48(6), STR_46(6), STR_44(6), 
 26802 ;;		 -> STR_42(6), STR_40(18), STR_39(6), STR_37(33), 
 26803 ;;		 -> STR_36(6), STR_28(24), STR_27(18), STR_26(20), 
 26804 ;;		 -> STR_25(25), STR_24(22), STR_23(19), STR_22(20), 
 26805 ;;		 -> STR_21(20), STR_19(6), STR_17(6), STR_15(6), 
 26806 ;;		 -> STR_13(6), STR_11(6), STR_9(6), STR_7(31), 
 26807 ;;		 -> STR_5(29), STR_4(55), STR_3(35), STR_2(58), 
 26808 ;;		 -> STR_1(37), 
 26809 ;; Auto vars:     Size  Location     Type
 26810 ;;		None
 26811 ;; Return value:  Size  Location     Type
 26812 ;;		None               void
 26813 ;; Registers used:
 26814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 26815 ;; Tracked objects:
 26816 ;;		On entry : 0/0
 26817 ;;		On exit  : 0/0
 26818 ;;		Unchanged: 0/0
 26819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26820 ;;      Params:         2       0       0       0       0       0       0
 26821 ;;      Locals:         0       0       0       0       0       0       0
 26822 ;;      Temps:          2       0       0       0       0       0       0
 26823 ;;      Totals:         4       0       0       0       0       0       0
 26824 ;;Total ram usage:        4 bytes
 26825 ;; Hardware stack levels used:    1
 26826 ;; Hardware stack levels required when called:    4
 26827 ;; This function calls:
 26828 ;;		_WriteUSART
 26829 ;; This function is called by:
 26830 ;;		_main
 26831 ;;		_doModeVerbose
 26832 ;;		_doModeSLCAN
 26833 ;;		_receivePrintEventVerbose
 26834 ;;		_receiveSendEventSLCAN
 26835 ;;		_printStatistics
 26836 ;;		_printErrors
 26837 ;;		_printHelp
 26838 ;;		_findNodes
 26839 ;;		_printGUID
 26840 ;;		_printMDF
 26841 ;;		_printNodeFirmwareVersion
 26842 ;;		_printFirmwareVersion
 26843 ;;		_printMode
 26844 ;; This function uses a non-reentrant model
 26845 ;;
 26846                           
 26847                           	psect	text70
 26848  0065BE                     __ptext70:
 26849                           	opt stack 0
 26850  0065BE                     _putsUSART:
 26851                           	opt stack 24
 26852  0065BE                     l2054:
 26853  0065BE  A2AC               	btfss	4012,1,c	;volatile
 26854  0065C0  D7FE               	goto	l2054
 26855  0065C2  5020               	movf	putsUSART@data,w,c
 26856  0065C4  6EF6               	movwf	tblptrl,c
 26857  0065C6  6EE9               	movwf	fsr0l,c
 26858  0065C8  0E05               	movlw	(high __ramtop+-1)
 26859  0065CA  6EEA               	movwf	fsr0h,c
 26860  0065CC  5021               	movf	putsUSART@data+1,w,c
 26861  0065CE  64EA               	cpfsgt	fsr0h,c
 26862  0065D0  D003               	bra	u19657
 26863  0065D2  6EEA               	movwf	fsr0h,c
 26864  0065D4  50EF               	movf	indf0,w,c
 26865  0065D6  D003               	bra	u19650
 26866  0065D8                     u19657:
 26867  0065D8  6EF7               	movwf	tblptrh,c
 26868  0065DA  0008               	tblrd		*
 26869  0065DC  50F5               	movf	tablat,w,c
 26870  0065DE                     u19650:
 26871  0065DE  EC8B  F035         	call	_WriteUSART
 26872  0065E2  5020               	movf	putsUSART@data,w,c
 26873  0065E4  6E22               	movwf	??_putsUSART& (0+255),c
 26874  0065E6  5021               	movf	putsUSART@data+1,w,c
 26875  0065E8  6E23               	movwf	(??_putsUSART+1)& (0+255),c
 26876  0065EA  4A20               	infsnz	putsUSART@data,f,c
 26877  0065EC  2A21               	incf	putsUSART@data+1,f,c
 26878  0065EE  5022               	movf	??_putsUSART,w,c
 26879  0065F0  6EF6               	movwf	tblptrl,c
 26880  0065F2  6EE9               	movwf	fsr0l,c
 26881  0065F4  0E05               	movlw	(high __ramtop+-1)
 26882  0065F6  6EEA               	movwf	fsr0h,c
 26883  0065F8  5023               	movf	??_putsUSART+1,w,c
 26884  0065FA  64EA               	cpfsgt	fsr0h,c
 26885  0065FC  D003               	bra	u19667
 26886  0065FE  6EEA               	movwf	fsr0h,c
 26887  006600  50EF               	movf	indf0,w,c
 26888  006602  D003               	bra	u19660
 26889  006604                     u19667:
 26890  006604  6EF7               	movwf	tblptrh,c
 26891  006606  0008               	tblrd		*
 26892  006608  50F5               	movf	tablat,w,c
 26893  00660A                     u19660:
 26894  00660A  0900               	iorlw	0
 26895  00660C  B4D8               	btfsc	status,2,c
 26896  00660E  0012               	return	
 26897  006610  D7D6               	goto	l2054
 26898  006612                     __end_of_putsUSART:
 26899                           	opt stack 0
 26900                           tblptru	equ	0xFF8
 26901                           tblptrh	equ	0xFF7
 26902                           tblptrl	equ	0xFF6
 26903                           tablat	equ	0xFF5
 26904                           prodh	equ	0xFF4
 26905                           prodl	equ	0xFF3
 26906                           intcon	equ	0xFF2
 26907                           indf0	equ	0xFEF
 26908                           postinc0	equ	0xFEE
 26909                           fsr0h	equ	0xFEA
 26910                           fsr0l	equ	0xFE9
 26911                           wreg	equ	0xFE8
 26912                           indf1	equ	0xFE7
 26913                           postinc1	equ	0xFE6
 26914                           postdec1	equ	0xFE5
 26915                           fsr1h	equ	0xFE2
 26916                           fsr1l	equ	0xFE1
 26917                           indf2	equ	0xFDF
 26918                           postinc2	equ	0xFDE
 26919                           postdec2	equ	0xFDD
 26920                           plusw2	equ	0xFDB
 26921                           fsr2h	equ	0xFDA
 26922                           fsr2l	equ	0xFD9
 26923                           status	equ	0xFD8
 26924                           
 26925 ;; *************** function _WriteUSART *****************
 26926 ;; Defined at:
 26927 ;;		line 14 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/USART/uwrite.c"
 26928 ;; Parameters:    Size  Location     Type
 26929 ;;  data            1    wreg     unsigned char 
 26930 ;; Auto vars:     Size  Location     Type
 26931 ;;  data            1   30[COMRAM] unsigned char 
 26932 ;; Return value:  Size  Location     Type
 26933 ;;		None               void
 26934 ;; Registers used:
 26935 ;;		wreg
 26936 ;; Tracked objects:
 26937 ;;		On entry : 0/0
 26938 ;;		On exit  : 0/0
 26939 ;;		Unchanged: 0/0
 26940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26941 ;;      Params:         0       0       0       0       0       0       0
 26942 ;;      Locals:         1       0       0       0       0       0       0
 26943 ;;      Temps:          0       0       0       0       0       0       0
 26944 ;;      Totals:         1       0       0       0       0       0       0
 26945 ;;Total ram usage:        1 bytes
 26946 ;; Hardware stack levels used:    1
 26947 ;; Hardware stack levels required when called:    3
 26948 ;; This function calls:
 26949 ;;		Nothing
 26950 ;; This function is called by:
 26951 ;;		_doModeVerbose
 26952 ;;		_sendEscapedUartData
 26953 ;;		_sendVSCPDriverErrorFrame
 26954 ;;		_sendVSCPDriverAck
 26955 ;;		_sendVSCPDriverNack
 26956 ;;		_sendVSCPDriverCommandReply
 26957 ;;		_receiveSendEventCANAL
 26958 ;;		_receiveSendMultiEventCANAL
 26959 ;;		_sendVSCPModeCapabilities
 26960 ;;		_receiveSendEventSLCAN
 26961 ;;		_printBinary
 26962 ;;		_findNodes
 26963 ;;		_printFirmwareVersion
 26964 ;;		_putsUSART
 26965 ;; This function uses a non-reentrant model
 26966 ;;
 26967                           
 26968                           	psect	text71
 26969  006B16                     __ptext71:
 26970                           	opt stack 0
 26971  006B16                     _WriteUSART:
 26972                           	opt stack 25
 26973                           
 26974                           ;incstack = 0
 26975                           ;incstack = 0
 26976                           ;WriteUSART@data stored from wreg
 26977  006B16  CFE8 F01F          	movff	wreg,WriteUSART@data
 26978  006B1A  ACAC               	btfss	4012,6,c	;volatile
 26979  006B1C  D003               	goto	l17216
 26980  006B1E  90AC               	bcf	4012,0,c	;volatile
 26981  006B20  B22E               	btfsc	_USART_Status,1,c
 26982  006B22  80AC               	bsf	4012,0,c	;volatile
 26983  006B24                     l17216:
 26984  006B24  C01F  FFAD         	movff	WriteUSART@data,4013	;volatile
 26985  006B28  0012               	return	
 26986  006B2A                     __end_of_WriteUSART:
 26987                           	opt stack 0
 26988                           tblptru	equ	0xFF8
 26989                           tblptrh	equ	0xFF7
 26990                           tblptrl	equ	0xFF6
 26991                           tablat	equ	0xFF5
 26992                           prodh	equ	0xFF4
 26993                           prodl	equ	0xFF3
 26994                           intcon	equ	0xFF2
 26995                           indf0	equ	0xFEF
 26996                           postinc0	equ	0xFEE
 26997                           fsr0h	equ	0xFEA
 26998                           fsr0l	equ	0xFE9
 26999                           wreg	equ	0xFE8
 27000                           indf1	equ	0xFE7
 27001                           postinc1	equ	0xFE6
 27002                           postdec1	equ	0xFE5
 27003                           fsr1h	equ	0xFE2
 27004                           fsr1l	equ	0xFE1
 27005                           indf2	equ	0xFDF
 27006                           postinc2	equ	0xFDE
 27007                           postdec2	equ	0xFDD
 27008                           plusw2	equ	0xFDB
 27009                           fsr2h	equ	0xFDA
 27010                           fsr2l	equ	0xFD9
 27011                           status	equ	0xFD8
 27012                           
 27013 ;; *************** function _init *****************
 27014 ;; Defined at:
 27015 ;;		line 453 in file "main.c"
 27016 ;; Parameters:    Size  Location     Type
 27017 ;;		None
 27018 ;; Auto vars:     Size  Location     Type
 27019 ;;		None
 27020 ;; Return value:  Size  Location     Type
 27021 ;;		None               void
 27022 ;; Registers used:
 27023 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27024 ;; Tracked objects:
 27025 ;;		On entry : 0/0
 27026 ;;		On exit  : 0/0
 27027 ;;		Unchanged: 0/0
 27028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27029 ;;      Params:         0       0       0       0       0       0       0
 27030 ;;      Locals:         0       0       0       0       0       0       0
 27031 ;;      Temps:          0       0       0       0       0       0       0
 27032 ;;      Totals:         0       0       0       0       0       0       0
 27033 ;;Total ram usage:        0 bytes
 27034 ;; Hardware stack levels used:    1
 27035 ;; Hardware stack levels required when called:    6
 27036 ;; This function calls:
 27037 ;;		_WriteTimer0
 27038 ;;		_init_app_ram
 27039 ;;		_OpenUSART
 27040 ;;		_OpenTimer0
 27041 ;;		_OpenTimer3
 27042 ;;		_WriteTimer3
 27043 ;;		_ECANInitialize
 27044 ;; This function is called by:
 27045 ;;		_main
 27046 ;; This function uses a non-reentrant model
 27047 ;;
 27048                           
 27049                           	psect	text72
 27050  006452                     __ptext72:
 27051                           	opt stack 0
 27052  006452                     _init:
 27053                           	opt stack 24
 27054                           
 27055                           ;main.c: 455: init_app_ram();
 27056                           
 27057                           ;incstack = 0
 27058                           ;incstack = 0
 27059  006452  EC84  F01A         	call	_init_app_ram	;wreg free
 27060                           
 27061                           ;main.c: 458: OSCCONbits.IRCF0 = 1;
 27062  006456  88D3               	bsf	4051,4,c	;volatile
 27063                           
 27064                           ;main.c: 459: OSCCONbits.IRCF1 = 1;
 27065  006458  8AD3               	bsf	4051,5,c	;volatile
 27066                           
 27067                           ;main.c: 460: OSCCONbits.IRCF2 = 1;
 27068  00645A  8CD3               	bsf	4051,6,c	;volatile
 27069                           
 27070                           ;main.c: 461: OSCTUNEbits.PLLEN = 1;
 27071  00645C  8C9B               	bsf	3995,6,c	;volatile
 27072                           
 27073                           ;main.c: 463: TRISBbits.RB2 = 0;
 27074  00645E  9493               	bcf	3987,2,c	;volatile
 27075                           
 27076                           ;main.c: 464: TRISBbits.RB3 = 1;
 27077  006460  8693               	bsf	3987,3,c	;volatile
 27078                           
 27079                           ;main.c: 466: TRISCbits.RC1 = 0;
 27080  006462  9294               	bcf	3988,1,c	;volatile
 27081                           
 27082                           ;main.c: 467: TRISCbits.RC4 = 0;
 27083  006464  9894               	bcf	3988,4,c	;volatile
 27084                           
 27085                           ;main.c: 468: TRISCbits.RC5 = 1;
 27086  006466  8A94               	bsf	3988,5,c	;volatile
 27087                           
 27088                           ;main.c: 469: TRISCbits.RC6 = 0;
 27089  006468  9C94               	bcf	3988,6,c	;volatile
 27090                           
 27091                           ;main.c: 470: TRISCbits.RC7 = 1;
 27092  00646A  8E94               	bsf	3988,7,c	;volatile
 27093                           
 27094                           ;main.c: 472: PORTCbits.RC4 = 1;
 27095  00646C  8882               	bsf	3970,4,c	;volatile
 27096                           
 27097                           ;main.c: 476: OpenUSART( 0b01111111 &
 27098                           ;main.c: 477: 0b11111111 &
 27099                           ;main.c: 478: 0b11111110 &
 27100                           ;main.c: 479: 0b11111101 &
 27101                           ;main.c: 480: 0b11111111 &
 27102                           ;main.c: 481: 0b11111111,
 27103                           ;main.c: 482: 21 );
 27104  00646E  6A20               	clrf	?_OpenUSART+1,c
 27105  006470  0E15               	movlw	21
 27106  006472  6E1F               	movwf	?_OpenUSART,c
 27107  006474  0E7C               	movlw	124
 27108  006476  EC86  F032         	call	_OpenUSART
 27109                           
 27110                           ;main.c: 486: RCIF = 0;
 27111  00647A  9A9E               	bcf	3998,5,c	;volatile
 27112                           
 27113                           ;main.c: 487: RCIP = 0;
 27114  00647C  9A9F               	bcf	3999,5,c	;volatile
 27115                           
 27116                           ;main.c: 488: RCIE = 1;
 27117  00647E  8A9D               	bsf	3997,5,c	;volatile
 27118                           
 27119                           ;main.c: 489: PEIE = 1;
 27120  006480  8CF2               	bsf	intcon,6,c	;volatile
 27121                           
 27122                           ;main.c: 492: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 27123  006482  0E92               	movlw	146
 27124  006484  EC56  F035         	call	_OpenTimer0
 27125                           
 27126                           ;main.c: 493: WriteTimer0(0xfb1d);
 27127  006488  0EFB               	movlw	251
 27128  00648A  6E20               	movwf	?_WriteTimer0+1,c
 27129  00648C  0E1D               	movlw	29
 27130  00648E  6E1F               	movwf	?_WriteTimer0,c
 27131  006490  ECB0  F035         	call	_WriteTimer0	;wreg free
 27132                           
 27133                           ;main.c: 496: OpenTimer3( 0b11111101 & 0b11001111 & 0b11111111 & 0b11111111 & 0b01111111
      +                           );
 27134  006494  0E4D               	movlw	77
 27135  006496  EC24  F035         	call	_OpenTimer3
 27136                           
 27137                           ;main.c: 497: WriteTimer3( 0x0000 );
 27138  00649A  0E00               	movlw	0
 27139  00649C  6A20               	clrf	?_WriteTimer3+1,c
 27140  00649E  6A1F               	clrf	?_WriteTimer3,c
 27141  0064A0  EC9E  F035         	call	_WriteTimer3	;wreg free
 27142                           
 27143                           ;main.c: 500: ECANInitialize();
 27144  0064A4  ECC4  F02F         	call	_ECANInitialize	;wreg free
 27145                           
 27146                           ;main.c: 524: RXBnIE = 1;
 27147  0064A8  82A3               	bsf	4003,1,c	;volatile
 27148                           
 27149                           ;main.c: 525: ERRIE = 1;
 27150  0064AA  8AA3               	bsf	4003,5,c	;volatile
 27151                           
 27152                           ;main.c: 527: (INTCONbits.GIE = 1);
 27153  0064AC  8EF2               	bsf	intcon,7,c	;volatile
 27154  0064AE  0012               	return	
 27155  0064B0                     __end_of_init:
 27156                           	opt stack 0
 27157                           tblptru	equ	0xFF8
 27158                           tblptrh	equ	0xFF7
 27159                           tblptrl	equ	0xFF6
 27160                           tablat	equ	0xFF5
 27161                           prodh	equ	0xFF4
 27162                           prodl	equ	0xFF3
 27163                           intcon	equ	0xFF2
 27164                           indf0	equ	0xFEF
 27165                           postinc0	equ	0xFEE
 27166                           fsr0h	equ	0xFEA
 27167                           fsr0l	equ	0xFE9
 27168                           wreg	equ	0xFE8
 27169                           indf1	equ	0xFE7
 27170                           postinc1	equ	0xFE6
 27171                           postdec1	equ	0xFE5
 27172                           fsr1h	equ	0xFE2
 27173                           fsr1l	equ	0xFE1
 27174                           indf2	equ	0xFDF
 27175                           postinc2	equ	0xFDE
 27176                           postdec2	equ	0xFDD
 27177                           plusw2	equ	0xFDB
 27178                           fsr2h	equ	0xFDA
 27179                           fsr2l	equ	0xFD9
 27180                           status	equ	0xFD8
 27181                           
 27182 ;; *************** function _ECANInitialize *****************
 27183 ;; Defined at:
 27184 ;;		line 168 in file "ECAN.c"
 27185 ;; Parameters:    Size  Location     Type
 27186 ;;		None
 27187 ;; Auto vars:     Size  Location     Type
 27188 ;;		None
 27189 ;; Return value:  Size  Location     Type
 27190 ;;		None               void
 27191 ;; Registers used:
 27192 ;;		wreg, status,2, status,0, cstack
 27193 ;; Tracked objects:
 27194 ;;		On entry : 0/0
 27195 ;;		On exit  : 0/0
 27196 ;;		Unchanged: 0/0
 27197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27198 ;;      Params:         0       0       0       0       0       0       0
 27199 ;;      Locals:         0       0       0       0       0       0       0
 27200 ;;      Temps:          0       0       0       0       0       0       0
 27201 ;;      Totals:         0       0       0       0       0       0       0
 27202 ;;Total ram usage:        0 bytes
 27203 ;; Hardware stack levels used:    1
 27204 ;; Hardware stack levels required when called:    4
 27205 ;; This function calls:
 27206 ;;		_ECANSetOperationMode
 27207 ;; This function is called by:
 27208 ;;		_init
 27209 ;; This function uses a non-reentrant model
 27210 ;;
 27211                           
 27212                           	psect	text73
 27213  005F88                     __ptext73:
 27214                           	opt stack 0
 27215  005F88                     _ECANInitialize:
 27216                           	opt stack 25
 27217                           
 27218                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 27219                           
 27220                           ;incstack = 0
 27221                           ;incstack = 0
 27222  005F88  0E80               	movlw	128
 27223  005F8A  EC74  F035         	call	_ECANSetOperationMode
 27224                           
 27225                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 27226  005F8E  0E09               	movlw	9
 27227  005F90  6E70               	movwf	3952,c	;volatile
 27228                           
 27229                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 27230  005F92  0EFC               	movlw	252
 27231  005F94  6E71               	movwf	3953,c	;volatile
 27232                           
 27233                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 27234                           ;ECAN.c: 181: (0 << 6) |
 27235                           ;ECAN.c: 182: (2-1);
 27236  005F96  0E01               	movlw	1
 27237  005F98  6E72               	movwf	3954,c	;volatile
 27238                           
 27239                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 27240  005F9A  0E20               	movlw	32
 27241  005F9C  6E73               	movwf	3955,c	;volatile
 27242                           
 27243                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 27244  005F9E  8E77               	bsf	3959,7,c	;volatile
 27245                           
 27246                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 27247  005FA0  9C77               	bcf	3959,6,c	;volatile
 27248                           
 27249                           ;ECAN.c: 205: RXB0CON = 0;
 27250  005FA2  6A60               	clrf	3936,c	;volatile
 27251                           
 27252                           ;ECAN.c: 211: RXB1CON = 0;
 27253  005FA4  010F               	movlb	15	; () banked
 27254  005FA6  6B50               	clrf	80,b	;volatile
 27255                           
 27256                           ; BSR set to: 15
 27257                           ;ECAN.c: 221: B0CON = 0;
 27258  005FA8  010E               	movlb	14	; () banked
 27259  005FAA  6B20               	clrf	32,b	;volatile
 27260                           
 27261                           ; BSR set to: 14
 27262                           ;ECAN.c: 231: B1CON = 0;
 27263  005FAC  6B30               	clrf	48,b	;volatile
 27264                           
 27265                           ; BSR set to: 14
 27266                           ;ECAN.c: 241: B2CON = 0;
 27267  005FAE  6B40               	clrf	64,b	;volatile
 27268                           
 27269                           ; BSR set to: 14
 27270                           ;ECAN.c: 251: B3CON = 0;
 27271  005FB0  6B50               	clrf	80,b	;volatile
 27272                           
 27273                           ; BSR set to: 14
 27274                           ;ECAN.c: 261: B4CON = 0;
 27275  005FB2  6B60               	clrf	96,b	;volatile
 27276                           
 27277                           ; BSR set to: 14
 27278                           ;ECAN.c: 271: B5CON = 0;
 27279  005FB4  6B70               	clrf	112,b	;volatile
 27280                           
 27281                           ; BSR set to: 14
 27282                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 27283  005FB6  010D               	movlb	13	; () banked
 27284  005FB8  6BF8               	clrf	248,b	;volatile
 27285                           
 27286                           ; BSR set to: 13
 27287                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 27288  005FBA  010F               	movlb	15	; () banked
 27289  005FBC  6B00               	clrf	0,b	;volatile
 27290                           
 27291                           ; BSR set to: 15
 27292  005FBE  0E08               	movlw	8
 27293  005FC0  6F01               	movwf	1,b	;volatile
 27294                           
 27295                           ; BSR set to: 15
 27296  005FC2  6B02               	clrf	2,b	;volatile
 27297                           
 27298                           ; BSR set to: 15
 27299  005FC4  6B03               	clrf	3,b	;volatile
 27300                           
 27301                           ; BSR set to: 15
 27302                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 27303  005FC6  0E01               	movlw	1
 27304  005FC8  010D               	movlb	13	; () banked
 27305  005FCA  6FD4               	movwf	212,b	;volatile
 27306                           
 27307                           ; BSR set to: 13
 27308                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 27309  005FCC  6BD5               	clrf	213,b	;volatile
 27310                           
 27311                           ; BSR set to: 13
 27312                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 27313  005FCE  6BE0               	clrf	224,b	;volatile
 27314                           
 27315                           ; BSR set to: 13
 27316                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 27317  005FD0  0E11               	movlw	17
 27318  005FD2  6FE1               	movwf	225,b	;volatile
 27319                           
 27320                           ; BSR set to: 13
 27321                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 27322  005FD4  6FE2               	movwf	226,b	;volatile
 27323                           
 27324                           ; BSR set to: 13
 27325                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 27326  005FD6  6BE3               	clrf	227,b	;volatile
 27327                           
 27328                           ; BSR set to: 13
 27329                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 27330  005FD8  6BE4               	clrf	228,b	;volatile
 27331                           
 27332                           ; BSR set to: 13
 27333                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 27334  005FDA  6BE5               	clrf	229,b	;volatile
 27335                           
 27336                           ; BSR set to: 13
 27337                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 27338  005FDC  6BE6               	clrf	230,b	;volatile
 27339                           
 27340                           ; BSR set to: 13
 27341                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 27342  005FDE  6BE7               	clrf	231,b	;volatile
 27343                           
 27344                           ; BSR set to: 13
 27345                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 27346  005FE0  0E54               	movlw	84
 27347  005FE2  6FF0               	movwf	240,b	;volatile
 27348                           
 27349                           ; BSR set to: 13
 27350                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 27351  005FE4  0E05               	movlw	5
 27352  005FE6  6FF1               	movwf	241,b	;volatile
 27353                           
 27354                           ; BSR set to: 13
 27355                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 27356  005FE8  6BF2               	clrf	242,b	;volatile
 27357                           
 27358                           ; BSR set to: 13
 27359                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 27360  005FEA  6BF2               	clrf	242,b	;volatile
 27361                           
 27362                           ; BSR set to: 13
 27363                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 27364  005FEC  010F               	movlb	15	; () banked
 27365  005FEE  6B18               	clrf	24,b	;volatile
 27366                           
 27367                           ; BSR set to: 15
 27368  005FF0  6B19               	clrf	25,b	;volatile
 27369                           
 27370                           ; BSR set to: 15
 27371  005FF2  6B1A               	clrf	26,b	;volatile
 27372                           
 27373                           ; BSR set to: 15
 27374  005FF4  6B1B               	clrf	27,b	;volatile
 27375                           
 27376                           ; BSR set to: 15
 27377                           ;ECAN.c: 482: RXM0EXIDM = 1;
 27378  005FF6  8719               	bsf	25,3,b	;volatile
 27379                           
 27380                           ; BSR set to: 15
 27381                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 27382  005FF8  6B1C               	clrf	28,b	;volatile
 27383                           
 27384                           ; BSR set to: 15
 27385  005FFA  6B1D               	clrf	29,b	;volatile
 27386                           
 27387                           ; BSR set to: 15
 27388  005FFC  6B1E               	clrf	30,b	;volatile
 27389                           
 27390                           ; BSR set to: 15
 27391  005FFE  6B1F               	clrf	31,b	;volatile
 27392                           
 27393                           ; BSR set to: 15
 27394                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 27395  006000  871D               	bsf	29,3,b	;volatile
 27396                           
 27397                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 27398  006002  0E20               	movlw	32
 27399  006004  EF74  F035         	goto	_ECANSetOperationMode
 27400  006008                     __end_of_ECANInitialize:
 27401                           	opt stack 0
 27402                           tblptru	equ	0xFF8
 27403                           tblptrh	equ	0xFF7
 27404                           tblptrl	equ	0xFF6
 27405                           tablat	equ	0xFF5
 27406                           prodh	equ	0xFF4
 27407                           prodl	equ	0xFF3
 27408                           intcon	equ	0xFF2
 27409                           indf0	equ	0xFEF
 27410                           postinc0	equ	0xFEE
 27411                           fsr0h	equ	0xFEA
 27412                           fsr0l	equ	0xFE9
 27413                           wreg	equ	0xFE8
 27414                           indf1	equ	0xFE7
 27415                           postinc1	equ	0xFE6
 27416                           postdec1	equ	0xFE5
 27417                           fsr1h	equ	0xFE2
 27418                           fsr1l	equ	0xFE1
 27419                           indf2	equ	0xFDF
 27420                           postinc2	equ	0xFDE
 27421                           postdec2	equ	0xFDD
 27422                           plusw2	equ	0xFDB
 27423                           fsr2h	equ	0xFDA
 27424                           fsr2l	equ	0xFD9
 27425                           status	equ	0xFD8
 27426                           
 27427 ;; *************** function _WriteTimer3 *****************
 27428 ;; Defined at:
 27429 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t3write.c"
 27430 ;; Parameters:    Size  Location     Type
 27431 ;;  timer3          2   30[COMRAM] unsigned int 
 27432 ;; Auto vars:     Size  Location     Type
 27433 ;;  timer           2   32[COMRAM] struct Timers
 27434 ;; Return value:  Size  Location     Type
 27435 ;;		None               void
 27436 ;; Registers used:
 27437 ;;		None
 27438 ;; Tracked objects:
 27439 ;;		On entry : 0/0
 27440 ;;		On exit  : 0/0
 27441 ;;		Unchanged: 0/0
 27442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27443 ;;      Params:         2       0       0       0       0       0       0
 27444 ;;      Locals:         2       0       0       0       0       0       0
 27445 ;;      Temps:          0       0       0       0       0       0       0
 27446 ;;      Totals:         4       0       0       0       0       0       0
 27447 ;;Total ram usage:        4 bytes
 27448 ;; Hardware stack levels used:    1
 27449 ;; Hardware stack levels required when called:    3
 27450 ;; This function calls:
 27451 ;;		Nothing
 27452 ;; This function is called by:
 27453 ;;		_init
 27454 ;; This function uses a non-reentrant model
 27455 ;;
 27456                           
 27457                           	psect	text74
 27458  006B3C                     __ptext74:
 27459                           	opt stack 0
 27460  006B3C                     _WriteTimer3:
 27461                           	opt stack 26
 27462                           
 27463                           ;incstack = 0
 27464                           ;incstack = 0
 27465  006B3C  C01F  F021         	movff	WriteTimer3@timer3,WriteTimer3@timer
 27466  006B40  C020  F022         	movff	WriteTimer3@timer3+1,WriteTimer3@timer+1
 27467  006B44  C022  FFB3         	movff	WriteTimer3@timer+1,4019	;volatile
 27468  006B48  C021  FFB2         	movff	WriteTimer3@timer,4018	;volatile
 27469  006B4C  0012               	return	
 27470  006B4E                     __end_of_WriteTimer3:
 27471                           	opt stack 0
 27472                           tblptru	equ	0xFF8
 27473                           tblptrh	equ	0xFF7
 27474                           tblptrl	equ	0xFF6
 27475                           tablat	equ	0xFF5
 27476                           prodh	equ	0xFF4
 27477                           prodl	equ	0xFF3
 27478                           intcon	equ	0xFF2
 27479                           indf0	equ	0xFEF
 27480                           postinc0	equ	0xFEE
 27481                           fsr0h	equ	0xFEA
 27482                           fsr0l	equ	0xFE9
 27483                           wreg	equ	0xFE8
 27484                           indf1	equ	0xFE7
 27485                           postinc1	equ	0xFE6
 27486                           postdec1	equ	0xFE5
 27487                           fsr1h	equ	0xFE2
 27488                           fsr1l	equ	0xFE1
 27489                           indf2	equ	0xFDF
 27490                           postinc2	equ	0xFDE
 27491                           postdec2	equ	0xFDD
 27492                           plusw2	equ	0xFDB
 27493                           fsr2h	equ	0xFDA
 27494                           fsr2l	equ	0xFD9
 27495                           status	equ	0xFD8
 27496                           
 27497 ;; *************** function _OpenTimer3 *****************
 27498 ;; Defined at:
 27499 ;;		line 30 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t3open.c"
 27500 ;; Parameters:    Size  Location     Type
 27501 ;;  config          1    wreg     unsigned char 
 27502 ;; Auto vars:     Size  Location     Type
 27503 ;;  config          1   30[COMRAM] unsigned char 
 27504 ;; Return value:  Size  Location     Type
 27505 ;;		None               void
 27506 ;; Registers used:
 27507 ;;		wreg, status,2, status,0
 27508 ;; Tracked objects:
 27509 ;;		On entry : 0/0
 27510 ;;		On exit  : 0/0
 27511 ;;		Unchanged: 0/0
 27512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27513 ;;      Params:         0       0       0       0       0       0       0
 27514 ;;      Locals:         1       0       0       0       0       0       0
 27515 ;;      Temps:          0       0       0       0       0       0       0
 27516 ;;      Totals:         1       0       0       0       0       0       0
 27517 ;;Total ram usage:        1 bytes
 27518 ;; Hardware stack levels used:    1
 27519 ;; Hardware stack levels required when called:    3
 27520 ;; This function calls:
 27521 ;;		Nothing
 27522 ;; This function is called by:
 27523 ;;		_init
 27524 ;; This function uses a non-reentrant model
 27525 ;;
 27526                           
 27527                           	psect	text75
 27528  006A48                     __ptext75:
 27529                           	opt stack 0
 27530  006A48                     _OpenTimer3:
 27531                           	opt stack 26
 27532                           
 27533                           ;incstack = 0
 27534                           ;incstack = 0
 27535                           ;OpenTimer3@config stored from wreg
 27536  006A48  CFE8 F01F          	movff	wreg,OpenTimer3@config
 27537  006A4C  501F               	movf	OpenTimer3@config,w,c
 27538  006A4E  0B36               	andlw	54
 27539  006A50  6EB1               	movwf	4017,c	;volatile
 27540  006A52  6AB3               	clrf	4019,c	;volatile
 27541  006A54  6AB2               	clrf	4018,c	;volatile
 27542  006A56  92A1               	bcf	4001,1,c	;volatile
 27543  006A58  AE1F               	btfss	OpenTimer3@config,7,c
 27544  006A5A  D002               	goto	l1995
 27545  006A5C  82A0               	bsf	4000,1,c	;volatile
 27546  006A5E  D001               	goto	l1996
 27547  006A60                     l1995:
 27548  006A60  92A0               	bcf	4000,1,c	;volatile
 27549  006A62                     l1996:
 27550  006A62  A01F               	btfss	OpenTimer3@config,0,c
 27551  006A64  D002               	goto	l1997
 27552  006A66  8EB1               	bsf	4017,7,c	;volatile
 27553  006A68  D001               	goto	l1998
 27554  006A6A                     l1997:
 27555  006A6A  9EB1               	bcf	4017,7,c	;volatile
 27556  006A6C                     l1998:
 27557  006A6C  80B1               	bsf	4017,0,c	;volatile
 27558  006A6E  0012               	return	
 27559  006A70                     __end_of_OpenTimer3:
 27560                           	opt stack 0
 27561                           tblptru	equ	0xFF8
 27562                           tblptrh	equ	0xFF7
 27563                           tblptrl	equ	0xFF6
 27564                           tablat	equ	0xFF5
 27565                           prodh	equ	0xFF4
 27566                           prodl	equ	0xFF3
 27567                           intcon	equ	0xFF2
 27568                           indf0	equ	0xFEF
 27569                           postinc0	equ	0xFEE
 27570                           fsr0h	equ	0xFEA
 27571                           fsr0l	equ	0xFE9
 27572                           wreg	equ	0xFE8
 27573                           indf1	equ	0xFE7
 27574                           postinc1	equ	0xFE6
 27575                           postdec1	equ	0xFE5
 27576                           fsr1h	equ	0xFE2
 27577                           fsr1l	equ	0xFE1
 27578                           indf2	equ	0xFDF
 27579                           postinc2	equ	0xFDE
 27580                           postdec2	equ	0xFDD
 27581                           plusw2	equ	0xFDB
 27582                           fsr2h	equ	0xFDA
 27583                           fsr2l	equ	0xFD9
 27584                           status	equ	0xFD8
 27585                           
 27586 ;; *************** function _OpenTimer0 *****************
 27587 ;; Defined at:
 27588 ;;		line 19 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0open.c"
 27589 ;; Parameters:    Size  Location     Type
 27590 ;;  config          1    wreg     unsigned char 
 27591 ;; Auto vars:     Size  Location     Type
 27592 ;;  config          1   30[COMRAM] unsigned char 
 27593 ;; Return value:  Size  Location     Type
 27594 ;;		None               void
 27595 ;; Registers used:
 27596 ;;		wreg, status,2, status,0
 27597 ;; Tracked objects:
 27598 ;;		On entry : 0/0
 27599 ;;		On exit  : 0/0
 27600 ;;		Unchanged: 0/0
 27601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27602 ;;      Params:         0       0       0       0       0       0       0
 27603 ;;      Locals:         1       0       0       0       0       0       0
 27604 ;;      Temps:          0       0       0       0       0       0       0
 27605 ;;      Totals:         1       0       0       0       0       0       0
 27606 ;;Total ram usage:        1 bytes
 27607 ;; Hardware stack levels used:    1
 27608 ;; Hardware stack levels required when called:    3
 27609 ;; This function calls:
 27610 ;;		Nothing
 27611 ;; This function is called by:
 27612 ;;		_init
 27613 ;; This function uses a non-reentrant model
 27614 ;;
 27615                           
 27616                           	psect	text76
 27617  006AAC                     __ptext76:
 27618                           	opt stack 0
 27619  006AAC                     _OpenTimer0:
 27620                           	opt stack 26
 27621                           
 27622                           ;incstack = 0
 27623                           ;incstack = 0
 27624                           ;OpenTimer0@config stored from wreg
 27625  006AAC  CFE8 F01F          	movff	wreg,OpenTimer0@config
 27626  006AB0  501F               	movf	OpenTimer0@config,w,c
 27627  006AB2  0B7F               	andlw	127
 27628  006AB4  6ED5               	movwf	4053,c	;volatile
 27629  006AB6  6AD7               	clrf	4055,c	;volatile
 27630  006AB8  6AD6               	clrf	4054,c	;volatile
 27631  006ABA  94F2               	bcf	intcon,2,c	;volatile
 27632  006ABC  AE1F               	btfss	OpenTimer0@config,7,c
 27633  006ABE  D002               	goto	l1971
 27634  006AC0  8AF2               	bsf	intcon,5,c	;volatile
 27635  006AC2  D001               	goto	l1972
 27636  006AC4                     l1971:
 27637  006AC4  9AF2               	bcf	intcon,5,c	;volatile
 27638  006AC6                     l1972:
 27639  006AC6  8ED5               	bsf	4053,7,c	;volatile
 27640  006AC8  0012               	return	
 27641  006ACA                     __end_of_OpenTimer0:
 27642                           	opt stack 0
 27643                           tblptru	equ	0xFF8
 27644                           tblptrh	equ	0xFF7
 27645                           tblptrl	equ	0xFF6
 27646                           tablat	equ	0xFF5
 27647                           prodh	equ	0xFF4
 27648                           prodl	equ	0xFF3
 27649                           intcon	equ	0xFF2
 27650                           indf0	equ	0xFEF
 27651                           postinc0	equ	0xFEE
 27652                           fsr0h	equ	0xFEA
 27653                           fsr0l	equ	0xFE9
 27654                           wreg	equ	0xFE8
 27655                           indf1	equ	0xFE7
 27656                           postinc1	equ	0xFE6
 27657                           postdec1	equ	0xFE5
 27658                           fsr1h	equ	0xFE2
 27659                           fsr1l	equ	0xFE1
 27660                           indf2	equ	0xFDF
 27661                           postinc2	equ	0xFDE
 27662                           postdec2	equ	0xFDD
 27663                           plusw2	equ	0xFDB
 27664                           fsr2h	equ	0xFDA
 27665                           fsr2l	equ	0xFD9
 27666                           status	equ	0xFD8
 27667                           
 27668 ;; *************** function _OpenUSART *****************
 27669 ;; Defined at:
 27670 ;;		line 74 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/USART/uopen.c"
 27671 ;; Parameters:    Size  Location     Type
 27672 ;;  config          1    wreg     unsigned char 
 27673 ;;  spbrg           2   30[COMRAM] unsigned int 
 27674 ;; Auto vars:     Size  Location     Type
 27675 ;;  config          1   32[COMRAM] unsigned char 
 27676 ;; Return value:  Size  Location     Type
 27677 ;;		None               void
 27678 ;; Registers used:
 27679 ;;		wreg, status,2
 27680 ;; Tracked objects:
 27681 ;;		On entry : 0/1
 27682 ;;		On exit  : 0/0
 27683 ;;		Unchanged: 0/0
 27684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27685 ;;      Params:         2       0       0       0       0       0       0
 27686 ;;      Locals:         1       0       0       0       0       0       0
 27687 ;;      Temps:          0       0       0       0       0       0       0
 27688 ;;      Totals:         3       0       0       0       0       0       0
 27689 ;;Total ram usage:        3 bytes
 27690 ;; Hardware stack levels used:    1
 27691 ;; Hardware stack levels required when called:    3
 27692 ;; This function calls:
 27693 ;;		Nothing
 27694 ;; This function is called by:
 27695 ;;		_init
 27696 ;;		_changeBaudrate
 27697 ;; This function uses a non-reentrant model
 27698 ;;
 27699                           
 27700                           	psect	text77
 27701  00650C                     __ptext77:
 27702                           	opt stack 0
 27703  00650C                     _OpenUSART:
 27704                           	opt stack 25
 27705                           
 27706                           ;incstack = 0
 27707                           ;incstack = 0
 27708                           ;OpenUSART@config stored from wreg
 27709  00650C  CFE8 F021          	movff	wreg,OpenUSART@config
 27710  006510  6AAC               	clrf	4012,c	;volatile
 27711  006512  6AAB               	clrf	4011,c	;volatile
 27712  006514  B021               	btfsc	OpenUSART@config,0,c
 27713  006516  88AC               	bsf	4012,4,c	;volatile
 27714  006518  A221               	btfss	OpenUSART@config,1,c
 27715  00651A  D002               	goto	l16814
 27716  00651C  8CAC               	bsf	4012,6,c	;volatile
 27717  00651E  8CAB               	bsf	4011,6,c	;volatile
 27718  006520                     l16814:
 27719  006520  B421               	btfsc	OpenUSART@config,2,c
 27720  006522  8EAC               	bsf	4012,7,c	;volatile
 27721  006524  A621               	btfss	OpenUSART@config,3,c
 27722  006526  D002               	goto	l2037
 27723  006528  88AB               	bsf	4011,4,c	;volatile
 27724  00652A  D001               	goto	l16822
 27725  00652C                     l2037:
 27726  00652C  8AAB               	bsf	4011,5,c	;volatile
 27727  00652E                     l16822:
 27728  00652E  B821               	btfsc	OpenUSART@config,4,c
 27729  006530  84AC               	bsf	4012,2,c	;volatile
 27730  006532  989E               	bcf	3998,4,c	;volatile
 27731  006534  BA21               	btfsc	OpenUSART@config,5,c
 27732  006536  86AB               	bsf	4011,3,c	;volatile
 27733  006538  AC21               	btfss	OpenUSART@config,6,c
 27734  00653A  D002               	goto	l2041
 27735  00653C  8A9D               	bsf	3997,5,c	;volatile
 27736  00653E  D001               	goto	l2042
 27737  006540                     l2041:
 27738  006540  9A9D               	bcf	3997,5,c	;volatile
 27739  006542                     l2042:
 27740  006542  9A9E               	bcf	3998,5,c	;volatile
 27741  006544  AE21               	btfss	OpenUSART@config,7,c
 27742  006546  D002               	goto	l2043
 27743  006548  889D               	bsf	3997,4,c	;volatile
 27744  00654A  D001               	goto	l2044
 27745  00654C                     l2043:
 27746  00654C  989D               	bcf	3997,4,c	;volatile
 27747  00654E                     l2044:
 27748  00654E  C01F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 27749  006552  5020               	movf	OpenUSART@spbrg+1,w,c
 27750  006554  6EB0               	movwf	4016,c	;volatile
 27751  006556  8AAC               	bsf	4012,5,c	;volatile
 27752  006558  8EAB               	bsf	4011,7,c	;volatile
 27753  00655A  9C94               	bcf	3988,6,c	;volatile
 27754  00655C  8E94               	bsf	3988,7,c	;volatile
 27755  00655E  B8AC               	btfsc	4012,4,c	;volatile
 27756  006560  BEAC               	btfsc	4012,7,c	;volatile
 27757  006562  D001               	goto	l2046
 27758  006564  8C94               	bsf	3988,6,c	;volatile
 27759  006566                     l2046:
 27760  006566  0012               	return	
 27761  006568                     __end_of_OpenUSART:
 27762                           	opt stack 0
 27763                           tblptru	equ	0xFF8
 27764                           tblptrh	equ	0xFF7
 27765                           tblptrl	equ	0xFF6
 27766                           tablat	equ	0xFF5
 27767                           prodh	equ	0xFF4
 27768                           prodl	equ	0xFF3
 27769                           intcon	equ	0xFF2
 27770                           indf0	equ	0xFEF
 27771                           postinc0	equ	0xFEE
 27772                           fsr0h	equ	0xFEA
 27773                           fsr0l	equ	0xFE9
 27774                           wreg	equ	0xFE8
 27775                           indf1	equ	0xFE7
 27776                           postinc1	equ	0xFE6
 27777                           postdec1	equ	0xFE5
 27778                           fsr1h	equ	0xFE2
 27779                           fsr1l	equ	0xFE1
 27780                           indf2	equ	0xFDF
 27781                           postinc2	equ	0xFDE
 27782                           postdec2	equ	0xFDD
 27783                           plusw2	equ	0xFDB
 27784                           fsr2h	equ	0xFDA
 27785                           fsr2l	equ	0xFD9
 27786                           status	equ	0xFD8
 27787                           
 27788 ;; *************** function _init_app_ram *****************
 27789 ;; Defined at:
 27790 ;;		line 536 in file "main.c"
 27791 ;; Parameters:    Size  Location     Type
 27792 ;;		None
 27793 ;; Auto vars:     Size  Location     Type
 27794 ;;  i               1   36[BANK0 ] unsigned char 
 27795 ;; Return value:  Size  Location     Type
 27796 ;;		None               void
 27797 ;; Registers used:
 27798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27799 ;; Tracked objects:
 27800 ;;		On entry : 0/0
 27801 ;;		On exit  : 0/0
 27802 ;;		Unchanged: 0/0
 27803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27804 ;;      Params:         0       0       0       0       0       0       0
 27805 ;;      Locals:         0       1       0       0       0       0       0
 27806 ;;      Temps:          0      25       0       0       0       0       0
 27807 ;;      Totals:         0      26       0       0       0       0       0
 27808 ;;Total ram usage:       26 bytes
 27809 ;; Hardware stack levels used:    1
 27810 ;; Hardware stack levels required when called:    5
 27811 ;; This function calls:
 27812 ;;		_Read_b_eep
 27813 ;;		_ECANSetOperationMode
 27814 ;;		_setFilter
 27815 ;;		__CANIDToRegs
 27816 ;; This function is called by:
 27817 ;;		_init
 27818 ;;		_vscp_restoreDefaults
 27819 ;; This function uses a non-reentrant model
 27820 ;;
 27821                           
 27822                           	psect	text78
 27823  003508                     __ptext78:
 27824                           	opt stack 0
 27825  003508                     _init_app_ram:
 27826                           	opt stack 23
 27827                           
 27828                           ;main.c: 538: can_receiveOverruns = 0;
 27829                           
 27830                           ;incstack = 0
 27831                           ;incstack = 0
 27832  003508  0100               	movlb	0	; () banked
 27833  00350A  6BC6               	clrf	_can_receiveOverruns& (0+255),b
 27834  00350C  6BC7               	clrf	(_can_receiveOverruns+1)& (0+255),b
 27835  00350E  6BC8               	clrf	(_can_receiveOverruns+2)& (0+255),b
 27836  003510  6BC9               	clrf	(_can_receiveOverruns+3)& (0+255),b
 27837                           
 27838                           ;main.c: 539: can_transmitOverruns = 0;
 27839  003512  6BCA               	clrf	_can_transmitOverruns& (0+255),b
 27840  003514  6BCB               	clrf	(_can_transmitOverruns+1)& (0+255),b
 27841  003516  6BCC               	clrf	(_can_transmitOverruns+2)& (0+255),b
 27842  003518  6BCD               	clrf	(_can_transmitOverruns+3)& (0+255),b
 27843                           
 27844                           ;main.c: 540: uart_receiveOverruns = 0;
 27845  00351A  6BE6               	clrf	_uart_receiveOverruns& (0+255),b
 27846  00351C  6BE7               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 27847  00351E  6BE8               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 27848  003520  6BE9               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 27849                           
 27850                           ;main.c: 541: uart_transmitOverruns = 0;
 27851  003522  6BEA               	clrf	_uart_transmitOverruns& (0+255),b
 27852  003524  6BEB               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 27853  003526  6BEC               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 27854  003528  6BED               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 27855                           
 27856                           ;main.c: 542: timer = 0;
 27857  00352A  6BE2               	clrf	_timer& (0+255),b	;volatile
 27858  00352C  6BE3               	clrf	(_timer+1)& (0+255),b	;volatile
 27859  00352E  6BE4               	clrf	(_timer+2)& (0+255),b	;volatile
 27860  003530  6BE5               	clrf	(_timer+3)& (0+255),b	;volatile
 27861                           
 27862                           ; BSR set to: 0
 27863                           ;main.c: 544: bHex = Read_b_eep(0x06);
 27864  003532  6A20               	clrf	?_Read_b_eep+1,c
 27865  003534  0E06               	movlw	6
 27866  003536  6E1F               	movwf	?_Read_b_eep,c
 27867  003538  ECA7  F035         	call	_Read_b_eep	;wreg free
 27868  00353C  0101               	movlb	1	; () banked
 27869  00353E  6F00               	movwf	_bHex& (0+255),b
 27870                           
 27871                           ;main.c: 545: mode = Read_b_eep(0x03);
 27872  003540  6A20               	clrf	?_Read_b_eep+1,c
 27873  003542  0E03               	movlw	3
 27874  003544  6E1F               	movwf	?_Read_b_eep,c
 27875  003546  ECA7  F035         	call	_Read_b_eep	;wreg free
 27876  00354A  0100               	movlb	0	; () banked
 27877  00354C  6FF1               	movwf	_mode& (0+255),b
 27878                           
 27879                           ;main.c: 546: bLocalEcho = Read_b_eep(0x65);
 27880  00354E  6A20               	clrf	?_Read_b_eep+1,c
 27881  003550  0E65               	movlw	101
 27882  003552  6E1F               	movwf	?_Read_b_eep,c
 27883  003554  ECA7  F035         	call	_Read_b_eep	;wreg free
 27884  003558  0101               	movlb	1	; () banked
 27885  00355A  6F01               	movwf	_bLocalEcho& (0+255),b
 27886                           
 27887                           ;main.c: 547: bTimestamp = Read_b_eep(0x66);
 27888  00355C  6A20               	clrf	?_Read_b_eep+1,c
 27889  00355E  0E66               	movlw	102
 27890  003560  6E1F               	movwf	?_Read_b_eep,c
 27891  003562  ECA7  F035         	call	_Read_b_eep	;wreg free
 27892  003566  0100               	movlb	0	; () banked
 27893  003568  6FF0               	movwf	_bTimestamp& (0+255),b
 27894                           
 27895                           ;main.c: 549: rwtimeout = Read_b_eep(0x09);
 27896  00356A  6A20               	clrf	?_Read_b_eep+1,c
 27897  00356C  0E09               	movlw	9
 27898  00356E  6E1F               	movwf	?_Read_b_eep,c
 27899  003570  ECA7  F035         	call	_Read_b_eep	;wreg free
 27900  003574  0101               	movlb	1	; () banked
 27901  003576  6F04               	movwf	_rwtimeout& (0+255),b
 27902                           
 27903                           ; BSR set to: 1
 27904                           ;main.c: 554: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 27905  003578  0E80               	movlw	128
 27906  00357A  EC74  F035         	call	_ECANSetOperationMode
 27907                           
 27908                           ;main.c: 556: for (uint8_t i=0; i<15; i++ ) {
 27909  00357E  0100               	movlb	0	; () banked
 27910  003580  6B84               	clrf	init_app_ram@i& (0+255),b
 27911  003582                     l16794:
 27912                           
 27913                           ; BSR set to: 0
 27914                           ;main.c: 557: setFilter( i,
 27915                           ;main.c: 558: ((uint32_t)( Read_b_eep(0x20 + i*4)) << 24 ) +
 27916                           ;main.c: 559: ((uint32_t)( Read_b_eep(0x20 + 1 + i*4)) << 16 ) +
 27917                           ;main.c: 560: ((uint32_t)( Read_b_eep(0x20 + 2 + i*4)) << 8 ) +
 27918                           ;main.c: 561: ((uint32_t)( Read_b_eep(0x20 + 3 + i*4)) ), 0 );
 27919  003582  5184               	movf	init_app_ram@i& (0+255),w,b
 27920  003584  6F6B               	movwf	??_init_app_ram& (0+255),b
 27921  003586  6B6C               	clrf	(??_init_app_ram+1)& (0+255),b
 27922  003588  90D8               	bcf	status,0,c
 27923  00358A  376B               	rlcf	??_init_app_ram& (0+255),f,b
 27924  00358C  376C               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27925  00358E  90D8               	bcf	status,0,c
 27926  003590  376B               	rlcf	??_init_app_ram& (0+255),f,b
 27927  003592  376C               	rlcf	(??_init_app_ram+1)& (0+255),f,b
 27928  003594  0E22               	movlw	34
 27929  003596  256B               	addwf	??_init_app_ram& (0+255),w,b
 27930  003598  6E1F               	movwf	?_Read_b_eep,c
 27931  00359A  0E00               	movlw	0
 27932  00359C  216C               	addwfc	(??_init_app_ram+1)& (0+255),w,b
 27933  00359E  6E20               	movwf	?_Read_b_eep+1,c
 27934  0035A0  ECA7  F035         	call	_Read_b_eep	;wreg free
 27935  0035A4  0100               	movlb	0	; () banked
 27936  0035A6  6F6D               	movwf	(??_init_app_ram+2)& (0+255),b
 27937  0035A8  C06D  F06E         	movff	??_init_app_ram+2,??_init_app_ram+3
 27938  0035AC  6B6F               	clrf	(??_init_app_ram+4)& (0+255),b
 27939  0035AE  6B70               	clrf	(??_init_app_ram+5)& (0+255),b
 27940  0035B0  6B71               	clrf	(??_init_app_ram+6)& (0+255),b
 27941  0035B2  C070  F071         	movff	??_init_app_ram+5,??_init_app_ram+6
 27942  0035B6  C06F  F070         	movff	??_init_app_ram+4,??_init_app_ram+5
 27943  0035BA  C06E  F06F         	movff	??_init_app_ram+3,??_init_app_ram+4
 27944  0035BE  6B6E               	clrf	(??_init_app_ram+3)& (0+255),b
 27945  0035C0  5184               	movf	init_app_ram@i& (0+255),w,b
 27946  0035C2  0D04               	mullw	4
 27947  0035C4  0E21               	movlw	33
 27948  0035C6  24F3               	addwf	prodl,w,c
 27949  0035C8  6E1F               	movwf	?_Read_b_eep,c
 27950  0035CA  0E00               	movlw	0
 27951  0035CC  20F4               	addwfc	prodh,w,c
 27952  0035CE  6E20               	movwf	?_Read_b_eep+1,c
 27953  0035D0  ECA7  F035         	call	_Read_b_eep	;wreg free
 27954  0035D4  0100               	movlb	0	; () banked
 27955  0035D6  6F72               	movwf	(??_init_app_ram+7)& (0+255),b
 27956  0035D8  C072  F073         	movff	??_init_app_ram+7,??_init_app_ram+8
 27957  0035DC  6B74               	clrf	(??_init_app_ram+9)& (0+255),b
 27958  0035DE  6B75               	clrf	(??_init_app_ram+10)& (0+255),b
 27959  0035E0  6B76               	clrf	(??_init_app_ram+11)& (0+255),b
 27960  0035E2  C074  F076         	movff	??_init_app_ram+9,??_init_app_ram+11
 27961  0035E6  C073  F075         	movff	??_init_app_ram+8,??_init_app_ram+10
 27962  0035EA  6B74               	clrf	(??_init_app_ram+9)& (0+255),b
 27963  0035EC  6B73               	clrf	(??_init_app_ram+8)& (0+255),b
 27964  0035EE  5184               	movf	init_app_ram@i& (0+255),w,b
 27965  0035F0  0D04               	mullw	4
 27966  0035F2  0E20               	movlw	32
 27967  0035F4  24F3               	addwf	prodl,w,c
 27968  0035F6  6E1F               	movwf	?_Read_b_eep,c
 27969  0035F8  0E00               	movlw	0
 27970  0035FA  20F4               	addwfc	prodh,w,c
 27971  0035FC  6E20               	movwf	?_Read_b_eep+1,c
 27972  0035FE  ECA7  F035         	call	_Read_b_eep	;wreg free
 27973  003602  0100               	movlb	0	; () banked
 27974  003604  6F77               	movwf	(??_init_app_ram+12)& (0+255),b
 27975  003606  C077  F078         	movff	??_init_app_ram+12,??_init_app_ram+13
 27976  00360A  6B79               	clrf	(??_init_app_ram+14)& (0+255),b
 27977  00360C  6B7A               	clrf	(??_init_app_ram+15)& (0+255),b
 27978  00360E  6B7B               	clrf	(??_init_app_ram+16)& (0+255),b
 27979  003610  C078  F07B         	movff	??_init_app_ram+13,??_init_app_ram+16
 27980  003614  6B7A               	clrf	(??_init_app_ram+15)& (0+255),b
 27981  003616  6B79               	clrf	(??_init_app_ram+14)& (0+255),b
 27982  003618  6B78               	clrf	(??_init_app_ram+13)& (0+255),b
 27983  00361A  5173               	movf	(??_init_app_ram+8)& (0+255),w,b
 27984  00361C  2578               	addwf	(??_init_app_ram+13)& (0+255),w,b
 27985  00361E  6F7C               	movwf	(??_init_app_ram+17)& (0+255),b
 27986  003620  5174               	movf	(??_init_app_ram+9)& (0+255),w,b
 27987  003622  2179               	addwfc	(??_init_app_ram+14)& (0+255),w,b
 27988  003624  6F7D               	movwf	(??_init_app_ram+18)& (0+255),b
 27989  003626  5175               	movf	(??_init_app_ram+10)& (0+255),w,b
 27990  003628  217A               	addwfc	(??_init_app_ram+15)& (0+255),w,b
 27991  00362A  6F7E               	movwf	(??_init_app_ram+19)& (0+255),b
 27992  00362C  5176               	movf	(??_init_app_ram+11)& (0+255),w,b
 27993  00362E  217B               	addwfc	(??_init_app_ram+16)& (0+255),w,b
 27994  003630  6F7F               	movwf	(??_init_app_ram+20)& (0+255),b
 27995  003632  516E               	movf	(??_init_app_ram+3)& (0+255),w,b
 27996  003634  257C               	addwf	(??_init_app_ram+17)& (0+255),w,b
 27997  003636  6F80               	movwf	(??_init_app_ram+21)& (0+255),b
 27998  003638  516F               	movf	(??_init_app_ram+4)& (0+255),w,b
 27999  00363A  217D               	addwfc	(??_init_app_ram+18)& (0+255),w,b
 28000  00363C  6F81               	movwf	(??_init_app_ram+22)& (0+255),b
 28001  00363E  5170               	movf	(??_init_app_ram+5)& (0+255),w,b
 28002  003640  217E               	addwfc	(??_init_app_ram+19)& (0+255),w,b
 28003  003642  6F82               	movwf	(??_init_app_ram+23)& (0+255),b
 28004  003644  5171               	movf	(??_init_app_ram+6)& (0+255),w,b
 28005  003646  217F               	addwfc	(??_init_app_ram+20)& (0+255),w,b
 28006  003648  6F83               	movwf	(??_init_app_ram+24)& (0+255),b
 28007  00364A  5184               	movf	init_app_ram@i& (0+255),w,b
 28008  00364C  0D04               	mullw	4
 28009  00364E  0E23               	movlw	35
 28010  003650  24F3               	addwf	prodl,w,c
 28011  003652  6E1F               	movwf	?_Read_b_eep,c
 28012  003654  0E00               	movlw	0
 28013  003656  20F4               	addwfc	prodh,w,c
 28014  003658  6E20               	movwf	?_Read_b_eep+1,c
 28015  00365A  ECA7  F035         	call	_Read_b_eep	;wreg free
 28016  00365E  0100               	movlb	0	; () banked
 28017  003660  2580               	addwf	(??_init_app_ram+21)& (0+255),w,b
 28018  003662  6E23               	movwf	?_setFilter,c
 28019  003664  0E00               	movlw	0
 28020  003666  2181               	addwfc	(??_init_app_ram+22)& (0+255),w,b
 28021  003668  6E24               	movwf	?_setFilter+1,c
 28022  00366A  0E00               	movlw	0
 28023  00366C  2182               	addwfc	(??_init_app_ram+23)& (0+255),w,b
 28024  00366E  6E25               	movwf	?_setFilter+2,c
 28025  003670  0E00               	movlw	0
 28026  003672  2183               	addwfc	(??_init_app_ram+24)& (0+255),w,b
 28027  003674  6E26               	movwf	?_setFilter+3,c
 28028  003676  6A27               	clrf	?_setFilter+4,c
 28029  003678  5184               	movf	init_app_ram@i& (0+255),w,b
 28030  00367A  ECD3  F01B         	call	_setFilter
 28031  00367E  0100               	movlb	0	; () banked
 28032  003680  2B84               	incf	init_app_ram@i& (0+255),f,b
 28033                           
 28034                           ; BSR set to: 0
 28035  003682  0E0E               	movlw	14
 28036  003684  6584               	cpfsgt	init_app_ram@i& (0+255),b
 28037  003686  D77D               	goto	l16794
 28038                           
 28039                           ; BSR set to: 0
 28040                           ;main.c: 562: }
 28041                           ;main.c: 564: _CANIDToRegs((BYTE*)&RXM0SIDH, ((uint32_t)( Read_b_eep(0x60)) << 24 ) + ((
      +                          uint32_t)( Read_b_eep(0x60 + 1)) << 16 ) + ((uint32_t)( Read_b_eep(0x60 + 2)) << 8 ) + (
      +                          ( Read_b_eep(0x60 + 3)) ), 1);
 28042  003688  010F               	movlb	15	; () banked
 28043  00368A  0E0F               	movlw	15	;volatile
 28044  00368C  6E22               	movwf	?__CANIDToRegs+1,c
 28045  00368E  0E18               	movlw	24	;volatile
 28046  003690  6E21               	movwf	?__CANIDToRegs,c
 28047  003692  6A20               	clrf	?_Read_b_eep+1,c
 28048  003694  0E62               	movlw	98
 28049  003696  6E1F               	movwf	?_Read_b_eep,c
 28050  003698  ECA7  F035         	call	_Read_b_eep	;wreg free
 28051  00369C  D856               	call	PL42	;call to abstracted procedure
 28052  00369E  0E61               	movlw	97
 28053  0036A0  6E1F               	movwf	?_Read_b_eep,c
 28054  0036A2  ECA7  F035         	call	_Read_b_eep	;wreg free
 28055  0036A6  D870               	call	PL46	;call to abstracted procedure
 28056  0036A8  0E60               	movlw	96
 28057  0036AA  6E1F               	movwf	?_Read_b_eep,c
 28058  0036AC  ECA7  F035         	call	_Read_b_eep	;wreg free
 28059  0036B0  D826               	call	PL10	;call to abstracted procedure
 28060  0036B2  0E63               	movlw	99
 28061  0036B4  6E1F               	movwf	?_Read_b_eep,c
 28062  0036B6  ECA7  F035         	call	_Read_b_eep	;wreg free
 28063  0036BA  D857               	call	PL44	;call to abstracted procedure
 28064  0036BC  ECC1  F025         	call	__CANIDToRegs	;wreg free
 28065                           
 28066                           ;main.c: 570: _CANIDToRegs((BYTE*)&RXM1SIDH, ((uint32_t)( Read_b_eep(0x64)) << 24 ) + ((
      +                          uint32_t)( Read_b_eep(0x64 + 1)) << 16 ) + ((uint32_t)( Read_b_eep(0x64 + 2)) << 8 ) + (
      +                          (uint32_t)( Read_b_eep(0x64 + 3)) ), 1);
 28067  0036C0  010F               	movlb	15	; () banked
 28068  0036C2  0E0F               	movlw	15	;volatile
 28069  0036C4  6E22               	movwf	?__CANIDToRegs+1,c
 28070  0036C6  0E1C               	movlw	28	;volatile
 28071  0036C8  6E21               	movwf	?__CANIDToRegs,c
 28072  0036CA  6A20               	clrf	?_Read_b_eep+1,c
 28073  0036CC  0E66               	movlw	102
 28074  0036CE  6E1F               	movwf	?_Read_b_eep,c
 28075  0036D0  ECA7  F035         	call	_Read_b_eep	;wreg free
 28076  0036D4  D83A               	call	PL42	;call to abstracted procedure
 28077  0036D6  0E65               	movlw	101
 28078  0036D8  6E1F               	movwf	?_Read_b_eep,c
 28079  0036DA  ECA7  F035         	call	_Read_b_eep	;wreg free
 28080  0036DE  D854               	call	PL46	;call to abstracted procedure
 28081  0036E0  0E64               	movlw	100
 28082  0036E2  6E1F               	movwf	?_Read_b_eep,c
 28083  0036E4  ECA7  F035         	call	_Read_b_eep	;wreg free
 28084  0036E8  D80A               	call	PL10	;call to abstracted procedure
 28085  0036EA  0E67               	movlw	103
 28086  0036EC  6E1F               	movwf	?_Read_b_eep,c
 28087  0036EE  ECA7  F035         	call	_Read_b_eep	;wreg free
 28088  0036F2  D83B               	call	PL44	;call to abstracted procedure
 28089  0036F4  ECC1  F025         	call	__CANIDToRegs	;wreg free
 28090                           
 28091                           ; BSR set to: 0
 28092                           ;main.c: 576: ECANSetOperationMode(0x20);
 28093  0036F8  0E20               	movlw	32
 28094  0036FA  EF74  F035         	goto	_ECANSetOperationMode
 28095  0036FE                     __end_of_init_app_ram:
 28096                           	opt stack 0
 28097  0036FE                     PL10:
 28098                           	opt stack 23
 28099  0036FE  0100               	movlb	0	; () banked
 28100  003700  6F75               	movwf	(??_init_app_ram+10)& (0+255),b
 28101  003702  C075  F076         	movff	??_init_app_ram+10,??_init_app_ram+11
 28102  003706  6B77               	clrf	(??_init_app_ram+12)& (0+255),b
 28103  003708  6B78               	clrf	(??_init_app_ram+13)& (0+255),b
 28104  00370A  6B79               	clrf	(??_init_app_ram+14)& (0+255),b
 28105  00370C  C076  F079         	movff	??_init_app_ram+11,??_init_app_ram+14
 28106  003710  6B78               	clrf	(??_init_app_ram+13)& (0+255),b
 28107  003712  6B77               	clrf	(??_init_app_ram+12)& (0+255),b
 28108  003714  6B76               	clrf	(??_init_app_ram+11)& (0+255),b
 28109  003716  5171               	movf	(??_init_app_ram+6)& (0+255),w,b
 28110  003718  2576               	addwf	(??_init_app_ram+11)& (0+255),w,b
 28111  00371A  6F7A               	movwf	(??_init_app_ram+15)& (0+255),b
 28112  00371C  5172               	movf	(??_init_app_ram+7)& (0+255),w,b
 28113  00371E  2177               	addwfc	(??_init_app_ram+12)& (0+255),w,b
 28114  003720  6F7B               	movwf	(??_init_app_ram+16)& (0+255),b
 28115  003722  5173               	movf	(??_init_app_ram+8)& (0+255),w,b
 28116  003724  2178               	addwfc	(??_init_app_ram+13)& (0+255),w,b
 28117  003726  6F7C               	movwf	(??_init_app_ram+17)& (0+255),b
 28118  003728  5174               	movf	(??_init_app_ram+9)& (0+255),w,b
 28119  00372A  2179               	addwfc	(??_init_app_ram+14)& (0+255),w,b
 28120  00372C  6F7D               	movwf	(??_init_app_ram+18)& (0+255),b
 28121  00372E  516C               	movf	(??_init_app_ram+1)& (0+255),w,b
 28122  003730  257A               	addwf	(??_init_app_ram+15)& (0+255),w,b
 28123  003732  6F7E               	movwf	(??_init_app_ram+19)& (0+255),b
 28124  003734  516D               	movf	(??_init_app_ram+2)& (0+255),w,b
 28125  003736  217B               	addwfc	(??_init_app_ram+16)& (0+255),w,b
 28126  003738  6F7F               	movwf	(??_init_app_ram+20)& (0+255),b
 28127  00373A  516E               	movf	(??_init_app_ram+3)& (0+255),w,b
 28128  00373C  217C               	addwfc	(??_init_app_ram+17)& (0+255),w,b
 28129  00373E  6F80               	movwf	(??_init_app_ram+21)& (0+255),b
 28130  003740  516F               	movf	(??_init_app_ram+4)& (0+255),w,b
 28131  003742  217D               	addwfc	(??_init_app_ram+18)& (0+255),w,b
 28132  003744  6F81               	movwf	(??_init_app_ram+22)& (0+255),b
 28133  003746  6A20               	clrf	?_Read_b_eep+1,c
 28134  003748  0012               	return	
 28135  00374A                     __end_ofPL10:
 28136                           	opt stack 0
 28137  00374A                     PL42:
 28138                           	opt stack 23
 28139  00374A  0100               	movlb	0	; () banked
 28140  00374C  6F6B               	movwf	??_init_app_ram& (0+255),b
 28141  00374E  C06B  F06C         	movff	??_init_app_ram,??_init_app_ram+1
 28142  003752  6B6D               	clrf	(??_init_app_ram+2)& (0+255),b
 28143  003754  6B6E               	clrf	(??_init_app_ram+3)& (0+255),b
 28144  003756  6B6F               	clrf	(??_init_app_ram+4)& (0+255),b
 28145  003758  C06E  F06F         	movff	??_init_app_ram+3,??_init_app_ram+4
 28146  00375C  C06D  F06E         	movff	??_init_app_ram+2,??_init_app_ram+3
 28147  003760  C06C  F06D         	movff	??_init_app_ram+1,??_init_app_ram+2
 28148  003764  6B6C               	clrf	(??_init_app_ram+1)& (0+255),b
 28149  003766  6A20               	clrf	?_Read_b_eep+1,c
 28150  003768  0012               	return	
 28151  00376A                     __end_ofPL42:
 28152                           	opt stack 0
 28153  00376A                     PL44:
 28154                           	opt stack 23
 28155  00376A  0100               	movlb	0	; () banked
 28156  00376C  257E               	addwf	(??_init_app_ram+19)& (0+255),w,b
 28157  00376E  6E23               	movwf	?__CANIDToRegs+2,c
 28158  003770  0E00               	movlw	0
 28159  003772  217F               	addwfc	(??_init_app_ram+20)& (0+255),w,b
 28160  003774  6E24               	movwf	?__CANIDToRegs+3,c
 28161  003776  0E00               	movlw	0
 28162  003778  2180               	addwfc	(??_init_app_ram+21)& (0+255),w,b
 28163  00377A  6E25               	movwf	?__CANIDToRegs+4,c
 28164  00377C  0E00               	movlw	0
 28165  00377E  2181               	addwfc	(??_init_app_ram+22)& (0+255),w,b
 28166  003780  6E26               	movwf	?__CANIDToRegs+5,c
 28167  003782  0E01               	movlw	1
 28168  003784  6E27               	movwf	?__CANIDToRegs+6,c
 28169  003786  0C01               	retlw	1
 28170  003788                     __end_ofPL44:
 28171                           	opt stack 0
 28172  003788                     PL46:
 28173                           	opt stack 23
 28174  003788  0100               	movlb	0	; () banked
 28175  00378A  6F70               	movwf	(??_init_app_ram+5)& (0+255),b
 28176  00378C  C070  F071         	movff	??_init_app_ram+5,??_init_app_ram+6
 28177  003790  6B72               	clrf	(??_init_app_ram+7)& (0+255),b
 28178  003792  6B73               	clrf	(??_init_app_ram+8)& (0+255),b
 28179  003794  6B74               	clrf	(??_init_app_ram+9)& (0+255),b
 28180  003796  C072  F074         	movff	??_init_app_ram+7,??_init_app_ram+9
 28181  00379A  C071  F073         	movff	??_init_app_ram+6,??_init_app_ram+8
 28182  00379E  6B72               	clrf	(??_init_app_ram+7)& (0+255),b
 28183  0037A0  6B71               	clrf	(??_init_app_ram+6)& (0+255),b
 28184  0037A2  6A20               	clrf	?_Read_b_eep+1,c
 28185  0037A4  0012               	return	
 28186  0037A6                     __end_ofPL46:
 28187                           	opt stack 0
 28188                           tblptru	equ	0xFF8
 28189                           tblptrh	equ	0xFF7
 28190                           tblptrl	equ	0xFF6
 28191                           tablat	equ	0xFF5
 28192                           prodh	equ	0xFF4
 28193                           prodl	equ	0xFF3
 28194                           intcon	equ	0xFF2
 28195                           indf0	equ	0xFEF
 28196                           postinc0	equ	0xFEE
 28197                           fsr0h	equ	0xFEA
 28198                           fsr0l	equ	0xFE9
 28199                           wreg	equ	0xFE8
 28200                           indf1	equ	0xFE7
 28201                           postinc1	equ	0xFE6
 28202                           postdec1	equ	0xFE5
 28203                           fsr1h	equ	0xFE2
 28204                           fsr1l	equ	0xFE1
 28205                           indf2	equ	0xFDF
 28206                           postinc2	equ	0xFDE
 28207                           postdec2	equ	0xFDD
 28208                           plusw2	equ	0xFDB
 28209                           fsr2h	equ	0xFDA
 28210                           fsr2l	equ	0xFD9
 28211                           status	equ	0xFD8
 28212                           
 28213 ;; *************** function __CANIDToRegs *****************
 28214 ;; Defined at:
 28215 ;;		line 1101 in file "ECAN.c"
 28216 ;; Parameters:    Size  Location     Type
 28217 ;;  ptr             2   32[COMRAM] PTR unsigned char 
 28218 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 28219 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 28220 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 28221 ;;  val             4   34[COMRAM] unsigned long 
 28222 ;;  type            1   38[COMRAM] unsigned char 
 28223 ;; Auto vars:     Size  Location     Type
 28224 ;;  Value           1    2[BANK0 ] PTR struct _CAN_MESSAGE_
 28225 ;;		 -> _CANIDToRegs@val(4), 
 28226 ;; Return value:  Size  Location     Type
 28227 ;;		None               void
 28228 ;; Registers used:
 28229 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28230 ;; Tracked objects:
 28231 ;;		On entry : 0/F
 28232 ;;		On exit  : F/0
 28233 ;;		Unchanged: 0/0
 28234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28235 ;;      Params:         7       0       0       0       0       0       0
 28236 ;;      Locals:         0       1       0       0       0       0       0
 28237 ;;      Temps:          0       2       0       0       0       0       0
 28238 ;;      Totals:         7       3       0       0       0       0       0
 28239 ;;Total ram usage:       10 bytes
 28240 ;; Hardware stack levels used:    1
 28241 ;; Hardware stack levels required when called:    3
 28242 ;; This function calls:
 28243 ;;		Nothing
 28244 ;; This function is called by:
 28245 ;;		_init_app_ram
 28246 ;;		_doModeVerbose
 28247 ;;		_ECANSendMessage
 28248 ;; This function uses a non-reentrant model
 28249 ;;
 28250                           
 28251                           	psect	text79
 28252  004B82                     __ptext79:
 28253                           	opt stack 0
 28254  004B82                     __CANIDToRegs:
 28255                           	opt stack 24
 28256                           
 28257                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 28258                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 28259                           
 28260                           ;incstack = 0
 28261                           ;incstack = 0
 28262  004B82  0E23               	movlw	low __CANIDToRegs@val
 28263  004B84  0100               	movlb	0	; () banked
 28264  004B86  6F62               	movwf	__CANIDToRegs@Value& (0+255),b
 28265                           
 28266                           ; BSR set to: 0
 28267                           ;ECAN.c: 1106: if ( type == 0 )
 28268  004B88  6627               	tstfsz	__CANIDToRegs@type,c
 28269  004B8A  D022               	goto	l17004
 28270                           
 28271                           ; BSR set to: 0
 28272                           ;ECAN.c: 1107: {
 28273                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 28274  004B8C  5162               	movf	__CANIDToRegs@Value& (0+255),w,b
 28275  004B8E  6ED9               	movwf	fsr2l,c
 28276  004B90  6ADA               	clrf	fsr2h,c
 28277  004B92  50DF               	movf	indf2,w,c
 28278  004B94  6F60               	movwf	??__CANIDToRegs& (0+255),b
 28279  004B96  90D8               	bcf	status,0,c
 28280  004B98  3360               	rrcf	??__CANIDToRegs& (0+255),f,b
 28281  004B9A  90D8               	bcf	status,0,c
 28282  004B9C  3360               	rrcf	??__CANIDToRegs& (0+255),f,b
 28283  004B9E  90D8               	bcf	status,0,c
 28284  004BA0  3160               	rrcf	??__CANIDToRegs& (0+255),w,b
 28285                           
 28286                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 28287  004BA2  D858               	call	PL74	;call to abstracted procedure
 28288  004BA4  2AD9               	incf	fsr2l,f,c
 28289  004BA6  6ADA               	clrf	fsr2h,c
 28290  004BA8  D871               	call	PL142	;call to abstracted procedure
 28291  004BAA                     u22095:
 28292  004BAA  90D8               	bcf	status,0,c
 28293  004BAC  3760               	rlcf	??__CANIDToRegs& (0+255),f,b
 28294  004BAE  2F61               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 28295  004BB0  D7FC               	goto	u22095
 28296  004BB2  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28297                           
 28298                           ; BSR set to: 0
 28299                           ;ECAN.c: 1111: ptr++;
 28300                           
 28301                           ; BSR set to: 0
 28302                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 28303  004BB6  D844               	call	PL40	;call to abstracted procedure
 28304  004BB8  D869               	call	PL142	;call to abstracted procedure
 28305  004BBA                     u22105:
 28306  004BBA  90D8               	bcf	status,0,c
 28307  004BBC  3760               	rlcf	??__CANIDToRegs& (0+255),f,b
 28308  004BBE  2F61               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 28309  004BC0  D7FC               	goto	u22105
 28310  004BC2  5160               	movf	??__CANIDToRegs& (0+255),w,b
 28311  004BC4  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28312  004BC8  C022  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28313  004BCC  6EDF               	movwf	indf2,c
 28314                           
 28315                           ;ECAN.c: 1113: }
 28316  004BCE  D037               	goto	l1678
 28317  004BD0                     l17004:
 28318                           
 28319                           ; BSR set to: 0
 28320                           ;ECAN.c: 1114: else
 28321                           ;ECAN.c: 1115: {
 28322                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 28323  004BD0  D854               	call	PL108	;call to abstracted procedure
 28324  004BD2  0E05               	movlw	5
 28325  004BD4  6F61               	movwf	(??__CANIDToRegs+1)& (0+255),b
 28326  004BD6                     u22115:
 28327  004BD6  90D8               	bcf	status,0,c
 28328  004BD8  3360               	rrcf	??__CANIDToRegs& (0+255),f,b
 28329  004BDA  2F61               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 28330  004BDC  D7FC               	goto	u22115
 28331  004BDE  5160               	movf	??__CANIDToRegs& (0+255),w,b
 28332                           
 28333                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 28334  004BE0  D839               	call	PL74	;call to abstracted procedure
 28335  004BE2  0E03               	movlw	3
 28336  004BE4  D840               	call	PL94	;call to abstracted procedure
 28337  004BE6  3760               	rlcf	??__CANIDToRegs& (0+255),f,b
 28338  004BE8  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28339                           
 28340                           ; BSR set to: 0
 28341                           ;ECAN.c: 1119: ptr++;
 28342                           
 28343                           ; BSR set to: 0
 28344                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 28345  004BEC  D829               	call	PL40	;call to abstracted procedure
 28346  004BEE  0E02               	movlw	2
 28347  004BF0  D83A               	call	PL94	;call to abstracted procedure
 28348  004BF2  3560               	rlcf	??__CANIDToRegs& (0+255),w,b
 28349  004BF4  0BE0               	andlw	224
 28350  004BF6  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28351  004BFA  C022  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28352  004BFE  6EDF               	movwf	indf2,c
 28353                           
 28354                           ; BSR set to: 0
 28355                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 28356  004C00  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28357  004C04  C022  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28358  004C08  0E00               	movlw	0
 28359  004C0A  86DB               	bsf	plusw2,3,c
 28360                           
 28361                           ; BSR set to: 0
 28362                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 28363  004C0C  D836               	call	PL108	;call to abstracted procedure
 28364  004C0E  0E03               	movlw	3
 28365  004C10  1760               	andwf	??__CANIDToRegs& (0+255),f,b
 28366  004C12  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28367                           
 28368                           ;ECAN.c: 1124: ptr++;
 28369                           
 28370                           ; BSR set to: 0
 28371                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 28372  004C16  D814               	call	PL40	;call to abstracted procedure
 28373  004C18  2AD9               	incf	fsr2l,f,c
 28374  004C1A  6ADA               	clrf	fsr2h,c
 28375  004C1C  C021  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 28376  004C20  C022  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 28377  004C24  CFDF FFE7          	movff	indf2,indf1
 28378                           
 28379                           ; BSR set to: 0
 28380                           ;ECAN.c: 1126: ptr++;
 28381  004C28  4A21               	infsnz	__CANIDToRegs@ptr,f,c
 28382  004C2A  2A22               	incf	__CANIDToRegs@ptr+1,f,c
 28383                           
 28384                           ; BSR set to: 0
 28385                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 28386  004C2C  5162               	movf	__CANIDToRegs@Value& (0+255),w,b
 28387  004C2E  6ED9               	movwf	fsr2l,c
 28388  004C30  6ADA               	clrf	fsr2h,c
 28389  004C32  C021  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 28390  004C36  C022  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 28391  004C3A  CFDF FFE7          	movff	indf2,indf1
 28392  004C3E                     l1678:
 28393                           
 28394                           ; BSR set to: 0
 28395  004C3E  0012               	return	
 28396  004C40                     __end_of__CANIDToRegs:
 28397                           	opt stack 0
 28398  004C40                     PL40:
 28399                           	opt stack 24
 28400  004C40  C022  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28401  004C44  5160               	movf	??__CANIDToRegs& (0+255),w,b
 28402  004C46  12DF               	iorwf	indf2,f,c
 28403  004C48  4A21               	infsnz	__CANIDToRegs@ptr,f,c
 28404  004C4A  2A22               	incf	__CANIDToRegs@ptr+1,f,c
 28405  004C4C  5162               	movf	__CANIDToRegs@Value& (0+255),w,b
 28406  004C4E  6ED9               	movwf	fsr2l,c
 28407  004C50  6ADA               	clrf	fsr2h,c
 28408  004C52  0012               	return	
 28409  004C54                     __end_ofPL40:
 28410                           	opt stack 0
 28411  004C54                     PL74:
 28412                           	opt stack 24
 28413  004C54  C021  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 28414  004C58  C022  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 28415  004C5C  6EDF               	movwf	indf2,c
 28416  004C5E  5162               	movf	__CANIDToRegs@Value& (0+255),w,b
 28417  004C60  6ED9               	movwf	fsr2l,c
 28418  004C62  6ADA               	clrf	fsr2h,c
 28419  004C64  0012               	return	
 28420  004C66                     __end_ofPL74:
 28421                           	opt stack 0
 28422  004C66                     PL94:
 28423                           	opt stack 24
 28424  004C66  26D9               	addwf	fsr2l,f,c
 28425  004C68  6ADA               	clrf	fsr2h,c
 28426  004C6A  50DF               	movf	indf2,w,c
 28427  004C6C  6F60               	movwf	??__CANIDToRegs& (0+255),b
 28428  004C6E  90D8               	bcf	status,0,c
 28429  004C70  3760               	rlcf	??__CANIDToRegs& (0+255),f,b
 28430  004C72  90D8               	bcf	status,0,c
 28431  004C74  3760               	rlcf	??__CANIDToRegs& (0+255),f,b
 28432  004C76  90D8               	bcf	status,0,c
 28433  004C78  0012               	return	
 28434  004C7A                     __end_ofPL94:
 28435                           	opt stack 0
 28436  004C7A                     PL108:
 28437                           	opt stack 24
 28438  004C7A  5162               	movf	__CANIDToRegs@Value& (0+255),w,b
 28439  004C7C  6ED9               	movwf	fsr2l,c
 28440  004C7E  6ADA               	clrf	fsr2h,c
 28441  004C80  0E02               	movlw	2
 28442  004C82  26D9               	addwf	fsr2l,f,c
 28443  004C84  6ADA               	clrf	fsr2h,c
 28444  004C86  50DF               	movf	indf2,w,c
 28445  004C88  6F60               	movwf	??__CANIDToRegs& (0+255),b
 28446  004C8A  0012               	return	
 28447  004C8C                     __end_ofPL108:
 28448                           	opt stack 0
 28449  004C8C                     PL142:
 28450                           	opt stack 24
 28451  004C8C  50DF               	movf	indf2,w,c
 28452  004C8E  6F60               	movwf	??__CANIDToRegs& (0+255),b
 28453  004C90  0E05               	movlw	5
 28454  004C92  6F61               	movwf	(??__CANIDToRegs+1)& (0+255),b
 28455  004C94  0C05               	retlw	5
 28456  004C96                     __end_ofPL142:
 28457                           	opt stack 0
 28458                           tblptru	equ	0xFF8
 28459                           tblptrh	equ	0xFF7
 28460                           tblptrl	equ	0xFF6
 28461                           tablat	equ	0xFF5
 28462                           prodh	equ	0xFF4
 28463                           prodl	equ	0xFF3
 28464                           intcon	equ	0xFF2
 28465                           indf0	equ	0xFEF
 28466                           postinc0	equ	0xFEE
 28467                           fsr0h	equ	0xFEA
 28468                           fsr0l	equ	0xFE9
 28469                           wreg	equ	0xFE8
 28470                           indf1	equ	0xFE7
 28471                           postinc1	equ	0xFE6
 28472                           postdec1	equ	0xFE5
 28473                           fsr1h	equ	0xFE2
 28474                           fsr1l	equ	0xFE1
 28475                           indf2	equ	0xFDF
 28476                           postinc2	equ	0xFDE
 28477                           postdec2	equ	0xFDD
 28478                           plusw2	equ	0xFDB
 28479                           fsr2h	equ	0xFDA
 28480                           fsr2l	equ	0xFD9
 28481                           status	equ	0xFD8
 28482                           
 28483 ;; *************** function _setFilter *****************
 28484 ;; Defined at:
 28485 ;;		line 3340 in file "main.c"
 28486 ;; Parameters:    Size  Location     Type
 28487 ;;  nFilter         1    wreg     unsigned char 
 28488 ;;  val             4   34[COMRAM] unsigned long 
 28489 ;;  bPersistent     1   38[COMRAM] enum E15660
 28490 ;; Auto vars:     Size  Location     Type
 28491 ;;  nFilter         1    6[BANK0 ] unsigned char 
 28492 ;;  eidl            1   10[BANK0 ] unsigned char 
 28493 ;;  eidh            1    9[BANK0 ] unsigned char 
 28494 ;;  sidl            1    8[BANK0 ] unsigned char 
 28495 ;;  sidh            1    7[BANK0 ] unsigned char 
 28496 ;; Return value:  Size  Location     Type
 28497 ;;		None               void
 28498 ;; Registers used:
 28499 ;;		wreg, status,2, status,0, cstack
 28500 ;; Tracked objects:
 28501 ;;		On entry : C/1
 28502 ;;		On exit  : 0/0
 28503 ;;		Unchanged: 0/0
 28504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28505 ;;      Params:         5       0       0       0       0       0       0
 28506 ;;      Locals:         0       5       0       0       0       0       0
 28507 ;;      Temps:          0       6       0       0       0       0       0
 28508 ;;      Totals:         5      11       0       0       0       0       0
 28509 ;;Total ram usage:       16 bytes
 28510 ;; Hardware stack levels used:    1
 28511 ;; Hardware stack levels required when called:    4
 28512 ;; This function calls:
 28513 ;;		_Busy_eep
 28514 ;;		_Write_b_eep
 28515 ;; This function is called by:
 28516 ;;		_init_app_ram
 28517 ;;		_doModeVerbose
 28518 ;;		_doModeVscp
 28519 ;; This function uses a non-reentrant model
 28520 ;;
 28521                           
 28522                           	psect	text80
 28523  0037A6                     __ptext80:
 28524                           	opt stack 0
 28525  0037A6                     _setFilter:
 28526                           	opt stack 25
 28527                           
 28528                           ; BSR set to: 0
 28529                           ;incstack = 0
 28530                           ;incstack = 0
 28531                           ;setFilter@nFilter stored from wreg
 28532  0037A6  CFE8 F066          	movff	wreg,setFilter@nFilter
 28533                           
 28534                           ;main.c: 3341: uint8_t sidh = (long) val >> 21L;
 28535  0037AA  0E15               	movlw	21
 28536  0037AC  0100               	movlb	0	; () banked
 28537  0037AE  6F60               	movwf	??_setFilter& (0+255),b
 28538  0037B0  C023  F061         	movff	setFilter@val,??_setFilter+1
 28539  0037B4  C024  F062         	movff	setFilter@val+1,??_setFilter+2
 28540  0037B8  C025  F063         	movff	setFilter@val+2,??_setFilter+3
 28541  0037BC  C026  F064         	movff	setFilter@val+3,??_setFilter+4
 28542  0037C0                     u22055:
 28543  0037C0  6760               	tstfsz	??_setFilter& (0+255),b
 28544  0037C2  D001               	goto	u22056
 28545  0037C4  D007               	goto	u22057
 28546  0037C6                     u22056:
 28547  0037C6  3564               	rlcf	(??_setFilter+4)& (0+255),w,b
 28548  0037C8  3364               	rrcf	(??_setFilter+4)& (0+255),f,b
 28549  0037CA  3363               	rrcf	(??_setFilter+3)& (0+255),f,b
 28550  0037CC  3362               	rrcf	(??_setFilter+2)& (0+255),f,b
 28551  0037CE  3361               	rrcf	(??_setFilter+1)& (0+255),f,b
 28552  0037D0  2F60               	decfsz	??_setFilter& (0+255),f,b
 28553  0037D2  D7F6               	goto	u22055
 28554  0037D4                     u22057:
 28555  0037D4  5161               	movf	(??_setFilter+1)& (0+255),w,b
 28556  0037D6  6F67               	movwf	setFilter@sidh& (0+255),b
 28557                           
 28558                           ;main.c: 3342: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 28559                           ;main.c: 3343: ((long) (val) & 0x03L) |
 28560                           ;main.c: 3344: 0x08;
 28561  0037D8  C023  F060         	movff	setFilter@val,??_setFilter
 28562  0037DC  0E03               	movlw	3
 28563  0037DE  1760               	andwf	??_setFilter& (0+255),f,b
 28564  0037E0  0E0D               	movlw	13
 28565  0037E2  6F61               	movwf	(??_setFilter+1)& (0+255),b
 28566  0037E4  C023  F062         	movff	setFilter@val,??_setFilter+2
 28567  0037E8  C024  F063         	movff	setFilter@val+1,??_setFilter+3
 28568  0037EC  C025  F064         	movff	setFilter@val+2,??_setFilter+4
 28569  0037F0  C026  F065         	movff	setFilter@val+3,??_setFilter+5
 28570  0037F4                     u22065:
 28571  0037F4  6761               	tstfsz	(??_setFilter+1)& (0+255),b
 28572  0037F6  D001               	goto	u22066
 28573  0037F8  D007               	goto	u22067
 28574  0037FA                     u22066:
 28575  0037FA  3565               	rlcf	(??_setFilter+5)& (0+255),w,b
 28576  0037FC  3365               	rrcf	(??_setFilter+5)& (0+255),f,b
 28577  0037FE  3364               	rrcf	(??_setFilter+4)& (0+255),f,b
 28578  003800  3363               	rrcf	(??_setFilter+3)& (0+255),f,b
 28579  003802  3362               	rrcf	(??_setFilter+2)& (0+255),f,b
 28580  003804  2F61               	decfsz	(??_setFilter+1)& (0+255),f,b
 28581  003806  D7F6               	goto	u22065
 28582  003808                     u22067:
 28583  003808  5162               	movf	(??_setFilter+2)& (0+255),w,b
 28584  00380A  0BE0               	andlw	224
 28585  00380C  1160               	iorwf	??_setFilter& (0+255),w,b
 28586  00380E  0908               	iorlw	8
 28587  003810  6F68               	movwf	setFilter@sidl& (0+255),b
 28588                           
 28589                           ; BSR set to: 0
 28590                           ;main.c: 3345: uint8_t eidh = (long) val >> 8L;
 28591  003812  C024  F069         	movff	setFilter@val+1,setFilter@eidh
 28592                           
 28593                           ; BSR set to: 0
 28594                           ;main.c: 3346: uint8_t eidl = val;
 28595  003816  C023  F06A         	movff	setFilter@val,setFilter@eidl
 28596                           
 28597                           ;main.c: 3348: switch (nFilter) {
 28598  00381A  D090               	goto	l16978
 28599  00381C                     l1389:
 28600                           
 28601                           ; BSR set to: 0
 28602                           ;main.c: 3351: RXF0SIDH = sidh;
 28603  00381C  C067  FF00         	movff	setFilter@sidh,3840	;volatile
 28604                           
 28605                           ;main.c: 3352: RXF0SIDL = sidl;
 28606  003820  C068  FF01         	movff	setFilter@sidl,3841	;volatile
 28607                           
 28608                           ;main.c: 3353: RXF0EIDH = eidh;
 28609  003824  C069  FF02         	movff	setFilter@eidh,3842	;volatile
 28610                           
 28611                           ;main.c: 3354: RXF0EIDL = eidl;
 28612  003828  C06A  FF03         	movff	setFilter@eidl,3843	;volatile
 28613                           
 28614                           ;main.c: 3355: break;
 28615  00382C  D0AA               	goto	l16980
 28616  00382E                     l1391:
 28617                           
 28618                           ; BSR set to: 0
 28619                           ;main.c: 3358: RXF1SIDH = sidh;
 28620  00382E  C067  FF04         	movff	setFilter@sidh,3844	;volatile
 28621                           
 28622                           ;main.c: 3359: RXF1SIDL = sidl;
 28623  003832  C068  FF05         	movff	setFilter@sidl,3845	;volatile
 28624                           
 28625                           ;main.c: 3360: RXF1EIDH = eidh;
 28626  003836  C069  FF06         	movff	setFilter@eidh,3846	;volatile
 28627                           
 28628                           ;main.c: 3361: RXF1EIDL = eidl;
 28629  00383A  C06A  FF07         	movff	setFilter@eidl,3847	;volatile
 28630                           
 28631                           ;main.c: 3362: break;
 28632  00383E  D0A1               	goto	l16980
 28633  003840                     l1392:
 28634                           
 28635                           ; BSR set to: 0
 28636                           ;main.c: 3365: RXF2SIDH = sidh;
 28637  003840  C067  FF08         	movff	setFilter@sidh,3848	;volatile
 28638                           
 28639                           ;main.c: 3366: RXF2SIDL = sidl;
 28640  003844  C068  FF09         	movff	setFilter@sidl,3849	;volatile
 28641                           
 28642                           ;main.c: 3367: RXF2EIDH = eidh;
 28643  003848  C069  FF0A         	movff	setFilter@eidh,3850	;volatile
 28644                           
 28645                           ;main.c: 3368: RXF2EIDL = eidl;
 28646  00384C  C06A  FF0B         	movff	setFilter@eidl,3851	;volatile
 28647                           
 28648                           ;main.c: 3369: break;
 28649  003850  D098               	goto	l16980
 28650  003852                     l1393:
 28651                           
 28652                           ; BSR set to: 0
 28653                           ;main.c: 3372: RXF3SIDH = sidh;
 28654  003852  C067  FF0C         	movff	setFilter@sidh,3852	;volatile
 28655                           
 28656                           ;main.c: 3373: RXF3SIDL = sidl;
 28657  003856  C068  FF0D         	movff	setFilter@sidl,3853	;volatile
 28658                           
 28659                           ;main.c: 3374: RXF3EIDH = eidh;
 28660  00385A  C069  FF0E         	movff	setFilter@eidh,3854	;volatile
 28661                           
 28662                           ;main.c: 3375: RXF3EIDL = eidl;
 28663  00385E  C06A  FF0F         	movff	setFilter@eidl,3855	;volatile
 28664                           
 28665                           ;main.c: 3376: break;
 28666  003862  D08F               	goto	l16980
 28667  003864                     l1394:
 28668                           
 28669                           ; BSR set to: 0
 28670                           ;main.c: 3379: RXF4SIDH = sidh;
 28671  003864  C067  FF10         	movff	setFilter@sidh,3856	;volatile
 28672                           
 28673                           ;main.c: 3380: RXF4SIDL = sidl;
 28674  003868  C068  FF11         	movff	setFilter@sidl,3857	;volatile
 28675                           
 28676                           ;main.c: 3381: RXF4EIDH = eidh;
 28677  00386C  C069  FF12         	movff	setFilter@eidh,3858	;volatile
 28678                           
 28679                           ;main.c: 3382: RXF4EIDL = eidl;
 28680  003870  C06A  FF13         	movff	setFilter@eidl,3859	;volatile
 28681                           
 28682                           ;main.c: 3383: break;
 28683  003874  D086               	goto	l16980
 28684  003876                     l1395:
 28685                           
 28686                           ; BSR set to: 0
 28687                           ;main.c: 3386: RXF5SIDH = sidh;
 28688  003876  C067  FF14         	movff	setFilter@sidh,3860	;volatile
 28689                           
 28690                           ;main.c: 3387: RXF5SIDL = sidl;
 28691  00387A  C068  FF15         	movff	setFilter@sidl,3861	;volatile
 28692                           
 28693                           ;main.c: 3388: RXF5EIDH = eidh;
 28694  00387E  C069  FF16         	movff	setFilter@eidh,3862	;volatile
 28695                           
 28696                           ;main.c: 3389: RXF5EIDL = eidl;
 28697  003882  C06A  FF17         	movff	setFilter@eidl,3863	;volatile
 28698                           
 28699                           ;main.c: 3390: break;
 28700  003886  D07D               	goto	l16980
 28701  003888                     l1396:
 28702                           
 28703                           ; BSR set to: 0
 28704                           ;main.c: 3393: RXF6SIDH = sidh;
 28705  003888  C067  FD60         	movff	setFilter@sidh,3424	;volatile
 28706                           
 28707                           ;main.c: 3394: RXF6SIDL = sidl;
 28708  00388C  C068  FD61         	movff	setFilter@sidl,3425	;volatile
 28709                           
 28710                           ;main.c: 3395: RXF6EIDH = eidh;
 28711  003890  C069  FD62         	movff	setFilter@eidh,3426	;volatile
 28712                           
 28713                           ;main.c: 3396: RXF6EIDL = eidl;
 28714  003894  C06A  FD63         	movff	setFilter@eidl,3427	;volatile
 28715                           
 28716                           ;main.c: 3397: break;
 28717  003898  D074               	goto	l16980
 28718  00389A                     l1397:
 28719                           
 28720                           ; BSR set to: 0
 28721                           ;main.c: 3400: RXF7SIDH = sidh;
 28722  00389A  C067  FD64         	movff	setFilter@sidh,3428	;volatile
 28723                           
 28724                           ;main.c: 3401: RXF7SIDL = sidl;
 28725  00389E  C068  FD65         	movff	setFilter@sidl,3429	;volatile
 28726                           
 28727                           ;main.c: 3402: RXF7EIDH = eidh;
 28728  0038A2  C069  FD66         	movff	setFilter@eidh,3430	;volatile
 28729                           
 28730                           ;main.c: 3403: RXF7EIDL = eidl;
 28731  0038A6  C06A  FD67         	movff	setFilter@eidl,3431	;volatile
 28732                           
 28733                           ;main.c: 3404: break;
 28734  0038AA  D06B               	goto	l16980
 28735  0038AC                     l1398:
 28736                           
 28737                           ; BSR set to: 0
 28738                           ;main.c: 3407: RXF8SIDH = sidh;
 28739  0038AC  C067  FD68         	movff	setFilter@sidh,3432	;volatile
 28740                           
 28741                           ;main.c: 3408: RXF8SIDL = sidl;
 28742  0038B0  C068  FD69         	movff	setFilter@sidl,3433	;volatile
 28743                           
 28744                           ;main.c: 3409: RXF8EIDH = eidh;
 28745  0038B4  C069  FD6A         	movff	setFilter@eidh,3434	;volatile
 28746                           
 28747                           ;main.c: 3410: RXF8EIDL = eidl;
 28748  0038B8  C06A  FD6B         	movff	setFilter@eidl,3435	;volatile
 28749                           
 28750                           ;main.c: 3411: break;
 28751  0038BC  D062               	goto	l16980
 28752  0038BE                     l1399:
 28753                           
 28754                           ; BSR set to: 0
 28755                           ;main.c: 3414: RXF9SIDH = sidh;
 28756  0038BE  C067  FD70         	movff	setFilter@sidh,3440	;volatile
 28757                           
 28758                           ;main.c: 3415: RXF9SIDL = sidl;
 28759  0038C2  C068  FD71         	movff	setFilter@sidl,3441	;volatile
 28760                           
 28761                           ;main.c: 3416: RXF9EIDH = eidh;
 28762  0038C6  C069  FD72         	movff	setFilter@eidh,3442	;volatile
 28763                           
 28764                           ;main.c: 3417: RXF9EIDL = eidl;
 28765  0038CA  C06A  FD73         	movff	setFilter@eidl,3443	;volatile
 28766                           
 28767                           ;main.c: 3418: break;
 28768  0038CE  D059               	goto	l16980
 28769  0038D0                     l1400:
 28770                           
 28771                           ; BSR set to: 0
 28772                           ;main.c: 3421: RXF10SIDH = sidh;
 28773  0038D0  C067  FD74         	movff	setFilter@sidh,3444	;volatile
 28774                           
 28775                           ;main.c: 3422: RXF10SIDL = sidl;
 28776  0038D4  C068  FD75         	movff	setFilter@sidl,3445	;volatile
 28777                           
 28778                           ;main.c: 3423: RXF10EIDH = eidh;
 28779  0038D8  C069  FD76         	movff	setFilter@eidh,3446	;volatile
 28780                           
 28781                           ;main.c: 3424: RXF10EIDL = eidl;
 28782  0038DC  C06A  FD77         	movff	setFilter@eidl,3447	;volatile
 28783                           
 28784                           ;main.c: 3425: break;
 28785  0038E0  D050               	goto	l16980
 28786  0038E2                     l1401:
 28787                           
 28788                           ; BSR set to: 0
 28789                           ;main.c: 3428: RXF11SIDH = sidh;
 28790  0038E2  C067  FD78         	movff	setFilter@sidh,3448	;volatile
 28791                           
 28792                           ;main.c: 3429: RXF11SIDL = sidl;
 28793  0038E6  C068  FD79         	movff	setFilter@sidl,3449	;volatile
 28794                           
 28795                           ;main.c: 3430: RXF11EIDH = eidh;
 28796  0038EA  C069  FD7A         	movff	setFilter@eidh,3450	;volatile
 28797                           
 28798                           ;main.c: 3431: RXF11EIDL = eidl;
 28799  0038EE  C06A  FD7B         	movff	setFilter@eidl,3451	;volatile
 28800                           
 28801                           ;main.c: 3432: break;
 28802  0038F2  D047               	goto	l16980
 28803  0038F4                     l1402:
 28804                           
 28805                           ; BSR set to: 0
 28806                           ;main.c: 3435: RXF12SIDH = sidh;
 28807  0038F4  C067  FD80         	movff	setFilter@sidh,3456	;volatile
 28808                           
 28809                           ;main.c: 3436: RXF12SIDL = sidl;
 28810  0038F8  C068  FD81         	movff	setFilter@sidl,3457	;volatile
 28811                           
 28812                           ;main.c: 3437: RXF12EIDH = eidh;
 28813  0038FC  C069  FD82         	movff	setFilter@eidh,3458	;volatile
 28814                           
 28815                           ;main.c: 3438: RXF12EIDL = eidl;
 28816  003900  C06A  FD83         	movff	setFilter@eidl,3459	;volatile
 28817                           
 28818                           ;main.c: 3439: break;
 28819  003904  D03E               	goto	l16980
 28820  003906                     l1403:
 28821                           
 28822                           ; BSR set to: 0
 28823                           ;main.c: 3442: RXF13SIDH = sidh;
 28824  003906  C067  FD84         	movff	setFilter@sidh,3460	;volatile
 28825                           
 28826                           ;main.c: 3443: RXF13SIDL = sidl;
 28827  00390A  C068  FD85         	movff	setFilter@sidl,3461	;volatile
 28828                           
 28829                           ;main.c: 3444: RXF13EIDH = eidh;
 28830  00390E  C069  FD86         	movff	setFilter@eidh,3462	;volatile
 28831                           
 28832                           ;main.c: 3445: RXF13EIDL = eidl;
 28833  003912  C06A  FD87         	movff	setFilter@eidl,3463	;volatile
 28834                           
 28835                           ;main.c: 3446: break;
 28836  003916  D035               	goto	l16980
 28837  003918                     l1404:
 28838                           
 28839                           ; BSR set to: 0
 28840                           ;main.c: 3449: RXF14SIDH = sidh;
 28841  003918  C067  FD88         	movff	setFilter@sidh,3464	;volatile
 28842                           
 28843                           ;main.c: 3450: RXF14SIDL = sidl;
 28844  00391C  C068  FD89         	movff	setFilter@sidl,3465	;volatile
 28845                           
 28846                           ;main.c: 3451: RXF14EIDH = eidh;
 28847  003920  C069  FD8A         	movff	setFilter@eidh,3466	;volatile
 28848                           
 28849                           ;main.c: 3452: RXF14EIDL = eidl;
 28850  003924  C06A  FD8B         	movff	setFilter@eidl,3467	;volatile
 28851                           
 28852                           ;main.c: 3453: break;
 28853  003928  D02C               	goto	l16980
 28854  00392A                     l1405:
 28855                           
 28856                           ; BSR set to: 0
 28857                           ;main.c: 3456: RXF15SIDH = sidh;
 28858  00392A  C067  FD90         	movff	setFilter@sidh,3472	;volatile
 28859                           
 28860                           ;main.c: 3457: RXF15SIDL = sidl;
 28861  00392E  C068  FD91         	movff	setFilter@sidl,3473	;volatile
 28862                           
 28863                           ;main.c: 3458: RXF15EIDH = eidh;
 28864  003932  C069  FD92         	movff	setFilter@eidh,3474	;volatile
 28865                           
 28866                           ;main.c: 3459: RXF15EIDL = eidl;
 28867  003936  C06A  FD93         	movff	setFilter@eidl,3475	;volatile
 28868                           
 28869                           ;main.c: 3460: break;
 28870  00393A  D023               	goto	l16980
 28871  00393C                     l16978:
 28872                           
 28873                           ; BSR set to: 0
 28874  00393C  5166               	movf	setFilter@nFilter& (0+255),w,b
 28875                           
 28876                           ; Switch size 1, requested type "space"
 28877                           ; Number of cases is 16, Range of values is 0 to 15
 28878                           ; switch strategies available:
 28879                           ; Name         Instructions Cycles
 28880                           ; simple_byte           49    25 (average)
 28881                           ;	Chosen strategy is simple_byte
 28882  00393E  E101 D76D          	bz	l1389
 28883  003942  0A01               	xorlw	1	; case 1
 28884  003944  E101 D773          	bz	l1391
 28885  003948  0A03               	xorlw	3	; case 2
 28886  00394A  E101 D779          	bz	l1392
 28887  00394E  0A01               	xorlw	1	; case 3
 28888  003950  E080               	bz	l1393
 28889  003952  0A07               	xorlw	7	; case 4
 28890  003954  E087               	bz	l1394
 28891  003956  0A01               	xorlw	1	; case 5
 28892  003958  E08E               	bz	l1395
 28893  00395A  0A03               	xorlw	3	; case 6
 28894  00395C  E095               	bz	l1396
 28895  00395E  0A01               	xorlw	1	; case 7
 28896  003960  E09C               	bz	l1397
 28897  003962  0A0F               	xorlw	15	; case 8
 28898  003964  E0A3               	bz	l1398
 28899  003966  0A01               	xorlw	1	; case 9
 28900  003968  E0AA               	bz	l1399
 28901  00396A  0A03               	xorlw	3	; case 10
 28902  00396C  E0B1               	bz	l1400
 28903  00396E  0A01               	xorlw	1	; case 11
 28904  003970  E0B8               	bz	l1401
 28905  003972  0A07               	xorlw	7	; case 12
 28906  003974  E0BF               	bz	l1402
 28907  003976  0A01               	xorlw	1	; case 13
 28908  003978  E0C6               	bz	l1403
 28909  00397A  0A03               	xorlw	3	; case 14
 28910  00397C  E0CD               	bz	l1404
 28911  00397E  0A01               	xorlw	1	; case 15
 28912  003980  E0D4               	bz	l1405
 28913  003982                     l16980:
 28914                           
 28915                           ; BSR set to: 0
 28916                           ;main.c: 3463: if ( bPersistent ) {
 28917  003982  5027               	movf	setFilter@bPersistent,w,c
 28918  003984  E034               	bz	l1407
 28919                           
 28920                           ; BSR set to: 0
 28921                           ;main.c: 3464: (Busy_eep(), Write_b_eep(0x20 + 0 + 4*nFilter,( ( id >> 24 ) & 0xff )));
 28922  003986  ECC6  F035         	call	_Busy_eep	;wreg free
 28923  00398A  D832               	call	PL20	;call to abstracted procedure
 28924  00398C  0E20               	movlw	32
 28925  00398E  2560               	addwf	??_setFilter& (0+255),w,b
 28926  003990  6E1F               	movwf	?_Write_b_eep,c
 28927  003992  0E00               	movlw	0
 28928  003994  2161               	addwfc	(??_setFilter+1)& (0+255),w,b
 28929  003996  6E20               	movwf	?_Write_b_eep+1,c
 28930  003998  C03F  F021         	movff	_id+3,?_Write_b_eep+2
 28931  00399C  ECC5  F034         	call	_Write_b_eep	;wreg free
 28932                           
 28933                           ;main.c: 3465: (Busy_eep(), Write_b_eep(0x20 + 1 + 4*nFilter,( ( id >> 16 ) & 0xff )));
 28934  0039A0  ECC6  F035         	call	_Busy_eep	;wreg free
 28935  0039A4  D825               	call	PL20	;call to abstracted procedure
 28936  0039A6  0E21               	movlw	33
 28937  0039A8  2560               	addwf	??_setFilter& (0+255),w,b
 28938  0039AA  6E1F               	movwf	?_Write_b_eep,c
 28939  0039AC  0E00               	movlw	0
 28940  0039AE  2161               	addwfc	(??_setFilter+1)& (0+255),w,b
 28941  0039B0  6E20               	movwf	?_Write_b_eep+1,c
 28942  0039B2  C03E  F021         	movff	_id+2,?_Write_b_eep+2
 28943  0039B6  ECC5  F034         	call	_Write_b_eep	;wreg free
 28944                           
 28945                           ;main.c: 3466: (Busy_eep(), Write_b_eep(0x20 + 2 + 4*nFilter,( ( id >> 8 ) & 0xff )));
 28946  0039BA  ECC6  F035         	call	_Busy_eep	;wreg free
 28947  0039BE  D818               	call	PL20	;call to abstracted procedure
 28948  0039C0  0E22               	movlw	34
 28949  0039C2  2560               	addwf	??_setFilter& (0+255),w,b
 28950  0039C4  6E1F               	movwf	?_Write_b_eep,c
 28951  0039C6  0E00               	movlw	0
 28952  0039C8  2161               	addwfc	(??_setFilter+1)& (0+255),w,b
 28953  0039CA  6E20               	movwf	?_Write_b_eep+1,c
 28954  0039CC  C03D  F021         	movff	_id+1,?_Write_b_eep+2
 28955  0039D0  ECC5  F034         	call	_Write_b_eep	;wreg free
 28956                           
 28957                           ;main.c: 3467: (Busy_eep(), Write_b_eep(0x20 + 3 + 4*nFilter,( id & 0xff )));
 28958  0039D4  ECC6  F035         	call	_Busy_eep	;wreg free
 28959  0039D8  D80B               	call	PL20	;call to abstracted procedure
 28960  0039DA  0E23               	movlw	35
 28961  0039DC  2560               	addwf	??_setFilter& (0+255),w,b
 28962  0039DE  6E1F               	movwf	?_Write_b_eep,c
 28963  0039E0  0E00               	movlw	0
 28964  0039E2  2161               	addwfc	(??_setFilter+1)& (0+255),w,b
 28965  0039E4  6E20               	movwf	?_Write_b_eep+1,c
 28966  0039E6  C03C  F021         	movff	_id,?_Write_b_eep+2
 28967  0039EA  ECC5  F034         	call	_Write_b_eep	;wreg free
 28968  0039EE                     l1407:
 28969  0039EE  0012               	return	
 28970  0039F0                     __end_of_setFilter:
 28971                           	opt stack 0
 28972  0039F0                     PL20:
 28973                           	opt stack 25
 28974  0039F0  0100               	movlb	0	; () banked
 28975  0039F2  5166               	movf	setFilter@nFilter& (0+255),w,b
 28976  0039F4  6F60               	movwf	??_setFilter& (0+255),b
 28977  0039F6  6B61               	clrf	(??_setFilter+1)& (0+255),b
 28978  0039F8  90D8               	bcf	status,0,c
 28979  0039FA  3760               	rlcf	??_setFilter& (0+255),f,b
 28980  0039FC  3761               	rlcf	(??_setFilter+1)& (0+255),f,b
 28981  0039FE  90D8               	bcf	status,0,c
 28982  003A00  3760               	rlcf	??_setFilter& (0+255),f,b
 28983  003A02  3761               	rlcf	(??_setFilter+1)& (0+255),f,b
 28984  003A04  0012               	return	
 28985  003A06                     __end_ofPL20:
 28986                           	opt stack 0
 28987                           tblptru	equ	0xFF8
 28988                           tblptrh	equ	0xFF7
 28989                           tblptrl	equ	0xFF6
 28990                           tablat	equ	0xFF5
 28991                           prodh	equ	0xFF4
 28992                           prodl	equ	0xFF3
 28993                           intcon	equ	0xFF2
 28994                           indf0	equ	0xFEF
 28995                           postinc0	equ	0xFEE
 28996                           fsr0h	equ	0xFEA
 28997                           fsr0l	equ	0xFE9
 28998                           wreg	equ	0xFE8
 28999                           indf1	equ	0xFE7
 29000                           postinc1	equ	0xFE6
 29001                           postdec1	equ	0xFE5
 29002                           fsr1h	equ	0xFE2
 29003                           fsr1l	equ	0xFE1
 29004                           indf2	equ	0xFDF
 29005                           postinc2	equ	0xFDE
 29006                           postdec2	equ	0xFDD
 29007                           plusw2	equ	0xFDB
 29008                           fsr2h	equ	0xFDA
 29009                           fsr2l	equ	0xFD9
 29010                           status	equ	0xFD8
 29011                           
 29012 ;; *************** function _Write_b_eep *****************
 29013 ;; Defined at:
 29014 ;;		line 31 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/write_B.c"
 29015 ;; Parameters:    Size  Location     Type
 29016 ;;  badd            2   30[COMRAM] unsigned int 
 29017 ;;  bdat            1   32[COMRAM] unsigned char 
 29018 ;; Auto vars:     Size  Location     Type
 29019 ;;  GIE_BIT_VAL     1   33[COMRAM] unsigned char 
 29020 ;; Return value:  Size  Location     Type
 29021 ;;		None               void
 29022 ;; Registers used:
 29023 ;;		wreg, status,2
 29024 ;; Tracked objects:
 29025 ;;		On entry : 0/0
 29026 ;;		On exit  : 0/0
 29027 ;;		Unchanged: 0/0
 29028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29029 ;;      Params:         3       0       0       0       0       0       0
 29030 ;;      Locals:         1       0       0       0       0       0       0
 29031 ;;      Temps:          0       0       0       0       0       0       0
 29032 ;;      Totals:         4       0       0       0       0       0       0
 29033 ;;Total ram usage:        4 bytes
 29034 ;; Hardware stack levels used:    1
 29035 ;; Hardware stack levels required when called:    3
 29036 ;; This function calls:
 29037 ;;		Nothing
 29038 ;; This function is called by:
 29039 ;;		_init_app_eeprom
 29040 ;;		_doModeVerbose
 29041 ;;		_doModeVscp
 29042 ;;		_doModeSLCAN
 29043 ;;		_setFilter
 29044 ;; This function uses a non-reentrant model
 29045 ;;
 29046                           
 29047                           	psect	text81
 29048  00698A                     __ptext81:
 29049                           	opt stack 0
 29050  00698A                     _Write_b_eep:
 29051                           	opt stack 26
 29052                           
 29053                           ;incstack = 0
 29054                           ;incstack = 0
 29055  00698A  C01F  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 29056  00698E  C021  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 29057  006992  9EA6               	bcf	4006,7,c	;volatile
 29058  006994  9CA6               	bcf	4006,6,c	;volatile
 29059  006996  84A6               	bsf	4006,2,c	;volatile
 29060  006998  0E00               	movlw	0
 29061  00699A  BEF2               	btfsc	intcon,7,c	;volatile
 29062  00699C  0E01               	movlw	1
 29063  00699E  6E22               	movwf	Write_b_eep@GIE_BIT_VAL,c
 29064  0069A0  9EF2               	bcf	intcon,7,c	;volatile
 29065  0069A2  0E55               	movlw	85
 29066  0069A4  6EA7               	movwf	4007,c	;volatile
 29067  0069A6  0EAA               	movlw	170
 29068  0069A8  6EA7               	movwf	4007,c	;volatile
 29069  0069AA  82A6               	bsf	4006,1,c	;volatile
 29070  0069AC                     l1955:
 29071  0069AC  B2A6               	btfsc	4006,1,c	;volatile
 29072  0069AE  D7FE               	goto	l1955
 29073  0069B0  B022               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 29074  0069B2  D002               	bra	u22165
 29075  0069B4  9EF2               	bcf	intcon,7,c	;volatile
 29076  0069B6  D001               	bra	u22166
 29077  0069B8                     u22165:
 29078  0069B8  8EF2               	bsf	intcon,7,c	;volatile
 29079  0069BA                     u22166:
 29080  0069BA  94A6               	bcf	4006,2,c	;volatile
 29081  0069BC  0012               	return	
 29082  0069BE                     __end_of_Write_b_eep:
 29083                           	opt stack 0
 29084                           tblptru	equ	0xFF8
 29085                           tblptrh	equ	0xFF7
 29086                           tblptrl	equ	0xFF6
 29087                           tablat	equ	0xFF5
 29088                           prodh	equ	0xFF4
 29089                           prodl	equ	0xFF3
 29090                           intcon	equ	0xFF2
 29091                           indf0	equ	0xFEF
 29092                           postinc0	equ	0xFEE
 29093                           fsr0h	equ	0xFEA
 29094                           fsr0l	equ	0xFE9
 29095                           wreg	equ	0xFE8
 29096                           indf1	equ	0xFE7
 29097                           postinc1	equ	0xFE6
 29098                           postdec1	equ	0xFE5
 29099                           fsr1h	equ	0xFE2
 29100                           fsr1l	equ	0xFE1
 29101                           indf2	equ	0xFDF
 29102                           postinc2	equ	0xFDE
 29103                           postdec2	equ	0xFDD
 29104                           plusw2	equ	0xFDB
 29105                           fsr2h	equ	0xFDA
 29106                           fsr2l	equ	0xFD9
 29107                           status	equ	0xFD8
 29108                           
 29109 ;; *************** function _Busy_eep *****************
 29110 ;; Defined at:
 29111 ;;		line 13 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/busy_eep.c"
 29112 ;; Parameters:    Size  Location     Type
 29113 ;;		None
 29114 ;; Auto vars:     Size  Location     Type
 29115 ;;		None
 29116 ;; Return value:  Size  Location     Type
 29117 ;;		None               void
 29118 ;; Registers used:
 29119 ;;		None
 29120 ;; Tracked objects:
 29121 ;;		On entry : 0/0
 29122 ;;		On exit  : 0/0
 29123 ;;		Unchanged: 0/0
 29124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29125 ;;      Params:         0       0       0       0       0       0       0
 29126 ;;      Locals:         0       0       0       0       0       0       0
 29127 ;;      Temps:          0       0       0       0       0       0       0
 29128 ;;      Totals:         0       0       0       0       0       0       0
 29129 ;;Total ram usage:        0 bytes
 29130 ;; Hardware stack levels used:    1
 29131 ;; Hardware stack levels required when called:    3
 29132 ;; This function calls:
 29133 ;;		Nothing
 29134 ;; This function is called by:
 29135 ;;		_init_app_eeprom
 29136 ;;		_doModeVerbose
 29137 ;;		_doModeVscp
 29138 ;;		_doModeSLCAN
 29139 ;;		_setFilter
 29140 ;; This function uses a non-reentrant model
 29141 ;;
 29142                           
 29143                           	psect	text82
 29144  006B8C                     __ptext82:
 29145                           	opt stack 0
 29146  006B8C                     _Busy_eep:
 29147                           	opt stack 26
 29148  006B8C                     l1930:
 29149  006B8C  A2A6               	btfss	4006,1,c	;volatile
 29150  006B8E  0012               	return	
 29151  006B90  D7FD               	goto	l1930
 29152  006B92                     __end_of_Busy_eep:
 29153                           	opt stack 0
 29154                           tblptru	equ	0xFF8
 29155                           tblptrh	equ	0xFF7
 29156                           tblptrl	equ	0xFF6
 29157                           tablat	equ	0xFF5
 29158                           prodh	equ	0xFF4
 29159                           prodl	equ	0xFF3
 29160                           intcon	equ	0xFF2
 29161                           indf0	equ	0xFEF
 29162                           postinc0	equ	0xFEE
 29163                           fsr0h	equ	0xFEA
 29164                           fsr0l	equ	0xFE9
 29165                           wreg	equ	0xFE8
 29166                           indf1	equ	0xFE7
 29167                           postinc1	equ	0xFE6
 29168                           postdec1	equ	0xFE5
 29169                           fsr1h	equ	0xFE2
 29170                           fsr1l	equ	0xFE1
 29171                           indf2	equ	0xFDF
 29172                           postinc2	equ	0xFDE
 29173                           postdec2	equ	0xFDD
 29174                           plusw2	equ	0xFDB
 29175                           fsr2h	equ	0xFDA
 29176                           fsr2l	equ	0xFD9
 29177                           status	equ	0xFD8
 29178                           
 29179 ;; *************** function _ECANSetOperationMode *****************
 29180 ;; Defined at:
 29181 ;;		line 1014 in file "ECAN.c"
 29182 ;; Parameters:    Size  Location     Type
 29183 ;;  mode            1    wreg     enum E16337
 29184 ;; Auto vars:     Size  Location     Type
 29185 ;;  mode            1   30[COMRAM] enum E16337
 29186 ;; Return value:  Size  Location     Type
 29187 ;;		None               void
 29188 ;; Registers used:
 29189 ;;		wreg, status,2, status,0
 29190 ;; Tracked objects:
 29191 ;;		On entry : 0/1
 29192 ;;		On exit  : 0/0
 29193 ;;		Unchanged: 0/0
 29194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29195 ;;      Params:         0       0       0       0       0       0       0
 29196 ;;      Locals:         1       0       0       0       0       0       0
 29197 ;;      Temps:          0       0       0       0       0       0       0
 29198 ;;      Totals:         1       0       0       0       0       0       0
 29199 ;;Total ram usage:        1 bytes
 29200 ;; Hardware stack levels used:    1
 29201 ;; Hardware stack levels required when called:    3
 29202 ;; This function calls:
 29203 ;;		Nothing
 29204 ;; This function is called by:
 29205 ;;		_main
 29206 ;;		_init_app_ram
 29207 ;;		_doModeVerbose
 29208 ;;		_doModeVscp
 29209 ;;		_doModeSLCAN
 29210 ;;		_ECANInitialize
 29211 ;; This function uses a non-reentrant model
 29212 ;;
 29213                           
 29214                           	psect	text83
 29215  006AE8                     __ptext83:
 29216                           	opt stack 0
 29217  006AE8                     _ECANSetOperationMode:
 29218                           	opt stack 26
 29219                           
 29220                           ;incstack = 0
 29221                           ;incstack = 0
 29222                           ;ECANSetOperationMode@mode stored from wreg
 29223  006AE8  CFE8 F01F          	movff	wreg,ECANSetOperationMode@mode
 29224                           
 29225                           ;ECAN.c: 1015: CANCON &= 0x1F;
 29226  006AEC  0E1F               	movlw	31
 29227  006AEE  166F               	andwf	3951,f,c	;volatile
 29228                           
 29229                           ;ECAN.c: 1016: CANCON |= mode;
 29230  006AF0  501F               	movf	ECANSetOperationMode@mode,w,c
 29231  006AF2  126F               	iorwf	3951,f,c	;volatile
 29232  006AF4                     l15466:
 29233  006AF4  506F               	movf	3951,w,c	;volatile
 29234  006AF6  0BE0               	andlw	224
 29235  006AF8  181F               	xorwf	ECANSetOperationMode@mode,w,c
 29236  006AFA  B4D8               	btfsc	status,2,c
 29237  006AFC  0012               	return	
 29238  006AFE  D7FA               	goto	l15466
 29239  006B00                     __end_of_ECANSetOperationMode:
 29240                           	opt stack 0
 29241                           tblptru	equ	0xFF8
 29242                           tblptrh	equ	0xFF7
 29243                           tblptrl	equ	0xFF6
 29244                           tablat	equ	0xFF5
 29245                           prodh	equ	0xFF4
 29246                           prodl	equ	0xFF3
 29247                           intcon	equ	0xFF2
 29248                           indf0	equ	0xFEF
 29249                           postinc0	equ	0xFEE
 29250                           fsr0h	equ	0xFEA
 29251                           fsr0l	equ	0xFE9
 29252                           wreg	equ	0xFE8
 29253                           indf1	equ	0xFE7
 29254                           postinc1	equ	0xFE6
 29255                           postdec1	equ	0xFE5
 29256                           fsr1h	equ	0xFE2
 29257                           fsr1l	equ	0xFE1
 29258                           indf2	equ	0xFDF
 29259                           postinc2	equ	0xFDE
 29260                           postdec2	equ	0xFDD
 29261                           plusw2	equ	0xFDB
 29262                           fsr2h	equ	0xFDA
 29263                           fsr2l	equ	0xFD9
 29264                           status	equ	0xFD8
 29265                           
 29266 ;; *************** function _Read_b_eep *****************
 29267 ;; Defined at:
 29268 ;;		line 24 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/EEP/read_B.c"
 29269 ;; Parameters:    Size  Location     Type
 29270 ;;  badd            2   30[COMRAM] unsigned int 
 29271 ;; Auto vars:     Size  Location     Type
 29272 ;;		None
 29273 ;; Return value:  Size  Location     Type
 29274 ;;                  1    wreg      unsigned char 
 29275 ;; Registers used:
 29276 ;;		wreg, status,2
 29277 ;; Tracked objects:
 29278 ;;		On entry : 0/0
 29279 ;;		On exit  : 0/0
 29280 ;;		Unchanged: 0/0
 29281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29282 ;;      Params:         2       0       0       0       0       0       0
 29283 ;;      Locals:         0       0       0       0       0       0       0
 29284 ;;      Temps:          0       0       0       0       0       0       0
 29285 ;;      Totals:         2       0       0       0       0       0       0
 29286 ;;Total ram usage:        2 bytes
 29287 ;; Hardware stack levels used:    1
 29288 ;; Hardware stack levels required when called:    3
 29289 ;; This function calls:
 29290 ;;		Nothing
 29291 ;; This function is called by:
 29292 ;;		_main
 29293 ;;		_init_app_ram
 29294 ;; This function uses a non-reentrant model
 29295 ;;
 29296                           
 29297                           	psect	text84
 29298  006B4E                     __ptext84:
 29299                           	opt stack 0
 29300  006B4E                     _Read_b_eep:
 29301                           	opt stack 24
 29302                           
 29303                           ;incstack = 0
 29304                           ;incstack = 0
 29305  006B4E  C01F  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 29306  006B52  9CA6               	bcf	4006,6,c	;volatile
 29307  006B54  9EA6               	bcf	4006,7,c	;volatile
 29308  006B56  80A6               	bsf	4006,0,c	;volatile
 29309  006B58  F000               	nop		;# 
 29310  006B5A  F000               	nop		;# 
 29311  006B5C  50A8               	movf	4008,w,c	;volatile
 29312  006B5E  0012               	return	
 29313  006B60                     __end_of_Read_b_eep:
 29314                           	opt stack 0
 29315                           tblptru	equ	0xFF8
 29316                           tblptrh	equ	0xFF7
 29317                           tblptrl	equ	0xFF6
 29318                           tablat	equ	0xFF5
 29319                           prodh	equ	0xFF4
 29320                           prodl	equ	0xFF3
 29321                           intcon	equ	0xFF2
 29322                           indf0	equ	0xFEF
 29323                           postinc0	equ	0xFEE
 29324                           fsr0h	equ	0xFEA
 29325                           fsr0l	equ	0xFE9
 29326                           wreg	equ	0xFE8
 29327                           indf1	equ	0xFE7
 29328                           postinc1	equ	0xFE6
 29329                           postdec1	equ	0xFE5
 29330                           fsr1h	equ	0xFE2
 29331                           fsr1l	equ	0xFE1
 29332                           indf2	equ	0xFDF
 29333                           postinc2	equ	0xFDE
 29334                           postdec2	equ	0xFDD
 29335                           plusw2	equ	0xFDB
 29336                           fsr2h	equ	0xFDA
 29337                           fsr2l	equ	0xFD9
 29338                           status	equ	0xFD8
 29339                           
 29340 ;; *************** function _WriteTimer0 *****************
 29341 ;; Defined at:
 29342 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 29343 ;; Parameters:    Size  Location     Type
 29344 ;;  timer0          2   30[COMRAM] unsigned int 
 29345 ;; Auto vars:     Size  Location     Type
 29346 ;;  timer           2   32[COMRAM] struct Timers
 29347 ;; Return value:  Size  Location     Type
 29348 ;;		None               void
 29349 ;; Registers used:
 29350 ;;		None
 29351 ;; Tracked objects:
 29352 ;;		On entry : 0/0
 29353 ;;		On exit  : 0/0
 29354 ;;		Unchanged: 0/0
 29355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29356 ;;      Params:         2       0       0       0       0       0       0
 29357 ;;      Locals:         2       0       0       0       0       0       0
 29358 ;;      Temps:          0       0       0       0       0       0       0
 29359 ;;      Totals:         4       0       0       0       0       0       0
 29360 ;;Total ram usage:        4 bytes
 29361 ;; Hardware stack levels used:    1
 29362 ;; Hardware stack levels required when called:    3
 29363 ;; This function calls:
 29364 ;;		Nothing
 29365 ;; This function is called by:
 29366 ;;		_init
 29367 ;; This function uses a non-reentrant model
 29368 ;;
 29369                           
 29370                           	psect	text85
 29371  006B60                     __ptext85:
 29372                           	opt stack 0
 29373  006B60                     _WriteTimer0:
 29374                           	opt stack 26
 29375                           
 29376                           ;incstack = 0
 29377                           ;incstack = 0
 29378  006B60  C01F  F021         	movff	WriteTimer0@timer0,WriteTimer0@timer
 29379  006B64  C020  F022         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 29380  006B68  C022  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 29381  006B6C  C021  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 29382  006B70  0012               	return	
 29383  006B72                     __end_of_WriteTimer0:
 29384                           	opt stack 0
 29385                           tblptru	equ	0xFF8
 29386                           tblptrh	equ	0xFF7
 29387                           tblptrl	equ	0xFF6
 29388                           tablat	equ	0xFF5
 29389                           prodh	equ	0xFF4
 29390                           prodl	equ	0xFF3
 29391                           intcon	equ	0xFF2
 29392                           indf0	equ	0xFEF
 29393                           postinc0	equ	0xFEE
 29394                           fsr0h	equ	0xFEA
 29395                           fsr0l	equ	0xFE9
 29396                           wreg	equ	0xFE8
 29397                           indf1	equ	0xFE7
 29398                           postinc1	equ	0xFE6
 29399                           postdec1	equ	0xFE5
 29400                           fsr1h	equ	0xFE2
 29401                           fsr1l	equ	0xFE1
 29402                           indf2	equ	0xFDF
 29403                           postinc2	equ	0xFDE
 29404                           postdec2	equ	0xFDD
 29405                           plusw2	equ	0xFDB
 29406                           fsr2h	equ	0xFDA
 29407                           fsr2l	equ	0xFD9
 29408                           status	equ	0xFD8
 29409                           
 29410 ;; *************** function _fifo_init *****************
 29411 ;; Defined at:
 29412 ;;		line 14 in file "fifo.c"
 29413 ;; Parameters:    Size  Location     Type
 29414 ;;  f               2   30[COMRAM] PTR struct .
 29415 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29416 ;;  buf             2   32[COMRAM] PTR const void 
 29417 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 29418 ;;  size            2   34[COMRAM] unsigned short 
 29419 ;; Auto vars:     Size  Location     Type
 29420 ;;		None
 29421 ;; Return value:  Size  Location     Type
 29422 ;;		None               void
 29423 ;; Registers used:
 29424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29425 ;; Tracked objects:
 29426 ;;		On entry : 0/2
 29427 ;;		On exit  : 0/0
 29428 ;;		Unchanged: 0/0
 29429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29430 ;;      Params:         6       0       0       0       0       0       0
 29431 ;;      Locals:         0       0       0       0       0       0       0
 29432 ;;      Temps:          0       0       0       0       0       0       0
 29433 ;;      Totals:         6       0       0       0       0       0       0
 29434 ;;Total ram usage:        6 bytes
 29435 ;; Hardware stack levels used:    1
 29436 ;; Hardware stack levels required when called:    3
 29437 ;; This function calls:
 29438 ;;		Nothing
 29439 ;; This function is called by:
 29440 ;;		_main
 29441 ;; This function uses a non-reentrant model
 29442 ;;
 29443                           
 29444                           	psect	text86
 29445  006770                     __ptext86:
 29446                           	opt stack 0
 29447  006770                     _fifo_init:
 29448                           	opt stack 27
 29449                           
 29450                           ;fifo.c: 15: f->head = 0;
 29451                           
 29452                           ;incstack = 0
 29453                           ;incstack = 0
 29454  006770  EE20 F002          	lfsr	2,2
 29455  006774  D816               	call	PL136	;call to abstracted procedure
 29456                           
 29457                           ;fifo.c: 16: f->tail = 0;
 29458  006776  EE20 F004          	lfsr	2,4
 29459  00677A  D813               	call	PL136	;call to abstracted procedure
 29460                           
 29461                           ;fifo.c: 17: f->size = size;
 29462  00677C  EE20 F006          	lfsr	2,6
 29463  006780  501F               	movf	fifo_init@f,w,c
 29464  006782  26D9               	addwf	fsr2l,f,c
 29465  006784  5020               	movf	fifo_init@f+1,w,c
 29466  006786  22DA               	addwfc	fsr2h,f,c
 29467  006788  C023  FFDE         	movff	fifo_init@size,postinc2
 29468  00678C  C024  FFDD         	movff	fifo_init@size+1,postdec2
 29469                           
 29470                           ;fifo.c: 18: f->buf = buf;
 29471  006790  C01F  FFD9         	movff	fifo_init@f,fsr2l
 29472  006794  C020  FFDA         	movff	fifo_init@f+1,fsr2h
 29473  006798  C021  FFDE         	movff	fifo_init@buf,postinc2
 29474  00679C  C022  FFDD         	movff	fifo_init@buf+1,postdec2
 29475  0067A0  0012               	return	
 29476  0067A2                     __end_of_fifo_init:
 29477                           	opt stack 0
 29478  0067A2                     PL136:
 29479                           	opt stack 27
 29480  0067A2  501F               	movf	fifo_init@f,w,c
 29481  0067A4  26D9               	addwf	fsr2l,f,c
 29482  0067A6  5020               	movf	fifo_init@f+1,w,c
 29483  0067A8  22DA               	addwfc	fsr2h,f,c
 29484  0067AA  6ADE               	clrf	postinc2,c
 29485  0067AC  6ADD               	clrf	postdec2,c
 29486  0067AE  0012               	return	
 29487  0067B0                     __end_ofPL136:
 29488                           	opt stack 0
 29489                           tblptru	equ	0xFF8
 29490                           tblptrh	equ	0xFF7
 29491                           tblptrl	equ	0xFF6
 29492                           tablat	equ	0xFF5
 29493                           prodh	equ	0xFF4
 29494                           prodl	equ	0xFF3
 29495                           intcon	equ	0xFF2
 29496                           indf0	equ	0xFEF
 29497                           postinc0	equ	0xFEE
 29498                           fsr0h	equ	0xFEA
 29499                           fsr0l	equ	0xFE9
 29500                           wreg	equ	0xFE8
 29501                           indf1	equ	0xFE7
 29502                           postinc1	equ	0xFE6
 29503                           postdec1	equ	0xFE5
 29504                           fsr1h	equ	0xFE2
 29505                           fsr1l	equ	0xFE1
 29506                           indf2	equ	0xFDF
 29507                           postinc2	equ	0xFDE
 29508                           postdec2	equ	0xFDD
 29509                           plusw2	equ	0xFDB
 29510                           fsr2h	equ	0xFDA
 29511                           fsr2l	equ	0xFD9
 29512                           status	equ	0xFD8
 29513                           
 29514 ;; *************** function _fifo_getFree *****************
 29515 ;; Defined at:
 29516 ;;		line 97 in file "fifo.c"
 29517 ;; Parameters:    Size  Location     Type
 29518 ;;  f               2   30[COMRAM] PTR struct .
 29519 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 29520 ;; Auto vars:     Size  Location     Type
 29521 ;;		None
 29522 ;; Return value:  Size  Location     Type
 29523 ;;                  2   30[COMRAM] unsigned short 
 29524 ;; Registers used:
 29525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 29526 ;; Tracked objects:
 29527 ;;		On entry : F/0
 29528 ;;		On exit  : F/0
 29529 ;;		Unchanged: 0/0
 29530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29531 ;;      Params:         2       0       0       0       0       0       0
 29532 ;;      Locals:         0       0       0       0       0       0       0
 29533 ;;      Temps:          0       8       0       0       0       0       0
 29534 ;;      Totals:         2       8       0       0       0       0       0
 29535 ;;Total ram usage:       10 bytes
 29536 ;; Hardware stack levels used:    1
 29537 ;; Hardware stack levels required when called:    3
 29538 ;; This function calls:
 29539 ;;		Nothing
 29540 ;; This function is called by:
 29541 ;;		_main
 29542 ;; This function uses a non-reentrant model
 29543 ;;
 29544                           
 29545                           	psect	text87
 29546  00596E                     __ptext87:
 29547                           	opt stack 0
 29548  00596E                     _fifo_getFree:
 29549                           	opt stack 27
 29550                           
 29551                           ; BSR set to: 0
 29552                           ;fifo.c: 98: if (f->head < f->tail) {
 29553                           
 29554                           ;incstack = 0
 29555                           ;incstack = 0
 29556  00596E  EE20 F004          	lfsr	2,4
 29557  005972  501F               	movf	fifo_getFree@f,w,c
 29558  005974  26D9               	addwf	fsr2l,f,c
 29559  005976  5020               	movf	fifo_getFree@f+1,w,c
 29560  005978  22DA               	addwfc	fsr2h,f,c
 29561  00597A  EE10 F002          	lfsr	1,2
 29562  00597E  501F               	movf	fifo_getFree@f,w,c
 29563  005980  26E1               	addwf	fsr1l,f,c
 29564  005982  5020               	movf	fifo_getFree@f+1,w,c
 29565  005984  22E2               	addwfc	fsr1h,f,c
 29566  005986  52E6               	movf	postinc1,f,c
 29567  005988  52DE               	movf	postinc2,f,c
 29568  00598A  50DD               	movf	postdec2,w,c
 29569  00598C  5CE5               	subwf	postdec1,w,c
 29570  00598E  E102               	bnz	u19475
 29571  005990  50DF               	movf	indf2,w,c
 29572  005992  5CE7               	subwf	indf1,w,c
 29573  005994                     u19475:
 29574  005994  E213               	bc	l15216
 29575                           
 29576                           ; BSR set to: 0
 29577                           ;fifo.c: 99: return (f->tail - f->head);
 29578  005996  EE20 F002          	lfsr	2,2
 29579  00599A  D834               	call	PL106	;call to abstracted procedure
 29580  00599C  EE20 F004          	lfsr	2,4
 29581  0059A0  501F               	movf	fifo_getFree@f,w,c
 29582  0059A2  26D9               	addwf	fsr2l,f,c
 29583  0059A4  5020               	movf	fifo_getFree@f+1,w,c
 29584  0059A6  22DA               	addwfc	fsr2h,f,c
 29585  0059A8  CFDE F062          	movff	postinc2,??_fifo_getFree+2
 29586  0059AC  CFDD F063          	movff	postdec2,??_fifo_getFree+3
 29587  0059B0  5160               	movf	??_fifo_getFree& (0+255),w,b
 29588  0059B2  5D62               	subwf	(??_fifo_getFree+2)& (0+255),w,b
 29589  0059B4  6E1F               	movwf	?_fifo_getFree,c
 29590  0059B6  5161               	movf	(??_fifo_getFree+1)& (0+255),w,b
 29591  0059B8  5963               	subwfb	(??_fifo_getFree+3)& (0+255),w,b
 29592  0059BA  D022               	goto	L59
 29593  0059BC                     l15216:
 29594                           
 29595                           ; BSR set to: 0
 29596                           ;fifo.c: 101: else {
 29597                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 29598  0059BC  EE20 F004          	lfsr	2,4
 29599  0059C0  D821               	call	PL106	;call to abstracted procedure
 29600  0059C2  EE20 F002          	lfsr	2,2
 29601  0059C6  501F               	movf	fifo_getFree@f,w,c
 29602  0059C8  26D9               	addwf	fsr2l,f,c
 29603  0059CA  5020               	movf	fifo_getFree@f+1,w,c
 29604  0059CC  22DA               	addwfc	fsr2h,f,c
 29605  0059CE  CFDE F062          	movff	postinc2,??_fifo_getFree+2
 29606  0059D2  CFDD F063          	movff	postdec2,??_fifo_getFree+3
 29607  0059D6  EE20 F006          	lfsr	2,6
 29608  0059DA  501F               	movf	fifo_getFree@f,w,c
 29609  0059DC  26D9               	addwf	fsr2l,f,c
 29610  0059DE  5020               	movf	fifo_getFree@f+1,w,c
 29611  0059E0  22DA               	addwfc	fsr2h,f,c
 29612  0059E2  CFDE F064          	movff	postinc2,??_fifo_getFree+4
 29613  0059E6  CFDD F065          	movff	postdec2,??_fifo_getFree+5
 29614  0059EA  5162               	movf	(??_fifo_getFree+2)& (0+255),w,b
 29615  0059EC  5D64               	subwf	(??_fifo_getFree+4)& (0+255),w,b
 29616  0059EE  6F66               	movwf	(??_fifo_getFree+6)& (0+255),b
 29617  0059F0  5163               	movf	(??_fifo_getFree+3)& (0+255),w,b
 29618  0059F2  5965               	subwfb	(??_fifo_getFree+5)& (0+255),w,b
 29619  0059F4  6F67               	movwf	(??_fifo_getFree+7)& (0+255),b
 29620  0059F6  5160               	movf	??_fifo_getFree& (0+255),w,b
 29621  0059F8  2566               	addwf	(??_fifo_getFree+6)& (0+255),w,b
 29622  0059FA  6E1F               	movwf	?_fifo_getFree,c
 29623  0059FC  5161               	movf	(??_fifo_getFree+1)& (0+255),w,b
 29624  0059FE  2167               	addwfc	(??_fifo_getFree+7)& (0+255),w,b
 29625  005A00                     L59:
 29626  005A00  6E20               	movwf	?_fifo_getFree+1,c
 29627                           
 29628                           ; BSR set to: 0
 29629  005A02  0012               	return	
 29630  005A04                     __end_of_fifo_getFree:
 29631                           	opt stack 0
 29632  005A04                     PL106:
 29633                           	opt stack 27
 29634  005A04  501F               	movf	fifo_getFree@f,w,c
 29635  005A06  26D9               	addwf	fsr2l,f,c
 29636  005A08  5020               	movf	fifo_getFree@f+1,w,c
 29637  005A0A  22DA               	addwfc	fsr2h,f,c
 29638  005A0C  CFDE F060          	movff	postinc2,??_fifo_getFree
 29639  005A10  CFDD F061          	movff	postdec2,??_fifo_getFree+1
 29640  005A14  0012               	return	
 29641  005A16                     __end_ofPL106:
 29642                           	opt stack 0
 29643                           tblptru	equ	0xFF8
 29644                           tblptrh	equ	0xFF7
 29645                           tblptrl	equ	0xFF6
 29646                           tablat	equ	0xFF5
 29647                           prodh	equ	0xFF4
 29648                           prodl	equ	0xFF3
 29649                           intcon	equ	0xFF2
 29650                           indf0	equ	0xFEF
 29651                           postinc0	equ	0xFEE
 29652                           fsr0h	equ	0xFEA
 29653                           fsr0l	equ	0xFE9
 29654                           wreg	equ	0xFE8
 29655                           indf1	equ	0xFE7
 29656                           postinc1	equ	0xFE6
 29657                           postdec1	equ	0xFE5
 29658                           fsr1h	equ	0xFE2
 29659                           fsr1l	equ	0xFE1
 29660                           indf2	equ	0xFDF
 29661                           postinc2	equ	0xFDE
 29662                           postdec2	equ	0xFDD
 29663                           plusw2	equ	0xFDB
 29664                           fsr2h	equ	0xFDA
 29665                           fsr2l	equ	0xFD9
 29666                           status	equ	0xFD8
 29667                           
 29668 ;; *************** function _Interrupt *****************
 29669 ;; Defined at:
 29670 ;;		line 154 in file "main.c"
 29671 ;; Parameters:    Size  Location     Type
 29672 ;;		None
 29673 ;; Auto vars:     Size  Location     Type
 29674 ;;  fail            1   29[COMRAM] unsigned char 
 29675 ;;  c               1   28[COMRAM] unsigned char 
 29676 ;; Return value:  Size  Location     Type
 29677 ;;		None               void
 29678 ;; Registers used:
 29679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 29680 ;; Tracked objects:
 29681 ;;		On entry : 0/0
 29682 ;;		On exit  : 0/0
 29683 ;;		Unchanged: 0/0
 29684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29685 ;;      Params:         0       0       0       0       0       0       0
 29686 ;;      Locals:         2       0       0       0       0       0       0
 29687 ;;      Temps:          9       0       0       0       0       0       0
 29688 ;;      Totals:        11       0       0       0       0       0       0
 29689 ;;Total ram usage:       11 bytes
 29690 ;; Hardware stack levels used:    1
 29691 ;; Hardware stack levels required when called:    2
 29692 ;; This function calls:
 29693 ;;		_ReadUSART
 29694 ;;		_fifo_write
 29695 ;;		_ECANReceiveMessage
 29696 ;;		i1_fifo_getFree
 29697 ;;		i1_WriteTimer0
 29698 ;; This function is called by:
 29699 ;;		Interrupt level 1
 29700 ;; This function uses a non-reentrant model
 29701 ;;
 29702                           
 29703                           	psect	intcodelo
 29704  000418                     __pintcodelo:
 29705                           	opt stack 0
 29706  000418                     _Interrupt:
 29707                           	opt stack 20
 29708                           
 29709                           ; BSR set to: 0
 29710                           ;incstack = 0
 29711  000418  CFD8 F016          	movff	status,??_Interrupt+2
 29712  00041C  CFE8 F017          	movff	wreg,??_Interrupt+3
 29713  000420  CFE0 F018          	movff	bsr,??_Interrupt+4
 29714  000424  CFE1 F019          	movff	fsr1l,??_Interrupt+5
 29715  000428  CFE2 F01A          	movff	fsr1h,??_Interrupt+6
 29716  00042C  CFD9 F01B          	movff	fsr2l,??_Interrupt+7
 29717  000430  CFDA F01C          	movff	fsr2h,??_Interrupt+8
 29718  000434                     
 29719                           ;main.c: 155: uint8_t c;
 29720                           ;main.c: 158: if ( 1 == PIR1bits.RCIF ) {
 29721  000434  AA9E               	btfss	3998,5,c	;volatile
 29722  000436  D001               	goto	i1u1327_21
 29723  000438  D001               	goto	i1u1327_20
 29724  00043A                     i1u1327_21:
 29725  00043A  D02C               	goto	i1l417
 29726  00043C                     i1u1327_20:
 29727  00043C                     
 29728                           ;main.c: 160: c = ReadUSART();
 29729  00043C  EC65  F035         	call	_ReadUSART	;wreg free
 29730  000440  6E1D               	movwf	Interrupt@c,c
 29731  000442                     
 29732                           ;main.c: 162: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 29733  000442  0100               	movlb	0	; () banked
 29734  000444  0E00               	movlw	high _serialInputFifo
 29735  000446  6E02               	movwf	?_fifo_write+1,c
 29736  000448  0EF4               	movlw	low _serialInputFifo
 29737  00044A  6E01               	movwf	?_fifo_write,c
 29738  00044C  0E1D               	movlw	low Interrupt@c
 29739  00044E  6E03               	movwf	?_fifo_write+2,c
 29740  000450  0E00               	movlw	high Interrupt@c
 29741  000452  6E04               	movwf	?_fifo_write+3,c
 29742  000454  0E0F               	movlw	15
 29743  000456  6E04               	movwf	?_fifo_write+3,c
 29744  000458  0E5F               	movlw	__accesstop+-1
 29745  00045A  6403               	cpfsgt	?_fifo_write+2,c
 29746  00045C  6A04               	clrf	?_fifo_write+3,c
 29747  00045E  0E01               	movlw	1
 29748  000460  6E05               	movwf	?_fifo_write+4,c
 29749  000462  0E00               	movlw	0
 29750  000464  6E06               	movwf	?_fifo_write+5,c
 29751  000466  0E00               	movlw	0
 29752  000468  6E07               	movwf	?_fifo_write+6,c
 29753  00046A  0E00               	movlw	0
 29754  00046C  6E08               	movwf	?_fifo_write+7,c
 29755  00046E  EC9C  F024         	call	_fifo_write	;wreg free
 29756  000472  0401               	decf	?_fifo_write,w,c
 29757  000474  1002               	iorwf	?_fifo_write+1,w,c
 29758  000476  B4D8               	btfsc	status,2,c
 29759  000478  D001               	goto	i1u1328_21
 29760  00047A  D001               	goto	i1u1328_20
 29761  00047C                     i1u1328_21:
 29762  00047C  D009               	goto	i1l11210
 29763  00047E                     i1u1328_20:
 29764  00047E                     
 29765                           ;main.c: 164: uart_receiveOverruns++;
 29766  00047E  0E01               	movlw	1
 29767  000480  0100               	movlb	0	; () banked
 29768  000482  27E6               	addwf	_uart_receiveOverruns& (0+255),f,b
 29769  000484  0E00               	movlw	0
 29770  000486  23E7               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 29771  000488  0E00               	movlw	0
 29772  00048A  23E8               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 29773  00048C  0E00               	movlw	0
 29774  00048E  23E9               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 29775  000490                     i1l11210:
 29776                           
 29777                           ;main.c: 165: }
 29778                           ;main.c: 168: PIR1bits.RCIF = 0;
 29779  000490  9A9E               	bcf	3998,5,c	;volatile
 29780                           
 29781                           ;main.c: 170: }
 29782  000492  D07D               	goto	i1l419
 29783  000494                     i1l417:
 29784                           
 29785                           ;main.c: 172: else if (1 == INTCONbits.TMR0IF) {
 29786  000494  A4F2               	btfss	intcon,2,c	;volatile
 29787  000496  D001               	goto	i1u1329_21
 29788  000498  D001               	goto	i1u1329_20
 29789  00049A                     i1u1329_21:
 29790  00049A  D079               	goto	i1l419
 29791  00049C                     i1u1329_20:
 29792  00049C                     
 29793                           ;main.c: 174: WriteTimer0(0xfb1d);
 29794  00049C  0EFB               	movlw	251
 29795  00049E  6E02               	movwf	?i1_WriteTimer0+1,c
 29796  0004A0  0E1D               	movlw	29
 29797  0004A2  6E01               	movwf	?i1_WriteTimer0,c
 29798  0004A4  ECB9  F035         	call	i1_WriteTimer0	;wreg free
 29799  0004A8                     
 29800                           ;main.c: 176: timer++;
 29801  0004A8  0E01               	movlw	1
 29802  0004AA  0100               	movlb	0	; () banked
 29803  0004AC  27E2               	addwf	_timer& (0+255),f,b	;volatile
 29804  0004AE  0E00               	movlw	0
 29805  0004B0  23E3               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 29806  0004B2  0E00               	movlw	0
 29807  0004B4  23E4               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 29808  0004B6  0E00               	movlw	0
 29809  0004B8  23E5               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 29810  0004BA                     
 29811                           ; BSR set to: 0
 29812                           ;main.c: 177: timekeeper++;
 29813  0004BA  0E01               	movlw	1
 29814  0004BC  27DE               	addwf	_timekeeper& (0+255),f,b	;volatile
 29815  0004BE  0E00               	movlw	0
 29816  0004C0  23DF               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 29817  0004C2  0E00               	movlw	0
 29818  0004C4  23E0               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 29819  0004C6  0E00               	movlw	0
 29820  0004C8  23E1               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 29821  0004CA                     
 29822                           ; BSR set to: 0
 29823                           ;main.c: 180: status_led_cnt++;
 29824  0004CA  4A2A               	infsnz	_status_led_cnt,f,c	;volatile
 29825  0004CC  2A2B               	incf	_status_led_cnt+1,f,c	;volatile
 29826  0004CE                     
 29827                           ; BSR set to: 0
 29828                           ;main.c: 181: if ( ( 2 == ledFunctionality ) &&
 29829                           ;main.c: 182: ( status_led_cnt > 1000 ) ) {
 29830  0004CE  5032               	movf	_ledFunctionality,w,c	;volatile
 29831  0004D0  0A02               	xorlw	2
 29832  0004D2  A4D8               	btfss	status,2,c
 29833  0004D4  D001               	goto	i1u1330_21
 29834  0004D6  D001               	goto	i1u1330_20
 29835  0004D8                     i1u1330_21:
 29836  0004D8  D00C               	goto	i1l11226
 29837  0004DA                     i1u1330_20:
 29838  0004DA                     
 29839                           ; BSR set to: 0
 29840  0004DA  0EE9               	movlw	233
 29841  0004DC  5C2A               	subwf	_status_led_cnt,w,c	;volatile
 29842  0004DE  0E03               	movlw	3
 29843  0004E0  582B               	subwfb	_status_led_cnt+1,w,c	;volatile
 29844  0004E2  A0D8               	btfss	status,0,c
 29845  0004E4  D001               	goto	i1u1331_21
 29846  0004E6  D001               	goto	i1u1331_20
 29847  0004E8                     i1u1331_21:
 29848  0004E8  D004               	goto	i1l11226
 29849  0004EA                     i1u1331_20:
 29850  0004EA                     i1l11224:
 29851                           
 29852                           ; BSR set to: 0
 29853                           ;main.c: 183: LATC1 = ~LATC1;
 29854  0004EA  728B               	btg	3979,1,c	;volatile
 29855                           
 29856                           ;main.c: 184: status_led_cnt = 0;
 29857  0004EC  6A2A               	clrf	_status_led_cnt,c	;volatile
 29858  0004EE  6A2B               	clrf	_status_led_cnt+1,c	;volatile
 29859                           
 29860                           ;main.c: 185: }
 29861  0004F0  D04D               	goto	i1l422
 29862  0004F2                     i1l11226:
 29863                           
 29864                           ; BSR set to: 0
 29865                           ;main.c: 186: else if ( ( 3 == ledFunctionality ) &&
 29866                           ;main.c: 187: ( status_led_cnt > 400 ) ) {
 29867  0004F2  5032               	movf	_ledFunctionality,w,c	;volatile
 29868  0004F4  0A03               	xorlw	3
 29869  0004F6  A4D8               	btfss	status,2,c
 29870  0004F8  D001               	goto	i1u1332_21
 29871  0004FA  D001               	goto	i1u1332_20
 29872  0004FC                     i1u1332_21:
 29873  0004FC  D009               	goto	i1l11232
 29874  0004FE                     i1u1332_20:
 29875  0004FE                     
 29876                           ; BSR set to: 0
 29877  0004FE  0E91               	movlw	145
 29878  000500  5C2A               	subwf	_status_led_cnt,w,c	;volatile
 29879  000502  0E01               	movlw	1
 29880  000504  582B               	subwfb	_status_led_cnt+1,w,c	;volatile
 29881  000506  A0D8               	btfss	status,0,c
 29882  000508  D001               	goto	i1u1333_21
 29883  00050A  D001               	goto	i1u1333_20
 29884  00050C                     i1u1333_21:
 29885  00050C  D001               	goto	i1l11232
 29886  00050E                     i1u1333_20:
 29887  00050E  D7ED               	goto	i1l11224
 29888  000510                     i1l11232:
 29889                           
 29890                           ; BSR set to: 0
 29891                           ;main.c: 191: else if ( ( 4 == ledFunctionality ) &&
 29892                           ;main.c: 192: ( status_led_cnt > 100 ) ) {
 29893  000510  5032               	movf	_ledFunctionality,w,c	;volatile
 29894  000512  0A04               	xorlw	4
 29895  000514  A4D8               	btfss	status,2,c
 29896  000516  D001               	goto	i1u1334_21
 29897  000518  D001               	goto	i1u1334_20
 29898  00051A                     i1u1334_21:
 29899  00051A  D009               	goto	i1l11238
 29900  00051C                     i1u1334_20:
 29901  00051C                     
 29902                           ; BSR set to: 0
 29903  00051C  0E65               	movlw	101
 29904  00051E  5C2A               	subwf	_status_led_cnt,w,c	;volatile
 29905  000520  0E00               	movlw	0
 29906  000522  582B               	subwfb	_status_led_cnt+1,w,c	;volatile
 29907  000524  A0D8               	btfss	status,0,c
 29908  000526  D001               	goto	i1u1335_21
 29909  000528  D001               	goto	i1u1335_20
 29910  00052A                     i1u1335_21:
 29911  00052A  D001               	goto	i1l11238
 29912  00052C                     i1u1335_20:
 29913  00052C  D7DE               	goto	i1l11224
 29914  00052E                     i1l11238:
 29915                           
 29916                           ; BSR set to: 0
 29917                           ;main.c: 196: else if ( ( 5 == ledFunctionality ) &&
 29918                           ;main.c: 197: (status_led_cnt > 70)) {
 29919  00052E  5032               	movf	_ledFunctionality,w,c	;volatile
 29920  000530  0A05               	xorlw	5
 29921  000532  A4D8               	btfss	status,2,c
 29922  000534  D001               	goto	i1u1336_21
 29923  000536  D001               	goto	i1u1336_20
 29924  000538                     i1u1336_21:
 29925  000538  D009               	goto	i1l11244
 29926  00053A                     i1u1336_20:
 29927  00053A                     
 29928                           ; BSR set to: 0
 29929  00053A  0E47               	movlw	71
 29930  00053C  5C2A               	subwf	_status_led_cnt,w,c	;volatile
 29931  00053E  0E00               	movlw	0
 29932  000540  582B               	subwfb	_status_led_cnt+1,w,c	;volatile
 29933  000542  A0D8               	btfss	status,0,c
 29934  000544  D001               	goto	i1u1337_21
 29935  000546  D001               	goto	i1u1337_20
 29936  000548                     i1u1337_21:
 29937  000548  D001               	goto	i1l11244
 29938  00054A                     i1u1337_20:
 29939  00054A  D7CF               	goto	i1l11224
 29940  00054C                     i1l11244:
 29941                           
 29942                           ; BSR set to: 0
 29943                           ;main.c: 201: else if ( ( 6 == ledFunctionality ) &&
 29944                           ;main.c: 202: ( status_led_cnt > 40 ) ) {
 29945  00054C  5032               	movf	_ledFunctionality,w,c	;volatile
 29946  00054E  0A06               	xorlw	6
 29947  000550  A4D8               	btfss	status,2,c
 29948  000552  D001               	goto	i1u1338_21
 29949  000554  D001               	goto	i1u1338_20
 29950  000556                     i1u1338_21:
 29951  000556  D009               	goto	i1l11250
 29952  000558                     i1u1338_20:
 29953  000558                     
 29954                           ; BSR set to: 0
 29955  000558  0E29               	movlw	41
 29956  00055A  5C2A               	subwf	_status_led_cnt,w,c	;volatile
 29957  00055C  0E00               	movlw	0
 29958  00055E  582B               	subwfb	_status_led_cnt+1,w,c	;volatile
 29959  000560  A0D8               	btfss	status,0,c
 29960  000562  D001               	goto	i1u1339_21
 29961  000564  D001               	goto	i1u1339_20
 29962  000566                     i1u1339_21:
 29963  000566  D001               	goto	i1l11250
 29964  000568                     i1u1339_20:
 29965  000568  D7C0               	goto	i1l11224
 29966  00056A                     i1l11250:
 29967                           
 29968                           ; BSR set to: 0
 29969                           ;main.c: 206: else if ( 1 == ledFunctionality ) {
 29970  00056A  0432               	decf	_ledFunctionality,w,c	;volatile
 29971  00056C  A4D8               	btfss	status,2,c
 29972  00056E  D001               	goto	i1u1340_21
 29973  000570  D001               	goto	i1u1340_20
 29974  000572                     i1u1340_21:
 29975  000572  D004               	goto	i1l431
 29976  000574                     i1u1340_20:
 29977  000574                     
 29978                           ; BSR set to: 0
 29979                           ;main.c: 207: LATC1 = 1;
 29980  000574  828B               	bsf	3979,1,c	;volatile
 29981                           
 29982                           ;main.c: 208: status_led_cnt = 0;
 29983  000576  6A2A               	clrf	_status_led_cnt,c	;volatile
 29984  000578  6A2B               	clrf	_status_led_cnt+1,c	;volatile
 29985                           
 29986                           ;main.c: 209: }
 29987  00057A  D008               	goto	i1l422
 29988  00057C                     i1l431:
 29989                           
 29990                           ; BSR set to: 0
 29991                           ;main.c: 210: else if ( 0 == ledFunctionality ) {
 29992  00057C  6632               	tstfsz	_ledFunctionality,c	;volatile
 29993  00057E  D001               	goto	i1u1341_21
 29994  000580  D001               	goto	i1u1341_20
 29995  000582                     i1u1341_21:
 29996  000582  D004               	goto	i1l428
 29997  000584                     i1u1341_20:
 29998  000584                     
 29999                           ; BSR set to: 0
 30000                           ;main.c: 211: LATC1 = 0;
 30001  000584  928B               	bcf	3979,1,c	;volatile
 30002                           
 30003                           ;main.c: 212: status_led_cnt = 0;
 30004  000586  6A2A               	clrf	_status_led_cnt,c	;volatile
 30005  000588  6A2B               	clrf	_status_led_cnt+1,c	;volatile
 30006  00058A  D000               	goto	i1l422
 30007  00058C                     i1l428:
 30008  00058C                     i1l422:
 30009                           
 30010                           ; BSR set to: 0
 30011                           ;main.c: 213: }
 30012                           ;main.c: 215: INTCONbits.TMR0IF = 0;
 30013  00058C  94F2               	bcf	intcon,2,c	;volatile
 30014  00058E                     i1l419:
 30015                           
 30016                           ;main.c: 216: }
 30017                           ;main.c: 219: if ( 1 == ERRIF ) {
 30018  00058E  AAA4               	btfss	4004,5,c	;volatile
 30019  000590  D001               	goto	i1u1342_21
 30020  000592  D001               	goto	i1u1342_20
 30021  000594                     i1u1342_21:
 30022  000594  D00F               	goto	i1l11264
 30023  000596                     i1u1342_20:
 30024  000596                     
 30025                           ;main.c: 222: if ( COMSTATbits.RXBnOVFL ) {
 30026  000596  AC74               	btfss	3956,6,c	;volatile
 30027  000598  D001               	goto	i1u1343_21
 30028  00059A  D001               	goto	i1u1343_20
 30029  00059C                     i1u1343_21:
 30030  00059C  D00A               	goto	i1l11262
 30031  00059E                     i1u1343_20:
 30032  00059E                     
 30033                           ;main.c: 223: can_receiveOverruns++;
 30034  00059E  0E01               	movlw	1
 30035  0005A0  0100               	movlb	0	; () banked
 30036  0005A2  27C6               	addwf	_can_receiveOverruns& (0+255),f,b
 30037  0005A4  0E00               	movlw	0
 30038  0005A6  23C7               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 30039  0005A8  0E00               	movlw	0
 30040  0005AA  23C8               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 30041  0005AC  0E00               	movlw	0
 30042  0005AE  23C9               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 30043  0005B0                     
 30044                           ; BSR set to: 0
 30045                           ;main.c: 224: COMSTATbits.RXBnOVFL = 0;
 30046  0005B0  9C74               	bcf	3956,6,c	;volatile
 30047  0005B2                     i1l11262:
 30048                           
 30049                           ;main.c: 225: }
 30050                           ;main.c: 227: ERRIF = 0;
 30051  0005B2  9AA4               	bcf	4004,5,c	;volatile
 30052  0005B4                     i1l11264:
 30053                           
 30054                           ;main.c: 228: }
 30055                           ;main.c: 234: if (COMSTATbits.TXBO) {
 30056  0005B4  AA74               	btfss	3956,5,c	;volatile
 30057  0005B6  D001               	goto	i1u1344_21
 30058  0005B8  D001               	goto	i1u1344_20
 30059  0005BA                     i1u1344_21:
 30060  0005BA  D003               	goto	i1l436
 30061  0005BC                     i1u1344_20:
 30062  0005BC                     
 30063                           ;main.c: 236: ledFunctionality = 6;
 30064  0005BC  0E06               	movlw	6
 30065  0005BE  6E32               	movwf	_ledFunctionality,c	;volatile
 30066                           
 30067                           ;main.c: 237: }
 30068  0005C0  D014               	goto	i1l11276
 30069  0005C2                     i1l436:
 30070                           
 30071                           ;main.c: 238: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
 30072  0005C2  B874               	btfsc	3956,4,c	;volatile
 30073  0005C4  D001               	goto	i1u1345_21
 30074  0005C6  D001               	goto	i1u1345_20
 30075  0005C8                     i1u1345_21:
 30076  0005C8  D004               	goto	i1l11270
 30077  0005CA                     i1u1345_20:
 30078  0005CA  A674               	btfss	3956,3,c	;volatile
 30079  0005CC  D001               	goto	i1u1346_21
 30080  0005CE  D001               	goto	i1u1346_20
 30081  0005D0                     i1u1346_21:
 30082  0005D0  D003               	goto	i1l438
 30083  0005D2                     i1u1346_20:
 30084  0005D2                     i1l11270:
 30085                           
 30086                           ;main.c: 240: ledFunctionality = 5;
 30087  0005D2  0E05               	movlw	5
 30088  0005D4  6E32               	movwf	_ledFunctionality,c	;volatile
 30089                           
 30090                           ;main.c: 241: }
 30091  0005D6  D009               	goto	i1l11276
 30092  0005D8                     i1l438:
 30093                           
 30094                           ;main.c: 242: else if (COMSTATbits.EWARN) {
 30095  0005D8  A074               	btfss	3956,0,c	;volatile
 30096  0005DA  D001               	goto	i1u1347_21
 30097  0005DC  D001               	goto	i1u1347_20
 30098  0005DE                     i1u1347_21:
 30099  0005DE  D003               	goto	i1l11274
 30100  0005E0                     i1u1347_20:
 30101  0005E0                     
 30102                           ;main.c: 244: ledFunctionality = 4;
 30103  0005E0  0E04               	movlw	4
 30104  0005E2  6E32               	movwf	_ledFunctionality,c	;volatile
 30105                           
 30106                           ;main.c: 245: }
 30107  0005E4  D002               	goto	i1l11276
 30108  0005E6                     i1l11274:
 30109                           
 30110                           ;main.c: 246: else {
 30111                           ;main.c: 248: ledFunctionality = 1;
 30112  0005E6  0E01               	movlw	1
 30113  0005E8  6E32               	movwf	_ledFunctionality,c	;volatile
 30114  0005EA                     i1l11276:
 30115                           
 30116                           ;main.c: 249: }
 30117                           ;main.c: 252: if ( RXBnIF ) {
 30118  0005EA  A2A4               	btfss	4004,1,c	;volatile
 30119  0005EC  D001               	goto	i1u1348_21
 30120  0005EE  D001               	goto	i1u1348_20
 30121  0005F0                     i1u1348_21:
 30122  0005F0  D0B5               	goto	i1l456
 30123  0005F2                     i1u1348_20:
 30124  0005F2                     
 30125                           ;main.c: 254: if ( ECANReceiveMessage((unsigned long *)&id,
 30126                           ;main.c: 255: (BYTE*)&data,
 30127                           ;main.c: 256: (BYTE*)&dlc,
 30128                           ;main.c: 257: &flags) ) {
 30129  0005F2  0102               	movlb	2	; () banked
 30130  0005F4  0E02               	movlw	high _data
 30131  0005F6  6E09               	movwf	?_ECANReceiveMessage+1,c
 30132  0005F8  0E80               	movlw	low _data
 30133  0005FA  6E08               	movwf	?_ECANReceiveMessage,c
 30134  0005FC  0E40               	movlw	low _dlc
 30135  0005FE  6E0A               	movwf	?_ECANReceiveMessage+2,c
 30136  000600  0E41               	movlw	low _flags
 30137  000602  6E0B               	movwf	?_ECANReceiveMessage+3,c
 30138  000604  0E3C               	movlw	_id& (0+255)
 30139  000606  EC0D  F01E         	call	_ECANReceiveMessage
 30140  00060A  0900               	iorlw	0
 30141  00060C  B4D8               	btfsc	status,2,c
 30142  00060E  D001               	goto	i1u1349_21
 30143  000610  D001               	goto	i1u1349_20
 30144  000612                     i1u1349_21:
 30145  000612  D0A3               	goto	i1l11312
 30146  000614                     i1u1349_20:
 30147  000614                     
 30148                           ;main.c: 260: if ( flags & ECAN_RX_OVERFLOW ) {
 30149  000614  A641               	btfss	_flags,3,c
 30150  000616  D001               	goto	i1u1350_21
 30151  000618  D001               	goto	i1u1350_20
 30152  00061A                     i1u1350_21:
 30153  00061A  D00E               	goto	i1l446
 30154  00061C                     i1u1350_20:
 30155  00061C                     
 30156                           ;main.c: 261: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 30157  00061C  AA41               	btfss	_flags,5,c
 30158  00061E  D001               	goto	i1u1351_21
 30159  000620  D001               	goto	i1u1351_20
 30160  000622                     i1u1351_21:
 30161  000622  D09B               	goto	i1l11312
 30162  000624                     i1u1351_20:
 30163  000624                     i1l11284:
 30164  000624  0E01               	movlw	1
 30165  000626  0100               	movlb	0	; () banked
 30166  000628  27C6               	addwf	_can_receiveOverruns& (0+255),f,b
 30167  00062A  0E00               	movlw	0
 30168  00062C  23C7               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 30169  00062E  0E00               	movlw	0
 30170  000630  23C8               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 30171  000632  0E00               	movlw	0
 30172  000634  23C9               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 30173  000636  D091               	goto	i1l11312
 30174  000638                     i1l446:
 30175                           
 30176                           ;main.c: 263: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 30177                           ;main.c: 264: ( flags & ECAN_RX_XTD_FRAME ) ) {
 30178  000638  BC41               	btfsc	_flags,6,c
 30179  00063A  D001               	goto	i1u1352_21
 30180  00063C  D001               	goto	i1u1352_20
 30181  00063E                     i1u1352_21:
 30182  00063E  D08D               	goto	i1l11312
 30183  000640                     i1u1352_20:
 30184  000640  AA41               	btfss	_flags,5,c
 30185  000642  D001               	goto	i1u1353_21
 30186  000644  D001               	goto	i1u1353_20
 30187  000646                     i1u1353_21:
 30188  000646  D089               	goto	i1l11312
 30189  000648                     i1u1353_20:
 30190  000648                     
 30191                           ;main.c: 266: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 30192  000648  5040               	movf	_dlc,w,c
 30193  00064A  6E14               	movwf	??_Interrupt& (0+255),c
 30194  00064C  6A15               	clrf	(??_Interrupt+1)& (0+255),c
 30195  00064E  0E05               	movlw	5
 30196  000650  2614               	addwf	??_Interrupt,f,c
 30197  000652  0E00               	movlw	0
 30198  000654  2215               	addwfc	??_Interrupt+1,f,c
 30199  000656  0E34               	movlw	low _canInputFifo
 30200  000658  6E01               	movwf	?i1_fifo_getFree,c
 30201  00065A  0E00               	movlw	high _canInputFifo
 30202  00065C  6E02               	movwf	?i1_fifo_getFree+1,c
 30203  00065E  0E0F               	movlw	15
 30204  000660  6E02               	movwf	?i1_fifo_getFree+1,c
 30205  000662  0E5F               	movlw	__accesstop+-1
 30206  000664  6401               	cpfsgt	?i1_fifo_getFree,c
 30207  000666  6A02               	clrf	?i1_fifo_getFree+1,c
 30208  000668  EC0B  F02D         	call	i1_fifo_getFree	;wreg free
 30209  00066C  5014               	movf	??_Interrupt,w,c
 30210  00066E  5C01               	subwf	?i1_fifo_getFree,w,c
 30211  000670  5015               	movf	??_Interrupt+1,w,c
 30212  000672  5802               	subwfb	?i1_fifo_getFree+1,w,c
 30213  000674  A0D8               	btfss	status,0,c
 30214  000676  D001               	goto	i1u1354_21
 30215  000678  D001               	goto	i1u1354_20
 30216  00067A                     i1u1354_21:
 30217  00067A  D7D4               	goto	i1l11284
 30218  00067C                     i1u1354_20:
 30219  00067C                     
 30220                           ;main.c: 267: uint8_t fail = 0;
 30221  00067C  6A1E               	clrf	Interrupt@fail,c
 30222  00067E                     
 30223                           ;main.c: 268: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 30224  00067E  0E34               	movlw	low _canInputFifo
 30225  000680  6E01               	movwf	?_fifo_write,c
 30226  000682  0E00               	movlw	high _canInputFifo
 30227  000684  6E02               	movwf	?_fifo_write+1,c
 30228  000686  0E0F               	movlw	15
 30229  000688  6E02               	movwf	?_fifo_write+1,c
 30230  00068A  0E5F               	movlw	__accesstop+-1
 30231  00068C  6401               	cpfsgt	?_fifo_write,c
 30232  00068E  6A02               	clrf	?_fifo_write+1,c
 30233  000690  0E3C               	movlw	low _id
 30234  000692  6E03               	movwf	?_fifo_write+2,c
 30235  000694  0E00               	movlw	high _id
 30236  000696  6E04               	movwf	?_fifo_write+3,c
 30237  000698  0E0F               	movlw	15
 30238  00069A  6E04               	movwf	?_fifo_write+3,c
 30239  00069C  0E5F               	movlw	__accesstop+-1
 30240  00069E  6403               	cpfsgt	?_fifo_write+2,c
 30241  0006A0  6A04               	clrf	?_fifo_write+3,c
 30242  0006A2  0E04               	movlw	4
 30243  0006A4  6E05               	movwf	?_fifo_write+4,c
 30244  0006A6  0E00               	movlw	0
 30245  0006A8  6E06               	movwf	?_fifo_write+5,c
 30246  0006AA  0E00               	movlw	0
 30247  0006AC  6E07               	movwf	?_fifo_write+6,c
 30248  0006AE  0E00               	movlw	0
 30249  0006B0  6E08               	movwf	?_fifo_write+7,c
 30250  0006B2  EC9C  F024         	call	_fifo_write	;wreg free
 30251  0006B6  5001               	movf	?_fifo_write,w,c
 30252  0006B8  0A04               	xorlw	4
 30253  0006BA  1002               	iorwf	?_fifo_write+1,w,c
 30254  0006BC  B4D8               	btfsc	status,2,c
 30255  0006BE  D001               	goto	i1u1355_21
 30256  0006C0  D001               	goto	i1u1355_20
 30257  0006C2                     i1u1355_21:
 30258  0006C2  D002               	goto	i1l11296
 30259  0006C4                     i1u1355_20:
 30260  0006C4                     
 30261                           ;main.c: 269: fail = 1;
 30262  0006C4  0E01               	movlw	1
 30263  0006C6  6E1E               	movwf	Interrupt@fail,c
 30264  0006C8                     i1l11296:
 30265                           
 30266                           ;main.c: 270: }
 30267                           ;main.c: 271: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 30268  0006C8  0E34               	movlw	low _canInputFifo
 30269  0006CA  6E01               	movwf	?_fifo_write,c
 30270  0006CC  0E00               	movlw	high _canInputFifo
 30271  0006CE  6E02               	movwf	?_fifo_write+1,c
 30272  0006D0  0E0F               	movlw	15
 30273  0006D2  6E02               	movwf	?_fifo_write+1,c
 30274  0006D4  0E5F               	movlw	__accesstop+-1
 30275  0006D6  6401               	cpfsgt	?_fifo_write,c
 30276  0006D8  6A02               	clrf	?_fifo_write+1,c
 30277  0006DA  0E40               	movlw	low _dlc
 30278  0006DC  6E03               	movwf	?_fifo_write+2,c
 30279  0006DE  0E00               	movlw	high _dlc
 30280  0006E0  6E04               	movwf	?_fifo_write+3,c
 30281  0006E2  0E0F               	movlw	15
 30282  0006E4  6E04               	movwf	?_fifo_write+3,c
 30283  0006E6  0E5F               	movlw	__accesstop+-1
 30284  0006E8  6403               	cpfsgt	?_fifo_write+2,c
 30285  0006EA  6A04               	clrf	?_fifo_write+3,c
 30286  0006EC  0E01               	movlw	1
 30287  0006EE  6E05               	movwf	?_fifo_write+4,c
 30288  0006F0  0E00               	movlw	0
 30289  0006F2  6E06               	movwf	?_fifo_write+5,c
 30290  0006F4  0E00               	movlw	0
 30291  0006F6  6E07               	movwf	?_fifo_write+6,c
 30292  0006F8  0E00               	movlw	0
 30293  0006FA  6E08               	movwf	?_fifo_write+7,c
 30294  0006FC  EC9C  F024         	call	_fifo_write	;wreg free
 30295  000700  0401               	decf	?_fifo_write,w,c
 30296  000702  1002               	iorwf	?_fifo_write+1,w,c
 30297  000704  B4D8               	btfsc	status,2,c
 30298  000706  D001               	goto	i1u1356_21
 30299  000708  D001               	goto	i1u1356_20
 30300  00070A                     i1u1356_21:
 30301  00070A  D002               	goto	i1l11300
 30302  00070C                     i1u1356_20:
 30303  00070C                     
 30304                           ;main.c: 272: fail = 1;
 30305  00070C  0E01               	movlw	1
 30306  00070E  6E1E               	movwf	Interrupt@fail,c
 30307  000710                     i1l11300:
 30308                           
 30309                           ;main.c: 273: }
 30310                           ;main.c: 274: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 30311  000710  0E34               	movlw	low _canInputFifo
 30312  000712  6E01               	movwf	?_fifo_write,c
 30313  000714  0E00               	movlw	high _canInputFifo
 30314  000716  6E02               	movwf	?_fifo_write+1,c
 30315  000718  0E0F               	movlw	15
 30316  00071A  6E02               	movwf	?_fifo_write+1,c
 30317  00071C  0E5F               	movlw	__accesstop+-1
 30318  00071E  6401               	cpfsgt	?_fifo_write,c
 30319  000720  6A02               	clrf	?_fifo_write+1,c
 30320  000722  0102               	movlb	2	; () banked
 30321  000724  0E02               	movlw	high _data
 30322  000726  6E04               	movwf	?_fifo_write+3,c
 30323  000728  0E80               	movlw	low _data
 30324  00072A  6E03               	movwf	?_fifo_write+2,c
 30325  00072C  5040               	movf	_dlc,w,c
 30326  00072E  6E05               	movwf	?_fifo_write+4,c
 30327  000730  6A06               	clrf	?_fifo_write+5,c
 30328  000732  6A07               	clrf	?_fifo_write+6,c
 30329  000734  6A08               	clrf	?_fifo_write+7,c
 30330  000736  EC9C  F024         	call	_fifo_write	;wreg free
 30331  00073A  5040               	movf	_dlc,w,c
 30332  00073C  1801               	xorwf	?_fifo_write,w,c
 30333  00073E  1002               	iorwf	?_fifo_write+1,w,c
 30334  000740  B4D8               	btfsc	status,2,c
 30335  000742  D001               	goto	i1u1357_21
 30336  000744  D001               	goto	i1u1357_20
 30337  000746                     i1u1357_21:
 30338  000746  D002               	goto	i1l11304
 30339  000748                     i1u1357_20:
 30340  000748                     
 30341                           ;main.c: 275: fail = 1;
 30342  000748  0E01               	movlw	1
 30343  00074A  6E1E               	movwf	Interrupt@fail,c
 30344  00074C                     i1l11304:
 30345                           
 30346                           ;main.c: 276: }
 30347                           ;main.c: 278: fifo_canrxcount++;
 30348  00074C  2A31               	incf	_fifo_canrxcount,f,c	;volatile
 30349  00074E                     
 30350                           ;main.c: 280: if ( fail ) {
 30351  00074E  501E               	movf	Interrupt@fail,w,c
 30352  000750  B4D8               	btfsc	status,2,c
 30353  000752  D001               	goto	i1u1358_21
 30354  000754  D001               	goto	i1u1358_20
 30355  000756                     i1u1358_21:
 30356  000756  D001               	goto	i1l11312
 30357  000758                     i1u1358_20:
 30358  000758  D765               	goto	i1l11284
 30359  00075A                     i1l11312:
 30360                           
 30361                           ;main.c: 287: }
 30362                           ;main.c: 289: }
 30363                           ;main.c: 291: }
 30364                           ;main.c: 294: RXBnIF = 0;
 30365  00075A  92A4               	bcf	4004,1,c	;volatile
 30366  00075C                     i1l456:
 30367  00075C  C01C  FFDA         	movff	??_Interrupt+8,fsr2h
 30368  000760  C01B  FFD9         	movff	??_Interrupt+7,fsr2l
 30369  000764  C01A  FFE2         	movff	??_Interrupt+6,fsr1h
 30370  000768  C019  FFE1         	movff	??_Interrupt+5,fsr1l
 30371  00076C  C018  FFE0         	movff	??_Interrupt+4,bsr
 30372  000770  C017  FFE8         	movff	??_Interrupt+3,wreg
 30373  000774  C016  FFD8         	movff	??_Interrupt+2,status
 30374  000778  0010               	retfie	
 30375  00077A                     __end_of_Interrupt:
 30376                           	opt stack 0
 30377                           tblptru	equ	0xFF8
 30378                           tblptrh	equ	0xFF7
 30379                           tblptrl	equ	0xFF6
 30380                           tablat	equ	0xFF5
 30381                           prodh	equ	0xFF4
 30382                           prodl	equ	0xFF3
 30383                           intcon	equ	0xFF2
 30384                           indf0	equ	0xFEF
 30385                           postinc0	equ	0xFEE
 30386                           fsr0h	equ	0xFEA
 30387                           fsr0l	equ	0xFE9
 30388                           wreg	equ	0xFE8
 30389                           indf1	equ	0xFE7
 30390                           postinc1	equ	0xFE6
 30391                           postdec1	equ	0xFE5
 30392                           fsr1h	equ	0xFE2
 30393                           fsr1l	equ	0xFE1
 30394                           bsr	equ	0xFE0
 30395                           indf2	equ	0xFDF
 30396                           postinc2	equ	0xFDE
 30397                           postdec2	equ	0xFDD
 30398                           plusw2	equ	0xFDB
 30399                           fsr2h	equ	0xFDA
 30400                           fsr2l	equ	0xFD9
 30401                           status	equ	0xFD8
 30402                           
 30403 ;; *************** function i1_WriteTimer0 *****************
 30404 ;; Defined at:
 30405 ;;		line 17 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/Timers/t0write.c"
 30406 ;; Parameters:    Size  Location     Type
 30407 ;;  timer0          2    0[COMRAM] unsigned int 
 30408 ;; Auto vars:     Size  Location     Type
 30409 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 30410 ;; Return value:  Size  Location     Type
 30411 ;;		None               void
 30412 ;; Registers used:
 30413 ;;		None
 30414 ;; Tracked objects:
 30415 ;;		On entry : 0/0
 30416 ;;		On exit  : 0/0
 30417 ;;		Unchanged: 0/0
 30418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30419 ;;      Params:         2       0       0       0       0       0       0
 30420 ;;      Locals:         2       0       0       0       0       0       0
 30421 ;;      Temps:          0       0       0       0       0       0       0
 30422 ;;      Totals:         4       0       0       0       0       0       0
 30423 ;;Total ram usage:        4 bytes
 30424 ;; Hardware stack levels used:    1
 30425 ;; This function calls:
 30426 ;;		Nothing
 30427 ;; This function is called by:
 30428 ;;		_Interrupt
 30429 ;; This function uses a non-reentrant model
 30430 ;;
 30431                           
 30432                           	psect	text89
 30433  006B72                     __ptext89:
 30434                           	opt stack 0
 30435  006B72                     i1_WriteTimer0:
 30436                           	opt stack 21
 30437                           
 30438                           ;incstack = 0
 30439                           ;incstack = 0
 30440  006B72  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 30441  006B76  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 30442  006B7A  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 30443  006B7E  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 30444  006B82  0012               	return	
 30445  006B84                     __end_ofi1_WriteTimer0:
 30446                           	opt stack 0
 30447                           tblptru	equ	0xFF8
 30448                           tblptrh	equ	0xFF7
 30449                           tblptrl	equ	0xFF6
 30450                           tablat	equ	0xFF5
 30451                           prodh	equ	0xFF4
 30452                           prodl	equ	0xFF3
 30453                           intcon	equ	0xFF2
 30454                           indf0	equ	0xFEF
 30455                           postinc0	equ	0xFEE
 30456                           fsr0h	equ	0xFEA
 30457                           fsr0l	equ	0xFE9
 30458                           wreg	equ	0xFE8
 30459                           indf1	equ	0xFE7
 30460                           postinc1	equ	0xFE6
 30461                           postdec1	equ	0xFE5
 30462                           fsr1h	equ	0xFE2
 30463                           fsr1l	equ	0xFE1
 30464                           bsr	equ	0xFE0
 30465                           indf2	equ	0xFDF
 30466                           postinc2	equ	0xFDE
 30467                           postdec2	equ	0xFDD
 30468                           plusw2	equ	0xFDB
 30469                           fsr2h	equ	0xFDA
 30470                           fsr2l	equ	0xFD9
 30471                           status	equ	0xFD8
 30472                           
 30473 ;; *************** function i1_fifo_getFree *****************
 30474 ;; Defined at:
 30475 ;;		line 97 in file "fifo.c"
 30476 ;; Parameters:    Size  Location     Type
 30477 ;;  f               2    0[COMRAM] PTR struct .
 30478 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 30479 ;; Auto vars:     Size  Location     Type
 30480 ;;		None
 30481 ;; Return value:  Size  Location     Type
 30482 ;;                  2    0[COMRAM] unsigned short 
 30483 ;; Registers used:
 30484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 30485 ;; Tracked objects:
 30486 ;;		On entry : 0/0
 30487 ;;		On exit  : 0/0
 30488 ;;		Unchanged: 0/0
 30489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30490 ;;      Params:         2       0       0       0       0       0       0
 30491 ;;      Locals:         0       0       0       0       0       0       0
 30492 ;;      Temps:          8       0       0       0       0       0       0
 30493 ;;      Totals:        10       0       0       0       0       0       0
 30494 ;;Total ram usage:       10 bytes
 30495 ;; Hardware stack levels used:    1
 30496 ;; This function calls:
 30497 ;;		Nothing
 30498 ;; This function is called by:
 30499 ;;		_Interrupt
 30500 ;; This function uses a non-reentrant model
 30501 ;;
 30502                           
 30503                           	psect	text90
 30504  005A16                     __ptext90:
 30505                           	opt stack 0
 30506  005A16                     i1_fifo_getFree:
 30507                           	opt stack 21
 30508                           
 30509                           ;fifo.c: 98: if (f->head < f->tail) {
 30510                           
 30511                           ;incstack = 0
 30512                           ;incstack = 0
 30513  005A16  EE20 F004          	lfsr	2,4
 30514  005A1A  5001               	movf	i1fifo_getFree@f,w,c
 30515  005A1C  26D9               	addwf	fsr2l,f,c
 30516  005A1E  5002               	movf	i1fifo_getFree@f+1,w,c
 30517  005A20  22DA               	addwfc	fsr2h,f,c
 30518  005A22  EE10 F002          	lfsr	1,2
 30519  005A26  5001               	movf	i1fifo_getFree@f,w,c
 30520  005A28  26E1               	addwf	fsr1l,f,c
 30521  005A2A  5002               	movf	i1fifo_getFree@f+1,w,c
 30522  005A2C  22E2               	addwfc	fsr1h,f,c
 30523  005A2E  52E6               	movf	postinc1,f,c
 30524  005A30  52DE               	movf	postinc2,f,c
 30525  005A32  50DD               	movf	postdec2,w,c
 30526  005A34  5CE5               	subwf	postdec1,w,c
 30527  005A36  E102               	bnz	i1u1297_25
 30528  005A38  50DF               	movf	indf2,w,c
 30529  005A3A  5CE7               	subwf	indf1,w,c
 30530  005A3C                     i1u1297_25:
 30531  005A3C  E213               	bc	i1l11054
 30532                           
 30533                           ;fifo.c: 99: return (f->tail - f->head);
 30534  005A3E  EE20 F002          	lfsr	2,2
 30535  005A42  D834               	call	PL114	;call to abstracted procedure
 30536  005A44  EE20 F004          	lfsr	2,4
 30537  005A48  5001               	movf	i1fifo_getFree@f,w,c
 30538  005A4A  26D9               	addwf	fsr2l,f,c
 30539  005A4C  5002               	movf	i1fifo_getFree@f+1,w,c
 30540  005A4E  22DA               	addwfc	fsr2h,f,c
 30541  005A50  CFDE F005          	movff	postinc2,??i1_fifo_getFree+2
 30542  005A54  CFDD F006          	movff	postdec2,??i1_fifo_getFree+3
 30543  005A58  5003               	movf	??i1_fifo_getFree,w,c
 30544  005A5A  5C05               	subwf	??i1_fifo_getFree+2,w,c
 30545  005A5C  6E01               	movwf	?i1_fifo_getFree,c
 30546  005A5E  5004               	movf	??i1_fifo_getFree+1,w,c
 30547  005A60  5806               	subwfb	??i1_fifo_getFree+3,w,c
 30548  005A62  D022               	goto	L60
 30549  005A64                     i1l11054:
 30550                           
 30551                           ;fifo.c: 101: else {
 30552                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 30553  005A64  EE20 F004          	lfsr	2,4
 30554  005A68  D821               	call	PL114	;call to abstracted procedure
 30555  005A6A  EE20 F002          	lfsr	2,2
 30556  005A6E  5001               	movf	i1fifo_getFree@f,w,c
 30557  005A70  26D9               	addwf	fsr2l,f,c
 30558  005A72  5002               	movf	i1fifo_getFree@f+1,w,c
 30559  005A74  22DA               	addwfc	fsr2h,f,c
 30560  005A76  CFDE F005          	movff	postinc2,??i1_fifo_getFree+2
 30561  005A7A  CFDD F006          	movff	postdec2,??i1_fifo_getFree+3
 30562  005A7E  EE20 F006          	lfsr	2,6
 30563  005A82  5001               	movf	i1fifo_getFree@f,w,c
 30564  005A84  26D9               	addwf	fsr2l,f,c
 30565  005A86  5002               	movf	i1fifo_getFree@f+1,w,c
 30566  005A88  22DA               	addwfc	fsr2h,f,c
 30567  005A8A  CFDE F007          	movff	postinc2,??i1_fifo_getFree+4
 30568  005A8E  CFDD F008          	movff	postdec2,??i1_fifo_getFree+5
 30569  005A92  5005               	movf	??i1_fifo_getFree+2,w,c
 30570  005A94  5C07               	subwf	??i1_fifo_getFree+4,w,c
 30571  005A96  6E09               	movwf	(??i1_fifo_getFree+6)& (0+255),c
 30572  005A98  5006               	movf	??i1_fifo_getFree+3,w,c
 30573  005A9A  5808               	subwfb	??i1_fifo_getFree+5,w,c
 30574  005A9C  6E0A               	movwf	(??i1_fifo_getFree+7)& (0+255),c
 30575  005A9E  5003               	movf	??i1_fifo_getFree,w,c
 30576  005AA0  2409               	addwf	??i1_fifo_getFree+6,w,c
 30577  005AA2  6E01               	movwf	?i1_fifo_getFree,c
 30578  005AA4  5004               	movf	??i1_fifo_getFree+1,w,c
 30579  005AA6  200A               	addwfc	??i1_fifo_getFree+7,w,c
 30580  005AA8                     L60:
 30581  005AA8  6E02               	movwf	?i1_fifo_getFree+1,c
 30582  005AAA  0012               	return	
 30583  005AAC                     __end_ofi1_fifo_getFree:
 30584                           	opt stack 0
 30585  005AAC                     PL114:
 30586                           	opt stack 21
 30587  005AAC  5001               	movf	i1fifo_getFree@f,w,c
 30588  005AAE  26D9               	addwf	fsr2l,f,c
 30589  005AB0  5002               	movf	i1fifo_getFree@f+1,w,c
 30590  005AB2  22DA               	addwfc	fsr2h,f,c
 30591  005AB4  CFDE F003          	movff	postinc2,??i1_fifo_getFree
 30592  005AB8  CFDD F004          	movff	postdec2,??i1_fifo_getFree+1
 30593  005ABC  0012               	return	
 30594  005ABE                     __end_ofPL114:
 30595                           	opt stack 0
 30596                           tblptru	equ	0xFF8
 30597                           tblptrh	equ	0xFF7
 30598                           tblptrl	equ	0xFF6
 30599                           tablat	equ	0xFF5
 30600                           prodh	equ	0xFF4
 30601                           prodl	equ	0xFF3
 30602                           intcon	equ	0xFF2
 30603                           indf0	equ	0xFEF
 30604                           postinc0	equ	0xFEE
 30605                           fsr0h	equ	0xFEA
 30606                           fsr0l	equ	0xFE9
 30607                           wreg	equ	0xFE8
 30608                           indf1	equ	0xFE7
 30609                           postinc1	equ	0xFE6
 30610                           postdec1	equ	0xFE5
 30611                           fsr1h	equ	0xFE2
 30612                           fsr1l	equ	0xFE1
 30613                           bsr	equ	0xFE0
 30614                           indf2	equ	0xFDF
 30615                           postinc2	equ	0xFDE
 30616                           postdec2	equ	0xFDD
 30617                           plusw2	equ	0xFDB
 30618                           fsr2h	equ	0xFDA
 30619                           fsr2l	equ	0xFD9
 30620                           status	equ	0xFD8
 30621                           
 30622 ;; *************** function _ECANReceiveMessage *****************
 30623 ;; Defined at:
 30624 ;;		line 803 in file "ECAN.c"
 30625 ;; Parameters:    Size  Location     Type
 30626 ;;  id              1    wreg     PTR unsigned long 
 30627 ;;		 -> id(4), 
 30628 ;;  data            2    7[COMRAM] PTR unsigned char 
 30629 ;;		 -> data(8), 
 30630 ;;  dataLen         1    9[COMRAM] PTR unsigned char 
 30631 ;;		 -> dlc(1), 
 30632 ;;  msgFlags        1   10[COMRAM] PTR enum E16324
 30633 ;;		 -> flags(1), 
 30634 ;; Auto vars:     Size  Location     Type
 30635 ;;  id              1   13[COMRAM] PTR unsigned long 
 30636 ;;		 -> id(4), 
 30637 ;;  ptr             2   17[COMRAM] PTR unsigned char 
 30638 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30639 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30640 ;;  savedPtr        2   11[COMRAM] PTR unsigned char 
 30641 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30642 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30643 ;;  temp            1   16[COMRAM] struct .
 30644 ;;  mode            1   15[COMRAM] unsigned char 
 30645 ;;  i               1   14[COMRAM] unsigned char 
 30646 ;; Return value:  Size  Location     Type
 30647 ;;                  1    wreg      enum E15660
 30648 ;; Registers used:
 30649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 30650 ;; Tracked objects:
 30651 ;;		On entry : F/2
 30652 ;;		On exit  : 0/0
 30653 ;;		Unchanged: 0/0
 30654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30655 ;;      Params:         4       0       0       0       0       0       0
 30656 ;;      Locals:         8       0       0       0       0       0       0
 30657 ;;      Temps:          0       0       0       0       0       0       0
 30658 ;;      Totals:        12       0       0       0       0       0       0
 30659 ;;Total ram usage:       12 bytes
 30660 ;; Hardware stack levels used:    1
 30661 ;; Hardware stack levels required when called:    1
 30662 ;; This function calls:
 30663 ;;		__ECANPointBuffer
 30664 ;;		__RegsToCANID
 30665 ;; This function is called by:
 30666 ;;		_Interrupt
 30667 ;; This function uses a non-reentrant model
 30668 ;;
 30669                           
 30670                           	psect	text91
 30671  003C1A                     __ptext91:
 30672                           	opt stack 0
 30673  003C1A                     _ECANReceiveMessage:
 30674                           	opt stack 20
 30675                           
 30676                           ;incstack = 0
 30677                           ;incstack = 0
 30678                           ;ECANReceiveMessage@id stored from wreg
 30679  003C1A  CFE8 F00E          	movff	wreg,ECANReceiveMessage@id
 30680                           
 30681                           ; BSR set to: 2
 30682                           ;ECAN.c: 805: BYTE mode;
 30683                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 30684                           ;ECAN.c: 809: char i;
 30685                           ;ECAN.c: 810: BYTE_VAL temp;
 30686                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 30687  003C1E  6A2F               	clrf	__ECANRxFilterHitInfo,c
 30688                           
 30689                           ; BSR set to: 2
 30690                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 30691  003C20  5077               	movf	3959,w,c	;volatile
 30692  003C22  0BC0               	andlw	192
 30693  003C24  6E10               	movwf	ECANReceiveMessage@mode,c
 30694                           
 30695                           ; BSR set to: 2
 30696                           ;ECAN.c: 816: if ( mode == 0x00 )
 30697  003C26  6610               	tstfsz	ECANReceiveMessage@mode,c
 30698  003C28  D032               	goto	i1l11098
 30699                           
 30700                           ; BSR set to: 2
 30701                           ;ECAN.c: 822: {
 30702                           ;ECAN.c: 824: if ( RXB0FUL )
 30703  003C2A  AE60               	btfss	3936,7,c	;volatile
 30704  003C2C  D012               	goto	i1l1629
 30705                           
 30706                           ; BSR set to: 2
 30707                           ;ECAN.c: 825: {
 30708                           ;ECAN.c: 827: RXB0IF = 0;
 30709  003C2E  90A4               	bcf	4004,0,c	;volatile
 30710                           
 30711                           ;ECAN.c: 830: if ( RXB0OVFL )
 30712  003C30  AE74               	btfss	3956,7,c	;volatile
 30713  003C32  D006               	goto	i1l11074
 30714                           
 30715                           ; BSR set to: 2
 30716                           ;ECAN.c: 831: {
 30717                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 30718  003C34  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30719  003C36  6ED9               	movwf	fsr2l,c
 30720  003C38  6ADA               	clrf	fsr2h,c
 30721  003C3A  0E00               	movlw	0
 30722  003C3C  86DB               	bsf	plusw2,3,c
 30723                           
 30724                           ; BSR set to: 2
 30725                           ;ECAN.c: 833: RXB0OVFL = 0;
 30726  003C3E  9E74               	bcf	3956,7,c	;volatile
 30727  003C40                     i1l11074:
 30728                           
 30729                           ; BSR set to: 2
 30730                           ;ECAN.c: 834: }
 30731                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 30732  003C40  A060               	btfss	3936,0,c	;volatile
 30733  003C42  D002               	bra	i1u1301_25
 30734  003C44  802F               	bsf	__ECANRxFilterHitInfo,0,c
 30735  003C46  D001               	bra	i1u1301_27
 30736  003C48                     i1u1301_25:
 30737  003C48  902F               	bcf	__ECANRxFilterHitInfo,0,c
 30738  003C4A                     i1u1301_27:
 30739                           
 30740                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 30741  003C4A  0E0F               	movlw	15	;volatile
 30742  003C4C  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30743  003C4E  0E60               	movlw	96	;volatile
 30744  003C50  D01A               	goto	L61
 30745  003C52                     i1l1629:
 30746                           
 30747                           ; BSR set to: 2
 30748                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 30749  003C52  010F               	movlb	15	; () banked
 30750  003C54  AF50               	btfss	80,7,b	;volatile
 30751  003C56  D019               	goto	i1l11092
 30752                           
 30753                           ; BSR set to: 15
 30754                           ;ECAN.c: 842: {
 30755                           ;ECAN.c: 844: RXB1IF = 0;
 30756  003C58  92A4               	bcf	4004,1,c	;volatile
 30757                           
 30758                           ;ECAN.c: 847: if ( RXB1OVFL )
 30759  003C5A  AC74               	btfss	3956,6,c	;volatile
 30760  003C5C  D006               	goto	i1l11084
 30761                           
 30762                           ; BSR set to: 15
 30763                           ;ECAN.c: 848: {
 30764                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 30765  003C5E  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30766  003C60  6ED9               	movwf	fsr2l,c
 30767  003C62  6ADA               	clrf	fsr2h,c
 30768  003C64  0E00               	movlw	0
 30769  003C66  86DB               	bsf	plusw2,3,c
 30770                           
 30771                           ; BSR set to: 15
 30772                           ;ECAN.c: 850: RXB1OVFL = 0;
 30773  003C68  9C74               	bcf	3956,6,c	;volatile
 30774  003C6A                     i1l11084:
 30775                           
 30776                           ; BSR set to: 15
 30777                           ;ECAN.c: 851: }
 30778                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 30779  003C6A  5150               	movf	80,w,b	;volatile
 30780  003C6C  0B07               	andlw	7
 30781  003C6E  6E2F               	movwf	__ECANRxFilterHitInfo,c
 30782                           
 30783                           ; BSR set to: 15
 30784                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 30785  003C70  0E02               	movlw	2
 30786  003C72  602F               	cpfslt	__ECANRxFilterHitInfo,c
 30787  003C74  D005               	goto	i1l11090
 30788                           
 30789                           ; BSR set to: 15
 30790                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 30791  003C76  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30792  003C78  6ED9               	movwf	fsr2l,c
 30793  003C7A  6ADA               	clrf	fsr2h,c
 30794  003C7C  0E00               	movlw	0
 30795  003C7E  8EDB               	bsf	plusw2,7,c
 30796  003C80                     i1l11090:
 30797                           
 30798                           ; BSR set to: 15
 30799                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 30800  003C80  0E0F               	movlw	15	;volatile
 30801  003C82  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30802  003C84  0E50               	movlw	80	;volatile
 30803  003C86                     L61:
 30804  003C86  6E12               	movwf	ECANReceiveMessage@ptr,c
 30805                           
 30806                           ;ECAN.c: 860: }
 30807  003C88  D065               	goto	i1l11152
 30808  003C8A                     i1l11092:
 30809                           
 30810                           ;ECAN.c: 861: else
 30811                           ;ECAN.c: 862: return FALSE;
 30812  003C8A  0E00               	movlw	0
 30813  003C8C  D0C4               	goto	i1l1636
 30814  003C8E                     i1l11098:
 30815                           
 30816                           ; BSR set to: 2
 30817                           ;ECAN.c: 869: else if ( mode == 0x40 )
 30818  003C8E  5010               	movf	ECANReceiveMessage@mode,w,c
 30819  003C90  0A40               	xorlw	64
 30820  003C92  E146               	bnz	i1l1639
 30821                           
 30822                           ; BSR set to: 2
 30823                           ;ECAN.c: 875: {
 30824                           ;ECAN.c: 876: if ( RXB0FUL )
 30825  003C94  AE60               	btfss	3936,7,c	;volatile
 30826  003C96  D004               	goto	i1l1640
 30827                           
 30828                           ; BSR set to: 2
 30829                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 30830  003C98  0E0F               	movlw	15	;volatile
 30831  003C9A  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30832  003C9C  0E60               	movlw	96	;volatile
 30833  003C9E  D03E               	goto	L68
 30834  003CA0                     i1l1640:
 30835                           
 30836                           ; BSR set to: 2
 30837                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 30838  003CA0  010F               	movlb	15	; () banked
 30839  003CA2  AF50               	btfss	80,7,b	;volatile
 30840  003CA4  D004               	goto	i1l1642
 30841                           
 30842                           ; BSR set to: 15
 30843                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 30844  003CA6  0E0F               	movlw	15	;volatile
 30845  003CA8  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30846  003CAA  0E50               	movlw	80	;volatile
 30847  003CAC  D037               	goto	L68
 30848  003CAE                     i1l1642:
 30849                           
 30850                           ; BSR set to: 15
 30851                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 30852  003CAE  010D               	movlb	13
 30853  003CB0  B5F8               	btfsc	248,2,b	;volatile
 30854  003CB2  D007               	goto	i1l1644
 30855  003CB4  010E               	movlb	14
 30856  003CB6  AF20               	btfss	32,7,b	;volatile
 30857  003CB8  D004               	goto	i1l1644
 30858                           
 30859                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 30860  003CBA  0E0E               	movlw	14	;volatile
 30861  003CBC  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30862  003CBE  0E20               	movlw	32	;volatile
 30863  003CC0  D02D               	goto	L68
 30864  003CC2                     i1l1644:
 30865                           
 30866                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 30867  003CC2  010D               	movlb	13
 30868  003CC4  B7F8               	btfsc	248,3,b	;volatile
 30869  003CC6  D007               	goto	i1l1646
 30870  003CC8  010E               	movlb	14
 30871  003CCA  AF30               	btfss	48,7,b	;volatile
 30872  003CCC  D004               	goto	i1l1646
 30873                           
 30874                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 30875  003CCE  0E0E               	movlw	14	;volatile
 30876  003CD0  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30877  003CD2  0E30               	movlw	48	;volatile
 30878  003CD4  D023               	goto	L68
 30879  003CD6                     i1l1646:
 30880                           
 30881                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 30882  003CD6  010D               	movlb	13
 30883  003CD8  B9F8               	btfsc	248,4,b	;volatile
 30884  003CDA  D007               	goto	i1l1648
 30885  003CDC  010E               	movlb	14
 30886  003CDE  AF40               	btfss	64,7,b	;volatile
 30887  003CE0  D004               	goto	i1l1648
 30888                           
 30889                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 30890  003CE2  0E0E               	movlw	14	;volatile
 30891  003CE4  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30892  003CE6  0E40               	movlw	64	;volatile
 30893  003CE8  D019               	goto	L68
 30894  003CEA                     i1l1648:
 30895                           
 30896                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 30897  003CEA  010D               	movlb	13
 30898  003CEC  BBF8               	btfsc	248,5,b	;volatile
 30899  003CEE  D005               	goto	i1l1650
 30900  003CF0  010E               	movlb	14
 30901  003CF2  AF50               	btfss	80,7,b	;volatile
 30902  003CF4  D002               	goto	i1l1650
 30903                           
 30904                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 30905  003CF6  0E0E               	movlw	14	;volatile
 30906  003CF8  D7D7               	goto	L69
 30907  003CFA                     i1l1650:
 30908                           
 30909                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 30910  003CFA  010D               	movlb	13
 30911  003CFC  BDF8               	btfsc	248,6,b	;volatile
 30912  003CFE  D005               	goto	i1l1652
 30913  003D00  010E               	movlb	14
 30914  003D02  AF60               	btfss	96,7,b	;volatile
 30915  003D04  D002               	goto	i1l1652
 30916                           
 30917                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 30918  003D06  0E0E               	movlw	14	;volatile
 30919  003D08  D7C8               	goto	L70
 30920  003D0A                     i1l1652:
 30921                           
 30922                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 30923  003D0A  010D               	movlb	13
 30924  003D0C  BFF8               	btfsc	248,7,b	;volatile
 30925  003D0E  D7BD               	goto	i1l11092
 30926  003D10  010E               	movlb	14
 30927  003D12  AF70               	btfss	112,7,b	;volatile
 30928  003D14  D7BA               	goto	i1l11092
 30929                           
 30930                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 30931  003D16  0E0E               	movlw	14	;volatile
 30932  003D18  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 30933  003D1A  0E70               	movlw	112	;volatile
 30934  003D1C                     L68:
 30935  003D1C  6E12               	movwf	ECANReceiveMessage@ptr,c
 30936  003D1E  D00A               	goto	i1l11142
 30937  003D20                     i1l1639:
 30938                           
 30939                           ; BSR set to: 2
 30940                           ;ECAN.c: 910: else
 30941                           ;ECAN.c: 915: {
 30942                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 30943  003D20  AE74               	btfss	3956,7,c	;volatile
 30944  003D22  D7B3               	goto	i1l11092
 30945                           
 30946                           ; BSR set to: 2
 30947                           ;ECAN.c: 919: {
 30948                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 30949  003D24  506F               	movf	3951,w,c	;volatile
 30950  003D26  0B07               	andlw	7
 30951  003D28  ECBA  F030         	call	__ECANPointBuffer
 30952  003D2C  C001  F012         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 30953  003D30  C002  F013         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 30954  003D34                     i1l11142:
 30955                           
 30956                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 30957  003D34  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 30958  003D38  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 30959  003D3C  50DF               	movf	indf2,w,c
 30960  003D3E  0B1F               	andlw	31
 30961  003D40  6E2F               	movwf	__ECANRxFilterHitInfo,c
 30962                           
 30963                           ;ECAN.c: 934: RXB1IF = 0;
 30964  003D42  92A4               	bcf	4004,1,c	;volatile
 30965                           
 30966                           ;ECAN.c: 936: if ( RXB1OVFL )
 30967  003D44  AC74               	btfss	3956,6,c	;volatile
 30968  003D46  D006               	goto	i1l11152
 30969                           
 30970                           ;ECAN.c: 937: {
 30971                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 30972  003D48  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30973  003D4A  6ED9               	movwf	fsr2l,c
 30974  003D4C  6ADA               	clrf	fsr2h,c
 30975  003D4E  0E00               	movlw	0
 30976  003D50  86DB               	bsf	plusw2,3,c
 30977                           
 30978                           ;ECAN.c: 939: RXB1OVFL = 0;
 30979  003D52  9C74               	bcf	3956,6,c	;volatile
 30980  003D54                     i1l11152:
 30981                           
 30982                           ;ECAN.c: 944: savedPtr = ptr;
 30983  003D54  C012  F00C         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 30984  003D58  C013  F00D         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 30985                           
 30986                           ;ECAN.c: 945: *msgFlags = 0;
 30987  003D5C  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 30988  003D5E  6ED9               	movwf	fsr2l,c
 30989  003D60  6ADA               	clrf	fsr2h,c
 30990  003D62  6ADF               	clrf	indf2,c
 30991                           
 30992                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 30993  003D64  EE20 F005          	lfsr	2,5
 30994  003D68  D857               	call	PL140	;call to abstracted procedure
 30995                           
 30996                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 30997  003D6A  500A               	movf	ECANReceiveMessage@dataLen,w,c
 30998  003D6C  6ED9               	movwf	fsr2l,c
 30999  003D6E  6ADA               	clrf	fsr2h,c
 31000  003D70  5011               	movf	ECANReceiveMessage@temp,w,c
 31001  003D72  0B0F               	andlw	15
 31002  003D74  6EDF               	movwf	indf2,c
 31003                           
 31004                           ;ECAN.c: 952: if ( temp.bits.b6 )
 31005  003D76  AC11               	btfss	ECANReceiveMessage@temp,6,c
 31006  003D78  D005               	goto	i1l1660
 31007                           
 31008                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 31009  003D7A  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 31010  003D7C  6ED9               	movwf	fsr2l,c
 31011  003D7E  6ADA               	clrf	fsr2h,c
 31012  003D80  0E00               	movlw	0
 31013  003D82  8CDB               	bsf	plusw2,6,c
 31014  003D84                     i1l1660:
 31015                           
 31016                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 31017  003D84  EE20 F002          	lfsr	2,2
 31018  003D88  D847               	call	PL140	;call to abstracted procedure
 31019                           
 31020                           ;ECAN.c: 957: if ( temp.bits.b3 )
 31021  003D8A  A611               	btfss	ECANReceiveMessage@temp,3,c
 31022  003D8C  D008               	goto	i1l1661
 31023                           
 31024                           ;ECAN.c: 958: {
 31025                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 31026  003D8E  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 31027  003D90  6ED9               	movwf	fsr2l,c
 31028  003D92  6ADA               	clrf	fsr2h,c
 31029  003D94  0E00               	movlw	0
 31030  003D96  8ADB               	bsf	plusw2,5,c
 31031                           
 31032                           ;ECAN.c: 960: temp.Val = 1;
 31033  003D98  0E01               	movlw	1
 31034  003D9A  6E11               	movwf	ECANReceiveMessage@temp,c
 31035                           
 31036                           ;ECAN.c: 961: }
 31037  003D9C  D001               	goto	i1l11170
 31038  003D9E                     i1l1661:
 31039                           
 31040                           ;ECAN.c: 962: else
 31041                           ;ECAN.c: 963: temp.Val = 0;
 31042  003D9E  6A11               	clrf	ECANReceiveMessage@temp,c
 31043  003DA0                     i1l11170:
 31044                           
 31045                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 31046  003DA0  2812               	incf	ECANReceiveMessage@ptr,w,c
 31047  003DA2  6E01               	movwf	?__RegsToCANID,c
 31048  003DA4  0E00               	movlw	0
 31049  003DA6  2013               	addwfc	ECANReceiveMessage@ptr+1,w,c
 31050  003DA8  6E02               	movwf	?__RegsToCANID+1,c
 31051  003DAA  C00E  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 31052  003DAE  C011  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 31053  003DB2  EC32  F025         	call	__RegsToCANID	;wreg free
 31054                           
 31055                           ;ECAN.c: 968: ptr += 6;
 31056  003DB6  0E06               	movlw	6
 31057  003DB8  2612               	addwf	ECANReceiveMessage@ptr,f,c
 31058  003DBA  0E00               	movlw	0
 31059  003DBC  2213               	addwfc	ECANReceiveMessage@ptr+1,f,c
 31060                           
 31061                           ;ECAN.c: 969: temp.Val = *dataLen;
 31062  003DBE  500A               	movf	ECANReceiveMessage@dataLen,w,c
 31063  003DC0  6ED9               	movwf	fsr2l,c
 31064  003DC2  6ADA               	clrf	fsr2h,c
 31065  003DC4  50DF               	movf	indf2,w,c
 31066  003DC6  6E11               	movwf	ECANReceiveMessage@temp,c
 31067                           
 31068                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 31069  003DC8  6A0F               	clrf	ECANReceiveMessage@i,c
 31070  003DCA  D00F               	goto	i1l11186
 31071  003DCC                     i1l11178:
 31072                           
 31073                           ;ECAN.c: 971: *data++ = *ptr++;
 31074  003DCC  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 31075  003DD0  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 31076  003DD4  C008  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 31077  003DD8  C009  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 31078  003DDC  CFDF FFE7          	movff	indf2,indf1
 31079  003DE0  4A12               	infsnz	ECANReceiveMessage@ptr,f,c
 31080  003DE2  2A13               	incf	ECANReceiveMessage@ptr+1,f,c
 31081  003DE4  4A08               	infsnz	ECANReceiveMessage@data,f,c
 31082  003DE6  2A09               	incf	ECANReceiveMessage@data+1,f,c
 31083  003DE8  2A0F               	incf	ECANReceiveMessage@i,f,c
 31084  003DEA                     i1l11186:
 31085  003DEA  5011               	movf	ECANReceiveMessage@temp,w,c
 31086  003DEC  5C0F               	subwf	ECANReceiveMessage@i,w,c
 31087  003DEE  E3EE               	bnc	i1l11178
 31088                           
 31089                           ;ECAN.c: 974: if ( IRXIF )
 31090  003DF0  AEA4               	btfss	4004,7,c	;volatile
 31091  003DF2  D006               	goto	i1l11192
 31092                           
 31093                           ;ECAN.c: 975: {
 31094                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 31095  003DF4  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 31096  003DF6  6ED9               	movwf	fsr2l,c
 31097  003DF8  6ADA               	clrf	fsr2h,c
 31098  003DFA  0E00               	movlw	0
 31099  003DFC  88DB               	bsf	plusw2,4,c
 31100                           
 31101                           ;ECAN.c: 977: IRXIF = 0;
 31102  003DFE  9EA4               	bcf	4004,7,c	;volatile
 31103  003E00                     i1l11192:
 31104                           
 31105                           ;ECAN.c: 978: }
 31106                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 31107  003E00  C00C  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 31108  003E04  C00D  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 31109  003E08  0E7F               	movlw	127
 31110  003E0A  16DF               	andwf	indf2,f,c
 31111                           
 31112                           ;ECAN.c: 985: if ( mode == 0x80 )
 31113  003E0C  5010               	movf	ECANReceiveMessage@mode,w,c
 31114  003E0E  0A80               	xorlw	128
 31115  003E10  B4D8               	btfsc	status,2,c
 31116                           
 31117                           ;ECAN.c: 986: FIFOEMPTY = 0;
 31118  003E12  9E74               	bcf	3956,7,c	;volatile
 31119                           
 31120                           ;ECAN.c: 992: return TRUE;
 31121  003E14  0E01               	movlw	1
 31122  003E16                     i1l1636:
 31123  003E16  0012               	return	
 31124  003E18                     __end_of_ECANReceiveMessage:
 31125                           	opt stack 0
 31126  003E18                     PL140:
 31127                           	opt stack 20
 31128  003E18  5012               	movf	ECANReceiveMessage@ptr,w,c
 31129  003E1A  26D9               	addwf	fsr2l,f,c
 31130  003E1C  5013               	movf	ECANReceiveMessage@ptr+1,w,c
 31131  003E1E  22DA               	addwfc	fsr2h,f,c
 31132  003E20  50DF               	movf	indf2,w,c
 31133  003E22  6E11               	movwf	ECANReceiveMessage@temp,c
 31134  003E24  0012               	return	
 31135  003E26                     __end_ofPL140:
 31136                           	opt stack 0
 31137                           tblptru	equ	0xFF8
 31138                           tblptrh	equ	0xFF7
 31139                           tblptrl	equ	0xFF6
 31140                           tablat	equ	0xFF5
 31141                           prodh	equ	0xFF4
 31142                           prodl	equ	0xFF3
 31143                           intcon	equ	0xFF2
 31144                           indf0	equ	0xFEF
 31145                           postinc0	equ	0xFEE
 31146                           fsr0h	equ	0xFEA
 31147                           fsr0l	equ	0xFE9
 31148                           wreg	equ	0xFE8
 31149                           indf1	equ	0xFE7
 31150                           postinc1	equ	0xFE6
 31151                           postdec1	equ	0xFE5
 31152                           fsr1h	equ	0xFE2
 31153                           fsr1l	equ	0xFE1
 31154                           bsr	equ	0xFE0
 31155                           indf2	equ	0xFDF
 31156                           postinc2	equ	0xFDE
 31157                           postdec2	equ	0xFDD
 31158                           plusw2	equ	0xFDB
 31159                           fsr2h	equ	0xFDA
 31160                           fsr2l	equ	0xFD9
 31161                           status	equ	0xFD8
 31162                           
 31163 ;; *************** function __RegsToCANID *****************
 31164 ;; Defined at:
 31165 ;;		line 1158 in file "ECAN.c"
 31166 ;; Parameters:    Size  Location     Type
 31167 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 31168 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 31169 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 31170 ;;  val             1    2[COMRAM] PTR unsigned long 
 31171 ;;		 -> id(4), 
 31172 ;;  type            1    3[COMRAM] unsigned char 
 31173 ;; Auto vars:     Size  Location     Type
 31174 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 31175 ;;		 -> id(4), 
 31176 ;; Return value:  Size  Location     Type
 31177 ;;		None               void
 31178 ;; Registers used:
 31179 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 31180 ;; Tracked objects:
 31181 ;;		On entry : 0/2
 31182 ;;		On exit  : 0/0
 31183 ;;		Unchanged: 0/0
 31184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31185 ;;      Params:         4       0       0       0       0       0       0
 31186 ;;      Locals:         1       0       0       0       0       0       0
 31187 ;;      Temps:          2       0       0       0       0       0       0
 31188 ;;      Totals:         7       0       0       0       0       0       0
 31189 ;;Total ram usage:        7 bytes
 31190 ;; Hardware stack levels used:    1
 31191 ;; This function calls:
 31192 ;;		Nothing
 31193 ;; This function is called by:
 31194 ;;		_ECANReceiveMessage
 31195 ;; This function uses a non-reentrant model
 31196 ;;
 31197                           
 31198                           	psect	text92
 31199  004A64                     __ptext92:
 31200                           	opt stack 0
 31201  004A64                     __RegsToCANID:
 31202                           	opt stack 20
 31203                           
 31204                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 31205                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 31206                           
 31207                           ;incstack = 0
 31208                           ;incstack = 0
 31209  004A64  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 31210                           
 31211                           ;ECAN.c: 1163: if ( type == 0 )
 31212  004A68  6604               	tstfsz	__RegsToCANID@type,c
 31213  004A6A  D02B               	goto	i1l10830
 31214                           
 31215                           ;ECAN.c: 1164: {
 31216                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 31217  004A6C  5007               	movf	__RegsToCANID@Value,w,c
 31218  004A6E  6ED9               	movwf	fsr2l,c
 31219  004A70  D862               	call	PL88	;call to abstracted procedure
 31220  004A72  3605               	rlcf	??__RegsToCANID,f,c
 31221  004A74  90D8               	bcf	status,0,c
 31222  004A76  3605               	rlcf	??__RegsToCANID,f,c
 31223  004A78  90D8               	bcf	status,0,c
 31224  004A7A  3405               	rlcf	??__RegsToCANID,w,c
 31225  004A7C  6EDF               	movwf	indf2,c
 31226                           
 31227                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 31228  004A7E  5007               	movf	__RegsToCANID@Value,w,c
 31229  004A80  6ED9               	movwf	fsr2l,c
 31230  004A82  6ADA               	clrf	fsr2h,c
 31231  004A84  2AD9               	incf	fsr2l,f,c
 31232  004A86  6ADA               	clrf	fsr2h,c
 31233  004A88  D873               	call	PL102	;call to abstracted procedure
 31234  004A8A                     i1u1260_25:
 31235  004A8A  90D8               	bcf	status,0,c
 31236  004A8C  3205               	rrcf	??__RegsToCANID,f,c
 31237  004A8E  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 31238  004A90  D7FC               	goto	i1u1260_25
 31239  004A92  5005               	movf	??__RegsToCANID,w,c
 31240                           
 31241                           ;ECAN.c: 1168: ptr++;
 31242                           
 31243                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 31244  004A94  D859               	call	PL90	;call to abstracted procedure
 31245  004A96  0E05               	movlw	5
 31246  004A98  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 31247  004A9A                     i1u1261_25:
 31248  004A9A  90D8               	bcf	status,0,c
 31249  004A9C  3205               	rrcf	??__RegsToCANID,f,c
 31250  004A9E  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 31251  004AA0  D7FC               	goto	i1u1261_25
 31252  004AA2  5007               	movf	__RegsToCANID@Value,w,c
 31253  004AA4  6ED9               	movwf	fsr2l,c
 31254  004AA6  6ADA               	clrf	fsr2h,c
 31255  004AA8  5005               	movf	??__RegsToCANID,w,c
 31256  004AAA  12DF               	iorwf	indf2,f,c
 31257                           
 31258                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 31259  004AAC  D83D               	call	PL56	;call to abstracted procedure
 31260  004AAE  6ADF               	clrf	indf2,c
 31261                           
 31262                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 31263  004AB0  5007               	movf	__RegsToCANID@Value,w,c
 31264  004AB2  6ED9               	movwf	fsr2l,c
 31265  004AB4  6ADA               	clrf	fsr2h,c
 31266  004AB6  0E03               	movlw	3
 31267  004AB8  26D9               	addwf	fsr2l,f,c
 31268  004ABA  6ADA               	clrf	fsr2h,c
 31269  004ABC  0E00               	movlw	0
 31270  004ABE  6EDF               	movwf	indf2,c
 31271                           
 31272                           ;ECAN.c: 1172: }
 31273  004AC0  D032               	goto	i1l1683
 31274  004AC2                     i1l10830:
 31275                           
 31276                           ;ECAN.c: 1173: else
 31277                           ;ECAN.c: 1174: {
 31278                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 31279  004AC2  D832               	call	PL56	;call to abstracted procedure
 31280  004AC4  D855               	call	PL102	;call to abstracted procedure
 31281  004AC6                     i1u1262_25:
 31282  004AC6  90D8               	bcf	status,0,c
 31283  004AC8  3605               	rlcf	??__RegsToCANID,f,c
 31284  004ACA  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 31285  004ACC  D7FC               	goto	i1u1262_25
 31286  004ACE  5005               	movf	??__RegsToCANID,w,c
 31287  004AD0  6EDF               	movwf	indf2,c
 31288                           
 31289                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 31290  004AD2  5007               	movf	__RegsToCANID@Value,w,c
 31291  004AD4  6ED9               	movwf	fsr2l,c
 31292  004AD6  6ADA               	clrf	fsr2h,c
 31293  004AD8  0E03               	movlw	3
 31294  004ADA  26D9               	addwf	fsr2l,f,c
 31295  004ADC  D82C               	call	PL88	;call to abstracted procedure
 31296  004ADE  3205               	rrcf	??__RegsToCANID,f,c
 31297  004AE0  90D8               	bcf	status,0,c
 31298  004AE2  3205               	rrcf	??__RegsToCANID,f,c
 31299  004AE4  90D8               	bcf	status,0,c
 31300  004AE6  3005               	rrcf	??__RegsToCANID,w,c
 31301                           
 31302                           ;ECAN.c: 1178: ptr++;
 31303                           
 31304                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 31305  004AE8  D82F               	call	PL90	;call to abstracted procedure
 31306  004AEA  0E03               	movlw	3
 31307  004AEC  1605               	andwf	??__RegsToCANID,f,c
 31308  004AEE  D81C               	call	PL56	;call to abstracted procedure
 31309  004AF0  5005               	movf	??__RegsToCANID,w,c
 31310  004AF2  12DF               	iorwf	indf2,f,c
 31311                           
 31312                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 31313  004AF4  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31314  004AF8  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31315  004AFC  50DF               	movf	indf2,w,c
 31316  004AFE  6E05               	movwf	??__RegsToCANID& (0+255),c
 31317  004B00  90D8               	bcf	status,0,c
 31318  004B02  3205               	rrcf	??__RegsToCANID,f,c
 31319  004B04  90D8               	bcf	status,0,c
 31320  004B06  3205               	rrcf	??__RegsToCANID,f,c
 31321  004B08  90D8               	bcf	status,0,c
 31322  004B0A  3205               	rrcf	??__RegsToCANID,f,c
 31323  004B0C  0E1C               	movlw	28
 31324  004B0E  1605               	andwf	??__RegsToCANID,f,c
 31325  004B10  D80B               	call	PL56	;call to abstracted procedure
 31326  004B12  5005               	movf	??__RegsToCANID,w,c
 31327  004B14  12DF               	iorwf	indf2,f,c
 31328                           
 31329                           ;ECAN.c: 1182: ptr++;
 31330                           
 31331                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 31332  004B16  D822               	call	PL98	;call to abstracted procedure
 31333  004B18  2AE1               	incf	fsr1l,f,c
 31334  004B1A  6AE2               	clrf	fsr1h,c
 31335  004B1C  CFDF FFE7          	movff	indf2,indf1
 31336                           
 31337                           ;ECAN.c: 1184: ptr++;
 31338                           
 31339                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 31340  004B20  D81D               	call	PL98	;call to abstracted procedure
 31341  004B22  CFDF FFE7          	movff	indf2,indf1
 31342  004B26                     i1l1683:
 31343  004B26  0012               	return	
 31344  004B28                     __end_of__RegsToCANID:
 31345                           	opt stack 0
 31346  004B28                     PL56:
 31347                           	opt stack 20
 31348  004B28  5007               	movf	__RegsToCANID@Value,w,c
 31349  004B2A  6ED9               	movwf	fsr2l,c
 31350  004B2C  6ADA               	clrf	fsr2h,c
 31351  004B2E  0E02               	movlw	2
 31352  004B30  26D9               	addwf	fsr2l,f,c
 31353  004B32  6ADA               	clrf	fsr2h,c
 31354  004B34  0012               	return	
 31355  004B36                     __end_ofPL56:
 31356                           	opt stack 0
 31357  004B36                     PL88:
 31358                           	opt stack 20
 31359  004B36  6ADA               	clrf	fsr2h,c
 31360  004B38  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 31361  004B3C  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 31362  004B40  50E7               	movf	indf1,w,c
 31363  004B42  6E05               	movwf	??__RegsToCANID& (0+255),c
 31364  004B44  90D8               	bcf	status,0,c
 31365  004B46  0012               	return	
 31366  004B48                     __end_ofPL88:
 31367                           	opt stack 0
 31368  004B48                     PL90:
 31369                           	opt stack 20
 31370  004B48  6EDF               	movwf	indf2,c
 31371  004B4A  4A01               	infsnz	__RegsToCANID@ptr,f,c
 31372  004B4C  2A02               	incf	__RegsToCANID@ptr+1,f,c
 31373  004B4E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31374  004B52  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31375  004B56  50DF               	movf	indf2,w,c
 31376  004B58  6E05               	movwf	??__RegsToCANID& (0+255),c
 31377  004B5A  0012               	return	
 31378  004B5C                     __end_ofPL90:
 31379                           	opt stack 0
 31380  004B5C                     PL98:
 31381                           	opt stack 20
 31382  004B5C  4A01               	infsnz	__RegsToCANID@ptr,f,c
 31383  004B5E  2A02               	incf	__RegsToCANID@ptr+1,f,c
 31384  004B60  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 31385  004B64  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 31386  004B68  5007               	movf	__RegsToCANID@Value,w,c
 31387  004B6A  6EE1               	movwf	fsr1l,c
 31388  004B6C  6AE2               	clrf	fsr1h,c
 31389  004B6E  0012               	return	
 31390  004B70                     __end_ofPL98:
 31391                           	opt stack 0
 31392  004B70                     PL102:
 31393                           	opt stack 20
 31394  004B70  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 31395  004B74  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 31396  004B78  50E7               	movf	indf1,w,c
 31397  004B7A  6E05               	movwf	??__RegsToCANID& (0+255),c
 31398  004B7C  0E05               	movlw	5
 31399  004B7E  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 31400  004B80  0C05               	retlw	5
 31401  004B82                     __end_ofPL102:
 31402                           	opt stack 0
 31403                           tblptru	equ	0xFF8
 31404                           tblptrh	equ	0xFF7
 31405                           tblptrl	equ	0xFF6
 31406                           tablat	equ	0xFF5
 31407                           prodh	equ	0xFF4
 31408                           prodl	equ	0xFF3
 31409                           intcon	equ	0xFF2
 31410                           indf0	equ	0xFEF
 31411                           postinc0	equ	0xFEE
 31412                           fsr0h	equ	0xFEA
 31413                           fsr0l	equ	0xFE9
 31414                           wreg	equ	0xFE8
 31415                           indf1	equ	0xFE7
 31416                           postinc1	equ	0xFE6
 31417                           postdec1	equ	0xFE5
 31418                           fsr1h	equ	0xFE2
 31419                           fsr1l	equ	0xFE1
 31420                           bsr	equ	0xFE0
 31421                           indf2	equ	0xFDF
 31422                           postinc2	equ	0xFDE
 31423                           postdec2	equ	0xFDD
 31424                           plusw2	equ	0xFDB
 31425                           fsr2h	equ	0xFDA
 31426                           fsr2l	equ	0xFD9
 31427                           status	equ	0xFD8
 31428                           
 31429 ;; *************** function __ECANPointBuffer *****************
 31430 ;; Defined at:
 31431 ;;		line 1209 in file "ECAN.c"
 31432 ;; Parameters:    Size  Location     Type
 31433 ;;  b               1    wreg     unsigned char 
 31434 ;; Auto vars:     Size  Location     Type
 31435 ;;  b               1    3[COMRAM] unsigned char 
 31436 ;;  pt              2    4[COMRAM] PTR unsigned char 
 31437 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 31438 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 31439 ;; Return value:  Size  Location     Type
 31440 ;;                  2    0[COMRAM] PTR unsigned char 
 31441 ;; Registers used:
 31442 ;;		wreg, status,2, status,0
 31443 ;; Tracked objects:
 31444 ;;		On entry : F/2
 31445 ;;		On exit  : 2/2
 31446 ;;		Unchanged: 0/0
 31447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31448 ;;      Params:         3       0       0       0       0       0       0
 31449 ;;      Locals:         3       0       0       0       0       0       0
 31450 ;;      Temps:          0       0       0       0       0       0       0
 31451 ;;      Totals:         6       0       0       0       0       0       0
 31452 ;;Total ram usage:        6 bytes
 31453 ;; Hardware stack levels used:    1
 31454 ;; This function calls:
 31455 ;;		Nothing
 31456 ;; This function is called by:
 31457 ;;		_ECANReceiveMessage
 31458 ;; This function uses a non-reentrant model
 31459 ;;
 31460                           
 31461                           	psect	text93
 31462  006174                     __ptext93:
 31463                           	opt stack 0
 31464  006174                     __ECANPointBuffer:
 31465                           	opt stack 20
 31466                           
 31467                           ;incstack = 0
 31468                           ;incstack = 0
 31469                           ;__ECANPointBuffer@b stored from wreg
 31470  006174  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 31471                           
 31472                           ; BSR set to: 2
 31473                           ;ECAN.c: 1210: BYTE* pt;
 31474                           ;ECAN.c: 1212: switch(b)
 31475  006178  D024               	goto	i1l10816
 31476  00617A                     i1l10798:
 31477                           
 31478                           ; BSR set to: 2
 31479                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 31480  00617A  0E0F               	movlw	15	;volatile
 31481  00617C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31482  00617E  0E60               	movlw	96	;volatile
 31483  006180  D01E               	goto	L77
 31484  006182                     i1l10800:
 31485                           
 31486                           ; BSR set to: 2
 31487                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 31488  006182  010F               	movlb	15	; () banked
 31489  006184  0E0F               	movlw	15	;volatile
 31490  006186  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31491  006188  0E50               	movlw	80	;volatile
 31492  00618A  D019               	goto	L77
 31493  00618C                     i1l10802:
 31494                           
 31495                           ; BSR set to: 2
 31496                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 31497  00618C  010E               	movlb	14	; () banked
 31498  00618E  0E0E               	movlw	14	;volatile
 31499  006190  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31500  006192  0E20               	movlw	32	;volatile
 31501  006194  D014               	goto	L77
 31502  006196                     i1l10804:
 31503                           
 31504                           ; BSR set to: 2
 31505                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 31506  006196  010E               	movlb	14	; () banked
 31507  006198  0E0E               	movlw	14	;volatile
 31508  00619A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31509  00619C  0E30               	movlw	48	;volatile
 31510  00619E  D00F               	goto	L77
 31511  0061A0                     i1l10806:
 31512                           
 31513                           ; BSR set to: 2
 31514                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 31515  0061A0  010E               	movlb	14	; () banked
 31516  0061A2  0E0E               	movlw	14	;volatile
 31517  0061A4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31518  0061A6  0E40               	movlw	64	;volatile
 31519  0061A8  D00A               	goto	L77
 31520  0061AA                     i1l10808:
 31521                           
 31522                           ; BSR set to: 2
 31523                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 31524  0061AA  010E               	movlb	14	; () banked
 31525  0061AC  0E0E               	movlw	14	;volatile
 31526  0061AE  D7EB               	goto	L78
 31527  0061B0                     i1l10810:
 31528                           
 31529                           ; BSR set to: 2
 31530                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 31531  0061B0  010E               	movlb	14	; () banked
 31532  0061B2  0E0E               	movlw	14	;volatile
 31533  0061B4  D7E3               	goto	L79
 31534  0061B6                     i1l10812:
 31535                           
 31536                           ; BSR set to: 2
 31537                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 31538  0061B6  010E               	movlb	14	; () banked
 31539  0061B8  0E0E               	movlw	14	;volatile
 31540  0061BA  6E06               	movwf	__ECANPointBuffer@pt+1,c
 31541  0061BC  0E70               	movlw	112	;volatile
 31542  0061BE                     L77:
 31543  0061BE  6E05               	movwf	__ECANPointBuffer@pt,c
 31544                           
 31545                           ;ECAN.c: 1237: break;
 31546  0061C0  D00F               	goto	i1l1688
 31547  0061C2                     i1l10816:
 31548                           
 31549                           ; BSR set to: 2
 31550  0061C2  5004               	movf	__ECANPointBuffer@b,w,c
 31551                           
 31552                           ; Switch size 1, requested type "space"
 31553                           ; Number of cases is 7, Range of values is 0 to 6
 31554                           ; switch strategies available:
 31555                           ; Name         Instructions Cycles
 31556                           ; simple_byte           22    12 (average)
 31557                           ;	Chosen strategy is simple_byte
 31558  0061C4  E0DA               	bz	i1l10798
 31559  0061C6  0A01               	xorlw	1	; case 1
 31560  0061C8  E0DC               	bz	i1l10800
 31561  0061CA  0A03               	xorlw	3	; case 2
 31562  0061CC  E0DF               	bz	i1l10802
 31563  0061CE  0A01               	xorlw	1	; case 3
 31564  0061D0  E0E2               	bz	i1l10804
 31565  0061D2  0A07               	xorlw	7	; case 4
 31566  0061D4  E0E5               	bz	i1l10806
 31567  0061D6  0A01               	xorlw	1	; case 5
 31568  0061D8  E0E8               	bz	i1l10808
 31569  0061DA  0A03               	xorlw	3	; case 6
 31570  0061DC  E0E9               	bz	i1l10810
 31571  0061DE  D7EB               	goto	i1l10812
 31572  0061E0                     i1l1688:
 31573                           
 31574                           ;ECAN.c: 1239: return (pt);
 31575  0061E0  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 31576  0061E4  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 31577  0061E8  0012               	return	
 31578  0061EA                     __end_of__ECANPointBuffer:
 31579                           	opt stack 0
 31580                           tblptru	equ	0xFF8
 31581                           tblptrh	equ	0xFF7
 31582                           tblptrl	equ	0xFF6
 31583                           tablat	equ	0xFF5
 31584                           prodh	equ	0xFF4
 31585                           prodl	equ	0xFF3
 31586                           intcon	equ	0xFF2
 31587                           indf0	equ	0xFEF
 31588                           postinc0	equ	0xFEE
 31589                           fsr0h	equ	0xFEA
 31590                           fsr0l	equ	0xFE9
 31591                           wreg	equ	0xFE8
 31592                           indf1	equ	0xFE7
 31593                           postinc1	equ	0xFE6
 31594                           postdec1	equ	0xFE5
 31595                           fsr1h	equ	0xFE2
 31596                           fsr1l	equ	0xFE1
 31597                           bsr	equ	0xFE0
 31598                           indf2	equ	0xFDF
 31599                           postinc2	equ	0xFDE
 31600                           postdec2	equ	0xFDD
 31601                           plusw2	equ	0xFDB
 31602                           fsr2h	equ	0xFDA
 31603                           fsr2l	equ	0xFD9
 31604                           status	equ	0xFD8
 31605                           
 31606 ;; *************** function _fifo_write *****************
 31607 ;; Defined at:
 31608 ;;		line 61 in file "fifo.c"
 31609 ;; Parameters:    Size  Location     Type
 31610 ;;  f               2    0[COMRAM] PTR struct .
 31611 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 31612 ;;  buf             2    2[COMRAM] PTR const void 
 31613 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 31614 ;;  nbytes          4    4[COMRAM] unsigned long 
 31615 ;; Auto vars:     Size  Location     Type
 31616 ;;  i               4   14[COMRAM] unsigned long 
 31617 ;;  p               2   12[COMRAM] PTR const unsigned char 
 31618 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 31619 ;; Return value:  Size  Location     Type
 31620 ;;                  2    0[COMRAM] unsigned short 
 31621 ;; Registers used:
 31622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 31623 ;; Tracked objects:
 31624 ;;		On entry : 0/0
 31625 ;;		On exit  : 0/0
 31626 ;;		Unchanged: 0/0
 31627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31628 ;;      Params:         8       0       0       0       0       0       0
 31629 ;;      Locals:         6       0       0       0       0       0       0
 31630 ;;      Temps:          4       0       0       0       0       0       0
 31631 ;;      Totals:        18       0       0       0       0       0       0
 31632 ;;Total ram usage:       18 bytes
 31633 ;; Hardware stack levels used:    1
 31634 ;; This function calls:
 31635 ;;		Nothing
 31636 ;; This function is called by:
 31637 ;;		_Interrupt
 31638 ;; This function uses a non-reentrant model
 31639 ;;
 31640                           
 31641                           	psect	text94
 31642  004938                     __ptext94:
 31643                           	opt stack 0
 31644  004938                     _fifo_write:
 31645                           	opt stack 21
 31646                           
 31647                           ;fifo.c: 62: uint32_t i;
 31648                           ;fifo.c: 63: const uint8_t *p;
 31649                           ;fifo.c: 64: p = buf;
 31650                           
 31651                           ;incstack = 0
 31652                           ;incstack = 0
 31653  004938  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 31654  00493C  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 31655                           
 31656                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 31657  004940  6A0F               	clrf	fifo_write@i,c
 31658  004942  6A10               	clrf	fifo_write@i+1,c
 31659  004944  6A11               	clrf	fifo_write@i+2,c
 31660  004946  6A12               	clrf	fifo_write@i+3,c
 31661  004948  D068               	goto	i1l7178
 31662  00494A                     i1l7158:
 31663                           
 31664                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 31665                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 31666  00494A  EE20 F004          	lfsr	2,4
 31667  00494E  5001               	movf	fifo_write@f,w,c
 31668  004950  D872               	call	PL24	;call to abstracted procedure
 31669  004952  E102               	bnz	i1u700_25
 31670  004954  5009               	movf	??_fifo_write,w,c
 31671  004956  180B               	xorwf	??_fifo_write+2,w,c
 31672  004958                     i1u700_25:
 31673  004958  E011               	bz	i1l1715
 31674  00495A  EE20 F006          	lfsr	2,6
 31675  00495E  5001               	movf	fifo_write@f,w,c
 31676  004960  D86A               	call	PL24	;call to abstracted procedure
 31677  004962  E102               	bnz	i1u701_25
 31678  004964  5009               	movf	??_fifo_write,w,c
 31679  004966  180B               	xorwf	??_fifo_write+2,w,c
 31680  004968                     i1u701_25:
 31681  004968  E10E               	bnz	i1l7166
 31682  00496A  EE20 F004          	lfsr	2,4
 31683  00496E  5001               	movf	fifo_write@f,w,c
 31684  004970  26D9               	addwf	fsr2l,f,c
 31685  004972  5002               	movf	fifo_write@f+1,w,c
 31686  004974  22DA               	addwfc	fsr2h,f,c
 31687  004976  50DE               	movf	postinc2,w,c
 31688  004978  10DD               	iorwf	postdec2,w,c
 31689  00497A  E105               	bnz	i1l7166
 31690  00497C                     i1l1715:
 31691                           
 31692                           ;fifo.c: 71: return i;
 31693  00497C  C00F  F001         	movff	fifo_write@i,?_fifo_write
 31694  004980  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 31695  004984  D057               	goto	i1l1716
 31696  004986                     i1l7166:
 31697                           
 31698                           ;fifo.c: 73: else {
 31699                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 31700  004986  C00D  FFD9         	movff	fifo_write@p,fsr2l
 31701  00498A  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 31702  00498E  EE10 F002          	lfsr	1,2
 31703  004992  5001               	movf	fifo_write@f,w,c
 31704  004994  26E1               	addwf	fsr1l,f,c
 31705  004996  5002               	movf	fifo_write@f+1,w,c
 31706  004998  22E2               	addwfc	fsr1h,f,c
 31707  00499A  CFE6 F009          	movff	postinc1,??_fifo_write
 31708  00499E  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 31709  0049A2  C001  FFE1         	movff	fifo_write@f,fsr1l
 31710  0049A6  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 31711  0049AA  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 31712  0049AE  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 31713  0049B2  5009               	movf	??_fifo_write,w,c
 31714  0049B4  240B               	addwf	??_fifo_write+2,w,c
 31715  0049B6  6EE1               	movwf	fsr1l,c
 31716  0049B8  500A               	movf	??_fifo_write+1,w,c
 31717  0049BA  200C               	addwfc	??_fifo_write+3,w,c
 31718  0049BC  6EE2               	movwf	fsr1h,c
 31719  0049BE  CFDF FFE7          	movff	indf2,indf1
 31720  0049C2  4A0D               	infsnz	fifo_write@p,f,c
 31721  0049C4  2A0E               	incf	fifo_write@p+1,f,c
 31722                           
 31723                           ;fifo.c: 75: f->head++;
 31724  0049C6  EE20 F002          	lfsr	2,2
 31725  0049CA  5001               	movf	fifo_write@f,w,c
 31726  0049CC  26D9               	addwf	fsr2l,f,c
 31727  0049CE  5002               	movf	fifo_write@f+1,w,c
 31728  0049D0  22DA               	addwfc	fsr2h,f,c
 31729  0049D2  2ADE               	incf	postinc2,f,c
 31730  0049D4  0E00               	movlw	0
 31731  0049D6  22DD               	addwfc	postdec2,f,c
 31732                           
 31733                           ;fifo.c: 77: if (f->head >= f->size) {
 31734  0049D8  EE20 F006          	lfsr	2,6
 31735  0049DC  5001               	movf	fifo_write@f,w,c
 31736  0049DE  26D9               	addwf	fsr2l,f,c
 31737  0049E0  5002               	movf	fifo_write@f+1,w,c
 31738  0049E2  22DA               	addwfc	fsr2h,f,c
 31739  0049E4  EE10 F002          	lfsr	1,2
 31740  0049E8  5001               	movf	fifo_write@f,w,c
 31741  0049EA  26E1               	addwf	fsr1l,f,c
 31742  0049EC  5002               	movf	fifo_write@f+1,w,c
 31743  0049EE  22E2               	addwfc	fsr1h,f,c
 31744  0049F0  52E6               	movf	postinc1,f,c
 31745  0049F2  52DE               	movf	postinc2,f,c
 31746  0049F4  50DD               	movf	postdec2,w,c
 31747  0049F6  5CE5               	subwf	postdec1,w,c
 31748  0049F8  E102               	bnz	i1u703_25
 31749  0049FA  50DF               	movf	indf2,w,c
 31750  0049FC  5CE7               	subwf	indf1,w,c
 31751  0049FE                     i1u703_25:
 31752  0049FE  E308               	bnc	i1l7176
 31753                           
 31754                           ;fifo.c: 78: f->head = 0;
 31755  004A00  EE20 F002          	lfsr	2,2
 31756  004A04  5001               	movf	fifo_write@f,w,c
 31757  004A06  26D9               	addwf	fsr2l,f,c
 31758  004A08  5002               	movf	fifo_write@f+1,w,c
 31759  004A0A  22DA               	addwfc	fsr2h,f,c
 31760  004A0C  6ADE               	clrf	postinc2,c
 31761  004A0E  6ADD               	clrf	postdec2,c
 31762  004A10                     i1l7176:
 31763  004A10  2A0F               	incf	fifo_write@i,f,c
 31764  004A12  0E00               	movlw	0
 31765  004A14  2210               	addwfc	fifo_write@i+1,f,c
 31766  004A16  2211               	addwfc	fifo_write@i+2,f,c
 31767  004A18  2212               	addwfc	fifo_write@i+3,f,c
 31768  004A1A                     i1l7178:
 31769  004A1A  5005               	movf	fifo_write@nbytes,w,c
 31770  004A1C  5C0F               	subwf	fifo_write@i,w,c
 31771  004A1E  5006               	movf	fifo_write@nbytes+1,w,c
 31772  004A20  5810               	subwfb	fifo_write@i+1,w,c
 31773  004A22  5007               	movf	fifo_write@nbytes+2,w,c
 31774  004A24  5811               	subwfb	fifo_write@i+2,w,c
 31775  004A26  5008               	movf	fifo_write@nbytes+3,w,c
 31776  004A28  5812               	subwfb	fifo_write@i+3,w,c
 31777  004A2A  E38F               	bnc	i1l7158
 31778                           
 31779                           ;fifo.c: 79: }
 31780                           ;fifo.c: 80: }
 31781                           ;fifo.c: 82: }
 31782                           ;fifo.c: 84: return nbytes;
 31783  004A2C  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 31784  004A30  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 31785  004A34                     i1l1716:
 31786  004A34  0012               	return	
 31787  004A36                     __end_of_fifo_write:
 31788                           	opt stack 0
 31789  004A36                     PL24:
 31790                           	opt stack 21
 31791  004A36  26D9               	addwf	fsr2l,f,c
 31792  004A38  5002               	movf	fifo_write@f+1,w,c
 31793  004A3A  22DA               	addwfc	fsr2h,f,c
 31794  004A3C  CFDE F009          	movff	postinc2,??_fifo_write
 31795  004A40  CFDD F00A          	movff	postdec2,??_fifo_write+1
 31796  004A44  EE20 F002          	lfsr	2,2
 31797  004A48  5001               	movf	fifo_write@f,w,c
 31798  004A4A  26D9               	addwf	fsr2l,f,c
 31799  004A4C  5002               	movf	fifo_write@f+1,w,c
 31800  004A4E  22DA               	addwfc	fsr2h,f,c
 31801  004A50  CFDE F00B          	movff	postinc2,??_fifo_write+2
 31802  004A54  CFDD F00C          	movff	postdec2,??_fifo_write+3
 31803  004A58  2A0B               	incf	??_fifo_write+2,f,c
 31804  004A5A  0E00               	movlw	0
 31805  004A5C  220C               	addwfc	??_fifo_write+3,f,c
 31806  004A5E  500A               	movf	??_fifo_write+1,w,c
 31807  004A60  180C               	xorwf	??_fifo_write+3,w,c
 31808  004A62  0012               	return	
 31809  004A64                     __end_ofPL24:
 31810                           	opt stack 0
 31811                           tblptru	equ	0xFF8
 31812                           tblptrh	equ	0xFF7
 31813                           tblptrl	equ	0xFF6
 31814                           tablat	equ	0xFF5
 31815                           prodh	equ	0xFF4
 31816                           prodl	equ	0xFF3
 31817                           intcon	equ	0xFF2
 31818                           indf0	equ	0xFEF
 31819                           postinc0	equ	0xFEE
 31820                           fsr0h	equ	0xFEA
 31821                           fsr0l	equ	0xFE9
 31822                           wreg	equ	0xFE8
 31823                           indf1	equ	0xFE7
 31824                           postinc1	equ	0xFE6
 31825                           postdec1	equ	0xFE5
 31826                           fsr1h	equ	0xFE2
 31827                           fsr1l	equ	0xFE1
 31828                           bsr	equ	0xFE0
 31829                           indf2	equ	0xFDF
 31830                           postinc2	equ	0xFDE
 31831                           postdec2	equ	0xFDD
 31832                           plusw2	equ	0xFDB
 31833                           fsr2h	equ	0xFDA
 31834                           fsr2l	equ	0xFD9
 31835                           status	equ	0xFD8
 31836                           
 31837 ;; *************** function _ReadUSART *****************
 31838 ;; Defined at:
 31839 ;;		line 16 in file "/opt/microchip/xc8/v1.21/sources/pic18/plib/USART/uread.c"
 31840 ;; Parameters:    Size  Location     Type
 31841 ;;		None
 31842 ;; Auto vars:     Size  Location     Type
 31843 ;;  data            1    0[COMRAM] unsigned char 
 31844 ;; Return value:  Size  Location     Type
 31845 ;;                  1    wreg      unsigned char 
 31846 ;; Registers used:
 31847 ;;		wreg, status,2, status,0
 31848 ;; Tracked objects:
 31849 ;;		On entry : 0/0
 31850 ;;		On exit  : 0/0
 31851 ;;		Unchanged: 0/0
 31852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 31853 ;;      Params:         0       0       0       0       0       0       0
 31854 ;;      Locals:         1       0       0       0       0       0       0
 31855 ;;      Temps:          0       0       0       0       0       0       0
 31856 ;;      Totals:         1       0       0       0       0       0       0
 31857 ;;Total ram usage:        1 bytes
 31858 ;; Hardware stack levels used:    1
 31859 ;; This function calls:
 31860 ;;		Nothing
 31861 ;; This function is called by:
 31862 ;;		_Interrupt
 31863 ;; This function uses a non-reentrant model
 31864 ;;
 31865                           
 31866                           	psect	text95
 31867  006ACA                     __ptext95:
 31868                           	opt stack 0
 31869  006ACA                     _ReadUSART:
 31870                           	opt stack 21
 31871                           
 31872                           ;incstack = 0
 31873                           ;incstack = 0
 31874  006ACA  0EF2               	movlw	242
 31875  006ACC  162E               	andwf	_USART_Status,f,c
 31876  006ACE  ACAB               	btfss	4011,6,c	;volatile
 31877  006AD0  D003               	goto	i1l2067
 31878  006AD2  902E               	bcf	_USART_Status,0,c
 31879  006AD4  B0AB               	btfsc	4011,0,c	;volatile
 31880  006AD6  802E               	bsf	_USART_Status,0,c
 31881  006AD8                     i1l2067:
 31882  006AD8  B4AB               	btfsc	4011,2,c	;volatile
 31883  006ADA  842E               	bsf	_USART_Status,2,c
 31884  006ADC  B2AB               	btfsc	4011,1,c	;volatile
 31885  006ADE  862E               	bsf	_USART_Status,3,c
 31886  006AE0  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 31887  006AE4  5001               	movf	ReadUSART@data,w,c
 31888  006AE6  0012               	return	
 31889  006AE8                     __end_of_ReadUSART:
 31890                           	opt stack 0
 31891                           tblptru	equ	0xFF8
 31892                           tblptrh	equ	0xFF7
 31893                           tblptrl	equ	0xFF6
 31894                           tablat	equ	0xFF5
 31895                           prodh	equ	0xFF4
 31896                           prodl	equ	0xFF3
 31897                           intcon	equ	0xFF2
 31898                           indf0	equ	0xFEF
 31899                           postinc0	equ	0xFEE
 31900                           fsr0h	equ	0xFEA
 31901                           fsr0l	equ	0xFE9
 31902                           wreg	equ	0xFE8
 31903                           indf1	equ	0xFE7
 31904                           postinc1	equ	0xFE6
 31905                           postdec1	equ	0xFE5
 31906                           fsr1h	equ	0xFE2
 31907                           fsr1l	equ	0xFE1
 31908                           bsr	equ	0xFE0
 31909                           indf2	equ	0xFDF
 31910                           postinc2	equ	0xFDE
 31911                           postdec2	equ	0xFDD
 31912                           plusw2	equ	0xFDB
 31913                           fsr2h	equ	0xFDA
 31914                           fsr2l	equ	0xFD9
 31915                           status	equ	0xFD8
 31916                           tblptru	equ	0xFF8
 31917                           tblptrh	equ	0xFF7
 31918                           tblptrl	equ	0xFF6
 31919                           tablat	equ	0xFF5
 31920                           prodh	equ	0xFF4
 31921                           prodl	equ	0xFF3
 31922                           intcon	equ	0xFF2
 31923                           indf0	equ	0xFEF
 31924                           postinc0	equ	0xFEE
 31925                           fsr0h	equ	0xFEA
 31926                           fsr0l	equ	0xFE9
 31927                           wreg	equ	0xFE8
 31928                           indf1	equ	0xFE7
 31929                           postinc1	equ	0xFE6
 31930                           postdec1	equ	0xFE5
 31931                           fsr1h	equ	0xFE2
 31932                           fsr1l	equ	0xFE1
 31933                           bsr	equ	0xFE0
 31934                           indf2	equ	0xFDF
 31935                           postinc2	equ	0xFDE
 31936                           postdec2	equ	0xFDD
 31937                           plusw2	equ	0xFDB
 31938                           fsr2h	equ	0xFDA
 31939                           fsr2l	equ	0xFD9
 31940                           status	equ	0xFD8
 31941                           
 31942                           	psect	rparam
 31943  0000                     tblptru	equ	0xFF8
 31944                           tblptrh	equ	0xFF7
 31945                           tblptrl	equ	0xFF6
 31946                           tablat	equ	0xFF5
 31947                           prodh	equ	0xFF4
 31948                           prodl	equ	0xFF3
 31949                           intcon	equ	0xFF2
 31950                           indf0	equ	0xFEF
 31951                           postinc0	equ	0xFEE
 31952                           fsr0h	equ	0xFEA
 31953                           fsr0l	equ	0xFE9
 31954                           wreg	equ	0xFE8
 31955                           indf1	equ	0xFE7
 31956                           postinc1	equ	0xFE6
 31957                           postdec1	equ	0xFE5
 31958                           fsr1h	equ	0xFE2
 31959                           fsr1l	equ	0xFE1
 31960                           bsr	equ	0xFE0
 31961                           indf2	equ	0xFDF
 31962                           postinc2	equ	0xFDE
 31963                           postdec2	equ	0xFDD
 31964                           plusw2	equ	0xFDB
 31965                           fsr2h	equ	0xFDA
 31966                           fsr2l	equ	0xFD9
 31967                           status	equ	0xFD8
 31968                           tblptru	equ	0xFF8
 31969                           tblptrh	equ	0xFF7
 31970                           tblptrl	equ	0xFF6
 31971                           tablat	equ	0xFF5
 31972                           prodh	equ	0xFF4
 31973                           prodl	equ	0xFF3
 31974                           intcon	equ	0xFF2
 31975                           indf0	equ	0xFEF
 31976                           postinc0	equ	0xFEE
 31977                           fsr0h	equ	0xFEA
 31978                           fsr0l	equ	0xFE9
 31979                           wreg	equ	0xFE8
 31980                           indf1	equ	0xFE7
 31981                           postinc1	equ	0xFE6
 31982                           postdec1	equ	0xFE5
 31983                           fsr1h	equ	0xFE2
 31984                           fsr1l	equ	0xFE1
 31985                           bsr	equ	0xFE0
 31986                           indf2	equ	0xFDF
 31987                           postinc2	equ	0xFDE
 31988                           postdec2	equ	0xFDD
 31989                           plusw2	equ	0xFDB
 31990                           fsr2h	equ	0xFDA
 31991                           fsr2l	equ	0xFD9
 31992                           status	equ	0xFD8


Data Sizes:
    Strings     4506
    Constant    120
    Data        0
    BSS         1145
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      65
    BANK0           160    102     158
    BANK1           256     25     204
    BANK2           256     76     212
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ReadTimer3	unsigned int  size(1) Largest target is 2
		 -> WriteTimer3@timer(COMRAM[2]), ReadTimer3@timer(COMRAM[2]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_169(CODE[2]), STR_168(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_169(CODE[2]), STR_168(CODE[9]), STR_165(CODE[10]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_169(CODE[2]), STR_168(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_169(CODE[2]), STR_168(CODE[9]), STR_165(CODE[10]), 
		 -> STR_162(CODE[4]), STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), 
		 -> STR_154(CODE[3]), STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), 
		 -> STR_147(CODE[8]), STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), 
		 -> STR_143(CODE[7]), STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), 
		 -> STR_138(CODE[11]), STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), 
		 -> STR_120(CODE[5]), STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), 
		 -> STR_81(CODE[5]), wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), 
		 -> STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), 
		 -> STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), 
		 -> STR_6(CODE[5]), cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_169(CODE[2]), STR_168(CODE[9]), STR_165(CODE[10]), STR_162(CODE[4]), 
		 -> STR_160(CODE[3]), STR_159(CODE[11]), STR_156(CODE[4]), STR_154(CODE[3]), 
		 -> STR_153(CODE[6]), STR_151(CODE[6]), STR_149(CODE[5]), STR_147(CODE[8]), 
		 -> STR_146(CODE[6]), STR_145(CODE[9]), STR_144(CODE[7]), STR_143(CODE[7]), 
		 -> STR_142(CODE[5]), STR_141(CODE[6]), STR_140(CODE[9]), STR_138(CODE[11]), 
		 -> STR_136(CODE[8]), STR_134(CODE[4]), STR_133(CODE[5]), STR_120(CODE[5]), 
		 -> STR_118(CODE[11]), STR_105(CODE[7]), STR_97(CODE[5]), STR_81(CODE[5]), 
		 -> STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), 
		 -> STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), 
		 -> STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), 
		 -> STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_298(CODE[2]), STR_297(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_292(CODE[2]), 
		 -> STR_291(CODE[3]), STR_290(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_308(CODE[3]), STR_307(CODE[23]), STR_306(CODE[10]), STR_305(CODE[10]), 
		 -> STR_304(CODE[12]), STR_303(CODE[8]), STR_302(CODE[7]), STR_301(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_300(CODE[10]), STR_299(CODE[3]), STR_296(CODE[20]), 
		 -> STR_295(CODE[3]), STR_294(CODE[14]), STR_293(CODE[3]), STR_289(CODE[8]), 
		 -> STR_288(CODE[17]), STR_287(CODE[3]), STR_286(CODE[67]), STR_285(CODE[3]), 
		 -> STR_284(CODE[27]), STR_283(CODE[3]), STR_282(CODE[67]), STR_281(CODE[52]), 
		 -> STR_280(CODE[39]), STR_279(CODE[62]), STR_278(CODE[55]), STR_277(CODE[49]), 
		 -> STR_276(CODE[67]), STR_275(CODE[47]), STR_274(CODE[47]), STR_273(CODE[34]), 
		 -> STR_272(CODE[71]), STR_271(CODE[20]), STR_270(CODE[78]), STR_269(CODE[24]), 
		 -> STR_268(CODE[77]), STR_267(CODE[74]), STR_266(CODE[76]), STR_265(CODE[47]), 
		 -> STR_264(CODE[40]), STR_263(CODE[39]), STR_262(CODE[33]), STR_261(CODE[23]), 
		 -> STR_260(CODE[56]), STR_259(CODE[24]), STR_258(CODE[44]), STR_257(CODE[50]), 
		 -> STR_256(CODE[31]), STR_255(CODE[50]), STR_254(CODE[51]), STR_253(CODE[46]), 
		 -> STR_252(CODE[44]), STR_251(CODE[27]), STR_250(CODE[39]), STR_249(CODE[39]), 
		 -> STR_248(CODE[57]), STR_247(CODE[55]), STR_246(CODE[3]), STR_243(CODE[24]), 
		 -> STR_242(CODE[58]), STR_241(CODE[54]), STR_240(CODE[59]), STR_239(CODE[3]), 
		 -> STR_236(CODE[25]), STR_235(CODE[52]), STR_234(CODE[3]), STR_231(CODE[24]), 
		 -> STR_230(CODE[3]), STR_227(CODE[24]), STR_226(CODE[3]), STR_223(CODE[24]), 
		 -> STR_222(CODE[3]), STR_219(CODE[23]), STR_218(CODE[3]), STR_215(CODE[21]), 
		 -> STR_214(CODE[3]), STR_211(CODE[22]), STR_210(CODE[3]), STR_207(CODE[17]), 
		 -> STR_206(CODE[3]), STR_203(CODE[18]), STR_202(CODE[4]), STR_201(CODE[11]), 
		 -> STR_200(CODE[2]), STR_197(CODE[7]), STR_194(CODE[7]), STR_191(CODE[9]), 
		 -> STR_188(CODE[7]), STR_185(CODE[8]), STR_182(CODE[12]), STR_179(CODE[7]), 
		 -> STR_178(CODE[2]), STR_177(CODE[2]), STR_176(CODE[6]), STR_175(CODE[8]), 
		 -> STR_174(CODE[8]), STR_173(CODE[20]), STR_172(CODE[27]), STR_171(CODE[6]), 
		 -> STR_170(CODE[33]), STR_167(CODE[29]), STR_166(CODE[34]), STR_164(CODE[46]), 
		 -> STR_163(CODE[22]), STR_161(CODE[21]), STR_158(CODE[41]), STR_157(CODE[23]), 
		 -> STR_155(CODE[22]), STR_152(CODE[26]), STR_150(CODE[32]), STR_148(CODE[28]), 
		 -> STR_139(CODE[6]), STR_137(CODE[40]), STR_135(CODE[44]), STR_132(CODE[6]), 
		 -> STR_131(CODE[39]), STR_129(CODE[36]), STR_127(CODE[37]), STR_125(CODE[40]), 
		 -> STR_123(CODE[37]), STR_122(CODE[50]), STR_119(CODE[6]), STR_116(CODE[41]), 
		 -> STR_114(CODE[38]), STR_112(CODE[39]), STR_110(CODE[42]), STR_108(CODE[39]), 
		 -> STR_107(CODE[66]), STR_104(CODE[6]), STR_103(CODE[27]), STR_102(CODE[3]), 
		 -> STR_99(CODE[20]), STR_98(CODE[52]), STR_94(CODE[8]), STR_93(CODE[36]), 
		 -> STR_90(CODE[8]), STR_89(CODE[38]), STR_88(CODE[24]), STR_86(CODE[33]), 
		 -> STR_84(CODE[24]), STR_82(CODE[52]), STR_80(CODE[54]), STR_79(CODE[6]), 
		 -> STR_78(CODE[3]), STR_73(CODE[25]), STR_70(CODE[17]), STR_69(CODE[3]), 
		 -> STR_68(CODE[4]), STR_67(CODE[3]), STR_64(CODE[4]), STR_59(CODE[15]), 
		 -> wrkbuf(BANK1[80]), STR_56(CODE[14]), STR_54(CODE[33]), STR_52(CODE[24]), 
		 -> STR_50(CODE[52]), STR_48(CODE[6]), STR_46(CODE[6]), STR_44(CODE[6]), 
		 -> STR_42(CODE[6]), STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), 
		 -> STR_36(CODE[6]), STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), 
		 -> STR_25(CODE[25]), STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), 
		 -> STR_21(CODE[20]), STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), 
		 -> STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), 
		 -> STR_5(CODE[29]), STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[58]), 
		 -> STR_1(CODE[37]), 

    sprintf$2277	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_310(CODE[17]), STR_309(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_245(CODE[3]), STR_244(CODE[7]), STR_238(CODE[3]), STR_237(CODE[7]), 
		 -> STR_233(CODE[4]), STR_232(CODE[8]), STR_229(CODE[4]), STR_228(CODE[8]), 
		 -> STR_225(CODE[4]), STR_224(CODE[8]), STR_221(CODE[4]), STR_220(CODE[8]), 
		 -> STR_217(CODE[4]), STR_216(CODE[7]), STR_213(CODE[4]), STR_212(CODE[7]), 
		 -> STR_209(CODE[4]), STR_208(CODE[7]), STR_205(CODE[4]), STR_204(CODE[7]), 
		 -> STR_199(CODE[3]), STR_198(CODE[7]), STR_196(CODE[3]), STR_195(CODE[7]), 
		 -> STR_193(CODE[3]), STR_192(CODE[7]), STR_190(CODE[3]), STR_189(CODE[7]), 
		 -> STR_187(CODE[3]), STR_186(CODE[7]), STR_184(CODE[4]), STR_183(CODE[8]), 
		 -> STR_181(CODE[3]), STR_180(CODE[7]), STR_101(CODE[3]), STR_100(CODE[7]), 
		 -> STR_96(CODE[4]), STR_95(CODE[8]), STR_92(CODE[4]), STR_91(CODE[8]), 
		 -> STR_77(CODE[3]), STR_76(CODE[7]), STR_75(CODE[3]), STR_74(CODE[7]), 
		 -> STR_72(CODE[6]), STR_71(CODE[10]), STR_66(CODE[3]), STR_65(CODE[7]), 
		 -> STR_63(CODE[3]), STR_62(CODE[7]), STR_61(CODE[3]), STR_60(CODE[7]), 
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2257$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(BANK0[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(BANK0[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK2[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK2[8]), id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(BANK0[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(BANK0[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK2[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1665	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_245(CODE[3]), STR_244(CODE[7]), 

    printErrors$1656	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_238(CODE[3]), STR_237(CODE[7]), 

    printErrors$1649	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_233(CODE[4]), STR_232(CODE[8]), 

    printErrors$1643	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_229(CODE[4]), STR_228(CODE[8]), 

    printErrors$1637	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_225(CODE[4]), STR_224(CODE[8]), 

    printErrors$1631	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_221(CODE[4]), STR_220(CODE[8]), 

    printStatistics$1624	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_217(CODE[4]), STR_216(CODE[7]), 

    printStatistics$1618	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_213(CODE[4]), STR_212(CODE[7]), 

    printStatistics$1612	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_209(CODE[4]), STR_208(CODE[7]), 

    printStatistics$1606	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_205(CODE[4]), STR_204(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1351(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1375(BANK2[1]), doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1536	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_199(CODE[3]), STR_198(CODE[7]), 

    receivePrintEventVerbose$1531	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_196(CODE[3]), STR_195(CODE[7]), 

    receivePrintEventVerbose$1526	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_193(CODE[3]), STR_192(CODE[7]), 

    receivePrintEventVerbose$1521	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_190(CODE[3]), STR_189(CODE[7]), 

    receivePrintEventVerbose$1516	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    receivePrintEventVerbose$1511	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_184(CODE[4]), STR_183(CODE[8]), 

    receivePrintEventVerbose$1506	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_181(CODE[3]), STR_180(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1415	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1392	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1381	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_101(CODE[3]), STR_100(CODE[7]), 

    doModeVerbose$1372	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_96(CODE[4]), STR_95(CODE[8]), 

    doModeVerbose$1366	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_92(CODE[4]), STR_91(CODE[8]), 

    doModeVerbose@preg_1357	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1353	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1343	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_77(CODE[3]), STR_76(CODE[7]), 

    doModeVerbose$1339	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_75(CODE[3]), STR_74(CODE[7]), 

    doModeVerbose$1334	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_72(CODE[6]), STR_71(CODE[10]), 

    doModeVerbose$1326	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1321	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1317	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_61(CODE[3]), STR_60(CODE[7]), 

    doModeVerbose$1312	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_58(CODE[6]), STR_57(CODE[10]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_130(CODE[2]), STR_128(CODE[2]), STR_126(CODE[2]), STR_124(CODE[2]), 
		 -> STR_121(CODE[2]), STR_117(CODE[2]), STR_115(CODE[2]), STR_113(CODE[2]), 
		 -> STR_111(CODE[2]), STR_109(CODE[2]), STR_106(CODE[2]), STR_87(CODE[2]), 
		 -> STR_85(CODE[2]), STR_83(CODE[2]), STR_55(CODE[2]), STR_53(CODE[2]), 
		 -> STR_51(CODE[2]), STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), 
		 -> STR_32(CODE[2]), STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), 
		 -> cmdbuf(BANK1[80]), 

    doModeVerbose@p_1300	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _doModeSLCAN->_hexStringToBytes
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_itoa
    _ultoa->___llmod
    _doModeVscp->_setFilter
    _sendVSCPDriverErrorFrame->_crc8
    _sendVSCPDriverCommandReply->_crc8
    _sendVSCPModeCapabilities->_crc8
    _sendVSCPDriverAck->_crc8
    _sendVSCPDriverNack->_crc8
    _calcCRC->_crc8
    _receiveSendEventCANAL->_crc8
    _receiveSendMultiEventCANAL->_crc8
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_setFilter
    _doModeVerbose->__CANIDToRegs
    _changeBaudrate->_OpenUSART
    _printBinary->_WriteUSART
    _findNodes->_itoa
    _printGUID->_itoa
    _printNodeFirmwareVersion->_itoa
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___wmul->_ReadTimer3
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _utoa->___lwdiv
    _init_app_eeprom->_Write_b_eep
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _ECANInitialize->_ECANSetOperationMode
    _init_app_ram->_setFilter
    _init_app_ram->__CANIDToRegs
    __CANIDToRegs->_Read_b_eep
    _setFilter->_Write_b_eep

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _stristr->_strnicmp
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _vscp_restoreDefaults->_init_app_ram
    _init->_init_app_ram
    _init_app_ram->_setFilter

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  169008
                                            100 BANK0      2     2      0
                                             20 BANK1      5     0      5
                       _fifo_getFree
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
               _ECANSetOperationMode
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0   10654
                                             47 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
               _ECANSetOperationMode
                           _Busy_eep
                        _Write_b_eep
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                             34 COMRAM     5     0      5
                                              0 BANK0      9     9      0
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4722
                                             26 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           7     7      0   28298
                                             80 BANK0      7     7      0
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                           _Busy_eep
                        _Write_b_eep
                     _changeBaudrate
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                              6 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                              6 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3308
                                             47 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                             30 COMRAM     6     0      6
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                              3 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               23    23      0    4482
                                             12 BANK0     23    23      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                         _ReadTimer3
                        _getCANFrame
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          25    25      0    4950
                                             12 BANK0     25    25      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                         _ReadTimer3
                        _getCANFrame
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                              3 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                             37 COMRAM     2     2      0
                                              0 BANK0      3     0      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                             30 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       96    96      0  115140
                                              0 BANK1     20    20      0
                                              0 BANK2     76    76      0
               _vscp_restoreDefaults
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                         _WriteUSART
                            _stristr
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                     _changeBaudrate
 ---------------------------------------------------------------------------------
 (2) _changeBaudrate                                       1     1      0     582
                                             33 COMRAM     1     1      0
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4962
                                             79 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                             31 COMRAM     5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4878
                                             79 BANK0     12     5      7
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            6     6      0   27166
                                             94 BANK0      6     6      0
                          _putsUSART
                         _WriteUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5402
                                             88 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    7538
                                             88 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    7268
                                             88 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4710
                                             79 BANK0      9     5      4
                   _checkCANBusState
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             47 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             40 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                              3 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) _checkCANBusState                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                             30 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7584
                                             43 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7476
                                             43 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     930
                                              2 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1098
                                              4 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     354
                                             36 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     354
                                             36 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     168
                                             30 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                              6 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                             31 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                             34 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            24    24      0    9630
                                             43 BANK0     24    24      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
                         _ReadTimer3
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadTimer3                                           4     2      2     102
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12    1380
                                             12 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     906
                                             36 COMRAM     1     1      0
                                              8 BANK0      4     0      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     612
                                             30 COMRAM     6     0      6
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7134
                                             13 BANK0     30    22      8
                         _ReadTimer3 (ARG)
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                             34 COMRAM     4     0      4
                                              0 BANK0      2     2      0
                         _ReadTimer3 (ARG)
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             38 COMRAM     1     1      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                             30 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0     138
                                             30 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             15 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             37 COMRAM     2     2      0
                                              9 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              0 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                             30 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                             30 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _vscp_restoreDefaults                                 0     0      0    5040
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (3) _init_app_eeprom                                      1     1      0     330
                                             34 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                             31 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    5708
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                         _OpenTimer3
                        _WriteTimer3
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _WriteTimer3                                          4     2      2     138
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _OpenTimer3                                           1     1      0     126
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _OpenUSART                                            3     1      2     420
                                             30 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _init_app_ram                                        26    26      0    4710
                                             11 BANK0     26    26      0
                         _Read_b_eep
               _ECANSetOperationMode
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             32 COMRAM     7     0      7
                                              0 BANK0      3     3      0
                         _Read_b_eep (ARG)
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           16    11      5    3312
                                             34 COMRAM     5     0      5
                                              0 BANK0     11    11      0
                         _Read_b_eep (ARG)
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                             30 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                             30 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Read_b_eep                                           2     0      2      42
                                             30 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     146
                                             30 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                             30 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _fifo_getFree                                        10     8      2     294
                                             30 COMRAM     2     0      2
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2363
                                             19 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                     i1_fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) i1_fifo_getFree                                     10     8      2     511
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 12     8      4    1180
                                              7 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_getFree
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
       _ECANSetOperationMode
       _setFilter
         _Read_b_eep (ARG)
         _Busy_eep (ARG)
         _Write_b_eep (ARG)
       __CANIDToRegs
         _Read_b_eep (ARG)
     _OpenUSART
     _OpenTimer0
     _OpenTimer3
     _WriteTimer3
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _ECANSetOperationMode
   _doModeVerbose
     _vscp_restoreDefaults
       _init_app_ram
         _Read_b_eep
         _ECANSetOperationMode
         _setFilter
           _Read_b_eep (ARG)
           _Busy_eep (ARG)
           _Write_b_eep (ARG)
         __CANIDToRegs
           _Read_b_eep (ARG)
       _init_app_eeprom
         _Busy_eep
         _Write_b_eep
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
       _Busy_eep (ARG)
       _Write_b_eep (ARG)
     __CANIDToRegs
       _Read_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
       _ReadTimer3
       ___wmul
         _ReadTimer3 (ARG)
     _WriteUSART
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
         _ReadTimer3 (ARG)
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _ReadTimer3 (ARG)
         _isdigit (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___wmul (ARG)
           _ReadTimer3 (ARG)
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _checkCANBusState
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
                   _Read_b_eep (ARG)
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _ReadTimer3 (ARG)
       _isdigit (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___wmul (ARG)
         _ReadTimer3 (ARG)
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _checkCANBusState
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
               _Read_b_eep (ARG)
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _checkCANBusState
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
                 _Read_b_eep (ARG)
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _changeBaudrate
       _OpenUSART
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _setFilter
       _Read_b_eep (ARG)
       _Busy_eep (ARG)
       _Write_b_eep (ARG)
     _Busy_eep
     _Write_b_eep
     _changeBaudrate
       _OpenUSART
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _ReadTimer3
       _getCANFrame
         _fifo_read
       ___wmul
         _ReadTimer3 (ARG)
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _ReadTimer3
       _getCANFrame
         _fifo_read
       ___wmul
         _ReadTimer3 (ARG)
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
             _Read_b_eep (ARG)
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _ECANSetOperationMode
     _Busy_eep
     _Write_b_eep
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
           _Read_b_eep (ARG)
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   i1_fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     4C      D4       9       82.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     19      CC       7       79.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     66      9E       5       98.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      41       1       68.4%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     37F       3        0.0%
DATA                 0      0     57B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Mar  8 14:54:52 2016

        ??_receiveVSCPModeMultiCanalMsg 001F                   __end_of_doModeVerbose 1E4E  
                          printBinary@i 0023                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0060                   __end_of_sendVSCPFrame 58C2  
            doModeVerbose@filter_nodeid 0296                                      PL2 1E4E  
                                    PL4 1E62                                      PL6 1E72  
                                    PL8 1E80                                      _id 003C  
                                    bsr 000FE0                     ___wmul@multiplicand 0025  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 6B94  
                                   PL10 36FE                                     PL20 39F0  
                                   PL12 1E9A                                     PL30 5DCE  
                                   PL22 1EE4                                     PL14 2E60  
                                   PL40 4C40                                     PL32 4E9A  
                                   PL24 4A36                                     PL16 26A4  
                                   PL50 2B30                                     PL42 374A  
                                   PL34 26D2                                     PL26 2EA6  
                                   PL18 3BE8                                     PL60 26F8  
                                   PL52 5404                                     PL44 376A  
                                   PL36 1F00                                     PL28 26C2  
                                   PL70 1F6C                                     PL62 5BF8  
                                   PL54 1F36                                     PL46 3788  
                                   PL38 1F10                                     PL80 5EEC  
                                   PL72 1F84                                     PL64 595E  
                                   PL56 4B28                                     PL48 1F24  
                                   PL90 4B48                                     PL82 2728  
                                   PL74 4C54                                     PL66 5B54  
                                   PL58 1F52                                     PL92 5178  
                                   PL84 1FB2                                     PL76 2712  
                                   PL68 3BF8                                     PL94 4C66  
                                   PL86 2736                                     PL78 1F9C  
                                   PL96 5092                                     PL88 4B36  
                                   PL98 4B5C                 sendEscapedUartData@pcrc 0063  
                                   l521 07C0                                     l507 6A78  
                                   l509 6A84                                     l525 07D2  
                                   l632 10FA                                     l624 1074  
                                   l608 0FB2                                     l472 415E  
                                   l464 40EC                                     l473 416A  
                                   l465 412A                                     l619 1048  
                                   l475 419A                                     l476 41A4  
                                   l477 41C2                                     l469 4144  
                                   l902 6408                                     l478 41C4  
                                   l911 6450                                     l920 56A2  
                                   l808 2CD4                                     l914 568E  
                                   l595 0ED6                                     l907 642C  
                                   l923 56BE                                     l588 1E4C  
                                   l932 5728                                     l764 2B96  
                                   l941 5AC2                                     l917 5698  
                                   l950 5AF2                                     l926 56E0  
                                   l782 2C20                                     l599 109A  
                                   l935 5732                                     l847 2B2E  
                                   l944 5ACC                                     l953 5B14  
                                   l929 56F0                                     l769 2E5E  
                                   l857 2824                                     l962 5B4A  
                                   l882 2A2C                                     l971 5B70  
                                   l947 5AD6                                     l980 5BB8  
                                   l956 5B24                                     l974 5B7A  
                                   l983 5BC8                                     l959 5B40  
                                   l968 5B66                                     l977 5B96  
                                   l986 5BE4                                     l899 63FE  
                                   l995 5278                                     l989 5BEE  
                                   l998 5282                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007C                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                  __size_of_WriteTimer3 0012                                     _dlc 0040  
                                   _pos 0103                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 010A                                     wreg 000FE8  
         __end_of_writeRegisterExtended 4DA0                                    PL100 3C08  
                                  PL110 274A                                    PL102 4B70  
                                  PL120 1FE8                                    PL112 1FC6  
                                  PL104 2ED0                                    PL130 533E  
                                  PL122 4508                                    PL114 5AAC  
                                  PL106 5A04                                    PL140 3E18  
                                  PL132 2018                                    PL124 1FF8  
                                  PL116 2B3E                                    PL108 4C7A  
                                  PL142 4C8C                                    PL134 275C  
                                  PL126 573C                                    PL118 1FD8  
                       ReadTimer3@timer 0021                                    PL144 2EE2  
                                  PL136 67A2                                    PL128 2008  
                                  PL146 2766                                    PL138 400C  
                                  PL148 2EEA                            __CFG_LVP$OFF 000000  
                __end_of_changeBaudrate 6084                            __CFG_WDT$OFF 000000  
                                  l1001 528C                                    l1010 52DA  
                                  l1004 52A8                                    l1013 52F6  
                                  l1102 3A44                                    l1022 5334  
                                  l1007 52CA                                    l1016 530A  
                                  l1121 3BD2                                    l1201 44FC  
                                  l1107 3A80                                    l1019 532A  
                                  l1124 3BDC                                    l1204 4506  
                                  l1063 3242                                    l1127 3BE6  
                                  l1071 3E64                                    l1400 38D0  
                                  l1064 3254                                    l1056 31A2  
                                  l1216 5458                                    l1401 38E2  
                                  l2041 6540                                    l1321 3506  
                                  l1225 4EF0                                    l1161 5762  
                                  l1402 38F4                                    l2042 6542  
                                  l1314 348A                                    l1074 3E6E  
                                  l1170 5802                                    l1403 3906  
                                  l2043 654C                                    l1307 33FE  
                                  l1219 54F0                                    l1243 4CE6  
                                  l1155 574E                                    l1404 3918  
                                  l2044 654E                                    l1332 485E  
                                  l1228 4FA6                                    l1068 3E5A  
                                  l1092 400A                                    l1164 577E  
                                  l1405 392A                                    l2037 652C  
                                  l2046 6566                                    l2054 65BE  
                                  l1262 6680                                    l1246 4D9E  
                                  l1086 3FF6                                    l1158 5758  
                                  l1182 43F0                                    l1407 39EE  
                                  l1079 3EAA                                    l1167 57F8  
                                  l1191 447A                                    l1328 4936  
                                  l1096 3A30                                    l1329 4830  
                                  l1089 4000                                    l1185 442A  
                                  l1177 43BE                                    l1266 668C  
                                  l1371 5EB0                                    l1099 3A3A  
                                  l1444 5F86                                    l1453 595C  
                                  l2246 4E90                                    l1198 44DC  
                                  l1391 382E                                    l2247 4E98  
                                  l1392 3840                                    l1368 5E92  
                                  l1704 53E2                                    l1624 4802  
                                  l1616 4766                                    l1448 6950  
                                  l1393 3852                                    l1394 3864  
                                  l1378 6250                                    l2522 5C84  
                                  l1618 4784                                    l1395 3876  
                                  l1707 5402                                    l1396 3888  
                                  l1732 6266                                    l1740 62C4  
                                  l1397 389A                                    l1389 381C  
                                  l2621 5154                                    l1398 38AC  
                                  l1734 626E                                    l1399 38BE  
                                  l1807 2188                                    l2711 60F8  
                                  l1824 2198                                    l1808 213A  
                                  l1760 5D40                                    l2553 6162  
                                  l1930 6B8C                                    l1754 67EC  
                                  l2563 63E0                                    l1843 22BC  
                                  l1827 21CC                                    l2636 6652  
                                  l1828 21D0                                    l2708 60FC  
                                  l2741 5E64                                    l1678 4C3E  
                                  l2646 6860                                    l2742 5E68  
                                  l1871 241E                                    l1791 2046  
                                  l2727 632C                                    l1759 5CDA  
                                  l1880 248A                                    l1882 24A6  
                                  l1955 69AC                                    l1971 6AC4  
                                  l2739 5E70                                    l1972 6AC6  
                                  l1877 2460                                    l2766 66DE  
                                  l1879 2486                                    l2775 682A  
                                  l2687 64B0                                    l2689 650A  
                                  l2785 6724                                    l1898 2530  
                                  l1995 6A60                                    l1996 6A62  
                                  l1997 6A6A                                    l1998 6A6C  
                                  STR_1 7831                                    STR_2 7157  
                                  STR_3 78C3                                    STR_4 7270  
                                  STR_5 7A29                                    STR_6 7FC0  
                                  STR_7 79CE                                    STR_8 7FA7  
                                  STR_9 7F6A                                    _PIE1 000F9D  
                                  _PEIE 007F96                          sendCANFrame@id 0088  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0020  
                                  _bDLE 0030                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 5BF8                                    _bHex 0100  
          doModeVerbose@filter_priority 0294                                    _crc8 68E2  
                                  _data 0280                                    _caps 00FC  
                                  _atoi 4DA0                                    _main 401A  
                                  _init 6452                                    _mode 00F1  
                                  _itoa 6952                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 5C06                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 077A                            _sprintf$2270 0079  
                          _sprintf$2271 007B                            _sprintf$2277 007D  
          receiveSendMultiEventCANAL@id 007E               ECANReceiveMessage@dataLen 000A  
    __end_of_receiveSendMultiEventCANAL 3BE8              _receiveSendMultiEventCANAL 3A06  
                       i1fifo_getFree@f 0001                      doModeVerbose@count 02BB  
                 getVSCPFrame@pPriority 0072                      doModeVerbose@value 02C4  
                  __end_of_getVSCPFrame 5F88                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 009C  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 _B0CON 000E20                                   _B1CON 000E30  
                                 _B2CON 000E40                                   _B3CON 000E50  
                                 l16010 15B0                                   l16002 15A2  
                                 l15300 41E6                                   l16110 17D0  
                                 l16102 17C0                                   l16030 161A  
                                 l15216 59BC                                   l16024 15EE  
                                 l16016 15DE                                   l15232 4084  
                                 _B4CON 000E60                                   l16130 1836  
                                 l17004 4BD0                                   l16124 180C  
                                 l16116 17FC                                   l16052 1666  
                                 l16044 1656                                   l15324 6278  
                                 l16230 1A2A                                   l16206 1982  
                                 l16038 162A                                   l15326 627E  
                                 l15270 4150                                   l15440 6230  
                                 l15432 620A                                   l17200 3236  
                                 l18000 5564                                   l16240 1A70  
                                 l16216 19C8                                   l16160 18D6  
                                 l16152 1880                                   l16144 1870  
                                 l16056 1694                                   l15264 412C  
                                 _B5CON 000E70                                   l17122 2FC0  
                                 l17130 3048                                   l18002 557A  
                                 l16330 1CE2                                   l16306 1C40  
                                 l16226 1A0A                                   l16162 18E4  
                                 l16138 1846                                   l16066 1706  
                                 l15610 0B20                                   l15530 08DE  
                                 l15522 08A8                                   l15514 0874  
                                 l15506 0844                                   l15282 417E  
                                 l15266 413E                                   l15444 6244  
                                 l15436 621C                                   l17044 562C  
                                 l15460 53EC                                   l17108 2F6A  
                                 l17220 6086                                   l16340 1D14  
                                 l16316 1C74                                   l16252 1AB2  
                                 l15604 0AF2                                   l16404 2BB2  
                                 l15292 41D0                                   l15462 53F0  
                                 l17206 3252                                   l18006 5598  
                                 l18030 5032                                   l18022 4FCC  
                                 l18102 6038                                   l16342 1D22  
                                 l16318 1C82                                   l16246 1A90  
                                 l15710 0E82                                   l15622 0B7C  
                                 l15294 41D4                                   l15278 4176  
                                 l17216 6B24                                   l15448 535C  
                                 l17160 3106                                   l17136 3064  
                                 l17224 60BE                                   l17304 420E  
                                 l18032 503A                                   l18104 606E  
                                 l16360 1DE4                                   l16264 1AFC  
                                 l16096 1796                                   l16088 1786  
                                 l15800 10BA                                   l15720 0EA4  
                                 l15712 0E96                                   l15704 0E18  
                                 l15640 0C32                                   l15632 0BD4  
                                 l15616 0B4E                                   l15552 0980  
                                 l15472 0788                                   l16512 2CD8  
                                 l16520 2CEC                                   l16504 2CA4  
                                 l16408 2BB8                                   l15296 41DA  
                                 l15466 6AF4                                   l17058 564A  
                                 l17226 60E4                                   l17234 5DEA  
                                 l17402 33A4                                   l18034 5050  
                                 l16370 1E2A                                   l16354 1DAC  
                                 l16258 1AD6                                   l16194 18F8  
                                 l15810 110E                                   l15730 0EDE  
                                 l15650 0C90                                   l15634 0BDE  
                                 l15626 0B9A                                   l15642 0C42  
                                 l15570 0A00                                   l15562 09C8  
                                 l15546 0946                                   l15538 0912  
                                 l18202 3BA0                                   l16602 2E2A  
                                 l16418 2BD0                                   l17172 3156  
                                 l17148 30B6                                   l19012 66EE  
                                 l19020 66A8                                   l17244 5E24  
                                 l17332 42DA                                   l17092 6A80  
                                 l18060 5D96                                   l16356 1DBA  
                                 l16372 1E36                                   l18140 3AB0  
                                 l16460 2C36                                   l16428 2BF0  
                                 l16444 2BFA                                   l16620 2E5C  
                                 l16700 292A                                   l19006 6B12  
                                 l19014 66F8                                   l19022 66B2  
                                 l17254 4DA2                                   l17318 4274  
                                 l17430 346A                                   l18038 506E  
                                 l18062 5D9E                                   l17510 48EE  
                                 l16286 1B9E                                   l16278 1B5E  
                                 l16294 1BE0                                   l16366 1E16  
                                 l15822 1158                                   l15830 1196  
                                 l15750 0F78                                   l15662 0D04  
                                 l15582 0A42                                   l15574 0A16  
                                 l15566 09E8                                   l15494 07EA  
                                 l15486 07D6                                   l18206 3BC2  
                                 l16614 2E50                                   l16454 2C26  
                                 l16382 2B5C                                   ?_crc8 0060  
                                 l17272 4E56                                   l17264 4DFC  
                                 l17256 4DA8                                   l17360 3272  
                                 l17280 6A26                                   l18056 5D6E  
                                 l17504 48E0                                   l18080 601A  
                                 l15912 1398                                   l15760 0FC6  
                                 l15832 119A                                   l15840 11C6  
                                 l15672 0D78                                   l15656 0CCA  
                                 l15648 0C80                                   l16376 1E4A  
                                 l18128 3A68                                   l18232 3E92  
                                 l16552 2D54                                   l16536 2D24  
                                 l16616 2E56                                   l16456 2C2C  
                                 l16384 2B60                                   l16640 27B2  
                                 l17186 31B2                                   l17266 4E14  
                                 l17346 4340                                   l17442 34A6  
                                 l17434 347A                                   l17418 341A  
                                 l18066 5DAC                                   l18090 6026  
                                 l18074 600E                                   l15906 1360  
                                 l15922 13EA                                   l15738 0F28  
                                 l15682 0DBA                                   l15666 0D3E  
                                 l15586 0A58                                   l15578 0A2C  
                                 l16570 2DA0                                   l16546 2D3E  
                                 l16458 2C30                                   l16730 2A0C  
                                 l17196 3226                                   l17532 64DA  
                                 l17268 4E1C                                   l17284 6A36  
                                 l17524 69F8                                   l18092 602A  
                                 l18084 601E                                   l18076 6012  
                                 l15772 1014                                   l15588 0A68  
                                 l16564 2D86                                   l16476 2C52  
                                 l16468 2C46                                   l18500 443E  
                                 l16708 299E                                   l16652 27FA  
                                 l16822 652E                                   l16814 6520  
                                 l17702 2286                                   l17622 2108  
                                 l17606 209A                                   l17614 20E0  
                                 l17198 322A                                   l17454 34F6  
                                 l17374 32D8                                   l17526 6A00  
                                 l18086 6022                                   l18078 6016  
                                 l15934 1424                                   l15918 13C0  
                                 l15870 124C                                   l15862 123E  
                                 l15854 1206                                   l15838 11B6  
                                 l15598 0AC0                                   l18182 3B3E  
                                 l16558 2D6C                                   l16486 2C64  
                                 l16742 2A48                                   l16718 29C8  
                                 l16662 282E                                   l16646 27D6  
                                 l17720 22E4                                   l17640 218E  
                                 l18096 602E                                   l15944 145C  
                                 l15696 0E0A                                   l15688 0DD2  
                                 l18176 3B32                                   l18272 3FCC  
                                 l16584 2DDE                                   l16576 2DBA  
                                 l18512 4498                                   l16752 2A6A  
                                 l17642 2192                                   l17634 2140  
                                 l18098 6032                                   l15962 14CE  
                                 l15890 1304                                   l15786 106E  
                                 l16594 2E04                                   l16762 2A88  
                                 l16738 2A32                                   l16674 285E  
                                 l16658 281E                                   l16770 2AF8  
                                 l17900 2644                                   l17812 24A0  
                                 l17804 2464                                   l17740 2332  
                                 l17716 22C6                                   l17652 21B4  
                                 l17644 2196                                   l18540 6878  
                                 l17388 333E                                   l17468 481E  
                                 l15876 12B6                                   l18188 3B5C  
                                 l18276 3FE6                                   l18268 3FC0  
                                 l18292 69E4                                   l18364 522E  
                                 l18508 4484                                   l16684 2888  
                                 l16780 2B2C                                   l17910 2686  
                                 l17902 2656                                   l17742 2336  
                                 l17726 22FA                                   l17662 21DC  
                                 l17670 2200                                   l17646 219C  
                                 l17638 2174                                   l17590 2054  
                                 l17582 202E                                   l17486 4878  
                                 l17574 4F84                                   l15966 14F6  
                                 l15886 12D8                                   l15878 12CA  
                                 l18198 3B7C                                   l16774 2B0C  
                                 l17728 22FE                                   l17680 222A  
                                 l17664 21E8                                   l17592 2058  
                                 l17576 4FA4                                   l18288 69C4  
                                 l18560 5D2C                                   l16776 2B18  
                                 l16768 2A9E                                   l16794 3582  
                                 l17906 2664                                   l17818 24B6  
                                 l17834 24EA                                   l17842 2506  
                                 l17754 236A                                   l17770 23A2  
                                 l17674 2216                                   l17658 21D6  
                                 l17594 205C                                   l18642 58F0  
                                 l18618 5F20                                   l18538 6874  
                                 l15898 1312                                   l18554 5CE8  
                  __size_of_doModeSLCAN 03C0                                   l16980 3982  
                                 l18708 696E                                   l17852 2518  
                                 l17828 24D6                                   l17780 23EC  
                                 l17756 236E                                   l17772 23B4  
                                 l17684 2238                                   l17692 224A  
                                 l17588 2050                                   l17916 268E  
                                 l18636 58EA                                   l18804 47B4  
                                 l18812 47D2                                   l18740 54CE  
                                 l15996 1576                                   l15988 1568  
                                 l18910 6126                                   l17862 2540  
                                 l17846 2510                                   l17918 2696  
                                 l17678 221C                                   l17694 2276  
                                 l17598 2062                                   l18654 5926  
                                 l18638 58EC                                   l18822 47F8  
                                 l18742 54EE                                   l18750 6576  
                                 l18574 675E                                   l17792 2422  
                                 l17776 23CE                                   l17688 2244  
                                 l18824 47FA                                   l18584 694E  
                                 l18752 6584                                   l17936 6696  
                                 l17928 6666                                   l18568 6740  
                                 l16978 393C                                   l18906 6116  
                                 l18930 63B0                                   l17866 2552  
                                 l17786 23FE                                   l18818 47F4  
                                 l18770 4700                                   l18754 658C  
                                 l18908 6122                                   l17892 2606  
                                 l17884 258E                                   l17868 2558  
                                 l18764 46EE                                   l18748 6572  
                                 l17980 4D9C                                   l18676 50B6  
                                 l18918 6154                                   l18934 63D2  
                                 l18926 63A0                                   l17886 25E4  
                                 l17878 257A                                   l17798 243C  
                                 l18782 472A                                   l18686 50FA  
                                 l18854 67EA                                   l18846 67D8  
                                 l18838 67C6                                   l18944 6622  
                                 l18872 5C0E                                   l18928 63AC  
                                 l17896 262A                                   l18792 476A  
                                 l18946 662A                                   l18882 5C46  
                                 l18866 6AA4                                   l17994 5516  
                                 l17978 4D7C                                   l18956 6648  
                                 l18948 662E                                   l18972 6856  
                                 l18964 6838                                   l18966 6840  
                                 l18982 6300                                   l18798 4786  
                                 l18968 6844                                   l18992 67FA  
                                 l18986 630E                                   l18978 62C8  
                                 l18988 6318                                   l18996 6816  
                                 l18998 681A                                   ?_atoi 0062  
                                 ?_main 01C7                                   ?_init 0001  
                                 ?_itoa 0069                           i1_WriteTimer0 6B72  
                                 _EEADR 000FA9                                   STR_10 7F48  
                                 STR_11 7F6A                                   STR_12 7F82  
                                 STR_20 7F33                                   STR_13 7F6A  
                                 STR_21 7D0D                                   STR_30 7FF4  
                                 STR_14 7EAE                                   STR_22 7D21  
                                 STR_15 7F6A                                   STR_31 7FF4  
                                 STR_23 7D5D                                   STR_32 7FF4  
                                 STR_16 7F3A                                   STR_40 7D82  
                                 STR_24 7C4F                                   STR_17 7F6A  
                                 STR_33 7FF4                                   STR_41 7FBB  
                                 STR_25 7AE8                                   STR_42 7F6A  
                                 STR_34 7FF4                                   STR_18 7EF8  
                                 STR_26 7CF9                                   STR_50 7313  
                                 STR_19 7F6A                                   STR_51 7E72  
                                 STR_35 7FF4                                   STR_43 7FD5  
                                 STR_27 7D70                                   STR_44 7F6A  
                                 STR_36 7F6A                                   STR_60 7F4F  
                                 STR_28 7B7B                                   STR_52 7B63  
                                 STR_53 7E72                                   STR_61 7FED  
                                 STR_29 7FEA                                   STR_45 7FB6  
                                 STR_37 794B                                   STR_46 7F6A  
                                 STR_62 7F4F                                   STR_38 7FE7  
                                 STR_70 7DEA                                   STR_54 798D  
                                 STR_39 7F6A                                   STR_55 7E72  
                                 STR_71 7E6A                                   STR_63 7FED  
                                 STR_47 7F93                                   STR_48 7F6A  
                                 STR_72 7F70                                   STR_64 7EDC  
                                 STR_56 7E18                                   STR_80 72DD  
                                 STR_65 7F4F                                   STR_81 7F9D  
                                 STR_49 7F98                                   STR_57 7E6A  
                                 STR_73 7B1A                                   STR_82 7313  
                                 STR_90 7E1E                                   STR_74 7F4F  
                                 STR_66 7FED                                   STR_58 7F70  
                                 STR_83 7E72                                   STR_75 7FED  
                                 STR_67 7FE1                                   STR_91 7ED0  
                                 STR_59 7DFB                                   STR_84 7B63  
                                 STR_76 7F4F                                   STR_92 7FCD  
                                 STR_68 7FC5                                   STR_69 72DA  
                                 STR_85 7E72                                   STR_77 7FED  
                                 STR_93 789F                                   STR_78 72DA  
                                 STR_86 798D                                   STR_94 7E1E  
                                 STR_79 7F6A                                   STR_95 7ED0  
                                 STR_87 7E72                                   STR_96 7FCD  
                                 STR_88 7B93                                   STR_97 7FAC  
                                 STR_89 77E6                                   STR_98 7313  
                                 STR_99 7D35            __end_of_printFirmwareVersion 5EEC  
                                 _BSEL0 000DF8                         __end_of___lldiv 6174  
                                 ?_utoa 0060                         __end_of_calcCRC 69EE  
                                 _T0CON 000FD5                                   u20035 0A8C  
                                 u20125 0C66                         __end_of___llmod 63F2  
                                 u20145 0CB4                                   u20155 0CEE  
                                 u20165 0D28                                   u21070 2BD6  
                                 u20415 11EA                                   u20175 0D62  
                                 u22105 4BBA                                   u20505 140E  
                                 u20185 0D9C                                   u21314 2D02  
                                 u21234 2C78                                   u22115 4BD6  
                                 u21315 2D00                                   u21235 2C76  
                                 u22055 37C0                                   _LATC1 007C59  
                                 u22056 37C6                                   _T3CON 000FB1  
                                 u22065 37F4                                   u22057 37D4  
                                 u20625 1EA2                                   u20545 151A  
                                 u22066 37FA                                   u21434 2EC4  
                                 u21274 2CBA                                   u22067 3808  
                                 u20635 1728                                   u21435 2EBE  
                                 u21275 2CB8                                   u22500 4E40  
                                 u22420 4DBC                                   u21700 28F6  
                                 u22165 69B8                                   u20725 191A  
                                 u22166 69BA                                   u22510 4E6A  
                                 u21710 2900                                   u22095 4BAA  
                                 u20735 195C                                   u22440 4DD4  
                                 u21464 2E86                                   u21720 290A  
                                 u20905 1CA4                                   u20745 19A4  
                                 u21465 2E82                                   u21705 28F4  
                                 u21474 2E92                                   u22507 4E3A  
                                 u22427 4DB6                                   u21475 2E8E  
                                 u21715 28FE                                   u22460 4DF2  
                                 u21484 2E9E                                   u22517 4E64  
                                 u21485 2E9A                                   u21725 2908  
                                 u22447 4DCE                                   u20935 1D44  
                                 u22480 4E10                                   u22810 6502  
                                 u22467 4DEC                                   u22555 5848  
                                 u20955 1DDC                                   u20875 1C02  
                                 u20965 1E06                                   u22487 4E0A  
                                 u23544 6676                                   u22817 64FC  
                                 u23545 6672                                   u24195 51C8  
                                 u24710 5F72                                   u22790 64CC  
                                 u24570 6894                                   u24715 5F68  
                                 u24900 65B4                                   u22797 64C6  
                                 u25357 4094                                   u24577 688E  
                       __end_of___lwdiv 665C                                   u24907 65AA  
                                 _ERRIE 007D1D                                   _ERRIF 007D25  
                                 u19650 65DE                                   u19475 5994  
                                 u19660 660A                            _vscpPriority 01B0  
                                 u19657 65D8                                   u19905 08F8  
                                 u19667 6604                                   u19755 53CE  
                                 u19915 092C                                   u19925 096A  
                                 i1l422 058C                                   i1l431 057C  
                                 u19935 09A4                                   i1l417 0494  
                       __end_of___lwmod 686A                                   u19865 0820  
                                 i1l419 058E                                   u19875 085A  
                                 i1l436 05C2                                   i1l428 058C  
                                 u19885 088C                                   i1l446 0638  
                                 i1l438 05D8                                   u19895 08C2  
                                 i1l456 075C                         sendCANFrame@dlc 008C  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0022                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _TMR3H 000FB3  
                                 _TMR3L 000FB2                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B1                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00EF  
               readRegisterExtended@reg 00B1                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 001F                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 5CA6                                   crc8@m 0062  
                                 _flags 0041                         __end_of_dpowers 6E44  
                Write_b_eep@GIE_BIT_VAL 0022                        _checkCANBusState 6A70  
                       __end_of_isdigit 6AAC                         ?_changeBaudrate 0001  
                                 _timer 00E2                                   atoi@a 0067  
                                 atoi@s 0062                                   main@c 00C5  
                                 _ultoa 50A6                              Interrupt@c 001D  
            ??_printNodeFirmwareVersion 0028                        _printErrors$1631 008B  
                                 tablat 000FF5                        _printErrors$1643 008F  
                      _printErrors$1637 008D                        _printErrors$1656 0093  
                      _printErrors$1665 0095                        _printErrors$1649 0091  
               ??_receiveSendEventCANAL 006C             __end_of_sendEscapedUartData 6452  
                                 plusw2 000FDB                                   utoa@c 0068  
                                 utoa@v 0066                                   status 000FD8  
                       __end_of_sprintf 26A4                 ??_receiveSendEventSLCAN 007A  
                       __end_of_strichr 682C                         __end_of_strcspn 66E8  
                       __end_of_toupper 6B16                         __end_of_stristr 60FE  
                          __end_ofPL100 3C1A                            __end_ofPL110 275C  
                          __end_ofPL102 4B82                            __end_ofPL120 1FF8  
                          __end_ofPL112 1FD8                            __end_ofPL104 2EE2  
                          __end_ofPL130 534C                            __end_ofPL122 4516  
                          __end_ofPL114 5ABE                            __end_ofPL106 5A16  
                          __end_ofPL140 3E26                            __end_ofPL132 2028  
                          __end_ofPL124 2008                            __end_ofPL116 2B4A  
                          __end_ofPL108 4C8C                            __end_ofPL142 4C96  
                          __end_ofPL134 2766                            __end_ofPL126 574A  
                          __end_ofPL118 1FE8                            __end_ofPL144 2EEA  
                          __end_ofPL136 67B0                            __end_ofPL128 2018  
                          __end_ofPL146 2770                            __end_ofPL138 401A  
                          __end_ofPL148 2EF8       __size_of_receivePrintEventVerbose 035E  
                   doModeVerbose@i_1293 02C1               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1300 02C5                     doModeVerbose@p_1415 02D0  
                   doModeVerbose@p_1353 02C7                     doModeVerbose@p_1392 02D2  
                        WriteUSART@data 001F                    _ECANSetOperationMode 6AE8  
                          _canInputFifo 0034                         __initialization 632E  
                doModeVerbose@page_1349 02B0           receiveSendMultiEventCANAL@dlc 0082  
                          __end_of_crc8 691A           receiveSendMultiEventCANAL@crc 0083  
                          __end_of_atoi 4E9A           receiveSendMultiEventCANAL@pos 0084  
                          __end_of_main 41F2                            __end_of_init 64B0  
                          __end_of_itoa 698A                              _ReadTimer3 6B2A  
                          __end_of_utoa 5CA6                     doModeVerbose@ifmode 02C9  
                            _Read_b_eep 6B4E                     doModeVerbose@maskno 02BE  
                      __end_of_Busy_eep 6B92                     doModeVerbose@nodeid 02BC  
                         doModeSLCAN@id 0096                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 009C                       ??_ECANSendMessage 006B  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00B4  
                                ??_crc8 0026                   getVSCPFrame@pvscptype 006E  
                                ??_atoi 0064                  ??_vscp_restoreDefaults 0028  
                                ??_main 00C4                       readRegister@value 00B2  
                                ??_init 0028                                  ??_itoa 0026  
                                ??_utoa 0026                  doModeVerbose@mask_type 0298  
                         __activetblptr 000002                         _stateVscpDriver 0033  
                     __RegsToCANID@type 0004                    _can_transmitOverruns 00CA  
            ECANReceiveMessage@msgFlags 000B                     changeBaudrate@nBaud 0022  
                         ?_readRegister 00AF               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1357 028E  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B2  
            ECANReceiveMessage@savedPtr 000C                                  _CANCON 000F6F  
                      ___llmod@dividend 0065                                  STR_100 7F4F  
                                STR_101 7FED                                  STR_102 72DA  
                                STR_110 75E2                                  STR_111 7FF4  
                                STR_103 7A62                                  STR_104 7F6A  
                                STR_200 7FF4                                  STR_120 7FA2  
                                STR_112 7772                                  STR_121 7FF4  
                                STR_113 7FF4                                  STR_105 7F41  
                                STR_201 7E5F                                  STR_210 72DA  
                                STR_130 7FF4                                  STR_106 7FF4  
                                STR_202 7FC9                                  STR_114 77C0  
                                STR_122 73AE                                  STR_115 7FF4  
                                STR_203 7D94                                  STR_211 7C91  
                                STR_123 780C                                  STR_131 774B  
                                STR_107 7062                                  STR_132 7F6A  
                                STR_124 7FF4                                  STR_212 7F5D  
                                STR_220 7F00                                  STR_204 7F5D  
                                STR_140 7E9C                                  STR_300 7E74  
                                STR_108 76D6                                  STR_116 7635  
                                STR_301 72DA                                  STR_117 7FF4  
                                STR_109 7FF4                                  STR_141 7F82  
                                STR_221 7FDD                                  STR_213 7FDD  
                                STR_205 7FDD                                  STR_133 7F8E  
                                STR_125 7686                                  STR_230 72DA  
                                STR_222 72DA                                  STR_214 72DA  
                                STR_206 72DA                                  STR_126 7FF4  
                                STR_142 7FA7                                  STR_134 7FD9  
                                STR_302 7F10                                  STR_118 7E54  
                                STR_310 7DB7                                  STR_150 79AE  
                                STR_119 7F6A                                  STR_231 7BC3  
                                STR_143 7F48                                  STR_151 7F88  
                                STR_303 7F08                                  STR_207 7DD9  
                                STR_215 7CBC                                  STR_223 7BDB  
                                STR_127 7856                                  STR_135 75B6  
                                STR_128 7FF4                                  STR_144 7F3A  
                                STR_160 7EFD                                  STR_216 7F5D  
                                STR_208 7F5D                                  STR_232 7F00  
                                STR_224 7F00                                  STR_136 7EF0  
                                STR_304 7E32                                  STR_152 7ACE  
                                STR_240 70E2                                  STR_145 7EAE  
                                STR_233 7FDD                                  STR_225 7FDD  
                                STR_217 7FDD                                  STR_209 7FDD  
                                STR_153 7F7C                                  STR_305 7E92  
                                STR_161 7CA7                                  STR_129 787B  
                                STR_137 76AE                                  STR_241 72A7  
                                STR_234 72DA                                  STR_226 72DA  
                                STR_218 72DA                                  STR_250 6FF8  
                                STR_162 7FD1                                  STR_154 7EFD  
                                STR_146 7F76                                  STR_306 7E88  
                                STR_138 7E49                                  STR_170 796C  
                                STR_242 711D                                  STR_171 7F6A  
                                STR_139 7F6A                                  STR_147 7EE8  
                                STR_155 7C7B                                  STR_163 7C65  
                                STR_307 7C38                                  STR_219 7C21  
                                STR_227 7BC3                                  STR_243 7BAB  
                                STR_251 7A7D                                  STR_235 7347  
                                STR_308 72DA                                  STR_244 7F4F  
                                STR_180 7F4F                                  STR_228 7F00  
                                STR_156 7FD1                                  STR_236 7B01  
                                STR_172 7A98                                  STR_148 7A46  
                                STR_252 758A                                  STR_164 7502  
                                STR_260 71CA                                  STR_237 7F4F  
                                STR_245 7FED                                  STR_181 7FED  
                                STR_229 7FDD                                  STR_149 7FB1  
                                STR_165 7E7E                                  STR_309 7DA6  
                                STR_173 7CE5                                  STR_157 7C0A  
                                STR_261 7BF3                                  STR_253 7530  
                                _EEDATA 000FA8                                  STR_246 72DA  
                                STR_238 7FED                                  STR_190 7FED  
                                STR_174 7EC0                                  STR_182 7E26  
                                STR_262 792A                                  STR_166 78E6  
                                STR_158 760C                                  STR_254 737B  
                                STR_270 6E64                                  STR_239 72DA  
                                STR_183 7F00                                  STR_175 7EC8  
                                STR_191 7EA5                                  STR_159 7E3E  
                                STR_271 7CD1                                  STR_167 7A0C  
                                STR_263 76FD                                  STR_255 73E0  
                                STR_247 7202                                  STR_192 7F4F  
                                STR_184 7FDD                                  STR_176 7F64  
                                STR_168 7EB7                                  STR_256 79ED  
                                STR_280 7799                                  STR_264 765E  
                                STR_248 7191                                  STR_272 6F95  
                                STR_281 7313                                  STR_193 7FED  
                                STR_169 7FFC                                  STR_177 7FF2  
                                STR_185 7EE0                                  STR_273 7908  
                                STR_249 7724                                  STR_265 74D3  
                                STR_257 7412                                  STR_290 7FF8  
                                STR_178 7FF0                                  STR_186 7F56  
                                STR_194 7F25                                  STR_258 755E  
                                STR_274 74A4                                  STR_282 6FDC  
                                STR_266 6EFF                                  STR_283 72DA  
                                STR_195 7F4F                                  STR_187 7FED  
                                STR_291 7FE4                                  STR_179 7F2C  
                                STR_259 7B33                                  STR_275 7475  
                                STR_267 6F4B                                  STR_196 7FED  
                                STR_292 7FFA                                  STR_188 7F1E  
                                STR_284 7AB3                                  STR_276 701F  
                                STR_268 6EB2                                  STR_293 72DA  
                                STR_285 72DA                                  STR_189 7F4F  
                                STR_197 7F17                                  STR_269 7B4B  
                                STR_277 7444                                  STR_286 6FDC  
                                STR_198 7F4F                                  STR_294 7E0A  
                                STR_278 7239                                  STR_295 72DA  
                                STR_287 72DA                                  STR_199 7FED  
                                STR_279 70A4                                  STR_288 7DC8  
                                STR_296 7D49                                  STR_297 7FFC  
                                STR_289 7ED8                                  STR_298 7FF6  
                                STR_299 72DA                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 4FA8                                  _CIOCON 000F73  
                                ?_ultoa 006D            ??_sendVSCPDriverCommandReply 0028  
                  __end_of_fifo_getFree 5A04                           ?_init_app_ram 0001  
                                i1l2067 6AD8                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1640 3CA0  
                                i1l1650 3CFA                                  i1l1642 3CAE  
                                i1l1715 497C                                  i1l1716 4A34  
                                i1l1660 3D84                                  i1l1652 3D0A  
                                i1l1644 3CC2                                  i1l1636 3E16  
                                i1l1661 3D9E                                  i1l1629 3C52  
                                i1l1646 3CD6                                  i1l1639 3D20  
                                i1l1648 3CEA                                  i1l1683 4B26  
                                i1l1688 61E0                              _OpenTimer0 6AAC  
                            _OpenTimer3 6A48                                  i1l7166 4986  
                                i1l7158 494A                                  i1l7176 4A10  
                                i1l7178 4A1A                         _init_app_eeprom 55BC  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0008                  ECANReceiveMessage@mode 0010  
                ECANReceiveMessage@temp 0011                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 0076  
            ??_sendVSCPDriverErrorFrame 0028                       getVSCPFrame@pSize 0074  
                    _doModeVerbose$1312 029B                      _doModeVerbose$1321 029F  
                    _doModeVerbose$1317 029D                      _doModeVerbose$1334 02A3  
                    _doModeVerbose$1326 02A1                      _doModeVerbose$1343 02A7  
                    _doModeVerbose$1339 02A5                      _doModeVerbose$1372 02AB  
                    _doModeVerbose$1381 02AD                      _doModeVerbose$1366 02A9  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0062  
                    __size_of_Interrupt 0362                              _bLocalEcho 0101  
              readRegisterExtended@page 00AF                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0025  
                                ___wmul 68A6                              _bInitiated 00EE  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0027  
                             ??_calcCRC 0028                                  _cmdbuf 0105  
                             ??___llmod 0027                        OpenTimer0@config 001F  
                receiveSendEventCANAL@i 0078                               ??___lwdiv 0023  
                             ??___lwmod 0023           _receivePrintEventVerbose$1511 0096  
         _receivePrintEventVerbose$1521 009A           _receivePrintEventVerbose$1506 0094  
         _receivePrintEventVerbose$1531 009E           _receivePrintEventVerbose$1516 0098  
         _receivePrintEventVerbose$1526 009C           _receivePrintEventVerbose$1536 00A0  
         _receivePrintEventVerbose$3691 0090                                  _memcpy 672E  
                                _memset 6A1C                                  clear_0 6336  
                                clear_1 634A                                  clear_2 635C  
                                clear_3 6368                                  clear_4 6374  
                                clear_5 6380                        OpenTimer3@config 001F  
                         ?_sendCANFrame 0088                                  _strcat 6568  
                                _strchr 64B0                                  _strcpy 69EE  
                                _strlen 686A                                  _wrkbuf 0155  
                                _strtok 5DDC                                  _strspn 66E8  
   __size_of_sendVSCPDriverCommandReply 00CC                               ??_isdigit 001F  
                receiveSendEventSLCAN@i 0082                        __end_of_printMDF 5DCE  
                          __mediumconst 6DEC                          ??_readRegister 00B3  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0079  
                                ultoa@v 0075                            ?_printErrors 0001  
                             ??_sprintf 0075                               ??_strichr 0024  
                             ??_strcspn 0025                               ??_toupper 001F  
                        ??_init_app_ram 006B                               ??_stristr 0026  
                            _bTimestamp 00F0              ??_sendVSCPModeCapabilities 0028  
            doModeVerbose@mask_priority 0297                        __end_of_strnicmp 632E  
                            __accesstop 0060                 __end_of__initialization 6386  
                  _printFirmwareVersion 5E72                   __size_of_getVSCPFrame 0086  
              doModeVerbose@bPersistent 02B3               receiveSendEventCANAL@data 0070  
                  doModeVerbose@id_1427 02CC                              _WriteUSART 6B16  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 0198  
                           ?_ReadTimer3 001F                    _printStatistics$1612 008D  
                  _printStatistics$1606 008B                    _printStatistics$1624 0091  
                  _printStatistics$1618 008F                   _uart_transmitOverruns 00EA  
                           ?_Read_b_eep 001F                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 5178                              __end_ofPL2 1E62  
                            __end_ofPL4 1E72                              __end_ofPL6 1E80  
                            __end_ofPL8 1E9A                          ??_sendCANFrame 0028  
                     __end_of_ReadUSART 6AE8                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 0095  
                       readRegister@reg 00AF                 __size_ofi1_fifo_getFree 0096  
                  sendVSCPDriverAck@crc 0066                      __size_of_findNodes 0134  
                        doModeSLCAN@dlc 009A                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00B8                  getVSCPFrame@pvscpclass 006C  
                       _fifo_canrxcount 0031                 __end_of_init_app_eeprom 5686  
                     __end_of_Interrupt 077A                           ReadUSART@data 0001  
                    readRegister@nodeid 00B7                          _status_led_cnt 002A  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 6568                 doModeVerbose@mask_class 0292  
             printNodeFirmwareVersion@i 00BD                            sprintf@width 0082  
      __end_of_printNodeFirmwareVersion 55BC                              _doModeVscp 2B4A  
                               ??_ultoa 0028                            _getVSCPFrame 5F02  
                            __pbssBANK0 00C6                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                             ?_OpenTimer3 0001  
                            calcCRC@crc 0067                               ?_Busy_eep 0001  
                            calcCRC@len 0065                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 001F                      __size_of_init_crc8 006A  
                         setFilter@eidh 0069                           setFilter@eidl 006A  
                         setFilter@sidh 0067                           setFilter@sidl 0068  
                      ??_doModeVscpNode 001F                              _nTimeStamp 00F2  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 5D42  
              ECANSetOperationMode@mode 001F                                 ?___wmul 0023  
                    __size_of_setFilter 024A                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 002F  
              __end_of_checkCANBusState 6A8E                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 5B62                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0021                           putsUSART@data 0020  
                  _readRegisterExtended 4EA8                                 ?_memcpy 001F  
                               _ECANCON 000F77                                 ?_memset 001F  
                         ??_WriteTimer0 0021                           ??_WriteTimer3 0021  
                      WriteTimer3@timer 0021                          ??__RegsToCANID 0005  
                         ??_Write_b_eep 0022                   sendVSCPFrame@priority 0093  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 001F  
                               ?_strchr 001F                                 ?_strcpy 001F  
                               ?_strlen 001F                                 ?_strtok 0064  
                               ?_strspn 0060                              _cntRxBytes 00CE  
                            _cntTxBytes 00D6                                 i1l11210 0490  
                               i1l11202 0434                                 i1l11300 0710  
                               i1l11220 04CE                                 i1l11212 049C  
                               i1l11204 043C                                 i1l11142 3D34  
                               i1l11054 5A64                                 i1l11302 0748  
                               i1l11222 04DA                                 i1l11214 04A8  
                               i1l11206 0442                                 i1l11152 3D54  
                               i1l11304 074C                                 i1l11312 075A  
                               i1l11240 053A                                 i1l11232 0510  
                               i1l11224 04EA                                 i1l11216 04BA  
                               i1l11208 047E                                 i1l11170 3DA0  
                               i1l11090 3C80                                 i1l11074 3C40  
                               i1l11306 074E                                 i1l11250 056A  
                               i1l11234 051C                                 i1l11226 04F2  
                               i1l11218 04CA                                 i1l11084 3C6A  
                               i1l11092 3C8A                                 i1l11260 05B0  
                               i1l11252 0574                                 i1l11244 054C  
                               i1l11228 04FE                                 i1l11270 05D2  
                               i1l11262 05B2                                 i1l11254 0584  
                               i1l11246 0558                                 i1l11238 052E  
                               i1l10800 6182                                 i1l11192 3E00  
                               i1l11280 0614                                 i1l11272 05E0  
                               i1l11256 0596                                 i1l11264 05B4  
                               i1l10810 61B0                                 i1l10802 618C  
                               i1l11178 3DCC                                 i1l11186 3DEA  
                               i1l11098 3C8E                                 i1l11290 067C  
                               i1l11282 061C                                 i1l11274 05E6  
                               i1l11266 05BC                                 i1l11258 059E  
                    __size_of_printGUID 00EA                                 i1l10812 61B6  
                               i1l10804 6196                                 i1l11292 067E  
                               i1l11284 0624                                 i1l11268 05CA  
                               i1l11276 05EA                                 i1l10806 61A0  
                               i1l10830 4AC2                                 i1l11294 06C4  
                               i1l11286 0640                                 i1l11278 05F2  
                               i1l10808 61AA                                 i1l10816 61C2  
                               i1l11296 06C8                                 i1l11288 0648  
                   ?_sendVSCPDriverNack 0001                                 i1l11298 070C  
                               i1l10798 617A                              _fifo_write 4938  
                      ??_changeBaudrate 0022                      __size_of_printHelp 0180  
                    __size_of_printMode 0072                   sendVSCPFrame@vscptype 0091  
                 __size_of_fifo_getFree 0096                 doModeVerbose@value_1351 02BA  
               doModeVerbose@value_1375 02B2                       sendCANFrame@pdata 008D  
                            _made_table 0028                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 6174                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0054      __end_of_sendVSCPDriverCommandReply 533E  
            _sendVSCPDriverCommandReply 5272                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 4C96  
      __size_of_receiveVSCPModeCanalMsg 00E6                  __size_of_doModeVerbose 16D0  
                  sendEscapedUartData@c 0065                     __size_of_ReadTimer3 0012  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 001F        __end_of_sendVSCPDriverErrorFrame 573C  
        __size_of_receiveSendEventCANAL 01E6           __end_of_receiveSendEventCANAL 400C  
                  ??_sendVSCPDriverNack 0028              printFirmwareVersion@wrkbuf 006F  
        __size_of_receiveSendEventSLCAN 017E                         _ECANSendMessage 4696  
         __end_of_receiveSendEventSLCAN 4508                                 __Hparam 0000  
                     __end_of_findNodes 4938                                 __Lparam 0000  
                     __end_of_fifo_init 67A2                       __end_of_fifo_read 5404  
                         ??_getCANFrame 0025                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00AF                    __end_of_readRegister 54F2  
                             ?_printMDF 0001                                 _bSilent 0102  
             receiveVSCPModeCanalMsg@id 00AB                           ??_doModeSLCAN 008F  
                               ___lldiv 60FE                         __size_of___wmul 003C  
                               _calcCRC 69BE                         getCANFrame@pdlc 0068  
                               ___llmod 6390                                 ___lwdiv 6612  
                             _FIFOEMPTY 007BA7                                 ___lwmod 682C  
                 ?_readRegisterExtended 00AF             printNodeFirmwareVersion@buf 00B9  
                  __end_of_init_app_ram 36FE                            _fifo_getFree 596E  
                          init_crc8@crc 0023                                 __pcinit 632E  
                       __size_of_memcpy 0042                         __size_of_memset 002C  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                   __size_of_OpenTimer3 0028                               ?_strnicmp 0060  
                               __ptext0 401A                                 __ptext1 6B92  
                               __ptext2 2770                                 __ptext3 5CA6  
                               __ptext4 67B0                 receiveSendEventCANAL@id 007D  
                               __ptext5 438A                                 __ptext6 50A6  
                               __ptext7 2B4A                                 __ptext8 5686  
                               __ptext9 5272                                 crc8@crc 0060  
         printNodeFirmwareVersion@value 00BC                       ??_printStatistics 0028  
                             _T0CONbits 000FD5                         __size_of_strcat 0056  
                       __size_of_strchr 005C                         __size_of_strcpy 002E  
                       __size_of_strlen 003C                       __end_of_hexpowers 6E64  
                       __size_of_strtok 0096                         __size_of_strspn 0046  
                               _dpowers 6E1C                       __end_of_init_crc8 62C6  
                               _isdigit 6A8E          printNodeFirmwareVersion@nodeid 00B8  
                             _T3CONbits 000FB1                     __end_of_WriteTimer0 6B72  
                   __end_of_WriteTimer3 6B4E                          _nibbleFromChar 67B0  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 69BE  
                               _sprintf 2028        __end_of_sendVSCPModeCapabilities 580C  
                     __end_of_setFilter 39F0                                 _strichr 67EE  
                        doModeVerbose@c 02C3                          doModeVerbose@i 02B9  
                        doModeVerbose@p 02CA                                 _strcspn 66A2  
                               _toupper 6B00                             ?_doModeVscp 0001  
                               _stristr 6084                    __size_of_printBinary 0046  
                  end_of_initialization 6386                       __end_of_octpowers 6E1C  
                  __size_of_printErrors 02B2                                 memcpy@d 0060  
                               memcpy@n 0023                                 memcpy@s 0062  
                ??_printFirmwareVersion 0028                          doModeVscp@mask 00B5  
                               itoa@buf 0069                                 memset@c 0021  
                             i1u1301_25 3C48                               i1u1301_27 3C4A  
                               memset@n 0023                                 itoa@val 006B  
                               memset@p 0025                               i1u1330_20 04DA  
                             i1u1330_21 04D8                           __Lmediumconst 6DEC  
                             i1u1331_20 04EA                               i1u1331_21 04E8  
                             i1u1340_20 0574                               i1u1332_20 04FE  
                             i1u1340_21 0572                               i1u1332_21 04FC  
                             i1u1260_25 4A8A                               i1u1341_20 0584  
                             i1u1333_20 050E                               i1u1341_21 0582  
                             i1u1333_21 050C                    __end_of_sendCANFrame 6952  
                             i1u1261_25 4A9A                               i1u1350_20 061C  
                             i1u1342_20 0596                               i1u1334_20 051C  
                             i1u1350_21 061A                               i1u1342_21 0594  
                             i1u1334_21 051A                               i1u1262_25 4AC6  
                             i1u1351_20 0624                               i1u1343_20 059E  
                             i1u1335_20 052C                               i1u1327_20 043C  
                             i1u1351_21 0622                               i1u1343_21 059C  
                             i1u1335_21 052A                               i1u1327_21 043A  
                             i1u1352_20 0640                               i1u1344_20 05BC  
                             i1u1336_20 053A                               i1u1328_20 047E  
                             i1u1352_21 063E                               i1u1344_21 05BA  
                             i1u1336_21 0538                               i1u1328_21 047C  
                             i1u1353_20 0648                               i1u1345_20 05CA  
                             i1u1337_20 054A                               i1u1329_20 049C  
                             i1u1353_21 0646                               i1u1345_21 05C8  
                             i1u1337_21 0548                               i1u1329_21 049A  
                             i1u1354_20 067C                               i1u1346_20 05D2  
                             i1u1338_20 0558                               i1u1354_21 067A  
                             i1u1346_21 05D0                               i1u1338_21 0556  
                             i1u1355_20 06C4                               i1u1347_20 05E0  
                             i1u1339_20 0568                               i1u1355_21 06C2  
                             i1u1347_21 05DE                               i1u1339_21 0566  
                             i1u1356_20 070C                               i1u1348_20 05F2  
                             i1u1356_21 070A                               i1u1348_21 05F0  
                             i1u1357_20 0748                               i1u1349_20 0614  
                             i1u1357_21 0746                               i1u1349_21 0612  
                             i1u1358_20 0758                               i1u1358_21 0756  
                             i1u1297_25 5A3C                     _can_receiveOverruns 00C6  
               receiveSendEventSLCAN@id 007D                       __end_of_printGUID 5092  
                       ___lldiv@divisor 0023                       __end_of_printHelp 4696  
   receiveSendMultiEventCANAL@timestamp 0079                         ___lldiv@counter 0060  
                     __end_of_printMode 625C                       ECANSendMessage@id 0063  
                     ECANSendMessage@pb 006C            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 0028                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 6612                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 077E                                 utoa@buf 0060  
     __size_of_printNodeFirmwareVersion 00CA                                 utoa@val 0062  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 580C  
                               strlen@s 001F                              _sequencyno 00F3  
                            _timekeeper 00DE                               _RXM0EXIDM 0078CB  
                               strspn@i 0025                              ??_strnicmp 0023  
                             _PORTCbits 000F82                     __end_of_getCANFrame 595E  
                            findNodes@i 00C3                          i1_fifo_getFree 5A16  
                __end_of_nibbleFromChar 67EE                     __end_of_doModeSLCAN 2B30  
                           ?_fifo_write 0001                              fifo_init@f 001F  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 001F  
                            fifo_read@i 0066                              fifo_read@p 0064  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00AF       sendVSCPDriverCommandReply@cmdCode 0066  
                   __size_of_WriteUSART 0014             sendVSCPModeCapabilities@crc 0066  
               __end_of_ECANSendMessage 4804                    _uart_receiveOverruns 00E6  
              _receivePrintEventVerbose 2EF8                              _vscpNodeId 01AF  
                         ?__CANIDToRegs 0021                    __end_of__RegsToCANID 4B28  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02BF                       doModeVerbose@preg 028C  
                        _init_crc8$2208 001F                  ??_readRegisterExtended 00B6  
                        ?_doModeVerbose 0001                            ??_ReadTimer3 0021  
                          ??_Read_b_eep 0021                          ?_sendVSCPFrame 008F  
                __end_ofi1_fifo_getFree 5AAC                          __end_of___wmul 68E2  
                   __size_of_doModeVscp 0316                             _WriteTimer0 6B60  
                           _WriteTimer3 6B3C                             _Write_b_eep 698A  
                 doModeVerbose@baudcode 02B4                          __end_of_memcpy 6770  
                        __end_of_memset 6A48       __size_of_sendVSCPDriverErrorFrame 00B6  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 65BE                          __end_of_strchr 650C  
                        __end_of_strcpy 6A1C                          __end_of_strlen 68A6  
              doModeVerbose@filter_type 0295                          __end_of_strtok 5E72  
                        __end_of_strspn 672E                             __end_ofPL10 374A  
                           __end_ofPL20 3A06                             __end_ofPL12 1EE4  
                           __end_ofPL30 5DDC                             __end_ofPL22 1F00  
                           __end_ofPL14 2EA6                             __end_ofPL40 4C54  
                           __end_ofPL32 4EA8                             __end_ofPL24 4A64  
                           __end_ofPL16 26C2                             __end_ofPL50 2B3E  
                           __end_ofPL42 376A                             __end_ofPL34 26F8  
                           __end_ofPL26 2ED0                             __end_ofPL18 3BF8  
                           __end_ofPL60 2712                             __end_ofPL52 5420  
                           __end_ofPL44 3788                             __end_ofPL36 1F10  
                           __end_ofPL28 26D2                             __end_ofPL70 1F84  
                           __end_ofPL62 5C06                             __end_ofPL54 1F52  
                           __end_ofPL46 37A6                             __end_ofPL38 1F24  
                           __end_ofPL80 5F02                             __end_ofPL72 1F9C  
                           __end_ofPL64 596E                             __end_ofPL56 4B36  
                           __end_ofPL48 1F36                             __end_ofPL90 4B5C  
                           __end_ofPL82 2736                             __end_ofPL74 4C66  
                           __end_ofPL66 5B62                             __end_ofPL58 1F6C  
                           __end_ofPL92 518C                             __end_ofPL84 1FC6  
                           __end_ofPL76 2728                             __end_ofPL68 3C08  
                           __end_ofPL94 4C7A                             __end_ofPL86 274A  
                           __end_ofPL78 1FB2                             __end_ofPL96 50A6  
                           __end_ofPL88 4B48                             __end_ofPL98 4B70  
                   start_initialization 632E                               _ReadUSART 6ACA  
                       findNodes@nFound 00C0                   doModeVerbose@reg_1350 02B1  
                 doModeVerbose@filterno 02B8                 _receiveVSCPModeCanalMsg 518C  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 009B  
                          ??_OpenTimer0 001F                            ??_OpenTimer3 001F  
                  setFilter@bPersistent 0027                      __end_of_ReadTimer3 6B3C  
sendVSCPDriverCommandReply@cmdReplyCode 0067                               _Interrupt 0418  
                        ??__CANIDToRegs 0060              readRegisterExtended@nodeid 00BA  
                             _OpenUSART 650C                      __end_of_Read_b_eep 6B60  
                   sendVSCPFrame@nodeid 0092                         ___llmod@divisor 0069  
                 __size_of_readRegister 00D2                         ___llmod@counter 0027  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0012  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 01F6  
                        _findNodes$1711 00BE                __end_of__ECANPointBuffer 61EA  
                     __CANIDToRegs@type 0027                              init_crc8@i 0024  
                            init_crc8@j 0021                             _getCANFrame 58C2  
                              ??___wmul 0027                        setFilter@nFilter 0066  
     __size_of_sendVSCPModeCapabilities 00C2                       ?_hexStringToBytes 0023  
                           _doModeSLCAN 2770               ?_sendVSCPModeCapabilities 0001  
                     ?_checkCANBusState 0001              __end_of_ECANReceiveMessage 3E18  
                              ??_memcpy 0025                     readRegister@timeout 00B0  
                       ?i1_fifo_getFree 0001                                ??_memset 0025  
                 sendVSCPDriverNack@crc 0066                doModeVerbose@mask_nodeid 0299  
                 __end_ofi1_WriteTimer0 6B84                      ??_hexStringToBytes 0060  
                    ??_checkCANBusState 001F                                ??_strcat 0023  
                              ??_strchr 0023                                ??_strcpy 0023  
                              ??_strlen 0021                      __end_of_OpenTimer0 6ACA  
                    __end_of_OpenTimer3 6A70                                ??_strtok 0027  
                              ??_strspn 0025                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0028                              ?_ReadUSART 0001  
                         __pcstackBANK0 0060                           __pcstackBANK1 01B3  
                         __pcstackBANK2 0288                     __end_of__stringdata 7FFE  
                          _readRegister 5420                            _isdigit$3283 0020  
                 __size_of_sendCANFrame 0038             ?_sendVSCPDriverCommandReply 0066  
           sendVSCPDriverErrorFrame@crc 0067                        ?_ECANSendMessage 0063  
                     sendVSCPFrame@size 0094                            _init_app_ram 3508  
                            ?_Interrupt 0001                              ?_OpenUSART 001F  
                           sprintf@_val 0084                             sprintf@flag 0089  
                           sprintf@prec 0080                               __pnvBANK0 00FC  
                      _ledFunctionality 0032                doModeVerbose@nodeid_1348 02BD  
              doModeVerbose@nodeid_1374 02C2                            setFilter@val 0023  
                      ___lwdiv@dividend 001F                         ??_doModeVerbose 01B3  
         __size_of_ECANSetOperationMode 0018                         _printStatistics 41F2  
                          ??_WriteUSART 001F                         ??_sendVSCPFrame 0097  
                        _ECANInitialize 5F88                       _sendVSCPDriverAck 5ABE  
                         __pmediumconst 6DEC                                ?___lldiv 001F  
                              ?_calcCRC 0063                                ?___llmod 0065  
                             _findNodes 4804                                ?___lwdiv 001F  
                              ?___lwmod 001F                               _fifo_init 6770  
                             _fifo_read 534C                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 008C                             __pintcodelo 0418  
                          _sendCANFrame 691A                       WriteTimer0@timer0 001F  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 008F                     ??_sendVSCPDriverAck 0028  
                     __size_of_strnicmp 0068                         printGUID@nodeid 00B8  
                     WriteTimer3@timer3 001F                     _sendEscapedUartData 63F2  
                             _hexpowers 6E44                        ___lwdiv@quotient 0024  
                             _init_crc8 625C                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0290                                ?_sprintf 006D  
                              ?_strichr 0020                             _cntRxFrames 00D2  
                          ??_doModeVscp 00B0                                ?_strcspn 0060  
                              ?_toupper 0001                                ?_stristr 0066  
                    __end_of_WriteUSART 6B2A                          __size_of_ultoa 00D2  
                           _cntTxFrames 00DA                         _can_inputBuffer 0400  
                        ___wmul@product 0060                  sendVSCPFrame@vscpclass 008F  
                             _setFilter 37A6                             strnicmp@len 0064  
                             _octpowers 6DEC                                _PIE1bits 000F9D  
                              _PIE2bits 000FA0             __size_of_sendVSCPDriverNack 0096  
                __end_of_ECANInitialize 6008               __end_of_sendVSCPDriverAck 5B54  
                              i1u700_25 4958                                i1u701_25 4968  
                              i1u703_25 49FE                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 3E26                                _PIR2bits 000FA1  
                      ECANSendMessage@i 0085                        ECANSendMessage@j 0080  
                  ?_sendEscapedUartData 0063                   _receiveSendEventSLCAN 438A  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007D  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0067  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 0065                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 4FA8  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00BD                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 4516                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 61EA  
                            ?_fifo_init 001F                              ?_fifo_read 001F  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 2E60  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 4C40  
                             _putsUSART 65BE                             __stringdata 6E64  
                     ___wmul@multiplier 0023                            __RegsToCANID 4A64  
                             _vscpClass 01AD                 ??_writeRegisterExtended 00B6  
                       Write_b_eep@badd 001F                         Write_b_eep@bdat 0021  
                          ??_fifo_write 0009                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 008B                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0070                           ??_printBinary 0020  
                      doModeVerbose@reg 02C0                           ??_printErrors 0028  
                            ?_init_crc8 0001                      _serial_inputBuffer 0200  
                             _rwtimeout 0104               writeRegisterExtended@page 00AF  
  __end_of_receiveVSCPModeMultiCanalMsg 6B96   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 6B94                             ??_Interrupt 0014  
               __end_of_printStatistics 438A                             ??_OpenUSART 0021  
          writeRegisterExtended@timeout 00B2                                _Busy_eep 6B8C  
               __size_of_changeBaudrate 007C                __size_of_init_app_eeprom 00CA  
                            ?_setFilter 0023                         OpenUSART@config 0021  
                        findNodes@value 00C1            __end_of_vscp_restoreDefaults 6B8C  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 007A  
       __end_of_receiveVSCPModeCanalMsg 5272                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 000E  
                 ??_sendEscapedUartData 0028                                __Lrparam 0000  
                      __CANIDToRegs@val 0023                      __end_of_fifo_write 4A36  
                      __CANIDToRegs@ptr 0021                        doModeVscp@filter 00B4  
           receiveVSCPModeCanalMsg@data 00A3                              ?_printGUID 0001  
                           doModeVscp@c 00B6                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 001F  
                      ??_nibbleFromChar 001F                        __size_of___lldiv 0076  
                      __size_of_calcCRC 0030                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 001F                            ?_WriteTimer3 001F  
                      getCANFrame@pdata 006A                            ?_Write_b_eep 001F  
                            ?_putsUSART 0020                         fifo_read@nbytes 0023  
                            sprintf@idx 0078                   hexStringToBytes@inhex 0026  
                              calcCRC@j 0066                              strcat@from 0021  
                              calcCRC@p 0063                        __size_of_isdigit 001E  
                       ___lwdiv@divisor 0021                         ___lwdiv@counter 0023  
                              __ptext10 574A                                __ptext11 6B94  
                              __ptext20 68E2                                __ptext12 518C  
                              __ptext21 625C                                __ptext13 672E  
                              __ptext30 4FA8                                __ptext22 077E  
                              __ptext14 5ABE                                __ptext31 54F2  
                              __ptext23 6008                                __ptext15 5B62  
                              __ptext40 3256                                __ptext32 6568  
                              __ptext24 4C96                                __ptext16 69BE  
                              __ptext41 41F2                                __ptext33 5420  
                              __ptext25 665C                                __ptext17 3E26  
                              __ptext50 6B00                                __ptext42 4DA0  
                              __ptext34 580C                                __ptext26 4EA8  
                              __ptext18 3A06                                __ptext51 686A  
                              __ptext43 5DDC                                __ptext35 691A  
                              __ptext27 69EE                                __ptext19 63F2  
                              __ptext60 60FE                                __ptext52 2EF8  
                              __ptext44 66A2                                __ptext36 4696  
                              __ptext28 4804                                __ptext61 6A8E  
                              __ptext53 6B2A                                __ptext45 66E8  
                              __ptext37 6A70                                __ptext29 5D42  
                              __ptext70 65BE                                __ptext62 5E72  
                              __ptext54 5F02                                __ptext46 64B0  
                              __ptext38 6A1C                                __ptext71 6B16  
                              __ptext63 6952                                __ptext55 58C2  
                              __ptext47 6084                                __ptext39 4516  
                              __ptext80 37A6                                __ptext72 6452  
                              __ptext64 5C06                                __ptext56 534C  
                              __ptext48 67EE                                __ptext81 698A  
                              __ptext73 5F88                                __ptext65 682C  
                              __ptext57 2028                                __ptext49 62C6  
                              __ptext90 5A16                                __ptext82 6B8C  
                              __ptext74 6B3C                                __ptext66 6612  
                              __ptext58 68A6                                __ptext91 3C1A  
                              __ptext83 6AE8                                __ptext75 6A48  
                              __ptext67 6B84                                __ptext59 6390  
                              __ptext92 4A64                                __ptext84 6B4E  
                              __ptext76 6AAC                                __ptext68 55BC  
                              __ptext93 6174                                __ptext85 6B60  
                              __ptext77 650C                                __ptext69 61EA  
                              __ptext94 4938                                __ptext86 6770  
                              __ptext78 3508                                __ptext95 6ACA  
                              __ptext87 596E                                __ptext79 4B82  
                              __ptext89 6B72                receiveSendEventCANAL@dlc 0081  
              receiveSendEventCANAL@crc 0082                          printMDF@nodeid 00B8  
                         ?_getVSCPFrame 006C                              strichr@chr 0022  
                      __size_of_sprintf 067C                              strichr@ptr 0020  
                      __size_of_strichr 003E                        __size_of_strcspn 0046  
                      __size_of_toupper 0016                        __size_of_stristr 007A  
                            strcpy@from 0021                          printGUID@value 00BC  
                   __end_of_printBinary 66A2                           __size_of_crc8 0038  
                         __size_of_atoi 00FA                           __size_of_main 01D8  
                         __size_of_init 005E                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 3508  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0060                              strnicmp@s2 0062  
                         init_app_ram@i 0084              __size_of_sendVSCPDriverAck 0096  
        receiveSendMultiEventCANAL@data 0070                  ?_receiveSendEventSLCAN 0001  
                      ??i1_fifo_getFree 0003                _printNodeFirmwareVersion 54F2  
                   ECANSendMessage@data 0067                ECANSendMessage@tempBSEL0 0081  
                              _printMDF 5D42                               printMDF@i 00BC  
                             printMDF@p 00BA                            ?_getCANFrame 0068  
                   ECANSendMessage@mode 007E                     ECANSendMessage@temp 0084  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 006C  
                              atoi@sign 0066                             ??_findNodes 0028  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0025  
                           ??_fifo_read 0060                                _vscpData 01A5  
         __size_of_readRegisterExtended 0100                                main@argc 01C7  
                              main@argv 01C9                                _vscpSize 01B1  
                    ??__ECANPointBuffer 0004                                _vscpType 01B2  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 0066  
                       doModeVerbose@id 0288                         doModeVerbose@rv 02AF  
                              _strnicmp 62C6                        init_app_eeprom@i 0023  
           writeRegisterExtended@nodeid 00BA                           Interrupt@fail 001E  
                       _serialInputFifo 00F4                           findNodes@bDot 00C2  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 001F  
                   ECANReceiveMessage@i 000F                                memcpy@d1 001F  
                              memcpy@s1 0021               receivePrintEventVerbose@i 00A2  
                              itoa@base 006D                                isdigit@c 0021  
                    _ECANReceiveMessage 3C1A                                memset@p1 001F  
                           ??_init_crc8 001F                               ultoa@base 0073  
                        ??_getVSCPFrame 0078               __size_of_hexStringToBytes 009C  
             __size_of_checkCANBusState 001E                         sendVSCPFrame@id 00AB  
                              intlevel1 0000                               sprintf@ap 007F  
                             sprintf@sp 006D                    hexStringToBytes@size 0025  
                             strchr@chr 0021                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 0081                        ___lwmod@dividend 001F  
                             strchr@ptr 001F                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 001F                             ??_setFilter 0060  
                         printMDF@value 00B9     __size_of_receiveSendMultiEventCANAL 01E2  
                         fifo_getFree@f 001F                               strcspn@s1 0060  
                             strcspn@s2 0062      receiveSendMultiEventCANAL@msgcount 0078  
               ECANSendMessage@msgFlags 006A                              _OSCCONbits 000FD3  
                             strnicmp@r 0025                               stristr@s1 0066  
                             stristr@s2 0068                      ECANSendMessage@ptr 0086  
                     ??_init_app_eeprom 0023                   __size_of__CANIDToRegs 00BE  
                           ??_printGUID 0028                             ??_printHelp 0024  
                           ??_printMode 0024                _sendVSCPDriverErrorFrame 5686  
                         ?_fifo_getFree 001F                  ECANSendMessage@dataLen 0069  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000C  
                           ??_putsUSART 0022                                utoa@base 0064  
                              ultoa@buf 006D                                ultoa@val 006F  
                         fifo_init@size 0023                                sprintf@c 0088  
                              sprintf@f 006F                     hexStringToBytes@buf 0023  
                              strcat@cp 0023                     hexStringToBytes@len 0063  
                        _doModeVscpNode 6B92                                strcat@to 001F  
      __end_of_receivePrintEventVerbose 3256                  ECANSendMessage@buffers 007F  
                      ___lldiv@quotient 0061                         ___lwmod@divisor 0021  
          __end_of_ECANSetOperationMode 6B00                    _vscp_restoreDefaults 6B84  
                          printGUID@buf 00B9                                strcpy@cp 0023  
                              strlen@cp 0021                                strcpy@to 001F  
                       ___lwmod@counter 0023                                strcspn@i 0025  
                              toupper@c 001F                             _printBinary 665C  
                              strtok@s1 0064                                strtok@s2 0066  
                              strspn@s1 0060                                strspn@s2 0062  
                            _RXM1EXIDEN 0078EB                                strtok@sp 002C  
                ECANSendMessage@tempPtr 0082                             _printErrors 3256  
                          fifo_init@buf 0021                            fifo_read@buf 0021  
         sendVSCPDriverCommandReply@crc 0068                          _changeBaudrate 6008  
                          __CANIDToRegs 4B82                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002E               readRegisterExtended@value 00B4  
              _sendVSCPModeCapabilities 574A          receiveSendEventCANAL@timestamp 0079  
              __size_of_ECANSendMessage 016E  
