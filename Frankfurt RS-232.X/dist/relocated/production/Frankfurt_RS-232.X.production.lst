

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Tue Sep 29 14:45:37 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	text81,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	text89,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   110                           	psect	pa_nodes,global,class=CODE,delta=1
   111  0000                     tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           prodh	equ	0xFF4
   116                           prodl	equ	0xFF3
   117                           intcon	equ	0xFF2
   118                           indf0	equ	0xFEF
   119                           fsr0h	equ	0xFEA
   120                           fsr0l	equ	0xFE9
   121                           wreg	equ	0xFE8
   122                           indf1	equ	0xFE7
   123                           postinc1	equ	0xFE6
   124                           postdec1	equ	0xFE5
   125                           fsr1h	equ	0xFE2
   126                           fsr1l	equ	0xFE1
   127                           indf2	equ	0xFDF
   128                           postinc2	equ	0xFDE
   129                           postdec2	equ	0xFDD
   130                           plusw2	equ	0xFDB
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	mediumconst
   136  006FB4                     __pmediumconst:
   137                           	opt stack 0
   138  006FB4                     _octpowers:
   139                           	opt stack 0
   140  006FB4  0001               	dw	1
   141  006FB6  0000               	dw	0
   142  006FB8  0008               	dw	8
   143  006FBA  0000               	dw	0
   144  006FBC  0040               	dw	64
   145  006FBE  0000               	dw	0
   146  006FC0  0200               	dw	512
   147  006FC2  0000               	dw	0
   148  006FC4  1000               	dw	4096
   149  006FC6  0000               	dw	0
   150  006FC8  8000               	dw	32768
   151  006FCA  0000               	dw	0
   152  006FCC  0000               	dw	0
   153  006FCE  0004               	dw	4
   154  006FD0  0000               	dw	0
   155  006FD2  0020               	dw	32
   156  006FD4  0000               	dw	0
   157  006FD6  0100               	dw	256
   158  006FD8  0000               	dw	0
   159  006FDA  0800               	dw	2048
   160  006FDC  0000               	dw	0
   161  006FDE  4000               	dw	16384
   162  006FE0  0000               	dw	0
   163  006FE2  0000               	dw	0
   164  006FE4                     __end_of_octpowers:
   165                           	opt stack 0
   166  006FE4                     _dpowers:
   167                           	opt stack 0
   168  006FE4  0001               	dw	1
   169  006FE6  0000               	dw	0
   170  006FE8  000A               	dw	10
   171  006FEA  0000               	dw	0
   172  006FEC  0064               	dw	100
   173  006FEE  0000               	dw	0
   174  006FF0  03E8               	dw	1000
   175  006FF2  0000               	dw	0
   176  006FF4  2710               	dw	10000
   177  006FF6  0000               	dw	0
   178  006FF8  86A0               	dw	34464
   179  006FFA  0001               	dw	1
   180  006FFC  4240               	dw	16960
   181  006FFE  000F               	dw	15
   182  007000  9680               	dw	38528
   183  007002  0098               	dw	152
   184  007004  E100               	dw	57600
   185  007006  05F5               	dw	1525
   186  007008  CA00               	dw	51712
   187  00700A  3B9A               	dw	15258
   188  00700C                     __end_of_dpowers:
   189                           	opt stack 0
   190  00700C                     _hexpowers:
   191                           	opt stack 0
   192  00700C  0001               	dw	1
   193  00700E  0000               	dw	0
   194  007010  0010               	dw	16
   195  007012  0000               	dw	0
   196  007014  0100               	dw	256
   197  007016  0000               	dw	0
   198  007018  1000               	dw	4096
   199  00701A  0000               	dw	0
   200  00701C  0000               	dw	0
   201  00701E  0001               	dw	1
   202  007020  0000               	dw	0
   203  007022  0010               	dw	16
   204  007024  0000               	dw	0
   205  007026  0100               	dw	256
   206  007028  0000               	dw	0
   207  00702A  1000               	dw	4096
   208  00702C                     __end_of_hexpowers:
   209                           	opt stack 0
   210  0000                     _BRGCON1	set	3952
   211  0000                     _BRGCON2	set	3953
   212  0000                     _BRGCON3	set	3954
   213  0000                     _BSEL0	set	3576
   214  0000                     _CANCON	set	3951
   215  0000                     _CIOCON	set	3955
   216  0000                     _COMSTATbits	set	3956
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _OSCCONbits	set	4051
   227  0000                     _OSCTUNEbits	set	3995
   228  0000                     _PIE1bits	set	3997
   229  0000                     _PIR1bits	set	3998
   230  0000                     _RCREG	set	4014
   231  0000                     _RCSTA	set	4011
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _RXB1CONbits	set	3920
   234  0000                     _RXERRCNT	set	3957
   235  0000                     _RXF0EIDH	set	3842
   236  0000                     _RXF0EIDL	set	3843
   237  0000                     _RXF0SIDH	set	3840
   238  0000                     _RXF0SIDL	set	3841
   239  0000                     _RXF10EIDH	set	3446
   240  0000                     _RXF10EIDL	set	3447
   241  0000                     _RXF10SIDH	set	3444
   242  0000                     _RXF10SIDL	set	3445
   243  0000                     _RXF11EIDH	set	3450
   244  0000                     _RXF11EIDL	set	3451
   245  0000                     _RXF11SIDH	set	3448
   246  0000                     _RXF11SIDL	set	3449
   247  0000                     _RXF12EIDH	set	3458
   248  0000                     _RXF12EIDL	set	3459
   249  0000                     _RXF12SIDH	set	3456
   250  0000                     _RXF12SIDL	set	3457
   251  0000                     _RXF13EIDH	set	3462
   252  0000                     _RXF13EIDL	set	3463
   253  0000                     _RXF13SIDH	set	3460
   254  0000                     _RXF13SIDL	set	3461
   255  0000                     _RXF14EIDH	set	3466
   256  0000                     _RXF14EIDL	set	3467
   257  0000                     _RXF14SIDH	set	3464
   258  0000                     _RXF14SIDL	set	3465
   259  0000                     _RXF15EIDH	set	3474
   260  0000                     _RXF15EIDL	set	3475
   261  0000                     _RXF15SIDH	set	3472
   262  0000                     _RXF15SIDL	set	3473
   263  0000                     _RXF1EIDH	set	3846
   264  0000                     _RXF1EIDL	set	3847
   265  0000                     _RXF1SIDH	set	3844
   266  0000                     _RXF1SIDL	set	3845
   267  0000                     _RXF2EIDH	set	3850
   268  0000                     _RXF2EIDL	set	3851
   269  0000                     _RXF2SIDH	set	3848
   270  0000                     _RXF2SIDL	set	3849
   271  0000                     _RXF3EIDH	set	3854
   272  0000                     _RXF3EIDL	set	3855
   273  0000                     _RXF3SIDH	set	3852
   274  0000                     _RXF3SIDL	set	3853
   275  0000                     _RXF4EIDH	set	3858
   276  0000                     _RXF4EIDL	set	3859
   277  0000                     _RXF4SIDH	set	3856
   278  0000                     _RXF4SIDL	set	3857
   279  0000                     _RXF5EIDH	set	3862
   280  0000                     _RXF5EIDL	set	3863
   281  0000                     _RXF5SIDH	set	3860
   282  0000                     _RXF5SIDL	set	3861
   283  0000                     _RXF6EIDH	set	3426
   284  0000                     _RXF6EIDL	set	3427
   285  0000                     _RXF6SIDH	set	3424
   286  0000                     _RXF6SIDL	set	3425
   287  0000                     _RXF7EIDH	set	3430
   288  0000                     _RXF7EIDL	set	3431
   289  0000                     _RXF7SIDH	set	3428
   290  0000                     _RXF7SIDL	set	3429
   291  0000                     _RXF8EIDH	set	3434
   292  0000                     _RXF8EIDL	set	3435
   293  0000                     _RXF8SIDH	set	3432
   294  0000                     _RXF8SIDL	set	3433
   295  0000                     _RXF9EIDH	set	3442
   296  0000                     _RXF9EIDL	set	3443
   297  0000                     _RXF9SIDH	set	3440
   298  0000                     _RXF9SIDL	set	3441
   299  0000                     _RXFBCON0	set	3552
   300  0000                     _RXFBCON1	set	3553
   301  0000                     _RXFBCON2	set	3554
   302  0000                     _RXFBCON3	set	3555
   303  0000                     _RXFBCON4	set	3556
   304  0000                     _RXFBCON5	set	3557
   305  0000                     _RXFBCON6	set	3558
   306  0000                     _RXFBCON7	set	3559
   307  0000                     _RXFCON0	set	3540
   308  0000                     _RXFCON1	set	3541
   309  0000                     _RXM0EIDH	set	3866
   310  0000                     _RXM0EIDL	set	3867
   311  0000                     _RXM0SIDL	set	3865
   312  0000                     _RXM1EIDH	set	3870
   313  0000                     _RXM1EIDL	set	3871
   314  0000                     _RXM1SIDL	set	3869
   315  0000                     _SPBRG	set	4015
   316  0000                     _SPBRGH	set	4016
   317  0000                     _T0CON	set	4053
   318  0000                     _T0CONbits	set	4053
   319  0000                     _TMR0H	set	4055
   320  0000                     _TMR0L	set	4054
   321  0000                     _TRISBbits	set	3987
   322  0000                     _TRISCbits	set	3988
   323  0000                     _TXERRCNT	set	3958
   324  0000                     _TXREG	set	4013
   325  0000                     _TXSTA	set	4012
   326  0000                     _TXSTAbits	set	4012
   327  0000                     _B0RXFUL	set	28935
   328  0000                     _B0TXEN	set	28610
   329  0000                     _B1RXFUL	set	29063
   330  0000                     _B1TXEN	set	28611
   331  0000                     _B2RXFUL	set	29191
   332  0000                     _B2TXEN	set	28612
   333  0000                     _B3RXFUL	set	29319
   334  0000                     _B3TXEN	set	28613
   335  0000                     _B4RXFUL	set	29447
   336  0000                     _B4TXEN	set	28614
   337  0000                     _B5RXFUL	set	29575
   338  0000                     _B5TXEN	set	28615
   339  0000                     _ERRIE	set	32029
   340  0000                     _FIFOEMPTY	set	31655
   341  0000                     _IRXIF	set	32039
   342  0000                     _LATC1	set	31833
   343  0000                     _MDSEL0	set	31678
   344  0000                     _MDSEL1	set	31679
   345  0000                     _PEIE	set	32662
   346  0000                     _RCIE	set	31981
   347  0000                     _RCIF	set	31989
   348  0000                     _RCIP	set	31997
   349  0000                     _RXB0FILHIT0	set	31488
   350  0000                     _RXB0FUL	set	31495
   351  0000                     _RXB0IF	set	32032
   352  0000                     _RXB0OVFL	set	31655
   353  0000                     _RXB1IF	set	32033
   354  0000                     _RXB1OVFL	set	31654
   355  0000                     _RXBnIE	set	32025
   356  0000                     _RXBnIF	set	32033
   357  0000                     _RXM0EXIDM	set	30923
   358  0000                     _RXM1EXIDEN	set	30955
   359  0000                     _B0CON	set	3616
   360  0000                     _B1CON	set	3632
   361  0000                     _B2CON	set	3648
   362  0000                     _B3CON	set	3664
   363  0000                     _B4CON	set	3680
   364  0000                     _B5CON	set	3696
   365  0000                     _RXB0CON	set	3936
   366  0000                     _RXB1CON	set	3920
   367  0000                     _RXM0SIDH	set	3864
   368  0000                     _RXM1SIDH	set	3868
   369  0000                     _TXB0CON	set	3904
   370  0000                     _TXB1CON	set	3888
   371  0000                     _TXB2CON	set	3872
   372  00702C                     __stringdata:
   373                           	opt stack 0
   374  00702C                     STR_227:
   375  00702C  20                 	db	32
   376  00702D  20                 	db	32
   377  00702E  20                 	db	32
   378  00702F  20                 	db	32
   379  007030  20                 	db	32
   380  007031  20                 	db	32
   381  007032  20                 	db	32
   382  007033  20                 	db	32
   383  007034  20                 	db	32
   384  007035  46                 	db	70	;'F'
   385  007036  6F                 	db	111	;'o'
   386  007037  72                 	db	114	;'r'
   387  007038  6D                 	db	109	;'m'
   388  007039  61                 	db	97	;'a'
   389  00703A  74                 	db	116	;'t'
   390  00703B  3A                 	db	58	;':'
   391  00703C  20                 	db	32
   392  00703D  66                 	db	102	;'f'
   393  00703E  69                 	db	105	;'i'
   394  00703F  6C                 	db	108	;'l'
   395  007040  74                 	db	116	;'t'
   396  007041  65                 	db	101	;'e'
   397  007042  72                 	db	114	;'r'
   398  007043  20                 	db	32
   399  007044  66                 	db	102	;'f'
   400  007045  69                 	db	105	;'i'
   401  007046  6C                 	db	108	;'l'
   402  007047  74                 	db	116	;'t'
   403  007048  65                 	db	101	;'e'
   404  007049  72                 	db	114	;'r'
   405  00704A  6E                 	db	110	;'n'
   406  00704B  6F                 	db	111	;'o'
   407  00704C  2C                 	db	44
   408  00704D  70                 	db	112	;'p'
   409  00704E  72                 	db	114	;'r'
   410  00704F  69                 	db	105	;'i'
   411  007050  6F                 	db	111	;'o'
   412  007051  2C                 	db	44
   413  007052  63                 	db	99	;'c'
   414  007053  6C                 	db	108	;'l'
   415  007054  61                 	db	97	;'a'
   416  007055  73                 	db	115	;'s'
   417  007056  73                 	db	115	;'s'
   418  007057  2C                 	db	44
   419  007058  74                 	db	116	;'t'
   420  007059  79                 	db	121	;'y'
   421  00705A  70                 	db	112	;'p'
   422  00705B  65                 	db	101	;'e'
   423  00705C  2C                 	db	44
   424  00705D  6E                 	db	110	;'n'
   425  00705E  6F                 	db	111	;'o'
   426  00705F  64                 	db	100	;'d'
   427  007060  65                 	db	101	;'e'
   428  007061  69                 	db	105	;'i'
   429  007062  64                 	db	100	;'d'
   430  007063  20                 	db	32
   431  007064  20                 	db	32
   432  007065  28                 	db	40
   433  007066  66                 	db	102	;'f'
   434  007067  69                 	db	105	;'i'
   435  007068  6C                 	db	108	;'l'
   436  007069  74                 	db	116	;'t'
   437  00706A  65                 	db	101	;'e'
   438  00706B  72                 	db	114	;'r'
   439  00706C  6E                 	db	110	;'n'
   440  00706D  6F                 	db	111	;'o'
   441  00706E  20                 	db	32
   442  00706F  3D                 	db	61	;'='
   443  007070  20                 	db	32
   444  007071  30                 	db	48	;'0'
   445  007072  2D                 	db	45
   446  007073  31                 	db	49	;'1'
   447  007074  35                 	db	53	;'5'
   448  007075  29                 	db	41
   449  007076  2E                 	db	46
   450  007077  0D                 	db	13
   451  007078  0A                 	db	10
   452  007079  00                 	db	0
   453  00707A                     STR_225:
   454  00707A  49                 	db	73	;'I'
   455  00707B  4E                 	db	78	;'N'
   456  00707C  46                 	db	70	;'F'
   457  00707D  4F                 	db	79	;'O'
   458  00707E  20                 	db	32
   459  00707F  2D                 	db	45
   460  007080  20                 	db	32
   461  007081  47                 	db	71	;'G'
   462  007082  65                 	db	101	;'e'
   463  007083  74                 	db	116	;'t'
   464  007084  20                 	db	32
   465  007085  69                 	db	105	;'i'
   466  007086  6E                 	db	110	;'n'
   467  007087  66                 	db	102	;'f'
   468  007088  6F                 	db	111	;'o'
   469  007089  20                 	db	32
   470  00708A  61                 	db	97	;'a'
   471  00708B  62                 	db	98	;'b'
   472  00708C  6F                 	db	111	;'o'
   473  00708D  75                 	db	117	;'u'
   474  00708E  74                 	db	116	;'t'
   475  00708F  20                 	db	32
   476  007090  61                 	db	97	;'a'
   477  007091  6E                 	db	110	;'n'
   478  007092  20                 	db	32
   479  007093  65                 	db	101	;'e'
   480  007094  78                 	db	120	;'x'
   481  007095  69                 	db	105	;'i'
   482  007096  73                 	db	115	;'s'
   483  007097  74                 	db	116	;'t'
   484  007098  65                 	db	101	;'e'
   485  007099  6E                 	db	110	;'n'
   486  00709A  74                 	db	116	;'t'
   487  00709B  20                 	db	32
   488  00709C  6E                 	db	110	;'n'
   489  00709D  6F                 	db	111	;'o'
   490  00709E  64                 	db	100	;'d'
   491  00709F  65                 	db	101	;'e'
   492  0070A0  20                 	db	32
   493  0070A1  6F                 	db	111	;'o'
   494  0070A2  6E                 	db	110	;'n'
   495  0070A3  20                 	db	32
   496  0070A4  74                 	db	116	;'t'
   497  0070A5  68                 	db	104	;'h'
   498  0070A6  65                 	db	101	;'e'
   499  0070A7  20                 	db	32
   500  0070A8  62                 	db	98	;'b'
   501  0070A9  75                 	db	117	;'u'
   502  0070AA  73                 	db	115	;'s'
   503  0070AB  20                 	db	32
   504  0070AC  28                 	db	40
   505  0070AD  46                 	db	70	;'F'
   506  0070AE  6F                 	db	111	;'o'
   507  0070AF  72                 	db	114	;'r'
   508  0070B0  6D                 	db	109	;'m'
   509  0070B1  61                 	db	97	;'a'
   510  0070B2  74                 	db	116	;'t'
   511  0070B3  3A                 	db	58	;':'
   512  0070B4  20                 	db	32
   513  0070B5  69                 	db	105	;'i'
   514  0070B6  6E                 	db	110	;'n'
   515  0070B7  66                 	db	102	;'f'
   516  0070B8  6F                 	db	111	;'o'
   517  0070B9  20                 	db	32
   518  0070BA  6E                 	db	110	;'n'
   519  0070BB  69                 	db	105	;'i'
   520  0070BC  63                 	db	99	;'c'
   521  0070BD  6B                 	db	107	;'k'
   522  0070BE  6E                 	db	110	;'n'
   523  0070BF  61                 	db	97	;'a'
   524  0070C0  6D                 	db	109	;'m'
   525  0070C1  65                 	db	101	;'e'
   526  0070C2  29                 	db	41
   527  0070C3  2E                 	db	46
   528  0070C4  0D                 	db	13
   529  0070C5  0A                 	db	10
   530  0070C6  00                 	db	0
   531  0070C7                     STR_229:
   532  0070C7  20                 	db	32
   533  0070C8  20                 	db	32
   534  0070C9  20                 	db	32
   535  0070CA  20                 	db	32
   536  0070CB  20                 	db	32
   537  0070CC  20                 	db	32
   538  0070CD  20                 	db	32
   539  0070CE  46                 	db	70	;'F'
   540  0070CF  6F                 	db	111	;'o'
   541  0070D0  72                 	db	114	;'r'
   542  0070D1  6D                 	db	109	;'m'
   543  0070D2  61                 	db	97	;'a'
   544  0070D3  74                 	db	116	;'t'
   545  0070D4  3A                 	db	58	;':'
   546  0070D5  20                 	db	32
   547  0070D6  6D                 	db	109	;'m'
   548  0070D7  61                 	db	97	;'a'
   549  0070D8  73                 	db	115	;'s'
   550  0070D9  6B                 	db	107	;'k'
   551  0070DA  20                 	db	32
   552  0070DB  6D                 	db	109	;'m'
   553  0070DC  61                 	db	97	;'a'
   554  0070DD  73                 	db	115	;'s'
   555  0070DE  6B                 	db	107	;'k'
   556  0070DF  6E                 	db	110	;'n'
   557  0070E0  6F                 	db	111	;'o'
   558  0070E1  2C                 	db	44
   559  0070E2  70                 	db	112	;'p'
   560  0070E3  72                 	db	114	;'r'
   561  0070E4  69                 	db	105	;'i'
   562  0070E5  6F                 	db	111	;'o'
   563  0070E6  2C                 	db	44
   564  0070E7  63                 	db	99	;'c'
   565  0070E8  6C                 	db	108	;'l'
   566  0070E9  61                 	db	97	;'a'
   567  0070EA  73                 	db	115	;'s'
   568  0070EB  73                 	db	115	;'s'
   569  0070EC  2C                 	db	44
   570  0070ED  74                 	db	116	;'t'
   571  0070EE  79                 	db	121	;'y'
   572  0070EF  70                 	db	112	;'p'
   573  0070F0  65                 	db	101	;'e'
   574  0070F1  2C                 	db	44
   575  0070F2  6E                 	db	110	;'n'
   576  0070F3  6F                 	db	111	;'o'
   577  0070F4  64                 	db	100	;'d'
   578  0070F5  65                 	db	101	;'e'
   579  0070F6  69                 	db	105	;'i'
   580  0070F7  64                 	db	100	;'d'
   581  0070F8  20                 	db	32
   582  0070F9  28                 	db	40
   583  0070FA  6D                 	db	109	;'m'
   584  0070FB  61                 	db	97	;'a'
   585  0070FC  73                 	db	115	;'s'
   586  0070FD  6B                 	db	107	;'k'
   587  0070FE  6E                 	db	110	;'n'
   588  0070FF  6F                 	db	111	;'o'
   589  007100  20                 	db	32
   590  007101  3D                 	db	61	;'='
   591  007102  20                 	db	32
   592  007103  30                 	db	48	;'0'
   593  007104  20                 	db	32
   594  007105  6F                 	db	111	;'o'
   595  007106  72                 	db	114	;'r'
   596  007107  20                 	db	32
   597  007108  31                 	db	49	;'1'
   598  007109  29                 	db	41
   599  00710A  2E                 	db	46
   600  00710B  0D                 	db	13
   601  00710C  0A                 	db	10
   602  00710D  00                 	db	0
   603  00710E                     STR_223:
   604  00710E  52                 	db	82	;'R'
   605  00710F  52                 	db	82	;'R'
   606  007110  45                 	db	69	;'E'
   607  007111  47                 	db	71	;'G'
   608  007112  20                 	db	32
   609  007113  2D                 	db	45
   610  007114  20                 	db	32
   611  007115  52                 	db	82	;'R'
   612  007116  65                 	db	101	;'e'
   613  007117  61                 	db	97	;'a'
   614  007118  64                 	db	100	;'d'
   615  007119  20                 	db	32
   616  00711A  72                 	db	114	;'r'
   617  00711B  65                 	db	101	;'e'
   618  00711C  67                 	db	103	;'g'
   619  00711D  69                 	db	105	;'i'
   620  00711E  73                 	db	115	;'s'
   621  00711F  74                 	db	116	;'t'
   622  007120  65                 	db	101	;'e'
   623  007121  72                 	db	114	;'r'
   624  007122  28                 	db	40
   625  007123  73                 	db	115	;'s'
   626  007124  29                 	db	41
   627  007125  20                 	db	32
   628  007126  6F                 	db	111	;'o'
   629  007127  66                 	db	102	;'f'
   630  007128  20                 	db	32
   631  007129  6E                 	db	110	;'n'
   632  00712A  6F                 	db	111	;'o'
   633  00712B  64                 	db	100	;'d'
   634  00712C  65                 	db	101	;'e'
   635  00712D  20                 	db	32
   636  00712E  28                 	db	40
   637  00712F  46                 	db	70	;'F'
   638  007130  6F                 	db	111	;'o'
   639  007131  72                 	db	114	;'r'
   640  007132  6D                 	db	109	;'m'
   641  007133  61                 	db	97	;'a'
   642  007134  74                 	db	116	;'t'
   643  007135  3A                 	db	58	;':'
   644  007136  20                 	db	32
   645  007137  72                 	db	114	;'r'
   646  007138  72                 	db	114	;'r'
   647  007139  65                 	db	101	;'e'
   648  00713A  67                 	db	103	;'g'
   649  00713B  20                 	db	32
   650  00713C  5B                 	db	91	;'['
   651  00713D  70                 	db	112	;'p'
   652  00713E  61                 	db	97	;'a'
   653  00713F  67                 	db	103	;'g'
   654  007140  65                 	db	101	;'e'
   655  007141  3A                 	db	58	;':'
   656  007142  5D                 	db	93	;']'
   657  007143  72                 	db	114	;'r'
   658  007144  65                 	db	101	;'e'
   659  007145  67                 	db	103	;'g'
   660  007146  20                 	db	32
   661  007147  5B                 	db	91	;'['
   662  007148  63                 	db	99	;'c'
   663  007149  6F                 	db	111	;'o'
   664  00714A  75                 	db	117	;'u'
   665  00714B  6E                 	db	110	;'n'
   666  00714C  74                 	db	116	;'t'
   667  00714D  5D                 	db	93	;']'
   668  00714E  29                 	db	41
   669  00714F  2E                 	db	46
   670  007150  0D                 	db	13
   671  007151  0A                 	db	10
   672  007152  00                 	db	0
   673  007153                     STR_238:
   674  007153  2D                 	db	45
   675  007154  2D                 	db	45
   676  007155  2D                 	db	45
   677  007156  2D                 	db	45
   678  007157  2D                 	db	45
   679  007158  2D                 	db	45
   680  007159  2D                 	db	45
   681  00715A  2D                 	db	45
   682  00715B  2D                 	db	45
   683  00715C  2D                 	db	45
   684  00715D  2D                 	db	45
   685  00715E  2D                 	db	45
   686  00715F  2D                 	db	45
   687  007160  2D                 	db	45
   688  007161  2D                 	db	45
   689  007162  2D                 	db	45
   690  007163  2D                 	db	45
   691  007164  2D                 	db	45
   692  007165  2D                 	db	45
   693  007166  2D                 	db	45
   694  007167  2D                 	db	45
   695  007168  2D                 	db	45
   696  007169  2D                 	db	45
   697  00716A  2D                 	db	45
   698  00716B  2D                 	db	45
   699  00716C  2D                 	db	45
   700  00716D  2D                 	db	45
   701  00716E  2D                 	db	45
   702  00716F  2D                 	db	45
   703  007170  2D                 	db	45
   704  007171  2D                 	db	45
   705  007172  2D                 	db	45
   706  007173  2D                 	db	45
   707  007174  2D                 	db	45
   708  007175  2D                 	db	45
   709  007176  2D                 	db	45
   710  007177  2D                 	db	45
   711  007178  2D                 	db	45
   712  007179  2D                 	db	45
   713  00717A  2D                 	db	45
   714  00717B  2D                 	db	45
   715  00717C  2D                 	db	45
   716  00717D  2D                 	db	45
   717  00717E  2D                 	db	45
   718  00717F  2D                 	db	45
   719  007180  2D                 	db	45
   720  007181  2D                 	db	45
   721  007182  2D                 	db	45
   722  007183  2D                 	db	45
   723  007184  2D                 	db	45
   724  007185  2D                 	db	45
   725  007186  2D                 	db	45
   726  007187  2D                 	db	45
   727  007188  2D                 	db	45
   728  007189  2D                 	db	45
   729  00718A  2D                 	db	45
   730  00718B  2D                 	db	45
   731  00718C  2D                 	db	45
   732  00718D  2D                 	db	45
   733  00718E  2D                 	db	45
   734  00718F  2D                 	db	45
   735  007190  2D                 	db	45
   736  007191  2D                 	db	45
   737  007192  2D                 	db	45
   738  007193  0D                 	db	13
   739  007194  0A                 	db	10
   740  007195  00                 	db	0
   741  007196                     STR_233:
   742  007196  20                 	db	32
   743  007197  20                 	db	32
   744  007198  20                 	db	32
   745  007199  20                 	db	32
   746  00719A  52                 	db	82	;'R'
   747  00719B  57                 	db	87	;'W'
   748  00719C  54                 	db	84	;'T'
   749  00719D  49                 	db	73	;'I'
   750  00719E  4D                 	db	77	;'M'
   751  00719F  45                 	db	69	;'E'
   752  0071A0  4F                 	db	79	;'O'
   753  0071A1  55                 	db	85	;'U'
   754  0071A2  54                 	db	84	;'T'
   755  0071A3  20                 	db	32
   756  0071A4  2D                 	db	45
   757  0071A5  20                 	db	32
   758  0071A6  53                 	db	83	;'S'
   759  0071A7  65                 	db	101	;'e'
   760  0071A8  74                 	db	116	;'t'
   761  0071A9  20                 	db	32
   762  0071AA  72                 	db	114	;'r'
   763  0071AB  65                 	db	101	;'e'
   764  0071AC  67                 	db	103	;'g'
   765  0071AD  69                 	db	105	;'i'
   766  0071AE  73                 	db	115	;'s'
   767  0071AF  74                 	db	116	;'t'
   768  0071B0  65                 	db	101	;'e'
   769  0071B1  72                 	db	114	;'r'
   770  0071B2  20                 	db	32
   771  0071B3  72                 	db	114	;'r'
   772  0071B4  65                 	db	101	;'e'
   773  0071B5  61                 	db	97	;'a'
   774  0071B6  64                 	db	100	;'d'
   775  0071B7  2F                 	db	47
   776  0071B8  77                 	db	119	;'w'
   777  0071B9  72                 	db	114	;'r'
   778  0071BA  69                 	db	105	;'i'
   779  0071BB  74                 	db	116	;'t'
   780  0071BC  65                 	db	101	;'e'
   781  0071BD  20                 	db	32
   782  0071BE  74                 	db	116	;'t'
   783  0071BF  69                 	db	105	;'i'
   784  0071C0  6D                 	db	109	;'m'
   785  0071C1  65                 	db	101	;'e'
   786  0071C2  6F                 	db	111	;'o'
   787  0071C3  75                 	db	117	;'u'
   788  0071C4  74                 	db	116	;'t'
   789  0071C5  2E                 	db	46
   790  0071C6  20                 	db	32
   791  0071C7  44                 	db	68	;'D'
   792  0071C8  65                 	db	101	;'e'
   793  0071C9  66                 	db	102	;'f'
   794  0071CA  61                 	db	97	;'a'
   795  0071CB  75                 	db	117	;'u'
   796  0071CC  6C                 	db	108	;'l'
   797  0071CD  74                 	db	116	;'t'
   798  0071CE  3D                 	db	61	;'='
   799  0071CF  31                 	db	49	;'1'
   800  0071D0  30                 	db	48	;'0'
   801  0071D1  20                 	db	32
   802  0071D2  6D                 	db	109	;'m'
   803  0071D3  73                 	db	115	;'s'
   804  0071D4  20                 	db	32
   805  0071D5  2E                 	db	46
   806  0071D6  0D                 	db	13
   807  0071D7  0A                 	db	10
   808  0071D8  00                 	db	0
   809  0071D9                     STR_224:
   810  0071D9  57                 	db	87	;'W'
   811  0071DA  52                 	db	82	;'R'
   812  0071DB  45                 	db	69	;'E'
   813  0071DC  47                 	db	71	;'G'
   814  0071DD  20                 	db	32
   815  0071DE  2D                 	db	45
   816  0071DF  20                 	db	32
   817  0071E0  57                 	db	87	;'W'
   818  0071E1  72                 	db	114	;'r'
   819  0071E2  69                 	db	105	;'i'
   820  0071E3  74                 	db	116	;'t'
   821  0071E4  65                 	db	101	;'e'
   822  0071E5  20                 	db	32
   823  0071E6  72                 	db	114	;'r'
   824  0071E7  65                 	db	101	;'e'
   825  0071E8  67                 	db	103	;'g'
   826  0071E9  69                 	db	105	;'i'
   827  0071EA  73                 	db	115	;'s'
   828  0071EB  74                 	db	116	;'t'
   829  0071EC  65                 	db	101	;'e'
   830  0071ED  72                 	db	114	;'r'
   831  0071EE  20                 	db	32
   832  0071EF  6F                 	db	111	;'o'
   833  0071F0  66                 	db	102	;'f'
   834  0071F1  20                 	db	32
   835  0071F2  6E                 	db	110	;'n'
   836  0071F3  6F                 	db	111	;'o'
   837  0071F4  64                 	db	100	;'d'
   838  0071F5  65                 	db	101	;'e'
   839  0071F6  20                 	db	32
   840  0071F7  28                 	db	40
   841  0071F8  46                 	db	70	;'F'
   842  0071F9  6F                 	db	111	;'o'
   843  0071FA  72                 	db	114	;'r'
   844  0071FB  6D                 	db	109	;'m'
   845  0071FC  61                 	db	97	;'a'
   846  0071FD  74                 	db	116	;'t'
   847  0071FE  3A                 	db	58	;':'
   848  0071FF  20                 	db	32
   849  007200  77                 	db	119	;'w'
   850  007201  72                 	db	114	;'r'
   851  007202  65                 	db	101	;'e'
   852  007203  67                 	db	103	;'g'
   853  007204  20                 	db	32
   854  007205  5B                 	db	91	;'['
   855  007206  70                 	db	112	;'p'
   856  007207  61                 	db	97	;'a'
   857  007208  67                 	db	103	;'g'
   858  007209  65                 	db	101	;'e'
   859  00720A  3A                 	db	58	;':'
   860  00720B  5D                 	db	93	;']'
   861  00720C  72                 	db	114	;'r'
   862  00720D  65                 	db	101	;'e'
   863  00720E  67                 	db	103	;'g'
   864  00720F  20                 	db	32
   865  007210  63                 	db	99	;'c'
   866  007211  6F                 	db	111	;'o'
   867  007212  6E                 	db	110	;'n'
   868  007213  74                 	db	116	;'t'
   869  007214  65                 	db	101	;'e'
   870  007215  6E                 	db	110	;'n'
   871  007216  74                 	db	116	;'t'
   872  007217  29                 	db	41
   873  007218  2E                 	db	46
   874  007219  0D                 	db	13
   875  00721A  0A                 	db	10
   876  00721B  00                 	db	0
   877  00721C                     STR_89:
   878  00721C  2D                 	db	45
   879  00721D  45                 	db	69	;'E'
   880  00721E  52                 	db	82	;'R'
   881  00721F  52                 	db	82	;'R'
   882  007220  4F                 	db	79	;'O'
   883  007221  52                 	db	82	;'R'
   884  007222  20                 	db	32
   885  007223  2D                 	db	45
   886  007224  20                 	db	32
   887  007225  46                 	db	70	;'F'
   888  007226  69                 	db	105	;'i'
   889  007227  6C                 	db	108	;'l'
   890  007228  74                 	db	116	;'t'
   891  007229  65                 	db	101	;'e'
   892  00722A  72                 	db	114	;'r'
   893  00722B  20                 	db	32
   894  00722C  6E                 	db	110	;'n'
   895  00722D  75                 	db	117	;'u'
   896  00722E  6D                 	db	109	;'m'
   897  00722F  62                 	db	98	;'b'
   898  007230  65                 	db	101	;'e'
   899  007231  72                 	db	114	;'r'
   900  007232  20                 	db	32
   901  007233  63                 	db	99	;'c'
   902  007234  61                 	db	97	;'a'
   903  007235  6E                 	db	110	;'n'
   904  007236  20                 	db	32
   905  007237  6F                 	db	111	;'o'
   906  007238  6E                 	db	110	;'n'
   907  007239  6C                 	db	108	;'l'
   908  00723A  79                 	db	121	;'y'
   909  00723B  20                 	db	32
   910  00723C  62                 	db	98	;'b'
   911  00723D  65                 	db	101	;'e'
   912  00723E  20                 	db	32
   913  00723F  73                 	db	115	;'s'
   914  007240  65                 	db	101	;'e'
   915  007241  74                 	db	116	;'t'
   916  007242  20                 	db	32
   917  007243  74                 	db	116	;'t'
   918  007244  6F                 	db	111	;'o'
   919  007245  20                 	db	32
   920  007246  61                 	db	97	;'a'
   921  007247  20                 	db	32
   922  007248  76                 	db	118	;'v'
   923  007249  61                 	db	97	;'a'
   924  00724A  6C                 	db	108	;'l'
   925  00724B  75                 	db	117	;'u'
   926  00724C  65                 	db	101	;'e'
   927  00724D  20                 	db	32
   928  00724E  62                 	db	98	;'b'
   929  00724F  65                 	db	101	;'e'
   930  007250  74                 	db	116	;'t'
   931  007251  77                 	db	119	;'w'
   932  007252  65                 	db	101	;'e'
   933  007253  65                 	db	101	;'e'
   934  007254  6E                 	db	110	;'n'
   935  007255  20                 	db	32
   936  007256  30                 	db	48	;'0'
   937  007257  2D                 	db	45
   938  007258  31                 	db	49	;'1'
   939  007259  35                 	db	53	;'5'
   940  00725A  2E                 	db	46
   941  00725B  0D                 	db	13
   942  00725C  0A                 	db	10
   943  00725D  00                 	db	0
   944  00725E                     STR_236:
   945  00725E  20                 	db	32
   946  00725F  20                 	db	32
   947  007260  20                 	db	32
   948  007261  20                 	db	32
   949  007262  4D                 	db	77	;'M'
   950  007263  4F                 	db	79	;'O'
   951  007264  44                 	db	68	;'D'
   952  007265  45                 	db	69	;'E'
   953  007266  20                 	db	32
   954  007267  2D                 	db	45
   955  007268  20                 	db	32
   956  007269  53                 	db	83	;'S'
   957  00726A  65                 	db	101	;'e'
   958  00726B  74                 	db	116	;'t'
   959  00726C  20                 	db	32
   960  00726D  61                 	db	97	;'a'
   961  00726E  64                 	db	100	;'d'
   962  00726F  61                 	db	97	;'a'
   963  007270  70                 	db	112	;'p'
   964  007271  74                 	db	116	;'t'
   965  007272  65                 	db	101	;'e'
   966  007273  72                 	db	114	;'r'
   967  007274  20                 	db	32
   968  007275  6D                 	db	109	;'m'
   969  007276  6F                 	db	111	;'o'
   970  007277  64                 	db	100	;'d'
   971  007278  65                 	db	101	;'e'
   972  007279  20                 	db	32
   973  00727A  74                 	db	116	;'t'
   974  00727B  68                 	db	104	;'h'
   975  00727C  61                 	db	97	;'a'
   976  00727D  74                 	db	116	;'t'
   977  00727E  20                 	db	32
   978  00727F  73                 	db	115	;'s'
   979  007280  68                 	db	104	;'h'
   980  007281  6F                 	db	111	;'o'
   981  007282  75                 	db	117	;'u'
   982  007283  6C                 	db	108	;'l'
   983  007284  64                 	db	100	;'d'
   984  007285  20                 	db	32
   985  007286  62                 	db	98	;'b'
   986  007287  65                 	db	101	;'e'
   987  007288  20                 	db	32
   988  007289  75                 	db	117	;'u'
   989  00728A  73                 	db	115	;'s'
   990  00728B  65                 	db	101	;'e'
   991  00728C  64                 	db	100	;'d'
   992  00728D  20                 	db	32
   993  00728E  6F                 	db	111	;'o'
   994  00728F  6E                 	db	110	;'n'
   995  007290  20                 	db	32
   996  007291  73                 	db	115	;'s'
   997  007292  74                 	db	116	;'t'
   998  007293  61                 	db	97	;'a'
   999  007294  72                 	db	114	;'r'
  1000  007295  74                 	db	116	;'t'
  1001  007296  75                 	db	117	;'u'
  1002  007297  70                 	db	112	;'p'
  1003  007298  2E                 	db	46
  1004  007299  0D                 	db	13
  1005  00729A  0A                 	db	10
  1006  00729B  00                 	db	0
  1007  00729C                     STR_196:
  1008  00729C  54                 	db	84	;'T'
  1009  00729D  72                 	db	114	;'r'
  1010  00729E  61                 	db	97	;'a'
  1011  00729F  6E                 	db	110	;'n'
  1012  0072A0  73                 	db	115	;'s'
  1013  0072A1  6D                 	db	109	;'m'
  1014  0072A2  69                 	db	105	;'i'
  1015  0072A3  74                 	db	116	;'t'
  1016  0072A4  74                 	db	116	;'t'
  1017  0072A5  65                 	db	101	;'e'
  1018  0072A6  72                 	db	114	;'r'
  1019  0072A7  20                 	db	32
  1020  0072A8  69                 	db	105	;'i'
  1021  0072A9  6E                 	db	110	;'n'
  1022  0072AA  20                 	db	32
  1023  0072AB  45                 	db	69	;'E'
  1024  0072AC  72                 	db	114	;'r'
  1025  0072AD  72                 	db	114	;'r'
  1026  0072AE  6F                 	db	111	;'o'
  1027  0072AF  72                 	db	114	;'r'
  1028  0072B0  20                 	db	32
  1029  0072B1  53                 	db	83	;'S'
  1030  0072B2  74                 	db	116	;'t'
  1031  0072B3  61                 	db	97	;'a'
  1032  0072B4  74                 	db	116	;'t'
  1033  0072B5  65                 	db	101	;'e'
  1034  0072B6  20                 	db	32
  1035  0072B7  57                 	db	87	;'W'
  1036  0072B8  61                 	db	97	;'a'
  1037  0072B9  72                 	db	114	;'r'
  1038  0072BA  6E                 	db	110	;'n'
  1039  0072BB  69                 	db	105	;'i'
  1040  0072BC  6E                 	db	110	;'n'
  1041  0072BD  67                 	db	103	;'g'
  1042  0072BE  20                 	db	32
  1043  0072BF  28                 	db	40
  1044  0072C0  31                 	db	49	;'1'
  1045  0072C1  32                 	db	50	;'2'
  1046  0072C2  38                 	db	56	;'8'
  1047  0072C3  20                 	db	32
  1048  0072C4  3E                 	db	62	;'>'
  1049  0072C5  20                 	db	32
  1050  0072C6  54                 	db	84	;'T'
  1051  0072C7  45                 	db	69	;'E'
  1052  0072C8  52                 	db	82	;'R'
  1053  0072C9  52                 	db	82	;'R'
  1054  0072CA  43                 	db	67	;'C'
  1055  0072CB  4E                 	db	78	;'N'
  1056  0072CC  54                 	db	84	;'T'
  1057  0072CD  20                 	db	32
  1058  0072CE  3F                 	db	63	;'?'
  1059  0072CF  20                 	db	32
  1060  0072D0  39                 	db	57	;'9'
  1061  0072D1  36                 	db	54	;'6'
  1062  0072D2  29                 	db	41
  1063  0072D3  0D                 	db	13
  1064  0072D4  0A                 	db	10
  1065  0072D5  00                 	db	0
  1066  0072D6                     STR_198:
  1067  0072D6  54                 	db	84	;'T'
  1068  0072D7  72                 	db	114	;'r'
  1069  0072D8  61                 	db	97	;'a'
  1070  0072D9  6E                 	db	110	;'n'
  1071  0072DA  73                 	db	115	;'s'
  1072  0072DB  6D                 	db	109	;'m'
  1073  0072DC  69                 	db	105	;'i'
  1074  0072DD  74                 	db	116	;'t'
  1075  0072DE  74                 	db	116	;'t'
  1076  0072DF  65                 	db	101	;'e'
  1077  0072E0  72                 	db	114	;'r'
  1078  0072E1  20                 	db	32
  1079  0072E2  69                 	db	105	;'i'
  1080  0072E3  6E                 	db	110	;'n'
  1081  0072E4  20                 	db	32
  1082  0072E5  45                 	db	69	;'E'
  1083  0072E6  72                 	db	114	;'r'
  1084  0072E7  72                 	db	114	;'r'
  1085  0072E8  6F                 	db	111	;'o'
  1086  0072E9  72                 	db	114	;'r'
  1087  0072EA  20                 	db	32
  1088  0072EB  53                 	db	83	;'S'
  1089  0072EC  74                 	db	116	;'t'
  1090  0072ED  61                 	db	97	;'a'
  1091  0072EE  74                 	db	116	;'t'
  1092  0072EF  65                 	db	101	;'e'
  1093  0072F0  20                 	db	32
  1094  0072F1  42                 	db	66	;'B'
  1095  0072F2  75                 	db	117	;'u'
  1096  0072F3  73                 	db	115	;'s'
  1097  0072F4  20                 	db	32
  1098  0072F5  50                 	db	80	;'P'
  1099  0072F6  61                 	db	97	;'a'
  1100  0072F7  73                 	db	115	;'s'
  1101  0072F8  73                 	db	115	;'s'
  1102  0072F9  69                 	db	105	;'i'
  1103  0072FA  76                 	db	118	;'v'
  1104  0072FB  65                 	db	101	;'e'
  1105  0072FC  20                 	db	32
  1106  0072FD  28                 	db	40
  1107  0072FE  54                 	db	84	;'T'
  1108  0072FF  45                 	db	69	;'E'
  1109  007300  52                 	db	82	;'R'
  1110  007301  52                 	db	82	;'R'
  1111  007302  43                 	db	67	;'C'
  1112  007303  4E                 	db	78	;'N'
  1113  007304  54                 	db	84	;'T'
  1114  007305  20                 	db	32
  1115  007306  3F                 	db	63	;'?'
  1116  007307  20                 	db	32
  1117  007308  31                 	db	49	;'1'
  1118  007309  32                 	db	50	;'2'
  1119  00730A  38                 	db	56	;'8'
  1120  00730B  29                 	db	41
  1121  00730C  0D                 	db	13
  1122  00730D  0A                 	db	10
  1123  00730E  00                 	db	0
  1124  00730F                     STR_217:
  1125  00730F  20                 	db	32
  1126  007310  20                 	db	32
  1127  007311  20                 	db	32
  1128  007312  20                 	db	32
  1129  007313  20                 	db	32
  1130  007314  46                 	db	70	;'F'
  1131  007315  6F                 	db	111	;'o'
  1132  007316  72                 	db	114	;'r'
  1133  007317  6D                 	db	109	;'m'
  1134  007318  61                 	db	97	;'a'
  1135  007319  74                 	db	116	;'t'
  1136  00731A  3A                 	db	58	;':'
  1137  00731B  20                 	db	32
  1138  00731C  70                 	db	112	;'p'
  1139  00731D  72                 	db	114	;'r'
  1140  00731E  69                 	db	105	;'i'
  1141  00731F  6F                 	db	111	;'o'
  1142  007320  72                 	db	114	;'r'
  1143  007321  69                 	db	105	;'i'
  1144  007322  74                 	db	116	;'t'
  1145  007323  79                 	db	121	;'y'
  1146  007324  2C                 	db	44
  1147  007325  63                 	db	99	;'c'
  1148  007326  6C                 	db	108	;'l'
  1149  007327  61                 	db	97	;'a'
  1150  007328  73                 	db	115	;'s'
  1151  007329  73                 	db	115	;'s'
  1152  00732A  2C                 	db	44
  1153  00732B  74                 	db	116	;'t'
  1154  00732C  79                 	db	121	;'y'
  1155  00732D  70                 	db	112	;'p'
  1156  00732E  65                 	db	101	;'e'
  1157  00732F  2C                 	db	44
  1158  007330  6E                 	db	110	;'n'
  1159  007331  6F                 	db	111	;'o'
  1160  007332  64                 	db	100	;'d'
  1161  007333  65                 	db	101	;'e'
  1162  007334  69                 	db	105	;'i'
  1163  007335  64                 	db	100	;'d'
  1164  007336  2C                 	db	44
  1165  007337  63                 	db	99	;'c'
  1166  007338  6F                 	db	111	;'o'
  1167  007339  75                 	db	117	;'u'
  1168  00733A  6E                 	db	110	;'n'
  1169  00733B  74                 	db	116	;'t'
  1170  00733C  2C                 	db	44
  1171  00733D  64                 	db	100	;'d'
  1172  00733E  61                 	db	97	;'a'
  1173  00733F  74                 	db	116	;'t'
  1174  007340  61                 	db	97	;'a'
  1175  007341  2C                 	db	44
  1176  007342  2C                 	db	44
  1177  007343  2C                 	db	44
  1178  007344  0D                 	db	13
  1179  007345  0A                 	db	10
  1180  007346  00                 	db	0
  1181  007347                     STR_203:
  1182  007347  52                 	db	82	;'R'
  1183  007348  65                 	db	101	;'e'
  1184  007349  63                 	db	99	;'c'
  1185  00734A  65                 	db	101	;'e'
  1186  00734B  69                 	db	105	;'i'
  1187  00734C  76                 	db	118	;'v'
  1188  00734D  65                 	db	101	;'e'
  1189  00734E  72                 	db	114	;'r'
  1190  00734F  20                 	db	32
  1191  007350  69                 	db	105	;'i'
  1192  007351  6E                 	db	110	;'n'
  1193  007352  20                 	db	32
  1194  007353  45                 	db	69	;'E'
  1195  007354  72                 	db	114	;'r'
  1196  007355  72                 	db	114	;'r'
  1197  007356  6F                 	db	111	;'o'
  1198  007357  72                 	db	114	;'r'
  1199  007358  20                 	db	32
  1200  007359  53                 	db	83	;'S'
  1201  00735A  74                 	db	116	;'t'
  1202  00735B  61                 	db	97	;'a'
  1203  00735C  74                 	db	116	;'t'
  1204  00735D  65                 	db	101	;'e'
  1205  00735E  20                 	db	32
  1206  00735F  57                 	db	87	;'W'
  1207  007360  61                 	db	97	;'a'
  1208  007361  72                 	db	114	;'r'
  1209  007362  6E                 	db	110	;'n'
  1210  007363  69                 	db	105	;'i'
  1211  007364  6E                 	db	110	;'n'
  1212  007365  67                 	db	103	;'g'
  1213  007366  20                 	db	32
  1214  007367  28                 	db	40
  1215  007368  31                 	db	49	;'1'
  1216  007369  32                 	db	50	;'2'
  1217  00736A  38                 	db	56	;'8'
  1218  00736B  20                 	db	32
  1219  00736C  3E                 	db	62	;'>'
  1220  00736D  20                 	db	32
  1221  00736E  52                 	db	82	;'R'
  1222  00736F  45                 	db	69	;'E'
  1223  007370  52                 	db	82	;'R'
  1224  007371  52                 	db	82	;'R'
  1225  007372  43                 	db	67	;'C'
  1226  007373  4E                 	db	78	;'N'
  1227  007374  54                 	db	84	;'T'
  1228  007375  20                 	db	32
  1229  007376  3F                 	db	63	;'?'
  1230  007377  20                 	db	32
  1231  007378  39                 	db	57	;'9'
  1232  007379  36                 	db	54	;'6'
  1233  00737A  29                 	db	41
  1234  00737B  0D                 	db	13
  1235  00737C  0A                 	db	10
  1236  00737D  00                 	db	0
  1237  00737E                     STR_235:
  1238  00737E  20                 	db	32
  1239  00737F  20                 	db	32
  1240  007380  20                 	db	32
  1241  007381  20                 	db	32
  1242  007382  53                 	db	83	;'S'
  1243  007383  54                 	db	84	;'T'
  1244  007384  41                 	db	65	;'A'
  1245  007385  52                 	db	82	;'R'
  1246  007386  54                 	db	84	;'T'
  1247  007387  49                 	db	73	;'I'
  1248  007388  46                 	db	70	;'F'
  1249  007389  20                 	db	32
  1250  00738A  2D                 	db	45
  1251  00738B  20                 	db	32
  1252  00738C  53                 	db	83	;'S'
  1253  00738D  65                 	db	101	;'e'
  1254  00738E  74                 	db	116	;'t'
  1255  00738F  20                 	db	32
  1256  007390  69                 	db	105	;'i'
  1257  007391  6E                 	db	110	;'n'
  1258  007392  74                 	db	116	;'t'
  1259  007393  65                 	db	101	;'e'
  1260  007394  72                 	db	114	;'r'
  1261  007395  66                 	db	102	;'f'
  1262  007396  61                 	db	97	;'a'
  1263  007397  63                 	db	99	;'c'
  1264  007398  65                 	db	101	;'e'
  1265  007399  20                 	db	32
  1266  00739A  73                 	db	115	;'s'
  1267  00739B  74                 	db	116	;'t'
  1268  00739C  61                 	db	97	;'a'
  1269  00739D  74                 	db	116	;'t'
  1270  00739E  65                 	db	101	;'e'
  1271  00739F  20                 	db	32
  1272  0073A0  74                 	db	116	;'t'
  1273  0073A1  6F                 	db	111	;'o'
  1274  0073A2  20                 	db	32
  1275  0073A3  75                 	db	117	;'u'
  1276  0073A4  73                 	db	115	;'s'
  1277  0073A5  65                 	db	101	;'e'
  1278  0073A6  20                 	db	32
  1279  0073A7  6F                 	db	111	;'o'
  1280  0073A8  6E                 	db	110	;'n'
  1281  0073A9  20                 	db	32
  1282  0073AA  73                 	db	115	;'s'
  1283  0073AB  74                 	db	116	;'t'
  1284  0073AC  61                 	db	97	;'a'
  1285  0073AD  72                 	db	114	;'r'
  1286  0073AE  74                 	db	116	;'t'
  1287  0073AF  75                 	db	117	;'u'
  1288  0073B0  70                 	db	112	;'p'
  1289  0073B1  2E                 	db	46
  1290  0073B2  0D                 	db	13
  1291  0073B3  0A                 	db	10
  1292  0073B4  00                 	db	0
  1293  0073B5                     STR_4:
  1294  0073B5  50                 	db	80	;'P'
  1295  0073B6  72                 	db	114	;'r'
  1296  0073B7  65                 	db	101	;'e'
  1297  0073B8  73                 	db	115	;'s'
  1298  0073B9  73                 	db	115	;'s'
  1299  0073BA  20                 	db	32
  1300  0073BB  27                 	db	39
  1301  0073BC  76                 	db	118	;'v'
  1302  0073BD  27                 	db	39
  1303  0073BE  20                 	db	32
  1304  0073BF  77                 	db	119	;'w'
  1305  0073C0  69                 	db	105	;'i'
  1306  0073C1  74                 	db	116	;'t'
  1307  0073C2  68                 	db	104	;'h'
  1308  0073C3  69                 	db	105	;'i'
  1309  0073C4  6E                 	db	110	;'n'
  1310  0073C5  20                 	db	32
  1311  0073C6  74                 	db	116	;'t'
  1312  0073C7  68                 	db	104	;'h'
  1313  0073C8  72                 	db	114	;'r'
  1314  0073C9  65                 	db	101	;'e'
  1315  0073CA  65                 	db	101	;'e'
  1316  0073CB  20                 	db	32
  1317  0073CC  73                 	db	115	;'s'
  1318  0073CD  65                 	db	101	;'e'
  1319  0073CE  63                 	db	99	;'c'
  1320  0073CF  6F                 	db	111	;'o'
  1321  0073D0  6E                 	db	110	;'n'
  1322  0073D1  64                 	db	100	;'d'
  1323  0073D2  73                 	db	115	;'s'
  1324  0073D3  20                 	db	32
  1325  0073D4  74                 	db	116	;'t'
  1326  0073D5  6F                 	db	111	;'o'
  1327  0073D6  20                 	db	32
  1328  0073D7  65                 	db	101	;'e'
  1329  0073D8  6E                 	db	110	;'n'
  1330  0073D9  74                 	db	116	;'t'
  1331  0073DA  65                 	db	101	;'e'
  1332  0073DB  72                 	db	114	;'r'
  1333  0073DC  20                 	db	32
  1334  0073DD  76                 	db	118	;'v'
  1335  0073DE  65                 	db	101	;'e'
  1336  0073DF  72                 	db	114	;'r'
  1337  0073E0  62                 	db	98	;'b'
  1338  0073E1  6F                 	db	111	;'o'
  1339  0073E2  73                 	db	115	;'s'
  1340  0073E3  65                 	db	101	;'e'
  1341  0073E4  20                 	db	32
  1342  0073E5  6D                 	db	109	;'m'
  1343  0073E6  6F                 	db	111	;'o'
  1344  0073E7  64                 	db	100	;'d'
  1345  0073E8  65                 	db	101	;'e'
  1346  0073E9  0D                 	db	13
  1347  0073EA  0A                 	db	10
  1348  0073EB  00                 	db	0
  1349  0073EC                     STR_204:
  1350  0073EC  52                 	db	82	;'R'
  1351  0073ED  65                 	db	101	;'e'
  1352  0073EE  63                 	db	99	;'c'
  1353  0073EF  65                 	db	101	;'e'
  1354  0073F0  69                 	db	105	;'i'
  1355  0073F1  76                 	db	118	;'v'
  1356  0073F2  65                 	db	101	;'e'
  1357  0073F3  72                 	db	114	;'r'
  1358  0073F4  20                 	db	32
  1359  0073F5  69                 	db	105	;'i'
  1360  0073F6  6E                 	db	110	;'n'
  1361  0073F7  20                 	db	32
  1362  0073F8  45                 	db	69	;'E'
  1363  0073F9  72                 	db	114	;'r'
  1364  0073FA  72                 	db	114	;'r'
  1365  0073FB  6F                 	db	111	;'o'
  1366  0073FC  72                 	db	114	;'r'
  1367  0073FD  20                 	db	32
  1368  0073FE  53                 	db	83	;'S'
  1369  0073FF  74                 	db	116	;'t'
  1370  007400  61                 	db	97	;'a'
  1371  007401  74                 	db	116	;'t'
  1372  007402  65                 	db	101	;'e'
  1373  007403  20                 	db	32
  1374  007404  42                 	db	66	;'B'
  1375  007405  75                 	db	117	;'u'
  1376  007406  73                 	db	115	;'s'
  1377  007407  20                 	db	32
  1378  007408  50                 	db	80	;'P'
  1379  007409  61                 	db	97	;'a'
  1380  00740A  73                 	db	115	;'s'
  1381  00740B  73                 	db	115	;'s'
  1382  00740C  69                 	db	105	;'i'
  1383  00740D  76                 	db	118	;'v'
  1384  00740E  65                 	db	101	;'e'
  1385  00740F  20                 	db	32
  1386  007410  28                 	db	40
  1387  007411  52                 	db	82	;'R'
  1388  007412  45                 	db	69	;'E'
  1389  007413  52                 	db	82	;'R'
  1390  007414  52                 	db	82	;'R'
  1391  007415  43                 	db	67	;'C'
  1392  007416  4E                 	db	78	;'N'
  1393  007417  54                 	db	84	;'T'
  1394  007418  20                 	db	32
  1395  007419  3F                 	db	63	;'?'
  1396  00741A  20                 	db	32
  1397  00741B  31                 	db	49	;'1'
  1398  00741C  32                 	db	50	;'2'
  1399  00741D  38                 	db	56	;'8'
  1400  00741E  29                 	db	41
  1401  00741F  0D                 	db	13
  1402  007420  0A                 	db	10
  1403  007421  00                 	db	0
  1404  007422                     STR_71:
  1405  007422  2D                 	db	45
  1406  007423  45                 	db	69	;'E'
  1407  007424  52                 	db	82	;'R'
  1408  007425  52                 	db	82	;'R'
  1409  007426  4F                 	db	79	;'O'
  1410  007427  52                 	db	82	;'R'
  1411  007428  20                 	db	32
  1412  007429  2D                 	db	45
  1413  00742A  20                 	db	32
  1414  00742B  4F                 	db	79	;'O'
  1415  00742C  6E                 	db	110	;'n'
  1416  00742D  65                 	db	101	;'e'
  1417  00742E  20                 	db	32
  1418  00742F  6F                 	db	111	;'o'
  1419  007430  72                 	db	114	;'r'
  1420  007431  20                 	db	32
  1421  007432  6D                 	db	109	;'m'
  1422  007433  6F                 	db	111	;'o'
  1423  007434  72                 	db	114	;'r'
  1424  007435  65                 	db	101	;'e'
  1425  007436  20                 	db	32
  1426  007437  72                 	db	114	;'r'
  1427  007438  65                 	db	101	;'e'
  1428  007439  67                 	db	103	;'g'
  1429  00743A  69                 	db	105	;'i'
  1430  00743B  73                 	db	115	;'s'
  1431  00743C  74                 	db	116	;'t'
  1432  00743D  65                 	db	101	;'e'
  1433  00743E  72                 	db	114	;'r'
  1434  00743F  28                 	db	40
  1435  007440  73                 	db	115	;'s'
  1436  007441  29                 	db	41
  1437  007442  20                 	db	32
  1438  007443  63                 	db	99	;'c'
  1439  007444  6F                 	db	111	;'o'
  1440  007445  75                 	db	117	;'u'
  1441  007446  6C                 	db	108	;'l'
  1442  007447  64                 	db	100	;'d'
  1443  007448  20                 	db	32
  1444  007449  6E                 	db	110	;'n'
  1445  00744A  6F                 	db	111	;'o'
  1446  00744B  74                 	db	116	;'t'
  1447  00744C  20                 	db	32
  1448  00744D  62                 	db	98	;'b'
  1449  00744E  65                 	db	101	;'e'
  1450  00744F  20                 	db	32
  1451  007450  72                 	db	114	;'r'
  1452  007451  65                 	db	101	;'e'
  1453  007452  61                 	db	97	;'a'
  1454  007453  64                 	db	100	;'d'
  1455  007454  2E                 	db	46
  1456  007455  0D                 	db	13
  1457  007456  0A                 	db	10
  1458  007457  00                 	db	0
  1459  007458                     STR_197:
  1460  007458  54                 	db	84	;'T'
  1461  007459  72                 	db	114	;'r'
  1462  00745A  61                 	db	97	;'a'
  1463  00745B  6E                 	db	110	;'n'
  1464  00745C  73                 	db	115	;'s'
  1465  00745D  6D                 	db	109	;'m'
  1466  00745E  69                 	db	105	;'i'
  1467  00745F  74                 	db	116	;'t'
  1468  007460  74                 	db	116	;'t'
  1469  007461  65                 	db	101	;'e'
  1470  007462  72                 	db	114	;'r'
  1471  007463  20                 	db	32
  1472  007464  69                 	db	105	;'i'
  1473  007465  6E                 	db	110	;'n'
  1474  007466  20                 	db	32
  1475  007467  45                 	db	69	;'E'
  1476  007468  72                 	db	114	;'r'
  1477  007469  72                 	db	114	;'r'
  1478  00746A  6F                 	db	111	;'o'
  1479  00746B  72                 	db	114	;'r'
  1480  00746C  20                 	db	32
  1481  00746D  53                 	db	83	;'S'
  1482  00746E  74                 	db	116	;'t'
  1483  00746F  61                 	db	97	;'a'
  1484  007470  74                 	db	116	;'t'
  1485  007471  65                 	db	101	;'e'
  1486  007472  20                 	db	32
  1487  007473  42                 	db	66	;'B'
  1488  007474  75                 	db	117	;'u'
  1489  007475  73                 	db	115	;'s'
  1490  007476  20                 	db	32
  1491  007477  4F                 	db	79	;'O'
  1492  007478  46                 	db	70	;'F'
  1493  007479  46                 	db	70	;'F'
  1494  00747A  20                 	db	32
  1495  00747B  28                 	db	40
  1496  00747C  54                 	db	84	;'T'
  1497  00747D  45                 	db	69	;'E'
  1498  00747E  52                 	db	82	;'R'
  1499  00747F  52                 	db	82	;'R'
  1500  007480  43                 	db	67	;'C'
  1501  007481  4E                 	db	78	;'N'
  1502  007482  54                 	db	84	;'T'
  1503  007483  20                 	db	32
  1504  007484  3F                 	db	63	;'?'
  1505  007485  20                 	db	32
  1506  007486  32                 	db	50	;'2'
  1507  007487  35                 	db	53	;'5'
  1508  007488  36                 	db	54	;'6'
  1509  007489  29                 	db	41
  1510  00748A  0D                 	db	13
  1511  00748B  0A                 	db	10
  1512  00748C  00                 	db	0
  1513  00748D                     STR_2:
  1514  00748D  43                 	db	67	;'C'
  1515  00748E  6F                 	db	111	;'o'
  1516  00748F  70                 	db	112	;'p'
  1517  007490  79                 	db	121	;'y'
  1518  007491  72                 	db	114	;'r'
  1519  007492  69                 	db	105	;'i'
  1520  007493  67                 	db	103	;'g'
  1521  007494  68                 	db	104	;'h'
  1522  007495  74                 	db	116	;'t'
  1523  007496  20                 	db	32
  1524  007497  28                 	db	40
  1525  007498  43                 	db	67	;'C'
  1526  007499  29                 	db	41
  1527  00749A  20                 	db	32
  1528  00749B  32                 	db	50	;'2'
  1529  00749C  30                 	db	48	;'0'
  1530  00749D  31                 	db	49	;'1'
  1531  00749E  34                 	db	52	;'4'
  1532  00749F  2D                 	db	45
  1533  0074A0  32                 	db	50	;'2'
  1534  0074A1  30                 	db	48	;'0'
  1535  0074A2  31                 	db	49	;'1'
  1536  0074A3  35                 	db	53	;'5'
  1537  0074A4  20                 	db	32
  1538  0074A5  47                 	db	71	;'G'
  1539  0074A6  72                 	db	114	;'r'
  1540  0074A7  6F                 	db	111	;'o'
  1541  0074A8  64                 	db	100	;'d'
  1542  0074A9  61                 	db	97	;'a'
  1543  0074AA  6E                 	db	110	;'n'
  1544  0074AB  73                 	db	115	;'s'
  1545  0074AC  20                 	db	32
  1546  0074AD  50                 	db	80	;'P'
  1547  0074AE  61                 	db	97	;'a'
  1548  0074AF  72                 	db	114	;'r'
  1549  0074B0  61                 	db	97	;'a'
  1550  0074B1  64                 	db	100	;'d'
  1551  0074B2  69                 	db	105	;'i'
  1552  0074B3  73                 	db	115	;'s'
  1553  0074B4  20                 	db	32
  1554  0074B5  41                 	db	65	;'A'
  1555  0074B6  42                 	db	66	;'B'
  1556  0074B7  2C                 	db	44
  1557  0074B8  20                 	db	32
  1558  0074B9  53                 	db	83	;'S'
  1559  0074BA  77                 	db	119	;'w'
  1560  0074BB  65                 	db	101	;'e'
  1561  0074BC  64                 	db	100	;'d'
  1562  0074BD  65                 	db	101	;'e'
  1563  0074BE  6E                 	db	110	;'n'
  1564  0074BF  0D                 	db	13
  1565  0074C0  0A                 	db	10
  1566  0074C1  00                 	db	0
  1567  0074C2                     STR_205:
  1568  0074C2  54                 	db	84	;'T'
  1569  0074C3  72                 	db	114	;'r'
  1570  0074C4  61                 	db	97	;'a'
  1571  0074C5  6E                 	db	110	;'n'
  1572  0074C6  73                 	db	115	;'s'
  1573  0074C7  6D                 	db	109	;'m'
  1574  0074C8  69                 	db	105	;'i'
  1575  0074C9  74                 	db	116	;'t'
  1576  0074CA  74                 	db	116	;'t'
  1577  0074CB  65                 	db	101	;'e'
  1578  0074CC  72                 	db	114	;'r'
  1579  0074CD  20                 	db	32
  1580  0074CE  6F                 	db	111	;'o'
  1581  0074CF  72                 	db	114	;'r'
  1582  0074D0  20                 	db	32
  1583  0074D1  52                 	db	82	;'R'
  1584  0074D2  65                 	db	101	;'e'
  1585  0074D3  63                 	db	99	;'c'
  1586  0074D4  65                 	db	101	;'e'
  1587  0074D5  69                 	db	105	;'i'
  1588  0074D6  76                 	db	118	;'v'
  1589  0074D7  65                 	db	101	;'e'
  1590  0074D8  72                 	db	114	;'r'
  1591  0074D9  20                 	db	32
  1592  0074DA  69                 	db	105	;'i'
  1593  0074DB  73                 	db	115	;'s'
  1594  0074DC  20                 	db	32
  1595  0074DD  69                 	db	105	;'i'
  1596  0074DE  6E                 	db	110	;'n'
  1597  0074DF  20                 	db	32
  1598  0074E0  45                 	db	69	;'E'
  1599  0074E1  72                 	db	114	;'r'
  1600  0074E2  72                 	db	114	;'r'
  1601  0074E3  6F                 	db	111	;'o'
  1602  0074E4  72                 	db	114	;'r'
  1603  0074E5  20                 	db	32
  1604  0074E6  53                 	db	83	;'S'
  1605  0074E7  74                 	db	116	;'t'
  1606  0074E8  61                 	db	97	;'a'
  1607  0074E9  74                 	db	116	;'t'
  1608  0074EA  65                 	db	101	;'e'
  1609  0074EB  20                 	db	32
  1610  0074EC  57                 	db	87	;'W'
  1611  0074ED  61                 	db	97	;'a'
  1612  0074EE  72                 	db	114	;'r'
  1613  0074EF  6E                 	db	110	;'n'
  1614  0074F0  69                 	db	105	;'i'
  1615  0074F1  6E                 	db	110	;'n'
  1616  0074F2  67                 	db	103	;'g'
  1617  0074F3  0D                 	db	13
  1618  0074F4  0A                 	db	10
  1619  0074F5  00                 	db	0
  1620  0074F6                     STR_211:
  1621  0074F6  4C                 	db	76	;'L'
  1622  0074F7  49                 	db	73	;'I'
  1623  0074F8  53                 	db	83	;'S'
  1624  0074F9  54                 	db	84	;'T'
  1625  0074FA  45                 	db	69	;'E'
  1626  0074FB  4E                 	db	78	;'N'
  1627  0074FC  20                 	db	32
  1628  0074FD  2D                 	db	45
  1629  0074FE  20                 	db	32
  1630  0074FF  4F                 	db	79	;'O'
  1631  007500  70                 	db	112	;'p'
  1632  007501  65                 	db	101	;'e'
  1633  007502  6E                 	db	110	;'n'
  1634  007503  20                 	db	32
  1635  007504  43                 	db	67	;'C'
  1636  007505  41                 	db	65	;'A'
  1637  007506  4E                 	db	78	;'N'
  1638  007507  20                 	db	32
  1639  007508  69                 	db	105	;'i'
  1640  007509  6E                 	db	110	;'n'
  1641  00750A  74                 	db	116	;'t'
  1642  00750B  65                 	db	101	;'e'
  1643  00750C  72                 	db	114	;'r'
  1644  00750D  66                 	db	102	;'f'
  1645  00750E  61                 	db	97	;'a'
  1646  00750F  63                 	db	99	;'c'
  1647  007510  65                 	db	101	;'e'
  1648  007511  20                 	db	32
  1649  007512  69                 	db	105	;'i'
  1650  007513  6E                 	db	110	;'n'
  1651  007514  20                 	db	32
  1652  007515  6C                 	db	108	;'l'
  1653  007516  69                 	db	105	;'i'
  1654  007517  73                 	db	115	;'s'
  1655  007518  74                 	db	116	;'t'
  1656  007519  65                 	db	101	;'e'
  1657  00751A  6E                 	db	110	;'n'
  1658  00751B  20                 	db	32
  1659  00751C  6F                 	db	111	;'o'
  1660  00751D  6E                 	db	110	;'n'
  1661  00751E  6C                 	db	108	;'l'
  1662  00751F  79                 	db	121	;'y'
  1663  007520  20                 	db	32
  1664  007521  6D                 	db	109	;'m'
  1665  007522  6F                 	db	111	;'o'
  1666  007523  64                 	db	100	;'d'
  1667  007524  65                 	db	101	;'e'
  1668  007525  2E                 	db	46
  1669  007526  0D                 	db	13
  1670  007527  0A                 	db	10
  1671  007528  00                 	db	0
  1672  007529                     STR_102:
  1673  007529  2D                 	db	45
  1674  00752A  45                 	db	69	;'E'
  1675  00752B  52                 	db	82	;'R'
  1676  00752C  52                 	db	82	;'R'
  1677  00752D  4F                 	db	79	;'O'
  1678  00752E  52                 	db	82	;'R'
  1679  00752F  20                 	db	32
  1680  007530  2D                 	db	45
  1681  007531  20                 	db	32
  1682  007532  4D                 	db	77	;'M'
  1683  007533  61                 	db	97	;'a'
  1684  007534  73                 	db	115	;'s'
  1685  007535  6B                 	db	107	;'k'
  1686  007536  20                 	db	32
  1687  007537  6E                 	db	110	;'n'
  1688  007538  75                 	db	117	;'u'
  1689  007539  6D                 	db	109	;'m'
  1690  00753A  62                 	db	98	;'b'
  1691  00753B  65                 	db	101	;'e'
  1692  00753C  72                 	db	114	;'r'
  1693  00753D  20                 	db	32
  1694  00753E  63                 	db	99	;'c'
  1695  00753F  61                 	db	97	;'a'
  1696  007540  6E                 	db	110	;'n'
  1697  007541  20                 	db	32
  1698  007542  6F                 	db	111	;'o'
  1699  007543  6E                 	db	110	;'n'
  1700  007544  6C                 	db	108	;'l'
  1701  007545  79                 	db	121	;'y'
  1702  007546  20                 	db	32
  1703  007547  62                 	db	98	;'b'
  1704  007548  65                 	db	101	;'e'
  1705  007549  20                 	db	32
  1706  00754A  73                 	db	115	;'s'
  1707  00754B  65                 	db	101	;'e'
  1708  00754C  74                 	db	116	;'t'
  1709  00754D  20                 	db	32
  1710  00754E  61                 	db	97	;'a'
  1711  00754F  73                 	db	115	;'s'
  1712  007550  20                 	db	32
  1713  007551  30                 	db	48	;'0'
  1714  007552  20                 	db	32
  1715  007553  6F                 	db	111	;'o'
  1716  007554  72                 	db	114	;'r'
  1717  007555  20                 	db	32
  1718  007556  31                 	db	49	;'1'
  1719  007557  2E                 	db	46
  1720  007558  0D                 	db	13
  1721  007559  0A                 	db	10
  1722  00755A  00                 	db	0
  1723  00755B                     STR_212:
  1724  00755B  4C                 	db	76	;'L'
  1725  00755C  4F                 	db	79	;'O'
  1726  00755D  4F                 	db	79	;'O'
  1727  00755E  50                 	db	80	;'P'
  1728  00755F  42                 	db	66	;'B'
  1729  007560  41                 	db	65	;'A'
  1730  007561  43                 	db	67	;'C'
  1731  007562  4B                 	db	75	;'K'
  1732  007563  20                 	db	32
  1733  007564  2D                 	db	45
  1734  007565  20                 	db	32
  1735  007566  4F                 	db	79	;'O'
  1736  007567  70                 	db	112	;'p'
  1737  007568  65                 	db	101	;'e'
  1738  007569  6E                 	db	110	;'n'
  1739  00756A  20                 	db	32
  1740  00756B  43                 	db	67	;'C'
  1741  00756C  41                 	db	65	;'A'
  1742  00756D  4E                 	db	78	;'N'
  1743  00756E  20                 	db	32
  1744  00756F  69                 	db	105	;'i'
  1745  007570  6E                 	db	110	;'n'
  1746  007571  74                 	db	116	;'t'
  1747  007572  65                 	db	101	;'e'
  1748  007573  72                 	db	114	;'r'
  1749  007574  66                 	db	102	;'f'
  1750  007575  61                 	db	97	;'a'
  1751  007576  63                 	db	99	;'c'
  1752  007577  65                 	db	101	;'e'
  1753  007578  20                 	db	32
  1754  007579  69                 	db	105	;'i'
  1755  00757A  6E                 	db	110	;'n'
  1756  00757B  20                 	db	32
  1757  00757C  6C                 	db	108	;'l'
  1758  00757D  6F                 	db	111	;'o'
  1759  00757E  6F                 	db	111	;'o'
  1760  00757F  70                 	db	112	;'p'
  1761  007580  62                 	db	98	;'b'
  1762  007581  61                 	db	97	;'a'
  1763  007582  63                 	db	99	;'c'
  1764  007583  6B                 	db	107	;'k'
  1765  007584  20                 	db	32
  1766  007585  6D                 	db	109	;'m'
  1767  007586  6F                 	db	111	;'o'
  1768  007587  64                 	db	100	;'d'
  1769  007588  65                 	db	101	;'e'
  1770  007589  2E                 	db	46
  1771  00758A  0D                 	db	13
  1772  00758B  0A                 	db	10
  1773  00758C  00                 	db	0
  1774  00758D                     STR_214:
  1775  00758D  56                 	db	86	;'V'
  1776  00758E  45                 	db	69	;'E'
  1777  00758F  52                 	db	82	;'R'
  1778  007590  53                 	db	83	;'S'
  1779  007591  49                 	db	73	;'I'
  1780  007592  4F                 	db	79	;'O'
  1781  007593  4E                 	db	78	;'N'
  1782  007594  20                 	db	32
  1783  007595  2D                 	db	45
  1784  007596  20                 	db	32
  1785  007597  44                 	db	68	;'D'
  1786  007598  69                 	db	105	;'i'
  1787  007599  73                 	db	115	;'s'
  1788  00759A  70                 	db	112	;'p'
  1789  00759B  6C                 	db	108	;'l'
  1790  00759C  61                 	db	97	;'a'
  1791  00759D  79                 	db	121	;'y'
  1792  00759E  20                 	db	32
  1793  00759F  66                 	db	102	;'f'
  1794  0075A0  69                 	db	105	;'i'
  1795  0075A1  72                 	db	114	;'r'
  1796  0075A2  6D                 	db	109	;'m'
  1797  0075A3  77                 	db	119	;'w'
  1798  0075A4  61                 	db	97	;'a'
  1799  0075A5  72                 	db	114	;'r'
  1800  0075A6  65                 	db	101	;'e'
  1801  0075A7  20                 	db	32
  1802  0075A8  76                 	db	118	;'v'
  1803  0075A9  65                 	db	101	;'e'
  1804  0075AA  72                 	db	114	;'r'
  1805  0075AB  73                 	db	115	;'s'
  1806  0075AC  69                 	db	105	;'i'
  1807  0075AD  6F                 	db	111	;'o'
  1808  0075AE  6E                 	db	110	;'n'
  1809  0075AF  20                 	db	32
  1810  0075B0  69                 	db	105	;'i'
  1811  0075B1  6E                 	db	110	;'n'
  1812  0075B2  66                 	db	102	;'f'
  1813  0075B3  6F                 	db	111	;'o'
  1814  0075B4  72                 	db	114	;'r'
  1815  0075B5  6D                 	db	109	;'m'
  1816  0075B6  61                 	db	97	;'a'
  1817  0075B7  74                 	db	116	;'t'
  1818  0075B8  69                 	db	105	;'i'
  1819  0075B9  6F                 	db	111	;'o'
  1820  0075BA  6E                 	db	110	;'n'
  1821  0075BB  2E                 	db	46
  1822  0075BC  0D                 	db	13
  1823  0075BD  0A                 	db	10
  1824  0075BE  00                 	db	0
  1825  0075BF                     STR_234:
  1826  0075BF  20                 	db	32
  1827  0075C0  20                 	db	32
  1828  0075C1  20                 	db	32
  1829  0075C2  20                 	db	32
  1830  0075C3  20                 	db	32
  1831  0075C4  20                 	db	32
  1832  0075C5  20                 	db	32
  1833  0075C6  20                 	db	32
  1834  0075C7  20                 	db	32
  1835  0075C8  20                 	db	32
  1836  0075C9  20                 	db	32
  1837  0075CA  20                 	db	32
  1838  0075CB  20                 	db	32
  1839  0075CC  20                 	db	32
  1840  0075CD  20                 	db	32
  1841  0075CE  20                 	db	32
  1842  0075CF  46                 	db	70	;'F'
  1843  0075D0  6F                 	db	111	;'o'
  1844  0075D1  72                 	db	114	;'r'
  1845  0075D2  6D                 	db	109	;'m'
  1846  0075D3  61                 	db	97	;'a'
  1847  0075D4  74                 	db	116	;'t'
  1848  0075D5  3A                 	db	58	;':'
  1849  0075D6  20                 	db	32
  1850  0075D7  73                 	db	115	;'s'
  1851  0075D8  65                 	db	101	;'e'
  1852  0075D9  74                 	db	116	;'t'
  1853  0075DA  20                 	db	32
  1854  0075DB  72                 	db	114	;'r'
  1855  0075DC  77                 	db	119	;'w'
  1856  0075DD  74                 	db	116	;'t'
  1857  0075DE  69                 	db	105	;'i'
  1858  0075DF  6D                 	db	109	;'m'
  1859  0075E0  65                 	db	101	;'e'
  1860  0075E1  6F                 	db	111	;'o'
  1861  0075E2  75                 	db	117	;'u'
  1862  0075E3  74                 	db	116	;'t'
  1863  0075E4  20                 	db	32
  1864  0075E5  74                 	db	116	;'t'
  1865  0075E6  69                 	db	105	;'i'
  1866  0075E7  6D                 	db	109	;'m'
  1867  0075E8  65                 	db	101	;'e'
  1868  0075E9  6F                 	db	111	;'o'
  1869  0075EA  75                 	db	117	;'u'
  1870  0075EB  74                 	db	116	;'t'
  1871  0075EC  2E                 	db	46
  1872  0075ED  0D                 	db	13
  1873  0075EE  0A                 	db	10
  1874  0075EF  00                 	db	0
  1875  0075F0                     STR_232:
  1876  0075F0  20                 	db	32
  1877  0075F1  20                 	db	32
  1878  0075F2  20                 	db	32
  1879  0075F3  20                 	db	32
  1880  0075F4  44                 	db	68	;'D'
  1881  0075F5  45                 	db	69	;'E'
  1882  0075F6  43                 	db	67	;'C'
  1883  0075F7  49                 	db	73	;'I'
  1884  0075F8  4D                 	db	77	;'M'
  1885  0075F9  41                 	db	65	;'A'
  1886  0075FA  4C                 	db	76	;'L'
  1887  0075FB  20                 	db	32
  1888  0075FC  2D                 	db	45
  1889  0075FD  20                 	db	32
  1890  0075FE  44                 	db	68	;'D'
  1891  0075FF  69                 	db	105	;'i'
  1892  007600  73                 	db	115	;'s'
  1893  007601  70                 	db	112	;'p'
  1894  007602  6C                 	db	108	;'l'
  1895  007603  61                 	db	97	;'a'
  1896  007604  79                 	db	121	;'y'
  1897  007605  20                 	db	32
  1898  007606  6E                 	db	110	;'n'
  1899  007607  75                 	db	117	;'u'
  1900  007608  6D                 	db	109	;'m'
  1901  007609  65                 	db	101	;'e'
  1902  00760A  72                 	db	114	;'r'
  1903  00760B  69                 	db	105	;'i'
  1904  00760C  63                 	db	99	;'c'
  1905  00760D  61                 	db	97	;'a'
  1906  00760E  6C                 	db	108	;'l'
  1907  00760F  73                 	db	115	;'s'
  1908  007610  20                 	db	32
  1909  007611  69                 	db	105	;'i'
  1910  007612  6E                 	db	110	;'n'
  1911  007613  20                 	db	32
  1912  007614  64                 	db	100	;'d'
  1913  007615  65                 	db	101	;'e'
  1914  007616  63                 	db	99	;'c'
  1915  007617  69                 	db	105	;'i'
  1916  007618  6D                 	db	109	;'m'
  1917  007619  61                 	db	97	;'a'
  1918  00761A  6C                 	db	108	;'l'
  1919  00761B  2E                 	db	46
  1920  00761C  0D                 	db	13
  1921  00761D  0A                 	db	10
  1922  00761E  00                 	db	0
  1923  00761F                     STR_231:
  1924  00761F  20                 	db	32
  1925  007620  20                 	db	32
  1926  007621  20                 	db	32
  1927  007622  20                 	db	32
  1928  007623  48                 	db	72	;'H'
  1929  007624  45                 	db	69	;'E'
  1930  007625  58                 	db	88	;'X'
  1931  007626  20                 	db	32
  1932  007627  2D                 	db	45
  1933  007628  20                 	db	32
  1934  007629  44                 	db	68	;'D'
  1935  00762A  69                 	db	105	;'i'
  1936  00762B  73                 	db	115	;'s'
  1937  00762C  70                 	db	112	;'p'
  1938  00762D  6C                 	db	108	;'l'
  1939  00762E  61                 	db	97	;'a'
  1940  00762F  79                 	db	121	;'y'
  1941  007630  20                 	db	32
  1942  007631  6E                 	db	110	;'n'
  1943  007632  75                 	db	117	;'u'
  1944  007633  6D                 	db	109	;'m'
  1945  007634  65                 	db	101	;'e'
  1946  007635  72                 	db	114	;'r'
  1947  007636  69                 	db	105	;'i'
  1948  007637  63                 	db	99	;'c'
  1949  007638  61                 	db	97	;'a'
  1950  007639  6C                 	db	108	;'l'
  1951  00763A  73                 	db	115	;'s'
  1952  00763B  20                 	db	32
  1953  00763C  69                 	db	105	;'i'
  1954  00763D  6E                 	db	110	;'n'
  1955  00763E  20                 	db	32
  1956  00763F  68                 	db	104	;'h'
  1957  007640  65                 	db	101	;'e'
  1958  007641  78                 	db	120	;'x'
  1959  007642  61                 	db	97	;'a'
  1960  007643  64                 	db	100	;'d'
  1961  007644  65                 	db	101	;'e'
  1962  007645  63                 	db	99	;'c'
  1963  007646  69                 	db	105	;'i'
  1964  007647  6D                 	db	109	;'m'
  1965  007648  61                 	db	97	;'a'
  1966  007649  6C                 	db	108	;'l'
  1967  00764A  2E                 	db	46
  1968  00764B  0D                 	db	13
  1969  00764C  0A                 	db	10
  1970  00764D  00                 	db	0
  1971  00764E                     STR_222:
  1972  00764E  46                 	db	70	;'F'
  1973  00764F  49                 	db	73	;'I'
  1974  007650  4E                 	db	78	;'N'
  1975  007651  44                 	db	68	;'D'
  1976  007652  20                 	db	32
  1977  007653  2D                 	db	45
  1978  007654  20                 	db	32
  1979  007655  46                 	db	70	;'F'
  1980  007656  69                 	db	105	;'i'
  1981  007657  6E                 	db	110	;'n'
  1982  007658  64                 	db	100	;'d'
  1983  007659  20                 	db	32
  1984  00765A  61                 	db	97	;'a'
  1985  00765B  76                 	db	118	;'v'
  1986  00765C  61                 	db	97	;'a'
  1987  00765D  69                 	db	105	;'i'
  1988  00765E  6C                 	db	108	;'l'
  1989  00765F  61                 	db	97	;'a'
  1990  007660  62                 	db	98	;'b'
  1991  007661  6C                 	db	108	;'l'
  1992  007662  65                 	db	101	;'e'
  1993  007663  20                 	db	32
  1994  007664  43                 	db	67	;'C'
  1995  007665  41                 	db	65	;'A'
  1996  007666  4E                 	db	78	;'N'
  1997  007667  34                 	db	52	;'4'
  1998  007668  56                 	db	86	;'V'
  1999  007669  53                 	db	83	;'S'
  2000  00766A  43                 	db	67	;'C'
  2001  00766B  50                 	db	80	;'P'
  2002  00766C  20                 	db	32
  2003  00766D  6E                 	db	110	;'n'
  2004  00766E  6F                 	db	111	;'o'
  2005  00766F  64                 	db	100	;'d'
  2006  007670  65                 	db	101	;'e'
  2007  007671  73                 	db	115	;'s'
  2008  007672  20                 	db	32
  2009  007673  6F                 	db	111	;'o'
  2010  007674  6E                 	db	110	;'n'
  2011  007675  20                 	db	32
  2012  007676  62                 	db	98	;'b'
  2013  007677  75                 	db	117	;'u'
  2014  007678  73                 	db	115	;'s'
  2015  007679  2E                 	db	46
  2016  00767A  0D                 	db	13
  2017  00767B  0A                 	db	10
  2018  00767C  00                 	db	0
  2019  00767D                     STR_210:
  2020  00767D  53                 	db	83	;'S'
  2021  00767E  49                 	db	73	;'I'
  2022  00767F  4C                 	db	76	;'L'
  2023  007680  45                 	db	69	;'E'
  2024  007681  4E                 	db	78	;'N'
  2025  007682  54                 	db	84	;'T'
  2026  007683  20                 	db	32
  2027  007684  2D                 	db	45
  2028  007685  20                 	db	32
  2029  007686  4F                 	db	79	;'O'
  2030  007687  70                 	db	112	;'p'
  2031  007688  65                 	db	101	;'e'
  2032  007689  6E                 	db	110	;'n'
  2033  00768A  20                 	db	32
  2034  00768B  43                 	db	67	;'C'
  2035  00768C  41                 	db	65	;'A'
  2036  00768D  4E                 	db	78	;'N'
  2037  00768E  20                 	db	32
  2038  00768F  69                 	db	105	;'i'
  2039  007690  6E                 	db	110	;'n'
  2040  007691  74                 	db	116	;'t'
  2041  007692  65                 	db	101	;'e'
  2042  007693  72                 	db	114	;'r'
  2043  007694  66                 	db	102	;'f'
  2044  007695  61                 	db	97	;'a'
  2045  007696  63                 	db	99	;'c'
  2046  007697  65                 	db	101	;'e'
  2047  007698  20                 	db	32
  2048  007699  69                 	db	105	;'i'
  2049  00769A  6E                 	db	110	;'n'
  2050  00769B  20                 	db	32
  2051  00769C  73                 	db	115	;'s'
  2052  00769D  69                 	db	105	;'i'
  2053  00769E  6C                 	db	108	;'l'
  2054  00769F  65                 	db	101	;'e'
  2055  0076A0  6E                 	db	110	;'n'
  2056  0076A1  74                 	db	116	;'t'
  2057  0076A2  20                 	db	32
  2058  0076A3  6D                 	db	109	;'m'
  2059  0076A4  6F                 	db	111	;'o'
  2060  0076A5  64                 	db	100	;'d'
  2061  0076A6  65                 	db	101	;'e'
  2062  0076A7  2E                 	db	46
  2063  0076A8  0D                 	db	13
  2064  0076A9  0A                 	db	10
  2065  0076AA  00                 	db	0
  2066  0076AB                     STR_215:
  2067  0076AB  49                 	db	73	;'I'
  2068  0076AC  46                 	db	70	;'F'
  2069  0076AD  4D                 	db	77	;'M'
  2070  0076AE  4F                 	db	79	;'O'
  2071  0076AF  44                 	db	68	;'D'
  2072  0076B0  45                 	db	69	;'E'
  2073  0076B1  20                 	db	32
  2074  0076B2  2D                 	db	45
  2075  0076B3  20                 	db	32
  2076  0076B4  44                 	db	68	;'D'
  2077  0076B5  69                 	db	105	;'i'
  2078  0076B6  73                 	db	115	;'s'
  2079  0076B7  70                 	db	112	;'p'
  2080  0076B8  6C                 	db	108	;'l'
  2081  0076B9  61                 	db	97	;'a'
  2082  0076BA  79                 	db	121	;'y'
  2083  0076BB  20                 	db	32
  2084  0076BC  73                 	db	115	;'s'
  2085  0076BD  65                 	db	101	;'e'
  2086  0076BE  6C                 	db	108	;'l'
  2087  0076BF  65                 	db	101	;'e'
  2088  0076C0  63                 	db	99	;'c'
  2089  0076C1  74                 	db	116	;'t'
  2090  0076C2  65                 	db	101	;'e'
  2091  0076C3  64                 	db	100	;'d'
  2092  0076C4  20                 	db	32
  2093  0076C5  69                 	db	105	;'i'
  2094  0076C6  6E                 	db	110	;'n'
  2095  0076C7  74                 	db	116	;'t'
  2096  0076C8  65                 	db	101	;'e'
  2097  0076C9  72                 	db	114	;'r'
  2098  0076CA  66                 	db	102	;'f'
  2099  0076CB  61                 	db	97	;'a'
  2100  0076CC  63                 	db	99	;'c'
  2101  0076CD  65                 	db	101	;'e'
  2102  0076CE  20                 	db	32
  2103  0076CF  6D                 	db	109	;'m'
  2104  0076D0  6F                 	db	111	;'o'
  2105  0076D1  64                 	db	100	;'d'
  2106  0076D2  65                 	db	101	;'e'
  2107  0076D3  2E                 	db	46
  2108  0076D4  0D                 	db	13
  2109  0076D5  0A                 	db	10
  2110  0076D6  00                 	db	0
  2111  0076D7                     STR_209:
  2112  0076D7  4F                 	db	79	;'O'
  2113  0076D8  50                 	db	80	;'P'
  2114  0076D9  45                 	db	69	;'E'
  2115  0076DA  4E                 	db	78	;'N'
  2116  0076DB  20                 	db	32
  2117  0076DC  2D                 	db	45
  2118  0076DD  20                 	db	32
  2119  0076DE  4F                 	db	79	;'O'
  2120  0076DF  70                 	db	112	;'p'
  2121  0076E0  65                 	db	101	;'e'
  2122  0076E1  6E                 	db	110	;'n'
  2123  0076E2  20                 	db	32
  2124  0076E3  43                 	db	67	;'C'
  2125  0076E4  41                 	db	65	;'A'
  2126  0076E5  4E                 	db	78	;'N'
  2127  0076E6  20                 	db	32
  2128  0076E7  69                 	db	105	;'i'
  2129  0076E8  6E                 	db	110	;'n'
  2130  0076E9  74                 	db	116	;'t'
  2131  0076EA  65                 	db	101	;'e'
  2132  0076EB  72                 	db	114	;'r'
  2133  0076EC  66                 	db	102	;'f'
  2134  0076ED  61                 	db	97	;'a'
  2135  0076EE  63                 	db	99	;'c'
  2136  0076EF  65                 	db	101	;'e'
  2137  0076F0  20                 	db	32
  2138  0076F1  69                 	db	105	;'i'
  2139  0076F2  6E                 	db	110	;'n'
  2140  0076F3  20                 	db	32
  2141  0076F4  6E                 	db	110	;'n'
  2142  0076F5  6F                 	db	111	;'o'
  2143  0076F6  72                 	db	114	;'r'
  2144  0076F7  6D                 	db	109	;'m'
  2145  0076F8  61                 	db	97	;'a'
  2146  0076F9  6C                 	db	108	;'l'
  2147  0076FA  20                 	db	32
  2148  0076FB  6D                 	db	109	;'m'
  2149  0076FC  6F                 	db	111	;'o'
  2150  0076FD  64                 	db	100	;'d'
  2151  0076FE  65                 	db	101	;'e'
  2152  0076FF  2E                 	db	46
  2153  007700  0D                 	db	13
  2154  007701  0A                 	db	10
  2155  007702  00                 	db	0
  2156  007703                     STR_115:
  2157  007703  2B                 	db	43
  2158  007704  4F                 	db	79	;'O'
  2159  007705  4B                 	db	75	;'K'
  2160  007706  20                 	db	32
  2161  007707  2D                 	db	45
  2162  007708  20                 	db	32
  2163  007709  4E                 	db	78	;'N'
  2164  00770A  75                 	db	117	;'u'
  2165  00770B  6D                 	db	109	;'m'
  2166  00770C  65                 	db	101	;'e'
  2167  00770D  72                 	db	114	;'r'
  2168  00770E  69                 	db	105	;'i'
  2169  00770F  63                 	db	99	;'c'
  2170  007710  61                 	db	97	;'a'
  2171  007711  6C                 	db	108	;'l'
  2172  007712  20                 	db	32
  2173  007713  6F                 	db	111	;'o'
  2174  007714  75                 	db	117	;'u'
  2175  007715  74                 	db	116	;'t'
  2176  007716  70                 	db	112	;'p'
  2177  007717  75                 	db	117	;'u'
  2178  007718  74                 	db	116	;'t'
  2179  007719  20                 	db	32
  2180  00771A  6E                 	db	110	;'n'
  2181  00771B  6F                 	db	111	;'o'
  2182  00771C  77                 	db	119	;'w'
  2183  00771D  20                 	db	32
  2184  00771E  69                 	db	105	;'i'
  2185  00771F  6E                 	db	110	;'n'
  2186  007720  20                 	db	32
  2187  007721  68                 	db	104	;'h'
  2188  007722  65                 	db	101	;'e'
  2189  007723  78                 	db	120	;'x'
  2190  007724  61                 	db	97	;'a'
  2191  007725  64                 	db	100	;'d'
  2192  007726  65                 	db	101	;'e'
  2193  007727  63                 	db	99	;'c'
  2194  007728  69                 	db	105	;'i'
  2195  007729  6D                 	db	109	;'m'
  2196  00772A  61                 	db	97	;'a'
  2197  00772B  6C                 	db	108	;'l'
  2198  00772C  0D                 	db	13
  2199  00772D  0A                 	db	10
  2200  00772E  00                 	db	0
  2201  00772F                     STR_92:
  2202  00772F  2D                 	db	45
  2203  007730  45                 	db	69	;'E'
  2204  007731  52                 	db	82	;'R'
  2205  007732  52                 	db	82	;'R'
  2206  007733  4F                 	db	79	;'O'
  2207  007734  52                 	db	82	;'R'
  2208  007735  20                 	db	32
  2209  007736  2D                 	db	45
  2210  007737  20                 	db	32
  2211  007738  66                 	db	102	;'f'
  2212  007739  69                 	db	105	;'i'
  2213  00773A  6C                 	db	108	;'l'
  2214  00773B  74                 	db	116	;'t'
  2215  00773C  65                 	db	101	;'e'
  2216  00773D  72                 	db	114	;'r'
  2217  00773E  20                 	db	32
  2218  00773F  66                 	db	102	;'f'
  2219  007740  6F                 	db	111	;'o'
  2220  007741  72                 	db	114	;'r'
  2221  007742  20                 	db	32
  2222  007743  70                 	db	112	;'p'
  2223  007744  72                 	db	114	;'r'
  2224  007745  69                 	db	105	;'i'
  2225  007746  6F                 	db	111	;'o'
  2226  007747  72                 	db	114	;'r'
  2227  007748  69                 	db	105	;'i'
  2228  007749  74                 	db	116	;'t'
  2229  00774A  79                 	db	121	;'y'
  2230  00774B  20                 	db	32
  2231  00774C  69                 	db	105	;'i'
  2232  00774D  73                 	db	115	;'s'
  2233  00774E  20                 	db	32
  2234  00774F  6D                 	db	109	;'m'
  2235  007750  69                 	db	105	;'i'
  2236  007751  73                 	db	115	;'s'
  2237  007752  73                 	db	115	;'s'
  2238  007753  69                 	db	105	;'i'
  2239  007754  6E                 	db	110	;'n'
  2240  007755  67                 	db	103	;'g'
  2241  007756  0D                 	db	13
  2242  007757  0A                 	db	10
  2243  007758  00                 	db	0
  2244  007759                     STR_98:
  2245  007759  2D                 	db	45
  2246  00775A  45                 	db	69	;'E'
  2247  00775B  52                 	db	82	;'R'
  2248  00775C  52                 	db	82	;'R'
  2249  00775D  4F                 	db	79	;'O'
  2250  00775E  52                 	db	82	;'R'
  2251  00775F  20                 	db	32
  2252  007760  2D                 	db	45
  2253  007761  20                 	db	32
  2254  007762  66                 	db	102	;'f'
  2255  007763  69                 	db	105	;'i'
  2256  007764  6C                 	db	108	;'l'
  2257  007765  74                 	db	116	;'t'
  2258  007766  65                 	db	101	;'e'
  2259  007767  72                 	db	114	;'r'
  2260  007768  20                 	db	32
  2261  007769  66                 	db	102	;'f'
  2262  00776A  6F                 	db	111	;'o'
  2263  00776B  72                 	db	114	;'r'
  2264  00776C  20                 	db	32
  2265  00776D  6E                 	db	110	;'n'
  2266  00776E  69                 	db	105	;'i'
  2267  00776F  64                 	db	100	;'d'
  2268  007770  65                 	db	101	;'e'
  2269  007771  20                 	db	32
  2270  007772  69                 	db	105	;'i'
  2271  007773  64                 	db	100	;'d'
  2272  007774  20                 	db	32
  2273  007775  69                 	db	105	;'i'
  2274  007776  73                 	db	115	;'s'
  2275  007777  20                 	db	32
  2276  007778  6D                 	db	109	;'m'
  2277  007779  69                 	db	105	;'i'
  2278  00777A  73                 	db	115	;'s'
  2279  00777B  73                 	db	115	;'s'
  2280  00777C  69                 	db	105	;'i'
  2281  00777D  6E                 	db	110	;'n'
  2282  00777E  67                 	db	103	;'g'
  2283  00777F  0D                 	db	13
  2284  007780  0A                 	db	10
  2285  007781  00                 	db	0
  2286  007782                     STR_221:
  2287  007782  48                 	db	72	;'H'
  2288  007783  45                 	db	69	;'E'
  2289  007784  4C                 	db	76	;'L'
  2290  007785  50                 	db	80	;'P'
  2291  007786  20                 	db	32
  2292  007787  2D                 	db	45
  2293  007788  20                 	db	32
  2294  007789  44                 	db	68	;'D'
  2295  00778A  69                 	db	105	;'i'
  2296  00778B  73                 	db	115	;'s'
  2297  00778C  70                 	db	112	;'p'
  2298  00778D  6C                 	db	108	;'l'
  2299  00778E  61                 	db	97	;'a'
  2300  00778F  79                 	db	121	;'y'
  2301  007790  20                 	db	32
  2302  007791  74                 	db	116	;'t'
  2303  007792  68                 	db	104	;'h'
  2304  007793  69                 	db	105	;'i'
  2305  007794  73                 	db	115	;'s'
  2306  007795  20                 	db	32
  2307  007796  68                 	db	104	;'h'
  2308  007797  65                 	db	101	;'e'
  2309  007798  6C                 	db	108	;'l'
  2310  007799  70                 	db	112	;'p'
  2311  00779A  20                 	db	32
  2312  00779B  69                 	db	105	;'i'
  2313  00779C  6E                 	db	110	;'n'
  2314  00779D  66                 	db	102	;'f'
  2315  00779E  6F                 	db	111	;'o'
  2316  00779F  72                 	db	114	;'r'
  2317  0077A0  6D                 	db	109	;'m'
  2318  0077A1  61                 	db	97	;'a'
  2319  0077A2  74                 	db	116	;'t'
  2320  0077A3  69                 	db	105	;'i'
  2321  0077A4  6F                 	db	111	;'o'
  2322  0077A5  6E                 	db	110	;'n'
  2323  0077A6  2E                 	db	46
  2324  0077A7  0D                 	db	13
  2325  0077A8  0A                 	db	10
  2326  0077A9  00                 	db	0
  2327  0077AA                     STR_105:
  2328  0077AA  2D                 	db	45
  2329  0077AB  45                 	db	69	;'E'
  2330  0077AC  52                 	db	82	;'R'
  2331  0077AD  52                 	db	82	;'R'
  2332  0077AE  4F                 	db	79	;'O'
  2333  0077AF  52                 	db	82	;'R'
  2334  0077B0  20                 	db	32
  2335  0077B1  2D                 	db	45
  2336  0077B2  20                 	db	32
  2337  0077B3  6D                 	db	109	;'m'
  2338  0077B4  61                 	db	97	;'a'
  2339  0077B5  73                 	db	115	;'s'
  2340  0077B6  6B                 	db	107	;'k'
  2341  0077B7  20                 	db	32
  2342  0077B8  66                 	db	102	;'f'
  2343  0077B9  6F                 	db	111	;'o'
  2344  0077BA  72                 	db	114	;'r'
  2345  0077BB  20                 	db	32
  2346  0077BC  70                 	db	112	;'p'
  2347  0077BD  72                 	db	114	;'r'
  2348  0077BE  69                 	db	105	;'i'
  2349  0077BF  6F                 	db	111	;'o'
  2350  0077C0  72                 	db	114	;'r'
  2351  0077C1  69                 	db	105	;'i'
  2352  0077C2  74                 	db	116	;'t'
  2353  0077C3  79                 	db	121	;'y'
  2354  0077C4  20                 	db	32
  2355  0077C5  69                 	db	105	;'i'
  2356  0077C6  73                 	db	115	;'s'
  2357  0077C7  20                 	db	32
  2358  0077C8  6D                 	db	109	;'m'
  2359  0077C9  69                 	db	105	;'i'
  2360  0077CA  73                 	db	115	;'s'
  2361  0077CB  73                 	db	115	;'s'
  2362  0077CC  69                 	db	105	;'i'
  2363  0077CD  6E                 	db	110	;'n'
  2364  0077CE  67                 	db	103	;'g'
  2365  0077CF  0D                 	db	13
  2366  0077D0  0A                 	db	10
  2367  0077D1  00                 	db	0
  2368  0077D2                     STR_117:
  2369  0077D2  2B                 	db	43
  2370  0077D3  4F                 	db	79	;'O'
  2371  0077D4  4B                 	db	75	;'K'
  2372  0077D5  20                 	db	32
  2373  0077D6  2D                 	db	45
  2374  0077D7  20                 	db	32
  2375  0077D8  4E                 	db	78	;'N'
  2376  0077D9  75                 	db	117	;'u'
  2377  0077DA  6D                 	db	109	;'m'
  2378  0077DB  65                 	db	101	;'e'
  2379  0077DC  72                 	db	114	;'r'
  2380  0077DD  69                 	db	105	;'i'
  2381  0077DE  63                 	db	99	;'c'
  2382  0077DF  61                 	db	97	;'a'
  2383  0077E0  6C                 	db	108	;'l'
  2384  0077E1  20                 	db	32
  2385  0077E2  6F                 	db	111	;'o'
  2386  0077E3  75                 	db	117	;'u'
  2387  0077E4  74                 	db	116	;'t'
  2388  0077E5  70                 	db	112	;'p'
  2389  0077E6  75                 	db	117	;'u'
  2390  0077E7  74                 	db	116	;'t'
  2391  0077E8  20                 	db	32
  2392  0077E9  6E                 	db	110	;'n'
  2393  0077EA  6F                 	db	111	;'o'
  2394  0077EB  77                 	db	119	;'w'
  2395  0077EC  20                 	db	32
  2396  0077ED  69                 	db	105	;'i'
  2397  0077EE  6E                 	db	110	;'n'
  2398  0077EF  20                 	db	32
  2399  0077F0  64                 	db	100	;'d'
  2400  0077F1  65                 	db	101	;'e'
  2401  0077F2  63                 	db	99	;'c'
  2402  0077F3  69                 	db	105	;'i'
  2403  0077F4  6D                 	db	109	;'m'
  2404  0077F5  61                 	db	97	;'a'
  2405  0077F6  6C                 	db	108	;'l'
  2406  0077F7  0D                 	db	13
  2407  0077F8  0A                 	db	10
  2408  0077F9  00                 	db	0
  2409  0077FA                     STR_90:
  2410  0077FA  2D                 	db	45
  2411  0077FB  45                 	db	69	;'E'
  2412  0077FC  52                 	db	82	;'R'
  2413  0077FD  52                 	db	82	;'R'
  2414  0077FE  4F                 	db	79	;'O'
  2415  0077FF  52                 	db	82	;'R'
  2416  007800  20                 	db	32
  2417  007801  2D                 	db	45
  2418  007802  20                 	db	32
  2419  007803  4E                 	db	78	;'N'
  2420  007804  6F                 	db	111	;'o'
  2421  007805  20                 	db	32
  2422  007806  66                 	db	102	;'f'
  2423  007807  69                 	db	105	;'i'
  2424  007808  6C                 	db	108	;'l'
  2425  007809  74                 	db	116	;'t'
  2426  00780A  65                 	db	101	;'e'
  2427  00780B  72                 	db	114	;'r'
  2428  00780C  20                 	db	32
  2429  00780D  6E                 	db	110	;'n'
  2430  00780E  75                 	db	117	;'u'
  2431  00780F  6D                 	db	109	;'m'
  2432  007810  62                 	db	98	;'b'
  2433  007811  65                 	db	101	;'e'
  2434  007812  72                 	db	114	;'r'
  2435  007813  20                 	db	32
  2436  007814  73                 	db	115	;'s'
  2437  007815  70                 	db	112	;'p'
  2438  007816  65                 	db	101	;'e'
  2439  007817  63                 	db	99	;'c'
  2440  007818  69                 	db	105	;'i'
  2441  007819  66                 	db	102	;'f'
  2442  00781A  69                 	db	105	;'i'
  2443  00781B  65                 	db	101	;'e'
  2444  00781C  64                 	db	100	;'d'
  2445  00781D  2E                 	db	46
  2446  00781E  0D                 	db	13
  2447  00781F  0A                 	db	10
  2448  007820  00                 	db	0
  2449  007821                     STR_220:
  2450  007821  45                 	db	69	;'E'
  2451  007822  52                 	db	82	;'R'
  2452  007823  52                 	db	82	;'R'
  2453  007824  20                 	db	32
  2454  007825  2D                 	db	45
  2455  007826  20                 	db	32
  2456  007827  44                 	db	68	;'D'
  2457  007828  69                 	db	105	;'i'
  2458  007829  73                 	db	115	;'s'
  2459  00782A  70                 	db	112	;'p'
  2460  00782B  6C                 	db	108	;'l'
  2461  00782C  61                 	db	97	;'a'
  2462  00782D  79                 	db	121	;'y'
  2463  00782E  20                 	db	32
  2464  00782F  43                 	db	67	;'C'
  2465  007830  41                 	db	65	;'A'
  2466  007831  4E                 	db	78	;'N'
  2467  007832  20                 	db	32
  2468  007833  65                 	db	101	;'e'
  2469  007834  72                 	db	114	;'r'
  2470  007835  72                 	db	114	;'r'
  2471  007836  6F                 	db	111	;'o'
  2472  007837  72                 	db	114	;'r'
  2473  007838  20                 	db	32
  2474  007839  69                 	db	105	;'i'
  2475  00783A  6E                 	db	110	;'n'
  2476  00783B  66                 	db	102	;'f'
  2477  00783C  6F                 	db	111	;'o'
  2478  00783D  72                 	db	114	;'r'
  2479  00783E  6D                 	db	109	;'m'
  2480  00783F  61                 	db	97	;'a'
  2481  007840  74                 	db	116	;'t'
  2482  007841  69                 	db	105	;'i'
  2483  007842  6F                 	db	111	;'o'
  2484  007843  6E                 	db	110	;'n'
  2485  007844  2E                 	db	46
  2486  007845  0D                 	db	13
  2487  007846  0A                 	db	10
  2488  007847  00                 	db	0
  2489  007848                     STR_206:
  2490  007848  48                 	db	72	;'H'
  2491  007849  65                 	db	101	;'e'
  2492  00784A  6C                 	db	108	;'l'
  2493  00784B  70                 	db	112	;'p'
  2494  00784C  20                 	db	32
  2495  00784D  66                 	db	102	;'f'
  2496  00784E  6F                 	db	111	;'o'
  2497  00784F  72                 	db	114	;'r'
  2498  007850  20                 	db	32
  2499  007851  74                 	db	116	;'t'
  2500  007852  68                 	db	104	;'h'
  2501  007853  65                 	db	101	;'e'
  2502  007854  20                 	db	32
  2503  007855  46                 	db	70	;'F'
  2504  007856  72                 	db	114	;'r'
  2505  007857  61                 	db	97	;'a'
  2506  007858  6E                 	db	110	;'n'
  2507  007859  6B                 	db	107	;'k'
  2508  00785A  66                 	db	102	;'f'
  2509  00785B  75                 	db	117	;'u'
  2510  00785C  72                 	db	114	;'r'
  2511  00785D  74                 	db	116	;'t'
  2512  00785E  20                 	db	32
  2513  00785F  52                 	db	82	;'R'
  2514  007860  53                 	db	83	;'S'
  2515  007861  2D                 	db	45
  2516  007862  32                 	db	50	;'2'
  2517  007863  33                 	db	51	;'3'
  2518  007864  32                 	db	50	;'2'
  2519  007865  20                 	db	32
  2520  007866  6D                 	db	109	;'m'
  2521  007867  6F                 	db	111	;'o'
  2522  007868  64                 	db	100	;'d'
  2523  007869  75                 	db	117	;'u'
  2524  00786A  6C                 	db	108	;'l'
  2525  00786B  65                 	db	101	;'e'
  2526  00786C  0D                 	db	13
  2527  00786D  0A                 	db	10
  2528  00786E  00                 	db	0
  2529  00786F                     STR_111:
  2530  00786F  2D                 	db	45
  2531  007870  45                 	db	69	;'E'
  2532  007871  52                 	db	82	;'R'
  2533  007872  52                 	db	82	;'R'
  2534  007873  4F                 	db	79	;'O'
  2535  007874  52                 	db	82	;'R'
  2536  007875  20                 	db	32
  2537  007876  2D                 	db	45
  2538  007877  20                 	db	32
  2539  007878  6D                 	db	109	;'m'
  2540  007879  61                 	db	97	;'a'
  2541  00787A  73                 	db	115	;'s'
  2542  00787B  6B                 	db	107	;'k'
  2543  00787C  20                 	db	32
  2544  00787D  66                 	db	102	;'f'
  2545  00787E  6F                 	db	111	;'o'
  2546  00787F  72                 	db	114	;'r'
  2547  007880  20                 	db	32
  2548  007881  6E                 	db	110	;'n'
  2549  007882  69                 	db	105	;'i'
  2550  007883  64                 	db	100	;'d'
  2551  007884  65                 	db	101	;'e'
  2552  007885  20                 	db	32
  2553  007886  69                 	db	105	;'i'
  2554  007887  64                 	db	100	;'d'
  2555  007888  20                 	db	32
  2556  007889  69                 	db	105	;'i'
  2557  00788A  73                 	db	115	;'s'
  2558  00788B  20                 	db	32
  2559  00788C  6D                 	db	109	;'m'
  2560  00788D  69                 	db	105	;'i'
  2561  00788E  73                 	db	115	;'s'
  2562  00788F  73                 	db	115	;'s'
  2563  007890  69                 	db	105	;'i'
  2564  007891  6E                 	db	110	;'n'
  2565  007892  67                 	db	103	;'g'
  2566  007893  0D                 	db	13
  2567  007894  0A                 	db	10
  2568  007895  00                 	db	0
  2569  007896                     STR_94:
  2570  007896  2D                 	db	45
  2571  007897  45                 	db	69	;'E'
  2572  007898  52                 	db	82	;'R'
  2573  007899  52                 	db	82	;'R'
  2574  00789A  4F                 	db	79	;'O'
  2575  00789B  52                 	db	82	;'R'
  2576  00789C  20                 	db	32
  2577  00789D  2D                 	db	45
  2578  00789E  20                 	db	32
  2579  00789F  66                 	db	102	;'f'
  2580  0078A0  69                 	db	105	;'i'
  2581  0078A1  6C                 	db	108	;'l'
  2582  0078A2  74                 	db	116	;'t'
  2583  0078A3  65                 	db	101	;'e'
  2584  0078A4  72                 	db	114	;'r'
  2585  0078A5  20                 	db	32
  2586  0078A6  66                 	db	102	;'f'
  2587  0078A7  6F                 	db	111	;'o'
  2588  0078A8  72                 	db	114	;'r'
  2589  0078A9  20                 	db	32
  2590  0078AA  63                 	db	99	;'c'
  2591  0078AB  6C                 	db	108	;'l'
  2592  0078AC  61                 	db	97	;'a'
  2593  0078AD  73                 	db	115	;'s'
  2594  0078AE  73                 	db	115	;'s'
  2595  0078AF  20                 	db	32
  2596  0078B0  69                 	db	105	;'i'
  2597  0078B1  73                 	db	115	;'s'
  2598  0078B2  20                 	db	32
  2599  0078B3  6D                 	db	109	;'m'
  2600  0078B4  69                 	db	105	;'i'
  2601  0078B5  73                 	db	115	;'s'
  2602  0078B6  73                 	db	115	;'s'
  2603  0078B7  69                 	db	105	;'i'
  2604  0078B8  6E                 	db	110	;'n'
  2605  0078B9  67                 	db	103	;'g'
  2606  0078BA  0D                 	db	13
  2607  0078BB  0A                 	db	10
  2608  0078BC  00                 	db	0
  2609  0078BD                     STR_237:
  2610  0078BD  20                 	db	32
  2611  0078BE  20                 	db	32
  2612  0078BF  20                 	db	32
  2613  0078C0  20                 	db	32
  2614  0078C1  20                 	db	32
  2615  0078C2  20                 	db	32
  2616  0078C3  20                 	db	32
  2617  0078C4  20                 	db	32
  2618  0078C5  20                 	db	32
  2619  0078C6  20                 	db	32
  2620  0078C7  20                 	db	32
  2621  0078C8  4D                 	db	77	;'M'
  2622  0078C9  6F                 	db	111	;'o'
  2623  0078CA  64                 	db	100	;'d'
  2624  0078CB  65                 	db	101	;'e'
  2625  0078CC  73                 	db	115	;'s'
  2626  0078CD  3A                 	db	58	;':'
  2627  0078CE  20                 	db	32
  2628  0078CF  76                 	db	118	;'v'
  2629  0078D0  65                 	db	101	;'e'
  2630  0078D1  72                 	db	114	;'r'
  2631  0078D2  62                 	db	98	;'b'
  2632  0078D3  6F                 	db	111	;'o'
  2633  0078D4  73                 	db	115	;'s'
  2634  0078D5  65                 	db	101	;'e'
  2635  0078D6  7C                 	db	124
  2636  0078D7  76                 	db	118	;'v'
  2637  0078D8  73                 	db	115	;'s'
  2638  0078D9  63                 	db	99	;'c'
  2639  0078DA  70                 	db	112	;'p'
  2640  0078DB  7C                 	db	124
  2641  0078DC  73                 	db	115	;'s'
  2642  0078DD  6C                 	db	108	;'l'
  2643  0078DE  63                 	db	99	;'c'
  2644  0078DF  61                 	db	97	;'a'
  2645  0078E0  6E                 	db	110	;'n'
  2646  0078E1  0D                 	db	13
  2647  0078E2  0A                 	db	10
  2648  0078E3  00                 	db	0
  2649  0078E4                     STR_96:
  2650  0078E4  2D                 	db	45
  2651  0078E5  45                 	db	69	;'E'
  2652  0078E6  52                 	db	82	;'R'
  2653  0078E7  52                 	db	82	;'R'
  2654  0078E8  4F                 	db	79	;'O'
  2655  0078E9  52                 	db	82	;'R'
  2656  0078EA  20                 	db	32
  2657  0078EB  2D                 	db	45
  2658  0078EC  20                 	db	32
  2659  0078ED  66                 	db	102	;'f'
  2660  0078EE  69                 	db	105	;'i'
  2661  0078EF  6C                 	db	108	;'l'
  2662  0078F0  74                 	db	116	;'t'
  2663  0078F1  65                 	db	101	;'e'
  2664  0078F2  72                 	db	114	;'r'
  2665  0078F3  20                 	db	32
  2666  0078F4  66                 	db	102	;'f'
  2667  0078F5  6F                 	db	111	;'o'
  2668  0078F6  72                 	db	114	;'r'
  2669  0078F7  20                 	db	32
  2670  0078F8  74                 	db	116	;'t'
  2671  0078F9  79                 	db	121	;'y'
  2672  0078FA  70                 	db	112	;'p'
  2673  0078FB  65                 	db	101	;'e'
  2674  0078FC  20                 	db	32
  2675  0078FD  69                 	db	105	;'i'
  2676  0078FE  73                 	db	115	;'s'
  2677  0078FF  20                 	db	32
  2678  007900  6D                 	db	109	;'m'
  2679  007901  69                 	db	105	;'i'
  2680  007902  73                 	db	115	;'s'
  2681  007903  73                 	db	115	;'s'
  2682  007904  69                 	db	105	;'i'
  2683  007905  6E                 	db	110	;'n'
  2684  007906  67                 	db	103	;'g'
  2685  007907  0D                 	db	13
  2686  007908  0A                 	db	10
  2687  007909  00                 	db	0
  2688  00790A                     STR_103:
  2689  00790A  2D                 	db	45
  2690  00790B  45                 	db	69	;'E'
  2691  00790C  52                 	db	82	;'R'
  2692  00790D  52                 	db	82	;'R'
  2693  00790E  4F                 	db	79	;'O'
  2694  00790F  52                 	db	82	;'R'
  2695  007910  20                 	db	32
  2696  007911  2D                 	db	45
  2697  007912  20                 	db	32
  2698  007913  4E                 	db	78	;'N'
  2699  007914  6F                 	db	111	;'o'
  2700  007915  20                 	db	32
  2701  007916  6D                 	db	109	;'m'
  2702  007917  61                 	db	97	;'a'
  2703  007918  73                 	db	115	;'s'
  2704  007919  6B                 	db	107	;'k'
  2705  00791A  20                 	db	32
  2706  00791B  6E                 	db	110	;'n'
  2707  00791C  75                 	db	117	;'u'
  2708  00791D  6D                 	db	109	;'m'
  2709  00791E  62                 	db	98	;'b'
  2710  00791F  65                 	db	101	;'e'
  2711  007920  72                 	db	114	;'r'
  2712  007921  20                 	db	32
  2713  007922  73                 	db	115	;'s'
  2714  007923  70                 	db	112	;'p'
  2715  007924  65                 	db	101	;'e'
  2716  007925  63                 	db	99	;'c'
  2717  007926  69                 	db	105	;'i'
  2718  007927  66                 	db	102	;'f'
  2719  007928  69                 	db	105	;'i'
  2720  007929  65                 	db	101	;'e'
  2721  00792A  64                 	db	100	;'d'
  2722  00792B  2E                 	db	46
  2723  00792C  0D                 	db	13
  2724  00792D  0A                 	db	10
  2725  00792E  00                 	db	0
  2726  00792F                     STR_1:
  2727  00792F  0D                 	db	13
  2728  007930  0A                 	db	10
  2729  007931  46                 	db	70	;'F'
  2730  007932  72                 	db	114	;'r'
  2731  007933  61                 	db	97	;'a'
  2732  007934  6E                 	db	110	;'n'
  2733  007935  6B                 	db	107	;'k'
  2734  007936  66                 	db	102	;'f'
  2735  007937  75                 	db	117	;'u'
  2736  007938  72                 	db	114	;'r'
  2737  007939  74                 	db	116	;'t'
  2738  00793A  20                 	db	32
  2739  00793B  52                 	db	82	;'R'
  2740  00793C  53                 	db	83	;'S'
  2741  00793D  2D                 	db	45
  2742  00793E  32                 	db	50	;'2'
  2743  00793F  33                 	db	51	;'3'
  2744  007940  32                 	db	50	;'2'
  2745  007941  20                 	db	32
  2746  007942  43                 	db	67	;'C'
  2747  007943  41                 	db	65	;'A'
  2748  007944  4E                 	db	78	;'N'
  2749  007945  34                 	db	52	;'4'
  2750  007946  56                 	db	86	;'V'
  2751  007947  53                 	db	83	;'S'
  2752  007948  43                 	db	67	;'C'
  2753  007949  50                 	db	80	;'P'
  2754  00794A  20                 	db	32
  2755  00794B  6D                 	db	109	;'m'
  2756  00794C  6F                 	db	111	;'o'
  2757  00794D  64                 	db	100	;'d'
  2758  00794E  75                 	db	117	;'u'
  2759  00794F  6C                 	db	108	;'l'
  2760  007950  65                 	db	101	;'e'
  2761  007951  0D                 	db	13
  2762  007952  0A                 	db	10
  2763  007953  00                 	db	0
  2764  007954                     STR_107:
  2765  007954  2D                 	db	45
  2766  007955  45                 	db	69	;'E'
  2767  007956  52                 	db	82	;'R'
  2768  007957  52                 	db	82	;'R'
  2769  007958  4F                 	db	79	;'O'
  2770  007959  52                 	db	82	;'R'
  2771  00795A  20                 	db	32
  2772  00795B  2D                 	db	45
  2773  00795C  20                 	db	32
  2774  00795D  6D                 	db	109	;'m'
  2775  00795E  61                 	db	97	;'a'
  2776  00795F  73                 	db	115	;'s'
  2777  007960  6B                 	db	107	;'k'
  2778  007961  20                 	db	32
  2779  007962  66                 	db	102	;'f'
  2780  007963  6F                 	db	111	;'o'
  2781  007964  72                 	db	114	;'r'
  2782  007965  20                 	db	32
  2783  007966  63                 	db	99	;'c'
  2784  007967  6C                 	db	108	;'l'
  2785  007968  61                 	db	97	;'a'
  2786  007969  73                 	db	115	;'s'
  2787  00796A  73                 	db	115	;'s'
  2788  00796B  20                 	db	32
  2789  00796C  69                 	db	105	;'i'
  2790  00796D  73                 	db	115	;'s'
  2791  00796E  20                 	db	32
  2792  00796F  6D                 	db	109	;'m'
  2793  007970  69                 	db	105	;'i'
  2794  007971  73                 	db	115	;'s'
  2795  007972  73                 	db	115	;'s'
  2796  007973  69                 	db	105	;'i'
  2797  007974  6E                 	db	110	;'n'
  2798  007975  67                 	db	103	;'g'
  2799  007976  0D                 	db	13
  2800  007977  0A                 	db	10
  2801  007978  00                 	db	0
  2802  007979                     STR_109:
  2803  007979  2D                 	db	45
  2804  00797A  45                 	db	69	;'E'
  2805  00797B  52                 	db	82	;'R'
  2806  00797C  52                 	db	82	;'R'
  2807  00797D  4F                 	db	79	;'O'
  2808  00797E  52                 	db	82	;'R'
  2809  00797F  20                 	db	32
  2810  007980  2D                 	db	45
  2811  007981  20                 	db	32
  2812  007982  6D                 	db	109	;'m'
  2813  007983  61                 	db	97	;'a'
  2814  007984  73                 	db	115	;'s'
  2815  007985  6B                 	db	107	;'k'
  2816  007986  20                 	db	32
  2817  007987  66                 	db	102	;'f'
  2818  007988  6F                 	db	111	;'o'
  2819  007989  72                 	db	114	;'r'
  2820  00798A  20                 	db	32
  2821  00798B  74                 	db	116	;'t'
  2822  00798C  79                 	db	121	;'y'
  2823  00798D  70                 	db	112	;'p'
  2824  00798E  65                 	db	101	;'e'
  2825  00798F  20                 	db	32
  2826  007990  69                 	db	105	;'i'
  2827  007991  73                 	db	115	;'s'
  2828  007992  20                 	db	32
  2829  007993  6D                 	db	109	;'m'
  2830  007994  69                 	db	105	;'i'
  2831  007995  73                 	db	115	;'s'
  2832  007996  73                 	db	115	;'s'
  2833  007997  69                 	db	105	;'i'
  2834  007998  6E                 	db	110	;'n'
  2835  007999  67                 	db	103	;'g'
  2836  00799A  0D                 	db	13
  2837  00799B  0A                 	db	10
  2838  00799C  00                 	db	0
  2839  00799D                     STR_3:
  2840  00799D  68                 	db	104	;'h'
  2841  00799E  74                 	db	116	;'t'
  2842  00799F  74                 	db	116	;'t'
  2843  0079A0  70                 	db	112	;'p'
  2844  0079A1  3A                 	db	58	;':'
  2845  0079A2  2F                 	db	47
  2846  0079A3  2F                 	db	47
  2847  0079A4  77                 	db	119	;'w'
  2848  0079A5  77                 	db	119	;'w'
  2849  0079A6  77                 	db	119	;'w'
  2850  0079A7  2E                 	db	46
  2851  0079A8  70                 	db	112	;'p'
  2852  0079A9  61                 	db	97	;'a'
  2853  0079AA  72                 	db	114	;'r'
  2854  0079AB  61                 	db	97	;'a'
  2855  0079AC  64                 	db	100	;'d'
  2856  0079AD  69                 	db	105	;'i'
  2857  0079AE  73                 	db	115	;'s'
  2858  0079AF  65                 	db	101	;'e'
  2859  0079B0  6F                 	db	111	;'o'
  2860  0079B1  66                 	db	102	;'f'
  2861  0079B2  74                 	db	116	;'t'
  2862  0079B3  68                 	db	104	;'h'
  2863  0079B4  65                 	db	101	;'e'
  2864  0079B5  66                 	db	102	;'f'
  2865  0079B6  72                 	db	114	;'r'
  2866  0079B7  6F                 	db	111	;'o'
  2867  0079B8  67                 	db	103	;'g'
  2868  0079B9  2E                 	db	46
  2869  0079BA  63                 	db	99	;'c'
  2870  0079BB  6F                 	db	111	;'o'
  2871  0079BC  6D                 	db	109	;'m'
  2872  0079BD  0D                 	db	13
  2873  0079BE  0A                 	db	10
  2874  0079BF  00                 	db	0
  2875  0079C0                     STR_79:
  2876  0079C0  2B                 	db	43
  2877  0079C1  4F                 	db	79	;'O'
  2878  0079C2  4B                 	db	75	;'K'
  2879  0079C3  20                 	db	32
  2880  0079C4  2D                 	db	45
  2881  0079C5  20                 	db	32
  2882  0079C6  56                 	db	86	;'V'
  2883  0079C7  61                 	db	97	;'a'
  2884  0079C8  6C                 	db	108	;'l'
  2885  0079C9  75                 	db	117	;'u'
  2886  0079CA  65                 	db	101	;'e'
  2887  0079CB  20                 	db	32
  2888  0079CC  77                 	db	119	;'w'
  2889  0079CD  72                 	db	114	;'r'
  2890  0079CE  69                 	db	105	;'i'
  2891  0079CF  74                 	db	116	;'t'
  2892  0079D0  74                 	db	116	;'t'
  2893  0079D1  65                 	db	101	;'e'
  2894  0079D2  6E                 	db	110	;'n'
  2895  0079D3  20                 	db	32
  2896  0079D4  73                 	db	115	;'s'
  2897  0079D5  75                 	db	117	;'u'
  2898  0079D6  63                 	db	99	;'c'
  2899  0079D7  63                 	db	99	;'c'
  2900  0079D8  65                 	db	101	;'e'
  2901  0079D9  73                 	db	115	;'s'
  2902  0079DA  73                 	db	115	;'s'
  2903  0079DB  66                 	db	102	;'f'
  2904  0079DC  75                 	db	117	;'u'
  2905  0079DD  6C                 	db	108	;'l'
  2906  0079DE  6C                 	db	108	;'l'
  2907  0079DF  79                 	db	121	;'y'
  2908  0079E0  0D                 	db	13
  2909  0079E1  0A                 	db	10
  2910  0079E2  00                 	db	0
  2911  0079E3                     STR_230:
  2912  0079E3  53                 	db	83	;'S'
  2913  0079E4  45                 	db	69	;'E'
  2914  0079E5  54                 	db	84	;'T'
  2915  0079E6  20                 	db	32
  2916  0079E7  2D                 	db	45
  2917  0079E8  20                 	db	32
  2918  0079E9  50                 	db	80	;'P'
  2919  0079EA  65                 	db	101	;'e'
  2920  0079EB  72                 	db	114	;'r'
  2921  0079EC  73                 	db	115	;'s'
  2922  0079ED  69                 	db	105	;'i'
  2923  0079EE  73                 	db	115	;'s'
  2924  0079EF  74                 	db	116	;'t'
  2925  0079F0  65                 	db	101	;'e'
  2926  0079F1  6E                 	db	110	;'n'
  2927  0079F2  74                 	db	116	;'t'
  2928  0079F3  20                 	db	32
  2929  0079F4  66                 	db	102	;'f'
  2930  0079F5  75                 	db	117	;'u'
  2931  0079F6  6E                 	db	110	;'n'
  2932  0079F7  63                 	db	99	;'c'
  2933  0079F8  74                 	db	116	;'t'
  2934  0079F9  69                 	db	105	;'i'
  2935  0079FA  6F                 	db	111	;'o'
  2936  0079FB  6E                 	db	110	;'n'
  2937  0079FC  61                 	db	97	;'a'
  2938  0079FD  6C                 	db	108	;'l'
  2939  0079FE  69                 	db	105	;'i'
  2940  0079FF  74                 	db	116	;'t'
  2941  007A00  79                 	db	121	;'y'
  2942  007A01  2E                 	db	46
  2943  007A02  0D                 	db	13
  2944  007A03  0A                 	db	10
  2945  007A04  00                 	db	0
  2946  007A05                     STR_64:
  2947  007A05  2D                 	db	45
  2948  007A06  45                 	db	69	;'E'
  2949  007A07  52                 	db	82	;'R'
  2950  007A08  52                 	db	82	;'R'
  2951  007A09  4F                 	db	79	;'O'
  2952  007A0A  52                 	db	82	;'R'
  2953  007A0B  20                 	db	32
  2954  007A0C  2D                 	db	45
  2955  007A0D  20                 	db	32
  2956  007A0E  55                 	db	85	;'U'
  2957  007A0F  6E                 	db	110	;'n'
  2958  007A10  61                 	db	97	;'a'
  2959  007A11  62                 	db	98	;'b'
  2960  007A12  6C                 	db	108	;'l'
  2961  007A13  65                 	db	101	;'e'
  2962  007A14  20                 	db	32
  2963  007A15  74                 	db	116	;'t'
  2964  007A16  6F                 	db	111	;'o'
  2965  007A17  20                 	db	32
  2966  007A18  72                 	db	114	;'r'
  2967  007A19  65                 	db	101	;'e'
  2968  007A1A  61                 	db	97	;'a'
  2969  007A1B  64                 	db	100	;'d'
  2970  007A1C  20                 	db	32
  2971  007A1D  72                 	db	114	;'r'
  2972  007A1E  65                 	db	101	;'e'
  2973  007A1F  67                 	db	103	;'g'
  2974  007A20  69                 	db	105	;'i'
  2975  007A21  73                 	db	115	;'s'
  2976  007A22  74                 	db	116	;'t'
  2977  007A23  65                 	db	101	;'e'
  2978  007A24  72                 	db	114	;'r'
  2979  007A25  20                 	db	32
  2980  007A26  00                 	db	0
  2981  007A27                     STR_219:
  2982  007A27  53                 	db	83	;'S'
  2983  007A28  54                 	db	84	;'T'
  2984  007A29  41                 	db	65	;'A'
  2985  007A2A  54                 	db	84	;'T'
  2986  007A2B  20                 	db	32
  2987  007A2C  2D                 	db	45
  2988  007A2D  20                 	db	32
  2989  007A2E  44                 	db	68	;'D'
  2990  007A2F  69                 	db	105	;'i'
  2991  007A30  73                 	db	115	;'s'
  2992  007A31  70                 	db	112	;'p'
  2993  007A32  6C                 	db	108	;'l'
  2994  007A33  61                 	db	97	;'a'
  2995  007A34  79                 	db	121	;'y'
  2996  007A35  20                 	db	32
  2997  007A36  43                 	db	67	;'C'
  2998  007A37  41                 	db	65	;'A'
  2999  007A38  4E                 	db	78	;'N'
  3000  007A39  20                 	db	32
  3001  007A3A  73                 	db	115	;'s'
  3002  007A3B  74                 	db	116	;'t'
  3003  007A3C  61                 	db	97	;'a'
  3004  007A3D  74                 	db	116	;'t'
  3005  007A3E  69                 	db	105	;'i'
  3006  007A3F  73                 	db	115	;'s'
  3007  007A40  74                 	db	116	;'t'
  3008  007A41  69                 	db	105	;'i'
  3009  007A42  63                 	db	99	;'c'
  3010  007A43  73                 	db	115	;'s'
  3011  007A44  2E                 	db	46
  3012  007A45  0D                 	db	13
  3013  007A46  0A                 	db	10
  3014  007A47  00                 	db	0
  3015  007A48                     STR_37:
  3016  007A48  2D                 	db	45
  3017  007A49  45                 	db	69	;'E'
  3018  007A4A  52                 	db	82	;'R'
  3019  007A4B  52                 	db	82	;'R'
  3020  007A4C  4F                 	db	79	;'O'
  3021  007A4D  52                 	db	82	;'R'
  3022  007A4E  20                 	db	32
  3023  007A4F  2D                 	db	45
  3024  007A50  20                 	db	32
  3025  007A51  46                 	db	70	;'F'
  3026  007A52  61                 	db	97	;'a'
  3027  007A53  69                 	db	105	;'i'
  3028  007A54  6C                 	db	108	;'l'
  3029  007A55  65                 	db	101	;'e'
  3030  007A56  64                 	db	100	;'d'
  3031  007A57  20                 	db	32
  3032  007A58  74                 	db	116	;'t'
  3033  007A59  6F                 	db	111	;'o'
  3034  007A5A  20                 	db	32
  3035  007A5B  73                 	db	115	;'s'
  3036  007A5C  65                 	db	101	;'e'
  3037  007A5D  6E                 	db	110	;'n'
  3038  007A5E  64                 	db	100	;'d'
  3039  007A5F  20                 	db	32
  3040  007A60  65                 	db	101	;'e'
  3041  007A61  76                 	db	118	;'v'
  3042  007A62  65                 	db	101	;'e'
  3043  007A63  6E                 	db	110	;'n'
  3044  007A64  74                 	db	116	;'t'
  3045  007A65  2E                 	db	46
  3046  007A66  0D                 	db	13
  3047  007A67  0A                 	db	10
  3048  007A68  00                 	db	0
  3049  007A69                     STR_130:
  3050  007A69  2D                 	db	45
  3051  007A6A  45                 	db	69	;'E'
  3052  007A6B  52                 	db	82	;'R'
  3053  007A6C  52                 	db	82	;'R'
  3054  007A6D  4F                 	db	79	;'O'
  3055  007A6E  52                 	db	82	;'R'
  3056  007A6F  20                 	db	32
  3057  007A70  2D                 	db	45
  3058  007A71  20                 	db	32
  3059  007A72  55                 	db	85	;'U'
  3060  007A73  6E                 	db	110	;'n'
  3061  007A74  6B                 	db	107	;'k'
  3062  007A75  6E                 	db	110	;'n'
  3063  007A76  6F                 	db	111	;'o'
  3064  007A77  77                 	db	119	;'w'
  3065  007A78  6E                 	db	110	;'n'
  3066  007A79  20                 	db	32
  3067  007A7A  27                 	db	39
  3068  007A7B  53                 	db	83	;'S'
  3069  007A7C  45                 	db	69	;'E'
  3070  007A7D  54                 	db	84	;'T'
  3071  007A7E  27                 	db	39
  3072  007A7F  20                 	db	32
  3073  007A80  63                 	db	99	;'c'
  3074  007A81  6F                 	db	111	;'o'
  3075  007A82  6D                 	db	109	;'m'
  3076  007A83  6D                 	db	109	;'m'
  3077  007A84  61                 	db	97	;'a'
  3078  007A85  6E                 	db	110	;'n'
  3079  007A86  64                 	db	100	;'d'
  3080  007A87  0D                 	db	13
  3081  007A88  0A                 	db	10
  3082  007A89  00                 	db	0
  3083  007A8A                     STR_80:
  3084  007A8A  2D                 	db	45
  3085  007A8B  45                 	db	69	;'E'
  3086  007A8C  52                 	db	82	;'R'
  3087  007A8D  52                 	db	82	;'R'
  3088  007A8E  4F                 	db	79	;'O'
  3089  007A8F  52                 	db	82	;'R'
  3090  007A90  20                 	db	32
  3091  007A91  2D                 	db	45
  3092  007A92  20                 	db	32
  3093  007A93  46                 	db	70	;'F'
  3094  007A94  61                 	db	97	;'a'
  3095  007A95  69                 	db	105	;'i'
  3096  007A96  6C                 	db	108	;'l'
  3097  007A97  65                 	db	101	;'e'
  3098  007A98  64                 	db	100	;'d'
  3099  007A99  20                 	db	32
  3100  007A9A  74                 	db	116	;'t'
  3101  007A9B  6F                 	db	111	;'o'
  3102  007A9C  20                 	db	32
  3103  007A9D  77                 	db	119	;'w'
  3104  007A9E  72                 	db	114	;'r'
  3105  007A9F  69                 	db	105	;'i'
  3106  007AA0  74                 	db	116	;'t'
  3107  007AA1  65                 	db	101	;'e'
  3108  007AA2  20                 	db	32
  3109  007AA3  76                 	db	118	;'v'
  3110  007AA4  61                 	db	97	;'a'
  3111  007AA5  6C                 	db	108	;'l'
  3112  007AA6  75                 	db	117	;'u'
  3113  007AA7  65                 	db	101	;'e'
  3114  007AA8  0D                 	db	13
  3115  007AA9  0A                 	db	10
  3116  007AAA  00                 	db	0
  3117  007AAB                     STR_53:
  3118  007AAB  2D                 	db	45
  3119  007AAC  45                 	db	69	;'E'
  3120  007AAD  52                 	db	82	;'R'
  3121  007AAE  52                 	db	82	;'R'
  3122  007AAF  4F                 	db	79	;'O'
  3123  007AB0  52                 	db	82	;'R'
  3124  007AB1  20                 	db	32
  3125  007AB2  2D                 	db	45
  3126  007AB3  20                 	db	32
  3127  007AB4  4E                 	db	78	;'N'
  3128  007AB5  65                 	db	101	;'e'
  3129  007AB6  65                 	db	101	;'e'
  3130  007AB7  64                 	db	100	;'d'
  3131  007AB8  73                 	db	115	;'s'
  3132  007AB9  20                 	db	32
  3133  007ABA  5B                 	db	91	;'['
  3134  007ABB  70                 	db	112	;'p'
  3135  007ABC  61                 	db	97	;'a'
  3136  007ABD  67                 	db	103	;'g'
  3137  007ABE  65                 	db	101	;'e'
  3138  007ABF  3A                 	db	58	;':'
  3139  007AC0  5D                 	db	93	;']'
  3140  007AC1  72                 	db	114	;'r'
  3141  007AC2  65                 	db	101	;'e'
  3142  007AC3  67                 	db	103	;'g'
  3143  007AC4  69                 	db	105	;'i'
  3144  007AC5  73                 	db	115	;'s'
  3145  007AC6  74                 	db	116	;'t'
  3146  007AC7  65                 	db	101	;'e'
  3147  007AC8  72                 	db	114	;'r'
  3148  007AC9  0D                 	db	13
  3149  007ACA  0A                 	db	10
  3150  007ACB  00                 	db	0
  3151  007ACC                     STR_125:
  3152  007ACC  2B                 	db	43
  3153  007ACD  4F                 	db	79	;'O'
  3154  007ACE  4B                 	db	75	;'K'
  3155  007ACF  20                 	db	32
  3156  007AD0  2D                 	db	45
  3157  007AD1  20                 	db	32
  3158  007AD2  4D                 	db	77	;'M'
  3159  007AD3  6F                 	db	111	;'o'
  3160  007AD4  64                 	db	100	;'d'
  3161  007AD5  65                 	db	101	;'e'
  3162  007AD6  20                 	db	32
  3163  007AD7  69                 	db	105	;'i'
  3164  007AD8  73                 	db	115	;'s'
  3165  007AD9  20                 	db	32
  3166  007ADA  6E                 	db	110	;'n'
  3167  007ADB  6F                 	db	111	;'o'
  3168  007ADC  77                 	db	119	;'w'
  3169  007ADD  20                 	db	32
  3170  007ADE  56                 	db	86	;'V'
  3171  007ADF  53                 	db	83	;'S'
  3172  007AE0  43                 	db	67	;'C'
  3173  007AE1  50                 	db	80	;'P'
  3174  007AE2  20                 	db	32
  3175  007AE3  44                 	db	68	;'D'
  3176  007AE4  72                 	db	114	;'r'
  3177  007AE5  69                 	db	105	;'i'
  3178  007AE6  76                 	db	118	;'v'
  3179  007AE7  65                 	db	101	;'e'
  3180  007AE8  72                 	db	114	;'r'
  3181  007AE9  0D                 	db	13
  3182  007AEA  0A                 	db	10
  3183  007AEB  00                 	db	0
  3184  007AEC                     STR_7:
  3185  007AEC  57                 	db	87	;'W'
  3186  007AED  69                 	db	105	;'i'
  3187  007AEE  6C                 	db	108	;'l'
  3188  007AEF  6C                 	db	108	;'l'
  3189  007AF0  20                 	db	32
  3190  007AF1  65                 	db	101	;'e'
  3191  007AF2  6E                 	db	110	;'n'
  3192  007AF3  74                 	db	116	;'t'
  3193  007AF4  65                 	db	101	;'e'
  3194  007AF5  72                 	db	114	;'r'
  3195  007AF6  20                 	db	32
  3196  007AF7  62                 	db	98	;'b'
  3197  007AF8  6F                 	db	111	;'o'
  3198  007AF9  6F                 	db	111	;'o'
  3199  007AFA  74                 	db	116	;'t'
  3200  007AFB  6C                 	db	108	;'l'
  3201  007AFC  6F                 	db	111	;'o'
  3202  007AFD  61                 	db	97	;'a'
  3203  007AFE  64                 	db	100	;'d'
  3204  007AFF  65                 	db	101	;'e'
  3205  007B00  72                 	db	114	;'r'
  3206  007B01  20                 	db	32
  3207  007B02  6E                 	db	110	;'n'
  3208  007B03  6F                 	db	111	;'o'
  3209  007B04  77                 	db	119	;'w'
  3210  007B05  2E                 	db	46
  3211  007B06  2E                 	db	46
  3212  007B07  2E                 	db	46
  3213  007B08  0D                 	db	13
  3214  007B09  0A                 	db	10
  3215  007B0A  00                 	db	0
  3216  007B0B                     STR_213:
  3217  007B0B  43                 	db	67	;'C'
  3218  007B0C  4C                 	db	76	;'L'
  3219  007B0D  4F                 	db	79	;'O'
  3220  007B0E  53                 	db	83	;'S'
  3221  007B0F  45                 	db	69	;'E'
  3222  007B10  20                 	db	32
  3223  007B11  2D                 	db	45
  3224  007B12  20                 	db	32
  3225  007B13  43                 	db	67	;'C'
  3226  007B14  6C                 	db	108	;'l'
  3227  007B15  6F                 	db	111	;'o'
  3228  007B16  73                 	db	115	;'s'
  3229  007B17  65                 	db	101	;'e'
  3230  007B18  20                 	db	32
  3231  007B19  43                 	db	67	;'C'
  3232  007B1A  41                 	db	65	;'A'
  3233  007B1B  4E                 	db	78	;'N'
  3234  007B1C  20                 	db	32
  3235  007B1D  69                 	db	105	;'i'
  3236  007B1E  6E                 	db	110	;'n'
  3237  007B1F  74                 	db	116	;'t'
  3238  007B20  65                 	db	101	;'e'
  3239  007B21  72                 	db	114	;'r'
  3240  007B22  66                 	db	102	;'f'
  3241  007B23  61                 	db	97	;'a'
  3242  007B24  63                 	db	99	;'c'
  3243  007B25  65                 	db	101	;'e'
  3244  007B26  2E                 	db	46
  3245  007B27  0D                 	db	13
  3246  007B28  0A                 	db	10
  3247  007B29  00                 	db	0
  3248  007B2A                     STR_5:
  3249  007B2A  54                 	db	84	;'T'
  3250  007B2B  65                 	db	101	;'e'
  3251  007B2C  6D                 	db	109	;'m'
  3252  007B2D  70                 	db	112	;'p'
  3253  007B2E  6F                 	db	111	;'o'
  3254  007B2F  72                 	db	114	;'r'
  3255  007B30  61                 	db	97	;'a'
  3256  007B31  72                 	db	114	;'r'
  3257  007B32  79                 	db	121	;'y'
  3258  007B33  20                 	db	32
  3259  007B34  76                 	db	118	;'v'
  3260  007B35  65                 	db	101	;'e'
  3261  007B36  72                 	db	114	;'r'
  3262  007B37  62                 	db	98	;'b'
  3263  007B38  6F                 	db	111	;'o'
  3264  007B39  73                 	db	115	;'s'
  3265  007B3A  65                 	db	101	;'e'
  3266  007B3B  20                 	db	32
  3267  007B3C  6D                 	db	109	;'m'
  3268  007B3D  6F                 	db	111	;'o'
  3269  007B3E  64                 	db	100	;'d'
  3270  007B3F  65                 	db	101	;'e'
  3271  007B40  20                 	db	32
  3272  007B41  73                 	db	115	;'s'
  3273  007B42  65                 	db	101	;'e'
  3274  007B43  74                 	db	116	;'t'
  3275  007B44  0D                 	db	13
  3276  007B45  0A                 	db	10
  3277  007B46  00                 	db	0
  3278  007B47                     STR_123:
  3279  007B47  2B                 	db	43
  3280  007B48  4F                 	db	79	;'O'
  3281  007B49  4B                 	db	75	;'K'
  3282  007B4A  20                 	db	32
  3283  007B4B  2D                 	db	45
  3284  007B4C  20                 	db	32
  3285  007B4D  4D                 	db	77	;'M'
  3286  007B4E  6F                 	db	111	;'o'
  3287  007B4F  64                 	db	100	;'d'
  3288  007B50  65                 	db	101	;'e'
  3289  007B51  20                 	db	32
  3290  007B52  69                 	db	105	;'i'
  3291  007B53  73                 	db	115	;'s'
  3292  007B54  20                 	db	32
  3293  007B55  6E                 	db	110	;'n'
  3294  007B56  6F                 	db	111	;'o'
  3295  007B57  77                 	db	119	;'w'
  3296  007B58  20                 	db	32
  3297  007B59  76                 	db	118	;'v'
  3298  007B5A  65                 	db	101	;'e'
  3299  007B5B  72                 	db	114	;'r'
  3300  007B5C  62                 	db	98	;'b'
  3301  007B5D  6F                 	db	111	;'o'
  3302  007B5E  73                 	db	115	;'s'
  3303  007B5F  65                 	db	101	;'e'
  3304  007B60  0D                 	db	13
  3305  007B61  0A                 	db	10
  3306  007B62  00                 	db	0
  3307  007B63                     STR_208:
  3308  007B63  42                 	db	66	;'B'
  3309  007B64  4F                 	db	79	;'O'
  3310  007B65  4F                 	db	79	;'O'
  3311  007B66  54                 	db	84	;'T'
  3312  007B67  20                 	db	32
  3313  007B68  2D                 	db	45
  3314  007B69  20                 	db	32
  3315  007B6A  45                 	db	69	;'E'
  3316  007B6B  6E                 	db	110	;'n'
  3317  007B6C  74                 	db	116	;'t'
  3318  007B6D  65                 	db	101	;'e'
  3319  007B6E  72                 	db	114	;'r'
  3320  007B6F  20                 	db	32
  3321  007B70  62                 	db	98	;'b'
  3322  007B71  6F                 	db	111	;'o'
  3323  007B72  6F                 	db	111	;'o'
  3324  007B73  74                 	db	116	;'t'
  3325  007B74  6C                 	db	108	;'l'
  3326  007B75  6F                 	db	111	;'o'
  3327  007B76  61                 	db	97	;'a'
  3328  007B77  64                 	db	100	;'d'
  3329  007B78  65                 	db	101	;'e'
  3330  007B79  72                 	db	114	;'r'
  3331  007B7A  2E                 	db	46
  3332  007B7B  0D                 	db	13
  3333  007B7C  0A                 	db	10
  3334  007B7D  00                 	db	0
  3335  007B7E                     STR_132:
  3336  007B7E  2D                 	db	45
  3337  007B7F  45                 	db	69	;'E'
  3338  007B80  52                 	db	82	;'R'
  3339  007B81  52                 	db	82	;'R'
  3340  007B82  4F                 	db	79	;'O'
  3341  007B83  52                 	db	82	;'R'
  3342  007B84  20                 	db	32
  3343  007B85  2D                 	db	45
  3344  007B86  20                 	db	32
  3345  007B87  55                 	db	85	;'U'
  3346  007B88  6E                 	db	110	;'n'
  3347  007B89  6B                 	db	107	;'k'
  3348  007B8A  6E                 	db	110	;'n'
  3349  007B8B  6F                 	db	111	;'o'
  3350  007B8C  77                 	db	119	;'w'
  3351  007B8D  6E                 	db	110	;'n'
  3352  007B8E  20                 	db	32
  3353  007B8F  63                 	db	99	;'c'
  3354  007B90  6F                 	db	111	;'o'
  3355  007B91  6D                 	db	109	;'m'
  3356  007B92  6D                 	db	109	;'m'
  3357  007B93  61                 	db	97	;'a'
  3358  007B94  6E                 	db	110	;'n'
  3359  007B95  64                 	db	100	;'d'
  3360  007B96  0D                 	db	13
  3361  007B97  0A                 	db	10
  3362  007B98  00                 	db	0
  3363  007B99                     STR_239:
  3364  007B99  4E                 	db	78	;'N'
  3365  007B9A  6F                 	db	111	;'o'
  3366  007B9B  64                 	db	100	;'d'
  3367  007B9C  65                 	db	101	;'e'
  3368  007B9D  20                 	db	32
  3369  007B9E  66                 	db	102	;'f'
  3370  007B9F  6F                 	db	111	;'o'
  3371  007BA0  75                 	db	117	;'u'
  3372  007BA1  6E                 	db	110	;'n'
  3373  007BA2  64                 	db	100	;'d'
  3374  007BA3  20                 	db	32
  3375  007BA4  77                 	db	119	;'w'
  3376  007BA5  69                 	db	105	;'i'
  3377  007BA6  74                 	db	116	;'t'
  3378  007BA7  68                 	db	104	;'h'
  3379  007BA8  20                 	db	32
  3380  007BA9  6E                 	db	110	;'n'
  3381  007BAA  6F                 	db	111	;'o'
  3382  007BAB  64                 	db	100	;'d'
  3383  007BAC  65                 	db	101	;'e'
  3384  007BAD  20                 	db	32
  3385  007BAE  69                 	db	105	;'i'
  3386  007BAF  64                 	db	100	;'d'
  3387  007BB0  20                 	db	32
  3388  007BB1  3D                 	db	61	;'='
  3389  007BB2  20                 	db	32
  3390  007BB3  00                 	db	0
  3391  007BB4                     STR_127:
  3392  007BB4  2B                 	db	43
  3393  007BB5  4F                 	db	79	;'O'
  3394  007BB6  4B                 	db	75	;'K'
  3395  007BB7  20                 	db	32
  3396  007BB8  2D                 	db	45
  3397  007BB9  20                 	db	32
  3398  007BBA  4D                 	db	77	;'M'
  3399  007BBB  6F                 	db	111	;'o'
  3400  007BBC  64                 	db	100	;'d'
  3401  007BBD  65                 	db	101	;'e'
  3402  007BBE  20                 	db	32
  3403  007BBF  69                 	db	105	;'i'
  3404  007BC0  73                 	db	115	;'s'
  3405  007BC1  20                 	db	32
  3406  007BC2  6E                 	db	110	;'n'
  3407  007BC3  6F                 	db	111	;'o'
  3408  007BC4  77                 	db	119	;'w'
  3409  007BC5  20                 	db	32
  3410  007BC6  53                 	db	83	;'S'
  3411  007BC7  4C                 	db	76	;'L'
  3412  007BC8  43                 	db	67	;'C'
  3413  007BC9  41                 	db	65	;'A'
  3414  007BCA  4E                 	db	78	;'N'
  3415  007BCB  0D                 	db	13
  3416  007BCC  0A                 	db	10
  3417  007BCD  00                 	db	0
  3418  007BCE                     STR_25:
  3419  007BCE  2B                 	db	43
  3420  007BCF  4F                 	db	79	;'O'
  3421  007BD0  4B                 	db	75	;'K'
  3422  007BD1  20                 	db	32
  3423  007BD2  2D                 	db	45
  3424  007BD3  20                 	db	32
  3425  007BD4  4C                 	db	76	;'L'
  3426  007BD5  69                 	db	105	;'i'
  3427  007BD6  73                 	db	115	;'s'
  3428  007BD7  74                 	db	116	;'t'
  3429  007BD8  65                 	db	101	;'e'
  3430  007BD9  6E                 	db	110	;'n'
  3431  007BDA  20                 	db	32
  3432  007BDB  6F                 	db	111	;'o'
  3433  007BDC  6E                 	db	110	;'n'
  3434  007BDD  6C                 	db	108	;'l'
  3435  007BDE  79                 	db	121	;'y'
  3436  007BDF  20                 	db	32
  3437  007BE0  6D                 	db	109	;'m'
  3438  007BE1  6F                 	db	111	;'o'
  3439  007BE2  64                 	db	100	;'d'
  3440  007BE3  65                 	db	101	;'e'
  3441  007BE4  0D                 	db	13
  3442  007BE5  0A                 	db	10
  3443  007BE6  00                 	db	0
  3444  007BE7                     STR_192:
  3445  007BE7  54                 	db	84	;'T'
  3446  007BE8  72                 	db	114	;'r'
  3447  007BE9  61                 	db	97	;'a'
  3448  007BEA  6E                 	db	110	;'n'
  3449  007BEB  73                 	db	115	;'s'
  3450  007BEC  6D                 	db	109	;'m'
  3451  007BED  69                 	db	105	;'i'
  3452  007BEE  74                 	db	116	;'t'
  3453  007BEF  20                 	db	32
  3454  007BF0  45                 	db	69	;'E'
  3455  007BF1  72                 	db	114	;'r'
  3456  007BF2  72                 	db	114	;'r'
  3457  007BF3  6F                 	db	111	;'o'
  3458  007BF4  72                 	db	114	;'r'
  3459  007BF5  20                 	db	32
  3460  007BF6  43                 	db	67	;'C'
  3461  007BF7  6F                 	db	111	;'o'
  3462  007BF8  75                 	db	117	;'u'
  3463  007BF9  6E                 	db	110	;'n'
  3464  007BFA  74                 	db	116	;'t'
  3465  007BFB  65                 	db	101	;'e'
  3466  007BFC  72                 	db	114	;'r'
  3467  007BFD  3A                 	db	58	;':'
  3468  007BFE  20                 	db	32
  3469  007BFF  00                 	db	0
  3470  007C00                     STR_216:
  3471  007C00  54                 	db	84	;'T'
  3472  007C01  58                 	db	88	;'X'
  3473  007C02  20                 	db	32
  3474  007C03  2D                 	db	45
  3475  007C04  20                 	db	32
  3476  007C05  53                 	db	83	;'S'
  3477  007C06  65                 	db	101	;'e'
  3478  007C07  6E                 	db	110	;'n'
  3479  007C08  64                 	db	100	;'d'
  3480  007C09  20                 	db	32
  3481  007C0A  43                 	db	67	;'C'
  3482  007C0B  41                 	db	65	;'A'
  3483  007C0C  4E                 	db	78	;'N'
  3484  007C0D  20                 	db	32
  3485  007C0E  66                 	db	102	;'f'
  3486  007C0F  72                 	db	114	;'r'
  3487  007C10  61                 	db	97	;'a'
  3488  007C11  6D                 	db	109	;'m'
  3489  007C12  65                 	db	101	;'e'
  3490  007C13  20                 	db	32
  3491  007C14  2E                 	db	46
  3492  007C15  0D                 	db	13
  3493  007C16  0A                 	db	10
  3494  007C17  00                 	db	0
  3495  007C18                     STR_226:
  3496  007C18  46                 	db	70	;'F'
  3497  007C19  49                 	db	73	;'I'
  3498  007C1A  4C                 	db	76	;'L'
  3499  007C1B  54                 	db	84	;'T'
  3500  007C1C  45                 	db	69	;'E'
  3501  007C1D  52                 	db	82	;'R'
  3502  007C1E  20                 	db	32
  3503  007C1F  2D                 	db	45
  3504  007C20  20                 	db	32
  3505  007C21  53                 	db	83	;'S'
  3506  007C22  65                 	db	101	;'e'
  3507  007C23  74                 	db	116	;'t'
  3508  007C24  20                 	db	32
  3509  007C25  66                 	db	102	;'f'
  3510  007C26  69                 	db	105	;'i'
  3511  007C27  6C                 	db	108	;'l'
  3512  007C28  74                 	db	116	;'t'
  3513  007C29  65                 	db	101	;'e'
  3514  007C2A  72                 	db	114	;'r'
  3515  007C2B  20                 	db	32
  3516  007C2C  2E                 	db	46
  3517  007C2D  0D                 	db	13
  3518  007C2E  0A                 	db	10
  3519  007C2F  00                 	db	0
  3520  007C30                     STR_51:
  3521  007C30  2D                 	db	45
  3522  007C31  45                 	db	69	;'E'
  3523  007C32  52                 	db	82	;'R'
  3524  007C33  52                 	db	82	;'R'
  3525  007C34  4F                 	db	79	;'O'
  3526  007C35  52                 	db	82	;'R'
  3527  007C36  20                 	db	32
  3528  007C37  2D                 	db	45
  3529  007C38  20                 	db	32
  3530  007C39  4E                 	db	78	;'N'
  3531  007C3A  65                 	db	101	;'e'
  3532  007C3B  65                 	db	101	;'e'
  3533  007C3C  64                 	db	100	;'d'
  3534  007C3D  73                 	db	115	;'s'
  3535  007C3E  20                 	db	32
  3536  007C3F  6E                 	db	110	;'n'
  3537  007C40  6F                 	db	111	;'o'
  3538  007C41  64                 	db	100	;'d'
  3539  007C42  65                 	db	101	;'e'
  3540  007C43  69                 	db	105	;'i'
  3541  007C44  64                 	db	100	;'d'
  3542  007C45  0D                 	db	13
  3543  007C46  0A                 	db	10
  3544  007C47  00                 	db	0
  3545  007C48                     STR_28:
  3546  007C48  2D                 	db	45
  3547  007C49  45                 	db	69	;'E'
  3548  007C4A  52                 	db	82	;'R'
  3549  007C4B  52                 	db	82	;'R'
  3550  007C4C  4F                 	db	79	;'O'
  3551  007C4D  52                 	db	82	;'R'
  3552  007C4E  20                 	db	32
  3553  007C4F  2D                 	db	45
  3554  007C50  20                 	db	32
  3555  007C51  55                 	db	85	;'U'
  3556  007C52  6E                 	db	110	;'n'
  3557  007C53  6B                 	db	107	;'k'
  3558  007C54  6E                 	db	110	;'n'
  3559  007C55  6F                 	db	111	;'o'
  3560  007C56  77                 	db	119	;'w'
  3561  007C57  6E                 	db	110	;'n'
  3562  007C58  20                 	db	32
  3563  007C59  6D                 	db	109	;'m'
  3564  007C5A  6F                 	db	111	;'o'
  3565  007C5B  64                 	db	100	;'d'
  3566  007C5C  65                 	db	101	;'e'
  3567  007C5D  0D                 	db	13
  3568  007C5E  0A                 	db	10
  3569  007C5F  00                 	db	0
  3570  007C60                     STR_78:
  3571  007C60  2D                 	db	45
  3572  007C61  45                 	db	69	;'E'
  3573  007C62  52                 	db	82	;'R'
  3574  007C63  52                 	db	82	;'R'
  3575  007C64  4F                 	db	79	;'O'
  3576  007C65  52                 	db	82	;'R'
  3577  007C66  20                 	db	32
  3578  007C67  2D                 	db	45
  3579  007C68  20                 	db	32
  3580  007C69  4E                 	db	78	;'N'
  3581  007C6A  65                 	db	101	;'e'
  3582  007C6B  65                 	db	101	;'e'
  3583  007C6C  64                 	db	100	;'d'
  3584  007C6D  20                 	db	32
  3585  007C6E  61                 	db	97	;'a'
  3586  007C6F  20                 	db	32
  3587  007C70  76                 	db	118	;'v'
  3588  007C71  61                 	db	97	;'a'
  3589  007C72  6C                 	db	108	;'l'
  3590  007C73  75                 	db	117	;'u'
  3591  007C74  65                 	db	101	;'e'
  3592  007C75  0D                 	db	13
  3593  007C76  0A                 	db	10
  3594  007C77  00                 	db	0
  3595  007C78                     STR_199:
  3596  007C78  52                 	db	82	;'R'
  3597  007C79  65                 	db	101	;'e'
  3598  007C7A  63                 	db	99	;'c'
  3599  007C7B  65                 	db	101	;'e'
  3600  007C7C  69                 	db	105	;'i'
  3601  007C7D  76                 	db	118	;'v'
  3602  007C7E  65                 	db	101	;'e'
  3603  007C7F  20                 	db	32
  3604  007C80  45                 	db	69	;'E'
  3605  007C81  72                 	db	114	;'r'
  3606  007C82  72                 	db	114	;'r'
  3607  007C83  6F                 	db	111	;'o'
  3608  007C84  72                 	db	114	;'r'
  3609  007C85  20                 	db	32
  3610  007C86  43                 	db	67	;'C'
  3611  007C87  6F                 	db	111	;'o'
  3612  007C88  75                 	db	117	;'u'
  3613  007C89  6E                 	db	110	;'n'
  3614  007C8A  74                 	db	116	;'t'
  3615  007C8B  65                 	db	101	;'e'
  3616  007C8C  72                 	db	114	;'r'
  3617  007C8D  3A                 	db	58	;':'
  3618  007C8E  20                 	db	32
  3619  007C8F  00                 	db	0
  3620  007C90                     STR_184:
  3621  007C90  55                 	db	85	;'U'
  3622  007C91  41                 	db	65	;'A'
  3623  007C92  52                 	db	82	;'R'
  3624  007C93  54                 	db	84	;'T'
  3625  007C94  20                 	db	32
  3626  007C95  52                 	db	82	;'R'
  3627  007C96  65                 	db	101	;'e'
  3628  007C97  63                 	db	99	;'c'
  3629  007C98  65                 	db	101	;'e'
  3630  007C99  69                 	db	105	;'i'
  3631  007C9A  76                 	db	118	;'v'
  3632  007C9B  65                 	db	101	;'e'
  3633  007C9C  20                 	db	32
  3634  007C9D  6F                 	db	111	;'o'
  3635  007C9E  76                 	db	118	;'v'
  3636  007C9F  65                 	db	101	;'e'
  3637  007CA0  72                 	db	114	;'r'
  3638  007CA1  72                 	db	114	;'r'
  3639  007CA2  75                 	db	117	;'u'
  3640  007CA3  6E                 	db	110	;'n'
  3641  007CA4  73                 	db	115	;'s'
  3642  007CA5  3A                 	db	58	;':'
  3643  007CA6  20                 	db	32
  3644  007CA7  00                 	db	0
  3645  007CA8                     STR_180:
  3646  007CA8  43                 	db	67	;'C'
  3647  007CA9  41                 	db	65	;'A'
  3648  007CAA  4E                 	db	78	;'N'
  3649  007CAB  20                 	db	32
  3650  007CAC  54                 	db	84	;'T'
  3651  007CAD  72                 	db	114	;'r'
  3652  007CAE  61                 	db	97	;'a'
  3653  007CAF  6E                 	db	110	;'n'
  3654  007CB0  73                 	db	115	;'s'
  3655  007CB1  6D                 	db	109	;'m'
  3656  007CB2  69                 	db	105	;'i'
  3657  007CB3  74                 	db	116	;'t'
  3658  007CB4  20                 	db	32
  3659  007CB5  6F                 	db	111	;'o'
  3660  007CB6  76                 	db	118	;'v'
  3661  007CB7  65                 	db	101	;'e'
  3662  007CB8  72                 	db	114	;'r'
  3663  007CB9  72                 	db	114	;'r'
  3664  007CBA  75                 	db	117	;'u'
  3665  007CBB  6E                 	db	110	;'n'
  3666  007CBC  73                 	db	115	;'s'
  3667  007CBD  3A                 	db	58	;':'
  3668  007CBE  20                 	db	32
  3669  007CBF  00                 	db	0
  3670  007CC0                     STR_218:
  3671  007CC0  52                 	db	82	;'R'
  3672  007CC1  58                 	db	88	;'X'
  3673  007CC2  20                 	db	32
  3674  007CC3  2D                 	db	45
  3675  007CC4  20                 	db	32
  3676  007CC5  52                 	db	82	;'R'
  3677  007CC6  65                 	db	101	;'e'
  3678  007CC7  61                 	db	97	;'a'
  3679  007CC8  64                 	db	100	;'d'
  3680  007CC9  20                 	db	32
  3681  007CCA  43                 	db	67	;'C'
  3682  007CCB  41                 	db	65	;'A'
  3683  007CCC  4E                 	db	78	;'N'
  3684  007CCD  20                 	db	32
  3685  007CCE  66                 	db	102	;'f'
  3686  007CCF  72                 	db	114	;'r'
  3687  007CD0  61                 	db	97	;'a'
  3688  007CD1  6D                 	db	109	;'m'
  3689  007CD2  65                 	db	101	;'e'
  3690  007CD3  2E                 	db	46
  3691  007CD4  0D                 	db	13
  3692  007CD5  0A                 	db	10
  3693  007CD6  00                 	db	0
  3694  007CD7                     STR_176:
  3695  007CD7  43                 	db	67	;'C'
  3696  007CD8  41                 	db	65	;'A'
  3697  007CD9  4E                 	db	78	;'N'
  3698  007CDA  20                 	db	32
  3699  007CDB  52                 	db	82	;'R'
  3700  007CDC  65                 	db	101	;'e'
  3701  007CDD  63                 	db	99	;'c'
  3702  007CDE  65                 	db	101	;'e'
  3703  007CDF  69                 	db	105	;'i'
  3704  007CE0  76                 	db	118	;'v'
  3705  007CE1  65                 	db	101	;'e'
  3706  007CE2  20                 	db	32
  3707  007CE3  6F                 	db	111	;'o'
  3708  007CE4  76                 	db	118	;'v'
  3709  007CE5  65                 	db	101	;'e'
  3710  007CE6  72                 	db	114	;'r'
  3711  007CE7  72                 	db	114	;'r'
  3712  007CE8  75                 	db	117	;'u'
  3713  007CE9  6E                 	db	110	;'n'
  3714  007CEA  73                 	db	115	;'s'
  3715  007CEB  3A                 	db	58	;':'
  3716  007CEC  20                 	db	32
  3717  007CED  00                 	db	0
  3718  007CEE                     STR_261:
  3719  007CEE  55                 	db	85	;'U'
  3720  007CEF  6E                 	db	110	;'n'
  3721  007CF0  6B                 	db	107	;'k'
  3722  007CF1  6E                 	db	110	;'n'
  3723  007CF2  6F                 	db	111	;'o'
  3724  007CF3  77                 	db	119	;'w'
  3725  007CF4  6E                 	db	110	;'n'
  3726  007CF5  20                 	db	32
  3727  007CF6  28                 	db	40
  3728  007CF7  56                 	db	86	;'V'
  3729  007CF8  65                 	db	101	;'e'
  3730  007CF9  72                 	db	114	;'r'
  3731  007CFA  62                 	db	98	;'b'
  3732  007CFB  6F                 	db	111	;'o'
  3733  007CFC  73                 	db	115	;'s'
  3734  007CFD  65                 	db	101	;'e'
  3735  007CFE  20                 	db	32
  3736  007CFF  75                 	db	117	;'u'
  3737  007D00  73                 	db	115	;'s'
  3738  007D01  65                 	db	101	;'e'
  3739  007D02  64                 	db	100	;'d'
  3740  007D03  29                 	db	41
  3741  007D04  00                 	db	0
  3742  007D05                     STR_24:
  3743  007D05  2B                 	db	43
  3744  007D06  4F                 	db	79	;'O'
  3745  007D07  4B                 	db	75	;'K'
  3746  007D08  20                 	db	32
  3747  007D09  2D                 	db	45
  3748  007D0A  20                 	db	32
  3749  007D0B  4C                 	db	76	;'L'
  3750  007D0C  6F                 	db	111	;'o'
  3751  007D0D  6F                 	db	111	;'o'
  3752  007D0E  70                 	db	112	;'p'
  3753  007D0F  62                 	db	98	;'b'
  3754  007D10  61                 	db	97	;'a'
  3755  007D11  63                 	db	99	;'c'
  3756  007D12  6B                 	db	107	;'k'
  3757  007D13  20                 	db	32
  3758  007D14  6D                 	db	109	;'m'
  3759  007D15  6F                 	db	111	;'o'
  3760  007D16  64                 	db	100	;'d'
  3761  007D17  65                 	db	101	;'e'
  3762  007D18  0D                 	db	13
  3763  007D19  0A                 	db	10
  3764  007D1A  00                 	db	0
  3765  007D1B                     STR_168:
  3766  007D1B  52                 	db	82	;'R'
  3767  007D1C  65                 	db	101	;'e'
  3768  007D1D  63                 	db	99	;'c'
  3769  007D1E  65                 	db	101	;'e'
  3770  007D1F  69                 	db	105	;'i'
  3771  007D20  76                 	db	118	;'v'
  3772  007D21  65                 	db	101	;'e'
  3773  007D22  64                 	db	100	;'d'
  3774  007D23  20                 	db	32
  3775  007D24  43                 	db	67	;'C'
  3776  007D25  41                 	db	65	;'A'
  3777  007D26  4E                 	db	78	;'N'
  3778  007D27  20                 	db	32
  3779  007D28  66                 	db	102	;'f'
  3780  007D29  72                 	db	114	;'r'
  3781  007D2A  61                 	db	97	;'a'
  3782  007D2B  6D                 	db	109	;'m'
  3783  007D2C  65                 	db	101	;'e'
  3784  007D2D  73                 	db	115	;'s'
  3785  007D2E  3A                 	db	58	;':'
  3786  007D2F  20                 	db	32
  3787  007D30  00                 	db	0
  3788  007D31                     STR_172:
  3789  007D31  52                 	db	82	;'R'
  3790  007D32  65                 	db	101	;'e'
  3791  007D33  63                 	db	99	;'c'
  3792  007D34  65                 	db	101	;'e'
  3793  007D35  69                 	db	105	;'i'
  3794  007D36  76                 	db	118	;'v'
  3795  007D37  65                 	db	101	;'e'
  3796  007D38  64                 	db	100	;'d'
  3797  007D39  20                 	db	32
  3798  007D3A  43                 	db	67	;'C'
  3799  007D3B  41                 	db	65	;'A'
  3800  007D3C  4E                 	db	78	;'N'
  3801  007D3D  20                 	db	32
  3802  007D3E  62                 	db	98	;'b'
  3803  007D3F  79                 	db	121	;'y'
  3804  007D40  74                 	db	116	;'t'
  3805  007D41  65                 	db	101	;'e'
  3806  007D42  73                 	db	115	;'s'
  3807  007D43  3A                 	db	58	;':'
  3808  007D44  20                 	db	32
  3809  007D45  00                 	db	0
  3810  007D46                     STR_228:
  3811  007D46  4D                 	db	77	;'M'
  3812  007D47  41                 	db	65	;'A'
  3813  007D48  53                 	db	83	;'S'
  3814  007D49  4B                 	db	75	;'K'
  3815  007D4A  20                 	db	32
  3816  007D4B  2D                 	db	45
  3817  007D4C  20                 	db	32
  3818  007D4D  53                 	db	83	;'S'
  3819  007D4E  65                 	db	101	;'e'
  3820  007D4F  74                 	db	116	;'t'
  3821  007D50  20                 	db	32
  3822  007D51  6D                 	db	109	;'m'
  3823  007D52  61                 	db	97	;'a'
  3824  007D53  73                 	db	115	;'s'
  3825  007D54  6B                 	db	107	;'k'
  3826  007D55  20                 	db	32
  3827  007D56  2E                 	db	46
  3828  007D57  0D                 	db	13
  3829  007D58  0A                 	db	10
  3830  007D59  00                 	db	0
  3831  007D5A                     STR_133:
  3832  007D5A  4A                 	db	74	;'J'
  3833  007D5B  46                 	db	70	;'F'
  3834  007D5C  72                 	db	114	;'r'
  3835  007D5D  61                 	db	97	;'a'
  3836  007D5E  6E                 	db	110	;'n'
  3837  007D5F  6B                 	db	107	;'k'
  3838  007D60  66                 	db	102	;'f'
  3839  007D61  75                 	db	117	;'u'
  3840  007D62  72                 	db	114	;'r'
  3841  007D63  74                 	db	116	;'t'
  3842  007D64  20                 	db	32
  3843  007D65  52                 	db	82	;'R'
  3844  007D66  53                 	db	83	;'S'
  3845  007D67  2D                 	db	45
  3846  007D68  32                 	db	50	;'2'
  3847  007D69  33                 	db	51	;'3'
  3848  007D6A  32                 	db	50	;'2'
  3849  007D6B  0D                 	db	13
  3850  007D6C  0A                 	db	10
  3851  007D6D  00                 	db	0
  3852  007D6E                     STR_26:
  3853  007D6E  2B                 	db	43
  3854  007D6F  4F                 	db	79	;'O'
  3855  007D70  4B                 	db	75	;'K'
  3856  007D71  20                 	db	32
  3857  007D72  2D                 	db	45
  3858  007D73  20                 	db	32
  3859  007D74  43                 	db	67	;'C'
  3860  007D75  6C                 	db	108	;'l'
  3861  007D76  6F                 	db	111	;'o'
  3862  007D77  73                 	db	115	;'s'
  3863  007D78  65                 	db	101	;'e'
  3864  007D79  64                 	db	100	;'d'
  3865  007D7A  20                 	db	32
  3866  007D7B  6D                 	db	109	;'m'
  3867  007D7C  6F                 	db	111	;'o'
  3868  007D7D  64                 	db	100	;'d'
  3869  007D7E  65                 	db	101	;'e'
  3870  007D7F  0D                 	db	13
  3871  007D80  0A                 	db	10
  3872  007D81  00                 	db	0
  3873  007D82                     STR_21:
  3874  007D82  2B                 	db	43
  3875  007D83  4F                 	db	79	;'O'
  3876  007D84  4B                 	db	75	;'K'
  3877  007D85  20                 	db	32
  3878  007D86  2D                 	db	45
  3879  007D87  20                 	db	32
  3880  007D88  4E                 	db	78	;'N'
  3881  007D89  6F                 	db	111	;'o'
  3882  007D8A  72                 	db	114	;'r'
  3883  007D8B  6D                 	db	109	;'m'
  3884  007D8C  61                 	db	97	;'a'
  3885  007D8D  6C                 	db	108	;'l'
  3886  007D8E  20                 	db	32
  3887  007D8F  6D                 	db	109	;'m'
  3888  007D90  6F                 	db	111	;'o'
  3889  007D91  64                 	db	100	;'d'
  3890  007D92  65                 	db	101	;'e'
  3891  007D93  0D                 	db	13
  3892  007D94  0A                 	db	10
  3893  007D95  00                 	db	0
  3894  007D96                     STR_22:
  3895  007D96  2B                 	db	43
  3896  007D97  4F                 	db	79	;'O'
  3897  007D98  4B                 	db	75	;'K'
  3898  007D99  20                 	db	32
  3899  007D9A  2D                 	db	45
  3900  007D9B  20                 	db	32
  3901  007D9C  53                 	db	83	;'S'
  3902  007D9D  69                 	db	105	;'i'
  3903  007D9E  6C                 	db	108	;'l'
  3904  007D9F  65                 	db	101	;'e'
  3905  007DA0  6E                 	db	110	;'n'
  3906  007DA1  74                 	db	116	;'t'
  3907  007DA2  20                 	db	32
  3908  007DA3  6D                 	db	109	;'m'
  3909  007DA4  6F                 	db	111	;'o'
  3910  007DA5  64                 	db	100	;'d'
  3911  007DA6  65                 	db	101	;'e'
  3912  007DA7  0D                 	db	13
  3913  007DA8  0A                 	db	10
  3914  007DA9  00                 	db	0
  3915  007DAA                     STR_82:
  3916  007DAA  49                 	db	73	;'I'
  3917  007DAB  6E                 	db	110	;'n'
  3918  007DAC  66                 	db	102	;'f'
  3919  007DAD  6F                 	db	111	;'o'
  3920  007DAE  20                 	db	32
  3921  007DAF  66                 	db	102	;'f'
  3922  007DB0  6F                 	db	111	;'o'
  3923  007DB1  72                 	db	114	;'r'
  3924  007DB2  20                 	db	32
  3925  007DB3  6E                 	db	110	;'n'
  3926  007DB4  6F                 	db	111	;'o'
  3927  007DB5  64                 	db	100	;'d'
  3928  007DB6  65                 	db	101	;'e'
  3929  007DB7  20                 	db	32
  3930  007DB8  69                 	db	105	;'i'
  3931  007DB9  64                 	db	100	;'d'
  3932  007DBA  20                 	db	32
  3933  007DBB  3D                 	db	61	;'='
  3934  007DBC  20                 	db	32
  3935  007DBD  00                 	db	0
  3936  007DBE                     STR_250:
  3937  007DBE  46                 	db	70	;'F'
  3938  007DBF  69                 	db	105	;'i'
  3939  007DC0  72                 	db	114	;'r'
  3940  007DC1  6D                 	db	109	;'m'
  3941  007DC2  77                 	db	119	;'w'
  3942  007DC3  61                 	db	97	;'a'
  3943  007DC4  72                 	db	114	;'r'
  3944  007DC5  65                 	db	101	;'e'
  3945  007DC6  20                 	db	32
  3946  007DC7  76                 	db	118	;'v'
  3947  007DC8  65                 	db	101	;'e'
  3948  007DC9  72                 	db	114	;'r'
  3949  007DCA  73                 	db	115	;'s'
  3950  007DCB  69                 	db	105	;'i'
  3951  007DCC  6F                 	db	111	;'o'
  3952  007DCD  6E                 	db	110	;'n'
  3953  007DCE  20                 	db	32
  3954  007DCF  3D                 	db	61	;'='
  3955  007DD0  20                 	db	32
  3956  007DD1  00                 	db	0
  3957  007DD2                     STR_23:
  3958  007DD2  2B                 	db	43
  3959  007DD3  4F                 	db	79	;'O'
  3960  007DD4  4B                 	db	75	;'K'
  3961  007DD5  20                 	db	32
  3962  007DD6  2D                 	db	45
  3963  007DD7  20                 	db	32
  3964  007DD8  53                 	db	83	;'S'
  3965  007DD9  6C                 	db	108	;'l'
  3966  007DDA  65                 	db	101	;'e'
  3967  007DDB  65                 	db	101	;'e'
  3968  007DDC  70                 	db	112	;'p'
  3969  007DDD  20                 	db	32
  3970  007DDE  6D                 	db	109	;'m'
  3971  007DDF  6F                 	db	111	;'o'
  3972  007DE0  64                 	db	100	;'d'
  3973  007DE1  65                 	db	101	;'e'
  3974  007DE2  0D                 	db	13
  3975  007DE3  0A                 	db	10
  3976  007DE4  00                 	db	0
  3977  007DE5                     STR_27:
  3978  007DE5  2B                 	db	43
  3979  007DE6  4F                 	db	79	;'O'
  3980  007DE7  4B                 	db	75	;'K'
  3981  007DE8  20                 	db	32
  3982  007DE9  2D                 	db	45
  3983  007DEA  20                 	db	32
  3984  007DEB  42                 	db	66	;'B'
  3985  007DEC  69                 	db	105	;'i'
  3986  007DED  74                 	db	116	;'t'
  3987  007DEE  73                 	db	115	;'s'
  3988  007DEF  20                 	db	32
  3989  007DF0  6D                 	db	109	;'m'
  3990  007DF1  6F                 	db	111	;'o'
  3991  007DF2  64                 	db	100	;'d'
  3992  007DF3  65                 	db	101	;'e'
  3993  007DF4  0D                 	db	13
  3994  007DF5  0A                 	db	10
  3995  007DF6  00                 	db	0
  3996  007DF7                     STR_40:
  3997  007DF7  2B                 	db	43
  3998  007DF8  4F                 	db	79	;'O'
  3999  007DF9  4B                 	db	75	;'K'
  4000  007DFA  20                 	db	32
  4001  007DFB  2D                 	db	45
  4002  007DFC  20                 	db	32
  4003  007DFD  6E                 	db	110	;'n'
  4004  007DFE  6F                 	db	111	;'o'
  4005  007DFF  20                 	db	32
  4006  007E00  65                 	db	101	;'e'
  4007  007E01  76                 	db	118	;'v'
  4008  007E02  65                 	db	101	;'e'
  4009  007E03  6E                 	db	110	;'n'
  4010  007E04  74                 	db	116	;'t'
  4011  007E05  73                 	db	115	;'s'
  4012  007E06  0D                 	db	13
  4013  007E07  0A                 	db	10
  4014  007E08  00                 	db	0
  4015  007E09                     STR_160:
  4016  007E09  53                 	db	83	;'S'
  4017  007E0A  65                 	db	101	;'e'
  4018  007E0B  6E                 	db	110	;'n'
  4019  007E0C  74                 	db	116	;'t'
  4020  007E0D  20                 	db	32
  4021  007E0E  43                 	db	67	;'C'
  4022  007E0F  41                 	db	65	;'A'
  4023  007E10  4E                 	db	78	;'N'
  4024  007E11  20                 	db	32
  4025  007E12  66                 	db	102	;'f'
  4026  007E13  72                 	db	114	;'r'
  4027  007E14  61                 	db	97	;'a'
  4028  007E15  6D                 	db	109	;'m'
  4029  007E16  65                 	db	101	;'e'
  4030  007E17  73                 	db	115	;'s'
  4031  007E18  3A                 	db	58	;':'
  4032  007E19  20                 	db	32
  4033  007E1A  00                 	db	0
  4034  007E1B                     STR_263:
  4035  007E1B  30                 	db	48	;'0'
  4036  007E1C  31                 	db	49	;'1'
  4037  007E1D  32                 	db	50	;'2'
  4038  007E1E  33                 	db	51	;'3'
  4039  007E1F  34                 	db	52	;'4'
  4040  007E20  35                 	db	53	;'5'
  4041  007E21  36                 	db	54	;'6'
  4042  007E22  37                 	db	55	;'7'
  4043  007E23  38                 	db	56	;'8'
  4044  007E24  39                 	db	57	;'9'
  4045  007E25  41                 	db	65	;'A'
  4046  007E26  42                 	db	66	;'B'
  4047  007E27  43                 	db	67	;'C'
  4048  007E28  44                 	db	68	;'D'
  4049  007E29  45                 	db	69	;'E'
  4050  007E2A  46                 	db	70	;'F'
  4051  007E2B  00                 	db	0
  4052  007E2C                     STR_264:
  4053  007E2C  30                 	db	48	;'0'
  4054  007E2D  31                 	db	49	;'1'
  4055  007E2E  32                 	db	50	;'2'
  4056  007E2F  33                 	db	51	;'3'
  4057  007E30  34                 	db	52	;'4'
  4058  007E31  35                 	db	53	;'5'
  4059  007E32  36                 	db	54	;'6'
  4060  007E33  37                 	db	55	;'7'
  4061  007E34  38                 	db	56	;'8'
  4062  007E35  39                 	db	57	;'9'
  4063  007E36  61                 	db	97	;'a'
  4064  007E37  62                 	db	98	;'b'
  4065  007E38  63                 	db	99	;'c'
  4066  007E39  64                 	db	100	;'d'
  4067  007E3A  65                 	db	101	;'e'
  4068  007E3B  66                 	db	102	;'f'
  4069  007E3C  00                 	db	0
  4070  007E3D                     STR_164:
  4071  007E3D  53                 	db	83	;'S'
  4072  007E3E  65                 	db	101	;'e'
  4073  007E3F  6E                 	db	110	;'n'
  4074  007E40  74                 	db	116	;'t'
  4075  007E41  20                 	db	32
  4076  007E42  43                 	db	67	;'C'
  4077  007E43  41                 	db	65	;'A'
  4078  007E44  4E                 	db	78	;'N'
  4079  007E45  20                 	db	32
  4080  007E46  62                 	db	98	;'b'
  4081  007E47  79                 	db	121	;'y'
  4082  007E48  74                 	db	116	;'t'
  4083  007E49  65                 	db	101	;'e'
  4084  007E4A  73                 	db	115	;'s'
  4085  007E4B  3A                 	db	58	;':'
  4086  007E4C  20                 	db	32
  4087  007E4D  00                 	db	0
  4088  007E4E                     STR_242:
  4089  007E4E  20                 	db	32
  4090  007E4F  6E                 	db	110	;'n'
  4091  007E50  6F                 	db	111	;'o'
  4092  007E51  64                 	db	100	;'d'
  4093  007E52  65                 	db	101	;'e'
  4094  007E53  73                 	db	115	;'s'
  4095  007E54  20                 	db	32
  4096  007E55  66                 	db	102	;'f'
  4097  007E56  6F                 	db	111	;'o'
  4098  007E57  75                 	db	117	;'u'
  4099  007E58  6E                 	db	110	;'n'
  4100  007E59  64                 	db	100	;'d'
  4101  007E5A  0D                 	db	13
  4102  007E5B  0A                 	db	10
  4103  007E5C  00                 	db	0
  4104  007E5D                     STR_55:
  4105  007E5D  56                 	db	86	;'V'
  4106  007E5E  61                 	db	97	;'a'
  4107  007E5F  6C                 	db	108	;'l'
  4108  007E60  75                 	db	117	;'u'
  4109  007E61  65                 	db	101	;'e'
  4110  007E62  20                 	db	32
  4111  007E63  66                 	db	102	;'f'
  4112  007E64  6F                 	db	111	;'o'
  4113  007E65  72                 	db	114	;'r'
  4114  007E66  20                 	db	32
  4115  007E67  72                 	db	114	;'r'
  4116  007E68  65                 	db	101	;'e'
  4117  007E69  67                 	db	103	;'g'
  4118  007E6A  20                 	db	32
  4119  007E6B  00                 	db	0
  4120  007E6C                     STR_248:
  4121  007E6C  4D                 	db	77	;'M'
  4122  007E6D  44                 	db	68	;'D'
  4123  007E6E  46                 	db	70	;'F'
  4124  007E6F  20                 	db	32
  4125  007E70  3D                 	db	61	;'='
  4126  007E71  20                 	db	32
  4127  007E72  68                 	db	104	;'h'
  4128  007E73  74                 	db	116	;'t'
  4129  007E74  74                 	db	116	;'t'
  4130  007E75  70                 	db	112	;'p'
  4131  007E76  3A                 	db	58	;':'
  4132  007E77  2F                 	db	47
  4133  007E78  2F                 	db	47
  4134  007E79  00                 	db	0
  4135  007E7A                     STR_258:
  4136  007E7A  56                 	db	86	;'V'
  4137  007E7B  53                 	db	83	;'S'
  4138  007E7C  43                 	db	67	;'C'
  4139  007E7D  50                 	db	80	;'P'
  4140  007E7E  20                 	db	32
  4141  007E7F  44                 	db	68	;'D'
  4142  007E80  72                 	db	114	;'r'
  4143  007E81  69                 	db	105	;'i'
  4144  007E82  76                 	db	118	;'v'
  4145  007E83  65                 	db	101	;'e'
  4146  007E84  72                 	db	114	;'r'
  4147  007E85  00                 	db	0
  4148  007E86                     STR_118:
  4149  007E86  52                 	db	82	;'R'
  4150  007E87  57                 	db	87	;'W'
  4151  007E88  54                 	db	84	;'T'
  4152  007E89  49                 	db	73	;'I'
  4153  007E8A  4D                 	db	77	;'M'
  4154  007E8B  45                 	db	69	;'E'
  4155  007E8C  4F                 	db	79	;'O'
  4156  007E8D  55                 	db	85	;'U'
  4157  007E8E  54                 	db	84	;'T'
  4158  007E8F  20                 	db	32
  4159  007E90  00                 	db	0
  4160  007E91                     STR_158:
  4161  007E91  2C                 	db	44
  4162  007E92  44                 	db	68	;'D'
  4163  007E93  61                 	db	97	;'a'
  4164  007E94  74                 	db	116	;'t'
  4165  007E95  61                 	db	97	;'a'
  4166  007E96  3D                 	db	61	;'='
  4167  007E97  6E                 	db	110	;'n'
  4168  007E98  6F                 	db	111	;'o'
  4169  007E99  6E                 	db	110	;'n'
  4170  007E9A  65                 	db	101	;'e'
  4171  007E9B  00                 	db	0
  4172  007E9C                     STR_254:
  4173  007E9C  56                 	db	86	;'V'
  4174  007E9D  65                 	db	101	;'e'
  4175  007E9E  72                 	db	114	;'r'
  4176  007E9F  73                 	db	115	;'s'
  4177  007EA0  69                 	db	105	;'i'
  4178  007EA1  6F                 	db	111	;'o'
  4179  007EA2  6E                 	db	110	;'n'
  4180  007EA3  3A                 	db	58	;':'
  4181  007EA4  20                 	db	32
  4182  007EA5  00                 	db	0
  4183  007EA6                     STR_260:
  4184  007EA6  56                 	db	86	;'V'
  4185  007EA7  53                 	db	83	;'S'
  4186  007EA8  43                 	db	67	;'C'
  4187  007EA9  50                 	db	80	;'P'
  4188  007EAA  20                 	db	32
  4189  007EAB  4E                 	db	78	;'N'
  4190  007EAC  6F                 	db	111	;'o'
  4191  007EAD  64                 	db	100	;'d'
  4192  007EAE  65                 	db	101	;'e'
  4193  007EAF  00                 	db	0
  4194  007EB0                     STR_259:
  4195  007EB0  53                 	db	83	;'S'
  4196  007EB1  4C                 	db	76	;'L'
  4197  007EB2  20                 	db	32
  4198  007EB3  44                 	db	68	;'D'
  4199  007EB4  72                 	db	114	;'r'
  4200  007EB5  69                 	db	105	;'i'
  4201  007EB6  76                 	db	118	;'v'
  4202  007EB7  65                 	db	101	;'e'
  4203  007EB8  72                 	db	114	;'r'
  4204  007EB9  00                 	db	0
  4205  007EBA                     STR_120:
  4206  007EBA  53                 	db	83	;'S'
  4207  007EBB  54                 	db	84	;'T'
  4208  007EBC  41                 	db	65	;'A'
  4209  007EBD  52                 	db	82	;'R'
  4210  007EBE  54                 	db	84	;'T'
  4211  007EBF  49                 	db	73	;'I'
  4212  007EC0  46                 	db	70	;'F'
  4213  007EC1  20                 	db	32
  4214  007EC2  00                 	db	0
  4215  007EC3                     STR_148:
  4216  007EC3  2C                 	db	44
  4217  007EC4  6E                 	db	110	;'n'
  4218  007EC5  6F                 	db	111	;'o'
  4219  007EC6  64                 	db	100	;'d'
  4220  007EC7  65                 	db	101	;'e'
  4221  007EC8  69                 	db	105	;'i'
  4222  007EC9  64                 	db	100	;'d'
  4223  007ECA  3D                 	db	61	;'='
  4224  007ECB  00                 	db	0
  4225  007ECC                     STR_14:
  4226  007ECC  4C                 	db	76	;'L'
  4227  007ECD  4F                 	db	79	;'O'
  4228  007ECE  4F                 	db	79	;'O'
  4229  007ECF  50                 	db	80	;'P'
  4230  007ED0  42                 	db	66	;'B'
  4231  007ED1  41                 	db	65	;'A'
  4232  007ED2  43                 	db	67	;'C'
  4233  007ED3  4B                 	db	75	;'K'
  4234  007ED4  00                 	db	0
  4235  007ED5                     STR_134:
  4236  007ED5  56                 	db	86	;'V'
  4237  007ED6  31                 	db	49	;'1'
  4238  007ED7  30                 	db	48	;'0'
  4239  007ED8  31                 	db	49	;'1'
  4240  007ED9  31                 	db	49	;'1'
  4241  007EDA  0D                 	db	13
  4242  007EDB  0A                 	db	10
  4243  007EDC  00                 	db	0
  4244  007EDD                     STR_135:
  4245  007EDD  4E                 	db	78	;'N'
  4246  007EDE  31                 	db	49	;'1'
  4247  007EDF  39                 	db	57	;'9'
  4248  007EE0  37                 	db	55	;'7'
  4249  007EE1  37                 	db	55	;'7'
  4250  007EE2  0D                 	db	13
  4251  007EE3  0A                 	db	10
  4252  007EE4  00                 	db	0
  4253  007EE5                     STR_243:
  4254  007EE5  47                 	db	71	;'G'
  4255  007EE6  55                 	db	85	;'U'
  4256  007EE7  49                 	db	73	;'I'
  4257  007EE8  44                 	db	68	;'D'
  4258  007EE9  20                 	db	32
  4259  007EEA  3D                 	db	61	;'='
  4260  007EEB  20                 	db	32
  4261  007EEC  00                 	db	0
  4262  007EED                     STR_128:
  4263  007EED  46                 	db	70	;'F'
  4264  007EEE  49                 	db	73	;'I'
  4265  007EEF  4C                 	db	76	;'L'
  4266  007EF0  54                 	db	84	;'T'
  4267  007EF1  45                 	db	69	;'E'
  4268  007EF2  52                 	db	82	;'R'
  4269  007EF3  20                 	db	32
  4270  007EF4  00                 	db	0
  4271  007EF5                     STR_142:
  4272  007EF5  2C                 	db	44
  4273  007EF6  63                 	db	99	;'c'
  4274  007EF7  6C                 	db	108	;'l'
  4275  007EF8  61                 	db	97	;'a'
  4276  007EF9  73                 	db	115	;'s'
  4277  007EFA  73                 	db	115	;'s'
  4278  007EFB  3D                 	db	61	;'='
  4279  007EFC  00                 	db	0
  4280  007EFD                     STR_122:
  4281  007EFD  56                 	db	86	;'V'
  4282  007EFE  45                 	db	69	;'E'
  4283  007EFF  52                 	db	82	;'R'
  4284  007F00  42                 	db	66	;'B'
  4285  007F01  4F                 	db	79	;'O'
  4286  007F02  53                 	db	83	;'S'
  4287  007F03  45                 	db	69	;'E'
  4288  007F04  00                 	db	0
  4289  007F05                     STR_116:
  4290  007F05  44                 	db	68	;'D'
  4291  007F06  45                 	db	69	;'E'
  4292  007F07  43                 	db	67	;'C'
  4293  007F08  49                 	db	73	;'I'
  4294  007F09  4D                 	db	77	;'M'
  4295  007F0A  41                 	db	65	;'A'
  4296  007F0B  4C                 	db	76	;'L'
  4297  007F0C  00                 	db	0
  4298  007F0D                     STR_18:
  4299  007F0D  56                 	db	86	;'V'
  4300  007F0E  45                 	db	69	;'E'
  4301  007F0F  52                 	db	82	;'R'
  4302  007F10  53                 	db	83	;'S'
  4303  007F11  49                 	db	73	;'I'
  4304  007F12  4F                 	db	79	;'O'
  4305  007F13  4E                 	db	78	;'N'
  4306  007F14  00                 	db	0
  4307  007F15                     STR_177:
  4308  007F15  30                 	db	48	;'0'
  4309  007F16  78                 	db	120	;'x'
  4310  007F17  25                 	db	37
  4311  007F18  30                 	db	48	;'0'
  4312  007F19  38                 	db	56	;'8'
  4313  007F1A  6C                 	db	108	;'l'
  4314  007F1B  58                 	db	88	;'X'
  4315  007F1C  00                 	db	0
  4316  007F1D                     STR_257:
  4317  007F1D  56                 	db	86	;'V'
  4318  007F1E  65                 	db	101	;'e'
  4319  007F1F  72                 	db	114	;'r'
  4320  007F20  62                 	db	98	;'b'
  4321  007F21  6F                 	db	111	;'o'
  4322  007F22  73                 	db	115	;'s'
  4323  007F23  65                 	db	101	;'e'
  4324  007F24  00                 	db	0
  4325  007F25                     STR_256:
  4326  007F25  4D                 	db	77	;'M'
  4327  007F26  6F                 	db	111	;'o'
  4328  007F27  64                 	db	100	;'d'
  4329  007F28  65                 	db	101	;'e'
  4330  007F29  3A                 	db	58	;':'
  4331  007F2A  20                 	db	32
  4332  007F2B  00                 	db	0
  4333  007F2C                     STR_154:
  4334  007F2C  2C                 	db	44
  4335  007F2D  44                 	db	68	;'D'
  4336  007F2E  61                 	db	97	;'a'
  4337  007F2F  74                 	db	116	;'t'
  4338  007F30  61                 	db	97	;'a'
  4339  007F31  3D                 	db	61	;'='
  4340  007F32  00                 	db	0
  4341  007F33                     STR_145:
  4342  007F33  2C                 	db	44
  4343  007F34  74                 	db	116	;'t'
  4344  007F35  79                 	db	121	;'y'
  4345  007F36  70                 	db	112	;'p'
  4346  007F37  65                 	db	101	;'e'
  4347  007F38  3D                 	db	61	;'='
  4348  007F39  00                 	db	0
  4349  007F3A                     STR_151:
  4350  007F3A  2C                 	db	44
  4351  007F3B  73                 	db	115	;'s'
  4352  007F3C  69                 	db	105	;'i'
  4353  007F3D  7A                 	db	122	;'z'
  4354  007F3E  65                 	db	101	;'e'
  4355  007F3F  3D                 	db	61	;'='
  4356  007F40  00                 	db	0
  4357  007F41                     STR_139:
  4358  007F41  3C                 	db	60	;'<'
  4359  007F42  50                 	db	80	;'P'
  4360  007F43  72                 	db	114	;'r'
  4361  007F44  69                 	db	105	;'i'
  4362  007F45  6F                 	db	111	;'o'
  4363  007F46  3D                 	db	61	;'='
  4364  007F47  00                 	db	0
  4365  007F48                     STR_20:
  4366  007F48  49                 	db	73	;'I'
  4367  007F49  46                 	db	70	;'F'
  4368  007F4A  4D                 	db	77	;'M'
  4369  007F4B  4F                 	db	79	;'O'
  4370  007F4C  44                 	db	68	;'D'
  4371  007F4D  45                 	db	69	;'E'
  4372  007F4E  00                 	db	0
  4373  007F4F                     STR_16:
  4374  007F4F  4C                 	db	76	;'L'
  4375  007F50  49                 	db	73	;'I'
  4376  007F51  53                 	db	83	;'S'
  4377  007F52  54                 	db	84	;'T'
  4378  007F53  45                 	db	69	;'E'
  4379  007F54  4E                 	db	78	;'N'
  4380  007F55  00                 	db	0
  4381  007F56                     STR_87:
  4382  007F56  46                 	db	70	;'F'
  4383  007F57  49                 	db	73	;'I'
  4384  007F58  4C                 	db	76	;'L'
  4385  007F59  54                 	db	84	;'T'
  4386  007F5A  45                 	db	69	;'E'
  4387  007F5B  52                 	db	82	;'R'
  4388  007F5C  00                 	db	0
  4389  007F5D                     STR_10:
  4390  007F5D  53                 	db	83	;'S'
  4391  007F5E  49                 	db	73	;'I'
  4392  007F5F  4C                 	db	76	;'L'
  4393  007F60  45                 	db	69	;'E'
  4394  007F61  4E                 	db	78	;'N'
  4395  007F62  54                 	db	84	;'T'
  4396  007F63  00                 	db	0
  4397  007F64                     STR_56:
  4398  007F64  30                 	db	48	;'0'
  4399  007F65  78                 	db	120	;'x'
  4400  007F66  25                 	db	37
  4401  007F67  30                 	db	48	;'0'
  4402  007F68  32                 	db	50	;'2'
  4403  007F69  58                 	db	88	;'X'
  4404  007F6A  00                 	db	0
  4405  007F6B                     STR_143:
  4406  007F6B  30                 	db	48	;'0'
  4407  007F6C  78                 	db	120	;'x'
  4408  007F6D  25                 	db	37
  4409  007F6E  30                 	db	48	;'0'
  4410  007F6F  34                 	db	52	;'4'
  4411  007F70  58                 	db	88	;'X'
  4412  007F71  00                 	db	0
  4413  007F72                     STR_161:
  4414  007F72  30                 	db	48	;'0'
  4415  007F73  78                 	db	120	;'x'
  4416  007F74  25                 	db	37
  4417  007F75  30                 	db	48	;'0'
  4418  007F76  38                 	db	56	;'8'
  4419  007F77  58                 	db	88	;'X'
  4420  007F78  00                 	db	0
  4421  007F79                     STR_136:
  4422  007F79  46                 	db	70	;'F'
  4423  007F7A  30                 	db	48	;'0'
  4424  007F7B  30                 	db	48	;'0'
  4425  007F7C  0D                 	db	13
  4426  007F7D  0A                 	db	10
  4427  007F7E  00                 	db	0
  4428  007F7F                     STR_9:
  4429  007F7F  2B                 	db	43
  4430  007F80  4F                 	db	79	;'O'
  4431  007F81  4B                 	db	75	;'K'
  4432  007F82  0D                 	db	13
  4433  007F83  0A                 	db	10
  4434  007F84  00                 	db	0
  4435  007F85                     STR_121:
  4436  007F85  4D                 	db	77	;'M'
  4437  007F86  4F                 	db	79	;'O'
  4438  007F87  44                 	db	68	;'D'
  4439  007F88  45                 	db	69	;'E'
  4440  007F89  20                 	db	32
  4441  007F8A  00                 	db	0
  4442  007F8B                     STR_129:
  4443  007F8B  4D                 	db	77	;'M'
  4444  007F8C  41                 	db	65	;'A'
  4445  007F8D  53                 	db	83	;'S'
  4446  007F8E  4B                 	db	75	;'K'
  4447  007F8F  20                 	db	32
  4448  007F90  00                 	db	0
  4449  007F91                     STR_12:
  4450  007F91  43                 	db	67	;'C'
  4451  007F92  4C                 	db	76	;'L'
  4452  007F93  4F                 	db	79	;'O'
  4453  007F94  53                 	db	83	;'S'
  4454  007F95  45                 	db	69	;'E'
  4455  007F96  00                 	db	0
  4456  007F97                     STR_126:
  4457  007F97  53                 	db	83	;'S'
  4458  007F98  4C                 	db	76	;'L'
  4459  007F99  43                 	db	67	;'C'
  4460  007F9A  41                 	db	65	;'A'
  4461  007F9B  4E                 	db	78	;'N'
  4462  007F9C  00                 	db	0
  4463  007F9D                     STR_113:
  4464  007F9D  53                 	db	83	;'S'
  4465  007F9E  45                 	db	69	;'E'
  4466  007F9F  54                 	db	84	;'T'
  4467  007FA0  20                 	db	32
  4468  007FA1  00                 	db	0
  4469  007FA2                     STR_47:
  4470  007FA2  46                 	db	70	;'F'
  4471  007FA3  49                 	db	73	;'I'
  4472  007FA4  4E                 	db	78	;'N'
  4473  007FA5  44                 	db	68	;'D'
  4474  007FA6  00                 	db	0
  4475  007FA7                     STR_49:
  4476  007FA7  52                 	db	82	;'R'
  4477  007FA8  52                 	db	82	;'R'
  4478  007FA9  45                 	db	69	;'E'
  4479  007FAA  47                 	db	71	;'G'
  4480  007FAB  00                 	db	0
  4481  007FAC                     STR_72:
  4482  007FAC  57                 	db	87	;'W'
  4483  007FAD  52                 	db	82	;'R'
  4484  007FAE  45                 	db	69	;'E'
  4485  007FAF  47                 	db	71	;'G'
  4486  007FB0  00                 	db	0
  4487  007FB1                     STR_100:
  4488  007FB1  4D                 	db	77	;'M'
  4489  007FB2  41                 	db	65	;'A'
  4490  007FB3  53                 	db	83	;'S'
  4491  007FB4  4B                 	db	75	;'K'
  4492  007FB5  00                 	db	0
  4493  007FB6                     STR_8:
  4494  007FB6  4F                 	db	79	;'O'
  4495  007FB7  50                 	db	80	;'P'
  4496  007FB8  45                 	db	69	;'E'
  4497  007FB9  4E                 	db	78	;'N'
  4498  007FBA  00                 	db	0
  4499  007FBB                     STR_81:
  4500  007FBB  49                 	db	73	;'I'
  4501  007FBC  4E                 	db	78	;'N'
  4502  007FBD  46                 	db	70	;'F'
  4503  007FBE  4F                 	db	79	;'O'
  4504  007FBF  00                 	db	0
  4505  007FC0                     STR_124:
  4506  007FC0  56                 	db	86	;'V'
  4507  007FC1  53                 	db	83	;'S'
  4508  007FC2  43                 	db	67	;'C'
  4509  007FC3  50                 	db	80	;'P'
  4510  007FC4  00                 	db	0
  4511  007FC5                     STR_45:
  4512  007FC5  48                 	db	72	;'H'
  4513  007FC6  45                 	db	69	;'E'
  4514  007FC7  4C                 	db	76	;'L'
  4515  007FC8  50                 	db	80	;'P'
  4516  007FC9  00                 	db	0
  4517  007FCA                     STR_41:
  4518  007FCA  53                 	db	83	;'S'
  4519  007FCB  54                 	db	84	;'T'
  4520  007FCC  41                 	db	65	;'A'
  4521  007FCD  54                 	db	84	;'T'
  4522  007FCE  00                 	db	0
  4523  007FCF                     STR_6:
  4524  007FCF  42                 	db	66	;'B'
  4525  007FD0  4F                 	db	79	;'O'
  4526  007FD1  4F                 	db	79	;'O'
  4527  007FD2  54                 	db	84	;'T'
  4528  007FD3  00                 	db	0
  4529  007FD4                     STR_159:
  4530  007FD4  3E                 	db	62	;'>'
  4531  007FD5  0D                 	db	13
  4532  007FD6  0A                 	db	10
  4533  007FD7  00                 	db	0
  4534  007FD8                     STR_43:
  4535  007FD8  45                 	db	69	;'E'
  4536  007FD9  52                 	db	82	;'R'
  4537  007FDA  52                 	db	82	;'R'
  4538  007FDB  00                 	db	0
  4539  007FDC                     STR_114:
  4540  007FDC  48                 	db	72	;'H'
  4541  007FDD  45                 	db	69	;'E'
  4542  007FDE  58                 	db	88	;'X'
  4543  007FDF  00                 	db	0
  4544  007FE0                     STR_162:
  4545  007FE0  25                 	db	37
  4546  007FE1  6C                 	db	108	;'l'
  4547  007FE2  75                 	db	117	;'u'
  4548  007FE3  00                 	db	0
  4549  007FE4                     STR_245:
  4550  007FE4  2D                 	db	45
  4551  007FE5  2D                 	db	45
  4552  007FE6  00                 	db	0
  4553  007FE7                     STR_38:
  4554  007FE7  52                 	db	82	;'R'
  4555  007FE8  58                 	db	88	;'X'
  4556  007FE9  00                 	db	0
  4557  007FEA                     STR_29:
  4558  007FEA  54                 	db	84	;'T'
  4559  007FEB  58                 	db	88	;'X'
  4560  007FEC  00                 	db	0
  4561  007FED                     STR_57:
  4562  007FED  25                 	db	37
  4563  007FEE  64                 	db	100	;'d'
  4564  007FEF  00                 	db	0
  4565  007FF0                     STR_138:
  4566  007FF0  07                 	db	7
  4567  007FF1  00                 	db	0
  4568  007FF2                     STR_137:
  4569  007FF2  0D                 	db	13
  4570  007FF3  00                 	db	0
  4571  007FF4                     STR_30:
  4572  007FF4  2C                 	db	44
  4573  007FF5  00                 	db	0
  4574  007FF6                     STR_252:
  4575  007FF6  2E                 	db	46
  4576  007FF7  00                 	db	0
  4577  007FF8                     STR_244:
  4578  007FF8  30                 	db	48	;'0'
  4579  007FF9  00                 	db	0
  4580  007FFA                     STR_246:
  4581  007FFA  3A                 	db	58	;':'
  4582  007FFB  00                 	db	0
  4583  007FFC                     STR_251:
  4584  007FFC  3F                 	db	63	;'?'
  4585  007FFD  00                 	db	0
  4586  007FFE                     __end_of__stringdata:
  4587                           	opt stack 0
  4588                           
  4589                           ; #config settings
  4590  007FFE  00                 	db	0	; dummy byte at the end
  4591  0000                     tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           indf0	equ	0xFEF
  4599                           fsr0h	equ	0xFEA
  4600                           fsr0l	equ	0xFE9
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615                           	psect	nvBANK0
  4616  0000F5                     __pnvBANK0:
  4617                           	opt stack 0
  4618  0000F5                     _caps:
  4619                           	opt stack 0
  4620  0000F5                     	ds	2
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           indf0	equ	0xFEF
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           indf1	equ	0xFE7
  4633                           postinc1	equ	0xFE6
  4634                           postdec1	equ	0xFE5
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645                           	psect	cinit
  4646  005464                     __pcinit:
  4647                           	opt stack 0
  4648  005464                     start_initialization:
  4649                           	opt stack 0
  4650  005464                     __initialization:
  4651                           	opt stack 0
  4652                           
  4653                           ; Clear objects allocated to BIGRAM (494 bytes)
  4654  005464  EE04  F000         	lfsr	0,__pbssBIGRAM
  4655  005468  EE11 F0EE          	lfsr	1,494
  4656  00546C                     clear_0:
  4657  00546C  6AEE               	clrf	postinc0,c
  4658  00546E  50E5               	movf	postdec1,w,c
  4659  005470  50E1               	movf	fsr1l,w,c
  4660  005472  E1FC               	bnz	clear_0
  4661  005474  50E2               	movf	fsr1h,w,c
  4662  005476  E1FA               	bnz	clear_0
  4663                           
  4664                           ; Clear objects allocated to BANK3 (256 bytes)
  4665  005478  EE03  F000         	lfsr	0,__pbssBANK3
  4666  00547C  EE11 F000          	lfsr	1,256
  4667  005480                     clear_1:
  4668  005480  6AEE               	clrf	postinc0,c
  4669  005482  50E5               	movf	postdec1,w,c
  4670  005484  50E1               	movf	fsr1l,w,c
  4671  005486  E1FC               	bnz	clear_1
  4672  005488  50E2               	movf	fsr1h,w,c
  4673  00548A  E1FA               	bnz	clear_1
  4674                           
  4675                           ; Clear objects allocated to BANK2 (128 bytes)
  4676  00548C  EE02  F000         	lfsr	0,__pbssBANK2
  4677  005490  0E80               	movlw	128
  4678  005492                     clear_2:
  4679  005492  6AEE               	clrf	postinc0,c
  4680  005494  06E8               	decf	wreg,f,c
  4681  005496  E1FD               	bnz	clear_2
  4682                           
  4683                           ; Clear objects allocated to BANK1 (178 bytes)
  4684  005498  EE01  F000         	lfsr	0,__pbssBANK1
  4685  00549C  0EB2               	movlw	178
  4686  00549E                     clear_3:
  4687  00549E  6AEE               	clrf	postinc0,c
  4688  0054A0  06E8               	decf	wreg,f,c
  4689  0054A2  E1FD               	bnz	clear_3
  4690                           
  4691                           ; Clear objects allocated to BANK0 (36 bytes)
  4692  0054A4  EE00  F0D1         	lfsr	0,__pbssBANK0
  4693  0054A8  0E24               	movlw	36
  4694  0054AA                     clear_4:
  4695  0054AA  6AEE               	clrf	postinc0,c
  4696  0054AC  06E8               	decf	wreg,f,c
  4697  0054AE  E1FD               	bnz	clear_4
  4698                           
  4699                           ; Clear objects allocated to COMRAM (37 bytes)
  4700  0054B0  EE00  F02B         	lfsr	0,__pbssCOMRAM
  4701  0054B4  0E25               	movlw	37
  4702  0054B6                     clear_5:
  4703  0054B6  6AEE               	clrf	postinc0,c
  4704  0054B8  06E8               	decf	wreg,f,c
  4705  0054BA  E1FD               	bnz	clear_5
  4706  0054BC                     end_of_initialization:
  4707                           	opt stack 0
  4708  0054BC                     __end_of__initialization:
  4709                           	opt stack 0
  4710  0054BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4711  0054BE  6EF8               	movwf	tblptru,c
  4712  0054C0  0100               	movlb	0
  4713  0054C2  EF93  F01B         	goto	_main	;jump to C main() function
  4714                           tblptru	equ	0xFF8
  4715                           tblptrh	equ	0xFF7
  4716                           tblptrl	equ	0xFF6
  4717                           tablat	equ	0xFF5
  4718                           prodh	equ	0xFF4
  4719                           prodl	equ	0xFF3
  4720                           intcon	equ	0xFF2
  4721                           indf0	equ	0xFEF
  4722                           postinc0	equ	0xFEE
  4723                           fsr0h	equ	0xFEA
  4724                           fsr0l	equ	0xFE9
  4725                           wreg	equ	0xFE8
  4726                           indf1	equ	0xFE7
  4727                           postinc1	equ	0xFE6
  4728                           postdec1	equ	0xFE5
  4729                           fsr1h	equ	0xFE2
  4730                           fsr1l	equ	0xFE1
  4731                           indf2	equ	0xFDF
  4732                           postinc2	equ	0xFDE
  4733                           postdec2	equ	0xFDD
  4734                           plusw2	equ	0xFDB
  4735                           fsr2h	equ	0xFDA
  4736                           fsr2l	equ	0xFD9
  4737                           status	equ	0xFD8
  4738                           
  4739                           	psect	bssCOMRAM
  4740  00002B                     __pbssCOMRAM:
  4741                           	opt stack 0
  4742  00002B                     _can_transmitOverruns:
  4743                           	opt stack 0
  4744  00002B                     	ds	4
  4745  00002F                     _uart_receiveOverruns:
  4746                           	opt stack 0
  4747  00002F                     	ds	4
  4748  000033                     _uart_transmitOverruns:
  4749                           	opt stack 0
  4750  000033                     	ds	4
  4751  000037                     _made_table:
  4752                           	opt stack 0
  4753  000037                     	ds	2
  4754  000039                     _status_led_cnt:
  4755                           	opt stack 0
  4756  000039                     	ds	2
  4757  00003B                     strtok@sp:
  4758                           	opt stack 0
  4759  00003B                     	ds	2
  4760  00003D                     _USART_Status:
  4761                           	opt stack 0
  4762  00003D                     	ds	1
  4763  00003E                     __ECANRxFilterHitInfo:
  4764                           	opt stack 0
  4765  00003E                     	ds	1
  4766  00003F                     _ledFunctionality:
  4767                           	opt stack 0
  4768  00003F                     	ds	1
  4769  000040                     _canInputFifo:
  4770                           	opt stack 0
  4771  000040                     	ds	8
  4772  000048                     _serialInputFifo:
  4773                           	opt stack 0
  4774  000048                     	ds	8
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           prodh	equ	0xFF4
  4780                           prodl	equ	0xFF3
  4781                           intcon	equ	0xFF2
  4782                           indf0	equ	0xFEF
  4783                           postinc0	equ	0xFEE
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           indf1	equ	0xFE7
  4788                           postinc1	equ	0xFE6
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           plusw2	equ	0xFDB
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800                           	psect	bssBANK0
  4801  0000D1                     __pbssBANK0:
  4802                           	opt stack 0
  4803  0000D1                     _can_receiveOverruns:
  4804                           	opt stack 0
  4805  0000D1                     	ds	4
  4806  0000D5                     _cntRxBytes:
  4807                           	opt stack 0
  4808  0000D5                     	ds	4
  4809  0000D9                     _cntRxFrames:
  4810                           	opt stack 0
  4811  0000D9                     	ds	4
  4812  0000DD                     _cntTxBytes:
  4813                           	opt stack 0
  4814  0000DD                     	ds	4
  4815  0000E1                     _cntTxFrames:
  4816                           	opt stack 0
  4817  0000E1                     	ds	4
  4818  0000E5                     _timekeeper:
  4819                           	opt stack 0
  4820  0000E5                     	ds	4
  4821  0000E9                     _timer:
  4822                           	opt stack 0
  4823  0000E9                     	ds	4
  4824  0000ED                     _bDLE:
  4825                           	opt stack 0
  4826  0000ED                     	ds	1
  4827  0000EE                     _bInitiated:
  4828                           	opt stack 0
  4829  0000EE                     	ds	1
  4830  0000EF                     _bOpen:
  4831                           	opt stack 0
  4832  0000EF                     	ds	1
  4833  0000F0                     _canrxcount:
  4834                           	opt stack 0
  4835  0000F0                     	ds	1
  4836  0000F1                     _mode:
  4837                           	opt stack 0
  4838  0000F1                     	ds	1
  4839  0000F2                     _nTimeStamp:
  4840                           	opt stack 0
  4841  0000F2                     	ds	1
  4842  0000F3                     _sequencyno:
  4843                           	opt stack 0
  4844  0000F3                     	ds	1
  4845  0000F4                     _stateVscpDriver:
  4846                           	opt stack 0
  4847  0000F4                     	ds	1
  4848                           tblptru	equ	0xFF8
  4849                           tblptrh	equ	0xFF7
  4850                           tblptrl	equ	0xFF6
  4851                           tablat	equ	0xFF5
  4852                           prodh	equ	0xFF4
  4853                           prodl	equ	0xFF3
  4854                           intcon	equ	0xFF2
  4855                           indf0	equ	0xFEF
  4856                           postinc0	equ	0xFEE
  4857                           fsr0h	equ	0xFEA
  4858                           fsr0l	equ	0xFE9
  4859                           wreg	equ	0xFE8
  4860                           indf1	equ	0xFE7
  4861                           postinc1	equ	0xFE6
  4862                           postdec1	equ	0xFE5
  4863                           fsr1h	equ	0xFE2
  4864                           fsr1l	equ	0xFE1
  4865                           indf2	equ	0xFDF
  4866                           postinc2	equ	0xFDE
  4867                           postdec2	equ	0xFDD
  4868                           plusw2	equ	0xFDB
  4869                           fsr2h	equ	0xFDA
  4870                           fsr2l	equ	0xFD9
  4871                           status	equ	0xFD8
  4872                           
  4873                           	psect	bssBANK1
  4874  000100                     __pbssBANK1:
  4875                           	opt stack 0
  4876  000100                     _bHex:
  4877                           	opt stack 0
  4878  000100                     	ds	1
  4879  000101                     _bSilent:
  4880                           	opt stack 0
  4881  000101                     	ds	1
  4882  000102                     _pos:
  4883                           	opt stack 0
  4884  000102                     	ds	1
  4885  000103                     _rwtimeout:
  4886                           	opt stack 0
  4887  000103                     	ds	1
  4888  000104                     _cmdbuf:
  4889                           	opt stack 0
  4890  000104                     	ds	80
  4891  000154                     _wrkbuf:
  4892                           	opt stack 0
  4893  000154                     	ds	80
  4894  0001A4                     _vscpData:
  4895                           	opt stack 0
  4896  0001A4                     	ds	8
  4897  0001AC                     _vscpClass:
  4898                           	opt stack 0
  4899  0001AC                     	ds	2
  4900  0001AE                     _vscpNodeId:
  4901                           	opt stack 0
  4902  0001AE                     	ds	1
  4903  0001AF                     _vscpPriority:
  4904                           	opt stack 0
  4905  0001AF                     	ds	1
  4906  0001B0                     _vscpSize:
  4907                           	opt stack 0
  4908  0001B0                     	ds	1
  4909  0001B1                     _vscpType:
  4910                           	opt stack 0
  4911  0001B1                     	ds	1
  4912                           tblptru	equ	0xFF8
  4913                           tblptrh	equ	0xFF7
  4914                           tblptrl	equ	0xFF6
  4915                           tablat	equ	0xFF5
  4916                           prodh	equ	0xFF4
  4917                           prodl	equ	0xFF3
  4918                           intcon	equ	0xFF2
  4919                           indf0	equ	0xFEF
  4920                           postinc0	equ	0xFEE
  4921                           fsr0h	equ	0xFEA
  4922                           fsr0l	equ	0xFE9
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postinc1	equ	0xFE6
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           plusw2	equ	0xFDB
  4933                           fsr2h	equ	0xFDA
  4934                           fsr2l	equ	0xFD9
  4935                           status	equ	0xFD8
  4936                           
  4937                           	psect	bssBANK2
  4938  000200                     __pbssBANK2:
  4939                           	opt stack 0
  4940  000200                     _inputBuffer:
  4941                           	opt stack 0
  4942  000200                     	ds	128
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           indf0	equ	0xFEF
  4951                           postinc0	equ	0xFEE
  4952                           fsr0h	equ	0xFEA
  4953                           fsr0l	equ	0xFE9
  4954                           wreg	equ	0xFE8
  4955                           indf1	equ	0xFE7
  4956                           postinc1	equ	0xFE6
  4957                           postdec1	equ	0xFE5
  4958                           fsr1h	equ	0xFE2
  4959                           fsr1l	equ	0xFE1
  4960                           indf2	equ	0xFDF
  4961                           postinc2	equ	0xFDE
  4962                           postdec2	equ	0xFDD
  4963                           plusw2	equ	0xFDB
  4964                           fsr2h	equ	0xFDA
  4965                           fsr2l	equ	0xFD9
  4966                           status	equ	0xFD8
  4967                           
  4968                           	psect	bssBANK3
  4969  000300                     __pbssBANK3:
  4970                           	opt stack 0
  4971  000300                     _crc8_table:
  4972                           	opt stack 0
  4973  000300                     	ds	256
  4974                           tblptru	equ	0xFF8
  4975                           tblptrh	equ	0xFF7
  4976                           tblptrl	equ	0xFF6
  4977                           tablat	equ	0xFF5
  4978                           prodh	equ	0xFF4
  4979                           prodl	equ	0xFF3
  4980                           intcon	equ	0xFF2
  4981                           indf0	equ	0xFEF
  4982                           postinc0	equ	0xFEE
  4983                           fsr0h	equ	0xFEA
  4984                           fsr0l	equ	0xFE9
  4985                           wreg	equ	0xFE8
  4986                           indf1	equ	0xFE7
  4987                           postinc1	equ	0xFE6
  4988                           postdec1	equ	0xFE5
  4989                           fsr1h	equ	0xFE2
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           plusw2	equ	0xFDB
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999                           	psect	bssBIGRAM
  5000  000400                     __pbssBIGRAM:
  5001                           	opt stack 0
  5002  000400                     _caninputBuffer:
  5003                           	opt stack 0
  5004  000400                     	ds	494
  5005                           tblptru	equ	0xFF8
  5006                           tblptrh	equ	0xFF7
  5007                           tblptrl	equ	0xFF6
  5008                           tablat	equ	0xFF5
  5009                           prodh	equ	0xFF4
  5010                           prodl	equ	0xFF3
  5011                           intcon	equ	0xFF2
  5012                           indf0	equ	0xFEF
  5013                           postinc0	equ	0xFEE
  5014                           fsr0h	equ	0xFEA
  5015                           fsr0l	equ	0xFE9
  5016                           wreg	equ	0xFE8
  5017                           indf1	equ	0xFE7
  5018                           postinc1	equ	0xFE6
  5019                           postdec1	equ	0xFE5
  5020                           fsr1h	equ	0xFE2
  5021                           fsr1l	equ	0xFE1
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030                           	psect	cstackBANK2
  5031  000280                     __pcstackBANK2:
  5032                           	opt stack 0
  5033  000280                     doModeVerbose@id:
  5034                           	opt stack 0
  5035                           
  5036                           ; 4 bytes @ 0x0
  5037  000280                     	ds	4
  5038  000284                     doModeVerbose@preg:
  5039                           	opt stack 0
  5040                           
  5041                           ; 2 bytes @ 0x4
  5042  000284                     	ds	2
  5043  000286                     doModeVerbose@preg_1168:
  5044                           	opt stack 0
  5045                           
  5046                           ; 2 bytes @ 0x6
  5047  000286                     	ds	2
  5048  000288                     doModeVerbose@filter_class:
  5049                           	opt stack 0
  5050                           
  5051                           ; 2 bytes @ 0x8
  5052  000288                     	ds	2
  5053  00028A                     doModeVerbose@mask_class:
  5054                           	opt stack 0
  5055                           
  5056                           ; 2 bytes @ 0xA
  5057  00028A                     	ds	2
  5058  00028C                     doModeVerbose@nodeid:
  5059                           	opt stack 0
  5060                           
  5061                           ; 1 bytes @ 0xC
  5062  00028C                     	ds	1
  5063  00028D                     doModeVerbose@nodeid_1160:
  5064                           	opt stack 0
  5065                           
  5066                           ; 1 bytes @ 0xD
  5067  00028D                     	ds	1
  5068  00028E                     doModeVerbose@filter_priority:
  5069                           	opt stack 0
  5070                           
  5071                           ; 1 bytes @ 0xE
  5072  00028E                     	ds	1
  5073  00028F                     doModeVerbose@filter_type:
  5074                           	opt stack 0
  5075                           
  5076                           ; 1 bytes @ 0xF
  5077  00028F                     	ds	1
  5078  000290                     doModeVerbose@filter_nodeid:
  5079                           	opt stack 0
  5080                           
  5081                           ; 1 bytes @ 0x10
  5082  000290                     	ds	1
  5083  000291                     doModeVerbose@mask_priority:
  5084                           	opt stack 0
  5085                           
  5086                           ; 1 bytes @ 0x11
  5087  000291                     	ds	1
  5088  000292                     doModeVerbose@mask_type:
  5089                           	opt stack 0
  5090                           
  5091                           ; 1 bytes @ 0x12
  5092  000292                     	ds	1
  5093  000293                     doModeVerbose@mask_nodeid:
  5094                           	opt stack 0
  5095                           
  5096                           ; 1 bytes @ 0x13
  5097  000293                     	ds	1
  5098  000294                     _doModeVerbose$1128:
  5099                           	opt stack 0
  5100                           
  5101                           ; 2 bytes @ 0x14
  5102  000294                     	ds	2
  5103  000296                     _doModeVerbose$1140:
  5104                           	opt stack 0
  5105                           
  5106                           ; 2 bytes @ 0x16
  5107  000296                     	ds	2
  5108  000298                     _doModeVerbose$1145:
  5109                           	opt stack 0
  5110                           
  5111                           ; 2 bytes @ 0x18
  5112  000298                     	ds	2
  5113  00029A                     _doModeVerbose$1151:
  5114                           	opt stack 0
  5115                           
  5116                           ; 2 bytes @ 0x1A
  5117  00029A                     	ds	2
  5118  00029C                     _doModeVerbose$1155:
  5119                           	opt stack 0
  5120                           
  5121                           ; 2 bytes @ 0x1C
  5122  00029C                     	ds	2
  5123  00029E                     _doModeVerbose$1180:
  5124                           	opt stack 0
  5125                           
  5126                           ; 2 bytes @ 0x1E
  5127  00029E                     	ds	2
  5128  0002A0                     doModeVerbose@rv:
  5129                           	opt stack 0
  5130                           
  5131                           ; 1 bytes @ 0x20
  5132  0002A0                     	ds	1
  5133  0002A1                     doModeVerbose@page_1161:
  5134                           	opt stack 0
  5135                           
  5136                           ; 1 bytes @ 0x21
  5137  0002A1                     	ds	1
  5138  0002A2                     doModeVerbose@reg_1162:
  5139                           	opt stack 0
  5140                           
  5141                           ; 1 bytes @ 0x22
  5142  0002A2                     	ds	1
  5143  0002A3                     doModeVerbose@id_1221:
  5144                           	opt stack 0
  5145                           
  5146                           ; 4 bytes @ 0x23
  5147  0002A3                     	ds	4
  5148  0002A7                     doModeVerbose@filterno:
  5149                           	opt stack 0
  5150                           
  5151                           ; 1 bytes @ 0x27
  5152  0002A7                     	ds	1
  5153  0002A8                     doModeVerbose@maskno:
  5154                           	opt stack 0
  5155                           
  5156                           ; 1 bytes @ 0x28
  5157  0002A8                     	ds	1
  5158  0002A9                     doModeVerbose@value_1163:
  5159                           	opt stack 0
  5160                           
  5161                           ; 1 bytes @ 0x29
  5162  0002A9                     	ds	1
  5163  0002AA                     doModeVerbose@i:
  5164                           	opt stack 0
  5165                           
  5166                           ; 1 bytes @ 0x2A
  5167  0002AA                     	ds	1
  5168  0002AB                     doModeVerbose@count:
  5169                           	opt stack 0
  5170                           
  5171                           ; 1 bytes @ 0x2B
  5172  0002AB                     	ds	1
  5173  0002AC                     doModeVerbose@c:
  5174                           	opt stack 0
  5175                           
  5176                           ; 1 bytes @ 0x2C
  5177  0002AC                     	ds	1
  5178  0002AD                     doModeVerbose@page:
  5179                           	opt stack 0
  5180                           
  5181                           ; 1 bytes @ 0x2D
  5182  0002AD                     	ds	1
  5183  0002AE                     doModeVerbose@reg:
  5184                           	opt stack 0
  5185                           
  5186                           ; 1 bytes @ 0x2E
  5187  0002AE                     	ds	1
  5188  0002AF                     doModeVerbose@nodeid_1175:
  5189                           	opt stack 0
  5190                           
  5191                           ; 1 bytes @ 0x2F
  5192  0002AF                     	ds	1
  5193  0002B0                     doModeVerbose@i_1110:
  5194                           	opt stack 0
  5195                           
  5196                           ; 1 bytes @ 0x30
  5197  0002B0                     	ds	1
  5198  0002B1                     doModeVerbose@value:
  5199                           	opt stack 0
  5200                           
  5201                           ; 1 bytes @ 0x31
  5202  0002B1                     	ds	1
  5203  0002B2                     doModeVerbose@p_1116:
  5204                           	opt stack 0
  5205                           
  5206                           ; 2 bytes @ 0x32
  5207  0002B2                     	ds	2
  5208  0002B4                     doModeVerbose@p_1164:
  5209                           	opt stack 0
  5210                           
  5211                           ; 2 bytes @ 0x34
  5212  0002B4                     	ds	2
  5213  0002B6                     doModeVerbose@ifmode:
  5214                           	opt stack 0
  5215                           
  5216                           ; 1 bytes @ 0x36
  5217  0002B6                     	ds	1
  5218  0002B7                     doModeVerbose@p:
  5219                           	opt stack 0
  5220                           
  5221                           ; 2 bytes @ 0x37
  5222  0002B7                     	ds	2
  5223  0002B9                     doModeVerbose@p_1189:
  5224                           	opt stack 0
  5225                           
  5226                           ; 2 bytes @ 0x39
  5227  0002B9                     	ds	2
  5228  0002BB                     doModeVerbose@p_1209:
  5229                           	opt stack 0
  5230                           
  5231                           ; 2 bytes @ 0x3B
  5232  0002BB                     	ds	2
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           indf0	equ	0xFEF
  5241                           postinc0	equ	0xFEE
  5242                           fsr0h	equ	0xFEA
  5243                           fsr0l	equ	0xFE9
  5244                           wreg	equ	0xFE8
  5245                           indf1	equ	0xFE7
  5246                           postinc1	equ	0xFE6
  5247                           postdec1	equ	0xFE5
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           plusw2	equ	0xFDB
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258                           	psect	cstackBANK1
  5259  0001B2                     __pcstackBANK1:
  5260                           	opt stack 0
  5261  0001B2                     ??_doModeVerbose:
  5262                           
  5263                           ; 0 bytes @ 0x0
  5264  0001B2                     	ds	20
  5265                           tblptru	equ	0xFF8
  5266                           tblptrh	equ	0xFF7
  5267                           tblptrl	equ	0xFF6
  5268                           tablat	equ	0xFF5
  5269                           prodh	equ	0xFF4
  5270                           prodl	equ	0xFF3
  5271                           intcon	equ	0xFF2
  5272                           indf0	equ	0xFEF
  5273                           postinc0	equ	0xFEE
  5274                           fsr0h	equ	0xFEA
  5275                           fsr0l	equ	0xFE9
  5276                           wreg	equ	0xFE8
  5277                           indf1	equ	0xFE7
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           plusw2	equ	0xFDB
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290                           	psect	cstackBANK0
  5291  000060                     __pcstackBANK0:
  5292                           	opt stack 0
  5293  000060                     ?_WriteTimer0:
  5294                           	opt stack 0
  5295  000060                     ?_fifo_init:
  5296                           	opt stack 0
  5297  000060                     ?_OpenUSART:
  5298                           	opt stack 0
  5299  000060                     ?_Write_b_eep:
  5300                           	opt stack 0
  5301  000060                     ?_setFilter:
  5302                           	opt stack 0
  5303  000060                     ?__CANIDToRegs:
  5304                           	opt stack 0
  5305  000060                     ??_isdigit:
  5306  000060                     ?_Read_b_eep:
  5307                           	opt stack 0
  5308  000060                     ?_fifo_read:
  5309                           	opt stack 0
  5310  000060                     ?_memset:
  5311                           	opt stack 0
  5312  000060                     ?_strcpy:
  5313                           	opt stack 0
  5314  000060                     ?_strchr:
  5315                           	opt stack 0
  5316  000060                     ?_strlen:
  5317                           	opt stack 0
  5318  000060                     ?_memcpy:
  5319                           	opt stack 0
  5320  000060                     ?_strcat:
  5321                           	opt stack 0
  5322  000060                     ?___lwdiv:
  5323                           	opt stack 0
  5324  000060                     ?___lwmod:
  5325                           	opt stack 0
  5326  000060                     ?___wmul:
  5327                           	opt stack 0
  5328  000060                     ?___lldiv:
  5329                           	opt stack 0
  5330  000060                     ECANSetOperationMode@mode:
  5331                           	opt stack 0
  5332  000060                     nibbleFromChar@c:
  5333                           	opt stack 0
  5334  000060                     OpenTimer0@config:
  5335                           	opt stack 0
  5336  000060                     WriteUSART@data:
  5337                           	opt stack 0
  5338  000060                     toupper@c:
  5339                           	opt stack 0
  5340  000060                     __CANIDToRegs@ptr:
  5341                           	opt stack 0
  5342  000060                     fifo_init@buf:
  5343                           	opt stack 0
  5344  000060                     fifo_read@buf:
  5345                           	opt stack 0
  5346  000060                     _init_crc8$1961:
  5347                           	opt stack 0
  5348  000060                     Read_b_eep@badd:
  5349                           	opt stack 0
  5350  000060                     Write_b_eep@badd:
  5351                           	opt stack 0
  5352  000060                     WriteTimer0@timer0:
  5353                           	opt stack 0
  5354  000060                     OpenUSART@spbrg:
  5355                           	opt stack 0
  5356  000060                     ___lwdiv@dividend:
  5357                           	opt stack 0
  5358  000060                     ___lwmod@dividend:
  5359                           	opt stack 0
  5360  000060                     memcpy@d1:
  5361                           	opt stack 0
  5362  000060                     memset@p1:
  5363                           	opt stack 0
  5364  000060                     strcat@to:
  5365                           	opt stack 0
  5366  000060                     strchr@ptr:
  5367                           	opt stack 0
  5368  000060                     strcpy@to:
  5369                           	opt stack 0
  5370  000060                     strlen@s:
  5371                           	opt stack 0
  5372  000060                     ___wmul@multiplier:
  5373                           	opt stack 0
  5374  000060                     setFilter@val:
  5375                           	opt stack 0
  5376  000060                     ___lldiv@dividend:
  5377                           	opt stack 0
  5378                           
  5379                           ; 4 bytes @ 0x0
  5380  000060                     	ds	1
  5381  000061                     ?_putsUSART:
  5382                           	opt stack 0
  5383  000061                     ??_printBinary:
  5384  000061                     ?_strichr:
  5385                           	opt stack 0
  5386  000061                     _isdigit$2901:
  5387                           	opt stack 0
  5388  000061                     putsUSART@data:
  5389                           	opt stack 0
  5390  000061                     strichr@ptr:
  5391                           	opt stack 0
  5392                           
  5393                           ; 2 bytes @ 0x1
  5394  000061                     	ds	1
  5395  000062                     Write_b_eep@bdat:
  5396                           	opt stack 0
  5397  000062                     OpenUSART@config:
  5398                           	opt stack 0
  5399  000062                     isdigit@c:
  5400                           	opt stack 0
  5401  000062                     fifo_init@size:
  5402                           	opt stack 0
  5403  000062                     fifo_read@nbytes:
  5404                           	opt stack 0
  5405  000062                     init_crc8@j:
  5406                           	opt stack 0
  5407  000062                     WriteTimer0@timer:
  5408                           	opt stack 0
  5409  000062                     ___lwdiv@divisor:
  5410                           	opt stack 0
  5411  000062                     ___lwmod@divisor:
  5412                           	opt stack 0
  5413  000062                     memcpy@s1:
  5414                           	opt stack 0
  5415  000062                     memset@c:
  5416                           	opt stack 0
  5417  000062                     strcat@from:
  5418                           	opt stack 0
  5419  000062                     strchr@chr:
  5420                           	opt stack 0
  5421  000062                     strcpy@from:
  5422                           	opt stack 0
  5423  000062                     strlen@cp:
  5424                           	opt stack 0
  5425  000062                     ___wmul@multiplicand:
  5426                           	opt stack 0
  5427  000062                     __CANIDToRegs@val:
  5428                           	opt stack 0
  5429                           
  5430                           ; 4 bytes @ 0x2
  5431  000062                     	ds	1
  5432  000063                     ??_putsUSART:
  5433  000063                     printBinary@value:
  5434                           	opt stack 0
  5435  000063                     Write_b_eep@GIE_BIT_VAL:
  5436                           	opt stack 0
  5437  000063                     strichr@chr:
  5438                           	opt stack 0
  5439                           
  5440                           ; 2 bytes @ 0x3
  5441  000063                     	ds	1
  5442  000064                     ??_fifo_read:
  5443  000064                     ??_strchr:
  5444  000064                     ??_setFilter:
  5445  000064                     ?_hexStringToBytes:
  5446                           	opt stack 0
  5447  000064                     ?_strnicmp:
  5448                           	opt stack 0
  5449  000064                     init_app_eeprom@i:
  5450                           	opt stack 0
  5451  000064                     fifo_init@f:
  5452                           	opt stack 0
  5453  000064                     init_crc8@crc:
  5454                           	opt stack 0
  5455  000064                     ___lwdiv@counter:
  5456                           	opt stack 0
  5457  000064                     ___lwmod@counter:
  5458                           	opt stack 0
  5459  000064                     printBinary@i:
  5460                           	opt stack 0
  5461  000064                     hexStringToBytes@buf:
  5462                           	opt stack 0
  5463  000064                     memcpy@n:
  5464                           	opt stack 0
  5465  000064                     memset@n:
  5466                           	opt stack 0
  5467  000064                     strcat@cp:
  5468                           	opt stack 0
  5469  000064                     strcpy@cp:
  5470                           	opt stack 0
  5471  000064                     strnicmp@s1:
  5472                           	opt stack 0
  5473  000064                     ___wmul@product:
  5474                           	opt stack 0
  5475  000064                     ___lldiv@divisor:
  5476                           	opt stack 0
  5477                           
  5478                           ; 4 bytes @ 0x4
  5479  000064                     	ds	1
  5480  000065                     init_crc8@i:
  5481                           	opt stack 0
  5482  000065                     ___lwdiv@quotient:
  5483                           	opt stack 0
  5484                           
  5485                           ; 2 bytes @ 0x5
  5486  000065                     	ds	1
  5487  000066                     ?_atoi:
  5488                           	opt stack 0
  5489  000066                     ?_strspn:
  5490                           	opt stack 0
  5491  000066                     ?_strcspn:
  5492                           	opt stack 0
  5493  000066                     __CANIDToRegs@type:
  5494                           	opt stack 0
  5495  000066                     hexStringToBytes@size:
  5496                           	opt stack 0
  5497  000066                     atoi@s:
  5498                           	opt stack 0
  5499  000066                     memcpy@d:
  5500                           	opt stack 0
  5501  000066                     memset@p:
  5502                           	opt stack 0
  5503  000066                     strnicmp@s2:
  5504                           	opt stack 0
  5505  000066                     strcspn@s1:
  5506                           	opt stack 0
  5507  000066                     strspn@s1:
  5508                           	opt stack 0
  5509                           
  5510                           ; 2 bytes @ 0x6
  5511  000066                     	ds	1
  5512  000067                     ??__CANIDToRegs:
  5513  000067                     ?_crc8:
  5514                           	opt stack 0
  5515  000067                     ?_utoa:
  5516                           	opt stack 0
  5517  000067                     crc8@crc:
  5518                           	opt stack 0
  5519  000067                     hexStringToBytes@inhex:
  5520                           	opt stack 0
  5521  000067                     utoa@buf:
  5522                           	opt stack 0
  5523                           
  5524                           ; 2 bytes @ 0x7
  5525  000067                     	ds	1
  5526  000068                     ??_atoi:
  5527  000068                     fifo_read@p:
  5528                           	opt stack 0
  5529  000068                     memcpy@s:
  5530                           	opt stack 0
  5531  000068                     strnicmp@len:
  5532                           	opt stack 0
  5533  000068                     strcspn@s2:
  5534                           	opt stack 0
  5535  000068                     strspn@s2:
  5536                           	opt stack 0
  5537  000068                     ___lldiv@quotient:
  5538                           	opt stack 0
  5539                           
  5540                           ; 4 bytes @ 0x8
  5541  000068                     	ds	1
  5542  000069                     ??_hexStringToBytes:
  5543  000069                     __CANIDToRegs@Value:
  5544                           	opt stack 0
  5545  000069                     crc8@m:
  5546                           	opt stack 0
  5547  000069                     utoa@val:
  5548                           	opt stack 0
  5549                           
  5550                           ; 2 bytes @ 0x9
  5551  000069                     	ds	1
  5552  00006A                     ??_crc8:
  5553  00006A                     ??_strnicmp:
  5554  00006A                     ?_ECANSendMessage:
  5555                           	opt stack 0
  5556  00006A                     setFilter@filter:
  5557                           	opt stack 0
  5558  00006A                     atoi@sign:
  5559                           	opt stack 0
  5560  00006A                     fifo_read@i:
  5561                           	opt stack 0
  5562  00006A                     strcspn@i:
  5563                           	opt stack 0
  5564  00006A                     strspn@i:
  5565                           	opt stack 0
  5566  00006A                     ECANSendMessage@id:
  5567                           	opt stack 0
  5568                           
  5569                           ; 4 bytes @ 0xA
  5570  00006A                     	ds	1
  5571  00006B                     setFilter@sidh:
  5572                           	opt stack 0
  5573  00006B                     atoi@a:
  5574                           	opt stack 0
  5575  00006B                     utoa@base:
  5576                           	opt stack 0
  5577                           
  5578                           ; 2 bytes @ 0xB
  5579  00006B                     	ds	1
  5580  00006C                     ?_sendEscapedUartData:
  5581                           	opt stack 0
  5582  00006C                     ?_calcCRC:
  5583                           	opt stack 0
  5584  00006C                     ?_strtok:
  5585                           	opt stack 0
  5586  00006C                     setFilter@sidl:
  5587                           	opt stack 0
  5588  00006C                     fifo_read@f:
  5589                           	opt stack 0
  5590  00006C                     ___lldiv@counter:
  5591                           	opt stack 0
  5592  00006C                     strnicmp@r:
  5593                           	opt stack 0
  5594  00006C                     sendEscapedUartData@pcrc:
  5595                           	opt stack 0
  5596  00006C                     calcCRC@p:
  5597                           	opt stack 0
  5598  00006C                     hexStringToBytes@len:
  5599                           	opt stack 0
  5600  00006C                     strtok@s1:
  5601                           	opt stack 0
  5602                           
  5603                           ; 2 bytes @ 0xC
  5604  00006C                     	ds	1
  5605  00006D                     ?_getCANFrame:
  5606                           	opt stack 0
  5607  00006D                     ?_stristr:
  5608                           	opt stack 0
  5609  00006D                     ?___llmod:
  5610                           	opt stack 0
  5611  00006D                     setFilter@eidh:
  5612                           	opt stack 0
  5613  00006D                     getCANFrame@pdlc:
  5614                           	opt stack 0
  5615  00006D                     utoa@v:
  5616                           	opt stack 0
  5617  00006D                     stristr@s1:
  5618                           	opt stack 0
  5619  00006D                     ___llmod@dividend:
  5620                           	opt stack 0
  5621                           
  5622                           ; 4 bytes @ 0xD
  5623  00006D                     	ds	1
  5624  00006E                     sendEscapedUartData@c:
  5625                           	opt stack 0
  5626  00006E                     calcCRC@len:
  5627                           	opt stack 0
  5628  00006E                     setFilter@eidl:
  5629                           	opt stack 0
  5630  00006E                     ECANSendMessage@data:
  5631                           	opt stack 0
  5632  00006E                     hexStringToBytes@p:
  5633                           	opt stack 0
  5634  00006E                     strtok@s2:
  5635                           	opt stack 0
  5636                           
  5637                           ; 2 bytes @ 0xE
  5638  00006E                     	ds	1
  5639  00006F                     ?_sendVSCPDriverCommandReply:
  5640                           	opt stack 0
  5641  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5642                           	opt stack 0
  5643  00006F                     sendVSCPDriverAck@crc:
  5644                           	opt stack 0
  5645  00006F                     sendVSCPDriverNack@crc:
  5646                           	opt stack 0
  5647  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5648                           	opt stack 0
  5649  00006F                     sendVSCPModeCapabilities@crc:
  5650                           	opt stack 0
  5651  00006F                     calcCRC@j:
  5652                           	opt stack 0
  5653  00006F                     utoa@c:
  5654                           	opt stack 0
  5655  00006F                     getCANFrame@pdata:
  5656                           	opt stack 0
  5657  00006F                     stristr@s2:
  5658                           	opt stack 0
  5659                           
  5660                           ; 2 bytes @ 0xF
  5661  00006F                     	ds	1
  5662  000070                     ?_itoa:
  5663                           	opt stack 0
  5664  000070                     sendVSCPDriverErrorFrame@crc:
  5665                           	opt stack 0
  5666  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5667                           	opt stack 0
  5668  000070                     calcCRC@crc:
  5669                           	opt stack 0
  5670  000070                     ECANSendMessage@dataLen:
  5671                           	opt stack 0
  5672  000070                     hexStringToBytes@i:
  5673                           	opt stack 0
  5674  000070                     itoa@buf:
  5675                           	opt stack 0
  5676                           
  5677                           ; 2 bytes @ 0x10
  5678  000070                     	ds	1
  5679  000071                     sendVSCPDriverCommandReply@crc:
  5680                           	opt stack 0
  5681  000071                     getCANFrame@pid:
  5682                           	opt stack 0
  5683  000071                     ECANSendMessage@msgFlags:
  5684                           	opt stack 0
  5685  000071                     ___llmod@divisor:
  5686                           	opt stack 0
  5687                           
  5688                           ; 4 bytes @ 0x11
  5689  000071                     	ds	1
  5690  000072                     ??_ECANSendMessage:
  5691  000072                     ?_getVSCPFrame:
  5692                           	opt stack 0
  5693  000072                     getVSCPFrame@pvscpclass:
  5694                           	opt stack 0
  5695  000072                     itoa@val:
  5696                           	opt stack 0
  5697  000072                     receiveSendEventCANAL@data:
  5698                           	opt stack 0
  5699  000072                     receiveSendMultiEventCANAL@data:
  5700                           	opt stack 0
  5701                           
  5702                           ; 8 bytes @ 0x12
  5703  000072                     	ds	1
  5704  000073                     ECANSendMessage@pb:
  5705                           	opt stack 0
  5706                           
  5707                           ; 18 bytes @ 0x13
  5708  000073                     	ds	1
  5709  000074                     getVSCPFrame@pvscptype:
  5710                           	opt stack 0
  5711  000074                     itoa@base:
  5712                           	opt stack 0
  5713                           
  5714                           ; 2 bytes @ 0x14
  5715  000074                     	ds	1
  5716  000075                     ___llmod@counter:
  5717                           	opt stack 0
  5718                           
  5719                           ; 1 bytes @ 0x15
  5720  000075                     	ds	1
  5721  000076                     ?_sprintf:
  5722                           	opt stack 0
  5723  000076                     ?_ultoa:
  5724                           	opt stack 0
  5725  000076                     getVSCPFrame@pNodeId:
  5726                           	opt stack 0
  5727  000076                     sprintf@sp:
  5728                           	opt stack 0
  5729  000076                     ultoa@buf:
  5730                           	opt stack 0
  5731                           
  5732                           ; 2 bytes @ 0x16
  5733  000076                     	ds	2
  5734  000078                     getVSCPFrame@pPriority:
  5735                           	opt stack 0
  5736  000078                     sprintf@f:
  5737                           	opt stack 0
  5738  000078                     ultoa@val:
  5739                           	opt stack 0
  5740  000078                     printFirmwareVersion@wrkbuf:
  5741                           	opt stack 0
  5742                           
  5743                           ; 20 bytes @ 0x18
  5744  000078                     	ds	2
  5745  00007A                     receiveSendEventCANAL@i:
  5746                           	opt stack 0
  5747  00007A                     receiveSendMultiEventCANAL@msgcount:
  5748                           	opt stack 0
  5749  00007A                     getVSCPFrame@pSize:
  5750                           	opt stack 0
  5751                           
  5752                           ; 2 bytes @ 0x1A
  5753  00007A                     	ds	1
  5754  00007B                     receiveSendMultiEventCANAL@i:
  5755                           	opt stack 0
  5756  00007B                     receiveSendEventCANAL@id:
  5757                           	opt stack 0
  5758                           
  5759                           ; 4 bytes @ 0x1B
  5760  00007B                     	ds	1
  5761  00007C                     receiveSendMultiEventCANAL@dlc:
  5762                           	opt stack 0
  5763  00007C                     getVSCPFrame@pData:
  5764                           	opt stack 0
  5765  00007C                     ultoa@base:
  5766                           	opt stack 0
  5767                           
  5768                           ; 2 bytes @ 0x1C
  5769  00007C                     	ds	1
  5770  00007D                     receiveSendMultiEventCANAL@id:
  5771                           	opt stack 0
  5772                           
  5773                           ; 4 bytes @ 0x1D
  5774  00007D                     	ds	1
  5775  00007E                     ??_sprintf:
  5776  00007E                     ??_getVSCPFrame:
  5777  00007E                     ultoa@v:
  5778                           	opt stack 0
  5779                           
  5780                           ; 4 bytes @ 0x1E
  5781  00007E                     	ds	1
  5782  00007F                     receiveSendEventCANAL@dlc:
  5783                           	opt stack 0
  5784                           
  5785                           ; 1 bytes @ 0x1F
  5786  00007F                     	ds	1
  5787  000080                     receiveSendEventCANAL@crc:
  5788                           	opt stack 0
  5789                           
  5790                           ; 1 bytes @ 0x20
  5791  000080                     	ds	1
  5792  000081                     receiveSendMultiEventCANAL@crc:
  5793                           	opt stack 0
  5794  000081                     sprintf@idx:
  5795                           	opt stack 0
  5796                           
  5797                           ; 1 bytes @ 0x21
  5798  000081                     	ds	1
  5799  000082                     receiveSendMultiEventCANAL@pos:
  5800                           	opt stack 0
  5801  000082                     ultoa@c:
  5802                           	opt stack 0
  5803  000082                     _sprintf$2023:
  5804                           	opt stack 0
  5805  000082                     getVSCPFrame@id:
  5806                           	opt stack 0
  5807                           
  5808                           ; 4 bytes @ 0x22
  5809  000082                     	ds	1
  5810  000083                     ??_receiveSendEventSLCAN:
  5811                           
  5812                           ; 0 bytes @ 0x23
  5813  000083                     	ds	1
  5814  000084                     _sprintf$2024:
  5815                           	opt stack 0
  5816                           
  5817                           ; 2 bytes @ 0x24
  5818  000084                     	ds	1
  5819  000085                     ECANSendMessage@mode:
  5820                           	opt stack 0
  5821                           
  5822                           ; 1 bytes @ 0x25
  5823  000085                     	ds	1
  5824  000086                     ECANSendMessage@buffers:
  5825                           	opt stack 0
  5826  000086                     _sprintf$2030:
  5827                           	opt stack 0
  5828  000086                     receiveSendEventSLCAN@id:
  5829                           	opt stack 0
  5830                           
  5831                           ; 4 bytes @ 0x26
  5832  000086                     	ds	1
  5833  000087                     ECANSendMessage@j:
  5834                           	opt stack 0
  5835                           
  5836                           ; 1 bytes @ 0x27
  5837  000087                     	ds	1
  5838  000088                     ECANSendMessage@tempBSEL0:
  5839                           	opt stack 0
  5840  000088                     sprintf@ap:
  5841                           	opt stack 0
  5842                           
  5843                           ; 1 bytes @ 0x28
  5844  000088                     	ds	1
  5845  000089                     ECANSendMessage@tempPtr:
  5846                           	opt stack 0
  5847  000089                     sprintf@prec:
  5848                           	opt stack 0
  5849                           
  5850                           ; 2 bytes @ 0x29
  5851  000089                     	ds	1
  5852  00008A                     receiveSendEventSLCAN@dlc:
  5853                           	opt stack 0
  5854                           
  5855                           ; 1 bytes @ 0x2A
  5856  00008A                     	ds	1
  5857  00008B                     ECANSendMessage@temp:
  5858                           	opt stack 0
  5859  00008B                     receiveSendEventSLCAN@i:
  5860                           	opt stack 0
  5861  00008B                     sprintf@width:
  5862                           	opt stack 0
  5863                           
  5864                           ; 2 bytes @ 0x2B
  5865  00008B                     	ds	1
  5866  00008C                     ECANSendMessage@i:
  5867                           	opt stack 0
  5868                           
  5869                           ; 1 bytes @ 0x2C
  5870  00008C                     	ds	1
  5871  00008D                     ECANSendMessage@ptr:
  5872                           	opt stack 0
  5873  00008D                     sprintf@_val:
  5874                           	opt stack 0
  5875                           
  5876                           ; 4 bytes @ 0x2D
  5877  00008D                     	ds	2
  5878  00008F                     ?_sendCANFrame:
  5879                           	opt stack 0
  5880  00008F                     sendCANFrame@id:
  5881                           	opt stack 0
  5882                           
  5883                           ; 4 bytes @ 0x2F
  5884  00008F                     	ds	2
  5885  000091                     sprintf@c:
  5886                           	opt stack 0
  5887                           
  5888                           ; 1 bytes @ 0x31
  5889  000091                     	ds	1
  5890  000092                     sprintf@flag:
  5891                           	opt stack 0
  5892                           
  5893                           ; 2 bytes @ 0x32
  5894  000092                     	ds	1
  5895  000093                     sendCANFrame@dlc:
  5896                           	opt stack 0
  5897                           
  5898                           ; 1 bytes @ 0x33
  5899  000093                     	ds	1
  5900  000094                     ??_receivePrintEventVerbose:
  5901  000094                     _printStatistics$1370:
  5902                           	opt stack 0
  5903  000094                     _printErrors$1395:
  5904                           	opt stack 0
  5905  000094                     sendCANFrame@pdata:
  5906                           	opt stack 0
  5907                           
  5908                           ; 2 bytes @ 0x34
  5909  000094                     	ds	2
  5910  000096                     ??_doModeSLCAN:
  5911  000096                     ??_receiveVSCPModeCanalMsg:
  5912  000096                     ?_sendVSCPFrame:
  5913                           	opt stack 0
  5914  000096                     _printStatistics$1376:
  5915                           	opt stack 0
  5916  000096                     _printErrors$1401:
  5917                           	opt stack 0
  5918  000096                     sendVSCPFrame@vscpclass:
  5919                           	opt stack 0
  5920                           
  5921                           ; 2 bytes @ 0x36
  5922  000096                     	ds	2
  5923  000098                     sendVSCPFrame@vscptype:
  5924                           	opt stack 0
  5925  000098                     _printStatistics$1382:
  5926                           	opt stack 0
  5927  000098                     _printErrors$1407:
  5928                           	opt stack 0
  5929                           
  5930                           ; 2 bytes @ 0x38
  5931  000098                     	ds	1
  5932  000099                     sendVSCPFrame@nodeid:
  5933                           	opt stack 0
  5934  000099                     _receivePrintEventVerbose$1277:
  5935                           	opt stack 0
  5936                           
  5937                           ; 2 bytes @ 0x39
  5938  000099                     	ds	1
  5939  00009A                     sendVSCPFrame@priority:
  5940                           	opt stack 0
  5941  00009A                     _printStatistics$1388:
  5942                           	opt stack 0
  5943  00009A                     _printErrors$1413:
  5944                           	opt stack 0
  5945                           
  5946                           ; 2 bytes @ 0x3A
  5947  00009A                     	ds	1
  5948  00009B                     sendVSCPFrame@size:
  5949                           	opt stack 0
  5950  00009B                     _receivePrintEventVerbose$1282:
  5951                           	opt stack 0
  5952                           
  5953                           ; 2 bytes @ 0x3B
  5954  00009B                     	ds	1
  5955  00009C                     _printErrors$1419:
  5956                           	opt stack 0
  5957  00009C                     sendVSCPFrame@pData:
  5958                           	opt stack 0
  5959                           
  5960                           ; 2 bytes @ 0x3C
  5961  00009C                     	ds	1
  5962  00009D                     _receivePrintEventVerbose$1287:
  5963                           	opt stack 0
  5964  00009D                     doModeSLCAN@id:
  5965                           	opt stack 0
  5966                           
  5967                           ; 4 bytes @ 0x3D
  5968  00009D                     	ds	1
  5969  00009E                     ??_sendVSCPFrame:
  5970  00009E                     _printErrors$1428:
  5971                           	opt stack 0
  5972                           
  5973                           ; 2 bytes @ 0x3E
  5974  00009E                     	ds	1
  5975  00009F                     _receivePrintEventVerbose$1292:
  5976                           	opt stack 0
  5977                           
  5978                           ; 2 bytes @ 0x3F
  5979  00009F                     	ds	2
  5980  0000A1                     doModeSLCAN@dlc:
  5981                           	opt stack 0
  5982  0000A1                     _receivePrintEventVerbose$1297:
  5983                           	opt stack 0
  5984                           
  5985                           ; 2 bytes @ 0x41
  5986  0000A1                     	ds	1
  5987  0000A2                     doModeSLCAN@c:
  5988                           	opt stack 0
  5989                           
  5990                           ; 1 bytes @ 0x42
  5991  0000A2                     	ds	1
  5992  0000A3                     doModeSLCAN@rv:
  5993                           	opt stack 0
  5994  0000A3                     _receivePrintEventVerbose$1302:
  5995                           	opt stack 0
  5996                           
  5997                           ; 2 bytes @ 0x43
  5998  0000A3                     	ds	2
  5999  0000A5                     receivePrintEventVerbose@i:
  6000                           	opt stack 0
  6001                           
  6002                           ; 1 bytes @ 0x45
  6003  0000A5                     	ds	5
  6004  0000AA                     receiveVSCPModeCanalMsg@data:
  6005                           	opt stack 0
  6006                           
  6007                           ; 8 bytes @ 0x4A
  6008  0000AA                     	ds	8
  6009  0000B2                     receiveVSCPModeCanalMsg@id:
  6010                           	opt stack 0
  6011  0000B2                     sendVSCPFrame@id:
  6012                           	opt stack 0
  6013                           
  6014                           ; 4 bytes @ 0x52
  6015  0000B2                     	ds	4
  6016  0000B6                     ?_readRegisterExtended:
  6017                           	opt stack 0
  6018  0000B6                     ?_writeRegisterExtended:
  6019                           	opt stack 0
  6020  0000B6                     ?_readRegister:
  6021                           	opt stack 0
  6022  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6023                           	opt stack 0
  6024  0000B6                     readRegister@reg:
  6025                           	opt stack 0
  6026  0000B6                     readRegisterExtended@page:
  6027                           	opt stack 0
  6028  0000B6                     writeRegisterExtended@page:
  6029                           	opt stack 0
  6030                           
  6031                           ; 2 bytes @ 0x56
  6032  0000B6                     	ds	1
  6033  0000B7                     doModeVscp@c:
  6034                           	opt stack 0
  6035  0000B7                     readRegister@timeout:
  6036                           	opt stack 0
  6037                           
  6038                           ; 2 bytes @ 0x57
  6039  0000B7                     	ds	1
  6040  0000B8                     readRegisterExtended@reg:
  6041                           	opt stack 0
  6042  0000B8                     writeRegisterExtended@reg:
  6043                           	opt stack 0
  6044                           
  6045                           ; 1 bytes @ 0x58
  6046  0000B8                     	ds	1
  6047  0000B9                     readRegister@value:
  6048                           	opt stack 0
  6049  0000B9                     readRegisterExtended@timeout:
  6050                           	opt stack 0
  6051  0000B9                     writeRegisterExtended@timeout:
  6052                           	opt stack 0
  6053                           
  6054                           ; 2 bytes @ 0x59
  6055  0000B9                     	ds	1
  6056  0000BA                     ??_readRegister:
  6057                           
  6058                           ; 0 bytes @ 0x5A
  6059  0000BA                     	ds	1
  6060  0000BB                     readRegisterExtended@value:
  6061                           	opt stack 0
  6062  0000BB                     writeRegisterExtended@value:
  6063                           	opt stack 0
  6064                           
  6065                           ; 2 bytes @ 0x5B
  6066  0000BB                     	ds	2
  6067  0000BD                     ??_readRegisterExtended:
  6068  0000BD                     ??_writeRegisterExtended:
  6069                           
  6070                           ; 0 bytes @ 0x5D
  6071  0000BD                     	ds	1
  6072  0000BE                     readRegister@nodeid:
  6073                           	opt stack 0
  6074                           
  6075                           ; 1 bytes @ 0x5E
  6076  0000BE                     	ds	1
  6077  0000BF                     printGUID@nodeid:
  6078                           	opt stack 0
  6079  0000BF                     printMDF@nodeid:
  6080                           	opt stack 0
  6081  0000BF                     printNodeFirmwareVersion@nodeid:
  6082                           	opt stack 0
  6083                           
  6084                           ; 1 bytes @ 0x5F
  6085  0000BF                     	ds	1
  6086  0000C0                     printMDF@value:
  6087                           	opt stack 0
  6088  0000C0                     printGUID@buf:
  6089                           	opt stack 0
  6090  0000C0                     printNodeFirmwareVersion@buf:
  6091                           	opt stack 0
  6092                           
  6093                           ; 3 bytes @ 0x60
  6094  0000C0                     	ds	1
  6095  0000C1                     readRegisterExtended@nodeid:
  6096                           	opt stack 0
  6097  0000C1                     writeRegisterExtended@nodeid:
  6098                           	opt stack 0
  6099  0000C1                     printMDF@p:
  6100                           	opt stack 0
  6101                           
  6102                           ; 2 bytes @ 0x61
  6103  0000C1                     	ds	2
  6104  0000C3                     printGUID@value:
  6105                           	opt stack 0
  6106  0000C3                     printMDF@i:
  6107                           	opt stack 0
  6108  0000C3                     printNodeFirmwareVersion@value:
  6109                           	opt stack 0
  6110                           
  6111                           ; 1 bytes @ 0x63
  6112  0000C3                     	ds	1
  6113  0000C4                     printGUID@i:
  6114                           	opt stack 0
  6115  0000C4                     printNodeFirmwareVersion@i:
  6116                           	opt stack 0
  6117                           
  6118                           ; 1 bytes @ 0x64
  6119  0000C4                     	ds	1
  6120  0000C5                     _findNodes$1472:
  6121                           	opt stack 0
  6122                           
  6123                           ; 2 bytes @ 0x65
  6124  0000C5                     	ds	2
  6125  0000C7                     findNodes@nFound:
  6126                           	opt stack 0
  6127                           
  6128                           ; 1 bytes @ 0x67
  6129  0000C7                     	ds	1
  6130  0000C8                     findNodes@value:
  6131                           	opt stack 0
  6132                           
  6133                           ; 1 bytes @ 0x68
  6134  0000C8                     	ds	1
  6135  0000C9                     findNodes@i:
  6136                           	opt stack 0
  6137                           
  6138                           ; 1 bytes @ 0x69
  6139  0000C9                     	ds	1
  6140  0000CA                     
  6141                           ; 2 bytes @ 0x6A
  6142  0000CA                     	ds	2
  6143  0000CC                     
  6144                           ; 3 bytes @ 0x6C
  6145  0000CC                     	ds	3
  6146  0000CF                     ??_main:
  6147                           
  6148                           ; 0 bytes @ 0x6F
  6149  0000CF                     	ds	1
  6150  0000D0                     main@c:
  6151                           	opt stack 0
  6152                           
  6153                           ; 1 bytes @ 0x70
  6154  0000D0                     	ds	1
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           indf0	equ	0xFEF
  6163                           postinc0	equ	0xFEE
  6164                           fsr0h	equ	0xFEA
  6165                           fsr0l	equ	0xFE9
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postinc1	equ	0xFE6
  6169                           postdec1	equ	0xFE5
  6170                           fsr1h	equ	0xFE2
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           plusw2	equ	0xFDB
  6176                           fsr2h	equ	0xFDA
  6177                           fsr2l	equ	0xFD9
  6178                           status	equ	0xFD8
  6179                           
  6180                           	psect	cstackCOMRAM
  6181  000001                     __pcstackCOMRAM:
  6182                           	opt stack 0
  6183  000001                     ?__RegsToCANID:
  6184                           	opt stack 0
  6185  000001                     ?i1_WriteTimer0:
  6186                           	opt stack 0
  6187  000001                     ?_fifo_write:
  6188                           	opt stack 0
  6189  000001                     ?_fifo_getFree:
  6190                           	opt stack 0
  6191  000001                     ?__ECANPointBuffer:
  6192                           	opt stack 0
  6193  000001                     fifo_write@buf:
  6194                           	opt stack 0
  6195  000001                     ReadUSART@data:
  6196                           	opt stack 0
  6197  000001                     __RegsToCANID@ptr:
  6198                           	opt stack 0
  6199  000001                     i1WriteTimer0@timer0:
  6200                           	opt stack 0
  6201                           
  6202                           ; 2 bytes @ 0x0
  6203  000001                     	ds	1
  6204  000002                     fifo_write@nbytes:
  6205                           	opt stack 0
  6206                           
  6207                           ; 4 bytes @ 0x1
  6208  000002                     	ds	1
  6209  000003                     ??_fifo_getFree:
  6210  000003                     __RegsToCANID@val:
  6211                           	opt stack 0
  6212  000003                     i1WriteTimer0@timer:
  6213                           	opt stack 0
  6214                           
  6215                           ; 2 bytes @ 0x2
  6216  000003                     	ds	1
  6217  000004                     __RegsToCANID@type:
  6218                           	opt stack 0
  6219  000004                     __ECANPointBuffer@b:
  6220                           	opt stack 0
  6221                           
  6222                           ; 1 bytes @ 0x3
  6223  000004                     	ds	1
  6224  000005                     ??__RegsToCANID:
  6225  000005                     __ECANPointBuffer@pt:
  6226                           	opt stack 0
  6227                           
  6228                           ; 2 bytes @ 0x4
  6229  000005                     	ds	1
  6230  000006                     ??_fifo_write:
  6231                           
  6232                           ; 0 bytes @ 0x5
  6233  000006                     	ds	1
  6234  000007                     __RegsToCANID@Value:
  6235                           	opt stack 0
  6236                           
  6237                           ; 1 bytes @ 0x6
  6238  000007                     	ds	1
  6239  000008                     ?_ECANReceiveMessage:
  6240                           	opt stack 0
  6241  000008                     ECANReceiveMessage@data:
  6242                           	opt stack 0
  6243                           
  6244                           ; 1 bytes @ 0x7
  6245  000008                     	ds	1
  6246  000009                     ECANReceiveMessage@dataLen:
  6247                           	opt stack 0
  6248                           
  6249                           ; 1 bytes @ 0x8
  6250  000009                     	ds	1
  6251  00000A                     ECANReceiveMessage@msgFlags:
  6252                           	opt stack 0
  6253  00000A                     fifo_write@p:
  6254                           	opt stack 0
  6255                           
  6256                           ; 1 bytes @ 0x9
  6257  00000A                     	ds	1
  6258  00000B                     fifo_getFree@f:
  6259                           	opt stack 0
  6260  00000B                     ECANReceiveMessage@savedPtr:
  6261                           	opt stack 0
  6262  00000B                     fifo_write@i:
  6263                           	opt stack 0
  6264                           
  6265                           ; 4 bytes @ 0xA
  6266  00000B                     	ds	2
  6267  00000D                     ECANReceiveMessage@id:
  6268                           	opt stack 0
  6269                           
  6270                           ; 1 bytes @ 0xC
  6271  00000D                     	ds	1
  6272  00000E                     ECANReceiveMessage@i:
  6273                           	opt stack 0
  6274                           
  6275                           ; 1 bytes @ 0xD
  6276  00000E                     	ds	1
  6277  00000F                     ECANReceiveMessage@mode:
  6278                           	opt stack 0
  6279  00000F                     fifo_write@f:
  6280                           	opt stack 0
  6281                           
  6282                           ; 1 bytes @ 0xE
  6283  00000F                     	ds	1
  6284  000010                     ECANReceiveMessage@temp:
  6285                           	opt stack 0
  6286                           
  6287                           ; 1 bytes @ 0xF
  6288  000010                     	ds	1
  6289  000011                     ECANReceiveMessage@ptr:
  6290                           	opt stack 0
  6291                           
  6292                           ; 2 bytes @ 0x10
  6293  000011                     	ds	2
  6294  000013                     ??_Interrupt:
  6295                           
  6296                           ; 0 bytes @ 0x12
  6297  000013                     	ds	9
  6298  00001C                     Interrupt@data:
  6299                           	opt stack 0
  6300                           
  6301                           ; 8 bytes @ 0x1B
  6302  00001C                     	ds	8
  6303  000024                     Interrupt@c:
  6304                           	opt stack 0
  6305                           
  6306                           ; 1 bytes @ 0x23
  6307  000024                     	ds	1
  6308  000025                     Interrupt@dlc:
  6309                           	opt stack 0
  6310                           
  6311                           ; 1 bytes @ 0x24
  6312  000025                     	ds	1
  6313  000026                     Interrupt@id:
  6314                           	opt stack 0
  6315                           
  6316                           ; 4 bytes @ 0x25
  6317  000026                     	ds	4
  6318  00002A                     Interrupt@flags:
  6319                           	opt stack 0
  6320                           
  6321                           ; 1 bytes @ 0x29
  6322  00002A                     	ds	1
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           indf0	equ	0xFEF
  6331                           postinc0	equ	0xFEE
  6332                           fsr0h	equ	0xFEA
  6333                           fsr0l	equ	0xFE9
  6334                           wreg	equ	0xFE8
  6335                           indf1	equ	0xFE7
  6336                           postinc1	equ	0xFE6
  6337                           postdec1	equ	0xFE5
  6338                           fsr1h	equ	0xFE2
  6339                           fsr1l	equ	0xFE1
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;;
  6349 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6350 ;;
  6351 ;; *************** function _main *****************
  6352 ;; Defined at:
  6353 ;;		line 254 in file "main.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  argc            2  106[BANK0 ] int 
  6356 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6357 ;; Auto vars:     Size  Location     Type
  6358 ;;  c               1  112[BANK0 ] unsigned char 
  6359 ;; Return value:  Size  Location     Type
  6360 ;;                  2  106[BANK0 ] int 
  6361 ;; Registers used:
  6362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6363 ;; Tracked objects:
  6364 ;;		On entry : 0/0
  6365 ;;		On exit  : F/0
  6366 ;;		Unchanged: 0/0
  6367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6368 ;;      Params:         0       5       0       0       0       0       0
  6369 ;;      Locals:         0       1       0       0       0       0       0
  6370 ;;      Temps:          0       1       0       0       0       0       0
  6371 ;;      Totals:         0       7       0       0       0       0       0
  6372 ;;Total ram usage:        7 bytes
  6373 ;; Hardware stack levels required when called:   11
  6374 ;; This function calls:
  6375 ;;		_fifo_init
  6376 ;;		_init_crc8
  6377 ;;		_Read_b_eep
  6378 ;;		_vscp_restoreDefaults
  6379 ;;		_init
  6380 ;;		_putsUSART
  6381 ;;		_printFirmwareVersion
  6382 ;;		_printMode
  6383 ;;		_fifo_read
  6384 ;;		_doModeVerbose
  6385 ;;		_doModeVscp
  6386 ;;		_doModeSLCAN
  6387 ;;		_doModeVscpNode
  6388 ;; This function is called by:
  6389 ;;		Startup code after reset
  6390 ;; This function uses a non-reentrant model
  6391 ;;
  6392                           
  6393                           	psect	text0
  6394  003726                     __ptext0:
  6395                           	opt stack 0
  6396  003726                     _main:
  6397                           	opt stack 20
  6398                           
  6399                           ;main.c: 256: caps.maxVscpFrames = 1;
  6400                           
  6401                           ;incstack = 0
  6402                           ;incstack = 0
  6403  003726  0E01               	movlw	1
  6404  003728  0100               	movlb	0	; () banked
  6405  00372A  6FF5               	movwf	_caps& (0+255),b
  6406                           
  6407                           ;main.c: 257: caps.maxCanalFrames = 1;
  6408  00372C  6FF6               	movwf	(_caps+1)& (0+255),b
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;main.c: 262: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6412  00372E  0E02               	movlw	high _inputBuffer
  6413  003730  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6414  003732  0E00               	movlw	low _inputBuffer
  6415  003734  6F60               	movwf	?_fifo_init& (0+255),b
  6416  003736  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6417  003738  0E80               	movlw	128
  6418  00373A  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6419  00373C  0E48               	movlw	_serialInputFifo& (0+255)
  6420  00373E  EC97  F02C         	call	_fifo_init
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 263: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6424  003742  0E04               	movlw	high _caninputBuffer
  6425  003744  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6426  003746  0E00               	movlw	low _caninputBuffer
  6427  003748  6F60               	movwf	?_fifo_init& (0+255),b
  6428  00374A  0E01               	movlw	1
  6429  00374C  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6430  00374E  0EEE               	movlw	238
  6431  003750  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6432  003752  0E40               	movlw	_canInputFifo& (0+255)
  6433  003754  EC97  F02C         	call	_fifo_init
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;main.c: 266: init_crc8();
  6437  003758  ECCA  F029         	call	_init_crc8	;wreg free
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;main.c: 270: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6441                           ;main.c: 271: ( 0xaa != Read_b_eep(0x02) ) ) {
  6442  00375C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6443  00375E  0E01               	movlw	1
  6444  003760  6F60               	movwf	?_Read_b_eep& (0+255),b
  6445  003762  EC39  F02E         	call	_Read_b_eep	;wreg free
  6446  003766  0A55               	xorlw	85
  6447  003768  E108               	bnz	l9921
  6448  00376A  0100               	movlb	0	; () banked
  6449  00376C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6450  00376E  0E02               	movlw	2
  6451  003770  6F60               	movwf	?_Read_b_eep& (0+255),b
  6452  003772  EC39  F02E         	call	_Read_b_eep	;wreg free
  6453  003776  0AAA               	xorlw	170
  6454  003778  A4D8               	btfss	status,2,c
  6455  00377A                     l9921:
  6456                           
  6457                           ;main.c: 272: vscp_restoreDefaults();
  6458  00377A  EC4B  F02E         	call	_vscp_restoreDefaults	;wreg free
  6459                           
  6460                           ;main.c: 273: }
  6461                           ;main.c: 276: init();
  6462  00377E  ECED  F02B         	call	_init	;wreg free
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;main.c: 280: _delay((unsigned long)((10)*(40000000/4000.0)));
  6466  003782  0E82               	movlw	130
  6467  003784  6FCF               	movwf	??_main& (0+255),b
  6468  003786  0EDD               	movlw	221
  6469  003788                     u17437:
  6470  003788  2EE8               	decfsz	wreg,f,c
  6471  00378A  D7FE               	goto	u17437
  6472  00378C  2FCF               	decfsz	??_main& (0+255),f,b
  6473  00378E  D7FC               	goto	u17437
  6474  003790  D000               	nop2	
  6475                           
  6476                           ;main.c: 284: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6477  003792  0E79               	movlw	high STR_1
  6478  003794  0100               	movlb	0	; () banked
  6479  003796  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6480  003798  0E2F               	movlw	low STR_1
  6481  00379A  6F61               	movwf	?_putsUSART& (0+255),b
  6482  00379C  EC4F  F02B         	call	_putsUSART	;wreg free
  6483                           
  6484                           ;main.c: 285: putsUSART((char*) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n"
      +                          );
  6485  0037A0  0E74               	movlw	high STR_2
  6486  0037A2  0100               	movlb	0	; () banked
  6487  0037A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6488  0037A6  0E8D               	movlw	low STR_2
  6489  0037A8  6F61               	movwf	?_putsUSART& (0+255),b
  6490  0037AA  EC4F  F02B         	call	_putsUSART	;wreg free
  6491                           
  6492                           ;main.c: 286: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6493  0037AE  0E79               	movlw	high STR_3
  6494  0037B0  0100               	movlb	0	; () banked
  6495  0037B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6496  0037B4  0E9D               	movlw	low STR_3
  6497  0037B6  6F61               	movwf	?_putsUSART& (0+255),b
  6498  0037B8  EC4F  F02B         	call	_putsUSART	;wreg free
  6499                           
  6500                           ;main.c: 287: printFirmwareVersion();
  6501  0037BC  ECD7  F027         	call	_printFirmwareVersion	;wreg free
  6502                           
  6503                           ;main.c: 288: printMode();
  6504  0037C0  EC54  F029         	call	_printMode	;wreg free
  6505                           
  6506                           ;main.c: 292: if ( 0 != mode ) {
  6507  0037C4  0100               	movlb	0	; () banked
  6508  0037C6  51F1               	movf	_mode& (0+255),w,b
  6509  0037C8  E034               	bz	l9955
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;main.c: 294: uint8_t c;
  6513                           ;main.c: 296: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6514  0037CA  0E73               	movlw	high STR_4
  6515  0037CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6516  0037CE  0EB5               	movlw	low STR_4
  6517  0037D0  6F61               	movwf	?_putsUSART& (0+255),b
  6518  0037D2  EC4F  F02B         	call	_putsUSART	;wreg free
  6519                           
  6520                           ;main.c: 298: timekeeper = 0;
  6521  0037D6  0100               	movlb	0	; () banked
  6522  0037D8  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
  6523  0037DA  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
  6524  0037DC  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
  6525  0037DE  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
  6526                           
  6527                           ; BSR set to: 0
  6528                           ;main.c: 299: ledFunctionality = 6;
  6529  0037E0  0E06               	movlw	6
  6530  0037E2  6E3F               	movwf	_ledFunctionality,c
  6531                           
  6532                           ;main.c: 300: while (timekeeper < 3000) {
  6533  0037E4  D01D               	goto	l9953
  6534  0037E6                     l423:
  6535                           
  6536                           ; BSR set to: 0
  6537  0037E6  0004               	clrwdt		;# 
  6538                           
  6539                           ;main.c: 302: (INTCONbits.GIE = 0);
  6540  0037E8  9EF2               	bcf	intcon,7,c	;volatile
  6541                           
  6542                           ;main.c: 303: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6543  0037EA  0100               	movlb	0	; () banked
  6544  0037EC  0E00               	movlw	high main@c
  6545  0037EE  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6546  0037F0  0ED0               	movlw	low main@c
  6547  0037F2  6F60               	movwf	?_fifo_read& (0+255),b
  6548  0037F4  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6549  0037F6  0E01               	movlw	1
  6550  0037F8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6551  0037FA  0E48               	movlw	_serialInputFifo& (0+255)
  6552  0037FC  ECDE  F023         	call	_fifo_read
  6553  003800  0560               	decf	?_fifo_read& (0+255),w,b
  6554  003802  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6555  003804  E10C               	bnz	l424
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;main.c: 304: (INTCONbits.GIE = 1);
  6559  003806  8EF2               	bsf	intcon,7,c	;volatile
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;main.c: 305: if ('v' == c) {
  6563  003808  51D0               	movf	main@c& (0+255),w,b
  6564  00380A  0A76               	xorlw	118
  6565  00380C  E108               	bnz	l424
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;main.c: 306: mode = 0;
  6569  00380E  6BF1               	clrf	_mode& (0+255),b
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;main.c: 307: putsUSART((char *) "Temporary verbose mode set\r\n");
  6573  003810  0E7B               	movlw	high STR_5
  6574  003812  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6575  003814  0E2A               	movlw	low STR_5
  6576  003816  6F61               	movwf	?_putsUSART& (0+255),b
  6577  003818  EC4F  F02B         	call	_putsUSART	;wreg free
  6578                           
  6579                           ;main.c: 308: break;
  6580  00381C  D00A               	goto	l9955
  6581  00381E                     l424:
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;main.c: 309: }
  6585                           ;main.c: 310: }
  6586                           ;main.c: 311: (INTCONbits.GIE = 1);
  6587  00381E  8EF2               	bsf	intcon,7,c	;volatile
  6588  003820                     l9953:
  6589                           
  6590                           ; BSR set to: 0
  6591  003820  0EB8               	movlw	184
  6592  003822  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6593  003824  0E0B               	movlw	11
  6594  003826  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6595  003828  0E00               	movlw	0
  6596  00382A  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6597  00382C  0E00               	movlw	0
  6598  00382E  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6599  003830  E3DA               	bnc	l423
  6600  003832                     l9955:
  6601                           
  6602                           ;main.c: 312: }
  6603                           ;main.c: 313: }
  6604                           ;main.c: 315: ledFunctionality = 1;
  6605  003832  0E01               	movlw	1
  6606  003834  6E3F               	movwf	_ledFunctionality,c
  6607  003836                     l427:
  6608  003836  0004               	clrwdt		;# 
  6609                           
  6610                           ;main.c: 323: if (COMSTATbits.TXBO) {
  6611  003838  AA74               	btfss	3956,5,c	;volatile
  6612  00383A  D002               	goto	l428
  6613                           
  6614                           ;main.c: 325: ledFunctionality = 6;
  6615  00383C  0E06               	movlw	6
  6616  00383E  D009               	goto	L1
  6617  003840                     l428:
  6618                           
  6619                           ;main.c: 327: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6620  003840  B874               	btfsc	3956,4,c	;volatile
  6621  003842  D002               	goto	l9963
  6622  003844  A674               	btfss	3956,3,c	;volatile
  6623  003846  D002               	goto	l430
  6624  003848                     l9963:
  6625                           
  6626                           ;main.c: 329: ledFunctionality = 5;
  6627  003848  0E05               	movlw	5
  6628  00384A  D003               	goto	L1
  6629  00384C                     l430:
  6630                           
  6631                           ;main.c: 333: ledFunctionality = 4;
  6632  00384C  0E04               	movlw	4
  6633                           
  6634                           ;main.c: 331: else if (COMSTATbits.EWARN) {
  6635  00384E  A074               	btfss	3956,0,c	;volatile
  6636                           
  6637                           ;main.c: 335: else {
  6638                           ;main.c: 337: ledFunctionality = 1;
  6639                           
  6640                           ;main.c: 334: }
  6641  003850  0E01               	movlw	1
  6642  003852                     L1:
  6643  003852  6E3F               	movwf	_ledFunctionality,c
  6644                           
  6645                           ;main.c: 338: }
  6646                           ;main.c: 341: if (COMSTATbits.RXBnOVFL) {
  6647  003854  AC74               	btfss	3956,6,c	;volatile
  6648  003856  D007               	goto	l9975
  6649                           
  6650                           ;main.c: 342: can_receiveOverruns++;
  6651  003858  0100               	movlb	0	; () banked
  6652  00385A  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6653  00385C  0E00               	movlw	0
  6654  00385E  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6655  003860  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6656  003862  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;main.c: 343: COMSTATbits.RXBnOVFL = 0;
  6660  003864  9C74               	bcf	3956,6,c	;volatile
  6661  003866                     l9975:
  6662                           
  6663                           ;main.c: 344: }
  6664                           ;main.c: 346: if (0 == mode) {
  6665  003866  0100               	movlb	0	; () banked
  6666  003868  67F1               	tstfsz	_mode& (0+255),b
  6667  00386A  D003               	goto	l9979
  6668  00386C                     l9977:
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;main.c: 347: doModeVerbose();
  6672  00386C  EC36  F003         	call	_doModeVerbose	;wreg free
  6673                           
  6674                           ;main.c: 348: }
  6675  003870  D7E2               	goto	l427
  6676  003872                     l9979:
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;main.c: 349: else if (1 == mode) {
  6680  003872  05F1               	decf	_mode& (0+255),w,b
  6681  003874  E103               	bnz	l9983
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;main.c: 350: doModeVscp();
  6685  003876  EC60  F018         	call	_doModeVscp	;wreg free
  6686                           
  6687                           ;main.c: 351: }
  6688  00387A  D7DD               	goto	l427
  6689  00387C                     l9983:
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;main.c: 352: else if (2 == mode) {
  6693  00387C  51F1               	movf	_mode& (0+255),w,b
  6694  00387E  0A02               	xorlw	2
  6695  003880  E103               	bnz	l9987
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;main.c: 353: doModeSLCAN();
  6699  003882  ECE0  F010         	call	_doModeSLCAN	;wreg free
  6700                           
  6701                           ;main.c: 354: }
  6702  003886  D7D7               	goto	l427
  6703  003888                     l9987:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;main.c: 355: else if (3 == mode) {
  6707  003888  51F1               	movf	_mode& (0+255),w,b
  6708  00388A  0A03               	xorlw	3
  6709  00388C  E1EF               	bnz	l9977
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;main.c: 356: doModeVscpNode();
  6713  00388E  EC52  F02E         	call	_doModeVscpNode	;wreg free
  6714                           
  6715                           ;main.c: 357: }
  6716  003892  D7D1               	goto	l427
  6717  003894                     __end_of_main:
  6718                           	opt stack 0
  6719                           tblptru	equ	0xFF8
  6720                           tblptrh	equ	0xFF7
  6721                           tblptrl	equ	0xFF6
  6722                           tablat	equ	0xFF5
  6723                           prodh	equ	0xFF4
  6724                           prodl	equ	0xFF3
  6725                           intcon	equ	0xFF2
  6726                           indf0	equ	0xFEF
  6727                           postinc0	equ	0xFEE
  6728                           fsr0h	equ	0xFEA
  6729                           fsr0l	equ	0xFE9
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postinc1	equ	0xFE6
  6733                           postdec1	equ	0xFE5
  6734                           fsr1h	equ	0xFE2
  6735                           fsr1l	equ	0xFE1
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           plusw2	equ	0xFDB
  6740                           fsr2h	equ	0xFDA
  6741                           fsr2l	equ	0xFD9
  6742                           status	equ	0xFD8
  6743                           
  6744 ;; *************** function _doModeVscpNode *****************
  6745 ;; Defined at:
  6746 ;;		line 1521 in file "main.c"
  6747 ;; Parameters:    Size  Location     Type
  6748 ;;		None
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;		None               void
  6753 ;; Registers used:
  6754 ;;		None
  6755 ;; Tracked objects:
  6756 ;;		On entry : F/0
  6757 ;;		On exit  : F/0
  6758 ;;		Unchanged: F/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6760 ;;      Params:         0       0       0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0
  6762 ;;      Temps:          0       0       0       0       0       0       0
  6763 ;;      Totals:         0       0       0       0       0       0       0
  6764 ;;Total ram usage:        0 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    3
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_main
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text1
  6775  005CA4                     __ptext1:
  6776                           	opt stack 0
  6777  005CA4                     _doModeVscpNode:
  6778                           	opt stack 27
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;incstack = 0
  6784                           ;incstack = 0
  6785  005CA4  0012               	return	
  6786  005CA6                     __end_of_doModeVscpNode:
  6787                           	opt stack 0
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           intcon	equ	0xFF2
  6795                           indf0	equ	0xFEF
  6796                           postinc0	equ	0xFEE
  6797                           fsr0h	equ	0xFEA
  6798                           fsr0l	equ	0xFE9
  6799                           wreg	equ	0xFE8
  6800                           indf1	equ	0xFE7
  6801                           postinc1	equ	0xFE6
  6802                           postdec1	equ	0xFE5
  6803                           fsr1h	equ	0xFE2
  6804                           fsr1l	equ	0xFE1
  6805                           indf2	equ	0xFDF
  6806                           postinc2	equ	0xFDE
  6807                           postdec2	equ	0xFDD
  6808                           plusw2	equ	0xFDB
  6809                           fsr2h	equ	0xFDA
  6810                           fsr2l	equ	0xFD9
  6811                           status	equ	0xFD8
  6812                           
  6813 ;; *************** function _doModeSLCAN *****************
  6814 ;; Defined at:
  6815 ;;		line 1303 in file "main.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;		None
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;  id              4   61[BANK0 ] unsigned long 
  6820 ;;  dlc             1   65[BANK0 ] unsigned char 
  6821 ;;  rv              1   67[BANK0 ] enum E15660
  6822 ;;  c               1   66[BANK0 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : F/0
  6829 ;;		On exit  : E/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6832 ;;      Params:         0       0       0       0       0       0       0
  6833 ;;      Locals:         0       7       0       0       0       0       0
  6834 ;;      Temps:          0       7       0       0       0       0       0
  6835 ;;      Totals:         0      14       0       0       0       0       0
  6836 ;;Total ram usage:       14 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    7
  6839 ;; This function calls:
  6840 ;;		_putsUSART
  6841 ;;		_fifo_read
  6842 ;;		_Busy_eep
  6843 ;;		_Write_b_eep
  6844 ;;		_ECANSetOperationMode
  6845 ;;		_memset
  6846 ;;		_receiveSendEventSLCAN
  6847 ;;		_strlen
  6848 ;;		_hexStringToBytes
  6849 ;;		_memcpy
  6850 ;;		_sendCANFrame
  6851 ;; This function is called by:
  6852 ;;		_main
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text2
  6857  0021C0                     __ptext2:
  6858                           	opt stack 0
  6859  0021C0                     _doModeSLCAN:
  6860                           	opt stack 23
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 1304: uint8_t c;
  6864                           ;main.c: 1305: BOOL rv = 0;
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;incstack = 0
  6868                           ;incstack = 0
  6869  0021C0  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;main.c: 1308: receiveSendEventSLCAN();
  6873  0021C2  EC11  F01A         	call	_receiveSendEventSLCAN	;wreg free
  6874                           
  6875                           ;main.c: 1311: (INTCONbits.GIE = 0);
  6876  0021C6  9EF2               	bcf	intcon,7,c	;volatile
  6877                           
  6878                           ;main.c: 1313: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6879  0021C8  0100               	movlb	0	; () banked
  6880  0021CA  0E00               	movlw	high doModeSLCAN@c
  6881  0021CC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6882  0021CE  0EA2               	movlw	low doModeSLCAN@c
  6883  0021D0  6F60               	movwf	?_fifo_read& (0+255),b
  6884  0021D2  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6885  0021D4  0E01               	movlw	1
  6886  0021D6  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6887  0021D8  0E48               	movlw	_serialInputFifo& (0+255)
  6888  0021DA  ECDE  F023         	call	_fifo_read
  6889  0021DE  0560               	decf	?_fifo_read& (0+255),w,b
  6890  0021E0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6891  0021E2  E001 D1C6          	bnz	l11075
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;main.c: 1316: (INTCONbits.GIE = 1);
  6895  0021E6  8EF2               	bsf	intcon,7,c	;volatile
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;main.c: 1318: if (0x0d != c) {
  6899  0021E8  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6900  0021EA  0A0D               	xorlw	13
  6901  0021EC  E101 D176          	bz	l11063
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;main.c: 1319: cmdbuf[ pos ] = c;
  6905  0021F0  EC35  F019         	call	PL18	;call to abstracted procedure
  6906  0021F4  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;main.c: 1320: pos++;
  6910  0021F8  2B02               	incf	_pos& (0+255),f,b
  6911  0021FA  D1BC               	goto	l709
  6912  0021FC                     l10935:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 1328: if (1 == strlen(cmdbuf)) {
  6916  0021FC  0E01               	movlw	high _cmdbuf
  6917  0021FE  0100               	movlb	0	; () banked
  6918  002200  6F61               	movwf	(?_strlen+1)& (0+255),b
  6919  002202  0E04               	movlw	low _cmdbuf
  6920  002204  6F60               	movwf	?_strlen& (0+255),b
  6921  002206  EC77  F02C         	call	_strlen	;wreg free
  6922  00220A  0560               	decf	?_strlen& (0+255),w,b
  6923  00220C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6924  00220E  E001 D192          	bnz	l11065
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 1329: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6928  002212  0E7D               	movlw	high STR_133
  6929  002214  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6930  002216  0E5A               	movlw	low STR_133
  6931  002218  6F61               	movwf	?_putsUSART& (0+255),b
  6932  00221A  EC4F  F02B         	call	_putsUSART	;wreg free
  6933  00221E  D113               	goto	L5
  6934  002220                     l10941:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;main.c: 1336: if (1 == strlen(cmdbuf)) {
  6938  002220  0E01               	movlw	high _cmdbuf
  6939  002222  0100               	movlb	0	; () banked
  6940  002224  6F61               	movwf	(?_strlen+1)& (0+255),b
  6941  002226  0E04               	movlw	low _cmdbuf
  6942  002228  6F60               	movwf	?_strlen& (0+255),b
  6943  00222A  EC77  F02C         	call	_strlen	;wreg free
  6944  00222E  0560               	decf	?_strlen& (0+255),w,b
  6945  002230  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6946  002232  E001 D180          	bnz	l11065
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;main.c: 1337: putsUSART((char *) "V1011\r\n");
  6950  002236  0E7E               	movlw	high STR_134
  6951  002238  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6952  00223A  0ED5               	movlw	low STR_134
  6953  00223C  6F61               	movwf	?_putsUSART& (0+255),b
  6954  00223E  EC4F  F02B         	call	_putsUSART	;wreg free
  6955  002242  D101               	goto	L5
  6956  002244                     l10947:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;main.c: 1344: if (1 == strlen(cmdbuf)) {
  6960  002244  0E01               	movlw	high _cmdbuf
  6961  002246  0100               	movlb	0	; () banked
  6962  002248  6F61               	movwf	(?_strlen+1)& (0+255),b
  6963  00224A  0E04               	movlw	low _cmdbuf
  6964  00224C  6F60               	movwf	?_strlen& (0+255),b
  6965  00224E  EC77  F02C         	call	_strlen	;wreg free
  6966  002252  0560               	decf	?_strlen& (0+255),w,b
  6967  002254  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6968  002256  E001 D16E          	bnz	l11065
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;main.c: 1345: putsUSART((char *) "N1977\r\n");
  6972  00225A  0E7E               	movlw	high STR_135
  6973  00225C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6974  00225E  0EDD               	movlw	low STR_135
  6975  002260  6F61               	movwf	?_putsUSART& (0+255),b
  6976  002262  EC4F  F02B         	call	_putsUSART	;wreg free
  6977  002266  D0EF               	goto	L5
  6978  002268                     l10953:
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;main.c: 1354: bInitiated = 1;
  6982  002268  0E01               	movlw	1
  6983  00226A  6FEE               	movwf	_bInitiated& (0+255),b
  6984                           
  6985                           ;main.c: 1355: rv = 1;
  6986  00226C  D0EE               	goto	L4
  6987  00226E                     l719:
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;main.c: 1360: if (!bOpen) {
  6991  00226E  67EF               	tstfsz	_bOpen& (0+255),b
  6992  002270  D003               	goto	l10957
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 1361: bInitiated = 1;
  6996  002272  0E01               	movlw	1
  6997  002274  6FEE               	movwf	_bInitiated& (0+255),b
  6998                           
  6999                           ;main.c: 1362: rv = 1;
  7000  002276  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7001  002278                     l10957:
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;main.c: 1367: if (1 == strlen(cmdbuf)) {
  7005  002278  0E01               	movlw	high _cmdbuf
  7006  00227A  0100               	movlb	0	; () banked
  7007  00227C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7008  00227E  0E04               	movlw	low _cmdbuf
  7009  002280  6F60               	movwf	?_strlen& (0+255),b
  7010  002282  EC77  F02C         	call	_strlen	;wreg free
  7011  002286  0560               	decf	?_strlen& (0+255),w,b
  7012  002288  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7013  00228A  E001 D154          	bnz	l11065
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;main.c: 1368: if (!bOpen && bInitiated) {
  7017  00228E  67EF               	tstfsz	_bOpen& (0+255),b
  7018  002290  D152               	goto	l11065
  7019                           
  7020                           ; BSR set to: 0
  7021  002292  51EE               	movf	_bInitiated& (0+255),w,b
  7022  002294  E101 D14F          	bz	l11065
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 1369: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7026  002298  0E00               	movlw	0
  7027  00229A  EC0E  F02E         	call	_ECANSetOperationMode
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;main.c: 1370: bOpen = 1;
  7031  00229E  0E01               	movlw	1
  7032  0022A0  6FEF               	movwf	_bOpen& (0+255),b
  7033  0022A2  D0D1               	goto	L5
  7034  0022A4                     l10969:
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;main.c: 1378: if (1 == strlen(cmdbuf)) {
  7038  0022A4  0E01               	movlw	high _cmdbuf
  7039  0022A6  0100               	movlb	0	; () banked
  7040  0022A8  6F61               	movwf	(?_strlen+1)& (0+255),b
  7041  0022AA  0E04               	movlw	low _cmdbuf
  7042  0022AC  6F60               	movwf	?_strlen& (0+255),b
  7043  0022AE  EC77  F02C         	call	_strlen	;wreg free
  7044  0022B2  0560               	decf	?_strlen& (0+255),w,b
  7045  0022B4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7046  0022B6  E001 D13E          	bnz	l11065
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;main.c: 1379: if (bOpen) {
  7050  0022BA  51EF               	movf	_bOpen& (0+255),w,b
  7051  0022BC  E101 D0C3          	bz	L5
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;main.c: 1380: ECANSetOperationMode(0x20);
  7055  0022C0  0E20               	movlw	32
  7056  0022C2  EC0E  F02E         	call	_ECANSetOperationMode
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;main.c: 1381: bOpen = 0;
  7060  0022C6  6BEF               	clrf	_bOpen& (0+255),b
  7061  0022C8  D0BE               	goto	L5
  7062  0022CA                     l10979:
  7063                           
  7064                           ; BSR set to: 0
  7065                           ;main.c: 1394: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7066  0022CA  51EF               	movf	_bOpen& (0+255),w,b
  7067  0022CC  E101 D133          	bz	l11065
  7068                           
  7069                           ; BSR set to: 0
  7070  0022D0  0E01               	movlw	high _cmdbuf
  7071  0022D2  0100               	movlb	0	; () banked
  7072  0022D4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7073  0022D6  0E04               	movlw	low _cmdbuf
  7074  0022D8  6F60               	movwf	?_strlen& (0+255),b
  7075  0022DA  EC77  F02C         	call	_strlen	;wreg free
  7076  0022DE  0E0A               	movlw	10
  7077  0022E0  5D60               	subwf	?_strlen& (0+255),w,b
  7078  0022E2  0E00               	movlw	0
  7079  0022E4  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7080  0022E6  E201 D126          	bnc	l11065
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;main.c: 1396: uint32_t id;
  7084                           ;main.c: 1397: uint8_t dlc;
  7085                           ;main.c: 1399: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7086  0022EA  0E01               	movlw	high _wrkbuf
  7087  0022EC  0100               	movlb	0	; () banked
  7088  0022EE  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7089  0022F0  0E54               	movlw	low _wrkbuf
  7090  0022F2  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7091  0022F4  0E50               	movlw	80
  7092  0022F6  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7093  0022F8  0E01               	movlw	high _cmdbuf
  7094  0022FA  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7095  0022FC  0E04               	movlw	low _cmdbuf
  7096  0022FE  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7097  002300  ECF6  F026         	call	_hexStringToBytes	;wreg free
  7098  002304  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7099  002306  0E05               	movlw	5
  7100  002308  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7101  00230A  E201 D114          	bnc	l11065
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;main.c: 1401: }
  7105                           ;main.c: 1403: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7106  00230E  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7107  002312  0E08               	movlw	8
  7108  002314  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7109  002316  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7110  00231A  0E10               	movlw	16
  7111  00231C  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7112  00231E  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7113  002322  0E18               	movlw	24
  7114  002324  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7115  002326  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7116  00232A  0100               	movlb	0	; () banked
  7117  00232C  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7118  00232E  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7119  002330  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7120  002332  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7121  002334  D001               	goto	u13720
  7122  002336                     u13725:
  7123  002336  D91F               	call	PL90	;call to abstracted procedure
  7124  002338                     u13720:
  7125  002338  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7126  00233A  D7FD               	goto	u13725
  7127  00233C  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7128  00233E  D001               	goto	u13730
  7129  002340                     u13735:
  7130  002340  D91A               	call	PL90	;call to abstracted procedure
  7131  002342                     u13730:
  7132  002342  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7133  002344  D7FD               	goto	u13735
  7134  002346  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7135  002348  D001               	goto	u13740
  7136  00234A                     u13745:
  7137  00234A  D915               	call	PL90	;call to abstracted procedure
  7138  00234C                     u13740:
  7139  00234C  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7140  00234E  D7FD               	goto	u13745
  7141  002350  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7142  002354  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7143  002358  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7144  00235C  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;main.c: 1404: dlc = vscpData[4];
  7148  002360  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;main.c: 1407: if (dlc > 8) break;
  7152  002364  0E08               	movlw	8
  7153  002366  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7154  002368  D001               	goto	l10995
  7155  00236A  D0E5               	goto	l11065
  7156  00236C                     l10995:
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 1408: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7160  00236C  90D8               	bcf	status,0,c
  7161  00236E  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7162  002370  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7163  002372  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7164  002374  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7165  002376  0E0A               	movlw	10
  7166  002378  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7167  00237A  0E00               	movlw	0
  7168  00237C  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7169  00237E  0E01               	movlw	high _cmdbuf
  7170  002380  0100               	movlb	0	; () banked
  7171  002382  6F61               	movwf	(?_strlen+1)& (0+255),b
  7172  002384  0E04               	movlw	low _cmdbuf
  7173  002386  6F60               	movwf	?_strlen& (0+255),b
  7174  002388  EC77  F02C         	call	_strlen	;wreg free
  7175  00238C  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7176  00238E  5D60               	subwf	?_strlen& (0+255),w,b
  7177  002390  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7178  002392  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7179  002394  E201 D0CF          	bnc	l11065
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;main.c: 1410: memcpy(vscpData, vscpData + 5, dlc);
  7183  002398  0E01               	movlw	high _vscpData
  7184  00239A  0100               	movlb	0	; () banked
  7185  00239C  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7186  00239E  0EA4               	movlw	low _vscpData
  7187  0023A0  6F60               	movwf	?_memcpy& (0+255),b
  7188  0023A2  0EA9               	movlw	low (_vscpData+5)
  7189  0023A4  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7190  0023A6  0E01               	movlw	high (_vscpData+5)
  7191  0023A8  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7192  0023AA  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7193  0023AE  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7194  0023B2  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7195  0023B6  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7196  0023B8  EC56  F02C         	call	_memcpy	;wreg free
  7197                           
  7198                           ; BSR set to: 0
  7199                           ;main.c: 1412: rv = sendCANFrame(id, dlc, vscpData);
  7200  0023BC  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7201  0023C0  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7202  0023C4  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7203  0023C8  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7204  0023CC  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7205  0023D0  0E01               	movlw	high _vscpData
  7206  0023D2  0100               	movlb	0	; () banked
  7207  0023D4  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7208  0023D6  0EA4               	movlw	low _vscpData
  7209  0023D8  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7210  0023DA  EC14  F02D         	call	_sendCANFrame	;wreg free
  7211  0023DE  D035               	goto	L4
  7212  0023E0                     l11003:
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;main.c: 1427: if (bOpen && (strlen(cmdbuf) == 1)) {
  7216  0023E0  51EF               	movf	_bOpen& (0+255),w,b
  7217  0023E2  E101 D0A8          	bz	l11065
  7218                           
  7219                           ; BSR set to: 0
  7220  0023E6  0E01               	movlw	high _cmdbuf
  7221  0023E8  0100               	movlb	0	; () banked
  7222  0023EA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7223  0023EC  0E04               	movlw	low _cmdbuf
  7224  0023EE  6F60               	movwf	?_strlen& (0+255),b
  7225  0023F0  EC77  F02C         	call	_strlen	;wreg free
  7226  0023F4  0560               	decf	?_strlen& (0+255),w,b
  7227  0023F6  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7228  0023F8  E001 D09D          	bnz	l11065
  7229                           
  7230                           ; BSR set to: 0
  7231                           ;main.c: 1428: putsUSART((char *) "F00\r\n");
  7232  0023FC  0E7F               	movlw	high STR_136
  7233  0023FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7234  002400  0E79               	movlw	low STR_136
  7235  002402  6F61               	movwf	?_putsUSART& (0+255),b
  7236  002404  EC4F  F02B         	call	_putsUSART	;wreg free
  7237  002408  D096               	goto	l11065
  7238  00240A                     l11013:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;main.c: 1444: if (2 == strlen(cmdbuf)) {
  7242  00240A  0E01               	movlw	high _cmdbuf
  7243  00240C  0100               	movlb	0	; () banked
  7244  00240E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7245  002410  0E04               	movlw	low _cmdbuf
  7246  002412  6F60               	movwf	?_strlen& (0+255),b
  7247  002414  EC77  F02C         	call	_strlen	;wreg free
  7248  002418  5160               	movf	?_strlen& (0+255),w,b
  7249  00241A  0A02               	xorlw	2
  7250  00241C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7251  00241E  E001 D08A          	bnz	l11065
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 1445: if (!bOpen) {
  7255  002422  67EF               	tstfsz	_bOpen& (0+255),b
  7256  002424  D088               	goto	l11065
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;main.c: 1446: if ('0' == cmdbuf[1]) {
  7260  002426  0101               	movlb	1	; () banked
  7261  002428  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7262  00242A  0A30               	xorlw	48
  7263  00242C  E110               	bnz	l11025
  7264                           
  7265                           ; BSR set to: 1
  7266                           ;main.c: 1447: nTimeStamp = 0;
  7267  00242E  0100               	movlb	0	; () banked
  7268  002430  6BF2               	clrf	_nTimeStamp& (0+255),b
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;main.c: 1449: (Busy_eep(), Write_b_eep(0x05,0));
  7272  002432  EC4F  F02E         	call	_Busy_eep	;wreg free
  7273  002436  0100               	movlb	0	; () banked
  7274  002438  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7275  00243A  0E05               	movlw	5
  7276  00243C  6F60               	movwf	?_Write_b_eep& (0+255),b
  7277  00243E  0E00               	movlw	0
  7278  002440  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7279  002442  EC67  F02D         	call	_Write_b_eep	;wreg free
  7280  002446                     L5:
  7281                           
  7282                           ;main.c: 1450: rv = 1;
  7283  002446  0E01               	movlw	1
  7284  002448  0100               	movlb	0	; () banked
  7285  00244A                     L4:
  7286  00244A  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7287                           
  7288                           ;main.c: 1451: } else if ('1' == cmdbuf[1]) {
  7289  00244C  D074               	goto	l11065
  7290  00244E                     l11025:
  7291                           
  7292                           ; BSR set to: 1
  7293  00244E  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7294  002450  0A31               	xorlw	49
  7295  002452  E10E               	bnz	l744
  7296                           
  7297                           ; BSR set to: 1
  7298                           ;main.c: 1452: nTimeStamp = 1;
  7299  002454  0E01               	movlw	1
  7300  002456  0100               	movlb	0	; () banked
  7301  002458  6FF2               	movwf	_nTimeStamp& (0+255),b
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;main.c: 1454: (Busy_eep(), Write_b_eep(0x05,1));
  7305  00245A  EC4F  F02E         	call	_Busy_eep	;wreg free
  7306  00245E  0100               	movlb	0	; () banked
  7307  002460  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7308  002462  0E05               	movlw	5
  7309  002464  6F60               	movwf	?_Write_b_eep& (0+255),b
  7310  002466  0E01               	movlw	1
  7311  002468  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7312  00246A  EC67  F02D         	call	_Write_b_eep	;wreg free
  7313  00246E  D7EB               	goto	L5
  7314  002470                     l744:
  7315                           
  7316                           ; BSR set to: 1
  7317                           ;main.c: 1458: rv = 0;
  7318  002470  0100               	movlb	0	; () banked
  7319  002472  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7320  002474  D060               	goto	l11065
  7321  002476                     l11033:
  7322                           
  7323                           ; BSR set to: 0
  7324                           ;main.c: 1466: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7325  002476  EC4F  F02E         	call	_Busy_eep	;wreg free
  7326  00247A  ECFA  F024         	call	PL66	;call to abstracted procedure
  7327  00247E  EC67  F02D         	call	_Write_b_eep	;wreg free
  7328  002482  00FF               	reset		;# 
  7329                           
  7330                           ;main.c: 1468: break;
  7331  002484  D058               	goto	l11065
  7332  002486                     l11037:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;main.c: 1472: if ( 'v' == cmdbuf[1] &&
  7336                           ;main.c: 1473: 's' == cmdbuf[2] &&
  7337                           ;main.c: 1474: 'c' == cmdbuf[3] &&
  7338                           ;main.c: 1475: 'p' == cmdbuf[4] ) {
  7339  002486  0101               	movlb	1	; () banked
  7340  002488  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7341  00248A  0A76               	xorlw	118
  7342  00248C  E10D               	bnz	l11047
  7343                           
  7344                           ; BSR set to: 1
  7345  00248E  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  7346  002490  0A73               	xorlw	115
  7347  002492  E10A               	bnz	l11047
  7348                           
  7349                           ; BSR set to: 1
  7350  002494  5107               	movf	(_cmdbuf+3)& (0+255),w,b
  7351  002496  0A63               	xorlw	99
  7352  002498  E107               	bnz	l11047
  7353                           
  7354                           ; BSR set to: 1
  7355  00249A  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  7356  00249C  0A70               	xorlw	112
  7357  00249E  E104               	bnz	l11047
  7358                           
  7359                           ; BSR set to: 1
  7360                           ;main.c: 1476: mode = 1;
  7361  0024A0  0E01               	movlw	1
  7362  0024A2  0100               	movlb	0	; () banked
  7363  0024A4  6FF1               	movwf	_mode& (0+255),b
  7364                           
  7365                           ;main.c: 1477: }
  7366  0024A6  D047               	goto	l11065
  7367  0024A8                     l11047:
  7368                           
  7369                           ; BSR set to: 1
  7370                           ;main.c: 1478: else if ( 'v' == cmdbuf[1] &&
  7371                           ;main.c: 1479: 'e' == cmdbuf[2] &&
  7372                           ;main.c: 1480: 'r' == cmdbuf[3] &&
  7373                           ;main.c: 1481: 'b' == cmdbuf[4] ) {
  7374  0024A8  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7375  0024AA  0A76               	xorlw	118
  7376  0024AC  E144               	bnz	l11065
  7377                           
  7378                           ; BSR set to: 1
  7379  0024AE  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  7380  0024B0  0A65               	xorlw	101
  7381  0024B2  E141               	bnz	l11065
  7382                           
  7383                           ; BSR set to: 1
  7384  0024B4  5107               	movf	(_cmdbuf+3)& (0+255),w,b
  7385  0024B6  0A72               	xorlw	114
  7386  0024B8  E13E               	bnz	l11065
  7387                           
  7388                           ; BSR set to: 1
  7389  0024BA  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  7390  0024BC  0A62               	xorlw	98
  7391  0024BE  E13B               	bnz	l11065
  7392                           
  7393                           ; BSR set to: 1
  7394                           ;main.c: 1482: mode = 0;
  7395  0024C0  0100               	movlb	0	; () banked
  7396  0024C2  6BF1               	clrf	_mode& (0+255),b
  7397  0024C4  D038               	goto	l11065
  7398  0024C6                     l11057:
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;main.c: 1487: {
  7402                           ;main.c: 1489: if (0 == strlen(cmdbuf)) {
  7403  0024C6  0E01               	movlw	high _cmdbuf
  7404  0024C8  0100               	movlb	0	; () banked
  7405  0024CA  6F61               	movwf	(?_strlen+1)& (0+255),b
  7406  0024CC  0E04               	movlw	low _cmdbuf
  7407  0024CE  6F60               	movwf	?_strlen& (0+255),b
  7408  0024D0  EC77  F02C         	call	_strlen	;wreg free
  7409  0024D4  5161               	movf	(?_strlen+1)& (0+255),w,b
  7410  0024D6  1160               	iorwf	?_strlen& (0+255),w,b
  7411  0024D8  E0B6               	bz	L5
  7412  0024DA  D02D               	goto	l11065
  7413  0024DC                     l11063:
  7414                           
  7415                           ; BSR set to: 0
  7416  0024DC  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7417                           
  7418                           ; Switch size 1, requested type "space"
  7419                           ; Number of cases is 17, Range of values is 64 to 116
  7420                           ; switch strategies available:
  7421                           ; Name         Instructions Cycles
  7422                           ; simple_byte           52    27 (average)
  7423                           ;	Chosen strategy is simple_byte
  7424  0024DE  0A40               	xorlw	64	; case 64
  7425  0024E0  E0D2               	bz	l11037
  7426  0024E2  0A02               	xorlw	2	; case 66
  7427  0024E4  E0C8               	bz	l11033
  7428  0024E6  0A01               	xorlw	1	; case 67
  7429  0024E8  E101 D6DC          	bz	l10969
  7430  0024EC  0A05               	xorlw	5	; case 70
  7431  0024EE  E101 D777          	bz	l11003
  7432  0024F2  0A0C               	xorlw	12	; case 74
  7433  0024F4  E101 D682          	bz	l10935
  7434  0024F8  0A07               	xorlw	7	; case 77
  7435  0024FA  E0A5               	bz	L5
  7436  0024FC  0A03               	xorlw	3	; case 78
  7437  0024FE  E101 D6A1          	bz	l10947
  7438  002502  0A01               	xorlw	1	; case 79
  7439  002504  E101 D6B8          	bz	l10957
  7440  002508  0A1D               	xorlw	29	; case 82
  7441  00250A  E015               	bz	l11065
  7442  00250C  0A01               	xorlw	1	; case 83
  7443  00250E  E101 D6AB          	bz	l10953
  7444  002512  0A07               	xorlw	7	; case 84
  7445  002514  E101 D6D9          	bz	l10979
  7446  002518  0A02               	xorlw	2	; case 86
  7447  00251A  E101 D681          	bz	l10941
  7448  00251E  0A0C               	xorlw	12	; case 90
  7449  002520  E101 D773          	bz	l11013
  7450  002524  0A37               	xorlw	55	; case 109
  7451  002526  E08F               	bz	L5
  7452  002528  0A1F               	xorlw	31	; case 114
  7453  00252A  E005               	bz	l11065
  7454  00252C  0A01               	xorlw	1	; case 115
  7455  00252E  E101 D69E          	bz	l719
  7456  002532  0A07               	xorlw	7	; case 116
  7457  002534  E1C8               	bnz	l11057
  7458  002536                     l11065:
  7459                           
  7460                           ;main.c: 1497: if (rv) {
  7461  002536  0100               	movlb	0	; () banked
  7462  002538  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7463  00253A  E007               	bz	l11069
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;main.c: 1499: putsUSART((char *) "\r");
  7467  00253C  0E7F               	movlw	high STR_137
  7468  00253E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7469  002540  0EF2               	movlw	low STR_137
  7470  002542  6F61               	movwf	?_putsUSART& (0+255),b
  7471  002544  EC4F  F02B         	call	_putsUSART	;wreg free
  7472                           
  7473                           ;main.c: 1500: }
  7474  002548  D006               	goto	l11071
  7475  00254A                     l11069:
  7476                           
  7477                           ; BSR set to: 0
  7478                           ;main.c: 1501: else {
  7479                           ;main.c: 1503: putsUSART((char *) "\a");
  7480  00254A  0E7F               	movlw	high STR_138
  7481  00254C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7482  00254E  0EF0               	movlw	low STR_138
  7483  002550  6F61               	movwf	?_putsUSART& (0+255),b
  7484  002552  EC4F  F02B         	call	_putsUSART	;wreg free
  7485  002556                     l11071:
  7486                           
  7487                           ;main.c: 1504: }
  7488                           ;main.c: 1507: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7489  002556  0E01               	movlw	high _cmdbuf
  7490  002558  0100               	movlb	0	; () banked
  7491  00255A  6F61               	movwf	(?_memset+1)& (0+255),b
  7492  00255C  0E04               	movlw	low _cmdbuf
  7493  00255E  6F60               	movwf	?_memset& (0+255),b
  7494  002560  6B63               	clrf	(?_memset+3)& (0+255),b
  7495  002562  6B62               	clrf	(?_memset+2)& (0+255),b
  7496  002564  6B65               	clrf	(?_memset+5)& (0+255),b
  7497  002566  0E50               	movlw	80
  7498  002568  6F64               	movwf	(?_memset+4)& (0+255),b
  7499  00256A  ECC9  F02D         	call	_memset	;wreg free
  7500                           
  7501                           ; BSR set to: 0
  7502                           ;main.c: 1508: pos = 0;
  7503  00256E  0101               	movlb	1	; () banked
  7504  002570  6B02               	clrf	_pos& (0+255),b
  7505  002572                     l11075:
  7506                           
  7507                           ;main.c: 1510: }
  7508                           ;main.c: 1513: (INTCONbits.GIE = 1);
  7509  002572  8EF2               	bsf	intcon,7,c	;volatile
  7510  002574                     l709:
  7511  002574  0012               	return	
  7512  002576                     __end_of_doModeSLCAN:
  7513                           	opt stack 0
  7514  002576                     PL90:
  7515                           	opt stack 23
  7516  002576  90D8               	bcf	status,0,c
  7517  002578  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7518  00257A  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7519  00257C  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7520  00257E  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7521  002580  0012               	return	
  7522  002582                     __end_ofPL90:
  7523                           	opt stack 0
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           indf0	equ	0xFEF
  7532                           postinc0	equ	0xFEE
  7533                           fsr0h	equ	0xFEA
  7534                           fsr0l	equ	0xFE9
  7535                           wreg	equ	0xFE8
  7536                           indf1	equ	0xFE7
  7537                           postinc1	equ	0xFE6
  7538                           postdec1	equ	0xFE5
  7539                           fsr1h	equ	0xFE2
  7540                           fsr1l	equ	0xFE1
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           plusw2	equ	0xFDB
  7545                           fsr2h	equ	0xFDA
  7546                           fsr2l	equ	0xFD9
  7547                           status	equ	0xFD8
  7548                           
  7549 ;; *************** function _hexStringToBytes *****************
  7550 ;; Defined at:
  7551 ;;		line 35 in file "hexutils.c"
  7552 ;; Parameters:    Size  Location     Type
  7553 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7554 ;;		 -> wrkbuf(80), 
  7555 ;;  size            1    6[BANK0 ] unsigned char 
  7556 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7557 ;;		 -> cmdbuf(80), 
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  i               2   16[BANK0 ] int 
  7560 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7561 ;;		 -> cmdbuf(80), 
  7562 ;;  len             2   12[BANK0 ] int 
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      unsigned char 
  7565 ;; Registers used:
  7566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : F/0
  7569 ;;		On exit  : F/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7572 ;;      Params:         0       5       0       0       0       0       0
  7573 ;;      Locals:         0       6       0       0       0       0       0
  7574 ;;      Temps:          0       3       0       0       0       0       0
  7575 ;;      Totals:         0      14       0       0       0       0       0
  7576 ;;Total ram usage:       14 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    4
  7579 ;; This function calls:
  7580 ;;		_strlen
  7581 ;;		_nibbleFromChar
  7582 ;; This function is called by:
  7583 ;;		_doModeSLCAN
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text3
  7588  004DEC                     __ptext3:
  7589                           	opt stack 0
  7590  004DEC                     _hexStringToBytes:
  7591                           	opt stack 25
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;hexutils.c: 36: uint8_t *p;
  7595                           ;hexutils.c: 37: int len, i;
  7596                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7597                           
  7598                           ;incstack = 0
  7599                           ;incstack = 0
  7600  004DEC  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7601  004DF0  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7602  004DF4  EC77  F02C         	call	_strlen	;wreg free
  7603  004DF8  90D8               	bcf	status,0,c
  7604  004DFA  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7605  004DFC  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7606  004DFE  3160               	rrcf	?_strlen& (0+255),w,b
  7607  004E00  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;hexutils.c: 40: if (len > size) return 0;
  7611  004E02  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7612  004E04  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7613  004E06  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7614  004E08  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7615  004E0A  0A80               	xorlw	128
  7616  004E0C  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7617  004E0E  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7618  004E10  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7619  004E12  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7620  004E14  0A80               	xorlw	128
  7621  004E16  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7622  004E18  E202               	bc	l1575
  7623                           
  7624                           ; BSR set to: 0
  7625  004E1A  0E00               	movlw	0
  7626  004E1C  D033               	goto	l1576
  7627  004E1E                     l1575:
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7631  004E1E  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7632  004E20  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7633  004E22  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7634  004E26  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7635  004E2A  D022               	goto	l12673
  7636  004E2C                     l12667:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7640  004E2C  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7641  004E2E  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7642  004E30  6ED9               	movwf	fsr2l,c
  7643  004E32  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7644  004E34  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7645  004E36  6EDA               	movwf	fsr2h,c
  7646  004E38  EE10 F001          	lfsr	1,1
  7647  004E3C  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7648  004E3E  26E1               	addwf	fsr1l,f,c
  7649  004E40  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7650  004E42  22E2               	addwfc	fsr1h,f,c
  7651  004E44  50E7               	movf	indf1,w,c
  7652  004E46  ECB7  F02C         	call	_nibbleFromChar
  7653  004E4A  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7654  004E4C  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7655  004E50  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7656  004E54  50E7               	movf	indf1,w,c
  7657  004E56  ECB7  F02C         	call	_nibbleFromChar
  7658  004E5A  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7659  004E5C  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7660  004E5E  0BF0               	andlw	240
  7661  004E60  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7662  004E62  6EDF               	movwf	indf2,c
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;hexutils.c: 43: p += 2;
  7666  004E64  0E02               	movlw	2
  7667  004E66  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7668  004E68  0E00               	movlw	0
  7669  004E6A  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7670                           
  7671                           ; BSR set to: 0
  7672  004E6C  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7673  004E6E  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7674  004E70                     l12673:
  7675                           
  7676                           ; BSR set to: 0
  7677  004E70  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7678  004E72  0A80               	xorlw	128
  7679  004E74  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7680  004E76  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7681  004E78  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7682  004E7A  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7683  004E7C  0A80               	xorlw	128
  7684  004E7E  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7685  004E80  E3D5               	bnc	l12667
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;hexutils.c: 44: }
  7689                           ;hexutils.c: 46: return i;
  7690  004E82  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7691  004E84                     l1576:
  7692                           
  7693                           ; BSR set to: 0
  7694  004E84  0012               	return	
  7695  004E86                     __end_of_hexStringToBytes:
  7696                           	opt stack 0
  7697                           tblptru	equ	0xFF8
  7698                           tblptrh	equ	0xFF7
  7699                           tblptrl	equ	0xFF6
  7700                           tablat	equ	0xFF5
  7701                           prodh	equ	0xFF4
  7702                           prodl	equ	0xFF3
  7703                           intcon	equ	0xFF2
  7704                           indf0	equ	0xFEF
  7705                           postinc0	equ	0xFEE
  7706                           fsr0h	equ	0xFEA
  7707                           fsr0l	equ	0xFE9
  7708                           wreg	equ	0xFE8
  7709                           indf1	equ	0xFE7
  7710                           postinc1	equ	0xFE6
  7711                           postdec1	equ	0xFE5
  7712                           fsr1h	equ	0xFE2
  7713                           fsr1l	equ	0xFE1
  7714                           indf2	equ	0xFDF
  7715                           postinc2	equ	0xFDE
  7716                           postdec2	equ	0xFDD
  7717                           plusw2	equ	0xFDB
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function _nibbleFromChar *****************
  7723 ;; Defined at:
  7724 ;;		line 20 in file "hexutils.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  c               1    wreg     unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  c               1    0[BANK0 ] unsigned char 
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      unsigned char 
  7731 ;; Registers used:
  7732 ;;		wreg, status,2, status,0
  7733 ;; Tracked objects:
  7734 ;;		On entry : F/0
  7735 ;;		On exit  : F/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7738 ;;      Params:         0       0       0       0       0       0       0
  7739 ;;      Locals:         0       1       0       0       0       0       0
  7740 ;;      Temps:          0       0       0       0       0       0       0
  7741 ;;      Totals:         0       1       0       0       0       0       0
  7742 ;;Total ram usage:        1 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    3
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_hexStringToBytes
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           	psect	text4
  7753  00596E                     __ptext4:
  7754                           	opt stack 0
  7755  00596E                     _nibbleFromChar:
  7756                           	opt stack 25
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;incstack = 0
  7760                           ;incstack = 0
  7761                           ;nibbleFromChar@c stored from wreg
  7762  00596E  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7766  005972  0E2F               	movlw	47
  7767  005974  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7768  005976  D006               	goto	l12943
  7769                           
  7770                           ; BSR set to: 0
  7771  005978  0E3A               	movlw	58
  7772  00597A  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7773  00597C  D003               	goto	l12943
  7774                           
  7775                           ; BSR set to: 0
  7776  00597E  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7777  005980  0FD0               	addlw	208
  7778  005982  D013               	goto	l1570
  7779  005984                     l12943:
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7783  005984  0E60               	movlw	96
  7784  005986  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7785  005988  D006               	goto	l12951
  7786                           
  7787                           ; BSR set to: 0
  7788  00598A  0E67               	movlw	103
  7789  00598C  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7790  00598E  D003               	goto	l12951
  7791                           
  7792                           ; BSR set to: 0
  7793  005990  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7794  005992  0FA9               	addlw	169
  7795  005994  D00A               	goto	l1570
  7796  005996                     l12951:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7800  005996  0E40               	movlw	64
  7801  005998  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7802  00599A  D006               	goto	l12959
  7803                           
  7804                           ; BSR set to: 0
  7805  00599C  0E47               	movlw	71
  7806  00599E  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7807  0059A0  D003               	goto	l12959
  7808                           
  7809                           ; BSR set to: 0
  7810  0059A2  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7811  0059A4  0FC9               	addlw	201
  7812  0059A6  D001               	goto	l1570
  7813  0059A8                     l12959:
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;hexutils.c: 24: return 255;
  7817  0059A8  0EFF               	movlw	255
  7818  0059AA                     l1570:
  7819                           
  7820                           ; BSR set to: 0
  7821  0059AA  0012               	return	
  7822  0059AC                     __end_of_nibbleFromChar:
  7823                           	opt stack 0
  7824                           tblptru	equ	0xFF8
  7825                           tblptrh	equ	0xFF7
  7826                           tblptrl	equ	0xFF6
  7827                           tablat	equ	0xFF5
  7828                           prodh	equ	0xFF4
  7829                           prodl	equ	0xFF3
  7830                           intcon	equ	0xFF2
  7831                           indf0	equ	0xFEF
  7832                           postinc0	equ	0xFEE
  7833                           fsr0h	equ	0xFEA
  7834                           fsr0l	equ	0xFE9
  7835                           wreg	equ	0xFE8
  7836                           indf1	equ	0xFE7
  7837                           postinc1	equ	0xFE6
  7838                           postdec1	equ	0xFE5
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           plusw2	equ	0xFDB
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function _receiveSendEventSLCAN *****************
  7850 ;; Defined at:
  7851 ;;		line 2110 in file "main.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;		None
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  id              4   38[BANK0 ] unsigned long 
  7856 ;;  i               2   43[BANK0 ] int 
  7857 ;;  dlc             1   42[BANK0 ] unsigned char 
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      enum E15660
  7860 ;; Registers used:
  7861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : F/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7867 ;;      Params:         0       0       0       0       0       0       0
  7868 ;;      Locals:         0       7       0       0       0       0       0
  7869 ;;      Temps:          0       3       0       0       0       0       0
  7870 ;;      Totals:         0      10       0       0       0       0       0
  7871 ;;Total ram usage:       10 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    6
  7874 ;; This function calls:
  7875 ;;		_putsUSART
  7876 ;;		_WriteUSART
  7877 ;;		_strlen
  7878 ;;		_getCANFrame
  7879 ;;		_ultoa
  7880 ;;		_itoa
  7881 ;; This function is called by:
  7882 ;;		_doModeSLCAN
  7883 ;; This function uses a non-reentrant model
  7884 ;;
  7885                           
  7886                           	psect	text5
  7887  003422                     __ptext5:
  7888                           	opt stack 0
  7889  003422                     _receiveSendEventSLCAN:
  7890                           	opt stack 23
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;main.c: 2111: int i;
  7894                           ;main.c: 2112: uint8_t dlc;
  7895                           ;main.c: 2113: uint32_t id;
  7896                           ;main.c: 2115: if (getCANFrame(&id, &dlc, vscpData)) {
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;incstack = 0
  7900                           ;incstack = 0
  7901  003422  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7902  003424  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7903  003426  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7904  003428  6F6D               	movwf	?_getCANFrame& (0+255),b
  7905  00342A  0E01               	movlw	high _vscpData
  7906  00342C  0100               	movlb	0	; () banked
  7907  00342E  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7908  003430  0EA4               	movlw	low _vscpData
  7909  003432  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7910  003434  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7911  003436  ECDD  F028         	call	_getCANFrame
  7912  00343A  0900               	iorlw	0
  7913  00343C  E101 D0AD          	bz	l1055
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;main.c: 2118: cntRxFrames++;
  7917  003440  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7918  003442  0E00               	movlw	0
  7919  003444  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7920  003446  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7921  003448  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7922                           
  7923                           ;main.c: 2119: cntRxBytes += dlc;
  7924  00344A  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7925  00344C  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7926  00344E  0E00               	movlw	0
  7927  003450  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7928  003452  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7929  003454  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7930  003456                     l1028:
  7931                           
  7932                           ; BSR set to: 0
  7933  003456  A2AC               	btfss	4012,1,c	;volatile
  7934  003458  D7FE               	goto	l1028
  7935                           
  7936                           ; BSR set to: 0
  7937                           ;main.c: 2122: WriteUSART('T');
  7938  00345A  0E54               	movlw	84
  7939  00345C  EC26  F02E         	call	_WriteUSART
  7940                           
  7941                           ;main.c: 2124: ultoa(wrkbuf, id, 16);
  7942  003460  0E01               	movlw	high _wrkbuf
  7943  003462  0100               	movlb	0	; () banked
  7944  003464  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7945  003466  0E54               	movlw	low _wrkbuf
  7946  003468  6F76               	movwf	?_ultoa& (0+255),b
  7947  00346A  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7948  00346E  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7949  003472  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7950  003476  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7951  00347A  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7952  00347C  0E10               	movlw	16
  7953  00347E  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7954  003480  ECC5  F021         	call	_ultoa	;wreg free
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;main.c: 2126: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7958  003484  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7959  003486  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7960  003488                     l1033:
  7961                           
  7962                           ; BSR set to: 0
  7963  003488  A2AC               	btfss	4012,1,c	;volatile
  7964  00348A  D7FE               	goto	l1033
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;main.c: 2128: WriteUSART('0');
  7968  00348C  0E30               	movlw	48
  7969  00348E  EC26  F02E         	call	_WriteUSART
  7970                           
  7971                           ; BSR set to: 0
  7972  003492  D884               	call	PL102	;call to abstracted procedure
  7973  003494  B4D8               	btfsc	status,2,c
  7974  003496  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7975  003498  E3F7               	bnc	l1033
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;main.c: 2129: }
  7979                           ;main.c: 2130: putsUSART(wrkbuf);
  7980  00349A  0E01               	movlw	high _wrkbuf
  7981  00349C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7982  00349E  0E54               	movlw	low _wrkbuf
  7983  0034A0  6F61               	movwf	?_putsUSART& (0+255),b
  7984  0034A2  EC4F  F02B         	call	_putsUSART	;wreg free
  7985                           
  7986                           ;main.c: 2133: itoa(wrkbuf, dlc, 16);
  7987  0034A6  0E01               	movlw	high _wrkbuf
  7988  0034A8  0100               	movlb	0	; () banked
  7989  0034AA  6F71               	movwf	(?_itoa+1)& (0+255),b
  7990  0034AC  0E54               	movlw	low _wrkbuf
  7991  0034AE  6F70               	movwf	?_itoa& (0+255),b
  7992  0034B0  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7993  0034B4  6B73               	clrf	(?_itoa+3)& (0+255),b
  7994  0034B6  6B75               	clrf	(?_itoa+5)& (0+255),b
  7995  0034B8  0E10               	movlw	16
  7996  0034BA  6F74               	movwf	(?_itoa+4)& (0+255),b
  7997  0034BC  EC30  F02D         	call	_itoa	;wreg free
  7998  0034C0                     l1036:
  7999                           
  8000                           ; BSR set to: 0
  8001  0034C0  A2AC               	btfss	4012,1,c	;volatile
  8002  0034C2  D7FE               	goto	l1036
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;main.c: 2135: WriteUSART(wrkbuf[0]);
  8006  0034C4  0101               	movlb	1	; () banked
  8007  0034C6  5154               	movf	_wrkbuf& (0+255),w,b
  8008  0034C8  EC26  F02E         	call	_WriteUSART
  8009                           
  8010                           ;main.c: 2138: for (i = 0; i < dlc; i++) {
  8011  0034CC  0100               	movlb	0	; () banked
  8012  0034CE  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8013  0034D0  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8014  0034D2  D02D               	goto	l12625
  8015  0034D4                     l12613:
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;main.c: 2139: itoa(wrkbuf, vscpData[i], 16);
  8019  0034D4  0E01               	movlw	high _wrkbuf
  8020  0034D6  0100               	movlb	0	; () banked
  8021  0034D8  6F71               	movwf	(?_itoa+1)& (0+255),b
  8022  0034DA  0E54               	movlw	low _wrkbuf
  8023  0034DC  6F70               	movwf	?_itoa& (0+255),b
  8024  0034DE  0EA4               	movlw	low _vscpData
  8025  0034E0  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  8026  0034E2  6ED9               	movwf	fsr2l,c
  8027  0034E4  0E01               	movlw	high _vscpData
  8028  0034E6  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8029  0034E8  6EDA               	movwf	fsr2h,c
  8030  0034EA  50DF               	movf	indf2,w,c
  8031  0034EC  6F72               	movwf	(?_itoa+2)& (0+255),b
  8032  0034EE  6B73               	clrf	(?_itoa+3)& (0+255),b
  8033  0034F0  6B75               	clrf	(?_itoa+5)& (0+255),b
  8034  0034F2  0E10               	movlw	16
  8035  0034F4  6F74               	movwf	(?_itoa+4)& (0+255),b
  8036  0034F6  EC30  F02D         	call	_itoa	;wreg free
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 2141: if (2 != strlen(wrkbuf)) {
  8040  0034FA  0E01               	movlw	high _wrkbuf
  8041  0034FC  0100               	movlb	0	; () banked
  8042  0034FE  6F61               	movwf	(?_strlen+1)& (0+255),b
  8043  003500  0E54               	movlw	low _wrkbuf
  8044  003502  6F60               	movwf	?_strlen& (0+255),b
  8045  003504  EC77  F02C         	call	_strlen	;wreg free
  8046  003508  5160               	movf	?_strlen& (0+255),w,b
  8047  00350A  0A02               	xorlw	2
  8048  00350C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8049  00350E  E005               	bz	l12621
  8050  003510                     l1042:
  8051                           
  8052                           ; BSR set to: 0
  8053  003510  A2AC               	btfss	4012,1,c	;volatile
  8054  003512  D7FE               	goto	l1042
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 2143: WriteUSART('0');
  8058  003514  0E30               	movlw	48
  8059  003516  EC26  F02E         	call	_WriteUSART
  8060  00351A                     l12621:
  8061                           
  8062                           ;main.c: 2144: }
  8063                           ;main.c: 2146: putsUSART(wrkbuf);
  8064  00351A  0E01               	movlw	high _wrkbuf
  8065  00351C  0100               	movlb	0	; () banked
  8066  00351E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8067  003520  0E54               	movlw	low _wrkbuf
  8068  003522  6F61               	movwf	?_putsUSART& (0+255),b
  8069  003524  EC4F  F02B         	call	_putsUSART	;wreg free
  8070  003528  0100               	movlb	0	; () banked
  8071  00352A  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8072  00352C  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8073  00352E                     l12625:
  8074                           
  8075                           ; BSR set to: 0
  8076  00352E  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8077  003530  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8078  003532  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8079  003534  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8080  003536  0A80               	xorlw	128
  8081  003538  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8082  00353A  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8083  00353C  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8084  00353E  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8085  003540  0A80               	xorlw	128
  8086  003542  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8087  003544  E3C7               	bnc	l12613
  8088                           
  8089                           ; BSR set to: 0
  8090                           ;main.c: 2147: }
  8091                           ;main.c: 2150: if (nTimeStamp) {
  8092  003546  51F2               	movf	_nTimeStamp& (0+255),w,b
  8093  003548  E023               	bz	l1052
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;main.c: 2151: ultoa(wrkbuf, timer, 16);
  8097  00354A  0E01               	movlw	high _wrkbuf
  8098  00354C  0100               	movlb	0	; () banked
  8099  00354E  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8100  003550  0E54               	movlw	low _wrkbuf
  8101  003552  6F76               	movwf	?_ultoa& (0+255),b
  8102  003554  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8103  003558  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8104  00355C  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8105  003560  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8106  003564  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8107  003566  0E10               	movlw	16
  8108  003568  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8109  00356A  ECC5  F021         	call	_ultoa	;wreg free
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;main.c: 2153: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8113  00356E  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8114  003570  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8115  003572                     l1049:
  8116                           
  8117                           ; BSR set to: 0
  8118  003572  A2AC               	btfss	4012,1,c	;volatile
  8119  003574  D7FE               	goto	l1049
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;main.c: 2155: WriteUSART('0');
  8123  003576  0E30               	movlw	48
  8124  003578  EC26  F02E         	call	_WriteUSART
  8125                           
  8126                           ; BSR set to: 0
  8127  00357C  D80F               	call	PL102	;call to abstracted procedure
  8128  00357E  B4D8               	btfsc	status,2,c
  8129  003580  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8130  003582  E3F7               	bnc	l1049
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;main.c: 2156: }
  8134                           ;main.c: 2157: putsUSART(wrkbuf);
  8135  003584  0E01               	movlw	high _wrkbuf
  8136  003586  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8137  003588  0E54               	movlw	low _wrkbuf
  8138  00358A  6F61               	movwf	?_putsUSART& (0+255),b
  8139  00358C  EC4F  F02B         	call	_putsUSART	;wreg free
  8140  003590                     l1052:
  8141  003590  A2AC               	btfss	4012,1,c	;volatile
  8142  003592  D7FE               	goto	l1052
  8143                           
  8144                           ;main.c: 2161: WriteUSART(0x0d);
  8145  003594  0E0D               	movlw	13
  8146  003596  EC26  F02E         	call	_WriteUSART
  8147  00359A                     l1055:
  8148  00359A  0012               	return	
  8149  00359C                     __end_of_receiveSendEventSLCAN:
  8150                           	opt stack 0
  8151  00359C                     PL102:
  8152                           	opt stack 23
  8153  00359C  0100               	movlb	0	; () banked
  8154  00359E  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8155  0035A0  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8156  0035A2  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8157  0035A4  0A80               	xorlw	128
  8158  0035A6  0F80               	addlw	-128
  8159  0035A8  0CB8               	retlw	184
  8160  0035AA                     __end_ofPL102:
  8161                           	opt stack 0
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           indf0	equ	0xFEF
  8170                           postinc0	equ	0xFEE
  8171                           fsr0h	equ	0xFEA
  8172                           fsr0l	equ	0xFE9
  8173                           wreg	equ	0xFE8
  8174                           indf1	equ	0xFE7
  8175                           postinc1	equ	0xFE6
  8176                           postdec1	equ	0xFE5
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           plusw2	equ	0xFDB
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function _ultoa *****************
  8188 ;; Defined at:
  8189 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8192 ;;		 -> wrkbuf(80), 
  8193 ;;  val             4   24[BANK0 ] unsigned long 
  8194 ;;  base            2   28[BANK0 ] int 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  v               4   30[BANK0 ] unsigned long 
  8197 ;;  c               1   34[BANK0 ] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  2   22[BANK0 ] PTR unsigned char 
  8200 ;; Registers used:
  8201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8202 ;; Tracked objects:
  8203 ;;		On entry : F/0
  8204 ;;		On exit  : F/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8207 ;;      Params:         0       8       0       0       0       0       0
  8208 ;;      Locals:         0       5       0       0       0       0       0
  8209 ;;      Temps:          0       0       0       0       0       0       0
  8210 ;;      Totals:         0      13       0       0       0       0       0
  8211 ;;Total ram usage:       13 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    4
  8214 ;; This function calls:
  8215 ;;		___lldiv
  8216 ;;		___llmod
  8217 ;; This function is called by:
  8218 ;;		_receiveSendEventSLCAN
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text6
  8223  00438A                     __ptext6:
  8224                           	opt stack 0
  8225  00438A                     _ultoa:
  8226                           	opt stack 24
  8227                           
  8228                           ; BSR set to: 0
  8229                           
  8230                           ;incstack = 0
  8231                           ;incstack = 0
  8232  00438A  C078  F07E         	movff	ultoa@val,ultoa@v
  8233  00438E  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8234  004392  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8235  004396  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8236  00439A                     l12783:
  8237                           
  8238                           ; BSR set to: 0
  8239  00439A  C07E  F060         	movff	ultoa@v,?___lldiv
  8240  00439E  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8241  0043A2  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8242  0043A6  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8243  0043AA  D858               	call	PL76	;call to abstracted procedure
  8244  0043AC  EC19  F029         	call	___lldiv	;wreg free
  8245  0043B0  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8246  0043B4  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8247  0043B8  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8248  0043BC  C060  F07E         	movff	?___lldiv,ultoa@v
  8249                           
  8250                           ; BSR set to: 0
  8251  0043C0  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8252  0043C2  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8253                           
  8254                           ; BSR set to: 0
  8255  0043C4  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8256  0043C6  117E               	iorwf	ultoa@v& (0+255),w,b
  8257  0043C8  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8258  0043CA  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8259  0043CC  E1E6               	bnz	l12783
  8260                           
  8261                           ; BSR set to: 0
  8262  0043CE  C076  FFD9         	movff	ultoa@buf,fsr2l
  8263  0043D2  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8264  0043D6  6ADF               	clrf	indf2,c
  8265                           
  8266                           ; BSR set to: 0
  8267  0043D8  0776               	decf	ultoa@buf& (0+255),f,b
  8268  0043DA  A0D8               	btfss	status,0,c
  8269  0043DC  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8270  0043DE                     l12793:
  8271                           
  8272                           ; BSR set to: 0
  8273  0043DE  C078  F06D         	movff	ultoa@val,?___llmod
  8274  0043E2  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8275  0043E6  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8276  0043EA  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8277  0043EE  C07C  F071         	movff	ultoa@base,?___llmod+4
  8278  0043F2  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8279  0043F6  0E00               	movlw	0
  8280  0043F8  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8281  0043FA  0EFF               	movlw	-1
  8282  0043FC  6F73               	movwf	(?___llmod+6)& (0+255),b
  8283  0043FE  6F74               	movwf	(?___llmod+7)& (0+255),b
  8284  004400  EC94  F02A         	call	___llmod	;wreg free
  8285  004404  516D               	movf	?___llmod& (0+255),w,b
  8286  004406  6F82               	movwf	ultoa@c& (0+255),b
  8287                           
  8288                           ; BSR set to: 0
  8289  004408  C078  F060         	movff	ultoa@val,?___lldiv
  8290  00440C  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8291  004410  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8292  004414  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8293  004418  D821               	call	PL76	;call to abstracted procedure
  8294  00441A  EC19  F029         	call	___lldiv	;wreg free
  8295  00441E  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8296  004422  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8297  004426  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8298  00442A  C060  F078         	movff	?___lldiv,ultoa@val
  8299                           
  8300                           ; BSR set to: 0
  8301  00442E  0E09               	movlw	9
  8302  004430  6582               	cpfsgt	ultoa@c& (0+255),b
  8303  004432  D002               	goto	l2404
  8304                           
  8305                           ; BSR set to: 0
  8306  004434  0E07               	movlw	7
  8307  004436  2782               	addwf	ultoa@c& (0+255),f,b
  8308  004438                     l2404:
  8309                           
  8310                           ; BSR set to: 0
  8311  004438  0E30               	movlw	48
  8312  00443A  2782               	addwf	ultoa@c& (0+255),f,b
  8313                           
  8314                           ; BSR set to: 0
  8315  00443C  C076  FFD9         	movff	ultoa@buf,fsr2l
  8316  004440  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8317  004444  C082  FFDF         	movff	ultoa@c,indf2
  8318                           
  8319                           ; BSR set to: 0
  8320  004448  0776               	decf	ultoa@buf& (0+255),f,b
  8321  00444A  A0D8               	btfss	status,0,c
  8322  00444C  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8323                           
  8324                           ; BSR set to: 0
  8325  00444E  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8326  004450  1178               	iorwf	ultoa@val& (0+255),w,b
  8327  004452  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8328  004454  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8329  004456  B4D8               	btfsc	status,2,c
  8330                           
  8331                           ; BSR set to: 0
  8332  004458  0012               	return	
  8333  00445A  D7C1               	goto	l12793
  8334  00445C                     __end_of_ultoa:
  8335                           	opt stack 0
  8336  00445C                     PL76:
  8337                           	opt stack 24
  8338  00445C  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8339  004460  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8340  004464  0E00               	movlw	0
  8341  004466  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8342  004468  0EFF               	movlw	-1
  8343  00446A  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8344  00446C  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8345  00446E  0012               	return	
  8346  004470                     __end_ofPL76:
  8347                           	opt stack 0
  8348                           tblptru	equ	0xFF8
  8349                           tblptrh	equ	0xFF7
  8350                           tblptrl	equ	0xFF6
  8351                           tablat	equ	0xFF5
  8352                           prodh	equ	0xFF4
  8353                           prodl	equ	0xFF3
  8354                           intcon	equ	0xFF2
  8355                           indf0	equ	0xFEF
  8356                           postinc0	equ	0xFEE
  8357                           fsr0h	equ	0xFEA
  8358                           fsr0l	equ	0xFE9
  8359                           wreg	equ	0xFE8
  8360                           indf1	equ	0xFE7
  8361                           postinc1	equ	0xFE6
  8362                           postdec1	equ	0xFE5
  8363                           fsr1h	equ	0xFE2
  8364                           fsr1l	equ	0xFE1
  8365                           indf2	equ	0xFDF
  8366                           postinc2	equ	0xFDE
  8367                           postdec2	equ	0xFDD
  8368                           plusw2	equ	0xFDB
  8369                           fsr2h	equ	0xFDA
  8370                           fsr2l	equ	0xFD9
  8371                           status	equ	0xFD8
  8372                           
  8373 ;; *************** function _doModeVscp *****************
  8374 ;; Defined at:
  8375 ;;		line 1093 in file "main.c"
  8376 ;; Parameters:    Size  Location     Type
  8377 ;;		None
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  c               1   87[BANK0 ] unsigned char 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;		None               void
  8382 ;; Registers used:
  8383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : F/0
  8386 ;;		On exit  : E/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8389 ;;      Params:         0       0       0       0       0       0       0
  8390 ;;      Locals:         0       1       0       0       0       0       0
  8391 ;;      Temps:          0       0       0       0       0       0       0
  8392 ;;      Totals:         0       1       0       0       0       0       0
  8393 ;;Total ram usage:        1 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    7
  8396 ;; This function calls:
  8397 ;;		_fifo_read
  8398 ;;		_ECANSetOperationMode
  8399 ;;		_receiveSendMultiEventCANAL
  8400 ;;		_receiveSendEventCANAL
  8401 ;;		_calcCRC
  8402 ;;		_sendVSCPDriverErrorFrame
  8403 ;;		_sendVSCPDriverAck
  8404 ;;		_receiveVSCPModeCanalMsg
  8405 ;;		_sendVSCPDriverNack
  8406 ;;		_receiveVSCPModeMultiCanalMsg
  8407 ;;		_sendVSCPModeCapabilities
  8408 ;;		_sendVSCPDriverCommandReply
  8409 ;; This function is called by:
  8410 ;;		_main
  8411 ;; This function uses a non-reentrant model
  8412 ;;
  8413                           
  8414                           	psect	text7
  8415  0030C0                     __ptext7:
  8416                           	opt stack 0
  8417  0030C0                     _doModeVscp:
  8418                           	opt stack 23
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;main.c: 1094: uint8_t c;
  8422                           ;main.c: 1097: if ( caps.maxCanalFrames > 1 ) {
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;incstack = 0
  8426                           ;incstack = 0
  8427  0030C0  EE20  F0F6         	lfsr	2,_caps+1
  8428  0030C4  0E01               	movlw	1
  8429  0030C6  64DF               	cpfsgt	indf2,c
  8430  0030C8  D003               	goto	l10769
  8431                           
  8432                           ; BSR set to: 0
  8433                           ;main.c: 1100: receiveSendMultiEventCANAL();
  8434  0030CA  ECD5  F01A         	call	_receiveSendMultiEventCANAL	;wreg free
  8435                           
  8436                           ;main.c: 1101: }
  8437  0030CE  D002               	goto	l10771
  8438  0030D0                     l10769:
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;main.c: 1102: else {
  8442                           ;main.c: 1105: receiveSendEventCANAL();
  8443  0030D0  EC01  F01D         	call	_receiveSendEventCANAL	;wreg free
  8444  0030D4                     l10771:
  8445                           
  8446                           ;main.c: 1106: }
  8447                           ;main.c: 1109: (INTCONbits.GIE = 0);
  8448  0030D4  9EF2               	bcf	intcon,7,c	;volatile
  8449                           
  8450                           ;main.c: 1111: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8451  0030D6  0100               	movlb	0	; () banked
  8452  0030D8  0E00               	movlw	high doModeVscp@c
  8453  0030DA  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8454  0030DC  0EB7               	movlw	low doModeVscp@c
  8455  0030DE  6F60               	movwf	?_fifo_read& (0+255),b
  8456  0030E0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8457  0030E2  0E01               	movlw	1
  8458  0030E4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8459  0030E6  0E48               	movlw	_serialInputFifo& (0+255)
  8460  0030E8  ECDE  F023         	call	_fifo_read
  8461  0030EC  0560               	decf	?_fifo_read& (0+255),w,b
  8462  0030EE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8463  0030F0  E001 D0B9          	bnz	l10915
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1114: (INTCONbits.GIE = 1);
  8467  0030F4  8EF2               	bsf	intcon,7,c	;volatile
  8468                           
  8469                           ;main.c: 1116: if ( 0 == stateVscpDriver ) {
  8470  0030F6  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8471  0030F8  D00E               	goto	l10791
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;main.c: 1117: if ( bDLE ) {
  8475  0030FA  51ED               	movf	_bDLE& (0+255),w,b
  8476  0030FC  E009               	bz	l10787
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;main.c: 1118: bDLE = 0;
  8480  0030FE  6BED               	clrf	_bDLE& (0+255),b
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;main.c: 1121: if ( 0x02 == c ) {
  8484  003100  51B7               	movf	doModeVscp@c& (0+255),w,b
  8485  003102  0A02               	xorlw	2
  8486  003104  E129               	bnz	l10825
  8487                           
  8488                           ; BSR set to: 0
  8489                           ;main.c: 1122: stateVscpDriver = 1;
  8490  003106  0E01               	movlw	1
  8491  003108  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8492                           
  8493                           ; BSR set to: 0
  8494                           ;main.c: 1123: pos = 0;
  8495  00310A  0101               	movlb	1	; () banked
  8496  00310C  6B02               	clrf	_pos& (0+255),b
  8497  00310E  D024               	goto	l10825
  8498  003110                     l10787:
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1126: else {
  8502                           ;main.c: 1127: bDLE = 1;
  8503  003110  0E01               	movlw	1
  8504  003112  6FED               	movwf	_bDLE& (0+255),b
  8505  003114  D0A9               	goto	l659
  8506  003116                     l10791:
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;main.c: 1131: else if ( 1 == stateVscpDriver ) {
  8510  003116  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8511  003118  E11F               	bnz	l10825
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;main.c: 1132: if (bDLE) {
  8515  00311A  51ED               	movf	_bDLE& (0+255),w,b
  8516  00311C  E00F               	bz	l10809
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;main.c: 1134: bDLE = 0;
  8520  00311E  6BED               	clrf	_bDLE& (0+255),b
  8521                           
  8522                           ; BSR set to: 0
  8523                           ;main.c: 1137: if (0x03 == c) {
  8524  003120  51B7               	movf	doModeVscp@c& (0+255),w,b
  8525  003122  0A03               	xorlw	3
  8526  003124  E103               	bnz	l10801
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;main.c: 1138: stateVscpDriver = 2;
  8530  003126  0E02               	movlw	2
  8531  003128  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8532                           
  8533                           ;main.c: 1139: }
  8534  00312A  D016               	goto	l10825
  8535  00312C                     l10801:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;main.c: 1140: else if (0x10 == c) {
  8539  00312C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8540  00312E  0A10               	xorlw	16
  8541  003130  E113               	bnz	l10825
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;main.c: 1142: cmdbuf[ pos++ ] = c;
  8545  003132  D89B               	call	PL18	;call to abstracted procedure
  8546  003134  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8547                           
  8548                           ; BSR set to: 0
  8549  003138  2B02               	incf	_pos& (0+255),f,b
  8550  00313A  D096               	goto	l659
  8551  00313C                     l10809:
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;main.c: 1146: else {
  8555                           ;main.c: 1147: if (0x10 == c) {
  8556  00313C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8557  00313E  0A10               	xorlw	16
  8558  003140  E0E7               	bz	l10787
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;main.c: 1151: else {
  8562                           ;main.c: 1153: cmdbuf[ pos++ ] = c;
  8563  003142  D893               	call	PL18	;call to abstracted procedure
  8564  003144  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8565                           
  8566                           ; BSR set to: 0
  8567  003148  2B02               	incf	_pos& (0+255),f,b
  8568                           
  8569                           ; BSR set to: 1
  8570                           ;main.c: 1155: if (pos >= 128u) {
  8571  00314A  0E7F               	movlw	127
  8572  00314C  6502               	cpfsgt	_pos& (0+255),b
  8573  00314E  D08C               	goto	l659
  8574                           
  8575                           ; BSR set to: 1
  8576                           ;main.c: 1158: pos = 0;
  8577  003150  6B02               	clrf	_pos& (0+255),b
  8578                           
  8579                           ;main.c: 1159: stateVscpDriver = 0;
  8580  003152  0100               	movlb	0	; () banked
  8581  003154  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8582  003156  D088               	goto	l659
  8583  003158                     l10825:
  8584                           
  8585                           ;main.c: 1163: }
  8586                           ;main.c: 1164: }
  8587                           ;main.c: 1165: }
  8588                           ;main.c: 1170: if (2 == stateVscpDriver) {
  8589  003158  0100               	movlb	0	; () banked
  8590  00315A  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8591  00315C  0A02               	xorlw	2
  8592  00315E  E001 D082          	bnz	l10915
  8593                           
  8594                           ; BSR set to: 0
  8595                           ;main.c: 1173: stateVscpDriver = 0;
  8596  003162  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8597                           
  8598                           ; BSR set to: 0
  8599                           ;main.c: 1186: if (calcCRC(cmdbuf, pos)) {
  8600  003164  0E01               	movlw	high _cmdbuf
  8601  003166  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8602  003168  0E04               	movlw	low _cmdbuf
  8603  00316A  6F6C               	movwf	?_calcCRC& (0+255),b
  8604  00316C  C102  F06E         	movff	_pos,?_calcCRC+2
  8605  003170  ECB2  F02D         	call	_calcCRC	;wreg free
  8606  003174  0900               	iorlw	0
  8607  003176  E003               	bz	l10833
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;main.c: 1187: sendVSCPDriverErrorFrame(1);
  8611  003178  0E01               	movlw	1
  8612  00317A  EC45  F024         	call	_sendVSCPDriverErrorFrame
  8613  00317E                     l10833:
  8614                           
  8615                           ;main.c: 1188: }
  8616                           ;main.c: 1191: if (0 ==
  8617                           ;main.c: 1192: cmdbuf[ 0 ]) {
  8618  00317E  0101               	movlb	1	; () banked
  8619  003180  6704               	tstfsz	_cmdbuf& (0+255),b
  8620  003182  D003               	goto	l10837
  8621  003184                     l10835:
  8622                           
  8623                           ;main.c: 1193: sendVSCPDriverAck();
  8624  003184  EC06  F026         	call	_sendVSCPDriverAck	;wreg free
  8625                           
  8626                           ;main.c: 1194: }
  8627  003188  D06A               	goto	l10911
  8628  00318A                     l10837:
  8629                           
  8630                           ; BSR set to: 1
  8631                           ;main.c: 1196: else if (1 ==
  8632                           ;main.c: 1197: cmdbuf[ 0 ]) {
  8633  00318A  0504               	decf	_cmdbuf& (0+255),w,b
  8634  00318C  E068               	bz	l10911
  8635                           
  8636                           ; BSR set to: 1
  8637                           ;main.c: 1201: else if (2 ==
  8638                           ;main.c: 1202: cmdbuf[ 0 ]) {
  8639  00318E  5104               	movf	_cmdbuf& (0+255),w,b
  8640  003190  0A02               	xorlw	2
  8641  003192  E107               	bnz	l10849
  8642                           
  8643                           ; BSR set to: 1
  8644                           ;main.c: 1203: if ( receiveVSCPModeCanalMsg() ) {
  8645  003194  EC38  F022         	call	_receiveVSCPModeCanalMsg	;wreg free
  8646  003198  0900               	iorlw	0
  8647  00319A  E1F4               	bnz	l10835
  8648  00319C                     l10847:
  8649                           
  8650                           ;main.c: 1206: else {
  8651                           ;main.c: 1207: sendVSCPDriverNack();
  8652  00319C  ECB6  F025         	call	_sendVSCPDriverNack	;wreg free
  8653  0031A0  D05E               	goto	l10911
  8654  0031A2                     l10849:
  8655                           
  8656                           ; BSR set to: 1
  8657                           ;main.c: 1211: else if (6 ==
  8658                           ;main.c: 1212: cmdbuf[ 0 ]) {
  8659  0031A2  5104               	movf	_cmdbuf& (0+255),w,b
  8660  0031A4  0A06               	xorlw	6
  8661  0031A6  E103               	bnz	l10857
  8662                           
  8663                           ; BSR set to: 1
  8664                           ;main.c: 1213: if (receiveVSCPModeMultiCanalMsg()) {
  8665  0031A8  EC53  F02E         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8666  0031AC  D7F5               	goto	L6
  8667  0031AE                     l10857:
  8668                           
  8669                           ; BSR set to: 1
  8670                           ;main.c: 1221: else if (6 ==
  8671                           ;main.c: 1222: cmdbuf[ 0 ]) {
  8672  0031AE  5104               	movf	_cmdbuf& (0+255),w,b
  8673  0031B0  0A06               	xorlw	6
  8674  0031B2  E0F4               	bz	l10847
  8675                           
  8676                           ; BSR set to: 1
  8677                           ;main.c: 1226: else if (3 ==
  8678                           ;main.c: 1227: cmdbuf[ 0 ]) {
  8679  0031B4  5104               	movf	_cmdbuf& (0+255),w,b
  8680  0031B6  0A03               	xorlw	3
  8681  0031B8  E0F1               	bz	l10847
  8682                           
  8683                           ; BSR set to: 1
  8684                           ;main.c: 1231: else if (4 ==
  8685                           ;main.c: 1232: cmdbuf[ 0 ]) {
  8686  0031BA  5104               	movf	_cmdbuf& (0+255),w,b
  8687  0031BC  0A04               	xorlw	4
  8688  0031BE  E0EE               	bz	l10847
  8689                           
  8690                           ; BSR set to: 1
  8691                           ;main.c: 1236: else if (8 ==
  8692                           ;main.c: 1237: cmdbuf[ 0 ]) {
  8693  0031C0  5104               	movf	_cmdbuf& (0+255),w,b
  8694  0031C2  0A08               	xorlw	8
  8695  0031C4  E107               	bnz	l10875
  8696                           
  8697                           ; BSR set to: 1
  8698                           ;main.c: 1238: caps.maxVscpFrames = cmdbuf[ 5 ];
  8699  0031C6  C109  F0F5         	movff	_cmdbuf+5,_caps
  8700                           
  8701                           ;main.c: 1239: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8702  0031CA  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8703                           
  8704                           ; BSR set to: 1
  8705                           ;main.c: 1240: sendVSCPModeCapabilities();
  8706  0031CE  EC00  F025         	call	_sendVSCPModeCapabilities	;wreg free
  8707                           
  8708                           ;main.c: 1241: }
  8709  0031D2  D045               	goto	l10911
  8710  0031D4                     l10875:
  8711                           
  8712                           ; BSR set to: 1
  8713                           ;main.c: 1243: else if (255 ==
  8714                           ;main.c: 1244: cmdbuf[ 0 ]) {
  8715  0031D4  2904               	incf	_cmdbuf& (0+255),w,b
  8716  0031D6  E140               	bnz	l10909
  8717                           
  8718                           ; BSR set to: 1
  8719                           ;main.c: 1246: if (cmdbuf[ 5 ] ==
  8720                           ;main.c: 1247: 0) {
  8721  0031D8  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8722  0031DA  D006               	goto	l10881
  8723                           
  8724                           ; BSR set to: 1
  8725                           ;main.c: 1248: sendVSCPDriverCommandReply(0, 0);
  8726  0031DC  0E00               	movlw	0
  8727  0031DE  0100               	movlb	0	; () banked
  8728  0031E0  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8729  0031E2  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8730                           
  8731                           ;main.c: 1249: }
  8732  0031E6  D03B               	goto	l10911
  8733  0031E8                     l10881:
  8734                           
  8735                           ; BSR set to: 1
  8736                           ;main.c: 1251: else if (cmdbuf[ 5 ] ==
  8737                           ;main.c: 1252: 1) {
  8738  0031E8  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8739  0031EA  E109               	bnz	l10887
  8740                           
  8741                           ; BSR set to: 1
  8742                           ;main.c: 1253: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8743  0031EC  0E00               	movlw	0
  8744  0031EE  EC0E  F02E         	call	_ECANSetOperationMode
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;main.c: 1254: sendVSCPDriverCommandReply(0, 1);
  8748  0031F2  0E01               	movlw	1
  8749  0031F4  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8750  0031F6  0E00               	movlw	0
  8751  0031F8  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8752                           
  8753                           ;main.c: 1255: }
  8754  0031FC  D030               	goto	l10911
  8755  0031FE                     l10887:
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;main.c: 1257: else if (cmdbuf[ 5 ] ==
  8759                           ;main.c: 1258: 2) {
  8760  0031FE  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8761  003200  0A02               	xorlw	2
  8762  003202  E109               	bnz	l10893
  8763                           
  8764                           ; BSR set to: 1
  8765                           ;main.c: 1259: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8766  003204  0E40               	movlw	64
  8767  003206  EC0E  F02E         	call	_ECANSetOperationMode
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 1260: sendVSCPDriverCommandReply(0, 2);
  8771  00320A  0E02               	movlw	2
  8772  00320C  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8773  00320E  0E00               	movlw	0
  8774  003210  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8775                           
  8776                           ;main.c: 1261: }
  8777  003214  D024               	goto	l10911
  8778  003216                     l10893:
  8779                           
  8780                           ; BSR set to: 1
  8781                           ;main.c: 1263: else if (cmdbuf[ 5 ] ==
  8782                           ;main.c: 1264: 3) {
  8783  003216  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8784  003218  0A03               	xorlw	3
  8785  00321A  E109               	bnz	l10899
  8786                           
  8787                           ; BSR set to: 1
  8788                           ;main.c: 1265: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8789  00321C  0E60               	movlw	96
  8790  00321E  EC0E  F02E         	call	_ECANSetOperationMode
  8791                           
  8792                           ; BSR set to: 0
  8793                           ;main.c: 1266: sendVSCPDriverCommandReply(0, 3);
  8794  003222  0E03               	movlw	3
  8795  003224  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8796  003226  0E00               	movlw	0
  8797  003228  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8798                           
  8799                           ;main.c: 1267: }
  8800  00322C  D018               	goto	l10911
  8801  00322E                     l10899:
  8802                           
  8803                           ; BSR set to: 1
  8804                           ;main.c: 1269: else if (cmdbuf[ 5 ] ==
  8805                           ;main.c: 1270: 4) {
  8806  00322E  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8807  003230  0A04               	xorlw	4
  8808  003232  E109               	bnz	l10905
  8809                           
  8810                           ; BSR set to: 1
  8811                           ;main.c: 1271: ECANSetOperationMode(0x20);
  8812  003234  0E20               	movlw	32
  8813  003236  EC0E  F02E         	call	_ECANSetOperationMode
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;main.c: 1272: sendVSCPDriverCommandReply(0, 4);
  8817  00323A  0E04               	movlw	4
  8818  00323C  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8819  00323E  0E00               	movlw	0
  8820  003240  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8821                           
  8822                           ;main.c: 1273: }
  8823  003244  D00C               	goto	l10911
  8824  003246                     l10905:
  8825                           
  8826                           ; BSR set to: 1
  8827                           ;main.c: 1275: else if (cmdbuf[ 5 ] ==
  8828                           ;main.c: 1276: 5) {
  8829  003246  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8830  003248  0A05               	xorlw	5
  8831  00324A  E109               	bnz	l10911
  8832                           
  8833                           ; BSR set to: 1
  8834                           ;main.c: 1277: sendVSCPDriverCommandReply(0, 0);
  8835  00324C  0E00               	movlw	0
  8836  00324E  0100               	movlb	0	; () banked
  8837  003250  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8838  003252  ECA6  F022         	call	_sendVSCPDriverCommandReply
  8839  003256  D003               	goto	l10911
  8840  003258                     l10909:
  8841                           
  8842                           ; BSR set to: 1
  8843                           ;main.c: 1281: else {
  8844                           ;main.c: 1283: sendVSCPDriverErrorFrame(2);
  8845  003258  0E02               	movlw	2
  8846  00325A  EC45  F024         	call	_sendVSCPDriverErrorFrame
  8847  00325E                     l10911:
  8848                           
  8849                           ;main.c: 1284: }
  8850                           ;main.c: 1287: pos = 0;
  8851  00325E  0101               	movlb	1	; () banked
  8852  003260  6B02               	clrf	_pos& (0+255),b
  8853                           
  8854                           ; BSR set to: 1
  8855                           ;main.c: 1288: stateVscpDriver = 0;
  8856  003262  0100               	movlb	0	; () banked
  8857  003264  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8858  003266                     l10915:
  8859                           
  8860                           ; BSR set to: 0
  8861                           ;main.c: 1290: }
  8862                           ;main.c: 1292: }
  8863                           ;main.c: 1295: (INTCONbits.GIE = 1);
  8864  003266  8EF2               	bsf	intcon,7,c	;volatile
  8865  003268                     l659:
  8866  003268  0012               	return	
  8867  00326A                     __end_of_doModeVscp:
  8868                           	opt stack 0
  8869  00326A                     PL18:
  8870                           	opt stack 20
  8871  00326A  0101               	movlb	1	; () banked
  8872  00326C  0E04               	movlw	low _cmdbuf
  8873  00326E  2502               	addwf	_pos& (0+255),w,b
  8874  003270  6ED9               	movwf	fsr2l,c
  8875  003272  6ADA               	clrf	fsr2h,c
  8876  003274  0E01               	movlw	high _cmdbuf
  8877  003276  22DA               	addwfc	fsr2h,f,c
  8878  003278  0012               	return	
  8879  00327A                     __end_ofPL18:
  8880                           	opt stack 0
  8881                           tblptru	equ	0xFF8
  8882                           tblptrh	equ	0xFF7
  8883                           tblptrl	equ	0xFF6
  8884                           tablat	equ	0xFF5
  8885                           prodh	equ	0xFF4
  8886                           prodl	equ	0xFF3
  8887                           intcon	equ	0xFF2
  8888                           indf0	equ	0xFEF
  8889                           postinc0	equ	0xFEE
  8890                           fsr0h	equ	0xFEA
  8891                           fsr0l	equ	0xFE9
  8892                           wreg	equ	0xFE8
  8893                           indf1	equ	0xFE7
  8894                           postinc1	equ	0xFE6
  8895                           postdec1	equ	0xFE5
  8896                           fsr1h	equ	0xFE2
  8897                           fsr1l	equ	0xFE1
  8898                           indf2	equ	0xFDF
  8899                           postinc2	equ	0xFDE
  8900                           postdec2	equ	0xFDD
  8901                           plusw2	equ	0xFDB
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function _sendVSCPDriverCommandReply *****************
  8907 ;; Defined at:
  8908 ;;		line 1693 in file "main.c"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;  cmdReplyCode    1    wreg     unsigned char 
  8911 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8912 ;; Auto vars:     Size  Location     Type
  8913 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8914 ;;  crc             1   17[BANK0 ] unsigned char 
  8915 ;; Return value:  Size  Location     Type
  8916 ;;		None               void
  8917 ;; Registers used:
  8918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8919 ;; Tracked objects:
  8920 ;;		On entry : F/0
  8921 ;;		On exit  : 0/0
  8922 ;;		Unchanged: 0/0
  8923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8924 ;;      Params:         0       1       0       0       0       0       0
  8925 ;;      Locals:         0       2       0       0       0       0       0
  8926 ;;      Temps:          0       0       0       0       0       0       0
  8927 ;;      Totals:         0       3       0       0       0       0       0
  8928 ;;Total ram usage:        3 bytes
  8929 ;; Hardware stack levels used:    1
  8930 ;; Hardware stack levels required when called:    6
  8931 ;; This function calls:
  8932 ;;		_WriteUSART
  8933 ;;		_sendEscapedUartData
  8934 ;;		_crc8
  8935 ;; This function is called by:
  8936 ;;		_doModeVscp
  8937 ;; This function uses a non-reentrant model
  8938 ;;
  8939                           
  8940                           	psect	text8
  8941  00454C                     __ptext8:
  8942                           	opt stack 0
  8943  00454C                     _sendVSCPDriverCommandReply:
  8944                           	opt stack 23
  8945                           
  8946                           ;incstack = 0
  8947                           ;incstack = 0
  8948                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8949  00454C  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;main.c: 1694: uint8_t crc = 0;
  8953  004550  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8954  004552                     l857:
  8955                           
  8956                           ; BSR set to: 0
  8957  004552  A2AC               	btfss	4012,1,c	;volatile
  8958  004554  D7FE               	goto	l857
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;main.c: 1698: WriteUSART(0x10);
  8962  004556  0E10               	movlw	16
  8963  004558  EC26  F02E         	call	_WriteUSART
  8964  00455C                     l860:
  8965  00455C  A2AC               	btfss	4012,1,c	;volatile
  8966  00455E  D7FE               	goto	l860
  8967                           
  8968                           ;main.c: 1700: WriteUSART(0x02);
  8969  004560  0E02               	movlw	2
  8970  004562  EC26  F02E         	call	_WriteUSART
  8971  004566                     l863:
  8972  004566  A2AC               	btfss	4012,1,c	;volatile
  8973  004568  D7FE               	goto	l863
  8974                           
  8975                           ;main.c: 1704: WriteUSART(254);
  8976  00456A  0EFE               	movlw	254
  8977  00456C  EC26  F02E         	call	_WriteUSART
  8978                           
  8979                           ;main.c: 1705: crc8(&crc, 254);
  8980  004570  0100               	movlb	0	; () banked
  8981  004572  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8982  004574  6F68               	movwf	(?_crc8+1)& (0+255),b
  8983  004576  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8984  004578  6F67               	movwf	?_crc8& (0+255),b
  8985  00457A  0EFE               	movlw	254
  8986  00457C  6F69               	movwf	(?_crc8+2)& (0+255),b
  8987  00457E  EC4C  F02D         	call	_crc8	;wreg free
  8988  004582                     l866:
  8989                           
  8990                           ; BSR set to: 0
  8991  004582  A2AC               	btfss	4012,1,c	;volatile
  8992  004584  D7FE               	goto	l866
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 1709: WriteUSART(0);
  8996  004586  0E00               	movlw	0
  8997  004588  EC26  F02E         	call	_WriteUSART
  8998                           
  8999                           ;main.c: 1710: crc8(&crc, 0);
  9000  00458C  D841               	call	PL92	;call to abstracted procedure
  9001  00458E  EC4C  F02D         	call	_crc8	;wreg free
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;main.c: 1713: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9005  004592  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9006  004594  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9007  004596  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9008  004598  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9009  00459A  0101               	movlb	1	; () banked
  9010  00459C  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9011  00459E  ECC5  F02A         	call	_sendEscapedUartData
  9012  0045A2                     l869:
  9013                           
  9014                           ; BSR set to: 0
  9015  0045A2  A2AC               	btfss	4012,1,c	;volatile
  9016  0045A4  D7FE               	goto	l869
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;main.c: 1717: WriteUSART(0);
  9020  0045A6  0E00               	movlw	0
  9021  0045A8  EC26  F02E         	call	_WriteUSART
  9022                           
  9023                           ;main.c: 1718: crc8(&crc, 0);
  9024  0045AC  D831               	call	PL92	;call to abstracted procedure
  9025  0045AE  EC4C  F02D         	call	_crc8	;wreg free
  9026  0045B2                     l872:
  9027                           
  9028                           ; BSR set to: 0
  9029  0045B2  A2AC               	btfss	4012,1,c	;volatile
  9030  0045B4  D7FE               	goto	l872
  9031                           
  9032                           ; BSR set to: 0
  9033                           ;main.c: 1720: WriteUSART(2);
  9034  0045B6  0E02               	movlw	2
  9035  0045B8  EC26  F02E         	call	_WriteUSART
  9036                           
  9037                           ;main.c: 1721: crc8(&crc, 2);
  9038  0045BC  0100               	movlb	0	; () banked
  9039  0045BE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9040  0045C0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9041  0045C2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9042  0045C4  6F67               	movwf	?_crc8& (0+255),b
  9043  0045C6  0E02               	movlw	2
  9044  0045C8  6F69               	movwf	(?_crc8+2)& (0+255),b
  9045  0045CA  EC4C  F02D         	call	_crc8	;wreg free
  9046  0045CE                     l875:
  9047                           
  9048                           ; BSR set to: 0
  9049  0045CE  A2AC               	btfss	4012,1,c	;volatile
  9050  0045D0  D7FE               	goto	l875
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;main.c: 1725: sendEscapedUartData(cmdReplyCode, &crc);
  9054  0045D2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9055  0045D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9056  0045D6  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9057  0045D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9058  0045DA  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9059  0045DC  ECC5  F02A         	call	_sendEscapedUartData
  9060  0045E0                     l878:
  9061                           
  9062                           ; BSR set to: 0
  9063  0045E0  A2AC               	btfss	4012,1,c	;volatile
  9064  0045E2  D7FE               	goto	l878
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;main.c: 1729: sendEscapedUartData(cmdCode, &crc);
  9068  0045E4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9069  0045E6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9070  0045E8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9071  0045EA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9072  0045EC  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9073  0045EE  ECC5  F02A         	call	_sendEscapedUartData
  9074                           
  9075                           ;main.c: 1732: sendEscapedUartData(crc, (0));
  9076  0045F2  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9077  0045F4  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9078  0045F6  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9079  0045F8  ECC5  F02A         	call	_sendEscapedUartData
  9080  0045FC                     l881:
  9081                           
  9082                           ; BSR set to: 0
  9083  0045FC  A2AC               	btfss	4012,1,c	;volatile
  9084  0045FE  D7FE               	goto	l881
  9085                           
  9086                           ; BSR set to: 0
  9087                           ;main.c: 1736: WriteUSART(0x10);
  9088  004600  0E10               	movlw	16
  9089  004602  EC26  F02E         	call	_WriteUSART
  9090  004606                     l884:
  9091  004606  A2AC               	btfss	4012,1,c	;volatile
  9092  004608  D7FE               	goto	l884
  9093                           
  9094                           ;main.c: 1738: WriteUSART(0x03);
  9095  00460A  0E03               	movlw	3
  9096  00460C  EF26  F02E         	goto	_WriteUSART
  9097  004610                     __end_of_sendVSCPDriverCommandReply:
  9098                           	opt stack 0
  9099  004610                     PL92:
  9100                           	opt stack 23
  9101  004610  0100               	movlb	0	; () banked
  9102  004612  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9103  004614  6F68               	movwf	(?_crc8+1)& (0+255),b
  9104  004616  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9105  004618  6F67               	movwf	?_crc8& (0+255),b
  9106  00461A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9107  00461C  0C00               	retlw	0
  9108  00461E                     __end_ofPL92:
  9109                           	opt stack 0
  9110                           tblptru	equ	0xFF8
  9111                           tblptrh	equ	0xFF7
  9112                           tblptrl	equ	0xFF6
  9113                           tablat	equ	0xFF5
  9114                           prodh	equ	0xFF4
  9115                           prodl	equ	0xFF3
  9116                           intcon	equ	0xFF2
  9117                           indf0	equ	0xFEF
  9118                           postinc0	equ	0xFEE
  9119                           fsr0h	equ	0xFEA
  9120                           fsr0l	equ	0xFE9
  9121                           wreg	equ	0xFE8
  9122                           indf1	equ	0xFE7
  9123                           postinc1	equ	0xFE6
  9124                           postdec1	equ	0xFE5
  9125                           fsr1h	equ	0xFE2
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           plusw2	equ	0xFDB
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           
  9135 ;; *************** function _sendVSCPModeCapabilities *****************
  9136 ;; Defined at:
  9137 ;;		line 2062 in file "main.c"
  9138 ;; Parameters:    Size  Location     Type
  9139 ;;		None
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  crc             1   15[BANK0 ] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;                  1    wreg      enum E15660
  9144 ;; Registers used:
  9145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : F/1
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9151 ;;      Params:         0       0       0       0       0       0       0
  9152 ;;      Locals:         0       1       0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0
  9154 ;;      Totals:         0       1       0       0       0       0       0
  9155 ;;Total ram usage:        1 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    6
  9158 ;; This function calls:
  9159 ;;		_WriteUSART
  9160 ;;		_sendEscapedUartData
  9161 ;;		_crc8
  9162 ;; This function is called by:
  9163 ;;		_doModeVscp
  9164 ;; This function uses a non-reentrant model
  9165 ;;
  9166                           
  9167                           	psect	text9
  9168  004A00                     __ptext9:
  9169                           	opt stack 0
  9170  004A00                     _sendVSCPModeCapabilities:
  9171                           	opt stack 23
  9172                           
  9173                           ; BSR set to: 1
  9174                           ;main.c: 2063: uint8_t crc = 0;
  9175                           
  9176                           ;incstack = 0
  9177                           ;incstack = 0
  9178  004A00  0100               	movlb	0	; () banked
  9179  004A02  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9180  004A04                     l1006:
  9181  004A04  A2AC               	btfss	4012,1,c	;volatile
  9182  004A06  D7FE               	goto	l1006
  9183                           
  9184                           ;main.c: 2067: WriteUSART(0x10);
  9185  004A08  0E10               	movlw	16
  9186  004A0A  EC26  F02E         	call	_WriteUSART
  9187  004A0E                     l1009:
  9188  004A0E  A2AC               	btfss	4012,1,c	;volatile
  9189  004A10  D7FE               	goto	l1009
  9190                           
  9191                           ;main.c: 2069: WriteUSART(0x02);
  9192  004A12  0E02               	movlw	2
  9193  004A14  EC26  F02E         	call	_WriteUSART
  9194  004A18                     l1012:
  9195  004A18  A2AC               	btfss	4012,1,c	;volatile
  9196  004A1A  D7FE               	goto	l1012
  9197                           
  9198                           ;main.c: 2073: WriteUSART(9);
  9199  004A1C  0E09               	movlw	9
  9200  004A1E  EC26  F02E         	call	_WriteUSART
  9201                           
  9202                           ;main.c: 2074: crc8(&crc, 9);
  9203  004A22  0100               	movlb	0	; () banked
  9204  004A24  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9205  004A26  6F68               	movwf	(?_crc8+1)& (0+255),b
  9206  004A28  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9207  004A2A  6F67               	movwf	?_crc8& (0+255),b
  9208  004A2C  0E09               	movlw	9
  9209  004A2E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9210  004A30  EC4C  F02D         	call	_crc8	;wreg free
  9211  004A34                     l1015:
  9212  004A34  A2AC               	btfss	4012,1,c	;volatile
  9213  004A36  D7FE               	goto	l1015
  9214                           
  9215                           ;main.c: 2078: WriteUSART(0);
  9216  004A38  0E00               	movlw	0
  9217  004A3A  EC26  F02E         	call	_WriteUSART
  9218                           
  9219                           ;main.c: 2079: crc8(&crc, 0);
  9220  004A3E  0100               	movlb	0	; () banked
  9221  004A40  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9222  004A42  6F68               	movwf	(?_crc8+1)& (0+255),b
  9223  004A44  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9224  004A46  6F67               	movwf	?_crc8& (0+255),b
  9225  004A48  0E00               	movlw	0
  9226  004A4A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9227  004A4C  EC4C  F02D         	call	_crc8	;wreg free
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;main.c: 2082: sendEscapedUartData(sequencyno, &crc );
  9231  004A50  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9232  004A52  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9233  004A54  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9234  004A56  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9235  004A58  51F3               	movf	_sequencyno& (0+255),w,b
  9236  004A5A  ECC5  F02A         	call	_sendEscapedUartData
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;main.c: 2083: sequencyno++;
  9240  004A5E  2BF3               	incf	_sequencyno& (0+255),f,b
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;main.c: 2086: sendEscapedUartData( 0, &crc );
  9244  004A60  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9245  004A62  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9246  004A64  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9247  004A66  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9248  004A68  0E00               	movlw	0
  9249  004A6A  ECC5  F02A         	call	_sendEscapedUartData
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;main.c: 2087: sendEscapedUartData( 2, &crc );
  9253  004A6E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9254  004A70  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9255  004A72  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9256  004A74  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9257  004A76  0E02               	movlw	2
  9258  004A78  ECC5  F02A         	call	_sendEscapedUartData
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;main.c: 2090: sendEscapedUartData( 1, &crc );
  9262  004A7C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9263  004A7E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9264  004A80  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9265  004A82  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9266  004A84  0E01               	movlw	1
  9267  004A86  ECC5  F02A         	call	_sendEscapedUartData
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;main.c: 2091: sendEscapedUartData( 0, &crc );
  9271  004A8A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9272  004A8C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9273  004A8E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9274  004A90  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9275  004A92  0E00               	movlw	0
  9276  004A94  ECC5  F02A         	call	_sendEscapedUartData
  9277                           
  9278                           ; BSR set to: 0
  9279                           ;main.c: 2094: sendEscapedUartData(crc, (0));
  9280  004A98  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9281  004A9A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9282  004A9C  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9283  004A9E  ECC5  F02A         	call	_sendEscapedUartData
  9284  004AA2                     l1018:
  9285  004AA2  A2AC               	btfss	4012,1,c	;volatile
  9286  004AA4  D7FE               	goto	l1018
  9287                           
  9288                           ;main.c: 2098: WriteUSART(0x10);
  9289  004AA6  0E10               	movlw	16
  9290  004AA8  EC26  F02E         	call	_WriteUSART
  9291  004AAC                     l1021:
  9292  004AAC  A2AC               	btfss	4012,1,c	;volatile
  9293  004AAE  D7FE               	goto	l1021
  9294                           
  9295                           ;main.c: 2100: WriteUSART(0x03);
  9296  004AB0  0E03               	movlw	3
  9297  004AB2  EF26  F02E         	goto	_WriteUSART
  9298  004AB6                     __end_of_sendVSCPModeCapabilities:
  9299                           	opt stack 0
  9300                           tblptru	equ	0xFF8
  9301                           tblptrh	equ	0xFF7
  9302                           tblptrl	equ	0xFF6
  9303                           tablat	equ	0xFF5
  9304                           prodh	equ	0xFF4
  9305                           prodl	equ	0xFF3
  9306                           intcon	equ	0xFF2
  9307                           indf0	equ	0xFEF
  9308                           postinc0	equ	0xFEE
  9309                           fsr0h	equ	0xFEA
  9310                           fsr0l	equ	0xFE9
  9311                           wreg	equ	0xFE8
  9312                           indf1	equ	0xFE7
  9313                           postinc1	equ	0xFE6
  9314                           postdec1	equ	0xFE5
  9315                           fsr1h	equ	0xFE2
  9316                           fsr1l	equ	0xFE1
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           plusw2	equ	0xFDB
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9326 ;; Defined at:
  9327 ;;		line 2193 in file "main.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;		None
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;		None
  9332 ;; Return value:  Size  Location     Type
  9333 ;;                  1    wreg      enum E15660
  9334 ;; Registers used:
  9335 ;;		wreg
  9336 ;; Tracked objects:
  9337 ;;		On entry : F/1
  9338 ;;		On exit  : F/1
  9339 ;;		Unchanged: F/0
  9340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9341 ;;      Params:         0       0       0       0       0       0       0
  9342 ;;      Locals:         0       0       0       0       0       0       0
  9343 ;;      Temps:          0       0       0       0       0       0       0
  9344 ;;      Totals:         0       0       0       0       0       0       0
  9345 ;;Total ram usage:        0 bytes
  9346 ;; Hardware stack levels used:    1
  9347 ;; Hardware stack levels required when called:    3
  9348 ;; This function calls:
  9349 ;;		Nothing
  9350 ;; This function is called by:
  9351 ;;		_doModeVscp
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text10
  9356  005CA6                     __ptext10:
  9357                           	opt stack 0
  9358  005CA6                     _receiveVSCPModeMultiCanalMsg:
  9359                           	opt stack 26
  9360                           
  9361                           ; BSR set to: 1
  9362                           
  9363                           ; BSR set to: 1
  9364                           ;main.c: 2195: return 0;
  9365                           
  9366                           ;incstack = 0
  9367                           ;incstack = 0
  9368  005CA6  0C00               	retlw	0
  9369  005CA8                     __end_of_receiveVSCPModeMultiCanalMsg:
  9370                           	opt stack 0
  9371                           tblptru	equ	0xFF8
  9372                           tblptrh	equ	0xFF7
  9373                           tblptrl	equ	0xFF6
  9374                           tablat	equ	0xFF5
  9375                           prodh	equ	0xFF4
  9376                           prodl	equ	0xFF3
  9377                           intcon	equ	0xFF2
  9378                           indf0	equ	0xFEF
  9379                           postinc0	equ	0xFEE
  9380                           fsr0h	equ	0xFEA
  9381                           fsr0l	equ	0xFE9
  9382                           wreg	equ	0xFE8
  9383                           indf1	equ	0xFE7
  9384                           postinc1	equ	0xFE6
  9385                           postdec1	equ	0xFE5
  9386                           fsr1h	equ	0xFE2
  9387                           fsr1l	equ	0xFE1
  9388                           indf2	equ	0xFDF
  9389                           postinc2	equ	0xFDE
  9390                           postdec2	equ	0xFDD
  9391                           plusw2	equ	0xFDB
  9392                           fsr2h	equ	0xFDA
  9393                           fsr2l	equ	0xFD9
  9394                           status	equ	0xFD8
  9395                           
  9396 ;; *************** function _sendVSCPDriverNack *****************
  9397 ;; Defined at:
  9398 ;;		line 1648 in file "main.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;  crc             1   15[BANK0 ] unsigned char 
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : E/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9412 ;;      Params:         0       0       0       0       0       0       0
  9413 ;;      Locals:         0       1       0       0       0       0       0
  9414 ;;      Temps:          0       0       0       0       0       0       0
  9415 ;;      Totals:         0       1       0       0       0       0       0
  9416 ;;Total ram usage:        1 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    6
  9419 ;; This function calls:
  9420 ;;		_WriteUSART
  9421 ;;		_sendEscapedUartData
  9422 ;;		_crc8
  9423 ;; This function is called by:
  9424 ;;		_doModeVscp
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text11
  9429  004B6C                     __ptext11:
  9430                           	opt stack 0
  9431  004B6C                     _sendVSCPDriverNack:
  9432                           	opt stack 23
  9433                           
  9434                           ;main.c: 1649: uint8_t crc = 0;
  9435                           
  9436                           ; BSR set to: 1
  9437                           ;incstack = 0
  9438                           ;incstack = 0
  9439  004B6C  0100               	movlb	0	; () banked
  9440  004B6E  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9441  004B70                     l830:
  9442  004B70  A2AC               	btfss	4012,1,c	;volatile
  9443  004B72  D7FE               	goto	l830
  9444                           
  9445                           ;main.c: 1653: WriteUSART(0x10);
  9446  004B74  0E10               	movlw	16
  9447  004B76  EC26  F02E         	call	_WriteUSART
  9448  004B7A                     l833:
  9449  004B7A  A2AC               	btfss	4012,1,c	;volatile
  9450  004B7C  D7FE               	goto	l833
  9451                           
  9452                           ;main.c: 1655: WriteUSART(0x02);
  9453  004B7E  0E02               	movlw	2
  9454  004B80  EC26  F02E         	call	_WriteUSART
  9455  004B84                     l836:
  9456  004B84  A2AC               	btfss	4012,1,c	;volatile
  9457  004B86  D7FE               	goto	l836
  9458                           
  9459                           ;main.c: 1659: WriteUSART(252);
  9460  004B88  0EFC               	movlw	252
  9461  004B8A  EC26  F02E         	call	_WriteUSART
  9462                           
  9463                           ;main.c: 1660: crc8(&crc, 252);
  9464  004B8E  0100               	movlb	0	; () banked
  9465  004B90  0E00               	movlw	high sendVSCPDriverNack@crc
  9466  004B92  6F68               	movwf	(?_crc8+1)& (0+255),b
  9467  004B94  0E6F               	movlw	low sendVSCPDriverNack@crc
  9468  004B96  6F67               	movwf	?_crc8& (0+255),b
  9469  004B98  0EFC               	movlw	252
  9470  004B9A  6F69               	movwf	(?_crc8+2)& (0+255),b
  9471  004B9C  EC4C  F02D         	call	_crc8	;wreg free
  9472  004BA0                     l839:
  9473  004BA0  A2AC               	btfss	4012,1,c	;volatile
  9474  004BA2  D7FE               	goto	l839
  9475                           
  9476                           ;main.c: 1664: WriteUSART(0);
  9477  004BA4  0E00               	movlw	0
  9478  004BA6  EC26  F02E         	call	_WriteUSART
  9479                           
  9480                           ;main.c: 1665: crc8(&crc, 0);
  9481  004BAA  D829               	call	PL48	;call to abstracted procedure
  9482  004BAC  EC4C  F02D         	call	_crc8	;wreg free
  9483                           
  9484                           ; BSR set to: 0
  9485                           ;main.c: 1668: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9486  004BB0  0E00               	movlw	high sendVSCPDriverNack@crc
  9487  004BB2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9488  004BB4  0E6F               	movlw	low sendVSCPDriverNack@crc
  9489  004BB6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9490  004BB8  0101               	movlb	1	; () banked
  9491  004BBA  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9492  004BBC  ECC5  F02A         	call	_sendEscapedUartData
  9493  004BC0                     l842:
  9494  004BC0  A2AC               	btfss	4012,1,c	;volatile
  9495  004BC2  D7FE               	goto	l842
  9496                           
  9497                           ;main.c: 1672: WriteUSART(0);
  9498  004BC4  0E00               	movlw	0
  9499  004BC6  EC26  F02E         	call	_WriteUSART
  9500                           
  9501                           ;main.c: 1673: crc8(&crc, 0);
  9502  004BCA  D819               	call	PL48	;call to abstracted procedure
  9503  004BCC  EC4C  F02D         	call	_crc8	;wreg free
  9504  004BD0                     l845:
  9505  004BD0  A2AC               	btfss	4012,1,c	;volatile
  9506  004BD2  D7FE               	goto	l845
  9507                           
  9508                           ;main.c: 1675: WriteUSART(0);
  9509  004BD4  0E00               	movlw	0
  9510  004BD6  EC26  F02E         	call	_WriteUSART
  9511                           
  9512                           ;main.c: 1676: crc8(&crc, 0);
  9513  004BDA  D811               	call	PL48	;call to abstracted procedure
  9514  004BDC  EC4C  F02D         	call	_crc8	;wreg free
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;main.c: 1679: sendEscapedUartData(crc, (0));
  9518  004BE0  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9519  004BE2  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9520  004BE4  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9521  004BE6  ECC5  F02A         	call	_sendEscapedUartData
  9522  004BEA                     l848:
  9523  004BEA  A2AC               	btfss	4012,1,c	;volatile
  9524  004BEC  D7FE               	goto	l848
  9525                           
  9526                           ;main.c: 1683: WriteUSART(0x10);
  9527  004BEE  0E10               	movlw	16
  9528  004BF0  EC26  F02E         	call	_WriteUSART
  9529  004BF4                     l851:
  9530  004BF4  A2AC               	btfss	4012,1,c	;volatile
  9531  004BF6  D7FE               	goto	l851
  9532                           
  9533                           ;main.c: 1685: WriteUSART(0x03);
  9534  004BF8  0E03               	movlw	3
  9535  004BFA  EF26  F02E         	goto	_WriteUSART
  9536  004BFE                     __end_of_sendVSCPDriverNack:
  9537                           	opt stack 0
  9538  004BFE                     PL48:
  9539                           	opt stack 23
  9540  004BFE  0100               	movlb	0	; () banked
  9541  004C00  0E00               	movlw	high sendVSCPDriverNack@crc
  9542  004C02  6F68               	movwf	(?_crc8+1)& (0+255),b
  9543  004C04  0E6F               	movlw	low sendVSCPDriverNack@crc
  9544  004C06  6F67               	movwf	?_crc8& (0+255),b
  9545  004C08  6B69               	clrf	(?_crc8+2)& (0+255),b
  9546  004C0A  0C00               	retlw	0
  9547  004C0C                     __end_ofPL48:
  9548                           	opt stack 0
  9549                           tblptru	equ	0xFF8
  9550                           tblptrh	equ	0xFF7
  9551                           tblptrl	equ	0xFF6
  9552                           tablat	equ	0xFF5
  9553                           prodh	equ	0xFF4
  9554                           prodl	equ	0xFF3
  9555                           intcon	equ	0xFF2
  9556                           indf0	equ	0xFEF
  9557                           postinc0	equ	0xFEE
  9558                           fsr0h	equ	0xFEA
  9559                           fsr0l	equ	0xFE9
  9560                           wreg	equ	0xFE8
  9561                           indf1	equ	0xFE7
  9562                           postinc1	equ	0xFE6
  9563                           postdec1	equ	0xFE5
  9564                           fsr1h	equ	0xFE2
  9565                           fsr1l	equ	0xFE1
  9566                           indf2	equ	0xFDF
  9567                           postinc2	equ	0xFDE
  9568                           postdec2	equ	0xFDD
  9569                           plusw2	equ	0xFDB
  9570                           fsr2h	equ	0xFDA
  9571                           fsr2l	equ	0xFD9
  9572                           status	equ	0xFD8
  9573                           
  9574 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9575 ;; Defined at:
  9576 ;;		line 2172 in file "main.c"
  9577 ;; Parameters:    Size  Location     Type
  9578 ;;		None
  9579 ;; Auto vars:     Size  Location     Type
  9580 ;;  data            8   74[BANK0 ] unsigned char [8]
  9581 ;;  id              4   82[BANK0 ] unsigned long 
  9582 ;;  dlc             1   86[BANK0 ] unsigned char 
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  1    wreg      enum E15660
  9585 ;; Registers used:
  9586 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9587 ;; Tracked objects:
  9588 ;;		On entry : F/1
  9589 ;;		On exit  : F/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9592 ;;      Params:         0       0       0       0       0       0       0
  9593 ;;      Locals:         0      13       0       0       0       0       0
  9594 ;;      Temps:          0      20       0       0       0       0       0
  9595 ;;      Totals:         0      33       0       0       0       0       0
  9596 ;;Total ram usage:       33 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    6
  9599 ;; This function calls:
  9600 ;;		_memcpy
  9601 ;;		_sendCANFrame
  9602 ;; This function is called by:
  9603 ;;		_doModeVscp
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           	psect	text12
  9608  004470                     __ptext12:
  9609                           	opt stack 0
  9610  004470                     _receiveVSCPModeCanalMsg:
  9611                           	opt stack 23
  9612                           
  9613                           ; BSR set to: 1
  9614                           ;main.c: 2173: uint32_t id;
  9615                           ;main.c: 2174: uint8_t dlc;
  9616                           ;main.c: 2175: uint8_t data[8];
  9617                           ;main.c: 2177: id = ((uint32_t) cmdbuf[5] << 26) |
  9618                           ;main.c: 2178: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9619                           ;main.c: 2179: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9620                           ;main.c: 2180: cmdbuf[5 + 3];
  9621                           
  9622                           ;incstack = 0
  9623                           ;incstack = 0
  9624  004470  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9625  004474  0100               	movlb	0	; () banked
  9626  004476  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9627  004478  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9628  00447A  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9629  00447C  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9630  004480  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9631  004484  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9632  004488  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9633  00448A  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9634  00448E  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9635  004490  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9636  004492  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9637  004494  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9638  004498  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9639  00449C  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9640  00449E  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9641  0044A0  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9642  0044A4  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9643  0044A6  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9644  0044A8  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9645  0044AA  0E1A               	movlw	26
  9646  0044AC                     u16065:
  9647  0044AC  90D8               	bcf	status,0,c
  9648  0044AE  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9649  0044B0  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9650  0044B2  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9651  0044B4  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9652  0044B6  2EE8               	decfsz	wreg,f,c
  9653  0044B8  D7F9               	goto	u16065
  9654  0044BA  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9655  0044BC  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9656  0044BE  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9657  0044C0  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9658  0044C2  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9659  0044C4  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9660  0044C6  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9661  0044C8  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9662  0044CA  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9663  0044CC  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9664  0044CE  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9665  0044D0  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9666  0044D2  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9667  0044D4  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9668  0044D6  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9669  0044D8  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9670  0044DA  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9671  0044DC  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9672  0044DE  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9673  0044E0  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9674  0044E2  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9675  0044E4  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9676  0044E6  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9677  0044E8  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9678  0044EA  0101               	movlb	1	; () banked
  9679  0044EC  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9680  0044EE  0100               	movlb	0	; () banked
  9681  0044F0  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9682  0044F2  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9683  0044F4  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9684  0044F6  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9685  0044F8  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9686  0044FA  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9687  0044FC  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9688  0044FE  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9689                           
  9690                           ;main.c: 2181: dlc = cmdbuf[4] - 4;
  9691  004500  0101               	movlb	1	; () banked
  9692  004502  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9693  004504  0FFC               	addlw	252
  9694  004506  0100               	movlb	0	; () banked
  9695  004508  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;main.c: 2182: memcpy(data, cmdbuf + 5 + 4, dlc);
  9699  00450A  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9700  00450C  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9701  00450E  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9702  004510  6F60               	movwf	?_memcpy& (0+255),b
  9703  004512  0E0D               	movlw	low (_cmdbuf+9)
  9704  004514  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9705  004516  0E01               	movlw	high (_cmdbuf+9)
  9706  004518  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9707  00451A  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9708  00451E  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9709  004522  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9710  004526  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9711  004528  EC56  F02C         	call	_memcpy	;wreg free
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;main.c: 2184: return sendCANFrame(id, dlc, data);
  9715  00452C  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9716  004530  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9717  004534  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9718  004538  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9719  00453C  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9720  004540  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9721  004542  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9722  004544  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9723  004546  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9724  004548  EF14  F02D         	goto	_sendCANFrame	;wreg free
  9725  00454C                     __end_of_receiveVSCPModeCanalMsg:
  9726                           	opt stack 0
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           intcon	equ	0xFF2
  9734                           indf0	equ	0xFEF
  9735                           postinc0	equ	0xFEE
  9736                           fsr0h	equ	0xFEA
  9737                           fsr0l	equ	0xFE9
  9738                           wreg	equ	0xFE8
  9739                           indf1	equ	0xFE7
  9740                           postinc1	equ	0xFE6
  9741                           postdec1	equ	0xFE5
  9742                           fsr1h	equ	0xFE2
  9743                           fsr1l	equ	0xFE1
  9744                           indf2	equ	0xFDF
  9745                           postinc2	equ	0xFDE
  9746                           postdec2	equ	0xFDD
  9747                           plusw2	equ	0xFDB
  9748                           fsr2h	equ	0xFDA
  9749                           fsr2l	equ	0xFD9
  9750                           status	equ	0xFD8
  9751                           
  9752 ;; *************** function _memcpy *****************
  9753 ;; Defined at:
  9754 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;  d1              2    0[BANK0 ] PTR void 
  9757 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9758 ;;  s1              2    2[BANK0 ] PTR const void 
  9759 ;;		 -> vscpData(8), cmdbuf(80), 
  9760 ;;  n               2    4[BANK0 ] unsigned int 
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9763 ;;		 -> vscpData(8), cmdbuf(80), 
  9764 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9765 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9766 ;; Return value:  Size  Location     Type
  9767 ;;                  2    0[BANK0 ] PTR void 
  9768 ;; Registers used:
  9769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9770 ;; Tracked objects:
  9771 ;;		On entry : F/0
  9772 ;;		On exit  : F/0
  9773 ;;		Unchanged: 0/0
  9774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9775 ;;      Params:         0       6       0       0       0       0       0
  9776 ;;      Locals:         0       4       0       0       0       0       0
  9777 ;;      Temps:          0       0       0       0       0       0       0
  9778 ;;      Totals:         0      10       0       0       0       0       0
  9779 ;;Total ram usage:       10 bytes
  9780 ;; Hardware stack levels used:    1
  9781 ;; Hardware stack levels required when called:    3
  9782 ;; This function calls:
  9783 ;;		Nothing
  9784 ;; This function is called by:
  9785 ;;		_doModeSLCAN
  9786 ;;		_receiveVSCPModeCanalMsg
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           	psect	text13
  9791  0058AC                     __ptext13:
  9792                           	opt stack 0
  9793  0058AC                     _memcpy:
  9794                           	opt stack 26
  9795                           
  9796                           ; BSR set to: 0
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;incstack = 0
  9800                           ;incstack = 0
  9801  0058AC  C062  F068         	movff	memcpy@s1,memcpy@s
  9802  0058B0  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9803  0058B4  C060  F066         	movff	memcpy@d1,memcpy@d
  9804  0058B8  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9805  0058BC  D00E               	goto	l12687
  9806  0058BE                     l12681:
  9807                           
  9808                           ; BSR set to: 0
  9809  0058BE  C068  FFD9         	movff	memcpy@s,fsr2l
  9810  0058C2  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9811  0058C6  C066  FFE1         	movff	memcpy@d,fsr1l
  9812  0058CA  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9813  0058CE  CFDF FFE7          	movff	indf2,indf1
  9814                           
  9815                           ; BSR set to: 0
  9816  0058D2  4B68               	infsnz	memcpy@s& (0+255),f,b
  9817  0058D4  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9818                           
  9819                           ; BSR set to: 0
  9820  0058D6  4B66               	infsnz	memcpy@d& (0+255),f,b
  9821  0058D8  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9822  0058DA                     l12687:
  9823                           
  9824                           ; BSR set to: 0
  9825  0058DA  0764               	decf	memcpy@n& (0+255),f,b
  9826  0058DC  A0D8               	btfss	status,0,c
  9827  0058DE  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9828  0058E0  0100               	movlb	0	; () banked
  9829  0058E2  2964               	incf	memcpy@n& (0+255),w,b
  9830  0058E4  B4D8               	btfsc	status,2,c
  9831  0058E6  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9832  0058E8  B4D8               	btfsc	status,2,c
  9833                           
  9834                           ; BSR set to: 0
  9835  0058EA  0012               	return	
  9836  0058EC  D7E8               	goto	l12681
  9837  0058EE                     __end_of_memcpy:
  9838                           	opt stack 0
  9839                           tblptru	equ	0xFF8
  9840                           tblptrh	equ	0xFF7
  9841                           tblptrl	equ	0xFF6
  9842                           tablat	equ	0xFF5
  9843                           prodh	equ	0xFF4
  9844                           prodl	equ	0xFF3
  9845                           intcon	equ	0xFF2
  9846                           indf0	equ	0xFEF
  9847                           postinc0	equ	0xFEE
  9848                           fsr0h	equ	0xFEA
  9849                           fsr0l	equ	0xFE9
  9850                           wreg	equ	0xFE8
  9851                           indf1	equ	0xFE7
  9852                           postinc1	equ	0xFE6
  9853                           postdec1	equ	0xFE5
  9854                           fsr1h	equ	0xFE2
  9855                           fsr1l	equ	0xFE1
  9856                           indf2	equ	0xFDF
  9857                           postinc2	equ	0xFDE
  9858                           postdec2	equ	0xFDD
  9859                           plusw2	equ	0xFDB
  9860                           fsr2h	equ	0xFDA
  9861                           fsr2l	equ	0xFD9
  9862                           status	equ	0xFD8
  9863                           
  9864 ;; *************** function _sendVSCPDriverAck *****************
  9865 ;; Defined at:
  9866 ;;		line 1604 in file "main.c"
  9867 ;; Parameters:    Size  Location     Type
  9868 ;;		None
  9869 ;; Auto vars:     Size  Location     Type
  9870 ;;  crc             1   15[BANK0 ] unsigned char 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;		None               void
  9873 ;; Registers used:
  9874 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9875 ;; Tracked objects:
  9876 ;;		On entry : E/1
  9877 ;;		On exit  : 0/0
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9880 ;;      Params:         0       0       0       0       0       0       0
  9881 ;;      Locals:         0       1       0       0       0       0       0
  9882 ;;      Temps:          0       0       0       0       0       0       0
  9883 ;;      Totals:         0       1       0       0       0       0       0
  9884 ;;Total ram usage:        1 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:    6
  9887 ;; This function calls:
  9888 ;;		_WriteUSART
  9889 ;;		_sendEscapedUartData
  9890 ;;		_crc8
  9891 ;; This function is called by:
  9892 ;;		_doModeVscp
  9893 ;; This function uses a non-reentrant model
  9894 ;;
  9895                           
  9896                           	psect	text14
  9897  004C0C                     __ptext14:
  9898                           	opt stack 0
  9899  004C0C                     _sendVSCPDriverAck:
  9900                           	opt stack 23
  9901                           
  9902                           ;main.c: 1605: uint8_t crc = 0;
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;incstack = 0
  9906                           ;incstack = 0
  9907  004C0C  0100               	movlb	0	; () banked
  9908  004C0E  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9909  004C10                     l803:
  9910  004C10  A2AC               	btfss	4012,1,c	;volatile
  9911  004C12  D7FE               	goto	l803
  9912                           
  9913                           ;main.c: 1609: WriteUSART(0x10);
  9914  004C14  0E10               	movlw	16
  9915  004C16  EC26  F02E         	call	_WriteUSART
  9916  004C1A                     l806:
  9917  004C1A  A2AC               	btfss	4012,1,c	;volatile
  9918  004C1C  D7FE               	goto	l806
  9919                           
  9920                           ;main.c: 1611: WriteUSART(0x02);
  9921  004C1E  0E02               	movlw	2
  9922  004C20  EC26  F02E         	call	_WriteUSART
  9923  004C24                     l809:
  9924  004C24  A2AC               	btfss	4012,1,c	;volatile
  9925  004C26  D7FE               	goto	l809
  9926                           
  9927                           ;main.c: 1615: WriteUSART(251);
  9928  004C28  0EFB               	movlw	251
  9929  004C2A  EC26  F02E         	call	_WriteUSART
  9930                           
  9931                           ;main.c: 1616: crc8(&crc, 251);
  9932  004C2E  0100               	movlb	0	; () banked
  9933  004C30  0E00               	movlw	high sendVSCPDriverAck@crc
  9934  004C32  6F68               	movwf	(?_crc8+1)& (0+255),b
  9935  004C34  0E6F               	movlw	low sendVSCPDriverAck@crc
  9936  004C36  6F67               	movwf	?_crc8& (0+255),b
  9937  004C38  0EFB               	movlw	251
  9938  004C3A  6F69               	movwf	(?_crc8+2)& (0+255),b
  9939  004C3C  EC4C  F02D         	call	_crc8	;wreg free
  9940  004C40                     l812:
  9941  004C40  A2AC               	btfss	4012,1,c	;volatile
  9942  004C42  D7FE               	goto	l812
  9943                           
  9944                           ;main.c: 1620: WriteUSART(0);
  9945  004C44  0E00               	movlw	0
  9946  004C46  EC26  F02E         	call	_WriteUSART
  9947                           
  9948                           ;main.c: 1621: crc8(&crc, 0);
  9949  004C4A  D829               	call	PL50	;call to abstracted procedure
  9950  004C4C  EC4C  F02D         	call	_crc8	;wreg free
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;main.c: 1624: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9954  004C50  0E00               	movlw	high sendVSCPDriverAck@crc
  9955  004C52  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9956  004C54  0E6F               	movlw	low sendVSCPDriverAck@crc
  9957  004C56  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9958  004C58  0101               	movlb	1	; () banked
  9959  004C5A  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9960  004C5C  ECC5  F02A         	call	_sendEscapedUartData
  9961  004C60                     l815:
  9962  004C60  A2AC               	btfss	4012,1,c	;volatile
  9963  004C62  D7FE               	goto	l815
  9964                           
  9965                           ;main.c: 1628: WriteUSART(0);
  9966  004C64  0E00               	movlw	0
  9967  004C66  EC26  F02E         	call	_WriteUSART
  9968                           
  9969                           ;main.c: 1629: crc8(&crc, 0);
  9970  004C6A  D819               	call	PL50	;call to abstracted procedure
  9971  004C6C  EC4C  F02D         	call	_crc8	;wreg free
  9972  004C70                     l818:
  9973  004C70  A2AC               	btfss	4012,1,c	;volatile
  9974  004C72  D7FE               	goto	l818
  9975                           
  9976                           ;main.c: 1631: WriteUSART(0);
  9977  004C74  0E00               	movlw	0
  9978  004C76  EC26  F02E         	call	_WriteUSART
  9979                           
  9980                           ;main.c: 1632: crc8(&crc, 0);
  9981  004C7A  D811               	call	PL50	;call to abstracted procedure
  9982  004C7C  EC4C  F02D         	call	_crc8	;wreg free
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;main.c: 1635: sendEscapedUartData(crc, (0));
  9986  004C80  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9987  004C82  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9988  004C84  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9989  004C86  ECC5  F02A         	call	_sendEscapedUartData
  9990  004C8A                     l821:
  9991  004C8A  A2AC               	btfss	4012,1,c	;volatile
  9992  004C8C  D7FE               	goto	l821
  9993                           
  9994                           ;main.c: 1639: WriteUSART(0x10);
  9995  004C8E  0E10               	movlw	16
  9996  004C90  EC26  F02E         	call	_WriteUSART
  9997  004C94                     l824:
  9998  004C94  A2AC               	btfss	4012,1,c	;volatile
  9999  004C96  D7FE               	goto	l824
 10000                           
 10001                           ;main.c: 1641: WriteUSART(0x03);
 10002  004C98  0E03               	movlw	3
 10003  004C9A  EF26  F02E         	goto	_WriteUSART
 10004  004C9E                     __end_of_sendVSCPDriverAck:
 10005                           	opt stack 0
 10006  004C9E                     PL50:
 10007                           	opt stack 23
 10008  004C9E  0100               	movlb	0	; () banked
 10009  004CA0  0E00               	movlw	high sendVSCPDriverAck@crc
 10010  004CA2  6F68               	movwf	(?_crc8+1)& (0+255),b
 10011  004CA4  0E6F               	movlw	low sendVSCPDriverAck@crc
 10012  004CA6  6F67               	movwf	?_crc8& (0+255),b
 10013  004CA8  6B69               	clrf	(?_crc8+2)& (0+255),b
 10014  004CAA  0C00               	retlw	0
 10015  004CAC                     __end_ofPL50:
 10016                           	opt stack 0
 10017                           tblptru	equ	0xFF8
 10018                           tblptrh	equ	0xFF7
 10019                           tblptrl	equ	0xFF6
 10020                           tablat	equ	0xFF5
 10021                           prodh	equ	0xFF4
 10022                           prodl	equ	0xFF3
 10023                           intcon	equ	0xFF2
 10024                           indf0	equ	0xFEF
 10025                           postinc0	equ	0xFEE
 10026                           fsr0h	equ	0xFEA
 10027                           fsr0l	equ	0xFE9
 10028                           wreg	equ	0xFE8
 10029                           indf1	equ	0xFE7
 10030                           postinc1	equ	0xFE6
 10031                           postdec1	equ	0xFE5
 10032                           fsr1h	equ	0xFE2
 10033                           fsr1l	equ	0xFE1
 10034                           indf2	equ	0xFDF
 10035                           postinc2	equ	0xFDE
 10036                           postdec2	equ	0xFDD
 10037                           plusw2	equ	0xFDB
 10038                           fsr2h	equ	0xFDA
 10039                           fsr2l	equ	0xFD9
 10040                           status	equ	0xFD8
 10041                           
 10042 ;; *************** function _sendVSCPDriverErrorFrame *****************
 10043 ;; Defined at:
 10044 ;;		line 1556 in file "main.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;  errorcode       1    wreg     unsigned char 
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  errorcode       1   15[BANK0 ] unsigned char 
 10049 ;;  crc             1   16[BANK0 ] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : E/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10059 ;;      Params:         0       0       0       0       0       0       0
 10060 ;;      Locals:         0       2       0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0
 10062 ;;      Totals:         0       2       0       0       0       0       0
 10063 ;;Total ram usage:        2 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    6
 10066 ;; This function calls:
 10067 ;;		_WriteUSART
 10068 ;;		_sendEscapedUartData
 10069 ;;		_crc8
 10070 ;; This function is called by:
 10071 ;;		_doModeVscp
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text15
 10076  00488A                     __ptext15:
 10077                           	opt stack 0
 10078  00488A                     _sendVSCPDriverErrorFrame:
 10079                           	opt stack 23
 10080                           
 10081                           ;incstack = 0
 10082                           ;incstack = 0
 10083                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10084  00488A  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10085                           
 10086                           ;main.c: 1557: uint8_t crc = 0;
 10087  00488E  0100               	movlb	0	; () banked
 10088  004890  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10089  004892                     l776:
 10090  004892  A2AC               	btfss	4012,1,c	;volatile
 10091  004894  D7FE               	goto	l776
 10092                           
 10093                           ;main.c: 1561: WriteUSART(0x10);
 10094  004896  0E10               	movlw	16
 10095  004898  EC26  F02E         	call	_WriteUSART
 10096  00489C                     l779:
 10097  00489C  A2AC               	btfss	4012,1,c	;volatile
 10098  00489E  D7FE               	goto	l779
 10099                           
 10100                           ;main.c: 1563: WriteUSART(0x02);
 10101  0048A0  0E02               	movlw	2
 10102  0048A2  EC26  F02E         	call	_WriteUSART
 10103  0048A6                     l782:
 10104  0048A6  A2AC               	btfss	4012,1,c	;volatile
 10105  0048A8  D7FE               	goto	l782
 10106                           
 10107                           ;main.c: 1567: WriteUSART(253);
 10108  0048AA  0EFD               	movlw	253
 10109  0048AC  EC26  F02E         	call	_WriteUSART
 10110                           
 10111                           ;main.c: 1568: crc8(&crc, 253);
 10112  0048B0  0100               	movlb	0	; () banked
 10113  0048B2  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10114  0048B4  6F68               	movwf	(?_crc8+1)& (0+255),b
 10115  0048B6  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10116  0048B8  6F67               	movwf	?_crc8& (0+255),b
 10117  0048BA  0EFD               	movlw	253
 10118  0048BC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10119  0048BE  EC4C  F02D         	call	_crc8	;wreg free
 10120  0048C2                     l785:
 10121  0048C2  A2AC               	btfss	4012,1,c	;volatile
 10122  0048C4  D7FE               	goto	l785
 10123                           
 10124                           ;main.c: 1572: WriteUSART(0);
 10125  0048C6  0E00               	movlw	0
 10126  0048C8  EC26  F02E         	call	_WriteUSART
 10127                           
 10128                           ;main.c: 1573: crc8(&crc, 0);
 10129  0048CC  D836               	call	PL104	;call to abstracted procedure
 10130  0048CE  EC4C  F02D         	call	_crc8	;wreg free
 10131                           
 10132                           ; BSR set to: 0
 10133                           ;main.c: 1576: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10134  0048D2  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10135  0048D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10136  0048D6  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10137  0048D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10138  0048DA  0101               	movlb	1	; () banked
 10139  0048DC  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10140  0048DE  ECC5  F02A         	call	_sendEscapedUartData
 10141  0048E2                     l788:
 10142  0048E2  A2AC               	btfss	4012,1,c	;volatile
 10143  0048E4  D7FE               	goto	l788
 10144                           
 10145                           ;main.c: 1580: WriteUSART(0);
 10146  0048E6  0E00               	movlw	0
 10147  0048E8  EC26  F02E         	call	_WriteUSART
 10148                           
 10149                           ;main.c: 1581: crc8(&crc, 0);
 10150  0048EC  D826               	call	PL104	;call to abstracted procedure
 10151  0048EE  EC4C  F02D         	call	_crc8	;wreg free
 10152  0048F2                     l791:
 10153  0048F2  A2AC               	btfss	4012,1,c	;volatile
 10154  0048F4  D7FE               	goto	l791
 10155                           
 10156                           ;main.c: 1583: WriteUSART(1);
 10157  0048F6  0E01               	movlw	1
 10158  0048F8  EC26  F02E         	call	_WriteUSART
 10159                           
 10160                           ;main.c: 1584: crc8(&crc, 1);
 10161  0048FC  0100               	movlb	0	; () banked
 10162  0048FE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10163  004900  6F68               	movwf	(?_crc8+1)& (0+255),b
 10164  004902  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10165  004904  6F67               	movwf	?_crc8& (0+255),b
 10166  004906  0E01               	movlw	1
 10167  004908  6F69               	movwf	(?_crc8+2)& (0+255),b
 10168  00490A  EC4C  F02D         	call	_crc8	;wreg free
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;main.c: 1587: sendEscapedUartData(errorcode, &crc);
 10172  00490E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10173  004910  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10174  004912  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10175  004914  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10176  004916  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10177  004918  ECC5  F02A         	call	_sendEscapedUartData
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;main.c: 1590: sendEscapedUartData(crc, (0));
 10181  00491C  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10182  00491E  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10183  004920  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10184  004922  ECC5  F02A         	call	_sendEscapedUartData
 10185  004926                     l794:
 10186  004926  A2AC               	btfss	4012,1,c	;volatile
 10187  004928  D7FE               	goto	l794
 10188                           
 10189                           ;main.c: 1594: WriteUSART(0x10);
 10190  00492A  0E10               	movlw	16
 10191  00492C  EC26  F02E         	call	_WriteUSART
 10192  004930                     l797:
 10193  004930  A2AC               	btfss	4012,1,c	;volatile
 10194  004932  D7FE               	goto	l797
 10195                           
 10196                           ;main.c: 1596: WriteUSART(0x03);
 10197  004934  0E03               	movlw	3
 10198  004936  EF26  F02E         	goto	_WriteUSART
 10199  00493A                     __end_of_sendVSCPDriverErrorFrame:
 10200                           	opt stack 0
 10201  00493A                     PL104:
 10202                           	opt stack 23
 10203  00493A  0100               	movlb	0	; () banked
 10204  00493C  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10205  00493E  6F68               	movwf	(?_crc8+1)& (0+255),b
 10206  004940  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10207  004942  6F67               	movwf	?_crc8& (0+255),b
 10208  004944  6B69               	clrf	(?_crc8+2)& (0+255),b
 10209  004946  0C00               	retlw	0
 10210  004948                     __end_ofPL104:
 10211                           	opt stack 0
 10212                           tblptru	equ	0xFF8
 10213                           tblptrh	equ	0xFF7
 10214                           tblptrl	equ	0xFF6
 10215                           tablat	equ	0xFF5
 10216                           prodh	equ	0xFF4
 10217                           prodl	equ	0xFF3
 10218                           intcon	equ	0xFF2
 10219                           indf0	equ	0xFEF
 10220                           postinc0	equ	0xFEE
 10221                           fsr0h	equ	0xFEA
 10222                           fsr0l	equ	0xFE9
 10223                           wreg	equ	0xFE8
 10224                           indf1	equ	0xFE7
 10225                           postinc1	equ	0xFE6
 10226                           postdec1	equ	0xFE5
 10227                           fsr1h	equ	0xFE2
 10228                           fsr1l	equ	0xFE1
 10229                           indf2	equ	0xFDF
 10230                           postinc2	equ	0xFDE
 10231                           postdec2	equ	0xFDD
 10232                           plusw2	equ	0xFDB
 10233                           fsr2h	equ	0xFDA
 10234                           fsr2l	equ	0xFD9
 10235                           status	equ	0xFD8
 10236                           
 10237 ;; *************** function _calcCRC *****************
 10238 ;; Defined at:
 10239 ;;		line 2405 in file "main.c"
 10240 ;; Parameters:    Size  Location     Type
 10241 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10242 ;;		 -> cmdbuf(80), 
 10243 ;;  len             1   14[BANK0 ] unsigned char 
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;  crc             1   16[BANK0 ] unsigned char 
 10246 ;;  j               1   15[BANK0 ] unsigned char 
 10247 ;; Return value:  Size  Location     Type
 10248 ;;                  1    wreg      unsigned char 
 10249 ;; Registers used:
 10250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10251 ;; Tracked objects:
 10252 ;;		On entry : F/0
 10253 ;;		On exit  : F/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10256 ;;      Params:         0       3       0       0       0       0       0
 10257 ;;      Locals:         0       2       0       0       0       0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0
 10259 ;;      Totals:         0       5       0       0       0       0       0
 10260 ;;Total ram usage:        5 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    5
 10263 ;; This function calls:
 10264 ;;		_crc8
 10265 ;; This function is called by:
 10266 ;;		_doModeVscp
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           	psect	text16
 10271  005B64                     __ptext16:
 10272                           	opt stack 0
 10273  005B64                     _calcCRC:
 10274                           	opt stack 24
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;main.c: 2406: uint8_t j;
 10278                           ;main.c: 2407: uint8_t crc = 0;
 10279                           
 10280                           ;incstack = 0
 10281                           ;incstack = 0
 10282  005B64  6B70               	clrf	calcCRC@crc& (0+255),b
 10283                           
 10284                           ;main.c: 2409: for (j = 0; j < len; j++) {
 10285  005B66  6B6F               	clrf	calcCRC@j& (0+255),b
 10286  005B68  D00F               	goto	l12409
 10287  005B6A                     l12405:
 10288                           
 10289                           ; BSR set to: 0
 10290                           ;main.c: 2410: crc8(&crc, p[j]);
 10291  005B6A  0E00               	movlw	high calcCRC@crc
 10292  005B6C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10293  005B6E  0E70               	movlw	low calcCRC@crc
 10294  005B70  6F67               	movwf	?_crc8& (0+255),b
 10295  005B72  516F               	movf	calcCRC@j& (0+255),w,b
 10296  005B74  256C               	addwf	calcCRC@p& (0+255),w,b
 10297  005B76  6ED9               	movwf	fsr2l,c
 10298  005B78  0E00               	movlw	0
 10299  005B7A  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10300  005B7C  6EDA               	movwf	fsr2h,c
 10301  005B7E  50DF               	movf	indf2,w,c
 10302  005B80  6F69               	movwf	(?_crc8+2)& (0+255),b
 10303  005B82  EC4C  F02D         	call	_crc8	;wreg free
 10304                           
 10305                           ; BSR set to: 0
 10306  005B86  2B6F               	incf	calcCRC@j& (0+255),f,b
 10307  005B88                     l12409:
 10308                           
 10309                           ; BSR set to: 0
 10310  005B88  516E               	movf	calcCRC@len& (0+255),w,b
 10311  005B8A  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10312  005B8C  E3EE               	bnc	l12405
 10313                           
 10314                           ; BSR set to: 0
 10315                           ;main.c: 2411: }
 10316                           ;main.c: 2413: return crc;
 10317  005B8E  5170               	movf	calcCRC@crc& (0+255),w,b
 10318                           
 10319                           ; BSR set to: 0
 10320  005B90  0012               	return	
 10321  005B92                     __end_of_calcCRC:
 10322                           	opt stack 0
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           indf0	equ	0xFEF
 10331                           postinc0	equ	0xFEE
 10332                           fsr0h	equ	0xFEA
 10333                           fsr0l	equ	0xFE9
 10334                           wreg	equ	0xFE8
 10335                           indf1	equ	0xFE7
 10336                           postinc1	equ	0xFE6
 10337                           postdec1	equ	0xFE5
 10338                           fsr1h	equ	0xFE2
 10339                           fsr1l	equ	0xFE1
 10340                           indf2	equ	0xFDF
 10341                           postinc2	equ	0xFDE
 10342                           postdec2	equ	0xFDD
 10343                           plusw2	equ	0xFDB
 10344                           fsr2h	equ	0xFDA
 10345                           fsr2l	equ	0xFD9
 10346                           status	equ	0xFD8
 10347                           
 10348 ;; *************** function _receiveSendEventCANAL *****************
 10349 ;; Defined at:
 10350 ;;		line 1800 in file "main.c"
 10351 ;; Parameters:    Size  Location     Type
 10352 ;;		None
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  crc             1   32[BANK0 ] unsigned char 
 10355 ;;  data            8   18[BANK0 ] unsigned char [8]
 10356 ;;  id              4   27[BANK0 ] unsigned long 
 10357 ;;  dlc             1   31[BANK0 ] unsigned char 
 10358 ;;  i               1   26[BANK0 ] unsigned char 
 10359 ;; Return value:  Size  Location     Type
 10360 ;;                  1    wreg      enum E15660
 10361 ;; Registers used:
 10362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10363 ;; Tracked objects:
 10364 ;;		On entry : F/0
 10365 ;;		On exit  : 0/0
 10366 ;;		Unchanged: 0/0
 10367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10368 ;;      Params:         0       0       0       0       0       0       0
 10369 ;;      Locals:         0      15       0       0       0       0       0
 10370 ;;      Temps:          0       0       0       0       0       0       0
 10371 ;;      Totals:         0      15       0       0       0       0       0
 10372 ;;Total ram usage:       15 bytes
 10373 ;; Hardware stack levels used:    1
 10374 ;; Hardware stack levels required when called:    6
 10375 ;; This function calls:
 10376 ;;		_WriteUSART
 10377 ;;		_sendEscapedUartData
 10378 ;;		_crc8
 10379 ;;		_getCANFrame
 10380 ;; This function is called by:
 10381 ;;		_doModeVscp
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           	psect	text17
 10386  003A02                     __ptext17:
 10387                           	opt stack 0
 10388  003A02                     _receiveSendEventCANAL:
 10389                           	opt stack 23
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;main.c: 1801: uint8_t i;
 10393                           ;main.c: 1802: uint32_t id;
 10394                           ;main.c: 1803: uint8_t dlc;
 10395                           ;main.c: 1804: uint8_t data[8];
 10396                           ;main.c: 1806: if ( getCANFrame( &id, &dlc, &data ) ) {
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;incstack = 0
 10400                           ;incstack = 0
 10401  003A02  0E00               	movlw	high receiveSendEventCANAL@dlc
 10402  003A04  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10403  003A06  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10404  003A08  6F6D               	movwf	?_getCANFrame& (0+255),b
 10405  003A0A  0E00               	movlw	high receiveSendEventCANAL@data
 10406  003A0C  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10407  003A0E  0E72               	movlw	low receiveSendEventCANAL@data
 10408  003A10  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10409  003A12  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10410  003A14  ECDD  F028         	call	_getCANFrame
 10411  003A18  0900               	iorlw	0
 10412  003A1A  E101 D08F          	bz	l946
 10413                           
 10414                           ; BSR set to: 0
 10415                           ;main.c: 1808: uint8_t crc = 0;
 10416  003A1E  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;main.c: 1811: cntRxFrames++;
 10420  003A20  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10421  003A22  0E00               	movlw	0
 10422  003A24  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10423  003A26  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10424  003A28  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10425                           
 10426                           ;main.c: 1812: cntRxBytes += dlc;
 10427  003A2A  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10428  003A2C  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10429  003A2E  0E00               	movlw	0
 10430  003A30  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10431  003A32  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10432  003A34  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10433  003A36                     l925:
 10434                           
 10435                           ; BSR set to: 0
 10436  003A36  A2AC               	btfss	4012,1,c	;volatile
 10437  003A38  D7FE               	goto	l925
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;main.c: 1816: WriteUSART(0x10);
 10441  003A3A  0E10               	movlw	16
 10442  003A3C  EC26  F02E         	call	_WriteUSART
 10443  003A40                     l928:
 10444  003A40  A2AC               	btfss	4012,1,c	;volatile
 10445  003A42  D7FE               	goto	l928
 10446                           
 10447                           ;main.c: 1818: WriteUSART(0x02);
 10448  003A44  0E02               	movlw	2
 10449  003A46  EC26  F02E         	call	_WriteUSART
 10450  003A4A                     l931:
 10451  003A4A  A2AC               	btfss	4012,1,c	;volatile
 10452  003A4C  D7FE               	goto	l931
 10453                           
 10454                           ;main.c: 1822: WriteUSART(2);
 10455  003A4E  0E02               	movlw	2
 10456  003A50  EC26  F02E         	call	_WriteUSART
 10457                           
 10458                           ;main.c: 1823: crc8(&crc, 2);
 10459  003A54  0100               	movlb	0	; () banked
 10460  003A56  0E00               	movlw	high receiveSendEventCANAL@crc
 10461  003A58  6F68               	movwf	(?_crc8+1)& (0+255),b
 10462  003A5A  0E80               	movlw	low receiveSendEventCANAL@crc
 10463  003A5C  6F67               	movwf	?_crc8& (0+255),b
 10464  003A5E  0E02               	movlw	2
 10465  003A60  6F69               	movwf	(?_crc8+2)& (0+255),b
 10466  003A62  EC4C  F02D         	call	_crc8	;wreg free
 10467  003A66                     l934:
 10468                           
 10469                           ; BSR set to: 0
 10470  003A66  A2AC               	btfss	4012,1,c	;volatile
 10471  003A68  D7FE               	goto	l934
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;main.c: 1827: WriteUSART(0);
 10475  003A6A  0E00               	movlw	0
 10476  003A6C  EC26  F02E         	call	_WriteUSART
 10477                           
 10478                           ;main.c: 1828: crc8(&crc, 0);
 10479  003A70  0100               	movlb	0	; () banked
 10480  003A72  0E00               	movlw	high receiveSendEventCANAL@crc
 10481  003A74  6F68               	movwf	(?_crc8+1)& (0+255),b
 10482  003A76  0E80               	movlw	low receiveSendEventCANAL@crc
 10483  003A78  6F67               	movwf	?_crc8& (0+255),b
 10484  003A7A  0E00               	movlw	0
 10485  003A7C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10486  003A7E  EC4C  F02D         	call	_crc8	;wreg free
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;main.c: 1831: sendEscapedUartData(sequencyno, &crc);
 10490  003A82  0E00               	movlw	high receiveSendEventCANAL@crc
 10491  003A84  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10492  003A86  0E80               	movlw	low receiveSendEventCANAL@crc
 10493  003A88  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10494  003A8A  51F3               	movf	_sequencyno& (0+255),w,b
 10495  003A8C  ECC5  F02A         	call	_sendEscapedUartData
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;main.c: 1832: sequencyno++;
 10499  003A90  2BF3               	incf	_sequencyno& (0+255),f,b
 10500                           
 10501                           ; BSR set to: 0
 10502                           ;main.c: 1835: sendEscapedUartData(0, &crc);
 10503  003A92  0E00               	movlw	high receiveSendEventCANAL@crc
 10504  003A94  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10505  003A96  0E80               	movlw	low receiveSendEventCANAL@crc
 10506  003A98  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10507  003A9A  0E00               	movlw	0
 10508  003A9C  ECC5  F02A         	call	_sendEscapedUartData
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;main.c: 1836: sendEscapedUartData(5 + dlc, &crc);
 10512  003AA0  0E00               	movlw	high receiveSendEventCANAL@crc
 10513  003AA2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10514  003AA4  0E80               	movlw	low receiveSendEventCANAL@crc
 10515  003AA6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10516  003AA8  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10517  003AAA  0F05               	addlw	5
 10518  003AAC  ECC5  F02A         	call	_sendEscapedUartData
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;main.c: 1842: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10522  003AB0  0E00               	movlw	high receiveSendEventCANAL@crc
 10523  003AB2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10524  003AB4  0E80               	movlw	low receiveSendEventCANAL@crc
 10525  003AB6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10526  003AB8  0100               	movlb	0	; () banked
 10527  003ABA  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10528  003ABC  ECC5  F02A         	call	_sendEscapedUartData
 10529                           
 10530                           ; BSR set to: 0
 10531                           ;main.c: 1843: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10532  003AC0  0E00               	movlw	high receiveSendEventCANAL@crc
 10533  003AC2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10534  003AC4  0E80               	movlw	low receiveSendEventCANAL@crc
 10535  003AC6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10536  003AC8  0100               	movlb	0	; () banked
 10537  003ACA  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10538  003ACC  ECC5  F02A         	call	_sendEscapedUartData
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;main.c: 1844: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10542  003AD0  0E00               	movlw	high receiveSendEventCANAL@crc
 10543  003AD2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10544  003AD4  0E80               	movlw	low receiveSendEventCANAL@crc
 10545  003AD6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10546  003AD8  0100               	movlb	0	; () banked
 10547  003ADA  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10548  003ADC  ECC5  F02A         	call	_sendEscapedUartData
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;main.c: 1845: sendEscapedUartData((id & 0xff), &crc);
 10552  003AE0  0E00               	movlw	high receiveSendEventCANAL@crc
 10553  003AE2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10554  003AE4  0E80               	movlw	low receiveSendEventCANAL@crc
 10555  003AE6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10556  003AE8  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10557  003AEA  ECC5  F02A         	call	_sendEscapedUartData
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;main.c: 1848: sendEscapedUartData(dlc, &crc);
 10561  003AEE  0E00               	movlw	high receiveSendEventCANAL@crc
 10562  003AF0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10563  003AF2  0E80               	movlw	low receiveSendEventCANAL@crc
 10564  003AF4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10565  003AF6  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10566  003AF8  ECC5  F02A         	call	_sendEscapedUartData
 10567                           
 10568                           ; BSR set to: 0
 10569                           ;main.c: 1851: for (i = 0; i < dlc; i++) {
 10570  003AFC  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10571  003AFE  D00C               	goto	l12393
 10572  003B00                     l12389:
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;main.c: 1852: sendEscapedUartData( data[ i ], &crc );
 10576  003B00  0E00               	movlw	high receiveSendEventCANAL@crc
 10577  003B02  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10578  003B04  0E80               	movlw	low receiveSendEventCANAL@crc
 10579  003B06  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10580  003B08  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10581  003B0A  0F72               	addlw	low receiveSendEventCANAL@data
 10582  003B0C  6ED9               	movwf	fsr2l,c
 10583  003B0E  6ADA               	clrf	fsr2h,c
 10584  003B10  50DF               	movf	indf2,w,c
 10585  003B12  ECC5  F02A         	call	_sendEscapedUartData
 10586                           
 10587                           ; BSR set to: 0
 10588  003B16  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10589  003B18                     l12393:
 10590                           
 10591                           ; BSR set to: 0
 10592  003B18  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10593  003B1A  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10594  003B1C  E3F1               	bnc	l12389
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;main.c: 1853: }
 10598                           ;main.c: 1858: sendEscapedUartData(crc, (0));
 10599  003B1E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10600  003B20  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10601  003B22  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10602  003B24  ECC5  F02A         	call	_sendEscapedUartData
 10603  003B28                     l940:
 10604                           
 10605                           ; BSR set to: 0
 10606  003B28  A2AC               	btfss	4012,1,c	;volatile
 10607  003B2A  D7FE               	goto	l940
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;main.c: 1862: WriteUSART(0x10);
 10611  003B2C  0E10               	movlw	16
 10612  003B2E  EC26  F02E         	call	_WriteUSART
 10613  003B32                     l943:
 10614  003B32  A2AC               	btfss	4012,1,c	;volatile
 10615  003B34  D7FE               	goto	l943
 10616                           
 10617                           ;main.c: 1864: WriteUSART(0x03);
 10618  003B36  0E03               	movlw	3
 10619  003B38  EC26  F02E         	call	_WriteUSART
 10620  003B3C                     l946:
 10621  003B3C  0012               	return	
 10622  003B3E                     __end_of_receiveSendEventCANAL:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           indf0	equ	0xFEF
 10632                           postinc0	equ	0xFEE
 10633                           fsr0h	equ	0xFEA
 10634                           fsr0l	equ	0xFE9
 10635                           wreg	equ	0xFE8
 10636                           indf1	equ	0xFE7
 10637                           postinc1	equ	0xFE6
 10638                           postdec1	equ	0xFE5
 10639                           fsr1h	equ	0xFE2
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           plusw2	equ	0xFDB
 10645                           fsr2h	equ	0xFDA
 10646                           fsr2l	equ	0xFD9
 10647                           status	equ	0xFD8
 10648                           
 10649 ;; *************** function _receiveSendMultiEventCANAL *****************
 10650 ;; Defined at:
 10651 ;;		line 1877 in file "main.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  crc             1   33[BANK0 ] unsigned char 
 10656 ;;  data            8   18[BANK0 ] unsigned char [8]
 10657 ;;  id              4   29[BANK0 ] unsigned long 
 10658 ;;  pos             1   34[BANK0 ] unsigned char 
 10659 ;;  dlc             1   28[BANK0 ] unsigned char 
 10660 ;;  i               1   27[BANK0 ] unsigned char 
 10661 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10662 ;; Return value:  Size  Location     Type
 10663 ;;                  1    wreg      enum E15660
 10664 ;; Registers used:
 10665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10666 ;; Tracked objects:
 10667 ;;		On entry : F/0
 10668 ;;		On exit  : 0/0
 10669 ;;		Unchanged: 0/0
 10670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10671 ;;      Params:         0       0       0       0       0       0       0
 10672 ;;      Locals:         0      17       0       0       0       0       0
 10673 ;;      Temps:          0       0       0       0       0       0       0
 10674 ;;      Totals:         0      17       0       0       0       0       0
 10675 ;;Total ram usage:       17 bytes
 10676 ;; Hardware stack levels used:    1
 10677 ;; Hardware stack levels required when called:    6
 10678 ;; This function calls:
 10679 ;;		_WriteUSART
 10680 ;;		_sendEscapedUartData
 10681 ;;		_crc8
 10682 ;;		_getCANFrame
 10683 ;; This function is called by:
 10684 ;;		_doModeVscp
 10685 ;; This function uses a non-reentrant model
 10686 ;;
 10687                           
 10688                           	psect	text18
 10689  0035AA                     __ptext18:
 10690                           	opt stack 0
 10691  0035AA                     _receiveSendMultiEventCANAL:
 10692                           	opt stack 23
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;main.c: 1878: uint8_t i;
 10696                           ;main.c: 1879: uint8_t pos=0;
 10697                           
 10698                           ;incstack = 0
 10699                           ;incstack = 0
 10700  0035AA  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10701                           
 10702                           ;main.c: 1880: uint8_t msgcount=0;
 10703  0035AC  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10704                           
 10705                           ; BSR set to: 0
 10706                           ;main.c: 1881: uint32_t id;
 10707                           ;main.c: 1882: uint8_t dlc;
 10708                           ;main.c: 1883: uint8_t data[8];
 10709                           ;main.c: 1885: if ( getCANFrame( &id, &dlc, &data ) ) {
 10710  0035AE  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10711  0035B0  D8B1               	call	PL82	;call to abstracted procedure
 10712  0035B2  ECDD  F028         	call	_getCANFrame
 10713  0035B6  0900               	iorlw	0
 10714  0035B8  E101 D0A3          	bz	l978
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;main.c: 1887: uint8_t crc = 0;
 10718  0035BC  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;main.c: 1890: cntRxFrames++;
 10722  0035BE  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10723  0035C0  0E00               	movlw	0
 10724  0035C2  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10725  0035C4  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10726  0035C6  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10727                           
 10728                           ;main.c: 1891: cntRxBytes += dlc;
 10729  0035C8  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10730  0035CA  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10731  0035CC  0E00               	movlw	0
 10732  0035CE  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10733  0035D0  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10734  0035D2  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10735  0035D4                     l950:
 10736                           
 10737                           ; BSR set to: 0
 10738  0035D4  A2AC               	btfss	4012,1,c	;volatile
 10739  0035D6  D7FE               	goto	l950
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;main.c: 1895: WriteUSART(0x10);
 10743  0035D8  0E10               	movlw	16
 10744  0035DA  EC26  F02E         	call	_WriteUSART
 10745  0035DE                     l953:
 10746  0035DE  A2AC               	btfss	4012,1,c	;volatile
 10747  0035E0  D7FE               	goto	l953
 10748                           
 10749                           ;main.c: 1897: WriteUSART(0x02);
 10750  0035E2  0E02               	movlw	2
 10751  0035E4  EC26  F02E         	call	_WriteUSART
 10752  0035E8                     l956:
 10753  0035E8  A2AC               	btfss	4012,1,c	;volatile
 10754  0035EA  D7FE               	goto	l956
 10755                           
 10756                           ;main.c: 1901: WriteUSART(6);
 10757  0035EC  0E06               	movlw	6
 10758  0035EE  EC26  F02E         	call	_WriteUSART
 10759                           
 10760                           ;main.c: 1902: crc8(&crc, 6);
 10761  0035F2  0100               	movlb	0	; () banked
 10762  0035F4  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10763  0035F6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10764  0035F8  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10765  0035FA  6F67               	movwf	?_crc8& (0+255),b
 10766  0035FC  0E06               	movlw	6
 10767  0035FE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10768  003600  EC4C  F02D         	call	_crc8	;wreg free
 10769  003604                     l959:
 10770                           
 10771                           ; BSR set to: 0
 10772  003604  A2AC               	btfss	4012,1,c	;volatile
 10773  003606  D7FE               	goto	l959
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;main.c: 1906: WriteUSART(0);
 10777  003608  0E00               	movlw	0
 10778  00360A  EC26  F02E         	call	_WriteUSART
 10779                           
 10780                           ;main.c: 1907: crc8(&crc, 0);
 10781  00360E  0100               	movlb	0	; () banked
 10782  003610  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10783  003612  6F68               	movwf	(?_crc8+1)& (0+255),b
 10784  003614  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10785  003616  6F67               	movwf	?_crc8& (0+255),b
 10786  003618  0E00               	movlw	0
 10787  00361A  6B69               	clrf	(?_crc8+2)& (0+255),b
 10788  00361C  EC4C  F02D         	call	_crc8	;wreg free
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;main.c: 1910: sendEscapedUartData(sequencyno, &crc);
 10792  003620  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10793  003622  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10794  003624  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10795  003626  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10796  003628  51F3               	movf	_sequencyno& (0+255),w,b
 10797  00362A  ECC5  F02A         	call	_sendEscapedUartData
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;main.c: 1911: sequencyno++;
 10801  00362E  2BF3               	incf	_sequencyno& (0+255),f,b
 10802  003630                     l12295:
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;main.c: 1921: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10806  003630  0E54               	movlw	low _wrkbuf
 10807  003632  0100               	movlb	0	; () banked
 10808  003634  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10809  003636  6ED9               	movwf	fsr2l,c
 10810  003638  6ADA               	clrf	fsr2h,c
 10811  00363A  0E01               	movlw	high _wrkbuf
 10812  00363C  22DA               	addwfc	fsr2h,f,c
 10813  00363E  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;main.c: 1922: pos++;
 10817                           
 10818                           ; BSR set to: 0
 10819                           ;main.c: 1923: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10820  003642  D860               	call	PL26	;call to abstracted procedure
 10821  003644  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;main.c: 1924: pos++;
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;main.c: 1925: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10828  003648  D85D               	call	PL26	;call to abstracted procedure
 10829  00364A  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10830                           
 10831                           ; BSR set to: 0
 10832                           ;main.c: 1926: pos++;
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;main.c: 1927: wrkbuf[ pos ] = id & 0xff;
 10836  00364E  D85A               	call	PL26	;call to abstracted procedure
 10837  003650  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1928: pos++;
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;main.c: 1931: wrkbuf[ pos ] = dlc;
 10844  003654  D857               	call	PL26	;call to abstracted procedure
 10845  003656  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;main.c: 1932: pos++;
 10849  00365A  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;main.c: 1935: for (i = 0; i < dlc; i++) {
 10853  00365C  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10854  00365E  D00F               	goto	l12323
 10855  003660                     l12317:
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;main.c: 1936: wrkbuf[ pos ] = data[ i ];
 10859  003660  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10860  003662  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10861  003664  6ED9               	movwf	fsr2l,c
 10862  003666  6ADA               	clrf	fsr2h,c
 10863  003668  0E54               	movlw	low _wrkbuf
 10864  00366A  0100               	movlb	0	; () banked
 10865  00366C  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10866  00366E  6EE1               	movwf	fsr1l,c
 10867  003670  6AE2               	clrf	fsr1h,c
 10868  003672  0E01               	movlw	high _wrkbuf
 10869  003674  22E2               	addwfc	fsr1h,f,c
 10870  003676  CFDF FFE7          	movff	indf2,indf1
 10871                           
 10872                           ; BSR set to: 1
 10873                           ;main.c: 1937: pos++;
 10874  00367A  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10875                           
 10876                           ; BSR set to: 0
 10877  00367C  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10878  00367E                     l12323:
 10879                           
 10880                           ; BSR set to: 0
 10881  00367E  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10882  003680  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10883  003682  E3EE               	bnc	l12317
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 1938: }
 10887                           ;main.c: 1940: msgcount++;
 10888  003684  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10889                           
 10890                           ; BSR set to: 0
 10891                           ;main.c: 1942: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10892                           ;main.c: 1943: ( msgcount < 5 ) &&
 10893                           ;main.c: 1944: getCANFrame( &id, &dlc, &data ) );
 10894  003686  51F6               	movf	(_caps+1)& (0+255),w,b
 10895  003688  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10896  00368A  D009               	goto	l12333
 10897                           
 10898                           ; BSR set to: 0
 10899  00368C  0E05               	movlw	5
 10900  00368E  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10901  003690  D006               	goto	l12333
 10902                           
 10903                           ; BSR set to: 0
 10904  003692  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10905  003694  D83F               	call	PL82	;call to abstracted procedure
 10906  003696  ECDD  F028         	call	_getCANFrame
 10907  00369A  0900               	iorlw	0
 10908  00369C  E1C9               	bnz	l12295
 10909  00369E                     l12333:
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;main.c: 1949: sendEscapedUartData(0, &crc);
 10913  00369E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10914  0036A0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10915  0036A2  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10916  0036A4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10917  0036A6  0E00               	movlw	0
 10918  0036A8  ECC5  F02A         	call	_sendEscapedUartData
 10919                           
 10920                           ;main.c: 1950: sendEscapedUartData(pos, &crc);
 10921  0036AC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10922  0036AE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10923  0036B0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10924  0036B2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10925  0036B4  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10926  0036B6  ECC5  F02A         	call	_sendEscapedUartData
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;main.c: 1953: for (i = 0; i < pos; i++) {
 10930  0036BA  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10931  0036BC  D010               	goto	l12341
 10932  0036BE                     l12337:
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;main.c: 1954: sendEscapedUartData( wrkbuf[ i ], &crc);
 10936  0036BE  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10937  0036C0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10938  0036C2  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10939  0036C4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10940  0036C6  0E54               	movlw	low _wrkbuf
 10941  0036C8  0100               	movlb	0	; () banked
 10942  0036CA  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10943  0036CC  6ED9               	movwf	fsr2l,c
 10944  0036CE  6ADA               	clrf	fsr2h,c
 10945  0036D0  0101               	movlb	1	; () banked
 10946  0036D2  0E01               	movlw	high _wrkbuf
 10947  0036D4  22DA               	addwfc	fsr2h,f,c
 10948  0036D6  50DF               	movf	indf2,w,c
 10949  0036D8  ECC5  F02A         	call	_sendEscapedUartData
 10950                           
 10951                           ; BSR set to: 0
 10952  0036DC  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10953  0036DE                     l12341:
 10954                           
 10955                           ; BSR set to: 0
 10956  0036DE  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10957  0036E0  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10958  0036E2  E3ED               	bnc	l12337
 10959                           
 10960                           ; BSR set to: 0
 10961                           ;main.c: 1955: }
 10962                           ;main.c: 1958: sendEscapedUartData(crc, (0));
 10963  0036E4  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10964  0036E6  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10965  0036E8  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10966  0036EA  ECC5  F02A         	call	_sendEscapedUartData
 10967  0036EE                     l972:
 10968                           
 10969                           ; BSR set to: 0
 10970  0036EE  A2AC               	btfss	4012,1,c	;volatile
 10971  0036F0  D7FE               	goto	l972
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;main.c: 1962: WriteUSART(0x10);
 10975  0036F2  0E10               	movlw	16
 10976  0036F4  EC26  F02E         	call	_WriteUSART
 10977  0036F8                     l975:
 10978  0036F8  A2AC               	btfss	4012,1,c	;volatile
 10979  0036FA  D7FE               	goto	l975
 10980                           
 10981                           ;main.c: 1964: WriteUSART(0x03);
 10982  0036FC  0E03               	movlw	3
 10983  0036FE  EC26  F02E         	call	_WriteUSART
 10984  003702                     l978:
 10985  003702  0012               	return	
 10986  003704                     __end_of_receiveSendMultiEventCANAL:
 10987                           	opt stack 0
 10988  003704                     PL26:
 10989                           	opt stack 23
 10990  003704  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10991  003706  0E54               	movlw	low _wrkbuf
 10992  003708  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10993  00370A  6ED9               	movwf	fsr2l,c
 10994  00370C  6ADA               	clrf	fsr2h,c
 10995  00370E  0E01               	movlw	high _wrkbuf
 10996  003710  22DA               	addwfc	fsr2h,f,c
 10997  003712  0012               	return	
 10998  003714                     __end_ofPL26:
 10999                           	opt stack 0
 11000  003714                     PL82:
 11001                           	opt stack 23
 11002  003714  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 11003  003716  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 11004  003718  6F6D               	movwf	?_getCANFrame& (0+255),b
 11005  00371A  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11006  00371C  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 11007  00371E  0E72               	movlw	low receiveSendMultiEventCANAL@data
 11008  003720  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 11009  003722  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11010  003724  0012               	return	
 11011  003726                     __end_ofPL82:
 11012                           	opt stack 0
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           indf0	equ	0xFEF
 11021                           postinc0	equ	0xFEE
 11022                           fsr0h	equ	0xFEA
 11023                           fsr0l	equ	0xFE9
 11024                           wreg	equ	0xFE8
 11025                           indf1	equ	0xFE7
 11026                           postinc1	equ	0xFE6
 11027                           postdec1	equ	0xFE5
 11028                           fsr1h	equ	0xFE2
 11029                           fsr1l	equ	0xFE1
 11030                           indf2	equ	0xFDF
 11031                           postinc2	equ	0xFDE
 11032                           postdec2	equ	0xFDD
 11033                           plusw2	equ	0xFDB
 11034                           fsr2h	equ	0xFDA
 11035                           fsr2l	equ	0xFD9
 11036                           status	equ	0xFD8
 11037                           
 11038 ;; *************** function _sendEscapedUartData *****************
 11039 ;; Defined at:
 11040 ;;		line 1530 in file "main.c"
 11041 ;; Parameters:    Size  Location     Type
 11042 ;;  c               1    wreg     unsigned char 
 11043 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11044 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11045 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11046 ;;		 -> NULL(0), 
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;  c               1   14[BANK0 ] unsigned char 
 11049 ;; Return value:  Size  Location     Type
 11050 ;;		None               void
 11051 ;; Registers used:
 11052 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11053 ;; Tracked objects:
 11054 ;;		On entry : E/1
 11055 ;;		On exit  : F/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11058 ;;      Params:         0       2       0       0       0       0       0
 11059 ;;      Locals:         0       1       0       0       0       0       0
 11060 ;;      Temps:          0       0       0       0       0       0       0
 11061 ;;      Totals:         0       3       0       0       0       0       0
 11062 ;;Total ram usage:        3 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; Hardware stack levels required when called:    5
 11065 ;; This function calls:
 11066 ;;		_WriteUSART
 11067 ;;		_crc8
 11068 ;; This function is called by:
 11069 ;;		_sendVSCPDriverErrorFrame
 11070 ;;		_sendVSCPDriverAck
 11071 ;;		_sendVSCPDriverNack
 11072 ;;		_sendVSCPDriverCommandReply
 11073 ;;		_receiveSendEventCANAL
 11074 ;;		_receiveSendMultiEventCANAL
 11075 ;;		_sendVSCPModeCapabilities
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           	psect	text19
 11080  00558A                     __ptext19:
 11081                           	opt stack 0
 11082  00558A                     _sendEscapedUartData:
 11083                           	opt stack 23
 11084                           
 11085                           ;incstack = 0
 11086                           ;incstack = 0
 11087                           ;sendEscapedUartData@c stored from wreg
 11088  00558A  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11089                           
 11090                           ;main.c: 1531: if (0x10 == c) {
 11091  00558E  0100               	movlb	0	; () banked
 11092  005590  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11093  005592  0A10               	xorlw	16
 11094  005594  E117               	bnz	l769
 11095  005596                     l761:
 11096  005596  A2AC               	btfss	4012,1,c	;volatile
 11097  005598  D7FE               	goto	l761
 11098                           
 11099                           ;main.c: 1534: WriteUSART(0x10);
 11100  00559A  0E10               	movlw	16
 11101  00559C  EC26  F02E         	call	_WriteUSART
 11102  0055A0                     l764:
 11103  0055A0  A2AC               	btfss	4012,1,c	;volatile
 11104  0055A2  D7FE               	goto	l764
 11105                           
 11106                           ;main.c: 1538: WriteUSART(0x10);
 11107  0055A4  0E10               	movlw	16
 11108  0055A6  EC26  F02E         	call	_WriteUSART
 11109                           
 11110                           ;main.c: 1539: if ((0) != pcrc) crc8(pcrc, 0x10);
 11111  0055AA  0100               	movlb	0	; () banked
 11112  0055AC  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11113  0055AE  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11114  0055B0  E01B               	bz	l773
 11115                           
 11116                           ; BSR set to: 0
 11117  0055B2  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11118  0055B6  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11119  0055BA  0E10               	movlw	16
 11120  0055BC  6F69               	movwf	(?_crc8+2)& (0+255),b
 11121  0055BE  EC4C  F02D         	call	_crc8	;wreg free
 11122  0055C2  D012               	goto	l773
 11123  0055C4                     l769:
 11124  0055C4  A2AC               	btfss	4012,1,c	;volatile
 11125  0055C6  D7FE               	goto	l769
 11126                           
 11127                           ;main.c: 1545: WriteUSART(c);
 11128  0055C8  0100               	movlb	0	; () banked
 11129  0055CA  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11130  0055CC  EC26  F02E         	call	_WriteUSART
 11131                           
 11132                           ;main.c: 1546: if ((0) != pcrc) crc8(pcrc, c);
 11133  0055D0  0100               	movlb	0	; () banked
 11134  0055D2  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11135  0055D4  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11136  0055D6  E008               	bz	l773
 11137                           
 11138                           ; BSR set to: 0
 11139  0055D8  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11140  0055DC  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11141  0055E0  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11142  0055E4  EC4C  F02D         	call	_crc8	;wreg free
 11143  0055E8                     l773:
 11144                           
 11145                           ; BSR set to: 0
 11146  0055E8  0012               	return	
 11147  0055EA                     __end_of_sendEscapedUartData:
 11148                           	opt stack 0
 11149                           tblptru	equ	0xFF8
 11150                           tblptrh	equ	0xFF7
 11151                           tblptrl	equ	0xFF6
 11152                           tablat	equ	0xFF5
 11153                           prodh	equ	0xFF4
 11154                           prodl	equ	0xFF3
 11155                           intcon	equ	0xFF2
 11156                           indf0	equ	0xFEF
 11157                           postinc0	equ	0xFEE
 11158                           fsr0h	equ	0xFEA
 11159                           fsr0l	equ	0xFE9
 11160                           wreg	equ	0xFE8
 11161                           indf1	equ	0xFE7
 11162                           postinc1	equ	0xFE6
 11163                           postdec1	equ	0xFE5
 11164                           fsr1h	equ	0xFE2
 11165                           fsr1l	equ	0xFE1
 11166                           indf2	equ	0xFDF
 11167                           postinc2	equ	0xFDE
 11168                           postdec2	equ	0xFDD
 11169                           plusw2	equ	0xFDB
 11170                           fsr2h	equ	0xFDA
 11171                           fsr2l	equ	0xFD9
 11172                           status	equ	0xFD8
 11173                           
 11174 ;; *************** function _crc8 *****************
 11175 ;; Defined at:
 11176 ;;		line 47 in file "crc8.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11179 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11180 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11181 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11182 ;;  m               1    9[BANK0 ] unsigned char 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;		None
 11185 ;; Return value:  Size  Location     Type
 11186 ;;		None               void
 11187 ;; Registers used:
 11188 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : F/0
 11191 ;;		On exit  : F/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11194 ;;      Params:         0       3       0       0       0       0       0
 11195 ;;      Locals:         0       0       0       0       0       0       0
 11196 ;;      Temps:          0       2       0       0       0       0       0
 11197 ;;      Totals:         0       5       0       0       0       0       0
 11198 ;;Total ram usage:        5 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    4
 11201 ;; This function calls:
 11202 ;;		_init_crc8
 11203 ;; This function is called by:
 11204 ;;		_sendEscapedUartData
 11205 ;;		_sendVSCPDriverErrorFrame
 11206 ;;		_sendVSCPDriverAck
 11207 ;;		_sendVSCPDriverNack
 11208 ;;		_sendVSCPDriverCommandReply
 11209 ;;		_receiveSendEventCANAL
 11210 ;;		_receiveSendMultiEventCANAL
 11211 ;;		_sendVSCPModeCapabilities
 11212 ;;		_calcCRC
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text20
 11217  005A98                     __ptext20:
 11218                           	opt stack 0
 11219  005A98                     _crc8:
 11220                           	opt stack 24
 11221                           
 11222                           ; BSR set to: 0
 11223                           ;crc8.c: 48: if ( !made_table ) {
 11224                           
 11225                           ; BSR set to: 0
 11226                           ;incstack = 0
 11227                           ;incstack = 0
 11228  005A98  5038               	movf	_made_table+1,w,c
 11229  005A9A  1037               	iorwf	_made_table,w,c
 11230  005A9C  B4D8               	btfsc	status,2,c
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;crc8.c: 49: init_crc8();
 11234  005A9E  ECCA  F029         	call	_init_crc8	;wreg free
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;crc8.c: 50: }
 11238                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11239  005AA2  C067  FFD9         	movff	crc8@crc,fsr2l
 11240  005AA6  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11241  005AAA  50DF               	movf	indf2,w,c
 11242  005AAC  1969               	xorwf	crc8@m& (0+255),w,b
 11243  005AAE  6F6A               	movwf	??_crc8& (0+255),b
 11244  005AB0  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11245  005AB2  0E00               	movlw	low _crc8_table
 11246  005AB4  0100               	movlb	0	; () banked
 11247  005AB6  256A               	addwf	??_crc8& (0+255),w,b
 11248  005AB8  6ED9               	movwf	fsr2l,c
 11249  005ABA  0E03               	movlw	high _crc8_table
 11250  005ABC  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11251  005ABE  6EDA               	movwf	fsr2h,c
 11252  005AC0  C067  FFE1         	movff	crc8@crc,fsr1l
 11253  005AC4  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11254  005AC8  CFDF FFE7          	movff	indf2,indf1
 11255                           
 11256                           ; BSR set to: 0
 11257  005ACC  0012               	return	
 11258  005ACE                     __end_of_crc8:
 11259                           	opt stack 0
 11260                           tblptru	equ	0xFF8
 11261                           tblptrh	equ	0xFF7
 11262                           tblptrl	equ	0xFF6
 11263                           tablat	equ	0xFF5
 11264                           prodh	equ	0xFF4
 11265                           prodl	equ	0xFF3
 11266                           intcon	equ	0xFF2
 11267                           indf0	equ	0xFEF
 11268                           postinc0	equ	0xFEE
 11269                           fsr0h	equ	0xFEA
 11270                           fsr0l	equ	0xFE9
 11271                           wreg	equ	0xFE8
 11272                           indf1	equ	0xFE7
 11273                           postinc1	equ	0xFE6
 11274                           postdec1	equ	0xFE5
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _init_crc8 *****************
 11286 ;; Defined at:
 11287 ;;		line 25 in file "crc8.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;  i               2    5[BANK0 ] int 
 11292 ;;  j               2    2[BANK0 ] int 
 11293 ;;  crc             1    4[BANK0 ] unsigned char 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;		None               void
 11296 ;; Registers used:
 11297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11298 ;; Tracked objects:
 11299 ;;		On entry : F/0
 11300 ;;		On exit  : F/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11303 ;;      Params:         0       0       0       0       0       0       0
 11304 ;;      Locals:         0       7       0       0       0       0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0
 11306 ;;      Totals:         0       7       0       0       0       0       0
 11307 ;;Total ram usage:        7 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    3
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_main
 11314 ;;		_crc8
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           	psect	text21
 11319  005394                     __ptext21:
 11320                           	opt stack 0
 11321  005394                     _init_crc8:
 11322                           	opt stack 24
 11323                           
 11324                           ; BSR set to: 0
 11325                           ;crc8.c: 26: int i,j;
 11326                           ;crc8.c: 27: unsigned char crc;
 11327                           ;crc8.c: 29: if (!made_table) {
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;incstack = 0
 11331                           ;incstack = 0
 11332  005394  5038               	movf	_made_table+1,w,c
 11333  005396  1037               	iorwf	_made_table,w,c
 11334  005398  E131               	bnz	l1556
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11338  00539A  6B65               	clrf	init_crc8@i& (0+255),b
 11339  00539C  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11340  00539E                     l1548:
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;crc8.c: 31: crc = i;
 11344  00539E  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11345                           
 11346                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11347  0053A2  6B62               	clrf	init_crc8@j& (0+255),b
 11348  0053A4  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11349  0053A6                     l1550:
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11353  0053A6  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11354  0053A8  D003               	goto	l10011
 11355                           
 11356                           ; BSR set to: 0
 11357  0053AA  6B60               	clrf	_init_crc8$1961& (0+255),b
 11358  0053AC  6B61               	clrf	(_init_crc8$1961+1)& (0+255),b
 11359  0053AE  D003               	goto	l10013
 11360  0053B0                     l10011:
 11361                           
 11362                           ; BSR set to: 0
 11363  0053B0  6B61               	clrf	(_init_crc8$1961+1)& (0+255),b
 11364  0053B2  0E07               	movlw	7
 11365  0053B4  6F60               	movwf	_init_crc8$1961& (0+255),b
 11366  0053B6                     l10013:
 11367                           
 11368                           ; BSR set to: 0
 11369  0053B6  5164               	movf	init_crc8@crc& (0+255),w,b
 11370  0053B8  2564               	addwf	init_crc8@crc& (0+255),w,b
 11371  0053BA  1960               	xorwf	_init_crc8$1961& (0+255),w,b
 11372  0053BC  6F64               	movwf	init_crc8@crc& (0+255),b
 11373                           
 11374                           ; BSR set to: 0
 11375  0053BE  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11376  0053C0  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11377                           
 11378                           ; BSR set to: 0
 11379  0053C2  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11380  0053C4  0A80               	xorlw	128
 11381  0053C6  0F80               	addlw	-128
 11382  0053C8  0E08               	movlw	8
 11383  0053CA  B4D8               	btfsc	status,2,c
 11384  0053CC  5D62               	subwf	init_crc8@j& (0+255),w,b
 11385  0053CE  E3EB               	bnc	l1550
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;crc8.c: 34: }
 11389                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11390  0053D0  0E00               	movlw	low _crc8_table
 11391  0053D2  0100               	movlb	0	; () banked
 11392  0053D4  2565               	addwf	init_crc8@i& (0+255),w,b
 11393  0053D6  6ED9               	movwf	fsr2l,c
 11394  0053D8  0E03               	movlw	high _crc8_table
 11395  0053DA  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11396  0053DC  6EDA               	movwf	fsr2h,c
 11397  0053DE  C064  FFDF         	movff	init_crc8@crc,indf2
 11398                           
 11399                           ; BSR set to: 0
 11400  0053E2  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11401  0053E4  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11402                           
 11403                           ; BSR set to: 0
 11404  0053E6  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11405  0053E8  0A80               	xorlw	128
 11406  0053EA  0F7F               	addlw	-129
 11407  0053EC  0E00               	movlw	0
 11408  0053EE  B4D8               	btfsc	status,2,c
 11409  0053F0  5D65               	subwf	init_crc8@i& (0+255),w,b
 11410  0053F2  E3D5               	bnc	l1548
 11411                           
 11412                           ; BSR set to: 0
 11413                           ;crc8.c: 37: }
 11414                           ;crc8.c: 38: made_table=1;
 11415  0053F4  0E00               	movlw	0
 11416  0053F6  6E38               	movwf	_made_table+1,c
 11417  0053F8  0E01               	movlw	1
 11418  0053FA  6E37               	movwf	_made_table,c
 11419  0053FC                     l1556:
 11420                           
 11421                           ; BSR set to: 0
 11422  0053FC  0012               	return	
 11423  0053FE                     __end_of_init_crc8:
 11424                           	opt stack 0
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           indf0	equ	0xFEF
 11433                           postinc0	equ	0xFEE
 11434                           fsr0h	equ	0xFEA
 11435                           fsr0l	equ	0xFE9
 11436                           wreg	equ	0xFE8
 11437                           indf1	equ	0xFE7
 11438                           postinc1	equ	0xFE6
 11439                           postdec1	equ	0xFE5
 11440                           fsr1h	equ	0xFE2
 11441                           fsr1l	equ	0xFE1
 11442                           indf2	equ	0xFDF
 11443                           postinc2	equ	0xFDE
 11444                           postdec2	equ	0xFDD
 11445                           plusw2	equ	0xFDB
 11446                           fsr2h	equ	0xFDA
 11447                           fsr2l	equ	0xFD9
 11448                           status	equ	0xFD8
 11449                           
 11450 ;; *************** function _doModeVerbose *****************
 11451 ;; Defined at:
 11452 ;;		line 491 in file "main.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;		None
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11457 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11458 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11459 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11460 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11461 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11462 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11463 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11464 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11465 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11466 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11467 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11468 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11469 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11470 ;;  id              4   35[BANK2 ] unsigned long 
 11471 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11472 ;;		 -> NULL(0), cmdbuf(80), 
 11473 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11474 ;;  maskno          1   40[BANK2 ] unsigned char 
 11475 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11476 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11477 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11478 ;;  id              4    0[BANK2 ] unsigned long 
 11479 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11480 ;;		 -> NULL(0), cmdbuf(80), 
 11481 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11482 ;;  filterno        1   39[BANK2 ] unsigned char 
 11483 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11484 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11485 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11486 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11487 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11488 ;;		 -> NULL(0), cmdbuf(80), 
 11489 ;;  value           1   41[BANK2 ] unsigned char 
 11490 ;;  reg             1   34[BANK2 ] unsigned char 
 11491 ;;  page            1   33[BANK2 ] unsigned char 
 11492 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11493 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11494 ;;		 -> NULL(0), cmdbuf(80), 
 11495 ;;  value           1   49[BANK2 ] unsigned char 
 11496 ;;  i               1   48[BANK2 ] unsigned char 
 11497 ;;  reg             1   46[BANK2 ] unsigned char 
 11498 ;;  page            1   45[BANK2 ] unsigned char 
 11499 ;;  count           1   43[BANK2 ] unsigned char 
 11500 ;;  rv              1   32[BANK2 ] enum E15660
 11501 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11502 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11503 ;;		 -> NULL(0), cmdbuf(80), 
 11504 ;;  ifmode          1   54[BANK2 ] enum E16362
 11505 ;;  c               1   44[BANK2 ] unsigned char 
 11506 ;;  i               1   42[BANK2 ] unsigned char 
 11507 ;; Return value:  Size  Location     Type
 11508 ;;		None               void
 11509 ;; Registers used:
 11510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11511 ;; Tracked objects:
 11512 ;;		On entry : 0/0
 11513 ;;		On exit  : 0/0
 11514 ;;		Unchanged: 0/0
 11515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11516 ;;      Params:         0       0       0       0       0       0       0
 11517 ;;      Locals:         0       0       0      61       0       0       0
 11518 ;;      Temps:          0       0      20       0       0       0       0
 11519 ;;      Totals:         0       0      20      61       0       0       0
 11520 ;;Total ram usage:       81 bytes
 11521 ;; Hardware stack levels used:    1
 11522 ;; Hardware stack levels required when called:   10
 11523 ;; This function calls:
 11524 ;;		_putsUSART
 11525 ;;		_printFirmwareVersion
 11526 ;;		_fifo_read
 11527 ;;		_Busy_eep
 11528 ;;		_Write_b_eep
 11529 ;;		_receivePrintEventVerbose
 11530 ;;		_stristr
 11531 ;;		_ECANSetOperationMode
 11532 ;;		_strtok
 11533 ;;		_atoi
 11534 ;;		_memset
 11535 ;;		_sendVSCPFrame
 11536 ;;		_printStatistics
 11537 ;;		_printErrors
 11538 ;;		_printHelp
 11539 ;;		_findNodes
 11540 ;;		_strcpy
 11541 ;;		_strchr
 11542 ;;		_readRegisterExtended
 11543 ;;		_sprintf
 11544 ;;		_WriteUSART
 11545 ;;		_printBinary
 11546 ;;		_writeRegisterExtended
 11547 ;;		_printNodeFirmwareVersion
 11548 ;;		_printGUID
 11549 ;;		_printMDF
 11550 ;;		_setFilter
 11551 ;;		__CANIDToRegs
 11552 ;; This function is called by:
 11553 ;;		_main
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           	psect	text22
 11558  00066C                     __ptext22:
 11559                           	opt stack 0
 11560  00066C                     _doModeVerbose:
 11561                           	opt stack 20
 11562                           
 11563                           ;main.c: 492: uint8_t c;
 11564                           ;main.c: 493: uint8_t i;
 11565                           ;main.c: 496: if (!bSilent) {
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;incstack = 0
 11569                           ;incstack = 0
 11570  00066C  0101               	movlb	1	; () banked
 11571  00066E  6701               	tstfsz	_bSilent& (0+255),b
 11572  000670  D002               	goto	l10141
 11573                           
 11574                           ; BSR set to: 1
 11575                           ;main.c: 497: receivePrintEventVerbose();
 11576  000672  EC2C  F014         	call	_receivePrintEventVerbose	;wreg free
 11577  000676                     l10141:
 11578                           
 11579                           ;main.c: 498: }
 11580                           ;main.c: 501: (INTCONbits.GIE = 0);
 11581  000676  9EF2               	bcf	intcon,7,c	;volatile
 11582                           
 11583                           ;main.c: 503: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11584  000678  0E02               	movlw	high doModeVerbose@c
 11585  00067A  0100               	movlb	0	; () banked
 11586  00067C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11587  00067E  0EAC               	movlw	low doModeVerbose@c
 11588  000680  6F60               	movwf	?_fifo_read& (0+255),b
 11589  000682  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11590  000684  0E01               	movlw	1
 11591  000686  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11592  000688  0E48               	movlw	_serialInputFifo& (0+255)
 11593  00068A  ECDE  F023         	call	_fifo_read
 11594  00068E  0560               	decf	?_fifo_read& (0+255),w,b
 11595  000690  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11596  000692  E002 EF96  F00C    	bnz	l10763
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;main.c: 506: (INTCONbits.GIE = 1);
 11600  000698  8EF2               	bsf	intcon,7,c	;volatile
 11601                           
 11602                           ; BSR set to: 0
 11603                           ;main.c: 509: cmdbuf[ pos ] = c;
 11604  00069A  EC35  F019         	call	PL18	;call to abstracted procedure
 11605  00069E  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11606                           
 11607                           ; BSR set to: 2
 11608                           ;main.c: 510: pos++;
 11609  0006A2  2B02               	incf	_pos& (0+255),f,b
 11610                           
 11611                           ; BSR set to: 1
 11612                           ;main.c: 512: if (pos >= 128u) {
 11613  0006A4  0E7F               	movlw	127
 11614  0006A6  6502               	cpfsgt	_pos& (0+255),b
 11615  0006A8  D001               	goto	l10155
 11616                           
 11617                           ; BSR set to: 1
 11618                           ;main.c: 516: pos = 0;
 11619  0006AA  6B02               	clrf	_pos& (0+255),b
 11620  0006AC                     l10155:
 11621                           
 11622                           ; BSR set to: 1
 11623                           ;main.c: 518: }
 11624                           ;main.c: 521: if (0x0d == c) {
 11625  0006AC  0102               	movlb	2	; () banked
 11626  0006AE  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11627  0006B0  0A0D               	xorlw	13
 11628  0006B2  E002 EF96  F00C    	bnz	l10763
 11629                           
 11630                           ; BSR set to: 2
 11631                           ;main.c: 523: cmdbuf[ pos ] = 0;
 11632  0006B8  EC35  F019         	call	PL18	;call to abstracted procedure
 11633  0006BC  6ADF               	clrf	indf2,c
 11634                           
 11635                           ; BSR set to: 1
 11636                           ;main.c: 526: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11637  0006BE  0100               	movlb	0	; () banked
 11638  0006C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11639  0006C2  0E04               	movlw	low _cmdbuf
 11640  0006C4  6F6D               	movwf	?_stristr& (0+255),b
 11641  0006C6  0E7F               	movlw	high STR_6
 11642  0006C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11643  0006CA  0ECF               	movlw	low STR_6
 11644  0006CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11645  0006CE  ECA1  F028         	call	_stristr	;wreg free
 11646  0006D2  EC98  F00C         	call	PL2	;call to abstracted procedure
 11647  0006D6  E104               	bnz	u12375
 11648  0006D8  0100               	movlb	0	; () banked
 11649  0006DA  516D               	movf	?_stristr& (0+255),w,b
 11650  0006DC  0101               	movlb	1	; () banked
 11651  0006DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11652  0006E0                     u12375:
 11653  0006E0  E113               	bnz	l10167
 11654                           
 11655                           ; BSR set to: 1
 11656                           ;main.c: 527: putsUSART((char *) "Will enter bootloader now...\r\n");
 11657  0006E2  0E7A               	movlw	high STR_7
 11658  0006E4  0100               	movlb	0	; () banked
 11659  0006E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11660  0006E8  0EEC               	movlw	low STR_7
 11661  0006EA  6F61               	movwf	?_putsUSART& (0+255),b
 11662  0006EC  EC4F  F02B         	call	_putsUSART	;wreg free
 11663                           
 11664                           ;main.c: 528: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11665  0006F0  EC4F  F02E         	call	_Busy_eep	;wreg free
 11666  0006F4  0100               	movlb	0	; () banked
 11667  0006F6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11668  0006F8  6B60               	clrf	?_Write_b_eep& (0+255),b
 11669  0006FA  0EFF               	movlw	255
 11670  0006FC  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11671  0006FE  EC67  F02D         	call	_Write_b_eep	;wreg free
 11672  000702  00FF               	reset		;# 
 11673                           
 11674                           ;main.c: 530: }
 11675  000704  EF88  F00C         	goto	l10759
 11676  000708                     l10167:
 11677                           
 11678                           ; BSR set to: 1
 11679                           ;main.c: 532: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11680  000708  0E01               	movlw	high _cmdbuf
 11681  00070A  0100               	movlb	0	; () banked
 11682  00070C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11683  00070E  0E04               	movlw	low _cmdbuf
 11684  000710  6F6D               	movwf	?_stristr& (0+255),b
 11685  000712  0E7F               	movlw	high STR_8
 11686  000714  6F70               	movwf	(?_stristr+3)& (0+255),b
 11687  000716  0EB6               	movlw	low STR_8
 11688  000718  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11689  00071A  ECA1  F028         	call	_stristr	;wreg free
 11690  00071E  EC98  F00C         	call	PL2	;call to abstracted procedure
 11691  000722  E104               	bnz	u12385
 11692  000724  0100               	movlb	0	; () banked
 11693  000726  516D               	movf	?_stristr& (0+255),w,b
 11694  000728  0101               	movlb	1	; () banked
 11695  00072A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11696  00072C                     u12385:
 11697  00072C  E10C               	bnz	l10175
 11698                           
 11699                           ; BSR set to: 1
 11700                           ;main.c: 533: bSilent = 0;
 11701  00072E  6B01               	clrf	_bSilent& (0+255),b
 11702                           
 11703                           ; BSR set to: 1
 11704                           ;main.c: 534: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11705  000730  0E00               	movlw	0
 11706  000732  EC0E  F02E         	call	_ECANSetOperationMode
 11707                           
 11708                           ; BSR set to: 0
 11709                           ;main.c: 535: putsUSART((char *) "+OK\r\n");
 11710  000736  0E7F               	movlw	high STR_9
 11711  000738  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11712  00073A  0E7F               	movlw	low STR_9
 11713  00073C  6F61               	movwf	?_putsUSART& (0+255),b
 11714  00073E  EC4F  F02B         	call	_putsUSART	;wreg free
 11715                           
 11716                           ;main.c: 536: }
 11717  000742  EF88  F00C         	goto	l10759
 11718  000746                     l10175:
 11719                           
 11720                           ; BSR set to: 1
 11721                           ;main.c: 538: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11722  000746  0E01               	movlw	high _cmdbuf
 11723  000748  0100               	movlb	0	; () banked
 11724  00074A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11725  00074C  0E04               	movlw	low _cmdbuf
 11726  00074E  6F6D               	movwf	?_stristr& (0+255),b
 11727  000750  0E7F               	movlw	high STR_10
 11728  000752  6F70               	movwf	(?_stristr+3)& (0+255),b
 11729  000754  0E5D               	movlw	low STR_10
 11730  000756  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11731  000758  ECA1  F028         	call	_stristr	;wreg free
 11732  00075C  EC98  F00C         	call	PL2	;call to abstracted procedure
 11733  000760  E104               	bnz	u12395
 11734  000762  0100               	movlb	0	; () banked
 11735  000764  516D               	movf	?_stristr& (0+255),w,b
 11736  000766  0101               	movlb	1	; () banked
 11737  000768  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11738  00076A                     u12395:
 11739  00076A  E10D               	bnz	l10183
 11740                           
 11741                           ; BSR set to: 1
 11742                           ;main.c: 539: bSilent = 1;
 11743  00076C  0E01               	movlw	1
 11744  00076E  6F01               	movwf	_bSilent& (0+255),b
 11745                           
 11746                           ; BSR set to: 1
 11747                           ;main.c: 540: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11748  000770  0E00               	movlw	0
 11749  000772  EC0E  F02E         	call	_ECANSetOperationMode
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;main.c: 541: putsUSART((char *) "+OK\r\n");
 11753  000776  0E7F               	movlw	high STR_9
 11754  000778  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11755  00077A  0E7F               	movlw	low STR_9
 11756  00077C  6F61               	movwf	?_putsUSART& (0+255),b
 11757  00077E  EC4F  F02B         	call	_putsUSART	;wreg free
 11758                           
 11759                           ;main.c: 542: }
 11760  000782  EF88  F00C         	goto	l10759
 11761  000786                     l10183:
 11762                           
 11763                           ; BSR set to: 1
 11764                           ;main.c: 544: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11765  000786  0E01               	movlw	high _cmdbuf
 11766  000788  0100               	movlb	0	; () banked
 11767  00078A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11768  00078C  0E04               	movlw	low _cmdbuf
 11769  00078E  6F6D               	movwf	?_stristr& (0+255),b
 11770  000790  0E7F               	movlw	high STR_12
 11771  000792  6F70               	movwf	(?_stristr+3)& (0+255),b
 11772  000794  0E91               	movlw	low STR_12
 11773  000796  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11774  000798  ECA1  F028         	call	_stristr	;wreg free
 11775  00079C  EC98  F00C         	call	PL2	;call to abstracted procedure
 11776  0007A0  E104               	bnz	u12405
 11777  0007A2  0100               	movlb	0	; () banked
 11778  0007A4  516D               	movf	?_stristr& (0+255),w,b
 11779  0007A6  0101               	movlb	1	; () banked
 11780  0007A8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11781  0007AA                     u12405:
 11782  0007AA  E10D               	bnz	l10191
 11783                           
 11784                           ; BSR set to: 1
 11785                           ;main.c: 545: bSilent = 1;
 11786  0007AC  0E01               	movlw	1
 11787  0007AE  6F01               	movwf	_bSilent& (0+255),b
 11788                           
 11789                           ; BSR set to: 1
 11790                           ;main.c: 546: ECANSetOperationMode(0x20);
 11791  0007B0  0E20               	movlw	32
 11792  0007B2  EC0E  F02E         	call	_ECANSetOperationMode
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;main.c: 547: putsUSART((char *) "+OK\r\n");
 11796  0007B6  0E7F               	movlw	high STR_9
 11797  0007B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11798  0007BA  0E7F               	movlw	low STR_9
 11799  0007BC  6F61               	movwf	?_putsUSART& (0+255),b
 11800  0007BE  EC4F  F02B         	call	_putsUSART	;wreg free
 11801                           
 11802                           ;main.c: 548: }
 11803  0007C2  EF88  F00C         	goto	l10759
 11804  0007C6                     l10191:
 11805                           
 11806                           ; BSR set to: 1
 11807                           ;main.c: 550: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11808  0007C6  0E01               	movlw	high _cmdbuf
 11809  0007C8  0100               	movlb	0	; () banked
 11810  0007CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11811  0007CC  0E04               	movlw	low _cmdbuf
 11812  0007CE  6F6D               	movwf	?_stristr& (0+255),b
 11813  0007D0  0E7E               	movlw	high STR_14
 11814  0007D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 11815  0007D4  0ECC               	movlw	low STR_14
 11816  0007D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11817  0007D8  ECA1  F028         	call	_stristr	;wreg free
 11818  0007DC  EC98  F00C         	call	PL2	;call to abstracted procedure
 11819  0007E0  E104               	bnz	u12415
 11820  0007E2  0100               	movlb	0	; () banked
 11821  0007E4  516D               	movf	?_stristr& (0+255),w,b
 11822  0007E6  0101               	movlb	1	; () banked
 11823  0007E8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11824  0007EA                     u12415:
 11825  0007EA  E10C               	bnz	l10199
 11826                           
 11827                           ; BSR set to: 1
 11828                           ;main.c: 551: bSilent = 0;
 11829  0007EC  6B01               	clrf	_bSilent& (0+255),b
 11830                           
 11831                           ; BSR set to: 1
 11832                           ;main.c: 552: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11833  0007EE  0E40               	movlw	64
 11834  0007F0  EC0E  F02E         	call	_ECANSetOperationMode
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;main.c: 553: putsUSART((char *) "+OK\r\n");
 11838  0007F4  0E7F               	movlw	high STR_9
 11839  0007F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11840  0007F8  0E7F               	movlw	low STR_9
 11841  0007FA  6F61               	movwf	?_putsUSART& (0+255),b
 11842  0007FC  EC4F  F02B         	call	_putsUSART	;wreg free
 11843                           
 11844                           ;main.c: 554: }
 11845  000800  EF88  F00C         	goto	l10759
 11846  000804                     l10199:
 11847                           
 11848                           ; BSR set to: 1
 11849                           ;main.c: 556: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11850  000804  0E01               	movlw	high _cmdbuf
 11851  000806  0100               	movlb	0	; () banked
 11852  000808  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11853  00080A  0E04               	movlw	low _cmdbuf
 11854  00080C  6F6D               	movwf	?_stristr& (0+255),b
 11855  00080E  0E7F               	movlw	high STR_16
 11856  000810  6F70               	movwf	(?_stristr+3)& (0+255),b
 11857  000812  0E4F               	movlw	low STR_16
 11858  000814  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11859  000816  ECA1  F028         	call	_stristr	;wreg free
 11860  00081A  EC98  F00C         	call	PL2	;call to abstracted procedure
 11861  00081E  E104               	bnz	u12425
 11862  000820  0100               	movlb	0	; () banked
 11863  000822  516D               	movf	?_stristr& (0+255),w,b
 11864  000824  0101               	movlb	1	; () banked
 11865  000826  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11866  000828                     u12425:
 11867  000828  E10C               	bnz	l10207
 11868                           
 11869                           ; BSR set to: 1
 11870                           ;main.c: 557: bSilent = 0;
 11871  00082A  6B01               	clrf	_bSilent& (0+255),b
 11872                           
 11873                           ; BSR set to: 1
 11874                           ;main.c: 558: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11875  00082C  0E60               	movlw	96
 11876  00082E  EC0E  F02E         	call	_ECANSetOperationMode
 11877                           
 11878                           ; BSR set to: 0
 11879                           ;main.c: 559: putsUSART((char *) "+OK\r\n");
 11880  000832  0E7F               	movlw	high STR_9
 11881  000834  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11882  000836  0E7F               	movlw	low STR_9
 11883  000838  6F61               	movwf	?_putsUSART& (0+255),b
 11884  00083A  EC4F  F02B         	call	_putsUSART	;wreg free
 11885                           
 11886                           ;main.c: 560: }
 11887  00083E  EF88  F00C         	goto	l10759
 11888  000842                     l10207:
 11889                           
 11890                           ; BSR set to: 1
 11891                           ;main.c: 562: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11892  000842  0E01               	movlw	high _cmdbuf
 11893  000844  0100               	movlb	0	; () banked
 11894  000846  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11895  000848  0E04               	movlw	low _cmdbuf
 11896  00084A  6F6D               	movwf	?_stristr& (0+255),b
 11897  00084C  0E7F               	movlw	high STR_18
 11898  00084E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11899  000850  0E0D               	movlw	low STR_18
 11900  000852  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11901  000854  ECA1  F028         	call	_stristr	;wreg free
 11902  000858  EC98  F00C         	call	PL2	;call to abstracted procedure
 11903  00085C  E104               	bnz	u12435
 11904  00085E  0100               	movlb	0	; () banked
 11905  000860  516D               	movf	?_stristr& (0+255),w,b
 11906  000862  0101               	movlb	1	; () banked
 11907  000864  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11908  000866                     u12435:
 11909  000866  E10B               	bnz	l10213
 11910                           
 11911                           ; BSR set to: 1
 11912                           ;main.c: 563: printFirmwareVersion();
 11913  000868  ECD7  F027         	call	_printFirmwareVersion	;wreg free
 11914                           
 11915                           ;main.c: 564: putsUSART((char *) "+OK\r\n");
 11916  00086C  0E7F               	movlw	high STR_9
 11917  00086E  0100               	movlb	0	; () banked
 11918  000870  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11919  000872  0E7F               	movlw	low STR_9
 11920  000874  6F61               	movwf	?_putsUSART& (0+255),b
 11921  000876  EC4F  F02B         	call	_putsUSART	;wreg free
 11922                           
 11923                           ;main.c: 565: }
 11924  00087A  EF88  F00C         	goto	l10759
 11925  00087E                     l10213:
 11926                           
 11927                           ; BSR set to: 1
 11928                           ;main.c: 566: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11929  00087E  0E01               	movlw	high _cmdbuf
 11930  000880  0100               	movlb	0	; () banked
 11931  000882  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11932  000884  0E04               	movlw	low _cmdbuf
 11933  000886  6F6D               	movwf	?_stristr& (0+255),b
 11934  000888  0E7F               	movlw	high STR_20
 11935  00088A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11936  00088C  0E48               	movlw	low STR_20
 11937  00088E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11938  000890  ECA1  F028         	call	_stristr	;wreg free
 11939  000894  EC98  F00C         	call	PL2	;call to abstracted procedure
 11940  000898  E104               	bnz	u12445
 11941  00089A  0100               	movlb	0	; () banked
 11942  00089C  516D               	movf	?_stristr& (0+255),w,b
 11943  00089E  0101               	movlb	1	; () banked
 11944  0008A0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11945  0008A2                     u12445:
 11946  0008A2  E169               	bnz	l10249
 11947                           
 11948                           ; BSR set to: 1
 11949                           ;main.c: 567: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11950  0008A4  506F               	movf	3951,w,c	;volatile
 11951  0008A6  0BE0               	andlw	224
 11952  0008A8  0102               	movlb	2	; () banked
 11953  0008AA  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11954                           
 11955                           ; BSR set to: 2
 11956                           ;main.c: 568: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11957  0008AC  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11958  0008AE  D00C               	goto	l10223
 11959                           
 11960                           ; BSR set to: 2
 11961  0008B0  0101               	movlb	1	; () banked
 11962  0008B2  6701               	tstfsz	_bSilent& (0+255),b
 11963  0008B4  D009               	goto	l10223
 11964                           
 11965                           ; BSR set to: 1
 11966                           ;main.c: 569: putsUSART((char *) "+OK - Normal mode\r\n");
 11967  0008B6  0E7D               	movlw	high STR_21
 11968  0008B8  0100               	movlb	0	; () banked
 11969  0008BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11970  0008BC  0E82               	movlw	low STR_21
 11971  0008BE  6F61               	movwf	?_putsUSART& (0+255),b
 11972  0008C0  EC4F  F02B         	call	_putsUSART	;wreg free
 11973                           
 11974                           ;main.c: 570: }
 11975  0008C4  EF88  F00C         	goto	l10759
 11976  0008C8                     l10223:
 11977                           
 11978                           ;main.c: 571: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11979  0008C8  0102               	movlb	2	; () banked
 11980  0008CA  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11981  0008CC  0E01               	movlw	1
 11982  0008CE  A4D8               	btfss	status,2,c
 11983  0008D0  0E00               	movlw	0
 11984  0008D2  0101               	movlb	1	; () banked
 11985  0008D4  1501               	andwf	_bSilent& (0+255),w,b
 11986  0008D6  E009               	bz	l10227
 11987                           
 11988                           ; BSR set to: 1
 11989                           ;main.c: 572: putsUSART((char *) "+OK - Silent mode\r\n");
 11990  0008D8  0E7D               	movlw	high STR_22
 11991  0008DA  0100               	movlb	0	; () banked
 11992  0008DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11993  0008DE  0E96               	movlw	low STR_22
 11994  0008E0  6F61               	movwf	?_putsUSART& (0+255),b
 11995  0008E2  EC4F  F02B         	call	_putsUSART	;wreg free
 11996                           
 11997                           ;main.c: 573: }
 11998  0008E6  EF88  F00C         	goto	l10759
 11999  0008EA                     l10227:
 12000                           
 12001                           ; BSR set to: 1
 12002                           ;main.c: 574: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12003  0008EA  0102               	movlb	2	; () banked
 12004  0008EC  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12005  0008EE  0A20               	xorlw	32
 12006  0008F0  E109               	bnz	l10231
 12007                           
 12008                           ; BSR set to: 2
 12009                           ;main.c: 575: putsUSART((char *) "+OK - Sleep mode\r\n");
 12010  0008F2  0E7D               	movlw	high STR_23
 12011  0008F4  0100               	movlb	0	; () banked
 12012  0008F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12013  0008F8  0ED2               	movlw	low STR_23
 12014  0008FA  6F61               	movwf	?_putsUSART& (0+255),b
 12015  0008FC  EC4F  F02B         	call	_putsUSART	;wreg free
 12016                           
 12017                           ;main.c: 576: }
 12018  000900  EF88  F00C         	goto	l10759
 12019  000904                     l10231:
 12020                           
 12021                           ; BSR set to: 2
 12022                           ;main.c: 577: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12023  000904  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12024  000906  0A40               	xorlw	64
 12025  000908  E109               	bnz	l10235
 12026                           
 12027                           ; BSR set to: 2
 12028                           ;main.c: 578: putsUSART((char *) "+OK - Loopback mode\r\n");
 12029  00090A  0E7D               	movlw	high STR_24
 12030  00090C  0100               	movlb	0	; () banked
 12031  00090E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12032  000910  0E05               	movlw	low STR_24
 12033  000912  6F61               	movwf	?_putsUSART& (0+255),b
 12034  000914  EC4F  F02B         	call	_putsUSART	;wreg free
 12035                           
 12036                           ;main.c: 579: }
 12037  000918  EF88  F00C         	goto	l10759
 12038  00091C                     l10235:
 12039                           
 12040                           ; BSR set to: 2
 12041                           ;main.c: 580: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12042  00091C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12043  00091E  0A60               	xorlw	96
 12044  000920  E109               	bnz	l10239
 12045                           
 12046                           ; BSR set to: 2
 12047                           ;main.c: 581: putsUSART((char *) "+OK - Listen only mode\r\n");
 12048  000922  0E7B               	movlw	high STR_25
 12049  000924  0100               	movlb	0	; () banked
 12050  000926  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12051  000928  0ECE               	movlw	low STR_25
 12052  00092A  6F61               	movwf	?_putsUSART& (0+255),b
 12053  00092C  EC4F  F02B         	call	_putsUSART	;wreg free
 12054                           
 12055                           ;main.c: 582: }
 12056  000930  EF88  F00C         	goto	l10759
 12057  000934                     l10239:
 12058                           
 12059                           ; BSR set to: 2
 12060                           ;main.c: 583: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12061  000934  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12062  000936  0A80               	xorlw	128
 12063  000938  E109               	bnz	l10243
 12064                           
 12065                           ; BSR set to: 2
 12066                           ;main.c: 584: putsUSART((char *) "+OK - Closed mode\r\n");
 12067  00093A  0E7D               	movlw	high STR_26
 12068  00093C  0100               	movlb	0	; () banked
 12069  00093E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12070  000940  0E6E               	movlw	low STR_26
 12071  000942  6F61               	movwf	?_putsUSART& (0+255),b
 12072  000944  EC4F  F02B         	call	_putsUSART	;wreg free
 12073                           
 12074                           ;main.c: 585: }
 12075  000948  EF88  F00C         	goto	l10759
 12076  00094C                     l10243:
 12077                           
 12078                           ; BSR set to: 2
 12079                           ;main.c: 586: else if (ECAN_OP_MODE_BITS == ifmode) {
 12080  00094C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12081  00094E  0AE0               	xorlw	224
 12082  000950  E109               	bnz	l10247
 12083                           
 12084                           ; BSR set to: 2
 12085                           ;main.c: 587: putsUSART((char *) "+OK - Bits mode\r\n");
 12086  000952  0E7D               	movlw	high STR_27
 12087  000954  0100               	movlb	0	; () banked
 12088  000956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12089  000958  0EE5               	movlw	low STR_27
 12090  00095A  6F61               	movwf	?_putsUSART& (0+255),b
 12091  00095C  EC4F  F02B         	call	_putsUSART	;wreg free
 12092                           
 12093                           ;main.c: 588: }
 12094  000960  EF88  F00C         	goto	l10759
 12095  000964                     l10247:
 12096                           
 12097                           ; BSR set to: 2
 12098                           ;main.c: 589: else {
 12099                           ;main.c: 590: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12100  000964  0E7C               	movlw	high STR_28
 12101  000966  0100               	movlb	0	; () banked
 12102  000968  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12103  00096A  0E48               	movlw	low STR_28
 12104  00096C  6F61               	movwf	?_putsUSART& (0+255),b
 12105  00096E  EC4F  F02B         	call	_putsUSART	;wreg free
 12106  000972  EF88  F00C         	goto	l10759
 12107  000976                     l10249:
 12108                           
 12109                           ; BSR set to: 1
 12110                           ;main.c: 595: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12111  000976  0E01               	movlw	high _cmdbuf
 12112  000978  0100               	movlb	0	; () banked
 12113  00097A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12114  00097C  0E04               	movlw	low _cmdbuf
 12115  00097E  6F6D               	movwf	?_stristr& (0+255),b
 12116  000980  0E7F               	movlw	high STR_29
 12117  000982  6F70               	movwf	(?_stristr+3)& (0+255),b
 12118  000984  0EEA               	movlw	low STR_29
 12119  000986  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12120  000988  ECA1  F028         	call	_stristr	;wreg free
 12121  00098C  EC98  F00C         	call	PL2	;call to abstracted procedure
 12122  000990  E104               	bnz	u12545
 12123  000992  0100               	movlb	0	; () banked
 12124  000994  516D               	movf	?_stristr& (0+255),w,b
 12125  000996  0101               	movlb	1	; () banked
 12126  000998  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12127  00099A                     u12545:
 12128  00099A  E001 D0D9          	bnz	l10303
 12129                           
 12130                           ; BSR set to: 1
 12131                           ;main.c: 597: char *p = strtok(cmdbuf, ",");
 12132  00099E  ECFB  F00C         	call	PL32	;call to abstracted procedure
 12133  0009A2  EC8E  F027         	call	_strtok	;wreg free
 12134  0009A6  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12135  0009AA  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;main.c: 600: vscpPriority = 3;
 12139  0009AE  0E03               	movlw	3
 12140  0009B0  0101               	movlb	1	; () banked
 12141  0009B2  6FAF               	movwf	_vscpPriority& (0+255),b
 12142                           
 12143                           ; BSR set to: 1
 12144                           ;main.c: 601: if ((0) != p) {
 12145  0009B4  0102               	movlb	2	; () banked
 12146  0009B6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12147  0009B8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12148  0009BA  E009               	bz	l10259
 12149                           
 12150                           ; BSR set to: 2
 12151                           ;main.c: 602: vscpPriority = atoi(p);
 12152  0009BC  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12153  0009C0  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12154  0009C4  ECC8  F01F         	call	_atoi	;wreg free
 12155  0009C8  5166               	movf	?_atoi& (0+255),w,b
 12156  0009CA  0101               	movlb	1	; () banked
 12157  0009CC  6FAF               	movwf	_vscpPriority& (0+255),b
 12158  0009CE                     l10259:
 12159                           
 12160                           ;main.c: 603: }
 12161                           ;main.c: 606: vscpClass = 0;
 12162  0009CE  0101               	movlb	1	; () banked
 12163  0009D0  6BAC               	clrf	_vscpClass& (0+255),b
 12164  0009D2  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12165                           
 12166                           ; BSR set to: 1
 12167                           ;main.c: 607: if ((0) != (p = strtok((0), ","))) {
 12168  0009D4  ECB1  F00C         	call	PL6	;call to abstracted procedure
 12169  0009D8  EC8E  F027         	call	_strtok	;wreg free
 12170  0009DC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12171  0009E0  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12172  0009E4  0102               	movlb	2	; () banked
 12173  0009E6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12174  0009E8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12175  0009EA  E00A               	bz	l10265
 12176                           
 12177                           ; BSR set to: 2
 12178                           ;main.c: 608: vscpClass = atoi(p);
 12179  0009EC  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12180  0009F0  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12181  0009F4  ECC8  F01F         	call	_atoi	;wreg free
 12182  0009F8  C066  F1AC         	movff	?_atoi,_vscpClass
 12183  0009FC  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12184  000A00                     l10265:
 12185                           
 12186                           ;main.c: 609: }
 12187                           ;main.c: 612: vscpType = 0;
 12188  000A00  0101               	movlb	1	; () banked
 12189  000A02  6BB1               	clrf	_vscpType& (0+255),b
 12190                           
 12191                           ; BSR set to: 1
 12192                           ;main.c: 613: if ((0) != (p = strtok((0), ","))) {
 12193  000A04  ECB1  F00C         	call	PL6	;call to abstracted procedure
 12194  000A08  EC8E  F027         	call	_strtok	;wreg free
 12195  000A0C  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12196  000A10  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12197  000A14  0102               	movlb	2	; () banked
 12198  000A16  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12199  000A18  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12200  000A1A  E009               	bz	l10271
 12201                           
 12202                           ; BSR set to: 2
 12203                           ;main.c: 614: vscpType = atoi(p);
 12204  000A1C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12205  000A20  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12206  000A24  ECC8  F01F         	call	_atoi	;wreg free
 12207  000A28  5166               	movf	?_atoi& (0+255),w,b
 12208  000A2A  0101               	movlb	1	; () banked
 12209  000A2C  6FB1               	movwf	_vscpType& (0+255),b
 12210  000A2E                     l10271:
 12211                           
 12212                           ;main.c: 615: }
 12213                           ;main.c: 618: vscpNodeId = 0;
 12214  000A2E  0101               	movlb	1	; () banked
 12215  000A30  6BAE               	clrf	_vscpNodeId& (0+255),b
 12216                           
 12217                           ; BSR set to: 1
 12218                           ;main.c: 619: if ((0) != (p = strtok((0), ","))) {
 12219  000A32  ECB1  F00C         	call	PL6	;call to abstracted procedure
 12220  000A36  EC8E  F027         	call	_strtok	;wreg free
 12221  000A3A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12222  000A3E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12223  000A42  0102               	movlb	2	; () banked
 12224  000A44  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12225  000A46  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12226  000A48  E009               	bz	l10277
 12227                           
 12228                           ; BSR set to: 2
 12229                           ;main.c: 620: vscpNodeId = atoi(p);
 12230  000A4A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12231  000A4E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12232  000A52  ECC8  F01F         	call	_atoi	;wreg free
 12233  000A56  5166               	movf	?_atoi& (0+255),w,b
 12234  000A58  0101               	movlb	1	; () banked
 12235  000A5A  6FAE               	movwf	_vscpNodeId& (0+255),b
 12236  000A5C                     l10277:
 12237                           
 12238                           ;main.c: 621: }
 12239                           ;main.c: 624: vscpSize = 0;
 12240  000A5C  0101               	movlb	1	; () banked
 12241  000A5E  6BB0               	clrf	_vscpSize& (0+255),b
 12242                           
 12243                           ; BSR set to: 1
 12244                           ;main.c: 625: if ((0) != (p = strtok((0), ","))) {
 12245  000A60  ECB1  F00C         	call	PL6	;call to abstracted procedure
 12246  000A64  EC8E  F027         	call	_strtok	;wreg free
 12247  000A68  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12248  000A6C  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12249  000A70  0102               	movlb	2	; () banked
 12250  000A72  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12251  000A74  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12252  000A76  E009               	bz	l10283
 12253                           
 12254                           ; BSR set to: 2
 12255                           ;main.c: 626: vscpSize = atoi(p);
 12256  000A78  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12257  000A7C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12258  000A80  ECC8  F01F         	call	_atoi	;wreg free
 12259  000A84  5166               	movf	?_atoi& (0+255),w,b
 12260  000A86  0101               	movlb	1	; () banked
 12261  000A88  6FB0               	movwf	_vscpSize& (0+255),b
 12262  000A8A                     l10283:
 12263                           
 12264                           ;main.c: 627: }
 12265                           ;main.c: 629: memset(vscpData, 0, 8);
 12266  000A8A  0E01               	movlw	high _vscpData
 12267  000A8C  0100               	movlb	0	; () banked
 12268  000A8E  6F61               	movwf	(?_memset+1)& (0+255),b
 12269  000A90  0EA4               	movlw	low _vscpData
 12270  000A92  6F60               	movwf	?_memset& (0+255),b
 12271  000A94  6B63               	clrf	(?_memset+3)& (0+255),b
 12272  000A96  6B62               	clrf	(?_memset+2)& (0+255),b
 12273  000A98  6B65               	clrf	(?_memset+5)& (0+255),b
 12274  000A9A  0E08               	movlw	8
 12275  000A9C  6F64               	movwf	(?_memset+4)& (0+255),b
 12276  000A9E  ECC9  F02D         	call	_memset	;wreg free
 12277                           
 12278                           ; BSR set to: 0
 12279                           ;main.c: 630: for (i = 0; i < vscpSize; i++) {
 12280  000AA2  0102               	movlb	2	; () banked
 12281  000AA4  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12282  000AA6  D01D               	goto	l10293
 12283  000AA8                     l10287:
 12284                           
 12285                           ; BSR set to: 2
 12286                           ;main.c: 631: if ((0) != (p = strtok((0), ","))) {
 12287  000AA8  ECB1  F00C         	call	PL6	;call to abstracted procedure
 12288  000AAC  EC8E  F027         	call	_strtok	;wreg free
 12289  000AB0  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12290  000AB4  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12291  000AB8  0102               	movlb	2	; () banked
 12292  000ABA  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12293  000ABC  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12294  000ABE  E016               	bz	l10295
 12295                           
 12296                           ; BSR set to: 2
 12297                           ;main.c: 632: vscpData[ i ] = atoi(p);
 12298  000AC0  0EA4               	movlw	low _vscpData
 12299  000AC2  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12300  000AC4  6ED9               	movwf	fsr2l,c
 12301  000AC6  6ADA               	clrf	fsr2h,c
 12302  000AC8  0101               	movlb	1	; () banked
 12303  000ACA  0E01               	movlw	high _vscpData
 12304  000ACC  22DA               	addwfc	fsr2h,f,c
 12305  000ACE  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12306  000AD2  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12307  000AD6  ECC8  F01F         	call	_atoi	;wreg free
 12308  000ADA  5166               	movf	?_atoi& (0+255),w,b
 12309  000ADC  6EDF               	movwf	indf2,c
 12310                           
 12311                           ; BSR set to: 0
 12312                           
 12313                           ;main.c: 633: } else {
 12314  000ADE  0102               	movlb	2	; () banked
 12315  000AE0  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12316  000AE2                     l10293:
 12317                           
 12318                           ; BSR set to: 2
 12319  000AE2  0101               	movlb	1	; () banked
 12320  000AE4  51B0               	movf	_vscpSize& (0+255),w,b
 12321  000AE6  0102               	movlb	2	; () banked
 12322  000AE8  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12323  000AEA  E3DE               	bnc	l10287
 12324  000AEC                     l10295:
 12325                           
 12326                           ; BSR set to: 2
 12327                           ;main.c: 635: }
 12328                           ;main.c: 636: }
 12329                           ;main.c: 638: if ( sendVSCPFrame(vscpClass,
 12330                           ;main.c: 639: vscpType,
 12331                           ;main.c: 640: vscpNodeId,
 12332                           ;main.c: 641: vscpPriority,
 12333                           ;main.c: 642: vscpSize,
 12334                           ;main.c: 643: vscpData ) ) {
 12335  000AEC  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12336  000AF0  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12337  000AF4  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12338  000AF8  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12339  000AFC  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12340  000B00  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12341  000B04  0E01               	movlw	high _vscpData
 12342  000B06  0100               	movlb	0	; () banked
 12343  000B08  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12344  000B0A  0EA4               	movlw	low _vscpData
 12345  000B0C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12346  000B0E  EC5B  F025         	call	_sendVSCPFrame	;wreg free
 12347  000B12  0900               	iorlw	0
 12348  000B14  E015               	bz	l10301
 12349                           
 12350                           ; BSR set to: 0
 12351                           ;main.c: 645: cntTxFrames++;
 12352  000B16  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12353  000B18  0E00               	movlw	0
 12354  000B1A  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12355  000B1C  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12356  000B1E  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12357                           
 12358                           ;main.c: 646: cntTxBytes += vscpSize;
 12359  000B20  0101               	movlb	1	; () banked
 12360  000B22  51B0               	movf	_vscpSize& (0+255),w,b
 12361  000B24  0100               	movlb	0	; () banked
 12362  000B26  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12363  000B28  0E00               	movlw	0
 12364  000B2A  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12365  000B2C  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12366  000B2E  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;main.c: 647: putsUSART((char *) "+OK\r\n");
 12370  000B30  0E7F               	movlw	high STR_9
 12371  000B32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12372  000B34  0E7F               	movlw	low STR_9
 12373  000B36  6F61               	movwf	?_putsUSART& (0+255),b
 12374  000B38  EC4F  F02B         	call	_putsUSART	;wreg free
 12375                           
 12376                           ;main.c: 648: }
 12377  000B3C  EF88  F00C         	goto	l10759
 12378  000B40                     l10301:
 12379                           
 12380                           ; BSR set to: 0
 12381                           ;main.c: 649: else {
 12382                           ;main.c: 650: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12383  000B40  0E7A               	movlw	high STR_37
 12384  000B42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12385  000B44  0E48               	movlw	low STR_37
 12386  000B46  6F61               	movwf	?_putsUSART& (0+255),b
 12387  000B48  EC4F  F02B         	call	_putsUSART	;wreg free
 12388  000B4C  EF88  F00C         	goto	l10759
 12389  000B50                     l10303:
 12390                           
 12391                           ; BSR set to: 1
 12392                           ;main.c: 654: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12393  000B50  0E01               	movlw	high _cmdbuf
 12394  000B52  0100               	movlb	0	; () banked
 12395  000B54  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12396  000B56  0E04               	movlw	low _cmdbuf
 12397  000B58  6F6D               	movwf	?_stristr& (0+255),b
 12398  000B5A  0E7F               	movlw	high STR_38
 12399  000B5C  6F70               	movwf	(?_stristr+3)& (0+255),b
 12400  000B5E  0EE7               	movlw	low STR_38
 12401  000B60  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12402  000B62  ECA1  F028         	call	_stristr	;wreg free
 12403  000B66  EC98  F00C         	call	PL2	;call to abstracted procedure
 12404  000B6A  E104               	bnz	u12635
 12405  000B6C  0100               	movlb	0	; () banked
 12406  000B6E  516D               	movf	?_stristr& (0+255),w,b
 12407  000B70  0101               	movlb	1	; () banked
 12408  000B72  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12409  000B74                     u12635:
 12410  000B74  E116               	bnz	l10311
 12411                           
 12412                           ; BSR set to: 1
 12413                           ;main.c: 655: if (receivePrintEventVerbose()) {
 12414  000B76  EC2C  F014         	call	_receivePrintEventVerbose	;wreg free
 12415  000B7A  0900               	iorlw	0
 12416  000B7C  E009               	bz	l10309
 12417                           
 12418                           ;main.c: 656: putsUSART((char *) "+OK\r\n");
 12419  000B7E  0E7F               	movlw	high STR_9
 12420  000B80  0100               	movlb	0	; () banked
 12421  000B82  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12422  000B84  0E7F               	movlw	low STR_9
 12423  000B86  6F61               	movwf	?_putsUSART& (0+255),b
 12424  000B88  EC4F  F02B         	call	_putsUSART	;wreg free
 12425                           
 12426                           ;main.c: 657: }
 12427  000B8C  EF88  F00C         	goto	l10759
 12428  000B90                     l10309:
 12429                           
 12430                           ;main.c: 658: else {
 12431                           ;main.c: 659: putsUSART((char *) "+OK - no events\r\n");
 12432  000B90  0E7D               	movlw	high STR_40
 12433  000B92  0100               	movlb	0	; () banked
 12434  000B94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12435  000B96  0EF7               	movlw	low STR_40
 12436  000B98  6F61               	movwf	?_putsUSART& (0+255),b
 12437  000B9A  EC4F  F02B         	call	_putsUSART	;wreg free
 12438  000B9E  EF88  F00C         	goto	l10759
 12439  000BA2                     l10311:
 12440                           
 12441                           ; BSR set to: 1
 12442                           ;main.c: 663: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12443  000BA2  0E01               	movlw	high _cmdbuf
 12444  000BA4  0100               	movlb	0	; () banked
 12445  000BA6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12446  000BA8  0E04               	movlw	low _cmdbuf
 12447  000BAA  6F6D               	movwf	?_stristr& (0+255),b
 12448  000BAC  0E7F               	movlw	high STR_41
 12449  000BAE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12450  000BB0  0ECA               	movlw	low STR_41
 12451  000BB2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12452  000BB4  ECA1  F028         	call	_stristr	;wreg free
 12453  000BB8  EC98  F00C         	call	PL2	;call to abstracted procedure
 12454  000BBC  E104               	bnz	u12655
 12455  000BBE  0100               	movlb	0	; () banked
 12456  000BC0  516D               	movf	?_stristr& (0+255),w,b
 12457  000BC2  0101               	movlb	1	; () banked
 12458  000BC4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12459  000BC6                     u12655:
 12460  000BC6  E10B               	bnz	l10317
 12461                           
 12462                           ; BSR set to: 1
 12463                           ;main.c: 664: printStatistics();
 12464  000BC8  EC3D  F019         	call	_printStatistics	;wreg free
 12465                           
 12466                           ;main.c: 665: putsUSART((char *) "+OK\r\n");
 12467  000BCC  0E7F               	movlw	high STR_9
 12468  000BCE  0100               	movlb	0	; () banked
 12469  000BD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12470  000BD2  0E7F               	movlw	low STR_9
 12471  000BD4  6F61               	movwf	?_putsUSART& (0+255),b
 12472  000BD6  EC4F  F02B         	call	_putsUSART	;wreg free
 12473                           
 12474                           ;main.c: 666: }
 12475  000BDA  EF88  F00C         	goto	l10759
 12476  000BDE                     l10317:
 12477                           
 12478                           ; BSR set to: 1
 12479                           ;main.c: 668: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12480  000BDE  0E01               	movlw	high _cmdbuf
 12481  000BE0  0100               	movlb	0	; () banked
 12482  000BE2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12483  000BE4  0E04               	movlw	low _cmdbuf
 12484  000BE6  6F6D               	movwf	?_stristr& (0+255),b
 12485  000BE8  0E7F               	movlw	high STR_43
 12486  000BEA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12487  000BEC  0ED8               	movlw	low STR_43
 12488  000BEE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12489  000BF0  ECA1  F028         	call	_stristr	;wreg free
 12490  000BF4  EC98  F00C         	call	PL2	;call to abstracted procedure
 12491  000BF8  E104               	bnz	u12665
 12492  000BFA  0100               	movlb	0	; () banked
 12493  000BFC  516D               	movf	?_stristr& (0+255),w,b
 12494  000BFE  0101               	movlb	1	; () banked
 12495  000C00  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12496  000C02                     u12665:
 12497  000C02  E10B               	bnz	l10323
 12498                           
 12499                           ; BSR set to: 1
 12500                           ;main.c: 669: printErrors();
 12501  000C04  ECC1  F012         	call	_printErrors	;wreg free
 12502                           
 12503                           ;main.c: 670: putsUSART((char *) "+OK\r\n");
 12504  000C08  0E7F               	movlw	high STR_9
 12505  000C0A  0100               	movlb	0	; () banked
 12506  000C0C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12507  000C0E  0E7F               	movlw	low STR_9
 12508  000C10  6F61               	movwf	?_putsUSART& (0+255),b
 12509  000C12  EC4F  F02B         	call	_putsUSART	;wreg free
 12510                           
 12511                           ;main.c: 671: }
 12512  000C16  EF88  F00C         	goto	l10759
 12513  000C1A                     l10323:
 12514                           
 12515                           ; BSR set to: 1
 12516                           ;main.c: 673: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12517  000C1A  0E01               	movlw	high _cmdbuf
 12518  000C1C  0100               	movlb	0	; () banked
 12519  000C1E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12520  000C20  0E04               	movlw	low _cmdbuf
 12521  000C22  6F6D               	movwf	?_stristr& (0+255),b
 12522  000C24  0E7F               	movlw	high STR_45
 12523  000C26  6F70               	movwf	(?_stristr+3)& (0+255),b
 12524  000C28  0EC5               	movlw	low STR_45
 12525  000C2A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12526  000C2C  ECA1  F028         	call	_stristr	;wreg free
 12527  000C30  EC98  F00C         	call	PL2	;call to abstracted procedure
 12528  000C34  E104               	bnz	u12675
 12529  000C36  0100               	movlb	0	; () banked
 12530  000C38  516D               	movf	?_stristr& (0+255),w,b
 12531  000C3A  0101               	movlb	1	; () banked
 12532  000C3C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12533  000C3E                     u12675:
 12534  000C3E  E10B               	bnz	l10327
 12535                           
 12536                           ; BSR set to: 1
 12537                           ;main.c: 674: printHelp();
 12538  000C40  EC80  F017         	call	_printHelp	;wreg free
 12539                           
 12540                           ;main.c: 675: putsUSART((char *) "+OK\r\n");
 12541  000C44  0E7F               	movlw	high STR_9
 12542  000C46  0100               	movlb	0	; () banked
 12543  000C48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12544  000C4A  0E7F               	movlw	low STR_9
 12545  000C4C  6F61               	movwf	?_putsUSART& (0+255),b
 12546  000C4E  EC4F  F02B         	call	_putsUSART	;wreg free
 12547                           
 12548                           ;main.c: 676: }
 12549  000C52  EF88  F00C         	goto	l10759
 12550  000C56                     l10327:
 12551                           
 12552                           ; BSR set to: 1
 12553                           ;main.c: 678: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12554  000C56  0E01               	movlw	high _cmdbuf
 12555  000C58  0100               	movlb	0	; () banked
 12556  000C5A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12557  000C5C  0E04               	movlw	low _cmdbuf
 12558  000C5E  6F6D               	movwf	?_stristr& (0+255),b
 12559  000C60  0E7F               	movlw	high STR_47
 12560  000C62  6F70               	movwf	(?_stristr+3)& (0+255),b
 12561  000C64  0EA2               	movlw	low STR_47
 12562  000C66  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12563  000C68  ECA1  F028         	call	_stristr	;wreg free
 12564  000C6C  EC98  F00C         	call	PL2	;call to abstracted procedure
 12565  000C70  E104               	bnz	u12685
 12566  000C72  0100               	movlb	0	; () banked
 12567  000C74  516D               	movf	?_stristr& (0+255),w,b
 12568  000C76  0101               	movlb	1	; () banked
 12569  000C78  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12570  000C7A                     u12685:
 12571  000C7A  E10B               	bnz	l10333
 12572                           
 12573                           ; BSR set to: 1
 12574                           ;main.c: 679: findNodes();
 12575  000C7C  EC4B  F021         	call	_findNodes	;wreg free
 12576                           
 12577                           ;main.c: 680: putsUSART((char *) "+OK\r\n");
 12578  000C80  0E7F               	movlw	high STR_9
 12579  000C82  0100               	movlb	0	; () banked
 12580  000C84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12581  000C86  0E7F               	movlw	low STR_9
 12582  000C88  6F61               	movwf	?_putsUSART& (0+255),b
 12583  000C8A  EC4F  F02B         	call	_putsUSART	;wreg free
 12584                           
 12585                           ;main.c: 681: }
 12586  000C8E  EF88  F00C         	goto	l10759
 12587  000C92                     l10333:
 12588                           
 12589                           ; BSR set to: 1
 12590                           ;main.c: 684: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12591  000C92  0E01               	movlw	high _cmdbuf
 12592  000C94  0100               	movlb	0	; () banked
 12593  000C96  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12594  000C98  0E04               	movlw	low _cmdbuf
 12595  000C9A  6F6D               	movwf	?_stristr& (0+255),b
 12596  000C9C  0E7F               	movlw	high STR_49
 12597  000C9E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12598  000CA0  0EA7               	movlw	low STR_49
 12599  000CA2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12600  000CA4  ECA1  F028         	call	_stristr	;wreg free
 12601  000CA8  EC98  F00C         	call	PL2	;call to abstracted procedure
 12602  000CAC  E104               	bnz	u12695
 12603  000CAE  0100               	movlb	0	; () banked
 12604  000CB0  516D               	movf	?_stristr& (0+255),w,b
 12605  000CB2  0101               	movlb	1	; () banked
 12606  000CB4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12607  000CB6                     u12695:
 12608  000CB6  E001 D1B4          	bnz	l10463
 12609                           
 12610                           ; BSR set to: 1
 12611                           ;main.c: 686: uint8_t i;
 12612                           ;main.c: 687: uint8_t nodeid;
 12613                           ;main.c: 688: uint8_t page = 0;
 12614  000CBA  0102               	movlb	2	; () banked
 12615  000CBC  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12616                           
 12617                           ; BSR set to: 2
 12618                           ;main.c: 689: uint8_t reg;
 12619                           ;main.c: 690: uint8_t value;
 12620                           ;main.c: 691: uint8_t count = 1;
 12621  000CBE  0E01               	movlw	1
 12622  000CC0  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12623                           
 12624                           ; BSR set to: 2
 12625                           ;main.c: 693: strcpy(cmdbuf, cmdbuf + 5);
 12626  000CC2  ECA2  F00C         	call	PL4	;call to abstracted procedure
 12627  000CC6  EC9A  F02D         	call	_strcpy	;wreg free
 12628                           
 12629                           ;main.c: 694: char *p = strtok(cmdbuf, " ");
 12630  000CCA  0E01               	movlw	high _cmdbuf
 12631  000CCC  EC05  F00D         	call	PL36	;call to abstracted procedure
 12632  000CD0  EC8E  F027         	call	_strtok	;wreg free
 12633  000CD4  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1116
 12634  000CD8  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1116+1
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;main.c: 695: if ((0) != p) {
 12638  000CDC  0102               	movlb	2	; () banked
 12639  000CDE  51B3               	movf	(doModeVerbose@p_1116+1)& (0+255),w,b
 12640  000CE0  11B2               	iorwf	doModeVerbose@p_1116& (0+255),w,b
 12641  000CE2  E00A               	bz	l10347
 12642                           
 12643                           ; BSR set to: 2
 12644                           ;main.c: 696: nodeid = atoi(p);
 12645  000CE4  C2B2  F066         	movff	doModeVerbose@p_1116,?_atoi
 12646  000CE8  C2B3  F067         	movff	doModeVerbose@p_1116+1,?_atoi+1
 12647  000CEC  ECC8  F01F         	call	_atoi	;wreg free
 12648  000CF0  5166               	movf	?_atoi& (0+255),w,b
 12649  000CF2  0102               	movlb	2	; () banked
 12650  000CF4  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12651                           
 12652                           ;main.c: 697: } else {
 12653  000CF6  D009               	goto	l10351
 12654  000CF8                     l10347:
 12655                           
 12656                           ; BSR set to: 2
 12657                           ;main.c: 698: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12658  000CF8  0E7C               	movlw	high STR_51
 12659  000CFA  0100               	movlb	0	; () banked
 12660  000CFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12661  000CFE  0E30               	movlw	low STR_51
 12662  000D00  6F61               	movwf	?_putsUSART& (0+255),b
 12663  000D02  EC4F  F02B         	call	_putsUSART	;wreg free
 12664  000D06  EF97  F00C         	goto	l526
 12665  000D0A                     l10351:
 12666                           
 12667                           ; BSR set to: 2
 12668                           ;main.c: 700: }
 12669                           ;main.c: 702: if ((0) != (p = strtok((0), " "))) {
 12670  000D0A  ECF3  F00C         	call	PL28	;call to abstracted procedure
 12671  000D0E  EC8E  F027         	call	_strtok	;wreg free
 12672  000D12  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1116
 12673  000D16  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1116+1
 12674  000D1A  0102               	movlb	2	; () banked
 12675  000D1C  51B3               	movf	(doModeVerbose@p_1116+1)& (0+255),w,b
 12676  000D1E  11B2               	iorwf	doModeVerbose@p_1116& (0+255),w,b
 12677  000D20  E034               	bz	l10359
 12678                           
 12679                           ; BSR set to: 2
 12680                           ;main.c: 704: char *preg;
 12681                           ;main.c: 705: if (preg = strchr(p, ':')) {
 12682  000D22  C2B2  F060         	movff	doModeVerbose@p_1116,?_strchr
 12683  000D26  C2B3  F061         	movff	doModeVerbose@p_1116+1,?_strchr+1
 12684  000D2A  0100               	movlb	0	; () banked
 12685  000D2C  6B63               	clrf	(?_strchr+3)& (0+255),b
 12686  000D2E  0E3A               	movlw	58
 12687  000D30  6F62               	movwf	(?_strchr+2)& (0+255),b
 12688  000D32  EC63  F02A         	call	_strchr	;wreg free
 12689  000D36  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12690  000D3A  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12691  000D3E  0102               	movlb	2	; () banked
 12692  000D40  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12693  000D42  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12694  000D44  E018               	bz	l10357
 12695                           
 12696                           ; BSR set to: 2
 12697                           ;main.c: 706: page = atoi(p);
 12698  000D46  C2B2  F066         	movff	doModeVerbose@p_1116,?_atoi
 12699  000D4A  C2B3  F067         	movff	doModeVerbose@p_1116+1,?_atoi+1
 12700  000D4E  ECC8  F01F         	call	_atoi	;wreg free
 12701  000D52  5166               	movf	?_atoi& (0+255),w,b
 12702  000D54  0102               	movlb	2	; () banked
 12703  000D56  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12704                           
 12705                           ;main.c: 707: reg = atoi(preg + 1);
 12706  000D58  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12707  000D5A  0101               	movlb	1	; () banked
 12708  000D5C  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12709  000D5E  0E00               	movlw	0
 12710  000D60  0102               	movlb	2	; () banked
 12711  000D62  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12712  000D64  0101               	movlb	1	; () banked
 12713  000D66  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12714  000D68  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12715  000D6C  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12716  000D70  ECC8  F01F         	call	_atoi	;wreg free
 12717  000D74  D006               	goto	L7
 12718  000D76                     l10357:
 12719                           
 12720                           ; BSR set to: 2
 12721                           ;main.c: 709: reg = atoi(p);
 12722  000D76  C2B2  F066         	movff	doModeVerbose@p_1116,?_atoi
 12723  000D7A  C2B3  F067         	movff	doModeVerbose@p_1116+1,?_atoi+1
 12724  000D7E  ECC8  F01F         	call	_atoi	;wreg free
 12725  000D82                     L7:
 12726  000D82  5166               	movf	?_atoi& (0+255),w,b
 12727  000D84  0102               	movlb	2	; () banked
 12728  000D86  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12729  000D88  D009               	goto	l10363
 12730  000D8A                     l10359:
 12731                           
 12732                           ; BSR set to: 2
 12733                           ;main.c: 714: else {
 12734                           ;main.c: 715: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12735  000D8A  0E7A               	movlw	high STR_53
 12736  000D8C  0100               	movlb	0	; () banked
 12737  000D8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12738  000D90  0EAB               	movlw	low STR_53
 12739  000D92  6F61               	movwf	?_putsUSART& (0+255),b
 12740  000D94  EC4F  F02B         	call	_putsUSART	;wreg free
 12741  000D98  EF97  F00C         	goto	l526
 12742  000D9C                     l10363:
 12743                           
 12744                           ; BSR set to: 2
 12745                           ;main.c: 717: }
 12746                           ;main.c: 720: if ((0) != (p = strtok((0), " "))) {
 12747  000D9C  ECF3  F00C         	call	PL28	;call to abstracted procedure
 12748  000DA0  EC8E  F027         	call	_strtok	;wreg free
 12749  000DA4  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1116
 12750  000DA8  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1116+1
 12751  000DAC  0102               	movlb	2	; () banked
 12752  000DAE  51B3               	movf	(doModeVerbose@p_1116+1)& (0+255),w,b
 12753  000DB0  11B2               	iorwf	doModeVerbose@p_1116& (0+255),w,b
 12754  000DB2  E00D               	bz	l531
 12755                           
 12756                           ; BSR set to: 2
 12757                           ;main.c: 721: count = atoi(p);
 12758  000DB4  C2B2  F066         	movff	doModeVerbose@p_1116,?_atoi
 12759  000DB8  C2B3  F067         	movff	doModeVerbose@p_1116+1,?_atoi+1
 12760  000DBC  ECC8  F01F         	call	_atoi	;wreg free
 12761  000DC0  5166               	movf	?_atoi& (0+255),w,b
 12762  000DC2  0102               	movlb	2	; () banked
 12763  000DC4  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12764                           
 12765                           ; BSR set to: 2
 12766                           ;main.c: 722: if (0 == count) count = 1;
 12767  000DC6  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12768  000DC8  D002               	goto	l531
 12769                           
 12770                           ; BSR set to: 2
 12771  000DCA  0E01               	movlw	1
 12772  000DCC  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12773  000DCE                     l531:
 12774                           
 12775                           ; BSR set to: 2
 12776                           ;main.c: 723: }
 12777                           ;main.c: 725: BOOL rv = 1;
 12778  000DCE  0E01               	movlw	1
 12779  000DD0  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12780                           
 12781                           ; BSR set to: 2
 12782                           ;main.c: 726: for (i = 0; i < count; i++) {
 12783  000DD2  6BB0               	clrf	doModeVerbose@i_1110& (0+255),b
 12784  000DD4  D10E               	goto	l10455
 12785  000DD6                     l10373:
 12786                           
 12787                           ; BSR set to: 2
 12788                           ;main.c: 728: if (readRegisterExtended(nodeid,
 12789                           ;main.c: 729: page,
 12790                           ;main.c: 730: (reg + i) & 0xff,
 12791                           ;main.c: 731: rwtimeout,
 12792                           ;main.c: 732: &value)) {
 12793  000DD6  0100               	movlb	0	; () banked
 12794  000DD8  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12795  000DDC  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12796  000DDE  0102               	movlb	2	; () banked
 12797  000DE0  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12798  000DE2  25B0               	addwf	doModeVerbose@i_1110& (0+255),w,b
 12799  000DE4  0100               	movlb	0	; () banked
 12800  000DE6  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12801  000DE8  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12802  000DEC  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12803  000DEE  0E02               	movlw	high doModeVerbose@value
 12804  000DF0  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12805  000DF2  0EB1               	movlw	low doModeVerbose@value
 12806  000DF4  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12807  000DF6  0102               	movlb	2	; () banked
 12808  000DF8  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12809  000DFA  ECCD  F020         	call	_readRegisterExtended
 12810  000DFE  0900               	iorlw	0
 12811  000E00  E101 D09D          	bz	l535
 12812                           
 12813                           ;main.c: 733: putsUSART((char *) "Value for reg ");
 12814  000E04  0E7E               	movlw	high STR_55
 12815  000E06  0100               	movlb	0	; () banked
 12816  000E08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12817  000E0A  0E5D               	movlw	low STR_55
 12818  000E0C  6F61               	movwf	?_putsUSART& (0+255),b
 12819  000E0E  EC4F  F02B         	call	_putsUSART	;wreg free
 12820                           
 12821                           ;main.c: 734: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12822  000E12  0101               	movlb	1	; () banked
 12823  000E14  6700               	tstfsz	_bHex& (0+255),b
 12824  000E16  D005               	goto	l10381
 12825                           
 12826                           ; BSR set to: 1
 12827  000E18  0E7F               	movlw	high STR_57
 12828  000E1A  0102               	movlb	2	; () banked
 12829  000E1C  6F95               	movwf	(_doModeVerbose$1128+1)& (0+255),b
 12830  000E1E  0EED               	movlw	low STR_57
 12831  000E20  D004               	goto	L8
 12832  000E22                     l10381:
 12833                           
 12834                           ; BSR set to: 1
 12835  000E22  0E7F               	movlw	high STR_56
 12836  000E24  0102               	movlb	2	; () banked
 12837  000E26  6F95               	movwf	(_doModeVerbose$1128+1)& (0+255),b
 12838  000E28  0E64               	movlw	low STR_56
 12839  000E2A                     L8:
 12840  000E2A  6F94               	movwf	_doModeVerbose$1128& (0+255),b
 12841                           
 12842                           ; BSR set to: 2
 12843  000E2C  0E01               	movlw	high _wrkbuf
 12844  000E2E  0100               	movlb	0	; () banked
 12845  000E30  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12846  000E32  0E54               	movlw	low _wrkbuf
 12847  000E34  6F76               	movwf	?_sprintf& (0+255),b
 12848  000E36  C294  F078         	movff	_doModeVerbose$1128,?_sprintf+2
 12849  000E3A  C295  F079         	movff	_doModeVerbose$1128+1,?_sprintf+3
 12850  000E3E  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12851  000E42  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12852  000E44  EC40  F00D         	call	_sprintf	;wreg free
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;main.c: 735: putsUSART(wrkbuf);
 12856  000E48  0E01               	movlw	high _wrkbuf
 12857  000E4A  0100               	movlb	0	; () banked
 12858  000E4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12859  000E4E  0E54               	movlw	low _wrkbuf
 12860  000E50  6F61               	movwf	?_putsUSART& (0+255),b
 12861  000E52  EC4F  F02B         	call	_putsUSART	;wreg free
 12862  000E56                     l540:
 12863  000E56  A2AC               	btfss	4012,1,c	;volatile
 12864  000E58  D7FE               	goto	l540
 12865                           
 12866                           ;main.c: 737: WriteUSART(':');
 12867  000E5A  0E3A               	movlw	58
 12868  000E5C  EC26  F02E         	call	_WriteUSART
 12869                           
 12870                           ;main.c: 738: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12871  000E60  0101               	movlb	1	; () banked
 12872  000E62  6700               	tstfsz	_bHex& (0+255),b
 12873  000E64  D005               	goto	l10393
 12874                           
 12875                           ; BSR set to: 1
 12876  000E66  0E7F               	movlw	high STR_57
 12877  000E68  0102               	movlb	2	; () banked
 12878  000E6A  6F97               	movwf	(_doModeVerbose$1140+1)& (0+255),b
 12879  000E6C  0EED               	movlw	low STR_57
 12880  000E6E  D004               	goto	L9
 12881  000E70                     l10393:
 12882                           
 12883                           ; BSR set to: 1
 12884  000E70  0E7F               	movlw	high STR_56
 12885  000E72  0102               	movlb	2	; () banked
 12886  000E74  6F97               	movwf	(_doModeVerbose$1140+1)& (0+255),b
 12887  000E76  0E64               	movlw	low STR_56
 12888  000E78                     L9:
 12889  000E78  6F96               	movwf	_doModeVerbose$1140& (0+255),b
 12890                           
 12891                           ; BSR set to: 2
 12892  000E7A  0E01               	movlw	high _wrkbuf
 12893  000E7C  0100               	movlb	0	; () banked
 12894  000E7E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12895  000E80  0E54               	movlw	low _wrkbuf
 12896  000E82  6F76               	movwf	?_sprintf& (0+255),b
 12897  000E84  C296  F078         	movff	_doModeVerbose$1140,?_sprintf+2
 12898  000E88  C297  F079         	movff	_doModeVerbose$1140+1,?_sprintf+3
 12899  000E8C  EC0E  F00D         	call	PL38	;call to abstracted procedure
 12900  000E90  EC40  F00D         	call	_sprintf	;wreg free
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;main.c: 739: putsUSART(wrkbuf);
 12904  000E94  0E01               	movlw	high _wrkbuf
 12905  000E96  0100               	movlb	0	; () banked
 12906  000E98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12907  000E9A  0E54               	movlw	low _wrkbuf
 12908  000E9C  6F61               	movwf	?_putsUSART& (0+255),b
 12909  000E9E  EC4F  F02B         	call	_putsUSART	;wreg free
 12910                           
 12911                           ;main.c: 740: putsUSART((char *) " = ");
 12912  000EA2  0E7E               	movlw	high (STR_243+4)
 12913  000EA4  0100               	movlb	0	; () banked
 12914  000EA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12915  000EA8  0EE9               	movlw	low (STR_243+4)
 12916  000EAA  6F61               	movwf	?_putsUSART& (0+255),b
 12917  000EAC  EC4F  F02B         	call	_putsUSART	;wreg free
 12918                           
 12919                           ;main.c: 741: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12920  000EB0  0101               	movlb	1	; () banked
 12921  000EB2  6700               	tstfsz	_bHex& (0+255),b
 12922  000EB4  D005               	goto	l10405
 12923                           
 12924                           ; BSR set to: 1
 12925  000EB6  0E7F               	movlw	high STR_57
 12926  000EB8  0102               	movlb	2	; () banked
 12927  000EBA  6F99               	movwf	(_doModeVerbose$1145+1)& (0+255),b
 12928  000EBC  0EED               	movlw	low STR_57
 12929  000EBE  D004               	goto	L10
 12930  000EC0                     l10405:
 12931                           
 12932                           ; BSR set to: 1
 12933  000EC0  0E7F               	movlw	high STR_56
 12934  000EC2  0102               	movlb	2	; () banked
 12935  000EC4  6F99               	movwf	(_doModeVerbose$1145+1)& (0+255),b
 12936  000EC6  0E64               	movlw	low STR_56
 12937  000EC8                     L10:
 12938  000EC8  6F98               	movwf	_doModeVerbose$1145& (0+255),b
 12939                           
 12940                           ; BSR set to: 2
 12941  000ECA  0E01               	movlw	high _wrkbuf
 12942  000ECC  0100               	movlb	0	; () banked
 12943  000ECE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12944  000ED0  0E54               	movlw	low _wrkbuf
 12945  000ED2  6F76               	movwf	?_sprintf& (0+255),b
 12946  000ED4  C298  F078         	movff	_doModeVerbose$1145,?_sprintf+2
 12947  000ED8  C299  F079         	movff	_doModeVerbose$1145+1,?_sprintf+3
 12948  000EDC  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12949  000EE0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12950  000EE2  EC40  F00D         	call	_sprintf	;wreg free
 12951                           
 12952                           ; BSR set to: 0
 12953                           ;main.c: 742: putsUSART(wrkbuf);
 12954  000EE6  0E01               	movlw	high _wrkbuf
 12955  000EE8  0100               	movlb	0	; () banked
 12956  000EEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12957  000EEC  0E54               	movlw	low _wrkbuf
 12958  000EEE  6F61               	movwf	?_putsUSART& (0+255),b
 12959  000EF0  EC4F  F02B         	call	_putsUSART	;wreg free
 12960  000EF4                     l551:
 12961  000EF4  A2AC               	btfss	4012,1,c	;volatile
 12962  000EF6  D7FE               	goto	l551
 12963                           
 12964                           ;main.c: 744: WriteUSART(' ');
 12965  000EF8  0E20               	movlw	32
 12966  000EFA  EC26  F02E         	call	_WriteUSART
 12967  000EFE                     l554:
 12968  000EFE  A2AC               	btfss	4012,1,c	;volatile
 12969  000F00  D7FE               	goto	l554
 12970                           
 12971                           ;main.c: 746: if ((value > 32) && (value < 127)) {
 12972  000F02  0E20               	movlw	32
 12973  000F04  0102               	movlb	2	; () banked
 12974  000F06  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12975  000F08  D007               	goto	l10419
 12976                           
 12977                           ; BSR set to: 2
 12978  000F0A  0E7F               	movlw	127
 12979  000F0C  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12980  000F0E  D004               	goto	l10419
 12981                           
 12982                           ; BSR set to: 2
 12983                           ;main.c: 747: WriteUSART(value);
 12984  000F10  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12985  000F12  EC26  F02E         	call	_WriteUSART
 12986                           
 12987                           ;main.c: 748: }
 12988  000F16  D003               	goto	l559
 12989  000F18                     l10419:
 12990                           
 12991                           ; BSR set to: 2
 12992                           ;main.c: 749: else {
 12993                           ;main.c: 750: WriteUSART('.');
 12994  000F18  0E2E               	movlw	46
 12995  000F1A  EC26  F02E         	call	_WriteUSART
 12996  000F1E                     l559:
 12997  000F1E  A2AC               	btfss	4012,1,c	;volatile
 12998  000F20  D7FE               	goto	l559
 12999                           
 13000                           ;main.c: 753: WriteUSART(' ');
 13001  000F22  0E20               	movlw	32
 13002  000F24  EC26  F02E         	call	_WriteUSART
 13003                           
 13004                           ;main.c: 754: printBinary(value);
 13005  000F28  0102               	movlb	2	; () banked
 13006  000F2A  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13007  000F2C  ECA3  F02B         	call	_printBinary
 13008                           
 13009                           ; BSR set to: 0
 13010                           ;main.c: 755: putsUSART((char *) "\r\n");
 13011  000F30  0E74               	movlw	high (STR_197+50)
 13012  000F32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13013  000F34  0E8A               	movlw	low (STR_197+50)
 13014  000F36  6F61               	movwf	?_putsUSART& (0+255),b
 13015  000F38  EC4F  F02B         	call	_putsUSART	;wreg free
 13016                           
 13017                           ;main.c: 756: }
 13018  000F3C  D058               	goto	l10453
 13019  000F3E                     l535:
 13020                           
 13021                           ;main.c: 757: else {
 13022                           ;main.c: 758: rv = 0;
 13023  000F3E  0102               	movlb	2	; () banked
 13024  000F40  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 13025                           
 13026                           ; BSR set to: 2
 13027                           ;main.c: 759: putsUSART((char *) "-ERROR - Unable to read register ");
 13028  000F42  0E7A               	movlw	high STR_64
 13029  000F44  0100               	movlb	0	; () banked
 13030  000F46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13031  000F48  0E05               	movlw	low STR_64
 13032  000F4A  6F61               	movwf	?_putsUSART& (0+255),b
 13033  000F4C  EC4F  F02B         	call	_putsUSART	;wreg free
 13034                           
 13035                           ;main.c: 760: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13036  000F50  0101               	movlb	1	; () banked
 13037  000F52  6700               	tstfsz	_bHex& (0+255),b
 13038  000F54  D005               	goto	l10433
 13039                           
 13040                           ; BSR set to: 1
 13041  000F56  0E7F               	movlw	high STR_57
 13042  000F58  0102               	movlb	2	; () banked
 13043  000F5A  6F9B               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13044  000F5C  0EED               	movlw	low STR_57
 13045  000F5E  D004               	goto	L11
 13046  000F60                     l10433:
 13047                           
 13048                           ; BSR set to: 1
 13049  000F60  0E7F               	movlw	high STR_56
 13050  000F62  0102               	movlb	2	; () banked
 13051  000F64  6F9B               	movwf	(_doModeVerbose$1151+1)& (0+255),b
 13052  000F66  0E64               	movlw	low STR_56
 13053  000F68                     L11:
 13054  000F68  6F9A               	movwf	_doModeVerbose$1151& (0+255),b
 13055                           
 13056                           ; BSR set to: 2
 13057  000F6A  0E01               	movlw	high _wrkbuf
 13058  000F6C  0100               	movlb	0	; () banked
 13059  000F6E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13060  000F70  0E54               	movlw	low _wrkbuf
 13061  000F72  6F76               	movwf	?_sprintf& (0+255),b
 13062  000F74  C29A  F078         	movff	_doModeVerbose$1151,?_sprintf+2
 13063  000F78  C29B  F079         	movff	_doModeVerbose$1151+1,?_sprintf+3
 13064  000F7C  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13065  000F80  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13066  000F82  EC40  F00D         	call	_sprintf	;wreg free
 13067                           
 13068                           ; BSR set to: 0
 13069                           ;main.c: 761: putsUSART(wrkbuf);
 13070  000F86  0E01               	movlw	high _wrkbuf
 13071  000F88  0100               	movlb	0	; () banked
 13072  000F8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13073  000F8C  0E54               	movlw	low _wrkbuf
 13074  000F8E  6F61               	movwf	?_putsUSART& (0+255),b
 13075  000F90  EC4F  F02B         	call	_putsUSART	;wreg free
 13076  000F94                     l567:
 13077  000F94  A2AC               	btfss	4012,1,c	;volatile
 13078  000F96  D7FE               	goto	l567
 13079                           
 13080                           ;main.c: 763: WriteUSART(':');
 13081  000F98  0E3A               	movlw	58
 13082  000F9A  EC26  F02E         	call	_WriteUSART
 13083                           
 13084                           ;main.c: 764: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13085  000F9E  0101               	movlb	1	; () banked
 13086  000FA0  6700               	tstfsz	_bHex& (0+255),b
 13087  000FA2  D005               	goto	l10445
 13088                           
 13089                           ; BSR set to: 1
 13090  000FA4  0E7F               	movlw	high STR_57
 13091  000FA6  0102               	movlb	2	; () banked
 13092  000FA8  6F9D               	movwf	(_doModeVerbose$1155+1)& (0+255),b
 13093  000FAA  0EED               	movlw	low STR_57
 13094  000FAC  D004               	goto	L12
 13095  000FAE                     l10445:
 13096                           
 13097                           ; BSR set to: 1
 13098  000FAE  0E7F               	movlw	high STR_56
 13099  000FB0  0102               	movlb	2	; () banked
 13100  000FB2  6F9D               	movwf	(_doModeVerbose$1155+1)& (0+255),b
 13101  000FB4  0E64               	movlw	low STR_56
 13102  000FB6                     L12:
 13103  000FB6  6F9C               	movwf	_doModeVerbose$1155& (0+255),b
 13104                           
 13105                           ; BSR set to: 2
 13106  000FB8  0E01               	movlw	high _wrkbuf
 13107  000FBA  0100               	movlb	0	; () banked
 13108  000FBC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13109  000FBE  0E54               	movlw	low _wrkbuf
 13110  000FC0  6F76               	movwf	?_sprintf& (0+255),b
 13111  000FC2  C29C  F078         	movff	_doModeVerbose$1155,?_sprintf+2
 13112  000FC6  C29D  F079         	movff	_doModeVerbose$1155+1,?_sprintf+3
 13113  000FCA  EC0E  F00D         	call	PL38	;call to abstracted procedure
 13114  000FCE  EC40  F00D         	call	_sprintf	;wreg free
 13115                           
 13116                           ; BSR set to: 0
 13117                           ;main.c: 765: putsUSART(wrkbuf);
 13118  000FD2  0E01               	movlw	high _wrkbuf
 13119  000FD4  0100               	movlb	0	; () banked
 13120  000FD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13121  000FD8  0E54               	movlw	low _wrkbuf
 13122  000FDA  6F61               	movwf	?_putsUSART& (0+255),b
 13123  000FDC  EC4F  F02B         	call	_putsUSART	;wreg free
 13124                           
 13125                           ;main.c: 766: putsUSART((char *) "\r\n");
 13126  000FE0  0E74               	movlw	high (STR_197+50)
 13127  000FE2  0100               	movlb	0	; () banked
 13128  000FE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13129  000FE6  0E8A               	movlw	low (STR_197+50)
 13130  000FE8  6F61               	movwf	?_putsUSART& (0+255),b
 13131  000FEA  EC4F  F02B         	call	_putsUSART	;wreg free
 13132  000FEE                     l10453:
 13133  000FEE  0102               	movlb	2	; () banked
 13134  000FF0  2BB0               	incf	doModeVerbose@i_1110& (0+255),f,b
 13135  000FF2                     l10455:
 13136                           
 13137                           ; BSR set to: 2
 13138  000FF2  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13139  000FF4  5DB0               	subwf	doModeVerbose@i_1110& (0+255),w,b
 13140  000FF6  E201 D6EE          	bnc	l10373
 13141                           
 13142                           ; BSR set to: 2
 13143                           ;main.c: 767: }
 13144                           ;main.c: 768: }
 13145                           ;main.c: 770: if (rv) {
 13146  000FFA  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13147  000FFC  E009               	bz	l10461
 13148                           
 13149                           ; BSR set to: 2
 13150                           ;main.c: 771: putsUSART((char *) "+OK\r\n");
 13151  000FFE  0E7F               	movlw	high STR_9
 13152  001000  0100               	movlb	0	; () banked
 13153  001002  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13154  001004  0E7F               	movlw	low STR_9
 13155  001006  6F61               	movwf	?_putsUSART& (0+255),b
 13156  001008  EC4F  F02B         	call	_putsUSART	;wreg free
 13157                           
 13158                           ;main.c: 772: }
 13159  00100C  EF88  F00C         	goto	l10759
 13160  001010                     l10461:
 13161                           
 13162                           ; BSR set to: 2
 13163                           ;main.c: 773: else {
 13164                           ;main.c: 774: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13165  001010  0E74               	movlw	high STR_71
 13166  001012  0100               	movlb	0	; () banked
 13167  001014  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13168  001016  0E22               	movlw	low STR_71
 13169  001018  6F61               	movwf	?_putsUSART& (0+255),b
 13170  00101A  EC4F  F02B         	call	_putsUSART	;wreg free
 13171  00101E  EF88  F00C         	goto	l10759
 13172  001022                     l10463:
 13173                           
 13174                           ; BSR set to: 1
 13175                           ;main.c: 780: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13176  001022  0E01               	movlw	high _cmdbuf
 13177  001024  0100               	movlb	0	; () banked
 13178  001026  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13179  001028  0E04               	movlw	low _cmdbuf
 13180  00102A  6F6D               	movwf	?_stristr& (0+255),b
 13181  00102C  0E7F               	movlw	high STR_72
 13182  00102E  6F70               	movwf	(?_stristr+3)& (0+255),b
 13183  001030  0EAC               	movlw	low STR_72
 13184  001032  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13185  001034  ECA1  F028         	call	_stristr	;wreg free
 13186  001038  EC98  F00C         	call	PL2	;call to abstracted procedure
 13187  00103C  E104               	bnz	u12905
 13188  00103E  0100               	movlb	0	; () banked
 13189  001040  516D               	movf	?_stristr& (0+255),w,b
 13190  001042  0101               	movlb	1	; () banked
 13191  001044  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13192  001046                     u12905:
 13193  001046  E001 D0B0          	bnz	l10505
 13194                           
 13195                           ; BSR set to: 1
 13196                           ;main.c: 782: uint8_t nodeid;
 13197                           ;main.c: 783: uint8_t page = 0;
 13198  00104A  0102               	movlb	2	; () banked
 13199  00104C  6BA1               	clrf	doModeVerbose@page_1161& (0+255),b
 13200                           
 13201                           ; BSR set to: 2
 13202                           ;main.c: 784: uint8_t reg;
 13203                           ;main.c: 785: uint8_t value;
 13204                           ;main.c: 787: strcpy(cmdbuf, cmdbuf + 5);
 13205  00104E  ECA2  F00C         	call	PL4	;call to abstracted procedure
 13206  001052  EC9A  F02D         	call	_strcpy	;wreg free
 13207                           
 13208                           ;main.c: 788: char *p = strtok(cmdbuf, " ");
 13209  001056  0E01               	movlw	high _cmdbuf
 13210  001058  EC05  F00D         	call	PL36	;call to abstracted procedure
 13211  00105C  EC8E  F027         	call	_strtok	;wreg free
 13212  001060  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1164
 13213  001064  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1164+1
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;main.c: 789: if ((0) != p) {
 13217  001068  0102               	movlb	2	; () banked
 13218  00106A  51B5               	movf	(doModeVerbose@p_1164+1)& (0+255),w,b
 13219  00106C  11B4               	iorwf	doModeVerbose@p_1164& (0+255),w,b
 13220  00106E  E00A               	bz	l10475
 13221                           
 13222                           ; BSR set to: 2
 13223                           ;main.c: 790: nodeid = atoi(p);
 13224  001070  C2B4  F066         	movff	doModeVerbose@p_1164,?_atoi
 13225  001074  C2B5  F067         	movff	doModeVerbose@p_1164+1,?_atoi+1
 13226  001078  ECC8  F01F         	call	_atoi	;wreg free
 13227  00107C  5166               	movf	?_atoi& (0+255),w,b
 13228  00107E  0102               	movlb	2	; () banked
 13229  001080  6F8D               	movwf	doModeVerbose@nodeid_1160& (0+255),b
 13230                           
 13231                           ;main.c: 791: }
 13232  001082  D009               	goto	l10479
 13233  001084                     l10475:
 13234                           
 13235                           ; BSR set to: 2
 13236                           ;main.c: 792: else {
 13237                           ;main.c: 793: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13238  001084  0E7C               	movlw	high STR_51
 13239  001086  0100               	movlb	0	; () banked
 13240  001088  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13241  00108A  0E30               	movlw	low STR_51
 13242  00108C  6F61               	movwf	?_putsUSART& (0+255),b
 13243  00108E  EC4F  F02B         	call	_putsUSART	;wreg free
 13244  001092  EF97  F00C         	goto	l526
 13245  001096                     l10479:
 13246                           
 13247                           ; BSR set to: 2
 13248                           ;main.c: 795: }
 13249                           ;main.c: 797: if ((0) != (p = strtok((0), " "))) {
 13250  001096  ECF3  F00C         	call	PL28	;call to abstracted procedure
 13251  00109A  EC8E  F027         	call	_strtok	;wreg free
 13252  00109E  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1164
 13253  0010A2  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1164+1
 13254  0010A6  0102               	movlb	2	; () banked
 13255  0010A8  51B5               	movf	(doModeVerbose@p_1164+1)& (0+255),w,b
 13256  0010AA  11B4               	iorwf	doModeVerbose@p_1164& (0+255),w,b
 13257  0010AC  E034               	bz	l10487
 13258                           
 13259                           ; BSR set to: 2
 13260                           ;main.c: 799: char *preg;
 13261                           ;main.c: 800: if (preg = strchr(p, ':')) {
 13262  0010AE  C2B4  F060         	movff	doModeVerbose@p_1164,?_strchr
 13263  0010B2  C2B5  F061         	movff	doModeVerbose@p_1164+1,?_strchr+1
 13264  0010B6  0100               	movlb	0	; () banked
 13265  0010B8  6B63               	clrf	(?_strchr+3)& (0+255),b
 13266  0010BA  0E3A               	movlw	58
 13267  0010BC  6F62               	movwf	(?_strchr+2)& (0+255),b
 13268  0010BE  EC63  F02A         	call	_strchr	;wreg free
 13269  0010C2  C060  F286         	movff	?_strchr,doModeVerbose@preg_1168
 13270  0010C6  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1168+1
 13271  0010CA  0102               	movlb	2	; () banked
 13272  0010CC  5187               	movf	(doModeVerbose@preg_1168+1)& (0+255),w,b
 13273  0010CE  1186               	iorwf	doModeVerbose@preg_1168& (0+255),w,b
 13274  0010D0  E018               	bz	l10485
 13275                           
 13276                           ; BSR set to: 2
 13277                           ;main.c: 801: page = atoi(p);
 13278  0010D2  C2B4  F066         	movff	doModeVerbose@p_1164,?_atoi
 13279  0010D6  C2B5  F067         	movff	doModeVerbose@p_1164+1,?_atoi+1
 13280  0010DA  ECC8  F01F         	call	_atoi	;wreg free
 13281  0010DE  5166               	movf	?_atoi& (0+255),w,b
 13282  0010E0  0102               	movlb	2	; () banked
 13283  0010E2  6FA1               	movwf	doModeVerbose@page_1161& (0+255),b
 13284                           
 13285                           ;main.c: 802: reg = atoi(preg + 1);
 13286  0010E4  2986               	incf	doModeVerbose@preg_1168& (0+255),w,b
 13287  0010E6  0101               	movlb	1	; () banked
 13288  0010E8  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13289  0010EA  0E00               	movlw	0
 13290  0010EC  0102               	movlb	2	; () banked
 13291  0010EE  2187               	addwfc	(doModeVerbose@preg_1168+1)& (0+255),w,b
 13292  0010F0  0101               	movlb	1	; () banked
 13293  0010F2  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13294  0010F4  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13295  0010F8  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13296  0010FC  ECC8  F01F         	call	_atoi	;wreg free
 13297  001100  D006               	goto	L13
 13298  001102                     l10485:
 13299                           
 13300                           ; BSR set to: 2
 13301                           ;main.c: 804: else {
 13302                           ;main.c: 805: reg = atoi(p);
 13303  001102  C2B4  F066         	movff	doModeVerbose@p_1164,?_atoi
 13304  001106  C2B5  F067         	movff	doModeVerbose@p_1164+1,?_atoi+1
 13305  00110A  ECC8  F01F         	call	_atoi	;wreg free
 13306  00110E                     L13:
 13307  00110E  5166               	movf	?_atoi& (0+255),w,b
 13308  001110  0102               	movlb	2	; () banked
 13309  001112  6FA2               	movwf	doModeVerbose@reg_1162& (0+255),b
 13310  001114  D009               	goto	l10491
 13311  001116                     l10487:
 13312                           
 13313                           ; BSR set to: 2
 13314                           ;main.c: 809: else {
 13315                           ;main.c: 810: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13316  001116  0E7A               	movlw	high STR_53
 13317  001118  0100               	movlb	0	; () banked
 13318  00111A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13319  00111C  0EAB               	movlw	low STR_53
 13320  00111E  6F61               	movwf	?_putsUSART& (0+255),b
 13321  001120  EC4F  F02B         	call	_putsUSART	;wreg free
 13322  001124  EF97  F00C         	goto	l526
 13323  001128                     l10491:
 13324                           
 13325                           ; BSR set to: 2
 13326                           ;main.c: 812: }
 13327                           ;main.c: 815: if ((0) != (p = strtok((0), " "))) {
 13328  001128  ECF3  F00C         	call	PL28	;call to abstracted procedure
 13329  00112C  EC8E  F027         	call	_strtok	;wreg free
 13330  001130  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1164
 13331  001134  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1164+1
 13332  001138  0102               	movlb	2	; () banked
 13333  00113A  51B5               	movf	(doModeVerbose@p_1164+1)& (0+255),w,b
 13334  00113C  11B4               	iorwf	doModeVerbose@p_1164& (0+255),w,b
 13335  00113E  E00A               	bz	l10495
 13336                           
 13337                           ; BSR set to: 2
 13338                           ;main.c: 816: value = atoi(p);
 13339  001140  C2B4  F066         	movff	doModeVerbose@p_1164,?_atoi
 13340  001144  C2B5  F067         	movff	doModeVerbose@p_1164+1,?_atoi+1
 13341  001148  ECC8  F01F         	call	_atoi	;wreg free
 13342  00114C  5166               	movf	?_atoi& (0+255),w,b
 13343  00114E  0102               	movlb	2	; () banked
 13344  001150  6FA9               	movwf	doModeVerbose@value_1163& (0+255),b
 13345                           
 13346                           ;main.c: 817: }
 13347  001152  D008               	goto	l10499
 13348  001154                     l10495:
 13349                           
 13350                           ; BSR set to: 2
 13351                           ;main.c: 818: else {
 13352                           ;main.c: 819: putsUSART((char *) "-ERROR - Need a value\r\n");
 13353  001154  0E7C               	movlw	high STR_78
 13354  001156  0100               	movlb	0	; () banked
 13355  001158  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13356  00115A  0E60               	movlw	low STR_78
 13357  00115C  6F61               	movwf	?_putsUSART& (0+255),b
 13358  00115E  EC4F  F02B         	call	_putsUSART	;wreg free
 13359  001162  D3E5               	goto	l526
 13360  001164                     l10499:
 13361                           
 13362                           ; BSR set to: 2
 13363                           ;main.c: 821: }
 13364                           ;main.c: 823: if (writeRegisterExtended(nodeid,
 13365                           ;main.c: 824: page,
 13366                           ;main.c: 825: reg,
 13367                           ;main.c: 826: rwtimeout,
 13368                           ;main.c: 827: &value)) {
 13369  001164  0100               	movlb	0	; () banked
 13370  001166  C2A1  F0B6         	movff	doModeVerbose@page_1161,?_writeRegisterExtended
 13371  00116A  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13372  00116C  C2A2  F0B8         	movff	doModeVerbose@reg_1162,?_writeRegisterExtended+2
 13373  001170  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13374  001174  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13375  001176  0E02               	movlw	high doModeVerbose@value_1163
 13376  001178  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13377  00117A  0EA9               	movlw	low doModeVerbose@value_1163
 13378  00117C  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13379  00117E  0102               	movlb	2	; () banked
 13380  001180  518D               	movf	doModeVerbose@nodeid_1160& (0+255),w,b
 13381  001182  EC45  F01F         	call	_writeRegisterExtended
 13382  001186  0900               	iorlw	0
 13383  001188  E008               	bz	l10503
 13384                           
 13385                           ;main.c: 828: putsUSART((char *) "+OK - Value written successfully\r\n");
 13386  00118A  0E79               	movlw	high STR_79
 13387  00118C  0100               	movlb	0	; () banked
 13388  00118E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13389  001190  0EC0               	movlw	low STR_79
 13390  001192  6F61               	movwf	?_putsUSART& (0+255),b
 13391  001194  EC4F  F02B         	call	_putsUSART	;wreg free
 13392                           
 13393                           ;main.c: 829: }
 13394  001198  D3BB               	goto	l10759
 13395  00119A                     l10503:
 13396                           
 13397                           ;main.c: 830: else {
 13398                           ;main.c: 831: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13399  00119A  0E7A               	movlw	high STR_80
 13400  00119C  0100               	movlb	0	; () banked
 13401  00119E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13402  0011A0  0E8A               	movlw	low STR_80
 13403  0011A2  6F61               	movwf	?_putsUSART& (0+255),b
 13404  0011A4  EC4F  F02B         	call	_putsUSART	;wreg free
 13405  0011A8  D3B3               	goto	l10759
 13406  0011AA                     l10505:
 13407                           
 13408                           ; BSR set to: 1
 13409                           ;main.c: 837: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13410  0011AA  0E01               	movlw	high _cmdbuf
 13411  0011AC  0100               	movlb	0	; () banked
 13412  0011AE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13413  0011B0  0E04               	movlw	low _cmdbuf
 13414  0011B2  6F6D               	movwf	?_stristr& (0+255),b
 13415  0011B4  0E7F               	movlw	high STR_81
 13416  0011B6  6F70               	movwf	(?_stristr+3)& (0+255),b
 13417  0011B8  0EBB               	movlw	low STR_81
 13418  0011BA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13419  0011BC  ECA1  F028         	call	_stristr	;wreg free
 13420  0011C0  DBB7               	call	PL2	;call to abstracted procedure
 13421  0011C2  E104               	bnz	u12965
 13422  0011C4  0100               	movlb	0	; () banked
 13423  0011C6  516D               	movf	?_stristr& (0+255),w,b
 13424  0011C8  0101               	movlb	1	; () banked
 13425  0011CA  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13426  0011CC                     u12965:
 13427  0011CC  E151               	bnz	l10533
 13428                           
 13429                           ; BSR set to: 1
 13430                           ;main.c: 838: uint8_t nodeid;
 13431                           ;main.c: 840: strcpy(cmdbuf, cmdbuf + 5);
 13432  0011CE  DBBA               	call	PL4	;call to abstracted procedure
 13433  0011D0  EC9A  F02D         	call	_strcpy	;wreg free
 13434                           
 13435                           ;main.c: 841: nodeid = atoi(cmdbuf);
 13436  0011D4  0E01               	movlw	high _cmdbuf
 13437  0011D6  0100               	movlb	0	; () banked
 13438  0011D8  6F67               	movwf	(?_atoi+1)& (0+255),b
 13439  0011DA  0E04               	movlw	low _cmdbuf
 13440  0011DC  6F66               	movwf	?_atoi& (0+255),b
 13441  0011DE  ECC8  F01F         	call	_atoi	;wreg free
 13442  0011E2  5166               	movf	?_atoi& (0+255),w,b
 13443  0011E4  0102               	movlb	2	; () banked
 13444  0011E6  6FAF               	movwf	doModeVerbose@nodeid_1175& (0+255),b
 13445                           
 13446                           ; BSR set to: 2
 13447                           ;main.c: 843: putsUSART((char *) "Info for node id = ");
 13448  0011E8  0E7D               	movlw	high STR_82
 13449  0011EA  0100               	movlb	0	; () banked
 13450  0011EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13451  0011EE  0EAA               	movlw	low STR_82
 13452  0011F0  6F61               	movwf	?_putsUSART& (0+255),b
 13453  0011F2  EC4F  F02B         	call	_putsUSART	;wreg free
 13454                           
 13455                           ;main.c: 844: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13456  0011F6  0101               	movlb	1	; () banked
 13457  0011F8  6700               	tstfsz	_bHex& (0+255),b
 13458  0011FA  D005               	goto	l10517
 13459                           
 13460                           ; BSR set to: 1
 13461  0011FC  0E7F               	movlw	high STR_57
 13462  0011FE  0102               	movlb	2	; () banked
 13463  001200  6F9F               	movwf	(_doModeVerbose$1180+1)& (0+255),b
 13464  001202  0EED               	movlw	low STR_57
 13465  001204  D004               	goto	L14
 13466  001206                     l10517:
 13467                           
 13468                           ; BSR set to: 1
 13469  001206  0E7F               	movlw	high STR_56
 13470  001208  0102               	movlb	2	; () banked
 13471  00120A  6F9F               	movwf	(_doModeVerbose$1180+1)& (0+255),b
 13472  00120C  0E64               	movlw	low STR_56
 13473  00120E                     L14:
 13474  00120E  6F9E               	movwf	_doModeVerbose$1180& (0+255),b
 13475                           
 13476                           ; BSR set to: 2
 13477  001210  0E01               	movlw	high _wrkbuf
 13478  001212  0100               	movlb	0	; () banked
 13479  001214  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13480  001216  0E54               	movlw	low _wrkbuf
 13481  001218  6F76               	movwf	?_sprintf& (0+255),b
 13482  00121A  C29E  F078         	movff	_doModeVerbose$1180,?_sprintf+2
 13483  00121E  C29F  F079         	movff	_doModeVerbose$1180+1,?_sprintf+3
 13484  001222  C2AF  F07A         	movff	doModeVerbose@nodeid_1175,?_sprintf+4
 13485  001226  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13486  001228  EC40  F00D         	call	_sprintf	;wreg free
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;main.c: 845: putsUSART(wrkbuf);
 13490  00122C  0E01               	movlw	high _wrkbuf
 13491  00122E  0100               	movlb	0	; () banked
 13492  001230  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13493  001232  0E54               	movlw	low _wrkbuf
 13494  001234  6F61               	movwf	?_putsUSART& (0+255),b
 13495  001236  EC4F  F02B         	call	_putsUSART	;wreg free
 13496                           
 13497                           ;main.c: 846: putsUSART((char *) "\r\n");
 13498  00123A  0E74               	movlw	high (STR_197+50)
 13499  00123C  0100               	movlb	0	; () banked
 13500  00123E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13501  001240  0E8A               	movlw	low (STR_197+50)
 13502  001242  6F61               	movwf	?_putsUSART& (0+255),b
 13503  001244  EC4F  F02B         	call	_putsUSART	;wreg free
 13504                           
 13505                           ;main.c: 847: printNodeFirmwareVersion(nodeid);
 13506  001248  0102               	movlb	2	; () banked
 13507  00124A  51AF               	movf	doModeVerbose@nodeid_1175& (0+255),w,b
 13508  00124C  EC0F  F023         	call	_printNodeFirmwareVersion
 13509                           
 13510                           ;main.c: 848: printGUID(nodeid);
 13511  001250  0102               	movlb	2	; () banked
 13512  001252  51AF               	movf	doModeVerbose@nodeid_1175& (0+255),w,b
 13513  001254  EC4B  F020         	call	_printGUID
 13514                           
 13515                           ;main.c: 849: printMDF(nodeid);
 13516  001258  0102               	movlb	2	; () banked
 13517  00125A  51AF               	movf	doModeVerbose@nodeid_1175& (0+255),w,b
 13518  00125C  EC43  F027         	call	_printMDF
 13519                           
 13520                           ;main.c: 850: putsUSART((char *) "+OK\r\n");
 13521  001260  0E7F               	movlw	high STR_9
 13522  001262  0100               	movlb	0	; () banked
 13523  001264  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13524  001266  0E7F               	movlw	low STR_9
 13525  001268  6F61               	movwf	?_putsUSART& (0+255),b
 13526  00126A  EC4F  F02B         	call	_putsUSART	;wreg free
 13527                           
 13528                           ;main.c: 851: }
 13529  00126E  D350               	goto	l10759
 13530  001270                     l10533:
 13531                           
 13532                           ; BSR set to: 1
 13533                           ;main.c: 855: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13534  001270  0E01               	movlw	high _cmdbuf
 13535  001272  0100               	movlb	0	; () banked
 13536  001274  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13537  001276  0E04               	movlw	low _cmdbuf
 13538  001278  6F6D               	movwf	?_stristr& (0+255),b
 13539  00127A  0E7F               	movlw	high STR_87
 13540  00127C  6F70               	movwf	(?_stristr+3)& (0+255),b
 13541  00127E  0E56               	movlw	low STR_87
 13542  001280  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13543  001282  ECA1  F028         	call	_stristr	;wreg free
 13544  001286  DB54               	call	PL2	;call to abstracted procedure
 13545  001288  E104               	bnz	u12985
 13546  00128A  0100               	movlb	0	; () banked
 13547  00128C  516D               	movf	?_stristr& (0+255),w,b
 13548  00128E  0101               	movlb	1	; () banked
 13549  001290  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13550  001292                     u12985:
 13551  001292  E001 D0D2          	bnz	l10601
 13552                           
 13553                           ; BSR set to: 1
 13554                           ;main.c: 857: uint8_t filterno;
 13555                           ;main.c: 858: uint8_t filter_priority;
 13556                           ;main.c: 859: uint16_t filter_class;
 13557                           ;main.c: 860: uint8_t filter_type;
 13558                           ;main.c: 861: uint8_t filter_nodeid;
 13559                           ;main.c: 863: strcpy(cmdbuf, cmdbuf + 8);
 13560  001296  0E01               	movlw	high _cmdbuf
 13561  001298  DB6C               	call	PL8	;call to abstracted procedure
 13562  00129A  EC9A  F02D         	call	_strcpy	;wreg free
 13563                           
 13564                           ;main.c: 864: char *p = strtok(cmdbuf, ",");
 13565  00129E  DBAB               	call	PL32	;call to abstracted procedure
 13566  0012A0  EC8E  F027         	call	_strtok	;wreg free
 13567  0012A4  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1189
 13568  0012A8  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1189+1
 13569                           
 13570                           ; BSR set to: 0
 13571                           ;main.c: 865: if ((0) != p) {
 13572  0012AC  0102               	movlb	2	; () banked
 13573  0012AE  51BA               	movf	(doModeVerbose@p_1189+1)& (0+255),w,b
 13574  0012B0  11B9               	iorwf	doModeVerbose@p_1189& (0+255),w,b
 13575  0012B2  E014               	bz	l10549
 13576                           
 13577                           ; BSR set to: 2
 13578                           ;main.c: 866: filterno = atoi(p);
 13579  0012B4  C2B9  F066         	movff	doModeVerbose@p_1189,?_atoi
 13580  0012B8  C2BA  F067         	movff	doModeVerbose@p_1189+1,?_atoi+1
 13581  0012BC  ECC8  F01F         	call	_atoi	;wreg free
 13582  0012C0  5166               	movf	?_atoi& (0+255),w,b
 13583  0012C2  0102               	movlb	2	; () banked
 13584  0012C4  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13585                           
 13586                           ; BSR set to: 2
 13587                           ;main.c: 867: if (filterno > 15) {
 13588  0012C6  0E0F               	movlw	15
 13589  0012C8  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13590  0012CA  D010               	goto	l10553
 13591                           
 13592                           ; BSR set to: 2
 13593                           ;main.c: 868: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13594  0012CC  0E72               	movlw	high STR_89
 13595  0012CE  0100               	movlb	0	; () banked
 13596  0012D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13597  0012D2  0E1C               	movlw	low STR_89
 13598  0012D4  6F61               	movwf	?_putsUSART& (0+255),b
 13599  0012D6  EC4F  F02B         	call	_putsUSART	;wreg free
 13600  0012DA  D329               	goto	l526
 13601  0012DC                     l10549:
 13602                           
 13603                           ; BSR set to: 2
 13604                           ;main.c: 872: else {
 13605                           ;main.c: 873: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13606  0012DC  0E77               	movlw	high STR_90
 13607  0012DE  0100               	movlb	0	; () banked
 13608  0012E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13609  0012E2  0EFA               	movlw	low STR_90
 13610  0012E4  6F61               	movwf	?_putsUSART& (0+255),b
 13611  0012E6  EC4F  F02B         	call	_putsUSART	;wreg free
 13612  0012EA  D321               	goto	l526
 13613  0012EC                     l10553:
 13614                           
 13615                           ; BSR set to: 2
 13616                           ;main.c: 875: }
 13617                           ;main.c: 878: p = strtok((0), ",");
 13618  0012EC  DB3A               	call	PL6	;call to abstracted procedure
 13619  0012EE  EC8E  F027         	call	_strtok	;wreg free
 13620  0012F2  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1189
 13621  0012F6  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1189+1
 13622                           
 13623                           ; BSR set to: 0
 13624                           ;main.c: 879: if ((0) != p) {
 13625  0012FA  0102               	movlb	2	; () banked
 13626  0012FC  51BA               	movf	(doModeVerbose@p_1189+1)& (0+255),w,b
 13627  0012FE  11B9               	iorwf	doModeVerbose@p_1189& (0+255),w,b
 13628  001300  E00A               	bz	l10559
 13629                           
 13630                           ; BSR set to: 2
 13631                           ;main.c: 880: filter_priority = atoi(p);
 13632  001302  C2B9  F066         	movff	doModeVerbose@p_1189,?_atoi
 13633  001306  C2BA  F067         	movff	doModeVerbose@p_1189+1,?_atoi+1
 13634  00130A  ECC8  F01F         	call	_atoi	;wreg free
 13635  00130E  5166               	movf	?_atoi& (0+255),w,b
 13636  001310  0102               	movlb	2	; () banked
 13637  001312  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13638                           
 13639                           ;main.c: 881: }
 13640  001314  D008               	goto	l10563
 13641  001316                     l10559:
 13642                           
 13643                           ; BSR set to: 2
 13644                           ;main.c: 882: else {
 13645                           ;main.c: 883: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13646  001316  0E77               	movlw	high STR_92
 13647  001318  0100               	movlb	0	; () banked
 13648  00131A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13649  00131C  0E2F               	movlw	low STR_92
 13650  00131E  6F61               	movwf	?_putsUSART& (0+255),b
 13651  001320  EC4F  F02B         	call	_putsUSART	;wreg free
 13652  001324  D304               	goto	l526
 13653  001326                     l10563:
 13654                           
 13655                           ; BSR set to: 2
 13656                           ;main.c: 885: }
 13657                           ;main.c: 888: p = strtok((0), ",");
 13658  001326  DB1D               	call	PL6	;call to abstracted procedure
 13659  001328  EC8E  F027         	call	_strtok	;wreg free
 13660  00132C  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1189
 13661  001330  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1189+1
 13662                           
 13663                           ; BSR set to: 0
 13664                           ;main.c: 889: if ((0) != p) {
 13665  001334  0102               	movlb	2	; () banked
 13666  001336  51BA               	movf	(doModeVerbose@p_1189+1)& (0+255),w,b
 13667  001338  11B9               	iorwf	doModeVerbose@p_1189& (0+255),w,b
 13668  00133A  E00B               	bz	l10569
 13669                           
 13670                           ; BSR set to: 2
 13671                           ;main.c: 890: filter_class = atoi(p);
 13672  00133C  C2B9  F066         	movff	doModeVerbose@p_1189,?_atoi
 13673  001340  C2BA  F067         	movff	doModeVerbose@p_1189+1,?_atoi+1
 13674  001344  ECC8  F01F         	call	_atoi	;wreg free
 13675  001348  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13676  00134C  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13677                           
 13678                           ;main.c: 891: }
 13679  001350  D008               	goto	l10573
 13680  001352                     l10569:
 13681                           
 13682                           ; BSR set to: 2
 13683                           ;main.c: 892: else {
 13684                           ;main.c: 893: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13685  001352  0E78               	movlw	high STR_94
 13686  001354  0100               	movlb	0	; () banked
 13687  001356  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13688  001358  0E96               	movlw	low STR_94
 13689  00135A  6F61               	movwf	?_putsUSART& (0+255),b
 13690  00135C  EC4F  F02B         	call	_putsUSART	;wreg free
 13691  001360  D2E6               	goto	l526
 13692  001362                     l10573:
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;main.c: 895: }
 13696                           ;main.c: 898: p = strtok((0), ",");
 13697  001362  DB15               	call	PL10	;call to abstracted procedure
 13698  001364  EC8E  F027         	call	_strtok	;wreg free
 13699  001368  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1189
 13700  00136C  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1189+1
 13701                           
 13702                           ; BSR set to: 0
 13703                           ;main.c: 899: if ((0) != p) {
 13704  001370  0102               	movlb	2	; () banked
 13705  001372  51BA               	movf	(doModeVerbose@p_1189+1)& (0+255),w,b
 13706  001374  11B9               	iorwf	doModeVerbose@p_1189& (0+255),w,b
 13707  001376  E00A               	bz	l10579
 13708                           
 13709                           ; BSR set to: 2
 13710                           ;main.c: 900: filter_type = atoi(p);
 13711  001378  C2B9  F066         	movff	doModeVerbose@p_1189,?_atoi
 13712  00137C  C2BA  F067         	movff	doModeVerbose@p_1189+1,?_atoi+1
 13713  001380  ECC8  F01F         	call	_atoi	;wreg free
 13714  001384  5166               	movf	?_atoi& (0+255),w,b
 13715  001386  0102               	movlb	2	; () banked
 13716  001388  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13717                           
 13718                           ;main.c: 901: }
 13719  00138A  D008               	goto	l10583
 13720  00138C                     l10579:
 13721                           
 13722                           ; BSR set to: 2
 13723                           ;main.c: 902: else {
 13724                           ;main.c: 903: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13725  00138C  0E78               	movlw	high STR_96
 13726  00138E  0100               	movlb	0	; () banked
 13727  001390  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13728  001392  0EE4               	movlw	low STR_96
 13729  001394  6F61               	movwf	?_putsUSART& (0+255),b
 13730  001396  EC4F  F02B         	call	_putsUSART	;wreg free
 13731  00139A  D2C9               	goto	l526
 13732  00139C                     l10583:
 13733                           
 13734                           ; BSR set to: 2
 13735                           ;main.c: 905: }
 13736                           ;main.c: 908: p = strtok((0), ",");
 13737  00139C  DAE2               	call	PL6	;call to abstracted procedure
 13738  00139E  EC8E  F027         	call	_strtok	;wreg free
 13739  0013A2  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1189
 13740  0013A6  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1189+1
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;main.c: 909: if ((0) != p) {
 13744  0013AA  0102               	movlb	2	; () banked
 13745  0013AC  51BA               	movf	(doModeVerbose@p_1189+1)& (0+255),w,b
 13746  0013AE  11B9               	iorwf	doModeVerbose@p_1189& (0+255),w,b
 13747  0013B0  E00A               	bz	l10589
 13748                           
 13749                           ; BSR set to: 2
 13750                           ;main.c: 910: filter_nodeid = atoi(p);
 13751  0013B2  C2B9  F066         	movff	doModeVerbose@p_1189,?_atoi
 13752  0013B6  C2BA  F067         	movff	doModeVerbose@p_1189+1,?_atoi+1
 13753  0013BA  ECC8  F01F         	call	_atoi	;wreg free
 13754  0013BE  5166               	movf	?_atoi& (0+255),w,b
 13755  0013C0  0102               	movlb	2	; () banked
 13756  0013C2  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13757                           
 13758                           ;main.c: 911: }
 13759  0013C4  D008               	goto	l10593
 13760  0013C6                     l10589:
 13761                           
 13762                           ; BSR set to: 2
 13763                           ;main.c: 912: else {
 13764                           ;main.c: 913: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13765  0013C6  0E77               	movlw	high STR_98
 13766  0013C8  0100               	movlb	0	; () banked
 13767  0013CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13768  0013CC  0E59               	movlw	low STR_98
 13769  0013CE  6F61               	movwf	?_putsUSART& (0+255),b
 13770  0013D0  EC4F  F02B         	call	_putsUSART	;wreg free
 13771  0013D4  D2AC               	goto	l526
 13772  0013D6                     l10593:
 13773                           
 13774                           ; BSR set to: 2
 13775                           ;main.c: 915: }
 13776                           ;main.c: 918: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13777  0013D6  0E80               	movlw	128
 13778  0013D8  EC0E  F02E         	call	_ECANSetOperationMode
 13779                           
 13780                           ; BSR set to: 0
 13781                           ;main.c: 920: uint32_t id = ((uint32_t) filter_priority << 26) |
 13782                           ;main.c: 921: ((uint32_t) filter_class << 16) |
 13783                           ;main.c: 922: ((uint32_t) filter_type << 8) |
 13784                           ;main.c: 923: filter_nodeid;
 13785  0013DC  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13786  0013E0  DB2B               	call	PL44	;call to abstracted procedure
 13787  0013E2  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13788  0013E4  0101               	movlb	1	; () banked
 13789  0013E6  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13790  0013E8  0102               	movlb	2	; () banked
 13791  0013EA  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13792  0013EC  DB3E               	call	PL58	;call to abstracted procedure
 13793  0013EE  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13794  0013F2  DAD4               	call	PL12	;call to abstracted procedure
 13795  0013F4  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13796  0013F6  0101               	movlb	1	; () banked
 13797  0013F8  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13798  0013FA  0102               	movlb	2	; () banked
 13799  0013FC  6F80               	movwf	doModeVerbose@id& (0+255),b
 13800  0013FE  0101               	movlb	1	; () banked
 13801  001400  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13802  001402  0102               	movlb	2	; () banked
 13803  001404  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13804  001406  0101               	movlb	1	; () banked
 13805  001408  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13806  00140A  0102               	movlb	2	; () banked
 13807  00140C  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13808  00140E  0101               	movlb	1	; () banked
 13809  001410  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13810  001412  0102               	movlb	2	; () banked
 13811  001414  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13812                           
 13813                           ; BSR set to: 2
 13814                           ;main.c: 924: setFilter(filterno, id);
 13815  001416  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13816  00141A  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13817  00141E  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13818  001422  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13819  001426  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13820  001428  EC91  F016         	call	_setFilter
 13821                           
 13822                           ; BSR set to: 0
 13823                           ;main.c: 925: putsUSART((char *) "+OK\r\n");
 13824  00142C  0E7F               	movlw	high STR_9
 13825  00142E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13826  001430  0E7F               	movlw	low STR_9
 13827  001432  6F61               	movwf	?_putsUSART& (0+255),b
 13828  001434  EC4F  F02B         	call	_putsUSART	;wreg free
 13829                           
 13830                           ;main.c: 926: }
 13831  001438  D26B               	goto	l10759
 13832  00143A                     l10601:
 13833                           
 13834                           ; BSR set to: 1
 13835                           ;main.c: 930: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13836  00143A  0E01               	movlw	high _cmdbuf
 13837  00143C  0100               	movlb	0	; () banked
 13838  00143E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13839  001440  0E04               	movlw	low _cmdbuf
 13840  001442  6F6D               	movwf	?_stristr& (0+255),b
 13841  001444  0E7F               	movlw	high STR_100
 13842  001446  6F70               	movwf	(?_stristr+3)& (0+255),b
 13843  001448  0EB1               	movlw	low STR_100
 13844  00144A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13845  00144C  ECA1  F028         	call	_stristr	;wreg free
 13846  001450  DA6F               	call	PL2	;call to abstracted procedure
 13847  001452  E104               	bnz	u13065
 13848  001454  0100               	movlb	0	; () banked
 13849  001456  516D               	movf	?_stristr& (0+255),w,b
 13850  001458  0101               	movlb	1	; () banked
 13851  00145A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13852  00145C                     u13065:
 13853  00145C  E001 D0D9          	bnz	l10673
 13854                           
 13855                           ; BSR set to: 1
 13856                           ;main.c: 932: uint8_t maskno;
 13857                           ;main.c: 933: uint8_t mask_priority;
 13858                           ;main.c: 934: uint16_t mask_class;
 13859                           ;main.c: 935: uint8_t mask_type;
 13860                           ;main.c: 936: uint8_t mask_nodeid;
 13861                           ;main.c: 938: strcpy(cmdbuf, cmdbuf + 8);
 13862  001460  0E01               	movlw	high _cmdbuf
 13863  001462  DA87               	call	PL8	;call to abstracted procedure
 13864  001464  EC9A  F02D         	call	_strcpy	;wreg free
 13865                           
 13866                           ;main.c: 939: char *p = strtok(cmdbuf, ",");
 13867  001468  DAC6               	call	PL32	;call to abstracted procedure
 13868  00146A  EC8E  F027         	call	_strtok	;wreg free
 13869  00146E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1209
 13870  001472  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1209+1
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;main.c: 940: if ((0) != p) {
 13874  001476  0102               	movlb	2	; () banked
 13875  001478  51BC               	movf	(doModeVerbose@p_1209+1)& (0+255),w,b
 13876  00147A  11BB               	iorwf	doModeVerbose@p_1209& (0+255),w,b
 13877  00147C  E014               	bz	l10617
 13878                           
 13879                           ; BSR set to: 2
 13880                           ;main.c: 941: maskno = atoi(p);
 13881  00147E  C2BB  F066         	movff	doModeVerbose@p_1209,?_atoi
 13882  001482  C2BC  F067         	movff	doModeVerbose@p_1209+1,?_atoi+1
 13883  001486  ECC8  F01F         	call	_atoi	;wreg free
 13884  00148A  5166               	movf	?_atoi& (0+255),w,b
 13885  00148C  0102               	movlb	2	; () banked
 13886  00148E  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13887                           
 13888                           ; BSR set to: 2
 13889                           ;main.c: 942: if (maskno > 1) {
 13890  001490  0E01               	movlw	1
 13891  001492  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13892  001494  D010               	goto	l10621
 13893                           
 13894                           ; BSR set to: 2
 13895                           ;main.c: 943: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13896  001496  0E75               	movlw	high STR_102
 13897  001498  0100               	movlb	0	; () banked
 13898  00149A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13899  00149C  0E29               	movlw	low STR_102
 13900  00149E  6F61               	movwf	?_putsUSART& (0+255),b
 13901  0014A0  EC4F  F02B         	call	_putsUSART	;wreg free
 13902  0014A4  D244               	goto	l526
 13903  0014A6                     l10617:
 13904                           
 13905                           ; BSR set to: 2
 13906                           ;main.c: 947: else {
 13907                           ;main.c: 948: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13908  0014A6  0E79               	movlw	high STR_103
 13909  0014A8  0100               	movlb	0	; () banked
 13910  0014AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13911  0014AC  0E0A               	movlw	low STR_103
 13912  0014AE  6F61               	movwf	?_putsUSART& (0+255),b
 13913  0014B0  EC4F  F02B         	call	_putsUSART	;wreg free
 13914  0014B4  D23C               	goto	l526
 13915  0014B6                     l10621:
 13916                           
 13917                           ; BSR set to: 2
 13918                           ;main.c: 950: }
 13919                           ;main.c: 953: p = strtok((0), ",");
 13920  0014B6  DA55               	call	PL6	;call to abstracted procedure
 13921  0014B8  EC8E  F027         	call	_strtok	;wreg free
 13922  0014BC  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1209
 13923  0014C0  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1209+1
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;main.c: 954: if ((0) != p) {
 13927  0014C4  0102               	movlb	2	; () banked
 13928  0014C6  51BC               	movf	(doModeVerbose@p_1209+1)& (0+255),w,b
 13929  0014C8  11BB               	iorwf	doModeVerbose@p_1209& (0+255),w,b
 13930  0014CA  E00A               	bz	l10627
 13931                           
 13932                           ; BSR set to: 2
 13933                           ;main.c: 955: mask_priority = atoi(p);
 13934  0014CC  C2BB  F066         	movff	doModeVerbose@p_1209,?_atoi
 13935  0014D0  C2BC  F067         	movff	doModeVerbose@p_1209+1,?_atoi+1
 13936  0014D4  ECC8  F01F         	call	_atoi	;wreg free
 13937  0014D8  5166               	movf	?_atoi& (0+255),w,b
 13938  0014DA  0102               	movlb	2	; () banked
 13939  0014DC  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13940                           
 13941                           ;main.c: 956: }
 13942  0014DE  D008               	goto	l10631
 13943  0014E0                     l10627:
 13944                           
 13945                           ; BSR set to: 2
 13946                           ;main.c: 957: else {
 13947                           ;main.c: 958: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13948  0014E0  0E77               	movlw	high STR_105
 13949  0014E2  0100               	movlb	0	; () banked
 13950  0014E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13951  0014E6  0EAA               	movlw	low STR_105
 13952  0014E8  6F61               	movwf	?_putsUSART& (0+255),b
 13953  0014EA  EC4F  F02B         	call	_putsUSART	;wreg free
 13954  0014EE  D21F               	goto	l526
 13955  0014F0                     l10631:
 13956                           
 13957                           ; BSR set to: 2
 13958                           ;main.c: 960: }
 13959                           ;main.c: 963: p = strtok((0), ",");
 13960  0014F0  DA38               	call	PL6	;call to abstracted procedure
 13961  0014F2  EC8E  F027         	call	_strtok	;wreg free
 13962  0014F6  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1209
 13963  0014FA  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1209+1
 13964                           
 13965                           ; BSR set to: 0
 13966                           ;main.c: 964: if ((0) != p) {
 13967  0014FE  0102               	movlb	2	; () banked
 13968  001500  51BC               	movf	(doModeVerbose@p_1209+1)& (0+255),w,b
 13969  001502  11BB               	iorwf	doModeVerbose@p_1209& (0+255),w,b
 13970  001504  E00B               	bz	l10637
 13971                           
 13972                           ; BSR set to: 2
 13973                           ;main.c: 965: mask_class = atoi(p);
 13974  001506  C2BB  F066         	movff	doModeVerbose@p_1209,?_atoi
 13975  00150A  C2BC  F067         	movff	doModeVerbose@p_1209+1,?_atoi+1
 13976  00150E  ECC8  F01F         	call	_atoi	;wreg free
 13977  001512  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13978  001516  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13979                           
 13980                           ;main.c: 966: }
 13981  00151A  D008               	goto	l10641
 13982  00151C                     l10637:
 13983                           
 13984                           ; BSR set to: 2
 13985                           ;main.c: 967: else {
 13986                           ;main.c: 968: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13987  00151C  0E79               	movlw	high STR_107
 13988  00151E  0100               	movlb	0	; () banked
 13989  001520  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13990  001522  0E54               	movlw	low STR_107
 13991  001524  6F61               	movwf	?_putsUSART& (0+255),b
 13992  001526  EC4F  F02B         	call	_putsUSART	;wreg free
 13993  00152A  D201               	goto	l526
 13994  00152C                     l10641:
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;main.c: 970: }
 13998                           ;main.c: 973: p = strtok((0), ",");
 13999  00152C  DA30               	call	PL10	;call to abstracted procedure
 14000  00152E  EC8E  F027         	call	_strtok	;wreg free
 14001  001532  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1209
 14002  001536  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1209+1
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;main.c: 974: if ((0) != p) {
 14006  00153A  0102               	movlb	2	; () banked
 14007  00153C  51BC               	movf	(doModeVerbose@p_1209+1)& (0+255),w,b
 14008  00153E  11BB               	iorwf	doModeVerbose@p_1209& (0+255),w,b
 14009  001540  E00A               	bz	l10647
 14010                           
 14011                           ; BSR set to: 2
 14012                           ;main.c: 975: mask_type = atoi(p);
 14013  001542  C2BB  F066         	movff	doModeVerbose@p_1209,?_atoi
 14014  001546  C2BC  F067         	movff	doModeVerbose@p_1209+1,?_atoi+1
 14015  00154A  ECC8  F01F         	call	_atoi	;wreg free
 14016  00154E  5166               	movf	?_atoi& (0+255),w,b
 14017  001550  0102               	movlb	2	; () banked
 14018  001552  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 14019                           
 14020                           ;main.c: 976: }
 14021  001554  D008               	goto	l10651
 14022  001556                     l10647:
 14023                           
 14024                           ; BSR set to: 2
 14025                           ;main.c: 977: else {
 14026                           ;main.c: 978: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14027  001556  0E79               	movlw	high STR_109
 14028  001558  0100               	movlb	0	; () banked
 14029  00155A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14030  00155C  0E79               	movlw	low STR_109
 14031  00155E  6F61               	movwf	?_putsUSART& (0+255),b
 14032  001560  EC4F  F02B         	call	_putsUSART	;wreg free
 14033  001564  D1E4               	goto	l526
 14034  001566                     l10651:
 14035                           
 14036                           ; BSR set to: 2
 14037                           ;main.c: 980: }
 14038                           ;main.c: 983: p = strtok((0), ",");
 14039  001566  D9FD               	call	PL6	;call to abstracted procedure
 14040  001568  EC8E  F027         	call	_strtok	;wreg free
 14041  00156C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1209
 14042  001570  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1209+1
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;main.c: 984: if ((0) != p) {
 14046  001574  0102               	movlb	2	; () banked
 14047  001576  51BC               	movf	(doModeVerbose@p_1209+1)& (0+255),w,b
 14048  001578  11BB               	iorwf	doModeVerbose@p_1209& (0+255),w,b
 14049  00157A  E00A               	bz	l10657
 14050                           
 14051                           ; BSR set to: 2
 14052                           ;main.c: 985: mask_nodeid = atoi(p);
 14053  00157C  C2BB  F066         	movff	doModeVerbose@p_1209,?_atoi
 14054  001580  C2BC  F067         	movff	doModeVerbose@p_1209+1,?_atoi+1
 14055  001584  ECC8  F01F         	call	_atoi	;wreg free
 14056  001588  5166               	movf	?_atoi& (0+255),w,b
 14057  00158A  0102               	movlb	2	; () banked
 14058  00158C  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14059                           
 14060                           ;main.c: 986: }
 14061  00158E  D008               	goto	l10661
 14062  001590                     l10657:
 14063                           
 14064                           ; BSR set to: 2
 14065                           ;main.c: 987: else {
 14066                           ;main.c: 988: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14067  001590  0E78               	movlw	high STR_111
 14068  001592  0100               	movlb	0	; () banked
 14069  001594  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14070  001596  0E6F               	movlw	low STR_111
 14071  001598  6F61               	movwf	?_putsUSART& (0+255),b
 14072  00159A  EC4F  F02B         	call	_putsUSART	;wreg free
 14073  00159E  D1C7               	goto	l526
 14074  0015A0                     l10661:
 14075                           
 14076                           ; BSR set to: 2
 14077                           ;main.c: 990: }
 14078                           ;main.c: 992: uint32_t id = ((uint32_t) mask_priority << 26) |
 14079                           ;main.c: 993: ((uint32_t) mask_class << 16) |
 14080                           ;main.c: 994: ((uint32_t) mask_type << 8) |
 14081                           ;main.c: 995: mask_nodeid;
 14082  0015A0  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14083  0015A4  DA49               	call	PL44	;call to abstracted procedure
 14084  0015A6  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14085  0015A8  0101               	movlb	1	; () banked
 14086  0015AA  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 14087  0015AC  0102               	movlb	2	; () banked
 14088  0015AE  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14089  0015B0  DA5C               	call	PL58	;call to abstracted procedure
 14090  0015B2  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14091  0015B6  D9F2               	call	PL12	;call to abstracted procedure
 14092  0015B8  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14093  0015BA  0101               	movlb	1	; () banked
 14094  0015BC  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14095  0015BE  0102               	movlb	2	; () banked
 14096  0015C0  6FA3               	movwf	doModeVerbose@id_1221& (0+255),b
 14097  0015C2  0101               	movlb	1	; () banked
 14098  0015C4  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14099  0015C6  0102               	movlb	2	; () banked
 14100  0015C8  6FA4               	movwf	(doModeVerbose@id_1221+1)& (0+255),b
 14101  0015CA  0101               	movlb	1	; () banked
 14102  0015CC  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14103  0015CE  0102               	movlb	2	; () banked
 14104  0015D0  6FA5               	movwf	(doModeVerbose@id_1221+2)& (0+255),b
 14105  0015D2  0101               	movlb	1	; () banked
 14106  0015D4  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14107  0015D6  0102               	movlb	2	; () banked
 14108  0015D8  6FA6               	movwf	(doModeVerbose@id_1221+3)& (0+255),b
 14109                           
 14110                           ; BSR set to: 2
 14111                           ;main.c: 998: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14112  0015DA  0E80               	movlw	128
 14113  0015DC  EC0E  F02E         	call	_ECANSetOperationMode
 14114                           
 14115                           ; BSR set to: 0
 14116                           ;main.c: 1000: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14117                           ;main.c: 1001: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14118  0015E0  0102               	movlb	2	; () banked
 14119  0015E2  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14120  0015E4  E008               	bz	l10669
 14121                           
 14122                           ; BSR set to: 2
 14123  0015E6  0E0F               	movlw	15	;volatile
 14124  0015E8  0100               	movlb	0	; () banked
 14125  0015EA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14126  0015EC  0E18               	movlw	24	;volatile
 14127  0015EE  DA31               	call	PL52	;call to abstracted procedure
 14128  0015F0  ECBC  F01E         	call	__CANIDToRegs	;wreg free
 14129  0015F4  D007               	goto	l10671
 14130  0015F6                     l10669:
 14131                           
 14132                           ; BSR set to: 2
 14133  0015F6  0E0F               	movlw	15	;volatile
 14134  0015F8  0100               	movlb	0	; () banked
 14135  0015FA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14136  0015FC  0E1C               	movlw	28	;volatile
 14137  0015FE  DA29               	call	PL52	;call to abstracted procedure
 14138  001600  ECBC  F01E         	call	__CANIDToRegs	;wreg free
 14139  001604                     l10671:
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;main.c: 1002: putsUSART((char *) "+OK\r\n");
 14143  001604  0E7F               	movlw	high STR_9
 14144  001606  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14145  001608  0E7F               	movlw	low STR_9
 14146  00160A  6F61               	movwf	?_putsUSART& (0+255),b
 14147  00160C  EC4F  F02B         	call	_putsUSART	;wreg free
 14148                           
 14149                           ;main.c: 1003: }
 14150  001610  D17F               	goto	l10759
 14151  001612                     l10673:
 14152                           
 14153                           ; BSR set to: 1
 14154                           ;main.c: 1010: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14155  001612  0E01               	movlw	high _cmdbuf
 14156  001614  0100               	movlb	0	; () banked
 14157  001616  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14158  001618  0E04               	movlw	low _cmdbuf
 14159  00161A  6F6D               	movwf	?_stristr& (0+255),b
 14160  00161C  0E7F               	movlw	high STR_113
 14161  00161E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14162  001620  0E9D               	movlw	low STR_113
 14163  001622  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14164  001624  ECA1  F028         	call	_stristr	;wreg free
 14165  001628  D983               	call	PL2	;call to abstracted procedure
 14166  00162A  E104               	bnz	u13155
 14167  00162C  0100               	movlb	0	; () banked
 14168  00162E  516D               	movf	?_stristr& (0+255),w,b
 14169  001630  0101               	movlb	1	; () banked
 14170  001632  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14171  001634                     u13155:
 14172  001634  E001 D15A          	bnz	l10753
 14173                           
 14174                           ; BSR set to: 1
 14175                           ;main.c: 1013: strcpy(cmdbuf, cmdbuf + 4);
 14176  001638  0E01               	movlw	high _cmdbuf
 14177  00163A  0100               	movlb	0	; () banked
 14178  00163C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14179  00163E  0E04               	movlw	low _cmdbuf
 14180  001640  6F60               	movwf	?_strcpy& (0+255),b
 14181  001642  0E08               	movlw	low (_cmdbuf+4)
 14182  001644  0101               	movlb	1	; () banked
 14183  001646  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14184  001648  0E01               	movlw	high (_cmdbuf+4)
 14185  00164A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14186  00164C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14187  001650  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14188  001654  EC9A  F02D         	call	_strcpy	;wreg free
 14189                           
 14190                           ;main.c: 1016: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14191  001658  0E01               	movlw	high _cmdbuf
 14192  00165A  0100               	movlb	0	; () banked
 14193  00165C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14194  00165E  0E04               	movlw	low _cmdbuf
 14195  001660  6F6D               	movwf	?_stristr& (0+255),b
 14196  001662  0E7F               	movlw	high STR_114
 14197  001664  6F70               	movwf	(?_stristr+3)& (0+255),b
 14198  001666  0EDC               	movlw	low STR_114
 14199  001668  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14200  00166A  ECA1  F028         	call	_stristr	;wreg free
 14201  00166E  D960               	call	PL2	;call to abstracted procedure
 14202  001670  E104               	bnz	u13165
 14203  001672  0100               	movlb	0	; () banked
 14204  001674  516D               	movf	?_stristr& (0+255),w,b
 14205  001676  0101               	movlb	1	; () banked
 14206  001678  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14207  00167A                     u13165:
 14208  00167A  E114               	bnz	l10685
 14209                           
 14210                           ; BSR set to: 1
 14211                           ;main.c: 1017: bHex = 1;
 14212  00167C  0E01               	movlw	1
 14213  00167E  6F00               	movwf	_bHex& (0+255),b
 14214                           
 14215                           ; BSR set to: 1
 14216                           ;main.c: 1018: (Busy_eep(), Write_b_eep(0x06,1));
 14217  001680  EC4F  F02E         	call	_Busy_eep	;wreg free
 14218  001684  0100               	movlb	0	; () banked
 14219  001686  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14220  001688  0E06               	movlw	6
 14221  00168A  6F60               	movwf	?_Write_b_eep& (0+255),b
 14222  00168C  0E01               	movlw	1
 14223  00168E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14224  001690  EC67  F02D         	call	_Write_b_eep	;wreg free
 14225                           
 14226                           ;main.c: 1019: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14227  001694  0E77               	movlw	high STR_115
 14228  001696  0100               	movlb	0	; () banked
 14229  001698  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14230  00169A  0E03               	movlw	low STR_115
 14231  00169C  6F61               	movwf	?_putsUSART& (0+255),b
 14232  00169E  EC4F  F02B         	call	_putsUSART	;wreg free
 14233                           
 14234                           ;main.c: 1020: }
 14235  0016A2  D136               	goto	l10759
 14236  0016A4                     l10685:
 14237                           
 14238                           ; BSR set to: 1
 14239                           ;main.c: 1022: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14240  0016A4  0E01               	movlw	high _cmdbuf
 14241  0016A6  0100               	movlb	0	; () banked
 14242  0016A8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14243  0016AA  0E04               	movlw	low _cmdbuf
 14244  0016AC  6F6D               	movwf	?_stristr& (0+255),b
 14245  0016AE  0E7F               	movlw	high STR_116
 14246  0016B0  6F70               	movwf	(?_stristr+3)& (0+255),b
 14247  0016B2  0E05               	movlw	low STR_116
 14248  0016B4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14249  0016B6  ECA1  F028         	call	_stristr	;wreg free
 14250  0016BA  D93A               	call	PL2	;call to abstracted procedure
 14251  0016BC  E104               	bnz	u13175
 14252  0016BE  0100               	movlb	0	; () banked
 14253  0016C0  516D               	movf	?_stristr& (0+255),w,b
 14254  0016C2  0101               	movlb	1	; () banked
 14255  0016C4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14256  0016C6                     u13175:
 14257  0016C6  E113               	bnz	l10695
 14258                           
 14259                           ; BSR set to: 1
 14260                           ;main.c: 1023: bHex = 0;
 14261  0016C8  6B00               	clrf	_bHex& (0+255),b
 14262                           
 14263                           ; BSR set to: 1
 14264                           ;main.c: 1024: (Busy_eep(), Write_b_eep(0x06,0));
 14265  0016CA  EC4F  F02E         	call	_Busy_eep	;wreg free
 14266  0016CE  0100               	movlb	0	; () banked
 14267  0016D0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14268  0016D2  0E06               	movlw	6
 14269  0016D4  6F60               	movwf	?_Write_b_eep& (0+255),b
 14270  0016D6  0E00               	movlw	0
 14271  0016D8  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14272  0016DA  EC67  F02D         	call	_Write_b_eep	;wreg free
 14273                           
 14274                           ;main.c: 1025: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14275  0016DE  0E77               	movlw	high STR_117
 14276  0016E0  0100               	movlb	0	; () banked
 14277  0016E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14278  0016E4  0ED2               	movlw	low STR_117
 14279  0016E6  6F61               	movwf	?_putsUSART& (0+255),b
 14280  0016E8  EC4F  F02B         	call	_putsUSART	;wreg free
 14281                           
 14282                           ;main.c: 1026: }
 14283  0016EC  D111               	goto	l10759
 14284  0016EE                     l10695:
 14285                           
 14286                           ; BSR set to: 1
 14287                           ;main.c: 1027: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14288  0016EE  0E01               	movlw	high _cmdbuf
 14289  0016F0  0100               	movlb	0	; () banked
 14290  0016F2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14291  0016F4  0E04               	movlw	low _cmdbuf
 14292  0016F6  6F6D               	movwf	?_stristr& (0+255),b
 14293  0016F8  0E7E               	movlw	high STR_118
 14294  0016FA  6F70               	movwf	(?_stristr+3)& (0+255),b
 14295  0016FC  0E86               	movlw	low STR_118
 14296  0016FE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14297  001700  ECA1  F028         	call	_stristr	;wreg free
 14298  001704  516E               	movf	(?_stristr+1)& (0+255),w,b
 14299  001706  116D               	iorwf	?_stristr& (0+255),w,b
 14300  001708  E030               	bz	l10709
 14301                           
 14302                           ; BSR set to: 0
 14303                           ;main.c: 1028: strcpy(cmdbuf, cmdbuf + 10);
 14304  00170A  0E01               	movlw	high _cmdbuf
 14305  00170C  0100               	movlb	0	; () banked
 14306  00170E  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14307  001710  0E04               	movlw	low _cmdbuf
 14308  001712  6F60               	movwf	?_strcpy& (0+255),b
 14309  001714  0E0E               	movlw	low (_cmdbuf+10)
 14310  001716  0101               	movlb	1	; () banked
 14311  001718  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14312  00171A  0E01               	movlw	high (_cmdbuf+10)
 14313  00171C  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14314  00171E  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14315  001722  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14316  001726  EC9A  F02D         	call	_strcpy	;wreg free
 14317                           
 14318                           ;main.c: 1029: rwtimeout = atoi(cmdbuf);
 14319  00172A  0E01               	movlw	high _cmdbuf
 14320  00172C  0100               	movlb	0	; () banked
 14321  00172E  6F67               	movwf	(?_atoi+1)& (0+255),b
 14322  001730  0E04               	movlw	low _cmdbuf
 14323  001732  6F66               	movwf	?_atoi& (0+255),b
 14324  001734  ECC8  F01F         	call	_atoi	;wreg free
 14325  001738  5166               	movf	?_atoi& (0+255),w,b
 14326  00173A  0101               	movlb	1	; () banked
 14327  00173C  6F03               	movwf	_rwtimeout& (0+255),b
 14328                           
 14329                           ; BSR set to: 1
 14330                           ;main.c: 1030: if (rwtimeout < 10u) {
 14331  00173E  0E0A               	movlw	10
 14332  001740  6103               	cpfslt	_rwtimeout& (0+255),b
 14333  001742  D001               	goto	l10705
 14334                           
 14335                           ; BSR set to: 1
 14336                           ;main.c: 1031: rwtimeout = 10u;
 14337  001744  6F03               	movwf	_rwtimeout& (0+255),b
 14338  001746                     l10705:
 14339                           
 14340                           ; BSR set to: 1
 14341                           ;main.c: 1032: }
 14342                           ;main.c: 1033: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14343  001746  EC4F  F02E         	call	_Busy_eep	;wreg free
 14344  00174A  0100               	movlb	0	; () banked
 14345  00174C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14346  00174E  0E09               	movlw	9
 14347  001750  6F60               	movwf	?_Write_b_eep& (0+255),b
 14348  001752  C103  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14349  001756  EC67  F02D         	call	_Write_b_eep	;wreg free
 14350                           
 14351                           ;main.c: 1034: putsUSART((char *) "+OK\r\n");
 14352  00175A  0E7F               	movlw	high STR_9
 14353  00175C  0100               	movlb	0	; () banked
 14354  00175E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14355  001760  0E7F               	movlw	low STR_9
 14356  001762  6F61               	movwf	?_putsUSART& (0+255),b
 14357  001764  EC4F  F02B         	call	_putsUSART	;wreg free
 14358                           
 14359                           ;main.c: 1035: }
 14360  001768  D0D3               	goto	l10759
 14361  00176A                     l10709:
 14362                           
 14363                           ; BSR set to: 0
 14364                           ;main.c: 1036: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14365  00176A  0E01               	movlw	high _cmdbuf
 14366  00176C  0100               	movlb	0	; () banked
 14367  00176E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14368  001770  0E04               	movlw	low _cmdbuf
 14369  001772  6F6D               	movwf	?_stristr& (0+255),b
 14370  001774  0E7E               	movlw	high STR_120
 14371  001776  6F70               	movwf	(?_stristr+3)& (0+255),b
 14372  001778  0EBA               	movlw	low STR_120
 14373  00177A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14374  00177C  ECA1  F028         	call	_stristr	;wreg free
 14375  001780  516E               	movf	(?_stristr+1)& (0+255),w,b
 14376  001782  116D               	iorwf	?_stristr& (0+255),w,b
 14377  001784  E005               	bz	l10713
 14378                           
 14379                           ; BSR set to: 0
 14380                           ;main.c: 1037: strcpy(cmdbuf, cmdbuf + 8);
 14381  001786  0E01               	movlw	high _cmdbuf
 14382  001788  D8F4               	call	PL8	;call to abstracted procedure
 14383  00178A  EC9A  F02D         	call	_strcpy	;wreg free
 14384                           
 14385                           ;main.c: 1038: }
 14386  00178E  D0C0               	goto	l10759
 14387  001790                     l10713:
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;main.c: 1039: else if (0 != stristr(cmdbuf, "MODE ")) {
 14391  001790  0E01               	movlw	high _cmdbuf
 14392  001792  0100               	movlb	0	; () banked
 14393  001794  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14394  001796  0E04               	movlw	low _cmdbuf
 14395  001798  6F6D               	movwf	?_stristr& (0+255),b
 14396  00179A  0E7F               	movlw	high STR_121
 14397  00179C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14398  00179E  0E85               	movlw	low STR_121
 14399  0017A0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14400  0017A2  ECA1  F028         	call	_stristr	;wreg free
 14401  0017A6  516E               	movf	(?_stristr+1)& (0+255),w,b
 14402  0017A8  116D               	iorwf	?_stristr& (0+255),w,b
 14403  0017AA  E068               	bz	l10743
 14404                           
 14405                           ; BSR set to: 0
 14406                           ;main.c: 1040: strcpy(cmdbuf, cmdbuf + 5);
 14407  0017AC  D8CB               	call	PL4	;call to abstracted procedure
 14408  0017AE  EC9A  F02D         	call	_strcpy	;wreg free
 14409                           
 14410                           ;main.c: 1041: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14411  0017B2  0E01               	movlw	high _cmdbuf
 14412  0017B4  0100               	movlb	0	; () banked
 14413  0017B6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14414  0017B8  0E04               	movlw	low _cmdbuf
 14415  0017BA  6F6D               	movwf	?_stristr& (0+255),b
 14416  0017BC  0E7E               	movlw	high STR_122
 14417  0017BE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14418  0017C0  0EFD               	movlw	low STR_122
 14419  0017C2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14420  0017C4  ECA1  F028         	call	_stristr	;wreg free
 14421  0017C8  516E               	movf	(?_stristr+1)& (0+255),w,b
 14422  0017CA  116D               	iorwf	?_stristr& (0+255),w,b
 14423  0017CC  E013               	bz	l10727
 14424                           
 14425                           ; BSR set to: 0
 14426                           ;main.c: 1042: mode = 0;
 14427  0017CE  6BF1               	clrf	_mode& (0+255),b
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;main.c: 1043: (Busy_eep(), Write_b_eep(0x03,0));
 14431  0017D0  EC4F  F02E         	call	_Busy_eep	;wreg free
 14432  0017D4  0100               	movlb	0	; () banked
 14433  0017D6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14434  0017D8  0E03               	movlw	3
 14435  0017DA  6F60               	movwf	?_Write_b_eep& (0+255),b
 14436  0017DC  0E00               	movlw	0
 14437  0017DE  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14438  0017E0  EC67  F02D         	call	_Write_b_eep	;wreg free
 14439                           
 14440                           ;main.c: 1044: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14441  0017E4  0E7B               	movlw	high STR_123
 14442  0017E6  0100               	movlb	0	; () banked
 14443  0017E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14444  0017EA  0E47               	movlw	low STR_123
 14445  0017EC  6F61               	movwf	?_putsUSART& (0+255),b
 14446  0017EE  EC4F  F02B         	call	_putsUSART	;wreg free
 14447                           
 14448                           ;main.c: 1045: }
 14449  0017F2  D08E               	goto	l10759
 14450  0017F4                     l10727:
 14451                           
 14452                           ; BSR set to: 0
 14453                           ;main.c: 1046: else if (0 != stristr(cmdbuf, "VSCP")) {
 14454  0017F4  0E01               	movlw	high _cmdbuf
 14455  0017F6  0100               	movlb	0	; () banked
 14456  0017F8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14457  0017FA  0E04               	movlw	low _cmdbuf
 14458  0017FC  6F6D               	movwf	?_stristr& (0+255),b
 14459  0017FE  0E7F               	movlw	high STR_124
 14460  001800  6F70               	movwf	(?_stristr+3)& (0+255),b
 14461  001802  0EC0               	movlw	low STR_124
 14462  001804  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14463  001806  ECA1  F028         	call	_stristr	;wreg free
 14464  00180A  516E               	movf	(?_stristr+1)& (0+255),w,b
 14465  00180C  116D               	iorwf	?_stristr& (0+255),w,b
 14466  00180E  E014               	bz	l10735
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;main.c: 1047: mode = 1;
 14470  001810  0E01               	movlw	1
 14471  001812  6FF1               	movwf	_mode& (0+255),b
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;main.c: 1048: (Busy_eep(), Write_b_eep(0x03,1));
 14475  001814  EC4F  F02E         	call	_Busy_eep	;wreg free
 14476  001818  0100               	movlb	0	; () banked
 14477  00181A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14478  00181C  0E03               	movlw	3
 14479  00181E  6F60               	movwf	?_Write_b_eep& (0+255),b
 14480  001820  0E01               	movlw	1
 14481  001822  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14482  001824  EC67  F02D         	call	_Write_b_eep	;wreg free
 14483                           
 14484                           ;main.c: 1049: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14485  001828  0E7A               	movlw	high STR_125
 14486  00182A  0100               	movlb	0	; () banked
 14487  00182C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14488  00182E  0ECC               	movlw	low STR_125
 14489  001830  6F61               	movwf	?_putsUSART& (0+255),b
 14490  001832  EC4F  F02B         	call	_putsUSART	;wreg free
 14491                           
 14492                           ;main.c: 1050: }
 14493  001836  D06C               	goto	l10759
 14494  001838                     l10735:
 14495                           
 14496                           ; BSR set to: 0
 14497                           ;main.c: 1051: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14498  001838  0E01               	movlw	high _cmdbuf
 14499  00183A  0100               	movlb	0	; () banked
 14500  00183C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14501  00183E  0E04               	movlw	low _cmdbuf
 14502  001840  6F6D               	movwf	?_stristr& (0+255),b
 14503  001842  0E7F               	movlw	high STR_126
 14504  001844  6F70               	movwf	(?_stristr+3)& (0+255),b
 14505  001846  0E97               	movlw	low STR_126
 14506  001848  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14507  00184A  ECA1  F028         	call	_stristr	;wreg free
 14508  00184E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14509  001850  116D               	iorwf	?_stristr& (0+255),w,b
 14510  001852  E05E               	bz	l10759
 14511                           
 14512                           ; BSR set to: 0
 14513                           ;main.c: 1052: mode = 2;
 14514  001854  0E02               	movlw	2
 14515  001856  6FF1               	movwf	_mode& (0+255),b
 14516                           
 14517                           ; BSR set to: 0
 14518                           ;main.c: 1053: (Busy_eep(), Write_b_eep(0x03,2));
 14519  001858  EC4F  F02E         	call	_Busy_eep	;wreg free
 14520  00185C  0100               	movlb	0	; () banked
 14521  00185E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14522  001860  0E03               	movlw	3
 14523  001862  6F60               	movwf	?_Write_b_eep& (0+255),b
 14524  001864  0E02               	movlw	2
 14525  001866  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14526  001868  EC67  F02D         	call	_Write_b_eep	;wreg free
 14527                           
 14528                           ;main.c: 1054: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14529  00186C  0E7B               	movlw	high STR_127
 14530  00186E  0100               	movlb	0	; () banked
 14531  001870  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14532  001872  0EB4               	movlw	low STR_127
 14533  001874  6F61               	movwf	?_putsUSART& (0+255),b
 14534  001876  EC4F  F02B         	call	_putsUSART	;wreg free
 14535  00187A  D04A               	goto	l10759
 14536  00187C                     l10743:
 14537                           
 14538                           ; BSR set to: 0
 14539                           ;main.c: 1058: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14540  00187C  0E01               	movlw	high _cmdbuf
 14541  00187E  0100               	movlb	0	; () banked
 14542  001880  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14543  001882  0E04               	movlw	low _cmdbuf
 14544  001884  6F6D               	movwf	?_stristr& (0+255),b
 14545  001886  0E7E               	movlw	high STR_128
 14546  001888  6F70               	movwf	(?_stristr+3)& (0+255),b
 14547  00188A  0EED               	movlw	low STR_128
 14548  00188C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14549  00188E  ECA1  F028         	call	_stristr	;wreg free
 14550  001892  516E               	movf	(?_stristr+1)& (0+255),w,b
 14551  001894  116D               	iorwf	?_stristr& (0+255),w,b
 14552  001896  E011               	bz	l10747
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;main.c: 1059: strcpy(cmdbuf, cmdbuf + 7);
 14556  001898  0E01               	movlw	high _cmdbuf
 14557  00189A  0100               	movlb	0	; () banked
 14558  00189C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14559  00189E  0E04               	movlw	low _cmdbuf
 14560  0018A0  6F60               	movwf	?_strcpy& (0+255),b
 14561  0018A2  0E0B               	movlw	low (_cmdbuf+7)
 14562  0018A4  0101               	movlb	1	; () banked
 14563  0018A6  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14564  0018A8  0E01               	movlw	high (_cmdbuf+7)
 14565  0018AA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14566  0018AC  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14567  0018B0  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14568  0018B4  EC9A  F02D         	call	_strcpy	;wreg free
 14569                           
 14570                           ;main.c: 1060: }
 14571  0018B8  D02B               	goto	l10759
 14572  0018BA                     l10747:
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;main.c: 1062: else if (0 != stristr(cmdbuf, "MASK ")) {
 14576  0018BA  0E01               	movlw	high _cmdbuf
 14577  0018BC  0100               	movlb	0	; () banked
 14578  0018BE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14579  0018C0  0E04               	movlw	low _cmdbuf
 14580  0018C2  6F6D               	movwf	?_stristr& (0+255),b
 14581  0018C4  0E7F               	movlw	high STR_129
 14582  0018C6  6F70               	movwf	(?_stristr+3)& (0+255),b
 14583  0018C8  0E8B               	movlw	low STR_129
 14584  0018CA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14585  0018CC  ECA1  F028         	call	_stristr	;wreg free
 14586  0018D0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14587  0018D2  116D               	iorwf	?_stristr& (0+255),w,b
 14588  0018D4  E004               	bz	l10751
 14589                           
 14590                           ; BSR set to: 0
 14591                           ;main.c: 1063: strcpy(cmdbuf, cmdbuf + 5);
 14592  0018D6  D836               	call	PL4	;call to abstracted procedure
 14593  0018D8  EC9A  F02D         	call	_strcpy	;wreg free
 14594                           
 14595                           ;main.c: 1064: }
 14596  0018DC  D019               	goto	l10759
 14597  0018DE                     l10751:
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;main.c: 1065: else {
 14601                           ;main.c: 1066: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14602  0018DE  0E7A               	movlw	high STR_130
 14603  0018E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14604  0018E2  0E69               	movlw	low STR_130
 14605  0018E4  6F61               	movwf	?_putsUSART& (0+255),b
 14606  0018E6  EC4F  F02B         	call	_putsUSART	;wreg free
 14607  0018EA  D012               	goto	l10759
 14608  0018EC                     l10753:
 14609                           
 14610                           ; BSR set to: 1
 14611                           ;main.c: 1070: else {
 14612                           ;main.c: 1071: if ( 0x0d == cmdbuf[ 0 ] ) {
 14613  0018EC  5104               	movf	_cmdbuf& (0+255),w,b
 14614  0018EE  0A0D               	xorlw	13
 14615  0018F0  E108               	bnz	l10757
 14616                           
 14617                           ; BSR set to: 1
 14618                           ;main.c: 1072: putsUSART((char *) "+OK\r\n");
 14619  0018F2  0E7F               	movlw	high STR_9
 14620  0018F4  0100               	movlb	0	; () banked
 14621  0018F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14622  0018F8  0E7F               	movlw	low STR_9
 14623  0018FA  6F61               	movwf	?_putsUSART& (0+255),b
 14624  0018FC  EC4F  F02B         	call	_putsUSART	;wreg free
 14625                           
 14626                           ;main.c: 1073: }
 14627  001900  D007               	goto	l10759
 14628  001902                     l10757:
 14629                           
 14630                           ; BSR set to: 1
 14631                           ;main.c: 1074: else {
 14632                           ;main.c: 1075: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14633  001902  0E7B               	movlw	high STR_132
 14634  001904  0100               	movlb	0	; () banked
 14635  001906  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14636  001908  0E7E               	movlw	low STR_132
 14637  00190A  6F61               	movwf	?_putsUSART& (0+255),b
 14638  00190C  EC4F  F02B         	call	_putsUSART	;wreg free
 14639  001910                     l10759:
 14640                           
 14641                           ;main.c: 1076: }
 14642                           ;main.c: 1077: }
 14643                           ;main.c: 1079: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14644  001910  0E01               	movlw	high _cmdbuf
 14645  001912  0100               	movlb	0	; () banked
 14646  001914  6F61               	movwf	(?_memset+1)& (0+255),b
 14647  001916  0E04               	movlw	low _cmdbuf
 14648  001918  6F60               	movwf	?_memset& (0+255),b
 14649  00191A  6B63               	clrf	(?_memset+3)& (0+255),b
 14650  00191C  6B62               	clrf	(?_memset+2)& (0+255),b
 14651  00191E  6B65               	clrf	(?_memset+5)& (0+255),b
 14652  001920  0E50               	movlw	80
 14653  001922  6F64               	movwf	(?_memset+4)& (0+255),b
 14654  001924  ECC9  F02D         	call	_memset	;wreg free
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;main.c: 1080: pos = 0;
 14658  001928  0101               	movlb	1	; () banked
 14659  00192A  6B02               	clrf	_pos& (0+255),b
 14660  00192C                     l10763:
 14661                           
 14662                           ;main.c: 1081: }
 14663                           ;main.c: 1082: }
 14664                           ;main.c: 1085: (INTCONbits.GIE = 1);
 14665  00192C  8EF2               	bsf	intcon,7,c	;volatile
 14666  00192E                     l526:
 14667  00192E  0012               	return	
 14668  001930                     __end_of_doModeVerbose:
 14669                           	opt stack 0
 14670  001930                     PL2:
 14671                           	opt stack 20
 14672  001930  0E04               	movlw	low _cmdbuf
 14673  001932  0101               	movlb	1	; () banked
 14674  001934  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14675  001936  0E01               	movlw	high _cmdbuf
 14676  001938  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14677  00193A  0100               	movlb	0	; () banked
 14678  00193C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14679  00193E  0101               	movlb	1	; () banked
 14680  001940  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14681  001942  0012               	return	
 14682  001944                     __end_ofPL2:
 14683                           	opt stack 0
 14684  001944                     PL4:
 14685                           	opt stack 20
 14686  001944  0E01               	movlw	high _cmdbuf
 14687  001946  0100               	movlb	0	; () banked
 14688  001948  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14689  00194A  0E04               	movlw	low _cmdbuf
 14690  00194C  6F60               	movwf	?_strcpy& (0+255),b
 14691  00194E  0E09               	movlw	low (_cmdbuf+5)
 14692  001950  0101               	movlb	1	; () banked
 14693  001952  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14694  001954  0E01               	movlw	high (_cmdbuf+5)
 14695  001956  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14696  001958  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14697  00195C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14698  001960  0012               	return	
 14699  001962                     __end_ofPL4:
 14700                           	opt stack 0
 14701  001962                     PL6:
 14702                           	opt stack 20
 14703  001962  0100               	movlb	0	; () banked
 14704  001964  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14705  001966  6B6C               	clrf	?_strtok& (0+255),b
 14706  001968  0E7F               	movlw	high STR_30
 14707  00196A  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14708  00196C  0EF4               	movlw	low STR_30
 14709  00196E  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14710  001970  0012               	return	
 14711  001972                     __end_ofPL6:
 14712                           	opt stack 0
 14713  001972                     PL8:
 14714                           	opt stack 20
 14715  001972  0100               	movlb	0	; () banked
 14716  001974  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14717  001976  0E04               	movlw	low _cmdbuf
 14718  001978  6F60               	movwf	?_strcpy& (0+255),b
 14719  00197A  0E0C               	movlw	low (_cmdbuf+8)
 14720  00197C  0101               	movlb	1	; () banked
 14721  00197E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14722  001980  0E01               	movlw	high (_cmdbuf+8)
 14723  001982  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14724  001984  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14725  001988  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14726  00198C  0012               	return	
 14727  00198E                     __end_ofPL8:
 14728                           	opt stack 0
 14729  00198E                     PL10:
 14730                           	opt stack 20
 14731  00198E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14732  001990  6B6C               	clrf	?_strtok& (0+255),b
 14733  001992  0E7F               	movlw	high STR_30
 14734  001994  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14735  001996  0EF4               	movlw	low STR_30
 14736  001998  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14737  00199A  0012               	return	
 14738  00199C                     __end_ofPL10:
 14739                           	opt stack 0
 14740  00199C                     PL12:
 14741                           	opt stack 20
 14742  00199C  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14743  00199E  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14744  0019A0  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14745  0019A2  0E1A               	movlw	26
 14746  0019A4                     u13055:
 14747  0019A4  90D8               	bcf	status,0,c
 14748  0019A6  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14749  0019A8  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14750  0019AA  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14751  0019AC  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14752  0019AE  2EE8               	decfsz	wreg,f,c
 14753  0019B0  D7F9               	goto	u13055
 14754  0019B2  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14755  0019B4  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14756  0019B6  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14757  0019B8  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14758  0019BA  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14759  0019BC  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14760  0019BE  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14761  0019C0  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14762  0019C2  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14763  0019C4  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14764  0019C6  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14765  0019C8  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14766  0019CA  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14767  0019CC  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14768  0019CE  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14769  0019D0  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14770  0019D2  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14771  0019D4  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14772  0019D6  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14773  0019D8  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14774  0019DA  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14775  0019DC  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14776  0019DE  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14777  0019E0  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14778  0019E2  0102               	movlb	2	; () banked
 14779  0019E4  0012               	return	
 14780  0019E6                     __end_ofPL12:
 14781                           	opt stack 0
 14782  0019E6                     PL28:
 14783                           	opt stack 20
 14784  0019E6  0100               	movlb	0	; () banked
 14785  0019E8  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14786  0019EA  6B6C               	clrf	?_strtok& (0+255),b
 14787  0019EC  0E7F               	movlw	high (STR_256+5)
 14788  0019EE  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14789  0019F0  0E2A               	movlw	low (STR_256+5)
 14790  0019F2  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14791  0019F4  0012               	return	
 14792  0019F6                     __end_ofPL28:
 14793                           	opt stack 0
 14794  0019F6                     PL32:
 14795                           	opt stack 20
 14796  0019F6  0E01               	movlw	high _cmdbuf
 14797  0019F8  0100               	movlb	0	; () banked
 14798  0019FA  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14799  0019FC  0E04               	movlw	low _cmdbuf
 14800  0019FE  6F6C               	movwf	?_strtok& (0+255),b
 14801  001A00  0E7F               	movlw	high STR_30
 14802  001A02  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14803  001A04  0EF4               	movlw	low STR_30
 14804  001A06  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14805  001A08  0012               	return	
 14806  001A0A                     __end_ofPL32:
 14807                           	opt stack 0
 14808  001A0A                     PL36:
 14809                           	opt stack 20
 14810  001A0A  0100               	movlb	0	; () banked
 14811  001A0C  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14812  001A0E  0E04               	movlw	low _cmdbuf
 14813  001A10  6F6C               	movwf	?_strtok& (0+255),b
 14814  001A12  0E7F               	movlw	high (STR_256+5)
 14815  001A14  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14816  001A16  0E2A               	movlw	low (STR_256+5)
 14817  001A18  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14818  001A1A  0012               	return	
 14819  001A1C                     __end_ofPL36:
 14820                           	opt stack 0
 14821  001A1C                     PL38:
 14822                           	opt stack 20
 14823  001A1C  0102               	movlb	2	; () banked
 14824  001A1E  51B0               	movf	doModeVerbose@i_1110& (0+255),w,b
 14825  001A20  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14826  001A24  0101               	movlb	1	; () banked
 14827  001A26  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14828  001A28  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14829  001A2A  0E00               	movlw	0
 14830  001A2C  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14831  001A2E  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14832  001A30  0100               	movlb	0	; () banked
 14833  001A32  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14834  001A34  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14835  001A36  0012               	return	
 14836  001A38                     __end_ofPL38:
 14837                           	opt stack 0
 14838  001A38                     PL44:
 14839                           	opt stack 20
 14840  001A38  0101               	movlb	1	; () banked
 14841  001A3A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14842  001A3C  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14843  001A3E  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14844  001A40  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14845  001A44  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14846  001A48  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14847  001A4C  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14848  001A4E  0102               	movlb	2	; () banked
 14849  001A50  0012               	return	
 14850  001A52                     __end_ofPL44:
 14851                           	opt stack 0
 14852  001A52                     PL52:
 14853                           	opt stack 20
 14854  001A52  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14855  001A54  C2A3  F062         	movff	doModeVerbose@id_1221,?__CANIDToRegs+2
 14856  001A58  C2A4  F063         	movff	doModeVerbose@id_1221+1,?__CANIDToRegs+3
 14857  001A5C  C2A5  F064         	movff	doModeVerbose@id_1221+2,?__CANIDToRegs+4
 14858  001A60  C2A6  F065         	movff	doModeVerbose@id_1221+3,?__CANIDToRegs+5
 14859  001A64  0E01               	movlw	1
 14860  001A66  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14861  001A68  0C01               	retlw	1
 14862  001A6A                     __end_ofPL52:
 14863                           	opt stack 0
 14864  001A6A                     PL58:
 14865                           	opt stack 20
 14866  001A6A  0101               	movlb	1	; () banked
 14867  001A6C  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14868  001A6E  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14869  001A70  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14870  001A72  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14871  001A76  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14872  001A7A  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14873  001A7C  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14874  001A7E  0012               	return	
 14875  001A80                     __end_ofPL58:
 14876                           	opt stack 0
 14877                           tblptru	equ	0xFF8
 14878                           tblptrh	equ	0xFF7
 14879                           tblptrl	equ	0xFF6
 14880                           tablat	equ	0xFF5
 14881                           prodh	equ	0xFF4
 14882                           prodl	equ	0xFF3
 14883                           intcon	equ	0xFF2
 14884                           indf0	equ	0xFEF
 14885                           postinc0	equ	0xFEE
 14886                           fsr0h	equ	0xFEA
 14887                           fsr0l	equ	0xFE9
 14888                           wreg	equ	0xFE8
 14889                           indf1	equ	0xFE7
 14890                           postinc1	equ	0xFE6
 14891                           postdec1	equ	0xFE5
 14892                           fsr1h	equ	0xFE2
 14893                           fsr1l	equ	0xFE1
 14894                           indf2	equ	0xFDF
 14895                           postinc2	equ	0xFDE
 14896                           postdec2	equ	0xFDD
 14897                           plusw2	equ	0xFDB
 14898                           fsr2h	equ	0xFDA
 14899                           fsr2l	equ	0xFD9
 14900                           status	equ	0xFD8
 14901                           
 14902 ;; *************** function _setFilter *****************
 14903 ;; Defined at:
 14904 ;;		line 2791 in file "main.c"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;  filter          1    wreg     unsigned char 
 14907 ;;  val             4    0[BANK0 ] unsigned long 
 14908 ;; Auto vars:     Size  Location     Type
 14909 ;;  filter          1   10[BANK0 ] unsigned char 
 14910 ;;  eidl            1   14[BANK0 ] unsigned char 
 14911 ;;  eidh            1   13[BANK0 ] unsigned char 
 14912 ;;  sidl            1   12[BANK0 ] unsigned char 
 14913 ;;  sidh            1   11[BANK0 ] unsigned char 
 14914 ;; Return value:  Size  Location     Type
 14915 ;;		None               void
 14916 ;; Registers used:
 14917 ;;		wreg, status,2, status,0
 14918 ;; Tracked objects:
 14919 ;;		On entry : F/2
 14920 ;;		On exit  : F/0
 14921 ;;		Unchanged: 0/0
 14922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14923 ;;      Params:         0       4       0       0       0       0       0
 14924 ;;      Locals:         0       5       0       0       0       0       0
 14925 ;;      Temps:          0       6       0       0       0       0       0
 14926 ;;      Totals:         0      15       0       0       0       0       0
 14927 ;;Total ram usage:       15 bytes
 14928 ;; Hardware stack levels used:    1
 14929 ;; Hardware stack levels required when called:    3
 14930 ;; This function calls:
 14931 ;;		Nothing
 14932 ;; This function is called by:
 14933 ;;		_doModeVerbose
 14934 ;; This function uses a non-reentrant model
 14935 ;;
 14936                           
 14937                           	psect	text23
 14938  002D22                     __ptext23:
 14939                           	opt stack 0
 14940  002D22                     _setFilter:
 14941                           	opt stack 26
 14942                           
 14943                           ;incstack = 0
 14944                           ;incstack = 0
 14945                           ;setFilter@filter stored from wreg
 14946  002D22  CFE8 F06A          	movff	wreg,setFilter@filter
 14947                           
 14948                           ; BSR set to: 2
 14949                           ;main.c: 2792: uint8_t sidh = (long) val >> 21L;
 14950  002D26  0E15               	movlw	21
 14951  002D28  0100               	movlb	0	; () banked
 14952  002D2A  6F64               	movwf	??_setFilter& (0+255),b
 14953  002D2C  C060  F065         	movff	setFilter@val,??_setFilter+1
 14954  002D30  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14955  002D34  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14956  002D38  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14957  002D3C                     u15635:
 14958  002D3C  6764               	tstfsz	??_setFilter& (0+255),b
 14959  002D3E  D001               	goto	u15636
 14960  002D40  D007               	goto	u15637
 14961  002D42                     u15636:
 14962  002D42  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14963  002D44  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14964  002D46  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14965  002D48  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14966  002D4A  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14967  002D4C  2F64               	decfsz	??_setFilter& (0+255),f,b
 14968  002D4E  D7F6               	goto	u15635
 14969  002D50                     u15637:
 14970  002D50  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14971  002D52  6F6B               	movwf	setFilter@sidh& (0+255),b
 14972                           
 14973                           ;main.c: 2793: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14974                           ;main.c: 2794: ((long) (val) & 0x03L) |
 14975                           ;main.c: 2795: 0x08;
 14976  002D54  C060  F064         	movff	setFilter@val,??_setFilter
 14977  002D58  0E03               	movlw	3
 14978  002D5A  1764               	andwf	??_setFilter& (0+255),f,b
 14979  002D5C  0E0D               	movlw	13
 14980  002D5E  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14981  002D60  C060  F066         	movff	setFilter@val,??_setFilter+2
 14982  002D64  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14983  002D68  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14984  002D6C  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14985  002D70                     u15645:
 14986  002D70  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14987  002D72  D001               	goto	u15646
 14988  002D74  D007               	goto	u15647
 14989  002D76                     u15646:
 14990  002D76  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14991  002D78  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14992  002D7A  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14993  002D7C  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14994  002D7E  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14995  002D80  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14996  002D82  D7F6               	goto	u15645
 14997  002D84                     u15647:
 14998  002D84  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14999  002D86  0BE0               	andlw	224
 15000  002D88  1164               	iorwf	??_setFilter& (0+255),w,b
 15001  002D8A  0908               	iorlw	8
 15002  002D8C  6F6C               	movwf	setFilter@sidl& (0+255),b
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;main.c: 2796: uint8_t eidh = (long) val >> 8L;
 15006  002D8E  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;main.c: 2797: uint8_t eidl = val;
 15010  002D92  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15011                           
 15012                           ;main.c: 2799: switch (filter) {
 15013  002D96  D090               	goto	l12243
 15014  002D98                     l1236:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;main.c: 2802: RXF0SIDH = sidh;
 15018  002D98  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15019                           
 15020                           ;main.c: 2803: RXF0SIDL = sidl;
 15021  002D9C  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15022                           
 15023                           ;main.c: 2804: RXF0EIDH = eidh;
 15024  002DA0  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15025                           
 15026                           ;main.c: 2805: RXF0EIDL = eidl;
 15027  002DA4  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15028                           
 15029                           ;main.c: 2806: break;
 15030  002DA8  D0AA               	goto	l1253
 15031  002DAA                     l1238:
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;main.c: 2809: RXF1SIDH = sidh;
 15035  002DAA  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15036                           
 15037                           ;main.c: 2810: RXF1SIDL = sidl;
 15038  002DAE  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15039                           
 15040                           ;main.c: 2811: RXF1EIDH = eidh;
 15041  002DB2  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15042                           
 15043                           ;main.c: 2812: RXF1EIDL = eidl;
 15044  002DB6  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15045                           
 15046                           ;main.c: 2813: break;
 15047  002DBA  D0A1               	goto	l1253
 15048  002DBC                     l1239:
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;main.c: 2816: RXF2SIDH = sidh;
 15052  002DBC  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15053                           
 15054                           ;main.c: 2817: RXF2SIDL = sidl;
 15055  002DC0  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15056                           
 15057                           ;main.c: 2818: RXF2EIDH = eidh;
 15058  002DC4  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15059                           
 15060                           ;main.c: 2819: RXF2EIDL = eidl;
 15061  002DC8  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15062                           
 15063                           ;main.c: 2820: break;
 15064  002DCC  D098               	goto	l1253
 15065  002DCE                     l1240:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;main.c: 2823: RXF3SIDH = sidh;
 15069  002DCE  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15070                           
 15071                           ;main.c: 2824: RXF3SIDL = sidl;
 15072  002DD2  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15073                           
 15074                           ;main.c: 2825: RXF3EIDH = eidh;
 15075  002DD6  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15076                           
 15077                           ;main.c: 2826: RXF3EIDL = eidl;
 15078  002DDA  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15079                           
 15080                           ;main.c: 2827: break;
 15081  002DDE  D08F               	goto	l1253
 15082  002DE0                     l1241:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;main.c: 2830: RXF4SIDH = sidh;
 15086  002DE0  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15087                           
 15088                           ;main.c: 2831: RXF4SIDL = sidl;
 15089  002DE4  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15090                           
 15091                           ;main.c: 2832: RXF4EIDH = eidh;
 15092  002DE8  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15093                           
 15094                           ;main.c: 2833: RXF4EIDL = eidl;
 15095  002DEC  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15096                           
 15097                           ;main.c: 2834: break;
 15098  002DF0  D086               	goto	l1253
 15099  002DF2                     l1242:
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;main.c: 2837: RXF5SIDH = sidh;
 15103  002DF2  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15104                           
 15105                           ;main.c: 2838: RXF5SIDL = sidl;
 15106  002DF6  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15107                           
 15108                           ;main.c: 2839: RXF5EIDH = eidh;
 15109  002DFA  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15110                           
 15111                           ;main.c: 2840: RXF5EIDL = eidl;
 15112  002DFE  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15113                           
 15114                           ;main.c: 2841: break;
 15115  002E02  D07D               	goto	l1253
 15116  002E04                     l1243:
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;main.c: 2844: RXF6SIDH = sidh;
 15120  002E04  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15121                           
 15122                           ;main.c: 2845: RXF6SIDL = sidl;
 15123  002E08  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15124                           
 15125                           ;main.c: 2846: RXF6EIDH = eidh;
 15126  002E0C  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15127                           
 15128                           ;main.c: 2847: RXF6EIDL = eidl;
 15129  002E10  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15130                           
 15131                           ;main.c: 2848: break;
 15132  002E14  D074               	goto	l1253
 15133  002E16                     l1244:
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;main.c: 2851: RXF7SIDH = sidh;
 15137  002E16  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15138                           
 15139                           ;main.c: 2852: RXF7SIDL = sidl;
 15140  002E1A  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15141                           
 15142                           ;main.c: 2853: RXF7EIDH = eidh;
 15143  002E1E  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15144                           
 15145                           ;main.c: 2854: RXF7EIDL = eidl;
 15146  002E22  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15147                           
 15148                           ;main.c: 2855: break;
 15149  002E26  D06B               	goto	l1253
 15150  002E28                     l1245:
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;main.c: 2858: RXF8SIDH = sidh;
 15154  002E28  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15155                           
 15156                           ;main.c: 2859: RXF8SIDL = sidl;
 15157  002E2C  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15158                           
 15159                           ;main.c: 2860: RXF8EIDH = eidh;
 15160  002E30  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15161                           
 15162                           ;main.c: 2861: RXF8EIDL = eidl;
 15163  002E34  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15164                           
 15165                           ;main.c: 2862: break;
 15166  002E38  D062               	goto	l1253
 15167  002E3A                     l1246:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;main.c: 2865: RXF9SIDH = sidh;
 15171  002E3A  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15172                           
 15173                           ;main.c: 2866: RXF9SIDL = sidl;
 15174  002E3E  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15175                           
 15176                           ;main.c: 2867: RXF9EIDH = eidh;
 15177  002E42  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15178                           
 15179                           ;main.c: 2868: RXF9EIDL = eidl;
 15180  002E46  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15181                           
 15182                           ;main.c: 2869: break;
 15183  002E4A  D059               	goto	l1253
 15184  002E4C                     l1247:
 15185                           
 15186                           ; BSR set to: 0
 15187                           ;main.c: 2872: RXF10SIDH = sidh;
 15188  002E4C  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15189                           
 15190                           ;main.c: 2873: RXF10SIDL = sidl;
 15191  002E50  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15192                           
 15193                           ;main.c: 2874: RXF10EIDH = eidh;
 15194  002E54  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15195                           
 15196                           ;main.c: 2875: RXF10EIDL = eidl;
 15197  002E58  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15198                           
 15199                           ;main.c: 2876: break;
 15200  002E5C  D050               	goto	l1253
 15201  002E5E                     l1248:
 15202                           
 15203                           ; BSR set to: 0
 15204                           ;main.c: 2879: RXF11SIDH = sidh;
 15205  002E5E  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15206                           
 15207                           ;main.c: 2880: RXF11SIDL = sidl;
 15208  002E62  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15209                           
 15210                           ;main.c: 2881: RXF11EIDH = eidh;
 15211  002E66  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15212                           
 15213                           ;main.c: 2882: RXF11EIDL = eidl;
 15214  002E6A  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15215                           
 15216                           ;main.c: 2883: break;
 15217  002E6E  D047               	goto	l1253
 15218  002E70                     l1249:
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;main.c: 2886: RXF12SIDH = sidh;
 15222  002E70  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15223                           
 15224                           ;main.c: 2887: RXF12SIDL = sidl;
 15225  002E74  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15226                           
 15227                           ;main.c: 2888: RXF12EIDH = eidh;
 15228  002E78  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15229                           
 15230                           ;main.c: 2889: RXF12EIDL = eidl;
 15231  002E7C  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15232                           
 15233                           ;main.c: 2890: break;
 15234  002E80  D03E               	goto	l1253
 15235  002E82                     l1250:
 15236                           
 15237                           ; BSR set to: 0
 15238                           ;main.c: 2893: RXF13SIDH = sidh;
 15239  002E82  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15240                           
 15241                           ;main.c: 2894: RXF13SIDL = sidl;
 15242  002E86  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15243                           
 15244                           ;main.c: 2895: RXF13EIDH = eidh;
 15245  002E8A  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15246                           
 15247                           ;main.c: 2896: RXF13EIDL = eidl;
 15248  002E8E  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15249                           
 15250                           ;main.c: 2897: break;
 15251  002E92  D035               	goto	l1253
 15252  002E94                     l1251:
 15253                           
 15254                           ; BSR set to: 0
 15255                           ;main.c: 2900: RXF14SIDH = sidh;
 15256  002E94  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15257                           
 15258                           ;main.c: 2901: RXF14SIDL = sidl;
 15259  002E98  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15260                           
 15261                           ;main.c: 2902: RXF14EIDH = eidh;
 15262  002E9C  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15263                           
 15264                           ;main.c: 2903: RXF14EIDL = eidl;
 15265  002EA0  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15266                           
 15267                           ;main.c: 2904: break;
 15268  002EA4  D02C               	goto	l1253
 15269  002EA6                     l1252:
 15270                           
 15271                           ; BSR set to: 0
 15272                           ;main.c: 2907: RXF15SIDH = sidh;
 15273  002EA6  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15274                           
 15275                           ;main.c: 2908: RXF15SIDL = sidl;
 15276  002EAA  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15277                           
 15278                           ;main.c: 2909: RXF15EIDH = eidh;
 15279  002EAE  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15280                           
 15281                           ;main.c: 2910: RXF15EIDL = eidl;
 15282  002EB2  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15283                           
 15284                           ;main.c: 2911: break;
 15285  002EB6  D023               	goto	l1253
 15286  002EB8                     l12243:
 15287                           
 15288                           ; BSR set to: 0
 15289  002EB8  516A               	movf	setFilter@filter& (0+255),w,b
 15290                           
 15291                           ; Switch size 1, requested type "space"
 15292                           ; Number of cases is 16, Range of values is 0 to 15
 15293                           ; switch strategies available:
 15294                           ; Name         Instructions Cycles
 15295                           ; simple_byte           49    25 (average)
 15296                           ;	Chosen strategy is simple_byte
 15297  002EBA  E101 D76D          	bz	l1236
 15298  002EBE  0A01               	xorlw	1	; case 1
 15299  002EC0  E101 D773          	bz	l1238
 15300  002EC4  0A03               	xorlw	3	; case 2
 15301  002EC6  E101 D779          	bz	l1239
 15302  002ECA  0A01               	xorlw	1	; case 3
 15303  002ECC  E080               	bz	l1240
 15304  002ECE  0A07               	xorlw	7	; case 4
 15305  002ED0  E087               	bz	l1241
 15306  002ED2  0A01               	xorlw	1	; case 5
 15307  002ED4  E08E               	bz	l1242
 15308  002ED6  0A03               	xorlw	3	; case 6
 15309  002ED8  E095               	bz	l1243
 15310  002EDA  0A01               	xorlw	1	; case 7
 15311  002EDC  E09C               	bz	l1244
 15312  002EDE  0A0F               	xorlw	15	; case 8
 15313  002EE0  E0A3               	bz	l1245
 15314  002EE2  0A01               	xorlw	1	; case 9
 15315  002EE4  E0AA               	bz	l1246
 15316  002EE6  0A03               	xorlw	3	; case 10
 15317  002EE8  E0B1               	bz	l1247
 15318  002EEA  0A01               	xorlw	1	; case 11
 15319  002EEC  E0B8               	bz	l1248
 15320  002EEE  0A07               	xorlw	7	; case 12
 15321  002EF0  E0BF               	bz	l1249
 15322  002EF2  0A01               	xorlw	1	; case 13
 15323  002EF4  E0C6               	bz	l1250
 15324  002EF6  0A03               	xorlw	3	; case 14
 15325  002EF8  E0CD               	bz	l1251
 15326  002EFA  0A01               	xorlw	1	; case 15
 15327  002EFC  E0D4               	bz	l1252
 15328  002EFE                     l1253:
 15329                           
 15330                           ; BSR set to: 0
 15331  002EFE  0012               	return	
 15332  002F00                     __end_of_setFilter:
 15333                           	opt stack 0
 15334                           tblptru	equ	0xFF8
 15335                           tblptrh	equ	0xFF7
 15336                           tblptrl	equ	0xFF6
 15337                           tablat	equ	0xFF5
 15338                           prodh	equ	0xFF4
 15339                           prodl	equ	0xFF3
 15340                           intcon	equ	0xFF2
 15341                           indf0	equ	0xFEF
 15342                           postinc0	equ	0xFEE
 15343                           fsr0h	equ	0xFEA
 15344                           fsr0l	equ	0xFE9
 15345                           wreg	equ	0xFE8
 15346                           indf1	equ	0xFE7
 15347                           postinc1	equ	0xFE6
 15348                           postdec1	equ	0xFE5
 15349                           fsr1h	equ	0xFE2
 15350                           fsr1l	equ	0xFE1
 15351                           indf2	equ	0xFDF
 15352                           postinc2	equ	0xFDE
 15353                           postdec2	equ	0xFDD
 15354                           plusw2	equ	0xFDB
 15355                           fsr2h	equ	0xFDA
 15356                           fsr2l	equ	0xFD9
 15357                           status	equ	0xFD8
 15358                           
 15359 ;; *************** function _writeRegisterExtended *****************
 15360 ;; Defined at:
 15361 ;;		line 2354 in file "main.c"
 15362 ;; Parameters:    Size  Location     Type
 15363 ;;  nodeid          1    wreg     unsigned char 
 15364 ;;  page            2   86[BANK0 ] unsigned short 
 15365 ;;  reg             1   88[BANK0 ] unsigned char 
 15366 ;;  timeout         2   89[BANK0 ] unsigned short 
 15367 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15368 ;;		 -> doModeVerbose@value_1163(1), 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      enum E15660
 15373 ;; Registers used:
 15374 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : F/2
 15377 ;;		On exit  : E/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15380 ;;      Params:         0       7       0       0       0       0       0
 15381 ;;      Locals:         0       1       0       0       0       0       0
 15382 ;;      Temps:          0       4       0       0       0       0       0
 15383 ;;      Totals:         0      12       0       0       0       0       0
 15384 ;;Total ram usage:       12 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    7
 15387 ;; This function calls:
 15388 ;;		_sendVSCPFrame
 15389 ;;		_getVSCPFrame
 15390 ;; This function is called by:
 15391 ;;		_doModeVerbose
 15392 ;; This function uses a non-reentrant model
 15393 ;;
 15394                           
 15395                           	psect	text24
 15396  003E8A                     __ptext24:
 15397                           	opt stack 0
 15398  003E8A                     _writeRegisterExtended:
 15399                           	opt stack 22
 15400                           
 15401                           ; BSR set to: 0
 15402                           ;incstack = 0
 15403                           ;incstack = 0
 15404                           ;writeRegisterExtended@nodeid stored from wreg
 15405  003E8A  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15406                           
 15407                           ; BSR set to: 2
 15408                           ;main.c: 2355: vscpData[ 0 ] = nodeid;
 15409  003E8E  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15410                           
 15411                           ; BSR set to: 2
 15412                           ;main.c: 2356: vscpData[ 1 ] = page >> 8;
 15413  003E92  0100               	movlb	0	; () banked
 15414  003E94  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15415  003E96  0101               	movlb	1	; () banked
 15416  003E98  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15417                           
 15418                           ; BSR set to: 1
 15419                           ;main.c: 2357: vscpData[ 2 ] = page & 0xff;
 15420  003E9A  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15421                           
 15422                           ; BSR set to: 1
 15423                           ;main.c: 2358: vscpData[ 3 ] = reg;
 15424  003E9E  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15425                           
 15426                           ; BSR set to: 1
 15427                           ;main.c: 2359: vscpData[ 4 ] = *value;
 15428  003EA2  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15429  003EA6  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15430  003EAA  50DF               	movf	indf2,w,c
 15431  003EAC  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15432                           
 15433                           ; BSR set to: 1
 15434                           ;main.c: 2361: if (sendVSCPFrame(0,
 15435                           ;main.c: 2362: 38,
 15436                           ;main.c: 2363: 0,
 15437                           ;main.c: 2364: 0,
 15438                           ;main.c: 2365: 5,
 15439                           ;main.c: 2366: vscpData)) {
 15440  003EAE  0100               	movlb	0	; () banked
 15441  003EB0  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15442  003EB2  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15443  003EB4  0E26               	movlw	38
 15444  003EB6  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15445  003EB8  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15446  003EBA  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15447  003EBC  0E05               	movlw	5
 15448  003EBE  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15449  003EC0  0E01               	movlw	high _vscpData
 15450  003EC2  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15451  003EC4  0EA4               	movlw	low _vscpData
 15452  003EC6  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15453  003EC8  EC5B  F025         	call	_sendVSCPFrame	;wreg free
 15454  003ECC  0900               	iorlw	0
 15455  003ECE  E05E               	bz	l12143
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;main.c: 2368: timekeeper = 0;
 15459  003ED0  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15460  003ED2  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15461  003ED4  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15462  003ED6  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15463                           
 15464                           ;main.c: 2369: while (timekeeper < timeout) {
 15465  003ED8  D049               	goto	l12141
 15466  003EDA                     l1093:
 15467                           
 15468                           ; BSR set to: 0
 15469  003EDA  0004               	clrwdt		;# 
 15470                           
 15471                           ;main.c: 2373: if (getVSCPFrame(&vscpClass,
 15472                           ;main.c: 2374: &vscpType,
 15473                           ;main.c: 2375: &vscpNodeId,
 15474                           ;main.c: 2376: &vscpPriority,
 15475                           ;main.c: 2377: &vscpSize,
 15476                           ;main.c: 2378: vscpData)) {
 15477  003EDC  0E01               	movlw	high _vscpClass
 15478  003EDE  0100               	movlb	0	; () banked
 15479  003EE0  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15480  003EE2  0EAC               	movlw	low _vscpClass
 15481  003EE4  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15482  003EE6  0E01               	movlw	high _vscpType
 15483  003EE8  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15484  003EEA  0EB1               	movlw	low _vscpType
 15485  003EEC  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15486  003EEE  0E01               	movlw	high _vscpNodeId
 15487  003EF0  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15488  003EF2  0EAE               	movlw	low _vscpNodeId
 15489  003EF4  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15490  003EF6  0E01               	movlw	high _vscpPriority
 15491  003EF8  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15492  003EFA  0EAF               	movlw	low _vscpPriority
 15493  003EFC  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15494  003EFE  0E01               	movlw	high _vscpSize
 15495  003F00  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15496  003F02  0EB0               	movlw	low _vscpSize
 15497  003F04  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15498  003F06  0E01               	movlw	high _vscpData
 15499  003F08  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15500  003F0A  0EA4               	movlw	low _vscpData
 15501  003F0C  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15502  003F0E  EC1E  F028         	call	_getVSCPFrame	;wreg free
 15503  003F12  0900               	iorlw	0
 15504  003F14  E02B               	bz	l12141
 15505                           
 15506                           ; BSR set to: 0
 15507                           ;main.c: 2380: if ((nodeid == vscpNodeId) &&
 15508                           ;main.c: 2381: (5 == vscpSize) &&
 15509                           ;main.c: 2382: (0 == vscpData[ 0 ]) &&
 15510                           ;main.c: 2383: ((page >> 8) == vscpData[ 1 ]) &&
 15511                           ;main.c: 2384: ((page & 0xff) == vscpData[ 2 ]) &&
 15512                           ;main.c: 2385: (reg == vscpData[ 3 ]) &&
 15513                           ;main.c: 2386: (*value == vscpData[ 4 ])) {
 15514  003F16  0101               	movlb	1	; () banked
 15515  003F18  51AE               	movf	_vscpNodeId& (0+255),w,b
 15516  003F1A  0100               	movlb	0	; () banked
 15517  003F1C  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15518  003F1E  D026               	goto	l12141
 15519                           
 15520                           ; BSR set to: 0
 15521  003F20  0101               	movlb	1	; () banked
 15522  003F22  51B0               	movf	_vscpSize& (0+255),w,b
 15523  003F24  0A05               	xorlw	5
 15524  003F26  E122               	bnz	l12141
 15525                           
 15526                           ; BSR set to: 1
 15527  003F28  67A4               	tstfsz	_vscpData& (0+255),b
 15528  003F2A  D020               	goto	l12141
 15529                           
 15530                           ; BSR set to: 1
 15531  003F2C  0100               	movlb	0	; () banked
 15532  003F2E  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15533  003F30  0101               	movlb	1	; () banked
 15534  003F32  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15535  003F34  E11B               	bnz	l12141
 15536                           
 15537                           ; BSR set to: 1
 15538  003F36  0100               	movlb	0	; () banked
 15539  003F38  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15540  003F3A  EE21  F0A6         	lfsr	2,_vscpData+2
 15541  003F3E  62DF               	cpfseq	indf2,c
 15542  003F40  D015               	goto	l12141
 15543                           
 15544                           ; BSR set to: 1
 15545  003F42  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15546  003F44  0101               	movlb	1	; () banked
 15547  003F46  EE21  F0A7         	lfsr	2,_vscpData+3
 15548  003F4A  62DF               	cpfseq	indf2,c
 15549  003F4C  D00F               	goto	l12141
 15550                           
 15551                           ; BSR set to: 1
 15552  003F4E  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15553  003F50  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15554  003F54  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15555  003F58  62DF               	cpfseq	indf2,c
 15556  003F5A  D008               	goto	l12141
 15557                           
 15558                           ; BSR set to: 1
 15559                           ;main.c: 2387: *value = vscpData[ 1 ];
 15560  003F5C  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15561  003F60  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15562  003F64  C1A5  FFDF         	movff	_vscpData+1,indf2
 15563                           
 15564                           ; BSR set to: 1
 15565                           ;main.c: 2388: return 1;
 15566  003F68  0E01               	movlw	1
 15567  003F6A  D011               	goto	l1096
 15568  003F6C                     l12141:
 15569  003F6C  0100               	movlb	0	; () banked
 15570  003F6E  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15571  003F70  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15572  003F72  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15573  003F74  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15574  003F76  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15575  003F78  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15576  003F7A  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15577  003F7C  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15578  003F7E  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15579  003F80  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15580  003F82  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15581  003F84  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15582  003F86  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15583  003F88  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15584  003F8A  E3A7               	bnc	l1093
 15585  003F8C                     l12143:
 15586                           
 15587                           ; BSR set to: 0
 15588                           ;main.c: 2389: }
 15589                           ;main.c: 2391: }
 15590                           ;main.c: 2393: }
 15591                           ;main.c: 2395: }
 15592                           ;main.c: 2397: return 0;
 15593  003F8C  0E00               	movlw	0
 15594  003F8E                     l1096:
 15595  003F8E  0012               	return	
 15596  003F90                     __end_of_writeRegisterExtended:
 15597                           	opt stack 0
 15598                           tblptru	equ	0xFF8
 15599                           tblptrh	equ	0xFF7
 15600                           tblptrl	equ	0xFF6
 15601                           tablat	equ	0xFF5
 15602                           prodh	equ	0xFF4
 15603                           prodl	equ	0xFF3
 15604                           intcon	equ	0xFF2
 15605                           indf0	equ	0xFEF
 15606                           postinc0	equ	0xFEE
 15607                           fsr0h	equ	0xFEA
 15608                           fsr0l	equ	0xFE9
 15609                           wreg	equ	0xFE8
 15610                           indf1	equ	0xFE7
 15611                           postinc1	equ	0xFE6
 15612                           postdec1	equ	0xFE5
 15613                           fsr1h	equ	0xFE2
 15614                           fsr1l	equ	0xFE1
 15615                           indf2	equ	0xFDF
 15616                           postinc2	equ	0xFDE
 15617                           postdec2	equ	0xFDD
 15618                           plusw2	equ	0xFDB
 15619                           fsr2h	equ	0xFDA
 15620                           fsr2l	equ	0xFD9
 15621                           status	equ	0xFD8
 15622                           
 15623 ;; *************** function _printBinary *****************
 15624 ;; Defined at:
 15625 ;;		line 2441 in file "main.c"
 15626 ;; Parameters:    Size  Location     Type
 15627 ;;  value           1    wreg     unsigned char 
 15628 ;; Auto vars:     Size  Location     Type
 15629 ;;  value           1    3[BANK0 ] unsigned char 
 15630 ;;  i               2    4[BANK0 ] int 
 15631 ;; Return value:  Size  Location     Type
 15632 ;;		None               void
 15633 ;; Registers used:
 15634 ;;		wreg, status,2, status,0, cstack
 15635 ;; Tracked objects:
 15636 ;;		On entry : F/2
 15637 ;;		On exit  : F/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15640 ;;      Params:         0       0       0       0       0       0       0
 15641 ;;      Locals:         0       3       0       0       0       0       0
 15642 ;;      Temps:          0       2       0       0       0       0       0
 15643 ;;      Totals:         0       5       0       0       0       0       0
 15644 ;;Total ram usage:        5 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    4
 15647 ;; This function calls:
 15648 ;;		_WriteUSART
 15649 ;; This function is called by:
 15650 ;;		_doModeVerbose
 15651 ;; This function uses a non-reentrant model
 15652 ;;
 15653                           
 15654                           	psect	text25
 15655  005746                     __ptext25:
 15656                           	opt stack 0
 15657  005746                     _printBinary:
 15658                           	opt stack 25
 15659                           
 15660                           ;incstack = 0
 15661                           ;incstack = 0
 15662                           ;printBinary@value stored from wreg
 15663  005746  CFE8 F063          	movff	wreg,printBinary@value
 15664                           
 15665                           ; BSR set to: 2
 15666                           ;main.c: 2442: int i;
 15667                           ;main.c: 2444: for (i = 7; i >= 0; i--) {
 15668  00574A  0100               	movlb	0	; () banked
 15669  00574C  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15670  00574E  0E07               	movlw	7
 15671  005750  6F64               	movwf	printBinary@i& (0+255),b
 15672  005752                     l12093:
 15673                           
 15674                           ; BSR set to: 0
 15675                           ;main.c: 2445: if (value & (1 << i)) {
 15676  005752  C064  F061         	movff	printBinary@i,??_printBinary
 15677  005756  0E01               	movlw	1
 15678  005758  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15679  00575A  2B61               	incf	??_printBinary& (0+255),f,b
 15680  00575C  D002               	goto	u15394
 15681  00575E                     u15395:
 15682  00575E  90D8               	bcf	status,0,c
 15683  005760  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15684  005762                     u15394:
 15685  005762  2F61               	decfsz	??_printBinary& (0+255),f,b
 15686  005764  D7FC               	goto	u15395
 15687  005766  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15688  005768  1563               	andwf	printBinary@value& (0+255),w,b
 15689  00576A  E006               	bz	l1116
 15690  00576C                     l1112:
 15691  00576C  A2AC               	btfss	4012,1,c	;volatile
 15692  00576E  D7FE               	goto	l1112
 15693                           
 15694                           ;main.c: 2447: WriteUSART('1');
 15695  005770  0E31               	movlw	49
 15696  005772  EC26  F02E         	call	_WriteUSART
 15697                           
 15698                           ;main.c: 2448: } else {
 15699  005776  D005               	goto	l12101
 15700  005778                     l1116:
 15701  005778  A2AC               	btfss	4012,1,c	;volatile
 15702  00577A  D7FE               	goto	l1116
 15703                           
 15704                           ;main.c: 2450: WriteUSART('0');
 15705  00577C  0E30               	movlw	48
 15706  00577E  EC26  F02E         	call	_WriteUSART
 15707  005782                     l12101:
 15708  005782  0100               	movlb	0	; () banked
 15709  005784  0764               	decf	printBinary@i& (0+255),f,b
 15710  005786  A0D8               	btfss	status,0,c
 15711  005788  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15712                           
 15713                           ; BSR set to: 0
 15714  00578A  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15715                           
 15716                           ; BSR set to: 0
 15717  00578C  0012               	return	
 15718  00578E  D7E1               	goto	l12093
 15719  005790                     __end_of_printBinary:
 15720                           	opt stack 0
 15721                           tblptru	equ	0xFF8
 15722                           tblptrh	equ	0xFF7
 15723                           tblptrl	equ	0xFF6
 15724                           tablat	equ	0xFF5
 15725                           prodh	equ	0xFF4
 15726                           prodl	equ	0xFF3
 15727                           intcon	equ	0xFF2
 15728                           indf0	equ	0xFEF
 15729                           postinc0	equ	0xFEE
 15730                           fsr0h	equ	0xFEA
 15731                           fsr0l	equ	0xFE9
 15732                           wreg	equ	0xFE8
 15733                           indf1	equ	0xFE7
 15734                           postinc1	equ	0xFE6
 15735                           postdec1	equ	0xFE5
 15736                           fsr1h	equ	0xFE2
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           plusw2	equ	0xFDB
 15742                           fsr2h	equ	0xFDA
 15743                           fsr2l	equ	0xFD9
 15744                           status	equ	0xFD8
 15745                           
 15746 ;; *************** function _readRegisterExtended *****************
 15747 ;; Defined at:
 15748 ;;		line 2253 in file "main.c"
 15749 ;; Parameters:    Size  Location     Type
 15750 ;;  nodeid          1    wreg     unsigned char 
 15751 ;;  page            2   86[BANK0 ] unsigned short 
 15752 ;;  reg             1   88[BANK0 ] unsigned char 
 15753 ;;  timeout         2   89[BANK0 ] unsigned short 
 15754 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15755 ;;		 -> doModeVerbose@value(1), 
 15756 ;; Auto vars:     Size  Location     Type
 15757 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  1    wreg      enum E15660
 15760 ;; Registers used:
 15761 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15762 ;; Tracked objects:
 15763 ;;		On entry : F/2
 15764 ;;		On exit  : E/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15767 ;;      Params:         0       7       0       0       0       0       0
 15768 ;;      Locals:         0       1       0       0       0       0       0
 15769 ;;      Temps:          0       4       0       0       0       0       0
 15770 ;;      Totals:         0      12       0       0       0       0       0
 15771 ;;Total ram usage:       12 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:    7
 15774 ;; This function calls:
 15775 ;;		_sendVSCPFrame
 15776 ;;		_getVSCPFrame
 15777 ;; This function is called by:
 15778 ;;		_doModeVerbose
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text26
 15783  00419A                     __ptext26:
 15784                           	opt stack 0
 15785  00419A                     _readRegisterExtended:
 15786                           	opt stack 22
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;incstack = 0
 15790                           ;incstack = 0
 15791                           ;readRegisterExtended@nodeid stored from wreg
 15792  00419A  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15793                           
 15794                           ; BSR set to: 2
 15795                           ;main.c: 2254: vscpData[ 0 ] = nodeid;
 15796  00419E  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15797                           
 15798                           ; BSR set to: 2
 15799                           ;main.c: 2255: vscpData[ 1 ] = page >> 8;
 15800  0041A2  0100               	movlb	0	; () banked
 15801  0041A4  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15802  0041A6  0101               	movlb	1	; () banked
 15803  0041A8  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15804                           
 15805                           ; BSR set to: 1
 15806                           ;main.c: 2256: vscpData[ 2 ] = page & 0xff;
 15807  0041AA  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15808                           
 15809                           ; BSR set to: 1
 15810                           ;main.c: 2257: vscpData[ 3 ] = reg;
 15811  0041AE  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15812                           
 15813                           ; BSR set to: 1
 15814                           ;main.c: 2258: vscpData[ 4 ] = 1;
 15815  0041B2  0E01               	movlw	1
 15816  0041B4  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15817                           
 15818                           ; BSR set to: 1
 15819                           ;main.c: 2260: if (sendVSCPFrame(0,
 15820                           ;main.c: 2261: 37,
 15821                           ;main.c: 2262: 0,
 15822                           ;main.c: 2263: 0,
 15823                           ;main.c: 2264: 5,
 15824                           ;main.c: 2265: vscpData)) {
 15825  0041B6  0100               	movlb	0	; () banked
 15826  0041B8  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15827  0041BA  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15828  0041BC  0E25               	movlw	37
 15829  0041BE  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15830  0041C0  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15831  0041C2  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15832  0041C4  0E05               	movlw	5
 15833  0041C6  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15834  0041C8  0E01               	movlw	high _vscpData
 15835  0041CA  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15836  0041CC  0EA4               	movlw	low _vscpData
 15837  0041CE  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15838  0041D0  EC5B  F025         	call	_sendVSCPFrame	;wreg free
 15839  0041D4  0900               	iorlw	0
 15840  0041D6  E05D               	bz	l11733
 15841                           
 15842                           ; BSR set to: 0
 15843                           ;main.c: 2267: timekeeper = 0;
 15844  0041D8  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15845  0041DA  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15846  0041DC  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15847  0041DE  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15848                           
 15849                           ;main.c: 2268: while (timekeeper < timeout) {
 15850  0041E0  D048               	goto	l11731
 15851  0041E2                     l1075:
 15852                           
 15853                           ; BSR set to: 0
 15854  0041E2  0004               	clrwdt		;# 
 15855                           
 15856                           ;main.c: 2272: if (getVSCPFrame(&vscpClass,
 15857                           ;main.c: 2273: &vscpType,
 15858                           ;main.c: 2274: &vscpNodeId,
 15859                           ;main.c: 2275: &vscpPriority,
 15860                           ;main.c: 2276: &vscpSize,
 15861                           ;main.c: 2277: vscpData)) {
 15862  0041E4  0E01               	movlw	high _vscpClass
 15863  0041E6  0100               	movlb	0	; () banked
 15864  0041E8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15865  0041EA  0EAC               	movlw	low _vscpClass
 15866  0041EC  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15867  0041EE  0E01               	movlw	high _vscpType
 15868  0041F0  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15869  0041F2  0EB1               	movlw	low _vscpType
 15870  0041F4  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15871  0041F6  0E01               	movlw	high _vscpNodeId
 15872  0041F8  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15873  0041FA  0EAE               	movlw	low _vscpNodeId
 15874  0041FC  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15875  0041FE  0E01               	movlw	high _vscpPriority
 15876  004200  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15877  004202  0EAF               	movlw	low _vscpPriority
 15878  004204  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15879  004206  0E01               	movlw	high _vscpSize
 15880  004208  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15881  00420A  0EB0               	movlw	low _vscpSize
 15882  00420C  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15883  00420E  0E01               	movlw	high _vscpData
 15884  004210  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15885  004212  0EA4               	movlw	low _vscpData
 15886  004214  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15887  004216  EC1E  F028         	call	_getVSCPFrame	;wreg free
 15888  00421A  0900               	iorlw	0
 15889  00421C  E02A               	bz	l11731
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;main.c: 2278: if ((nodeid == vscpNodeId) &&
 15893                           ;main.c: 2279: (0 == vscpClass) &&
 15894                           ;main.c: 2280: (39 == vscpType) &&
 15895                           ;main.c: 2281: (5 == vscpSize) &&
 15896                           ;main.c: 2282: (0 == vscpData[ 0 ]) &&
 15897                           ;main.c: 2283: ((page >> 8) == vscpData[ 1 ]) &&
 15898                           ;main.c: 2284: ((page & 0xff) == vscpData[ 2 ]) &&
 15899                           ;main.c: 2285: (reg == vscpData[ 3 ])) {
 15900  00421E  0101               	movlb	1	; () banked
 15901  004220  51AE               	movf	_vscpNodeId& (0+255),w,b
 15902  004222  0100               	movlb	0	; () banked
 15903  004224  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15904  004226  D025               	goto	l11731
 15905                           
 15906                           ; BSR set to: 0
 15907  004228  0101               	movlb	1	; () banked
 15908  00422A  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15909  00422C  11AC               	iorwf	_vscpClass& (0+255),w,b
 15910  00422E  E121               	bnz	l11731
 15911                           
 15912                           ; BSR set to: 1
 15913  004230  51B1               	movf	_vscpType& (0+255),w,b
 15914  004232  0A27               	xorlw	39
 15915  004234  E11E               	bnz	l11731
 15916                           
 15917                           ; BSR set to: 1
 15918  004236  51B0               	movf	_vscpSize& (0+255),w,b
 15919  004238  0A05               	xorlw	5
 15920  00423A  E11B               	bnz	l11731
 15921                           
 15922                           ; BSR set to: 1
 15923  00423C  67A4               	tstfsz	_vscpData& (0+255),b
 15924  00423E  D019               	goto	l11731
 15925                           
 15926                           ; BSR set to: 1
 15927  004240  0100               	movlb	0	; () banked
 15928  004242  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15929  004244  0101               	movlb	1	; () banked
 15930  004246  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15931  004248  E114               	bnz	l11731
 15932                           
 15933                           ; BSR set to: 1
 15934  00424A  0100               	movlb	0	; () banked
 15935  00424C  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15936  00424E  EE21  F0A6         	lfsr	2,_vscpData+2
 15937  004252  62DF               	cpfseq	indf2,c
 15938  004254  D00E               	goto	l11731
 15939                           
 15940                           ; BSR set to: 1
 15941  004256  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15942  004258  0101               	movlb	1	; () banked
 15943  00425A  EE21  F0A7         	lfsr	2,_vscpData+3
 15944  00425E  62DF               	cpfseq	indf2,c
 15945  004260  D008               	goto	l11731
 15946                           
 15947                           ; BSR set to: 1
 15948                           ;main.c: 2286: *value = vscpData[ 4 ];
 15949  004262  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15950  004266  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15951  00426A  C1A8  FFDF         	movff	_vscpData+4,indf2
 15952                           
 15953                           ; BSR set to: 1
 15954                           ;main.c: 2287: return 1;
 15955  00426E  0E01               	movlw	1
 15956  004270  D011               	goto	l1078
 15957  004272                     l11731:
 15958  004272  0100               	movlb	0	; () banked
 15959  004274  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15960  004276  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15961  004278  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15962  00427A  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15963  00427C  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15964  00427E  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15965  004280  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15966  004282  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15967  004284  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15968  004286  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15969  004288  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15970  00428A  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15971  00428C  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15972  00428E  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15973  004290  E3A8               	bnc	l1075
 15974  004292                     l11733:
 15975                           
 15976                           ; BSR set to: 0
 15977                           ;main.c: 2288: }
 15978                           ;main.c: 2289: }
 15979                           ;main.c: 2290: }
 15980                           ;main.c: 2291: }
 15981                           ;main.c: 2293: return 0;
 15982  004292  0E00               	movlw	0
 15983  004294                     l1078:
 15984  004294  0012               	return	
 15985  004296                     __end_of_readRegisterExtended:
 15986                           	opt stack 0
 15987                           tblptru	equ	0xFF8
 15988                           tblptrh	equ	0xFF7
 15989                           tblptrl	equ	0xFF6
 15990                           tablat	equ	0xFF5
 15991                           prodh	equ	0xFF4
 15992                           prodl	equ	0xFF3
 15993                           intcon	equ	0xFF2
 15994                           indf0	equ	0xFEF
 15995                           postinc0	equ	0xFEE
 15996                           fsr0h	equ	0xFEA
 15997                           fsr0l	equ	0xFE9
 15998                           wreg	equ	0xFE8
 15999                           indf1	equ	0xFE7
 16000                           postinc1	equ	0xFE6
 16001                           postdec1	equ	0xFE5
 16002                           fsr1h	equ	0xFE2
 16003                           fsr1l	equ	0xFE1
 16004                           indf2	equ	0xFDF
 16005                           postinc2	equ	0xFDE
 16006                           postdec2	equ	0xFDD
 16007                           plusw2	equ	0xFDB
 16008                           fsr2h	equ	0xFDA
 16009                           fsr2l	equ	0xFD9
 16010                           status	equ	0xFD8
 16011                           
 16012 ;; *************** function _strcpy *****************
 16013 ;; Defined at:
 16014 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16015 ;; Parameters:    Size  Location     Type
 16016 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16017 ;;		 -> cmdbuf(80), 
 16018 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16019 ;;		 -> cmdbuf(80), 
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16022 ;;		 -> cmdbuf(80), 
 16023 ;; Return value:  Size  Location     Type
 16024 ;;                  2    0[BANK0 ] PTR unsigned char 
 16025 ;; Registers used:
 16026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16027 ;; Tracked objects:
 16028 ;;		On entry : F/1
 16029 ;;		On exit  : E/0
 16030 ;;		Unchanged: 0/0
 16031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16032 ;;      Params:         0       4       0       0       0       0       0
 16033 ;;      Locals:         0       2       0       0       0       0       0
 16034 ;;      Temps:          0       0       0       0       0       0       0
 16035 ;;      Totals:         0       6       0       0       0       0       0
 16036 ;;Total ram usage:        6 bytes
 16037 ;; Hardware stack levels used:    1
 16038 ;; Hardware stack levels required when called:    3
 16039 ;; This function calls:
 16040 ;;		Nothing
 16041 ;; This function is called by:
 16042 ;;		_doModeVerbose
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           	psect	text27
 16047  005B34                     __ptext27:
 16048                           	opt stack 0
 16049  005B34                     _strcpy:
 16050                           	opt stack 26
 16051                           
 16052                           ; BSR set to: 1
 16053                           
 16054                           ;incstack = 0
 16055                           ;incstack = 0
 16056  005B34  C060  F064         	movff	strcpy@to,strcpy@cp
 16057  005B38  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16058  005B3C  D005               	goto	l11685
 16059  005B3E                     l11683:
 16060  005B3E  0100               	movlb	0	; () banked
 16061  005B40  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16062  005B42  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16063  005B44  4B62               	infsnz	strcpy@from& (0+255),f,b
 16064  005B46  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16065  005B48                     l11685:
 16066  005B48  C062  FFD9         	movff	strcpy@from,fsr2l
 16067  005B4C  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16068  005B50  C064  FFE1         	movff	strcpy@cp,fsr1l
 16069  005B54  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16070  005B58  CFDF FFE7          	movff	indf2,indf1
 16071  005B5C  50E7               	movf	indf1,w,c
 16072  005B5E  B4D8               	btfsc	status,2,c
 16073  005B60  0012               	return	
 16074  005B62  D7ED               	goto	l11683
 16075  005B64                     __end_of_strcpy:
 16076                           	opt stack 0
 16077                           tblptru	equ	0xFF8
 16078                           tblptrh	equ	0xFF7
 16079                           tblptrl	equ	0xFF6
 16080                           tablat	equ	0xFF5
 16081                           prodh	equ	0xFF4
 16082                           prodl	equ	0xFF3
 16083                           intcon	equ	0xFF2
 16084                           indf0	equ	0xFEF
 16085                           postinc0	equ	0xFEE
 16086                           fsr0h	equ	0xFEA
 16087                           fsr0l	equ	0xFE9
 16088                           wreg	equ	0xFE8
 16089                           indf1	equ	0xFE7
 16090                           postinc1	equ	0xFE6
 16091                           postdec1	equ	0xFE5
 16092                           fsr1h	equ	0xFE2
 16093                           fsr1l	equ	0xFE1
 16094                           indf2	equ	0xFDF
 16095                           postinc2	equ	0xFDE
 16096                           postdec2	equ	0xFDD
 16097                           plusw2	equ	0xFDB
 16098                           fsr2h	equ	0xFDA
 16099                           fsr2l	equ	0xFD9
 16100                           status	equ	0xFD8
 16101                           
 16102 ;; *************** function _findNodes *****************
 16103 ;; Defined at:
 16104 ;;		line 2592 in file "main.c"
 16105 ;; Parameters:    Size  Location     Type
 16106 ;;		None
 16107 ;; Auto vars:     Size  Location     Type
 16108 ;;  i               1  105[BANK0 ] unsigned char 
 16109 ;;  value           1  104[BANK0 ] unsigned char 
 16110 ;;  nFound          1  103[BANK0 ] unsigned char 
 16111 ;; Return value:  Size  Location     Type
 16112 ;;		None               void
 16113 ;; Registers used:
 16114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16115 ;; Tracked objects:
 16116 ;;		On entry : F/1
 16117 ;;		On exit  : 0/0
 16118 ;;		Unchanged: 0/0
 16119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16120 ;;      Params:         0       0       0       0       0       0       0
 16121 ;;      Locals:         0       5       0       0       0       0       0
 16122 ;;      Temps:          0       0       0       0       0       0       0
 16123 ;;      Totals:         0       5       0       0       0       0       0
 16124 ;;Total ram usage:        5 bytes
 16125 ;; Hardware stack levels used:    1
 16126 ;; Hardware stack levels required when called:    9
 16127 ;; This function calls:
 16128 ;;		_putsUSART
 16129 ;;		_printNodeFirmwareVersion
 16130 ;;		_printGUID
 16131 ;;		_printMDF
 16132 ;;		_itoa
 16133 ;;		_readRegister
 16134 ;; This function is called by:
 16135 ;;		_doModeVerbose
 16136 ;; This function uses a non-reentrant model
 16137 ;;
 16138                           
 16139                           	psect	text28
 16140  004296                     __ptext28:
 16141                           	opt stack 0
 16142  004296                     _findNodes:
 16143                           	opt stack 20
 16144                           
 16145                           ; BSR set to: 1
 16146                           ;main.c: 2593: uint8_t nFound = 0;
 16147                           
 16148                           ;incstack = 0
 16149                           ;incstack = 0
 16150  004296  0100               	movlb	0	; () banked
 16151  004298  6BC7               	clrf	findNodes@nFound& (0+255),b
 16152                           
 16153                           ; BSR set to: 0
 16154                           ;main.c: 2594: uint8_t i;
 16155                           ;main.c: 2595: uint8_t value;
 16156                           ;main.c: 2597: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16157  00429A  0E71               	movlw	high STR_238
 16158  00429C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16159  00429E  0E53               	movlw	low STR_238
 16160  0042A0  6F61               	movwf	?_putsUSART& (0+255),b
 16161  0042A2  EC4F  F02B         	call	_putsUSART	;wreg free
 16162                           
 16163                           ;main.c: 2599: for (i = 1; i != 0; i++) {
 16164  0042A6  0E01               	movlw	1
 16165  0042A8  0100               	movlb	0	; () banked
 16166  0042AA  6FC9               	movwf	findNodes@i& (0+255),b
 16167  0042AC                     l1177:
 16168                           
 16169                           ; BSR set to: 0
 16170  0042AC  0004               	clrwdt		;# 
 16171                           
 16172                           ;main.c: 2603: if (readRegister(i,
 16173                           ;main.c: 2604: 0xE0,
 16174                           ;main.c: 2605: rwtimeout,
 16175                           ;main.c: 2606: &value)) {
 16176  0042AE  0EE0               	movlw	224
 16177  0042B0  0100               	movlb	0	; () banked
 16178  0042B2  6FB6               	movwf	?_readRegister& (0+255),b
 16179  0042B4  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16180  0042B8  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16181  0042BA  0EC8               	movlw	low findNodes@value
 16182  0042BC  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16183  0042BE  51C9               	movf	findNodes@i& (0+255),w,b
 16184  0042C0  EC77  F023         	call	_readRegister
 16185  0042C4  0900               	iorlw	0
 16186  0042C6  E043               	bz	l11671
 16187                           
 16188                           ;main.c: 2607: putsUSART((char *) "Node found with node id = ");
 16189  0042C8  0E7B               	movlw	high STR_239
 16190  0042CA  0100               	movlb	0	; () banked
 16191  0042CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16192  0042CE  0E99               	movlw	low STR_239
 16193  0042D0  6F61               	movwf	?_putsUSART& (0+255),b
 16194  0042D2  EC4F  F02B         	call	_putsUSART	;wreg free
 16195                           
 16196                           ;main.c: 2608: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16197  0042D6  0101               	movlb	1	; () banked
 16198  0042D8  6700               	tstfsz	_bHex& (0+255),b
 16199  0042DA  D004               	goto	l11653
 16200                           
 16201                           ; BSR set to: 1
 16202  0042DC  0100               	movlb	0	; () banked
 16203  0042DE  6BC6               	clrf	(_findNodes$1472+1)& (0+255),b
 16204  0042E0  0E0A               	movlw	10
 16205  0042E2  D003               	goto	L15
 16206  0042E4                     l11653:
 16207                           
 16208                           ; BSR set to: 1
 16209  0042E4  0100               	movlb	0	; () banked
 16210  0042E6  6BC6               	clrf	(_findNodes$1472+1)& (0+255),b
 16211  0042E8  0E10               	movlw	16
 16212  0042EA                     L15:
 16213  0042EA  6FC5               	movwf	_findNodes$1472& (0+255),b
 16214                           
 16215                           ; BSR set to: 0
 16216  0042EC  0E01               	movlw	high _wrkbuf
 16217  0042EE  0100               	movlb	0	; () banked
 16218  0042F0  6F71               	movwf	(?_itoa+1)& (0+255),b
 16219  0042F2  0E54               	movlw	low _wrkbuf
 16220  0042F4  6F70               	movwf	?_itoa& (0+255),b
 16221  0042F6  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16222  0042FA  6B73               	clrf	(?_itoa+3)& (0+255),b
 16223  0042FC  C0C5  F074         	movff	_findNodes$1472,?_itoa+4
 16224  004300  C0C6  F075         	movff	_findNodes$1472+1,?_itoa+5
 16225  004304  EC30  F02D         	call	_itoa	;wreg free
 16226                           
 16227                           ; BSR set to: 0
 16228                           ;main.c: 2609: putsUSART(wrkbuf);
 16229  004308  0E01               	movlw	high _wrkbuf
 16230  00430A  0100               	movlb	0	; () banked
 16231  00430C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16232  00430E  0E54               	movlw	low _wrkbuf
 16233  004310  6F61               	movwf	?_putsUSART& (0+255),b
 16234  004312  EC4F  F02B         	call	_putsUSART	;wreg free
 16235                           
 16236                           ;main.c: 2610: putsUSART((char *) "\r\n");
 16237  004316  0E74               	movlw	high (STR_197+50)
 16238  004318  0100               	movlb	0	; () banked
 16239  00431A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16240  00431C  0E8A               	movlw	low (STR_197+50)
 16241  00431E  6F61               	movwf	?_putsUSART& (0+255),b
 16242  004320  EC4F  F02B         	call	_putsUSART	;wreg free
 16243                           
 16244                           ;main.c: 2611: printNodeFirmwareVersion(i);
 16245  004324  0100               	movlb	0	; () banked
 16246  004326  51C9               	movf	findNodes@i& (0+255),w,b
 16247  004328  EC0F  F023         	call	_printNodeFirmwareVersion
 16248                           
 16249                           ;main.c: 2612: printGUID(i);
 16250  00432C  0100               	movlb	0	; () banked
 16251  00432E  51C9               	movf	findNodes@i& (0+255),w,b
 16252  004330  EC4B  F020         	call	_printGUID
 16253                           
 16254                           ;main.c: 2613: printMDF(i);
 16255  004334  0100               	movlb	0	; () banked
 16256  004336  51C9               	movf	findNodes@i& (0+255),w,b
 16257  004338  EC43  F027         	call	_printMDF
 16258                           
 16259                           ;main.c: 2614: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16260  00433C  0E71               	movlw	high STR_238
 16261  00433E  0100               	movlb	0	; () banked
 16262  004340  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16263  004342  0E53               	movlw	low STR_238
 16264  004344  6F61               	movwf	?_putsUSART& (0+255),b
 16265  004346  EC4F  F02B         	call	_putsUSART	;wreg free
 16266                           
 16267                           ;main.c: 2615: nFound++;
 16268  00434A  0100               	movlb	0	; () banked
 16269  00434C  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16270  00434E                     l11671:
 16271  00434E  0100               	movlb	0	; () banked
 16272  004350  2BC9               	incf	findNodes@i& (0+255),f,b
 16273                           
 16274                           ; BSR set to: 0
 16275  004352  67C9               	tstfsz	findNodes@i& (0+255),b
 16276  004354  D7AB               	goto	l1177
 16277                           
 16278                           ; BSR set to: 0
 16279                           ;main.c: 2616: }
 16280                           ;main.c: 2618: }
 16281                           ;main.c: 2620: itoa(wrkbuf, nFound, 10);
 16282  004356  0E01               	movlw	high _wrkbuf
 16283  004358  6F71               	movwf	(?_itoa+1)& (0+255),b
 16284  00435A  0E54               	movlw	low _wrkbuf
 16285  00435C  6F70               	movwf	?_itoa& (0+255),b
 16286  00435E  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16287  004362  6B73               	clrf	(?_itoa+3)& (0+255),b
 16288  004364  6B75               	clrf	(?_itoa+5)& (0+255),b
 16289  004366  0E0A               	movlw	10
 16290  004368  6F74               	movwf	(?_itoa+4)& (0+255),b
 16291  00436A  EC30  F02D         	call	_itoa	;wreg free
 16292                           
 16293                           ; BSR set to: 0
 16294                           ;main.c: 2621: putsUSART(wrkbuf);
 16295  00436E  0E01               	movlw	high _wrkbuf
 16296  004370  0100               	movlb	0	; () banked
 16297  004372  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16298  004374  0E54               	movlw	low _wrkbuf
 16299  004376  6F61               	movwf	?_putsUSART& (0+255),b
 16300  004378  EC4F  F02B         	call	_putsUSART	;wreg free
 16301                           
 16302                           ;main.c: 2622: putsUSART((char *) " nodes found\r\n");
 16303  00437C  0E7E               	movlw	high STR_242
 16304  00437E  0100               	movlb	0	; () banked
 16305  004380  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16306  004382  0E4E               	movlw	low STR_242
 16307  004384  6F61               	movwf	?_putsUSART& (0+255),b
 16308  004386  EF4F  F02B         	goto	_putsUSART	;wreg free
 16309  00438A                     __end_of_findNodes:
 16310                           	opt stack 0
 16311                           tblptru	equ	0xFF8
 16312                           tblptrh	equ	0xFF7
 16313                           tblptrl	equ	0xFF6
 16314                           tablat	equ	0xFF5
 16315                           prodh	equ	0xFF4
 16316                           prodl	equ	0xFF3
 16317                           intcon	equ	0xFF2
 16318                           indf0	equ	0xFEF
 16319                           postinc0	equ	0xFEE
 16320                           fsr0h	equ	0xFEA
 16321                           fsr0l	equ	0xFE9
 16322                           wreg	equ	0xFE8
 16323                           indf1	equ	0xFE7
 16324                           postinc1	equ	0xFE6
 16325                           postdec1	equ	0xFE5
 16326                           fsr1h	equ	0xFE2
 16327                           fsr1l	equ	0xFE1
 16328                           indf2	equ	0xFDF
 16329                           postinc2	equ	0xFDE
 16330                           postdec2	equ	0xFDD
 16331                           plusw2	equ	0xFDB
 16332                           fsr2h	equ	0xFDA
 16333                           fsr2l	equ	0xFD9
 16334                           status	equ	0xFD8
 16335                           
 16336 ;; *************** function _printMDF *****************
 16337 ;; Defined at:
 16338 ;;		line 2673 in file "main.c"
 16339 ;; Parameters:    Size  Location     Type
 16340 ;;  nodeid          1    wreg     unsigned char 
 16341 ;; Auto vars:     Size  Location     Type
 16342 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16343 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16344 ;;		 -> wrkbuf(80), 
 16345 ;;  i               1   99[BANK0 ] unsigned char 
 16346 ;;  value           1   96[BANK0 ] unsigned char 
 16347 ;; Return value:  Size  Location     Type
 16348 ;;		None               void
 16349 ;; Registers used:
 16350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16351 ;; Tracked objects:
 16352 ;;		On entry : D/2
 16353 ;;		On exit  : 0/0
 16354 ;;		Unchanged: 0/0
 16355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16356 ;;      Params:         0       0       0       0       0       0       0
 16357 ;;      Locals:         0       5       0       0       0       0       0
 16358 ;;      Temps:          0       0       0       0       0       0       0
 16359 ;;      Totals:         0       5       0       0       0       0       0
 16360 ;;Total ram usage:        5 bytes
 16361 ;; Hardware stack levels used:    1
 16362 ;; Hardware stack levels required when called:    8
 16363 ;; This function calls:
 16364 ;;		_putsUSART
 16365 ;;		_memset
 16366 ;;		_readRegister
 16367 ;; This function is called by:
 16368 ;;		_doModeVerbose
 16369 ;;		_findNodes
 16370 ;; This function uses a non-reentrant model
 16371 ;;
 16372                           
 16373                           	psect	text29
 16374  004E86                     __ptext29:
 16375                           	opt stack 0
 16376  004E86                     _printMDF:
 16377                           	opt stack 21
 16378                           
 16379                           ;incstack = 0
 16380                           ;incstack = 0
 16381                           ;printMDF@nodeid stored from wreg
 16382  004E86  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16383                           
 16384                           ;main.c: 2674: uint8_t i;
 16385                           ;main.c: 2675: uint8_t value;
 16386                           ;main.c: 2676: char *p = wrkbuf;
 16387  004E8A  0E01               	movlw	high _wrkbuf
 16388  004E8C  0100               	movlb	0	; () banked
 16389  004E8E  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16390  004E90  0E54               	movlw	low _wrkbuf
 16391  004E92  6FC1               	movwf	printMDF@p& (0+255),b
 16392                           
 16393                           ; BSR set to: 0
 16394                           ;main.c: 2677: memset(wrkbuf, 0, sizeof (wrkbuf));
 16395  004E94  0E01               	movlw	high _wrkbuf
 16396  004E96  6F61               	movwf	(?_memset+1)& (0+255),b
 16397  004E98  0E54               	movlw	low _wrkbuf
 16398  004E9A  6F60               	movwf	?_memset& (0+255),b
 16399  004E9C  6B63               	clrf	(?_memset+3)& (0+255),b
 16400  004E9E  6B62               	clrf	(?_memset+2)& (0+255),b
 16401  004EA0  6B65               	clrf	(?_memset+5)& (0+255),b
 16402  004EA2  0E50               	movlw	80
 16403  004EA4  6F64               	movwf	(?_memset+4)& (0+255),b
 16404  004EA6  ECC9  F02D         	call	_memset	;wreg free
 16405                           
 16406                           ; BSR set to: 0
 16407                           ;main.c: 2678: putsUSART((char *) "MDF = http://");
 16408  004EAA  0E7E               	movlw	high STR_248
 16409  004EAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16410  004EAE  0E6C               	movlw	low STR_248
 16411  004EB0  6F61               	movwf	?_putsUSART& (0+255),b
 16412  004EB2  EC4F  F02B         	call	_putsUSART	;wreg free
 16413                           
 16414                           ;main.c: 2680: for (i = 0; i < 32; i++) {
 16415  004EB6  0100               	movlb	0	; () banked
 16416  004EB8  6BC3               	clrf	printMDF@i& (0+255),b
 16417  004EBA                     l12219:
 16418                           
 16419                           ; BSR set to: 0
 16420                           ;main.c: 2681: if (readRegister(nodeid,
 16421                           ;main.c: 2682: 0xE0 + i,
 16422                           ;main.c: 2683: rwtimeout,
 16423                           ;main.c: 2684: &value)) {
 16424  004EBA  51C3               	movf	printMDF@i& (0+255),w,b
 16425  004EBC  0FE0               	addlw	224
 16426  004EBE  6FB6               	movwf	?_readRegister& (0+255),b
 16427  004EC0  0100               	movlb	0	; () banked
 16428  004EC2  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16429  004EC6  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16430  004EC8  0EC0               	movlw	low printMDF@value
 16431  004ECA  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16432  004ECC  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16433  004ECE  EC77  F023         	call	_readRegister
 16434  004ED2  0900               	iorlw	0
 16435  004ED4  E00A               	bz	l12225
 16436                           
 16437                           ;main.c: 2685: *p = value;
 16438  004ED6  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16439  004EDA  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16440  004EDE  C0C0  FFDF         	movff	printMDF@value,indf2
 16441  004EE2                     l12223:
 16442                           
 16443                           ;main.c: 2686: p++;
 16444  004EE2  0100               	movlb	0	; () banked
 16445  004EE4  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16446  004EE6  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16447                           
 16448                           ;main.c: 2688: }
 16449  004EE8  D007               	goto	l12229
 16450  004EEA                     l12225:
 16451                           
 16452                           ;main.c: 2689: else {
 16453                           ;main.c: 2690: *p = '?';
 16454  004EEA  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16455  004EEE  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16456  004EF2  0E3F               	movlw	63
 16457  004EF4  6EDF               	movwf	indf2,c
 16458  004EF6  D7F5               	goto	l12223
 16459  004EF8                     l12229:
 16460                           
 16461                           ; BSR set to: 0
 16462  004EF8  2BC3               	incf	printMDF@i& (0+255),f,b
 16463                           
 16464                           ; BSR set to: 0
 16465  004EFA  0E1F               	movlw	31
 16466  004EFC  65C3               	cpfsgt	printMDF@i& (0+255),b
 16467  004EFE  D7DD               	goto	l12219
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;main.c: 2692: }
 16471                           ;main.c: 2693: }
 16472                           ;main.c: 2695: putsUSART(wrkbuf);
 16473  004F00  0E01               	movlw	high _wrkbuf
 16474  004F02  0100               	movlb	0	; () banked
 16475  004F04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16476  004F06  0E54               	movlw	low _wrkbuf
 16477  004F08  6F61               	movwf	?_putsUSART& (0+255),b
 16478  004F0A  EC4F  F02B         	call	_putsUSART	;wreg free
 16479                           
 16480                           ;main.c: 2696: putsUSART((char *) "\r\n");
 16481  004F0E  0E74               	movlw	high (STR_197+50)
 16482  004F10  0100               	movlb	0	; () banked
 16483  004F12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16484  004F14  0E8A               	movlw	low (STR_197+50)
 16485  004F16  6F61               	movwf	?_putsUSART& (0+255),b
 16486  004F18  EF4F  F02B         	goto	_putsUSART	;wreg free
 16487  004F1C                     __end_of_printMDF:
 16488                           	opt stack 0
 16489                           tblptru	equ	0xFF8
 16490                           tblptrh	equ	0xFF7
 16491                           tblptrl	equ	0xFF6
 16492                           tablat	equ	0xFF5
 16493                           prodh	equ	0xFF4
 16494                           prodl	equ	0xFF3
 16495                           intcon	equ	0xFF2
 16496                           indf0	equ	0xFEF
 16497                           postinc0	equ	0xFEE
 16498                           fsr0h	equ	0xFEA
 16499                           fsr0l	equ	0xFE9
 16500                           wreg	equ	0xFE8
 16501                           indf1	equ	0xFE7
 16502                           postinc1	equ	0xFE6
 16503                           postdec1	equ	0xFE5
 16504                           fsr1h	equ	0xFE2
 16505                           fsr1l	equ	0xFE1
 16506                           indf2	equ	0xFDF
 16507                           postinc2	equ	0xFDE
 16508                           postdec2	equ	0xFDD
 16509                           plusw2	equ	0xFDB
 16510                           fsr2h	equ	0xFDA
 16511                           fsr2l	equ	0xFD9
 16512                           status	equ	0xFD8
 16513                           
 16514 ;; *************** function _printGUID *****************
 16515 ;; Defined at:
 16516 ;;		line 2632 in file "main.c"
 16517 ;; Parameters:    Size  Location     Type
 16518 ;;  nodeid          1    wreg     unsigned char 
 16519 ;; Auto vars:     Size  Location     Type
 16520 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16521 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16522 ;;  i               1  100[BANK0 ] unsigned char 
 16523 ;;  value           1   99[BANK0 ] unsigned char 
 16524 ;; Return value:  Size  Location     Type
 16525 ;;		None               void
 16526 ;; Registers used:
 16527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16528 ;; Tracked objects:
 16529 ;;		On entry : D/2
 16530 ;;		On exit  : 0/0
 16531 ;;		Unchanged: 0/0
 16532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16533 ;;      Params:         0       0       0       0       0       0       0
 16534 ;;      Locals:         0       6       0       0       0       0       0
 16535 ;;      Temps:          0       0       0       0       0       0       0
 16536 ;;      Totals:         0       6       0       0       0       0       0
 16537 ;;Total ram usage:        6 bytes
 16538 ;; Hardware stack levels used:    1
 16539 ;; Hardware stack levels required when called:    8
 16540 ;; This function calls:
 16541 ;;		_putsUSART
 16542 ;;		_memset
 16543 ;;		_strlen
 16544 ;;		_itoa
 16545 ;;		_readRegister
 16546 ;;		_strcat
 16547 ;; This function is called by:
 16548 ;;		_doModeVerbose
 16549 ;;		_findNodes
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553                           	psect	text30
 16554  004096                     __ptext30:
 16555                           	opt stack 0
 16556  004096                     _printGUID:
 16557                           	opt stack 21
 16558                           
 16559                           ;incstack = 0
 16560                           ;incstack = 0
 16561                           ;printGUID@nodeid stored from wreg
 16562  004096  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16563                           
 16564                           ;main.c: 2633: uint8_t i;
 16565                           ;main.c: 2634: uint8_t value;
 16566                           ;main.c: 2635: char buf[3];
 16567                           ;main.c: 2637: memset(wrkbuf, 0, sizeof (wrkbuf));
 16568  00409A  0E01               	movlw	high _wrkbuf
 16569  00409C  0100               	movlb	0	; () banked
 16570  00409E  6F61               	movwf	(?_memset+1)& (0+255),b
 16571  0040A0  0E54               	movlw	low _wrkbuf
 16572  0040A2  6F60               	movwf	?_memset& (0+255),b
 16573  0040A4  6B63               	clrf	(?_memset+3)& (0+255),b
 16574  0040A6  6B62               	clrf	(?_memset+2)& (0+255),b
 16575  0040A8  6B65               	clrf	(?_memset+5)& (0+255),b
 16576  0040AA  0E50               	movlw	80
 16577  0040AC  6F64               	movwf	(?_memset+4)& (0+255),b
 16578  0040AE  ECC9  F02D         	call	_memset	;wreg free
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;main.c: 2638: putsUSART((char *) "GUID = ");
 16582  0040B2  0E7E               	movlw	high STR_243
 16583  0040B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16584  0040B6  0EE5               	movlw	low STR_243
 16585  0040B8  6F61               	movwf	?_putsUSART& (0+255),b
 16586  0040BA  EC4F  F02B         	call	_putsUSART	;wreg free
 16587                           
 16588                           ;main.c: 2640: for (i = 0; i < 16; i++) {
 16589  0040BE  0100               	movlb	0	; () banked
 16590  0040C0  6BC4               	clrf	printGUID@i& (0+255),b
 16591  0040C2                     l12185:
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;main.c: 2641: if (readRegister(nodeid,
 16595                           ;main.c: 2642: 0xD0 + i,
 16596                           ;main.c: 2643: rwtimeout,
 16597                           ;main.c: 2644: &value)) {
 16598  0040C2  51C4               	movf	printGUID@i& (0+255),w,b
 16599  0040C4  0FD0               	addlw	208
 16600  0040C6  6FB6               	movwf	?_readRegister& (0+255),b
 16601  0040C8  0100               	movlb	0	; () banked
 16602  0040CA  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16603  0040CE  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16604  0040D0  0EC3               	movlw	low printGUID@value
 16605  0040D2  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16606  0040D4  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16607  0040D6  EC77  F023         	call	_readRegister
 16608  0040DA  0900               	iorlw	0
 16609  0040DC  E029               	bz	l12195
 16610                           
 16611                           ;main.c: 2645: itoa(buf, value, 16);
 16612  0040DE  0100               	movlb	0	; () banked
 16613  0040E0  0E00               	movlw	high printGUID@buf
 16614  0040E2  6F71               	movwf	(?_itoa+1)& (0+255),b
 16615  0040E4  0EC0               	movlw	low printGUID@buf
 16616  0040E6  6F70               	movwf	?_itoa& (0+255),b
 16617  0040E8  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16618  0040EC  6B73               	clrf	(?_itoa+3)& (0+255),b
 16619  0040EE  6B75               	clrf	(?_itoa+5)& (0+255),b
 16620  0040F0  0E10               	movlw	16
 16621  0040F2  6F74               	movwf	(?_itoa+4)& (0+255),b
 16622  0040F4  EC30  F02D         	call	_itoa	;wreg free
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;main.c: 2646: if (1 == strlen(buf)) {
 16626  0040F8  0E00               	movlw	high printGUID@buf
 16627  0040FA  6F61               	movwf	(?_strlen+1)& (0+255),b
 16628  0040FC  0EC0               	movlw	low printGUID@buf
 16629  0040FE  6F60               	movwf	?_strlen& (0+255),b
 16630  004100  EC77  F02C         	call	_strlen	;wreg free
 16631  004104  0560               	decf	?_strlen& (0+255),w,b
 16632  004106  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16633  004108  E10F               	bnz	l12193
 16634                           
 16635                           ; BSR set to: 0
 16636                           ;main.c: 2647: strcat(wrkbuf, "0");
 16637  00410A  0E01               	movlw	high _wrkbuf
 16638  00410C  0100               	movlb	0	; () banked
 16639  00410E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16640  004110  0E54               	movlw	low _wrkbuf
 16641  004112  6F60               	movwf	?_strcat& (0+255),b
 16642  004114  0E7F               	movlw	high STR_244
 16643  004116  6F63               	movwf	(?_strcat+3)& (0+255),b
 16644  004118  0EF8               	movlw	low STR_244
 16645  00411A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16646  00411C  EC23  F02B         	call	_strcat	;wreg free
 16647                           
 16648                           ;main.c: 2648: strcat(wrkbuf, buf);
 16649  004120  D832               	call	PL78	;call to abstracted procedure
 16650  004122  EC23  F02B         	call	_strcat	;wreg free
 16651                           
 16652                           ;main.c: 2649: } else {
 16653  004126  D00F               	goto	l12197
 16654  004128                     l12193:
 16655                           
 16656                           ; BSR set to: 0
 16657                           ;main.c: 2650: strcat(wrkbuf, buf);
 16658  004128  D82E               	call	PL78	;call to abstracted procedure
 16659  00412A  EC23  F02B         	call	_strcat	;wreg free
 16660  00412E  D00B               	goto	l12197
 16661  004130                     l12195:
 16662                           
 16663                           ;main.c: 2654: strcat(wrkbuf, "--");
 16664  004130  0E01               	movlw	high _wrkbuf
 16665  004132  0100               	movlb	0	; () banked
 16666  004134  6F61               	movwf	(?_strcat+1)& (0+255),b
 16667  004136  0E54               	movlw	low _wrkbuf
 16668  004138  6F60               	movwf	?_strcat& (0+255),b
 16669  00413A  0E7F               	movlw	high STR_245
 16670  00413C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16671  00413E  0EE4               	movlw	low STR_245
 16672  004140  6F62               	movwf	(?_strcat+2)& (0+255),b
 16673  004142  EC23  F02B         	call	_strcat	;wreg free
 16674  004146                     l12197:
 16675                           
 16676                           ;main.c: 2655: }
 16677                           ;main.c: 2657: if (i < 15) {
 16678  004146  0E0F               	movlw	15
 16679  004148  0100               	movlb	0	; () banked
 16680  00414A  61C4               	cpfslt	printGUID@i& (0+255),b
 16681  00414C  D00A               	goto	l12201
 16682                           
 16683                           ; BSR set to: 0
 16684                           ;main.c: 2658: strcat(wrkbuf, ":");
 16685  00414E  0E01               	movlw	high _wrkbuf
 16686  004150  6F61               	movwf	(?_strcat+1)& (0+255),b
 16687  004152  0E54               	movlw	low _wrkbuf
 16688  004154  6F60               	movwf	?_strcat& (0+255),b
 16689  004156  0E7F               	movlw	high STR_246
 16690  004158  6F63               	movwf	(?_strcat+3)& (0+255),b
 16691  00415A  0EFA               	movlw	low STR_246
 16692  00415C  6F62               	movwf	(?_strcat+2)& (0+255),b
 16693  00415E  EC23  F02B         	call	_strcat	;wreg free
 16694  004162                     l12201:
 16695  004162  0100               	movlb	0	; () banked
 16696  004164  2BC4               	incf	printGUID@i& (0+255),f,b
 16697                           
 16698                           ; BSR set to: 0
 16699  004166  0E0F               	movlw	15
 16700  004168  65C4               	cpfsgt	printGUID@i& (0+255),b
 16701  00416A  D7AB               	goto	l12185
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;main.c: 2659: }
 16705                           ;main.c: 2661: }
 16706                           ;main.c: 2663: putsUSART(wrkbuf);
 16707  00416C  0E01               	movlw	high _wrkbuf
 16708  00416E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16709  004170  0E54               	movlw	low _wrkbuf
 16710  004172  6F61               	movwf	?_putsUSART& (0+255),b
 16711  004174  EC4F  F02B         	call	_putsUSART	;wreg free
 16712                           
 16713                           ;main.c: 2664: putsUSART((char *) "\r\n");
 16714  004178  0E74               	movlw	high (STR_197+50)
 16715  00417A  0100               	movlb	0	; () banked
 16716  00417C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16717  00417E  0E8A               	movlw	low (STR_197+50)
 16718  004180  6F61               	movwf	?_putsUSART& (0+255),b
 16719  004182  EF4F  F02B         	goto	_putsUSART	;wreg free
 16720  004186                     __end_of_printGUID:
 16721                           	opt stack 0
 16722  004186                     PL78:
 16723                           	opt stack 21
 16724  004186  0E01               	movlw	high _wrkbuf
 16725  004188  0100               	movlb	0	; () banked
 16726  00418A  6F61               	movwf	(?_strcat+1)& (0+255),b
 16727  00418C  0E54               	movlw	low _wrkbuf
 16728  00418E  6F60               	movwf	?_strcat& (0+255),b
 16729  004190  0E00               	movlw	high printGUID@buf
 16730  004192  6F63               	movwf	(?_strcat+3)& (0+255),b
 16731  004194  0EC0               	movlw	low printGUID@buf
 16732  004196  6F62               	movwf	(?_strcat+2)& (0+255),b
 16733  004198  0012               	return	
 16734  00419A                     __end_ofPL78:
 16735                           	opt stack 0
 16736                           tblptru	equ	0xFF8
 16737                           tblptrh	equ	0xFF7
 16738                           tblptrl	equ	0xFF6
 16739                           tablat	equ	0xFF5
 16740                           prodh	equ	0xFF4
 16741                           prodl	equ	0xFF3
 16742                           intcon	equ	0xFF2
 16743                           indf0	equ	0xFEF
 16744                           postinc0	equ	0xFEE
 16745                           fsr0h	equ	0xFEA
 16746                           fsr0l	equ	0xFE9
 16747                           wreg	equ	0xFE8
 16748                           indf1	equ	0xFE7
 16749                           postinc1	equ	0xFE6
 16750                           postdec1	equ	0xFE5
 16751                           fsr1h	equ	0xFE2
 16752                           fsr1l	equ	0xFE1
 16753                           indf2	equ	0xFDF
 16754                           postinc2	equ	0xFDE
 16755                           postdec2	equ	0xFDD
 16756                           plusw2	equ	0xFDB
 16757                           fsr2h	equ	0xFDA
 16758                           fsr2l	equ	0xFD9
 16759                           status	equ	0xFD8
 16760                           
 16761 ;; *************** function _printNodeFirmwareVersion *****************
 16762 ;; Defined at:
 16763 ;;		line 2704 in file "main.c"
 16764 ;; Parameters:    Size  Location     Type
 16765 ;;  nodeid          1    wreg     unsigned char 
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16768 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16769 ;;  i               1  100[BANK0 ] unsigned char 
 16770 ;;  value           1   99[BANK0 ] unsigned char 
 16771 ;; Return value:  Size  Location     Type
 16772 ;;		None               void
 16773 ;; Registers used:
 16774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : D/2
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16780 ;;      Params:         0       0       0       0       0       0       0
 16781 ;;      Locals:         0       6       0       0       0       0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0
 16783 ;;      Totals:         0       6       0       0       0       0       0
 16784 ;;Total ram usage:        6 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    8
 16787 ;; This function calls:
 16788 ;;		_putsUSART
 16789 ;;		_memset
 16790 ;;		_itoa
 16791 ;;		_readRegister
 16792 ;;		_strcat
 16793 ;; This function is called by:
 16794 ;;		_doModeVerbose
 16795 ;;		_findNodes
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           	psect	text31
 16800  00461E                     __ptext31:
 16801                           	opt stack 0
 16802  00461E                     _printNodeFirmwareVersion:
 16803                           	opt stack 21
 16804                           
 16805                           ;incstack = 0
 16806                           ;incstack = 0
 16807                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16808  00461E  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16809                           
 16810                           ;main.c: 2705: uint8_t i;
 16811                           ;main.c: 2706: uint8_t value;
 16812                           ;main.c: 2707: char buf[3];
 16813                           ;main.c: 2709: memset(wrkbuf, 0, sizeof (wrkbuf));
 16814  004622  0E01               	movlw	high _wrkbuf
 16815  004624  0100               	movlb	0	; () banked
 16816  004626  6F61               	movwf	(?_memset+1)& (0+255),b
 16817  004628  0E54               	movlw	low _wrkbuf
 16818  00462A  6F60               	movwf	?_memset& (0+255),b
 16819  00462C  6B63               	clrf	(?_memset+3)& (0+255),b
 16820  00462E  6B62               	clrf	(?_memset+2)& (0+255),b
 16821  004630  6B65               	clrf	(?_memset+5)& (0+255),b
 16822  004632  0E50               	movlw	80
 16823  004634  6F64               	movwf	(?_memset+4)& (0+255),b
 16824  004636  ECC9  F02D         	call	_memset	;wreg free
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;main.c: 2710: putsUSART((char *) "Firmware version = ");
 16828  00463A  0E7D               	movlw	high STR_250
 16829  00463C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16830  00463E  0EBE               	movlw	low STR_250
 16831  004640  6F61               	movwf	?_putsUSART& (0+255),b
 16832  004642  EC4F  F02B         	call	_putsUSART	;wreg free
 16833                           
 16834                           ;main.c: 2712: for (i = 0; i < 3; i++) {
 16835  004646  0100               	movlb	0	; () banked
 16836  004648  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16837  00464A                     l12157:
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;main.c: 2713: if (readRegister(nodeid,
 16841                           ;main.c: 2714: 0x94 + i,
 16842                           ;main.c: 2715: rwtimeout,
 16843                           ;main.c: 2716: &value)) {
 16844  00464A  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16845  00464C  0F94               	addlw	148
 16846  00464E  6FB6               	movwf	?_readRegister& (0+255),b
 16847  004650  0100               	movlb	0	; () banked
 16848  004652  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16849  004656  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16850  004658  0EC3               	movlw	low printNodeFirmwareVersion@value
 16851  00465A  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16852  00465C  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16853  00465E  EC77  F023         	call	_readRegister
 16854  004662  0900               	iorlw	0
 16855  004664  E019               	bz	l12163
 16856                           
 16857                           ;main.c: 2717: itoa(buf, value, 16);
 16858  004666  0100               	movlb	0	; () banked
 16859  004668  0E00               	movlw	high printNodeFirmwareVersion@buf
 16860  00466A  6F71               	movwf	(?_itoa+1)& (0+255),b
 16861  00466C  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16862  00466E  6F70               	movwf	?_itoa& (0+255),b
 16863  004670  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16864  004674  6B73               	clrf	(?_itoa+3)& (0+255),b
 16865  004676  6B75               	clrf	(?_itoa+5)& (0+255),b
 16866  004678  0E10               	movlw	16
 16867  00467A  6F74               	movwf	(?_itoa+4)& (0+255),b
 16868  00467C  EC30  F02D         	call	_itoa	;wreg free
 16869                           
 16870                           ; BSR set to: 0
 16871                           ;main.c: 2718: strcat(wrkbuf, buf);
 16872  004680  0E01               	movlw	high _wrkbuf
 16873  004682  0100               	movlb	0	; () banked
 16874  004684  6F61               	movwf	(?_strcat+1)& (0+255),b
 16875  004686  0E54               	movlw	low _wrkbuf
 16876  004688  6F60               	movwf	?_strcat& (0+255),b
 16877  00468A  0E00               	movlw	high printNodeFirmwareVersion@buf
 16878  00468C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16879  00468E  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16880  004690  6F62               	movwf	(?_strcat+2)& (0+255),b
 16881  004692  EC23  F02B         	call	_strcat	;wreg free
 16882                           
 16883                           ;main.c: 2719: }
 16884  004696  D00B               	goto	l12165
 16885  004698                     l12163:
 16886                           
 16887                           ;main.c: 2720: else {
 16888                           ;main.c: 2721: strcat(wrkbuf, "?");
 16889  004698  0E01               	movlw	high _wrkbuf
 16890  00469A  0100               	movlb	0	; () banked
 16891  00469C  6F61               	movwf	(?_strcat+1)& (0+255),b
 16892  00469E  0E54               	movlw	low _wrkbuf
 16893  0046A0  6F60               	movwf	?_strcat& (0+255),b
 16894  0046A2  0E7F               	movlw	high STR_251
 16895  0046A4  6F63               	movwf	(?_strcat+3)& (0+255),b
 16896  0046A6  0EFC               	movlw	low STR_251
 16897  0046A8  6F62               	movwf	(?_strcat+2)& (0+255),b
 16898  0046AA  EC23  F02B         	call	_strcat	;wreg free
 16899  0046AE                     l12165:
 16900                           
 16901                           ;main.c: 2722: }
 16902                           ;main.c: 2724: if (i < 2) {
 16903  0046AE  0E02               	movlw	2
 16904  0046B0  0100               	movlb	0	; () banked
 16905  0046B2  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16906  0046B4  D00A               	goto	l12169
 16907                           
 16908                           ; BSR set to: 0
 16909                           ;main.c: 2725: strcat(wrkbuf, ".");
 16910  0046B6  0E01               	movlw	high _wrkbuf
 16911  0046B8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16912  0046BA  0E54               	movlw	low _wrkbuf
 16913  0046BC  6F60               	movwf	?_strcat& (0+255),b
 16914  0046BE  0E7F               	movlw	high STR_252
 16915  0046C0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16916  0046C2  0EF6               	movlw	low STR_252
 16917  0046C4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16918  0046C6  EC23  F02B         	call	_strcat	;wreg free
 16919  0046CA                     l12169:
 16920  0046CA  0100               	movlb	0	; () banked
 16921  0046CC  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16922                           
 16923                           ; BSR set to: 0
 16924  0046CE  0E02               	movlw	2
 16925  0046D0  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16926  0046D2  D7BB               	goto	l12157
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;main.c: 2726: }
 16930                           ;main.c: 2728: }
 16931                           ;main.c: 2730: putsUSART(wrkbuf);
 16932  0046D4  0E01               	movlw	high _wrkbuf
 16933  0046D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16934  0046D8  0E54               	movlw	low _wrkbuf
 16935  0046DA  6F61               	movwf	?_putsUSART& (0+255),b
 16936  0046DC  EC4F  F02B         	call	_putsUSART	;wreg free
 16937                           
 16938                           ;main.c: 2731: putsUSART((char *) "\r\n");
 16939  0046E0  0E74               	movlw	high (STR_197+50)
 16940  0046E2  0100               	movlb	0	; () banked
 16941  0046E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16942  0046E6  0E8A               	movlw	low (STR_197+50)
 16943  0046E8  6F61               	movwf	?_putsUSART& (0+255),b
 16944  0046EA  EF4F  F02B         	goto	_putsUSART	;wreg free
 16945  0046EE                     __end_of_printNodeFirmwareVersion:
 16946                           	opt stack 0
 16947                           tblptru	equ	0xFF8
 16948                           tblptrh	equ	0xFF7
 16949                           tblptrl	equ	0xFF6
 16950                           tablat	equ	0xFF5
 16951                           prodh	equ	0xFF4
 16952                           prodl	equ	0xFF3
 16953                           intcon	equ	0xFF2
 16954                           indf0	equ	0xFEF
 16955                           postinc0	equ	0xFEE
 16956                           fsr0h	equ	0xFEA
 16957                           fsr0l	equ	0xFE9
 16958                           wreg	equ	0xFE8
 16959                           indf1	equ	0xFE7
 16960                           postinc1	equ	0xFE6
 16961                           postdec1	equ	0xFE5
 16962                           fsr1h	equ	0xFE2
 16963                           fsr1l	equ	0xFE1
 16964                           indf2	equ	0xFDF
 16965                           postinc2	equ	0xFDE
 16966                           postdec2	equ	0xFDD
 16967                           plusw2	equ	0xFDB
 16968                           fsr2h	equ	0xFDA
 16969                           fsr2l	equ	0xFD9
 16970                           status	equ	0xFD8
 16971                           
 16972 ;; *************** function _strcat *****************
 16973 ;; Defined at:
 16974 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16975 ;; Parameters:    Size  Location     Type
 16976 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16977 ;;		 -> wrkbuf(80), 
 16978 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16979 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16980 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16981 ;; Auto vars:     Size  Location     Type
 16982 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16983 ;;		 -> wrkbuf(80), 
 16984 ;; Return value:  Size  Location     Type
 16985 ;;                  2    0[BANK0 ] PTR unsigned char 
 16986 ;; Registers used:
 16987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16988 ;; Tracked objects:
 16989 ;;		On entry : F/0
 16990 ;;		On exit  : 0/0
 16991 ;;		Unchanged: 0/0
 16992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16993 ;;      Params:         0       4       0       0       0       0       0
 16994 ;;      Locals:         0       2       0       0       0       0       0
 16995 ;;      Temps:          0       0       0       0       0       0       0
 16996 ;;      Totals:         0       6       0       0       0       0       0
 16997 ;;Total ram usage:        6 bytes
 16998 ;; Hardware stack levels used:    1
 16999 ;; Hardware stack levels required when called:    3
 17000 ;; This function calls:
 17001 ;;		Nothing
 17002 ;; This function is called by:
 17003 ;;		_printGUID
 17004 ;;		_printNodeFirmwareVersion
 17005 ;; This function uses a non-reentrant model
 17006 ;;
 17007                           
 17008                           	psect	text32
 17009  005646                     __ptext32:
 17010                           	opt stack 0
 17011  005646                     _strcat:
 17012                           	opt stack 25
 17013                           
 17014                           ; BSR set to: 0
 17015                           
 17016                           ;incstack = 0
 17017                           ;incstack = 0
 17018  005646  C060  F064         	movff	strcat@to,strcat@cp
 17019  00564A  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17020  00564E  D002               	goto	l12855
 17021  005650                     l12853:
 17022                           
 17023                           ; BSR set to: 0
 17024  005650  4B64               	infsnz	strcat@cp& (0+255),f,b
 17025  005652  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17026  005654                     l12855:
 17027                           
 17028                           ; BSR set to: 0
 17029  005654  C064  FFD9         	movff	strcat@cp,fsr2l
 17030  005658  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17031  00565C  50DF               	movf	indf2,w,c
 17032  00565E  E006               	bz	l12859
 17033  005660  D7F7               	goto	l12853
 17034  005662                     l12857:
 17035  005662  0100               	movlb	0	; () banked
 17036  005664  4B64               	infsnz	strcat@cp& (0+255),f,b
 17037  005666  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17038  005668  4B62               	infsnz	strcat@from& (0+255),f,b
 17039  00566A  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17040  00566C                     l12859:
 17041                           
 17042                           ; BSR set to: 0
 17043  00566C  C062  FFF6         	movff	strcat@from,tblptrl
 17044  005670  C063  FFF7         	movff	strcat@from+1,tblptrh
 17045  005674  6AF8               	clrf	tblptru,c
 17046  005676  C064  FFD9         	movff	strcat@cp,fsr2l
 17047  00567A  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17048  00567E  0E05               	movlw	(high __ramtop+-1)
 17049  005680  64F7               	cpfsgt	tblptrh,c
 17050  005682  D003               	bra	u16757
 17051  005684  0008               	tblrd		*
 17052  005686  50F5               	movf	tablat,w,c
 17053  005688  D005               	bra	u16750
 17054  00568A                     u16757:
 17055  00568A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17056  00568E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17057  005692  50EF               	movf	indf0,w,c
 17058  005694                     u16750:
 17059  005694  6EDF               	movwf	indf2,c
 17060  005696  50DF               	movf	indf2,w,c
 17061  005698  B4D8               	btfsc	status,2,c
 17062  00569A  0012               	return	
 17063  00569C  D7E2               	goto	l12857
 17064  00569E                     __end_of_strcat:
 17065                           	opt stack 0
 17066                           tblptru	equ	0xFF8
 17067                           tblptrh	equ	0xFF7
 17068                           tblptrl	equ	0xFF6
 17069                           tablat	equ	0xFF5
 17070                           prodh	equ	0xFF4
 17071                           prodl	equ	0xFF3
 17072                           intcon	equ	0xFF2
 17073                           indf0	equ	0xFEF
 17074                           postinc0	equ	0xFEE
 17075                           fsr0h	equ	0xFEA
 17076                           fsr0l	equ	0xFE9
 17077                           wreg	equ	0xFE8
 17078                           indf1	equ	0xFE7
 17079                           postinc1	equ	0xFE6
 17080                           postdec1	equ	0xFE5
 17081                           fsr1h	equ	0xFE2
 17082                           fsr1l	equ	0xFE1
 17083                           indf2	equ	0xFDF
 17084                           postinc2	equ	0xFDE
 17085                           postdec2	equ	0xFDD
 17086                           plusw2	equ	0xFDB
 17087                           fsr2h	equ	0xFDA
 17088                           fsr2l	equ	0xFD9
 17089                           status	equ	0xFD8
 17090                           
 17091 ;; *************** function _readRegister *****************
 17092 ;; Defined at:
 17093 ;;		line 2207 in file "main.c"
 17094 ;; Parameters:    Size  Location     Type
 17095 ;;  nodeid          1    wreg     unsigned char 
 17096 ;;  reg             1   86[BANK0 ] unsigned char 
 17097 ;;  timeout         2   87[BANK0 ] unsigned short 
 17098 ;;  value           1   89[BANK0 ] PTR unsigned char 
 17099 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17100 ;; Auto vars:     Size  Location     Type
 17101 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17102 ;; Return value:  Size  Location     Type
 17103 ;;                  1    wreg      enum E15660
 17104 ;; Registers used:
 17105 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17106 ;; Tracked objects:
 17107 ;;		On entry : F/0
 17108 ;;		On exit  : E/0
 17109 ;;		Unchanged: 0/0
 17110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17111 ;;      Params:         0       4       0       0       0       0       0
 17112 ;;      Locals:         0       1       0       0       0       0       0
 17113 ;;      Temps:          0       4       0       0       0       0       0
 17114 ;;      Totals:         0       9       0       0       0       0       0
 17115 ;;Total ram usage:        9 bytes
 17116 ;; Hardware stack levels used:    1
 17117 ;; Hardware stack levels required when called:    7
 17118 ;; This function calls:
 17119 ;;		_sendVSCPFrame
 17120 ;;		_getVSCPFrame
 17121 ;; This function is called by:
 17122 ;;		_findNodes
 17123 ;;		_printGUID
 17124 ;;		_printMDF
 17125 ;;		_printNodeFirmwareVersion
 17126 ;; This function uses a non-reentrant model
 17127 ;;
 17128                           
 17129                           	psect	text33
 17130  0046EE                     __ptext33:
 17131                           	opt stack 0
 17132  0046EE                     _readRegister:
 17133                           	opt stack 21
 17134                           
 17135                           ;incstack = 0
 17136                           ;incstack = 0
 17137                           ;readRegister@nodeid stored from wreg
 17138  0046EE  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;main.c: 2208: vscpData[ 0 ] = nodeid;
 17142  0046F2  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 17143                           
 17144                           ; BSR set to: 0
 17145                           ;main.c: 2209: vscpData[ 1 ] = reg;
 17146  0046F6  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;main.c: 2211: if (sendVSCPFrame(0,
 17150                           ;main.c: 2212: 9,
 17151                           ;main.c: 2213: 0,
 17152                           ;main.c: 2214: 0,
 17153                           ;main.c: 2215: 2,
 17154                           ;main.c: 2216: vscpData)) {
 17155  0046FA  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17156  0046FC  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17157  0046FE  0E09               	movlw	9
 17158  004700  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17159  004702  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17160  004704  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17161  004706  0E02               	movlw	2
 17162  004708  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17163  00470A  0E01               	movlw	high _vscpData
 17164  00470C  0100               	movlb	0	; () banked
 17165  00470E  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17166  004710  0EA4               	movlw	low _vscpData
 17167  004712  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17168  004714  EC5B  F025         	call	_sendVSCPFrame	;wreg free
 17169  004718  0900               	iorlw	0
 17170  00471A  E04E               	bz	l12847
 17171                           
 17172                           ; BSR set to: 0
 17173                           ;main.c: 2218: timekeeper = 0;
 17174  00471C  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17175  00471E  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17176  004720  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17177  004722  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17178                           
 17179                           ;main.c: 2219: while (timekeeper < timeout) {
 17180  004724  D039               	goto	l12845
 17181  004726                     l1066:
 17182                           
 17183                           ; BSR set to: 0
 17184  004726  0004               	clrwdt		;# 
 17185                           
 17186                           ;main.c: 2223: if (getVSCPFrame(&vscpClass,
 17187                           ;main.c: 2224: &vscpType,
 17188                           ;main.c: 2225: &vscpNodeId,
 17189                           ;main.c: 2226: &vscpPriority,
 17190                           ;main.c: 2227: &vscpSize,
 17191                           ;main.c: 2228: vscpData)) {
 17192  004728  0E01               	movlw	high _vscpClass
 17193  00472A  0100               	movlb	0	; () banked
 17194  00472C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17195  00472E  0EAC               	movlw	low _vscpClass
 17196  004730  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17197  004732  0E01               	movlw	high _vscpType
 17198  004734  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17199  004736  0EB1               	movlw	low _vscpType
 17200  004738  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17201  00473A  0E01               	movlw	high _vscpNodeId
 17202  00473C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17203  00473E  0EAE               	movlw	low _vscpNodeId
 17204  004740  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17205  004742  0E01               	movlw	high _vscpPriority
 17206  004744  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17207  004746  0EAF               	movlw	low _vscpPriority
 17208  004748  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17209  00474A  0E01               	movlw	high _vscpSize
 17210  00474C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17211  00474E  0EB0               	movlw	low _vscpSize
 17212  004750  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17213  004752  0E01               	movlw	high _vscpData
 17214  004754  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17215  004756  0EA4               	movlw	low _vscpData
 17216  004758  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17217  00475A  EC1E  F028         	call	_getVSCPFrame	;wreg free
 17218  00475E  0900               	iorlw	0
 17219  004760  E01B               	bz	l12845
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;main.c: 2229: if ((nodeid == vscpNodeId) &&
 17223                           ;main.c: 2230: (0 == vscpClass) &&
 17224                           ;main.c: 2231: (10 == vscpType) &&
 17225                           ;main.c: 2232: (2 == vscpSize) &&
 17226                           ;main.c: 2233: (reg == vscpData[ 0 ])) {
 17227  004762  0101               	movlb	1	; () banked
 17228  004764  51AE               	movf	_vscpNodeId& (0+255),w,b
 17229  004766  0100               	movlb	0	; () banked
 17230  004768  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17231  00476A  D016               	goto	l12845
 17232                           
 17233                           ; BSR set to: 0
 17234  00476C  0101               	movlb	1	; () banked
 17235  00476E  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17236  004770  11AC               	iorwf	_vscpClass& (0+255),w,b
 17237  004772  E112               	bnz	l12845
 17238                           
 17239                           ; BSR set to: 1
 17240  004774  51B1               	movf	_vscpType& (0+255),w,b
 17241  004776  0A0A               	xorlw	10
 17242  004778  E10F               	bnz	l12845
 17243                           
 17244                           ; BSR set to: 1
 17245  00477A  51B0               	movf	_vscpSize& (0+255),w,b
 17246  00477C  0A02               	xorlw	2
 17247  00477E  E10C               	bnz	l12845
 17248                           
 17249                           ; BSR set to: 1
 17250  004780  51A4               	movf	_vscpData& (0+255),w,b
 17251  004782  0100               	movlb	0	; () banked
 17252  004784  63B6               	cpfseq	readRegister@reg& (0+255),b
 17253  004786  D008               	goto	l12845
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;main.c: 2234: *value = vscpData[ 1 ];
 17257  004788  51B9               	movf	readRegister@value& (0+255),w,b
 17258  00478A  6ED9               	movwf	fsr2l,c
 17259  00478C  6ADA               	clrf	fsr2h,c
 17260  00478E  0101               	movlb	1	; () banked
 17261  004790  C1A5  FFDF         	movff	_vscpData+1,indf2
 17262                           
 17263                           ; BSR set to: 1
 17264                           ;main.c: 2235: return 1;
 17265  004794  0E01               	movlw	1
 17266  004796  D011               	goto	l1069
 17267  004798                     l12845:
 17268  004798  0100               	movlb	0	; () banked
 17269  00479A  51B7               	movf	readRegister@timeout& (0+255),w,b
 17270  00479C  6FBA               	movwf	??_readRegister& (0+255),b
 17271  00479E  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17272  0047A0  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17273  0047A2  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17274  0047A4  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17275  0047A6  51BA               	movf	??_readRegister& (0+255),w,b
 17276  0047A8  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17277  0047AA  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17278  0047AC  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17279  0047AE  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17280  0047B0  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17281  0047B2  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17282  0047B4  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17283  0047B6  E3B7               	bnc	l1066
 17284  0047B8                     l12847:
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;main.c: 2236: }
 17288                           ;main.c: 2237: }
 17289                           ;main.c: 2238: }
 17290                           ;main.c: 2239: }
 17291                           ;main.c: 2241: return 0;
 17292  0047B8  0E00               	movlw	0
 17293  0047BA                     l1069:
 17294  0047BA  0012               	return	
 17295  0047BC                     __end_of_readRegister:
 17296                           	opt stack 0
 17297                           tblptru	equ	0xFF8
 17298                           tblptrh	equ	0xFF7
 17299                           tblptrl	equ	0xFF6
 17300                           tablat	equ	0xFF5
 17301                           prodh	equ	0xFF4
 17302                           prodl	equ	0xFF3
 17303                           intcon	equ	0xFF2
 17304                           indf0	equ	0xFEF
 17305                           postinc0	equ	0xFEE
 17306                           fsr0h	equ	0xFEA
 17307                           fsr0l	equ	0xFE9
 17308                           wreg	equ	0xFE8
 17309                           indf1	equ	0xFE7
 17310                           postinc1	equ	0xFE6
 17311                           postdec1	equ	0xFE5
 17312                           fsr1h	equ	0xFE2
 17313                           fsr1l	equ	0xFE1
 17314                           indf2	equ	0xFDF
 17315                           postinc2	equ	0xFDE
 17316                           postdec2	equ	0xFDD
 17317                           plusw2	equ	0xFDB
 17318                           fsr2h	equ	0xFDA
 17319                           fsr2l	equ	0xFD9
 17320                           status	equ	0xFD8
 17321                           
 17322 ;; *************** function _sendVSCPFrame *****************
 17323 ;; Defined at:
 17324 ;;		line 2928 in file "main.c"
 17325 ;; Parameters:    Size  Location     Type
 17326 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17327 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17328 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17329 ;;  priority        1   58[BANK0 ] unsigned char 
 17330 ;;  size            1   59[BANK0 ] unsigned char 
 17331 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17332 ;;		 -> vscpData(8), 
 17333 ;; Auto vars:     Size  Location     Type
 17334 ;;  id              4   82[BANK0 ] unsigned long 
 17335 ;; Return value:  Size  Location     Type
 17336 ;;                  1    wreg      unsigned char 
 17337 ;; Registers used:
 17338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17339 ;; Tracked objects:
 17340 ;;		On entry : F/0
 17341 ;;		On exit  : F/0
 17342 ;;		Unchanged: 0/0
 17343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17344 ;;      Params:         0       8       0       0       0       0       0
 17345 ;;      Locals:         0       4       0       0       0       0       0
 17346 ;;      Temps:          0      20       0       0       0       0       0
 17347 ;;      Totals:         0      32       0       0       0       0       0
 17348 ;;Total ram usage:       32 bytes
 17349 ;; Hardware stack levels used:    1
 17350 ;; Hardware stack levels required when called:    6
 17351 ;; This function calls:
 17352 ;;		_sendCANFrame
 17353 ;; This function is called by:
 17354 ;;		_doModeVerbose
 17355 ;;		_readRegister
 17356 ;;		_readRegisterExtended
 17357 ;;		_writeRegisterExtended
 17358 ;; This function uses a non-reentrant model
 17359 ;;
 17360                           
 17361                           	psect	text34
 17362  004AB6                     __ptext34:
 17363                           	opt stack 0
 17364  004AB6                     _sendVSCPFrame:
 17365                           	opt stack 21
 17366                           
 17367                           ; BSR set to: 0
 17368                           ;main.c: 2929: uint32_t id = ((uint32_t) priority << 26) |
 17369                           ;main.c: 2930: ((uint32_t) vscpclass << 16) |
 17370                           ;main.c: 2931: ((uint32_t) vscptype << 8) |
 17371                           ;main.c: 2932: nodeid;
 17372                           
 17373                           ;incstack = 0
 17374                           ;incstack = 0
 17375  004AB6  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17376  004ABA  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17377  004ABC  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17378  004ABE  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17379  004AC0  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17380  004AC4  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17381  004AC8  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17382  004ACC  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17383  004ACE  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17384  004AD0  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17385  004AD2  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17386  004AD4  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17387  004AD6  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17388  004AD8  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17389  004ADA  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17390  004ADE  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17391  004AE2  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17392  004AE4  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17393  004AE6  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17394  004AEA  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17395  004AEC  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17396  004AEE  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17397  004AF0  0E1A               	movlw	26
 17398  004AF2                     u14405:
 17399  004AF2  90D8               	bcf	status,0,c
 17400  004AF4  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17401  004AF6  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17402  004AF8  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17403  004AFA  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17404  004AFC  2EE8               	decfsz	wreg,f,c
 17405  004AFE  D7F9               	goto	u14405
 17406  004B00  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17407  004B02  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17408  004B04  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17409  004B06  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17410  004B08  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17411  004B0A  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17412  004B0C  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17413  004B0E  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17414  004B10  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17415  004B12  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17416  004B14  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17417  004B16  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17418  004B18  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17419  004B1A  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17420  004B1C  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17421  004B1E  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17422  004B20  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17423  004B22  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17424  004B24  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17425  004B26  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17426  004B28  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17427  004B2A  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17428  004B2C  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17429  004B2E  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17430  004B30  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17431  004B32  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17432  004B34  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17433  004B36  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17434  004B38  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17435  004B3A  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17436  004B3C  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17437  004B3E  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17438  004B40  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17439                           
 17440                           ; BSR set to: 0
 17441                           ;main.c: 2934: if (!sendCANFrame(id, size, pData)) {
 17442  004B42  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17443  004B46  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17444  004B4A  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17445  004B4E  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17446  004B52  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17447  004B56  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17448  004B5A  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17449  004B5E  EC14  F02D         	call	_sendCANFrame	;wreg free
 17450  004B62  0900               	iorlw	0
 17451                           
 17452                           ; BSR set to: 0
 17453                           ;main.c: 2936: return 0;
 17454  004B64  0E00               	movlw	0
 17455  004B66  A4D8               	btfss	status,2,c
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;main.c: 2937: }
 17459                           ;main.c: 2939: return 1;
 17460  004B68  0E01               	movlw	1
 17461                           
 17462                           ; BSR set to: 0
 17463  004B6A  0012               	return	
 17464  004B6C                     __end_of_sendVSCPFrame:
 17465                           	opt stack 0
 17466                           tblptru	equ	0xFF8
 17467                           tblptrh	equ	0xFF7
 17468                           tblptrl	equ	0xFF6
 17469                           tablat	equ	0xFF5
 17470                           prodh	equ	0xFF4
 17471                           prodl	equ	0xFF3
 17472                           intcon	equ	0xFF2
 17473                           indf0	equ	0xFEF
 17474                           postinc0	equ	0xFEE
 17475                           fsr0h	equ	0xFEA
 17476                           fsr0l	equ	0xFE9
 17477                           wreg	equ	0xFE8
 17478                           indf1	equ	0xFE7
 17479                           postinc1	equ	0xFE6
 17480                           postdec1	equ	0xFE5
 17481                           fsr1h	equ	0xFE2
 17482                           fsr1l	equ	0xFE1
 17483                           indf2	equ	0xFDF
 17484                           postinc2	equ	0xFDE
 17485                           postdec2	equ	0xFDD
 17486                           plusw2	equ	0xFDB
 17487                           fsr2h	equ	0xFDA
 17488                           fsr2l	equ	0xFD9
 17489                           status	equ	0xFD8
 17490                           
 17491 ;; *************** function _sendCANFrame *****************
 17492 ;; Defined at:
 17493 ;;		line 2974 in file "main.c"
 17494 ;; Parameters:    Size  Location     Type
 17495 ;;  id              4   47[BANK0 ] unsigned long 
 17496 ;;  dlc             1   51[BANK0 ] unsigned char 
 17497 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17498 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17499 ;; Auto vars:     Size  Location     Type
 17500 ;;		None
 17501 ;; Return value:  Size  Location     Type
 17502 ;;                  1    wreg      unsigned char 
 17503 ;; Registers used:
 17504 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17505 ;; Tracked objects:
 17506 ;;		On entry : F/0
 17507 ;;		On exit  : F/0
 17508 ;;		Unchanged: 0/0
 17509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17510 ;;      Params:         0       7       0       0       0       0       0
 17511 ;;      Locals:         0       0       0       0       0       0       0
 17512 ;;      Temps:          0       0       0       0       0       0       0
 17513 ;;      Totals:         0       7       0       0       0       0       0
 17514 ;;Total ram usage:        7 bytes
 17515 ;; Hardware stack levels used:    1
 17516 ;; Hardware stack levels required when called:    5
 17517 ;; This function calls:
 17518 ;;		_ECANSendMessage
 17519 ;; This function is called by:
 17520 ;;		_doModeSLCAN
 17521 ;;		_receiveVSCPModeCanalMsg
 17522 ;;		_sendVSCPFrame
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           	psect	text35
 17527  005A28                     __ptext35:
 17528                           	opt stack 0
 17529  005A28                     _sendCANFrame:
 17530                           	opt stack 24
 17531                           
 17532                           ; BSR set to: 0
 17533                           ;main.c: 2975: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;incstack = 0
 17537                           ;incstack = 0
 17538  005A28  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17539  005A2C  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17540  005A30  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17541  005A34  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17542  005A38  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17543  005A3C  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17544  005A40  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17545  005A44  0E20               	movlw	32
 17546  005A46  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17547  005A48  EC4A  F01C         	call	_ECANSendMessage	;wreg free
 17548  005A4C  0900               	iorlw	0
 17549  005A4E  E106               	bnz	l12697
 17550                           
 17551                           ; BSR set to: 0
 17552                           ;main.c: 2977: can_transmitOverruns++;
 17553  005A50  2A2B               	incf	_can_transmitOverruns,f,c
 17554  005A52  0E00               	movlw	0
 17555  005A54  222C               	addwfc	_can_transmitOverruns+1,f,c
 17556  005A56  222D               	addwfc	_can_transmitOverruns+2,f,c
 17557  005A58  222E               	addwfc	_can_transmitOverruns+3,f,c
 17558                           
 17559                           ; BSR set to: 0
 17560                           ;main.c: 2978: return 0;
 17561  005A5A  D001               	goto	l1265
 17562  005A5C                     l12697:
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;main.c: 2979: }
 17566                           ;main.c: 2981: return 1;
 17567  005A5C  0E01               	movlw	1
 17568  005A5E                     l1265:
 17569                           
 17570                           ; BSR set to: 0
 17571  005A5E  0012               	return	
 17572  005A60                     __end_of_sendCANFrame:
 17573                           	opt stack 0
 17574                           tblptru	equ	0xFF8
 17575                           tblptrh	equ	0xFF7
 17576                           tblptrl	equ	0xFF6
 17577                           tablat	equ	0xFF5
 17578                           prodh	equ	0xFF4
 17579                           prodl	equ	0xFF3
 17580                           intcon	equ	0xFF2
 17581                           indf0	equ	0xFEF
 17582                           postinc0	equ	0xFEE
 17583                           fsr0h	equ	0xFEA
 17584                           fsr0l	equ	0xFE9
 17585                           wreg	equ	0xFE8
 17586                           indf1	equ	0xFE7
 17587                           postinc1	equ	0xFE6
 17588                           postdec1	equ	0xFE5
 17589                           fsr1h	equ	0xFE2
 17590                           fsr1l	equ	0xFE1
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           plusw2	equ	0xFDB
 17595                           fsr2h	equ	0xFDA
 17596                           fsr2l	equ	0xFD9
 17597                           status	equ	0xFD8
 17598                           
 17599 ;; *************** function _ECANSendMessage *****************
 17600 ;; Defined at:
 17601 ;;		line 617 in file "ECAN.c"
 17602 ;; Parameters:    Size  Location     Type
 17603 ;;  id              4   10[BANK0 ] unsigned long 
 17604 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17605 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17606 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17607 ;;  msgFlags        1   17[BANK0 ] enum E16306
 17608 ;; Auto vars:     Size  Location     Type
 17609 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17610 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17611 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17612 ;;		 -> B0CON(1), 
 17613 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17614 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17615 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17616 ;;		 -> B0CON(1), 
 17617 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17618 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17619 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17620 ;;		 -> B0CON(1), 
 17621 ;;  i               1   44[BANK0 ] unsigned char 
 17622 ;;  temp            1   43[BANK0 ] unsigned char 
 17623 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17624 ;;  j               1   39[BANK0 ] unsigned char 
 17625 ;;  buffers         1   38[BANK0 ] unsigned char 
 17626 ;;  mode            1   37[BANK0 ] unsigned char 
 17627 ;; Return value:  Size  Location     Type
 17628 ;;                  1    wreg      enum E15660
 17629 ;; Registers used:
 17630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17631 ;; Tracked objects:
 17632 ;;		On entry : F/0
 17633 ;;		On exit  : F/0
 17634 ;;		Unchanged: 0/0
 17635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17636 ;;      Params:         0       8       0       0       0       0       0
 17637 ;;      Locals:         0      28       0       0       0       0       0
 17638 ;;      Temps:          0       1       0       0       0       0       0
 17639 ;;      Totals:         0      37       0       0       0       0       0
 17640 ;;Total ram usage:       37 bytes
 17641 ;; Hardware stack levels used:    1
 17642 ;; Hardware stack levels required when called:    4
 17643 ;; This function calls:
 17644 ;;		__CANIDToRegs
 17645 ;; This function is called by:
 17646 ;;		_sendCANFrame
 17647 ;; This function uses a non-reentrant model
 17648 ;;
 17649                           
 17650                           	psect	text36
 17651  003894                     __ptext36:
 17652                           	opt stack 0
 17653  003894                     _ECANSendMessage:
 17654                           	opt stack 24
 17655                           
 17656                           ; BSR set to: 0
 17657                           ;ECAN.c: 619: BYTE mode;
 17658                           ;ECAN.c: 620: BYTE buffers;
 17659                           ;ECAN.c: 628: BYTE i,j;
 17660                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17661                           ;ECAN.c: 630: BYTE* pb[9];
 17662                           ;ECAN.c: 631: BYTE temp;
 17663                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17664                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17665                           
 17666                           ; BSR set to: 0
 17667                           ;incstack = 0
 17668                           ;incstack = 0
 17669  003894  0E0F               	movlw	15	;volatile
 17670  003896  0100               	movlb	0	; () banked
 17671  003898  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17672  00389A  0E40               	movlw	64	;volatile
 17673  00389C  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17674                           
 17675                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17676  00389E  0E0F               	movlw	15	;volatile
 17677  0038A0  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17678  0038A2  0E30               	movlw	48	;volatile
 17679  0038A4  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17680                           
 17681                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17682  0038A6  0E0F               	movlw	15	;volatile
 17683  0038A8  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17684  0038AA  0E20               	movlw	32	;volatile
 17685  0038AC  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17686                           
 17687                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17688  0038AE  0E0E               	movlw	14	;volatile
 17689  0038B0  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17690  0038B2  0E20               	movlw	32	;volatile
 17691  0038B4  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17692                           
 17693                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17694  0038B6  0E0E               	movlw	14	;volatile
 17695  0038B8  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17696  0038BA  0E30               	movlw	48	;volatile
 17697  0038BC  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17698                           
 17699                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17700  0038BE  0E0E               	movlw	14	;volatile
 17701  0038C0  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17702  0038C2  0E40               	movlw	64	;volatile
 17703  0038C4  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17704                           
 17705                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17706  0038C6  0E0E               	movlw	14	;volatile
 17707  0038C8  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17708  0038CA  0E50               	movlw	80	;volatile
 17709  0038CC  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17710                           
 17711                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17712  0038CE  0E0E               	movlw	14	;volatile
 17713  0038D0  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17714  0038D2  0E60               	movlw	96	;volatile
 17715  0038D4  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17716                           
 17717                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17718  0038D6  0E0E               	movlw	14	;volatile
 17719  0038D8  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17720  0038DA  0E70               	movlw	112	;volatile
 17721  0038DC  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17725  0038DE  5077               	movf	3959,w,c	;volatile
 17726  0038E0  0BC0               	andlw	192
 17727  0038E2  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;ECAN.c: 660: if ( mode == 0x00 )
 17731  0038E4  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17732  0038E6  D002               	goto	l12869
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;ECAN.c: 661: buffers = 2;
 17736  0038E8  0E02               	movlw	2
 17737  0038EA  D001               	goto	L16
 17738  0038EC                     l12869:
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;ECAN.c: 662: else
 17742                           ;ECAN.c: 663: buffers = 8;
 17743  0038EC  0E08               	movlw	8
 17744  0038EE                     L16:
 17745  0038EE  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17746                           
 17747                           ; BSR set to: 0
 17748                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17749  0038F0  010D               	movlb	13	; () banked
 17750  0038F2  90D8               	bcf	status,0,c
 17751  0038F4  31F8               	rrcf	248,w,b	;volatile
 17752  0038F6  0100               	movlb	0	; () banked
 17753  0038F8  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17757  0038FA  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17758  0038FC  D07D               	goto	l12929
 17759  0038FE                     l12875:
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;ECAN.c: 688: {
 17763                           ;ECAN.c: 693: ptr = pb[i];
 17764  0038FE  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17765  003900  0D02               	mullw	2
 17766  003902  50F3               	movf	prodl,w,c
 17767  003904  0F73               	addlw	low ECANSendMessage@pb
 17768  003906  6ED9               	movwf	fsr2l,c
 17769  003908  6ADA               	clrf	fsr2h,c
 17770  00390A  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17771  00390E  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17772                           
 17773                           ; BSR set to: 0
 17774                           ;ECAN.c: 694: tempPtr = ptr;
 17775  003912  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17776  003916  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17777                           
 17778                           ; BSR set to: 0
 17779                           ;ECAN.c: 702: if ( i > 2 )
 17780  00391A  0E02               	movlw	2
 17781  00391C  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17782  00391E  D004               	goto	l12887
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;ECAN.c: 703: {
 17786                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17787  003920  90D8               	bcf	status,0,c
 17788  003922  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17792  003924  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17793  003926  D067               	goto	l12927
 17794  003928                     l12887:
 17795                           
 17796                           ; BSR set to: 0
 17797                           ;ECAN.c: 714: }
 17798                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17799  003928  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17800  00392C  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17801  003930  50DF               	movf	indf2,w,c
 17802  003932  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17803  003934  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17804  003936  D05F               	goto	l12927
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;ECAN.c: 721: {
 17808                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17809  003938  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17810  00393C  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17811  003940  0EFC               	movlw	252
 17812  003942  16DF               	andwf	indf2,f,c
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17816  003944  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17817  003948  0E03               	movlw	3
 17818  00394A  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17819  00394C  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17820  003950  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17821  003954  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17822  003956  12DF               	iorwf	indf2,f,c
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17826  003958  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17827  00395A  D004               	goto	l1432
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17831  00395C  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17832  00395E  0940               	iorlw	64
 17833  003960  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17834  003962  D002               	goto	l12897
 17835  003964                     l1432:
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;ECAN.c: 729: else
 17839                           ;ECAN.c: 730: temp = dataLen;
 17840  003964  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17841  003968                     l12897:
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;ECAN.c: 732: *(ptr+5) = temp;
 17845  003968  EE20 F005          	lfsr	2,5
 17846  00396C  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17847  00396E  26D9               	addwf	fsr2l,f,c
 17848  003970  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17849  003972  22DA               	addwfc	fsr2h,f,c
 17850  003974  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17854  003978  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17855  00397A  D003               	goto	l1434
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;ECAN.c: 736: temp = 1;
 17859  00397C  0E01               	movlw	1
 17860  00397E  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17861  003980  D001               	goto	l12903
 17862  003982                     l1434:
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;ECAN.c: 738: else
 17866                           ;ECAN.c: 739: temp = 0;
 17867  003982  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17868  003984                     l12903:
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17872  003984  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17873  003986  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17874  003988  0E00               	movlw	0
 17875  00398A  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17876  00398C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17877  00398E  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17878  003992  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17879  003996  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17880  00399A  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17881  00399E  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17882  0039A2  ECBC  F01E         	call	__CANIDToRegs	;wreg free
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;ECAN.c: 745: ptr += 6;
 17886  0039A6  0E06               	movlw	6
 17887  0039A8  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17888  0039AA  0E00               	movlw	0
 17889  0039AC  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17893  0039AE  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17894  0039B0  D00F               	goto	l12917
 17895  0039B2                     l12909:
 17896                           
 17897                           ; BSR set to: 0
 17898                           ;ECAN.c: 748: *ptr++ = *data++;
 17899  0039B2  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17900  0039B6  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17901  0039BA  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17902  0039BE  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17903  0039C2  CFDF FFE7          	movff	indf2,indf1
 17904                           
 17905                           ; BSR set to: 0
 17906  0039C6  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17907  0039C8  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17908                           
 17909                           ; BSR set to: 0
 17910  0039CA  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17911  0039CC  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17912                           
 17913                           ; BSR set to: 0
 17914  0039CE  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17915  0039D0                     l12917:
 17916                           
 17917                           ; BSR set to: 0
 17918  0039D0  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17919  0039D2  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17920  0039D4  E3EE               	bnc	l12909
 17921                           
 17922                           ; BSR set to: 0
 17923                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17924  0039D6  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17925  0039DA  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17926  0039DE  50DF               	movf	indf2,w,c
 17927  0039E0  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17928  0039E2  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17929  0039E4  D006               	goto	l12923
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17933  0039E6  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17934  0039EA  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17935  0039EE  0E00               	movlw	0
 17936  0039F0  86DB               	bsf	plusw2,3,c
 17937  0039F2                     l12923:
 17938                           
 17939                           ; BSR set to: 0
 17940                           ;ECAN.c: 755: return TRUE;
 17941  0039F2  0E01               	movlw	1
 17942  0039F4  D005               	goto	l1440
 17943  0039F6                     l12927:
 17944                           
 17945                           ; BSR set to: 0
 17946  0039F6  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17947  0039F8                     l12929:
 17948                           
 17949                           ; BSR set to: 0
 17950  0039F8  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17951  0039FA  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17952  0039FC  E380               	bnc	l12875
 17953                           
 17954                           ; BSR set to: 0
 17955                           ;ECAN.c: 756: }
 17956                           ;ECAN.c: 757: }
 17957                           ;ECAN.c: 760: return FALSE;
 17958  0039FE  0E00               	movlw	0
 17959  003A00                     l1440:
 17960                           
 17961                           ; BSR set to: 0
 17962  003A00  0012               	return	
 17963  003A02                     __end_of_ECANSendMessage:
 17964                           	opt stack 0
 17965                           tblptru	equ	0xFF8
 17966                           tblptrh	equ	0xFF7
 17967                           tblptrl	equ	0xFF6
 17968                           tablat	equ	0xFF5
 17969                           prodh	equ	0xFF4
 17970                           prodl	equ	0xFF3
 17971                           intcon	equ	0xFF2
 17972                           indf0	equ	0xFEF
 17973                           postinc0	equ	0xFEE
 17974                           fsr0h	equ	0xFEA
 17975                           fsr0l	equ	0xFE9
 17976                           wreg	equ	0xFE8
 17977                           indf1	equ	0xFE7
 17978                           postinc1	equ	0xFE6
 17979                           postdec1	equ	0xFE5
 17980                           fsr1h	equ	0xFE2
 17981                           fsr1l	equ	0xFE1
 17982                           indf2	equ	0xFDF
 17983                           postinc2	equ	0xFDE
 17984                           postdec2	equ	0xFDD
 17985                           plusw2	equ	0xFDB
 17986                           fsr2h	equ	0xFDA
 17987                           fsr2l	equ	0xFD9
 17988                           status	equ	0xFD8
 17989                           
 17990 ;; *************** function __CANIDToRegs *****************
 17991 ;; Defined at:
 17992 ;;		line 1101 in file "ECAN.c"
 17993 ;; Parameters:    Size  Location     Type
 17994 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17995 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17996 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17997 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17998 ;;  val             4    2[BANK0 ] unsigned long 
 17999 ;;  type            1    6[BANK0 ] unsigned char 
 18000 ;; Auto vars:     Size  Location     Type
 18001 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 18002 ;;		 -> _CANIDToRegs@val(4), 
 18003 ;; Return value:  Size  Location     Type
 18004 ;;		None               void
 18005 ;; Registers used:
 18006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 18007 ;; Tracked objects:
 18008 ;;		On entry : F/0
 18009 ;;		On exit  : F/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18012 ;;      Params:         0       7       0       0       0       0       0
 18013 ;;      Locals:         0       1       0       0       0       0       0
 18014 ;;      Temps:          0       2       0       0       0       0       0
 18015 ;;      Totals:         0      10       0       0       0       0       0
 18016 ;;Total ram usage:       10 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; Hardware stack levels required when called:    3
 18019 ;; This function calls:
 18020 ;;		Nothing
 18021 ;; This function is called by:
 18022 ;;		_doModeVerbose
 18023 ;;		_ECANSendMessage
 18024 ;; This function uses a non-reentrant model
 18025 ;;
 18026                           
 18027                           	psect	text37
 18028  003D78                     __ptext37:
 18029                           	opt stack 0
 18030  003D78                     __CANIDToRegs:
 18031                           	opt stack 24
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18035                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18036                           
 18037                           ; BSR set to: 0
 18038                           ;incstack = 0
 18039                           ;incstack = 0
 18040  003D78  0E62               	movlw	low __CANIDToRegs@val
 18041  003D7A  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;ECAN.c: 1106: if ( type == 0 )
 18045  003D7C  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18046  003D7E  D022               	goto	l12255
 18047                           
 18048                           ; BSR set to: 0
 18049                           ;ECAN.c: 1107: {
 18050                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18051  003D80  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18052  003D82  6ED9               	movwf	fsr2l,c
 18053  003D84  6ADA               	clrf	fsr2h,c
 18054  003D86  50DF               	movf	indf2,w,c
 18055  003D88  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18056  003D8A  90D8               	bcf	status,0,c
 18057  003D8C  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18058  003D8E  90D8               	bcf	status,0,c
 18059  003D90  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18060  003D92  90D8               	bcf	status,0,c
 18061  003D94  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18062                           
 18063                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18064  003D96  D858               	call	PL56	;call to abstracted procedure
 18065  003D98  2AD9               	incf	fsr2l,f,c
 18066  003D9A  6ADA               	clrf	fsr2h,c
 18067  003D9C  D871               	call	PL112	;call to abstracted procedure
 18068  003D9E                     u15665:
 18069  003D9E  90D8               	bcf	status,0,c
 18070  003DA0  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18071  003DA2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18072  003DA4  D7FC               	goto	u15665
 18073  003DA6  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18074                           
 18075                           ; BSR set to: 0
 18076                           ;ECAN.c: 1111: ptr++;
 18077                           
 18078                           ; BSR set to: 0
 18079                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18080  003DAA  D844               	call	PL30	;call to abstracted procedure
 18081  003DAC  D869               	call	PL112	;call to abstracted procedure
 18082  003DAE                     u15675:
 18083  003DAE  90D8               	bcf	status,0,c
 18084  003DB0  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18085  003DB2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18086  003DB4  D7FC               	goto	u15675
 18087  003DB6  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18088  003DB8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18089  003DBC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18090  003DC0  6EDF               	movwf	indf2,c
 18091                           
 18092                           ;ECAN.c: 1113: }
 18093  003DC2  D037               	goto	l1494
 18094  003DC4                     l12255:
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;ECAN.c: 1114: else
 18098                           ;ECAN.c: 1115: {
 18099                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18100  003DC4  D854               	call	PL86	;call to abstracted procedure
 18101  003DC6  0E05               	movlw	5
 18102  003DC8  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18103  003DCA                     u15685:
 18104  003DCA  90D8               	bcf	status,0,c
 18105  003DCC  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18106  003DCE  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18107  003DD0  D7FC               	goto	u15685
 18108  003DD2  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18109                           
 18110                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18111  003DD4  D839               	call	PL56	;call to abstracted procedure
 18112  003DD6  0E03               	movlw	3
 18113  003DD8  D840               	call	PL80	;call to abstracted procedure
 18114  003DDA  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18115  003DDC  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18116                           
 18117                           ; BSR set to: 0
 18118                           ;ECAN.c: 1119: ptr++;
 18119                           
 18120                           ; BSR set to: 0
 18121                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18122  003DE0  D829               	call	PL30	;call to abstracted procedure
 18123  003DE2  0E02               	movlw	2
 18124  003DE4  D83A               	call	PL80	;call to abstracted procedure
 18125  003DE6  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18126  003DE8  0BE0               	andlw	224
 18127  003DEA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18128  003DEE  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18129  003DF2  6EDF               	movwf	indf2,c
 18130                           
 18131                           ; BSR set to: 0
 18132                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18133  003DF4  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18134  003DF8  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18135  003DFC  0E00               	movlw	0
 18136  003DFE  86DB               	bsf	plusw2,3,c
 18137                           
 18138                           ; BSR set to: 0
 18139                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18140  003E00  D836               	call	PL86	;call to abstracted procedure
 18141  003E02  0E03               	movlw	3
 18142  003E04  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18143  003E06  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18144                           
 18145                           ;ECAN.c: 1124: ptr++;
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18149  003E0A  D814               	call	PL30	;call to abstracted procedure
 18150  003E0C  2AD9               	incf	fsr2l,f,c
 18151  003E0E  6ADA               	clrf	fsr2h,c
 18152  003E10  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18153  003E14  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18154  003E18  CFDF FFE7          	movff	indf2,indf1
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;ECAN.c: 1126: ptr++;
 18158  003E1C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18159  003E1E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18160                           
 18161                           ; BSR set to: 0
 18162                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18163  003E20  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18164  003E22  6ED9               	movwf	fsr2l,c
 18165  003E24  6ADA               	clrf	fsr2h,c
 18166  003E26  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18167  003E2A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18168  003E2E  CFDF FFE7          	movff	indf2,indf1
 18169  003E32                     l1494:
 18170                           
 18171                           ; BSR set to: 0
 18172  003E32  0012               	return	
 18173  003E34                     __end_of__CANIDToRegs:
 18174                           	opt stack 0
 18175  003E34                     PL30:
 18176                           	opt stack 24
 18177  003E34  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18178  003E38  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18179  003E3A  12DF               	iorwf	indf2,f,c
 18180  003E3C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18181  003E3E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18182  003E40  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18183  003E42  6ED9               	movwf	fsr2l,c
 18184  003E44  6ADA               	clrf	fsr2h,c
 18185  003E46  0012               	return	
 18186  003E48                     __end_ofPL30:
 18187                           	opt stack 0
 18188  003E48                     PL56:
 18189                           	opt stack 24
 18190  003E48  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18191  003E4C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18192  003E50  6EDF               	movwf	indf2,c
 18193  003E52  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18194  003E54  6ED9               	movwf	fsr2l,c
 18195  003E56  6ADA               	clrf	fsr2h,c
 18196  003E58  0012               	return	
 18197  003E5A                     __end_ofPL56:
 18198                           	opt stack 0
 18199  003E5A                     PL80:
 18200                           	opt stack 24
 18201  003E5A  26D9               	addwf	fsr2l,f,c
 18202  003E5C  6ADA               	clrf	fsr2h,c
 18203  003E5E  50DF               	movf	indf2,w,c
 18204  003E60  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18205  003E62  90D8               	bcf	status,0,c
 18206  003E64  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18207  003E66  90D8               	bcf	status,0,c
 18208  003E68  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18209  003E6A  90D8               	bcf	status,0,c
 18210  003E6C  0012               	return	
 18211  003E6E                     __end_ofPL80:
 18212                           	opt stack 0
 18213  003E6E                     PL86:
 18214                           	opt stack 24
 18215  003E6E  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18216  003E70  6ED9               	movwf	fsr2l,c
 18217  003E72  6ADA               	clrf	fsr2h,c
 18218  003E74  0E02               	movlw	2
 18219  003E76  26D9               	addwf	fsr2l,f,c
 18220  003E78  6ADA               	clrf	fsr2h,c
 18221  003E7A  50DF               	movf	indf2,w,c
 18222  003E7C  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18223  003E7E  0012               	return	
 18224  003E80                     __end_ofPL86:
 18225                           	opt stack 0
 18226  003E80                     PL112:
 18227                           	opt stack 24
 18228  003E80  50DF               	movf	indf2,w,c
 18229  003E82  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18230  003E84  0E05               	movlw	5
 18231  003E86  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18232  003E88  0C05               	retlw	5
 18233  003E8A                     __end_ofPL112:
 18234                           	opt stack 0
 18235                           tblptru	equ	0xFF8
 18236                           tblptrh	equ	0xFF7
 18237                           tblptrl	equ	0xFF6
 18238                           tablat	equ	0xFF5
 18239                           prodh	equ	0xFF4
 18240                           prodl	equ	0xFF3
 18241                           intcon	equ	0xFF2
 18242                           indf0	equ	0xFEF
 18243                           postinc0	equ	0xFEE
 18244                           fsr0h	equ	0xFEA
 18245                           fsr0l	equ	0xFE9
 18246                           wreg	equ	0xFE8
 18247                           indf1	equ	0xFE7
 18248                           postinc1	equ	0xFE6
 18249                           postdec1	equ	0xFE5
 18250                           fsr1h	equ	0xFE2
 18251                           fsr1l	equ	0xFE1
 18252                           indf2	equ	0xFDF
 18253                           postinc2	equ	0xFDE
 18254                           postdec2	equ	0xFDD
 18255                           plusw2	equ	0xFDB
 18256                           fsr2h	equ	0xFDA
 18257                           fsr2l	equ	0xFD9
 18258                           status	equ	0xFD8
 18259                           
 18260 ;; *************** function _memset *****************
 18261 ;; Defined at:
 18262 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  p1              2    0[BANK0 ] PTR void 
 18265 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18266 ;;  c               2    2[BANK0 ] int 
 18267 ;;  n               2    4[BANK0 ] unsigned int 
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18270 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18271 ;; Return value:  Size  Location     Type
 18272 ;;                  2    0[BANK0 ] PTR void 
 18273 ;; Registers used:
 18274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18275 ;; Tracked objects:
 18276 ;;		On entry : F/0
 18277 ;;		On exit  : F/0
 18278 ;;		Unchanged: 0/0
 18279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18280 ;;      Params:         0       6       0       0       0       0       0
 18281 ;;      Locals:         0       2       0       0       0       0       0
 18282 ;;      Temps:          0       0       0       0       0       0       0
 18283 ;;      Totals:         0       8       0       0       0       0       0
 18284 ;;Total ram usage:        8 bytes
 18285 ;; Hardware stack levels used:    1
 18286 ;; Hardware stack levels required when called:    3
 18287 ;; This function calls:
 18288 ;;		Nothing
 18289 ;; This function is called by:
 18290 ;;		_doModeVerbose
 18291 ;;		_doModeSLCAN
 18292 ;;		_printGUID
 18293 ;;		_printMDF
 18294 ;;		_printNodeFirmwareVersion
 18295 ;; This function uses a non-reentrant model
 18296 ;;
 18297                           
 18298                           	psect	text38
 18299  005B92                     __ptext38:
 18300                           	opt stack 0
 18301  005B92                     _memset:
 18302                           	opt stack 26
 18303                           
 18304                           ; BSR set to: 0
 18305                           
 18306                           ; BSR set to: 0
 18307                           ;incstack = 0
 18308                           ;incstack = 0
 18309  005B92  C060  F066         	movff	memset@p1,memset@p
 18310  005B96  C061  F067         	movff	memset@p1+1,memset@p+1
 18311  005B9A  D008               	goto	l11457
 18312  005B9C                     l11453:
 18313                           
 18314                           ; BSR set to: 0
 18315  005B9C  C066  FFD9         	movff	memset@p,fsr2l
 18316  005BA0  C067  FFDA         	movff	memset@p+1,fsr2h
 18317  005BA4  C062  FFDF         	movff	memset@c,indf2
 18318                           
 18319                           ; BSR set to: 0
 18320  005BA8  4B66               	infsnz	memset@p& (0+255),f,b
 18321  005BAA  2B67               	incf	(memset@p+1)& (0+255),f,b
 18322  005BAC                     l11457:
 18323                           
 18324                           ; BSR set to: 0
 18325  005BAC  0764               	decf	memset@n& (0+255),f,b
 18326  005BAE  A0D8               	btfss	status,0,c
 18327  005BB0  0765               	decf	(memset@n+1)& (0+255),f,b
 18328  005BB2  0100               	movlb	0	; () banked
 18329  005BB4  2964               	incf	memset@n& (0+255),w,b
 18330  005BB6  B4D8               	btfsc	status,2,c
 18331  005BB8  2965               	incf	(memset@n+1)& (0+255),w,b
 18332  005BBA  B4D8               	btfsc	status,2,c
 18333                           
 18334                           ; BSR set to: 0
 18335  005BBC  0012               	return	
 18336  005BBE  D7EE               	goto	l11453
 18337  005BC0                     __end_of_memset:
 18338                           	opt stack 0
 18339                           tblptru	equ	0xFF8
 18340                           tblptrh	equ	0xFF7
 18341                           tblptrl	equ	0xFF6
 18342                           tablat	equ	0xFF5
 18343                           prodh	equ	0xFF4
 18344                           prodl	equ	0xFF3
 18345                           intcon	equ	0xFF2
 18346                           indf0	equ	0xFEF
 18347                           postinc0	equ	0xFEE
 18348                           fsr0h	equ	0xFEA
 18349                           fsr0l	equ	0xFE9
 18350                           wreg	equ	0xFE8
 18351                           indf1	equ	0xFE7
 18352                           postinc1	equ	0xFE6
 18353                           postdec1	equ	0xFE5
 18354                           fsr1h	equ	0xFE2
 18355                           fsr1l	equ	0xFE1
 18356                           indf2	equ	0xFDF
 18357                           postinc2	equ	0xFDE
 18358                           postdec2	equ	0xFDD
 18359                           plusw2	equ	0xFDB
 18360                           fsr2h	equ	0xFDA
 18361                           fsr2l	equ	0xFD9
 18362                           status	equ	0xFD8
 18363                           
 18364 ;; *************** function _printHelp *****************
 18365 ;; Defined at:
 18366 ;;		line 2551 in file "main.c"
 18367 ;; Parameters:    Size  Location     Type
 18368 ;;		None
 18369 ;; Auto vars:     Size  Location     Type
 18370 ;;		None
 18371 ;; Return value:  Size  Location     Type
 18372 ;;		None               void
 18373 ;; Registers used:
 18374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18375 ;; Tracked objects:
 18376 ;;		On entry : F/1
 18377 ;;		On exit  : 0/0
 18378 ;;		Unchanged: 0/0
 18379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18380 ;;      Params:         0       0       0       0       0       0       0
 18381 ;;      Locals:         0       0       0       0       0       0       0
 18382 ;;      Temps:          0       0       0       0       0       0       0
 18383 ;;      Totals:         0       0       0       0       0       0       0
 18384 ;;Total ram usage:        0 bytes
 18385 ;; Hardware stack levels used:    1
 18386 ;; Hardware stack levels required when called:    5
 18387 ;; This function calls:
 18388 ;;		_putsUSART
 18389 ;; This function is called by:
 18390 ;;		_doModeVerbose
 18391 ;; This function uses a non-reentrant model
 18392 ;;
 18393                           
 18394                           	psect	text39
 18395  002F00                     __ptext39:
 18396                           	opt stack 0
 18397  002F00                     _printHelp:
 18398                           	opt stack 24
 18399                           
 18400                           ; BSR set to: 1
 18401                           ;main.c: 2552: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18402                           
 18403                           ; BSR set to: 0
 18404                           ;incstack = 0
 18405                           ;incstack = 0
 18406  002F00  0E78               	movlw	high STR_206
 18407  002F02  0100               	movlb	0	; () banked
 18408  002F04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18409  002F06  0E48               	movlw	low STR_206
 18410  002F08  6F61               	movwf	?_putsUSART& (0+255),b
 18411  002F0A  EC4F  F02B         	call	_putsUSART	;wreg free
 18412                           
 18413                           ;main.c: 2553: putsUSART((char *) "------------------------------------\r\n");
 18414  002F0E  0E71               	movlw	high (STR_238+28)
 18415  002F10  0100               	movlb	0	; () banked
 18416  002F12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18417  002F14  0E6F               	movlw	low (STR_238+28)
 18418  002F16  6F61               	movwf	?_putsUSART& (0+255),b
 18419  002F18  EC4F  F02B         	call	_putsUSART	;wreg free
 18420                           
 18421                           ;main.c: 2554: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18422  002F1C  0E7B               	movlw	high STR_208
 18423  002F1E  0100               	movlb	0	; () banked
 18424  002F20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18425  002F22  0E63               	movlw	low STR_208
 18426  002F24  6F61               	movwf	?_putsUSART& (0+255),b
 18427  002F26  EC4F  F02B         	call	_putsUSART	;wreg free
 18428                           
 18429                           ;main.c: 2555: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18430  002F2A  0E76               	movlw	high STR_209
 18431  002F2C  0100               	movlb	0	; () banked
 18432  002F2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18433  002F30  0ED7               	movlw	low STR_209
 18434  002F32  6F61               	movwf	?_putsUSART& (0+255),b
 18435  002F34  EC4F  F02B         	call	_putsUSART	;wreg free
 18436                           
 18437                           ;main.c: 2556: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18438  002F38  0E76               	movlw	high STR_210
 18439  002F3A  0100               	movlb	0	; () banked
 18440  002F3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18441  002F3E  0E7D               	movlw	low STR_210
 18442  002F40  6F61               	movwf	?_putsUSART& (0+255),b
 18443  002F42  EC4F  F02B         	call	_putsUSART	;wreg free
 18444                           
 18445                           ;main.c: 2557: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18446  002F46  0E74               	movlw	high STR_211
 18447  002F48  0100               	movlb	0	; () banked
 18448  002F4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18449  002F4C  0EF6               	movlw	low STR_211
 18450  002F4E  6F61               	movwf	?_putsUSART& (0+255),b
 18451  002F50  EC4F  F02B         	call	_putsUSART	;wreg free
 18452                           
 18453                           ;main.c: 2558: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18454  002F54  0E75               	movlw	high STR_212
 18455  002F56  0100               	movlb	0	; () banked
 18456  002F58  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18457  002F5A  0E5B               	movlw	low STR_212
 18458  002F5C  6F61               	movwf	?_putsUSART& (0+255),b
 18459  002F5E  EC4F  F02B         	call	_putsUSART	;wreg free
 18460                           
 18461                           ;main.c: 2559: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18462  002F62  0E7B               	movlw	high STR_213
 18463  002F64  0100               	movlb	0	; () banked
 18464  002F66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18465  002F68  0E0B               	movlw	low STR_213
 18466  002F6A  6F61               	movwf	?_putsUSART& (0+255),b
 18467  002F6C  EC4F  F02B         	call	_putsUSART	;wreg free
 18468                           
 18469                           ;main.c: 2560: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18470  002F70  0E75               	movlw	high STR_214
 18471  002F72  0100               	movlb	0	; () banked
 18472  002F74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18473  002F76  0E8D               	movlw	low STR_214
 18474  002F78  6F61               	movwf	?_putsUSART& (0+255),b
 18475  002F7A  EC4F  F02B         	call	_putsUSART	;wreg free
 18476                           
 18477                           ;main.c: 2561: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18478  002F7E  0E76               	movlw	high STR_215
 18479  002F80  0100               	movlb	0	; () banked
 18480  002F82  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18481  002F84  0EAB               	movlw	low STR_215
 18482  002F86  6F61               	movwf	?_putsUSART& (0+255),b
 18483  002F88  EC4F  F02B         	call	_putsUSART	;wreg free
 18484                           
 18485                           ;main.c: 2562: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18486  002F8C  0E7C               	movlw	high STR_216
 18487  002F8E  0100               	movlb	0	; () banked
 18488  002F90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18489  002F92  0E00               	movlw	low STR_216
 18490  002F94  6F61               	movwf	?_putsUSART& (0+255),b
 18491  002F96  EC4F  F02B         	call	_putsUSART	;wreg free
 18492                           
 18493                           ;main.c: 2563: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18494  002F9A  0E73               	movlw	high STR_217
 18495  002F9C  0100               	movlb	0	; () banked
 18496  002F9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18497  002FA0  0E0F               	movlw	low STR_217
 18498  002FA2  6F61               	movwf	?_putsUSART& (0+255),b
 18499  002FA4  EC4F  F02B         	call	_putsUSART	;wreg free
 18500                           
 18501                           ;main.c: 2564: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18502  002FA8  0E7C               	movlw	high STR_218
 18503  002FAA  0100               	movlb	0	; () banked
 18504  002FAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18505  002FAE  0EC0               	movlw	low STR_218
 18506  002FB0  6F61               	movwf	?_putsUSART& (0+255),b
 18507  002FB2  EC4F  F02B         	call	_putsUSART	;wreg free
 18508                           
 18509                           ;main.c: 2565: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18510  002FB6  0E7A               	movlw	high STR_219
 18511  002FB8  0100               	movlb	0	; () banked
 18512  002FBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18513  002FBC  0E27               	movlw	low STR_219
 18514  002FBE  6F61               	movwf	?_putsUSART& (0+255),b
 18515  002FC0  EC4F  F02B         	call	_putsUSART	;wreg free
 18516                           
 18517                           ;main.c: 2566: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18518  002FC4  0E78               	movlw	high STR_220
 18519  002FC6  0100               	movlb	0	; () banked
 18520  002FC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18521  002FCA  0E21               	movlw	low STR_220
 18522  002FCC  6F61               	movwf	?_putsUSART& (0+255),b
 18523  002FCE  EC4F  F02B         	call	_putsUSART	;wreg free
 18524                           
 18525                           ;main.c: 2567: putsUSART((char *) "HELP - Display this help information.\r\n");
 18526  002FD2  0E77               	movlw	high STR_221
 18527  002FD4  0100               	movlb	0	; () banked
 18528  002FD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18529  002FD8  0E82               	movlw	low STR_221
 18530  002FDA  6F61               	movwf	?_putsUSART& (0+255),b
 18531  002FDC  EC4F  F02B         	call	_putsUSART	;wreg free
 18532                           
 18533                           ;main.c: 2568: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18534  002FE0  0E76               	movlw	high STR_222
 18535  002FE2  0100               	movlb	0	; () banked
 18536  002FE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18537  002FE6  0E4E               	movlw	low STR_222
 18538  002FE8  6F61               	movwf	?_putsUSART& (0+255),b
 18539  002FEA  EC4F  F02B         	call	_putsUSART	;wreg free
 18540                           
 18541                           ;main.c: 2569: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18542  002FEE  0E71               	movlw	high STR_223
 18543  002FF0  0100               	movlb	0	; () banked
 18544  002FF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18545  002FF4  0E0E               	movlw	low STR_223
 18546  002FF6  6F61               	movwf	?_putsUSART& (0+255),b
 18547  002FF8  EC4F  F02B         	call	_putsUSART	;wreg free
 18548                           
 18549                           ;main.c: 2570: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18550  002FFC  0E71               	movlw	high STR_224
 18551  002FFE  0100               	movlb	0	; () banked
 18552  003000  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18553  003002  0ED9               	movlw	low STR_224
 18554  003004  6F61               	movwf	?_putsUSART& (0+255),b
 18555  003006  EC4F  F02B         	call	_putsUSART	;wreg free
 18556                           
 18557                           ;main.c: 2571: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18558  00300A  0E70               	movlw	high STR_225
 18559  00300C  0100               	movlb	0	; () banked
 18560  00300E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18561  003010  0E7A               	movlw	low STR_225
 18562  003012  6F61               	movwf	?_putsUSART& (0+255),b
 18563  003014  EC4F  F02B         	call	_putsUSART	;wreg free
 18564                           
 18565                           ;main.c: 2572: putsUSART((char *) "FILTER - Set filter .\r\n");
 18566  003018  0E7C               	movlw	high STR_226
 18567  00301A  0100               	movlb	0	; () banked
 18568  00301C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18569  00301E  0E18               	movlw	low STR_226
 18570  003020  6F61               	movwf	?_putsUSART& (0+255),b
 18571  003022  EC4F  F02B         	call	_putsUSART	;wreg free
 18572                           
 18573                           ;main.c: 2573: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18574  003026  0E70               	movlw	high STR_227
 18575  003028  0100               	movlb	0	; () banked
 18576  00302A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18577  00302C  0E2C               	movlw	low STR_227
 18578  00302E  6F61               	movwf	?_putsUSART& (0+255),b
 18579  003030  EC4F  F02B         	call	_putsUSART	;wreg free
 18580                           
 18581                           ;main.c: 2574: putsUSART((char *) "MASK - Set mask .\r\n");
 18582  003034  0E7D               	movlw	high STR_228
 18583  003036  0100               	movlb	0	; () banked
 18584  003038  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18585  00303A  0E46               	movlw	low STR_228
 18586  00303C  6F61               	movwf	?_putsUSART& (0+255),b
 18587  00303E  EC4F  F02B         	call	_putsUSART	;wreg free
 18588                           
 18589                           ;main.c: 2575: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18590  003042  0E70               	movlw	high STR_229
 18591  003044  0100               	movlb	0	; () banked
 18592  003046  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18593  003048  0EC7               	movlw	low STR_229
 18594  00304A  6F61               	movwf	?_putsUSART& (0+255),b
 18595  00304C  EC4F  F02B         	call	_putsUSART	;wreg free
 18596                           
 18597                           ;main.c: 2576: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18598  003050  0E79               	movlw	high STR_230
 18599  003052  0100               	movlb	0	; () banked
 18600  003054  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18601  003056  0EE3               	movlw	low STR_230
 18602  003058  6F61               	movwf	?_putsUSART& (0+255),b
 18603  00305A  EC4F  F02B         	call	_putsUSART	;wreg free
 18604                           
 18605                           ;main.c: 2577: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18606  00305E  0E76               	movlw	high STR_231
 18607  003060  0100               	movlb	0	; () banked
 18608  003062  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18609  003064  0E1F               	movlw	low STR_231
 18610  003066  6F61               	movwf	?_putsUSART& (0+255),b
 18611  003068  EC4F  F02B         	call	_putsUSART	;wreg free
 18612                           
 18613                           ;main.c: 2578: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18614  00306C  0E75               	movlw	high STR_232
 18615  00306E  0100               	movlb	0	; () banked
 18616  003070  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18617  003072  0EF0               	movlw	low STR_232
 18618  003074  6F61               	movwf	?_putsUSART& (0+255),b
 18619  003076  EC4F  F02B         	call	_putsUSART	;wreg free
 18620                           
 18621                           ;main.c: 2579: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18622  00307A  0E71               	movlw	high STR_233
 18623  00307C  0100               	movlb	0	; () banked
 18624  00307E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18625  003080  0E96               	movlw	low STR_233
 18626  003082  6F61               	movwf	?_putsUSART& (0+255),b
 18627  003084  EC4F  F02B         	call	_putsUSART	;wreg free
 18628                           
 18629                           ;main.c: 2580: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18630  003088  0E75               	movlw	high STR_234
 18631  00308A  0100               	movlb	0	; () banked
 18632  00308C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18633  00308E  0EBF               	movlw	low STR_234
 18634  003090  6F61               	movwf	?_putsUSART& (0+255),b
 18635  003092  EC4F  F02B         	call	_putsUSART	;wreg free
 18636                           
 18637                           ;main.c: 2581: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18638  003096  0E73               	movlw	high STR_235
 18639  003098  0100               	movlb	0	; () banked
 18640  00309A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18641  00309C  0E7E               	movlw	low STR_235
 18642  00309E  6F61               	movwf	?_putsUSART& (0+255),b
 18643  0030A0  EC4F  F02B         	call	_putsUSART	;wreg free
 18644                           
 18645                           ;main.c: 2582: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18646  0030A4  0E72               	movlw	high STR_236
 18647  0030A6  0100               	movlb	0	; () banked
 18648  0030A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18649  0030AA  0E5E               	movlw	low STR_236
 18650  0030AC  6F61               	movwf	?_putsUSART& (0+255),b
 18651  0030AE  EC4F  F02B         	call	_putsUSART	;wreg free
 18652                           
 18653                           ;main.c: 2583: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18654  0030B2  0E78               	movlw	high STR_237
 18655  0030B4  0100               	movlb	0	; () banked
 18656  0030B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18657  0030B8  0EBD               	movlw	low STR_237
 18658  0030BA  6F61               	movwf	?_putsUSART& (0+255),b
 18659  0030BC  EF4F  F02B         	goto	_putsUSART	;wreg free
 18660  0030C0                     __end_of_printHelp:
 18661                           	opt stack 0
 18662                           tblptru	equ	0xFF8
 18663                           tblptrh	equ	0xFF7
 18664                           tblptrl	equ	0xFF6
 18665                           tablat	equ	0xFF5
 18666                           prodh	equ	0xFF4
 18667                           prodl	equ	0xFF3
 18668                           intcon	equ	0xFF2
 18669                           indf0	equ	0xFEF
 18670                           postinc0	equ	0xFEE
 18671                           fsr0h	equ	0xFEA
 18672                           fsr0l	equ	0xFE9
 18673                           wreg	equ	0xFE8
 18674                           indf1	equ	0xFE7
 18675                           postinc1	equ	0xFE6
 18676                           postdec1	equ	0xFE5
 18677                           fsr1h	equ	0xFE2
 18678                           fsr1l	equ	0xFE1
 18679                           indf2	equ	0xFDF
 18680                           postinc2	equ	0xFDE
 18681                           postdec2	equ	0xFDD
 18682                           plusw2	equ	0xFDB
 18683                           fsr2h	equ	0xFDA
 18684                           fsr2l	equ	0xFD9
 18685                           status	equ	0xFD8
 18686                           
 18687 ;; *************** function _printErrors *****************
 18688 ;; Defined at:
 18689 ;;		line 2487 in file "main.c"
 18690 ;; Parameters:    Size  Location     Type
 18691 ;;		None
 18692 ;; Auto vars:     Size  Location     Type
 18693 ;;		None
 18694 ;; Return value:  Size  Location     Type
 18695 ;;		None               void
 18696 ;; Registers used:
 18697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18698 ;; Tracked objects:
 18699 ;;		On entry : F/1
 18700 ;;		On exit  : 0/0
 18701 ;;		Unchanged: 0/0
 18702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18703 ;;      Params:         0       0       0       0       0       0       0
 18704 ;;      Locals:         0      12       0       0       0       0       0
 18705 ;;      Temps:          0       0       0       0       0       0       0
 18706 ;;      Totals:         0      12       0       0       0       0       0
 18707 ;;Total ram usage:       12 bytes
 18708 ;; Hardware stack levels used:    1
 18709 ;; Hardware stack levels required when called:    5
 18710 ;; This function calls:
 18711 ;;		_putsUSART
 18712 ;;		_sprintf
 18713 ;; This function is called by:
 18714 ;;		_doModeVerbose
 18715 ;; This function uses a non-reentrant model
 18716 ;;
 18717                           
 18718                           	psect	text40
 18719  002582                     __ptext40:
 18720                           	opt stack 0
 18721  002582                     _printErrors:
 18722                           	opt stack 24
 18723                           
 18724                           ; BSR set to: 1
 18725                           ;main.c: 2488: putsUSART((char *) "CAN Receive overruns: ");
 18726                           
 18727                           ;incstack = 0
 18728                           ;incstack = 0
 18729  002582  0E7C               	movlw	high STR_176
 18730  002584  0100               	movlb	0	; () banked
 18731  002586  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18732  002588  0ED7               	movlw	low STR_176
 18733  00258A  6F61               	movwf	?_putsUSART& (0+255),b
 18734  00258C  EC4F  F02B         	call	_putsUSART	;wreg free
 18735                           
 18736                           ;main.c: 2489: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18737  002590  0101               	movlb	1	; () banked
 18738  002592  6700               	tstfsz	_bHex& (0+255),b
 18739  002594  D005               	goto	l11533
 18740                           
 18741                           ; BSR set to: 1
 18742  002596  0E7F               	movlw	high STR_162
 18743  002598  0100               	movlb	0	; () banked
 18744  00259A  6F95               	movwf	(_printErrors$1395+1)& (0+255),b
 18745  00259C  0EE0               	movlw	low STR_162
 18746  00259E  D004               	goto	L17
 18747  0025A0                     l11533:
 18748                           
 18749                           ; BSR set to: 1
 18750  0025A0  0E7F               	movlw	high STR_177
 18751  0025A2  0100               	movlb	0	; () banked
 18752  0025A4  6F95               	movwf	(_printErrors$1395+1)& (0+255),b
 18753  0025A6  0E15               	movlw	low STR_177
 18754  0025A8                     L17:
 18755  0025A8  6F94               	movwf	_printErrors$1395& (0+255),b
 18756                           
 18757                           ; BSR set to: 0
 18758  0025AA  0E01               	movlw	high _wrkbuf
 18759  0025AC  0100               	movlb	0	; () banked
 18760  0025AE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18761  0025B0  0E54               	movlw	low _wrkbuf
 18762  0025B2  6F76               	movwf	?_sprintf& (0+255),b
 18763  0025B4  C094  F078         	movff	_printErrors$1395,?_sprintf+2
 18764  0025B8  C095  F079         	movff	_printErrors$1395+1,?_sprintf+3
 18765  0025BC  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18766  0025C0  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18767  0025C4  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18768  0025C8  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18769  0025CC  EC40  F00D         	call	_sprintf	;wreg free
 18770                           
 18771                           ; BSR set to: 0
 18772                           ;main.c: 2490: putsUSART(wrkbuf);
 18773  0025D0  0E01               	movlw	high _wrkbuf
 18774  0025D2  0100               	movlb	0	; () banked
 18775  0025D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18776  0025D6  0E54               	movlw	low _wrkbuf
 18777  0025D8  6F61               	movwf	?_putsUSART& (0+255),b
 18778  0025DA  EC4F  F02B         	call	_putsUSART	;wreg free
 18779                           
 18780                           ;main.c: 2491: putsUSART((char *) "\r\n");
 18781  0025DE  0E74               	movlw	high (STR_197+50)
 18782  0025E0  0100               	movlb	0	; () banked
 18783  0025E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18784  0025E4  0E8A               	movlw	low (STR_197+50)
 18785  0025E6  6F61               	movwf	?_putsUSART& (0+255),b
 18786  0025E8  EC4F  F02B         	call	_putsUSART	;wreg free
 18787                           
 18788                           ;main.c: 2493: putsUSART((char *) "CAN Transmit overruns: ");
 18789  0025EC  0E7C               	movlw	high STR_180
 18790  0025EE  0100               	movlb	0	; () banked
 18791  0025F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18792  0025F2  0EA8               	movlw	low STR_180
 18793  0025F4  6F61               	movwf	?_putsUSART& (0+255),b
 18794  0025F6  EC4F  F02B         	call	_putsUSART	;wreg free
 18795                           
 18796                           ;main.c: 2494: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18797  0025FA  0101               	movlb	1	; () banked
 18798  0025FC  6700               	tstfsz	_bHex& (0+255),b
 18799  0025FE  D005               	goto	l11547
 18800                           
 18801                           ; BSR set to: 1
 18802  002600  0E7F               	movlw	high STR_162
 18803  002602  0100               	movlb	0	; () banked
 18804  002604  6F97               	movwf	(_printErrors$1401+1)& (0+255),b
 18805  002606  0EE0               	movlw	low STR_162
 18806  002608  D004               	goto	L18
 18807  00260A                     l11547:
 18808                           
 18809                           ; BSR set to: 1
 18810  00260A  0E7F               	movlw	high STR_177
 18811  00260C  0100               	movlb	0	; () banked
 18812  00260E  6F97               	movwf	(_printErrors$1401+1)& (0+255),b
 18813  002610  0E15               	movlw	low STR_177
 18814  002612                     L18:
 18815  002612  6F96               	movwf	_printErrors$1401& (0+255),b
 18816                           
 18817                           ; BSR set to: 0
 18818  002614  0E01               	movlw	high _wrkbuf
 18819  002616  0100               	movlb	0	; () banked
 18820  002618  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18821  00261A  0E54               	movlw	low _wrkbuf
 18822  00261C  6F76               	movwf	?_sprintf& (0+255),b
 18823  00261E  C096  F078         	movff	_printErrors$1401,?_sprintf+2
 18824  002622  C097  F079         	movff	_printErrors$1401+1,?_sprintf+3
 18825  002626  C02B  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18826  00262A  C02C  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18827  00262E  C02D  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18828  002632  C02E  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18829  002636  EC40  F00D         	call	_sprintf	;wreg free
 18830                           
 18831                           ; BSR set to: 0
 18832                           ;main.c: 2495: putsUSART(wrkbuf);
 18833  00263A  0E01               	movlw	high _wrkbuf
 18834  00263C  0100               	movlb	0	; () banked
 18835  00263E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18836  002640  0E54               	movlw	low _wrkbuf
 18837  002642  6F61               	movwf	?_putsUSART& (0+255),b
 18838  002644  EC4F  F02B         	call	_putsUSART	;wreg free
 18839                           
 18840                           ;main.c: 2496: putsUSART((char *) "\r\n");
 18841  002648  0E74               	movlw	high (STR_197+50)
 18842  00264A  0100               	movlb	0	; () banked
 18843  00264C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18844  00264E  0E8A               	movlw	low (STR_197+50)
 18845  002650  6F61               	movwf	?_putsUSART& (0+255),b
 18846  002652  EC4F  F02B         	call	_putsUSART	;wreg free
 18847                           
 18848                           ;main.c: 2498: putsUSART((char *) "UART Receive overruns: ");
 18849  002656  0E7C               	movlw	high STR_184
 18850  002658  0100               	movlb	0	; () banked
 18851  00265A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18852  00265C  0E90               	movlw	low STR_184
 18853  00265E  6F61               	movwf	?_putsUSART& (0+255),b
 18854  002660  EC4F  F02B         	call	_putsUSART	;wreg free
 18855                           
 18856                           ;main.c: 2499: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18857  002664  0101               	movlb	1	; () banked
 18858  002666  6700               	tstfsz	_bHex& (0+255),b
 18859  002668  D005               	goto	l11561
 18860                           
 18861                           ; BSR set to: 1
 18862  00266A  0E7F               	movlw	high STR_162
 18863  00266C  0100               	movlb	0	; () banked
 18864  00266E  6F99               	movwf	(_printErrors$1407+1)& (0+255),b
 18865  002670  0EE0               	movlw	low STR_162
 18866  002672  D004               	goto	L19
 18867  002674                     l11561:
 18868                           
 18869                           ; BSR set to: 1
 18870  002674  0E7F               	movlw	high STR_177
 18871  002676  0100               	movlb	0	; () banked
 18872  002678  6F99               	movwf	(_printErrors$1407+1)& (0+255),b
 18873  00267A  0E15               	movlw	low STR_177
 18874  00267C                     L19:
 18875  00267C  6F98               	movwf	_printErrors$1407& (0+255),b
 18876                           
 18877                           ; BSR set to: 0
 18878  00267E  0E01               	movlw	high _wrkbuf
 18879  002680  0100               	movlb	0	; () banked
 18880  002682  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18881  002684  0E54               	movlw	low _wrkbuf
 18882  002686  6F76               	movwf	?_sprintf& (0+255),b
 18883  002688  C098  F078         	movff	_printErrors$1407,?_sprintf+2
 18884  00268C  C099  F079         	movff	_printErrors$1407+1,?_sprintf+3
 18885  002690  C02F  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18886  002694  C030  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18887  002698  C031  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18888  00269C  C032  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18889  0026A0  EC40  F00D         	call	_sprintf	;wreg free
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;main.c: 2500: putsUSART(wrkbuf);
 18893  0026A4  0E01               	movlw	high _wrkbuf
 18894  0026A6  0100               	movlb	0	; () banked
 18895  0026A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18896  0026AA  0E54               	movlw	low _wrkbuf
 18897  0026AC  6F61               	movwf	?_putsUSART& (0+255),b
 18898  0026AE  EC4F  F02B         	call	_putsUSART	;wreg free
 18899                           
 18900                           ;main.c: 2501: putsUSART((char *) "\r\n");
 18901  0026B2  0E74               	movlw	high (STR_197+50)
 18902  0026B4  0100               	movlb	0	; () banked
 18903  0026B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18904  0026B8  0E8A               	movlw	low (STR_197+50)
 18905  0026BA  6F61               	movwf	?_putsUSART& (0+255),b
 18906  0026BC  EC4F  F02B         	call	_putsUSART	;wreg free
 18907                           
 18908                           ;main.c: 2503: putsUSART((char *) "UART Receive overruns: ");
 18909  0026C0  0E7C               	movlw	high STR_184
 18910  0026C2  0100               	movlb	0	; () banked
 18911  0026C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18912  0026C6  0E90               	movlw	low STR_184
 18913  0026C8  6F61               	movwf	?_putsUSART& (0+255),b
 18914  0026CA  EC4F  F02B         	call	_putsUSART	;wreg free
 18915                           
 18916                           ;main.c: 2504: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18917  0026CE  0101               	movlb	1	; () banked
 18918  0026D0  6700               	tstfsz	_bHex& (0+255),b
 18919  0026D2  D005               	goto	l11575
 18920                           
 18921                           ; BSR set to: 1
 18922  0026D4  0E7F               	movlw	high STR_162
 18923  0026D6  0100               	movlb	0	; () banked
 18924  0026D8  6F9B               	movwf	(_printErrors$1413+1)& (0+255),b
 18925  0026DA  0EE0               	movlw	low STR_162
 18926  0026DC  D004               	goto	L20
 18927  0026DE                     l11575:
 18928                           
 18929                           ; BSR set to: 1
 18930  0026DE  0E7F               	movlw	high STR_177
 18931  0026E0  0100               	movlb	0	; () banked
 18932  0026E2  6F9B               	movwf	(_printErrors$1413+1)& (0+255),b
 18933  0026E4  0E15               	movlw	low STR_177
 18934  0026E6                     L20:
 18935  0026E6  6F9A               	movwf	_printErrors$1413& (0+255),b
 18936                           
 18937                           ; BSR set to: 0
 18938  0026E8  0E01               	movlw	high _wrkbuf
 18939  0026EA  0100               	movlb	0	; () banked
 18940  0026EC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18941  0026EE  0E54               	movlw	low _wrkbuf
 18942  0026F0  6F76               	movwf	?_sprintf& (0+255),b
 18943  0026F2  C09A  F078         	movff	_printErrors$1413,?_sprintf+2
 18944  0026F6  C09B  F079         	movff	_printErrors$1413+1,?_sprintf+3
 18945  0026FA  C033  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18946  0026FE  C034  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18947  002702  C035  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18948  002706  C036  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18949  00270A  EC40  F00D         	call	_sprintf	;wreg free
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;main.c: 2505: putsUSART(wrkbuf);
 18953  00270E  0E01               	movlw	high _wrkbuf
 18954  002710  0100               	movlb	0	; () banked
 18955  002712  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18956  002714  0E54               	movlw	low _wrkbuf
 18957  002716  6F61               	movwf	?_putsUSART& (0+255),b
 18958  002718  EC4F  F02B         	call	_putsUSART	;wreg free
 18959                           
 18960                           ;main.c: 2506: putsUSART((char *) "\r\n");
 18961  00271C  0E74               	movlw	high (STR_197+50)
 18962  00271E  0100               	movlb	0	; () banked
 18963  002720  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18964  002722  0E8A               	movlw	low (STR_197+50)
 18965  002724  6F61               	movwf	?_putsUSART& (0+255),b
 18966  002726  EC4F  F02B         	call	_putsUSART	;wreg free
 18967                           
 18968                           ;main.c: 2508: putsUSART((char *) "Transmit Error Counter: ");
 18969  00272A  0E7B               	movlw	high STR_192
 18970  00272C  0100               	movlb	0	; () banked
 18971  00272E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18972  002730  0EE7               	movlw	low STR_192
 18973  002732  6F61               	movwf	?_putsUSART& (0+255),b
 18974  002734  EC4F  F02B         	call	_putsUSART	;wreg free
 18975                           
 18976                           ;main.c: 2509: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18977  002738  0101               	movlb	1	; () banked
 18978  00273A  6700               	tstfsz	_bHex& (0+255),b
 18979  00273C  D005               	goto	l11589
 18980                           
 18981                           ; BSR set to: 1
 18982  00273E  0E7F               	movlw	high STR_57
 18983  002740  0100               	movlb	0	; () banked
 18984  002742  6F9D               	movwf	(_printErrors$1419+1)& (0+255),b
 18985  002744  0EED               	movlw	low STR_57
 18986  002746  D004               	goto	L21
 18987  002748                     l11589:
 18988                           
 18989                           ; BSR set to: 1
 18990  002748  0E7F               	movlw	high STR_56
 18991  00274A  0100               	movlb	0	; () banked
 18992  00274C  6F9D               	movwf	(_printErrors$1419+1)& (0+255),b
 18993  00274E  0E64               	movlw	low STR_56
 18994  002750                     L21:
 18995  002750  6F9C               	movwf	_printErrors$1419& (0+255),b
 18996                           
 18997                           ; BSR set to: 0
 18998  002752  0E01               	movlw	high _wrkbuf
 18999  002754  0100               	movlb	0	; () banked
 19000  002756  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19001  002758  0E54               	movlw	low _wrkbuf
 19002  00275A  6F76               	movwf	?_sprintf& (0+255),b
 19003  00275C  C09C  F078         	movff	_printErrors$1419,?_sprintf+2
 19004  002760  C09D  F079         	movff	_printErrors$1419+1,?_sprintf+3
 19005  002764  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 19006  002768  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19007  00276A  EC40  F00D         	call	_sprintf	;wreg free
 19008                           
 19009                           ; BSR set to: 0
 19010                           ;main.c: 2510: putsUSART(wrkbuf);
 19011  00276E  0E01               	movlw	high _wrkbuf
 19012  002770  0100               	movlb	0	; () banked
 19013  002772  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19014  002774  0E54               	movlw	low _wrkbuf
 19015  002776  6F61               	movwf	?_putsUSART& (0+255),b
 19016  002778  EC4F  F02B         	call	_putsUSART	;wreg free
 19017                           
 19018                           ;main.c: 2511: putsUSART((char *) "\r\n");
 19019  00277C  0E74               	movlw	high (STR_197+50)
 19020  00277E  0100               	movlb	0	; () banked
 19021  002780  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19022  002782  0E8A               	movlw	low (STR_197+50)
 19023  002784  6F61               	movwf	?_putsUSART& (0+255),b
 19024  002786  EC4F  F02B         	call	_putsUSART	;wreg free
 19025                           
 19026                           ;main.c: 2513: if (COMSTATbits.TXWARN) {
 19027  00278A  A474               	btfss	3956,2,c	;volatile
 19028  00278C  D007               	goto	l11601
 19029                           
 19030                           ;main.c: 2514: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19031  00278E  0E72               	movlw	high STR_196
 19032  002790  0100               	movlb	0	; () banked
 19033  002792  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19034  002794  0E9C               	movlw	low STR_196
 19035  002796  6F61               	movwf	?_putsUSART& (0+255),b
 19036  002798  EC4F  F02B         	call	_putsUSART	;wreg free
 19037  00279C                     l11601:
 19038                           
 19039                           ;main.c: 2515: }
 19040                           ;main.c: 2517: if (COMSTATbits.TXBO) {
 19041  00279C  AA74               	btfss	3956,5,c	;volatile
 19042  00279E  D007               	goto	l11605
 19043                           
 19044                           ;main.c: 2518: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19045  0027A0  0E74               	movlw	high STR_197
 19046  0027A2  0100               	movlb	0	; () banked
 19047  0027A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19048  0027A6  0E58               	movlw	low STR_197
 19049  0027A8  6F61               	movwf	?_putsUSART& (0+255),b
 19050  0027AA  EC4F  F02B         	call	_putsUSART	;wreg free
 19051  0027AE                     l11605:
 19052                           
 19053                           ;main.c: 2519: }
 19054                           ;main.c: 2521: if (COMSTATbits.TXBP) {
 19055  0027AE  A874               	btfss	3956,4,c	;volatile
 19056  0027B0  D007               	goto	l1163
 19057                           
 19058                           ;main.c: 2522: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19059  0027B2  0E72               	movlw	high STR_198
 19060  0027B4  0100               	movlb	0	; () banked
 19061  0027B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19062  0027B8  0ED6               	movlw	low STR_198
 19063  0027BA  6F61               	movwf	?_putsUSART& (0+255),b
 19064  0027BC  EC4F  F02B         	call	_putsUSART	;wreg free
 19065  0027C0                     l1163:
 19066                           
 19067                           ;main.c: 2523: }
 19068                           ;main.c: 2526: putsUSART((char *) "Receive Error Counter: ");
 19069  0027C0  0E7C               	movlw	high STR_199
 19070  0027C2  0100               	movlb	0	; () banked
 19071  0027C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19072  0027C6  0E78               	movlw	low STR_199
 19073  0027C8  6F61               	movwf	?_putsUSART& (0+255),b
 19074  0027CA  EC4F  F02B         	call	_putsUSART	;wreg free
 19075                           
 19076                           ;main.c: 2527: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19077  0027CE  0101               	movlb	1	; () banked
 19078  0027D0  6700               	tstfsz	_bHex& (0+255),b
 19079  0027D2  D005               	goto	l11613
 19080                           
 19081                           ; BSR set to: 1
 19082  0027D4  0E7F               	movlw	high STR_57
 19083  0027D6  0100               	movlb	0	; () banked
 19084  0027D8  6F9F               	movwf	(_printErrors$1428+1)& (0+255),b
 19085  0027DA  0EED               	movlw	low STR_57
 19086  0027DC  D004               	goto	L22
 19087  0027DE                     l11613:
 19088                           
 19089                           ; BSR set to: 1
 19090  0027DE  0E7F               	movlw	high STR_56
 19091  0027E0  0100               	movlb	0	; () banked
 19092  0027E2  6F9F               	movwf	(_printErrors$1428+1)& (0+255),b
 19093  0027E4  0E64               	movlw	low STR_56
 19094  0027E6                     L22:
 19095  0027E6  6F9E               	movwf	_printErrors$1428& (0+255),b
 19096                           
 19097                           ; BSR set to: 0
 19098  0027E8  0E01               	movlw	high _wrkbuf
 19099  0027EA  0100               	movlb	0	; () banked
 19100  0027EC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19101  0027EE  0E54               	movlw	low _wrkbuf
 19102  0027F0  6F76               	movwf	?_sprintf& (0+255),b
 19103  0027F2  C09E  F078         	movff	_printErrors$1428,?_sprintf+2
 19104  0027F6  C09F  F079         	movff	_printErrors$1428+1,?_sprintf+3
 19105  0027FA  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19106  0027FE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19107  002800  EC40  F00D         	call	_sprintf	;wreg free
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;main.c: 2528: putsUSART(wrkbuf);
 19111  002804  0E01               	movlw	high _wrkbuf
 19112  002806  0100               	movlb	0	; () banked
 19113  002808  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19114  00280A  0E54               	movlw	low _wrkbuf
 19115  00280C  6F61               	movwf	?_putsUSART& (0+255),b
 19116  00280E  EC4F  F02B         	call	_putsUSART	;wreg free
 19117                           
 19118                           ;main.c: 2529: putsUSART((char *) "\r\n");
 19119  002812  0E74               	movlw	high (STR_197+50)
 19120  002814  0100               	movlb	0	; () banked
 19121  002816  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19122  002818  0E8A               	movlw	low (STR_197+50)
 19123  00281A  6F61               	movwf	?_putsUSART& (0+255),b
 19124  00281C  EC4F  F02B         	call	_putsUSART	;wreg free
 19125                           
 19126                           ;main.c: 2531: if (COMSTATbits.RXWARN) {
 19127  002820  A274               	btfss	3956,1,c	;volatile
 19128  002822  D007               	goto	l11625
 19129                           
 19130                           ;main.c: 2532: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19131  002824  0E73               	movlw	high STR_203
 19132  002826  0100               	movlb	0	; () banked
 19133  002828  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19134  00282A  0E47               	movlw	low STR_203
 19135  00282C  6F61               	movwf	?_putsUSART& (0+255),b
 19136  00282E  EC4F  F02B         	call	_putsUSART	;wreg free
 19137  002832                     l11625:
 19138                           
 19139                           ;main.c: 2533: }
 19140                           ;main.c: 2535: if (COMSTATbits.RXBP) {
 19141  002832  A674               	btfss	3956,3,c	;volatile
 19142  002834  D007               	goto	l11629
 19143                           
 19144                           ;main.c: 2536: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19145  002836  0E73               	movlw	high STR_204
 19146  002838  0100               	movlb	0	; () banked
 19147  00283A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19148  00283C  0EEC               	movlw	low STR_204
 19149  00283E  6F61               	movwf	?_putsUSART& (0+255),b
 19150  002840  EC4F  F02B         	call	_putsUSART	;wreg free
 19151  002844                     l11629:
 19152                           
 19153                           ;main.c: 2537: }
 19154                           ;main.c: 2539: if (COMSTATbits.EWARN) {
 19155  002844  A074               	btfss	3956,0,c	;volatile
 19156  002846  D007               	goto	l1171
 19157                           
 19158                           ;main.c: 2540: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19159  002848  0E74               	movlw	high STR_205
 19160  00284A  0100               	movlb	0	; () banked
 19161  00284C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19162  00284E  0EC2               	movlw	low STR_205
 19163  002850  6F61               	movwf	?_putsUSART& (0+255),b
 19164  002852  EC4F  F02B         	call	_putsUSART	;wreg free
 19165  002856                     l1171:
 19166  002856  0012               	return	
 19167  002858                     __end_of_printErrors:
 19168                           	opt stack 0
 19169                           tblptru	equ	0xFF8
 19170                           tblptrh	equ	0xFF7
 19171                           tblptrl	equ	0xFF6
 19172                           tablat	equ	0xFF5
 19173                           prodh	equ	0xFF4
 19174                           prodl	equ	0xFF3
 19175                           intcon	equ	0xFF2
 19176                           indf0	equ	0xFEF
 19177                           postinc0	equ	0xFEE
 19178                           fsr0h	equ	0xFEA
 19179                           fsr0l	equ	0xFE9
 19180                           wreg	equ	0xFE8
 19181                           indf1	equ	0xFE7
 19182                           postinc1	equ	0xFE6
 19183                           postdec1	equ	0xFE5
 19184                           fsr1h	equ	0xFE2
 19185                           fsr1l	equ	0xFE1
 19186                           indf2	equ	0xFDF
 19187                           postinc2	equ	0xFDE
 19188                           postdec2	equ	0xFDD
 19189                           plusw2	equ	0xFDB
 19190                           fsr2h	equ	0xFDA
 19191                           fsr2l	equ	0xFD9
 19192                           status	equ	0xFD8
 19193                           
 19194 ;; *************** function _printStatistics *****************
 19195 ;; Defined at:
 19196 ;;		line 2460 in file "main.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;		None
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;		None
 19201 ;; Return value:  Size  Location     Type
 19202 ;;		None               void
 19203 ;; Registers used:
 19204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19205 ;; Tracked objects:
 19206 ;;		On entry : F/1
 19207 ;;		On exit  : 0/0
 19208 ;;		Unchanged: 0/0
 19209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19210 ;;      Params:         0       0       0       0       0       0       0
 19211 ;;      Locals:         0       8       0       0       0       0       0
 19212 ;;      Temps:          0       0       0       0       0       0       0
 19213 ;;      Totals:         0       8       0       0       0       0       0
 19214 ;;Total ram usage:        8 bytes
 19215 ;; Hardware stack levels used:    1
 19216 ;; Hardware stack levels required when called:    5
 19217 ;; This function calls:
 19218 ;;		_putsUSART
 19219 ;;		_sprintf
 19220 ;; This function is called by:
 19221 ;;		_doModeVerbose
 19222 ;; This function uses a non-reentrant model
 19223 ;;
 19224                           
 19225                           	psect	text41
 19226  00327A                     __ptext41:
 19227                           	opt stack 0
 19228  00327A                     _printStatistics:
 19229                           	opt stack 24
 19230                           
 19231                           ; BSR set to: 1
 19232                           ;main.c: 2461: putsUSART((char *) "Sent CAN frames: ");
 19233                           
 19234                           ;incstack = 0
 19235                           ;incstack = 0
 19236  00327A  0E7E               	movlw	high STR_160
 19237  00327C  0100               	movlb	0	; () banked
 19238  00327E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19239  003280  0E09               	movlw	low STR_160
 19240  003282  6F61               	movwf	?_putsUSART& (0+255),b
 19241  003284  EC4F  F02B         	call	_putsUSART	;wreg free
 19242                           
 19243                           ;main.c: 2462: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19244  003288  0101               	movlb	1	; () banked
 19245  00328A  6700               	tstfsz	_bHex& (0+255),b
 19246  00328C  D005               	goto	l11477
 19247                           
 19248                           ; BSR set to: 1
 19249  00328E  0E7F               	movlw	high STR_162
 19250  003290  0100               	movlb	0	; () banked
 19251  003292  6F95               	movwf	(_printStatistics$1370+1)& (0+255),b
 19252  003294  0EE0               	movlw	low STR_162
 19253  003296  D004               	goto	L23
 19254  003298                     l11477:
 19255                           
 19256                           ; BSR set to: 1
 19257  003298  0E7F               	movlw	high STR_161
 19258  00329A  0100               	movlb	0	; () banked
 19259  00329C  6F95               	movwf	(_printStatistics$1370+1)& (0+255),b
 19260  00329E  0E72               	movlw	low STR_161
 19261  0032A0                     L23:
 19262  0032A0  6F94               	movwf	_printStatistics$1370& (0+255),b
 19263                           
 19264                           ; BSR set to: 0
 19265  0032A2  0E01               	movlw	high _wrkbuf
 19266  0032A4  0100               	movlb	0	; () banked
 19267  0032A6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19268  0032A8  0E54               	movlw	low _wrkbuf
 19269  0032AA  6F76               	movwf	?_sprintf& (0+255),b
 19270  0032AC  C094  F078         	movff	_printStatistics$1370,?_sprintf+2
 19271  0032B0  C095  F079         	movff	_printStatistics$1370+1,?_sprintf+3
 19272  0032B4  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19273  0032B8  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19274  0032BC  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19275  0032C0  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19276  0032C4  EC40  F00D         	call	_sprintf	;wreg free
 19277                           
 19278                           ; BSR set to: 0
 19279                           ;main.c: 2463: putsUSART(wrkbuf);
 19280  0032C8  0E01               	movlw	high _wrkbuf
 19281  0032CA  0100               	movlb	0	; () banked
 19282  0032CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19283  0032CE  0E54               	movlw	low _wrkbuf
 19284  0032D0  6F61               	movwf	?_putsUSART& (0+255),b
 19285  0032D2  EC4F  F02B         	call	_putsUSART	;wreg free
 19286                           
 19287                           ;main.c: 2464: putsUSART((char *) "\r\n");
 19288  0032D6  0E74               	movlw	high (STR_197+50)
 19289  0032D8  0100               	movlb	0	; () banked
 19290  0032DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19291  0032DC  0E8A               	movlw	low (STR_197+50)
 19292  0032DE  6F61               	movwf	?_putsUSART& (0+255),b
 19293  0032E0  EC4F  F02B         	call	_putsUSART	;wreg free
 19294                           
 19295                           ;main.c: 2466: putsUSART((char *) "Sent CAN bytes: ");
 19296  0032E4  0E7E               	movlw	high STR_164
 19297  0032E6  0100               	movlb	0	; () banked
 19298  0032E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19299  0032EA  0E3D               	movlw	low STR_164
 19300  0032EC  6F61               	movwf	?_putsUSART& (0+255),b
 19301  0032EE  EC4F  F02B         	call	_putsUSART	;wreg free
 19302                           
 19303                           ;main.c: 2467: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19304  0032F2  0101               	movlb	1	; () banked
 19305  0032F4  6700               	tstfsz	_bHex& (0+255),b
 19306  0032F6  D005               	goto	l11491
 19307                           
 19308                           ; BSR set to: 1
 19309  0032F8  0E7F               	movlw	high STR_162
 19310  0032FA  0100               	movlb	0	; () banked
 19311  0032FC  6F97               	movwf	(_printStatistics$1376+1)& (0+255),b
 19312  0032FE  0EE0               	movlw	low STR_162
 19313  003300  D004               	goto	L24
 19314  003302                     l11491:
 19315                           
 19316                           ; BSR set to: 1
 19317  003302  0E7F               	movlw	high STR_161
 19318  003304  0100               	movlb	0	; () banked
 19319  003306  6F97               	movwf	(_printStatistics$1376+1)& (0+255),b
 19320  003308  0E72               	movlw	low STR_161
 19321  00330A                     L24:
 19322  00330A  6F96               	movwf	_printStatistics$1376& (0+255),b
 19323                           
 19324                           ; BSR set to: 0
 19325  00330C  0E01               	movlw	high _wrkbuf
 19326  00330E  0100               	movlb	0	; () banked
 19327  003310  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19328  003312  0E54               	movlw	low _wrkbuf
 19329  003314  6F76               	movwf	?_sprintf& (0+255),b
 19330  003316  C096  F078         	movff	_printStatistics$1376,?_sprintf+2
 19331  00331A  C097  F079         	movff	_printStatistics$1376+1,?_sprintf+3
 19332  00331E  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19333  003322  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19334  003326  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19335  00332A  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19336  00332E  EC40  F00D         	call	_sprintf	;wreg free
 19337                           
 19338                           ; BSR set to: 0
 19339                           ;main.c: 2468: putsUSART(wrkbuf);
 19340  003332  0E01               	movlw	high _wrkbuf
 19341  003334  0100               	movlb	0	; () banked
 19342  003336  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19343  003338  0E54               	movlw	low _wrkbuf
 19344  00333A  6F61               	movwf	?_putsUSART& (0+255),b
 19345  00333C  EC4F  F02B         	call	_putsUSART	;wreg free
 19346                           
 19347                           ;main.c: 2469: putsUSART((char *) "\r\n");
 19348  003340  0E74               	movlw	high (STR_197+50)
 19349  003342  0100               	movlb	0	; () banked
 19350  003344  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19351  003346  0E8A               	movlw	low (STR_197+50)
 19352  003348  6F61               	movwf	?_putsUSART& (0+255),b
 19353  00334A  EC4F  F02B         	call	_putsUSART	;wreg free
 19354                           
 19355                           ;main.c: 2471: putsUSART((char *) "Received CAN frames: ");
 19356  00334E  0E7D               	movlw	high STR_168
 19357  003350  0100               	movlb	0	; () banked
 19358  003352  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19359  003354  0E1B               	movlw	low STR_168
 19360  003356  6F61               	movwf	?_putsUSART& (0+255),b
 19361  003358  EC4F  F02B         	call	_putsUSART	;wreg free
 19362                           
 19363                           ;main.c: 2472: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19364  00335C  0101               	movlb	1	; () banked
 19365  00335E  6700               	tstfsz	_bHex& (0+255),b
 19366  003360  D005               	goto	l11505
 19367                           
 19368                           ; BSR set to: 1
 19369  003362  0E7F               	movlw	high STR_162
 19370  003364  0100               	movlb	0	; () banked
 19371  003366  6F99               	movwf	(_printStatistics$1382+1)& (0+255),b
 19372  003368  0EE0               	movlw	low STR_162
 19373  00336A  D004               	goto	L25
 19374  00336C                     l11505:
 19375                           
 19376                           ; BSR set to: 1
 19377  00336C  0E7F               	movlw	high STR_161
 19378  00336E  0100               	movlb	0	; () banked
 19379  003370  6F99               	movwf	(_printStatistics$1382+1)& (0+255),b
 19380  003372  0E72               	movlw	low STR_161
 19381  003374                     L25:
 19382  003374  6F98               	movwf	_printStatistics$1382& (0+255),b
 19383                           
 19384                           ; BSR set to: 0
 19385  003376  0E01               	movlw	high _wrkbuf
 19386  003378  0100               	movlb	0	; () banked
 19387  00337A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19388  00337C  0E54               	movlw	low _wrkbuf
 19389  00337E  6F76               	movwf	?_sprintf& (0+255),b
 19390  003380  C098  F078         	movff	_printStatistics$1382,?_sprintf+2
 19391  003384  C099  F079         	movff	_printStatistics$1382+1,?_sprintf+3
 19392  003388  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19393  00338C  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19394  003390  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19395  003394  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19396  003398  EC40  F00D         	call	_sprintf	;wreg free
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;main.c: 2473: putsUSART(wrkbuf);
 19400  00339C  0E01               	movlw	high _wrkbuf
 19401  00339E  0100               	movlb	0	; () banked
 19402  0033A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19403  0033A2  0E54               	movlw	low _wrkbuf
 19404  0033A4  6F61               	movwf	?_putsUSART& (0+255),b
 19405  0033A6  EC4F  F02B         	call	_putsUSART	;wreg free
 19406                           
 19407                           ;main.c: 2474: putsUSART((char *) "\r\n");
 19408  0033AA  0E74               	movlw	high (STR_197+50)
 19409  0033AC  0100               	movlb	0	; () banked
 19410  0033AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19411  0033B0  0E8A               	movlw	low (STR_197+50)
 19412  0033B2  6F61               	movwf	?_putsUSART& (0+255),b
 19413  0033B4  EC4F  F02B         	call	_putsUSART	;wreg free
 19414                           
 19415                           ;main.c: 2476: putsUSART((char *) "Received CAN bytes: ");
 19416  0033B8  0E7D               	movlw	high STR_172
 19417  0033BA  0100               	movlb	0	; () banked
 19418  0033BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19419  0033BE  0E31               	movlw	low STR_172
 19420  0033C0  6F61               	movwf	?_putsUSART& (0+255),b
 19421  0033C2  EC4F  F02B         	call	_putsUSART	;wreg free
 19422                           
 19423                           ;main.c: 2477: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19424  0033C6  0101               	movlb	1	; () banked
 19425  0033C8  6700               	tstfsz	_bHex& (0+255),b
 19426  0033CA  D005               	goto	l11519
 19427                           
 19428                           ; BSR set to: 1
 19429  0033CC  0E7F               	movlw	high STR_162
 19430  0033CE  0100               	movlb	0	; () banked
 19431  0033D0  6F9B               	movwf	(_printStatistics$1388+1)& (0+255),b
 19432  0033D2  0EE0               	movlw	low STR_162
 19433  0033D4  D004               	goto	L26
 19434  0033D6                     l11519:
 19435                           
 19436                           ; BSR set to: 1
 19437  0033D6  0E7F               	movlw	high STR_161
 19438  0033D8  0100               	movlb	0	; () banked
 19439  0033DA  6F9B               	movwf	(_printStatistics$1388+1)& (0+255),b
 19440  0033DC  0E72               	movlw	low STR_161
 19441  0033DE                     L26:
 19442  0033DE  6F9A               	movwf	_printStatistics$1388& (0+255),b
 19443                           
 19444                           ; BSR set to: 0
 19445  0033E0  0E01               	movlw	high _wrkbuf
 19446  0033E2  0100               	movlb	0	; () banked
 19447  0033E4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19448  0033E6  0E54               	movlw	low _wrkbuf
 19449  0033E8  6F76               	movwf	?_sprintf& (0+255),b
 19450  0033EA  C09A  F078         	movff	_printStatistics$1388,?_sprintf+2
 19451  0033EE  C09B  F079         	movff	_printStatistics$1388+1,?_sprintf+3
 19452  0033F2  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19453  0033F6  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19454  0033FA  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19455  0033FE  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19456  003402  EC40  F00D         	call	_sprintf	;wreg free
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;main.c: 2478: putsUSART(wrkbuf);
 19460  003406  0E01               	movlw	high _wrkbuf
 19461  003408  0100               	movlb	0	; () banked
 19462  00340A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19463  00340C  0E54               	movlw	low _wrkbuf
 19464  00340E  6F61               	movwf	?_putsUSART& (0+255),b
 19465  003410  EC4F  F02B         	call	_putsUSART	;wreg free
 19466                           
 19467                           ;main.c: 2479: putsUSART((char *) "\r\n");
 19468  003414  0E74               	movlw	high (STR_197+50)
 19469  003416  0100               	movlb	0	; () banked
 19470  003418  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19471  00341A  0E8A               	movlw	low (STR_197+50)
 19472  00341C  6F61               	movwf	?_putsUSART& (0+255),b
 19473  00341E  EF4F  F02B         	goto	_putsUSART	;wreg free
 19474  003422                     __end_of_printStatistics:
 19475                           	opt stack 0
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           indf0	equ	0xFEF
 19484                           postinc0	equ	0xFEE
 19485                           fsr0h	equ	0xFEA
 19486                           fsr0l	equ	0xFE9
 19487                           wreg	equ	0xFE8
 19488                           indf1	equ	0xFE7
 19489                           postinc1	equ	0xFE6
 19490                           postdec1	equ	0xFE5
 19491                           fsr1h	equ	0xFE2
 19492                           fsr1l	equ	0xFE1
 19493                           indf2	equ	0xFDF
 19494                           postinc2	equ	0xFDE
 19495                           postdec2	equ	0xFDD
 19496                           plusw2	equ	0xFDB
 19497                           fsr2h	equ	0xFDA
 19498                           fsr2l	equ	0xFD9
 19499                           status	equ	0xFD8
 19500                           
 19501 ;; *************** function _atoi *****************
 19502 ;; Defined at:
 19503 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19504 ;; Parameters:    Size  Location     Type
 19505 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19506 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19507 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19508 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19509 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19510 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19511 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19512 ;; Auto vars:     Size  Location     Type
 19513 ;;  a               2   11[BANK0 ] int 
 19514 ;;  sign            1   10[BANK0 ] unsigned char 
 19515 ;; Return value:  Size  Location     Type
 19516 ;;                  2    6[BANK0 ] int 
 19517 ;; Registers used:
 19518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19519 ;; Tracked objects:
 19520 ;;		On entry : C/2
 19521 ;;		On exit  : F/0
 19522 ;;		Unchanged: 0/0
 19523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19524 ;;      Params:         0       2       0       0       0       0       0
 19525 ;;      Locals:         0       3       0       0       0       0       0
 19526 ;;      Temps:          0       2       0       0       0       0       0
 19527 ;;      Totals:         0       7       0       0       0       0       0
 19528 ;;Total ram usage:        7 bytes
 19529 ;; Hardware stack levels used:    1
 19530 ;; Hardware stack levels required when called:    4
 19531 ;; This function calls:
 19532 ;;		_isdigit
 19533 ;;		___wmul
 19534 ;; This function is called by:
 19535 ;;		_doModeVerbose
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           	psect	text42
 19540  003F90                     __ptext42:
 19541                           	opt stack 0
 19542  003F90                     _atoi:
 19543                           	opt stack 25
 19544                           
 19545                           ;incstack = 0
 19546                           ;incstack = 0
 19547  003F90  D003               	goto	l11429
 19548  003F92                     l11427:
 19549  003F92  0100               	movlb	0	; () banked
 19550  003F94  4B66               	infsnz	atoi@s& (0+255),f,b
 19551  003F96  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19552  003F98                     l11429:
 19553  003F98  0100               	movlb	0	; () banked
 19554  003F9A  D876               	call	PL22	;call to abstracted procedure
 19555  003F9C  64EA               	cpfsgt	fsr0h,c
 19556  003F9E  D003               	bra	u14277
 19557  003FA0  6EEA               	movwf	fsr0h,c
 19558  003FA2  50EF               	movf	indf0,w,c
 19559  003FA4  D003               	bra	u14270
 19560  003FA6                     u14277:
 19561  003FA6  6EF7               	movwf	tblptrh,c
 19562  003FA8  0008               	tblrd		*
 19563  003FAA  50F5               	movf	tablat,w,c
 19564  003FAC                     u14270:
 19565  003FAC  0A20               	xorlw	32
 19566  003FAE  E0F1               	bz	l11427
 19567  003FB0  0100               	movlb	0	; () banked
 19568  003FB2  D86A               	call	PL22	;call to abstracted procedure
 19569  003FB4  64EA               	cpfsgt	fsr0h,c
 19570  003FB6  D003               	bra	u14297
 19571  003FB8  6EEA               	movwf	fsr0h,c
 19572  003FBA  50EF               	movf	indf0,w,c
 19573  003FBC  D003               	bra	u14290
 19574  003FBE                     u14297:
 19575  003FBE  6EF7               	movwf	tblptrh,c
 19576  003FC0  0008               	tblrd		*
 19577  003FC2  50F5               	movf	tablat,w,c
 19578  003FC4                     u14290:
 19579  003FC4  0A09               	xorlw	9
 19580  003FC6  E0E5               	bz	l11427
 19581  003FC8  0100               	movlb	0	; () banked
 19582  003FCA  6B6B               	clrf	atoi@a& (0+255),b
 19583  003FCC  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19584  003FCE  6B6A               	clrf	atoi@sign& (0+255),b
 19585                           
 19586                           ; BSR set to: 0
 19587  003FD0  D85B               	call	PL22	;call to abstracted procedure
 19588  003FD2  64EA               	cpfsgt	fsr0h,c
 19589  003FD4  D003               	bra	u14317
 19590  003FD6  6EEA               	movwf	fsr0h,c
 19591  003FD8  50EF               	movf	indf0,w,c
 19592  003FDA  D003               	bra	u14310
 19593  003FDC                     u14317:
 19594  003FDC  6EF7               	movwf	tblptrh,c
 19595  003FDE  0008               	tblrd		*
 19596  003FE0  50F5               	movf	tablat,w,c
 19597  003FE2                     u14310:
 19598  003FE2  0A2D               	xorlw	45
 19599  003FE4  E103               	bnz	l11437
 19600  003FE6  0100               	movlb	0	; () banked
 19601  003FE8  2B6A               	incf	atoi@sign& (0+255),f,b
 19602  003FEA  D00D               	goto	L27
 19603  003FEC                     l11437:
 19604  003FEC  0100               	movlb	0	; () banked
 19605  003FEE  D84C               	call	PL22	;call to abstracted procedure
 19606  003FF0  64EA               	cpfsgt	fsr0h,c
 19607  003FF2  D003               	bra	u14337
 19608  003FF4  6EEA               	movwf	fsr0h,c
 19609  003FF6  50EF               	movf	indf0,w,c
 19610  003FF8  D003               	bra	u14330
 19611  003FFA                     u14337:
 19612  003FFA  6EF7               	movwf	tblptrh,c
 19613  003FFC  0008               	tblrd		*
 19614  003FFE  50F5               	movf	tablat,w,c
 19615  004000                     u14330:
 19616  004000  0A2B               	xorlw	43
 19617  004002  E121               	bnz	l11445
 19618  004004                     l11439:
 19619  004004  0100               	movlb	0	; () banked
 19620  004006                     L27:
 19621  004006  4B66               	infsnz	atoi@s& (0+255),f,b
 19622  004008  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19623  00400A  D01D               	goto	l11445
 19624  00400C                     l11441:
 19625                           
 19626                           ; BSR set to: 0
 19627  00400C  C06B  F060         	movff	atoi@a,?___wmul
 19628  004010  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19629  004014  6B63               	clrf	(?___wmul+3)& (0+255),b
 19630  004016  0E0A               	movlw	10
 19631  004018  6F62               	movwf	(?___wmul+2)& (0+255),b
 19632  00401A  EC81  F02D         	call	___wmul	;wreg free
 19633  00401E  D834               	call	PL22	;call to abstracted procedure
 19634  004020  64EA               	cpfsgt	fsr0h,c
 19635  004022  D003               	bra	u14357
 19636  004024  6EEA               	movwf	fsr0h,c
 19637  004026  50EF               	movf	indf0,w,c
 19638  004028  D003               	bra	u14350
 19639  00402A                     u14357:
 19640  00402A  6EF7               	movwf	tblptrh,c
 19641  00402C  0008               	tblrd		*
 19642  00402E  50F5               	movf	tablat,w,c
 19643  004030                     u14350:
 19644  004030  0100               	movlb	0	; () banked
 19645  004032  2760               	addwf	?___wmul& (0+255),f,b
 19646  004034  0E00               	movlw	0
 19647  004036  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19648  004038  0ED0               	movlw	208
 19649  00403A  2560               	addwf	?___wmul& (0+255),w,b
 19650  00403C  6F6B               	movwf	atoi@a& (0+255),b
 19651  00403E  0EFF               	movlw	255
 19652  004040  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19653  004042  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19654  004044  D7DF               	goto	l11439
 19655  004046                     l11445:
 19656  004046  0100               	movlb	0	; () banked
 19657  004048  D81F               	call	PL22	;call to abstracted procedure
 19658  00404A  64EA               	cpfsgt	fsr0h,c
 19659  00404C  D003               	bra	u14367
 19660  00404E  6EEA               	movwf	fsr0h,c
 19661  004050  50EF               	movf	indf0,w,c
 19662  004052  D003               	bra	u14360
 19663  004054                     u14367:
 19664  004054  6EF7               	movwf	tblptrh,c
 19665  004056  0008               	tblrd		*
 19666  004058  50F5               	movf	tablat,w,c
 19667  00405A                     u14360:
 19668  00405A  ECE0  F02D         	call	_isdigit
 19669  00405E  E2D6               	bc	l11441
 19670                           
 19671                           ; BSR set to: 0
 19672  004060  516A               	movf	atoi@sign& (0+255),w,b
 19673  004062  E00D               	bz	l2029
 19674                           
 19675                           ; BSR set to: 0
 19676  004064  C06B  F068         	movff	atoi@a,??_atoi
 19677  004068  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19678  00406C  1F68               	comf	??_atoi& (0+255),f,b
 19679  00406E  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19680  004070  4B68               	infsnz	??_atoi& (0+255),f,b
 19681  004072  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19682  004074  C068  F066         	movff	??_atoi,?_atoi
 19683  004078  C069  F067         	movff	??_atoi+1,?_atoi+1
 19684  00407C  D004               	goto	l2030
 19685  00407E                     l2029:
 19686                           
 19687                           ; BSR set to: 0
 19688  00407E  C06B  F066         	movff	atoi@a,?_atoi
 19689  004082  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19690  004086                     l2030:
 19691                           
 19692                           ; BSR set to: 0
 19693  004086  0012               	return	
 19694  004088                     __end_of_atoi:
 19695                           	opt stack 0
 19696  004088                     PL22:
 19697                           	opt stack 25
 19698  004088  5166               	movf	atoi@s& (0+255),w,b
 19699  00408A  6EF6               	movwf	tblptrl,c
 19700  00408C  6EE9               	movwf	fsr0l,c
 19701  00408E  0E05               	movlw	(high __ramtop+-1)
 19702  004090  6EEA               	movwf	fsr0h,c
 19703  004092  5167               	movf	(atoi@s+1)& (0+255),w,b
 19704  004094  0012               	return	
 19705  004096                     __end_ofPL22:
 19706                           	opt stack 0
 19707                           tblptru	equ	0xFF8
 19708                           tblptrh	equ	0xFF7
 19709                           tblptrl	equ	0xFF6
 19710                           tablat	equ	0xFF5
 19711                           prodh	equ	0xFF4
 19712                           prodl	equ	0xFF3
 19713                           intcon	equ	0xFF2
 19714                           indf0	equ	0xFEF
 19715                           postinc0	equ	0xFEE
 19716                           fsr0h	equ	0xFEA
 19717                           fsr0l	equ	0xFE9
 19718                           wreg	equ	0xFE8
 19719                           indf1	equ	0xFE7
 19720                           postinc1	equ	0xFE6
 19721                           postdec1	equ	0xFE5
 19722                           fsr1h	equ	0xFE2
 19723                           fsr1l	equ	0xFE1
 19724                           indf2	equ	0xFDF
 19725                           postinc2	equ	0xFDE
 19726                           postdec2	equ	0xFDD
 19727                           plusw2	equ	0xFDB
 19728                           fsr2h	equ	0xFDA
 19729                           fsr2l	equ	0xFD9
 19730                           status	equ	0xFD8
 19731                           
 19732 ;; *************** function _strtok *****************
 19733 ;; Defined at:
 19734 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19735 ;; Parameters:    Size  Location     Type
 19736 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19737 ;;		 -> NULL(0), cmdbuf(80), 
 19738 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19739 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19740 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19741 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19742 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19743 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19744 ;;		 -> STR_31(2), STR_30(2), 
 19745 ;; Auto vars:     Size  Location     Type
 19746 ;;		None
 19747 ;; Return value:  Size  Location     Type
 19748 ;;                  2   12[BANK0 ] PTR unsigned char 
 19749 ;; Registers used:
 19750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19751 ;; Tracked objects:
 19752 ;;		On entry : F/0
 19753 ;;		On exit  : F/0
 19754 ;;		Unchanged: 0/0
 19755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19756 ;;      Params:         0       4       0       0       0       0       0
 19757 ;;      Locals:         0       0       0       0       0       0       0
 19758 ;;      Temps:          0       0       0       0       0       0       0
 19759 ;;      Totals:         0       4       0       0       0       0       0
 19760 ;;Total ram usage:        4 bytes
 19761 ;; Hardware stack levels used:    1
 19762 ;; Hardware stack levels required when called:    5
 19763 ;; This function calls:
 19764 ;;		_strspn
 19765 ;;		_strcspn
 19766 ;; This function is called by:
 19767 ;;		_doModeVerbose
 19768 ;; This function uses a non-reentrant model
 19769 ;;
 19770                           
 19771                           	psect	text43
 19772  004F1C                     __ptext43:
 19773                           	opt stack 0
 19774  004F1C                     _strtok:
 19775                           	opt stack 24
 19776                           
 19777                           ; BSR set to: 0
 19778                           
 19779                           ; BSR set to: 0
 19780                           ;incstack = 0
 19781                           ;incstack = 0
 19782  004F1C  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19783  004F1E  116C               	iorwf	strtok@s1& (0+255),w,b
 19784  004F20  E104               	bnz	l11407
 19785                           
 19786                           ; BSR set to: 0
 19787  004F22  C03B  F06C         	movff	strtok@sp,strtok@s1
 19788  004F26  C03C  F06D         	movff	strtok@sp+1,strtok@s1+1
 19789  004F2A                     l11407:
 19790                           
 19791                           ; BSR set to: 0
 19792  004F2A  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19793  004F2C  116C               	iorwf	strtok@s1& (0+255),w,b
 19794  004F2E  E016               	bz	L28
 19795                           
 19796                           ; BSR set to: 0
 19797                           
 19798                           ; BSR set to: 0
 19799  004F30  C06C  F066         	movff	strtok@s1,?_strspn
 19800  004F34  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19801  004F38  C06E  F068         	movff	strtok@s2,?_strspn+2
 19802  004F3C  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19803  004F40  EC34  F02C         	call	_strspn	;wreg free
 19804  004F44  5166               	movf	?_strspn& (0+255),w,b
 19805  004F46  276C               	addwf	strtok@s1& (0+255),f,b
 19806  004F48  5167               	movf	(?_strspn+1)& (0+255),w,b
 19807  004F4A  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19808                           
 19809                           ; BSR set to: 0
 19810  004F4C  C06C  FFD9         	movff	strtok@s1,fsr2l
 19811  004F50  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19812  004F54  50DF               	movf	indf2,w,c
 19813  004F56  E105               	bnz	l11417
 19814                           
 19815                           ; BSR set to: 0
 19816  004F58  6A3B               	clrf	strtok@sp,c
 19817  004F5A  6A3C               	clrf	strtok@sp+1,c
 19818  004F5C                     L28:
 19819  004F5C  6B6C               	clrf	?_strtok& (0+255),b
 19820  004F5E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19821  004F60  D025               	goto	l2522
 19822  004F62                     l11417:
 19823                           
 19824                           ; BSR set to: 0
 19825  004F62  C06C  F066         	movff	strtok@s1,?_strcspn
 19826  004F66  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19827  004F6A  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19828  004F6E  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19829  004F72  EC12  F02C         	call	_strcspn	;wreg free
 19830  004F76  5166               	movf	?_strcspn& (0+255),w,b
 19831  004F78  256C               	addwf	strtok@s1& (0+255),w,b
 19832  004F7A  6E3B               	movwf	strtok@sp,c
 19833  004F7C  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19834  004F7E  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19835  004F80  6E3C               	movwf	strtok@sp+1,c
 19836                           
 19837                           ; BSR set to: 0
 19838  004F82  C03B  FFD9         	movff	strtok@sp,fsr2l
 19839  004F86  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19840  004F8A  50DF               	movf	indf2,w,c
 19841  004F8C  E009               	bz	l2524
 19842                           
 19843                           ; BSR set to: 0
 19844  004F8E  C03B  FFD9         	movff	strtok@sp,fsr2l
 19845  004F92  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19846  004F96  0E00               	movlw	0
 19847  004F98  6EDF               	movwf	indf2,c
 19848                           
 19849                           ; BSR set to: 0
 19850  004F9A  4A3B               	infsnz	strtok@sp,f,c
 19851  004F9C  2A3C               	incf	strtok@sp+1,f,c
 19852  004F9E  D002               	goto	l2525
 19853  004FA0                     l2524:
 19854                           
 19855                           ; BSR set to: 0
 19856  004FA0  6A3B               	clrf	strtok@sp,c
 19857  004FA2  6A3C               	clrf	strtok@sp+1,c
 19858  004FA4                     l2525:
 19859                           
 19860                           ; BSR set to: 0
 19861  004FA4  C06C  F06C         	movff	strtok@s1,?_strtok
 19862  004FA8  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19863  004FAC                     l2522:
 19864                           
 19865                           ; BSR set to: 0
 19866  004FAC  0012               	return	
 19867  004FAE                     __end_of_strtok:
 19868                           	opt stack 0
 19869                           tblptru	equ	0xFF8
 19870                           tblptrh	equ	0xFF7
 19871                           tblptrl	equ	0xFF6
 19872                           tablat	equ	0xFF5
 19873                           prodh	equ	0xFF4
 19874                           prodl	equ	0xFF3
 19875                           intcon	equ	0xFF2
 19876                           indf0	equ	0xFEF
 19877                           postinc0	equ	0xFEE
 19878                           fsr0h	equ	0xFEA
 19879                           fsr0l	equ	0xFE9
 19880                           wreg	equ	0xFE8
 19881                           indf1	equ	0xFE7
 19882                           postinc1	equ	0xFE6
 19883                           postdec1	equ	0xFE5
 19884                           fsr1h	equ	0xFE2
 19885                           fsr1l	equ	0xFE1
 19886                           indf2	equ	0xFDF
 19887                           postinc2	equ	0xFDE
 19888                           postdec2	equ	0xFDD
 19889                           plusw2	equ	0xFDB
 19890                           fsr2h	equ	0xFDA
 19891                           fsr2l	equ	0xFD9
 19892                           status	equ	0xFD8
 19893                           
 19894 ;; *************** function _strcspn *****************
 19895 ;; Defined at:
 19896 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19897 ;; Parameters:    Size  Location     Type
 19898 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19899 ;;		 -> NULL(0), cmdbuf(80), 
 19900 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19901 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19902 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19903 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19904 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19905 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19906 ;;		 -> STR_31(2), STR_30(2), 
 19907 ;; Auto vars:     Size  Location     Type
 19908 ;;  i               2   10[BANK0 ] unsigned int 
 19909 ;; Return value:  Size  Location     Type
 19910 ;;                  2    6[BANK0 ] unsigned int 
 19911 ;; Registers used:
 19912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19913 ;; Tracked objects:
 19914 ;;		On entry : F/0
 19915 ;;		On exit  : F/0
 19916 ;;		Unchanged: 0/0
 19917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19918 ;;      Params:         0       4       0       0       0       0       0
 19919 ;;      Locals:         0       2       0       0       0       0       0
 19920 ;;      Temps:          0       0       0       0       0       0       0
 19921 ;;      Totals:         0       6       0       0       0       0       0
 19922 ;;Total ram usage:        6 bytes
 19923 ;; Hardware stack levels used:    1
 19924 ;; Hardware stack levels required when called:    4
 19925 ;; This function calls:
 19926 ;;		_strchr
 19927 ;; This function is called by:
 19928 ;;		_strtok
 19929 ;; This function uses a non-reentrant model
 19930 ;;
 19931                           
 19932                           	psect	text44
 19933  005824                     __ptext44:
 19934                           	opt stack 0
 19935  005824                     _strcspn:
 19936                           	opt stack 24
 19937                           
 19938                           ; BSR set to: 0
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;incstack = 0
 19942                           ;incstack = 0
 19943  005824  6B6A               	clrf	strcspn@i& (0+255),b
 19944  005826  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19945  005828  D004               	goto	l13127
 19946  00582A                     l13125:
 19947                           
 19948                           ; BSR set to: 0
 19949  00582A  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19950  00582C  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19951  00582E  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19952  005830  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19953  005832                     l13127:
 19954                           
 19955                           ; BSR set to: 0
 19956  005832  C066  FFD9         	movff	strcspn@s1,fsr2l
 19957  005836  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19958  00583A  50DF               	movf	indf2,w,c
 19959  00583C  E010               	bz	l2549
 19960                           
 19961                           ; BSR set to: 0
 19962  00583E  C068  F060         	movff	strcspn@s2,?_strchr
 19963  005842  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19964  005846  C066  FFD9         	movff	strcspn@s1,fsr2l
 19965  00584A  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19966  00584E  50DF               	movf	indf2,w,c
 19967  005850  6F62               	movwf	(?_strchr+2)& (0+255),b
 19968  005852  6B63               	clrf	(?_strchr+3)& (0+255),b
 19969  005854  EC63  F02A         	call	_strchr	;wreg free
 19970  005858  5161               	movf	(?_strchr+1)& (0+255),w,b
 19971  00585A  1160               	iorwf	?_strchr& (0+255),w,b
 19972  00585C  E0E6               	bz	l13125
 19973  00585E                     l2549:
 19974                           
 19975                           ; BSR set to: 0
 19976  00585E  C06A  F066         	movff	strcspn@i,?_strcspn
 19977  005862  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19978                           
 19979                           ; BSR set to: 0
 19980  005866  0012               	return	
 19981  005868                     __end_of_strcspn:
 19982                           	opt stack 0
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           indf0	equ	0xFEF
 19991                           postinc0	equ	0xFEE
 19992                           fsr0h	equ	0xFEA
 19993                           fsr0l	equ	0xFE9
 19994                           wreg	equ	0xFE8
 19995                           indf1	equ	0xFE7
 19996                           postinc1	equ	0xFE6
 19997                           postdec1	equ	0xFE5
 19998                           fsr1h	equ	0xFE2
 19999                           fsr1l	equ	0xFE1
 20000                           indf2	equ	0xFDF
 20001                           postinc2	equ	0xFDE
 20002                           postdec2	equ	0xFDD
 20003                           plusw2	equ	0xFDB
 20004                           fsr2h	equ	0xFDA
 20005                           fsr2l	equ	0xFD9
 20006                           status	equ	0xFD8
 20007                           
 20008 ;; *************** function _strspn *****************
 20009 ;; Defined at:
 20010 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 20013 ;;		 -> NULL(0), cmdbuf(80), 
 20014 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 20015 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20016 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20017 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20018 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20019 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20020 ;;		 -> STR_31(2), STR_30(2), 
 20021 ;; Auto vars:     Size  Location     Type
 20022 ;;  i               2   10[BANK0 ] unsigned int 
 20023 ;; Return value:  Size  Location     Type
 20024 ;;                  2    6[BANK0 ] unsigned int 
 20025 ;; Registers used:
 20026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20027 ;; Tracked objects:
 20028 ;;		On entry : F/0
 20029 ;;		On exit  : F/0
 20030 ;;		Unchanged: 0/0
 20031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20032 ;;      Params:         0       4       0       0       0       0       0
 20033 ;;      Locals:         0       2       0       0       0       0       0
 20034 ;;      Temps:          0       0       0       0       0       0       0
 20035 ;;      Totals:         0       6       0       0       0       0       0
 20036 ;;Total ram usage:        6 bytes
 20037 ;; Hardware stack levels used:    1
 20038 ;; Hardware stack levels required when called:    4
 20039 ;; This function calls:
 20040 ;;		_strchr
 20041 ;; This function is called by:
 20042 ;;		_strtok
 20043 ;; This function uses a non-reentrant model
 20044 ;;
 20045                           
 20046                           	psect	text45
 20047  005868                     __ptext45:
 20048                           	opt stack 0
 20049  005868                     _strspn:
 20050                           	opt stack 24
 20051                           
 20052                           ; BSR set to: 0
 20053                           
 20054                           ; BSR set to: 0
 20055                           ;incstack = 0
 20056                           ;incstack = 0
 20057  005868  6B6A               	clrf	strspn@i& (0+255),b
 20058  00586A  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20059  00586C  D004               	goto	l13119
 20060  00586E                     l13117:
 20061                           
 20062                           ; BSR set to: 0
 20063  00586E  4B66               	infsnz	strspn@s1& (0+255),f,b
 20064  005870  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20065  005872  4B6A               	infsnz	strspn@i& (0+255),f,b
 20066  005874  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20067  005876                     l13119:
 20068                           
 20069                           ; BSR set to: 0
 20070  005876  C066  FFD9         	movff	strspn@s1,fsr2l
 20071  00587A  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20072  00587E  50DF               	movf	indf2,w,c
 20073  005880  E010               	bz	l2568
 20074                           
 20075                           ; BSR set to: 0
 20076  005882  C068  F060         	movff	strspn@s2,?_strchr
 20077  005886  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20078  00588A  C066  FFD9         	movff	strspn@s1,fsr2l
 20079  00588E  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20080  005892  50DF               	movf	indf2,w,c
 20081  005894  6F62               	movwf	(?_strchr+2)& (0+255),b
 20082  005896  6B63               	clrf	(?_strchr+3)& (0+255),b
 20083  005898  EC63  F02A         	call	_strchr	;wreg free
 20084  00589C  5161               	movf	(?_strchr+1)& (0+255),w,b
 20085  00589E  1160               	iorwf	?_strchr& (0+255),w,b
 20086  0058A0  E1E6               	bnz	l13117
 20087  0058A2                     l2568:
 20088                           
 20089                           ; BSR set to: 0
 20090  0058A2  C06A  F066         	movff	strspn@i,?_strspn
 20091  0058A6  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20092                           
 20093                           ; BSR set to: 0
 20094  0058AA  0012               	return	
 20095  0058AC                     __end_of_strspn:
 20096                           	opt stack 0
 20097                           tblptru	equ	0xFF8
 20098                           tblptrh	equ	0xFF7
 20099                           tblptrl	equ	0xFF6
 20100                           tablat	equ	0xFF5
 20101                           prodh	equ	0xFF4
 20102                           prodl	equ	0xFF3
 20103                           intcon	equ	0xFF2
 20104                           indf0	equ	0xFEF
 20105                           postinc0	equ	0xFEE
 20106                           fsr0h	equ	0xFEA
 20107                           fsr0l	equ	0xFE9
 20108                           wreg	equ	0xFE8
 20109                           indf1	equ	0xFE7
 20110                           postinc1	equ	0xFE6
 20111                           postdec1	equ	0xFE5
 20112                           fsr1h	equ	0xFE2
 20113                           fsr1l	equ	0xFE1
 20114                           indf2	equ	0xFDF
 20115                           postinc2	equ	0xFDE
 20116                           postdec2	equ	0xFDD
 20117                           plusw2	equ	0xFDB
 20118                           fsr2h	equ	0xFDA
 20119                           fsr2l	equ	0xFD9
 20120                           status	equ	0xFD8
 20121                           
 20122 ;; *************** function _strchr *****************
 20123 ;; Defined at:
 20124 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20125 ;; Parameters:    Size  Location     Type
 20126 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20127 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20128 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20129 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20130 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20131 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20132 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20133 ;;  chr             2    2[BANK0 ] int 
 20134 ;; Auto vars:     Size  Location     Type
 20135 ;;		None
 20136 ;; Return value:  Size  Location     Type
 20137 ;;                  2    0[BANK0 ] PTR unsigned char 
 20138 ;; Registers used:
 20139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20140 ;; Tracked objects:
 20141 ;;		On entry : F/0
 20142 ;;		On exit  : F/0
 20143 ;;		Unchanged: 0/0
 20144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20145 ;;      Params:         0       4       0       0       0       0       0
 20146 ;;      Locals:         0       0       0       0       0       0       0
 20147 ;;      Temps:          0       2       0       0       0       0       0
 20148 ;;      Totals:         0       6       0       0       0       0       0
 20149 ;;Total ram usage:        6 bytes
 20150 ;; Hardware stack levels used:    1
 20151 ;; Hardware stack levels required when called:    3
 20152 ;; This function calls:
 20153 ;;		Nothing
 20154 ;; This function is called by:
 20155 ;;		_doModeVerbose
 20156 ;;		_strcspn
 20157 ;;		_strspn
 20158 ;; This function uses a non-reentrant model
 20159 ;;
 20160                           
 20161                           	psect	text46
 20162  0054C6                     __ptext46:
 20163                           	opt stack 0
 20164  0054C6                     _strchr:
 20165                           	opt stack 26
 20166  0054C6                     l2470:
 20167                           
 20168                           ; BSR set to: 0
 20169  0054C6  0100               	movlb	0	; () banked
 20170  0054C8  5160               	movf	strchr@ptr& (0+255),w,b
 20171  0054CA  6EF6               	movwf	tblptrl,c
 20172  0054CC  6EE9               	movwf	fsr0l,c
 20173  0054CE  0E05               	movlw	(high __ramtop+-1)
 20174  0054D0  6EEA               	movwf	fsr0h,c
 20175  0054D2  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20176  0054D4  64EA               	cpfsgt	fsr0h,c
 20177  0054D6  D003               	bra	u14627
 20178  0054D8  6EEA               	movwf	fsr0h,c
 20179  0054DA  50EF               	movf	indf0,w,c
 20180  0054DC  D003               	bra	u14620
 20181  0054DE                     u14627:
 20182  0054DE  6EF7               	movwf	tblptrh,c
 20183  0054E0  0008               	tblrd		*
 20184  0054E2  50F5               	movf	tablat,w,c
 20185  0054E4                     u14620:
 20186  0054E4  0100               	movlb	0	; () banked
 20187  0054E6  1962               	xorwf	strchr@chr& (0+255),w,b
 20188  0054E8  E105               	bnz	l11691
 20189                           
 20190                           ; BSR set to: 0
 20191  0054EA  C060  F060         	movff	strchr@ptr,?_strchr
 20192  0054EE  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20193  0054F2  D019               	goto	l2472
 20194  0054F4                     l11691:
 20195                           
 20196                           ; BSR set to: 0
 20197  0054F4  5160               	movf	strchr@ptr& (0+255),w,b
 20198  0054F6  6F64               	movwf	??_strchr& (0+255),b
 20199  0054F8  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20200  0054FA  6F65               	movwf	(??_strchr+1)& (0+255),b
 20201  0054FC  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20202  0054FE  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20203  005500  5164               	movf	??_strchr& (0+255),w,b
 20204  005502  6EF6               	movwf	tblptrl,c
 20205  005504  6EE9               	movwf	fsr0l,c
 20206  005506  0E05               	movlw	(high __ramtop+-1)
 20207  005508  6EEA               	movwf	fsr0h,c
 20208  00550A  5165               	movf	(??_strchr+1)& (0+255),w,b
 20209  00550C  64EA               	cpfsgt	fsr0h,c
 20210  00550E  D003               	bra	u14647
 20211  005510  6EEA               	movwf	fsr0h,c
 20212  005512  50EF               	movf	indf0,w,c
 20213  005514  D003               	bra	u14640
 20214  005516                     u14647:
 20215  005516  6EF7               	movwf	tblptrh,c
 20216  005518  0008               	tblrd		*
 20217  00551A  50F5               	movf	tablat,w,c
 20218  00551C                     u14640:
 20219  00551C  0900               	iorlw	0
 20220  00551E  E1D3               	bnz	l2470
 20221  005520  0100               	movlb	0	; () banked
 20222  005522  6B60               	clrf	?_strchr& (0+255),b
 20223  005524  6B61               	clrf	(?_strchr+1)& (0+255),b
 20224  005526                     l2472:
 20225                           
 20226                           ; BSR set to: 0
 20227  005526  0012               	return	
 20228  005528                     __end_of_strchr:
 20229                           	opt stack 0
 20230                           tblptru	equ	0xFF8
 20231                           tblptrh	equ	0xFF7
 20232                           tblptrl	equ	0xFF6
 20233                           tablat	equ	0xFF5
 20234                           prodh	equ	0xFF4
 20235                           prodl	equ	0xFF3
 20236                           intcon	equ	0xFF2
 20237                           indf0	equ	0xFEF
 20238                           postinc0	equ	0xFEE
 20239                           fsr0h	equ	0xFEA
 20240                           fsr0l	equ	0xFE9
 20241                           wreg	equ	0xFE8
 20242                           indf1	equ	0xFE7
 20243                           postinc1	equ	0xFE6
 20244                           postdec1	equ	0xFE5
 20245                           fsr1h	equ	0xFE2
 20246                           fsr1l	equ	0xFE1
 20247                           indf2	equ	0xFDF
 20248                           postinc2	equ	0xFDE
 20249                           postdec2	equ	0xFDD
 20250                           plusw2	equ	0xFDB
 20251                           fsr2h	equ	0xFDA
 20252                           fsr2l	equ	0xFD9
 20253                           status	equ	0xFD8
 20254                           
 20255 ;; *************** function _stristr *****************
 20256 ;; Defined at:
 20257 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20258 ;; Parameters:    Size  Location     Type
 20259 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20260 ;;		 -> NULL(0), cmdbuf(80), 
 20261 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20262 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20263 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20264 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20265 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20266 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20267 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20268 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20269 ;;		 -> STR_8(5), STR_6(5), 
 20270 ;; Auto vars:     Size  Location     Type
 20271 ;;		None
 20272 ;; Return value:  Size  Location     Type
 20273 ;;                  2   13[BANK0 ] PTR unsigned char 
 20274 ;; Registers used:
 20275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20276 ;; Tracked objects:
 20277 ;;		On entry : F/0
 20278 ;;		On exit  : F/0
 20279 ;;		Unchanged: 0/0
 20280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20281 ;;      Params:         0       4       0       0       0       0       0
 20282 ;;      Locals:         0       0       0       0       0       0       0
 20283 ;;      Temps:          0       0       0       0       0       0       0
 20284 ;;      Totals:         0       4       0       0       0       0       0
 20285 ;;Total ram usage:        4 bytes
 20286 ;; Hardware stack levels used:    1
 20287 ;; Hardware stack levels required when called:    5
 20288 ;; This function calls:
 20289 ;;		_strlen
 20290 ;;		_strnicmp
 20291 ;;		_strichr
 20292 ;; This function is called by:
 20293 ;;		_doModeVerbose
 20294 ;; This function uses a non-reentrant model
 20295 ;;
 20296                           
 20297                           	psect	text47
 20298  005142                     __ptext47:
 20299                           	opt stack 0
 20300  005142                     _stristr:
 20301                           	opt stack 24
 20302                           
 20303                           ; BSR set to: 0
 20304                           
 20305                           ; BSR set to: 0
 20306                           ;incstack = 0
 20307                           ;incstack = 0
 20308  005142  D02F               	goto	l11395
 20309  005144                     l11389:
 20310                           
 20311                           ; BSR set to: 0
 20312  005144  C06D  F064         	movff	stristr@s1,?_strnicmp
 20313  005148  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20314  00514C  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20315  005150  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20316  005154  C06F  F060         	movff	stristr@s2,?_strlen
 20317  005158  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20318  00515C  EC77  F02C         	call	_strlen	;wreg free
 20319  005160  C060  F068         	movff	?_strlen,?_strnicmp+4
 20320  005164  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20321  005168  ECFF  F029         	call	_strnicmp	;wreg free
 20322  00516C  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20323  00516E  1164               	iorwf	?_strnicmp& (0+255),w,b
 20324  005170  E105               	bnz	l11393
 20325                           
 20326                           ; BSR set to: 0
 20327  005172  C06D  F06D         	movff	stristr@s1,?_stristr
 20328  005176  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20329  00517A  D01E               	goto	l2491
 20330  00517C                     l11393:
 20331                           
 20332                           ; BSR set to: 0
 20333  00517C  296D               	incf	stristr@s1& (0+255),w,b
 20334  00517E  6F61               	movwf	?_strichr& (0+255),b
 20335  005180  0E00               	movlw	0
 20336  005182  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20337  005184  6F62               	movwf	(?_strichr+1)& (0+255),b
 20338  005186  C06F  FFF6         	movff	stristr@s2,tblptrl
 20339  00518A  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20340  00518E  0008               	tblrd		*
 20341  005190  50F5               	movf	tablat,w,c
 20342  005192  6F63               	movwf	(?_strichr+2)& (0+255),b
 20343  005194  6B64               	clrf	(?_strichr+3)& (0+255),b
 20344  005196  ECD6  F02C         	call	_strichr	;wreg free
 20345  00519A  C061  F06D         	movff	?_strichr,stristr@s1
 20346  00519E  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20347  0051A2                     l11395:
 20348                           
 20349                           ; BSR set to: 0
 20350  0051A2  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20351  0051A4  116D               	iorwf	stristr@s1& (0+255),w,b
 20352  0051A6  E006               	bz	l2494
 20353                           
 20354                           ; BSR set to: 0
 20355  0051A8  C06D  FFD9         	movff	stristr@s1,fsr2l
 20356  0051AC  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20357  0051B0  50DF               	movf	indf2,w,c
 20358  0051B2  E1C8               	bnz	l11389
 20359  0051B4                     l2494:
 20360                           
 20361                           ; BSR set to: 0
 20362  0051B4  6B6D               	clrf	?_stristr& (0+255),b
 20363  0051B6  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20364  0051B8                     l2491:
 20365                           
 20366                           ; BSR set to: 0
 20367  0051B8  0012               	return	
 20368  0051BA                     __end_of_stristr:
 20369                           	opt stack 0
 20370                           tblptru	equ	0xFF8
 20371                           tblptrh	equ	0xFF7
 20372                           tblptrl	equ	0xFF6
 20373                           tablat	equ	0xFF5
 20374                           prodh	equ	0xFF4
 20375                           prodl	equ	0xFF3
 20376                           intcon	equ	0xFF2
 20377                           indf0	equ	0xFEF
 20378                           postinc0	equ	0xFEE
 20379                           fsr0h	equ	0xFEA
 20380                           fsr0l	equ	0xFE9
 20381                           wreg	equ	0xFE8
 20382                           indf1	equ	0xFE7
 20383                           postinc1	equ	0xFE6
 20384                           postdec1	equ	0xFE5
 20385                           fsr1h	equ	0xFE2
 20386                           fsr1l	equ	0xFE1
 20387                           indf2	equ	0xFDF
 20388                           postinc2	equ	0xFDE
 20389                           postdec2	equ	0xFDD
 20390                           plusw2	equ	0xFDB
 20391                           fsr2h	equ	0xFDA
 20392                           fsr2l	equ	0xFD9
 20393                           status	equ	0xFD8
 20394                           
 20395 ;; *************** function _strichr *****************
 20396 ;; Defined at:
 20397 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20398 ;; Parameters:    Size  Location     Type
 20399 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20400 ;;		 -> NULL(0), cmdbuf(80), 
 20401 ;;  chr             2    3[BANK0 ] int 
 20402 ;; Auto vars:     Size  Location     Type
 20403 ;;		None
 20404 ;; Return value:  Size  Location     Type
 20405 ;;                  2    1[BANK0 ] PTR unsigned char 
 20406 ;; Registers used:
 20407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20408 ;; Tracked objects:
 20409 ;;		On entry : F/0
 20410 ;;		On exit  : F/0
 20411 ;;		Unchanged: 0/0
 20412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20413 ;;      Params:         0       4       0       0       0       0       0
 20414 ;;      Locals:         0       0       0       0       0       0       0
 20415 ;;      Temps:          0       0       0       0       0       0       0
 20416 ;;      Totals:         0       4       0       0       0       0       0
 20417 ;;Total ram usage:        4 bytes
 20418 ;; Hardware stack levels used:    1
 20419 ;; Hardware stack levels required when called:    4
 20420 ;; This function calls:
 20421 ;;		_toupper
 20422 ;; This function is called by:
 20423 ;;		_stristr
 20424 ;; This function uses a non-reentrant model
 20425 ;;
 20426                           
 20427                           	psect	text48
 20428  0059AC                     __ptext48:
 20429                           	opt stack 0
 20430  0059AC                     _strichr:
 20431                           	opt stack 24
 20432                           
 20433                           ; BSR set to: 0
 20434                           
 20435                           ; BSR set to: 0
 20436                           ;incstack = 0
 20437                           ;incstack = 0
 20438  0059AC  5163               	movf	strichr@chr& (0+255),w,b
 20439  0059AE  EC1B  F02E         	call	_toupper
 20440  0059B2  6F63               	movwf	strichr@chr& (0+255),b
 20441  0059B4  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20442  0059B6  D010               	goto	l13103
 20443  0059B8                     l13097:
 20444                           
 20445                           ; BSR set to: 0
 20446  0059B8  C061  FFD9         	movff	strichr@ptr,fsr2l
 20447  0059BC  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20448  0059C0  50DF               	movf	indf2,w,c
 20449  0059C2  EC1B  F02E         	call	_toupper
 20450  0059C6  1963               	xorwf	strichr@chr& (0+255),w,b
 20451  0059C8  E105               	bnz	l13101
 20452                           
 20453                           ; BSR set to: 0
 20454  0059CA  C061  F061         	movff	strichr@ptr,?_strichr
 20455  0059CE  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20456  0059D2  D00A               	goto	l2558
 20457  0059D4                     l13101:
 20458                           
 20459                           ; BSR set to: 0
 20460  0059D4  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20461  0059D6  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20462  0059D8                     l13103:
 20463                           
 20464                           ; BSR set to: 0
 20465  0059D8  C061  FFD9         	movff	strichr@ptr,fsr2l
 20466  0059DC  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20467  0059E0  50DF               	movf	indf2,w,c
 20468  0059E2  E1EA               	bnz	l13097
 20469                           
 20470                           ; BSR set to: 0
 20471  0059E4  6B61               	clrf	?_strichr& (0+255),b
 20472  0059E6  6B62               	clrf	(?_strichr+1)& (0+255),b
 20473  0059E8                     l2558:
 20474                           
 20475                           ; BSR set to: 0
 20476  0059E8  0012               	return	
 20477  0059EA                     __end_of_strichr:
 20478                           	opt stack 0
 20479                           tblptru	equ	0xFF8
 20480                           tblptrh	equ	0xFF7
 20481                           tblptrl	equ	0xFF6
 20482                           tablat	equ	0xFF5
 20483                           prodh	equ	0xFF4
 20484                           prodl	equ	0xFF3
 20485                           intcon	equ	0xFF2
 20486                           indf0	equ	0xFEF
 20487                           postinc0	equ	0xFEE
 20488                           fsr0h	equ	0xFEA
 20489                           fsr0l	equ	0xFE9
 20490                           wreg	equ	0xFE8
 20491                           indf1	equ	0xFE7
 20492                           postinc1	equ	0xFE6
 20493                           postdec1	equ	0xFE5
 20494                           fsr1h	equ	0xFE2
 20495                           fsr1l	equ	0xFE1
 20496                           indf2	equ	0xFDF
 20497                           postinc2	equ	0xFDE
 20498                           postdec2	equ	0xFDD
 20499                           plusw2	equ	0xFDB
 20500                           fsr2h	equ	0xFDA
 20501                           fsr2l	equ	0xFD9
 20502                           status	equ	0xFD8
 20503                           
 20504 ;; *************** function _strnicmp *****************
 20505 ;; Defined at:
 20506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20507 ;; Parameters:    Size  Location     Type
 20508 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20509 ;;		 -> NULL(0), cmdbuf(80), 
 20510 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20511 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20512 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20513 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20514 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20515 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20516 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20517 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20518 ;;		 -> STR_8(5), STR_6(5), 
 20519 ;;  len             2    8[BANK0 ] unsigned int 
 20520 ;; Auto vars:     Size  Location     Type
 20521 ;;  r               1   12[BANK0 ] char 
 20522 ;; Return value:  Size  Location     Type
 20523 ;;                  2    4[BANK0 ] int 
 20524 ;; Registers used:
 20525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20526 ;; Tracked objects:
 20527 ;;		On entry : F/0
 20528 ;;		On exit  : F/0
 20529 ;;		Unchanged: 0/0
 20530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20531 ;;      Params:         0       6       0       0       0       0       0
 20532 ;;      Locals:         0       1       0       0       0       0       0
 20533 ;;      Temps:          0       2       0       0       0       0       0
 20534 ;;      Totals:         0       9       0       0       0       0       0
 20535 ;;Total ram usage:        9 bytes
 20536 ;; Hardware stack levels used:    1
 20537 ;; Hardware stack levels required when called:    4
 20538 ;; This function calls:
 20539 ;;		_toupper
 20540 ;; This function is called by:
 20541 ;;		_stristr
 20542 ;; This function uses a non-reentrant model
 20543 ;;
 20544                           
 20545                           	psect	text49
 20546  0053FE                     __ptext49:
 20547                           	opt stack 0
 20548  0053FE                     _strnicmp:
 20549                           	opt stack 24
 20550                           
 20551                           ; BSR set to: 0
 20552                           
 20553                           ; BSR set to: 0
 20554                           ;incstack = 0
 20555                           ;incstack = 0
 20556  0053FE  D027               	goto	l13093
 20557  005400                     l13083:
 20558                           
 20559                           ; BSR set to: 0
 20560  005400  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20561  005404  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20562  005408  0008               	tblrd		*
 20563  00540A  50F5               	movf	tablat,w,c
 20564  00540C  EC1B  F02E         	call	_toupper
 20565  005410  6F6A               	movwf	??_strnicmp& (0+255),b
 20566  005412  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20567  005416  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20568  00541A  50DF               	movf	indf2,w,c
 20569  00541C  EC1B  F02E         	call	_toupper
 20570  005420  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20571  005422  516A               	movf	??_strnicmp& (0+255),w,b
 20572  005424  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20573  005426  6F6C               	movwf	strnicmp@r& (0+255),b
 20574  005428  0100               	movlb	0	; () banked
 20575  00542A  676C               	tstfsz	strnicmp@r& (0+255),b
 20576  00542C  D006               	goto	l13087
 20577                           
 20578                           ; BSR set to: 0
 20579  00542E  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20580  005432  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20581  005436  50DF               	movf	indf2,w,c
 20582  005438  E106               	bnz	l13091
 20583  00543A                     l13087:
 20584                           
 20585                           ; BSR set to: 0
 20586  00543A  516C               	movf	strnicmp@r& (0+255),w,b
 20587  00543C  6F64               	movwf	?_strnicmp& (0+255),b
 20588  00543E  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20589  005440  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20590  005442  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20591  005444  D00E               	goto	l2510
 20592  005446                     l13091:
 20593                           
 20594                           ; BSR set to: 0
 20595  005446  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20596  005448  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20597  00544A  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20598  00544C  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20599  00544E                     l13093:
 20600                           
 20601                           ; BSR set to: 0
 20602  00544E  0768               	decf	strnicmp@len& (0+255),f,b
 20603  005450  A0D8               	btfss	status,0,c
 20604  005452  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20605  005454  0100               	movlb	0	; () banked
 20606  005456  2968               	incf	strnicmp@len& (0+255),w,b
 20607  005458  B4D8               	btfsc	status,2,c
 20608  00545A  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20609  00545C  E1D1               	bnz	l13083
 20610                           
 20611                           ; BSR set to: 0
 20612  00545E  6B64               	clrf	?_strnicmp& (0+255),b
 20613  005460  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20614  005462                     l2510:
 20615                           
 20616                           ; BSR set to: 0
 20617  005462  0012               	return	
 20618  005464                     __end_of_strnicmp:
 20619                           	opt stack 0
 20620                           tblptru	equ	0xFF8
 20621                           tblptrh	equ	0xFF7
 20622                           tblptrl	equ	0xFF6
 20623                           tablat	equ	0xFF5
 20624                           prodh	equ	0xFF4
 20625                           prodl	equ	0xFF3
 20626                           intcon	equ	0xFF2
 20627                           indf0	equ	0xFEF
 20628                           postinc0	equ	0xFEE
 20629                           fsr0h	equ	0xFEA
 20630                           fsr0l	equ	0xFE9
 20631                           wreg	equ	0xFE8
 20632                           indf1	equ	0xFE7
 20633                           postinc1	equ	0xFE6
 20634                           postdec1	equ	0xFE5
 20635                           fsr1h	equ	0xFE2
 20636                           fsr1l	equ	0xFE1
 20637                           indf2	equ	0xFDF
 20638                           postinc2	equ	0xFDE
 20639                           postdec2	equ	0xFDD
 20640                           plusw2	equ	0xFDB
 20641                           fsr2h	equ	0xFDA
 20642                           fsr2l	equ	0xFD9
 20643                           status	equ	0xFD8
 20644                           
 20645 ;; *************** function _toupper *****************
 20646 ;; Defined at:
 20647 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20648 ;; Parameters:    Size  Location     Type
 20649 ;;  c               1    wreg     unsigned char 
 20650 ;; Auto vars:     Size  Location     Type
 20651 ;;  c               1    0[BANK0 ] unsigned char 
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  1    wreg      unsigned char 
 20654 ;; Registers used:
 20655 ;;		wreg, status,2, status,0
 20656 ;; Tracked objects:
 20657 ;;		On entry : F/0
 20658 ;;		On exit  : F/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20661 ;;      Params:         0       0       0       0       0       0       0
 20662 ;;      Locals:         0       1       0       0       0       0       0
 20663 ;;      Temps:          0       0       0       0       0       0       0
 20664 ;;      Totals:         0       1       0       0       0       0       0
 20665 ;;Total ram usage:        1 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:    3
 20668 ;; This function calls:
 20669 ;;		Nothing
 20670 ;; This function is called by:
 20671 ;;		_strnicmp
 20672 ;;		_strichr
 20673 ;; This function uses a non-reentrant model
 20674 ;;
 20675                           
 20676                           	psect	text50
 20677  005C36                     __ptext50:
 20678                           	opt stack 0
 20679  005C36                     _toupper:
 20680                           	opt stack 24
 20681                           
 20682                           ; BSR set to: 0
 20683                           ;incstack = 0
 20684                           ;incstack = 0
 20685                           ;toupper@c stored from wreg
 20686  005C36  CFE8 F060          	movff	wreg,toupper@c
 20687                           
 20688                           ; BSR set to: 0
 20689  005C3A  0E7B               	movlw	123
 20690  005C3C  6160               	cpfslt	toupper@c& (0+255),b
 20691  005C3E  D004               	goto	l13111
 20692                           
 20693                           ; BSR set to: 0
 20694  005C40  0E60               	movlw	96
 20695  005C42  6560               	cpfsgt	toupper@c& (0+255),b
 20696  005C44  D001               	goto	l13111
 20697                           
 20698                           ; BSR set to: 0
 20699  005C46  9B60               	bcf	toupper@c& (0+255),5,b
 20700  005C48                     l13111:
 20701                           
 20702                           ; BSR set to: 0
 20703  005C48  5160               	movf	toupper@c& (0+255),w,b
 20704                           
 20705                           ; BSR set to: 0
 20706  005C4A  0012               	return	
 20707  005C4C                     __end_of_toupper:
 20708                           	opt stack 0
 20709                           tblptru	equ	0xFF8
 20710                           tblptrh	equ	0xFF7
 20711                           tblptrl	equ	0xFF6
 20712                           tablat	equ	0xFF5
 20713                           prodh	equ	0xFF4
 20714                           prodl	equ	0xFF3
 20715                           intcon	equ	0xFF2
 20716                           indf0	equ	0xFEF
 20717                           postinc0	equ	0xFEE
 20718                           fsr0h	equ	0xFEA
 20719                           fsr0l	equ	0xFE9
 20720                           wreg	equ	0xFE8
 20721                           indf1	equ	0xFE7
 20722                           postinc1	equ	0xFE6
 20723                           postdec1	equ	0xFE5
 20724                           fsr1h	equ	0xFE2
 20725                           fsr1l	equ	0xFE1
 20726                           indf2	equ	0xFDF
 20727                           postinc2	equ	0xFDE
 20728                           postdec2	equ	0xFDD
 20729                           plusw2	equ	0xFDB
 20730                           fsr2h	equ	0xFDA
 20731                           fsr2l	equ	0xFD9
 20732                           status	equ	0xFD8
 20733                           
 20734 ;; *************** function _strlen *****************
 20735 ;; Defined at:
 20736 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20737 ;; Parameters:    Size  Location     Type
 20738 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20739 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20740 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20741 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20742 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20743 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20744 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20745 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20746 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20747 ;;		 -> cmdbuf(80), 
 20748 ;; Auto vars:     Size  Location     Type
 20749 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20750 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20751 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20752 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20753 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20754 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20755 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20756 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20757 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20758 ;;		 -> cmdbuf(80), 
 20759 ;; Return value:  Size  Location     Type
 20760 ;;                  2    0[BANK0 ] unsigned int 
 20761 ;; Registers used:
 20762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20763 ;; Tracked objects:
 20764 ;;		On entry : F/0
 20765 ;;		On exit  : F/0
 20766 ;;		Unchanged: 0/0
 20767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20768 ;;      Params:         0       2       0       0       0       0       0
 20769 ;;      Locals:         0       2       0       0       0       0       0
 20770 ;;      Temps:          0       0       0       0       0       0       0
 20771 ;;      Totals:         0       4       0       0       0       0       0
 20772 ;;Total ram usage:        4 bytes
 20773 ;; Hardware stack levels used:    1
 20774 ;; Hardware stack levels required when called:    3
 20775 ;; This function calls:
 20776 ;;		Nothing
 20777 ;; This function is called by:
 20778 ;;		_doModeSLCAN
 20779 ;;		_receiveSendEventSLCAN
 20780 ;;		_printGUID
 20781 ;;		_hexStringToBytes
 20782 ;;		_stristr
 20783 ;; This function uses a non-reentrant model
 20784 ;;
 20785                           
 20786                           	psect	text51
 20787  0058EE                     __ptext51:
 20788                           	opt stack 0
 20789  0058EE                     _strlen:
 20790                           	opt stack 25
 20791                           
 20792                           ; BSR set to: 0
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;incstack = 0
 20796                           ;incstack = 0
 20797  0058EE  C060  F062         	movff	strlen@s,strlen@cp
 20798  0058F2  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20799  0058F6  D003               	goto	l12653
 20800  0058F8                     l12651:
 20801  0058F8  0100               	movlb	0	; () banked
 20802  0058FA  4B62               	infsnz	strlen@cp& (0+255),f,b
 20803  0058FC  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20804  0058FE                     l12653:
 20805                           
 20806                           ; BSR set to: 0
 20807  0058FE  5162               	movf	strlen@cp& (0+255),w,b
 20808  005900  6EF6               	movwf	tblptrl,c
 20809  005902  6EE9               	movwf	fsr0l,c
 20810  005904  0E05               	movlw	(high __ramtop+-1)
 20811  005906  6EEA               	movwf	fsr0h,c
 20812  005908  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20813  00590A  64EA               	cpfsgt	fsr0h,c
 20814  00590C  D003               	bra	u16437
 20815  00590E  6EEA               	movwf	fsr0h,c
 20816  005910  50EF               	movf	indf0,w,c
 20817  005912  D003               	bra	u16430
 20818  005914                     u16437:
 20819  005914  6EF7               	movwf	tblptrh,c
 20820  005916  0008               	tblrd		*
 20821  005918  50F5               	movf	tablat,w,c
 20822  00591A                     u16430:
 20823  00591A  0900               	iorlw	0
 20824  00591C  E1ED               	bnz	l12651
 20825  00591E  0100               	movlb	0	; () banked
 20826  005920  5160               	movf	strlen@s& (0+255),w,b
 20827  005922  5D62               	subwf	strlen@cp& (0+255),w,b
 20828  005924  6F60               	movwf	?_strlen& (0+255),b
 20829  005926  5161               	movf	(strlen@s+1)& (0+255),w,b
 20830  005928  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20831  00592A  6F61               	movwf	(?_strlen+1)& (0+255),b
 20832                           
 20833                           ; BSR set to: 0
 20834  00592C  0012               	return	
 20835  00592E                     __end_of_strlen:
 20836                           	opt stack 0
 20837                           tblptru	equ	0xFF8
 20838                           tblptrh	equ	0xFF7
 20839                           tblptrl	equ	0xFF6
 20840                           tablat	equ	0xFF5
 20841                           prodh	equ	0xFF4
 20842                           prodl	equ	0xFF3
 20843                           intcon	equ	0xFF2
 20844                           indf0	equ	0xFEF
 20845                           postinc0	equ	0xFEE
 20846                           fsr0h	equ	0xFEA
 20847                           fsr0l	equ	0xFE9
 20848                           wreg	equ	0xFE8
 20849                           indf1	equ	0xFE7
 20850                           postinc1	equ	0xFE6
 20851                           postdec1	equ	0xFE5
 20852                           fsr1h	equ	0xFE2
 20853                           fsr1l	equ	0xFE1
 20854                           indf2	equ	0xFDF
 20855                           postinc2	equ	0xFDE
 20856                           postdec2	equ	0xFDD
 20857                           plusw2	equ	0xFDB
 20858                           fsr2h	equ	0xFDA
 20859                           fsr2l	equ	0xFD9
 20860                           status	equ	0xFD8
 20861                           
 20862 ;; *************** function _receivePrintEventVerbose *****************
 20863 ;; Defined at:
 20864 ;;		line 1746 in file "main.c"
 20865 ;; Parameters:    Size  Location     Type
 20866 ;;		None
 20867 ;; Auto vars:     Size  Location     Type
 20868 ;;  i               1   69[BANK0 ] unsigned char 
 20869 ;; Return value:  Size  Location     Type
 20870 ;;                  1    wreg      enum E15660
 20871 ;; Registers used:
 20872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20873 ;; Tracked objects:
 20874 ;;		On entry : F/1
 20875 ;;		On exit  : 0/0
 20876 ;;		Unchanged: 0/0
 20877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20878 ;;      Params:         0       0       0       0       0       0       0
 20879 ;;      Locals:         0      13       0       0       0       0       0
 20880 ;;      Temps:          0       5       0       0       0       0       0
 20881 ;;      Totals:         0      18       0       0       0       0       0
 20882 ;;Total ram usage:       18 bytes
 20883 ;; Hardware stack levels used:    1
 20884 ;; Hardware stack levels required when called:    6
 20885 ;; This function calls:
 20886 ;;		_putsUSART
 20887 ;;		_sprintf
 20888 ;;		_getVSCPFrame
 20889 ;; This function is called by:
 20890 ;;		_doModeVerbose
 20891 ;; This function uses a non-reentrant model
 20892 ;;
 20893                           
 20894                           	psect	text52
 20895  002858                     __ptext52:
 20896                           	opt stack 0
 20897  002858                     _receivePrintEventVerbose:
 20898                           	opt stack 23
 20899                           
 20900                           ; BSR set to: 1
 20901                           ;main.c: 1747: uint8_t i;
 20902                           ;main.c: 1749: if (getVSCPFrame(&vscpClass,
 20903                           ;main.c: 1750: &vscpType,
 20904                           ;main.c: 1751: &vscpNodeId,
 20905                           ;main.c: 1752: &vscpPriority,
 20906                           ;main.c: 1753: &vscpSize,
 20907                           ;main.c: 1754: vscpData)) {
 20908                           
 20909                           ; BSR set to: 0
 20910                           ;incstack = 0
 20911                           ;incstack = 0
 20912  002858  0E01               	movlw	high _vscpClass
 20913  00285A  0100               	movlb	0	; () banked
 20914  00285C  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20915  00285E  0EAC               	movlw	low _vscpClass
 20916  002860  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20917  002862  0E01               	movlw	high _vscpType
 20918  002864  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20919  002866  0EB1               	movlw	low _vscpType
 20920  002868  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20921  00286A  0E01               	movlw	high _vscpNodeId
 20922  00286C  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20923  00286E  0EAE               	movlw	low _vscpNodeId
 20924  002870  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20925  002872  0E01               	movlw	high _vscpPriority
 20926  002874  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20927  002876  0EAF               	movlw	low _vscpPriority
 20928  002878  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20929  00287A  0E01               	movlw	high _vscpSize
 20930  00287C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20931  00287E  0EB0               	movlw	low _vscpSize
 20932  002880  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20933  002882  0E01               	movlw	high _vscpData
 20934  002884  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20935  002886  0EA4               	movlw	low _vscpData
 20936  002888  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20937  00288A  EC1E  F028         	call	_getVSCPFrame	;wreg free
 20938  00288E  0900               	iorlw	0
 20939  002890  E101 D141          	bz	l11383
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;main.c: 1757: cntRxFrames++;
 20943  002894  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20944  002896  0E00               	movlw	0
 20945  002898  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20946  00289A  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20947  00289C  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20948                           
 20949                           ;main.c: 1758: cntRxBytes += vscpSize;
 20950  00289E  0101               	movlb	1	; () banked
 20951  0028A0  51B0               	movf	_vscpSize& (0+255),w,b
 20952  0028A2  0100               	movlb	0	; () banked
 20953  0028A4  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20954  0028A6  0E00               	movlw	0
 20955  0028A8  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20956  0028AA  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20957  0028AC  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20958                           
 20959                           ; BSR set to: 0
 20960                           ;main.c: 1760: putsUSART((char *) "<Prio=");
 20961  0028AE  0E7F               	movlw	high STR_139
 20962  0028B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20963  0028B2  0E41               	movlw	low STR_139
 20964  0028B4  6F61               	movwf	?_putsUSART& (0+255),b
 20965  0028B6  EC4F  F02B         	call	_putsUSART	;wreg free
 20966                           
 20967                           ;main.c: 1761: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20968  0028BA  0101               	movlb	1	; () banked
 20969  0028BC  6700               	tstfsz	_bHex& (0+255),b
 20970  0028BE  D005               	goto	l11301
 20971                           
 20972                           ; BSR set to: 1
 20973  0028C0  0E7F               	movlw	high STR_57
 20974  0028C2  0100               	movlb	0	; () banked
 20975  0028C4  6F9A               	movwf	(_receivePrintEventVerbose$1277+1)& (0+255),b
 20976  0028C6  0EED               	movlw	low STR_57
 20977  0028C8  D004               	goto	L29
 20978  0028CA                     l11301:
 20979                           
 20980                           ; BSR set to: 1
 20981  0028CA  0E7F               	movlw	high STR_56
 20982  0028CC  0100               	movlb	0	; () banked
 20983  0028CE  6F9A               	movwf	(_receivePrintEventVerbose$1277+1)& (0+255),b
 20984  0028D0  0E64               	movlw	low STR_56
 20985  0028D2                     L29:
 20986  0028D2  6F99               	movwf	_receivePrintEventVerbose$1277& (0+255),b
 20987                           
 20988                           ; BSR set to: 0
 20989  0028D4  0E01               	movlw	high _wrkbuf
 20990  0028D6  0100               	movlb	0	; () banked
 20991  0028D8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20992  0028DA  0E54               	movlw	low _wrkbuf
 20993  0028DC  6F76               	movwf	?_sprintf& (0+255),b
 20994  0028DE  C099  F078         	movff	_receivePrintEventVerbose$1277,?_sprintf+2
 20995  0028E2  C09A  F079         	movff	_receivePrintEventVerbose$1277+1,?_sprintf+3
 20996  0028E6  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20997  0028EA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20998  0028EC  EC40  F00D         	call	_sprintf	;wreg free
 20999                           
 21000                           ; BSR set to: 0
 21001                           ;main.c: 1762: putsUSART(wrkbuf);
 21002  0028F0  0E01               	movlw	high _wrkbuf
 21003  0028F2  0100               	movlb	0	; () banked
 21004  0028F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21005  0028F6  0E54               	movlw	low _wrkbuf
 21006  0028F8  6F61               	movwf	?_putsUSART& (0+255),b
 21007  0028FA  EC4F  F02B         	call	_putsUSART	;wreg free
 21008                           
 21009                           ;main.c: 1763: putsUSART((char *) ",class=");
 21010  0028FE  0E7E               	movlw	high STR_142
 21011  002900  0100               	movlb	0	; () banked
 21012  002902  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21013  002904  0EF5               	movlw	low STR_142
 21014  002906  6F61               	movwf	?_putsUSART& (0+255),b
 21015  002908  EC4F  F02B         	call	_putsUSART	;wreg free
 21016                           
 21017                           ;main.c: 1764: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 21018  00290C  0101               	movlb	1	; () banked
 21019  00290E  6700               	tstfsz	_bHex& (0+255),b
 21020  002910  D005               	goto	l11313
 21021                           
 21022                           ; BSR set to: 1
 21023  002912  0E7F               	movlw	high STR_57
 21024  002914  0100               	movlb	0	; () banked
 21025  002916  6F9C               	movwf	(_receivePrintEventVerbose$1282+1)& (0+255),b
 21026  002918  0EED               	movlw	low STR_57
 21027  00291A  D004               	goto	L30
 21028  00291C                     l11313:
 21029                           
 21030                           ; BSR set to: 1
 21031  00291C  0E7F               	movlw	high STR_143
 21032  00291E  0100               	movlb	0	; () banked
 21033  002920  6F9C               	movwf	(_receivePrintEventVerbose$1282+1)& (0+255),b
 21034  002922  0E6B               	movlw	low STR_143
 21035  002924                     L30:
 21036  002924  6F9B               	movwf	_receivePrintEventVerbose$1282& (0+255),b
 21037                           
 21038                           ; BSR set to: 0
 21039  002926  0E01               	movlw	high _wrkbuf
 21040  002928  0100               	movlb	0	; () banked
 21041  00292A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21042  00292C  0E54               	movlw	low _wrkbuf
 21043  00292E  6F76               	movwf	?_sprintf& (0+255),b
 21044  002930  C09B  F078         	movff	_receivePrintEventVerbose$1282,?_sprintf+2
 21045  002934  C09C  F079         	movff	_receivePrintEventVerbose$1282+1,?_sprintf+3
 21046  002938  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 21047  00293C  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 21048  002940  EC40  F00D         	call	_sprintf	;wreg free
 21049                           
 21050                           ; BSR set to: 0
 21051                           ;main.c: 1765: putsUSART(wrkbuf);
 21052  002944  0E01               	movlw	high _wrkbuf
 21053  002946  0100               	movlb	0	; () banked
 21054  002948  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21055  00294A  0E54               	movlw	low _wrkbuf
 21056  00294C  6F61               	movwf	?_putsUSART& (0+255),b
 21057  00294E  EC4F  F02B         	call	_putsUSART	;wreg free
 21058                           
 21059                           ;main.c: 1766: putsUSART((char *) ",type=");
 21060  002952  0E7F               	movlw	high STR_145
 21061  002954  0100               	movlb	0	; () banked
 21062  002956  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21063  002958  0E33               	movlw	low STR_145
 21064  00295A  6F61               	movwf	?_putsUSART& (0+255),b
 21065  00295C  EC4F  F02B         	call	_putsUSART	;wreg free
 21066                           
 21067                           ;main.c: 1767: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21068  002960  0101               	movlb	1	; () banked
 21069  002962  6700               	tstfsz	_bHex& (0+255),b
 21070  002964  D005               	goto	l11325
 21071                           
 21072                           ; BSR set to: 1
 21073  002966  0E7F               	movlw	high STR_57
 21074  002968  0100               	movlb	0	; () banked
 21075  00296A  6F9E               	movwf	(_receivePrintEventVerbose$1287+1)& (0+255),b
 21076  00296C  0EED               	movlw	low STR_57
 21077  00296E  D004               	goto	L31
 21078  002970                     l11325:
 21079                           
 21080                           ; BSR set to: 1
 21081  002970  0E7F               	movlw	high STR_56
 21082  002972  0100               	movlb	0	; () banked
 21083  002974  6F9E               	movwf	(_receivePrintEventVerbose$1287+1)& (0+255),b
 21084  002976  0E64               	movlw	low STR_56
 21085  002978                     L31:
 21086  002978  6F9D               	movwf	_receivePrintEventVerbose$1287& (0+255),b
 21087                           
 21088                           ; BSR set to: 0
 21089  00297A  0E01               	movlw	high _wrkbuf
 21090  00297C  0100               	movlb	0	; () banked
 21091  00297E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21092  002980  0E54               	movlw	low _wrkbuf
 21093  002982  6F76               	movwf	?_sprintf& (0+255),b
 21094  002984  C09D  F078         	movff	_receivePrintEventVerbose$1287,?_sprintf+2
 21095  002988  C09E  F079         	movff	_receivePrintEventVerbose$1287+1,?_sprintf+3
 21096  00298C  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 21097  002990  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21098  002992  EC40  F00D         	call	_sprintf	;wreg free
 21099                           
 21100                           ; BSR set to: 0
 21101                           ;main.c: 1768: putsUSART(wrkbuf);
 21102  002996  0E01               	movlw	high _wrkbuf
 21103  002998  0100               	movlb	0	; () banked
 21104  00299A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21105  00299C  0E54               	movlw	low _wrkbuf
 21106  00299E  6F61               	movwf	?_putsUSART& (0+255),b
 21107  0029A0  EC4F  F02B         	call	_putsUSART	;wreg free
 21108                           
 21109                           ;main.c: 1769: putsUSART((char *) ",nodeid=");
 21110  0029A4  0E7E               	movlw	high STR_148
 21111  0029A6  0100               	movlb	0	; () banked
 21112  0029A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21113  0029AA  0EC3               	movlw	low STR_148
 21114  0029AC  6F61               	movwf	?_putsUSART& (0+255),b
 21115  0029AE  EC4F  F02B         	call	_putsUSART	;wreg free
 21116                           
 21117                           ;main.c: 1770: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21118  0029B2  0101               	movlb	1	; () banked
 21119  0029B4  6700               	tstfsz	_bHex& (0+255),b
 21120  0029B6  D005               	goto	l11337
 21121                           
 21122                           ; BSR set to: 1
 21123  0029B8  0E7F               	movlw	high STR_57
 21124  0029BA  0100               	movlb	0	; () banked
 21125  0029BC  6FA0               	movwf	(_receivePrintEventVerbose$1292+1)& (0+255),b
 21126  0029BE  0EED               	movlw	low STR_57
 21127  0029C0  D004               	goto	L32
 21128  0029C2                     l11337:
 21129                           
 21130                           ; BSR set to: 1
 21131  0029C2  0E7F               	movlw	high STR_56
 21132  0029C4  0100               	movlb	0	; () banked
 21133  0029C6  6FA0               	movwf	(_receivePrintEventVerbose$1292+1)& (0+255),b
 21134  0029C8  0E64               	movlw	low STR_56
 21135  0029CA                     L32:
 21136  0029CA  6F9F               	movwf	_receivePrintEventVerbose$1292& (0+255),b
 21137                           
 21138                           ; BSR set to: 0
 21139  0029CC  0E01               	movlw	high _wrkbuf
 21140  0029CE  0100               	movlb	0	; () banked
 21141  0029D0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21142  0029D2  0E54               	movlw	low _wrkbuf
 21143  0029D4  6F76               	movwf	?_sprintf& (0+255),b
 21144  0029D6  C09F  F078         	movff	_receivePrintEventVerbose$1292,?_sprintf+2
 21145  0029DA  C0A0  F079         	movff	_receivePrintEventVerbose$1292+1,?_sprintf+3
 21146  0029DE  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21147  0029E2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21148  0029E4  EC40  F00D         	call	_sprintf	;wreg free
 21149                           
 21150                           ; BSR set to: 0
 21151                           ;main.c: 1771: putsUSART(wrkbuf);
 21152  0029E8  0E01               	movlw	high _wrkbuf
 21153  0029EA  0100               	movlb	0	; () banked
 21154  0029EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21155  0029EE  0E54               	movlw	low _wrkbuf
 21156  0029F0  6F61               	movwf	?_putsUSART& (0+255),b
 21157  0029F2  EC4F  F02B         	call	_putsUSART	;wreg free
 21158                           
 21159                           ;main.c: 1772: putsUSART((char *) ",size=");
 21160  0029F6  0E7F               	movlw	high STR_151
 21161  0029F8  0100               	movlb	0	; () banked
 21162  0029FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21163  0029FC  0E3A               	movlw	low STR_151
 21164  0029FE  6F61               	movwf	?_putsUSART& (0+255),b
 21165  002A00  EC4F  F02B         	call	_putsUSART	;wreg free
 21166                           
 21167                           ;main.c: 1773: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21168  002A04  0101               	movlb	1	; () banked
 21169  002A06  6700               	tstfsz	_bHex& (0+255),b
 21170  002A08  D005               	goto	l11349
 21171                           
 21172                           ; BSR set to: 1
 21173  002A0A  0E7F               	movlw	high STR_57
 21174  002A0C  0100               	movlb	0	; () banked
 21175  002A0E  6FA2               	movwf	(_receivePrintEventVerbose$1297+1)& (0+255),b
 21176  002A10  0EED               	movlw	low STR_57
 21177  002A12  D004               	goto	L33
 21178  002A14                     l11349:
 21179                           
 21180                           ; BSR set to: 1
 21181  002A14  0E7F               	movlw	high STR_56
 21182  002A16  0100               	movlb	0	; () banked
 21183  002A18  6FA2               	movwf	(_receivePrintEventVerbose$1297+1)& (0+255),b
 21184  002A1A  0E64               	movlw	low STR_56
 21185  002A1C                     L33:
 21186  002A1C  6FA1               	movwf	_receivePrintEventVerbose$1297& (0+255),b
 21187                           
 21188                           ; BSR set to: 0
 21189  002A1E  0E01               	movlw	high _wrkbuf
 21190  002A20  0100               	movlb	0	; () banked
 21191  002A22  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21192  002A24  0E54               	movlw	low _wrkbuf
 21193  002A26  6F76               	movwf	?_sprintf& (0+255),b
 21194  002A28  C0A1  F078         	movff	_receivePrintEventVerbose$1297,?_sprintf+2
 21195  002A2C  C0A2  F079         	movff	_receivePrintEventVerbose$1297+1,?_sprintf+3
 21196  002A30  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21197  002A34  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21198  002A36  EC40  F00D         	call	_sprintf	;wreg free
 21199                           
 21200                           ; BSR set to: 0
 21201                           ;main.c: 1774: putsUSART(wrkbuf);
 21202  002A3A  0E01               	movlw	high _wrkbuf
 21203  002A3C  0100               	movlb	0	; () banked
 21204  002A3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21205  002A40  0E54               	movlw	low _wrkbuf
 21206  002A42  6F61               	movwf	?_putsUSART& (0+255),b
 21207  002A44  EC4F  F02B         	call	_putsUSART	;wreg free
 21208                           
 21209                           ;main.c: 1775: if (vscpSize > 0) {
 21210  002A48  0101               	movlb	1	; () banked
 21211  002A4A  51B0               	movf	_vscpSize& (0+255),w,b
 21212  002A4C  E054               	bz	l11377
 21213                           
 21214                           ; BSR set to: 1
 21215                           ;main.c: 1776: putsUSART((char *) ",Data=");
 21216  002A4E  0E7F               	movlw	high STR_154
 21217  002A50  0100               	movlb	0	; () banked
 21218  002A52  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21219  002A54  0E2C               	movlw	low STR_154
 21220  002A56  6F61               	movwf	?_putsUSART& (0+255),b
 21221  002A58  EC4F  F02B         	call	_putsUSART	;wreg free
 21222                           
 21223                           ;main.c: 1777: for (i = 0; i < vscpSize; i++) {
 21224  002A5C  0100               	movlb	0	; () banked
 21225  002A5E  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21226  002A60  D044               	goto	l11375
 21227  002A62                     l913:
 21228                           
 21229                           ; BSR set to: 0
 21230                           ;main.c: 1779: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21231  002A62  0101               	movlb	1	; () banked
 21232  002A64  6700               	tstfsz	_bHex& (0+255),b
 21233  002A66  D005               	goto	l11363
 21234                           
 21235                           ; BSR set to: 1
 21236  002A68  0E7F               	movlw	high STR_57
 21237  002A6A  0100               	movlb	0	; () banked
 21238  002A6C  6FA4               	movwf	(_receivePrintEventVerbose$1302+1)& (0+255),b
 21239  002A6E  0EED               	movlw	low STR_57
 21240  002A70  D004               	goto	L34
 21241  002A72                     l11363:
 21242                           
 21243                           ; BSR set to: 1
 21244  002A72  0E7F               	movlw	high STR_56
 21245  002A74  0100               	movlb	0	; () banked
 21246  002A76  6FA4               	movwf	(_receivePrintEventVerbose$1302+1)& (0+255),b
 21247  002A78  0E64               	movlw	low STR_56
 21248  002A7A                     L34:
 21249  002A7A  6FA3               	movwf	_receivePrintEventVerbose$1302& (0+255),b
 21250                           
 21251                           ; BSR set to: 0
 21252  002A7C  0E01               	movlw	high _wrkbuf
 21253  002A7E  0100               	movlb	0	; () banked
 21254  002A80  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21255  002A82  0E54               	movlw	low _wrkbuf
 21256  002A84  6F76               	movwf	?_sprintf& (0+255),b
 21257  002A86  C0A3  F078         	movff	_receivePrintEventVerbose$1302,?_sprintf+2
 21258  002A8A  C0A4  F079         	movff	_receivePrintEventVerbose$1302+1,?_sprintf+3
 21259  002A8E  0EA4               	movlw	low _vscpData
 21260  002A90  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21261  002A92  6ED9               	movwf	fsr2l,c
 21262  002A94  6ADA               	clrf	fsr2h,c
 21263  002A96  0E01               	movlw	high _vscpData
 21264  002A98  22DA               	addwfc	fsr2h,f,c
 21265  002A9A  50DF               	movf	indf2,w,c
 21266  002A9C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21267  002A9E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21268  002AA0  EC40  F00D         	call	_sprintf	;wreg free
 21269                           
 21270                           ; BSR set to: 0
 21271                           ;main.c: 1780: putsUSART(wrkbuf);
 21272  002AA4  0E01               	movlw	high _wrkbuf
 21273  002AA6  0100               	movlb	0	; () banked
 21274  002AA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21275  002AAA  0E54               	movlw	low _wrkbuf
 21276  002AAC  6F61               	movwf	?_putsUSART& (0+255),b
 21277  002AAE  EC4F  F02B         	call	_putsUSART	;wreg free
 21278                           
 21279                           ;main.c: 1781: if (i < (vscpSize - 1)) {
 21280  002AB2  0EFF               	movlw	255
 21281  002AB4  0101               	movlb	1	; () banked
 21282  002AB6  25B0               	addwf	_vscpSize& (0+255),w,b
 21283  002AB8  0100               	movlb	0	; () banked
 21284  002ABA  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21285  002ABC  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21286  002ABE  0EFF               	movlw	255
 21287  002AC0  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21288  002AC2  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21289  002AC4  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21290  002AC6  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21291  002AC8  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21292  002ACA  0A80               	xorlw	128
 21293  002ACC  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21294  002ACE  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21295  002AD0  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21296  002AD2  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21297  002AD4  0A80               	xorlw	128
 21298  002AD6  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21299  002AD8  E206               	bc	l11373
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;main.c: 1782: putsUSART((char *) ",");
 21303  002ADA  0E7F               	movlw	high STR_30
 21304  002ADC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21305  002ADE  0EF4               	movlw	low STR_30
 21306  002AE0  6F61               	movwf	?_putsUSART& (0+255),b
 21307  002AE2  EC4F  F02B         	call	_putsUSART	;wreg free
 21308  002AE6                     l11373:
 21309  002AE6  0100               	movlb	0	; () banked
 21310  002AE8  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21311  002AEA                     l11375:
 21312                           
 21313                           ; BSR set to: 0
 21314  002AEA  0101               	movlb	1	; () banked
 21315  002AEC  51B0               	movf	_vscpSize& (0+255),w,b
 21316  002AEE  0100               	movlb	0	; () banked
 21317  002AF0  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21318  002AF2  E208               	bc	l920
 21319  002AF4  D7B6               	goto	l913
 21320  002AF6                     l11377:
 21321                           
 21322                           ; BSR set to: 1
 21323                           ;main.c: 1786: putsUSART((char *) ",Data=none");
 21324  002AF6  0E7E               	movlw	high STR_158
 21325  002AF8  0100               	movlb	0	; () banked
 21326  002AFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21327  002AFC  0E91               	movlw	low STR_158
 21328  002AFE  6F61               	movwf	?_putsUSART& (0+255),b
 21329  002B00  EC4F  F02B         	call	_putsUSART	;wreg free
 21330  002B04                     l920:
 21331                           
 21332                           ;main.c: 1787: }
 21333                           ;main.c: 1788: putsUSART((char *) ">\r\n");
 21334  002B04  0E7F               	movlw	high STR_159
 21335  002B06  0100               	movlb	0	; () banked
 21336  002B08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21337  002B0A  0ED4               	movlw	low STR_159
 21338  002B0C  6F61               	movwf	?_putsUSART& (0+255),b
 21339  002B0E  EC4F  F02B         	call	_putsUSART	;wreg free
 21340                           
 21341                           ;main.c: 1789: return 1;
 21342  002B12  0E01               	movlw	1
 21343  002B14  D001               	goto	l921
 21344  002B16                     l11383:
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;main.c: 1790: }
 21348                           ;main.c: 1792: return 0;
 21349  002B16  0E00               	movlw	0
 21350  002B18                     l921:
 21351  002B18  0012               	return	
 21352  002B1A                     __end_of_receivePrintEventVerbose:
 21353                           	opt stack 0
 21354                           tblptru	equ	0xFF8
 21355                           tblptrh	equ	0xFF7
 21356                           tblptrl	equ	0xFF6
 21357                           tablat	equ	0xFF5
 21358                           prodh	equ	0xFF4
 21359                           prodl	equ	0xFF3
 21360                           intcon	equ	0xFF2
 21361                           indf0	equ	0xFEF
 21362                           postinc0	equ	0xFEE
 21363                           fsr0h	equ	0xFEA
 21364                           fsr0l	equ	0xFE9
 21365                           wreg	equ	0xFE8
 21366                           indf1	equ	0xFE7
 21367                           postinc1	equ	0xFE6
 21368                           postdec1	equ	0xFE5
 21369                           fsr1h	equ	0xFE2
 21370                           fsr1l	equ	0xFE1
 21371                           indf2	equ	0xFDF
 21372                           postinc2	equ	0xFDE
 21373                           postdec2	equ	0xFDD
 21374                           plusw2	equ	0xFDB
 21375                           fsr2h	equ	0xFDA
 21376                           fsr2l	equ	0xFD9
 21377                           status	equ	0xFD8
 21378                           
 21379 ;; *************** function _getVSCPFrame *****************
 21380 ;; Defined at:
 21381 ;;		line 2953 in file "main.c"
 21382 ;; Parameters:    Size  Location     Type
 21383 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21384 ;;		 -> vscpClass(2), 
 21385 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21386 ;;		 -> vscpType(1), 
 21387 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21388 ;;		 -> vscpNodeId(1), 
 21389 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21390 ;;		 -> vscpPriority(1), 
 21391 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21392 ;;		 -> vscpSize(1), 
 21393 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21394 ;;		 -> vscpData(8), 
 21395 ;; Auto vars:     Size  Location     Type
 21396 ;;  id              4   34[BANK0 ] unsigned long 
 21397 ;; Return value:  Size  Location     Type
 21398 ;;                  1    wreg      unsigned char 
 21399 ;; Registers used:
 21400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21401 ;; Tracked objects:
 21402 ;;		On entry : F/0
 21403 ;;		On exit  : F/0
 21404 ;;		Unchanged: 0/0
 21405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21406 ;;      Params:         0      12       0       0       0       0       0
 21407 ;;      Locals:         0       4       0       0       0       0       0
 21408 ;;      Temps:          0       4       0       0       0       0       0
 21409 ;;      Totals:         0      20       0       0       0       0       0
 21410 ;;Total ram usage:       20 bytes
 21411 ;; Hardware stack levels used:    1
 21412 ;; Hardware stack levels required when called:    5
 21413 ;; This function calls:
 21414 ;;		_getCANFrame
 21415 ;; This function is called by:
 21416 ;;		_receivePrintEventVerbose
 21417 ;;		_readRegister
 21418 ;;		_readRegisterExtended
 21419 ;;		_writeRegisterExtended
 21420 ;; This function uses a non-reentrant model
 21421 ;;
 21422                           
 21423                           	psect	text53
 21424  00503C                     __ptext53:
 21425                           	opt stack 0
 21426  00503C                     _getVSCPFrame:
 21427                           	opt stack 22
 21428                           
 21429                           ; BSR set to: 0
 21430                           ;main.c: 2954: uint32_t id;
 21431                           ;main.c: 2956: if (!getCANFrame(&id, pSize, pData)) {
 21432                           
 21433                           ;incstack = 0
 21434                           ;incstack = 0
 21435  00503C  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21436  005040  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21437  005044  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21438  005048  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21439  00504C  0E82               	movlw	getVSCPFrame@id& (0+255)
 21440  00504E  ECDD  F028         	call	_getCANFrame
 21441  005052  0900               	iorlw	0
 21442  005054  E102               	bnz	l12731
 21443                           
 21444                           ; BSR set to: 0
 21445                           ;main.c: 2957: return 0;
 21446  005056  0E00               	movlw	0
 21447  005058  D033               	goto	l1261
 21448  00505A                     l12731:
 21449                           
 21450                           ; BSR set to: 0
 21451                           ;main.c: 2958: }
 21452                           ;main.c: 2960: *pNodeId = id & 0x0ff;
 21453  00505A  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21454  00505E  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21455  005062  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21456                           
 21457                           ;main.c: 2961: *pvscptype = (id >> 8) & 0xff;
 21458  005066  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21459  00506A  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21460  00506E  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;main.c: 2962: *pvscpclass = (id >> 16) & 0x1ff;
 21464  005072  0100               	movlb	0	; () banked
 21465  005074  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21466  005076  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21467  005078  0E01               	movlw	1
 21468  00507A  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21469  00507C  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21470  00507E  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21471  005082  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21472  005086  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21473  00508A  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21474                           
 21475                           ; BSR set to: 0
 21476                           ;main.c: 2963: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21477  00508E  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21478  005092  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21479  005096  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21480  00509A  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21481  00509E  0E1B               	movlw	27
 21482  0050A0  D005               	goto	u16570
 21483  0050A2                     u16575:
 21484  0050A2  90D8               	bcf	status,0,c
 21485  0050A4  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21486  0050A6  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21487  0050A8  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21488  0050AA  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21489  0050AC                     u16570:
 21490  0050AC  2EE8               	decfsz	wreg,f,c
 21491  0050AE  D7F9               	goto	u16575
 21492  0050B0  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21493  0050B2  0B07               	andlw	7
 21494  0050B4  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21495  0050B8  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21496  0050BC  6EDF               	movwf	indf2,c
 21497                           
 21498                           ; BSR set to: 0
 21499                           ;main.c: 2965: return 1;
 21500  0050BE  0E01               	movlw	1
 21501  0050C0                     l1261:
 21502                           
 21503                           ; BSR set to: 0
 21504  0050C0  0012               	return	
 21505  0050C2                     __end_of_getVSCPFrame:
 21506                           	opt stack 0
 21507                           tblptru	equ	0xFF8
 21508                           tblptrh	equ	0xFF7
 21509                           tblptrl	equ	0xFF6
 21510                           tablat	equ	0xFF5
 21511                           prodh	equ	0xFF4
 21512                           prodl	equ	0xFF3
 21513                           intcon	equ	0xFF2
 21514                           indf0	equ	0xFEF
 21515                           postinc0	equ	0xFEE
 21516                           fsr0h	equ	0xFEA
 21517                           fsr0l	equ	0xFE9
 21518                           wreg	equ	0xFE8
 21519                           indf1	equ	0xFE7
 21520                           postinc1	equ	0xFE6
 21521                           postdec1	equ	0xFE5
 21522                           fsr1h	equ	0xFE2
 21523                           fsr1l	equ	0xFE1
 21524                           indf2	equ	0xFDF
 21525                           postinc2	equ	0xFDE
 21526                           postdec2	equ	0xFDD
 21527                           plusw2	equ	0xFDB
 21528                           fsr2h	equ	0xFDA
 21529                           fsr2l	equ	0xFD9
 21530                           status	equ	0xFD8
 21531                           
 21532 ;; *************** function _getCANFrame *****************
 21533 ;; Defined at:
 21534 ;;		line 2989 in file "main.c"
 21535 ;; Parameters:    Size  Location     Type
 21536 ;;  pid             1    wreg     PTR unsigned long 
 21537 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21538 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21539 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21540 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21541 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21542 ;; Auto vars:     Size  Location     Type
 21543 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21544 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21545 ;; Return value:  Size  Location     Type
 21546 ;;                  1    wreg      unsigned char 
 21547 ;; Registers used:
 21548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21549 ;; Tracked objects:
 21550 ;;		On entry : F/0
 21551 ;;		On exit  : F/0
 21552 ;;		Unchanged: 0/0
 21553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21554 ;;      Params:         0       4       0       0       0       0       0
 21555 ;;      Locals:         0       1       0       0       0       0       0
 21556 ;;      Temps:          0       0       0       0       0       0       0
 21557 ;;      Totals:         0       5       0       0       0       0       0
 21558 ;;Total ram usage:        5 bytes
 21559 ;; Hardware stack levels used:    1
 21560 ;; Hardware stack levels required when called:    4
 21561 ;; This function calls:
 21562 ;;		_fifo_read
 21563 ;; This function is called by:
 21564 ;;		_receiveSendEventCANAL
 21565 ;;		_receiveSendMultiEventCANAL
 21566 ;;		_receiveSendEventSLCAN
 21567 ;;		_getVSCPFrame
 21568 ;; This function uses a non-reentrant model
 21569 ;;
 21570                           
 21571                           	psect	text54
 21572  0051BA                     __ptext54:
 21573                           	opt stack 0
 21574  0051BA                     _getCANFrame:
 21575                           	opt stack 24
 21576                           
 21577                           ; BSR set to: 0
 21578                           ;incstack = 0
 21579                           ;incstack = 0
 21580                           ;getCANFrame@pid stored from wreg
 21581  0051BA  CFE8 F071          	movff	wreg,getCANFrame@pid
 21582                           
 21583                           ; BSR set to: 0
 21584                           ;main.c: 3010: if ( canrxcount ) {
 21585  0051BE  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21586  0051C0  E00F               	bz	l12749
 21587                           
 21588                           ; BSR set to: 0
 21589                           ;main.c: 3012: (INTCONbits.GIE = 0);
 21590  0051C2  9EF2               	bcf	intcon,7,c	;volatile
 21591                           
 21592                           ; BSR set to: 0
 21593                           ;main.c: 3015: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21594  0051C4  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21595  0051C8  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21596  0051CA  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21597  0051CC  0E04               	movlw	4
 21598  0051CE  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21599  0051D0  0E40               	movlw	_canInputFifo& (0+255)
 21600  0051D2  ECDE  F023         	call	_fifo_read
 21601  0051D6  5160               	movf	?_fifo_read& (0+255),w,b
 21602  0051D8  0A04               	xorlw	4
 21603  0051DA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21604  0051DC  E003               	bz	l12753
 21605  0051DE                     l12747:
 21606                           
 21607                           ; BSR set to: 0
 21608                           ;main.c: 3016: (INTCONbits.GIE = 1);
 21609  0051DE  8EF2               	bsf	intcon,7,c	;volatile
 21610  0051E0                     l12749:
 21611                           
 21612                           ; BSR set to: 0
 21613                           ;main.c: 3017: return 0;
 21614  0051E0  0E00               	movlw	0
 21615  0051E2  D026               	goto	l1270
 21616  0051E4                     l12753:
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;main.c: 3018: }
 21620                           ;main.c: 3021: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21621  0051E4  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21622  0051E8  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21623  0051EC  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21624  0051EE  0E01               	movlw	1
 21625  0051F0  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21626  0051F2  0E40               	movlw	_canInputFifo& (0+255)
 21627  0051F4  ECDE  F023         	call	_fifo_read
 21628  0051F8  0560               	decf	?_fifo_read& (0+255),w,b
 21629  0051FA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21630  0051FC  E1F0               	bnz	l12747
 21631                           
 21632                           ; BSR set to: 0
 21633                           ;main.c: 3024: }
 21634                           ;main.c: 3027: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21635  0051FE  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21636  005202  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21637  005206  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21638  00520A  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21639  00520E  50DF               	movf	indf2,w,c
 21640  005210  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21641  005212  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21642  005214  0E40               	movlw	_canInputFifo& (0+255)
 21643  005216  ECDE  F023         	call	_fifo_read
 21644  00521A  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21645  00521E  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21646  005222  50DF               	movf	indf2,w,c
 21647  005224  1960               	xorwf	?_fifo_read& (0+255),w,b
 21648  005226  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21649  005228  E1DA               	bnz	l12747
 21650                           
 21651                           ; BSR set to: 0
 21652                           ;main.c: 3030: }
 21653                           ;main.c: 3032: canrxcount--;
 21654  00522A  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21655                           
 21656                           ; BSR set to: 0
 21657                           ;main.c: 3034: (INTCONbits.GIE = 1);
 21658  00522C  8EF2               	bsf	intcon,7,c	;volatile
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;main.c: 3036: return 1;
 21662  00522E  0E01               	movlw	1
 21663  005230                     l1270:
 21664                           
 21665                           ; BSR set to: 0
 21666  005230  0012               	return	
 21667  005232                     __end_of_getCANFrame:
 21668                           	opt stack 0
 21669                           tblptru	equ	0xFF8
 21670                           tblptrh	equ	0xFF7
 21671                           tblptrl	equ	0xFF6
 21672                           tablat	equ	0xFF5
 21673                           prodh	equ	0xFF4
 21674                           prodl	equ	0xFF3
 21675                           intcon	equ	0xFF2
 21676                           indf0	equ	0xFEF
 21677                           postinc0	equ	0xFEE
 21678                           fsr0h	equ	0xFEA
 21679                           fsr0l	equ	0xFE9
 21680                           wreg	equ	0xFE8
 21681                           indf1	equ	0xFE7
 21682                           postinc1	equ	0xFE6
 21683                           postdec1	equ	0xFE5
 21684                           fsr1h	equ	0xFE2
 21685                           fsr1l	equ	0xFE1
 21686                           indf2	equ	0xFDF
 21687                           postinc2	equ	0xFDE
 21688                           postdec2	equ	0xFDD
 21689                           plusw2	equ	0xFDB
 21690                           fsr2h	equ	0xFDA
 21691                           fsr2l	equ	0xFD9
 21692                           status	equ	0xFD8
 21693                           
 21694 ;; *************** function _fifo_read *****************
 21695 ;; Defined at:
 21696 ;;		line 29 in file "fifo.c"
 21697 ;; Parameters:    Size  Location     Type
 21698 ;;  f               1    wreg     PTR struct .
 21699 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21700 ;;  buf             2    0[BANK0 ] PTR void 
 21701 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21702 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21703 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21704 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21705 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21706 ;; Auto vars:     Size  Location     Type
 21707 ;;  f               1   12[BANK0 ] PTR struct .
 21708 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21709 ;;  i               2   10[BANK0 ] unsigned short 
 21710 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21711 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21712 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21713 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21714 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21715 ;; Return value:  Size  Location     Type
 21716 ;;                  2    0[BANK0 ] unsigned short 
 21717 ;; Registers used:
 21718 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21719 ;; Tracked objects:
 21720 ;;		On entry : F/0
 21721 ;;		On exit  : F/0
 21722 ;;		Unchanged: 0/0
 21723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21724 ;;      Params:         0       4       0       0       0       0       0
 21725 ;;      Locals:         0       5       0       0       0       0       0
 21726 ;;      Temps:          0       4       0       0       0       0       0
 21727 ;;      Totals:         0      13       0       0       0       0       0
 21728 ;;Total ram usage:       13 bytes
 21729 ;; Hardware stack levels used:    1
 21730 ;; Hardware stack levels required when called:    3
 21731 ;; This function calls:
 21732 ;;		Nothing
 21733 ;; This function is called by:
 21734 ;;		_main
 21735 ;;		_doModeVerbose
 21736 ;;		_doModeVscp
 21737 ;;		_doModeSLCAN
 21738 ;;		_getCANFrame
 21739 ;; This function uses a non-reentrant model
 21740 ;;
 21741                           
 21742                           	psect	text55
 21743  0047BC                     __ptext55:
 21744                           	opt stack 0
 21745  0047BC                     _fifo_read:
 21746                           	opt stack 24
 21747                           
 21748                           ; BSR set to: 0
 21749                           ;incstack = 0
 21750                           ;incstack = 0
 21751                           ;fifo_read@f stored from wreg
 21752  0047BC  CFE8 F06C          	movff	wreg,fifo_read@f
 21753                           
 21754                           ; BSR set to: 0
 21755                           ;fifo.c: 30: uint16_t i;
 21756                           ;fifo.c: 31: uint8_t *p;
 21757                           ;fifo.c: 32: p = buf;
 21758  0047C0  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21759  0047C4  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21760                           
 21761                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21762  0047C8  6B6A               	clrf	fifo_read@i& (0+255),b
 21763  0047CA  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21764  0047CC  D03E               	goto	l10135
 21765  0047CE                     l10121:
 21766                           
 21767                           ; BSR set to: 0
 21768                           ;fifo.c: 36: if (f->tail != f->head) {
 21769  0047CE  516C               	movf	fifo_read@f& (0+255),w,b
 21770  0047D0  6ED9               	movwf	fsr2l,c
 21771  0047D2  6ADA               	clrf	fsr2h,c
 21772  0047D4  0E02               	movlw	2
 21773  0047D6  D843               	call	PL34	;call to abstracted procedure
 21774  0047D8  B4D8               	btfsc	status,2,c
 21775  0047DA  18E7               	xorwf	indf1,w,c
 21776  0047DC  E02F               	bz	l1520
 21777                           
 21778                           ; BSR set to: 0
 21779                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21780  0047DE  D84E               	call	PL110	;call to abstracted procedure
 21781  0047E0  CFDE F064          	movff	postinc2,??_fifo_read
 21782  0047E4  CFDD F065          	movff	postdec2,??_fifo_read+1
 21783  0047E8  516C               	movf	fifo_read@f& (0+255),w,b
 21784  0047EA  6ED9               	movwf	fsr2l,c
 21785  0047EC  6ADA               	clrf	fsr2h,c
 21786  0047EE  CFDE F066          	movff	postinc2,??_fifo_read+2
 21787  0047F2  CFDD F067          	movff	postdec2,??_fifo_read+3
 21788  0047F6  5164               	movf	??_fifo_read& (0+255),w,b
 21789  0047F8  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21790  0047FA  6ED9               	movwf	fsr2l,c
 21791  0047FC  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21792  0047FE  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21793  004800  6EDA               	movwf	fsr2h,c
 21794  004802  C068  FFE1         	movff	fifo_read@p,fsr1l
 21795  004806  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21796  00480A  CFDF FFE7          	movff	indf2,indf1
 21797                           
 21798                           ; BSR set to: 0
 21799  00480E  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21800  004810  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21801                           
 21802                           ; BSR set to: 0
 21803                           ;fifo.c: 38: f->tail++;
 21804  004812  516C               	movf	fifo_read@f& (0+255),w,b
 21805  004814  6ED9               	movwf	fsr2l,c
 21806  004816  6ADA               	clrf	fsr2h,c
 21807  004818  0E04               	movlw	4
 21808  00481A  26D9               	addwf	fsr2l,f,c
 21809  00481C  6ADA               	clrf	fsr2h,c
 21810  00481E  2ADE               	incf	postinc2,f,c
 21811  004820  0E00               	movlw	0
 21812  004822  22DD               	addwfc	postdec2,f,c
 21813                           
 21814                           ; BSR set to: 0
 21815                           ;fifo.c: 39: if (f->tail == f->size) {
 21816  004824  516C               	movf	fifo_read@f& (0+255),w,b
 21817  004826  6ED9               	movwf	fsr2l,c
 21818  004828  6ADA               	clrf	fsr2h,c
 21819  00482A  0E06               	movlw	6
 21820  00482C  D818               	call	PL34	;call to abstracted procedure
 21821  00482E  B4D8               	btfsc	status,2,c
 21822  004830  18E7               	xorwf	indf1,w,c
 21823  004832  E109               	bnz	l10133
 21824                           
 21825                           ; BSR set to: 0
 21826                           ;fifo.c: 40: f->tail = 0;
 21827  004834  D823               	call	PL110	;call to abstracted procedure
 21828  004836  6ADE               	clrf	postinc2,c
 21829  004838  6ADD               	clrf	postdec2,c
 21830  00483A  D005               	goto	l10133
 21831  00483C                     l1520:
 21832                           
 21833                           ; BSR set to: 0
 21834                           ;fifo.c: 43: else {
 21835                           ;fifo.c: 44: return i;
 21836  00483C  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21837  004840  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21838  004844  D00B               	goto	l1523
 21839  004846                     l10133:
 21840                           
 21841                           ; BSR set to: 0
 21842  004846  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21843  004848  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21844  00484A                     l10135:
 21845                           
 21846                           ; BSR set to: 0
 21847  00484A  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21848  00484C  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21849  00484E  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21850  004850  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21851  004852  E3BD               	bnc	l10121
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;fifo.c: 45: }
 21855                           ;fifo.c: 47: }
 21856                           ;fifo.c: 49: return nbytes;
 21857  004854  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21858  004858  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21859  00485C                     l1523:
 21860                           
 21861                           ; BSR set to: 0
 21862  00485C  0012               	return	
 21863  00485E                     __end_of_fifo_read:
 21864                           	opt stack 0
 21865  00485E                     PL34:
 21866                           	opt stack 24
 21867  00485E  26D9               	addwf	fsr2l,f,c
 21868  004860  6ADA               	clrf	fsr2h,c
 21869  004862  516C               	movf	fifo_read@f& (0+255),w,b
 21870  004864  6EE1               	movwf	fsr1l,c
 21871  004866  6AE2               	clrf	fsr1h,c
 21872  004868  0E04               	movlw	4
 21873  00486A  26E1               	addwf	fsr1l,f,c
 21874  00486C  6AE2               	clrf	fsr1h,c
 21875  00486E  52E6               	movf	postinc1,f,c
 21876  004870  52DE               	movf	postinc2,f,c
 21877  004872  50DD               	movf	postdec2,w,c
 21878  004874  18E5               	xorwf	postdec1,w,c
 21879  004876  CFDF FFE8          	movff	indf2,wreg
 21880  00487A  0012               	return	
 21881  00487C                     __end_ofPL34:
 21882                           	opt stack 0
 21883  00487C                     PL110:
 21884                           	opt stack 24
 21885  00487C  516C               	movf	fifo_read@f& (0+255),w,b
 21886  00487E  6ED9               	movwf	fsr2l,c
 21887  004880  6ADA               	clrf	fsr2h,c
 21888  004882  0E04               	movlw	4
 21889  004884  26D9               	addwf	fsr2l,f,c
 21890  004886  6ADA               	clrf	fsr2h,c
 21891  004888  0012               	return	
 21892  00488A                     __end_ofPL110:
 21893                           	opt stack 0
 21894                           tblptru	equ	0xFF8
 21895                           tblptrh	equ	0xFF7
 21896                           tblptrl	equ	0xFF6
 21897                           tablat	equ	0xFF5
 21898                           prodh	equ	0xFF4
 21899                           prodl	equ	0xFF3
 21900                           intcon	equ	0xFF2
 21901                           indf0	equ	0xFEF
 21902                           postinc0	equ	0xFEE
 21903                           fsr0h	equ	0xFEA
 21904                           fsr0l	equ	0xFE9
 21905                           wreg	equ	0xFE8
 21906                           indf1	equ	0xFE7
 21907                           postinc1	equ	0xFE6
 21908                           postdec1	equ	0xFE5
 21909                           fsr1h	equ	0xFE2
 21910                           fsr1l	equ	0xFE1
 21911                           indf2	equ	0xFDF
 21912                           postinc2	equ	0xFDE
 21913                           postdec2	equ	0xFDD
 21914                           plusw2	equ	0xFDB
 21915                           fsr2h	equ	0xFDA
 21916                           fsr2l	equ	0xFD9
 21917                           status	equ	0xFD8
 21918                           
 21919 ;; *************** function _sprintf *****************
 21920 ;; Defined at:
 21921 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21922 ;; Parameters:    Size  Location     Type
 21923 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21924 ;;		 -> wrkbuf(80), 
 21925 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21926 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21927 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21928 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21929 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21930 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21931 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21932 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21933 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21934 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21935 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21936 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21937 ;; Auto vars:     Size  Location     Type
 21938 ;;  idx             1   33[BANK0 ] unsigned char 
 21939 ;;  _val            4   45[BANK0 ] struct .
 21940 ;;  flag            2   50[BANK0 ] unsigned short 
 21941 ;;  width           2   43[BANK0 ] int 
 21942 ;;  prec            2   41[BANK0 ] int 
 21943 ;;  c               1   49[BANK0 ] char 
 21944 ;;  ap              1   40[BANK0 ] PTR void [1]
 21945 ;;		 -> ?_sprintf(2), 
 21946 ;; Return value:  Size  Location     Type
 21947 ;;                  2   22[BANK0 ] int 
 21948 ;; Registers used:
 21949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21950 ;; Tracked objects:
 21951 ;;		On entry : F/0
 21952 ;;		On exit  : F/0
 21953 ;;		Unchanged: 0/0
 21954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21955 ;;      Params:         0       8       0       0       0       0       0
 21956 ;;      Locals:         0      19       0       0       0       0       0
 21957 ;;      Temps:          0       3       0       0       0       0       0
 21958 ;;      Totals:         0      30       0       0       0       0       0
 21959 ;;Total ram usage:       30 bytes
 21960 ;; Hardware stack levels used:    1
 21961 ;; Hardware stack levels required when called:    4
 21962 ;; This function calls:
 21963 ;;		_isdigit
 21964 ;;		___lldiv
 21965 ;;		___llmod
 21966 ;;		___wmul
 21967 ;; This function is called by:
 21968 ;;		_doModeVerbose
 21969 ;;		_receivePrintEventVerbose
 21970 ;;		_printStatistics
 21971 ;;		_printErrors
 21972 ;; This function uses a non-reentrant model
 21973 ;;
 21974                           
 21975                           	psect	text56
 21976  001A80                     __ptext56:
 21977                           	opt stack 0
 21978  001A80                     _sprintf:
 21979                           	opt stack 25
 21980                           
 21981                           ; BSR set to: 0
 21982                           ;doprnt.c: 494: va_list ap;
 21983                           ;doprnt.c: 499: signed char c;
 21984                           ;doprnt.c: 501: int width;
 21985                           ;doprnt.c: 504: int prec;
 21986                           ;doprnt.c: 508: unsigned short flag;
 21987                           ;doprnt.c: 527: union {
 21988                           ;doprnt.c: 528: unsigned long _val;
 21989                           ;doprnt.c: 529: struct {
 21990                           ;doprnt.c: 530: const char * _cp;
 21991                           ;doprnt.c: 531: unsigned _len;
 21992                           ;doprnt.c: 532: } _str;
 21993                           ;doprnt.c: 533: } _val;
 21994                           ;doprnt.c: 542: *ap = __va_start();
 21995                           
 21996                           ; BSR set to: 0
 21997                           ;incstack = 0
 21998                           ;incstack = 0
 21999  001A80  0E7A               	movlw	low (?_sprintf+4)
 22000  001A82  6F88               	movwf	sprintf@ap& (0+255),b
 22001                           
 22002                           ;doprnt.c: 545: while(c = *f++) {
 22003  001A84  D32C               	goto	l12073
 22004  001A86                     l11739:
 22005                           
 22006                           ; BSR set to: 0
 22007                           ;doprnt.c: 547: if(c != '%')
 22008  001A86  5191               	movf	sprintf@c& (0+255),w,b
 22009  001A88  0A25               	xorlw	37
 22010  001A8A  E009               	bz	l1607
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;doprnt.c: 549: {
 22014                           ;doprnt.c: 550: ((*sp++ = (c)));
 22015  001A8C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22016  001A90  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22017  001A94  C091  FFDF         	movff	sprintf@c,indf2
 22018                           
 22019                           ; BSR set to: 0
 22020  001A98  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22021  001A9A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22022                           
 22023                           ;doprnt.c: 551: continue;
 22024  001A9C  D320               	goto	l12073
 22025  001A9E                     l1607:
 22026                           
 22027                           ; BSR set to: 0
 22028                           ;doprnt.c: 552: }
 22029                           ;doprnt.c: 555: width = 0;
 22030  001A9E  6B8B               	clrf	sprintf@width& (0+255),b
 22031  001AA0  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22032                           
 22033                           ;doprnt.c: 557: flag = 0;
 22034  001AA2  6B92               	clrf	sprintf@flag& (0+255),b
 22035  001AA4  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22036  001AA6  D009               	goto	l11755
 22037  001AA8                     l11745:
 22038                           
 22039                           ; BSR set to: 0
 22040                           ;doprnt.c: 563: flag |= 0x08;
 22041  001AA8  8792               	bsf	sprintf@flag& (0+255),3,b
 22042  001AAA  D005               	goto	L35
 22043  001AAC                     l11747:
 22044                           
 22045                           ; BSR set to: 0
 22046                           ;doprnt.c: 570: flag |= 0x01;
 22047  001AAC  8192               	bsf	sprintf@flag& (0+255),0,b
 22048  001AAE  D003               	goto	L35
 22049  001AB0                     l11749:
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;doprnt.c: 583: flag |= 0x800;
 22053  001AB0  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22054  001AB2  D001               	goto	L35
 22055  001AB4                     l11751:
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;doprnt.c: 589: flag |= 0x04;
 22059  001AB4  8592               	bsf	sprintf@flag& (0+255),2,b
 22060  001AB6                     L35:
 22061                           
 22062                           ;doprnt.c: 590: f++;
 22063  001AB6  4B78               	infsnz	sprintf@f& (0+255),f,b
 22064  001AB8  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22065  001ABA                     l11755:
 22066                           
 22067                           ; BSR set to: 0
 22068  001ABA  C078  FFF6         	movff	sprintf@f,tblptrl
 22069  001ABE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22070  001AC2  0008               	tblrd		*
 22071  001AC4  50F5               	movf	tablat,w,c
 22072                           
 22073                           ; Switch size 1, requested type "space"
 22074                           ; Number of cases is 4, Range of values is 32 to 48
 22075                           ; switch strategies available:
 22076                           ; Name         Instructions Cycles
 22077                           ; simple_byte           13     7 (average)
 22078                           ;	Chosen strategy is simple_byte
 22079  001AC6  0A20               	xorlw	32	; case 32
 22080  001AC8  E0F1               	bz	l11747
 22081  001ACA  0A03               	xorlw	3	; case 35
 22082  001ACC  E0F1               	bz	l11749
 22083  001ACE  0A0E               	xorlw	14	; case 45
 22084  001AD0  E0EB               	bz	l11745
 22085  001AD2  0A1D               	xorlw	29	; case 48
 22086  001AD4  E0EF               	bz	l11751
 22087                           
 22088                           ; BSR set to: 0
 22089                           ;doprnt.c: 602: if(flag & 0x08)
 22090  001AD6  B792               	btfsc	sprintf@flag& (0+255),3,b
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;doprnt.c: 603: flag &= ~0x04;
 22094  001AD8  9592               	bcf	sprintf@flag& (0+255),2,b
 22095                           
 22096                           ; BSR set to: 0
 22097                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22098  001ADA  C078  FFF6         	movff	sprintf@f,tblptrl
 22099  001ADE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22100  001AE2  0008               	tblrd		*
 22101  001AE4  50F5               	movf	tablat,w,c
 22102  001AE6  ECE0  F02D         	call	_isdigit
 22103  001AEA  E325               	bnc	l11771
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;doprnt.c: 607: width = 0;
 22107  001AEC  6B8B               	clrf	sprintf@width& (0+255),b
 22108  001AEE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22109  001AF0                     l11763:
 22110                           
 22111                           ; BSR set to: 0
 22112                           ;doprnt.c: 609: width *= 10;
 22113  001AF0  C08B  F060         	movff	sprintf@width,?___wmul
 22114  001AF4  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22115  001AF8  6B63               	clrf	(?___wmul+3)& (0+255),b
 22116  001AFA  0E0A               	movlw	10
 22117  001AFC  6F62               	movwf	(?___wmul+2)& (0+255),b
 22118  001AFE  EC81  F02D         	call	___wmul	;wreg free
 22119  001B02  C060  F08B         	movff	?___wmul,sprintf@width
 22120  001B06  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22121                           
 22122                           ; BSR set to: 0
 22123                           ;doprnt.c: 610: width += *f++ - '0';
 22124  001B0A  C078  FFF6         	movff	sprintf@f,tblptrl
 22125  001B0E  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22126  001B12  0008               	tblrd		*
 22127  001B14  CFF5 F07E          	movff	tablat,??_sprintf
 22128  001B18  0ED0               	movlw	208
 22129  001B1A  257E               	addwf	??_sprintf& (0+255),w,b
 22130  001B1C  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22131  001B1E  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22132  001B20  0EFF               	movlw	255
 22133  001B22  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22134  001B24  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22135  001B26  278B               	addwf	sprintf@width& (0+255),f,b
 22136  001B28  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22137  001B2A  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22138                           
 22139                           ; BSR set to: 0
 22140                           
 22141                           ; BSR set to: 0
 22142                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22143  001B2C  DB36               	call	PL88	;call to abstracted procedure
 22144  001B2E  ECE0  F02D         	call	_isdigit
 22145  001B32  E314               	bnc	l11779
 22146  001B34  D7DD               	goto	l11763
 22147  001B36                     l11771:
 22148                           
 22149                           ; BSR set to: 0
 22150  001B36  C078  FFF6         	movff	sprintf@f,tblptrl
 22151  001B3A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22152  001B3E  0008               	tblrd		*
 22153  001B40  50F5               	movf	tablat,w,c
 22154  001B42  0A2A               	xorlw	42
 22155  001B44  E10B               	bnz	l11779
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22159  001B46  5188               	movf	sprintf@ap& (0+255),w,b
 22160  001B48  6ED9               	movwf	fsr2l,c
 22161  001B4A  6ADA               	clrf	fsr2h,c
 22162  001B4C  CFDE F08B          	movff	postinc2,sprintf@width
 22163  001B50  CFDD F08C          	movff	postdec2,sprintf@width+1
 22164                           
 22165                           ; BSR set to: 0
 22166  001B54  0E02               	movlw	2
 22167  001B56  2788               	addwf	sprintf@ap& (0+255),f,b
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;doprnt.c: 615: f++;
 22171  001B58  4B78               	infsnz	sprintf@f& (0+255),f,b
 22172  001B5A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22173  001B5C                     l11779:
 22174                           
 22175                           ; BSR set to: 0
 22176                           ;doprnt.c: 617: }
 22177                           ;doprnt.c: 620: if(*f == '.') {
 22178  001B5C  C078  FFF6         	movff	sprintf@f,tblptrl
 22179  001B60  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22180  001B64  0008               	tblrd		*
 22181  001B66  50F5               	movf	tablat,w,c
 22182  001B68  0A2E               	xorlw	46
 22183  001B6A  E137               	bnz	l1623
 22184                           
 22185                           ; BSR set to: 0
 22186                           ;doprnt.c: 621: flag |= 0x4000;
 22187  001B6C  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22188                           
 22189                           ;doprnt.c: 622: f++;
 22190                           
 22191                           ; BSR set to: 0
 22192                           ;doprnt.c: 624: if(*f == '*') {
 22193  001B6E  DB15               	call	PL88	;call to abstracted procedure
 22194  001B70  0A2A               	xorlw	42
 22195  001B72  E10C               	bnz	l1624
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22199  001B74  5188               	movf	sprintf@ap& (0+255),w,b
 22200  001B76  6ED9               	movwf	fsr2l,c
 22201  001B78  6ADA               	clrf	fsr2h,c
 22202  001B7A  CFDE F089          	movff	postinc2,sprintf@prec
 22203  001B7E  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22204                           
 22205                           ; BSR set to: 0
 22206  001B82  0E02               	movlw	2
 22207  001B84  2788               	addwf	sprintf@ap& (0+255),f,b
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;doprnt.c: 626: f++;
 22211  001B86  4B78               	infsnz	sprintf@f& (0+255),f,b
 22212  001B88  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22213                           
 22214                           ;doprnt.c: 627: } else
 22215  001B8A  D088               	goto	l11849
 22216  001B8C                     l1624:
 22217                           
 22218                           ; BSR set to: 0
 22219                           ;doprnt.c: 629: {
 22220                           ;doprnt.c: 630: prec = 0;
 22221  001B8C  6B89               	clrf	sprintf@prec& (0+255),b
 22222  001B8E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22223                           
 22224                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22225  001B90  D01A               	goto	l11795
 22226  001B92                     l11791:
 22227                           
 22228                           ; BSR set to: 0
 22229                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22230  001B92  C089  F060         	movff	sprintf@prec,?___wmul
 22231  001B96  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22232  001B9A  6B63               	clrf	(?___wmul+3)& (0+255),b
 22233  001B9C  0E0A               	movlw	10
 22234  001B9E  6F62               	movwf	(?___wmul+2)& (0+255),b
 22235  001BA0  EC81  F02D         	call	___wmul	;wreg free
 22236  001BA4  C078  FFF6         	movff	sprintf@f,tblptrl
 22237  001BA8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22238  001BAC  0008               	tblrd		*
 22239  001BAE  50F5               	movf	tablat,w,c
 22240  001BB0  2760               	addwf	?___wmul& (0+255),f,b
 22241  001BB2  0E00               	movlw	0
 22242  001BB4  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22243  001BB6  0ED0               	movlw	208
 22244  001BB8  2560               	addwf	?___wmul& (0+255),w,b
 22245  001BBA  6F89               	movwf	sprintf@prec& (0+255),b
 22246  001BBC  0EFF               	movlw	255
 22247  001BBE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22248  001BC0  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22249                           
 22250                           ; BSR set to: 0
 22251  001BC2  4B78               	infsnz	sprintf@f& (0+255),f,b
 22252  001BC4  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22253  001BC6                     l11795:
 22254                           
 22255                           ; BSR set to: 0
 22256  001BC6  C078  FFF6         	movff	sprintf@f,tblptrl
 22257  001BCA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22258  001BCE  0008               	tblrd		*
 22259  001BD0  50F5               	movf	tablat,w,c
 22260  001BD2  ECE0  F02D         	call	_isdigit
 22261  001BD6  E362               	bnc	l11849
 22262  001BD8  D7DC               	goto	l11791
 22263  001BDA                     l1623:
 22264                           
 22265                           ; BSR set to: 0
 22266                           ;doprnt.c: 635: prec = 0;
 22267  001BDA  6B89               	clrf	sprintf@prec& (0+255),b
 22268  001BDC  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22269  001BDE  D05E               	goto	l11849
 22270  001BE0                     l11797:
 22271                           
 22272                           ; BSR set to: 0
 22273                           ;doprnt.c: 652: flag |= 0x10;
 22274  001BE0  8992               	bsf	sprintf@flag& (0+255),4,b
 22275                           
 22276                           ;doprnt.c: 653: goto loop;
 22277  001BE2  D05C               	goto	l11849
 22278  001BE4                     l11799:
 22279                           
 22280                           ; BSR set to: 0
 22281                           ;doprnt.c: 700: flag |= 0x40;
 22282  001BE4  8D92               	bsf	sprintf@flag& (0+255),6,b
 22283                           
 22284                           ;doprnt.c: 702: break;
 22285  001BE6  D06F               	goto	l11851
 22286  001BE8                     l11801:
 22287                           
 22288                           ; BSR set to: 0
 22289                           ;doprnt.c: 723: flag |= 0x20;
 22290  001BE8  8B92               	bsf	sprintf@flag& (0+255),5,b
 22291  001BEA                     l1640:
 22292                           
 22293                           ; BSR set to: 0
 22294                           ;doprnt.c: 730: flag |= 0x80;
 22295  001BEA  8F92               	bsf	sprintf@flag& (0+255),7,b
 22296                           
 22297                           ;doprnt.c: 732: break;
 22298  001BEC  D06C               	goto	l11851
 22299  001BEE                     l11803:
 22300                           
 22301                           ; BSR set to: 0
 22302                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22303  001BEE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22304  001BF0  1189               	iorwf	sprintf@prec& (0+255),w,b
 22305  001BF2  E009               	bz	l11809
 22306                           
 22307                           ; BSR set to: 0
 22308  001BF4  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22309  001BF6  5D89               	subwf	sprintf@prec& (0+255),w,b
 22310  001BF8  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22311  001BFA  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22312  001BFC  E204               	bc	l11809
 22313                           
 22314                           ; BSR set to: 0
 22315                           ;doprnt.c: 763: _val._str._len = prec;
 22316  001BFE  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22317  001C02  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22318  001C06                     l11809:
 22319                           
 22320                           ; BSR set to: 0
 22321                           ;doprnt.c: 766: if(width > _val._str._len)
 22322  001C06  518B               	movf	sprintf@width& (0+255),w,b
 22323  001C08  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22324  001C0A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22325  001C0C  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22326  001C0E  E207               	bc	l1643
 22327                           
 22328                           ; BSR set to: 0
 22329                           ;doprnt.c: 767: width -= _val._str._len;
 22330  001C10  EE20  F08E         	lfsr	2,sprintf@_val+1
 22331  001C14  50DE               	movf	postinc2,w,c
 22332  001C16  5F8B               	subwf	sprintf@width& (0+255),f,b
 22333  001C18  50DD               	movf	postdec2,w,c
 22334  001C1A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22335  001C1C  D002               	goto	l1644
 22336  001C1E                     l1643:
 22337                           
 22338                           ; BSR set to: 0
 22339                           ;doprnt.c: 768: else
 22340                           ;doprnt.c: 769: width = 0;
 22341  001C1E  6B8B               	clrf	sprintf@width& (0+255),b
 22342  001C20  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22343  001C22                     l1644:
 22344                           
 22345                           ; BSR set to: 0
 22346                           ;doprnt.c: 771: if(!(flag & 0x08))
 22347  001C22  A792               	btfss	sprintf@flag& (0+255),3,b
 22348  001C24  D004               	goto	l11819
 22349  001C26  D015               	goto	l11827
 22350  001C28                     l11815:
 22351                           
 22352                           ; BSR set to: 0
 22353                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22354  001C28  DAB1               	call	PL68	;call to abstracted procedure
 22355                           
 22356                           ; BSR set to: 0
 22357  001C2A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22358  001C2C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22359  001C2E                     l11819:
 22360                           
 22361                           ; BSR set to: 0
 22362  001C2E  078B               	decf	sprintf@width& (0+255),f,b
 22363  001C30  DAC2               	call	PL114	;call to abstracted procedure
 22364  001C32  B4D8               	btfsc	status,2,c
 22365  001C34  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22366  001C36  E00D               	bz	l11827
 22367  001C38  D7F7               	goto	l11815
 22368  001C3A                     l11821:
 22369                           
 22370                           ; BSR set to: 0
 22371                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22372  001C3A  518D               	movf	sprintf@_val& (0+255),w,b
 22373  001C3C  6ED9               	movwf	fsr2l,c
 22374  001C3E  6ADA               	clrf	fsr2h,c
 22375  001C40  C076  FFE1         	movff	sprintf@sp,fsr1l
 22376  001C44  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22377  001C48  CFDF FFE7          	movff	indf2,indf1
 22378                           
 22379                           ; BSR set to: 0
 22380  001C4C  2B8D               	incf	sprintf@_val& (0+255),f,b
 22381                           
 22382                           ; BSR set to: 0
 22383  001C4E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22384  001C50  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22385  001C52                     l11827:
 22386                           
 22387                           ; BSR set to: 0
 22388  001C52  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22389  001C54  A0D8               	btfss	status,0,c
 22390  001C56  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22391  001C58  0100               	movlb	0	; () banked
 22392  001C5A  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22393  001C5C  B4D8               	btfsc	status,2,c
 22394  001C5E  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22395  001C60  E1EC               	bnz	l11821
 22396                           
 22397                           ; BSR set to: 0
 22398                           ;doprnt.c: 779: if(flag & 0x08)
 22399  001C62  B792               	btfsc	sprintf@flag& (0+255),3,b
 22400  001C64  D004               	goto	l11835
 22401  001C66  D23B               	goto	l12073
 22402  001C68                     l11831:
 22403                           
 22404                           ; BSR set to: 0
 22405                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22406  001C68  DA91               	call	PL68	;call to abstracted procedure
 22407                           
 22408                           ; BSR set to: 0
 22409  001C6A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22410  001C6C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22411  001C6E                     l11835:
 22412                           
 22413                           ; BSR set to: 0
 22414  001C6E  078B               	decf	sprintf@width& (0+255),f,b
 22415  001C70  DAA2               	call	PL114	;call to abstracted procedure
 22416  001C72  B4D8               	btfsc	status,2,c
 22417  001C74  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22418  001C76  E101 D232          	bz	l12073
 22419  001C7A  D7F6               	goto	l11831
 22420  001C7C                     l11837:
 22421                           
 22422                           ; BSR set to: 0
 22423                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22424  001C7C  5188               	movf	sprintf@ap& (0+255),w,b
 22425  001C7E  6ED9               	movwf	fsr2l,c
 22426  001C80  6ADA               	clrf	fsr2h,c
 22427  001C82  50DF               	movf	indf2,w,c
 22428  001C84  6F91               	movwf	sprintf@c& (0+255),b
 22429                           
 22430                           ; BSR set to: 0
 22431  001C86  0E02               	movlw	2
 22432  001C88  2788               	addwf	sprintf@ap& (0+255),f,b
 22433  001C8A                     l11841:
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22437  001C8A  0E91               	movlw	low sprintf@c
 22438  001C8C  6F8D               	movwf	sprintf@_val& (0+255),b
 22439                           
 22440                           ; BSR set to: 0
 22441                           ;doprnt.c: 815: _val._str._len = 1;
 22442  001C8E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22443  001C90  0E01               	movlw	1
 22444  001C92  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22445                           
 22446                           ;doprnt.c: 816: goto dostring;
 22447  001C94  D7AC               	goto	l11803
 22448  001C96                     l11845:
 22449                           
 22450                           ; BSR set to: 0
 22451                           ;doprnt.c: 827: flag |= 0xC0;
 22452  001C96  0EC0               	movlw	192
 22453  001C98  1392               	iorwf	sprintf@flag& (0+255),f,b
 22454                           
 22455                           ;doprnt.c: 828: break;
 22456  001C9A  D015               	goto	l11851
 22457  001C9C                     l11849:
 22458                           
 22459                           ; BSR set to: 0
 22460  001C9C  DA6C               	call	PL60	;call to abstracted procedure
 22461  001C9E  5191               	movf	sprintf@c& (0+255),w,b
 22462                           
 22463                           ; Switch size 1, requested type "space"
 22464                           ; Number of cases is 9, Range of values is 0 to 120
 22465                           ; switch strategies available:
 22466                           ; Name         Instructions Cycles
 22467                           ; simple_byte           28    15 (average)
 22468                           ;	Chosen strategy is simple_byte
 22469  001CA0  E101 D220          	bz	l12075
 22470  001CA4  0A58               	xorlw	88	; case 88
 22471  001CA6  E0A0               	bz	l11801
 22472  001CA8  0A3B               	xorlw	59	; case 99
 22473  001CAA  E0E8               	bz	l11837
 22474  001CAC  0A07               	xorlw	7	; case 100
 22475  001CAE  E00B               	bz	l11851
 22476  001CB0  0A0D               	xorlw	13	; case 105
 22477  001CB2  E009               	bz	l11851
 22478  001CB4  0A05               	xorlw	5	; case 108
 22479  001CB6  E094               	bz	l11797
 22480  001CB8  0A03               	xorlw	3	; case 111
 22481  001CBA  E094               	bz	l11799
 22482  001CBC  0A1A               	xorlw	26	; case 117
 22483  001CBE  E0EB               	bz	l11845
 22484  001CC0  0A0D               	xorlw	13	; case 120
 22485  001CC2  E093               	bz	l1640
 22486  001CC4  D7E2               	goto	l11841
 22487  001CC6                     l11851:
 22488                           
 22489                           ; BSR set to: 0
 22490                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22491  001CC6  5192               	movf	sprintf@flag& (0+255),w,b
 22492  001CC8  0BC0               	andlw	192
 22493  001CCA  E120               	bnz	l1659
 22494                           
 22495                           ; BSR set to: 0
 22496                           ;doprnt.c: 1260: {
 22497                           ;doprnt.c: 1262: if(flag & 0x10)
 22498  001CCC  A992               	btfss	sprintf@flag& (0+255),4,b
 22499  001CCE  D003               	goto	l11859
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22503  001CD0  5188               	movf	sprintf@ap& (0+255),w,b
 22504                           
 22505                           ; BSR set to: 0
 22506  001CD2  DA46               	call	PL54	;call to abstracted procedure
 22507  001CD4  D00D               	goto	L36
 22508  001CD6                     l11859:
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;doprnt.c: 1264: else
 22512                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22513  001CD6  5188               	movf	sprintf@ap& (0+255),w,b
 22514  001CD8  6ED9               	movwf	fsr2l,c
 22515  001CDA  6ADA               	clrf	fsr2h,c
 22516  001CDC  CFDE F08D          	movff	postinc2,sprintf@_val
 22517  001CE0  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22518  001CE4  0E00               	movlw	0
 22519  001CE6  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22520  001CE8  0EFF               	movlw	-1
 22521  001CEA  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22522  001CEC  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22523                           
 22524                           ; BSR set to: 0
 22525  001CEE  0E02               	movlw	2
 22526  001CF0                     L36:
 22527  001CF0  2788               	addwf	sprintf@ap& (0+255),f,b
 22528                           
 22529                           ; BSR set to: 0
 22530                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22531  001CF2  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22532  001CF4  D01F               	goto	l11877
 22533                           
 22534                           ; BSR set to: 0
 22535                           ;doprnt.c: 1269: flag |= 0x03;
 22536  001CF6  0E03               	movlw	3
 22537  001CF8  1392               	iorwf	sprintf@flag& (0+255),f,b
 22538                           
 22539                           ; BSR set to: 0
 22540                           ;doprnt.c: 1270: _val._val = -_val._val;
 22541  001CFA  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22542  001CFC  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22543  001CFE  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22544  001D00  6D8D               	negf	sprintf@_val& (0+255),b
 22545  001D02  0E00               	movlw	0
 22546  001D04  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22547  001D06  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22548  001D08  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22549  001D0A  D014               	goto	l11877
 22550  001D0C                     l1659:
 22551                           
 22552                           ; BSR set to: 0
 22553                           ;doprnt.c: 1275: else
 22554                           ;doprnt.c: 1280: {
 22555                           ;doprnt.c: 1288: if(flag & 0x10)
 22556  001D0C  A992               	btfss	sprintf@flag& (0+255),4,b
 22557  001D0E  D003               	goto	l11873
 22558                           
 22559                           ; BSR set to: 0
 22560                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22561  001D10  5188               	movf	sprintf@ap& (0+255),w,b
 22562                           
 22563                           ; BSR set to: 0
 22564  001D12  DA26               	call	PL54	;call to abstracted procedure
 22565  001D14  D00E               	goto	L37
 22566  001D16                     l11873:
 22567                           
 22568                           ; BSR set to: 0
 22569                           ;doprnt.c: 1290: else
 22570                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22571  001D16  5188               	movf	sprintf@ap& (0+255),w,b
 22572  001D18  6ED9               	movwf	fsr2l,c
 22573  001D1A  6ADA               	clrf	fsr2h,c
 22574  001D1C  CFDE F07E          	movff	postinc2,??_sprintf
 22575  001D20  CFDD F07F          	movff	postdec2,??_sprintf+1
 22576  001D24  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22577  001D28  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22578  001D2C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22579  001D2E  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22580                           
 22581                           ; BSR set to: 0
 22582  001D30  0E02               	movlw	2
 22583  001D32                     L37:
 22584  001D32  2788               	addwf	sprintf@ap& (0+255),f,b
 22585  001D34                     l11877:
 22586                           
 22587                           ; BSR set to: 0
 22588                           ;doprnt.c: 1294: }
 22589                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22590  001D34  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22591  001D36  1189               	iorwf	sprintf@prec& (0+255),w,b
 22592  001D38  E15C               	bnz	l11927
 22593                           
 22594                           ; BSR set to: 0
 22595  001D3A  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22596  001D3C  118D               	iorwf	sprintf@_val& (0+255),w,b
 22597  001D3E  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22598  001D40  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22599  001D42  E157               	bnz	l11927
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;doprnt.c: 1298: prec++;
 22603  001D44  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22604  001D46  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22605  001D48  D054               	goto	l11927
 22606  001D4A                     l11883:
 22607                           
 22608                           ; BSR set to: 0
 22609                           ;doprnt.c: 1309: case 0xC0:
 22610                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22611  001D4A  0E01               	movlw	1
 22612  001D4C  6F91               	movwf	sprintf@c& (0+255),b
 22613  001D4E                     l11885:
 22614                           
 22615                           ; BSR set to: 0
 22616  001D4E  5191               	movf	sprintf@c& (0+255),w,b
 22617  001D50  0A0A               	xorlw	10
 22618  001D52  E058               	bz	l11929
 22619                           
 22620                           ; BSR set to: 0
 22621                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22622  001D54  5191               	movf	sprintf@c& (0+255),w,b
 22623  001D56  0D04               	mullw	4
 22624  001D58  0EE4               	movlw	low _dpowers
 22625  001D5A  24F3               	addwf	prodl,w,c
 22626  001D5C  6EF6               	movwf	tblptrl,c
 22627  001D5E  0E6F               	movlw	high _dpowers
 22628  001D60  20F4               	addwfc	prodh,w,c
 22629  001D62  6EF7               	movwf	tblptrh,c
 22630  001D64  0009               	tblrd		*+
 22631  001D66  50F5               	movf	tablat,w,c
 22632  001D68  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22633  001D6A  0009               	tblrd		*+
 22634  001D6C  50F5               	movf	tablat,w,c
 22635  001D6E  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22636  001D70  0009               	tblrd		*+
 22637  001D72  50F5               	movf	tablat,w,c
 22638  001D74  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22639  001D76  0009               	tblrd		*+
 22640  001D78  50F5               	movf	tablat,w,c
 22641  001D7A  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22642  001D7C  E343               	bnc	l11929
 22643                           
 22644                           ; BSR set to: 0
 22645  001D7E  2B91               	incf	sprintf@c& (0+255),f,b
 22646  001D80  D7E6               	goto	l11885
 22647  001D82                     l11897:
 22648                           
 22649                           ; BSR set to: 0
 22650                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22651  001D82  0E01               	movlw	1
 22652  001D84  6F91               	movwf	sprintf@c& (0+255),b
 22653  001D86                     l11899:
 22654                           
 22655                           ; BSR set to: 0
 22656  001D86  5191               	movf	sprintf@c& (0+255),w,b
 22657  001D88  0A08               	xorlw	8
 22658  001D8A  E03C               	bz	l11929
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22662  001D8C  5191               	movf	sprintf@c& (0+255),w,b
 22663  001D8E  0D04               	mullw	4
 22664  001D90  0E0C               	movlw	low _hexpowers
 22665  001D92  24F3               	addwf	prodl,w,c
 22666  001D94  6EF6               	movwf	tblptrl,c
 22667  001D96  0E70               	movlw	high _hexpowers
 22668  001D98  20F4               	addwfc	prodh,w,c
 22669  001D9A  6EF7               	movwf	tblptrh,c
 22670  001D9C  0009               	tblrd		*+
 22671  001D9E  50F5               	movf	tablat,w,c
 22672  001DA0  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22673  001DA2  0009               	tblrd		*+
 22674  001DA4  50F5               	movf	tablat,w,c
 22675  001DA6  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22676  001DA8  0009               	tblrd		*+
 22677  001DAA  50F5               	movf	tablat,w,c
 22678  001DAC  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22679  001DAE  0009               	tblrd		*+
 22680  001DB0  50F5               	movf	tablat,w,c
 22681  001DB2  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22682  001DB4  E327               	bnc	l11929
 22683                           
 22684                           ; BSR set to: 0
 22685  001DB6  2B91               	incf	sprintf@c& (0+255),f,b
 22686  001DB8  D7E6               	goto	l11899
 22687  001DBA                     l11911:
 22688                           
 22689                           ; BSR set to: 0
 22690                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22691  001DBA  0E01               	movlw	1
 22692  001DBC  6F91               	movwf	sprintf@c& (0+255),b
 22693  001DBE                     l11913:
 22694                           
 22695                           ; BSR set to: 0
 22696  001DBE  5191               	movf	sprintf@c& (0+255),w,b
 22697  001DC0  0A0C               	xorlw	12
 22698  001DC2  E020               	bz	l11929
 22699                           
 22700                           ; BSR set to: 0
 22701                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22702  001DC4  5191               	movf	sprintf@c& (0+255),w,b
 22703  001DC6  0D04               	mullw	4
 22704  001DC8  0EB4               	movlw	low _octpowers
 22705  001DCA  24F3               	addwf	prodl,w,c
 22706  001DCC  6EF6               	movwf	tblptrl,c
 22707  001DCE  0E6F               	movlw	high _octpowers
 22708  001DD0  20F4               	addwfc	prodh,w,c
 22709  001DD2  6EF7               	movwf	tblptrh,c
 22710  001DD4  0009               	tblrd		*+
 22711  001DD6  50F5               	movf	tablat,w,c
 22712  001DD8  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22713  001DDA  0009               	tblrd		*+
 22714  001DDC  50F5               	movf	tablat,w,c
 22715  001DDE  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22716  001DE0  0009               	tblrd		*+
 22717  001DE2  50F5               	movf	tablat,w,c
 22718  001DE4  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22719  001DE6  0009               	tblrd		*+
 22720  001DE8  50F5               	movf	tablat,w,c
 22721  001DEA  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22722  001DEC  E30B               	bnc	l11929
 22723                           
 22724                           ; BSR set to: 0
 22725  001DEE  2B91               	incf	sprintf@c& (0+255),f,b
 22726  001DF0  D7E6               	goto	l11913
 22727  001DF2                     l11927:
 22728                           
 22729                           ; BSR set to: 0
 22730  001DF2  5192               	movf	sprintf@flag& (0+255),w,b
 22731  001DF4  0BC0               	andlw	192
 22732                           
 22733                           ; Switch size 1, requested type "space"
 22734                           ; Number of cases is 4, Range of values is 0 to 192
 22735                           ; switch strategies available:
 22736                           ; Name         Instructions Cycles
 22737                           ; simple_byte           13     7 (average)
 22738                           ;	Chosen strategy is simple_byte
 22739  001DF6  E0A9               	bz	l11883
 22740  001DF8  0A40               	xorlw	64	; case 64
 22741  001DFA  E0DF               	bz	l11911
 22742  001DFC  0AC0               	xorlw	192	; case 128
 22743  001DFE  E0C1               	bz	l11897
 22744  001E00  0A40               	xorlw	64	; case 192
 22745  001E02  E0A3               	bz	l11883
 22746  001E04                     l11929:
 22747                           
 22748                           ; BSR set to: 0
 22749                           ;doprnt.c: 1346: if(c < prec)
 22750  001E04  0E80               	movlw	128
 22751  001E06  BF91               	btfsc	sprintf@c& (0+255),7,b
 22752  001E08  0E7F               	movlw	127
 22753  001E0A  6F7E               	movwf	??_sprintf& (0+255),b
 22754  001E0C  5189               	movf	sprintf@prec& (0+255),w,b
 22755  001E0E  5D91               	subwf	sprintf@c& (0+255),w,b
 22756  001E10  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22757  001E12  0A80               	xorlw	128
 22758  001E14  597E               	subwfb	??_sprintf& (0+255),w,b
 22759  001E16  E203               	bc	l11933
 22760                           
 22761                           ; BSR set to: 0
 22762                           ;doprnt.c: 1347: c = prec;
 22763  001E18  C089  F091         	movff	sprintf@prec,sprintf@c
 22764  001E1C  D00F               	goto	l11937
 22765  001E1E                     l11933:
 22766                           
 22767                           ; BSR set to: 0
 22768                           ;doprnt.c: 1348: else if(prec < c)
 22769  001E1E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22770  001E20  0A80               	xorlw	128
 22771  001E22  6F7E               	movwf	??_sprintf& (0+255),b
 22772  001E24  5191               	movf	sprintf@c& (0+255),w,b
 22773  001E26  5D89               	subwf	sprintf@prec& (0+255),w,b
 22774  001E28  0E80               	movlw	128
 22775  001E2A  BF91               	btfsc	sprintf@c& (0+255),7,b
 22776  001E2C  0E7F               	movlw	127
 22777  001E2E  597E               	subwfb	??_sprintf& (0+255),w,b
 22778  001E30  E205               	bc	l11937
 22779                           
 22780                           ; BSR set to: 0
 22781                           ;doprnt.c: 1349: prec = c;
 22782  001E32  5191               	movf	sprintf@c& (0+255),w,b
 22783  001E34  6F89               	movwf	sprintf@prec& (0+255),b
 22784  001E36  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22785  001E38  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22786  001E3A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22787  001E3C                     l11937:
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22791  001E3C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22792  001E3E  118B               	iorwf	sprintf@width& (0+255),w,b
 22793  001E40  E006               	bz	l11943
 22794                           
 22795                           ; BSR set to: 0
 22796  001E42  5192               	movf	sprintf@flag& (0+255),w,b
 22797  001E44  0B03               	andlw	3
 22798  001E46  E003               	bz	l11943
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;doprnt.c: 1353: width--;
 22802  001E48  078B               	decf	sprintf@width& (0+255),f,b
 22803  001E4A  A0D8               	btfss	status,0,c
 22804  001E4C  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22805  001E4E                     l11943:
 22806                           
 22807                           ; BSR set to: 0
 22808                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22809  001E4E  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22810  001E50  D010               	goto	l11949
 22811                           
 22812                           ; BSR set to: 0
 22813                           ;doprnt.c: 1356: if(width > prec)
 22814  001E52  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22815  001E54  0A80               	xorlw	128
 22816  001E56  6F7E               	movwf	??_sprintf& (0+255),b
 22817  001E58  518B               	movf	sprintf@width& (0+255),w,b
 22818  001E5A  5D89               	subwf	sprintf@prec& (0+255),w,b
 22819  001E5C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22820  001E5E  0A80               	xorlw	128
 22821  001E60  597E               	subwfb	??_sprintf& (0+255),w,b
 22822  001E62  E205               	bc	l1687
 22823                           
 22824                           ; BSR set to: 0
 22825                           ;doprnt.c: 1357: width -= prec;
 22826  001E64  5189               	movf	sprintf@prec& (0+255),w,b
 22827  001E66  5F8B               	subwf	sprintf@width& (0+255),f,b
 22828  001E68  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22829  001E6A  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22830  001E6C  D002               	goto	l11949
 22831  001E6E                     l1687:
 22832                           
 22833                           ; BSR set to: 0
 22834                           ;doprnt.c: 1358: else
 22835                           ;doprnt.c: 1359: width = 0;
 22836  001E6E  6B8B               	clrf	sprintf@width& (0+255),b
 22837  001E70  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22838  001E72                     l11949:
 22839                           
 22840                           ; BSR set to: 0
 22841                           ;doprnt.c: 1360: }
 22842                           ;doprnt.c: 1364: if((flag & (
 22843                           ;doprnt.c: 1366: 0x04|
 22844                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22845  001E72  0EC4               	movlw	196
 22846  001E74  D94D               	call	PL20	;call to abstracted procedure
 22847  001E76  0E40               	movlw	64
 22848  001E78  B4D8               	btfsc	status,2,c
 22849  001E7A  197E               	xorwf	??_sprintf& (0+255),w,b
 22850  001E7C  E107               	bnz	l11955
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;doprnt.c: 1369: if(width)
 22854  001E7E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22855  001E80  118B               	iorwf	sprintf@width& (0+255),w,b
 22856  001E82  E018               	bz	l11961
 22857                           
 22858                           ; BSR set to: 0
 22859                           ;doprnt.c: 1370: width--;
 22860  001E84  078B               	decf	sprintf@width& (0+255),f,b
 22861  001E86  A0D8               	btfss	status,0,c
 22862  001E88  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22863  001E8A  D014               	goto	l11961
 22864  001E8C                     l11955:
 22865                           
 22866                           ; BSR set to: 0
 22867                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22868  001E8C  0EC0               	movlw	192
 22869  001E8E  D940               	call	PL20	;call to abstracted procedure
 22870  001E90  0E80               	movlw	128
 22871  001E92  B4D8               	btfsc	status,2,c
 22872  001E94  197E               	xorwf	??_sprintf& (0+255),w,b
 22873  001E96  E10E               	bnz	l11961
 22874                           
 22875                           ; BSR set to: 0
 22876                           ;doprnt.c: 1379: if(width > 2)
 22877  001E98  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22878  001E9A  0A80               	xorlw	128
 22879  001E9C  0F80               	addlw	-128
 22880  001E9E  0E03               	movlw	3
 22881  001EA0  B4D8               	btfsc	status,2,c
 22882  001EA2  5D8B               	subwf	sprintf@width& (0+255),w,b
 22883  001EA4  E305               	bnc	l1693
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;doprnt.c: 1380: width -= 2;
 22887  001EA6  0EFE               	movlw	254
 22888  001EA8  278B               	addwf	sprintf@width& (0+255),f,b
 22889  001EAA  0EFF               	movlw	255
 22890  001EAC  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22891  001EAE  D002               	goto	l11961
 22892  001EB0                     l1693:
 22893                           
 22894                           ; BSR set to: 0
 22895                           ;doprnt.c: 1381: else
 22896                           ;doprnt.c: 1382: width = 0;
 22897  001EB0  6B8B               	clrf	sprintf@width& (0+255),b
 22898  001EB2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22899  001EB4                     l11961:
 22900                           
 22901                           ; BSR set to: 0
 22902                           ;doprnt.c: 1383: }
 22903                           ;doprnt.c: 1388: if(width > c)
 22904  001EB4  0E80               	movlw	128
 22905  001EB6  BF91               	btfsc	sprintf@c& (0+255),7,b
 22906  001EB8  0E7F               	movlw	127
 22907  001EBA  6F7E               	movwf	??_sprintf& (0+255),b
 22908  001EBC  518B               	movf	sprintf@width& (0+255),w,b
 22909  001EBE  5D91               	subwf	sprintf@c& (0+255),w,b
 22910  001EC0  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22911  001EC2  0A80               	xorlw	128
 22912  001EC4  597E               	subwfb	??_sprintf& (0+255),w,b
 22913  001EC6  E207               	bc	l1695
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1389: width -= c;
 22917  001EC8  5191               	movf	sprintf@c& (0+255),w,b
 22918  001ECA  5F8B               	subwf	sprintf@width& (0+255),f,b
 22919  001ECC  0E00               	movlw	0
 22920  001ECE  BF91               	btfsc	sprintf@c& (0+255),7,b
 22921  001ED0  0EFF               	movlw	255
 22922  001ED2  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22923  001ED4  D002               	goto	l1696
 22924  001ED6                     l1695:
 22925                           
 22926                           ; BSR set to: 0
 22927                           ;doprnt.c: 1390: else
 22928                           ;doprnt.c: 1391: width = 0;
 22929  001ED6  6B8B               	clrf	sprintf@width& (0+255),b
 22930  001ED8  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22931  001EDA                     l1696:
 22932                           
 22933                           ; BSR set to: 0
 22934                           ;doprnt.c: 1394: if(flag & 0x04) {
 22935  001EDA  A592               	btfss	sprintf@flag& (0+255),2,b
 22936  001EDC  D03C               	goto	l11999
 22937                           
 22938                           ; BSR set to: 0
 22939                           ;doprnt.c: 1399: if(flag & 0x03)
 22940  001EDE  5192               	movf	sprintf@flag& (0+255),w,b
 22941  001EE0  0B03               	andlw	3
 22942  001EE2  E009               	bz	l1698
 22943                           
 22944                           ; BSR set to: 0
 22945                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22946  001EE4  C076  FFD9         	movff	sprintf@sp,fsr2l
 22947  001EE8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22948  001EEC  0E2D               	movlw	45
 22949  001EEE  6EDF               	movwf	indf2,c
 22950  001EF0                     l11969:
 22951                           
 22952                           ; BSR set to: 0
 22953  001EF0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22954  001EF2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22955  001EF4  D022               	goto	l11991
 22956  001EF6                     l1698:
 22957                           
 22958                           ; BSR set to: 0
 22959                           ;doprnt.c: 1403: else
 22960                           ;doprnt.c: 1406: if(flag & 0x01)
 22961  001EF6  A192               	btfss	sprintf@flag& (0+255),0,b
 22962  001EF8  D006               	goto	l11975
 22963                           
 22964                           ; BSR set to: 0
 22965                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22966  001EFA  C076  FFD9         	movff	sprintf@sp,fsr2l
 22967  001EFE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22968  001F02  0E20               	movlw	32
 22969  001F04  D7F4               	goto	L38
 22970  001F06                     l11975:
 22971                           
 22972                           ; BSR set to: 0
 22973                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22974  001F06  0EC0               	movlw	192
 22975  001F08  D903               	call	PL20	;call to abstracted procedure
 22976  001F0A  0E80               	movlw	128
 22977  001F0C  B4D8               	btfsc	status,2,c
 22978  001F0E  197E               	xorwf	??_sprintf& (0+255),w,b
 22979  001F10  E114               	bnz	l11991
 22980                           
 22981                           ; BSR set to: 0
 22982                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22983  001F12  C076  FFD9         	movff	sprintf@sp,fsr2l
 22984  001F16  D94A               	call	PL94	;call to abstracted procedure
 22985                           
 22986                           ; BSR set to: 0
 22987  001F18  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22988  001F1A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22989                           
 22990                           ; BSR set to: 0
 22991                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22992  001F1C  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22993  001F1E  D003               	goto	l11985
 22994                           
 22995                           ; BSR set to: 0
 22996  001F20  6B83               	clrf	(_sprintf$2023+1)& (0+255),b
 22997  001F22  0E78               	movlw	120
 22998  001F24  D002               	goto	L39
 22999  001F26                     l11985:
 23000                           
 23001                           ; BSR set to: 0
 23002  001F26  6B83               	clrf	(_sprintf$2023+1)& (0+255),b
 23003  001F28  0E58               	movlw	88
 23004  001F2A                     L39:
 23005  001F2A  6F82               	movwf	_sprintf$2023& (0+255),b
 23006                           
 23007                           ; BSR set to: 0
 23008  001F2C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23009  001F30  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23010  001F34  C082  FFDF         	movff	_sprintf$2023,indf2
 23011  001F38  D7DB               	goto	l11969
 23012  001F3A                     l11991:
 23013                           
 23014                           ; BSR set to: 0
 23015                           ;doprnt.c: 1419: }
 23016                           ;doprnt.c: 1422: if(width)
 23017  001F3A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23018  001F3C  118B               	iorwf	sprintf@width& (0+255),w,b
 23019  001F3E  E101 D0B9          	bz	l12063
 23020                           
 23021                           ; BSR set to: 0
 23022                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 23023  001F42  C076  FFD9         	movff	sprintf@sp,fsr2l
 23024  001F46  D932               	call	PL94	;call to abstracted procedure
 23025                           
 23026                           ; BSR set to: 0
 23027  001F48  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23028  001F4A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23029                           
 23030                           ; BSR set to: 0
 23031                           ;doprnt.c: 1425: while(--width);
 23032  001F4C  078B               	decf	sprintf@width& (0+255),f,b
 23033  001F4E  A0D8               	btfss	status,0,c
 23034  001F50  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23035  001F52  0100               	movlb	0	; () banked
 23036  001F54  D7F2               	goto	l11991
 23037  001F56                     l11999:
 23038                           
 23039                           ; BSR set to: 0
 23040                           ;doprnt.c: 1429: {
 23041                           ;doprnt.c: 1431: if(width
 23042                           ;doprnt.c: 1433: && !(flag & 0x08)
 23043                           ;doprnt.c: 1435: )
 23044  001F56  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23045  001F58  118B               	iorwf	sprintf@width& (0+255),w,b
 23046  001F5A  A4D8               	btfss	status,2,c
 23047                           
 23048                           ; BSR set to: 0
 23049  001F5C  B792               	btfsc	sprintf@flag& (0+255),3,b
 23050  001F5E  D004               	goto	l12009
 23051  001F60                     l12003:
 23052                           
 23053                           ; BSR set to: 0
 23054                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23055  001F60  C076  FFD9         	movff	sprintf@sp,fsr2l
 23056                           
 23057                           ; BSR set to: 0
 23058                           
 23059                           ; BSR set to: 0
 23060                           ;doprnt.c: 1438: while(--width);
 23061  001F64  D8F0               	call	PL46	;call to abstracted procedure
 23062  001F66  E1FC               	bnz	l12003
 23063  001F68                     l12009:
 23064                           
 23065                           ; BSR set to: 0
 23066                           ;doprnt.c: 1445: if(flag & 0x03)
 23067  001F68  5192               	movf	sprintf@flag& (0+255),w,b
 23068  001F6A  0B03               	andlw	3
 23069  001F6C  E009               	bz	l1714
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23073  001F6E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23074  001F72  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23075  001F76  0E2D               	movlw	45
 23076  001F78  6EDF               	movwf	indf2,c
 23077                           
 23078                           ; BSR set to: 0
 23079  001F7A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23080  001F7C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23081  001F7E  D008               	goto	l12019
 23082  001F80                     l1714:
 23083                           
 23084                           ; BSR set to: 0
 23085                           ;doprnt.c: 1450: else if(flag & 0x01)
 23086  001F80  A192               	btfss	sprintf@flag& (0+255),0,b
 23087  001F82  D006               	goto	l12019
 23088                           
 23089                           ; BSR set to: 0
 23090                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23091  001F84  C076  FFD9         	movff	sprintf@sp,fsr2l
 23092  001F88  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23093  001F8C  0E20               	movlw	32
 23094  001F8E  D7F4               	goto	L40
 23095  001F90                     l12019:
 23096                           
 23097                           ; BSR set to: 0
 23098                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23099  001F90  0EC0               	movlw	192
 23100  001F92  D8BE               	call	PL20	;call to abstracted procedure
 23101  001F94  0E40               	movlw	64
 23102  001F96  B4D8               	btfsc	status,2,c
 23103  001F98  197E               	xorwf	??_sprintf& (0+255),w,b
 23104  001F9A  E106               	bnz	l12025
 23105                           
 23106                           ; BSR set to: 0
 23107                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23108  001F9C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23109  001FA0  D905               	call	PL94	;call to abstracted procedure
 23110  001FA2                     l12023:
 23111                           
 23112                           ; BSR set to: 0
 23113  001FA2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23114  001FA4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23115  001FA6  D086               	goto	l12063
 23116  001FA8                     l12025:
 23117                           
 23118                           ; BSR set to: 0
 23119                           ;doprnt.c: 1457: else
 23120                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23121  001FA8  0EC0               	movlw	192
 23122  001FAA  D8B2               	call	PL20	;call to abstracted procedure
 23123  001FAC  0E80               	movlw	128
 23124  001FAE  B4D8               	btfsc	status,2,c
 23125  001FB0  197E               	xorwf	??_sprintf& (0+255),w,b
 23126  001FB2  E001 D07F          	bnz	l12063
 23127                           
 23128                           ; BSR set to: 0
 23129                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23130  001FB6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23131  001FBA  D8F8               	call	PL94	;call to abstracted procedure
 23132                           
 23133                           ; BSR set to: 0
 23134  001FBC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23135  001FBE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23136                           
 23137                           ; BSR set to: 0
 23138                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23139  001FC0  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23140  001FC2  D003               	goto	l12035
 23141                           
 23142                           ; BSR set to: 0
 23143  001FC4  6B85               	clrf	(_sprintf$2024+1)& (0+255),b
 23144  001FC6  0E78               	movlw	120
 23145  001FC8  D002               	goto	L41
 23146  001FCA                     l12035:
 23147                           
 23148                           ; BSR set to: 0
 23149  001FCA  6B85               	clrf	(_sprintf$2024+1)& (0+255),b
 23150  001FCC  0E58               	movlw	88
 23151  001FCE                     L41:
 23152  001FCE  6F84               	movwf	_sprintf$2024& (0+255),b
 23153                           
 23154                           ; BSR set to: 0
 23155  001FD0  C076  FFD9         	movff	sprintf@sp,fsr2l
 23156  001FD4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23157  001FD8  C084  FFDF         	movff	_sprintf$2024,indf2
 23158  001FDC  D7E2               	goto	l12023
 23159  001FDE                     l12041:
 23160                           
 23161                           ; BSR set to: 0
 23162                           ;doprnt.c: 1493: case 0xC0:
 23163                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23164  001FDE  C089  F07E         	movff	sprintf@prec,??_sprintf
 23165  001FE2  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23166  001FE6  90D8               	bcf	status,0,c
 23167  001FE8  377E               	rlcf	??_sprintf& (0+255),f,b
 23168  001FEA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23169  001FEC  90D8               	bcf	status,0,c
 23170  001FEE  377E               	rlcf	??_sprintf& (0+255),f,b
 23171  001FF0  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23172  001FF2  0EE4               	movlw	low _dpowers
 23173  001FF4  257E               	addwf	??_sprintf& (0+255),w,b
 23174  001FF6  6EF6               	movwf	tblptrl,c
 23175  001FF8  0E6F               	movlw	high _dpowers
 23176  001FFA  D87B               	call	PL14	;call to abstracted procedure
 23177  001FFC  C08D  F060         	movff	sprintf@_val,?___lldiv
 23178  002000  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23179  002004  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23180  002008  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23181  00200C  EC19  F029         	call	___lldiv	;wreg free
 23182  002010  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23183  002014  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23184  002018  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23185  00201C  C060  F06D         	movff	?___lldiv,?___llmod
 23186  002020  0E0A               	movlw	10
 23187  002022  6F71               	movwf	(?___llmod+4)& (0+255),b
 23188  002024  0E00               	movlw	0
 23189  002026  6B72               	clrf	(?___llmod+5)& (0+255),b
 23190  002028  6B73               	clrf	(?___llmod+6)& (0+255),b
 23191  00202A  6B74               	clrf	(?___llmod+7)& (0+255),b
 23192  00202C  EC94  F02A         	call	___llmod	;wreg free
 23193  002030  516D               	movf	?___llmod& (0+255),w,b
 23194  002032  D02D               	goto	L42
 23195  002034                     l12043:
 23196                           
 23197                           ; BSR set to: 0
 23198                           ;doprnt.c: 1506: {
 23199                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23200  002034  D875               	call	PL24	;call to abstracted procedure
 23201  002036  0E0C               	movlw	low _hexpowers
 23202  002038  257E               	addwf	??_sprintf& (0+255),w,b
 23203  00203A  6EF6               	movwf	tblptrl,c
 23204  00203C  0E70               	movlw	high _hexpowers
 23205  00203E  D859               	call	PL14	;call to abstracted procedure
 23206  002040  EC19  F029         	call	___lldiv	;wreg free
 23207  002044  5160               	movf	?___lldiv& (0+255),w,b
 23208  002046  0B0F               	andlw	15
 23209  002048  6F81               	movwf	sprintf@idx& (0+255),b
 23210                           
 23211                           ; BSR set to: 0
 23212                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23213  00204A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23214  00204C  D004               	goto	l12049
 23215                           
 23216                           ; BSR set to: 0
 23217  00204E  0E7E               	movlw	high STR_264
 23218  002050  6F87               	movwf	(_sprintf$2030+1)& (0+255),b
 23219  002052  0E2C               	movlw	low STR_264
 23220  002054  D003               	goto	L43
 23221  002056                     l12049:
 23222                           
 23223                           ; BSR set to: 0
 23224  002056  0E7E               	movlw	high STR_263
 23225  002058  6F87               	movwf	(_sprintf$2030+1)& (0+255),b
 23226  00205A  0E1B               	movlw	low STR_263
 23227  00205C                     L43:
 23228  00205C  6F86               	movwf	_sprintf$2030& (0+255),b
 23229                           
 23230                           ; BSR set to: 0
 23231  00205E  5181               	movf	sprintf@idx& (0+255),w,b
 23232  002060  2586               	addwf	_sprintf$2030& (0+255),w,b
 23233  002062  6F7E               	movwf	??_sprintf& (0+255),b
 23234  002064  0E00               	movlw	0
 23235  002066  2187               	addwfc	(_sprintf$2030+1)& (0+255),w,b
 23236  002068  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23237  00206A  C07E  FFF6         	movff	??_sprintf,tblptrl
 23238  00206E  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23239  002072  0008               	tblrd		*
 23240  002074  CFF5 F091          	movff	tablat,sprintf@c
 23241                           
 23242                           ;doprnt.c: 1515: }
 23243                           ;doprnt.c: 1517: break;
 23244  002078  D016               	goto	l12059
 23245  00207A                     l12053:
 23246                           
 23247                           ; BSR set to: 0
 23248                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23249  00207A  D852               	call	PL24	;call to abstracted procedure
 23250  00207C  0EB4               	movlw	low _octpowers
 23251  00207E  257E               	addwf	??_sprintf& (0+255),w,b
 23252  002080  6EF6               	movwf	tblptrl,c
 23253  002082  0E6F               	movlw	high _octpowers
 23254  002084  D836               	call	PL14	;call to abstracted procedure
 23255  002086  EC19  F029         	call	___lldiv	;wreg free
 23256  00208A  5160               	movf	?___lldiv& (0+255),w,b
 23257  00208C  0B07               	andlw	7
 23258  00208E                     L42:
 23259  00208E  0F30               	addlw	48
 23260  002090  6F91               	movwf	sprintf@c& (0+255),b
 23261                           
 23262                           ;doprnt.c: 1527: break;
 23263  002092  D009               	goto	l12059
 23264  002094                     l12057:
 23265                           
 23266                           ; BSR set to: 0
 23267  002094  5192               	movf	sprintf@flag& (0+255),w,b
 23268  002096  0BC0               	andlw	192
 23269                           
 23270                           ; Switch size 1, requested type "space"
 23271                           ; Number of cases is 4, Range of values is 0 to 192
 23272                           ; switch strategies available:
 23273                           ; Name         Instructions Cycles
 23274                           ; simple_byte           13     7 (average)
 23275                           ;	Chosen strategy is simple_byte
 23276  002098  E0A2               	bz	l12041
 23277  00209A  0A40               	xorlw	64	; case 64
 23278  00209C  E0EE               	bz	l12053
 23279  00209E  0AC0               	xorlw	192	; case 128
 23280  0020A0  E0C9               	bz	l12043
 23281  0020A2  0A40               	xorlw	64	; case 192
 23282  0020A4  E09C               	bz	l12041
 23283  0020A6                     l12059:
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23287  0020A6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23288  0020AA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23289  0020AE  C091  FFDF         	movff	sprintf@c,indf2
 23290  0020B2  D777               	goto	l12023
 23291  0020B4                     l12063:
 23292                           
 23293                           ; BSR set to: 0
 23294  0020B4  0789               	decf	sprintf@prec& (0+255),f,b
 23295  0020B6  A0D8               	btfss	status,0,c
 23296  0020B8  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23297  0020BA  0100               	movlb	0	; () banked
 23298  0020BC  2989               	incf	sprintf@prec& (0+255),w,b
 23299  0020BE  B4D8               	btfsc	status,2,c
 23300  0020C0  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23301  0020C2  E1E8               	bnz	l12057
 23302                           
 23303                           ; BSR set to: 0
 23304                           ;doprnt.c: 1532: }
 23305                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23306  0020C4  A792               	btfss	sprintf@flag& (0+255),3,b
 23307  0020C6  D00B               	goto	l12073
 23308                           
 23309                           ; BSR set to: 0
 23310  0020C8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23311  0020CA  0A80               	xorlw	128
 23312  0020CC  0F80               	addlw	-128
 23313  0020CE  0E01               	movlw	1
 23314  0020D0  B4D8               	btfsc	status,2,c
 23315  0020D2  5D8B               	subwf	sprintf@width& (0+255),w,b
 23316  0020D4  E304               	bnc	l12073
 23317  0020D6                     l12067:
 23318                           
 23319                           ; BSR set to: 0
 23320                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23321  0020D6  C076  FFD9         	movff	sprintf@sp,fsr2l
 23322                           
 23323                           ; BSR set to: 0
 23324                           
 23325                           ; BSR set to: 0
 23326                           ;doprnt.c: 1538: while(--width);
 23327  0020DA  D835               	call	PL46	;call to abstracted procedure
 23328  0020DC  E1FC               	bnz	l12067
 23329  0020DE                     l12073:
 23330                           
 23331                           ; BSR set to: 0
 23332  0020DE  D84B               	call	PL60	;call to abstracted procedure
 23333  0020E0  6791               	tstfsz	sprintf@c& (0+255),b
 23334  0020E2  D4D1               	goto	l11739
 23335  0020E4                     l12075:
 23336                           
 23337                           ; BSR set to: 0
 23338                           ;doprnt.c: 1545: *sp = 0;
 23339  0020E4  C076  FFD9         	movff	sprintf@sp,fsr2l
 23340  0020E8  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23341  0020EC  0E00               	movlw	0
 23342  0020EE  6EDF               	movwf	indf2,c
 23343                           
 23344                           ; BSR set to: 0
 23345  0020F0  0C00               	retlw	0
 23346  0020F2                     __end_of_sprintf:
 23347                           	opt stack 0
 23348  0020F2                     PL14:
 23349                           	opt stack 25
 23350  0020F2  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23351  0020F4  6EF7               	movwf	tblptrh,c
 23352  0020F6  0009               	tblrd		*+
 23353  0020F8  CFF5 F064          	movff	tablat,?___lldiv+4
 23354  0020FC  0009               	tblrd		*+
 23355  0020FE  CFF5 F065          	movff	tablat,?___lldiv+5
 23356  002102  0009               	tblrd		*+
 23357  002104  CFF5 F066          	movff	tablat,?___lldiv+6
 23358  002108  000A               	tblrd		*-
 23359  00210A  CFF5 F067          	movff	tablat,?___lldiv+7
 23360  00210E  0012               	return	
 23361  002110                     __end_ofPL14:
 23362                           	opt stack 0
 23363  002110                     PL20:
 23364                           	opt stack 25
 23365  002110  1592               	andwf	sprintf@flag& (0+255),w,b
 23366  002112  6F7E               	movwf	??_sprintf& (0+255),b
 23367  002114  0E08               	movlw	8
 23368  002116  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23369  002118  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23370  00211A  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23371  00211C  0A08               	xorlw	8
 23372  00211E  0012               	return	
 23373  002120                     __end_ofPL20:
 23374                           	opt stack 0
 23375  002120                     PL24:
 23376                           	opt stack 25
 23377  002120  C08D  F060         	movff	sprintf@_val,?___lldiv
 23378  002124  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23379  002128  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23380  00212C  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23381  002130  C089  F07E         	movff	sprintf@prec,??_sprintf
 23382  002134  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23383  002138  90D8               	bcf	status,0,c
 23384  00213A  377E               	rlcf	??_sprintf& (0+255),f,b
 23385  00213C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23386  00213E  90D8               	bcf	status,0,c
 23387  002140  377E               	rlcf	??_sprintf& (0+255),f,b
 23388  002142  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23389  002144  0012               	return	
 23390  002146                     __end_ofPL24:
 23391                           	opt stack 0
 23392  002146                     PL46:
 23393                           	opt stack 25
 23394  002146  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23395  00214A  0E20               	movlw	32
 23396  00214C  6EDF               	movwf	indf2,c
 23397  00214E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23398  002150  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23399  002152  078B               	decf	sprintf@width& (0+255),f,b
 23400  002154  A0D8               	btfss	status,0,c
 23401  002156  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23402  002158  0100               	movlb	0	; () banked
 23403  00215A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23404  00215C  118B               	iorwf	sprintf@width& (0+255),w,b
 23405  00215E  0012               	return	
 23406  002160                     __end_ofPL46:
 23407                           	opt stack 0
 23408  002160                     PL54:
 23409                           	opt stack 25
 23410  002160  6ED9               	movwf	fsr2l,c
 23411  002162  6ADA               	clrf	fsr2h,c
 23412  002164  CFDE F08D          	movff	postinc2,sprintf@_val
 23413  002168  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23414  00216C  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23415  002170  CFDE F090          	movff	postinc2,sprintf@_val+3
 23416  002174  0C04               	retlw	4
 23417  002176                     __end_ofPL54:
 23418                           	opt stack 0
 23419  002176                     PL60:
 23420                           	opt stack 25
 23421  002176  C078  FFF6         	movff	sprintf@f,tblptrl
 23422  00217A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23423  00217E  4B78               	infsnz	sprintf@f& (0+255),f,b
 23424  002180  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23425  002182  0008               	tblrd		*
 23426  002184  CFF5 F091          	movff	tablat,sprintf@c
 23427  002188  0100               	movlb	0	; () banked
 23428  00218A  0012               	return	
 23429  00218C                     __end_ofPL60:
 23430                           	opt stack 0
 23431  00218C                     PL68:
 23432                           	opt stack 25
 23433  00218C  C076  FFD9         	movff	sprintf@sp,fsr2l
 23434  002190  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23435  002194  0E20               	movlw	32
 23436  002196  6EDF               	movwf	indf2,c
 23437  002198  0C20               	retlw	32
 23438  00219A                     __end_ofPL68:
 23439                           	opt stack 0
 23440  00219A                     PL88:
 23441                           	opt stack 25
 23442  00219A  4B78               	infsnz	sprintf@f& (0+255),f,b
 23443  00219C  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23444  00219E  C078  FFF6         	movff	sprintf@f,tblptrl
 23445  0021A2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23446  0021A6  0008               	tblrd		*
 23447  0021A8  50F5               	movf	tablat,w,c
 23448  0021AA  0012               	return	
 23449  0021AC                     __end_ofPL88:
 23450                           	opt stack 0
 23451  0021AC                     PL94:
 23452                           	opt stack 25
 23453  0021AC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23454  0021B0  0E30               	movlw	48
 23455  0021B2  6EDF               	movwf	indf2,c
 23456  0021B4  0C30               	retlw	48
 23457  0021B6                     __end_ofPL94:
 23458                           	opt stack 0
 23459  0021B6                     PL114:
 23460                           	opt stack 25
 23461  0021B6  A0D8               	btfss	status,0,c
 23462  0021B8  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23463  0021BA  0100               	movlb	0	; () banked
 23464  0021BC  298B               	incf	sprintf@width& (0+255),w,b
 23465  0021BE  0012               	return	
 23466  0021C0                     __end_ofPL114:
 23467                           	opt stack 0
 23468                           tblptru	equ	0xFF8
 23469                           tblptrh	equ	0xFF7
 23470                           tblptrl	equ	0xFF6
 23471                           tablat	equ	0xFF5
 23472                           prodh	equ	0xFF4
 23473                           prodl	equ	0xFF3
 23474                           intcon	equ	0xFF2
 23475                           indf0	equ	0xFEF
 23476                           postinc0	equ	0xFEE
 23477                           fsr0h	equ	0xFEA
 23478                           fsr0l	equ	0xFE9
 23479                           wreg	equ	0xFE8
 23480                           indf1	equ	0xFE7
 23481                           postinc1	equ	0xFE6
 23482                           postdec1	equ	0xFE5
 23483                           fsr1h	equ	0xFE2
 23484                           fsr1l	equ	0xFE1
 23485                           indf2	equ	0xFDF
 23486                           postinc2	equ	0xFDE
 23487                           postdec2	equ	0xFDD
 23488                           plusw2	equ	0xFDB
 23489                           fsr2h	equ	0xFDA
 23490                           fsr2l	equ	0xFD9
 23491                           status	equ	0xFD8
 23492                           
 23493 ;; *************** function ___wmul *****************
 23494 ;; Defined at:
 23495 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23496 ;; Parameters:    Size  Location     Type
 23497 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23498 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23499 ;; Auto vars:     Size  Location     Type
 23500 ;;  product         2    4[BANK0 ] unsigned int 
 23501 ;; Return value:  Size  Location     Type
 23502 ;;                  2    0[BANK0 ] unsigned int 
 23503 ;; Registers used:
 23504 ;;		wreg, status,2, status,0, prodl, prodh
 23505 ;; Tracked objects:
 23506 ;;		On entry : F/0
 23507 ;;		On exit  : F/0
 23508 ;;		Unchanged: 0/0
 23509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23510 ;;      Params:         0       4       0       0       0       0       0
 23511 ;;      Locals:         0       2       0       0       0       0       0
 23512 ;;      Temps:          0       0       0       0       0       0       0
 23513 ;;      Totals:         0       6       0       0       0       0       0
 23514 ;;Total ram usage:        6 bytes
 23515 ;; Hardware stack levels used:    1
 23516 ;; Hardware stack levels required when called:    3
 23517 ;; This function calls:
 23518 ;;		Nothing
 23519 ;; This function is called by:
 23520 ;;		_sprintf
 23521 ;;		_atoi
 23522 ;; This function uses a non-reentrant model
 23523 ;;
 23524                           
 23525                           	psect	text57
 23526  005B02                     __ptext57:
 23527                           	opt stack 0
 23528  005B02                     ___wmul:
 23529                           	opt stack 25
 23530                           
 23531                           ; BSR set to: 0
 23532                           
 23533                           ; BSR set to: 0
 23534                           ;incstack = 0
 23535                           ;incstack = 0
 23536  005B02  5160               	movf	___wmul@multiplier& (0+255),w,b
 23537  005B04  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23538  005B06  CFF3 F064          	movff	prodl,___wmul@product
 23539  005B0A  CFF4 F065          	movff	prodh,___wmul@product+1
 23540  005B0E  5160               	movf	___wmul@multiplier& (0+255),w,b
 23541  005B10  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23542  005B12  D808               	call	PL96	;call to abstracted procedure
 23543  005B14  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23544  005B16  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23545  005B18  D805               	call	PL96	;call to abstracted procedure
 23546                           
 23547                           ; BSR set to: 0
 23548  005B1A  C064  F060         	movff	___wmul@product,?___wmul
 23549  005B1E  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23550                           
 23551                           ; BSR set to: 0
 23552  005B22  0012               	return	
 23553  005B24                     __end_of___wmul:
 23554                           	opt stack 0
 23555  005B24                     PL96:
 23556                           	opt stack 25
 23557  005B24  CFF3 FFF4          	movff	prodl,prodh
 23558  005B28  6AF3               	clrf	prodl,c
 23559  005B2A  50F3               	movf	prodl,w,c
 23560  005B2C  2764               	addwf	___wmul@product& (0+255),f,b
 23561  005B2E  50F4               	movf	prodh,w,c
 23562  005B30  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23563  005B32  0012               	return	
 23564  005B34                     __end_ofPL96:
 23565                           	opt stack 0
 23566                           tblptru	equ	0xFF8
 23567                           tblptrh	equ	0xFF7
 23568                           tblptrl	equ	0xFF6
 23569                           tablat	equ	0xFF5
 23570                           prodh	equ	0xFF4
 23571                           prodl	equ	0xFF3
 23572                           intcon	equ	0xFF2
 23573                           indf0	equ	0xFEF
 23574                           postinc0	equ	0xFEE
 23575                           fsr0h	equ	0xFEA
 23576                           fsr0l	equ	0xFE9
 23577                           wreg	equ	0xFE8
 23578                           indf1	equ	0xFE7
 23579                           postinc1	equ	0xFE6
 23580                           postdec1	equ	0xFE5
 23581                           fsr1h	equ	0xFE2
 23582                           fsr1l	equ	0xFE1
 23583                           indf2	equ	0xFDF
 23584                           postinc2	equ	0xFDE
 23585                           postdec2	equ	0xFDD
 23586                           plusw2	equ	0xFDB
 23587                           fsr2h	equ	0xFDA
 23588                           fsr2l	equ	0xFD9
 23589                           status	equ	0xFD8
 23590                           
 23591 ;; *************** function ___llmod *****************
 23592 ;; Defined at:
 23593 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23594 ;; Parameters:    Size  Location     Type
 23595 ;;  dividend        4   13[BANK0 ] unsigned long 
 23596 ;;  divisor         4   17[BANK0 ] unsigned long 
 23597 ;; Auto vars:     Size  Location     Type
 23598 ;;  counter         1   21[BANK0 ] unsigned char 
 23599 ;; Return value:  Size  Location     Type
 23600 ;;                  4   13[BANK0 ] unsigned long 
 23601 ;; Registers used:
 23602 ;;		wreg, status,2, status,0
 23603 ;; Tracked objects:
 23604 ;;		On entry : F/0
 23605 ;;		On exit  : F/0
 23606 ;;		Unchanged: 0/0
 23607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23608 ;;      Params:         0       8       0       0       0       0       0
 23609 ;;      Locals:         0       1       0       0       0       0       0
 23610 ;;      Temps:          0       0       0       0       0       0       0
 23611 ;;      Totals:         0       9       0       0       0       0       0
 23612 ;;Total ram usage:        9 bytes
 23613 ;; Hardware stack levels used:    1
 23614 ;; Hardware stack levels required when called:    3
 23615 ;; This function calls:
 23616 ;;		Nothing
 23617 ;; This function is called by:
 23618 ;;		_sprintf
 23619 ;;		_ultoa
 23620 ;; This function uses a non-reentrant model
 23621 ;;
 23622                           
 23623                           	psect	text58
 23624  005528                     __ptext58:
 23625                           	opt stack 0
 23626  005528                     ___llmod:
 23627                           	opt stack 24
 23628                           
 23629                           ; BSR set to: 0
 23630                           
 23631                           ; BSR set to: 0
 23632                           ;incstack = 0
 23633                           ;incstack = 0
 23634  005528  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23635  00552A  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23636  00552C  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23637  00552E  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23638  005530  E023               	bz	l2346
 23639                           
 23640                           ; BSR set to: 0
 23641  005532  0E01               	movlw	1
 23642  005534  6F75               	movwf	___llmod@counter& (0+255),b
 23643  005536  D006               	goto	l13033
 23644  005538                     l13031:
 23645                           
 23646                           ; BSR set to: 0
 23647  005538  90D8               	bcf	status,0,c
 23648  00553A  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23649  00553C  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23650  00553E  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23651  005540  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23652  005542  2B75               	incf	___llmod@counter& (0+255),f,b
 23653  005544                     l13033:
 23654                           
 23655                           ; BSR set to: 0
 23656  005544  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23657  005546  D7F8               	goto	l13031
 23658  005548                     l13035:
 23659                           
 23660                           ; BSR set to: 0
 23661  005548  5171               	movf	___llmod@divisor& (0+255),w,b
 23662  00554A  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23663  00554C  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23664  00554E  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23665  005550  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23666  005552  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23667  005554  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23668  005556  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23669  005558  E308               	bnc	l13039
 23670                           
 23671                           ; BSR set to: 0
 23672  00555A  5171               	movf	___llmod@divisor& (0+255),w,b
 23673  00555C  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23674  00555E  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23675  005560  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23676  005562  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23677  005564  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23678  005566  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23679  005568  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23680  00556A                     l13039:
 23681                           
 23682                           ; BSR set to: 0
 23683  00556A  90D8               	bcf	status,0,c
 23684  00556C  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23685  00556E  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23686  005570  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23687  005572  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23688                           
 23689                           ; BSR set to: 0
 23690  005574  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23691  005576  D7E8               	goto	l13035
 23692  005578                     l2346:
 23693                           
 23694                           ; BSR set to: 0
 23695  005578  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23696  00557C  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23697  005580  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23698  005584  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23699                           
 23700                           ; BSR set to: 0
 23701  005588  0012               	return	
 23702  00558A                     __end_of___llmod:
 23703                           	opt stack 0
 23704                           tblptru	equ	0xFF8
 23705                           tblptrh	equ	0xFF7
 23706                           tblptrl	equ	0xFF6
 23707                           tablat	equ	0xFF5
 23708                           prodh	equ	0xFF4
 23709                           prodl	equ	0xFF3
 23710                           intcon	equ	0xFF2
 23711                           indf0	equ	0xFEF
 23712                           postinc0	equ	0xFEE
 23713                           fsr0h	equ	0xFEA
 23714                           fsr0l	equ	0xFE9
 23715                           wreg	equ	0xFE8
 23716                           indf1	equ	0xFE7
 23717                           postinc1	equ	0xFE6
 23718                           postdec1	equ	0xFE5
 23719                           fsr1h	equ	0xFE2
 23720                           fsr1l	equ	0xFE1
 23721                           indf2	equ	0xFDF
 23722                           postinc2	equ	0xFDE
 23723                           postdec2	equ	0xFDD
 23724                           plusw2	equ	0xFDB
 23725                           fsr2h	equ	0xFDA
 23726                           fsr2l	equ	0xFD9
 23727                           status	equ	0xFD8
 23728                           
 23729 ;; *************** function ___lldiv *****************
 23730 ;; Defined at:
 23731 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23732 ;; Parameters:    Size  Location     Type
 23733 ;;  dividend        4    0[BANK0 ] unsigned long 
 23734 ;;  divisor         4    4[BANK0 ] unsigned long 
 23735 ;; Auto vars:     Size  Location     Type
 23736 ;;  quotient        4    8[BANK0 ] unsigned long 
 23737 ;;  counter         1   12[BANK0 ] unsigned char 
 23738 ;; Return value:  Size  Location     Type
 23739 ;;                  4    0[BANK0 ] unsigned long 
 23740 ;; Registers used:
 23741 ;;		wreg, status,2, status,0
 23742 ;; Tracked objects:
 23743 ;;		On entry : F/0
 23744 ;;		On exit  : F/0
 23745 ;;		Unchanged: 0/0
 23746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23747 ;;      Params:         0       8       0       0       0       0       0
 23748 ;;      Locals:         0       5       0       0       0       0       0
 23749 ;;      Temps:          0       0       0       0       0       0       0
 23750 ;;      Totals:         0      13       0       0       0       0       0
 23751 ;;Total ram usage:       13 bytes
 23752 ;; Hardware stack levels used:    1
 23753 ;; Hardware stack levels required when called:    3
 23754 ;; This function calls:
 23755 ;;		Nothing
 23756 ;; This function is called by:
 23757 ;;		_sprintf
 23758 ;;		_ultoa
 23759 ;; This function uses a non-reentrant model
 23760 ;;
 23761                           
 23762                           	psect	text59
 23763  005232                     __ptext59:
 23764                           	opt stack 0
 23765  005232                     ___lldiv:
 23766                           	opt stack 24
 23767                           
 23768                           ; BSR set to: 0
 23769                           
 23770                           ; BSR set to: 0
 23771                           ;incstack = 0
 23772                           ;incstack = 0
 23773  005232  6B68               	clrf	___lldiv@quotient& (0+255),b
 23774  005234  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23775  005236  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23776  005238  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23777                           
 23778                           ; BSR set to: 0
 23779  00523A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23780  00523C  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23781  00523E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23782  005240  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23783  005242  E029               	bz	l2336
 23784                           
 23785                           ; BSR set to: 0
 23786  005244  0E01               	movlw	1
 23787  005246  6F6C               	movwf	___lldiv@counter& (0+255),b
 23788  005248  D006               	goto	l13013
 23789  00524A                     l13011:
 23790                           
 23791                           ; BSR set to: 0
 23792  00524A  90D8               	bcf	status,0,c
 23793  00524C  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23794  00524E  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23795  005250  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23796  005252  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23797  005254  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23798  005256                     l13013:
 23799                           
 23800                           ; BSR set to: 0
 23801  005256  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23802  005258  D7F8               	goto	l13011
 23803  00525A                     l13015:
 23804                           
 23805                           ; BSR set to: 0
 23806  00525A  90D8               	bcf	status,0,c
 23807  00525C  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23808  00525E  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23809  005260  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23810  005262  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23811                           
 23812                           ; BSR set to: 0
 23813  005264  5164               	movf	___lldiv@divisor& (0+255),w,b
 23814  005266  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23815  005268  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23816  00526A  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23817  00526C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23818  00526E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23819  005270  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23820  005272  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23821  005274  E309               	bnc	l13023
 23822                           
 23823                           ; BSR set to: 0
 23824  005276  5164               	movf	___lldiv@divisor& (0+255),w,b
 23825  005278  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23826  00527A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23827  00527C  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23828  00527E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23829  005280  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23830  005282  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23831  005284  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23832                           
 23833                           ; BSR set to: 0
 23834  005286  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23835  005288                     l13023:
 23836                           
 23837                           ; BSR set to: 0
 23838  005288  90D8               	bcf	status,0,c
 23839  00528A  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23840  00528C  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23841  00528E  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23842  005290  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23843                           
 23844                           ; BSR set to: 0
 23845  005292  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23846  005294  D7E2               	goto	l13015
 23847  005296                     l2336:
 23848                           
 23849                           ; BSR set to: 0
 23850  005296  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23851  00529A  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23852  00529E  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23853  0052A2  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23854                           
 23855                           ; BSR set to: 0
 23856  0052A6  0012               	return	
 23857  0052A8                     __end_of___lldiv:
 23858                           	opt stack 0
 23859                           tblptru	equ	0xFF8
 23860                           tblptrh	equ	0xFF7
 23861                           tblptrl	equ	0xFF6
 23862                           tablat	equ	0xFF5
 23863                           prodh	equ	0xFF4
 23864                           prodl	equ	0xFF3
 23865                           intcon	equ	0xFF2
 23866                           indf0	equ	0xFEF
 23867                           postinc0	equ	0xFEE
 23868                           fsr0h	equ	0xFEA
 23869                           fsr0l	equ	0xFE9
 23870                           wreg	equ	0xFE8
 23871                           indf1	equ	0xFE7
 23872                           postinc1	equ	0xFE6
 23873                           postdec1	equ	0xFE5
 23874                           fsr1h	equ	0xFE2
 23875                           fsr1l	equ	0xFE1
 23876                           indf2	equ	0xFDF
 23877                           postinc2	equ	0xFDE
 23878                           postdec2	equ	0xFDD
 23879                           plusw2	equ	0xFDB
 23880                           fsr2h	equ	0xFDA
 23881                           fsr2l	equ	0xFD9
 23882                           status	equ	0xFD8
 23883                           
 23884 ;; *************** function _isdigit *****************
 23885 ;; Defined at:
 23886 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23887 ;; Parameters:    Size  Location     Type
 23888 ;;  c               1    wreg     unsigned char 
 23889 ;; Auto vars:     Size  Location     Type
 23890 ;;  c               1    2[BANK0 ] unsigned char 
 23891 ;; Return value:  Size  Location     Type
 23892 ;;		None               void
 23893 ;; Registers used:
 23894 ;;		wreg, status,2, status,0
 23895 ;; Tracked objects:
 23896 ;;		On entry : 0/0
 23897 ;;		On exit  : F/0
 23898 ;;		Unchanged: 0/0
 23899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23900 ;;      Params:         0       0       0       0       0       0       0
 23901 ;;      Locals:         0       2       0       0       0       0       0
 23902 ;;      Temps:          0       1       0       0       0       0       0
 23903 ;;      Totals:         0       3       0       0       0       0       0
 23904 ;;Total ram usage:        3 bytes
 23905 ;; Hardware stack levels used:    1
 23906 ;; Hardware stack levels required when called:    3
 23907 ;; This function calls:
 23908 ;;		Nothing
 23909 ;; This function is called by:
 23910 ;;		_sprintf
 23911 ;;		_atoi
 23912 ;; This function uses a non-reentrant model
 23913 ;;
 23914                           
 23915                           	psect	text60
 23916  005BC0                     __ptext60:
 23917                           	opt stack 0
 23918  005BC0                     _isdigit:
 23919                           	opt stack 25
 23920                           
 23921                           ; BSR set to: 0
 23922                           ;incstack = 0
 23923                           ;incstack = 0
 23924                           ;isdigit@c stored from wreg
 23925  005BC0  CFE8 F062          	movff	wreg,isdigit@c
 23926  005BC4  0100               	movlb	0	; () banked
 23927  005BC6  6B61               	clrf	_isdigit$2901& (0+255),b
 23928                           
 23929                           ; BSR set to: 0
 23930  005BC8  0E3A               	movlw	58
 23931  005BCA  6162               	cpfslt	isdigit@c& (0+255),b
 23932  005BCC  D005               	goto	l12971
 23933                           
 23934                           ; BSR set to: 0
 23935  005BCE  0E2F               	movlw	47
 23936  005BD0  6562               	cpfsgt	isdigit@c& (0+255),b
 23937  005BD2  D002               	goto	l12971
 23938                           
 23939                           ; BSR set to: 0
 23940  005BD4  0E01               	movlw	1
 23941  005BD6  6F61               	movwf	_isdigit$2901& (0+255),b
 23942  005BD8                     l12971:
 23943                           
 23944                           ; BSR set to: 0
 23945  005BD8  C061  F060         	movff	_isdigit$2901,??_isdigit
 23946  005BDC  3160               	rrcf	??_isdigit& (0+255),w,b
 23947                           
 23948                           ; BSR set to: 0
 23949  005BDE  0012               	return	
 23950  005BE0                     __end_of_isdigit:
 23951                           	opt stack 0
 23952                           tblptru	equ	0xFF8
 23953                           tblptrh	equ	0xFF7
 23954                           tblptrl	equ	0xFF6
 23955                           tablat	equ	0xFF5
 23956                           prodh	equ	0xFF4
 23957                           prodl	equ	0xFF3
 23958                           intcon	equ	0xFF2
 23959                           indf0	equ	0xFEF
 23960                           postinc0	equ	0xFEE
 23961                           fsr0h	equ	0xFEA
 23962                           fsr0l	equ	0xFE9
 23963                           wreg	equ	0xFE8
 23964                           indf1	equ	0xFE7
 23965                           postinc1	equ	0xFE6
 23966                           postdec1	equ	0xFE5
 23967                           fsr1h	equ	0xFE2
 23968                           fsr1l	equ	0xFE1
 23969                           indf2	equ	0xFDF
 23970                           postinc2	equ	0xFDE
 23971                           postdec2	equ	0xFDD
 23972                           plusw2	equ	0xFDB
 23973                           fsr2h	equ	0xFDA
 23974                           fsr2l	equ	0xFD9
 23975                           status	equ	0xFD8
 23976                           
 23977 ;; *************** function _printFirmwareVersion *****************
 23978 ;; Defined at:
 23979 ;;		line 2749 in file "main.c"
 23980 ;; Parameters:    Size  Location     Type
 23981 ;;		None
 23982 ;; Auto vars:     Size  Location     Type
 23983 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23984 ;; Return value:  Size  Location     Type
 23985 ;;		None               void
 23986 ;; Registers used:
 23987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23988 ;; Tracked objects:
 23989 ;;		On entry : 0/0
 23990 ;;		On exit  : 0/0
 23991 ;;		Unchanged: 0/0
 23992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23993 ;;      Params:         0       0       0       0       0       0       0
 23994 ;;      Locals:         0      20       0       0       0       0       0
 23995 ;;      Temps:          0       0       0       0       0       0       0
 23996 ;;      Totals:         0      20       0       0       0       0       0
 23997 ;;Total ram usage:       20 bytes
 23998 ;; Hardware stack levels used:    1
 23999 ;; Hardware stack levels required when called:    6
 24000 ;; This function calls:
 24001 ;;		_putsUSART
 24002 ;;		_WriteUSART
 24003 ;;		_itoa
 24004 ;; This function is called by:
 24005 ;;		_main
 24006 ;;		_doModeVerbose
 24007 ;; This function uses a non-reentrant model
 24008 ;;
 24009                           
 24010                           	psect	text61
 24011  004FAE                     __ptext61:
 24012                           	opt stack 0
 24013  004FAE                     _printFirmwareVersion:
 24014                           	opt stack 23
 24015                           
 24016                           ;main.c: 2750: char wrkbuf[20];
 24017                           ;main.c: 2751: putsUSART((char *) "Version: ");
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;incstack = 0
 24021                           ;incstack = 0
 24022  004FAE  0E7E               	movlw	high STR_254
 24023  004FB0  0100               	movlb	0	; () banked
 24024  004FB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24025  004FB4  0E9C               	movlw	low STR_254
 24026  004FB6  6F61               	movwf	?_putsUSART& (0+255),b
 24027  004FB8  EC4F  F02B         	call	_putsUSART	;wreg free
 24028                           
 24029                           ;main.c: 2752: itoa(wrkbuf, 1, 10);
 24030  004FBC  D838               	call	PL62	;call to abstracted procedure
 24031  004FBE  0E01               	movlw	1
 24032  004FC0  6F72               	movwf	(?_itoa+2)& (0+255),b
 24033  004FC2  6B75               	clrf	(?_itoa+5)& (0+255),b
 24034  004FC4  0E0A               	movlw	10
 24035  004FC6  6F74               	movwf	(?_itoa+4)& (0+255),b
 24036  004FC8  EC30  F02D         	call	_itoa	;wreg free
 24037                           
 24038                           ; BSR set to: 0
 24039                           ;main.c: 2753: putsUSART(wrkbuf);
 24040  004FCC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24041  004FCE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24042  004FD0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24043  004FD2  6F61               	movwf	?_putsUSART& (0+255),b
 24044  004FD4  EC4F  F02B         	call	_putsUSART	;wreg free
 24045  004FD8                     l1215:
 24046  004FD8  A2AC               	btfss	4012,1,c	;volatile
 24047  004FDA  D7FE               	goto	l1215
 24048                           
 24049                           ;main.c: 2755: WriteUSART('.');
 24050  004FDC  0E2E               	movlw	46
 24051  004FDE  EC26  F02E         	call	_WriteUSART
 24052                           
 24053                           ;main.c: 2756: itoa(wrkbuf, 0, 10);
 24054  004FE2  D825               	call	PL62	;call to abstracted procedure
 24055  004FE4  6B72               	clrf	(?_itoa+2)& (0+255),b
 24056  004FE6  6B75               	clrf	(?_itoa+5)& (0+255),b
 24057  004FE8  0E0A               	movlw	10
 24058  004FEA  6F74               	movwf	(?_itoa+4)& (0+255),b
 24059  004FEC  EC30  F02D         	call	_itoa	;wreg free
 24060                           
 24061                           ; BSR set to: 0
 24062                           ;main.c: 2757: putsUSART(wrkbuf);
 24063  004FF0  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24064  004FF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24065  004FF4  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24066  004FF6  6F61               	movwf	?_putsUSART& (0+255),b
 24067  004FF8  EC4F  F02B         	call	_putsUSART	;wreg free
 24068  004FFC                     l1218:
 24069  004FFC  A2AC               	btfss	4012,1,c	;volatile
 24070  004FFE  D7FE               	goto	l1218
 24071                           
 24072                           ;main.c: 2759: WriteUSART('.');
 24073  005000  0E2E               	movlw	46
 24074  005002  EC26  F02E         	call	_WriteUSART
 24075                           
 24076                           ;main.c: 2760: itoa(wrkbuf, 0, 10);
 24077  005006  D813               	call	PL62	;call to abstracted procedure
 24078  005008  6B72               	clrf	(?_itoa+2)& (0+255),b
 24079  00500A  6B75               	clrf	(?_itoa+5)& (0+255),b
 24080  00500C  0E0A               	movlw	10
 24081  00500E  6F74               	movwf	(?_itoa+4)& (0+255),b
 24082  005010  EC30  F02D         	call	_itoa	;wreg free
 24083                           
 24084                           ; BSR set to: 0
 24085                           ;main.c: 2761: putsUSART(wrkbuf);
 24086  005014  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24087  005016  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24088  005018  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24089  00501A  6F61               	movwf	?_putsUSART& (0+255),b
 24090  00501C  EC4F  F02B         	call	_putsUSART	;wreg free
 24091                           
 24092                           ;main.c: 2762: putsUSART((char *) "\r\n");
 24093  005020  0E74               	movlw	high (STR_197+50)
 24094  005022  0100               	movlb	0	; () banked
 24095  005024  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24096  005026  0E8A               	movlw	low (STR_197+50)
 24097  005028  6F61               	movwf	?_putsUSART& (0+255),b
 24098  00502A  EF4F  F02B         	goto	_putsUSART	;wreg free
 24099  00502E                     __end_of_printFirmwareVersion:
 24100                           	opt stack 0
 24101  00502E                     PL62:
 24102                           	opt stack 23
 24103  00502E  0100               	movlb	0	; () banked
 24104  005030  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24105  005032  6F71               	movwf	(?_itoa+1)& (0+255),b
 24106  005034  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24107  005036  6F70               	movwf	?_itoa& (0+255),b
 24108  005038  6B73               	clrf	(?_itoa+3)& (0+255),b
 24109  00503A  0012               	return	
 24110  00503C                     __end_ofPL62:
 24111                           	opt stack 0
 24112                           tblptru	equ	0xFF8
 24113                           tblptrh	equ	0xFF7
 24114                           tblptrl	equ	0xFF6
 24115                           tablat	equ	0xFF5
 24116                           prodh	equ	0xFF4
 24117                           prodl	equ	0xFF3
 24118                           intcon	equ	0xFF2
 24119                           indf0	equ	0xFEF
 24120                           postinc0	equ	0xFEE
 24121                           fsr0h	equ	0xFEA
 24122                           fsr0l	equ	0xFE9
 24123                           wreg	equ	0xFE8
 24124                           indf1	equ	0xFE7
 24125                           postinc1	equ	0xFE6
 24126                           postdec1	equ	0xFE5
 24127                           fsr1h	equ	0xFE2
 24128                           fsr1l	equ	0xFE1
 24129                           indf2	equ	0xFDF
 24130                           postinc2	equ	0xFDE
 24131                           postdec2	equ	0xFDD
 24132                           plusw2	equ	0xFDB
 24133                           fsr2h	equ	0xFDA
 24134                           fsr2l	equ	0xFD9
 24135                           status	equ	0xFD8
 24136                           
 24137 ;; *************** function _itoa *****************
 24138 ;; Defined at:
 24139 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24140 ;; Parameters:    Size  Location     Type
 24141 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24142 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24143 ;;  val             2   18[BANK0 ] int 
 24144 ;;  base            2   20[BANK0 ] int 
 24145 ;; Auto vars:     Size  Location     Type
 24146 ;;  cp              2    0        PTR unsigned char 
 24147 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24148 ;; Return value:  Size  Location     Type
 24149 ;;                  2   16[BANK0 ] PTR unsigned char 
 24150 ;; Registers used:
 24151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24152 ;; Tracked objects:
 24153 ;;		On entry : F/0
 24154 ;;		On exit  : F/0
 24155 ;;		Unchanged: 0/0
 24156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24157 ;;      Params:         0       6       0       0       0       0       0
 24158 ;;      Locals:         0       2       0       0       0       0       0
 24159 ;;      Temps:          0       0       0       0       0       0       0
 24160 ;;      Totals:         0       8       0       0       0       0       0
 24161 ;;Total ram usage:        8 bytes
 24162 ;; Hardware stack levels used:    1
 24163 ;; Hardware stack levels required when called:    5
 24164 ;; This function calls:
 24165 ;;		_utoa
 24166 ;; This function is called by:
 24167 ;;		_receiveSendEventSLCAN
 24168 ;;		_findNodes
 24169 ;;		_printGUID
 24170 ;;		_printNodeFirmwareVersion
 24171 ;;		_printFirmwareVersion
 24172 ;; This function uses a non-reentrant model
 24173 ;;
 24174                           
 24175                           	psect	text62
 24176  005A60                     __ptext62:
 24177                           	opt stack 0
 24178  005A60                     _itoa:
 24179                           	opt stack 23
 24180                           
 24181                           ; BSR set to: 0
 24182                           
 24183                           ;incstack = 0
 24184                           ;incstack = 0
 24185  005A60  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24186  005A62  D00C               	goto	l12815
 24187                           
 24188                           ; BSR set to: 0
 24189  005A64  C070  FFD9         	movff	itoa@buf,fsr2l
 24190  005A68  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24191  005A6C  0E2D               	movlw	45
 24192  005A6E  6EDF               	movwf	indf2,c
 24193                           
 24194                           ; BSR set to: 0
 24195  005A70  4B70               	infsnz	itoa@buf& (0+255),f,b
 24196  005A72  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24197                           
 24198                           ; BSR set to: 0
 24199  005A74  6D72               	negf	itoa@val& (0+255),b
 24200  005A76  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24201  005A78  B0D8               	btfsc	status,0,c
 24202  005A7A  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24203  005A7C                     l12815:
 24204                           
 24205                           ; BSR set to: 0
 24206  005A7C  C070  F067         	movff	itoa@buf,?_utoa
 24207  005A80  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24208  005A84  C072  F069         	movff	itoa@val,?_utoa+2
 24209  005A88  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24210  005A8C  C074  F06B         	movff	itoa@base,?_utoa+4
 24211  005A90  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24212  005A94  EF56  F026         	goto	_utoa	;wreg free
 24213  005A98                     __end_of_itoa:
 24214                           	opt stack 0
 24215                           tblptru	equ	0xFF8
 24216                           tblptrh	equ	0xFF7
 24217                           tblptrl	equ	0xFF6
 24218                           tablat	equ	0xFF5
 24219                           prodh	equ	0xFF4
 24220                           prodl	equ	0xFF3
 24221                           intcon	equ	0xFF2
 24222                           indf0	equ	0xFEF
 24223                           postinc0	equ	0xFEE
 24224                           fsr0h	equ	0xFEA
 24225                           fsr0l	equ	0xFE9
 24226                           wreg	equ	0xFE8
 24227                           indf1	equ	0xFE7
 24228                           postinc1	equ	0xFE6
 24229                           postdec1	equ	0xFE5
 24230                           fsr1h	equ	0xFE2
 24231                           fsr1l	equ	0xFE1
 24232                           indf2	equ	0xFDF
 24233                           postinc2	equ	0xFDE
 24234                           postdec2	equ	0xFDD
 24235                           plusw2	equ	0xFDB
 24236                           fsr2h	equ	0xFDA
 24237                           fsr2l	equ	0xFD9
 24238                           status	equ	0xFD8
 24239                           
 24240 ;; *************** function _utoa *****************
 24241 ;; Defined at:
 24242 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24243 ;; Parameters:    Size  Location     Type
 24244 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24245 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24246 ;;  val             2    9[BANK0 ] unsigned int 
 24247 ;;  base            2   11[BANK0 ] int 
 24248 ;; Auto vars:     Size  Location     Type
 24249 ;;  v               2   13[BANK0 ] unsigned int 
 24250 ;;  c               1   15[BANK0 ] unsigned char 
 24251 ;; Return value:  Size  Location     Type
 24252 ;;                  2    7[BANK0 ] PTR unsigned char 
 24253 ;; Registers used:
 24254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24255 ;; Tracked objects:
 24256 ;;		On entry : F/0
 24257 ;;		On exit  : F/0
 24258 ;;		Unchanged: 0/0
 24259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24260 ;;      Params:         0       6       0       0       0       0       0
 24261 ;;      Locals:         0       3       0       0       0       0       0
 24262 ;;      Temps:          0       0       0       0       0       0       0
 24263 ;;      Totals:         0       9       0       0       0       0       0
 24264 ;;Total ram usage:        9 bytes
 24265 ;; Hardware stack levels used:    1
 24266 ;; Hardware stack levels required when called:    4
 24267 ;; This function calls:
 24268 ;;		___lwdiv
 24269 ;;		___lwmod
 24270 ;; This function is called by:
 24271 ;;		_itoa
 24272 ;; This function uses a non-reentrant model
 24273 ;;
 24274                           
 24275                           	psect	text63
 24276  004CAC                     __ptext63:
 24277                           	opt stack 0
 24278  004CAC                     _utoa:
 24279                           	opt stack 23
 24280                           
 24281                           ; BSR set to: 0
 24282                           
 24283                           ; BSR set to: 0
 24284                           ;incstack = 0
 24285                           ;incstack = 0
 24286  004CAC  C069  F06D         	movff	utoa@val,utoa@v
 24287  004CB0  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24288  004CB4                     l12977:
 24289                           
 24290                           ; BSR set to: 0
 24291  004CB4  C06D  F060         	movff	utoa@v,?___lwdiv
 24292  004CB8  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24293  004CBC  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24294  004CC0  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24295  004CC4  ECC8  F02B         	call	___lwdiv	;wreg free
 24296  004CC8  C060  F06D         	movff	?___lwdiv,utoa@v
 24297  004CCC  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24298                           
 24299                           ; BSR set to: 0
 24300  004CD0  4B67               	infsnz	utoa@buf& (0+255),f,b
 24301  004CD2  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24302                           
 24303                           ; BSR set to: 0
 24304  004CD4  516E               	movf	(utoa@v+1)& (0+255),w,b
 24305  004CD6  116D               	iorwf	utoa@v& (0+255),w,b
 24306  004CD8  E1ED               	bnz	l12977
 24307                           
 24308                           ; BSR set to: 0
 24309  004CDA  C067  FFD9         	movff	utoa@buf,fsr2l
 24310  004CDE  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24311  004CE2  0E00               	movlw	0
 24312  004CE4  6ADF               	clrf	indf2,c
 24313                           
 24314                           ; BSR set to: 0
 24315  004CE6  0767               	decf	utoa@buf& (0+255),f,b
 24316  004CE8  A0D8               	btfss	status,0,c
 24317  004CEA  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24318  004CEC                     l12987:
 24319                           
 24320                           ; BSR set to: 0
 24321  004CEC  C069  F060         	movff	utoa@val,?___lwmod
 24322  004CF0  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24323  004CF4  C06B  F062         	movff	utoa@base,?___lwmod+2
 24324  004CF8  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24325  004CFC  ECF5  F02C         	call	___lwmod	;wreg free
 24326  004D00  5160               	movf	?___lwmod& (0+255),w,b
 24327  004D02  6F6F               	movwf	utoa@c& (0+255),b
 24328                           
 24329                           ; BSR set to: 0
 24330  004D04  C069  F060         	movff	utoa@val,?___lwdiv
 24331  004D08  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24332  004D0C  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24333  004D10  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24334  004D14  ECC8  F02B         	call	___lwdiv	;wreg free
 24335  004D18  C060  F069         	movff	?___lwdiv,utoa@val
 24336  004D1C  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24337                           
 24338                           ; BSR set to: 0
 24339  004D20  0E09               	movlw	9
 24340  004D22  656F               	cpfsgt	utoa@c& (0+255),b
 24341  004D24  D002               	goto	l2305
 24342                           
 24343                           ; BSR set to: 0
 24344  004D26  0E07               	movlw	7
 24345  004D28  276F               	addwf	utoa@c& (0+255),f,b
 24346  004D2A                     l2305:
 24347                           
 24348                           ; BSR set to: 0
 24349  004D2A  0E30               	movlw	48
 24350  004D2C  276F               	addwf	utoa@c& (0+255),f,b
 24351                           
 24352                           ; BSR set to: 0
 24353  004D2E  C067  FFD9         	movff	utoa@buf,fsr2l
 24354  004D32  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24355  004D36  C06F  FFDF         	movff	utoa@c,indf2
 24356                           
 24357                           ; BSR set to: 0
 24358  004D3A  0767               	decf	utoa@buf& (0+255),f,b
 24359  004D3C  A0D8               	btfss	status,0,c
 24360  004D3E  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24361                           
 24362                           ; BSR set to: 0
 24363  004D40  516A               	movf	(utoa@val+1)& (0+255),w,b
 24364  004D42  1169               	iorwf	utoa@val& (0+255),w,b
 24365  004D44  E1D3               	bnz	l12987
 24366                           
 24367                           ; BSR set to: 0
 24368                           ;	Return value of _utoa is never used
 24369  004D46  4B67               	infsnz	utoa@buf& (0+255),f,b
 24370  004D48  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24371                           
 24372                           ; BSR set to: 0
 24373  004D4A  0012               	return	
 24374  004D4C                     __end_of_utoa:
 24375                           	opt stack 0
 24376                           tblptru	equ	0xFF8
 24377                           tblptrh	equ	0xFF7
 24378                           tblptrl	equ	0xFF6
 24379                           tablat	equ	0xFF5
 24380                           prodh	equ	0xFF4
 24381                           prodl	equ	0xFF3
 24382                           intcon	equ	0xFF2
 24383                           indf0	equ	0xFEF
 24384                           postinc0	equ	0xFEE
 24385                           fsr0h	equ	0xFEA
 24386                           fsr0l	equ	0xFE9
 24387                           wreg	equ	0xFE8
 24388                           indf1	equ	0xFE7
 24389                           postinc1	equ	0xFE6
 24390                           postdec1	equ	0xFE5
 24391                           fsr1h	equ	0xFE2
 24392                           fsr1l	equ	0xFE1
 24393                           indf2	equ	0xFDF
 24394                           postinc2	equ	0xFDE
 24395                           postdec2	equ	0xFDD
 24396                           plusw2	equ	0xFDB
 24397                           fsr2h	equ	0xFDA
 24398                           fsr2l	equ	0xFD9
 24399                           status	equ	0xFD8
 24400                           
 24401 ;; *************** function ___lwmod *****************
 24402 ;; Defined at:
 24403 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24404 ;; Parameters:    Size  Location     Type
 24405 ;;  dividend        2    0[BANK0 ] unsigned int 
 24406 ;;  divisor         2    2[BANK0 ] unsigned int 
 24407 ;; Auto vars:     Size  Location     Type
 24408 ;;  counter         1    4[BANK0 ] unsigned char 
 24409 ;; Return value:  Size  Location     Type
 24410 ;;                  2    0[BANK0 ] unsigned int 
 24411 ;; Registers used:
 24412 ;;		wreg, status,2, status,0
 24413 ;; Tracked objects:
 24414 ;;		On entry : F/0
 24415 ;;		On exit  : F/0
 24416 ;;		Unchanged: 0/0
 24417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24418 ;;      Params:         0       4       0       0       0       0       0
 24419 ;;      Locals:         0       1       0       0       0       0       0
 24420 ;;      Temps:          0       0       0       0       0       0       0
 24421 ;;      Totals:         0       5       0       0       0       0       0
 24422 ;;Total ram usage:        5 bytes
 24423 ;; Hardware stack levels used:    1
 24424 ;; Hardware stack levels required when called:    3
 24425 ;; This function calls:
 24426 ;;		Nothing
 24427 ;; This function is called by:
 24428 ;;		_utoa
 24429 ;; This function uses a non-reentrant model
 24430 ;;
 24431                           
 24432                           	psect	text64
 24433  0059EA                     __ptext64:
 24434                           	opt stack 0
 24435  0059EA                     ___lwmod:
 24436                           	opt stack 23
 24437                           
 24438                           ; BSR set to: 0
 24439                           
 24440                           ; BSR set to: 0
 24441                           ;incstack = 0
 24442                           ;incstack = 0
 24443  0059EA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24444  0059EC  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24445  0059EE  E017               	bz	l2429
 24446                           
 24447                           ; BSR set to: 0
 24448  0059F0  0E01               	movlw	1
 24449  0059F2  6F64               	movwf	___lwmod@counter& (0+255),b
 24450  0059F4  D004               	goto	l13071
 24451  0059F6                     l13069:
 24452                           
 24453                           ; BSR set to: 0
 24454  0059F6  90D8               	bcf	status,0,c
 24455  0059F8  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24456  0059FA  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24457  0059FC  2B64               	incf	___lwmod@counter& (0+255),f,b
 24458  0059FE                     l13071:
 24459                           
 24460                           ; BSR set to: 0
 24461  0059FE  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24462  005A00  D7FA               	goto	l13069
 24463  005A02                     l13073:
 24464                           
 24465                           ; BSR set to: 0
 24466  005A02  5162               	movf	___lwmod@divisor& (0+255),w,b
 24467  005A04  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24468  005A06  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24469  005A08  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24470  005A0A  E304               	bnc	l13077
 24471                           
 24472                           ; BSR set to: 0
 24473  005A0C  5162               	movf	___lwmod@divisor& (0+255),w,b
 24474  005A0E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24475  005A10  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24476  005A12  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24477  005A14                     l13077:
 24478                           
 24479                           ; BSR set to: 0
 24480  005A14  90D8               	bcf	status,0,c
 24481  005A16  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24482  005A18  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24483                           
 24484                           ; BSR set to: 0
 24485  005A1A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24486  005A1C  D7F2               	goto	l13073
 24487  005A1E                     l2429:
 24488                           
 24489                           ; BSR set to: 0
 24490  005A1E  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24491  005A22  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24492                           
 24493                           ; BSR set to: 0
 24494  005A26  0012               	return	
 24495  005A28                     __end_of___lwmod:
 24496                           	opt stack 0
 24497                           tblptru	equ	0xFF8
 24498                           tblptrh	equ	0xFF7
 24499                           tblptrl	equ	0xFF6
 24500                           tablat	equ	0xFF5
 24501                           prodh	equ	0xFF4
 24502                           prodl	equ	0xFF3
 24503                           intcon	equ	0xFF2
 24504                           indf0	equ	0xFEF
 24505                           postinc0	equ	0xFEE
 24506                           fsr0h	equ	0xFEA
 24507                           fsr0l	equ	0xFE9
 24508                           wreg	equ	0xFE8
 24509                           indf1	equ	0xFE7
 24510                           postinc1	equ	0xFE6
 24511                           postdec1	equ	0xFE5
 24512                           fsr1h	equ	0xFE2
 24513                           fsr1l	equ	0xFE1
 24514                           indf2	equ	0xFDF
 24515                           postinc2	equ	0xFDE
 24516                           postdec2	equ	0xFDD
 24517                           plusw2	equ	0xFDB
 24518                           fsr2h	equ	0xFDA
 24519                           fsr2l	equ	0xFD9
 24520                           status	equ	0xFD8
 24521                           
 24522 ;; *************** function ___lwdiv *****************
 24523 ;; Defined at:
 24524 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24525 ;; Parameters:    Size  Location     Type
 24526 ;;  dividend        2    0[BANK0 ] unsigned int 
 24527 ;;  divisor         2    2[BANK0 ] unsigned int 
 24528 ;; Auto vars:     Size  Location     Type
 24529 ;;  quotient        2    5[BANK0 ] unsigned int 
 24530 ;;  counter         1    4[BANK0 ] unsigned char 
 24531 ;; Return value:  Size  Location     Type
 24532 ;;                  2    0[BANK0 ] unsigned int 
 24533 ;; Registers used:
 24534 ;;		wreg, status,2, status,0
 24535 ;; Tracked objects:
 24536 ;;		On entry : F/0
 24537 ;;		On exit  : F/0
 24538 ;;		Unchanged: 0/0
 24539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24540 ;;      Params:         0       4       0       0       0       0       0
 24541 ;;      Locals:         0       3       0       0       0       0       0
 24542 ;;      Temps:          0       0       0       0       0       0       0
 24543 ;;      Totals:         0       7       0       0       0       0       0
 24544 ;;Total ram usage:        7 bytes
 24545 ;; Hardware stack levels used:    1
 24546 ;; Hardware stack levels required when called:    3
 24547 ;; This function calls:
 24548 ;;		Nothing
 24549 ;; This function is called by:
 24550 ;;		_utoa
 24551 ;; This function uses a non-reentrant model
 24552 ;;
 24553                           
 24554                           	psect	text65
 24555  005790                     __ptext65:
 24556                           	opt stack 0
 24557  005790                     ___lwdiv:
 24558                           	opt stack 23
 24559                           
 24560                           ; BSR set to: 0
 24561                           
 24562                           ; BSR set to: 0
 24563                           ;incstack = 0
 24564                           ;incstack = 0
 24565  005790  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24566  005792  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24567                           
 24568                           ; BSR set to: 0
 24569  005794  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24570  005796  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24571  005798  E01B               	bz	l2419
 24572                           
 24573                           ; BSR set to: 0
 24574  00579A  0E01               	movlw	1
 24575  00579C  6F64               	movwf	___lwdiv@counter& (0+255),b
 24576  00579E  D004               	goto	l13051
 24577  0057A0                     l13049:
 24578                           
 24579                           ; BSR set to: 0
 24580  0057A0  90D8               	bcf	status,0,c
 24581  0057A2  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24582  0057A4  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24583  0057A6  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24584  0057A8                     l13051:
 24585                           
 24586                           ; BSR set to: 0
 24587  0057A8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24588  0057AA  D7FA               	goto	l13049
 24589  0057AC                     l13053:
 24590                           
 24591                           ; BSR set to: 0
 24592  0057AC  90D8               	bcf	status,0,c
 24593  0057AE  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24594  0057B0  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24595                           
 24596                           ; BSR set to: 0
 24597  0057B2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24598  0057B4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24599  0057B6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24600  0057B8  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24601  0057BA  E305               	bnc	l13061
 24602                           
 24603                           ; BSR set to: 0
 24604  0057BC  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24605  0057BE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24606  0057C0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24607  0057C2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24608                           
 24609                           ; BSR set to: 0
 24610  0057C4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24611  0057C6                     l13061:
 24612                           
 24613                           ; BSR set to: 0
 24614  0057C6  90D8               	bcf	status,0,c
 24615  0057C8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24616  0057CA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24617                           
 24618                           ; BSR set to: 0
 24619  0057CC  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24620  0057CE  D7EE               	goto	l13053
 24621  0057D0                     l2419:
 24622                           
 24623                           ; BSR set to: 0
 24624  0057D0  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24625  0057D4  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24626                           
 24627                           ; BSR set to: 0
 24628  0057D8  0012               	return	
 24629  0057DA                     __end_of___lwdiv:
 24630                           	opt stack 0
 24631                           tblptru	equ	0xFF8
 24632                           tblptrh	equ	0xFF7
 24633                           tblptrl	equ	0xFF6
 24634                           tablat	equ	0xFF5
 24635                           prodh	equ	0xFF4
 24636                           prodl	equ	0xFF3
 24637                           intcon	equ	0xFF2
 24638                           indf0	equ	0xFEF
 24639                           postinc0	equ	0xFEE
 24640                           fsr0h	equ	0xFEA
 24641                           fsr0l	equ	0xFE9
 24642                           wreg	equ	0xFE8
 24643                           indf1	equ	0xFE7
 24644                           postinc1	equ	0xFE6
 24645                           postdec1	equ	0xFE5
 24646                           fsr1h	equ	0xFE2
 24647                           fsr1l	equ	0xFE1
 24648                           indf2	equ	0xFDF
 24649                           postinc2	equ	0xFDE
 24650                           postdec2	equ	0xFDD
 24651                           plusw2	equ	0xFDB
 24652                           fsr2h	equ	0xFDA
 24653                           fsr2l	equ	0xFD9
 24654                           status	equ	0xFD8
 24655                           
 24656 ;; *************** function _printMode *****************
 24657 ;; Defined at:
 24658 ;;		line 2770 in file "main.c"
 24659 ;; Parameters:    Size  Location     Type
 24660 ;;		None
 24661 ;; Auto vars:     Size  Location     Type
 24662 ;;		None
 24663 ;; Return value:  Size  Location     Type
 24664 ;;		None               void
 24665 ;; Registers used:
 24666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24667 ;; Tracked objects:
 24668 ;;		On entry : 0/0
 24669 ;;		On exit  : 0/0
 24670 ;;		Unchanged: 0/0
 24671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24672 ;;      Params:         0       0       0       0       0       0       0
 24673 ;;      Locals:         0       0       0       0       0       0       0
 24674 ;;      Temps:          0       0       0       0       0       0       0
 24675 ;;      Totals:         0       0       0       0       0       0       0
 24676 ;;Total ram usage:        0 bytes
 24677 ;; Hardware stack levels used:    1
 24678 ;; Hardware stack levels required when called:    5
 24679 ;; This function calls:
 24680 ;;		_putsUSART
 24681 ;; This function is called by:
 24682 ;;		_main
 24683 ;; This function uses a non-reentrant model
 24684 ;;
 24685                           
 24686                           	psect	text66
 24687  0052A8                     __ptext66:
 24688                           	opt stack 0
 24689  0052A8                     _printMode:
 24690                           	opt stack 25
 24691                           
 24692                           ;main.c: 2771: putsUSART((char *) "Mode: ");
 24693                           
 24694                           ; BSR set to: 0
 24695                           ;incstack = 0
 24696                           ;incstack = 0
 24697  0052A8  0E7F               	movlw	high STR_256
 24698  0052AA  0100               	movlb	0	; () banked
 24699  0052AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24700  0052AE  0E25               	movlw	low STR_256
 24701  0052B0  6F61               	movwf	?_putsUSART& (0+255),b
 24702  0052B2  EC4F  F02B         	call	_putsUSART	;wreg free
 24703                           
 24704                           ;main.c: 2772: if (0 == mode) {
 24705  0052B6  0100               	movlb	0	; () banked
 24706  0052B8  67F1               	tstfsz	_mode& (0+255),b
 24707  0052BA  D007               	goto	l10105
 24708                           
 24709                           ; BSR set to: 0
 24710                           ;main.c: 2773: putsUSART((char *) "Verbose");
 24711  0052BC  0E7F               	movlw	high STR_257
 24712  0052BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24713  0052C0  0E1D               	movlw	low STR_257
 24714  0052C2  6F61               	movwf	?_putsUSART& (0+255),b
 24715  0052C4  EC4F  F02B         	call	_putsUSART	;wreg free
 24716                           
 24717                           ;main.c: 2774: } else if (1 == mode) {
 24718  0052C8  D023               	goto	l1225
 24719  0052CA                     l10105:
 24720                           
 24721                           ; BSR set to: 0
 24722  0052CA  05F1               	decf	_mode& (0+255),w,b
 24723  0052CC  E107               	bnz	l10109
 24724                           
 24725                           ; BSR set to: 0
 24726                           ;main.c: 2775: putsUSART((char *) "VSCP Driver");
 24727  0052CE  0E7E               	movlw	high STR_258
 24728  0052D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24729  0052D2  0E7A               	movlw	low STR_258
 24730  0052D4  6F61               	movwf	?_putsUSART& (0+255),b
 24731  0052D6  EC4F  F02B         	call	_putsUSART	;wreg free
 24732                           
 24733                           ;main.c: 2776: } else if (2 == mode) {
 24734  0052DA  D01A               	goto	l1225
 24735  0052DC                     l10109:
 24736                           
 24737                           ; BSR set to: 0
 24738  0052DC  51F1               	movf	_mode& (0+255),w,b
 24739  0052DE  0A02               	xorlw	2
 24740  0052E0  E107               	bnz	l10113
 24741                           
 24742                           ; BSR set to: 0
 24743                           ;main.c: 2777: putsUSART((char *) "SL Driver");
 24744  0052E2  0E7E               	movlw	high STR_259
 24745  0052E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24746  0052E6  0EB0               	movlw	low STR_259
 24747  0052E8  6F61               	movwf	?_putsUSART& (0+255),b
 24748  0052EA  EC4F  F02B         	call	_putsUSART	;wreg free
 24749                           
 24750                           ;main.c: 2778: } else if (3 == mode) {
 24751  0052EE  D010               	goto	l1225
 24752  0052F0                     l10113:
 24753                           
 24754                           ; BSR set to: 0
 24755  0052F0  51F1               	movf	_mode& (0+255),w,b
 24756  0052F2  0A03               	xorlw	3
 24757  0052F4  E107               	bnz	l10117
 24758                           
 24759                           ; BSR set to: 0
 24760                           ;main.c: 2779: putsUSART((char *) "VSCP Node");
 24761  0052F6  0E7E               	movlw	high STR_260
 24762  0052F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24763  0052FA  0EA6               	movlw	low STR_260
 24764  0052FC  6F61               	movwf	?_putsUSART& (0+255),b
 24765  0052FE  EC4F  F02B         	call	_putsUSART	;wreg free
 24766                           
 24767                           ;main.c: 2780: } else {
 24768  005302  D006               	goto	l1225
 24769  005304                     l10117:
 24770                           
 24771                           ; BSR set to: 0
 24772                           ;main.c: 2781: putsUSART((char *) "Unknown (Verbose used)");
 24773  005304  0E7C               	movlw	high STR_261
 24774  005306  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24775  005308  0EEE               	movlw	low STR_261
 24776  00530A  6F61               	movwf	?_putsUSART& (0+255),b
 24777  00530C  EC4F  F02B         	call	_putsUSART	;wreg free
 24778  005310                     l1225:
 24779                           
 24780                           ;main.c: 2782: }
 24781                           ;main.c: 2783: putsUSART((char *) "\r\n");
 24782  005310  0E74               	movlw	high (STR_197+50)
 24783  005312  0100               	movlb	0	; () banked
 24784  005314  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24785  005316  0E8A               	movlw	low (STR_197+50)
 24786  005318  6F61               	movwf	?_putsUSART& (0+255),b
 24787  00531A  EF4F  F02B         	goto	_putsUSART	;wreg free
 24788  00531E                     __end_of_printMode:
 24789                           	opt stack 0
 24790                           tblptru	equ	0xFF8
 24791                           tblptrh	equ	0xFF7
 24792                           tblptrl	equ	0xFF6
 24793                           tablat	equ	0xFF5
 24794                           prodh	equ	0xFF4
 24795                           prodl	equ	0xFF3
 24796                           intcon	equ	0xFF2
 24797                           indf0	equ	0xFEF
 24798                           postinc0	equ	0xFEE
 24799                           fsr0h	equ	0xFEA
 24800                           fsr0l	equ	0xFE9
 24801                           wreg	equ	0xFE8
 24802                           indf1	equ	0xFE7
 24803                           postinc1	equ	0xFE6
 24804                           postdec1	equ	0xFE5
 24805                           fsr1h	equ	0xFE2
 24806                           fsr1l	equ	0xFE1
 24807                           indf2	equ	0xFDF
 24808                           postinc2	equ	0xFDE
 24809                           postdec2	equ	0xFDD
 24810                           plusw2	equ	0xFDB
 24811                           fsr2h	equ	0xFDA
 24812                           fsr2l	equ	0xFD9
 24813                           status	equ	0xFD8
 24814                           
 24815 ;; *************** function _putsUSART *****************
 24816 ;; Defined at:
 24817 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24818 ;; Parameters:    Size  Location     Type
 24819 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24820 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24821 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24822 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24823 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24824 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24825 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24826 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24827 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24828 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24829 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24830 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24831 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24832 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24833 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24834 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24835 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24836 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24837 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24838 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24839 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24840 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24841 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24842 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24843 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24844 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24845 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24846 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24847 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24848 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24849 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24850 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24851 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24852 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24853 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24854 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24855 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24856 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24857 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24858 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24859 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24860 ;;		 -> STR_3(35), STR_2(53), STR_1(37), 
 24861 ;; Auto vars:     Size  Location     Type
 24862 ;;		None
 24863 ;; Return value:  Size  Location     Type
 24864 ;;		None               void
 24865 ;; Registers used:
 24866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24867 ;; Tracked objects:
 24868 ;;		On entry : F/0
 24869 ;;		On exit  : 0/0
 24870 ;;		Unchanged: 0/0
 24871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24872 ;;      Params:         0       2       0       0       0       0       0
 24873 ;;      Locals:         0       0       0       0       0       0       0
 24874 ;;      Temps:          0       2       0       0       0       0       0
 24875 ;;      Totals:         0       4       0       0       0       0       0
 24876 ;;Total ram usage:        4 bytes
 24877 ;; Hardware stack levels used:    1
 24878 ;; Hardware stack levels required when called:    4
 24879 ;; This function calls:
 24880 ;;		_WriteUSART
 24881 ;; This function is called by:
 24882 ;;		_main
 24883 ;;		_doModeVerbose
 24884 ;;		_doModeSLCAN
 24885 ;;		_receivePrintEventVerbose
 24886 ;;		_receiveSendEventSLCAN
 24887 ;;		_printStatistics
 24888 ;;		_printErrors
 24889 ;;		_printHelp
 24890 ;;		_findNodes
 24891 ;;		_printGUID
 24892 ;;		_printMDF
 24893 ;;		_printNodeFirmwareVersion
 24894 ;;		_printFirmwareVersion
 24895 ;;		_printMode
 24896 ;; This function uses a non-reentrant model
 24897 ;;
 24898                           
 24899                           	psect	text67
 24900  00569E                     __ptext67:
 24901                           	opt stack 0
 24902  00569E                     _putsUSART:
 24903                           	opt stack 24
 24904  00569E                     l1837:
 24905  00569E  A2AC               	btfss	4012,1,c	;volatile
 24906  0056A0  D7FE               	goto	l1837
 24907  0056A2  0100               	movlb	0	; () banked
 24908  0056A4  5161               	movf	putsUSART@data& (0+255),w,b
 24909  0056A6  6EF6               	movwf	tblptrl,c
 24910  0056A8  6EE9               	movwf	fsr0l,c
 24911  0056AA  0E05               	movlw	(high __ramtop+-1)
 24912  0056AC  6EEA               	movwf	fsr0h,c
 24913  0056AE  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24914  0056B0  64EA               	cpfsgt	fsr0h,c
 24915  0056B2  D003               	bra	u12217
 24916  0056B4  6EEA               	movwf	fsr0h,c
 24917  0056B6  50EF               	movf	indf0,w,c
 24918  0056B8  D003               	bra	u12210
 24919  0056BA                     u12217:
 24920  0056BA  6EF7               	movwf	tblptrh,c
 24921  0056BC  0008               	tblrd		*
 24922  0056BE  50F5               	movf	tablat,w,c
 24923  0056C0                     u12210:
 24924  0056C0  EC26  F02E         	call	_WriteUSART
 24925  0056C4  0100               	movlb	0	; () banked
 24926  0056C6  5161               	movf	putsUSART@data& (0+255),w,b
 24927  0056C8  6F63               	movwf	??_putsUSART& (0+255),b
 24928  0056CA  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24929  0056CC  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24930  0056CE  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24931  0056D0  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24932  0056D2  5163               	movf	??_putsUSART& (0+255),w,b
 24933  0056D4  6EF6               	movwf	tblptrl,c
 24934  0056D6  6EE9               	movwf	fsr0l,c
 24935  0056D8  0E05               	movlw	(high __ramtop+-1)
 24936  0056DA  6EEA               	movwf	fsr0h,c
 24937  0056DC  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24938  0056DE  64EA               	cpfsgt	fsr0h,c
 24939  0056E0  D003               	bra	u12227
 24940  0056E2  6EEA               	movwf	fsr0h,c
 24941  0056E4  50EF               	movf	indf0,w,c
 24942  0056E6  D003               	bra	u12220
 24943  0056E8                     u12227:
 24944  0056E8  6EF7               	movwf	tblptrh,c
 24945  0056EA  0008               	tblrd		*
 24946  0056EC  50F5               	movf	tablat,w,c
 24947  0056EE                     u12220:
 24948  0056EE  0900               	iorlw	0
 24949  0056F0  B4D8               	btfsc	status,2,c
 24950  0056F2  0012               	return	
 24951  0056F4  D7D4               	goto	l1837
 24952  0056F6                     __end_of_putsUSART:
 24953                           	opt stack 0
 24954                           tblptru	equ	0xFF8
 24955                           tblptrh	equ	0xFF7
 24956                           tblptrl	equ	0xFF6
 24957                           tablat	equ	0xFF5
 24958                           prodh	equ	0xFF4
 24959                           prodl	equ	0xFF3
 24960                           intcon	equ	0xFF2
 24961                           indf0	equ	0xFEF
 24962                           postinc0	equ	0xFEE
 24963                           fsr0h	equ	0xFEA
 24964                           fsr0l	equ	0xFE9
 24965                           wreg	equ	0xFE8
 24966                           indf1	equ	0xFE7
 24967                           postinc1	equ	0xFE6
 24968                           postdec1	equ	0xFE5
 24969                           fsr1h	equ	0xFE2
 24970                           fsr1l	equ	0xFE1
 24971                           indf2	equ	0xFDF
 24972                           postinc2	equ	0xFDE
 24973                           postdec2	equ	0xFDD
 24974                           plusw2	equ	0xFDB
 24975                           fsr2h	equ	0xFDA
 24976                           fsr2l	equ	0xFD9
 24977                           status	equ	0xFD8
 24978                           
 24979 ;; *************** function _WriteUSART *****************
 24980 ;; Defined at:
 24981 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24982 ;; Parameters:    Size  Location     Type
 24983 ;;  data            1    wreg     unsigned char 
 24984 ;; Auto vars:     Size  Location     Type
 24985 ;;  data            1    0[BANK0 ] unsigned char 
 24986 ;; Return value:  Size  Location     Type
 24987 ;;		None               void
 24988 ;; Registers used:
 24989 ;;		wreg
 24990 ;; Tracked objects:
 24991 ;;		On entry : 0/0
 24992 ;;		On exit  : 0/0
 24993 ;;		Unchanged: 0/0
 24994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24995 ;;      Params:         0       0       0       0       0       0       0
 24996 ;;      Locals:         0       1       0       0       0       0       0
 24997 ;;      Temps:          0       0       0       0       0       0       0
 24998 ;;      Totals:         0       1       0       0       0       0       0
 24999 ;;Total ram usage:        1 bytes
 25000 ;; Hardware stack levels used:    1
 25001 ;; Hardware stack levels required when called:    3
 25002 ;; This function calls:
 25003 ;;		Nothing
 25004 ;; This function is called by:
 25005 ;;		_doModeVerbose
 25006 ;;		_sendEscapedUartData
 25007 ;;		_sendVSCPDriverErrorFrame
 25008 ;;		_sendVSCPDriverAck
 25009 ;;		_sendVSCPDriverNack
 25010 ;;		_sendVSCPDriverCommandReply
 25011 ;;		_receiveSendEventCANAL
 25012 ;;		_receiveSendMultiEventCANAL
 25013 ;;		_sendVSCPModeCapabilities
 25014 ;;		_receiveSendEventSLCAN
 25015 ;;		_printBinary
 25016 ;;		_printFirmwareVersion
 25017 ;;		_putsUSART
 25018 ;; This function uses a non-reentrant model
 25019 ;;
 25020                           
 25021                           	psect	text68
 25022  005C4C                     __ptext68:
 25023                           	opt stack 0
 25024  005C4C                     _WriteUSART:
 25025                           	opt stack 25
 25026                           
 25027                           ;incstack = 0
 25028                           ;incstack = 0
 25029                           ;WriteUSART@data stored from wreg
 25030  005C4C  CFE8 F060          	movff	wreg,WriteUSART@data
 25031  005C50  ACAC               	btfss	4012,6,c	;volatile
 25032  005C52  D003               	goto	l12085
 25033  005C54  90AC               	bcf	4012,0,c	;volatile
 25034  005C56  B23D               	btfsc	_USART_Status,1,c
 25035  005C58  80AC               	bsf	4012,0,c	;volatile
 25036  005C5A                     l12085:
 25037  005C5A  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25038  005C5E  0012               	return	
 25039  005C60                     __end_of_WriteUSART:
 25040                           	opt stack 0
 25041                           tblptru	equ	0xFF8
 25042                           tblptrh	equ	0xFF7
 25043                           tblptrl	equ	0xFF6
 25044                           tablat	equ	0xFF5
 25045                           prodh	equ	0xFF4
 25046                           prodl	equ	0xFF3
 25047                           intcon	equ	0xFF2
 25048                           indf0	equ	0xFEF
 25049                           postinc0	equ	0xFEE
 25050                           fsr0h	equ	0xFEA
 25051                           fsr0l	equ	0xFE9
 25052                           wreg	equ	0xFE8
 25053                           indf1	equ	0xFE7
 25054                           postinc1	equ	0xFE6
 25055                           postdec1	equ	0xFE5
 25056                           fsr1h	equ	0xFE2
 25057                           fsr1l	equ	0xFE1
 25058                           indf2	equ	0xFDF
 25059                           postinc2	equ	0xFDE
 25060                           postdec2	equ	0xFDD
 25061                           plusw2	equ	0xFDB
 25062                           fsr2h	equ	0xFDA
 25063                           fsr2l	equ	0xFD9
 25064                           status	equ	0xFD8
 25065                           
 25066 ;; *************** function _init *****************
 25067 ;; Defined at:
 25068 ;;		line 374 in file "main.c"
 25069 ;; Parameters:    Size  Location     Type
 25070 ;;		None
 25071 ;; Auto vars:     Size  Location     Type
 25072 ;;		None
 25073 ;; Return value:  Size  Location     Type
 25074 ;;		None               void
 25075 ;; Registers used:
 25076 ;;		wreg, status,2, status,0, cstack
 25077 ;; Tracked objects:
 25078 ;;		On entry : 0/0
 25079 ;;		On exit  : F/0
 25080 ;;		Unchanged: 0/0
 25081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25082 ;;      Params:         0       0       0       0       0       0       0
 25083 ;;      Locals:         0       0       0       0       0       0       0
 25084 ;;      Temps:          0       0       0       0       0       0       0
 25085 ;;      Totals:         0       0       0       0       0       0       0
 25086 ;;Total ram usage:        0 bytes
 25087 ;; Hardware stack levels used:    1
 25088 ;; Hardware stack levels required when called:    5
 25089 ;; This function calls:
 25090 ;;		_WriteTimer0
 25091 ;;		_init_app_ram
 25092 ;;		_OpenUSART
 25093 ;;		_OpenTimer0
 25094 ;;		_ECANInitialize
 25095 ;; This function is called by:
 25096 ;;		_main
 25097 ;; This function uses a non-reentrant model
 25098 ;;
 25099                           
 25100                           	psect	text69
 25101  0057DA                     __ptext69:
 25102                           	opt stack 0
 25103  0057DA                     _init:
 25104                           	opt stack 25
 25105                           
 25106                           ;main.c: 376: init_app_ram();
 25107                           
 25108                           ;incstack = 0
 25109                           ;incstack = 0
 25110  0057DA  EC7B  F02B         	call	_init_app_ram	;wreg free
 25111                           
 25112                           ; BSR set to: 1
 25113                           ;main.c: 379: OSCCONbits.IRCF0 = 1;
 25114  0057DE  88D3               	bsf	4051,4,c	;volatile
 25115                           
 25116                           ; BSR set to: 1
 25117                           ;main.c: 380: OSCCONbits.IRCF1 = 1;
 25118  0057E0  8AD3               	bsf	4051,5,c	;volatile
 25119                           
 25120                           ; BSR set to: 1
 25121                           ;main.c: 381: OSCCONbits.IRCF2 = 1;
 25122  0057E2  8CD3               	bsf	4051,6,c	;volatile
 25123                           
 25124                           ; BSR set to: 1
 25125                           ;main.c: 382: OSCTUNEbits.PLLEN = 1;
 25126  0057E4  8C9B               	bsf	3995,6,c	;volatile
 25127                           
 25128                           ; BSR set to: 1
 25129                           ;main.c: 384: TRISBbits.RB2 = 0;
 25130  0057E6  9493               	bcf	3987,2,c	;volatile
 25131                           
 25132                           ; BSR set to: 1
 25133                           ;main.c: 385: TRISBbits.RB3 = 1;
 25134  0057E8  8693               	bsf	3987,3,c	;volatile
 25135                           
 25136                           ; BSR set to: 1
 25137                           ;main.c: 387: TRISCbits.RC1 = 0;
 25138  0057EA  9294               	bcf	3988,1,c	;volatile
 25139                           
 25140                           ; BSR set to: 1
 25141                           ;main.c: 388: TRISCbits.RC6 = 0;
 25142  0057EC  9C94               	bcf	3988,6,c	;volatile
 25143                           
 25144                           ; BSR set to: 1
 25145                           ;main.c: 389: TRISCbits.RC7 = 1;
 25146  0057EE  8E94               	bsf	3988,7,c	;volatile
 25147                           
 25148                           ;main.c: 393: OpenUSART( 0b01111111 &
 25149                           ;main.c: 394: 0b11111111 &
 25150                           ;main.c: 395: 0b11111110 &
 25151                           ;main.c: 396: 0b11111101 &
 25152                           ;main.c: 397: 0b11111111,
 25153                           ;main.c: 398: 21 );
 25154  0057F0  0100               	movlb	0	; () banked
 25155  0057F2  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25156  0057F4  0E15               	movlw	21
 25157  0057F6  6F60               	movwf	?_OpenUSART& (0+255),b
 25158  0057F8  0E7C               	movlw	124
 25159  0057FA  ECF5  F02A         	call	_OpenUSART
 25160                           
 25161                           ; BSR set to: 0
 25162                           ;main.c: 400: RCIF = 0;
 25163  0057FE  9A9E               	bcf	3998,5,c	;volatile
 25164                           
 25165                           ; BSR set to: 0
 25166                           ;main.c: 401: RCIP = 0;
 25167  005800  9A9F               	bcf	3999,5,c	;volatile
 25168                           
 25169                           ; BSR set to: 0
 25170                           ;main.c: 402: RCIE = 1;
 25171  005802  8A9D               	bsf	3997,5,c	;volatile
 25172                           
 25173                           ; BSR set to: 0
 25174                           ;main.c: 403: PEIE = 1;
 25175  005804  8CF2               	bsf	intcon,6,c	;volatile
 25176                           
 25177                           ; BSR set to: 0
 25178                           ;main.c: 406: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25179  005806  0E92               	movlw	146
 25180  005808  ECF0  F02D         	call	_OpenTimer0
 25181                           
 25182                           ; BSR set to: 0
 25183                           ;main.c: 407: WriteTimer0(0xfb1d);
 25184  00580C  0EFB               	movlw	251
 25185  00580E  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25186  005810  0E1D               	movlw	29
 25187  005812  6F60               	movwf	?_WriteTimer0& (0+255),b
 25188  005814  EC30  F02E         	call	_WriteTimer0	;wreg free
 25189                           
 25190                           ;main.c: 410: ECANInitialize();
 25191  005818  EC61  F028         	call	_ECANInitialize	;wreg free
 25192                           
 25193                           ; BSR set to: 0
 25194                           ;main.c: 434: RXBnIE = 1;
 25195  00581C  82A3               	bsf	4003,1,c	;volatile
 25196                           
 25197                           ; BSR set to: 0
 25198                           ;main.c: 435: ERRIE = 1;
 25199  00581E  8AA3               	bsf	4003,5,c	;volatile
 25200                           
 25201                           ; BSR set to: 0
 25202                           ;main.c: 437: (INTCONbits.GIE = 1);
 25203  005820  8EF2               	bsf	intcon,7,c	;volatile
 25204                           
 25205                           ; BSR set to: 0
 25206  005822  0012               	return	
 25207  005824                     __end_of_init:
 25208                           	opt stack 0
 25209                           tblptru	equ	0xFF8
 25210                           tblptrh	equ	0xFF7
 25211                           tblptrl	equ	0xFF6
 25212                           tablat	equ	0xFF5
 25213                           prodh	equ	0xFF4
 25214                           prodl	equ	0xFF3
 25215                           intcon	equ	0xFF2
 25216                           indf0	equ	0xFEF
 25217                           postinc0	equ	0xFEE
 25218                           fsr0h	equ	0xFEA
 25219                           fsr0l	equ	0xFE9
 25220                           wreg	equ	0xFE8
 25221                           indf1	equ	0xFE7
 25222                           postinc1	equ	0xFE6
 25223                           postdec1	equ	0xFE5
 25224                           fsr1h	equ	0xFE2
 25225                           fsr1l	equ	0xFE1
 25226                           indf2	equ	0xFDF
 25227                           postinc2	equ	0xFDE
 25228                           postdec2	equ	0xFDD
 25229                           plusw2	equ	0xFDB
 25230                           fsr2h	equ	0xFDA
 25231                           fsr2l	equ	0xFD9
 25232                           status	equ	0xFD8
 25233                           
 25234 ;; *************** function _ECANInitialize *****************
 25235 ;; Defined at:
 25236 ;;		line 168 in file "ECAN.c"
 25237 ;; Parameters:    Size  Location     Type
 25238 ;;		None
 25239 ;; Auto vars:     Size  Location     Type
 25240 ;;		None
 25241 ;; Return value:  Size  Location     Type
 25242 ;;		None               void
 25243 ;; Registers used:
 25244 ;;		wreg, status,2, status,0, cstack
 25245 ;; Tracked objects:
 25246 ;;		On entry : F/0
 25247 ;;		On exit  : F/0
 25248 ;;		Unchanged: 0/0
 25249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25250 ;;      Params:         0       0       0       0       0       0       0
 25251 ;;      Locals:         0       0       0       0       0       0       0
 25252 ;;      Temps:          0       0       0       0       0       0       0
 25253 ;;      Totals:         0       0       0       0       0       0       0
 25254 ;;Total ram usage:        0 bytes
 25255 ;; Hardware stack levels used:    1
 25256 ;; Hardware stack levels required when called:    4
 25257 ;; This function calls:
 25258 ;;		_ECANSetOperationMode
 25259 ;; This function is called by:
 25260 ;;		_init
 25261 ;; This function uses a non-reentrant model
 25262 ;;
 25263                           
 25264                           	psect	text70
 25265  0050C2                     __ptext70:
 25266                           	opt stack 0
 25267  0050C2                     _ECANInitialize:
 25268                           	opt stack 25
 25269                           
 25270                           ; BSR set to: 0
 25271                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25272                           
 25273                           ; BSR set to: 0
 25274                           ;incstack = 0
 25275                           ;incstack = 0
 25276  0050C2  0E80               	movlw	128
 25277  0050C4  EC0E  F02E         	call	_ECANSetOperationMode
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25281  0050C8  0E09               	movlw	9
 25282  0050CA  6E70               	movwf	3952,c	;volatile
 25283                           
 25284                           ; BSR set to: 0
 25285                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25286  0050CC  0EFC               	movlw	252
 25287  0050CE  6E71               	movwf	3953,c	;volatile
 25288                           
 25289                           ; BSR set to: 0
 25290                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25291                           ;ECAN.c: 181: (0 << 6) |
 25292                           ;ECAN.c: 182: (2-1);
 25293  0050D0  0E01               	movlw	1
 25294  0050D2  6E72               	movwf	3954,c	;volatile
 25295                           
 25296                           ; BSR set to: 0
 25297                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25298  0050D4  0E20               	movlw	32
 25299  0050D6  6E73               	movwf	3955,c	;volatile
 25300                           
 25301                           ; BSR set to: 0
 25302                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25303  0050D8  8E77               	bsf	3959,7,c	;volatile
 25304                           
 25305                           ; BSR set to: 0
 25306                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25307  0050DA  9C77               	bcf	3959,6,c	;volatile
 25308                           
 25309                           ; BSR set to: 0
 25310                           ;ECAN.c: 205: RXB0CON = 0;
 25311  0050DC  6A60               	clrf	3936,c	;volatile
 25312                           
 25313                           ; BSR set to: 0
 25314                           ;ECAN.c: 211: RXB1CON = 0;
 25315  0050DE  010F               	movlb	15	; () banked
 25316  0050E0  6B50               	clrf	80,b	;volatile
 25317                           
 25318                           ; BSR set to: 15
 25319                           ;ECAN.c: 221: B0CON = 0;
 25320  0050E2  010E               	movlb	14	; () banked
 25321  0050E4  6B20               	clrf	32,b	;volatile
 25322                           
 25323                           ; BSR set to: 14
 25324                           ;ECAN.c: 231: B1CON = 0;
 25325  0050E6  6B30               	clrf	48,b	;volatile
 25326                           
 25327                           ; BSR set to: 14
 25328                           ;ECAN.c: 241: B2CON = 0;
 25329  0050E8  6B40               	clrf	64,b	;volatile
 25330                           
 25331                           ; BSR set to: 14
 25332                           ;ECAN.c: 251: B3CON = 0;
 25333  0050EA  6B50               	clrf	80,b	;volatile
 25334                           
 25335                           ; BSR set to: 14
 25336                           ;ECAN.c: 261: B4CON = 0;
 25337  0050EC  6B60               	clrf	96,b	;volatile
 25338                           
 25339                           ; BSR set to: 14
 25340                           ;ECAN.c: 271: B5CON = 0;
 25341  0050EE  6B70               	clrf	112,b	;volatile
 25342                           
 25343                           ; BSR set to: 14
 25344                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25345  0050F0  010D               	movlb	13	; () banked
 25346  0050F2  6BF8               	clrf	248,b	;volatile
 25347                           
 25348                           ; BSR set to: 13
 25349                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25350  0050F4  010F               	movlb	15	; () banked
 25351  0050F6  6B00               	clrf	0,b	;volatile
 25352                           
 25353                           ; BSR set to: 15
 25354  0050F8  0E08               	movlw	8
 25355  0050FA  6F01               	movwf	1,b	;volatile
 25356                           
 25357                           ; BSR set to: 15
 25358  0050FC  6B02               	clrf	2,b	;volatile
 25359                           
 25360                           ; BSR set to: 15
 25361  0050FE  6B03               	clrf	3,b	;volatile
 25362                           
 25363                           ; BSR set to: 15
 25364                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25365  005100  0E01               	movlw	1
 25366  005102  010D               	movlb	13	; () banked
 25367  005104  6FD4               	movwf	212,b	;volatile
 25368                           
 25369                           ; BSR set to: 13
 25370                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25371  005106  6BD5               	clrf	213,b	;volatile
 25372                           
 25373                           ; BSR set to: 13
 25374                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25375  005108  6BE0               	clrf	224,b	;volatile
 25376                           
 25377                           ; BSR set to: 13
 25378                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25379  00510A  0E11               	movlw	17
 25380  00510C  6FE1               	movwf	225,b	;volatile
 25381                           
 25382                           ; BSR set to: 13
 25383                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25384  00510E  6FE2               	movwf	226,b	;volatile
 25385                           
 25386                           ; BSR set to: 13
 25387                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25388  005110  6BE3               	clrf	227,b	;volatile
 25389                           
 25390                           ; BSR set to: 13
 25391                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25392  005112  6BE4               	clrf	228,b	;volatile
 25393                           
 25394                           ; BSR set to: 13
 25395                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25396  005114  6BE5               	clrf	229,b	;volatile
 25397                           
 25398                           ; BSR set to: 13
 25399                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25400  005116  6BE6               	clrf	230,b	;volatile
 25401                           
 25402                           ; BSR set to: 13
 25403                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25404  005118  6BE7               	clrf	231,b	;volatile
 25405                           
 25406                           ; BSR set to: 13
 25407                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25408  00511A  0E54               	movlw	84
 25409  00511C  6FF0               	movwf	240,b	;volatile
 25410                           
 25411                           ; BSR set to: 13
 25412                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25413  00511E  0E05               	movlw	5
 25414  005120  6FF1               	movwf	241,b	;volatile
 25415                           
 25416                           ; BSR set to: 13
 25417                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25418  005122  6BF2               	clrf	242,b	;volatile
 25419                           
 25420                           ; BSR set to: 13
 25421                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25422  005124  6BF2               	clrf	242,b	;volatile
 25423                           
 25424                           ; BSR set to: 13
 25425                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25426  005126  010F               	movlb	15	; () banked
 25427  005128  6B18               	clrf	24,b	;volatile
 25428                           
 25429                           ; BSR set to: 15
 25430  00512A  6B19               	clrf	25,b	;volatile
 25431                           
 25432                           ; BSR set to: 15
 25433  00512C  6B1A               	clrf	26,b	;volatile
 25434                           
 25435                           ; BSR set to: 15
 25436  00512E  6B1B               	clrf	27,b	;volatile
 25437                           
 25438                           ; BSR set to: 15
 25439                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25440  005130  8719               	bsf	25,3,b	;volatile
 25441                           
 25442                           ; BSR set to: 15
 25443                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25444  005132  6B1C               	clrf	28,b	;volatile
 25445                           
 25446                           ; BSR set to: 15
 25447  005134  6B1D               	clrf	29,b	;volatile
 25448                           
 25449                           ; BSR set to: 15
 25450  005136  6B1E               	clrf	30,b	;volatile
 25451                           
 25452                           ; BSR set to: 15
 25453  005138  6B1F               	clrf	31,b	;volatile
 25454                           
 25455                           ; BSR set to: 15
 25456                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25457  00513A  871D               	bsf	29,3,b	;volatile
 25458                           
 25459                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25460  00513C  0E20               	movlw	32
 25461  00513E  EF0E  F02E         	goto	_ECANSetOperationMode
 25462  005142                     __end_of_ECANInitialize:
 25463                           	opt stack 0
 25464                           tblptru	equ	0xFF8
 25465                           tblptrh	equ	0xFF7
 25466                           tblptrl	equ	0xFF6
 25467                           tablat	equ	0xFF5
 25468                           prodh	equ	0xFF4
 25469                           prodl	equ	0xFF3
 25470                           intcon	equ	0xFF2
 25471                           indf0	equ	0xFEF
 25472                           postinc0	equ	0xFEE
 25473                           fsr0h	equ	0xFEA
 25474                           fsr0l	equ	0xFE9
 25475                           wreg	equ	0xFE8
 25476                           indf1	equ	0xFE7
 25477                           postinc1	equ	0xFE6
 25478                           postdec1	equ	0xFE5
 25479                           fsr1h	equ	0xFE2
 25480                           fsr1l	equ	0xFE1
 25481                           indf2	equ	0xFDF
 25482                           postinc2	equ	0xFDE
 25483                           postdec2	equ	0xFDD
 25484                           plusw2	equ	0xFDB
 25485                           fsr2h	equ	0xFDA
 25486                           fsr2l	equ	0xFD9
 25487                           status	equ	0xFD8
 25488                           
 25489 ;; *************** function _ECANSetOperationMode *****************
 25490 ;; Defined at:
 25491 ;;		line 1014 in file "ECAN.c"
 25492 ;; Parameters:    Size  Location     Type
 25493 ;;  mode            1    wreg     enum E16337
 25494 ;; Auto vars:     Size  Location     Type
 25495 ;;  mode            1    0[BANK0 ] enum E16337
 25496 ;; Return value:  Size  Location     Type
 25497 ;;		None               void
 25498 ;; Registers used:
 25499 ;;		wreg, status,2, status,0
 25500 ;; Tracked objects:
 25501 ;;		On entry : 0/0
 25502 ;;		On exit  : F/0
 25503 ;;		Unchanged: 0/0
 25504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25505 ;;      Params:         0       0       0       0       0       0       0
 25506 ;;      Locals:         0       1       0       0       0       0       0
 25507 ;;      Temps:          0       0       0       0       0       0       0
 25508 ;;      Totals:         0       1       0       0       0       0       0
 25509 ;;Total ram usage:        1 bytes
 25510 ;; Hardware stack levels used:    1
 25511 ;; Hardware stack levels required when called:    3
 25512 ;; This function calls:
 25513 ;;		Nothing
 25514 ;; This function is called by:
 25515 ;;		_doModeVerbose
 25516 ;;		_doModeVscp
 25517 ;;		_doModeSLCAN
 25518 ;;		_ECANInitialize
 25519 ;; This function uses a non-reentrant model
 25520 ;;
 25521                           
 25522                           	psect	text71
 25523  005C1C                     __ptext71:
 25524                           	opt stack 0
 25525  005C1C                     _ECANSetOperationMode:
 25526                           	opt stack 26
 25527                           
 25528                           ; BSR set to: 0
 25529                           ;incstack = 0
 25530                           ;incstack = 0
 25531                           ;ECANSetOperationMode@mode stored from wreg
 25532  005C1C  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25533                           
 25534                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25535  005C20  0E1F               	movlw	31
 25536  005C22  166F               	andwf	3951,f,c	;volatile
 25537                           
 25538                           ;ECAN.c: 1016: CANCON |= mode;
 25539  005C24  0100               	movlb	0	; () banked
 25540  005C26  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25541  005C28  126F               	iorwf	3951,f,c	;volatile
 25542  005C2A                     l11401:
 25543                           
 25544                           ; BSR set to: 0
 25545  005C2A  506F               	movf	3951,w,c	;volatile
 25546  005C2C  0BE0               	andlw	224
 25547  005C2E  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25548  005C30  B4D8               	btfsc	status,2,c
 25549                           
 25550                           ; BSR set to: 0
 25551  005C32  0012               	return	
 25552  005C34  D7FA               	goto	l11401
 25553  005C36                     __end_of_ECANSetOperationMode:
 25554                           	opt stack 0
 25555                           tblptru	equ	0xFF8
 25556                           tblptrh	equ	0xFF7
 25557                           tblptrl	equ	0xFF6
 25558                           tablat	equ	0xFF5
 25559                           prodh	equ	0xFF4
 25560                           prodl	equ	0xFF3
 25561                           intcon	equ	0xFF2
 25562                           indf0	equ	0xFEF
 25563                           postinc0	equ	0xFEE
 25564                           fsr0h	equ	0xFEA
 25565                           fsr0l	equ	0xFE9
 25566                           wreg	equ	0xFE8
 25567                           indf1	equ	0xFE7
 25568                           postinc1	equ	0xFE6
 25569                           postdec1	equ	0xFE5
 25570                           fsr1h	equ	0xFE2
 25571                           fsr1l	equ	0xFE1
 25572                           indf2	equ	0xFDF
 25573                           postinc2	equ	0xFDE
 25574                           postdec2	equ	0xFDD
 25575                           plusw2	equ	0xFDB
 25576                           fsr2h	equ	0xFDA
 25577                           fsr2l	equ	0xFD9
 25578                           status	equ	0xFD8
 25579                           
 25580 ;; *************** function _OpenTimer0 *****************
 25581 ;; Defined at:
 25582 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25583 ;; Parameters:    Size  Location     Type
 25584 ;;  config          1    wreg     unsigned char 
 25585 ;; Auto vars:     Size  Location     Type
 25586 ;;  config          1    0[BANK0 ] unsigned char 
 25587 ;; Return value:  Size  Location     Type
 25588 ;;		None               void
 25589 ;; Registers used:
 25590 ;;		wreg, status,2, status,0
 25591 ;; Tracked objects:
 25592 ;;		On entry : F/0
 25593 ;;		On exit  : F/0
 25594 ;;		Unchanged: 0/0
 25595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25596 ;;      Params:         0       0       0       0       0       0       0
 25597 ;;      Locals:         0       1       0       0       0       0       0
 25598 ;;      Temps:          0       0       0       0       0       0       0
 25599 ;;      Totals:         0       1       0       0       0       0       0
 25600 ;;Total ram usage:        1 bytes
 25601 ;; Hardware stack levels used:    1
 25602 ;; Hardware stack levels required when called:    3
 25603 ;; This function calls:
 25604 ;;		Nothing
 25605 ;; This function is called by:
 25606 ;;		_init
 25607 ;; This function uses a non-reentrant model
 25608 ;;
 25609                           
 25610                           	psect	text72
 25611  005BE0                     __ptext72:
 25612                           	opt stack 0
 25613  005BE0                     _OpenTimer0:
 25614                           	opt stack 26
 25615                           
 25616                           ; BSR set to: 0
 25617                           ;incstack = 0
 25618                           ;incstack = 0
 25619                           ;OpenTimer0@config stored from wreg
 25620  005BE0  CFE8 F060          	movff	wreg,OpenTimer0@config
 25621                           
 25622                           ; BSR set to: 0
 25623  005BE4  5160               	movf	OpenTimer0@config& (0+255),w,b
 25624  005BE6  0B7F               	andlw	127
 25625  005BE8  6ED5               	movwf	4053,c	;volatile
 25626                           
 25627                           ; BSR set to: 0
 25628  005BEA  6AD7               	clrf	4055,c	;volatile
 25629                           
 25630                           ; BSR set to: 0
 25631  005BEC  6AD6               	clrf	4054,c	;volatile
 25632                           
 25633                           ; BSR set to: 0
 25634  005BEE  94F2               	bcf	intcon,2,c	;volatile
 25635                           
 25636                           ; BSR set to: 0
 25637  005BF0  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25638  005BF2  D002               	goto	l1787
 25639                           
 25640                           ; BSR set to: 0
 25641  005BF4  8AF2               	bsf	intcon,5,c	;volatile
 25642  005BF6  D001               	goto	l1788
 25643  005BF8                     l1787:
 25644                           
 25645                           ; BSR set to: 0
 25646  005BF8  9AF2               	bcf	intcon,5,c	;volatile
 25647  005BFA                     l1788:
 25648                           
 25649                           ; BSR set to: 0
 25650  005BFA  8ED5               	bsf	4053,7,c	;volatile
 25651                           
 25652                           ; BSR set to: 0
 25653  005BFC  0012               	return	
 25654  005BFE                     __end_of_OpenTimer0:
 25655                           	opt stack 0
 25656                           tblptru	equ	0xFF8
 25657                           tblptrh	equ	0xFF7
 25658                           tblptrl	equ	0xFF6
 25659                           tablat	equ	0xFF5
 25660                           prodh	equ	0xFF4
 25661                           prodl	equ	0xFF3
 25662                           intcon	equ	0xFF2
 25663                           indf0	equ	0xFEF
 25664                           postinc0	equ	0xFEE
 25665                           fsr0h	equ	0xFEA
 25666                           fsr0l	equ	0xFE9
 25667                           wreg	equ	0xFE8
 25668                           indf1	equ	0xFE7
 25669                           postinc1	equ	0xFE6
 25670                           postdec1	equ	0xFE5
 25671                           fsr1h	equ	0xFE2
 25672                           fsr1l	equ	0xFE1
 25673                           indf2	equ	0xFDF
 25674                           postinc2	equ	0xFDE
 25675                           postdec2	equ	0xFDD
 25676                           plusw2	equ	0xFDB
 25677                           fsr2h	equ	0xFDA
 25678                           fsr2l	equ	0xFD9
 25679                           status	equ	0xFD8
 25680                           
 25681 ;; *************** function _OpenUSART *****************
 25682 ;; Defined at:
 25683 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25684 ;; Parameters:    Size  Location     Type
 25685 ;;  config          1    wreg     unsigned char 
 25686 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25687 ;; Auto vars:     Size  Location     Type
 25688 ;;  config          1    2[BANK0 ] unsigned char 
 25689 ;; Return value:  Size  Location     Type
 25690 ;;		None               void
 25691 ;; Registers used:
 25692 ;;		wreg, status,2
 25693 ;; Tracked objects:
 25694 ;;		On entry : F/0
 25695 ;;		On exit  : F/0
 25696 ;;		Unchanged: 0/0
 25697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25698 ;;      Params:         0       2       0       0       0       0       0
 25699 ;;      Locals:         0       1       0       0       0       0       0
 25700 ;;      Temps:          0       0       0       0       0       0       0
 25701 ;;      Totals:         0       3       0       0       0       0       0
 25702 ;;Total ram usage:        3 bytes
 25703 ;; Hardware stack levels used:    1
 25704 ;; Hardware stack levels required when called:    3
 25705 ;; This function calls:
 25706 ;;		Nothing
 25707 ;; This function is called by:
 25708 ;;		_init
 25709 ;; This function uses a non-reentrant model
 25710 ;;
 25711                           
 25712                           	psect	text73
 25713  0055EA                     __ptext73:
 25714                           	opt stack 0
 25715  0055EA                     _OpenUSART:
 25716                           	opt stack 26
 25717                           
 25718                           ; BSR set to: 0
 25719                           ;incstack = 0
 25720                           ;incstack = 0
 25721                           ;OpenUSART@config stored from wreg
 25722  0055EA  CFE8 F062          	movff	wreg,OpenUSART@config
 25723                           
 25724                           ; BSR set to: 0
 25725  0055EE  6AAC               	clrf	4012,c	;volatile
 25726  0055F0  6AAB               	clrf	4011,c	;volatile
 25727                           
 25728                           ; BSR set to: 0
 25729  0055F2  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25730                           
 25731                           ; BSR set to: 0
 25732  0055F4  88AC               	bsf	4012,4,c	;volatile
 25733                           
 25734                           ; BSR set to: 0
 25735  0055F6  A362               	btfss	OpenUSART@config& (0+255),1,b
 25736  0055F8  D002               	goto	l11091
 25737                           
 25738                           ; BSR set to: 0
 25739  0055FA  8CAC               	bsf	4012,6,c	;volatile
 25740  0055FC  8CAB               	bsf	4011,6,c	;volatile
 25741  0055FE                     l11091:
 25742                           
 25743                           ; BSR set to: 0
 25744  0055FE  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25745                           
 25746                           ; BSR set to: 0
 25747  005600  8EAC               	bsf	4012,7,c	;volatile
 25748                           
 25749                           ; BSR set to: 0
 25750  005602  A762               	btfss	OpenUSART@config& (0+255),3,b
 25751  005604  D002               	goto	l1820
 25752                           
 25753                           ; BSR set to: 0
 25754  005606  88AB               	bsf	4011,4,c	;volatile
 25755  005608  D001               	goto	l11099
 25756  00560A                     l1820:
 25757                           
 25758                           ; BSR set to: 0
 25759  00560A  8AAB               	bsf	4011,5,c	;volatile
 25760  00560C                     l11099:
 25761                           
 25762                           ; BSR set to: 0
 25763  00560C  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25764                           
 25765                           ; BSR set to: 0
 25766  00560E  84AC               	bsf	4012,2,c	;volatile
 25767                           
 25768                           ; BSR set to: 0
 25769  005610  989E               	bcf	3998,4,c	;volatile
 25770                           
 25771                           ; BSR set to: 0
 25772  005612  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25773                           
 25774                           ; BSR set to: 0
 25775  005614  86AB               	bsf	4011,3,c	;volatile
 25776                           
 25777                           ; BSR set to: 0
 25778  005616  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25779  005618  D002               	goto	l1824
 25780                           
 25781                           ; BSR set to: 0
 25782  00561A  8A9D               	bsf	3997,5,c	;volatile
 25783  00561C  D001               	goto	l1825
 25784  00561E                     l1824:
 25785                           
 25786                           ; BSR set to: 0
 25787  00561E  9A9D               	bcf	3997,5,c	;volatile
 25788  005620                     l1825:
 25789                           
 25790                           ; BSR set to: 0
 25791  005620  9A9E               	bcf	3998,5,c	;volatile
 25792                           
 25793                           ; BSR set to: 0
 25794  005622  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25795  005624  D002               	goto	l1826
 25796                           
 25797                           ; BSR set to: 0
 25798  005626  889D               	bsf	3997,4,c	;volatile
 25799  005628  D001               	goto	l1827
 25800  00562A                     l1826:
 25801                           
 25802                           ; BSR set to: 0
 25803  00562A  989D               	bcf	3997,4,c	;volatile
 25804  00562C                     l1827:
 25805                           
 25806                           ; BSR set to: 0
 25807  00562C  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25808                           
 25809                           ; BSR set to: 0
 25810  005630  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25811  005632  6EB0               	movwf	4016,c	;volatile
 25812                           
 25813                           ; BSR set to: 0
 25814  005634  8AAC               	bsf	4012,5,c	;volatile
 25815                           
 25816                           ; BSR set to: 0
 25817  005636  8EAB               	bsf	4011,7,c	;volatile
 25818                           
 25819                           ; BSR set to: 0
 25820  005638  9C94               	bcf	3988,6,c	;volatile
 25821                           
 25822                           ; BSR set to: 0
 25823  00563A  8E94               	bsf	3988,7,c	;volatile
 25824                           
 25825                           ; BSR set to: 0
 25826  00563C  B8AC               	btfsc	4012,4,c	;volatile
 25827                           
 25828                           ; BSR set to: 0
 25829  00563E  BEAC               	btfsc	4012,7,c	;volatile
 25830  005640  D001               	goto	l1829
 25831                           
 25832                           ; BSR set to: 0
 25833  005642  8C94               	bsf	3988,6,c	;volatile
 25834  005644                     l1829:
 25835                           
 25836                           ; BSR set to: 0
 25837  005644  0012               	return	
 25838  005646                     __end_of_OpenUSART:
 25839                           	opt stack 0
 25840                           tblptru	equ	0xFF8
 25841                           tblptrh	equ	0xFF7
 25842                           tblptrl	equ	0xFF6
 25843                           tablat	equ	0xFF5
 25844                           prodh	equ	0xFF4
 25845                           prodl	equ	0xFF3
 25846                           intcon	equ	0xFF2
 25847                           indf0	equ	0xFEF
 25848                           postinc0	equ	0xFEE
 25849                           fsr0h	equ	0xFEA
 25850                           fsr0l	equ	0xFE9
 25851                           wreg	equ	0xFE8
 25852                           indf1	equ	0xFE7
 25853                           postinc1	equ	0xFE6
 25854                           postdec1	equ	0xFE5
 25855                           fsr1h	equ	0xFE2
 25856                           fsr1l	equ	0xFE1
 25857                           indf2	equ	0xFDF
 25858                           postinc2	equ	0xFDE
 25859                           postdec2	equ	0xFDD
 25860                           plusw2	equ	0xFDB
 25861                           fsr2h	equ	0xFDA
 25862                           fsr2l	equ	0xFD9
 25863                           status	equ	0xFD8
 25864                           
 25865 ;; *************** function _WriteTimer0 *****************
 25866 ;; Defined at:
 25867 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25868 ;; Parameters:    Size  Location     Type
 25869 ;;  timer0          2    0[BANK0 ] unsigned int 
 25870 ;; Auto vars:     Size  Location     Type
 25871 ;;  timer           2    2[BANK0 ] struct Timers
 25872 ;; Return value:  Size  Location     Type
 25873 ;;		None               void
 25874 ;; Registers used:
 25875 ;;		None
 25876 ;; Tracked objects:
 25877 ;;		On entry : F/0
 25878 ;;		On exit  : F/0
 25879 ;;		Unchanged: F/0
 25880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25881 ;;      Params:         0       2       0       0       0       0       0
 25882 ;;      Locals:         0       2       0       0       0       0       0
 25883 ;;      Temps:          0       0       0       0       0       0       0
 25884 ;;      Totals:         0       4       0       0       0       0       0
 25885 ;;Total ram usage:        4 bytes
 25886 ;; Hardware stack levels used:    1
 25887 ;; Hardware stack levels required when called:    3
 25888 ;; This function calls:
 25889 ;;		Nothing
 25890 ;; This function is called by:
 25891 ;;		_init
 25892 ;; This function uses a non-reentrant model
 25893 ;;
 25894                           
 25895                           	psect	text74
 25896  005C60                     __ptext74:
 25897                           	opt stack 0
 25898  005C60                     _WriteTimer0:
 25899                           	opt stack 26
 25900                           
 25901                           ; BSR set to: 0
 25902                           
 25903                           ; BSR set to: 0
 25904                           ;incstack = 0
 25905                           ;incstack = 0
 25906  005C60  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25907  005C64  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25908  005C68  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25909  005C6C  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25910                           
 25911                           ; BSR set to: 0
 25912  005C70  0012               	return	
 25913  005C72                     __end_of_WriteTimer0:
 25914                           	opt stack 0
 25915                           tblptru	equ	0xFF8
 25916                           tblptrh	equ	0xFF7
 25917                           tblptrl	equ	0xFF6
 25918                           tablat	equ	0xFF5
 25919                           prodh	equ	0xFF4
 25920                           prodl	equ	0xFF3
 25921                           intcon	equ	0xFF2
 25922                           indf0	equ	0xFEF
 25923                           postinc0	equ	0xFEE
 25924                           fsr0h	equ	0xFEA
 25925                           fsr0l	equ	0xFE9
 25926                           wreg	equ	0xFE8
 25927                           indf1	equ	0xFE7
 25928                           postinc1	equ	0xFE6
 25929                           postdec1	equ	0xFE5
 25930                           fsr1h	equ	0xFE2
 25931                           fsr1l	equ	0xFE1
 25932                           indf2	equ	0xFDF
 25933                           postinc2	equ	0xFDE
 25934                           postdec2	equ	0xFDD
 25935                           plusw2	equ	0xFDB
 25936                           fsr2h	equ	0xFDA
 25937                           fsr2l	equ	0xFD9
 25938                           status	equ	0xFD8
 25939                           
 25940 ;; *************** function _vscp_restoreDefaults *****************
 25941 ;; Defined at:
 25942 ;;		line 2739 in file "main.c"
 25943 ;; Parameters:    Size  Location     Type
 25944 ;;		None
 25945 ;; Auto vars:     Size  Location     Type
 25946 ;;		None
 25947 ;; Return value:  Size  Location     Type
 25948 ;;		None               void
 25949 ;; Registers used:
 25950 ;;		wreg, status,2, status,0, cstack
 25951 ;; Tracked objects:
 25952 ;;		On entry : 0/0
 25953 ;;		On exit  : F/1
 25954 ;;		Unchanged: 0/0
 25955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25956 ;;      Params:         0       0       0       0       0       0       0
 25957 ;;      Locals:         0       0       0       0       0       0       0
 25958 ;;      Temps:          0       0       0       0       0       0       0
 25959 ;;      Totals:         0       0       0       0       0       0       0
 25960 ;;Total ram usage:        0 bytes
 25961 ;; Hardware stack levels used:    1
 25962 ;; Hardware stack levels required when called:    5
 25963 ;; This function calls:
 25964 ;;		_init_app_ram
 25965 ;;		_init_app_eeprom
 25966 ;; This function is called by:
 25967 ;;		_main
 25968 ;; This function uses a non-reentrant model
 25969 ;;
 25970                           
 25971                           	psect	text75
 25972  005C96                     __ptext75:
 25973                           	opt stack 0
 25974  005C96                     _vscp_restoreDefaults:
 25975                           	opt stack 25
 25976                           
 25977                           ;main.c: 2740: init_app_eeprom();
 25978                           
 25979                           ; BSR set to: 0
 25980                           ;incstack = 0
 25981                           ;incstack = 0
 25982  005C96  ECA4  F024         	call	_init_app_eeprom	;wreg free
 25983                           
 25984                           ; BSR set to: 0
 25985                           ;main.c: 2741: init_app_ram();
 25986  005C9A  EF7B  F02B         	goto	_init_app_ram	;wreg free
 25987  005C9E                     __end_of_vscp_restoreDefaults:
 25988                           	opt stack 0
 25989                           tblptru	equ	0xFF8
 25990                           tblptrh	equ	0xFF7
 25991                           tblptrl	equ	0xFF6
 25992                           tablat	equ	0xFF5
 25993                           prodh	equ	0xFF4
 25994                           prodl	equ	0xFF3
 25995                           intcon	equ	0xFF2
 25996                           indf0	equ	0xFEF
 25997                           postinc0	equ	0xFEE
 25998                           fsr0h	equ	0xFEA
 25999                           fsr0l	equ	0xFE9
 26000                           wreg	equ	0xFE8
 26001                           indf1	equ	0xFE7
 26002                           postinc1	equ	0xFE6
 26003                           postdec1	equ	0xFE5
 26004                           fsr1h	equ	0xFE2
 26005                           fsr1l	equ	0xFE1
 26006                           indf2	equ	0xFDF
 26007                           postinc2	equ	0xFDE
 26008                           postdec2	equ	0xFDD
 26009                           plusw2	equ	0xFDB
 26010                           fsr2h	equ	0xFDA
 26011                           fsr2l	equ	0xFD9
 26012                           status	equ	0xFD8
 26013                           
 26014 ;; *************** function _init_app_eeprom *****************
 26015 ;; Defined at:
 26016 ;;		line 464 in file "main.c"
 26017 ;; Parameters:    Size  Location     Type
 26018 ;;		None
 26019 ;; Auto vars:     Size  Location     Type
 26020 ;;  i               1    4[BANK0 ] unsigned char 
 26021 ;; Return value:  Size  Location     Type
 26022 ;;		None               void
 26023 ;; Registers used:
 26024 ;;		wreg, status,2, status,0, cstack
 26025 ;; Tracked objects:
 26026 ;;		On entry : 0/0
 26027 ;;		On exit  : F/0
 26028 ;;		Unchanged: 0/0
 26029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26030 ;;      Params:         0       0       0       0       0       0       0
 26031 ;;      Locals:         0       1       0       0       0       0       0
 26032 ;;      Temps:          0       0       0       0       0       0       0
 26033 ;;      Totals:         0       1       0       0       0       0       0
 26034 ;;Total ram usage:        1 bytes
 26035 ;; Hardware stack levels used:    1
 26036 ;; Hardware stack levels required when called:    4
 26037 ;; This function calls:
 26038 ;;		_Busy_eep
 26039 ;;		_Write_b_eep
 26040 ;; This function is called by:
 26041 ;;		_vscp_restoreDefaults
 26042 ;; This function uses a non-reentrant model
 26043 ;;
 26044                           
 26045                           	psect	text76
 26046  004948                     __ptext76:
 26047                           	opt stack 0
 26048  004948                     _init_app_eeprom:
 26049                           	opt stack 25
 26050                           
 26051                           ;main.c: 465: uint8_t i;
 26052                           ;main.c: 467: (Busy_eep(), Write_b_eep(0x01,0x55));
 26053                           
 26054                           ; BSR set to: 1
 26055                           ;incstack = 0
 26056                           ;incstack = 0
 26057  004948  EC4F  F02E         	call	_Busy_eep	;wreg free
 26058  00494C  0100               	movlb	0	; () banked
 26059  00494E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26060  004950  0E01               	movlw	1
 26061  004952  6F60               	movwf	?_Write_b_eep& (0+255),b
 26062  004954  0E55               	movlw	85
 26063  004956  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26064  004958  EC67  F02D         	call	_Write_b_eep	;wreg free
 26065                           
 26066                           ;main.c: 468: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26067  00495C  EC4F  F02E         	call	_Busy_eep	;wreg free
 26068  004960  0100               	movlb	0	; () banked
 26069  004962  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26070  004964  0E02               	movlw	2
 26071  004966  6F60               	movwf	?_Write_b_eep& (0+255),b
 26072  004968  0EAA               	movlw	170
 26073  00496A  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26074  00496C  EC67  F02D         	call	_Write_b_eep	;wreg free
 26075                           
 26076                           ;main.c: 469: (Busy_eep(), Write_b_eep(0x03,0));
 26077  004970  EC4F  F02E         	call	_Busy_eep	;wreg free
 26078  004974  0100               	movlb	0	; () banked
 26079  004976  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26080  004978  0E03               	movlw	3
 26081  00497A  6F60               	movwf	?_Write_b_eep& (0+255),b
 26082  00497C  0E00               	movlw	0
 26083  00497E  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26084  004980  EC67  F02D         	call	_Write_b_eep	;wreg free
 26085                           
 26086                           ;main.c: 470: (Busy_eep(), Write_b_eep(0x05,0));
 26087  004984  EC4F  F02E         	call	_Busy_eep	;wreg free
 26088  004988  0100               	movlb	0	; () banked
 26089  00498A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26090  00498C  0E05               	movlw	5
 26091  00498E  6F60               	movwf	?_Write_b_eep& (0+255),b
 26092  004990  0E00               	movlw	0
 26093  004992  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26094  004994  EC67  F02D         	call	_Write_b_eep	;wreg free
 26095                           
 26096                           ;main.c: 471: (Busy_eep(), Write_b_eep(0x06,0));
 26097  004998  EC4F  F02E         	call	_Busy_eep	;wreg free
 26098  00499C  0100               	movlb	0	; () banked
 26099  00499E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26100  0049A0  0E06               	movlw	6
 26101  0049A2  6F60               	movwf	?_Write_b_eep& (0+255),b
 26102  0049A4  0E00               	movlw	0
 26103  0049A6  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26104  0049A8  EC67  F02D         	call	_Write_b_eep	;wreg free
 26105                           
 26106                           ;main.c: 472: (Busy_eep(), Write_b_eep(0x09,10u));
 26107  0049AC  EC4F  F02E         	call	_Busy_eep	;wreg free
 26108  0049B0  0100               	movlb	0	; () banked
 26109  0049B2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26110  0049B4  0E09               	movlw	9
 26111  0049B6  6F60               	movwf	?_Write_b_eep& (0+255),b
 26112  0049B8  0E0A               	movlw	10
 26113  0049BA  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26114  0049BC  EC67  F02D         	call	_Write_b_eep	;wreg free
 26115                           
 26116                           ;main.c: 475: for (i = 0x20; i < (0x5C + 4); i++) {
 26117  0049C0  0E20               	movlw	32
 26118  0049C2  0100               	movlb	0	; () banked
 26119  0049C4  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26120  0049C6                     l11255:
 26121                           
 26122                           ; BSR set to: 0
 26123                           ;main.c: 476: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26124  0049C6  EC4F  F02E         	call	_Busy_eep	;wreg free
 26125  0049CA  D814               	call	PL66	;call to abstracted procedure
 26126  0049CC  EC67  F02D         	call	_Write_b_eep	;wreg free
 26127  0049D0  0100               	movlb	0	; () banked
 26128  0049D2  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26129                           
 26130                           ; BSR set to: 0
 26131  0049D4  0E5F               	movlw	95
 26132  0049D6  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26133  0049D8  D7F6               	goto	l11255
 26134                           
 26135                           ; BSR set to: 0
 26136                           ;main.c: 477: }
 26137                           ;main.c: 480: for (i = 0x60; i < (0x64 + 4); i++) {
 26138  0049DA  0E60               	movlw	96
 26139  0049DC  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26140  0049DE                     l11269:
 26141                           
 26142                           ; BSR set to: 0
 26143                           ;main.c: 481: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26144  0049DE  EC4F  F02E         	call	_Busy_eep	;wreg free
 26145  0049E2  D808               	call	PL66	;call to abstracted procedure
 26146  0049E4  EC67  F02D         	call	_Write_b_eep	;wreg free
 26147  0049E8  0100               	movlb	0	; () banked
 26148  0049EA  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26149                           
 26150                           ; BSR set to: 0
 26151  0049EC  0E67               	movlw	103
 26152  0049EE  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26153  0049F0  D7F6               	goto	l11269
 26154                           
 26155                           ; BSR set to: 0
 26156  0049F2  0C67               	retlw	103
 26157  0049F4                     __end_of_init_app_eeprom:
 26158                           	opt stack 0
 26159  0049F4                     PL66:
 26160                           	opt stack 25
 26161  0049F4  0100               	movlb	0	; () banked
 26162  0049F6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26163  0049F8  0E01               	movlw	1
 26164  0049FA  6F60               	movwf	?_Write_b_eep& (0+255),b
 26165  0049FC  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26166  0049FE  0CFF               	retlw	255
 26167  004A00                     __end_ofPL66:
 26168                           	opt stack 0
 26169                           tblptru	equ	0xFF8
 26170                           tblptrh	equ	0xFF7
 26171                           tblptrl	equ	0xFF6
 26172                           tablat	equ	0xFF5
 26173                           prodh	equ	0xFF4
 26174                           prodl	equ	0xFF3
 26175                           intcon	equ	0xFF2
 26176                           indf0	equ	0xFEF
 26177                           postinc0	equ	0xFEE
 26178                           fsr0h	equ	0xFEA
 26179                           fsr0l	equ	0xFE9
 26180                           wreg	equ	0xFE8
 26181                           indf1	equ	0xFE7
 26182                           postinc1	equ	0xFE6
 26183                           postdec1	equ	0xFE5
 26184                           fsr1h	equ	0xFE2
 26185                           fsr1l	equ	0xFE1
 26186                           indf2	equ	0xFDF
 26187                           postinc2	equ	0xFDE
 26188                           postdec2	equ	0xFDD
 26189                           plusw2	equ	0xFDB
 26190                           fsr2h	equ	0xFDA
 26191                           fsr2l	equ	0xFD9
 26192                           status	equ	0xFD8
 26193                           
 26194 ;; *************** function _Write_b_eep *****************
 26195 ;; Defined at:
 26196 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26197 ;; Parameters:    Size  Location     Type
 26198 ;;  badd            2    0[BANK0 ] unsigned int 
 26199 ;;  bdat            1    2[BANK0 ] unsigned char 
 26200 ;; Auto vars:     Size  Location     Type
 26201 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 26202 ;; Return value:  Size  Location     Type
 26203 ;;		None               void
 26204 ;; Registers used:
 26205 ;;		wreg, status,2
 26206 ;; Tracked objects:
 26207 ;;		On entry : F/0
 26208 ;;		On exit  : 0/0
 26209 ;;		Unchanged: 0/0
 26210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26211 ;;      Params:         0       3       0       0       0       0       0
 26212 ;;      Locals:         0       1       0       0       0       0       0
 26213 ;;      Temps:          0       0       0       0       0       0       0
 26214 ;;      Totals:         0       4       0       0       0       0       0
 26215 ;;Total ram usage:        4 bytes
 26216 ;; Hardware stack levels used:    1
 26217 ;; Hardware stack levels required when called:    3
 26218 ;; This function calls:
 26219 ;;		Nothing
 26220 ;; This function is called by:
 26221 ;;		_init_app_eeprom
 26222 ;;		_doModeVerbose
 26223 ;;		_doModeSLCAN
 26224 ;; This function uses a non-reentrant model
 26225 ;;
 26226                           
 26227                           	psect	text77
 26228  005ACE                     __ptext77:
 26229                           	opt stack 0
 26230  005ACE                     _Write_b_eep:
 26231                           	opt stack 26
 26232                           
 26233                           ; BSR set to: 0
 26234                           
 26235                           ; BSR set to: 0
 26236                           ;incstack = 0
 26237                           ;incstack = 0
 26238  005ACE  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26239  005AD2  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26240  005AD6  9EA6               	bcf	4006,7,c	;volatile
 26241  005AD8  9CA6               	bcf	4006,6,c	;volatile
 26242  005ADA  84A6               	bsf	4006,2,c	;volatile
 26243                           
 26244                           ; BSR set to: 0
 26245  005ADC  0E00               	movlw	0
 26246  005ADE  BEF2               	btfsc	intcon,7,c	;volatile
 26247  005AE0  0E01               	movlw	1
 26248  005AE2  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 26249                           
 26250                           ; BSR set to: 0
 26251  005AE4  9EF2               	bcf	intcon,7,c	;volatile
 26252                           
 26253                           ; BSR set to: 0
 26254  005AE6  0E55               	movlw	85
 26255  005AE8  6EA7               	movwf	4007,c	;volatile
 26256                           
 26257                           ; BSR set to: 0
 26258  005AEA  0EAA               	movlw	170
 26259  005AEC  6EA7               	movwf	4007,c	;volatile
 26260                           
 26261                           ; BSR set to: 0
 26262  005AEE  82A6               	bsf	4006,1,c	;volatile
 26263  005AF0                     l1771:
 26264                           
 26265                           ; BSR set to: 0
 26266  005AF0  B2A6               	btfsc	4006,1,c	;volatile
 26267  005AF2  D7FE               	goto	l1771
 26268                           
 26269                           ; BSR set to: 0
 26270  005AF4  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 26271  005AF6  D002               	bra	u14085
 26272  005AF8  9EF2               	bcf	intcon,7,c	;volatile
 26273  005AFA  D001               	bra	u14086
 26274  005AFC                     u14085:
 26275  005AFC  8EF2               	bsf	intcon,7,c	;volatile
 26276  005AFE                     u14086:
 26277  005AFE  94A6               	bcf	4006,2,c	;volatile
 26278  005B00  0012               	return	
 26279  005B02                     __end_of_Write_b_eep:
 26280                           	opt stack 0
 26281                           tblptru	equ	0xFF8
 26282                           tblptrh	equ	0xFF7
 26283                           tblptrl	equ	0xFF6
 26284                           tablat	equ	0xFF5
 26285                           prodh	equ	0xFF4
 26286                           prodl	equ	0xFF3
 26287                           intcon	equ	0xFF2
 26288                           indf0	equ	0xFEF
 26289                           postinc0	equ	0xFEE
 26290                           fsr0h	equ	0xFEA
 26291                           fsr0l	equ	0xFE9
 26292                           wreg	equ	0xFE8
 26293                           indf1	equ	0xFE7
 26294                           postinc1	equ	0xFE6
 26295                           postdec1	equ	0xFE5
 26296                           fsr1h	equ	0xFE2
 26297                           fsr1l	equ	0xFE1
 26298                           indf2	equ	0xFDF
 26299                           postinc2	equ	0xFDE
 26300                           postdec2	equ	0xFDD
 26301                           plusw2	equ	0xFDB
 26302                           fsr2h	equ	0xFDA
 26303                           fsr2l	equ	0xFD9
 26304                           status	equ	0xFD8
 26305                           
 26306 ;; *************** function _Busy_eep *****************
 26307 ;; Defined at:
 26308 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26309 ;; Parameters:    Size  Location     Type
 26310 ;;		None
 26311 ;; Auto vars:     Size  Location     Type
 26312 ;;		None
 26313 ;; Return value:  Size  Location     Type
 26314 ;;		None               void
 26315 ;; Registers used:
 26316 ;;		None
 26317 ;; Tracked objects:
 26318 ;;		On entry : 0/0
 26319 ;;		On exit  : 0/0
 26320 ;;		Unchanged: 0/0
 26321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26322 ;;      Params:         0       0       0       0       0       0       0
 26323 ;;      Locals:         0       0       0       0       0       0       0
 26324 ;;      Temps:          0       0       0       0       0       0       0
 26325 ;;      Totals:         0       0       0       0       0       0       0
 26326 ;;Total ram usage:        0 bytes
 26327 ;; Hardware stack levels used:    1
 26328 ;; Hardware stack levels required when called:    3
 26329 ;; This function calls:
 26330 ;;		Nothing
 26331 ;; This function is called by:
 26332 ;;		_init_app_eeprom
 26333 ;;		_doModeVerbose
 26334 ;;		_doModeSLCAN
 26335 ;; This function uses a non-reentrant model
 26336 ;;
 26337                           
 26338                           	psect	text78
 26339  005C9E                     __ptext78:
 26340                           	opt stack 0
 26341  005C9E                     _Busy_eep:
 26342                           	opt stack 26
 26343  005C9E                     l1746:
 26344  005C9E  A2A6               	btfss	4006,1,c	;volatile
 26345  005CA0  0012               	return	
 26346  005CA2  D7FD               	goto	l1746
 26347  005CA4                     __end_of_Busy_eep:
 26348                           	opt stack 0
 26349                           tblptru	equ	0xFF8
 26350                           tblptrh	equ	0xFF7
 26351                           tblptrl	equ	0xFF6
 26352                           tablat	equ	0xFF5
 26353                           prodh	equ	0xFF4
 26354                           prodl	equ	0xFF3
 26355                           intcon	equ	0xFF2
 26356                           indf0	equ	0xFEF
 26357                           postinc0	equ	0xFEE
 26358                           fsr0h	equ	0xFEA
 26359                           fsr0l	equ	0xFE9
 26360                           wreg	equ	0xFE8
 26361                           indf1	equ	0xFE7
 26362                           postinc1	equ	0xFE6
 26363                           postdec1	equ	0xFE5
 26364                           fsr1h	equ	0xFE2
 26365                           fsr1l	equ	0xFE1
 26366                           indf2	equ	0xFDF
 26367                           postinc2	equ	0xFDE
 26368                           postdec2	equ	0xFDD
 26369                           plusw2	equ	0xFDB
 26370                           fsr2h	equ	0xFDA
 26371                           fsr2l	equ	0xFD9
 26372                           status	equ	0xFD8
 26373                           
 26374 ;; *************** function _init_app_ram *****************
 26375 ;; Defined at:
 26376 ;;		line 446 in file "main.c"
 26377 ;; Parameters:    Size  Location     Type
 26378 ;;		None
 26379 ;; Auto vars:     Size  Location     Type
 26380 ;;		None
 26381 ;; Return value:  Size  Location     Type
 26382 ;;		None               void
 26383 ;; Registers used:
 26384 ;;		wreg, status,2, cstack
 26385 ;; Tracked objects:
 26386 ;;		On entry : 0/0
 26387 ;;		On exit  : F/1
 26388 ;;		Unchanged: 0/0
 26389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26390 ;;      Params:         0       0       0       0       0       0       0
 26391 ;;      Locals:         0       0       0       0       0       0       0
 26392 ;;      Temps:          0       0       0       0       0       0       0
 26393 ;;      Totals:         0       0       0       0       0       0       0
 26394 ;;Total ram usage:        0 bytes
 26395 ;; Hardware stack levels used:    1
 26396 ;; Hardware stack levels required when called:    4
 26397 ;; This function calls:
 26398 ;;		_Read_b_eep
 26399 ;; This function is called by:
 26400 ;;		_init
 26401 ;;		_vscp_restoreDefaults
 26402 ;; This function uses a non-reentrant model
 26403 ;;
 26404                           
 26405                           	psect	text79
 26406  0056F6                     __ptext79:
 26407                           	opt stack 0
 26408  0056F6                     _init_app_ram:
 26409                           	opt stack 25
 26410                           
 26411                           ;main.c: 448: can_receiveOverruns = 0;
 26412                           
 26413                           ;incstack = 0
 26414                           ;incstack = 0
 26415  0056F6  0100               	movlb	0	; () banked
 26416  0056F8  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26417  0056FA  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26418  0056FC  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26419  0056FE  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26420                           
 26421                           ;main.c: 449: can_transmitOverruns = 0;
 26422  005700  6A2B               	clrf	_can_transmitOverruns,c
 26423  005702  6A2C               	clrf	_can_transmitOverruns+1,c
 26424  005704  6A2D               	clrf	_can_transmitOverruns+2,c
 26425  005706  6A2E               	clrf	_can_transmitOverruns+3,c
 26426                           
 26427                           ;main.c: 450: uart_receiveOverruns = 0;
 26428  005708  6A2F               	clrf	_uart_receiveOverruns,c
 26429  00570A  6A30               	clrf	_uart_receiveOverruns+1,c
 26430  00570C  6A31               	clrf	_uart_receiveOverruns+2,c
 26431  00570E  6A32               	clrf	_uart_receiveOverruns+3,c
 26432                           
 26433                           ;main.c: 451: uart_transmitOverruns = 0;
 26434  005710  6A33               	clrf	_uart_transmitOverruns,c
 26435  005712  6A34               	clrf	_uart_transmitOverruns+1,c
 26436  005714  6A35               	clrf	_uart_transmitOverruns+2,c
 26437  005716  6A36               	clrf	_uart_transmitOverruns+3,c
 26438                           
 26439                           ; BSR set to: 0
 26440                           ;main.c: 453: bHex = Read_b_eep(0x06);
 26441  005718  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26442  00571A  0E06               	movlw	6
 26443  00571C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26444  00571E  EC39  F02E         	call	_Read_b_eep	;wreg free
 26445  005722  0101               	movlb	1	; () banked
 26446  005724  6F00               	movwf	_bHex& (0+255),b
 26447                           
 26448                           ;main.c: 454: mode = Read_b_eep(0x03);
 26449  005726  0100               	movlb	0	; () banked
 26450  005728  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26451  00572A  0E03               	movlw	3
 26452  00572C  6F60               	movwf	?_Read_b_eep& (0+255),b
 26453  00572E  EC39  F02E         	call	_Read_b_eep	;wreg free
 26454  005732  0100               	movlb	0	; () banked
 26455  005734  6FF1               	movwf	_mode& (0+255),b
 26456                           
 26457                           ;main.c: 456: rwtimeout = Read_b_eep(0x09);
 26458  005736  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26459  005738  0E09               	movlw	9
 26460  00573A  6F60               	movwf	?_Read_b_eep& (0+255),b
 26461  00573C  EC39  F02E         	call	_Read_b_eep	;wreg free
 26462  005740  0101               	movlb	1	; () banked
 26463  005742  6F03               	movwf	_rwtimeout& (0+255),b
 26464                           
 26465                           ; BSR set to: 1
 26466  005744  0012               	return	
 26467  005746                     __end_of_init_app_ram:
 26468                           	opt stack 0
 26469                           tblptru	equ	0xFF8
 26470                           tblptrh	equ	0xFF7
 26471                           tblptrl	equ	0xFF6
 26472                           tablat	equ	0xFF5
 26473                           prodh	equ	0xFF4
 26474                           prodl	equ	0xFF3
 26475                           intcon	equ	0xFF2
 26476                           indf0	equ	0xFEF
 26477                           postinc0	equ	0xFEE
 26478                           fsr0h	equ	0xFEA
 26479                           fsr0l	equ	0xFE9
 26480                           wreg	equ	0xFE8
 26481                           indf1	equ	0xFE7
 26482                           postinc1	equ	0xFE6
 26483                           postdec1	equ	0xFE5
 26484                           fsr1h	equ	0xFE2
 26485                           fsr1l	equ	0xFE1
 26486                           indf2	equ	0xFDF
 26487                           postinc2	equ	0xFDE
 26488                           postdec2	equ	0xFDD
 26489                           plusw2	equ	0xFDB
 26490                           fsr2h	equ	0xFDA
 26491                           fsr2l	equ	0xFD9
 26492                           status	equ	0xFD8
 26493                           
 26494 ;; *************** function _Read_b_eep *****************
 26495 ;; Defined at:
 26496 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26497 ;; Parameters:    Size  Location     Type
 26498 ;;  badd            2    0[BANK0 ] unsigned int 
 26499 ;; Auto vars:     Size  Location     Type
 26500 ;;		None
 26501 ;; Return value:  Size  Location     Type
 26502 ;;                  1    wreg      unsigned char 
 26503 ;; Registers used:
 26504 ;;		wreg, status,2
 26505 ;; Tracked objects:
 26506 ;;		On entry : F/0
 26507 ;;		On exit  : 0/0
 26508 ;;		Unchanged: 0/0
 26509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26510 ;;      Params:         0       2       0       0       0       0       0
 26511 ;;      Locals:         0       0       0       0       0       0       0
 26512 ;;      Temps:          0       0       0       0       0       0       0
 26513 ;;      Totals:         0       2       0       0       0       0       0
 26514 ;;Total ram usage:        2 bytes
 26515 ;; Hardware stack levels used:    1
 26516 ;; Hardware stack levels required when called:    3
 26517 ;; This function calls:
 26518 ;;		Nothing
 26519 ;; This function is called by:
 26520 ;;		_main
 26521 ;;		_init_app_ram
 26522 ;; This function uses a non-reentrant model
 26523 ;;
 26524                           
 26525                           	psect	text80
 26526  005C72                     __ptext80:
 26527                           	opt stack 0
 26528  005C72                     _Read_b_eep:
 26529                           	opt stack 25
 26530                           
 26531                           ; BSR set to: 0
 26532                           
 26533                           ; BSR set to: 1
 26534                           ;incstack = 0
 26535                           ;incstack = 0
 26536  005C72  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26537  005C76  9CA6               	bcf	4006,6,c	;volatile
 26538  005C78  9EA6               	bcf	4006,7,c	;volatile
 26539  005C7A  80A6               	bsf	4006,0,c	;volatile
 26540  005C7C  F000               	nop		;# 
 26541  005C7E  F000               	nop		;# 
 26542  005C80  50A8               	movf	4008,w,c	;volatile
 26543  005C82  0012               	return	
 26544  005C84                     __end_of_Read_b_eep:
 26545                           	opt stack 0
 26546                           tblptru	equ	0xFF8
 26547                           tblptrh	equ	0xFF7
 26548                           tblptrl	equ	0xFF6
 26549                           tablat	equ	0xFF5
 26550                           prodh	equ	0xFF4
 26551                           prodl	equ	0xFF3
 26552                           intcon	equ	0xFF2
 26553                           indf0	equ	0xFEF
 26554                           postinc0	equ	0xFEE
 26555                           fsr0h	equ	0xFEA
 26556                           fsr0l	equ	0xFE9
 26557                           wreg	equ	0xFE8
 26558                           indf1	equ	0xFE7
 26559                           postinc1	equ	0xFE6
 26560                           postdec1	equ	0xFE5
 26561                           fsr1h	equ	0xFE2
 26562                           fsr1l	equ	0xFE1
 26563                           indf2	equ	0xFDF
 26564                           postinc2	equ	0xFDE
 26565                           postdec2	equ	0xFDD
 26566                           plusw2	equ	0xFDB
 26567                           fsr2h	equ	0xFDA
 26568                           fsr2l	equ	0xFD9
 26569                           status	equ	0xFD8
 26570                           
 26571 ;; *************** function _fifo_init *****************
 26572 ;; Defined at:
 26573 ;;		line 14 in file "fifo.c"
 26574 ;; Parameters:    Size  Location     Type
 26575 ;;  f               1    wreg     PTR struct .
 26576 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26577 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26578 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26579 ;;  size            2    2[BANK0 ] unsigned short 
 26580 ;; Auto vars:     Size  Location     Type
 26581 ;;  f               1    4[BANK0 ] PTR struct .
 26582 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26583 ;; Return value:  Size  Location     Type
 26584 ;;		None               void
 26585 ;; Registers used:
 26586 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26587 ;; Tracked objects:
 26588 ;;		On entry : F/0
 26589 ;;		On exit  : F/0
 26590 ;;		Unchanged: 0/0
 26591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26592 ;;      Params:         0       4       0       0       0       0       0
 26593 ;;      Locals:         0       1       0       0       0       0       0
 26594 ;;      Temps:          0       0       0       0       0       0       0
 26595 ;;      Totals:         0       5       0       0       0       0       0
 26596 ;;Total ram usage:        5 bytes
 26597 ;; Hardware stack levels used:    1
 26598 ;; Hardware stack levels required when called:    3
 26599 ;; This function calls:
 26600 ;;		Nothing
 26601 ;; This function is called by:
 26602 ;;		_main
 26603 ;; This function uses a non-reentrant model
 26604 ;;
 26605                           
 26606                           	psect	text81
 26607  00592E                     __ptext81:
 26608                           	opt stack 0
 26609  00592E                     _fifo_init:
 26610                           	opt stack 27
 26611                           
 26612                           ;incstack = 0
 26613                           ;incstack = 0
 26614                           ;fifo_init@f stored from wreg
 26615  00592E  CFE8 F064          	movff	wreg,fifo_init@f
 26616                           
 26617                           ; BSR set to: 0
 26618                           ;fifo.c: 15: f->head = 0;
 26619  005932  5164               	movf	fifo_init@f& (0+255),w,b
 26620  005934  6ED9               	movwf	fsr2l,c
 26621  005936  6ADA               	clrf	fsr2h,c
 26622  005938  0E02               	movlw	2
 26623                           
 26624                           ;fifo.c: 16: f->tail = 0;
 26625  00593A  D811               	call	PL100	;call to abstracted procedure
 26626  00593C  0E04               	movlw	4
 26627                           
 26628                           ;fifo.c: 17: f->size = size;
 26629  00593E  D80F               	call	PL100	;call to abstracted procedure
 26630  005940  0E06               	movlw	6
 26631  005942  26D9               	addwf	fsr2l,f,c
 26632  005944  6ADA               	clrf	fsr2h,c
 26633  005946  C062  FFDE         	movff	fifo_init@size,postinc2
 26634  00594A  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26635                           
 26636                           ; BSR set to: 0
 26637                           ;fifo.c: 18: f->buf = buf;
 26638  00594E  5164               	movf	fifo_init@f& (0+255),w,b
 26639  005950  6ED9               	movwf	fsr2l,c
 26640  005952  6ADA               	clrf	fsr2h,c
 26641  005954  C060  FFDE         	movff	fifo_init@buf,postinc2
 26642  005958  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26643                           
 26644                           ; BSR set to: 0
 26645  00595C  0012               	return	
 26646  00595E                     __end_of_fifo_init:
 26647                           	opt stack 0
 26648  00595E                     PL100:
 26649                           	opt stack 27
 26650  00595E  26D9               	addwf	fsr2l,f,c
 26651  005960  6ADA               	clrf	fsr2h,c
 26652  005962  6ADE               	clrf	postinc2,c
 26653  005964  6ADD               	clrf	postdec2,c
 26654  005966  5164               	movf	fifo_init@f& (0+255),w,b
 26655  005968  6ED9               	movwf	fsr2l,c
 26656  00596A  6ADA               	clrf	fsr2h,c
 26657  00596C  0012               	return	
 26658  00596E                     __end_ofPL100:
 26659                           	opt stack 0
 26660                           tblptru	equ	0xFF8
 26661                           tblptrh	equ	0xFF7
 26662                           tblptrl	equ	0xFF6
 26663                           tablat	equ	0xFF5
 26664                           prodh	equ	0xFF4
 26665                           prodl	equ	0xFF3
 26666                           intcon	equ	0xFF2
 26667                           indf0	equ	0xFEF
 26668                           postinc0	equ	0xFEE
 26669                           fsr0h	equ	0xFEA
 26670                           fsr0l	equ	0xFE9
 26671                           wreg	equ	0xFE8
 26672                           indf1	equ	0xFE7
 26673                           postinc1	equ	0xFE6
 26674                           postdec1	equ	0xFE5
 26675                           fsr1h	equ	0xFE2
 26676                           fsr1l	equ	0xFE1
 26677                           indf2	equ	0xFDF
 26678                           postinc2	equ	0xFDE
 26679                           postdec2	equ	0xFDD
 26680                           plusw2	equ	0xFDB
 26681                           fsr2h	equ	0xFDA
 26682                           fsr2l	equ	0xFD9
 26683                           status	equ	0xFD8
 26684                           
 26685 ;; *************** function _Interrupt *****************
 26686 ;; Defined at:
 26687 ;;		line 136 in file "main.c"
 26688 ;; Parameters:    Size  Location     Type
 26689 ;;		None
 26690 ;; Auto vars:     Size  Location     Type
 26691 ;;  data            8   27[COMRAM] unsigned char [8]
 26692 ;;  id              4   37[COMRAM] unsigned long 
 26693 ;;  flags           1   41[COMRAM] enum E16349
 26694 ;;  dlc             1   36[COMRAM] unsigned char 
 26695 ;;  c               1   35[COMRAM] unsigned char 
 26696 ;; Return value:  Size  Location     Type
 26697 ;;		None               void
 26698 ;; Registers used:
 26699 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26700 ;; Tracked objects:
 26701 ;;		On entry : 0/0
 26702 ;;		On exit  : 0/0
 26703 ;;		Unchanged: 0/0
 26704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26705 ;;      Params:         0       0       0       0       0       0       0
 26706 ;;      Locals:        15       0       0       0       0       0       0
 26707 ;;      Temps:          9       0       0       0       0       0       0
 26708 ;;      Totals:        24       0       0       0       0       0       0
 26709 ;;Total ram usage:       24 bytes
 26710 ;; Hardware stack levels used:    1
 26711 ;; Hardware stack levels required when called:    2
 26712 ;; This function calls:
 26713 ;;		_ReadUSART
 26714 ;;		_fifo_write
 26715 ;;		_ECANReceiveMessage
 26716 ;;		_fifo_getFree
 26717 ;;		i1_WriteTimer0
 26718 ;; This function is called by:
 26719 ;;		Interrupt level 1
 26720 ;; This function uses a non-reentrant model
 26721 ;;
 26722                           
 26723                           	psect	intcodelo
 26724  000418                     __pintcodelo:
 26725                           	opt stack 0
 26726  000418                     _Interrupt:
 26727                           	opt stack 20
 26728                           
 26729                           ; BSR set to: 0
 26730                           ;incstack = 0
 26731  000418  CFD8 F015          	movff	status,??_Interrupt+2
 26732  00041C  CFE8 F016          	movff	wreg,??_Interrupt+3
 26733  000420  CFE0 F017          	movff	bsr,??_Interrupt+4
 26734  000424  CFE1 F018          	movff	fsr1l,??_Interrupt+5
 26735  000428  CFE2 F019          	movff	fsr1h,??_Interrupt+6
 26736  00042C  CFD9 F01A          	movff	fsr2l,??_Interrupt+7
 26737  000430  CFDA F01B          	movff	fsr2h,??_Interrupt+8
 26738  000434                     
 26739                           ;main.c: 137: uint8_t c;
 26740                           ;main.c: 140: if ( 1 == PIR1bits.RCIF ) {
 26741  000434  AA9E               	btfss	3998,5,c	;volatile
 26742  000436  D001               	goto	i1u1720_21
 26743  000438  D001               	goto	i1u1720_20
 26744  00043A                     i1u1720_21:
 26745  00043A  D020               	goto	i1l389
 26746  00043C                     i1u1720_20:
 26747  00043C                     
 26748                           ;main.c: 142: c = ReadUSART();
 26749  00043C  ECFF  F02D         	call	_ReadUSART	;wreg free
 26750  000440  6E24               	movwf	Interrupt@c,c
 26751  000442                     
 26752                           ;main.c: 144: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26753  000442  0E24               	movlw	low Interrupt@c
 26754  000444  6E01               	movwf	?_fifo_write,c
 26755  000446  0E01               	movlw	1
 26756  000448  6E02               	movwf	?_fifo_write+1,c
 26757  00044A  0E00               	movlw	0
 26758  00044C  6E03               	movwf	?_fifo_write+2,c
 26759  00044E  0E00               	movlw	0
 26760  000450  6E04               	movwf	?_fifo_write+3,c
 26761  000452  0E00               	movlw	0
 26762  000454  6E05               	movwf	?_fifo_write+4,c
 26763  000456  0E48               	movlw	_serialInputFifo& (0+255)
 26764  000458  EC2E  F01E         	call	_fifo_write
 26765  00045C  0401               	decf	?_fifo_write,w,c
 26766  00045E  1002               	iorwf	?_fifo_write+1,w,c
 26767  000460  B4D8               	btfsc	status,2,c
 26768  000462  D001               	goto	i1u1721_21
 26769  000464  D001               	goto	i1u1721_20
 26770  000466                     i1u1721_21:
 26771  000466  D008               	goto	i1l13147
 26772  000468                     i1u1721_20:
 26773  000468                     
 26774                           ;main.c: 146: uart_receiveOverruns++;
 26775  000468  0E01               	movlw	1
 26776  00046A  262F               	addwf	_uart_receiveOverruns,f,c
 26777  00046C  0E00               	movlw	0
 26778  00046E  2230               	addwfc	_uart_receiveOverruns+1,f,c
 26779  000470  0E00               	movlw	0
 26780  000472  2231               	addwfc	_uart_receiveOverruns+2,f,c
 26781  000474  0E00               	movlw	0
 26782  000476  2232               	addwfc	_uart_receiveOverruns+3,f,c
 26783  000478                     i1l13147:
 26784                           
 26785                           ;main.c: 147: }
 26786                           ;main.c: 150: PIR1bits.RCIF = 0;
 26787  000478  9A9E               	bcf	3998,5,c	;volatile
 26788                           
 26789                           ;main.c: 152: }
 26790  00047A  D07D               	goto	i1l391
 26791  00047C                     i1l389:
 26792                           
 26793                           ;main.c: 154: else if (1 == INTCONbits.TMR0IF) {
 26794  00047C  A4F2               	btfss	intcon,2,c	;volatile
 26795  00047E  D001               	goto	i1u1722_21
 26796  000480  D001               	goto	i1u1722_20
 26797  000482                     i1u1722_21:
 26798  000482  D079               	goto	i1l391
 26799  000484                     i1u1722_20:
 26800  000484                     
 26801                           ;main.c: 156: WriteTimer0(0xfb1d);
 26802  000484  0EFB               	movlw	251
 26803  000486  6E02               	movwf	?i1_WriteTimer0+1,c
 26804  000488  0E1D               	movlw	29
 26805  00048A  6E01               	movwf	?i1_WriteTimer0,c
 26806  00048C  EC42  F02E         	call	i1_WriteTimer0	;wreg free
 26807  000490                     
 26808                           ;main.c: 158: timer++;
 26809  000490  0E01               	movlw	1
 26810  000492  0100               	movlb	0	; () banked
 26811  000494  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26812  000496  0E00               	movlw	0
 26813  000498  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26814  00049A  0E00               	movlw	0
 26815  00049C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26816  00049E  0E00               	movlw	0
 26817  0004A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26818  0004A2                     
 26819                           ; BSR set to: 0
 26820                           ;main.c: 159: timekeeper++;
 26821  0004A2  0E01               	movlw	1
 26822  0004A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26823  0004A6  0E00               	movlw	0
 26824  0004A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26825  0004AA  0E00               	movlw	0
 26826  0004AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26827  0004AE  0E00               	movlw	0
 26828  0004B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26829  0004B2                     
 26830                           ; BSR set to: 0
 26831                           ;main.c: 162: status_led_cnt++;
 26832  0004B2  4A39               	infsnz	_status_led_cnt,f,c	;volatile
 26833  0004B4  2A3A               	incf	_status_led_cnt+1,f,c	;volatile
 26834  0004B6                     
 26835                           ; BSR set to: 0
 26836                           ;main.c: 163: if ((2 == ledFunctionality) &&
 26837                           ;main.c: 164: (status_led_cnt > 1000)) {
 26838  0004B6  503F               	movf	_ledFunctionality,w,c
 26839  0004B8  0A02               	xorlw	2
 26840  0004BA  A4D8               	btfss	status,2,c
 26841  0004BC  D001               	goto	i1u1723_21
 26842  0004BE  D001               	goto	i1u1723_20
 26843  0004C0                     i1u1723_21:
 26844  0004C0  D00C               	goto	i1l13163
 26845  0004C2                     i1u1723_20:
 26846  0004C2                     
 26847                           ; BSR set to: 0
 26848  0004C2  0EE9               	movlw	233
 26849  0004C4  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26850  0004C6  0E03               	movlw	3
 26851  0004C8  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26852  0004CA  A0D8               	btfss	status,0,c
 26853  0004CC  D001               	goto	i1u1724_21
 26854  0004CE  D001               	goto	i1u1724_20
 26855  0004D0                     i1u1724_21:
 26856  0004D0  D004               	goto	i1l13163
 26857  0004D2                     i1u1724_20:
 26858  0004D2                     i1l13161:
 26859                           
 26860                           ; BSR set to: 0
 26861                           ;main.c: 165: LATC1 = ~LATC1;
 26862  0004D2  728B               	btg	3979,1,c	;volatile
 26863                           
 26864                           ;main.c: 166: status_led_cnt = 0;
 26865  0004D4  6A39               	clrf	_status_led_cnt,c	;volatile
 26866  0004D6  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26867                           
 26868                           ;main.c: 167: }
 26869  0004D8  D04D               	goto	i1l394
 26870  0004DA                     i1l13163:
 26871                           
 26872                           ; BSR set to: 0
 26873                           ;main.c: 168: else if ((3 == ledFunctionality) &&
 26874                           ;main.c: 169: (status_led_cnt > 400)) {
 26875  0004DA  503F               	movf	_ledFunctionality,w,c
 26876  0004DC  0A03               	xorlw	3
 26877  0004DE  A4D8               	btfss	status,2,c
 26878  0004E0  D001               	goto	i1u1725_21
 26879  0004E2  D001               	goto	i1u1725_20
 26880  0004E4                     i1u1725_21:
 26881  0004E4  D009               	goto	i1l13169
 26882  0004E6                     i1u1725_20:
 26883  0004E6                     
 26884                           ; BSR set to: 0
 26885  0004E6  0E91               	movlw	145
 26886  0004E8  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26887  0004EA  0E01               	movlw	1
 26888  0004EC  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26889  0004EE  A0D8               	btfss	status,0,c
 26890  0004F0  D001               	goto	i1u1726_21
 26891  0004F2  D001               	goto	i1u1726_20
 26892  0004F4                     i1u1726_21:
 26893  0004F4  D001               	goto	i1l13169
 26894  0004F6                     i1u1726_20:
 26895  0004F6  D7ED               	goto	i1l13161
 26896  0004F8                     i1l13169:
 26897                           
 26898                           ; BSR set to: 0
 26899                           ;main.c: 173: else if ((4 == ledFunctionality) &&
 26900                           ;main.c: 174: (status_led_cnt > 100)) {
 26901  0004F8  503F               	movf	_ledFunctionality,w,c
 26902  0004FA  0A04               	xorlw	4
 26903  0004FC  A4D8               	btfss	status,2,c
 26904  0004FE  D001               	goto	i1u1727_21
 26905  000500  D001               	goto	i1u1727_20
 26906  000502                     i1u1727_21:
 26907  000502  D009               	goto	i1l13175
 26908  000504                     i1u1727_20:
 26909  000504                     
 26910                           ; BSR set to: 0
 26911  000504  0E65               	movlw	101
 26912  000506  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26913  000508  0E00               	movlw	0
 26914  00050A  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26915  00050C  A0D8               	btfss	status,0,c
 26916  00050E  D001               	goto	i1u1728_21
 26917  000510  D001               	goto	i1u1728_20
 26918  000512                     i1u1728_21:
 26919  000512  D001               	goto	i1l13175
 26920  000514                     i1u1728_20:
 26921  000514  D7DE               	goto	i1l13161
 26922  000516                     i1l13175:
 26923                           
 26924                           ; BSR set to: 0
 26925                           ;main.c: 178: else if ((5 == ledFunctionality) &&
 26926                           ;main.c: 179: (status_led_cnt > 70)) {
 26927  000516  503F               	movf	_ledFunctionality,w,c
 26928  000518  0A05               	xorlw	5
 26929  00051A  A4D8               	btfss	status,2,c
 26930  00051C  D001               	goto	i1u1729_21
 26931  00051E  D001               	goto	i1u1729_20
 26932  000520                     i1u1729_21:
 26933  000520  D009               	goto	i1l13181
 26934  000522                     i1u1729_20:
 26935  000522                     
 26936                           ; BSR set to: 0
 26937  000522  0E47               	movlw	71
 26938  000524  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26939  000526  0E00               	movlw	0
 26940  000528  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26941  00052A  A0D8               	btfss	status,0,c
 26942  00052C  D001               	goto	i1u1730_21
 26943  00052E  D001               	goto	i1u1730_20
 26944  000530                     i1u1730_21:
 26945  000530  D001               	goto	i1l13181
 26946  000532                     i1u1730_20:
 26947  000532  D7CF               	goto	i1l13161
 26948  000534                     i1l13181:
 26949                           
 26950                           ; BSR set to: 0
 26951                           ;main.c: 183: else if ((6 == ledFunctionality) &&
 26952                           ;main.c: 184: (status_led_cnt > 40)) {
 26953  000534  503F               	movf	_ledFunctionality,w,c
 26954  000536  0A06               	xorlw	6
 26955  000538  A4D8               	btfss	status,2,c
 26956  00053A  D001               	goto	i1u1731_21
 26957  00053C  D001               	goto	i1u1731_20
 26958  00053E                     i1u1731_21:
 26959  00053E  D009               	goto	i1l13187
 26960  000540                     i1u1731_20:
 26961  000540                     
 26962                           ; BSR set to: 0
 26963  000540  0E29               	movlw	41
 26964  000542  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26965  000544  0E00               	movlw	0
 26966  000546  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26967  000548  A0D8               	btfss	status,0,c
 26968  00054A  D001               	goto	i1u1732_21
 26969  00054C  D001               	goto	i1u1732_20
 26970  00054E                     i1u1732_21:
 26971  00054E  D001               	goto	i1l13187
 26972  000550                     i1u1732_20:
 26973  000550  D7C0               	goto	i1l13161
 26974  000552                     i1l13187:
 26975                           
 26976                           ; BSR set to: 0
 26977                           ;main.c: 188: else if (1 == ledFunctionality) {
 26978  000552  043F               	decf	_ledFunctionality,w,c
 26979  000554  A4D8               	btfss	status,2,c
 26980  000556  D001               	goto	i1u1733_21
 26981  000558  D001               	goto	i1u1733_20
 26982  00055A                     i1u1733_21:
 26983  00055A  D004               	goto	i1l403
 26984  00055C                     i1u1733_20:
 26985  00055C                     
 26986                           ; BSR set to: 0
 26987                           ;main.c: 189: LATC1 = 1;
 26988  00055C  828B               	bsf	3979,1,c	;volatile
 26989                           
 26990                           ;main.c: 190: status_led_cnt = 0;
 26991  00055E  6A39               	clrf	_status_led_cnt,c	;volatile
 26992  000560  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26993                           
 26994                           ;main.c: 191: }
 26995  000562  D008               	goto	i1l394
 26996  000564                     i1l403:
 26997                           
 26998                           ; BSR set to: 0
 26999                           ;main.c: 192: else if (0 == ledFunctionality) {
 27000  000564  663F               	tstfsz	_ledFunctionality,c
 27001  000566  D001               	goto	i1u1734_21
 27002  000568  D001               	goto	i1u1734_20
 27003  00056A                     i1u1734_21:
 27004  00056A  D004               	goto	i1l400
 27005  00056C                     i1u1734_20:
 27006  00056C                     
 27007                           ; BSR set to: 0
 27008                           ;main.c: 193: LATC1 = 0;
 27009  00056C  928B               	bcf	3979,1,c	;volatile
 27010                           
 27011                           ;main.c: 194: status_led_cnt = 0;
 27012  00056E  6A39               	clrf	_status_led_cnt,c	;volatile
 27013  000570  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 27014  000572  D000               	goto	i1l394
 27015  000574                     i1l400:
 27016  000574                     i1l394:
 27017                           
 27018                           ; BSR set to: 0
 27019                           ;main.c: 195: }
 27020                           ;main.c: 197: INTCONbits.TMR0IF = 0;
 27021  000574  94F2               	bcf	intcon,2,c	;volatile
 27022  000576                     i1l391:
 27023                           
 27024                           ;main.c: 198: }
 27025                           ;main.c: 201: if ( 1 == IRXIF ) {
 27026  000576  AEA4               	btfss	4004,7,c	;volatile
 27027  000578  D001               	goto	i1u1735_21
 27028  00057A  D001               	goto	i1u1735_20
 27029  00057C                     i1u1735_21:
 27030  00057C  D001               	goto	i1l406
 27031  00057E                     i1u1735_20:
 27032  00057E                     
 27033                           ;main.c: 203: IRXIF = 0;
 27034  00057E  9EA4               	bcf	4004,7,c	;volatile
 27035  000580                     i1l406:
 27036                           
 27037                           ;main.c: 204: }
 27038                           ;main.c: 207: if ( RXBnIF ) {
 27039  000580  A2A4               	btfss	4004,1,c	;volatile
 27040  000582  D001               	goto	i1u1736_21
 27041  000584  D001               	goto	i1u1736_20
 27042  000586                     i1u1736_21:
 27043  000586  D061               	goto	i1l415
 27044  000588                     i1u1736_20:
 27045  000588                     
 27046                           ;main.c: 209: uint32_t id;
 27047                           ;main.c: 210: uint8_t dlc;
 27048                           ;main.c: 211: uint8_t data[8];
 27049                           ;main.c: 212: ECAN_RX_MSG_FLAGS flags;
 27050                           ;main.c: 214: if ( ECANReceiveMessage((unsigned long *)&id,
 27051                           ;main.c: 215: (BYTE*)&data,
 27052                           ;main.c: 216: (BYTE*)&dlc,
 27053                           ;main.c: 217: &flags) ) {
 27054  000588  0E1C               	movlw	low Interrupt@data
 27055  00058A  6E08               	movwf	?_ECANReceiveMessage,c
 27056  00058C  0E25               	movlw	low Interrupt@dlc
 27057  00058E  6E09               	movwf	?_ECANReceiveMessage+1,c
 27058  000590  0E2A               	movlw	low Interrupt@flags
 27059  000592  6E0A               	movwf	?_ECANReceiveMessage+2,c
 27060  000594  0E26               	movlw	Interrupt@id& (0+255)
 27061  000596  EC8D  F015         	call	_ECANReceiveMessage
 27062  00059A  0900               	iorlw	0
 27063  00059C  B4D8               	btfsc	status,2,c
 27064  00059E  D001               	goto	i1u1737_21
 27065  0005A0  D001               	goto	i1u1737_20
 27066  0005A2                     i1u1737_21:
 27067  0005A2  D052               	goto	i1l13213
 27068  0005A4                     i1u1737_20:
 27069  0005A4                     
 27070                           ;main.c: 220: if ( flags & ECAN_RX_OVERFLOW ) {
 27071  0005A4  A62A               	btfss	Interrupt@flags,3,c
 27072  0005A6  D001               	goto	i1u1738_21
 27073  0005A8  D001               	goto	i1u1738_20
 27074  0005AA                     i1u1738_21:
 27075  0005AA  D00E               	goto	i1l409
 27076  0005AC                     i1u1738_20:
 27077  0005AC                     
 27078                           ;main.c: 221: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27079  0005AC  AA2A               	btfss	Interrupt@flags,5,c
 27080  0005AE  D001               	goto	i1u1739_21
 27081  0005B0  D001               	goto	i1u1739_20
 27082  0005B2                     i1u1739_21:
 27083  0005B2  D04A               	goto	i1l13213
 27084  0005B4                     i1u1739_20:
 27085  0005B4                     i1l13201:
 27086  0005B4  0E01               	movlw	1
 27087  0005B6  0100               	movlb	0	; () banked
 27088  0005B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 27089  0005BA  0E00               	movlw	0
 27090  0005BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27091  0005BE  0E00               	movlw	0
 27092  0005C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27093  0005C2  0E00               	movlw	0
 27094  0005C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27095  0005C6  D040               	goto	i1l13213
 27096  0005C8                     i1l409:
 27097                           
 27098                           ;main.c: 223: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27099                           ;main.c: 224: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27100  0005C8  BC2A               	btfsc	Interrupt@flags,6,c
 27101  0005CA  D001               	goto	i1u1740_21
 27102  0005CC  D001               	goto	i1u1740_20
 27103  0005CE                     i1u1740_21:
 27104  0005CE  D03C               	goto	i1l13213
 27105  0005D0                     i1u1740_20:
 27106  0005D0  AA2A               	btfss	Interrupt@flags,5,c
 27107  0005D2  D001               	goto	i1u1741_21
 27108  0005D4  D001               	goto	i1u1741_20
 27109  0005D6                     i1u1741_21:
 27110  0005D6  D038               	goto	i1l13213
 27111  0005D8                     i1u1741_20:
 27112  0005D8                     
 27113                           ;main.c: 226: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27114  0005D8  5025               	movf	Interrupt@dlc,w,c
 27115  0005DA  6E13               	movwf	??_Interrupt& (0+255),c
 27116  0005DC  6A14               	clrf	(??_Interrupt+1)& (0+255),c
 27117  0005DE  0E05               	movlw	5
 27118  0005E0  2613               	addwf	??_Interrupt,f,c
 27119  0005E2  0E00               	movlw	0
 27120  0005E4  2214               	addwfc	??_Interrupt+1,f,c
 27121  0005E6  0E40               	movlw	_canInputFifo& (0+255)
 27122  0005E8  ECA6  F026         	call	_fifo_getFree
 27123  0005EC  5013               	movf	??_Interrupt,w,c
 27124  0005EE  5C01               	subwf	?_fifo_getFree,w,c
 27125  0005F0  5014               	movf	??_Interrupt+1,w,c
 27126  0005F2  5802               	subwfb	?_fifo_getFree+1,w,c
 27127  0005F4  A0D8               	btfss	status,0,c
 27128  0005F6  D001               	goto	i1u1742_21
 27129  0005F8  D001               	goto	i1u1742_20
 27130  0005FA                     i1u1742_21:
 27131  0005FA  D7DC               	goto	i1l13201
 27132  0005FC                     i1u1742_20:
 27133  0005FC                     
 27134                           ;main.c: 227: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 27135  0005FC  0E26               	movlw	low Interrupt@id
 27136  0005FE  6E01               	movwf	?_fifo_write,c
 27137  000600  0E04               	movlw	4
 27138  000602  6E02               	movwf	?_fifo_write+1,c
 27139  000604  0E00               	movlw	0
 27140  000606  6E03               	movwf	?_fifo_write+2,c
 27141  000608  0E00               	movlw	0
 27142  00060A  6E04               	movwf	?_fifo_write+3,c
 27143  00060C  0E00               	movlw	0
 27144  00060E  6E05               	movwf	?_fifo_write+4,c
 27145  000610  0E40               	movlw	_canInputFifo& (0+255)
 27146  000612  EC2E  F01E         	call	_fifo_write
 27147                           
 27148                           ;main.c: 228: fifo_write( &canInputFifo, &dlc, 1 );
 27149  000616  0E25               	movlw	low Interrupt@dlc
 27150  000618  6E01               	movwf	?_fifo_write,c
 27151  00061A  0E01               	movlw	1
 27152  00061C  6E02               	movwf	?_fifo_write+1,c
 27153  00061E  0E00               	movlw	0
 27154  000620  6E03               	movwf	?_fifo_write+2,c
 27155  000622  0E00               	movlw	0
 27156  000624  6E04               	movwf	?_fifo_write+3,c
 27157  000626  0E00               	movlw	0
 27158  000628  6E05               	movwf	?_fifo_write+4,c
 27159  00062A  0E40               	movlw	_canInputFifo& (0+255)
 27160  00062C  EC2E  F01E         	call	_fifo_write
 27161                           
 27162                           ;main.c: 229: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 27163  000630  0E1C               	movlw	low Interrupt@data
 27164  000632  6E01               	movwf	?_fifo_write,c
 27165  000634  5025               	movf	Interrupt@dlc,w,c
 27166  000636  6E02               	movwf	?_fifo_write+1,c
 27167  000638  6A03               	clrf	?_fifo_write+2,c
 27168  00063A  6A04               	clrf	?_fifo_write+3,c
 27169  00063C  6A05               	clrf	?_fifo_write+4,c
 27170  00063E  0E40               	movlw	_canInputFifo& (0+255)
 27171  000640  EC2E  F01E         	call	_fifo_write
 27172  000644                     
 27173                           ;main.c: 231: canrxcount++;
 27174  000644  0100               	movlb	0	; () banked
 27175  000646  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 27176  000648                     i1l13213:
 27177                           
 27178                           ;main.c: 235: }
 27179                           ;main.c: 237: }
 27180                           ;main.c: 239: }
 27181                           ;main.c: 242: RXBnIF = 0;
 27182  000648  92A4               	bcf	4004,1,c	;volatile
 27183  00064A                     i1l415:
 27184  00064A  C01B  FFDA         	movff	??_Interrupt+8,fsr2h
 27185  00064E  C01A  FFD9         	movff	??_Interrupt+7,fsr2l
 27186  000652  C019  FFE2         	movff	??_Interrupt+6,fsr1h
 27187  000656  C018  FFE1         	movff	??_Interrupt+5,fsr1l
 27188  00065A  C017  FFE0         	movff	??_Interrupt+4,bsr
 27189  00065E  C016  FFE8         	movff	??_Interrupt+3,wreg
 27190  000662  C015  FFD8         	movff	??_Interrupt+2,status
 27191  000666  0010               	retfie	
 27192  000668                     __end_of_Interrupt:
 27193                           	opt stack 0
 27194                           tblptru	equ	0xFF8
 27195                           tblptrh	equ	0xFF7
 27196                           tblptrl	equ	0xFF6
 27197                           tablat	equ	0xFF5
 27198                           prodh	equ	0xFF4
 27199                           prodl	equ	0xFF3
 27200                           intcon	equ	0xFF2
 27201                           indf0	equ	0xFEF
 27202                           postinc0	equ	0xFEE
 27203                           fsr0h	equ	0xFEA
 27204                           fsr0l	equ	0xFE9
 27205                           wreg	equ	0xFE8
 27206                           indf1	equ	0xFE7
 27207                           postinc1	equ	0xFE6
 27208                           postdec1	equ	0xFE5
 27209                           fsr1h	equ	0xFE2
 27210                           fsr1l	equ	0xFE1
 27211                           bsr	equ	0xFE0
 27212                           indf2	equ	0xFDF
 27213                           postinc2	equ	0xFDE
 27214                           postdec2	equ	0xFDD
 27215                           plusw2	equ	0xFDB
 27216                           fsr2h	equ	0xFDA
 27217                           fsr2l	equ	0xFD9
 27218                           status	equ	0xFD8
 27219                           
 27220 ;; *************** function i1_WriteTimer0 *****************
 27221 ;; Defined at:
 27222 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27223 ;; Parameters:    Size  Location     Type
 27224 ;;  timer0          2    0[COMRAM] unsigned int 
 27225 ;; Auto vars:     Size  Location     Type
 27226 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27227 ;; Return value:  Size  Location     Type
 27228 ;;		None               void
 27229 ;; Registers used:
 27230 ;;		None
 27231 ;; Tracked objects:
 27232 ;;		On entry : 0/0
 27233 ;;		On exit  : 0/0
 27234 ;;		Unchanged: 0/0
 27235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27236 ;;      Params:         2       0       0       0       0       0       0
 27237 ;;      Locals:         2       0       0       0       0       0       0
 27238 ;;      Temps:          0       0       0       0       0       0       0
 27239 ;;      Totals:         4       0       0       0       0       0       0
 27240 ;;Total ram usage:        4 bytes
 27241 ;; Hardware stack levels used:    1
 27242 ;; This function calls:
 27243 ;;		Nothing
 27244 ;; This function is called by:
 27245 ;;		_Interrupt
 27246 ;; This function uses a non-reentrant model
 27247 ;;
 27248                           
 27249                           	psect	text83
 27250  005C84                     __ptext83:
 27251                           	opt stack 0
 27252  005C84                     i1_WriteTimer0:
 27253                           	opt stack 21
 27254                           
 27255                           ;incstack = 0
 27256                           ;incstack = 0
 27257  005C84  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27258  005C88  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27259  005C8C  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27260  005C90  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27261  005C94  0012               	return	
 27262  005C96                     __end_ofi1_WriteTimer0:
 27263                           	opt stack 0
 27264                           tblptru	equ	0xFF8
 27265                           tblptrh	equ	0xFF7
 27266                           tblptrl	equ	0xFF6
 27267                           tablat	equ	0xFF5
 27268                           prodh	equ	0xFF4
 27269                           prodl	equ	0xFF3
 27270                           intcon	equ	0xFF2
 27271                           indf0	equ	0xFEF
 27272                           postinc0	equ	0xFEE
 27273                           fsr0h	equ	0xFEA
 27274                           fsr0l	equ	0xFE9
 27275                           wreg	equ	0xFE8
 27276                           indf1	equ	0xFE7
 27277                           postinc1	equ	0xFE6
 27278                           postdec1	equ	0xFE5
 27279                           fsr1h	equ	0xFE2
 27280                           fsr1l	equ	0xFE1
 27281                           bsr	equ	0xFE0
 27282                           indf2	equ	0xFDF
 27283                           postinc2	equ	0xFDE
 27284                           postdec2	equ	0xFDD
 27285                           plusw2	equ	0xFDB
 27286                           fsr2h	equ	0xFDA
 27287                           fsr2l	equ	0xFD9
 27288                           status	equ	0xFD8
 27289                           
 27290 ;; *************** function _fifo_getFree *****************
 27291 ;; Defined at:
 27292 ;;		line 96 in file "fifo.c"
 27293 ;; Parameters:    Size  Location     Type
 27294 ;;  f               1    wreg     PTR struct .
 27295 ;;		 -> canInputFifo(8), 
 27296 ;; Auto vars:     Size  Location     Type
 27297 ;;  f               1   10[COMRAM] PTR struct .
 27298 ;;		 -> canInputFifo(8), 
 27299 ;; Return value:  Size  Location     Type
 27300 ;;                  2    0[COMRAM] unsigned short 
 27301 ;; Registers used:
 27302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27303 ;; Tracked objects:
 27304 ;;		On entry : 0/0
 27305 ;;		On exit  : 0/0
 27306 ;;		Unchanged: 0/0
 27307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27308 ;;      Params:         2       0       0       0       0       0       0
 27309 ;;      Locals:         1       0       0       0       0       0       0
 27310 ;;      Temps:          8       0       0       0       0       0       0
 27311 ;;      Totals:        11       0       0       0       0       0       0
 27312 ;;Total ram usage:       11 bytes
 27313 ;; Hardware stack levels used:    1
 27314 ;; This function calls:
 27315 ;;		Nothing
 27316 ;; This function is called by:
 27317 ;;		_Interrupt
 27318 ;; This function uses a non-reentrant model
 27319 ;;
 27320                           
 27321                           	psect	text84
 27322  004D4C                     __ptext84:
 27323                           	opt stack 0
 27324  004D4C                     _fifo_getFree:
 27325                           	opt stack 21
 27326                           
 27327                           ;incstack = 0
 27328                           ;incstack = 0
 27329                           ;fifo_getFree@f stored from wreg
 27330  004D4C  CFE8 F00B          	movff	wreg,fifo_getFree@f
 27331                           
 27332                           ;fifo.c: 97: if (f->head < f->tail) {
 27333  004D50  D83F               	call	PL64	;call to abstracted procedure
 27334  004D52  500B               	movf	fifo_getFree@f,w,c
 27335  004D54  6EE1               	movwf	fsr1l,c
 27336  004D56  6AE2               	clrf	fsr1h,c
 27337  004D58  0E02               	movlw	2
 27338  004D5A  26E1               	addwf	fsr1l,f,c
 27339  004D5C  6AE2               	clrf	fsr1h,c
 27340  004D5E  52E6               	movf	postinc1,f,c
 27341  004D60  52DE               	movf	postinc2,f,c
 27342  004D62  50DD               	movf	postdec2,w,c
 27343  004D64  5CE5               	subwf	postdec1,w,c
 27344  004D66  E102               	bnz	i1u625_25
 27345  004D68  50DF               	movf	indf2,w,c
 27346  004D6A  5CE7               	subwf	indf1,w,c
 27347  004D6C                     i1u625_25:
 27348  004D6C  E210               	bc	i1l6385
 27349                           
 27350                           ;fifo.c: 98: return (f->tail - f->head);
 27351  004D6E  D837               	call	PL108	;call to abstracted procedure
 27352  004D70  CFDE F003          	movff	postinc2,??_fifo_getFree
 27353  004D74  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27354  004D78  D82B               	call	PL64	;call to abstracted procedure
 27355  004D7A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27356  004D7E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27357  004D82  5003               	movf	??_fifo_getFree,w,c
 27358  004D84  5C05               	subwf	??_fifo_getFree+2,w,c
 27359  004D86  6E01               	movwf	?_fifo_getFree,c
 27360  004D88  5004               	movf	??_fifo_getFree+1,w,c
 27361  004D8A  5806               	subwfb	??_fifo_getFree+3,w,c
 27362  004D8C  D01F               	goto	L44
 27363  004D8E                     i1l6385:
 27364                           
 27365                           ;fifo.c: 100: else {
 27366                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27367  004D8E  D820               	call	PL64	;call to abstracted procedure
 27368  004D90  CFDE F003          	movff	postinc2,??_fifo_getFree
 27369  004D94  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27370  004D98  D822               	call	PL108	;call to abstracted procedure
 27371  004D9A  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27372  004D9E  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27373  004DA2  500B               	movf	fifo_getFree@f,w,c
 27374  004DA4  6ED9               	movwf	fsr2l,c
 27375  004DA6  6ADA               	clrf	fsr2h,c
 27376  004DA8  0E06               	movlw	6
 27377  004DAA  26D9               	addwf	fsr2l,f,c
 27378  004DAC  6ADA               	clrf	fsr2h,c
 27379  004DAE  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27380  004DB2  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27381  004DB6  5005               	movf	??_fifo_getFree+2,w,c
 27382  004DB8  5C07               	subwf	??_fifo_getFree+4,w,c
 27383  004DBA  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27384  004DBC  5006               	movf	??_fifo_getFree+3,w,c
 27385  004DBE  5808               	subwfb	??_fifo_getFree+5,w,c
 27386  004DC0  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27387  004DC2  5003               	movf	??_fifo_getFree,w,c
 27388  004DC4  2409               	addwf	??_fifo_getFree+6,w,c
 27389  004DC6  6E01               	movwf	?_fifo_getFree,c
 27390  004DC8  5004               	movf	??_fifo_getFree+1,w,c
 27391  004DCA  200A               	addwfc	??_fifo_getFree+7,w,c
 27392  004DCC                     L44:
 27393  004DCC  6E02               	movwf	?_fifo_getFree+1,c
 27394  004DCE  0012               	return	
 27395  004DD0                     __end_of_fifo_getFree:
 27396                           	opt stack 0
 27397  004DD0                     PL64:
 27398                           	opt stack 21
 27399  004DD0  500B               	movf	fifo_getFree@f,w,c
 27400  004DD2  6ED9               	movwf	fsr2l,c
 27401  004DD4  6ADA               	clrf	fsr2h,c
 27402  004DD6  0E04               	movlw	4
 27403  004DD8  26D9               	addwf	fsr2l,f,c
 27404  004DDA  6ADA               	clrf	fsr2h,c
 27405  004DDC  0012               	return	
 27406  004DDE                     __end_ofPL64:
 27407                           	opt stack 0
 27408  004DDE                     PL108:
 27409                           	opt stack 21
 27410  004DDE  500B               	movf	fifo_getFree@f,w,c
 27411  004DE0  6ED9               	movwf	fsr2l,c
 27412  004DE2  6ADA               	clrf	fsr2h,c
 27413  004DE4  0E02               	movlw	2
 27414  004DE6  26D9               	addwf	fsr2l,f,c
 27415  004DE8  6ADA               	clrf	fsr2h,c
 27416  004DEA  0012               	return	
 27417  004DEC                     __end_ofPL108:
 27418                           	opt stack 0
 27419                           tblptru	equ	0xFF8
 27420                           tblptrh	equ	0xFF7
 27421                           tblptrl	equ	0xFF6
 27422                           tablat	equ	0xFF5
 27423                           prodh	equ	0xFF4
 27424                           prodl	equ	0xFF3
 27425                           intcon	equ	0xFF2
 27426                           indf0	equ	0xFEF
 27427                           postinc0	equ	0xFEE
 27428                           fsr0h	equ	0xFEA
 27429                           fsr0l	equ	0xFE9
 27430                           wreg	equ	0xFE8
 27431                           indf1	equ	0xFE7
 27432                           postinc1	equ	0xFE6
 27433                           postdec1	equ	0xFE5
 27434                           fsr1h	equ	0xFE2
 27435                           fsr1l	equ	0xFE1
 27436                           bsr	equ	0xFE0
 27437                           indf2	equ	0xFDF
 27438                           postinc2	equ	0xFDE
 27439                           postdec2	equ	0xFDD
 27440                           plusw2	equ	0xFDB
 27441                           fsr2h	equ	0xFDA
 27442                           fsr2l	equ	0xFD9
 27443                           status	equ	0xFD8
 27444                           
 27445 ;; *************** function _ECANReceiveMessage *****************
 27446 ;; Defined at:
 27447 ;;		line 803 in file "ECAN.c"
 27448 ;; Parameters:    Size  Location     Type
 27449 ;;  id              1    wreg     PTR unsigned long 
 27450 ;;		 -> Interrupt@id(4), 
 27451 ;;  data            1    7[COMRAM] PTR unsigned char 
 27452 ;;		 -> Interrupt@data(8), 
 27453 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27454 ;;		 -> Interrupt@dlc(1), 
 27455 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 27456 ;;		 -> Interrupt@flags(1), 
 27457 ;; Auto vars:     Size  Location     Type
 27458 ;;  id              1   12[COMRAM] PTR unsigned long 
 27459 ;;		 -> Interrupt@id(4), 
 27460 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27461 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27462 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27463 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27464 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27465 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27466 ;;  temp            1   15[COMRAM] struct .
 27467 ;;  mode            1   14[COMRAM] unsigned char 
 27468 ;;  i               1   13[COMRAM] unsigned char 
 27469 ;; Return value:  Size  Location     Type
 27470 ;;                  1    wreg      enum E15660
 27471 ;; Registers used:
 27472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27473 ;; Tracked objects:
 27474 ;;		On entry : 0/0
 27475 ;;		On exit  : 0/0
 27476 ;;		Unchanged: 0/0
 27477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27478 ;;      Params:         3       0       0       0       0       0       0
 27479 ;;      Locals:         8       0       0       0       0       0       0
 27480 ;;      Temps:          0       0       0       0       0       0       0
 27481 ;;      Totals:        11       0       0       0       0       0       0
 27482 ;;Total ram usage:       11 bytes
 27483 ;; Hardware stack levels used:    1
 27484 ;; Hardware stack levels required when called:    1
 27485 ;; This function calls:
 27486 ;;		__ECANPointBuffer
 27487 ;;		__RegsToCANID
 27488 ;; This function is called by:
 27489 ;;		_Interrupt
 27490 ;; This function uses a non-reentrant model
 27491 ;;
 27492                           
 27493                           	psect	text85
 27494  002B1A                     __ptext85:
 27495                           	opt stack 0
 27496  002B1A                     _ECANReceiveMessage:
 27497                           	opt stack 20
 27498                           
 27499                           ;incstack = 0
 27500                           ;incstack = 0
 27501                           ;ECANReceiveMessage@id stored from wreg
 27502  002B1A  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 27503                           
 27504                           ;ECAN.c: 805: BYTE mode;
 27505                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27506                           ;ECAN.c: 809: char i;
 27507                           ;ECAN.c: 810: BYTE_VAL temp;
 27508                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27509  002B1E  6A3E               	clrf	__ECANRxFilterHitInfo,c
 27510                           
 27511                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27512  002B20  5077               	movf	3959,w,c	;volatile
 27513  002B22  0BC0               	andlw	192
 27514  002B24  6E0F               	movwf	ECANReceiveMessage@mode,c
 27515                           
 27516                           ;ECAN.c: 816: if ( mode == 0x00 )
 27517  002B26  660F               	tstfsz	ECANReceiveMessage@mode,c
 27518  002B28  D032               	goto	i1l9701
 27519                           
 27520                           ;ECAN.c: 822: {
 27521                           ;ECAN.c: 824: if ( RXB0FUL )
 27522  002B2A  AE60               	btfss	3936,7,c	;volatile
 27523  002B2C  D012               	goto	i1l1445
 27524                           
 27525                           ;ECAN.c: 825: {
 27526                           ;ECAN.c: 827: RXB0IF = 0;
 27527  002B2E  90A4               	bcf	4004,0,c	;volatile
 27528                           
 27529                           ;ECAN.c: 830: if ( RXB0OVFL )
 27530  002B30  AE74               	btfss	3956,7,c	;volatile
 27531  002B32  D006               	goto	i1l9677
 27532                           
 27533                           ;ECAN.c: 831: {
 27534                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27535  002B34  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27536  002B36  6ED9               	movwf	fsr2l,c
 27537  002B38  6ADA               	clrf	fsr2h,c
 27538  002B3A  0E00               	movlw	0
 27539  002B3C  86DB               	bsf	plusw2,3,c
 27540                           
 27541                           ;ECAN.c: 833: RXB0OVFL = 0;
 27542  002B3E  9E74               	bcf	3956,7,c	;volatile
 27543  002B40                     i1l9677:
 27544                           
 27545                           ;ECAN.c: 834: }
 27546                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27547  002B40  A060               	btfss	3936,0,c	;volatile
 27548  002B42  D002               	bra	i1u1152_25
 27549  002B44  803E               	bsf	__ECANRxFilterHitInfo,0,c
 27550  002B46  D001               	bra	i1u1152_27
 27551  002B48                     i1u1152_25:
 27552  002B48  903E               	bcf	__ECANRxFilterHitInfo,0,c
 27553  002B4A                     i1u1152_27:
 27554                           
 27555                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27556  002B4A  0E0F               	movlw	15	;volatile
 27557  002B4C  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27558  002B4E  0E60               	movlw	96	;volatile
 27559  002B50  D01A               	goto	L45
 27560  002B52                     i1l1445:
 27561                           
 27562                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27563  002B52  010F               	movlb	15	; () banked
 27564  002B54  AF50               	btfss	80,7,b	;volatile
 27565  002B56  D019               	goto	i1l9695
 27566                           
 27567                           ; BSR set to: 15
 27568                           ;ECAN.c: 842: {
 27569                           ;ECAN.c: 844: RXB1IF = 0;
 27570  002B58  92A4               	bcf	4004,1,c	;volatile
 27571                           
 27572                           ;ECAN.c: 847: if ( RXB1OVFL )
 27573  002B5A  AC74               	btfss	3956,6,c	;volatile
 27574  002B5C  D006               	goto	i1l9687
 27575                           
 27576                           ; BSR set to: 15
 27577                           ;ECAN.c: 848: {
 27578                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27579  002B5E  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27580  002B60  6ED9               	movwf	fsr2l,c
 27581  002B62  6ADA               	clrf	fsr2h,c
 27582  002B64  0E00               	movlw	0
 27583  002B66  86DB               	bsf	plusw2,3,c
 27584                           
 27585                           ; BSR set to: 15
 27586                           ;ECAN.c: 850: RXB1OVFL = 0;
 27587  002B68  9C74               	bcf	3956,6,c	;volatile
 27588  002B6A                     i1l9687:
 27589                           
 27590                           ; BSR set to: 15
 27591                           ;ECAN.c: 851: }
 27592                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27593  002B6A  5150               	movf	80,w,b	;volatile
 27594  002B6C  0B07               	andlw	7
 27595  002B6E  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27596                           
 27597                           ; BSR set to: 15
 27598                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27599  002B70  0E02               	movlw	2
 27600  002B72  603E               	cpfslt	__ECANRxFilterHitInfo,c
 27601  002B74  D005               	goto	i1l9693
 27602                           
 27603                           ; BSR set to: 15
 27604                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27605  002B76  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27606  002B78  6ED9               	movwf	fsr2l,c
 27607  002B7A  6ADA               	clrf	fsr2h,c
 27608  002B7C  0E00               	movlw	0
 27609  002B7E  8EDB               	bsf	plusw2,7,c
 27610  002B80                     i1l9693:
 27611                           
 27612                           ; BSR set to: 15
 27613                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27614  002B80  0E0F               	movlw	15	;volatile
 27615  002B82  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27616  002B84  0E50               	movlw	80	;volatile
 27617  002B86                     L45:
 27618  002B86  6E11               	movwf	ECANReceiveMessage@ptr,c
 27619                           
 27620                           ;ECAN.c: 860: }
 27621  002B88  D065               	goto	i1l9755
 27622  002B8A                     i1l9695:
 27623                           
 27624                           ;ECAN.c: 861: else
 27625                           ;ECAN.c: 862: return FALSE;
 27626  002B8A  0E00               	movlw	0
 27627  002B8C  D0C2               	goto	i1l1452
 27628  002B8E                     i1l9701:
 27629                           
 27630                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27631  002B8E  500F               	movf	ECANReceiveMessage@mode,w,c
 27632  002B90  0A40               	xorlw	64
 27633  002B92  E146               	bnz	i1l1455
 27634                           
 27635                           ;ECAN.c: 875: {
 27636                           ;ECAN.c: 876: if ( RXB0FUL )
 27637  002B94  AE60               	btfss	3936,7,c	;volatile
 27638  002B96  D004               	goto	i1l1456
 27639                           
 27640                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27641  002B98  0E0F               	movlw	15	;volatile
 27642  002B9A  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27643  002B9C  0E60               	movlw	96	;volatile
 27644  002B9E  D03E               	goto	L52
 27645  002BA0                     i1l1456:
 27646                           
 27647                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27648  002BA0  010F               	movlb	15	; () banked
 27649  002BA2  AF50               	btfss	80,7,b	;volatile
 27650  002BA4  D004               	goto	i1l1458
 27651                           
 27652                           ; BSR set to: 15
 27653                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27654  002BA6  0E0F               	movlw	15	;volatile
 27655  002BA8  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27656  002BAA  0E50               	movlw	80	;volatile
 27657  002BAC  D037               	goto	L52
 27658  002BAE                     i1l1458:
 27659                           
 27660                           ; BSR set to: 15
 27661                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27662  002BAE  010D               	movlb	13
 27663  002BB0  B5F8               	btfsc	248,2,b	;volatile
 27664  002BB2  D007               	goto	i1l1460
 27665  002BB4  010E               	movlb	14
 27666  002BB6  AF20               	btfss	32,7,b	;volatile
 27667  002BB8  D004               	goto	i1l1460
 27668                           
 27669                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27670  002BBA  0E0E               	movlw	14	;volatile
 27671  002BBC  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27672  002BBE  0E20               	movlw	32	;volatile
 27673  002BC0  D02D               	goto	L52
 27674  002BC2                     i1l1460:
 27675                           
 27676                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27677  002BC2  010D               	movlb	13
 27678  002BC4  B7F8               	btfsc	248,3,b	;volatile
 27679  002BC6  D007               	goto	i1l1462
 27680  002BC8  010E               	movlb	14
 27681  002BCA  AF30               	btfss	48,7,b	;volatile
 27682  002BCC  D004               	goto	i1l1462
 27683                           
 27684                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27685  002BCE  0E0E               	movlw	14	;volatile
 27686  002BD0  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27687  002BD2  0E30               	movlw	48	;volatile
 27688  002BD4  D023               	goto	L52
 27689  002BD6                     i1l1462:
 27690                           
 27691                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27692  002BD6  010D               	movlb	13
 27693  002BD8  B9F8               	btfsc	248,4,b	;volatile
 27694  002BDA  D007               	goto	i1l1464
 27695  002BDC  010E               	movlb	14
 27696  002BDE  AF40               	btfss	64,7,b	;volatile
 27697  002BE0  D004               	goto	i1l1464
 27698                           
 27699                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27700  002BE2  0E0E               	movlw	14	;volatile
 27701  002BE4  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27702  002BE6  0E40               	movlw	64	;volatile
 27703  002BE8  D019               	goto	L52
 27704  002BEA                     i1l1464:
 27705                           
 27706                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27707  002BEA  010D               	movlb	13
 27708  002BEC  BBF8               	btfsc	248,5,b	;volatile
 27709  002BEE  D005               	goto	i1l1466
 27710  002BF0  010E               	movlb	14
 27711  002BF2  AF50               	btfss	80,7,b	;volatile
 27712  002BF4  D002               	goto	i1l1466
 27713                           
 27714                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27715  002BF6  0E0E               	movlw	14	;volatile
 27716  002BF8  D7D7               	goto	L53
 27717  002BFA                     i1l1466:
 27718                           
 27719                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27720  002BFA  010D               	movlb	13
 27721  002BFC  BDF8               	btfsc	248,6,b	;volatile
 27722  002BFE  D005               	goto	i1l1468
 27723  002C00  010E               	movlb	14
 27724  002C02  AF60               	btfss	96,7,b	;volatile
 27725  002C04  D002               	goto	i1l1468
 27726                           
 27727                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27728  002C06  0E0E               	movlw	14	;volatile
 27729  002C08  D7C8               	goto	L54
 27730  002C0A                     i1l1468:
 27731                           
 27732                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27733  002C0A  010D               	movlb	13
 27734  002C0C  BFF8               	btfsc	248,7,b	;volatile
 27735  002C0E  D7BD               	goto	i1l9695
 27736  002C10  010E               	movlb	14
 27737  002C12  AF70               	btfss	112,7,b	;volatile
 27738  002C14  D7BA               	goto	i1l9695
 27739                           
 27740                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27741  002C16  0E0E               	movlw	14	;volatile
 27742  002C18  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27743  002C1A  0E70               	movlw	112	;volatile
 27744  002C1C                     L52:
 27745  002C1C  6E11               	movwf	ECANReceiveMessage@ptr,c
 27746  002C1E  D00A               	goto	i1l9745
 27747  002C20                     i1l1455:
 27748                           
 27749                           ;ECAN.c: 910: else
 27750                           ;ECAN.c: 915: {
 27751                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27752  002C20  AE74               	btfss	3956,7,c	;volatile
 27753  002C22  D7B3               	goto	i1l9695
 27754                           
 27755                           ;ECAN.c: 919: {
 27756                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27757  002C24  506F               	movf	3951,w,c	;volatile
 27758  002C26  0B07               	andlw	7
 27759  002C28  EC8F  F029         	call	__ECANPointBuffer
 27760  002C2C  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27761  002C30  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27762  002C34                     i1l9745:
 27763                           
 27764                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27765  002C34  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27766  002C38  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27767  002C3C  50DF               	movf	indf2,w,c
 27768  002C3E  0B1F               	andlw	31
 27769  002C40  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27770                           
 27771                           ;ECAN.c: 934: RXB1IF = 0;
 27772  002C42  92A4               	bcf	4004,1,c	;volatile
 27773                           
 27774                           ;ECAN.c: 936: if ( RXB1OVFL )
 27775  002C44  AC74               	btfss	3956,6,c	;volatile
 27776  002C46  D006               	goto	i1l9755
 27777                           
 27778                           ;ECAN.c: 937: {
 27779                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27780  002C48  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27781  002C4A  6ED9               	movwf	fsr2l,c
 27782  002C4C  6ADA               	clrf	fsr2h,c
 27783  002C4E  0E00               	movlw	0
 27784  002C50  86DB               	bsf	plusw2,3,c
 27785                           
 27786                           ;ECAN.c: 939: RXB1OVFL = 0;
 27787  002C52  9C74               	bcf	3956,6,c	;volatile
 27788  002C54                     i1l9755:
 27789                           
 27790                           ;ECAN.c: 944: savedPtr = ptr;
 27791  002C54  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27792  002C58  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27793                           
 27794                           ;ECAN.c: 945: *msgFlags = 0;
 27795  002C5C  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27796  002C5E  6ED9               	movwf	fsr2l,c
 27797  002C60  6ADA               	clrf	fsr2h,c
 27798  002C62  6ADF               	clrf	indf2,c
 27799                           
 27800                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27801  002C64  EE20 F005          	lfsr	2,5
 27802  002C68  D855               	call	PL106	;call to abstracted procedure
 27803                           
 27804                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27805  002C6A  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27806  002C6C  6ED9               	movwf	fsr2l,c
 27807  002C6E  6ADA               	clrf	fsr2h,c
 27808  002C70  5010               	movf	ECANReceiveMessage@temp,w,c
 27809  002C72  0B0F               	andlw	15
 27810  002C74  6EDF               	movwf	indf2,c
 27811                           
 27812                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27813  002C76  AC10               	btfss	ECANReceiveMessage@temp,6,c
 27814  002C78  D005               	goto	i1l1476
 27815                           
 27816                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27817  002C7A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27818  002C7C  6ED9               	movwf	fsr2l,c
 27819  002C7E  6ADA               	clrf	fsr2h,c
 27820  002C80  0E00               	movlw	0
 27821  002C82  8CDB               	bsf	plusw2,6,c
 27822  002C84                     i1l1476:
 27823                           
 27824                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27825  002C84  EE20 F002          	lfsr	2,2
 27826  002C88  D845               	call	PL106	;call to abstracted procedure
 27827                           
 27828                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27829  002C8A  A610               	btfss	ECANReceiveMessage@temp,3,c
 27830  002C8C  D008               	goto	i1l1477
 27831                           
 27832                           ;ECAN.c: 958: {
 27833                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27834  002C8E  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27835  002C90  6ED9               	movwf	fsr2l,c
 27836  002C92  6ADA               	clrf	fsr2h,c
 27837  002C94  0E00               	movlw	0
 27838  002C96  8ADB               	bsf	plusw2,5,c
 27839                           
 27840                           ;ECAN.c: 960: temp.Val = 1;
 27841  002C98  0E01               	movlw	1
 27842  002C9A  6E10               	movwf	ECANReceiveMessage@temp,c
 27843                           
 27844                           ;ECAN.c: 961: }
 27845  002C9C  D001               	goto	i1l9773
 27846  002C9E                     i1l1477:
 27847                           
 27848                           ;ECAN.c: 962: else
 27849                           ;ECAN.c: 963: temp.Val = 0;
 27850  002C9E  6A10               	clrf	ECANReceiveMessage@temp,c
 27851  002CA0                     i1l9773:
 27852                           
 27853                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27854  002CA0  2811               	incf	ECANReceiveMessage@ptr,w,c
 27855  002CA2  6E01               	movwf	?__RegsToCANID,c
 27856  002CA4  0E00               	movlw	0
 27857  002CA6  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27858  002CA8  6E02               	movwf	?__RegsToCANID+1,c
 27859  002CAA  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27860  002CAE  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27861  002CB2  EC9F  F01D         	call	__RegsToCANID	;wreg free
 27862                           
 27863                           ;ECAN.c: 968: ptr += 6;
 27864  002CB6  0E06               	movlw	6
 27865  002CB8  2611               	addwf	ECANReceiveMessage@ptr,f,c
 27866  002CBA  0E00               	movlw	0
 27867  002CBC  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27868                           
 27869                           ;ECAN.c: 969: temp.Val = *dataLen;
 27870  002CBE  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27871  002CC0  6ED9               	movwf	fsr2l,c
 27872  002CC2  6ADA               	clrf	fsr2h,c
 27873  002CC4  50DF               	movf	indf2,w,c
 27874  002CC6  6E10               	movwf	ECANReceiveMessage@temp,c
 27875                           
 27876                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27877  002CC8  6A0E               	clrf	ECANReceiveMessage@i,c
 27878  002CCA  D00D               	goto	i1l9789
 27879  002CCC                     i1l9781:
 27880                           
 27881                           ;ECAN.c: 971: *data++ = *ptr++;
 27882  002CCC  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27883  002CD0  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27884  002CD4  5008               	movf	ECANReceiveMessage@data,w,c
 27885  002CD6  6EE1               	movwf	fsr1l,c
 27886  002CD8  6AE2               	clrf	fsr1h,c
 27887  002CDA  CFDF FFE7          	movff	indf2,indf1
 27888  002CDE  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 27889  002CE0  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 27890  002CE2  2A08               	incf	ECANReceiveMessage@data,f,c
 27891  002CE4  2A0E               	incf	ECANReceiveMessage@i,f,c
 27892  002CE6                     i1l9789:
 27893  002CE6  5010               	movf	ECANReceiveMessage@temp,w,c
 27894  002CE8  5C0E               	subwf	ECANReceiveMessage@i,w,c
 27895  002CEA  E3F0               	bnc	i1l9781
 27896                           
 27897                           ;ECAN.c: 974: if ( IRXIF )
 27898  002CEC  AEA4               	btfss	4004,7,c	;volatile
 27899  002CEE  D006               	goto	i1l9795
 27900                           
 27901                           ;ECAN.c: 975: {
 27902                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27903  002CF0  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27904  002CF2  6ED9               	movwf	fsr2l,c
 27905  002CF4  6ADA               	clrf	fsr2h,c
 27906  002CF6  0E00               	movlw	0
 27907  002CF8  88DB               	bsf	plusw2,4,c
 27908                           
 27909                           ;ECAN.c: 977: IRXIF = 0;
 27910  002CFA  9EA4               	bcf	4004,7,c	;volatile
 27911  002CFC                     i1l9795:
 27912                           
 27913                           ;ECAN.c: 978: }
 27914                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27915  002CFC  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27916  002D00  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27917  002D04  0E7F               	movlw	127
 27918  002D06  16DF               	andwf	indf2,f,c
 27919                           
 27920                           ;ECAN.c: 985: if ( mode == 0x80 )
 27921  002D08  500F               	movf	ECANReceiveMessage@mode,w,c
 27922  002D0A  0A80               	xorlw	128
 27923  002D0C  B4D8               	btfsc	status,2,c
 27924                           
 27925                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27926  002D0E  9E74               	bcf	3956,7,c	;volatile
 27927                           
 27928                           ;ECAN.c: 992: return TRUE;
 27929  002D10  0E01               	movlw	1
 27930  002D12                     i1l1452:
 27931  002D12  0012               	return	
 27932  002D14                     __end_of_ECANReceiveMessage:
 27933                           	opt stack 0
 27934  002D14                     PL106:
 27935                           	opt stack 20
 27936  002D14  5011               	movf	ECANReceiveMessage@ptr,w,c
 27937  002D16  26D9               	addwf	fsr2l,f,c
 27938  002D18  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 27939  002D1A  22DA               	addwfc	fsr2h,f,c
 27940  002D1C  50DF               	movf	indf2,w,c
 27941  002D1E  6E10               	movwf	ECANReceiveMessage@temp,c
 27942  002D20  0012               	return	
 27943  002D22                     __end_ofPL106:
 27944                           	opt stack 0
 27945                           tblptru	equ	0xFF8
 27946                           tblptrh	equ	0xFF7
 27947                           tblptrl	equ	0xFF6
 27948                           tablat	equ	0xFF5
 27949                           prodh	equ	0xFF4
 27950                           prodl	equ	0xFF3
 27951                           intcon	equ	0xFF2
 27952                           indf0	equ	0xFEF
 27953                           postinc0	equ	0xFEE
 27954                           fsr0h	equ	0xFEA
 27955                           fsr0l	equ	0xFE9
 27956                           wreg	equ	0xFE8
 27957                           indf1	equ	0xFE7
 27958                           postinc1	equ	0xFE6
 27959                           postdec1	equ	0xFE5
 27960                           fsr1h	equ	0xFE2
 27961                           fsr1l	equ	0xFE1
 27962                           bsr	equ	0xFE0
 27963                           indf2	equ	0xFDF
 27964                           postinc2	equ	0xFDE
 27965                           postdec2	equ	0xFDD
 27966                           plusw2	equ	0xFDB
 27967                           fsr2h	equ	0xFDA
 27968                           fsr2l	equ	0xFD9
 27969                           status	equ	0xFD8
 27970                           
 27971 ;; *************** function __RegsToCANID *****************
 27972 ;; Defined at:
 27973 ;;		line 1158 in file "ECAN.c"
 27974 ;; Parameters:    Size  Location     Type
 27975 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27976 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27977 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27978 ;;  val             1    2[COMRAM] PTR unsigned long 
 27979 ;;		 -> Interrupt@id(4), 
 27980 ;;  type            1    3[COMRAM] unsigned char 
 27981 ;; Auto vars:     Size  Location     Type
 27982 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27983 ;;		 -> Interrupt@id(4), 
 27984 ;; Return value:  Size  Location     Type
 27985 ;;		None               void
 27986 ;; Registers used:
 27987 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27988 ;; Tracked objects:
 27989 ;;		On entry : 0/0
 27990 ;;		On exit  : 0/0
 27991 ;;		Unchanged: 0/0
 27992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27993 ;;      Params:         4       0       0       0       0       0       0
 27994 ;;      Locals:         1       0       0       0       0       0       0
 27995 ;;      Temps:          2       0       0       0       0       0       0
 27996 ;;      Totals:         7       0       0       0       0       0       0
 27997 ;;Total ram usage:        7 bytes
 27998 ;; Hardware stack levels used:    1
 27999 ;; This function calls:
 28000 ;;		Nothing
 28001 ;; This function is called by:
 28002 ;;		_ECANReceiveMessage
 28003 ;; This function uses a non-reentrant model
 28004 ;;
 28005                           
 28006                           	psect	text86
 28007  003B3E                     __ptext86:
 28008                           	opt stack 0
 28009  003B3E                     __RegsToCANID:
 28010                           	opt stack 20
 28011                           
 28012                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28013                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28014                           
 28015                           ;incstack = 0
 28016                           ;incstack = 0
 28017  003B3E  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28018                           
 28019                           ;ECAN.c: 1163: if ( type == 0 )
 28020  003B42  6604               	tstfsz	__RegsToCANID@type,c
 28021  003B44  D02B               	goto	i1l9445
 28022                           
 28023                           ;ECAN.c: 1164: {
 28024                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28025  003B46  5007               	movf	__RegsToCANID@Value,w,c
 28026  003B48  6ED9               	movwf	fsr2l,c
 28027  003B4A  D86C               	call	PL72	;call to abstracted procedure
 28028  003B4C  3605               	rlcf	??__RegsToCANID,f,c
 28029  003B4E  90D8               	bcf	status,0,c
 28030  003B50  3605               	rlcf	??__RegsToCANID,f,c
 28031  003B52  90D8               	bcf	status,0,c
 28032  003B54  3405               	rlcf	??__RegsToCANID,w,c
 28033  003B56  6EDF               	movwf	indf2,c
 28034                           
 28035                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28036  003B58  5007               	movf	__RegsToCANID@Value,w,c
 28037  003B5A  6ED9               	movwf	fsr2l,c
 28038  003B5C  6ADA               	clrf	fsr2h,c
 28039  003B5E  2AD9               	incf	fsr2l,f,c
 28040  003B60  6ADA               	clrf	fsr2h,c
 28041  003B62  D873               	call	PL84	;call to abstracted procedure
 28042  003B64                     i1u1112_25:
 28043  003B64  90D8               	bcf	status,0,c
 28044  003B66  3205               	rrcf	??__RegsToCANID,f,c
 28045  003B68  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28046  003B6A  D7FC               	goto	i1u1112_25
 28047  003B6C  5005               	movf	??__RegsToCANID,w,c
 28048                           
 28049                           ;ECAN.c: 1168: ptr++;
 28050                           
 28051                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28052  003B6E  D863               	call	PL74	;call to abstracted procedure
 28053  003B70  0E05               	movlw	5
 28054  003B72  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 28055  003B74                     i1u1113_25:
 28056  003B74  90D8               	bcf	status,0,c
 28057  003B76  3205               	rrcf	??__RegsToCANID,f,c
 28058  003B78  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28059  003B7A  D7FC               	goto	i1u1113_25
 28060  003B7C  5007               	movf	__RegsToCANID@Value,w,c
 28061  003B7E  6ED9               	movwf	fsr2l,c
 28062  003B80  6ADA               	clrf	fsr2h,c
 28063  003B82  5005               	movf	??__RegsToCANID,w,c
 28064  003B84  12DF               	iorwf	indf2,f,c
 28065                           
 28066                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28067  003B86  D83D               	call	PL42	;call to abstracted procedure
 28068  003B88  6ADF               	clrf	indf2,c
 28069                           
 28070                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28071  003B8A  5007               	movf	__RegsToCANID@Value,w,c
 28072  003B8C  6ED9               	movwf	fsr2l,c
 28073  003B8E  6ADA               	clrf	fsr2h,c
 28074  003B90  0E03               	movlw	3
 28075  003B92  26D9               	addwf	fsr2l,f,c
 28076  003B94  6ADA               	clrf	fsr2h,c
 28077  003B96  0E00               	movlw	0
 28078  003B98  6EDF               	movwf	indf2,c
 28079                           
 28080                           ;ECAN.c: 1172: }
 28081  003B9A  D032               	goto	i1l1499
 28082  003B9C                     i1l9445:
 28083                           
 28084                           ;ECAN.c: 1173: else
 28085                           ;ECAN.c: 1174: {
 28086                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28087  003B9C  D832               	call	PL42	;call to abstracted procedure
 28088  003B9E  D855               	call	PL84	;call to abstracted procedure
 28089  003BA0                     i1u1114_25:
 28090  003BA0  90D8               	bcf	status,0,c
 28091  003BA2  3605               	rlcf	??__RegsToCANID,f,c
 28092  003BA4  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28093  003BA6  D7FC               	goto	i1u1114_25
 28094  003BA8  5005               	movf	??__RegsToCANID,w,c
 28095  003BAA  6EDF               	movwf	indf2,c
 28096                           
 28097                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28098  003BAC  5007               	movf	__RegsToCANID@Value,w,c
 28099  003BAE  6ED9               	movwf	fsr2l,c
 28100  003BB0  6ADA               	clrf	fsr2h,c
 28101  003BB2  0E03               	movlw	3
 28102  003BB4  26D9               	addwf	fsr2l,f,c
 28103  003BB6  D836               	call	PL72	;call to abstracted procedure
 28104  003BB8  3205               	rrcf	??__RegsToCANID,f,c
 28105  003BBA  90D8               	bcf	status,0,c
 28106  003BBC  3205               	rrcf	??__RegsToCANID,f,c
 28107  003BBE  90D8               	bcf	status,0,c
 28108  003BC0  3005               	rrcf	??__RegsToCANID,w,c
 28109                           
 28110                           ;ECAN.c: 1178: ptr++;
 28111                           
 28112                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28113  003BC2  D839               	call	PL74	;call to abstracted procedure
 28114  003BC4  0E03               	movlw	3
 28115  003BC6  1605               	andwf	??__RegsToCANID,f,c
 28116  003BC8  D81C               	call	PL42	;call to abstracted procedure
 28117  003BCA  5005               	movf	??__RegsToCANID,w,c
 28118  003BCC  12DF               	iorwf	indf2,f,c
 28119                           
 28120                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28121  003BCE  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28122  003BD2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28123  003BD6  50DF               	movf	indf2,w,c
 28124  003BD8  6E05               	movwf	??__RegsToCANID& (0+255),c
 28125  003BDA  90D8               	bcf	status,0,c
 28126  003BDC  3205               	rrcf	??__RegsToCANID,f,c
 28127  003BDE  90D8               	bcf	status,0,c
 28128  003BE0  3205               	rrcf	??__RegsToCANID,f,c
 28129  003BE2  90D8               	bcf	status,0,c
 28130  003BE4  3205               	rrcf	??__RegsToCANID,f,c
 28131  003BE6  0E1C               	movlw	28
 28132  003BE8  1605               	andwf	??__RegsToCANID,f,c
 28133  003BEA  D80B               	call	PL42	;call to abstracted procedure
 28134  003BEC  5005               	movf	??__RegsToCANID,w,c
 28135  003BEE  12DF               	iorwf	indf2,f,c
 28136                           
 28137                           ;ECAN.c: 1182: ptr++;
 28138                           
 28139                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28140  003BF0  D80F               	call	PL70	;call to abstracted procedure
 28141  003BF2  2AE1               	incf	fsr1l,f,c
 28142  003BF4  6AE2               	clrf	fsr1h,c
 28143  003BF6  CFDF FFE7          	movff	indf2,indf1
 28144                           
 28145                           ;ECAN.c: 1184: ptr++;
 28146                           
 28147                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28148  003BFA  D80A               	call	PL70	;call to abstracted procedure
 28149  003BFC  CFDF FFE7          	movff	indf2,indf1
 28150  003C00                     i1l1499:
 28151  003C00  0012               	return	
 28152  003C02                     __end_of__RegsToCANID:
 28153                           	opt stack 0
 28154  003C02                     PL42:
 28155                           	opt stack 20
 28156  003C02  5007               	movf	__RegsToCANID@Value,w,c
 28157  003C04  6ED9               	movwf	fsr2l,c
 28158  003C06  6ADA               	clrf	fsr2h,c
 28159  003C08  0E02               	movlw	2
 28160  003C0A  26D9               	addwf	fsr2l,f,c
 28161  003C0C  6ADA               	clrf	fsr2h,c
 28162  003C0E  0012               	return	
 28163  003C10                     __end_ofPL42:
 28164                           	opt stack 0
 28165  003C10                     PL70:
 28166                           	opt stack 20
 28167  003C10  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28168  003C12  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28169  003C14  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28170  003C18  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28171  003C1C  5007               	movf	__RegsToCANID@Value,w,c
 28172  003C1E  6EE1               	movwf	fsr1l,c
 28173  003C20  6AE2               	clrf	fsr1h,c
 28174  003C22  0012               	return	
 28175  003C24                     __end_ofPL70:
 28176                           	opt stack 0
 28177  003C24                     PL72:
 28178                           	opt stack 20
 28179  003C24  6ADA               	clrf	fsr2h,c
 28180  003C26  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28181  003C2A  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28182  003C2E  50E7               	movf	indf1,w,c
 28183  003C30  6E05               	movwf	??__RegsToCANID& (0+255),c
 28184  003C32  90D8               	bcf	status,0,c
 28185  003C34  0012               	return	
 28186  003C36                     __end_ofPL72:
 28187                           	opt stack 0
 28188  003C36                     PL74:
 28189                           	opt stack 20
 28190  003C36  6EDF               	movwf	indf2,c
 28191  003C38  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28192  003C3A  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28193  003C3C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28194  003C40  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28195  003C44  50DF               	movf	indf2,w,c
 28196  003C46  6E05               	movwf	??__RegsToCANID& (0+255),c
 28197  003C48  0012               	return	
 28198  003C4A                     __end_ofPL74:
 28199                           	opt stack 0
 28200  003C4A                     PL84:
 28201                           	opt stack 20
 28202  003C4A  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28203  003C4E  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28204  003C52  50E7               	movf	indf1,w,c
 28205  003C54  6E05               	movwf	??__RegsToCANID& (0+255),c
 28206  003C56  0E05               	movlw	5
 28207  003C58  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 28208  003C5A  0C05               	retlw	5
 28209  003C5C                     __end_ofPL84:
 28210                           	opt stack 0
 28211                           tblptru	equ	0xFF8
 28212                           tblptrh	equ	0xFF7
 28213                           tblptrl	equ	0xFF6
 28214                           tablat	equ	0xFF5
 28215                           prodh	equ	0xFF4
 28216                           prodl	equ	0xFF3
 28217                           intcon	equ	0xFF2
 28218                           indf0	equ	0xFEF
 28219                           postinc0	equ	0xFEE
 28220                           fsr0h	equ	0xFEA
 28221                           fsr0l	equ	0xFE9
 28222                           wreg	equ	0xFE8
 28223                           indf1	equ	0xFE7
 28224                           postinc1	equ	0xFE6
 28225                           postdec1	equ	0xFE5
 28226                           fsr1h	equ	0xFE2
 28227                           fsr1l	equ	0xFE1
 28228                           bsr	equ	0xFE0
 28229                           indf2	equ	0xFDF
 28230                           postinc2	equ	0xFDE
 28231                           postdec2	equ	0xFDD
 28232                           plusw2	equ	0xFDB
 28233                           fsr2h	equ	0xFDA
 28234                           fsr2l	equ	0xFD9
 28235                           status	equ	0xFD8
 28236                           
 28237 ;; *************** function __ECANPointBuffer *****************
 28238 ;; Defined at:
 28239 ;;		line 1209 in file "ECAN.c"
 28240 ;; Parameters:    Size  Location     Type
 28241 ;;  b               1    wreg     unsigned char 
 28242 ;; Auto vars:     Size  Location     Type
 28243 ;;  b               1    3[COMRAM] unsigned char 
 28244 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28245 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28246 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28247 ;; Return value:  Size  Location     Type
 28248 ;;                  2    0[COMRAM] PTR unsigned char 
 28249 ;; Registers used:
 28250 ;;		wreg, status,2, status,0
 28251 ;; Tracked objects:
 28252 ;;		On entry : 0/0
 28253 ;;		On exit  : 0/0
 28254 ;;		Unchanged: 0/0
 28255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28256 ;;      Params:         3       0       0       0       0       0       0
 28257 ;;      Locals:         3       0       0       0       0       0       0
 28258 ;;      Temps:          0       0       0       0       0       0       0
 28259 ;;      Totals:         6       0       0       0       0       0       0
 28260 ;;Total ram usage:        6 bytes
 28261 ;; Hardware stack levels used:    1
 28262 ;; This function calls:
 28263 ;;		Nothing
 28264 ;; This function is called by:
 28265 ;;		_ECANReceiveMessage
 28266 ;; This function uses a non-reentrant model
 28267 ;;
 28268                           
 28269                           	psect	text87
 28270  00531E                     __ptext87:
 28271                           	opt stack 0
 28272  00531E                     __ECANPointBuffer:
 28273                           	opt stack 20
 28274                           
 28275                           ;incstack = 0
 28276                           ;incstack = 0
 28277                           ;__ECANPointBuffer@b stored from wreg
 28278  00531E  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28279                           
 28280                           ;ECAN.c: 1210: BYTE* pt;
 28281                           ;ECAN.c: 1212: switch(b)
 28282  005322  D024               	goto	i1l9431
 28283  005324                     i1l9413:
 28284                           
 28285                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28286  005324  0E0F               	movlw	15	;volatile
 28287  005326  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28288  005328  0E60               	movlw	96	;volatile
 28289  00532A  D01E               	goto	L61
 28290  00532C                     i1l9415:
 28291                           
 28292                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28293  00532C  010F               	movlb	15	; () banked
 28294  00532E  0E0F               	movlw	15	;volatile
 28295  005330  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28296  005332  0E50               	movlw	80	;volatile
 28297  005334  D019               	goto	L61
 28298  005336                     i1l9417:
 28299                           
 28300                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28301  005336  010E               	movlb	14	; () banked
 28302  005338  0E0E               	movlw	14	;volatile
 28303  00533A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28304  00533C  0E20               	movlw	32	;volatile
 28305  00533E  D014               	goto	L61
 28306  005340                     i1l9419:
 28307                           
 28308                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28309  005340  010E               	movlb	14	; () banked
 28310  005342  0E0E               	movlw	14	;volatile
 28311  005344  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28312  005346  0E30               	movlw	48	;volatile
 28313  005348  D00F               	goto	L61
 28314  00534A                     i1l9421:
 28315                           
 28316                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28317  00534A  010E               	movlb	14	; () banked
 28318  00534C  0E0E               	movlw	14	;volatile
 28319  00534E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28320  005350  0E40               	movlw	64	;volatile
 28321  005352  D00A               	goto	L61
 28322  005354                     i1l9423:
 28323                           
 28324                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28325  005354  010E               	movlb	14	; () banked
 28326  005356  0E0E               	movlw	14	;volatile
 28327  005358  D7EB               	goto	L62
 28328  00535A                     i1l9425:
 28329                           
 28330                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28331  00535A  010E               	movlb	14	; () banked
 28332  00535C  0E0E               	movlw	14	;volatile
 28333  00535E  D7E3               	goto	L63
 28334  005360                     i1l9427:
 28335                           
 28336                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28337  005360  010E               	movlb	14	; () banked
 28338  005362  0E0E               	movlw	14	;volatile
 28339  005364  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28340  005366  0E70               	movlw	112	;volatile
 28341  005368                     L61:
 28342  005368  6E05               	movwf	__ECANPointBuffer@pt,c
 28343                           
 28344                           ;ECAN.c: 1237: break;
 28345  00536A  D00F               	goto	i1l1504
 28346  00536C                     i1l9431:
 28347  00536C  5004               	movf	__ECANPointBuffer@b,w,c
 28348                           
 28349                           ; Switch size 1, requested type "space"
 28350                           ; Number of cases is 7, Range of values is 0 to 6
 28351                           ; switch strategies available:
 28352                           ; Name         Instructions Cycles
 28353                           ; simple_byte           22    12 (average)
 28354                           ;	Chosen strategy is simple_byte
 28355  00536E  E0DA               	bz	i1l9413
 28356  005370  0A01               	xorlw	1	; case 1
 28357  005372  E0DC               	bz	i1l9415
 28358  005374  0A03               	xorlw	3	; case 2
 28359  005376  E0DF               	bz	i1l9417
 28360  005378  0A01               	xorlw	1	; case 3
 28361  00537A  E0E2               	bz	i1l9419
 28362  00537C  0A07               	xorlw	7	; case 4
 28363  00537E  E0E5               	bz	i1l9421
 28364  005380  0A01               	xorlw	1	; case 5
 28365  005382  E0E8               	bz	i1l9423
 28366  005384  0A03               	xorlw	3	; case 6
 28367  005386  E0E9               	bz	i1l9425
 28368  005388  D7EB               	goto	i1l9427
 28369  00538A                     i1l1504:
 28370                           
 28371                           ;ECAN.c: 1239: return (pt);
 28372  00538A  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28373  00538E  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28374  005392  0012               	return	
 28375  005394                     __end_of__ECANPointBuffer:
 28376                           	opt stack 0
 28377                           tblptru	equ	0xFF8
 28378                           tblptrh	equ	0xFF7
 28379                           tblptrl	equ	0xFF6
 28380                           tablat	equ	0xFF5
 28381                           prodh	equ	0xFF4
 28382                           prodl	equ	0xFF3
 28383                           intcon	equ	0xFF2
 28384                           indf0	equ	0xFEF
 28385                           postinc0	equ	0xFEE
 28386                           fsr0h	equ	0xFEA
 28387                           fsr0l	equ	0xFE9
 28388                           wreg	equ	0xFE8
 28389                           indf1	equ	0xFE7
 28390                           postinc1	equ	0xFE6
 28391                           postdec1	equ	0xFE5
 28392                           fsr1h	equ	0xFE2
 28393                           fsr1l	equ	0xFE1
 28394                           bsr	equ	0xFE0
 28395                           indf2	equ	0xFDF
 28396                           postinc2	equ	0xFDE
 28397                           postdec2	equ	0xFDD
 28398                           plusw2	equ	0xFDB
 28399                           fsr2h	equ	0xFDA
 28400                           fsr2l	equ	0xFD9
 28401                           status	equ	0xFD8
 28402                           
 28403 ;; *************** function _fifo_write *****************
 28404 ;; Defined at:
 28405 ;;		line 61 in file "fifo.c"
 28406 ;; Parameters:    Size  Location     Type
 28407 ;;  f               1    wreg     PTR struct .
 28408 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28409 ;;  buf             1    0[COMRAM] PTR const void 
 28410 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28411 ;;  nbytes          4    1[COMRAM] unsigned long 
 28412 ;; Auto vars:     Size  Location     Type
 28413 ;;  f               1   14[COMRAM] PTR struct .
 28414 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28415 ;;  i               4   10[COMRAM] unsigned long 
 28416 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28417 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28418 ;; Return value:  Size  Location     Type
 28419 ;;                  2    0[COMRAM] unsigned short 
 28420 ;; Registers used:
 28421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28422 ;; Tracked objects:
 28423 ;;		On entry : 0/0
 28424 ;;		On exit  : 0/0
 28425 ;;		Unchanged: 0/0
 28426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28427 ;;      Params:         5       0       0       0       0       0       0
 28428 ;;      Locals:         6       0       0       0       0       0       0
 28429 ;;      Temps:          4       0       0       0       0       0       0
 28430 ;;      Totals:        15       0       0       0       0       0       0
 28431 ;;Total ram usage:       15 bytes
 28432 ;; Hardware stack levels used:    1
 28433 ;; This function calls:
 28434 ;;		Nothing
 28435 ;; This function is called by:
 28436 ;;		_Interrupt
 28437 ;; This function uses a non-reentrant model
 28438 ;;
 28439                           
 28440                           	psect	text88
 28441  003C5C                     __ptext88:
 28442                           	opt stack 0
 28443  003C5C                     _fifo_write:
 28444                           	opt stack 21
 28445                           
 28446                           ;incstack = 0
 28447                           ;incstack = 0
 28448                           ;fifo_write@f stored from wreg
 28449  003C5C  CFE8 F00F          	movff	wreg,fifo_write@f
 28450                           
 28451                           ;fifo.c: 62: uint32_t i;
 28452                           ;fifo.c: 63: const uint8_t *p;
 28453                           ;fifo.c: 64: p = buf;
 28454  003C60  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 28455                           
 28456                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28457  003C64  6A0B               	clrf	fifo_write@i,c
 28458  003C66  6A0C               	clrf	fifo_write@i+1,c
 28459  003C68  6A0D               	clrf	fifo_write@i+2,c
 28460  003C6A  6A0E               	clrf	fifo_write@i+3,c
 28461  003C6C  D052               	goto	i1l6373
 28462  003C6E                     i1l6353:
 28463                           
 28464                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28465                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28466  003C6E  500F               	movf	fifo_write@f,w,c
 28467  003C70  6ED9               	movwf	fsr2l,c
 28468  003C72  6ADA               	clrf	fsr2h,c
 28469  003C74  0E04               	movlw	4
 28470  003C76  D85B               	call	PL16	;call to abstracted procedure
 28471  003C78  E102               	bnz	i1u620_25
 28472  003C7A  5006               	movf	??_fifo_write,w,c
 28473  003C7C  1808               	xorwf	??_fifo_write+2,w,c
 28474  003C7E                     i1u620_25:
 28475  003C7E  E012               	bz	i1l1531
 28476  003C80  500F               	movf	fifo_write@f,w,c
 28477  003C82  6ED9               	movwf	fsr2l,c
 28478  003C84  6ADA               	clrf	fsr2h,c
 28479  003C86  0E06               	movlw	6
 28480  003C88  D852               	call	PL16	;call to abstracted procedure
 28481  003C8A  E102               	bnz	i1u621_25
 28482  003C8C  5006               	movf	??_fifo_write,w,c
 28483  003C8E  1808               	xorwf	??_fifo_write+2,w,c
 28484  003C90                     i1u621_25:
 28485  003C90  E10E               	bnz	i1l6361
 28486  003C92  500F               	movf	fifo_write@f,w,c
 28487  003C94  6ED9               	movwf	fsr2l,c
 28488  003C96  6ADA               	clrf	fsr2h,c
 28489  003C98  0E04               	movlw	4
 28490  003C9A  26D9               	addwf	fsr2l,f,c
 28491  003C9C  6ADA               	clrf	fsr2h,c
 28492  003C9E  50DE               	movf	postinc2,w,c
 28493  003CA0  10DD               	iorwf	postdec2,w,c
 28494  003CA2  E105               	bnz	i1l6361
 28495  003CA4                     i1l1531:
 28496                           
 28497                           ;fifo.c: 71: return i;
 28498  003CA4  C00B  F001         	movff	fifo_write@i,?_fifo_write
 28499  003CA8  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28500  003CAC  D03F               	goto	i1l1532
 28501  003CAE                     i1l6361:
 28502                           
 28503                           ;fifo.c: 73: else {
 28504                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28505  003CAE  500A               	movf	fifo_write@p,w,c
 28506  003CB0  6ED9               	movwf	fsr2l,c
 28507  003CB2  D85A               	call	PL98	;call to abstracted procedure
 28508  003CB4  CFE6 F006          	movff	postinc1,??_fifo_write
 28509  003CB8  CFE5 F007          	movff	postdec1,??_fifo_write+1
 28510  003CBC  500F               	movf	fifo_write@f,w,c
 28511  003CBE  6EE1               	movwf	fsr1l,c
 28512  003CC0  6AE2               	clrf	fsr1h,c
 28513  003CC2  CFE6 F008          	movff	postinc1,??_fifo_write+2
 28514  003CC6  CFE5 F009          	movff	postdec1,??_fifo_write+3
 28515  003CCA  5006               	movf	??_fifo_write,w,c
 28516  003CCC  2408               	addwf	??_fifo_write+2,w,c
 28517  003CCE  6EE1               	movwf	fsr1l,c
 28518  003CD0  5007               	movf	??_fifo_write+1,w,c
 28519  003CD2  2009               	addwfc	??_fifo_write+3,w,c
 28520  003CD4  6EE2               	movwf	fsr1h,c
 28521  003CD6  CFDF FFE7          	movff	indf2,indf1
 28522  003CDA  2A0A               	incf	fifo_write@p,f,c
 28523                           
 28524                           ;fifo.c: 75: f->head++;
 28525  003CDC  D83E               	call	PL40	;call to abstracted procedure
 28526  003CDE  2ADE               	incf	postinc2,f,c
 28527  003CE0  0E00               	movlw	0
 28528  003CE2  22DD               	addwfc	postdec2,f,c
 28529                           
 28530                           ;fifo.c: 76: if (f->head == f->size) {
 28531  003CE4  500F               	movf	fifo_write@f,w,c
 28532  003CE6  6ED9               	movwf	fsr2l,c
 28533  003CE8  6ADA               	clrf	fsr2h,c
 28534  003CEA  0E06               	movlw	6
 28535  003CEC  26D9               	addwf	fsr2l,f,c
 28536  003CEE  D83C               	call	PL98	;call to abstracted procedure
 28537  003CF0  52E6               	movf	postinc1,f,c
 28538  003CF2  52DE               	movf	postinc2,f,c
 28539  003CF4  50DD               	movf	postdec2,w,c
 28540  003CF6  18E5               	xorwf	postdec1,w,c
 28541  003CF8  CFDF FFE8          	movff	indf2,wreg
 28542  003CFC  B4D8               	btfsc	status,2,c
 28543  003CFE  18E7               	xorwf	indf1,w,c
 28544  003D00  E103               	bnz	i1l6371
 28545                           
 28546                           ;fifo.c: 77: f->head = 0;
 28547  003D02  D82B               	call	PL40	;call to abstracted procedure
 28548  003D04  6ADE               	clrf	postinc2,c
 28549  003D06  6ADD               	clrf	postdec2,c
 28550  003D08                     i1l6371:
 28551  003D08  2A0B               	incf	fifo_write@i,f,c
 28552  003D0A  0E00               	movlw	0
 28553  003D0C  220C               	addwfc	fifo_write@i+1,f,c
 28554  003D0E  220D               	addwfc	fifo_write@i+2,f,c
 28555  003D10  220E               	addwfc	fifo_write@i+3,f,c
 28556  003D12                     i1l6373:
 28557  003D12  5002               	movf	fifo_write@nbytes,w,c
 28558  003D14  5C0B               	subwf	fifo_write@i,w,c
 28559  003D16  5003               	movf	fifo_write@nbytes+1,w,c
 28560  003D18  580C               	subwfb	fifo_write@i+1,w,c
 28561  003D1A  5004               	movf	fifo_write@nbytes+2,w,c
 28562  003D1C  580D               	subwfb	fifo_write@i+2,w,c
 28563  003D1E  5005               	movf	fifo_write@nbytes+3,w,c
 28564  003D20  580E               	subwfb	fifo_write@i+3,w,c
 28565  003D22  E3A5               	bnc	i1l6353
 28566                           
 28567                           ;fifo.c: 78: }
 28568                           ;fifo.c: 79: }
 28569                           ;fifo.c: 81: }
 28570                           ;fifo.c: 83: return nbytes;
 28571  003D24  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 28572  003D28  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28573  003D2C                     i1l1532:
 28574  003D2C  0012               	return	
 28575  003D2E                     __end_of_fifo_write:
 28576                           	opt stack 0
 28577  003D2E                     PL16:
 28578                           	opt stack 21
 28579  003D2E  26D9               	addwf	fsr2l,f,c
 28580  003D30  6ADA               	clrf	fsr2h,c
 28581  003D32  CFDE F006          	movff	postinc2,??_fifo_write
 28582  003D36  CFDD F007          	movff	postdec2,??_fifo_write+1
 28583  003D3A  500F               	movf	fifo_write@f,w,c
 28584  003D3C  6ED9               	movwf	fsr2l,c
 28585  003D3E  6ADA               	clrf	fsr2h,c
 28586  003D40  0E02               	movlw	2
 28587  003D42  26D9               	addwf	fsr2l,f,c
 28588  003D44  6ADA               	clrf	fsr2h,c
 28589  003D46  CFDE F008          	movff	postinc2,??_fifo_write+2
 28590  003D4A  CFDD F009          	movff	postdec2,??_fifo_write+3
 28591  003D4E  2A08               	incf	??_fifo_write+2,f,c
 28592  003D50  0E00               	movlw	0
 28593  003D52  2209               	addwfc	??_fifo_write+3,f,c
 28594  003D54  5007               	movf	??_fifo_write+1,w,c
 28595  003D56  1809               	xorwf	??_fifo_write+3,w,c
 28596  003D58  0012               	return	
 28597  003D5A                     __end_ofPL16:
 28598                           	opt stack 0
 28599  003D5A                     PL40:
 28600                           	opt stack 21
 28601  003D5A  500F               	movf	fifo_write@f,w,c
 28602  003D5C  6ED9               	movwf	fsr2l,c
 28603  003D5E  6ADA               	clrf	fsr2h,c
 28604  003D60  0E02               	movlw	2
 28605  003D62  26D9               	addwf	fsr2l,f,c
 28606  003D64  6ADA               	clrf	fsr2h,c
 28607  003D66  0012               	return	
 28608  003D68                     __end_ofPL40:
 28609                           	opt stack 0
 28610  003D68                     PL98:
 28611                           	opt stack 21
 28612  003D68  6ADA               	clrf	fsr2h,c
 28613  003D6A  500F               	movf	fifo_write@f,w,c
 28614  003D6C  6EE1               	movwf	fsr1l,c
 28615  003D6E  6AE2               	clrf	fsr1h,c
 28616  003D70  0E02               	movlw	2
 28617  003D72  26E1               	addwf	fsr1l,f,c
 28618  003D74  6AE2               	clrf	fsr1h,c
 28619  003D76  0012               	return	
 28620  003D78                     __end_ofPL98:
 28621                           	opt stack 0
 28622                           tblptru	equ	0xFF8
 28623                           tblptrh	equ	0xFF7
 28624                           tblptrl	equ	0xFF6
 28625                           tablat	equ	0xFF5
 28626                           prodh	equ	0xFF4
 28627                           prodl	equ	0xFF3
 28628                           intcon	equ	0xFF2
 28629                           indf0	equ	0xFEF
 28630                           postinc0	equ	0xFEE
 28631                           fsr0h	equ	0xFEA
 28632                           fsr0l	equ	0xFE9
 28633                           wreg	equ	0xFE8
 28634                           indf1	equ	0xFE7
 28635                           postinc1	equ	0xFE6
 28636                           postdec1	equ	0xFE5
 28637                           fsr1h	equ	0xFE2
 28638                           fsr1l	equ	0xFE1
 28639                           bsr	equ	0xFE0
 28640                           indf2	equ	0xFDF
 28641                           postinc2	equ	0xFDE
 28642                           postdec2	equ	0xFDD
 28643                           plusw2	equ	0xFDB
 28644                           fsr2h	equ	0xFDA
 28645                           fsr2l	equ	0xFD9
 28646                           status	equ	0xFD8
 28647                           
 28648 ;; *************** function _ReadUSART *****************
 28649 ;; Defined at:
 28650 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28651 ;; Parameters:    Size  Location     Type
 28652 ;;		None
 28653 ;; Auto vars:     Size  Location     Type
 28654 ;;  data            1    0[COMRAM] unsigned char 
 28655 ;; Return value:  Size  Location     Type
 28656 ;;                  1    wreg      unsigned char 
 28657 ;; Registers used:
 28658 ;;		wreg, status,2, status,0
 28659 ;; Tracked objects:
 28660 ;;		On entry : 0/0
 28661 ;;		On exit  : 0/0
 28662 ;;		Unchanged: 0/0
 28663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28664 ;;      Params:         0       0       0       0       0       0       0
 28665 ;;      Locals:         1       0       0       0       0       0       0
 28666 ;;      Temps:          0       0       0       0       0       0       0
 28667 ;;      Totals:         1       0       0       0       0       0       0
 28668 ;;Total ram usage:        1 bytes
 28669 ;; Hardware stack levels used:    1
 28670 ;; This function calls:
 28671 ;;		Nothing
 28672 ;; This function is called by:
 28673 ;;		_Interrupt
 28674 ;; This function uses a non-reentrant model
 28675 ;;
 28676                           
 28677                           	psect	text89
 28678  005BFE                     __ptext89:
 28679                           	opt stack 0
 28680  005BFE                     _ReadUSART:
 28681                           	opt stack 21
 28682                           
 28683                           ;incstack = 0
 28684                           ;incstack = 0
 28685  005BFE  0EF2               	movlw	242
 28686  005C00  163D               	andwf	_USART_Status,f,c
 28687  005C02  ACAB               	btfss	4011,6,c	;volatile
 28688  005C04  D003               	goto	i1l1850
 28689  005C06  903D               	bcf	_USART_Status,0,c
 28690  005C08  B0AB               	btfsc	4011,0,c	;volatile
 28691  005C0A  803D               	bsf	_USART_Status,0,c
 28692  005C0C                     i1l1850:
 28693  005C0C  B4AB               	btfsc	4011,2,c	;volatile
 28694  005C0E  843D               	bsf	_USART_Status,2,c
 28695  005C10  B2AB               	btfsc	4011,1,c	;volatile
 28696  005C12  863D               	bsf	_USART_Status,3,c
 28697  005C14  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28698  005C18  5001               	movf	ReadUSART@data,w,c
 28699  005C1A  0012               	return	
 28700  005C1C                     __end_of_ReadUSART:
 28701                           	opt stack 0
 28702                           tblptru	equ	0xFF8
 28703                           tblptrh	equ	0xFF7
 28704                           tblptrl	equ	0xFF6
 28705                           tablat	equ	0xFF5
 28706                           prodh	equ	0xFF4
 28707                           prodl	equ	0xFF3
 28708                           intcon	equ	0xFF2
 28709                           indf0	equ	0xFEF
 28710                           postinc0	equ	0xFEE
 28711                           fsr0h	equ	0xFEA
 28712                           fsr0l	equ	0xFE9
 28713                           wreg	equ	0xFE8
 28714                           indf1	equ	0xFE7
 28715                           postinc1	equ	0xFE6
 28716                           postdec1	equ	0xFE5
 28717                           fsr1h	equ	0xFE2
 28718                           fsr1l	equ	0xFE1
 28719                           bsr	equ	0xFE0
 28720                           indf2	equ	0xFDF
 28721                           postinc2	equ	0xFDE
 28722                           postdec2	equ	0xFDD
 28723                           plusw2	equ	0xFDB
 28724                           fsr2h	equ	0xFDA
 28725                           fsr2l	equ	0xFD9
 28726                           status	equ	0xFD8
 28727                           tblptru	equ	0xFF8
 28728                           tblptrh	equ	0xFF7
 28729                           tblptrl	equ	0xFF6
 28730                           tablat	equ	0xFF5
 28731                           prodh	equ	0xFF4
 28732                           prodl	equ	0xFF3
 28733                           intcon	equ	0xFF2
 28734                           indf0	equ	0xFEF
 28735                           postinc0	equ	0xFEE
 28736                           fsr0h	equ	0xFEA
 28737                           fsr0l	equ	0xFE9
 28738                           wreg	equ	0xFE8
 28739                           indf1	equ	0xFE7
 28740                           postinc1	equ	0xFE6
 28741                           postdec1	equ	0xFE5
 28742                           fsr1h	equ	0xFE2
 28743                           fsr1l	equ	0xFE1
 28744                           bsr	equ	0xFE0
 28745                           indf2	equ	0xFDF
 28746                           postinc2	equ	0xFDE
 28747                           postdec2	equ	0xFDD
 28748                           plusw2	equ	0xFDB
 28749                           fsr2h	equ	0xFDA
 28750                           fsr2l	equ	0xFD9
 28751                           status	equ	0xFD8
 28752                           
 28753                           	psect	rparam
 28754  0000                     tblptru	equ	0xFF8
 28755                           tblptrh	equ	0xFF7
 28756                           tblptrl	equ	0xFF6
 28757                           tablat	equ	0xFF5
 28758                           prodh	equ	0xFF4
 28759                           prodl	equ	0xFF3
 28760                           intcon	equ	0xFF2
 28761                           indf0	equ	0xFEF
 28762                           postinc0	equ	0xFEE
 28763                           fsr0h	equ	0xFEA
 28764                           fsr0l	equ	0xFE9
 28765                           wreg	equ	0xFE8
 28766                           indf1	equ	0xFE7
 28767                           postinc1	equ	0xFE6
 28768                           postdec1	equ	0xFE5
 28769                           fsr1h	equ	0xFE2
 28770                           fsr1l	equ	0xFE1
 28771                           bsr	equ	0xFE0
 28772                           indf2	equ	0xFDF
 28773                           postinc2	equ	0xFDE
 28774                           postdec2	equ	0xFDD
 28775                           plusw2	equ	0xFDB
 28776                           fsr2h	equ	0xFDA
 28777                           fsr2l	equ	0xFD9
 28778                           status	equ	0xFD8
 28779                           tblptru	equ	0xFF8
 28780                           tblptrh	equ	0xFF7
 28781                           tblptrl	equ	0xFF6
 28782                           tablat	equ	0xFF5
 28783                           prodh	equ	0xFF4
 28784                           prodl	equ	0xFF3
 28785                           intcon	equ	0xFF2
 28786                           indf0	equ	0xFEF
 28787                           postinc0	equ	0xFEE
 28788                           fsr0h	equ	0xFEA
 28789                           fsr0l	equ	0xFE9
 28790                           wreg	equ	0xFE8
 28791                           indf1	equ	0xFE7
 28792                           postinc1	equ	0xFE6
 28793                           postdec1	equ	0xFE5
 28794                           fsr1h	equ	0xFE2
 28795                           fsr1l	equ	0xFE1
 28796                           bsr	equ	0xFE0
 28797                           indf2	equ	0xFDF
 28798                           postinc2	equ	0xFDE
 28799                           postdec2	equ	0xFDD
 28800                           plusw2	equ	0xFDB
 28801                           fsr2h	equ	0xFDA
 28802                           fsr2l	equ	0xFD9
 28803                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1129
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      79
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2030	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2010$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1428	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1419	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1413	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1407	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1401	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1395	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1388	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1382	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1376	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1370	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1163(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1302	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1297	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1292	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1287	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1282	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1277	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1209	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1189	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1180	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1168	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1164	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1155	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1151	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1145	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1140	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1128	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1116	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103701
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7571
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76494
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     569
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     266
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     235
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3      99
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      31
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      31
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      4F       1       83.2%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     369       3        0.0%
DATA                 0      0     565      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Tue Sep 29 14:45:37 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 1930  
                          printBinary@i 0064                             fifo_write@f 000F  
                           fifo_write@i 000B                             fifo_write@p 000A  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4B6C  
            doModeVerbose@filter_nodeid 0290                                      PL2 1930  
                                    PL4 1944                                      PL6 1962  
                                    PL8 1972                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 5CA6                                     PL10 198E  
                                   PL20 2110                                     PL12 199C  
                                   PL30 3E34                                     PL22 4088  
                                   PL14 20F2                                     PL40 3D5A  
                                   PL32 19F6                                     PL24 2120  
                                   PL16 3D2E                                     PL50 4C9E  
                                   PL42 3C02                                     PL34 485E  
                                   PL26 3704                                     PL18 326A  
                                   PL60 2176                                     PL52 1A52  
                                   PL44 1A38                                     PL36 1A0A  
                                   PL28 19E6                                     PL70 3C10  
                                   PL62 502E                                     PL54 2160  
                                   PL46 2146                                     PL38 1A1C  
                                   PL80 3E5A                                     PL72 3C24  
                                   PL64 4DD0                                     PL56 3E48  
                                   PL48 4BFE                                     PL90 2576  
                                   PL82 3714                                     PL74 3C36  
                                   PL66 49F4                                     PL58 1A6A  
                                   PL92 4610                                     PL84 3C4A  
                                   PL76 445C                                     PL68 218C  
                                   PL94 21AC                                     PL86 3E6E  
                                   PL78 4186                                     PL96 5B24  
                                   PL88 219A                                     PL98 3D68  
               sendEscapedUartData@pcrc 006C                                     l430 384C  
                                   l423 37E6                                     l424 381E  
                                   l531 0DCE                                     l427 3836  
                                   l540 0E56                                     l428 3840  
                                   l526 192E                                     l551 0EF4  
                                   l535 0F3E                                     l554 0EFE  
                                   l803 4C10                                     l812 4C40  
                                   l821 4C8A                                     l709 2574  
                                   l806 4C1A                                     l830 4B70  
                                   l567 0F94                                     l559 0F1E  
                                   l815 4C60                                     l719 226E  
                                   l920 2B04                                     l824 4C94  
                                   l744 2470                                     l921 2B18  
                                   l913 2A62                                     l761 5596  
                                   l809 4C24                                     l833 4B7A  
                                   l818 4C70                                     l842 4BC0  
                                   l931 3A4A                                     l851 4BF4  
                                   l659 3268                                     l764 55A0  
                                   l940 3B28                                     l836 4B84  
                                   l860 455C                                     l773 55E8  
                                   l925 3A36                                     l845 4BD0  
                                   l950 35D4                                     l934 3A66  
                                   l782 48A6                                     l943 3B32  
                                   l791 48F2                                     l839 4BA0  
                                   l863 4566                                     l928 3A40  
                                   l776 4892                                     l848 4BEA  
                                   l872 45B2                                     l769 55C4  
                                   l953 35DE                                     l785 48C2  
                                   l881 45FC                                     l857 4552  
                                   l946 3B3C                                     l794 4926  
                                   l866 4582                                     l779 489C  
                                   l875 45CE                                     l972 36EE  
                                   l956 35E8                                     l788 48E2  
                                   l884 4606                                     l797 4930  
                                   l869 45A2                                     l878 45E0  
                                   l975 36F8                                     l959 3604  
                                   l978 3702                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 0001  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 0102                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 0106                                     wreg 000FE8  
         __end_of_writeRegisterExtended 3F90                                    PL100 595E  
                                  PL110 487C                                    PL102 359C  
                                  PL112 3E80                                    PL104 493A  
                                  PL114 21B6                                    PL106 2D14  
                                  PL108 4DDE                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1012 4A18  
                                  l1021 4AAC                                    l1006 4A04  
                                  l1015 4A34                                    l1112 576C  
                                  l1009 4A0E                                    l1033 3488  
                                  l1018 4AA2                                    l1042 3510  
                                  l1116 5778                                    l1052 3590  
                                  l1036 34C0                                    l1028 3456  
                                  l2030 4086                                    l1215 4FD8  
                                  l1055 359A                                    l1240 2DCE  
                                  l1225 5310                                    l1241 2DE0  
                                  l1049 3572                                    l1218 4FFC  
                                  l1066 4726                                    l1250 2E82  
                                  l1242 2DF2                                    l1171 2856  
                                  l1163 27C0                                    l1075 41E2  
                                  l1251 2E94                                    l1243 2E04  
                                  l1252 2EA6                                    l1244 2E16  
                                  l1236 2D98                                    l1261 50C0  
                                  l2029 407E                                    l1069 47BA  
                                  l1093 3EDA                                    l1245 2E28  
                                  l1253 2EFE                                    l1270 5230  
                                  l1078 4294                                    l1246 2E3A  
                                  l1238 2DAA                                    l1247 2E4C  
                                  l1239 2DBC                                    l1520 483C  
                                  l1440 3A00                                    l1432 3964  
                                  l1096 3F8E                                    l1248 2E5E  
                                  l2305 4D2A                                    l1265 5A5E  
                                  l1177 42AC                                    l1249 2E70  
                                  l1434 3982                                    l1523 485C  
                                  l2404 4438                                    l2510 5462  
                                  l1550 53A6                                    l1623 1BDA  
                                  l1607 1A9E                                    l2336 5296  
                                  l1640 1BEA                                    l1624 1B8C  
                                  l2346 5578                                    l1714 1F80  
                                  l2522 4FAC                                    l1570 59AA  
                                  l2419 57D0                                    l1643 1C1E  
                                  l1820 560A                                    l1644 1C22  
                                  l2524 4FA0                                    l1548 539E  
                                  l1556 53FC                                    l2429 5A1E  
                                  l2525 4FA4                                    l2470 54C6  
                                  l1494 3E32                                    l1575 4E1E  
                                  l1824 561E                                    l2472 5526  
                                  l1576 4E84                                    l1825 5620  
                                  l1746 5C9E                                    l1826 562A  
                                  l1771 5AF0                                    l1827 562C  
                                  l1659 1D0C                                    l2491 51B8  
                                  l1829 5644                                    l1837 569E  
                                  l1693 1EB0                                    l2549 585E  
                                  l2558 59E8                                    l2494 51B4  
                                  l1695 1ED6                                    l1687 1E6E  
                                  l1696 1EDA                                    l2568 58A2  
                                  l1698 1EF6                                    l1787 5BF8  
                                  l1788 5BFA                                    l9921 377A  
                                  STR_1 792F                                    STR_2 748D  
                                  l9953 3820                                    STR_3 799D  
                                  STR_4 73B5                                    l9963 3848  
                                  l9955 3832                                    STR_5 7B2A  
                                  STR_6 7FCF                                    STR_7 7AEC  
                                  STR_8 7FB6                                    l9983 387C  
                                  l9975 3866                                    STR_9 7F7F  
                                  l9977 386C                                    l9987 3888  
                                  l9979 3872                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 00ED  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 4BFE  
                                  _bHex 0100            doModeVerbose@filter_priority 028E  
                                  _crc8 5A98                                    _caps 00F5  
                                  _atoi 3F90                                    _main 3726  
                                  _init 57DA                                    _mode 00F1  
                                  _itoa 5A60                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 4CAC                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0668                            _sprintf$2030 0086  
                          _sprintf$2023 0082                            _sprintf$2024 0084  
          receiveSendMultiEventCANAL@id 007D               ECANReceiveMessage@dataLen 0009  
    __end_of_receiveSendMultiEventCANAL 3704              _receiveSendMultiEventCANAL 35AA  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0078  
                        _caninputBuffer 0400                      doModeVerbose@value 02B1  
                  __end_of_getVSCPFrame 50C2                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 0078  
              ?_receiveVSCPModeCanalMsg 0001                         ?_doModeVscpNode 0001  
                                 l10011 53B0                                   l10013 53B6  
                                 l10113 52F0                                   l10105 52CA  
                                 l10121 47CE                                   l11003 23E0  
                                 l10117 5304                                   l10109 52DC  
                                 l10133 4846                                   l10301 0B40  
                                 l10213 087E                                   l10141 0676  
                                 l11013 240A                                   l10135 484A  
                                 l10311 0BA2                                   l10303 0B50  
                                 l10231 0904                                   l10223 08C8  
                                 l10207 0842                                   l11033 2476  
                                 l11025 244E                                   l12003 1F60  
                                 l10323 0C1A                                   l10243 094C  
                                 l10235 091C                                   l10227 08EA  
                                 l10155 06AC                                   l11301 28CA  
                                 l12101 5782                                   l10405 0EC0  
                                 l10333 0C92                                   l10317 0BDE  
                                 l10309 0B90                                   l11037 2486  
                                 l12023 1FA2                                   l10503 119A  
                                 l10351 0D0A                                   l10327 0C56  
                                 l10271 0A2E                                   l10247 0964  
                                 l10239 0934                                   l10191 07C6  
                                 l10183 0786                                   l10175 0746  
                                 l10167 0708                                   l11071 2556  
                                 l11047 24A8                                   l11063 24DC  
                                 _B0CON 000E20                                   l11401 5C2A  
                                 l12041 1FDE                                   l12025 1FA8  
                                 l12009 1F68                                   l11313 291C  
                                 l12201 4162                                   l10601 143A  
                                 l10505 11AA                                   l10433 0F60  
                                 l10265 0A00                                   l10249 0976  
                                 l11057 24C6                                   l11065 2536  
                                 l11091 55FE                                   l13011 524A  
                                 l12043 2034                                   l12035 1FCA  
                                 l12019 1F90                                   l10419 0F18  
                                 l10363 0D9C                                   l10347 0CF8  
                                 l10283 0A8A                                   l10259 09CE  
                                 l11075 2572                                   l13013 5256  
                                 l12053 207A                                   l11325 2970  
                                 l13101 59D4                                   l12141 3F6C  
                                 l10621 14B6                                   l10517 1206  
                                 l10533 1270                                   l10461 1010  
                                 l10445 0FAE                                   l10453 0FEE  
                                 l10381 0E22                                   l10373 0DD6  
                                 l10357 0D76                                   l10293 0AE2  
                                 l10277 0A5C                                   l11069 254A  
                                 l11255 49C6                                   l13023 5288  
                                 l13015 525A                                   l13031 5538  
                                 l12063 20B4                                   l13111 5C48  
                                 l13103 59D8                                   l11407 4F2A  
                                 l12223 4EE2                                   l12143 3F8C  
                                 l10631 14F0                                   l10455 0FF2  
                                 l10359 0D8A                                   l10463 1022  
                                 l10295 0AEC                                   l10287 0AA8  
                                 l10199 0804                                   _B1CON 000E30  
                                 l13033 5544                                   l12057 2094  
                                 l12049 2056                                   l12073 20DE  
                                 l11337 29C2                                   l11417 4F62  
                                 l11441 400C                                   l11505 336C  
                                 l11601 279C                                   l12225 4EEA  
                                 l10713 1790                                   l10705 1746  
                                 l10641 152C                                   l10617 14A6  
                                 l10553 12EC                                   l10393 0E70  
                                 l10801 312C                                   l11099 560C  
                                 l13051 57A8                                   l13035 5548  
                                 l12067 20D6                                   l12059 20A6  
                                 l12075 20E4                                   l11363 2A72  
                                 l11427 3F92                                   l12163 4698  
                                 l12219 4EBA                                   l12243 2EB8  
                                 l10651 1566                                   l10627 14E0  
                                 l10563 1326                                   l10491 1128  
                                 l10475 1084                                   l12323 367E  
                                 l11269 49DE                                   l12085 5C5A  
                                 l13061 57C6                                   l13053 57AC  
                                 l11373 2AE6                                   l11349 2A14  
                                 l13117 586E                                   l13125 582A  
                                 l11445 4046                                   l11437 3FEC  
                                 l11429 3F98                                   l11613 27DE  
                                 l11605 27AE                                   l11533 25A0  
                                 l11453 5B9C                                   l12165 46AE  
                                 l12157 464A                                   l12229 4EF8  
                                 l12093 5752                                   l10709 176A  
                                 l10661 15A0                                   l10637 151C  
                                 l10573 1362                                   l10549 12DC  
                                 l10485 1102                                   l12341 36DE  
                                 l12333 369E                                   l12317 3660  
                                 l12405 5B6A                                   l13071 59FE  
                                 l13039 556A                                   l11375 2AEA  
                                 l11383 2B16                                   l13119 5876  
                                 l13127 5832                                   l11439 4004  
                                 l11519 33D6                                   l12255 3DC4  
                                 l10751 18DE                                   l10735 1838  
                                 l10727 17F4                                   l10743 187C  
                                 l10671 1604                                   l10647 1556  
                                 l10583 139C                                   l10559 1316  
                                 l10495 1154                                   l10487 1116  
                                 l10479 1096                                   l10911 325E  
                                 _B2CON 000E40                                   l13049 57A0  
                                 l13073 5A02                                   l11801 1BE8  
                                 l11377 2AF6                                   l11393 517C  
                                 l11625 2832                                   l11561 2674  
                                 l11457 5BAC                                   l12169 46CA  
                                 l12193 4128                                   l12185 40C2  
                                 l10753 18EC                                   l10657 1590  
                                 l10673 1612                                   l10593 13D6  
                                 l10569 1352                                   l12337 36BE  
                                 l12409 5B88                                   l10905 3246  
                                 l10833 317E                                   l10809 313C  
                                 l10825 3158                                   l11803 1BEE  
                                 l13091 5446                                   l13083 5400  
                                 l11395 51A2                                   l11491 3302  
                                 l11547 260A                                   l12195 4130  
                                 l11731 4272                                   l10747 18BA  
                                 l10579 138C                                   l10499 1164  
                                 l10763 192C                                   l10835 3184  
                                 l10915 3266                                   l10771 30D4  
                                 l13077 5A14                                   l13069 59F6  
                                 l11821 1C3A                                   l13093 544E  
                                 l11389 5144                                   l11477 3298  
                                 l11629 2844                                   l12197 4146  
                                 l11653 42E4                                   l11733 4292  
                                 l10757 1902                                   l10685 16A4  
                                 l10669 15F6                                   l10589 13C6  
                                 l10909 3258                                   l10837 318A  
                                 l12621 351A                                   l12613 34D4  
                                 l10941 2220                                   l11911 1DBA  
                                 l11831 1C68                                   l11815 1C28  
                                 l11751 1AB4                                   l13087 543A  
                                 l11575 26DE                                   l11671 434E  
                                 l10695 16EE                                   l10759 1910  
                                 l12295 3630                                   l10847 319C  
                                 l10791 3116                                   l10935 21FC  
                                 _B3CON 000E50                                   l11913 1DBE  
                                 l11841 1C8A                                   l11809 1C06  
                                 l11745 1AA8                                   l13097 59B8  
                                 l12393 3B18                                   l10881 31E8  
                                 l10857 31AE                                   l10849 31A2  
                                 l10769 30D0                                   l12625 352E  
                                 l10953 2268                                   l11835 1C6E  
                                 l11819 1C2E                                   l11827 1C52  
                                 l11851 1CC6                                   l11763 1AF0  
                                 l11771 1B36                                   l11747 1AAC  
                                 l11755 1ABA                                   l11739 1A86  
                                 l12731 505A                                   l12651 58F8  
                                 l11691 54F4                                   l11683 5B3E  
                                 l10875 31D4                                   l10787 3110  
                                 l10947 2244                                   l11933 1E1E  
                                 l11845 1C96                                   l11837 1C7C  
                                 l11749 1AB0                                   l12653 58FE  
                                 l11589 2748                                   l11685 5B48  
                                 l12389 3B00                                   l10893 3216  
                                 l10957 2278                                   l12815 5A7C  
                                 l11943 1E4E                                   l11927 1DF2  
                                 l11791 1B92                                   l12903 3984  
                                 l10887 31FE                                   _B4CON 000E60  
                                 l11961 1EB4                                   l11937 1E3C  
                                 l11929 1E04                                   l11873 1D16  
                                 l11849 1C9C                                   l12753 51E4  
                                 l12681 58BE                                   l12673 4E70  
                                 l10969 22A4                                   l11955 1E8C  
                                 l11883 1D4A                                   l11859 1CD6  
                                 l11795 1BC6                                   l11779 1B5C  
                                 l12747 51DE                                   l12923 39F2  
                                 l10899 322E                                   l12667 4E2C  
                                 l10995 236C                                   l10979 22CA  
                                 l11949 1E72                                   l11885 1D4E  
                                 l11877 1D34                                   l11797 1BE0  
                                 l12749 51E0                                   l12909 39B2  
                                 l12917 39D0                                   l12845 4798  
                                 l12853 5650                                   l11975 1F06  
                                 l11991 1F3A                                   l11799 1BE4  
                                 l12927 39F6                                   l12847 47B8  
                                 l12855 5654                                   l12687 58DA  
                                 l12783 439A                                   l12951 5996  
                                 l12943 5984                                   _B5CON 000E70  
                                 l11985 1F26                                   l11969 1EF0  
                                 l11897 1D82                                   l12929 39F8  
                                 l12697 5A5C                                   l12857 5662  
                                 l12793 43DE                                   l12971 5BD8  
                                 l11899 1D86                                   l12875 38FE  
                                 l12859 566C                                   l12869 38EC  
                                 l11999 1F56                                   l12887 3928  
                                 l12959 59A8                                   l12977 4CB4  
                                 l12897 3968                                   l12987 4CEC  
                                 ?_crc8 0067                    __size_of_doModeSLCAN 03B6  
                                 ?_atoi 0066                                   ?_main 00CA  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 5C84                                   _EEADR 000FA9  
                                 STR_10 7F5D                                   STR_11 7F7F  
                                 STR_12 7F91                                   STR_20 7F48  
                                 STR_13 7F7F                                   STR_21 7D82  
                                 STR_30 7FF4                                   STR_14 7ECC  
                                 STR_22 7D96                                   STR_15 7F7F  
                                 STR_31 7FF4                                   STR_23 7DD2  
                                 STR_32 7FF4                                   STR_16 7F4F  
                                 STR_40 7DF7                                   STR_24 7D05  
                                 STR_17 7F7F                                   STR_33 7FF4  
                                 STR_41 7FCA                                   STR_25 7BCE  
                                 STR_42 7F7F                                   STR_50 7F2A  
                                 STR_34 7FF4                                   STR_18 7F0D  
                                 STR_26 7D6E                                   STR_19 7F7F  
                                 STR_35 7FF4                                   STR_43 7FD8  
                                 STR_27 7DE5                                   STR_51 7C30  
                                 STR_44 7F7F                                   STR_36 7F7F  
                                 STR_52 7F2A                                   STR_60 7EE9  
                                 STR_28 7C48                                   STR_61 7F64  
                                 STR_29 7FEA                                   STR_45 7FC5  
                                 STR_53 7AAB                                   STR_37 7A48  
                                 STR_70 7F7F                                   STR_46 7F7F  
                                 STR_54 7F2A                                   STR_62 7FED  
                                 STR_38 7FE7                                   STR_63 748A  
                                 STR_39 7F7F                                   STR_47 7FA2  
                                 STR_55 7E5D                                   STR_71 7422  
                                 STR_48 7F7F                                   STR_72 7FAC  
                                 STR_56 7F64                                   STR_80 7A8A  
                                 STR_64 7A05                                   STR_73 7F2A  
                                 STR_65 7F64                                   STR_57 7FED  
                                 STR_81 7FBB                                   STR_49 7FA7  
                                 STR_74 7C30                                   STR_58 7F64  
                                 STR_66 7FED                                   STR_82 7DAA  
                                 STR_90 77FA                                   STR_75 7F2A  
                                 STR_91 7FF4                                   STR_83 7F64  
                                 STR_67 7F64                                   STR_59 7FED  
                                 STR_76 7AAB                                   STR_84 7FED  
                                 STR_68 7FED                                   STR_92 772F  
                                 STR_85 748A                                   STR_69 748A  
                                 STR_77 7F2A                                   STR_93 7FF4  
                                 STR_86 7F7F                                   STR_78 7C60  
                                 STR_94 7896                                   STR_95 7FF4  
                                 STR_87 7F56                                   STR_79 79C0  
                                 STR_88 7FF4                                   STR_96 78E4  
                                 STR_97 7FF4                                   STR_89 721C  
                                 STR_98 7759                                   STR_99 7F7F  
          __end_of_printFirmwareVersion 502E                                   _BSEL0 000DF8  
                       __end_of___lldiv 52A8                                   ?_utoa 0067  
                       __end_of_calcCRC 5B92                                   _T0CON 000FD5  
                                 u12210 56C0                                   u12220 56EE  
                                 u12217 56BA                         __end_of___llmod 558A  
                                 u12227 56E8                                   u12405 07AA  
                                 u13055 19A4                                   u12415 07EA  
                                 u13065 145C                                   u12425 0828  
                                 u13155 1634                                   u12435 0866  
                                 u13165 167A                                   u12445 08A2  
                                 u14310 3FE2                                   u13175 16C6  
                                 u12375 06E0                                   _LATC1 007C59  
                                 u12545 099A                                   u12385 072C  
                                 u14330 4000                                   u12635 0B74  
                                 u12395 076A                                   u14085 5AFC  
                                 u14317 3FDC                                   u14405 4AF2  
                                 u14086 5AFE                                   u14350 4030  
                                 u14270 3FAC                                   u12655 0BC6  
                                 u14360 405A                                   u13720 2338  
                                 u14337 3FFA                                   u12905 1046  
                                 u12665 0C02                                   u14290 3FC4  
                                 u13730 2342                                   u12675 0C3E  
                                 u14620 54E4                                   u13740 234C  
                                 u14357 402A                                   u14277 3FA6  
                                 u12685 0C7A                                   u13725 2336  
                                 u14367 4054                                   u12695 0CB6  
                                 u13735 2340                                   u14640 551C  
                                 u14297 3FBE                                   u16065 44AC  
                                 u13745 234A                                   u14627 54DE  
                                 u12965 11CC                                   u16430 591A  
                                 u14647 5516                                   u12985 1292  
                                 u15394 5762                                   u15395 575E  
                                 u15635 2D3C                                   u15636 2D42  
                                 u16437 5914                                   u15645 2D70  
                                 u15637 2D50                                   u15646 2D76  
                                 u15647 2D84                                   u15665 3D9E  
                                 u16570 50AC                                   u15675 3DAE  
                                 u15685 3DCA                                   u17437 3788  
                                 u16750 5694                                   u16575 50A2  
                       __end_of___lwdiv 57DA                                   u16757 568A  
                                 _ERRIE 007D1D                            _vscpPriority 01AF  
                                 i1l400 0574                                   i1l403 0564  
                                 i1l406 0580                                   i1l415 064A  
                                 i1l409 05C8                         __end_of___lwmod 5A28  
                                 i1l391 0576                                   i1l394 0574  
                                 i1l389 047C                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00EF  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 0060                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 4DEC                                   crc8@m 0069  
                       __end_of_dpowers 700C                  Write_b_eep@GIE_BIT_VAL 0063  
                       __end_of_isdigit 5BE0                                   _timer 00E9  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00D0                                   _ultoa 438A  
                            Interrupt@c 0024              ??_printNodeFirmwareVersion 00BF  
                      _printErrors$1401 0096                        _printErrors$1413 009A  
                      _printErrors$1407 0098                        _printErrors$1419 009C  
                      _printErrors$1428 009E                                   tablat 000FF5  
                      _printErrors$1395 0094                 ??_receiveSendEventCANAL 0072  
           __end_of_sendEscapedUartData 55EA                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 20F2  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 59EA  
                       __end_of_strcspn 5868                         __end_of_toupper 5C4C  
                       __end_of_stristr 51BA                            __end_ofPL100 596E  
                          __end_ofPL110 488A                            __end_ofPL102 35AA  
                          __end_ofPL112 3E8A                            __end_ofPL104 4948  
                          __end_ofPL114 21C0                            __end_ofPL106 2D22  
                          __end_ofPL108 4DEC       __size_of_receivePrintEventVerbose 02C2  
                   doModeVerbose@i_1110 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1116 02B2                     doModeVerbose@p_1209 02BB  
                   doModeVerbose@p_1164 02B4                     doModeVerbose@p_1189 02B9  
                        WriteUSART@data 0060                    _ECANSetOperationMode 5C1C  
                          _canInputFifo 0040                         __initialization 5464  
                doModeVerbose@page_1161 02A1           receiveSendMultiEventCANAL@dlc 007C  
                          __end_of_crc8 5ACE           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 4088           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3894                            __end_of_init 5824  
                          __end_of_itoa 5A98                            __end_of_utoa 4D4C  
                   doModeVerbose@ifmode 02B6                              _Read_b_eep 5C72  
                   doModeVerbose@maskno 02A8                        __end_of_Busy_eep 5CA4  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BB                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0074                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0065                                  ??_main 00CF  
                     readRegister@value 00B9                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 00F4                       __RegsToCANID@type 0004  
                  _can_transmitOverruns 002B              ECANReceiveMessage@msgFlags 000A  
                         ?_readRegister 00B6               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1168 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B9  
            ECANReceiveMessage@savedPtr 000B                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7FB1  
                                STR_101 7FF4                                  STR_110 7FF4  
                                STR_102 7529                                  STR_103 790A  
                                STR_111 786F                                  STR_112 7F7F  
                                STR_104 7FF4                                  STR_200 7F64  
                                STR_120 7EBA                                  STR_201 7FED  
                                STR_113 7F9D                                  STR_121 7F85  
                                STR_105 77AA                                  STR_202 748A  
                                STR_106 7FF4                                  STR_114 7FDC  
                                STR_122 7EFD                                  STR_130 7A69  
                                STR_210 767D                                  STR_131 7F7F  
                                STR_123 7B47                                  STR_107 7954  
                                STR_115 7703                                  STR_211 74F6  
                                STR_203 7347                                  STR_108 7FF4  
                                STR_140 7F64                                  STR_124 7FC0  
                                STR_116 7F05                                  STR_132 7B7E  
                                STR_220 7821                                  STR_212 755B  
                                STR_204 73EC                                  STR_141 7FED  
                                STR_133 7D5A                                  STR_213 7B0B  
                                STR_125 7ACC                                  STR_109 7979  
                                STR_117 77D2                                  STR_221 7782  
                                STR_205 74C2                                  STR_150 7FED  
                                STR_126 7F97                                  STR_142 7EF5  
                                STR_134 7ED5                                  STR_118 7E86  
                                STR_230 79E3                                  STR_206 7848  
                                STR_222 764E                                  STR_214 758D  
                                STR_207 716F                                  STR_119 7F7F  
                                STR_143 7F6B                                  STR_151 7F3A  
                                STR_135 7EDD                                  STR_127 7BB4  
                                STR_215 76AB                                  STR_231 761F  
                                STR_223 710E                                  STR_240 748A  
                                STR_152 7F64                                  STR_144 7FED  
                                STR_136 7F79                                  STR_128 7EED  
                                STR_160 7E09                                  STR_216 7C00  
                                STR_208 7B63                                  STR_232 75F0  
                                STR_224 71D9                                  STR_241 7153  
                                STR_153 7FED                                  STR_137 7FF2  
                                STR_129 7F8B                                  STR_161 7F72  
                                STR_145 7F33                                  STR_209 76D7  
                                STR_217 730F                                  STR_233 7196  
                                STR_225 707A                                  STR_146 7F64  
                                STR_170 7FE0                                  STR_138 7FF0  
                                STR_162 7FE0                                  STR_154 7F2C  
                                STR_242 7E4E                                  STR_250 7DBE  
                                STR_218 7CC0                                  STR_226 7C18  
                                STR_234 75BF                                  STR_171 748A  
                                STR_163 748A                                  STR_155 7F64  
                                STR_147 7FED                                  STR_251 7FFC  
                                STR_139 7F41                                  STR_243 7EE5  
                                STR_219 7A27                                  STR_235 737E  
                                STR_227 702C                                  STR_156 7FED  
                                STR_244 7FF8                                  STR_252 7FF6  
                                STR_148 7EC3                                  STR_260 7EA6  
                                STR_164 7E3D                                  STR_228 7D46  
                                STR_172 7D31                                  STR_180 7CA8  
                                STR_236 725E                                  STR_253 748A  
                                STR_157 7FF4                                  STR_149 7F64  
                                STR_173 7F72                                  STR_165 7F72  
                                STR_181 7F15                                  STR_245 7FE4  
                                STR_261 7CEE                                  STR_237 78BD  
                                STR_229 70C7                                  _EEDATA 000FA8  
                                STR_262 748A                                  STR_190 7FE0  
                                STR_182 7FE0                                  STR_174 7FE0  
                                STR_166 7FE0                                  STR_246 7FFA  
                                STR_254 7E9C                                  STR_158 7E91  
                                STR_238 7153                                  STR_255 748A  
                                STR_247 748A                                  STR_191 748A  
                                STR_183 748A                                  STR_175 748A  
                                STR_167 748A                                  STR_159 7FD4  
                                STR_263 7E1B                                  STR_239 7B99  
                                STR_256 7F25                                  STR_248 7E6C  
                                STR_264 7E2C                                  STR_168 7D1B  
                                STR_176 7CD7                                  STR_184 7C90  
                                STR_192 7BE7                                  STR_249 748A  
                                STR_193 7F64                                  STR_169 7F72  
                                STR_185 7F15                                  STR_257 7F1D  
                                STR_177 7F15                                  STR_194 7FED  
                                STR_186 7FE0                                  STR_178 7FE0  
                                STR_258 7E7A                                  STR_195 748A  
                                STR_187 748A                                  STR_179 748A  
                                STR_259 7EB0                                  STR_188 7C90  
                                STR_196 729C                                  STR_189 7F15  
                                STR_197 7458                                  STR_198 72D6  
                                STR_199 7C78                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 4296                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 4DD0                                  i1l1504 538A  
                         ?_init_app_ram 0001                                  i1l1531 3CA4  
                                i1l1532 3D2C                                  i1l1460 2BC2  
                                i1l1452 2D12                                  _MDSEL0 007BBE  
                                i1l1445 2B52                                  _MDSEL1 007BBF  
                                i1l1462 2BD6                                  i1l1455 2C20  
                                i1l1464 2BEA                                  i1l1456 2BA0  
                                i1l1466 2BFA                                  i1l1458 2BAE  
                                i1l1476 2C84                                  i1l1468 2C0A  
                                i1l1477 2C9E                                  i1l1850 5C0C  
                                i1l1499 3C00                                  i1l6361 3CAE  
                                i1l6353 3C6E                              _OpenTimer0 5BE0  
                                i1l6371 3D08                                  i1l6373 3D12  
                                i1l6385 4D8E                                  i1l9421 534A  
                                i1l9413 5324                                  i1l9423 5354  
                                i1l9415 532C                                  i1l9431 536C  
                                i1l9425 535A                                  i1l9417 5336  
                                i1l9427 5360                                  i1l9419 5340  
                                i1l9445 3B9C                                  i1l9701 2B8E  
                                i1l9745 2C34                                  i1l9755 2C54  
                                i1l9781 2CCC                                  i1l9773 2CA0  
                                i1l9693 2B80                                  i1l9677 2B40  
                                i1l9687 2B6A                                  i1l9695 2B8A  
                                i1l9795 2CFC                                  i1l9789 2CE6  
                       _init_app_eeprom 4948                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0008  
                ECANReceiveMessage@mode 000F                  ECANReceiveMessage@temp 0010  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 007C              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 007A                      _doModeVerbose$1140 0296  
                    _doModeVerbose$1151 029A                      _doModeVerbose$1128 0294  
                    _doModeVerbose$1145 0298                      _doModeVerbose$1155 029C  
                    _doModeVerbose$1180 029E                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 0250  
              readRegisterExtended@page 00B6                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0002                          getCANFrame@pid 0071  
                                ___wmul 5B02                              _bInitiated 00EE  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 0104  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1302 00A3  
         _receivePrintEventVerbose$1282 009B           _receivePrintEventVerbose$1292 009F  
         _receivePrintEventVerbose$1277 0099           _receivePrintEventVerbose$1287 009D  
         _receivePrintEventVerbose$1297 00A1                                  _memcpy 58AC  
                                _memset 5B92                                  clear_0 546C  
                                clear_1 5480                                  clear_2 5492  
                                clear_3 549E                                  clear_4 54AA  
                                clear_5 54B6                           ?_sendCANFrame 008F  
                                _strcat 5646                                  _strchr 54C6  
                                _strcpy 5B34                                  _strlen 58EE  
                                _wrkbuf 0154                                  _strtok 4F1C  
                                _strspn 5868                             Interrupt@id 0026  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 4F1C  
                          __mediumconst 6FB4                          ??_readRegister 00BA  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 0001  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0062                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 5464                              __accesstop 0060  
               __end_of__initialization 54BC                    _printFirmwareVersion 4FAE  
                 __size_of_getVSCPFrame 0086               receiveSendEventCANAL@data 0072  
                  doModeVerbose@id_1221 02A3                              _WriteUSART 5C4C  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 01A8  
                  _printStatistics$1370 0094                    _printStatistics$1382 0098  
                  _printStatistics$1376 0096                    _printStatistics$1388 009A  
                 _uart_transmitOverruns 0033                             ?_Read_b_eep 0060  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 445C  
                            __end_ofPL2 1944                              __end_ofPL4 1962  
                            __end_ofPL6 1972                              __end_ofPL8 198E  
                        ??_sendCANFrame 0096                       __end_of_ReadUSART 5C1C  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FA  
                    sendVSCPFrame@pData 009C                         readRegister@reg 00B6  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 00F4  
                        doModeSLCAN@dlc 00A1                      __size_of_fifo_init 0030  
                    __size_of_fifo_read 00A2                  getVSCPFrame@pvscpclass 0072  
               __end_of_init_app_eeprom 49F4                       __end_of_Interrupt 0668  
                         ReadUSART@data 0001                      readRegister@nodeid 00BE  
                        _status_led_cnt 0039                      __RegsToCANID@Value 0007  
                            _crc8_table 0300                       __end_of_OpenUSART 5646  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 46EE                              _doModeVscp 30C0  
                               ??_ultoa 007E                            _getVSCPFrame 503C  
                            __pbssBANK0 00D1                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 006A                           setFilter@eidh 006D  
                         setFilter@eidl 006E                           setFilter@sidh 006B  
                         setFilter@sidl 006C                              _canrxcount 00F0  
                      ??_doModeVscpNode 0060                              _nTimeStamp 00F2  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 4E86  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 003E  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 4B6C  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 419A  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0005                           ??_Write_b_eep 0063  
                 sendVSCPFrame@priority 009A                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 00D5                              _cntTxBytes 00DD  
                               i1l13201 05B4                                 i1l13203 05D0  
                    __size_of_printGUID 00F0                                 i1l13205 05D8  
                               i1l13213 0648                                 i1l13141 043C  
                               i1l13207 05FC                                 i1l13151 0490  
                               i1l13143 0442                     ?_sendVSCPDriverNack 0001  
                               i1l13209 0644                                 i1l13161 04D2  
                               i1l13153 04A2                                 i1l13145 0468  
                               i1l13171 0504                                 i1l13163 04DA  
                               i1l13155 04B2                                 i1l13147 0478  
                               i1l13139 0434                                 i1l13181 0534  
                               i1l13165 04E6                                 i1l13157 04B6  
                               i1l13149 0484                                 i1l13191 056C  
                               i1l13183 0540                                 i1l13175 0516  
                               i1l13159 04C2                                 i1l13193 057E  
                               i1l13177 0522                                 i1l13169 04F8  
                               i1l13195 0588                                 i1l13187 0552  
                               i1l13197 05A4                                 i1l13189 055C  
                               i1l13199 05AC                              _fifo_write 3C5C  
                    __size_of_printHelp 01C0                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0084  
               doModeVerbose@value_1163 02A9                       sendCANFrame@pdata 0094  
                            _made_table 0037                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 531E                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 4610  
            _sendVSCPDriverCommandReply 454C                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 3E8A  
      __size_of_receiveVSCPModeCanalMsg 00DC                  __size_of_doModeVerbose 12C4  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 493A          __size_of_receiveSendEventCANAL 013C  
         __end_of_receiveSendEventCANAL 3B3E                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017A  
                       _ECANSendMessage 3894           __end_of_receiveSendEventSLCAN 359C  
                               __Hparam 0000                       __end_of_findNodes 438A  
                               __Lparam 0000                       __end_of_fifo_init 595E  
                     __end_of_fifo_read 485E                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 47BC                               ?_printMDF 0001  
                               _bSilent 0101               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 5232  
                       __size_of___wmul 0022                                 _calcCRC 5B64  
                       getCANFrame@pdlc 006D                                 ___llmod 5528  
                               ___lwdiv 5790                               _FIFOEMPTY 007BA7  
                               ___lwmod 59EA                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 5746  
                          _fifo_getFree 4D4C                            init_crc8@crc 0064  
                               __pcinit 5464                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3726                                 __ptext1 5CA4  
                               __ptext2 21C0                                 __ptext3 4DEC  
                               __ptext4 596E                 receiveSendEventCANAL@id 007B  
                               __ptext5 3422                                 __ptext6 438A  
                               __ptext7 30C0                                 __ptext8 454C  
                               __ptext9 4A00                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 0030  
                       __size_of_strlen 0040                       __end_of_hexpowers 702C  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6FE4                       __end_of_init_crc8 53FE  
                               _isdigit 5BC0          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 5C72                          _nibbleFromChar 596E  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 5B02  
                               _sprintf 1A80        __end_of_sendVSCPModeCapabilities 4AB6  
                     __end_of_setFilter 2F00                                 _strichr 59AC  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02AA  
                        doModeVerbose@p 02B7                                 _strcspn 5824  
                               _toupper 5C36                             ?_doModeVscp 0001  
                               _stristr 5142                    __size_of_printBinary 004A  
                  end_of_initialization 54BC                            Interrupt@dlc 0025  
                     __end_of_octpowers 6FE4                    __size_of_printErrors 02D6  
                               memcpy@d 0066                                 memcpy@n 0064  
                               memcpy@s 0068                  ??_printFirmwareVersion 0078  
                             i1u1112_25 3B64                                 itoa@buf 0070  
                             i1u1113_25 3B74                               i1u1114_25 3BA0  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                             i1u1152_25 2B48                               i1u1152_27 2B4A  
                         __Lmediumconst 6FB4                    __end_of_sendCANFrame 5A60  
                             i1u1720_20 043C                               i1u1720_21 043A  
                             i1u1721_20 0468                               i1u1721_21 0466  
                             i1u1730_20 0532                               i1u1722_20 0484  
                             i1u1730_21 0530                               i1u1722_21 0482  
                             i1u1731_20 0540                               i1u1723_20 04C2  
                             i1u1731_21 053E                               i1u1723_21 04C0  
                             i1u1740_20 05D0                               i1u1732_20 0550  
                             i1u1724_20 04D2                               i1u1740_21 05CE  
                             i1u1732_21 054E                               i1u1724_21 04D0  
                             i1u1741_20 05D8                               i1u1733_20 055C  
                             i1u1725_20 04E6                               i1u1741_21 05D6  
                             i1u1733_21 055A                               i1u1725_21 04E4  
                             i1u1742_20 05FC                               i1u1734_20 056C  
                             i1u1726_20 04F6                               i1u1742_21 05FA  
                             i1u1734_21 056A                               i1u1726_21 04F4  
                             i1u1735_20 057E                               i1u1727_20 0504  
                             i1u1735_21 057C                               i1u1727_21 0502  
                             i1u1736_20 0588                               i1u1728_20 0514  
                             i1u1736_21 0586                               i1u1728_21 0512  
                             i1u1737_20 05A4                               i1u1729_20 0522  
                             i1u1737_21 05A2                               i1u1729_21 0520  
                             i1u1738_20 05AC                               i1u1738_21 05AA  
                             i1u1739_20 05B4                               i1u1739_21 05B2  
                   _can_receiveOverruns 00D1                 receiveSendEventSLCAN@id 0086  
                     __end_of_printGUID 4186                         ___lldiv@divisor 0064  
                     __end_of_printHelp 30C0                         ___lldiv@counter 006C  
                     __end_of_printMode 531E                       ECANSendMessage@id 006A  
                     ECANSendMessage@pb 0073            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 00BF                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 56F6                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 066C                                 utoa@buf 0067  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0069  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 4AB6  
                               strlen@s 0060                              _sequencyno 00F3  
                            _timekeeper 00E5                               _RXM0EXIDM 0078CB  
                               strspn@i 006A                              ??_strnicmp 006A  
                   __end_of_getCANFrame 5232                              findNodes@i 00C9  
                __end_of_nibbleFromChar 59AC                     __end_of_doModeSLCAN 2576  
                           ?_fifo_write 0001                              fifo_init@f 0064  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 006C  
                            fifo_read@i 006A                              fifo_read@p 0068  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00B6       sendVSCPDriverCommandReply@cmdCode 006F  
                   __size_of_WriteUSART 0014             sendVSCPModeCapabilities@crc 006F  
               __end_of_ECANSendMessage 3A02                    _uart_receiveOverruns 002F  
              _receivePrintEventVerbose 2858                              _vscpNodeId 01AE  
                         ?__CANIDToRegs 0060                    __end_of__RegsToCANID 3C02  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                ??_readRegisterExtended 00BD                          _init_crc8$1961 0060  
                        ?_doModeVerbose 0001                            ??_Read_b_eep 0062  
                        ?_sendVSCPFrame 0096                          __end_of___wmul 5B24  
                   __size_of_doModeVscp 01AA                             _WriteTimer0 5C60  
                           _Write_b_eep 5ACE                          __end_of_memcpy 58EE  
                        __end_of_memset 5BC0       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 569E                          __end_of_strchr 5528  
                        __end_of_strcpy 5B64                          __end_of_strlen 592E  
              doModeVerbose@filter_type 028F                          __end_of_strtok 4FAE  
                        __end_of_strspn 58AC                             __end_ofPL10 199C  
                           __end_ofPL20 2120                             __end_ofPL12 19E6  
                           __end_ofPL30 3E48                             __end_ofPL22 4096  
                           __end_ofPL14 2110                             __end_ofPL40 3D68  
                           __end_ofPL32 1A0A                             __end_ofPL24 2146  
                           __end_ofPL16 3D5A                             __end_ofPL50 4CAC  
                           __end_ofPL42 3C10                             __end_ofPL34 487C  
                           __end_ofPL26 3714                             __end_ofPL18 327A  
                           __end_ofPL60 218C                             __end_ofPL52 1A6A  
                           __end_ofPL44 1A52                             __end_ofPL36 1A1C  
                           __end_ofPL28 19F6                             __end_ofPL70 3C24  
                           __end_ofPL62 503C                             __end_ofPL54 2176  
                           __end_ofPL46 2160                             __end_ofPL38 1A38  
                           __end_ofPL80 3E6E                             __end_ofPL72 3C36  
                           __end_ofPL64 4DDE                             __end_ofPL56 3E5A  
                           __end_ofPL48 4C0C                             __end_ofPL90 2582  
                           __end_ofPL82 3726                             __end_ofPL74 3C4A  
                           __end_ofPL66 4A00                             __end_ofPL58 1A80  
                           __end_ofPL92 461E                             __end_ofPL84 3C5C  
                           __end_ofPL76 4470                             __end_ofPL68 219A  
                           __end_ofPL94 21B6                             __end_ofPL86 3E80  
                           __end_ofPL78 419A                             __end_ofPL96 5B34  
                           __end_ofPL88 21AC                             __end_ofPL98 3D78  
                   start_initialization 5464                               _ReadUSART 5BFE  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1162 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 4470  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0418                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 55EA  
                    __end_of_Read_b_eep 5C84                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00CE  
                       ___llmod@counter 0075                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0011                     __size_of_fifo_write 00D2  
                 __size_of_init_app_ram 0050                          _findNodes$1472 00C5  
              __end_of__ECANPointBuffer 5394                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 51BA                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 21C0               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 2D14                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 5C96                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 5BFE                                ??_strtok 0070  
                              ??_strspn 006A                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 002B                              ?_ReadUSART 0001  
                         __pcstackBANK0 0060                           __pcstackBANK1 01B2  
                         __pcstackBANK2 0280                     __end_of__stringdata 7FFE  
                          _readRegister 46EE                            _isdigit$2901 0061  
                 __size_of_sendCANFrame 0038             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 56F6  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK0 00F5  
                      _ledFunctionality 003F                doModeVerbose@nodeid_1160 028D  
              doModeVerbose@nodeid_1175 02AF                            setFilter@val 0060  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 01B2  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 327A  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 009E  
                        _ECANInitialize 50C2                       _sendVSCPDriverAck 4C0C  
                         __pmediumconst 6FB4                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 4296                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 592E  
                             _fifo_read 47BC                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0096                             __pintcodelo 0418  
                          _sendCANFrame 5A28                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0096                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00BF  
                   _sendEscapedUartData 558A                               _hexpowers 700C  
                      ___lwdiv@quotient 0065                               _init_crc8 5394  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 00D9                            ??_doModeVscp 00B7  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 5C60  
                        __size_of_ultoa 00D2                             _cntTxFrames 00E1  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 2D22                             strnicmp@len 0068  
                             _octpowers 6FB4                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 5142  
             __end_of_sendVSCPDriverAck 4C9E                                i1u620_25 3C7E  
                              i1u621_25 3C90                                i1u625_25 4D6C  
                              _PIR1bits 000F9E                   _receiveSendEventCANAL 3A02  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 3422  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007B  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 4096  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C4                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 2F00                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 52A8  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 326A  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 3E34  
                             _putsUSART 569E                             __stringdata 702C  
                     ___wmul@multiplier 0060                            __RegsToCANID 3B3E  
                             _vscpClass 01AC                 ??_writeRegisterExtended 00BD  
                       Write_b_eep@badd 0060                         Write_b_eep@bdat 0062  
                          ??_fifo_write 0006                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0076                           ??_printBinary 0061  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 0001                               _rwtimeout 0103  
             writeRegisterExtended@page 00B6                          Interrupt@flags 002A  
  __end_of_receiveVSCPModeMultiCanalMsg 5CA8   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 5CA6                             ??_Interrupt 0013  
               __end_of_printStatistics 3422                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                                _Busy_eep 5C9E  
              __size_of_init_app_eeprom 00AC                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 5C9E                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 454C  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000D                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 3D2E                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0062                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 5CA6  
                              __ptext11 4B6C                                __ptext20 5A98  
                              __ptext12 4470                                __ptext21 5394  
                              __ptext13 58AC                                __ptext30 4096  
                              __ptext22 066C                                __ptext14 4C0C  
                              __ptext31 461E                                __ptext23 2D22  
                              __ptext15 488A                                __ptext40 2582  
                              __ptext32 5646                                __ptext24 3E8A  
                              __ptext16 5B64                                __ptext41 327A  
                              __ptext33 46EE                                __ptext25 5746  
                              __ptext17 3A02                                __ptext50 5C36  
                              __ptext42 3F90                                __ptext34 4AB6  
                              __ptext26 419A                                __ptext18 35AA  
                              __ptext51 58EE                                __ptext43 4F1C  
                              __ptext35 5A28                                __ptext27 5B34  
                              __ptext19 558A                                __ptext60 5BC0  
                              __ptext52 2858                                __ptext44 5824  
                              __ptext36 3894                                __ptext28 4296  
                              __ptext61 4FAE                                __ptext53 503C  
                              __ptext45 5868                                __ptext37 3D78  
                              __ptext29 4E86                                __ptext70 50C2  
                              __ptext62 5A60                                __ptext54 51BA  
                              __ptext46 54C6                                __ptext38 5B92  
                              __ptext71 5C1C                                __ptext63 4CAC  
                              __ptext55 47BC                                __ptext47 5142  
                              __ptext39 2F00                                __ptext80 5C72  
                              __ptext72 5BE0                                __ptext64 59EA  
                              __ptext56 1A80                                __ptext48 59AC  
                              __ptext81 592E                                __ptext73 55EA  
                              __ptext65 5790                                __ptext57 5B02  
                              __ptext49 53FE                                __ptext74 5C60  
                              __ptext66 52A8                                __ptext58 5528  
                              __ptext83 5C84                                __ptext75 5C96  
                              __ptext67 569E                                __ptext59 5232  
                              __ptext84 4D4C                                __ptext76 4948  
                              __ptext68 5C4C                                __ptext85 2B1A  
                              __ptext77 5ACE                                __ptext69 57DA  
                              __ptext86 3B3E                                __ptext78 5C9E  
                              __ptext87 531E                                __ptext79 56F6  
                              __ptext88 3C5C                                __ptext89 5BFE  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 5790  
                         __size_of_crc8 0036                           __size_of_atoi 00F8  
                         __size_of_main 016E                           __size_of_init 004A  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 2858                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066                             _inputBuffer 0200  
            __size_of_sendVSCPDriverAck 0092          receiveSendMultiEventCANAL@data 0072  
                ?_receiveSendEventSLCAN 0001                _printNodeFirmwareVersion 461E  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 4E86                               printMDF@i 00C3  
                             printMDF@p 00C1                            ?_getCANFrame 006D  
                   ECANSendMessage@mode 0085                     ECANSendMessage@temp 008B  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0072  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 0004                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 53FE                        init_app_eeprom@i 0064  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 001C  
                       _serialInputFifo 0048                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 000E  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 2B1A  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 0060                             ??_setFilter 0064  
                         printMDF@value 00C0     __size_of_receiveSendMultiEventCANAL 015A  
                         fifo_getFree@f 000B                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007A  
               ECANSendMessage@msgFlags 0071                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008D  
                     ??_init_app_eeprom 0064                   __size_of__CANIDToRegs 00BC  
                           ??_printGUID 00BF                             ??_printHelp 0065  
                           ??_printMode 0065                _sendVSCPDriverErrorFrame 488A  
                         ?_fifo_getFree 0001                  ECANSendMessage@dataLen 0070  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000B  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 5CA4                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 2B1A                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 5C36                    _vscp_restoreDefaults 5C96  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 5746  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 003B  
                ECANSendMessage@tempPtr 0089                             _printErrors 2582  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 3D78  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 003D  
             readRegisterExtended@value 00BB                _sendVSCPModeCapabilities 4A00  
              __size_of_ECANSendMessage 016E  
