

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Dec 19 14:58:30 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   102                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   103                           	psect	pa_nodes,global,class=CODE,delta=1
   104  0000                     tblptru	equ	0xFF8
   105                           tblptrh	equ	0xFF7
   106                           tblptrl	equ	0xFF6
   107                           tablat	equ	0xFF5
   108                           prodh	equ	0xFF4
   109                           prodl	equ	0xFF3
   110                           intcon	equ	0xFF2
   111                           indf0	equ	0xFEF
   112                           fsr0h	equ	0xFEA
   113                           fsr0l	equ	0xFE9
   114                           wreg	equ	0xFE8
   115                           indf1	equ	0xFE7
   116                           postinc1	equ	0xFE6
   117                           postdec1	equ	0xFE5
   118                           fsr1h	equ	0xFE2
   119                           fsr1l	equ	0xFE1
   120                           indf2	equ	0xFDF
   121                           postinc2	equ	0xFDE
   122                           postdec2	equ	0xFDD
   123                           plusw2	equ	0xFDB
   124                           fsr2h	equ	0xFDA
   125                           fsr2l	equ	0xFD9
   126                           status	equ	0xFD8
   127                           
   128                           	psect	mediumconst
   129  006CDC                     __pmediumconst:
   130                           	opt stack 0
   131  006CDC                     _octpowers:
   132                           	opt stack 0
   133  006CDC  0001               	dw	1
   134  006CDE  0000               	dw	0
   135  006CE0  0008               	dw	8
   136  006CE2  0000               	dw	0
   137  006CE4  0040               	dw	64
   138  006CE6  0000               	dw	0
   139  006CE8  0200               	dw	512
   140  006CEA  0000               	dw	0
   141  006CEC  1000               	dw	4096
   142  006CEE  0000               	dw	0
   143  006CF0  8000               	dw	32768
   144  006CF2  0000               	dw	0
   145  006CF4  0000               	dw	0
   146  006CF6  0004               	dw	4
   147  006CF8  0000               	dw	0
   148  006CFA  0020               	dw	32
   149  006CFC  0000               	dw	0
   150  006CFE  0100               	dw	256
   151  006D00  0000               	dw	0
   152  006D02  0800               	dw	2048
   153  006D04  0000               	dw	0
   154  006D06  4000               	dw	16384
   155  006D08  0000               	dw	0
   156  006D0A  0000               	dw	0
   157  006D0C                     __end_of_octpowers:
   158                           	opt stack 0
   159  006D0C                     _dpowers:
   160                           	opt stack 0
   161  006D0C  0001               	dw	1
   162  006D0E  0000               	dw	0
   163  006D10  000A               	dw	10
   164  006D12  0000               	dw	0
   165  006D14  0064               	dw	100
   166  006D16  0000               	dw	0
   167  006D18  03E8               	dw	1000
   168  006D1A  0000               	dw	0
   169  006D1C  2710               	dw	10000
   170  006D1E  0000               	dw	0
   171  006D20  86A0               	dw	34464
   172  006D22  0001               	dw	1
   173  006D24  4240               	dw	16960
   174  006D26  000F               	dw	15
   175  006D28  9680               	dw	38528
   176  006D2A  0098               	dw	152
   177  006D2C  E100               	dw	57600
   178  006D2E  05F5               	dw	1525
   179  006D30  CA00               	dw	51712
   180  006D32  3B9A               	dw	15258
   181  006D34                     __end_of_dpowers:
   182                           	opt stack 0
   183  006D34                     _hexpowers:
   184                           	opt stack 0
   185  006D34  0001               	dw	1
   186  006D36  0000               	dw	0
   187  006D38  0010               	dw	16
   188  006D3A  0000               	dw	0
   189  006D3C  0100               	dw	256
   190  006D3E  0000               	dw	0
   191  006D40  1000               	dw	4096
   192  006D42  0000               	dw	0
   193  006D44  0000               	dw	0
   194  006D46  0001               	dw	1
   195  006D48  0000               	dw	0
   196  006D4A  0010               	dw	16
   197  006D4C  0000               	dw	0
   198  006D4E  0100               	dw	256
   199  006D50  0000               	dw	0
   200  006D52  1000               	dw	4096
   201  006D54                     __end_of_hexpowers:
   202                           	opt stack 0
   203  0000                     _BRGCON1	set	3952
   204  0000                     _BRGCON2	set	3953
   205  0000                     _BRGCON3	set	3954
   206  0000                     _BSEL0	set	3576
   207  0000                     _CANCON	set	3951
   208  0000                     _CIOCON	set	3955
   209  0000                     _COMSTATbits	set	3956
   210  0000                     _ECANCON	set	3959
   211  0000                     _EEADR	set	4009
   212  0000                     _EECON1bits	set	4006
   213  0000                     _EECON2	set	4007
   214  0000                     _EEDATA	set	4008
   215  0000                     _INTCONbits	set	4082
   216  0000                     _MSEL0	set	3568
   217  0000                     _MSEL1	set	3569
   218  0000                     _MSEL2	set	3570
   219  0000                     _OSCCONbits	set	4051
   220  0000                     _OSCTUNEbits	set	3995
   221  0000                     _PIE1bits	set	3997
   222  0000                     _PIR1bits	set	3998
   223  0000                     _PIR2bits	set	4001
   224  0000                     _RCREG	set	4014
   225  0000                     _RCSTA	set	4011
   226  0000                     _RCSTAbits	set	4011
   227  0000                     _RXB1CONbits	set	3920
   228  0000                     _RXERRCNT	set	3957
   229  0000                     _RXF0EIDH	set	3842
   230  0000                     _RXF0EIDL	set	3843
   231  0000                     _RXF0SIDH	set	3840
   232  0000                     _RXF0SIDL	set	3841
   233  0000                     _RXF10EIDH	set	3446
   234  0000                     _RXF10EIDL	set	3447
   235  0000                     _RXF10SIDH	set	3444
   236  0000                     _RXF10SIDL	set	3445
   237  0000                     _RXF11EIDH	set	3450
   238  0000                     _RXF11EIDL	set	3451
   239  0000                     _RXF11SIDH	set	3448
   240  0000                     _RXF11SIDL	set	3449
   241  0000                     _RXF12EIDH	set	3458
   242  0000                     _RXF12EIDL	set	3459
   243  0000                     _RXF12SIDH	set	3456
   244  0000                     _RXF12SIDL	set	3457
   245  0000                     _RXF13EIDH	set	3462
   246  0000                     _RXF13EIDL	set	3463
   247  0000                     _RXF13SIDH	set	3460
   248  0000                     _RXF13SIDL	set	3461
   249  0000                     _RXF14EIDH	set	3466
   250  0000                     _RXF14EIDL	set	3467
   251  0000                     _RXF14SIDH	set	3464
   252  0000                     _RXF14SIDL	set	3465
   253  0000                     _RXF15EIDH	set	3474
   254  0000                     _RXF15EIDL	set	3475
   255  0000                     _RXF15SIDH	set	3472
   256  0000                     _RXF15SIDL	set	3473
   257  0000                     _RXF1EIDH	set	3846
   258  0000                     _RXF1EIDL	set	3847
   259  0000                     _RXF1SIDH	set	3844
   260  0000                     _RXF1SIDL	set	3845
   261  0000                     _RXF2EIDH	set	3850
   262  0000                     _RXF2EIDL	set	3851
   263  0000                     _RXF2SIDH	set	3848
   264  0000                     _RXF2SIDL	set	3849
   265  0000                     _RXF3EIDH	set	3854
   266  0000                     _RXF3EIDL	set	3855
   267  0000                     _RXF3SIDH	set	3852
   268  0000                     _RXF3SIDL	set	3853
   269  0000                     _RXF4EIDH	set	3858
   270  0000                     _RXF4EIDL	set	3859
   271  0000                     _RXF4SIDH	set	3856
   272  0000                     _RXF4SIDL	set	3857
   273  0000                     _RXF5EIDH	set	3862
   274  0000                     _RXF5EIDL	set	3863
   275  0000                     _RXF5SIDH	set	3860
   276  0000                     _RXF5SIDL	set	3861
   277  0000                     _RXF6EIDH	set	3426
   278  0000                     _RXF6EIDL	set	3427
   279  0000                     _RXF6SIDH	set	3424
   280  0000                     _RXF6SIDL	set	3425
   281  0000                     _RXF7EIDH	set	3430
   282  0000                     _RXF7EIDL	set	3431
   283  0000                     _RXF7SIDH	set	3428
   284  0000                     _RXF7SIDL	set	3429
   285  0000                     _RXF8EIDH	set	3434
   286  0000                     _RXF8EIDL	set	3435
   287  0000                     _RXF8SIDH	set	3432
   288  0000                     _RXF8SIDL	set	3433
   289  0000                     _RXF9EIDH	set	3442
   290  0000                     _RXF9EIDL	set	3443
   291  0000                     _RXF9SIDH	set	3440
   292  0000                     _RXF9SIDL	set	3441
   293  0000                     _RXFBCON0	set	3552
   294  0000                     _RXFBCON1	set	3553
   295  0000                     _RXFBCON2	set	3554
   296  0000                     _RXFBCON3	set	3555
   297  0000                     _RXFBCON4	set	3556
   298  0000                     _RXFBCON5	set	3557
   299  0000                     _RXFBCON6	set	3558
   300  0000                     _RXFBCON7	set	3559
   301  0000                     _RXFCON0	set	3540
   302  0000                     _RXFCON1	set	3541
   303  0000                     _RXM0EIDH	set	3866
   304  0000                     _RXM0EIDL	set	3867
   305  0000                     _RXM0SIDL	set	3865
   306  0000                     _RXM1EIDH	set	3870
   307  0000                     _RXM1EIDL	set	3871
   308  0000                     _RXM1SIDL	set	3869
   309  0000                     _SPBRG	set	4015
   310  0000                     _SPBRGH	set	4016
   311  0000                     _T0CON	set	4053
   312  0000                     _T0CONbits	set	4053
   313  0000                     _TMR0H	set	4055
   314  0000                     _TMR0L	set	4054
   315  0000                     _TRISBbits	set	3987
   316  0000                     _TRISCbits	set	3988
   317  0000                     _TXERRCNT	set	3958
   318  0000                     _TXREG	set	4013
   319  0000                     _TXSTA	set	4012
   320  0000                     _TXSTAbits	set	4012
   321  0000                     _B0RXFUL	set	28935
   322  0000                     _B0TXEN	set	28610
   323  0000                     _B1RXFUL	set	29063
   324  0000                     _B1TXEN	set	28611
   325  0000                     _B2RXFUL	set	29191
   326  0000                     _B2TXEN	set	28612
   327  0000                     _B3RXFUL	set	29319
   328  0000                     _B3TXEN	set	28613
   329  0000                     _B4RXFUL	set	29447
   330  0000                     _B4TXEN	set	28614
   331  0000                     _B5RXFUL	set	29575
   332  0000                     _B5TXEN	set	28615
   333  0000                     _FIFOEMPTY	set	31655
   334  0000                     _IRXIF	set	32039
   335  0000                     _LATC1	set	31833
   336  0000                     _MDSEL0	set	31678
   337  0000                     _MDSEL1	set	31679
   338  0000                     _PEIE	set	32662
   339  0000                     _RCIE	set	31981
   340  0000                     _RCIF	set	31989
   341  0000                     _RCIP	set	31997
   342  0000                     _RXB0FILHIT0	set	31488
   343  0000                     _RXB0FUL	set	31495
   344  0000                     _RXB0IF	set	32032
   345  0000                     _RXB0OVFL	set	31655
   346  0000                     _RXB1IF	set	32033
   347  0000                     _RXB1OVFL	set	31654
   348  0000                     _RXM0EXIDM	set	30923
   349  0000                     _RXM1EXIDEN	set	30955
   350  0000                     _B0CON	set	3616
   351  0000                     _B1CON	set	3632
   352  0000                     _B2CON	set	3648
   353  0000                     _B3CON	set	3664
   354  0000                     _B4CON	set	3680
   355  0000                     _B5CON	set	3696
   356  0000                     _RXB0CON	set	3936
   357  0000                     _RXB1CON	set	3920
   358  0000                     _RXM0SIDH	set	3864
   359  0000                     _RXM1SIDH	set	3868
   360  0000                     _TXB0CON	set	3904
   361  0000                     _TXB1CON	set	3888
   362  0000                     _TXB2CON	set	3872
   363  006D54                     __stringdata:
   364                           	opt stack 0
   365  006D54                     STR_218:
   366  006D54  20                 	db	32
   367  006D55  20                 	db	32
   368  006D56  20                 	db	32
   369  006D57  20                 	db	32
   370  006D58  20                 	db	32
   371  006D59  20                 	db	32
   372  006D5A  20                 	db	32
   373  006D5B  20                 	db	32
   374  006D5C  20                 	db	32
   375  006D5D  46                 	db	70	;'F'
   376  006D5E  6F                 	db	111	;'o'
   377  006D5F  72                 	db	114	;'r'
   378  006D60  6D                 	db	109	;'m'
   379  006D61  61                 	db	97	;'a'
   380  006D62  74                 	db	116	;'t'
   381  006D63  3A                 	db	58	;':'
   382  006D64  20                 	db	32
   383  006D65  66                 	db	102	;'f'
   384  006D66  69                 	db	105	;'i'
   385  006D67  6C                 	db	108	;'l'
   386  006D68  74                 	db	116	;'t'
   387  006D69  65                 	db	101	;'e'
   388  006D6A  72                 	db	114	;'r'
   389  006D6B  20                 	db	32
   390  006D6C  66                 	db	102	;'f'
   391  006D6D  69                 	db	105	;'i'
   392  006D6E  6C                 	db	108	;'l'
   393  006D6F  74                 	db	116	;'t'
   394  006D70  65                 	db	101	;'e'
   395  006D71  72                 	db	114	;'r'
   396  006D72  6E                 	db	110	;'n'
   397  006D73  6F                 	db	111	;'o'
   398  006D74  2C                 	db	44
   399  006D75  70                 	db	112	;'p'
   400  006D76  72                 	db	114	;'r'
   401  006D77  69                 	db	105	;'i'
   402  006D78  6F                 	db	111	;'o'
   403  006D79  2C                 	db	44
   404  006D7A  63                 	db	99	;'c'
   405  006D7B  6C                 	db	108	;'l'
   406  006D7C  61                 	db	97	;'a'
   407  006D7D  73                 	db	115	;'s'
   408  006D7E  73                 	db	115	;'s'
   409  006D7F  2C                 	db	44
   410  006D80  74                 	db	116	;'t'
   411  006D81  79                 	db	121	;'y'
   412  006D82  70                 	db	112	;'p'
   413  006D83  65                 	db	101	;'e'
   414  006D84  2C                 	db	44
   415  006D85  6E                 	db	110	;'n'
   416  006D86  6F                 	db	111	;'o'
   417  006D87  64                 	db	100	;'d'
   418  006D88  65                 	db	101	;'e'
   419  006D89  69                 	db	105	;'i'
   420  006D8A  64                 	db	100	;'d'
   421  006D8B  20                 	db	32
   422  006D8C  20                 	db	32
   423  006D8D  28                 	db	40
   424  006D8E  66                 	db	102	;'f'
   425  006D8F  69                 	db	105	;'i'
   426  006D90  6C                 	db	108	;'l'
   427  006D91  74                 	db	116	;'t'
   428  006D92  65                 	db	101	;'e'
   429  006D93  72                 	db	114	;'r'
   430  006D94  6E                 	db	110	;'n'
   431  006D95  6F                 	db	111	;'o'
   432  006D96  20                 	db	32
   433  006D97  3D                 	db	61	;'='
   434  006D98  20                 	db	32
   435  006D99  30                 	db	48	;'0'
   436  006D9A  2D                 	db	45
   437  006D9B  31                 	db	49	;'1'
   438  006D9C  35                 	db	53	;'5'
   439  006D9D  29                 	db	41
   440  006D9E  2E                 	db	46
   441  006D9F  0D                 	db	13
   442  006DA0  0A                 	db	10
   443  006DA1  00                 	db	0
   444  006DA2                     STR_216:
   445  006DA2  49                 	db	73	;'I'
   446  006DA3  4E                 	db	78	;'N'
   447  006DA4  46                 	db	70	;'F'
   448  006DA5  4F                 	db	79	;'O'
   449  006DA6  20                 	db	32
   450  006DA7  2D                 	db	45
   451  006DA8  20                 	db	32
   452  006DA9  47                 	db	71	;'G'
   453  006DAA  65                 	db	101	;'e'
   454  006DAB  74                 	db	116	;'t'
   455  006DAC  20                 	db	32
   456  006DAD  69                 	db	105	;'i'
   457  006DAE  6E                 	db	110	;'n'
   458  006DAF  66                 	db	102	;'f'
   459  006DB0  6F                 	db	111	;'o'
   460  006DB1  20                 	db	32
   461  006DB2  61                 	db	97	;'a'
   462  006DB3  62                 	db	98	;'b'
   463  006DB4  6F                 	db	111	;'o'
   464  006DB5  75                 	db	117	;'u'
   465  006DB6  74                 	db	116	;'t'
   466  006DB7  20                 	db	32
   467  006DB8  61                 	db	97	;'a'
   468  006DB9  6E                 	db	110	;'n'
   469  006DBA  20                 	db	32
   470  006DBB  65                 	db	101	;'e'
   471  006DBC  78                 	db	120	;'x'
   472  006DBD  69                 	db	105	;'i'
   473  006DBE  73                 	db	115	;'s'
   474  006DBF  74                 	db	116	;'t'
   475  006DC0  65                 	db	101	;'e'
   476  006DC1  6E                 	db	110	;'n'
   477  006DC2  74                 	db	116	;'t'
   478  006DC3  20                 	db	32
   479  006DC4  6E                 	db	110	;'n'
   480  006DC5  6F                 	db	111	;'o'
   481  006DC6  64                 	db	100	;'d'
   482  006DC7  65                 	db	101	;'e'
   483  006DC8  20                 	db	32
   484  006DC9  6F                 	db	111	;'o'
   485  006DCA  6E                 	db	110	;'n'
   486  006DCB  20                 	db	32
   487  006DCC  74                 	db	116	;'t'
   488  006DCD  68                 	db	104	;'h'
   489  006DCE  65                 	db	101	;'e'
   490  006DCF  20                 	db	32
   491  006DD0  62                 	db	98	;'b'
   492  006DD1  75                 	db	117	;'u'
   493  006DD2  73                 	db	115	;'s'
   494  006DD3  20                 	db	32
   495  006DD4  28                 	db	40
   496  006DD5  46                 	db	70	;'F'
   497  006DD6  6F                 	db	111	;'o'
   498  006DD7  72                 	db	114	;'r'
   499  006DD8  6D                 	db	109	;'m'
   500  006DD9  61                 	db	97	;'a'
   501  006DDA  74                 	db	116	;'t'
   502  006DDB  3A                 	db	58	;':'
   503  006DDC  20                 	db	32
   504  006DDD  69                 	db	105	;'i'
   505  006DDE  6E                 	db	110	;'n'
   506  006DDF  66                 	db	102	;'f'
   507  006DE0  6F                 	db	111	;'o'
   508  006DE1  20                 	db	32
   509  006DE2  6E                 	db	110	;'n'
   510  006DE3  69                 	db	105	;'i'
   511  006DE4  63                 	db	99	;'c'
   512  006DE5  6B                 	db	107	;'k'
   513  006DE6  6E                 	db	110	;'n'
   514  006DE7  61                 	db	97	;'a'
   515  006DE8  6D                 	db	109	;'m'
   516  006DE9  65                 	db	101	;'e'
   517  006DEA  29                 	db	41
   518  006DEB  2E                 	db	46
   519  006DEC  0D                 	db	13
   520  006DED  0A                 	db	10
   521  006DEE  00                 	db	0
   522  006DEF                     STR_220:
   523  006DEF  20                 	db	32
   524  006DF0  20                 	db	32
   525  006DF1  20                 	db	32
   526  006DF2  20                 	db	32
   527  006DF3  20                 	db	32
   528  006DF4  20                 	db	32
   529  006DF5  20                 	db	32
   530  006DF6  46                 	db	70	;'F'
   531  006DF7  6F                 	db	111	;'o'
   532  006DF8  72                 	db	114	;'r'
   533  006DF9  6D                 	db	109	;'m'
   534  006DFA  61                 	db	97	;'a'
   535  006DFB  74                 	db	116	;'t'
   536  006DFC  3A                 	db	58	;':'
   537  006DFD  20                 	db	32
   538  006DFE  6D                 	db	109	;'m'
   539  006DFF  61                 	db	97	;'a'
   540  006E00  73                 	db	115	;'s'
   541  006E01  6B                 	db	107	;'k'
   542  006E02  20                 	db	32
   543  006E03  6D                 	db	109	;'m'
   544  006E04  61                 	db	97	;'a'
   545  006E05  73                 	db	115	;'s'
   546  006E06  6B                 	db	107	;'k'
   547  006E07  6E                 	db	110	;'n'
   548  006E08  6F                 	db	111	;'o'
   549  006E09  2C                 	db	44
   550  006E0A  70                 	db	112	;'p'
   551  006E0B  72                 	db	114	;'r'
   552  006E0C  69                 	db	105	;'i'
   553  006E0D  6F                 	db	111	;'o'
   554  006E0E  2C                 	db	44
   555  006E0F  63                 	db	99	;'c'
   556  006E10  6C                 	db	108	;'l'
   557  006E11  61                 	db	97	;'a'
   558  006E12  73                 	db	115	;'s'
   559  006E13  73                 	db	115	;'s'
   560  006E14  2C                 	db	44
   561  006E15  74                 	db	116	;'t'
   562  006E16  79                 	db	121	;'y'
   563  006E17  70                 	db	112	;'p'
   564  006E18  65                 	db	101	;'e'
   565  006E19  2C                 	db	44
   566  006E1A  6E                 	db	110	;'n'
   567  006E1B  6F                 	db	111	;'o'
   568  006E1C  64                 	db	100	;'d'
   569  006E1D  65                 	db	101	;'e'
   570  006E1E  69                 	db	105	;'i'
   571  006E1F  64                 	db	100	;'d'
   572  006E20  20                 	db	32
   573  006E21  28                 	db	40
   574  006E22  6D                 	db	109	;'m'
   575  006E23  61                 	db	97	;'a'
   576  006E24  73                 	db	115	;'s'
   577  006E25  6B                 	db	107	;'k'
   578  006E26  6E                 	db	110	;'n'
   579  006E27  6F                 	db	111	;'o'
   580  006E28  20                 	db	32
   581  006E29  3D                 	db	61	;'='
   582  006E2A  20                 	db	32
   583  006E2B  30                 	db	48	;'0'
   584  006E2C  20                 	db	32
   585  006E2D  6F                 	db	111	;'o'
   586  006E2E  72                 	db	114	;'r'
   587  006E2F  20                 	db	32
   588  006E30  31                 	db	49	;'1'
   589  006E31  29                 	db	41
   590  006E32  2E                 	db	46
   591  006E33  0D                 	db	13
   592  006E34  0A                 	db	10
   593  006E35  00                 	db	0
   594  006E36                     STR_214:
   595  006E36  52                 	db	82	;'R'
   596  006E37  52                 	db	82	;'R'
   597  006E38  45                 	db	69	;'E'
   598  006E39  47                 	db	71	;'G'
   599  006E3A  20                 	db	32
   600  006E3B  2D                 	db	45
   601  006E3C  20                 	db	32
   602  006E3D  52                 	db	82	;'R'
   603  006E3E  65                 	db	101	;'e'
   604  006E3F  61                 	db	97	;'a'
   605  006E40  64                 	db	100	;'d'
   606  006E41  20                 	db	32
   607  006E42  72                 	db	114	;'r'
   608  006E43  65                 	db	101	;'e'
   609  006E44  67                 	db	103	;'g'
   610  006E45  69                 	db	105	;'i'
   611  006E46  73                 	db	115	;'s'
   612  006E47  74                 	db	116	;'t'
   613  006E48  65                 	db	101	;'e'
   614  006E49  72                 	db	114	;'r'
   615  006E4A  28                 	db	40
   616  006E4B  73                 	db	115	;'s'
   617  006E4C  29                 	db	41
   618  006E4D  20                 	db	32
   619  006E4E  6F                 	db	111	;'o'
   620  006E4F  66                 	db	102	;'f'
   621  006E50  20                 	db	32
   622  006E51  6E                 	db	110	;'n'
   623  006E52  6F                 	db	111	;'o'
   624  006E53  64                 	db	100	;'d'
   625  006E54  65                 	db	101	;'e'
   626  006E55  20                 	db	32
   627  006E56  28                 	db	40
   628  006E57  46                 	db	70	;'F'
   629  006E58  6F                 	db	111	;'o'
   630  006E59  72                 	db	114	;'r'
   631  006E5A  6D                 	db	109	;'m'
   632  006E5B  61                 	db	97	;'a'
   633  006E5C  74                 	db	116	;'t'
   634  006E5D  3A                 	db	58	;':'
   635  006E5E  20                 	db	32
   636  006E5F  72                 	db	114	;'r'
   637  006E60  72                 	db	114	;'r'
   638  006E61  65                 	db	101	;'e'
   639  006E62  67                 	db	103	;'g'
   640  006E63  20                 	db	32
   641  006E64  5B                 	db	91	;'['
   642  006E65  70                 	db	112	;'p'
   643  006E66  61                 	db	97	;'a'
   644  006E67  67                 	db	103	;'g'
   645  006E68  65                 	db	101	;'e'
   646  006E69  3A                 	db	58	;':'
   647  006E6A  5D                 	db	93	;']'
   648  006E6B  72                 	db	114	;'r'
   649  006E6C  65                 	db	101	;'e'
   650  006E6D  67                 	db	103	;'g'
   651  006E6E  20                 	db	32
   652  006E6F  5B                 	db	91	;'['
   653  006E70  63                 	db	99	;'c'
   654  006E71  6F                 	db	111	;'o'
   655  006E72  75                 	db	117	;'u'
   656  006E73  6E                 	db	110	;'n'
   657  006E74  74                 	db	116	;'t'
   658  006E75  5D                 	db	93	;']'
   659  006E76  29                 	db	41
   660  006E77  2E                 	db	46
   661  006E78  0D                 	db	13
   662  006E79  0A                 	db	10
   663  006E7A  00                 	db	0
   664  006E7B                     STR_229:
   665  006E7B  2D                 	db	45
   666  006E7C  2D                 	db	45
   667  006E7D  2D                 	db	45
   668  006E7E  2D                 	db	45
   669  006E7F  2D                 	db	45
   670  006E80  2D                 	db	45
   671  006E81  2D                 	db	45
   672  006E82  2D                 	db	45
   673  006E83  2D                 	db	45
   674  006E84  2D                 	db	45
   675  006E85  2D                 	db	45
   676  006E86  2D                 	db	45
   677  006E87  2D                 	db	45
   678  006E88  2D                 	db	45
   679  006E89  2D                 	db	45
   680  006E8A  2D                 	db	45
   681  006E8B  2D                 	db	45
   682  006E8C  2D                 	db	45
   683  006E8D  2D                 	db	45
   684  006E8E  2D                 	db	45
   685  006E8F  2D                 	db	45
   686  006E90  2D                 	db	45
   687  006E91  2D                 	db	45
   688  006E92  2D                 	db	45
   689  006E93  2D                 	db	45
   690  006E94  2D                 	db	45
   691  006E95  2D                 	db	45
   692  006E96  2D                 	db	45
   693  006E97  2D                 	db	45
   694  006E98  2D                 	db	45
   695  006E99  2D                 	db	45
   696  006E9A  2D                 	db	45
   697  006E9B  2D                 	db	45
   698  006E9C  2D                 	db	45
   699  006E9D  2D                 	db	45
   700  006E9E  2D                 	db	45
   701  006E9F  2D                 	db	45
   702  006EA0  2D                 	db	45
   703  006EA1  2D                 	db	45
   704  006EA2  2D                 	db	45
   705  006EA3  2D                 	db	45
   706  006EA4  2D                 	db	45
   707  006EA5  2D                 	db	45
   708  006EA6  2D                 	db	45
   709  006EA7  2D                 	db	45
   710  006EA8  2D                 	db	45
   711  006EA9  2D                 	db	45
   712  006EAA  2D                 	db	45
   713  006EAB  2D                 	db	45
   714  006EAC  2D                 	db	45
   715  006EAD  2D                 	db	45
   716  006EAE  2D                 	db	45
   717  006EAF  2D                 	db	45
   718  006EB0  2D                 	db	45
   719  006EB1  2D                 	db	45
   720  006EB2  2D                 	db	45
   721  006EB3  2D                 	db	45
   722  006EB4  2D                 	db	45
   723  006EB5  2D                 	db	45
   724  006EB6  2D                 	db	45
   725  006EB7  2D                 	db	45
   726  006EB8  2D                 	db	45
   727  006EB9  2D                 	db	45
   728  006EBA  2D                 	db	45
   729  006EBB  0D                 	db	13
   730  006EBC  0A                 	db	10
   731  006EBD  00                 	db	0
   732  006EBE                     STR_224:
   733  006EBE  20                 	db	32
   734  006EBF  20                 	db	32
   735  006EC0  20                 	db	32
   736  006EC1  20                 	db	32
   737  006EC2  52                 	db	82	;'R'
   738  006EC3  57                 	db	87	;'W'
   739  006EC4  54                 	db	84	;'T'
   740  006EC5  49                 	db	73	;'I'
   741  006EC6  4D                 	db	77	;'M'
   742  006EC7  45                 	db	69	;'E'
   743  006EC8  4F                 	db	79	;'O'
   744  006EC9  55                 	db	85	;'U'
   745  006ECA  54                 	db	84	;'T'
   746  006ECB  20                 	db	32
   747  006ECC  2D                 	db	45
   748  006ECD  20                 	db	32
   749  006ECE  53                 	db	83	;'S'
   750  006ECF  65                 	db	101	;'e'
   751  006ED0  74                 	db	116	;'t'
   752  006ED1  20                 	db	32
   753  006ED2  72                 	db	114	;'r'
   754  006ED3  65                 	db	101	;'e'
   755  006ED4  67                 	db	103	;'g'
   756  006ED5  69                 	db	105	;'i'
   757  006ED6  73                 	db	115	;'s'
   758  006ED7  74                 	db	116	;'t'
   759  006ED8  65                 	db	101	;'e'
   760  006ED9  72                 	db	114	;'r'
   761  006EDA  20                 	db	32
   762  006EDB  72                 	db	114	;'r'
   763  006EDC  65                 	db	101	;'e'
   764  006EDD  61                 	db	97	;'a'
   765  006EDE  64                 	db	100	;'d'
   766  006EDF  2F                 	db	47
   767  006EE0  77                 	db	119	;'w'
   768  006EE1  72                 	db	114	;'r'
   769  006EE2  69                 	db	105	;'i'
   770  006EE3  74                 	db	116	;'t'
   771  006EE4  65                 	db	101	;'e'
   772  006EE5  20                 	db	32
   773  006EE6  74                 	db	116	;'t'
   774  006EE7  69                 	db	105	;'i'
   775  006EE8  6D                 	db	109	;'m'
   776  006EE9  65                 	db	101	;'e'
   777  006EEA  6F                 	db	111	;'o'
   778  006EEB  75                 	db	117	;'u'
   779  006EEC  74                 	db	116	;'t'
   780  006EED  2E                 	db	46
   781  006EEE  20                 	db	32
   782  006EEF  44                 	db	68	;'D'
   783  006EF0  65                 	db	101	;'e'
   784  006EF1  66                 	db	102	;'f'
   785  006EF2  61                 	db	97	;'a'
   786  006EF3  75                 	db	117	;'u'
   787  006EF4  6C                 	db	108	;'l'
   788  006EF5  74                 	db	116	;'t'
   789  006EF6  3D                 	db	61	;'='
   790  006EF7  31                 	db	49	;'1'
   791  006EF8  30                 	db	48	;'0'
   792  006EF9  20                 	db	32
   793  006EFA  6D                 	db	109	;'m'
   794  006EFB  73                 	db	115	;'s'
   795  006EFC  20                 	db	32
   796  006EFD  2E                 	db	46
   797  006EFE  0D                 	db	13
   798  006EFF  0A                 	db	10
   799  006F00  00                 	db	0
   800  006F01                     STR_215:
   801  006F01  57                 	db	87	;'W'
   802  006F02  52                 	db	82	;'R'
   803  006F03  45                 	db	69	;'E'
   804  006F04  47                 	db	71	;'G'
   805  006F05  20                 	db	32
   806  006F06  2D                 	db	45
   807  006F07  20                 	db	32
   808  006F08  57                 	db	87	;'W'
   809  006F09  72                 	db	114	;'r'
   810  006F0A  69                 	db	105	;'i'
   811  006F0B  74                 	db	116	;'t'
   812  006F0C  65                 	db	101	;'e'
   813  006F0D  20                 	db	32
   814  006F0E  72                 	db	114	;'r'
   815  006F0F  65                 	db	101	;'e'
   816  006F10  67                 	db	103	;'g'
   817  006F11  69                 	db	105	;'i'
   818  006F12  73                 	db	115	;'s'
   819  006F13  74                 	db	116	;'t'
   820  006F14  65                 	db	101	;'e'
   821  006F15  72                 	db	114	;'r'
   822  006F16  20                 	db	32
   823  006F17  6F                 	db	111	;'o'
   824  006F18  66                 	db	102	;'f'
   825  006F19  20                 	db	32
   826  006F1A  6E                 	db	110	;'n'
   827  006F1B  6F                 	db	111	;'o'
   828  006F1C  64                 	db	100	;'d'
   829  006F1D  65                 	db	101	;'e'
   830  006F1E  20                 	db	32
   831  006F1F  28                 	db	40
   832  006F20  46                 	db	70	;'F'
   833  006F21  6F                 	db	111	;'o'
   834  006F22  72                 	db	114	;'r'
   835  006F23  6D                 	db	109	;'m'
   836  006F24  61                 	db	97	;'a'
   837  006F25  74                 	db	116	;'t'
   838  006F26  3A                 	db	58	;':'
   839  006F27  20                 	db	32
   840  006F28  77                 	db	119	;'w'
   841  006F29  72                 	db	114	;'r'
   842  006F2A  65                 	db	101	;'e'
   843  006F2B  67                 	db	103	;'g'
   844  006F2C  20                 	db	32
   845  006F2D  5B                 	db	91	;'['
   846  006F2E  70                 	db	112	;'p'
   847  006F2F  61                 	db	97	;'a'
   848  006F30  67                 	db	103	;'g'
   849  006F31  65                 	db	101	;'e'
   850  006F32  3A                 	db	58	;':'
   851  006F33  5D                 	db	93	;']'
   852  006F34  72                 	db	114	;'r'
   853  006F35  65                 	db	101	;'e'
   854  006F36  67                 	db	103	;'g'
   855  006F37  20                 	db	32
   856  006F38  63                 	db	99	;'c'
   857  006F39  6F                 	db	111	;'o'
   858  006F3A  6E                 	db	110	;'n'
   859  006F3B  74                 	db	116	;'t'
   860  006F3C  65                 	db	101	;'e'
   861  006F3D  6E                 	db	110	;'n'
   862  006F3E  74                 	db	116	;'t'
   863  006F3F  29                 	db	41
   864  006F40  2E                 	db	46
   865  006F41  0D                 	db	13
   866  006F42  0A                 	db	10
   867  006F43  00                 	db	0
   868  006F44                     STR_84:
   869  006F44  2D                 	db	45
   870  006F45  45                 	db	69	;'E'
   871  006F46  52                 	db	82	;'R'
   872  006F47  52                 	db	82	;'R'
   873  006F48  4F                 	db	79	;'O'
   874  006F49  52                 	db	82	;'R'
   875  006F4A  20                 	db	32
   876  006F4B  2D                 	db	45
   877  006F4C  20                 	db	32
   878  006F4D  46                 	db	70	;'F'
   879  006F4E  69                 	db	105	;'i'
   880  006F4F  6C                 	db	108	;'l'
   881  006F50  74                 	db	116	;'t'
   882  006F51  65                 	db	101	;'e'
   883  006F52  72                 	db	114	;'r'
   884  006F53  20                 	db	32
   885  006F54  6E                 	db	110	;'n'
   886  006F55  75                 	db	117	;'u'
   887  006F56  6D                 	db	109	;'m'
   888  006F57  62                 	db	98	;'b'
   889  006F58  65                 	db	101	;'e'
   890  006F59  72                 	db	114	;'r'
   891  006F5A  20                 	db	32
   892  006F5B  63                 	db	99	;'c'
   893  006F5C  61                 	db	97	;'a'
   894  006F5D  6E                 	db	110	;'n'
   895  006F5E  20                 	db	32
   896  006F5F  6F                 	db	111	;'o'
   897  006F60  6E                 	db	110	;'n'
   898  006F61  6C                 	db	108	;'l'
   899  006F62  79                 	db	121	;'y'
   900  006F63  20                 	db	32
   901  006F64  62                 	db	98	;'b'
   902  006F65  65                 	db	101	;'e'
   903  006F66  20                 	db	32
   904  006F67  73                 	db	115	;'s'
   905  006F68  65                 	db	101	;'e'
   906  006F69  74                 	db	116	;'t'
   907  006F6A  20                 	db	32
   908  006F6B  74                 	db	116	;'t'
   909  006F6C  6F                 	db	111	;'o'
   910  006F6D  20                 	db	32
   911  006F6E  61                 	db	97	;'a'
   912  006F6F  20                 	db	32
   913  006F70  76                 	db	118	;'v'
   914  006F71  61                 	db	97	;'a'
   915  006F72  6C                 	db	108	;'l'
   916  006F73  75                 	db	117	;'u'
   917  006F74  65                 	db	101	;'e'
   918  006F75  20                 	db	32
   919  006F76  62                 	db	98	;'b'
   920  006F77  65                 	db	101	;'e'
   921  006F78  74                 	db	116	;'t'
   922  006F79  77                 	db	119	;'w'
   923  006F7A  65                 	db	101	;'e'
   924  006F7B  65                 	db	101	;'e'
   925  006F7C  6E                 	db	110	;'n'
   926  006F7D  20                 	db	32
   927  006F7E  30                 	db	48	;'0'
   928  006F7F  2D                 	db	45
   929  006F80  31                 	db	49	;'1'
   930  006F81  35                 	db	53	;'5'
   931  006F82  2E                 	db	46
   932  006F83  0D                 	db	13
   933  006F84  0A                 	db	10
   934  006F85  00                 	db	0
   935  006F86                     STR_227:
   936  006F86  20                 	db	32
   937  006F87  20                 	db	32
   938  006F88  20                 	db	32
   939  006F89  20                 	db	32
   940  006F8A  4D                 	db	77	;'M'
   941  006F8B  4F                 	db	79	;'O'
   942  006F8C  44                 	db	68	;'D'
   943  006F8D  45                 	db	69	;'E'
   944  006F8E  20                 	db	32
   945  006F8F  2D                 	db	45
   946  006F90  20                 	db	32
   947  006F91  53                 	db	83	;'S'
   948  006F92  65                 	db	101	;'e'
   949  006F93  74                 	db	116	;'t'
   950  006F94  20                 	db	32
   951  006F95  61                 	db	97	;'a'
   952  006F96  64                 	db	100	;'d'
   953  006F97  61                 	db	97	;'a'
   954  006F98  70                 	db	112	;'p'
   955  006F99  74                 	db	116	;'t'
   956  006F9A  65                 	db	101	;'e'
   957  006F9B  72                 	db	114	;'r'
   958  006F9C  20                 	db	32
   959  006F9D  6D                 	db	109	;'m'
   960  006F9E  6F                 	db	111	;'o'
   961  006F9F  64                 	db	100	;'d'
   962  006FA0  65                 	db	101	;'e'
   963  006FA1  20                 	db	32
   964  006FA2  74                 	db	116	;'t'
   965  006FA3  68                 	db	104	;'h'
   966  006FA4  61                 	db	97	;'a'
   967  006FA5  74                 	db	116	;'t'
   968  006FA6  20                 	db	32
   969  006FA7  73                 	db	115	;'s'
   970  006FA8  68                 	db	104	;'h'
   971  006FA9  6F                 	db	111	;'o'
   972  006FAA  75                 	db	117	;'u'
   973  006FAB  6C                 	db	108	;'l'
   974  006FAC  64                 	db	100	;'d'
   975  006FAD  20                 	db	32
   976  006FAE  62                 	db	98	;'b'
   977  006FAF  65                 	db	101	;'e'
   978  006FB0  20                 	db	32
   979  006FB1  75                 	db	117	;'u'
   980  006FB2  73                 	db	115	;'s'
   981  006FB3  65                 	db	101	;'e'
   982  006FB4  64                 	db	100	;'d'
   983  006FB5  20                 	db	32
   984  006FB6  6F                 	db	111	;'o'
   985  006FB7  6E                 	db	110	;'n'
   986  006FB8  20                 	db	32
   987  006FB9  73                 	db	115	;'s'
   988  006FBA  74                 	db	116	;'t'
   989  006FBB  61                 	db	97	;'a'
   990  006FBC  72                 	db	114	;'r'
   991  006FBD  74                 	db	116	;'t'
   992  006FBE  75                 	db	117	;'u'
   993  006FBF  70                 	db	112	;'p'
   994  006FC0  2E                 	db	46
   995  006FC1  0D                 	db	13
   996  006FC2  0A                 	db	10
   997  006FC3  00                 	db	0
   998  006FC4                     STR_187:
   999  006FC4  54                 	db	84	;'T'
  1000  006FC5  72                 	db	114	;'r'
  1001  006FC6  61                 	db	97	;'a'
  1002  006FC7  6E                 	db	110	;'n'
  1003  006FC8  73                 	db	115	;'s'
  1004  006FC9  6D                 	db	109	;'m'
  1005  006FCA  69                 	db	105	;'i'
  1006  006FCB  74                 	db	116	;'t'
  1007  006FCC  74                 	db	116	;'t'
  1008  006FCD  65                 	db	101	;'e'
  1009  006FCE  72                 	db	114	;'r'
  1010  006FCF  20                 	db	32
  1011  006FD0  69                 	db	105	;'i'
  1012  006FD1  6E                 	db	110	;'n'
  1013  006FD2  20                 	db	32
  1014  006FD3  45                 	db	69	;'E'
  1015  006FD4  72                 	db	114	;'r'
  1016  006FD5  72                 	db	114	;'r'
  1017  006FD6  6F                 	db	111	;'o'
  1018  006FD7  72                 	db	114	;'r'
  1019  006FD8  20                 	db	32
  1020  006FD9  53                 	db	83	;'S'
  1021  006FDA  74                 	db	116	;'t'
  1022  006FDB  61                 	db	97	;'a'
  1023  006FDC  74                 	db	116	;'t'
  1024  006FDD  65                 	db	101	;'e'
  1025  006FDE  20                 	db	32
  1026  006FDF  57                 	db	87	;'W'
  1027  006FE0  61                 	db	97	;'a'
  1028  006FE1  72                 	db	114	;'r'
  1029  006FE2  6E                 	db	110	;'n'
  1030  006FE3  69                 	db	105	;'i'
  1031  006FE4  6E                 	db	110	;'n'
  1032  006FE5  67                 	db	103	;'g'
  1033  006FE6  20                 	db	32
  1034  006FE7  28                 	db	40
  1035  006FE8  31                 	db	49	;'1'
  1036  006FE9  32                 	db	50	;'2'
  1037  006FEA  38                 	db	56	;'8'
  1038  006FEB  20                 	db	32
  1039  006FEC  3E                 	db	62	;'>'
  1040  006FED  20                 	db	32
  1041  006FEE  54                 	db	84	;'T'
  1042  006FEF  45                 	db	69	;'E'
  1043  006FF0  52                 	db	82	;'R'
  1044  006FF1  52                 	db	82	;'R'
  1045  006FF2  43                 	db	67	;'C'
  1046  006FF3  4E                 	db	78	;'N'
  1047  006FF4  54                 	db	84	;'T'
  1048  006FF5  20                 	db	32
  1049  006FF6  3F                 	db	63	;'?'
  1050  006FF7  20                 	db	32
  1051  006FF8  39                 	db	57	;'9'
  1052  006FF9  36                 	db	54	;'6'
  1053  006FFA  29                 	db	41
  1054  006FFB  0D                 	db	13
  1055  006FFC  0A                 	db	10
  1056  006FFD  00                 	db	0
  1057  006FFE                     STR_189:
  1058  006FFE  54                 	db	84	;'T'
  1059  006FFF  72                 	db	114	;'r'
  1060  007000  61                 	db	97	;'a'
  1061  007001  6E                 	db	110	;'n'
  1062  007002  73                 	db	115	;'s'
  1063  007003  6D                 	db	109	;'m'
  1064  007004  69                 	db	105	;'i'
  1065  007005  74                 	db	116	;'t'
  1066  007006  74                 	db	116	;'t'
  1067  007007  65                 	db	101	;'e'
  1068  007008  72                 	db	114	;'r'
  1069  007009  20                 	db	32
  1070  00700A  69                 	db	105	;'i'
  1071  00700B  6E                 	db	110	;'n'
  1072  00700C  20                 	db	32
  1073  00700D  45                 	db	69	;'E'
  1074  00700E  72                 	db	114	;'r'
  1075  00700F  72                 	db	114	;'r'
  1076  007010  6F                 	db	111	;'o'
  1077  007011  72                 	db	114	;'r'
  1078  007012  20                 	db	32
  1079  007013  53                 	db	83	;'S'
  1080  007014  74                 	db	116	;'t'
  1081  007015  61                 	db	97	;'a'
  1082  007016  74                 	db	116	;'t'
  1083  007017  65                 	db	101	;'e'
  1084  007018  20                 	db	32
  1085  007019  42                 	db	66	;'B'
  1086  00701A  75                 	db	117	;'u'
  1087  00701B  73                 	db	115	;'s'
  1088  00701C  20                 	db	32
  1089  00701D  50                 	db	80	;'P'
  1090  00701E  61                 	db	97	;'a'
  1091  00701F  73                 	db	115	;'s'
  1092  007020  73                 	db	115	;'s'
  1093  007021  69                 	db	105	;'i'
  1094  007022  76                 	db	118	;'v'
  1095  007023  65                 	db	101	;'e'
  1096  007024  20                 	db	32
  1097  007025  28                 	db	40
  1098  007026  54                 	db	84	;'T'
  1099  007027  45                 	db	69	;'E'
  1100  007028  52                 	db	82	;'R'
  1101  007029  52                 	db	82	;'R'
  1102  00702A  43                 	db	67	;'C'
  1103  00702B  4E                 	db	78	;'N'
  1104  00702C  54                 	db	84	;'T'
  1105  00702D  20                 	db	32
  1106  00702E  3F                 	db	63	;'?'
  1107  00702F  20                 	db	32
  1108  007030  31                 	db	49	;'1'
  1109  007031  32                 	db	50	;'2'
  1110  007032  38                 	db	56	;'8'
  1111  007033  29                 	db	41
  1112  007034  0D                 	db	13
  1113  007035  0A                 	db	10
  1114  007036  00                 	db	0
  1115  007037                     STR_208:
  1116  007037  20                 	db	32
  1117  007038  20                 	db	32
  1118  007039  20                 	db	32
  1119  00703A  20                 	db	32
  1120  00703B  20                 	db	32
  1121  00703C  46                 	db	70	;'F'
  1122  00703D  6F                 	db	111	;'o'
  1123  00703E  72                 	db	114	;'r'
  1124  00703F  6D                 	db	109	;'m'
  1125  007040  61                 	db	97	;'a'
  1126  007041  74                 	db	116	;'t'
  1127  007042  3A                 	db	58	;':'
  1128  007043  20                 	db	32
  1129  007044  70                 	db	112	;'p'
  1130  007045  72                 	db	114	;'r'
  1131  007046  69                 	db	105	;'i'
  1132  007047  6F                 	db	111	;'o'
  1133  007048  72                 	db	114	;'r'
  1134  007049  69                 	db	105	;'i'
  1135  00704A  74                 	db	116	;'t'
  1136  00704B  79                 	db	121	;'y'
  1137  00704C  2C                 	db	44
  1138  00704D  63                 	db	99	;'c'
  1139  00704E  6C                 	db	108	;'l'
  1140  00704F  61                 	db	97	;'a'
  1141  007050  73                 	db	115	;'s'
  1142  007051  73                 	db	115	;'s'
  1143  007052  2C                 	db	44
  1144  007053  74                 	db	116	;'t'
  1145  007054  79                 	db	121	;'y'
  1146  007055  70                 	db	112	;'p'
  1147  007056  65                 	db	101	;'e'
  1148  007057  2C                 	db	44
  1149  007058  6E                 	db	110	;'n'
  1150  007059  6F                 	db	111	;'o'
  1151  00705A  64                 	db	100	;'d'
  1152  00705B  65                 	db	101	;'e'
  1153  00705C  69                 	db	105	;'i'
  1154  00705D  64                 	db	100	;'d'
  1155  00705E  2C                 	db	44
  1156  00705F  63                 	db	99	;'c'
  1157  007060  6F                 	db	111	;'o'
  1158  007061  75                 	db	117	;'u'
  1159  007062  6E                 	db	110	;'n'
  1160  007063  74                 	db	116	;'t'
  1161  007064  2C                 	db	44
  1162  007065  64                 	db	100	;'d'
  1163  007066  61                 	db	97	;'a'
  1164  007067  74                 	db	116	;'t'
  1165  007068  61                 	db	97	;'a'
  1166  007069  2C                 	db	44
  1167  00706A  2C                 	db	44
  1168  00706B  2C                 	db	44
  1169  00706C  0D                 	db	13
  1170  00706D  0A                 	db	10
  1171  00706E  00                 	db	0
  1172  00706F                     STR_194:
  1173  00706F  52                 	db	82	;'R'
  1174  007070  65                 	db	101	;'e'
  1175  007071  63                 	db	99	;'c'
  1176  007072  65                 	db	101	;'e'
  1177  007073  69                 	db	105	;'i'
  1178  007074  76                 	db	118	;'v'
  1179  007075  65                 	db	101	;'e'
  1180  007076  72                 	db	114	;'r'
  1181  007077  20                 	db	32
  1182  007078  69                 	db	105	;'i'
  1183  007079  6E                 	db	110	;'n'
  1184  00707A  20                 	db	32
  1185  00707B  45                 	db	69	;'E'
  1186  00707C  72                 	db	114	;'r'
  1187  00707D  72                 	db	114	;'r'
  1188  00707E  6F                 	db	111	;'o'
  1189  00707F  72                 	db	114	;'r'
  1190  007080  20                 	db	32
  1191  007081  53                 	db	83	;'S'
  1192  007082  74                 	db	116	;'t'
  1193  007083  61                 	db	97	;'a'
  1194  007084  74                 	db	116	;'t'
  1195  007085  65                 	db	101	;'e'
  1196  007086  20                 	db	32
  1197  007087  57                 	db	87	;'W'
  1198  007088  61                 	db	97	;'a'
  1199  007089  72                 	db	114	;'r'
  1200  00708A  6E                 	db	110	;'n'
  1201  00708B  69                 	db	105	;'i'
  1202  00708C  6E                 	db	110	;'n'
  1203  00708D  67                 	db	103	;'g'
  1204  00708E  20                 	db	32
  1205  00708F  28                 	db	40
  1206  007090  31                 	db	49	;'1'
  1207  007091  32                 	db	50	;'2'
  1208  007092  38                 	db	56	;'8'
  1209  007093  20                 	db	32
  1210  007094  3E                 	db	62	;'>'
  1211  007095  20                 	db	32
  1212  007096  52                 	db	82	;'R'
  1213  007097  45                 	db	69	;'E'
  1214  007098  52                 	db	82	;'R'
  1215  007099  52                 	db	82	;'R'
  1216  00709A  43                 	db	67	;'C'
  1217  00709B  4E                 	db	78	;'N'
  1218  00709C  54                 	db	84	;'T'
  1219  00709D  20                 	db	32
  1220  00709E  3F                 	db	63	;'?'
  1221  00709F  20                 	db	32
  1222  0070A0  39                 	db	57	;'9'
  1223  0070A1  36                 	db	54	;'6'
  1224  0070A2  29                 	db	41
  1225  0070A3  0D                 	db	13
  1226  0070A4  0A                 	db	10
  1227  0070A5  00                 	db	0
  1228  0070A6                     STR_226:
  1229  0070A6  20                 	db	32
  1230  0070A7  20                 	db	32
  1231  0070A8  20                 	db	32
  1232  0070A9  20                 	db	32
  1233  0070AA  53                 	db	83	;'S'
  1234  0070AB  54                 	db	84	;'T'
  1235  0070AC  41                 	db	65	;'A'
  1236  0070AD  52                 	db	82	;'R'
  1237  0070AE  54                 	db	84	;'T'
  1238  0070AF  49                 	db	73	;'I'
  1239  0070B0  46                 	db	70	;'F'
  1240  0070B1  20                 	db	32
  1241  0070B2  2D                 	db	45
  1242  0070B3  20                 	db	32
  1243  0070B4  53                 	db	83	;'S'
  1244  0070B5  65                 	db	101	;'e'
  1245  0070B6  74                 	db	116	;'t'
  1246  0070B7  20                 	db	32
  1247  0070B8  69                 	db	105	;'i'
  1248  0070B9  6E                 	db	110	;'n'
  1249  0070BA  74                 	db	116	;'t'
  1250  0070BB  65                 	db	101	;'e'
  1251  0070BC  72                 	db	114	;'r'
  1252  0070BD  66                 	db	102	;'f'
  1253  0070BE  61                 	db	97	;'a'
  1254  0070BF  63                 	db	99	;'c'
  1255  0070C0  65                 	db	101	;'e'
  1256  0070C1  20                 	db	32
  1257  0070C2  73                 	db	115	;'s'
  1258  0070C3  74                 	db	116	;'t'
  1259  0070C4  61                 	db	97	;'a'
  1260  0070C5  74                 	db	116	;'t'
  1261  0070C6  65                 	db	101	;'e'
  1262  0070C7  20                 	db	32
  1263  0070C8  74                 	db	116	;'t'
  1264  0070C9  6F                 	db	111	;'o'
  1265  0070CA  20                 	db	32
  1266  0070CB  75                 	db	117	;'u'
  1267  0070CC  73                 	db	115	;'s'
  1268  0070CD  65                 	db	101	;'e'
  1269  0070CE  20                 	db	32
  1270  0070CF  6F                 	db	111	;'o'
  1271  0070D0  6E                 	db	110	;'n'
  1272  0070D1  20                 	db	32
  1273  0070D2  73                 	db	115	;'s'
  1274  0070D3  74                 	db	116	;'t'
  1275  0070D4  61                 	db	97	;'a'
  1276  0070D5  72                 	db	114	;'r'
  1277  0070D6  74                 	db	116	;'t'
  1278  0070D7  75                 	db	117	;'u'
  1279  0070D8  70                 	db	112	;'p'
  1280  0070D9  2E                 	db	46
  1281  0070DA  0D                 	db	13
  1282  0070DB  0A                 	db	10
  1283  0070DC  00                 	db	0
  1284  0070DD  50                 	db	80	;'P'
  1285  0070DE  72                 	db	114	;'r'
  1286  0070DF  65                 	db	101	;'e'
  1287  0070E0  73                 	db	115	;'s'
  1288  0070E1  73                 	db	115	;'s'
  1289  0070E2  20                 	db	32
  1290  0070E3  27                 	db	39
  1291  0070E4  76                 	db	118	;'v'
  1292  0070E5  27                 	db	39
  1293  0070E6  20                 	db	32
  1294  0070E7  77                 	db	119	;'w'
  1295  0070E8  69                 	db	105	;'i'
  1296  0070E9  74                 	db	116	;'t'
  1297  0070EA  68                 	db	104	;'h'
  1298  0070EB  69                 	db	105	;'i'
  1299  0070EC  6E                 	db	110	;'n'
  1300  0070ED  20                 	db	32
  1301  0070EE  74                 	db	116	;'t'
  1302  0070EF  68                 	db	104	;'h'
  1303  0070F0  72                 	db	114	;'r'
  1304  0070F1  65                 	db	101	;'e'
  1305  0070F2  65                 	db	101	;'e'
  1306  0070F3  20                 	db	32
  1307  0070F4  73                 	db	115	;'s'
  1308  0070F5  65                 	db	101	;'e'
  1309  0070F6  63                 	db	99	;'c'
  1310  0070F7  6F                 	db	111	;'o'
  1311  0070F8  6E                 	db	110	;'n'
  1312  0070F9  64                 	db	100	;'d'
  1313  0070FA  73                 	db	115	;'s'
  1314  0070FB  20                 	db	32
  1315  0070FC  74                 	db	116	;'t'
  1316  0070FD  6F                 	db	111	;'o'
  1317  0070FE  20                 	db	32
  1318  0070FF  65                 	db	101	;'e'
  1319  007100  6E                 	db	110	;'n'
  1320  007101  74                 	db	116	;'t'
  1321  007102  65                 	db	101	;'e'
  1322  007103  72                 	db	114	;'r'
  1323  007104  20                 	db	32
  1324  007105  76                 	db	118	;'v'
  1325  007106  65                 	db	101	;'e'
  1326  007107  72                 	db	114	;'r'
  1327  007108  62                 	db	98	;'b'
  1328  007109  6F                 	db	111	;'o'
  1329  00710A  73                 	db	115	;'s'
  1330  00710B  65                 	db	101	;'e'
  1331  00710C  20                 	db	32
  1332  00710D  6D                 	db	109	;'m'
  1333  00710E  6F                 	db	111	;'o'
  1334  00710F  64                 	db	100	;'d'
  1335  007110  65                 	db	101	;'e'
  1336  007111  0D                 	db	13
  1337  007112  0A                 	db	10
  1338  007113  00                 	db	0
  1339  007114                     STR_195:
  1340  007114  52                 	db	82	;'R'
  1341  007115  65                 	db	101	;'e'
  1342  007116  63                 	db	99	;'c'
  1343  007117  65                 	db	101	;'e'
  1344  007118  69                 	db	105	;'i'
  1345  007119  76                 	db	118	;'v'
  1346  00711A  65                 	db	101	;'e'
  1347  00711B  72                 	db	114	;'r'
  1348  00711C  20                 	db	32
  1349  00711D  69                 	db	105	;'i'
  1350  00711E  6E                 	db	110	;'n'
  1351  00711F  20                 	db	32
  1352  007120  45                 	db	69	;'E'
  1353  007121  72                 	db	114	;'r'
  1354  007122  72                 	db	114	;'r'
  1355  007123  6F                 	db	111	;'o'
  1356  007124  72                 	db	114	;'r'
  1357  007125  20                 	db	32
  1358  007126  53                 	db	83	;'S'
  1359  007127  74                 	db	116	;'t'
  1360  007128  61                 	db	97	;'a'
  1361  007129  74                 	db	116	;'t'
  1362  00712A  65                 	db	101	;'e'
  1363  00712B  20                 	db	32
  1364  00712C  42                 	db	66	;'B'
  1365  00712D  75                 	db	117	;'u'
  1366  00712E  73                 	db	115	;'s'
  1367  00712F  20                 	db	32
  1368  007130  50                 	db	80	;'P'
  1369  007131  61                 	db	97	;'a'
  1370  007132  73                 	db	115	;'s'
  1371  007133  73                 	db	115	;'s'
  1372  007134  69                 	db	105	;'i'
  1373  007135  76                 	db	118	;'v'
  1374  007136  65                 	db	101	;'e'
  1375  007137  20                 	db	32
  1376  007138  28                 	db	40
  1377  007139  52                 	db	82	;'R'
  1378  00713A  45                 	db	69	;'E'
  1379  00713B  52                 	db	82	;'R'
  1380  00713C  52                 	db	82	;'R'
  1381  00713D  43                 	db	67	;'C'
  1382  00713E  4E                 	db	78	;'N'
  1383  00713F  54                 	db	84	;'T'
  1384  007140  20                 	db	32
  1385  007141  3F                 	db	63	;'?'
  1386  007142  20                 	db	32
  1387  007143  31                 	db	49	;'1'
  1388  007144  32                 	db	50	;'2'
  1389  007145  38                 	db	56	;'8'
  1390  007146  29                 	db	41
  1391  007147  0D                 	db	13
  1392  007148  0A                 	db	10
  1393  007149  00                 	db	0
  1394  00714A                     STR_67:
  1395  00714A  2D                 	db	45
  1396  00714B  45                 	db	69	;'E'
  1397  00714C  52                 	db	82	;'R'
  1398  00714D  52                 	db	82	;'R'
  1399  00714E  4F                 	db	79	;'O'
  1400  00714F  52                 	db	82	;'R'
  1401  007150  20                 	db	32
  1402  007151  2D                 	db	45
  1403  007152  20                 	db	32
  1404  007153  4F                 	db	79	;'O'
  1405  007154  6E                 	db	110	;'n'
  1406  007155  65                 	db	101	;'e'
  1407  007156  20                 	db	32
  1408  007157  6F                 	db	111	;'o'
  1409  007158  72                 	db	114	;'r'
  1410  007159  20                 	db	32
  1411  00715A  6D                 	db	109	;'m'
  1412  00715B  6F                 	db	111	;'o'
  1413  00715C  72                 	db	114	;'r'
  1414  00715D  65                 	db	101	;'e'
  1415  00715E  20                 	db	32
  1416  00715F  72                 	db	114	;'r'
  1417  007160  65                 	db	101	;'e'
  1418  007161  67                 	db	103	;'g'
  1419  007162  69                 	db	105	;'i'
  1420  007163  73                 	db	115	;'s'
  1421  007164  74                 	db	116	;'t'
  1422  007165  65                 	db	101	;'e'
  1423  007166  72                 	db	114	;'r'
  1424  007167  28                 	db	40
  1425  007168  73                 	db	115	;'s'
  1426  007169  29                 	db	41
  1427  00716A  20                 	db	32
  1428  00716B  63                 	db	99	;'c'
  1429  00716C  6F                 	db	111	;'o'
  1430  00716D  75                 	db	117	;'u'
  1431  00716E  6C                 	db	108	;'l'
  1432  00716F  64                 	db	100	;'d'
  1433  007170  20                 	db	32
  1434  007171  6E                 	db	110	;'n'
  1435  007172  6F                 	db	111	;'o'
  1436  007173  74                 	db	116	;'t'
  1437  007174  20                 	db	32
  1438  007175  62                 	db	98	;'b'
  1439  007176  65                 	db	101	;'e'
  1440  007177  20                 	db	32
  1441  007178  72                 	db	114	;'r'
  1442  007179  65                 	db	101	;'e'
  1443  00717A  61                 	db	97	;'a'
  1444  00717B  64                 	db	100	;'d'
  1445  00717C  2E                 	db	46
  1446  00717D  0D                 	db	13
  1447  00717E  0A                 	db	10
  1448  00717F  00                 	db	0
  1449  007180                     STR_188:
  1450  007180  54                 	db	84	;'T'
  1451  007181  72                 	db	114	;'r'
  1452  007182  61                 	db	97	;'a'
  1453  007183  6E                 	db	110	;'n'
  1454  007184  73                 	db	115	;'s'
  1455  007185  6D                 	db	109	;'m'
  1456  007186  69                 	db	105	;'i'
  1457  007187  74                 	db	116	;'t'
  1458  007188  74                 	db	116	;'t'
  1459  007189  65                 	db	101	;'e'
  1460  00718A  72                 	db	114	;'r'
  1461  00718B  20                 	db	32
  1462  00718C  69                 	db	105	;'i'
  1463  00718D  6E                 	db	110	;'n'
  1464  00718E  20                 	db	32
  1465  00718F  45                 	db	69	;'E'
  1466  007190  72                 	db	114	;'r'
  1467  007191  72                 	db	114	;'r'
  1468  007192  6F                 	db	111	;'o'
  1469  007193  72                 	db	114	;'r'
  1470  007194  20                 	db	32
  1471  007195  53                 	db	83	;'S'
  1472  007196  74                 	db	116	;'t'
  1473  007197  61                 	db	97	;'a'
  1474  007198  74                 	db	116	;'t'
  1475  007199  65                 	db	101	;'e'
  1476  00719A  20                 	db	32
  1477  00719B  42                 	db	66	;'B'
  1478  00719C  75                 	db	117	;'u'
  1479  00719D  73                 	db	115	;'s'
  1480  00719E  20                 	db	32
  1481  00719F  4F                 	db	79	;'O'
  1482  0071A0  46                 	db	70	;'F'
  1483  0071A1  46                 	db	70	;'F'
  1484  0071A2  20                 	db	32
  1485  0071A3  28                 	db	40
  1486  0071A4  54                 	db	84	;'T'
  1487  0071A5  45                 	db	69	;'E'
  1488  0071A6  52                 	db	82	;'R'
  1489  0071A7  52                 	db	82	;'R'
  1490  0071A8  43                 	db	67	;'C'
  1491  0071A9  4E                 	db	78	;'N'
  1492  0071AA  54                 	db	84	;'T'
  1493  0071AB  20                 	db	32
  1494  0071AC  3F                 	db	63	;'?'
  1495  0071AD  20                 	db	32
  1496  0071AE  32                 	db	50	;'2'
  1497  0071AF  35                 	db	53	;'5'
  1498  0071B0  36                 	db	54	;'6'
  1499  0071B1  29                 	db	41
  1500  0071B2  0D                 	db	13
  1501  0071B3  0A                 	db	10
  1502  0071B4  00                 	db	0
  1503  0071B5                     STR_196:
  1504  0071B5  54                 	db	84	;'T'
  1505  0071B6  72                 	db	114	;'r'
  1506  0071B7  61                 	db	97	;'a'
  1507  0071B8  6E                 	db	110	;'n'
  1508  0071B9  73                 	db	115	;'s'
  1509  0071BA  6D                 	db	109	;'m'
  1510  0071BB  69                 	db	105	;'i'
  1511  0071BC  74                 	db	116	;'t'
  1512  0071BD  74                 	db	116	;'t'
  1513  0071BE  65                 	db	101	;'e'
  1514  0071BF  72                 	db	114	;'r'
  1515  0071C0  20                 	db	32
  1516  0071C1  6F                 	db	111	;'o'
  1517  0071C2  72                 	db	114	;'r'
  1518  0071C3  20                 	db	32
  1519  0071C4  52                 	db	82	;'R'
  1520  0071C5  65                 	db	101	;'e'
  1521  0071C6  63                 	db	99	;'c'
  1522  0071C7  65                 	db	101	;'e'
  1523  0071C8  69                 	db	105	;'i'
  1524  0071C9  76                 	db	118	;'v'
  1525  0071CA  65                 	db	101	;'e'
  1526  0071CB  72                 	db	114	;'r'
  1527  0071CC  20                 	db	32
  1528  0071CD  69                 	db	105	;'i'
  1529  0071CE  73                 	db	115	;'s'
  1530  0071CF  20                 	db	32
  1531  0071D0  69                 	db	105	;'i'
  1532  0071D1  6E                 	db	110	;'n'
  1533  0071D2  20                 	db	32
  1534  0071D3  45                 	db	69	;'E'
  1535  0071D4  72                 	db	114	;'r'
  1536  0071D5  72                 	db	114	;'r'
  1537  0071D6  6F                 	db	111	;'o'
  1538  0071D7  72                 	db	114	;'r'
  1539  0071D8  20                 	db	32
  1540  0071D9  53                 	db	83	;'S'
  1541  0071DA  74                 	db	116	;'t'
  1542  0071DB  61                 	db	97	;'a'
  1543  0071DC  74                 	db	116	;'t'
  1544  0071DD  65                 	db	101	;'e'
  1545  0071DE  20                 	db	32
  1546  0071DF  57                 	db	87	;'W'
  1547  0071E0  61                 	db	97	;'a'
  1548  0071E1  72                 	db	114	;'r'
  1549  0071E2  6E                 	db	110	;'n'
  1550  0071E3  69                 	db	105	;'i'
  1551  0071E4  6E                 	db	110	;'n'
  1552  0071E5  67                 	db	103	;'g'
  1553  0071E6  0D                 	db	13
  1554  0071E7  0A                 	db	10
  1555  0071E8  00                 	db	0
  1556  0071E9                     STR_202:
  1557  0071E9  4C                 	db	76	;'L'
  1558  0071EA  49                 	db	73	;'I'
  1559  0071EB  53                 	db	83	;'S'
  1560  0071EC  54                 	db	84	;'T'
  1561  0071ED  45                 	db	69	;'E'
  1562  0071EE  4E                 	db	78	;'N'
  1563  0071EF  20                 	db	32
  1564  0071F0  2D                 	db	45
  1565  0071F1  20                 	db	32
  1566  0071F2  4F                 	db	79	;'O'
  1567  0071F3  70                 	db	112	;'p'
  1568  0071F4  65                 	db	101	;'e'
  1569  0071F5  6E                 	db	110	;'n'
  1570  0071F6  20                 	db	32
  1571  0071F7  43                 	db	67	;'C'
  1572  0071F8  41                 	db	65	;'A'
  1573  0071F9  4E                 	db	78	;'N'
  1574  0071FA  20                 	db	32
  1575  0071FB  69                 	db	105	;'i'
  1576  0071FC  6E                 	db	110	;'n'
  1577  0071FD  74                 	db	116	;'t'
  1578  0071FE  65                 	db	101	;'e'
  1579  0071FF  72                 	db	114	;'r'
  1580  007200  66                 	db	102	;'f'
  1581  007201  61                 	db	97	;'a'
  1582  007202  63                 	db	99	;'c'
  1583  007203  65                 	db	101	;'e'
  1584  007204  20                 	db	32
  1585  007205  69                 	db	105	;'i'
  1586  007206  6E                 	db	110	;'n'
  1587  007207  20                 	db	32
  1588  007208  6C                 	db	108	;'l'
  1589  007209  69                 	db	105	;'i'
  1590  00720A  73                 	db	115	;'s'
  1591  00720B  74                 	db	116	;'t'
  1592  00720C  65                 	db	101	;'e'
  1593  00720D  6E                 	db	110	;'n'
  1594  00720E  20                 	db	32
  1595  00720F  6F                 	db	111	;'o'
  1596  007210  6E                 	db	110	;'n'
  1597  007211  6C                 	db	108	;'l'
  1598  007212  79                 	db	121	;'y'
  1599  007213  20                 	db	32
  1600  007214  6D                 	db	109	;'m'
  1601  007215  6F                 	db	111	;'o'
  1602  007216  64                 	db	100	;'d'
  1603  007217  65                 	db	101	;'e'
  1604  007218  2E                 	db	46
  1605  007219  0D                 	db	13
  1606  00721A  0A                 	db	10
  1607  00721B  00                 	db	0
  1608  00721C                     STR_96:
  1609  00721C  2D                 	db	45
  1610  00721D  45                 	db	69	;'E'
  1611  00721E  52                 	db	82	;'R'
  1612  00721F  52                 	db	82	;'R'
  1613  007220  4F                 	db	79	;'O'
  1614  007221  52                 	db	82	;'R'
  1615  007222  20                 	db	32
  1616  007223  2D                 	db	45
  1617  007224  20                 	db	32
  1618  007225  4D                 	db	77	;'M'
  1619  007226  61                 	db	97	;'a'
  1620  007227  73                 	db	115	;'s'
  1621  007228  6B                 	db	107	;'k'
  1622  007229  20                 	db	32
  1623  00722A  6E                 	db	110	;'n'
  1624  00722B  75                 	db	117	;'u'
  1625  00722C  6D                 	db	109	;'m'
  1626  00722D  62                 	db	98	;'b'
  1627  00722E  65                 	db	101	;'e'
  1628  00722F  72                 	db	114	;'r'
  1629  007230  20                 	db	32
  1630  007231  63                 	db	99	;'c'
  1631  007232  61                 	db	97	;'a'
  1632  007233  6E                 	db	110	;'n'
  1633  007234  20                 	db	32
  1634  007235  6F                 	db	111	;'o'
  1635  007236  6E                 	db	110	;'n'
  1636  007237  6C                 	db	108	;'l'
  1637  007238  79                 	db	121	;'y'
  1638  007239  20                 	db	32
  1639  00723A  62                 	db	98	;'b'
  1640  00723B  65                 	db	101	;'e'
  1641  00723C  20                 	db	32
  1642  00723D  73                 	db	115	;'s'
  1643  00723E  65                 	db	101	;'e'
  1644  00723F  74                 	db	116	;'t'
  1645  007240  20                 	db	32
  1646  007241  61                 	db	97	;'a'
  1647  007242  73                 	db	115	;'s'
  1648  007243  20                 	db	32
  1649  007244  30                 	db	48	;'0'
  1650  007245  20                 	db	32
  1651  007246  6F                 	db	111	;'o'
  1652  007247  72                 	db	114	;'r'
  1653  007248  20                 	db	32
  1654  007249  31                 	db	49	;'1'
  1655  00724A  2E                 	db	46
  1656  00724B  0D                 	db	13
  1657  00724C  0A                 	db	10
  1658  00724D  00                 	db	0
  1659  00724E                     STR_203:
  1660  00724E  4C                 	db	76	;'L'
  1661  00724F  4F                 	db	79	;'O'
  1662  007250  4F                 	db	79	;'O'
  1663  007251  50                 	db	80	;'P'
  1664  007252  42                 	db	66	;'B'
  1665  007253  41                 	db	65	;'A'
  1666  007254  43                 	db	67	;'C'
  1667  007255  4B                 	db	75	;'K'
  1668  007256  20                 	db	32
  1669  007257  2D                 	db	45
  1670  007258  20                 	db	32
  1671  007259  4F                 	db	79	;'O'
  1672  00725A  70                 	db	112	;'p'
  1673  00725B  65                 	db	101	;'e'
  1674  00725C  6E                 	db	110	;'n'
  1675  00725D  20                 	db	32
  1676  00725E  43                 	db	67	;'C'
  1677  00725F  41                 	db	65	;'A'
  1678  007260  4E                 	db	78	;'N'
  1679  007261  20                 	db	32
  1680  007262  69                 	db	105	;'i'
  1681  007263  6E                 	db	110	;'n'
  1682  007264  74                 	db	116	;'t'
  1683  007265  65                 	db	101	;'e'
  1684  007266  72                 	db	114	;'r'
  1685  007267  66                 	db	102	;'f'
  1686  007268  61                 	db	97	;'a'
  1687  007269  63                 	db	99	;'c'
  1688  00726A  65                 	db	101	;'e'
  1689  00726B  20                 	db	32
  1690  00726C  69                 	db	105	;'i'
  1691  00726D  6E                 	db	110	;'n'
  1692  00726E  20                 	db	32
  1693  00726F  6C                 	db	108	;'l'
  1694  007270  6F                 	db	111	;'o'
  1695  007271  6F                 	db	111	;'o'
  1696  007272  70                 	db	112	;'p'
  1697  007273  62                 	db	98	;'b'
  1698  007274  61                 	db	97	;'a'
  1699  007275  63                 	db	99	;'c'
  1700  007276  6B                 	db	107	;'k'
  1701  007277  20                 	db	32
  1702  007278  6D                 	db	109	;'m'
  1703  007279  6F                 	db	111	;'o'
  1704  00727A  64                 	db	100	;'d'
  1705  00727B  65                 	db	101	;'e'
  1706  00727C  2E                 	db	46
  1707  00727D  0D                 	db	13
  1708  00727E  0A                 	db	10
  1709  00727F  00                 	db	0
  1710  007280                     STR_205:
  1711  007280  56                 	db	86	;'V'
  1712  007281  45                 	db	69	;'E'
  1713  007282  52                 	db	82	;'R'
  1714  007283  53                 	db	83	;'S'
  1715  007284  49                 	db	73	;'I'
  1716  007285  4F                 	db	79	;'O'
  1717  007286  4E                 	db	78	;'N'
  1718  007287  20                 	db	32
  1719  007288  2D                 	db	45
  1720  007289  20                 	db	32
  1721  00728A  44                 	db	68	;'D'
  1722  00728B  69                 	db	105	;'i'
  1723  00728C  73                 	db	115	;'s'
  1724  00728D  70                 	db	112	;'p'
  1725  00728E  6C                 	db	108	;'l'
  1726  00728F  61                 	db	97	;'a'
  1727  007290  79                 	db	121	;'y'
  1728  007291  20                 	db	32
  1729  007292  66                 	db	102	;'f'
  1730  007293  69                 	db	105	;'i'
  1731  007294  72                 	db	114	;'r'
  1732  007295  6D                 	db	109	;'m'
  1733  007296  77                 	db	119	;'w'
  1734  007297  61                 	db	97	;'a'
  1735  007298  72                 	db	114	;'r'
  1736  007299  65                 	db	101	;'e'
  1737  00729A  20                 	db	32
  1738  00729B  76                 	db	118	;'v'
  1739  00729C  65                 	db	101	;'e'
  1740  00729D  72                 	db	114	;'r'
  1741  00729E  73                 	db	115	;'s'
  1742  00729F  69                 	db	105	;'i'
  1743  0072A0  6F                 	db	111	;'o'
  1744  0072A1  6E                 	db	110	;'n'
  1745  0072A2  20                 	db	32
  1746  0072A3  69                 	db	105	;'i'
  1747  0072A4  6E                 	db	110	;'n'
  1748  0072A5  66                 	db	102	;'f'
  1749  0072A6  6F                 	db	111	;'o'
  1750  0072A7  72                 	db	114	;'r'
  1751  0072A8  6D                 	db	109	;'m'
  1752  0072A9  61                 	db	97	;'a'
  1753  0072AA  74                 	db	116	;'t'
  1754  0072AB  69                 	db	105	;'i'
  1755  0072AC  6F                 	db	111	;'o'
  1756  0072AD  6E                 	db	110	;'n'
  1757  0072AE  2E                 	db	46
  1758  0072AF  0D                 	db	13
  1759  0072B0  0A                 	db	10
  1760  0072B1  00                 	db	0
  1761  0072B2                     STR_225:
  1762  0072B2  20                 	db	32
  1763  0072B3  20                 	db	32
  1764  0072B4  20                 	db	32
  1765  0072B5  20                 	db	32
  1766  0072B6  20                 	db	32
  1767  0072B7  20                 	db	32
  1768  0072B8  20                 	db	32
  1769  0072B9  20                 	db	32
  1770  0072BA  20                 	db	32
  1771  0072BB  20                 	db	32
  1772  0072BC  20                 	db	32
  1773  0072BD  20                 	db	32
  1774  0072BE  20                 	db	32
  1775  0072BF  20                 	db	32
  1776  0072C0  20                 	db	32
  1777  0072C1  20                 	db	32
  1778  0072C2  46                 	db	70	;'F'
  1779  0072C3  6F                 	db	111	;'o'
  1780  0072C4  72                 	db	114	;'r'
  1781  0072C5  6D                 	db	109	;'m'
  1782  0072C6  61                 	db	97	;'a'
  1783  0072C7  74                 	db	116	;'t'
  1784  0072C8  3A                 	db	58	;':'
  1785  0072C9  20                 	db	32
  1786  0072CA  73                 	db	115	;'s'
  1787  0072CB  65                 	db	101	;'e'
  1788  0072CC  74                 	db	116	;'t'
  1789  0072CD  20                 	db	32
  1790  0072CE  72                 	db	114	;'r'
  1791  0072CF  77                 	db	119	;'w'
  1792  0072D0  74                 	db	116	;'t'
  1793  0072D1  69                 	db	105	;'i'
  1794  0072D2  6D                 	db	109	;'m'
  1795  0072D3  65                 	db	101	;'e'
  1796  0072D4  6F                 	db	111	;'o'
  1797  0072D5  75                 	db	117	;'u'
  1798  0072D6  74                 	db	116	;'t'
  1799  0072D7  20                 	db	32
  1800  0072D8  74                 	db	116	;'t'
  1801  0072D9  69                 	db	105	;'i'
  1802  0072DA  6D                 	db	109	;'m'
  1803  0072DB  65                 	db	101	;'e'
  1804  0072DC  6F                 	db	111	;'o'
  1805  0072DD  75                 	db	117	;'u'
  1806  0072DE  74                 	db	116	;'t'
  1807  0072DF  2E                 	db	46
  1808  0072E0  0D                 	db	13
  1809  0072E1  0A                 	db	10
  1810  0072E2  00                 	db	0
  1811  0072E3                     STR_2:
  1812  0072E3  43                 	db	67	;'C'
  1813  0072E4  6F                 	db	111	;'o'
  1814  0072E5  70                 	db	112	;'p'
  1815  0072E6  79                 	db	121	;'y'
  1816  0072E7  72                 	db	114	;'r'
  1817  0072E8  69                 	db	105	;'i'
  1818  0072E9  67                 	db	103	;'g'
  1819  0072EA  68                 	db	104	;'h'
  1820  0072EB  74                 	db	116	;'t'
  1821  0072EC  20                 	db	32
  1822  0072ED  28                 	db	40
  1823  0072EE  43                 	db	67	;'C'
  1824  0072EF  29                 	db	41
  1825  0072F0  20                 	db	32
  1826  0072F1  32                 	db	50	;'2'
  1827  0072F2  30                 	db	48	;'0'
  1828  0072F3  31                 	db	49	;'1'
  1829  0072F4  34                 	db	52	;'4'
  1830  0072F5  20                 	db	32
  1831  0072F6  47                 	db	71	;'G'
  1832  0072F7  72                 	db	114	;'r'
  1833  0072F8  6F                 	db	111	;'o'
  1834  0072F9  64                 	db	100	;'d'
  1835  0072FA  61                 	db	97	;'a'
  1836  0072FB  6E                 	db	110	;'n'
  1837  0072FC  73                 	db	115	;'s'
  1838  0072FD  20                 	db	32
  1839  0072FE  50                 	db	80	;'P'
  1840  0072FF  61                 	db	97	;'a'
  1841  007300  72                 	db	114	;'r'
  1842  007301  61                 	db	97	;'a'
  1843  007302  64                 	db	100	;'d'
  1844  007303  69                 	db	105	;'i'
  1845  007304  73                 	db	115	;'s'
  1846  007305  20                 	db	32
  1847  007306  41                 	db	65	;'A'
  1848  007307  42                 	db	66	;'B'
  1849  007308  2C                 	db	44
  1850  007309  20                 	db	32
  1851  00730A  53                 	db	83	;'S'
  1852  00730B  77                 	db	119	;'w'
  1853  00730C  65                 	db	101	;'e'
  1854  00730D  64                 	db	100	;'d'
  1855  00730E  65                 	db	101	;'e'
  1856  00730F  6E                 	db	110	;'n'
  1857  007310  0D                 	db	13
  1858  007311  0A                 	db	10
  1859  007312  00                 	db	0
  1860  007313                     STR_223:
  1861  007313  20                 	db	32
  1862  007314  20                 	db	32
  1863  007315  20                 	db	32
  1864  007316  20                 	db	32
  1865  007317  44                 	db	68	;'D'
  1866  007318  45                 	db	69	;'E'
  1867  007319  43                 	db	67	;'C'
  1868  00731A  49                 	db	73	;'I'
  1869  00731B  4D                 	db	77	;'M'
  1870  00731C  41                 	db	65	;'A'
  1871  00731D  4C                 	db	76	;'L'
  1872  00731E  20                 	db	32
  1873  00731F  2D                 	db	45
  1874  007320  20                 	db	32
  1875  007321  44                 	db	68	;'D'
  1876  007322  69                 	db	105	;'i'
  1877  007323  73                 	db	115	;'s'
  1878  007324  70                 	db	112	;'p'
  1879  007325  6C                 	db	108	;'l'
  1880  007326  61                 	db	97	;'a'
  1881  007327  79                 	db	121	;'y'
  1882  007328  20                 	db	32
  1883  007329  6E                 	db	110	;'n'
  1884  00732A  75                 	db	117	;'u'
  1885  00732B  6D                 	db	109	;'m'
  1886  00732C  65                 	db	101	;'e'
  1887  00732D  72                 	db	114	;'r'
  1888  00732E  69                 	db	105	;'i'
  1889  00732F  63                 	db	99	;'c'
  1890  007330  61                 	db	97	;'a'
  1891  007331  6C                 	db	108	;'l'
  1892  007332  73                 	db	115	;'s'
  1893  007333  20                 	db	32
  1894  007334  69                 	db	105	;'i'
  1895  007335  6E                 	db	110	;'n'
  1896  007336  20                 	db	32
  1897  007337  64                 	db	100	;'d'
  1898  007338  65                 	db	101	;'e'
  1899  007339  63                 	db	99	;'c'
  1900  00733A  69                 	db	105	;'i'
  1901  00733B  6D                 	db	109	;'m'
  1902  00733C  61                 	db	97	;'a'
  1903  00733D  6C                 	db	108	;'l'
  1904  00733E  2E                 	db	46
  1905  00733F  0D                 	db	13
  1906  007340  0A                 	db	10
  1907  007341  00                 	db	0
  1908  007342                     STR_222:
  1909  007342  20                 	db	32
  1910  007343  20                 	db	32
  1911  007344  20                 	db	32
  1912  007345  20                 	db	32
  1913  007346  48                 	db	72	;'H'
  1914  007347  45                 	db	69	;'E'
  1915  007348  58                 	db	88	;'X'
  1916  007349  20                 	db	32
  1917  00734A  2D                 	db	45
  1918  00734B  20                 	db	32
  1919  00734C  44                 	db	68	;'D'
  1920  00734D  69                 	db	105	;'i'
  1921  00734E  73                 	db	115	;'s'
  1922  00734F  70                 	db	112	;'p'
  1923  007350  6C                 	db	108	;'l'
  1924  007351  61                 	db	97	;'a'
  1925  007352  79                 	db	121	;'y'
  1926  007353  20                 	db	32
  1927  007354  6E                 	db	110	;'n'
  1928  007355  75                 	db	117	;'u'
  1929  007356  6D                 	db	109	;'m'
  1930  007357  65                 	db	101	;'e'
  1931  007358  72                 	db	114	;'r'
  1932  007359  69                 	db	105	;'i'
  1933  00735A  63                 	db	99	;'c'
  1934  00735B  61                 	db	97	;'a'
  1935  00735C  6C                 	db	108	;'l'
  1936  00735D  73                 	db	115	;'s'
  1937  00735E  20                 	db	32
  1938  00735F  69                 	db	105	;'i'
  1939  007360  6E                 	db	110	;'n'
  1940  007361  20                 	db	32
  1941  007362  68                 	db	104	;'h'
  1942  007363  65                 	db	101	;'e'
  1943  007364  78                 	db	120	;'x'
  1944  007365  61                 	db	97	;'a'
  1945  007366  64                 	db	100	;'d'
  1946  007367  65                 	db	101	;'e'
  1947  007368  63                 	db	99	;'c'
  1948  007369  69                 	db	105	;'i'
  1949  00736A  6D                 	db	109	;'m'
  1950  00736B  61                 	db	97	;'a'
  1951  00736C  6C                 	db	108	;'l'
  1952  00736D  2E                 	db	46
  1953  00736E  0D                 	db	13
  1954  00736F  0A                 	db	10
  1955  007370  00                 	db	0
  1956  007371                     STR_213:
  1957  007371  46                 	db	70	;'F'
  1958  007372  49                 	db	73	;'I'
  1959  007373  4E                 	db	78	;'N'
  1960  007374  44                 	db	68	;'D'
  1961  007375  20                 	db	32
  1962  007376  2D                 	db	45
  1963  007377  20                 	db	32
  1964  007378  46                 	db	70	;'F'
  1965  007379  69                 	db	105	;'i'
  1966  00737A  6E                 	db	110	;'n'
  1967  00737B  64                 	db	100	;'d'
  1968  00737C  20                 	db	32
  1969  00737D  61                 	db	97	;'a'
  1970  00737E  76                 	db	118	;'v'
  1971  00737F  61                 	db	97	;'a'
  1972  007380  69                 	db	105	;'i'
  1973  007381  6C                 	db	108	;'l'
  1974  007382  61                 	db	97	;'a'
  1975  007383  62                 	db	98	;'b'
  1976  007384  6C                 	db	108	;'l'
  1977  007385  65                 	db	101	;'e'
  1978  007386  20                 	db	32
  1979  007387  43                 	db	67	;'C'
  1980  007388  41                 	db	65	;'A'
  1981  007389  4E                 	db	78	;'N'
  1982  00738A  34                 	db	52	;'4'
  1983  00738B  56                 	db	86	;'V'
  1984  00738C  53                 	db	83	;'S'
  1985  00738D  43                 	db	67	;'C'
  1986  00738E  50                 	db	80	;'P'
  1987  00738F  20                 	db	32
  1988  007390  6E                 	db	110	;'n'
  1989  007391  6F                 	db	111	;'o'
  1990  007392  64                 	db	100	;'d'
  1991  007393  65                 	db	101	;'e'
  1992  007394  73                 	db	115	;'s'
  1993  007395  20                 	db	32
  1994  007396  6F                 	db	111	;'o'
  1995  007397  6E                 	db	110	;'n'
  1996  007398  20                 	db	32
  1997  007399  62                 	db	98	;'b'
  1998  00739A  75                 	db	117	;'u'
  1999  00739B  73                 	db	115	;'s'
  2000  00739C  2E                 	db	46
  2001  00739D  0D                 	db	13
  2002  00739E  0A                 	db	10
  2003  00739F  00                 	db	0
  2004  0073A0                     STR_201:
  2005  0073A0  53                 	db	83	;'S'
  2006  0073A1  49                 	db	73	;'I'
  2007  0073A2  4C                 	db	76	;'L'
  2008  0073A3  45                 	db	69	;'E'
  2009  0073A4  4E                 	db	78	;'N'
  2010  0073A5  54                 	db	84	;'T'
  2011  0073A6  20                 	db	32
  2012  0073A7  2D                 	db	45
  2013  0073A8  20                 	db	32
  2014  0073A9  4F                 	db	79	;'O'
  2015  0073AA  70                 	db	112	;'p'
  2016  0073AB  65                 	db	101	;'e'
  2017  0073AC  6E                 	db	110	;'n'
  2018  0073AD  20                 	db	32
  2019  0073AE  43                 	db	67	;'C'
  2020  0073AF  41                 	db	65	;'A'
  2021  0073B0  4E                 	db	78	;'N'
  2022  0073B1  20                 	db	32
  2023  0073B2  69                 	db	105	;'i'
  2024  0073B3  6E                 	db	110	;'n'
  2025  0073B4  74                 	db	116	;'t'
  2026  0073B5  65                 	db	101	;'e'
  2027  0073B6  72                 	db	114	;'r'
  2028  0073B7  66                 	db	102	;'f'
  2029  0073B8  61                 	db	97	;'a'
  2030  0073B9  63                 	db	99	;'c'
  2031  0073BA  65                 	db	101	;'e'
  2032  0073BB  20                 	db	32
  2033  0073BC  69                 	db	105	;'i'
  2034  0073BD  6E                 	db	110	;'n'
  2035  0073BE  20                 	db	32
  2036  0073BF  73                 	db	115	;'s'
  2037  0073C0  69                 	db	105	;'i'
  2038  0073C1  6C                 	db	108	;'l'
  2039  0073C2  65                 	db	101	;'e'
  2040  0073C3  6E                 	db	110	;'n'
  2041  0073C4  74                 	db	116	;'t'
  2042  0073C5  20                 	db	32
  2043  0073C6  6D                 	db	109	;'m'
  2044  0073C7  6F                 	db	111	;'o'
  2045  0073C8  64                 	db	100	;'d'
  2046  0073C9  65                 	db	101	;'e'
  2047  0073CA  2E                 	db	46
  2048  0073CB  0D                 	db	13
  2049  0073CC  0A                 	db	10
  2050  0073CD  00                 	db	0
  2051  0073CE                     STR_206:
  2052  0073CE  49                 	db	73	;'I'
  2053  0073CF  46                 	db	70	;'F'
  2054  0073D0  4D                 	db	77	;'M'
  2055  0073D1  4F                 	db	79	;'O'
  2056  0073D2  44                 	db	68	;'D'
  2057  0073D3  45                 	db	69	;'E'
  2058  0073D4  20                 	db	32
  2059  0073D5  2D                 	db	45
  2060  0073D6  20                 	db	32
  2061  0073D7  44                 	db	68	;'D'
  2062  0073D8  69                 	db	105	;'i'
  2063  0073D9  73                 	db	115	;'s'
  2064  0073DA  70                 	db	112	;'p'
  2065  0073DB  6C                 	db	108	;'l'
  2066  0073DC  61                 	db	97	;'a'
  2067  0073DD  79                 	db	121	;'y'
  2068  0073DE  20                 	db	32
  2069  0073DF  73                 	db	115	;'s'
  2070  0073E0  65                 	db	101	;'e'
  2071  0073E1  6C                 	db	108	;'l'
  2072  0073E2  65                 	db	101	;'e'
  2073  0073E3  63                 	db	99	;'c'
  2074  0073E4  74                 	db	116	;'t'
  2075  0073E5  65                 	db	101	;'e'
  2076  0073E6  64                 	db	100	;'d'
  2077  0073E7  20                 	db	32
  2078  0073E8  69                 	db	105	;'i'
  2079  0073E9  6E                 	db	110	;'n'
  2080  0073EA  74                 	db	116	;'t'
  2081  0073EB  65                 	db	101	;'e'
  2082  0073EC  72                 	db	114	;'r'
  2083  0073ED  66                 	db	102	;'f'
  2084  0073EE  61                 	db	97	;'a'
  2085  0073EF  63                 	db	99	;'c'
  2086  0073F0  65                 	db	101	;'e'
  2087  0073F1  20                 	db	32
  2088  0073F2  6D                 	db	109	;'m'
  2089  0073F3  6F                 	db	111	;'o'
  2090  0073F4  64                 	db	100	;'d'
  2091  0073F5  65                 	db	101	;'e'
  2092  0073F6  2E                 	db	46
  2093  0073F7  0D                 	db	13
  2094  0073F8  0A                 	db	10
  2095  0073F9  00                 	db	0
  2096  0073FA                     STR_200:
  2097  0073FA  4F                 	db	79	;'O'
  2098  0073FB  50                 	db	80	;'P'
  2099  0073FC  45                 	db	69	;'E'
  2100  0073FD  4E                 	db	78	;'N'
  2101  0073FE  20                 	db	32
  2102  0073FF  2D                 	db	45
  2103  007400  20                 	db	32
  2104  007401  4F                 	db	79	;'O'
  2105  007402  70                 	db	112	;'p'
  2106  007403  65                 	db	101	;'e'
  2107  007404  6E                 	db	110	;'n'
  2108  007405  20                 	db	32
  2109  007406  43                 	db	67	;'C'
  2110  007407  41                 	db	65	;'A'
  2111  007408  4E                 	db	78	;'N'
  2112  007409  20                 	db	32
  2113  00740A  69                 	db	105	;'i'
  2114  00740B  6E                 	db	110	;'n'
  2115  00740C  74                 	db	116	;'t'
  2116  00740D  65                 	db	101	;'e'
  2117  00740E  72                 	db	114	;'r'
  2118  00740F  66                 	db	102	;'f'
  2119  007410  61                 	db	97	;'a'
  2120  007411  63                 	db	99	;'c'
  2121  007412  65                 	db	101	;'e'
  2122  007413  20                 	db	32
  2123  007414  69                 	db	105	;'i'
  2124  007415  6E                 	db	110	;'n'
  2125  007416  20                 	db	32
  2126  007417  6E                 	db	110	;'n'
  2127  007418  6F                 	db	111	;'o'
  2128  007419  72                 	db	114	;'r'
  2129  00741A  6D                 	db	109	;'m'
  2130  00741B  61                 	db	97	;'a'
  2131  00741C  6C                 	db	108	;'l'
  2132  00741D  20                 	db	32
  2133  00741E  6D                 	db	109	;'m'
  2134  00741F  6F                 	db	111	;'o'
  2135  007420  64                 	db	100	;'d'
  2136  007421  65                 	db	101	;'e'
  2137  007422  2E                 	db	46
  2138  007423  0D                 	db	13
  2139  007424  0A                 	db	10
  2140  007425  00                 	db	0
  2141  007426                     STR_108:
  2142  007426  2B                 	db	43
  2143  007427  4F                 	db	79	;'O'
  2144  007428  4B                 	db	75	;'K'
  2145  007429  20                 	db	32
  2146  00742A  2D                 	db	45
  2147  00742B  20                 	db	32
  2148  00742C  4E                 	db	78	;'N'
  2149  00742D  75                 	db	117	;'u'
  2150  00742E  6D                 	db	109	;'m'
  2151  00742F  65                 	db	101	;'e'
  2152  007430  72                 	db	114	;'r'
  2153  007431  69                 	db	105	;'i'
  2154  007432  63                 	db	99	;'c'
  2155  007433  61                 	db	97	;'a'
  2156  007434  6C                 	db	108	;'l'
  2157  007435  20                 	db	32
  2158  007436  6F                 	db	111	;'o'
  2159  007437  75                 	db	117	;'u'
  2160  007438  74                 	db	116	;'t'
  2161  007439  70                 	db	112	;'p'
  2162  00743A  75                 	db	117	;'u'
  2163  00743B  74                 	db	116	;'t'
  2164  00743C  20                 	db	32
  2165  00743D  6E                 	db	110	;'n'
  2166  00743E  6F                 	db	111	;'o'
  2167  00743F  77                 	db	119	;'w'
  2168  007440  20                 	db	32
  2169  007441  69                 	db	105	;'i'
  2170  007442  6E                 	db	110	;'n'
  2171  007443  20                 	db	32
  2172  007444  68                 	db	104	;'h'
  2173  007445  65                 	db	101	;'e'
  2174  007446  78                 	db	120	;'x'
  2175  007447  61                 	db	97	;'a'
  2176  007448  64                 	db	100	;'d'
  2177  007449  65                 	db	101	;'e'
  2178  00744A  63                 	db	99	;'c'
  2179  00744B  69                 	db	105	;'i'
  2180  00744C  6D                 	db	109	;'m'
  2181  00744D  61                 	db	97	;'a'
  2182  00744E  6C                 	db	108	;'l'
  2183  00744F  0D                 	db	13
  2184  007450  0A                 	db	10
  2185  007451  00                 	db	0
  2186  007452                     STR_87:
  2187  007452  2D                 	db	45
  2188  007453  45                 	db	69	;'E'
  2189  007454  52                 	db	82	;'R'
  2190  007455  52                 	db	82	;'R'
  2191  007456  4F                 	db	79	;'O'
  2192  007457  52                 	db	82	;'R'
  2193  007458  20                 	db	32
  2194  007459  2D                 	db	45
  2195  00745A  20                 	db	32
  2196  00745B  66                 	db	102	;'f'
  2197  00745C  69                 	db	105	;'i'
  2198  00745D  6C                 	db	108	;'l'
  2199  00745E  74                 	db	116	;'t'
  2200  00745F  65                 	db	101	;'e'
  2201  007460  72                 	db	114	;'r'
  2202  007461  20                 	db	32
  2203  007462  66                 	db	102	;'f'
  2204  007463  6F                 	db	111	;'o'
  2205  007464  72                 	db	114	;'r'
  2206  007465  20                 	db	32
  2207  007466  70                 	db	112	;'p'
  2208  007467  72                 	db	114	;'r'
  2209  007468  69                 	db	105	;'i'
  2210  007469  6F                 	db	111	;'o'
  2211  00746A  72                 	db	114	;'r'
  2212  00746B  69                 	db	105	;'i'
  2213  00746C  74                 	db	116	;'t'
  2214  00746D  79                 	db	121	;'y'
  2215  00746E  20                 	db	32
  2216  00746F  69                 	db	105	;'i'
  2217  007470  73                 	db	115	;'s'
  2218  007471  20                 	db	32
  2219  007472  6D                 	db	109	;'m'
  2220  007473  69                 	db	105	;'i'
  2221  007474  73                 	db	115	;'s'
  2222  007475  73                 	db	115	;'s'
  2223  007476  69                 	db	105	;'i'
  2224  007477  6E                 	db	110	;'n'
  2225  007478  67                 	db	103	;'g'
  2226  007479  0D                 	db	13
  2227  00747A  0A                 	db	10
  2228  00747B  00                 	db	0
  2229  00747C                     STR_93:
  2230  00747C  2D                 	db	45
  2231  00747D  45                 	db	69	;'E'
  2232  00747E  52                 	db	82	;'R'
  2233  00747F  52                 	db	82	;'R'
  2234  007480  4F                 	db	79	;'O'
  2235  007481  52                 	db	82	;'R'
  2236  007482  20                 	db	32
  2237  007483  2D                 	db	45
  2238  007484  20                 	db	32
  2239  007485  66                 	db	102	;'f'
  2240  007486  69                 	db	105	;'i'
  2241  007487  6C                 	db	108	;'l'
  2242  007488  74                 	db	116	;'t'
  2243  007489  65                 	db	101	;'e'
  2244  00748A  72                 	db	114	;'r'
  2245  00748B  20                 	db	32
  2246  00748C  66                 	db	102	;'f'
  2247  00748D  6F                 	db	111	;'o'
  2248  00748E  72                 	db	114	;'r'
  2249  00748F  20                 	db	32
  2250  007490  6E                 	db	110	;'n'
  2251  007491  69                 	db	105	;'i'
  2252  007492  64                 	db	100	;'d'
  2253  007493  65                 	db	101	;'e'
  2254  007494  20                 	db	32
  2255  007495  69                 	db	105	;'i'
  2256  007496  64                 	db	100	;'d'
  2257  007497  20                 	db	32
  2258  007498  69                 	db	105	;'i'
  2259  007499  73                 	db	115	;'s'
  2260  00749A  20                 	db	32
  2261  00749B  6D                 	db	109	;'m'
  2262  00749C  69                 	db	105	;'i'
  2263  00749D  73                 	db	115	;'s'
  2264  00749E  73                 	db	115	;'s'
  2265  00749F  69                 	db	105	;'i'
  2266  0074A0  6E                 	db	110	;'n'
  2267  0074A1  67                 	db	103	;'g'
  2268  0074A2  0D                 	db	13
  2269  0074A3  0A                 	db	10
  2270  0074A4  00                 	db	0
  2271  0074A5                     STR_212:
  2272  0074A5  48                 	db	72	;'H'
  2273  0074A6  45                 	db	69	;'E'
  2274  0074A7  4C                 	db	76	;'L'
  2275  0074A8  50                 	db	80	;'P'
  2276  0074A9  20                 	db	32
  2277  0074AA  2D                 	db	45
  2278  0074AB  20                 	db	32
  2279  0074AC  44                 	db	68	;'D'
  2280  0074AD  69                 	db	105	;'i'
  2281  0074AE  73                 	db	115	;'s'
  2282  0074AF  70                 	db	112	;'p'
  2283  0074B0  6C                 	db	108	;'l'
  2284  0074B1  61                 	db	97	;'a'
  2285  0074B2  79                 	db	121	;'y'
  2286  0074B3  20                 	db	32
  2287  0074B4  74                 	db	116	;'t'
  2288  0074B5  68                 	db	104	;'h'
  2289  0074B6  69                 	db	105	;'i'
  2290  0074B7  73                 	db	115	;'s'
  2291  0074B8  20                 	db	32
  2292  0074B9  68                 	db	104	;'h'
  2293  0074BA  65                 	db	101	;'e'
  2294  0074BB  6C                 	db	108	;'l'
  2295  0074BC  70                 	db	112	;'p'
  2296  0074BD  20                 	db	32
  2297  0074BE  69                 	db	105	;'i'
  2298  0074BF  6E                 	db	110	;'n'
  2299  0074C0  66                 	db	102	;'f'
  2300  0074C1  6F                 	db	111	;'o'
  2301  0074C2  72                 	db	114	;'r'
  2302  0074C3  6D                 	db	109	;'m'
  2303  0074C4  61                 	db	97	;'a'
  2304  0074C5  74                 	db	116	;'t'
  2305  0074C6  69                 	db	105	;'i'
  2306  0074C7  6F                 	db	111	;'o'
  2307  0074C8  6E                 	db	110	;'n'
  2308  0074C9  2E                 	db	46
  2309  0074CA  0D                 	db	13
  2310  0074CB  0A                 	db	10
  2311  0074CC  00                 	db	0
  2312  0074CD                     STR_99:
  2313  0074CD  2D                 	db	45
  2314  0074CE  45                 	db	69	;'E'
  2315  0074CF  52                 	db	82	;'R'
  2316  0074D0  52                 	db	82	;'R'
  2317  0074D1  4F                 	db	79	;'O'
  2318  0074D2  52                 	db	82	;'R'
  2319  0074D3  20                 	db	32
  2320  0074D4  2D                 	db	45
  2321  0074D5  20                 	db	32
  2322  0074D6  6D                 	db	109	;'m'
  2323  0074D7  61                 	db	97	;'a'
  2324  0074D8  73                 	db	115	;'s'
  2325  0074D9  6B                 	db	107	;'k'
  2326  0074DA  20                 	db	32
  2327  0074DB  66                 	db	102	;'f'
  2328  0074DC  6F                 	db	111	;'o'
  2329  0074DD  72                 	db	114	;'r'
  2330  0074DE  20                 	db	32
  2331  0074DF  70                 	db	112	;'p'
  2332  0074E0  72                 	db	114	;'r'
  2333  0074E1  69                 	db	105	;'i'
  2334  0074E2  6F                 	db	111	;'o'
  2335  0074E3  72                 	db	114	;'r'
  2336  0074E4  69                 	db	105	;'i'
  2337  0074E5  74                 	db	116	;'t'
  2338  0074E6  79                 	db	121	;'y'
  2339  0074E7  20                 	db	32
  2340  0074E8  69                 	db	105	;'i'
  2341  0074E9  73                 	db	115	;'s'
  2342  0074EA  20                 	db	32
  2343  0074EB  6D                 	db	109	;'m'
  2344  0074EC  69                 	db	105	;'i'
  2345  0074ED  73                 	db	115	;'s'
  2346  0074EE  73                 	db	115	;'s'
  2347  0074EF  69                 	db	105	;'i'
  2348  0074F0  6E                 	db	110	;'n'
  2349  0074F1  67                 	db	103	;'g'
  2350  0074F2  0D                 	db	13
  2351  0074F3  0A                 	db	10
  2352  0074F4  00                 	db	0
  2353  0074F5                     STR_110:
  2354  0074F5  2B                 	db	43
  2355  0074F6  4F                 	db	79	;'O'
  2356  0074F7  4B                 	db	75	;'K'
  2357  0074F8  20                 	db	32
  2358  0074F9  2D                 	db	45
  2359  0074FA  20                 	db	32
  2360  0074FB  4E                 	db	78	;'N'
  2361  0074FC  75                 	db	117	;'u'
  2362  0074FD  6D                 	db	109	;'m'
  2363  0074FE  65                 	db	101	;'e'
  2364  0074FF  72                 	db	114	;'r'
  2365  007500  69                 	db	105	;'i'
  2366  007501  63                 	db	99	;'c'
  2367  007502  61                 	db	97	;'a'
  2368  007503  6C                 	db	108	;'l'
  2369  007504  20                 	db	32
  2370  007505  6F                 	db	111	;'o'
  2371  007506  75                 	db	117	;'u'
  2372  007507  74                 	db	116	;'t'
  2373  007508  70                 	db	112	;'p'
  2374  007509  75                 	db	117	;'u'
  2375  00750A  74                 	db	116	;'t'
  2376  00750B  20                 	db	32
  2377  00750C  6E                 	db	110	;'n'
  2378  00750D  6F                 	db	111	;'o'
  2379  00750E  77                 	db	119	;'w'
  2380  00750F  20                 	db	32
  2381  007510  69                 	db	105	;'i'
  2382  007511  6E                 	db	110	;'n'
  2383  007512  20                 	db	32
  2384  007513  64                 	db	100	;'d'
  2385  007514  65                 	db	101	;'e'
  2386  007515  63                 	db	99	;'c'
  2387  007516  69                 	db	105	;'i'
  2388  007517  6D                 	db	109	;'m'
  2389  007518  61                 	db	97	;'a'
  2390  007519  6C                 	db	108	;'l'
  2391  00751A  0D                 	db	13
  2392  00751B  0A                 	db	10
  2393  00751C  00                 	db	0
  2394  00751D                     STR_85:
  2395  00751D  2D                 	db	45
  2396  00751E  45                 	db	69	;'E'
  2397  00751F  52                 	db	82	;'R'
  2398  007520  52                 	db	82	;'R'
  2399  007521  4F                 	db	79	;'O'
  2400  007522  52                 	db	82	;'R'
  2401  007523  20                 	db	32
  2402  007524  2D                 	db	45
  2403  007525  20                 	db	32
  2404  007526  4E                 	db	78	;'N'
  2405  007527  6F                 	db	111	;'o'
  2406  007528  20                 	db	32
  2407  007529  66                 	db	102	;'f'
  2408  00752A  69                 	db	105	;'i'
  2409  00752B  6C                 	db	108	;'l'
  2410  00752C  74                 	db	116	;'t'
  2411  00752D  65                 	db	101	;'e'
  2412  00752E  72                 	db	114	;'r'
  2413  00752F  20                 	db	32
  2414  007530  6E                 	db	110	;'n'
  2415  007531  75                 	db	117	;'u'
  2416  007532  6D                 	db	109	;'m'
  2417  007533  62                 	db	98	;'b'
  2418  007534  65                 	db	101	;'e'
  2419  007535  72                 	db	114	;'r'
  2420  007536  20                 	db	32
  2421  007537  73                 	db	115	;'s'
  2422  007538  70                 	db	112	;'p'
  2423  007539  65                 	db	101	;'e'
  2424  00753A  63                 	db	99	;'c'
  2425  00753B  69                 	db	105	;'i'
  2426  00753C  66                 	db	102	;'f'
  2427  00753D  69                 	db	105	;'i'
  2428  00753E  65                 	db	101	;'e'
  2429  00753F  64                 	db	100	;'d'
  2430  007540  2E                 	db	46
  2431  007541  0D                 	db	13
  2432  007542  0A                 	db	10
  2433  007543  00                 	db	0
  2434  007544                     STR_211:
  2435  007544  45                 	db	69	;'E'
  2436  007545  52                 	db	82	;'R'
  2437  007546  52                 	db	82	;'R'
  2438  007547  20                 	db	32
  2439  007548  2D                 	db	45
  2440  007549  20                 	db	32
  2441  00754A  44                 	db	68	;'D'
  2442  00754B  69                 	db	105	;'i'
  2443  00754C  73                 	db	115	;'s'
  2444  00754D  70                 	db	112	;'p'
  2445  00754E  6C                 	db	108	;'l'
  2446  00754F  61                 	db	97	;'a'
  2447  007550  79                 	db	121	;'y'
  2448  007551  20                 	db	32
  2449  007552  43                 	db	67	;'C'
  2450  007553  41                 	db	65	;'A'
  2451  007554  4E                 	db	78	;'N'
  2452  007555  20                 	db	32
  2453  007556  65                 	db	101	;'e'
  2454  007557  72                 	db	114	;'r'
  2455  007558  72                 	db	114	;'r'
  2456  007559  6F                 	db	111	;'o'
  2457  00755A  72                 	db	114	;'r'
  2458  00755B  20                 	db	32
  2459  00755C  69                 	db	105	;'i'
  2460  00755D  6E                 	db	110	;'n'
  2461  00755E  66                 	db	102	;'f'
  2462  00755F  6F                 	db	111	;'o'
  2463  007560  72                 	db	114	;'r'
  2464  007561  6D                 	db	109	;'m'
  2465  007562  61                 	db	97	;'a'
  2466  007563  74                 	db	116	;'t'
  2467  007564  69                 	db	105	;'i'
  2468  007565  6F                 	db	111	;'o'
  2469  007566  6E                 	db	110	;'n'
  2470  007567  2E                 	db	46
  2471  007568  0D                 	db	13
  2472  007569  0A                 	db	10
  2473  00756A  00                 	db	0
  2474  00756B                     STR_197:
  2475  00756B  48                 	db	72	;'H'
  2476  00756C  65                 	db	101	;'e'
  2477  00756D  6C                 	db	108	;'l'
  2478  00756E  70                 	db	112	;'p'
  2479  00756F  20                 	db	32
  2480  007570  66                 	db	102	;'f'
  2481  007571  6F                 	db	111	;'o'
  2482  007572  72                 	db	114	;'r'
  2483  007573  20                 	db	32
  2484  007574  74                 	db	116	;'t'
  2485  007575  68                 	db	104	;'h'
  2486  007576  65                 	db	101	;'e'
  2487  007577  20                 	db	32
  2488  007578  46                 	db	70	;'F'
  2489  007579  72                 	db	114	;'r'
  2490  00757A  61                 	db	97	;'a'
  2491  00757B  6E                 	db	110	;'n'
  2492  00757C  6B                 	db	107	;'k'
  2493  00757D  66                 	db	102	;'f'
  2494  00757E  75                 	db	117	;'u'
  2495  00757F  72                 	db	114	;'r'
  2496  007580  74                 	db	116	;'t'
  2497  007581  20                 	db	32
  2498  007582  52                 	db	82	;'R'
  2499  007583  53                 	db	83	;'S'
  2500  007584  2D                 	db	45
  2501  007585  32                 	db	50	;'2'
  2502  007586  33                 	db	51	;'3'
  2503  007587  32                 	db	50	;'2'
  2504  007588  20                 	db	32
  2505  007589  6D                 	db	109	;'m'
  2506  00758A  6F                 	db	111	;'o'
  2507  00758B  64                 	db	100	;'d'
  2508  00758C  75                 	db	117	;'u'
  2509  00758D  6C                 	db	108	;'l'
  2510  00758E  65                 	db	101	;'e'
  2511  00758F  0D                 	db	13
  2512  007590  0A                 	db	10
  2513  007591  00                 	db	0
  2514  007592                     STR_105:
  2515  007592  2D                 	db	45
  2516  007593  45                 	db	69	;'E'
  2517  007594  52                 	db	82	;'R'
  2518  007595  52                 	db	82	;'R'
  2519  007596  4F                 	db	79	;'O'
  2520  007597  52                 	db	82	;'R'
  2521  007598  20                 	db	32
  2522  007599  2D                 	db	45
  2523  00759A  20                 	db	32
  2524  00759B  6D                 	db	109	;'m'
  2525  00759C  61                 	db	97	;'a'
  2526  00759D  73                 	db	115	;'s'
  2527  00759E  6B                 	db	107	;'k'
  2528  00759F  20                 	db	32
  2529  0075A0  66                 	db	102	;'f'
  2530  0075A1  6F                 	db	111	;'o'
  2531  0075A2  72                 	db	114	;'r'
  2532  0075A3  20                 	db	32
  2533  0075A4  6E                 	db	110	;'n'
  2534  0075A5  69                 	db	105	;'i'
  2535  0075A6  64                 	db	100	;'d'
  2536  0075A7  65                 	db	101	;'e'
  2537  0075A8  20                 	db	32
  2538  0075A9  69                 	db	105	;'i'
  2539  0075AA  64                 	db	100	;'d'
  2540  0075AB  20                 	db	32
  2541  0075AC  69                 	db	105	;'i'
  2542  0075AD  73                 	db	115	;'s'
  2543  0075AE  20                 	db	32
  2544  0075AF  6D                 	db	109	;'m'
  2545  0075B0  69                 	db	105	;'i'
  2546  0075B1  73                 	db	115	;'s'
  2547  0075B2  73                 	db	115	;'s'
  2548  0075B3  69                 	db	105	;'i'
  2549  0075B4  6E                 	db	110	;'n'
  2550  0075B5  67                 	db	103	;'g'
  2551  0075B6  0D                 	db	13
  2552  0075B7  0A                 	db	10
  2553  0075B8  00                 	db	0
  2554  0075B9                     STR_89:
  2555  0075B9  2D                 	db	45
  2556  0075BA  45                 	db	69	;'E'
  2557  0075BB  52                 	db	82	;'R'
  2558  0075BC  52                 	db	82	;'R'
  2559  0075BD  4F                 	db	79	;'O'
  2560  0075BE  52                 	db	82	;'R'
  2561  0075BF  20                 	db	32
  2562  0075C0  2D                 	db	45
  2563  0075C1  20                 	db	32
  2564  0075C2  66                 	db	102	;'f'
  2565  0075C3  69                 	db	105	;'i'
  2566  0075C4  6C                 	db	108	;'l'
  2567  0075C5  74                 	db	116	;'t'
  2568  0075C6  65                 	db	101	;'e'
  2569  0075C7  72                 	db	114	;'r'
  2570  0075C8  20                 	db	32
  2571  0075C9  66                 	db	102	;'f'
  2572  0075CA  6F                 	db	111	;'o'
  2573  0075CB  72                 	db	114	;'r'
  2574  0075CC  20                 	db	32
  2575  0075CD  63                 	db	99	;'c'
  2576  0075CE  6C                 	db	108	;'l'
  2577  0075CF  61                 	db	97	;'a'
  2578  0075D0  73                 	db	115	;'s'
  2579  0075D1  73                 	db	115	;'s'
  2580  0075D2  20                 	db	32
  2581  0075D3  69                 	db	105	;'i'
  2582  0075D4  73                 	db	115	;'s'
  2583  0075D5  20                 	db	32
  2584  0075D6  6D                 	db	109	;'m'
  2585  0075D7  69                 	db	105	;'i'
  2586  0075D8  73                 	db	115	;'s'
  2587  0075D9  73                 	db	115	;'s'
  2588  0075DA  69                 	db	105	;'i'
  2589  0075DB  6E                 	db	110	;'n'
  2590  0075DC  67                 	db	103	;'g'
  2591  0075DD  0D                 	db	13
  2592  0075DE  0A                 	db	10
  2593  0075DF  00                 	db	0
  2594  0075E0                     STR_228:
  2595  0075E0  20                 	db	32
  2596  0075E1  20                 	db	32
  2597  0075E2  20                 	db	32
  2598  0075E3  20                 	db	32
  2599  0075E4  20                 	db	32
  2600  0075E5  20                 	db	32
  2601  0075E6  20                 	db	32
  2602  0075E7  20                 	db	32
  2603  0075E8  20                 	db	32
  2604  0075E9  20                 	db	32
  2605  0075EA  20                 	db	32
  2606  0075EB  4D                 	db	77	;'M'
  2607  0075EC  6F                 	db	111	;'o'
  2608  0075ED  64                 	db	100	;'d'
  2609  0075EE  65                 	db	101	;'e'
  2610  0075EF  73                 	db	115	;'s'
  2611  0075F0  3A                 	db	58	;':'
  2612  0075F1  20                 	db	32
  2613  0075F2  76                 	db	118	;'v'
  2614  0075F3  65                 	db	101	;'e'
  2615  0075F4  72                 	db	114	;'r'
  2616  0075F5  62                 	db	98	;'b'
  2617  0075F6  6F                 	db	111	;'o'
  2618  0075F7  73                 	db	115	;'s'
  2619  0075F8  65                 	db	101	;'e'
  2620  0075F9  7C                 	db	124
  2621  0075FA  76                 	db	118	;'v'
  2622  0075FB  73                 	db	115	;'s'
  2623  0075FC  63                 	db	99	;'c'
  2624  0075FD  70                 	db	112	;'p'
  2625  0075FE  7C                 	db	124
  2626  0075FF  73                 	db	115	;'s'
  2627  007600  6C                 	db	108	;'l'
  2628  007601  63                 	db	99	;'c'
  2629  007602  61                 	db	97	;'a'
  2630  007603  6E                 	db	110	;'n'
  2631  007604  0D                 	db	13
  2632  007605  0A                 	db	10
  2633  007606  00                 	db	0
  2634  007607                     STR_91:
  2635  007607  2D                 	db	45
  2636  007608  45                 	db	69	;'E'
  2637  007609  52                 	db	82	;'R'
  2638  00760A  52                 	db	82	;'R'
  2639  00760B  4F                 	db	79	;'O'
  2640  00760C  52                 	db	82	;'R'
  2641  00760D  20                 	db	32
  2642  00760E  2D                 	db	45
  2643  00760F  20                 	db	32
  2644  007610  66                 	db	102	;'f'
  2645  007611  69                 	db	105	;'i'
  2646  007612  6C                 	db	108	;'l'
  2647  007613  74                 	db	116	;'t'
  2648  007614  65                 	db	101	;'e'
  2649  007615  72                 	db	114	;'r'
  2650  007616  20                 	db	32
  2651  007617  66                 	db	102	;'f'
  2652  007618  6F                 	db	111	;'o'
  2653  007619  72                 	db	114	;'r'
  2654  00761A  20                 	db	32
  2655  00761B  74                 	db	116	;'t'
  2656  00761C  79                 	db	121	;'y'
  2657  00761D  70                 	db	112	;'p'
  2658  00761E  65                 	db	101	;'e'
  2659  00761F  20                 	db	32
  2660  007620  69                 	db	105	;'i'
  2661  007621  73                 	db	115	;'s'
  2662  007622  20                 	db	32
  2663  007623  6D                 	db	109	;'m'
  2664  007624  69                 	db	105	;'i'
  2665  007625  73                 	db	115	;'s'
  2666  007626  73                 	db	115	;'s'
  2667  007627  69                 	db	105	;'i'
  2668  007628  6E                 	db	110	;'n'
  2669  007629  67                 	db	103	;'g'
  2670  00762A  0D                 	db	13
  2671  00762B  0A                 	db	10
  2672  00762C  00                 	db	0
  2673  00762D                     STR_97:
  2674  00762D  2D                 	db	45
  2675  00762E  45                 	db	69	;'E'
  2676  00762F  52                 	db	82	;'R'
  2677  007630  52                 	db	82	;'R'
  2678  007631  4F                 	db	79	;'O'
  2679  007632  52                 	db	82	;'R'
  2680  007633  20                 	db	32
  2681  007634  2D                 	db	45
  2682  007635  20                 	db	32
  2683  007636  4E                 	db	78	;'N'
  2684  007637  6F                 	db	111	;'o'
  2685  007638  20                 	db	32
  2686  007639  6D                 	db	109	;'m'
  2687  00763A  61                 	db	97	;'a'
  2688  00763B  73                 	db	115	;'s'
  2689  00763C  6B                 	db	107	;'k'
  2690  00763D  20                 	db	32
  2691  00763E  6E                 	db	110	;'n'
  2692  00763F  75                 	db	117	;'u'
  2693  007640  6D                 	db	109	;'m'
  2694  007641  62                 	db	98	;'b'
  2695  007642  65                 	db	101	;'e'
  2696  007643  72                 	db	114	;'r'
  2697  007644  20                 	db	32
  2698  007645  73                 	db	115	;'s'
  2699  007646  70                 	db	112	;'p'
  2700  007647  65                 	db	101	;'e'
  2701  007648  63                 	db	99	;'c'
  2702  007649  69                 	db	105	;'i'
  2703  00764A  66                 	db	102	;'f'
  2704  00764B  69                 	db	105	;'i'
  2705  00764C  65                 	db	101	;'e'
  2706  00764D  64                 	db	100	;'d'
  2707  00764E  2E                 	db	46
  2708  00764F  0D                 	db	13
  2709  007650  0A                 	db	10
  2710  007651  00                 	db	0
  2711  007652                     STR_1:
  2712  007652  0D                 	db	13
  2713  007653  0A                 	db	10
  2714  007654  46                 	db	70	;'F'
  2715  007655  72                 	db	114	;'r'
  2716  007656  61                 	db	97	;'a'
  2717  007657  6E                 	db	110	;'n'
  2718  007658  6B                 	db	107	;'k'
  2719  007659  66                 	db	102	;'f'
  2720  00765A  75                 	db	117	;'u'
  2721  00765B  72                 	db	114	;'r'
  2722  00765C  74                 	db	116	;'t'
  2723  00765D  20                 	db	32
  2724  00765E  52                 	db	82	;'R'
  2725  00765F  53                 	db	83	;'S'
  2726  007660  2D                 	db	45
  2727  007661  32                 	db	50	;'2'
  2728  007662  33                 	db	51	;'3'
  2729  007663  32                 	db	50	;'2'
  2730  007664  20                 	db	32
  2731  007665  43                 	db	67	;'C'
  2732  007666  41                 	db	65	;'A'
  2733  007667  4E                 	db	78	;'N'
  2734  007668  34                 	db	52	;'4'
  2735  007669  56                 	db	86	;'V'
  2736  00766A  53                 	db	83	;'S'
  2737  00766B  43                 	db	67	;'C'
  2738  00766C  50                 	db	80	;'P'
  2739  00766D  20                 	db	32
  2740  00766E  6D                 	db	109	;'m'
  2741  00766F  6F                 	db	111	;'o'
  2742  007670  64                 	db	100	;'d'
  2743  007671  75                 	db	117	;'u'
  2744  007672  6C                 	db	108	;'l'
  2745  007673  65                 	db	101	;'e'
  2746  007674  0D                 	db	13
  2747  007675  0A                 	db	10
  2748  007676  00                 	db	0
  2749  007677                     STR_101:
  2750  007677  2D                 	db	45
  2751  007678  45                 	db	69	;'E'
  2752  007679  52                 	db	82	;'R'
  2753  00767A  52                 	db	82	;'R'
  2754  00767B  4F                 	db	79	;'O'
  2755  00767C  52                 	db	82	;'R'
  2756  00767D  20                 	db	32
  2757  00767E  2D                 	db	45
  2758  00767F  20                 	db	32
  2759  007680  6D                 	db	109	;'m'
  2760  007681  61                 	db	97	;'a'
  2761  007682  73                 	db	115	;'s'
  2762  007683  6B                 	db	107	;'k'
  2763  007684  20                 	db	32
  2764  007685  66                 	db	102	;'f'
  2765  007686  6F                 	db	111	;'o'
  2766  007687  72                 	db	114	;'r'
  2767  007688  20                 	db	32
  2768  007689  63                 	db	99	;'c'
  2769  00768A  6C                 	db	108	;'l'
  2770  00768B  61                 	db	97	;'a'
  2771  00768C  73                 	db	115	;'s'
  2772  00768D  73                 	db	115	;'s'
  2773  00768E  20                 	db	32
  2774  00768F  69                 	db	105	;'i'
  2775  007690  73                 	db	115	;'s'
  2776  007691  20                 	db	32
  2777  007692  6D                 	db	109	;'m'
  2778  007693  69                 	db	105	;'i'
  2779  007694  73                 	db	115	;'s'
  2780  007695  73                 	db	115	;'s'
  2781  007696  69                 	db	105	;'i'
  2782  007697  6E                 	db	110	;'n'
  2783  007698  67                 	db	103	;'g'
  2784  007699  0D                 	db	13
  2785  00769A  0A                 	db	10
  2786  00769B  00                 	db	0
  2787  00769C                     STR_103:
  2788  00769C  2D                 	db	45
  2789  00769D  45                 	db	69	;'E'
  2790  00769E  52                 	db	82	;'R'
  2791  00769F  52                 	db	82	;'R'
  2792  0076A0  4F                 	db	79	;'O'
  2793  0076A1  52                 	db	82	;'R'
  2794  0076A2  20                 	db	32
  2795  0076A3  2D                 	db	45
  2796  0076A4  20                 	db	32
  2797  0076A5  6D                 	db	109	;'m'
  2798  0076A6  61                 	db	97	;'a'
  2799  0076A7  73                 	db	115	;'s'
  2800  0076A8  6B                 	db	107	;'k'
  2801  0076A9  20                 	db	32
  2802  0076AA  66                 	db	102	;'f'
  2803  0076AB  6F                 	db	111	;'o'
  2804  0076AC  72                 	db	114	;'r'
  2805  0076AD  20                 	db	32
  2806  0076AE  74                 	db	116	;'t'
  2807  0076AF  79                 	db	121	;'y'
  2808  0076B0  70                 	db	112	;'p'
  2809  0076B1  65                 	db	101	;'e'
  2810  0076B2  20                 	db	32
  2811  0076B3  69                 	db	105	;'i'
  2812  0076B4  73                 	db	115	;'s'
  2813  0076B5  20                 	db	32
  2814  0076B6  6D                 	db	109	;'m'
  2815  0076B7  69                 	db	105	;'i'
  2816  0076B8  73                 	db	115	;'s'
  2817  0076B9  73                 	db	115	;'s'
  2818  0076BA  69                 	db	105	;'i'
  2819  0076BB  6E                 	db	110	;'n'
  2820  0076BC  67                 	db	103	;'g'
  2821  0076BD  0D                 	db	13
  2822  0076BE  0A                 	db	10
  2823  0076BF  00                 	db	0
  2824  0076C0                     STR_75:
  2825  0076C0  2B                 	db	43
  2826  0076C1  4F                 	db	79	;'O'
  2827  0076C2  4B                 	db	75	;'K'
  2828  0076C3  20                 	db	32
  2829  0076C4  2D                 	db	45
  2830  0076C5  20                 	db	32
  2831  0076C6  56                 	db	86	;'V'
  2832  0076C7  61                 	db	97	;'a'
  2833  0076C8  6C                 	db	108	;'l'
  2834  0076C9  75                 	db	117	;'u'
  2835  0076CA  65                 	db	101	;'e'
  2836  0076CB  20                 	db	32
  2837  0076CC  77                 	db	119	;'w'
  2838  0076CD  72                 	db	114	;'r'
  2839  0076CE  69                 	db	105	;'i'
  2840  0076CF  74                 	db	116	;'t'
  2841  0076D0  74                 	db	116	;'t'
  2842  0076D1  65                 	db	101	;'e'
  2843  0076D2  6E                 	db	110	;'n'
  2844  0076D3  20                 	db	32
  2845  0076D4  73                 	db	115	;'s'
  2846  0076D5  75                 	db	117	;'u'
  2847  0076D6  63                 	db	99	;'c'
  2848  0076D7  63                 	db	99	;'c'
  2849  0076D8  65                 	db	101	;'e'
  2850  0076D9  73                 	db	115	;'s'
  2851  0076DA  73                 	db	115	;'s'
  2852  0076DB  66                 	db	102	;'f'
  2853  0076DC  75                 	db	117	;'u'
  2854  0076DD  6C                 	db	108	;'l'
  2855  0076DE  6C                 	db	108	;'l'
  2856  0076DF  79                 	db	121	;'y'
  2857  0076E0  0D                 	db	13
  2858  0076E1  0A                 	db	10
  2859  0076E2  00                 	db	0
  2860  0076E3                     STR_221:
  2861  0076E3  53                 	db	83	;'S'
  2862  0076E4  45                 	db	69	;'E'
  2863  0076E5  54                 	db	84	;'T'
  2864  0076E6  20                 	db	32
  2865  0076E7  2D                 	db	45
  2866  0076E8  20                 	db	32
  2867  0076E9  50                 	db	80	;'P'
  2868  0076EA  65                 	db	101	;'e'
  2869  0076EB  72                 	db	114	;'r'
  2870  0076EC  73                 	db	115	;'s'
  2871  0076ED  69                 	db	105	;'i'
  2872  0076EE  73                 	db	115	;'s'
  2873  0076EF  74                 	db	116	;'t'
  2874  0076F0  65                 	db	101	;'e'
  2875  0076F1  6E                 	db	110	;'n'
  2876  0076F2  74                 	db	116	;'t'
  2877  0076F3  20                 	db	32
  2878  0076F4  66                 	db	102	;'f'
  2879  0076F5  75                 	db	117	;'u'
  2880  0076F6  6E                 	db	110	;'n'
  2881  0076F7  63                 	db	99	;'c'
  2882  0076F8  74                 	db	116	;'t'
  2883  0076F9  69                 	db	105	;'i'
  2884  0076FA  6F                 	db	111	;'o'
  2885  0076FB  6E                 	db	110	;'n'
  2886  0076FC  61                 	db	97	;'a'
  2887  0076FD  6C                 	db	108	;'l'
  2888  0076FE  69                 	db	105	;'i'
  2889  0076FF  74                 	db	116	;'t'
  2890  007700  79                 	db	121	;'y'
  2891  007701  2E                 	db	46
  2892  007702  0D                 	db	13
  2893  007703  0A                 	db	10
  2894  007704  00                 	db	0
  2895  007705                     STR_60:
  2896  007705  2D                 	db	45
  2897  007706  45                 	db	69	;'E'
  2898  007707  52                 	db	82	;'R'
  2899  007708  52                 	db	82	;'R'
  2900  007709  4F                 	db	79	;'O'
  2901  00770A  52                 	db	82	;'R'
  2902  00770B  20                 	db	32
  2903  00770C  2D                 	db	45
  2904  00770D  20                 	db	32
  2905  00770E  55                 	db	85	;'U'
  2906  00770F  6E                 	db	110	;'n'
  2907  007710  61                 	db	97	;'a'
  2908  007711  62                 	db	98	;'b'
  2909  007712  6C                 	db	108	;'l'
  2910  007713  65                 	db	101	;'e'
  2911  007714  20                 	db	32
  2912  007715  74                 	db	116	;'t'
  2913  007716  6F                 	db	111	;'o'
  2914  007717  20                 	db	32
  2915  007718  72                 	db	114	;'r'
  2916  007719  65                 	db	101	;'e'
  2917  00771A  61                 	db	97	;'a'
  2918  00771B  64                 	db	100	;'d'
  2919  00771C  20                 	db	32
  2920  00771D  72                 	db	114	;'r'
  2921  00771E  65                 	db	101	;'e'
  2922  00771F  67                 	db	103	;'g'
  2923  007720  69                 	db	105	;'i'
  2924  007721  73                 	db	115	;'s'
  2925  007722  74                 	db	116	;'t'
  2926  007723  65                 	db	101	;'e'
  2927  007724  72                 	db	114	;'r'
  2928  007725  20                 	db	32
  2929  007726  00                 	db	0
  2930  007727                     STR_210:
  2931  007727  53                 	db	83	;'S'
  2932  007728  54                 	db	84	;'T'
  2933  007729  41                 	db	65	;'A'
  2934  00772A  54                 	db	84	;'T'
  2935  00772B  20                 	db	32
  2936  00772C  2D                 	db	45
  2937  00772D  20                 	db	32
  2938  00772E  44                 	db	68	;'D'
  2939  00772F  69                 	db	105	;'i'
  2940  007730  73                 	db	115	;'s'
  2941  007731  70                 	db	112	;'p'
  2942  007732  6C                 	db	108	;'l'
  2943  007733  61                 	db	97	;'a'
  2944  007734  79                 	db	121	;'y'
  2945  007735  20                 	db	32
  2946  007736  43                 	db	67	;'C'
  2947  007737  41                 	db	65	;'A'
  2948  007738  4E                 	db	78	;'N'
  2949  007739  20                 	db	32
  2950  00773A  73                 	db	115	;'s'
  2951  00773B  74                 	db	116	;'t'
  2952  00773C  61                 	db	97	;'a'
  2953  00773D  74                 	db	116	;'t'
  2954  00773E  69                 	db	105	;'i'
  2955  00773F  73                 	db	115	;'s'
  2956  007740  74                 	db	116	;'t'
  2957  007741  69                 	db	105	;'i'
  2958  007742  63                 	db	99	;'c'
  2959  007743  73                 	db	115	;'s'
  2960  007744  2E                 	db	46
  2961  007745  0D                 	db	13
  2962  007746  0A                 	db	10
  2963  007747  00                 	db	0
  2964  007748                     STR_36:
  2965  007748  2D                 	db	45
  2966  007749  45                 	db	69	;'E'
  2967  00774A  52                 	db	82	;'R'
  2968  00774B  52                 	db	82	;'R'
  2969  00774C  4F                 	db	79	;'O'
  2970  00774D  52                 	db	82	;'R'
  2971  00774E  20                 	db	32
  2972  00774F  2D                 	db	45
  2973  007750  20                 	db	32
  2974  007751  46                 	db	70	;'F'
  2975  007752  61                 	db	97	;'a'
  2976  007753  69                 	db	105	;'i'
  2977  007754  6C                 	db	108	;'l'
  2978  007755  65                 	db	101	;'e'
  2979  007756  64                 	db	100	;'d'
  2980  007757  20                 	db	32
  2981  007758  74                 	db	116	;'t'
  2982  007759  6F                 	db	111	;'o'
  2983  00775A  20                 	db	32
  2984  00775B  73                 	db	115	;'s'
  2985  00775C  65                 	db	101	;'e'
  2986  00775D  6E                 	db	110	;'n'
  2987  00775E  64                 	db	100	;'d'
  2988  00775F  20                 	db	32
  2989  007760  65                 	db	101	;'e'
  2990  007761  76                 	db	118	;'v'
  2991  007762  65                 	db	101	;'e'
  2992  007763  6E                 	db	110	;'n'
  2993  007764  74                 	db	116	;'t'
  2994  007765  2E                 	db	46
  2995  007766  0D                 	db	13
  2996  007767  0A                 	db	10
  2997  007768  00                 	db	0
  2998  007769                     STR_122:
  2999  007769  2D                 	db	45
  3000  00776A  45                 	db	69	;'E'
  3001  00776B  52                 	db	82	;'R'
  3002  00776C  52                 	db	82	;'R'
  3003  00776D  4F                 	db	79	;'O'
  3004  00776E  52                 	db	82	;'R'
  3005  00776F  20                 	db	32
  3006  007770  2D                 	db	45
  3007  007771  20                 	db	32
  3008  007772  55                 	db	85	;'U'
  3009  007773  6E                 	db	110	;'n'
  3010  007774  6B                 	db	107	;'k'
  3011  007775  6E                 	db	110	;'n'
  3012  007776  6F                 	db	111	;'o'
  3013  007777  77                 	db	119	;'w'
  3014  007778  6E                 	db	110	;'n'
  3015  007779  20                 	db	32
  3016  00777A  27                 	db	39
  3017  00777B  53                 	db	83	;'S'
  3018  00777C  45                 	db	69	;'E'
  3019  00777D  54                 	db	84	;'T'
  3020  00777E  27                 	db	39
  3021  00777F  20                 	db	32
  3022  007780  63                 	db	99	;'c'
  3023  007781  6F                 	db	111	;'o'
  3024  007782  6D                 	db	109	;'m'
  3025  007783  6D                 	db	109	;'m'
  3026  007784  61                 	db	97	;'a'
  3027  007785  6E                 	db	110	;'n'
  3028  007786  64                 	db	100	;'d'
  3029  007787  0D                 	db	13
  3030  007788  0A                 	db	10
  3031  007789  00                 	db	0
  3032  00778A                     STR_76:
  3033  00778A  2D                 	db	45
  3034  00778B  45                 	db	69	;'E'
  3035  00778C  52                 	db	82	;'R'
  3036  00778D  52                 	db	82	;'R'
  3037  00778E  4F                 	db	79	;'O'
  3038  00778F  52                 	db	82	;'R'
  3039  007790  20                 	db	32
  3040  007791  2D                 	db	45
  3041  007792  20                 	db	32
  3042  007793  46                 	db	70	;'F'
  3043  007794  61                 	db	97	;'a'
  3044  007795  69                 	db	105	;'i'
  3045  007796  6C                 	db	108	;'l'
  3046  007797  65                 	db	101	;'e'
  3047  007798  64                 	db	100	;'d'
  3048  007799  20                 	db	32
  3049  00779A  74                 	db	116	;'t'
  3050  00779B  6F                 	db	111	;'o'
  3051  00779C  20                 	db	32
  3052  00779D  77                 	db	119	;'w'
  3053  00779E  72                 	db	114	;'r'
  3054  00779F  69                 	db	105	;'i'
  3055  0077A0  74                 	db	116	;'t'
  3056  0077A1  65                 	db	101	;'e'
  3057  0077A2  20                 	db	32
  3058  0077A3  76                 	db	118	;'v'
  3059  0077A4  61                 	db	97	;'a'
  3060  0077A5  6C                 	db	108	;'l'
  3061  0077A6  75                 	db	117	;'u'
  3062  0077A7  65                 	db	101	;'e'
  3063  0077A8  0D                 	db	13
  3064  0077A9  0A                 	db	10
  3065  0077AA  00                 	db	0
  3066  0077AB                     STR_49:
  3067  0077AB  2D                 	db	45
  3068  0077AC  45                 	db	69	;'E'
  3069  0077AD  52                 	db	82	;'R'
  3070  0077AE  52                 	db	82	;'R'
  3071  0077AF  4F                 	db	79	;'O'
  3072  0077B0  52                 	db	82	;'R'
  3073  0077B1  20                 	db	32
  3074  0077B2  2D                 	db	45
  3075  0077B3  20                 	db	32
  3076  0077B4  4E                 	db	78	;'N'
  3077  0077B5  65                 	db	101	;'e'
  3078  0077B6  65                 	db	101	;'e'
  3079  0077B7  64                 	db	100	;'d'
  3080  0077B8  73                 	db	115	;'s'
  3081  0077B9  20                 	db	32
  3082  0077BA  5B                 	db	91	;'['
  3083  0077BB  70                 	db	112	;'p'
  3084  0077BC  61                 	db	97	;'a'
  3085  0077BD  67                 	db	103	;'g'
  3086  0077BE  65                 	db	101	;'e'
  3087  0077BF  3A                 	db	58	;':'
  3088  0077C0  5D                 	db	93	;']'
  3089  0077C1  72                 	db	114	;'r'
  3090  0077C2  65                 	db	101	;'e'
  3091  0077C3  67                 	db	103	;'g'
  3092  0077C4  69                 	db	105	;'i'
  3093  0077C5  73                 	db	115	;'s'
  3094  0077C6  74                 	db	116	;'t'
  3095  0077C7  65                 	db	101	;'e'
  3096  0077C8  72                 	db	114	;'r'
  3097  0077C9  0D                 	db	13
  3098  0077CA  0A                 	db	10
  3099  0077CB  00                 	db	0
  3100  0077CC                     STR_117:
  3101  0077CC  2B                 	db	43
  3102  0077CD  4F                 	db	79	;'O'
  3103  0077CE  4B                 	db	75	;'K'
  3104  0077CF  20                 	db	32
  3105  0077D0  2D                 	db	45
  3106  0077D1  20                 	db	32
  3107  0077D2  4D                 	db	77	;'M'
  3108  0077D3  6F                 	db	111	;'o'
  3109  0077D4  64                 	db	100	;'d'
  3110  0077D5  65                 	db	101	;'e'
  3111  0077D6  20                 	db	32
  3112  0077D7  69                 	db	105	;'i'
  3113  0077D8  73                 	db	115	;'s'
  3114  0077D9  20                 	db	32
  3115  0077DA  6E                 	db	110	;'n'
  3116  0077DB  6F                 	db	111	;'o'
  3117  0077DC  77                 	db	119	;'w'
  3118  0077DD  20                 	db	32
  3119  0077DE  56                 	db	86	;'V'
  3120  0077DF  53                 	db	83	;'S'
  3121  0077E0  43                 	db	67	;'C'
  3122  0077E1  50                 	db	80	;'P'
  3123  0077E2  20                 	db	32
  3124  0077E3  44                 	db	68	;'D'
  3125  0077E4  72                 	db	114	;'r'
  3126  0077E5  69                 	db	105	;'i'
  3127  0077E6  76                 	db	118	;'v'
  3128  0077E7  65                 	db	101	;'e'
  3129  0077E8  72                 	db	114	;'r'
  3130  0077E9  0D                 	db	13
  3131  0077EA  0A                 	db	10
  3132  0077EB  00                 	db	0
  3133  0077EC                     STR_6:
  3134  0077EC  57                 	db	87	;'W'
  3135  0077ED  69                 	db	105	;'i'
  3136  0077EE  6C                 	db	108	;'l'
  3137  0077EF  6C                 	db	108	;'l'
  3138  0077F0  20                 	db	32
  3139  0077F1  65                 	db	101	;'e'
  3140  0077F2  6E                 	db	110	;'n'
  3141  0077F3  74                 	db	116	;'t'
  3142  0077F4  65                 	db	101	;'e'
  3143  0077F5  72                 	db	114	;'r'
  3144  0077F6  20                 	db	32
  3145  0077F7  62                 	db	98	;'b'
  3146  0077F8  6F                 	db	111	;'o'
  3147  0077F9  6F                 	db	111	;'o'
  3148  0077FA  74                 	db	116	;'t'
  3149  0077FB  6C                 	db	108	;'l'
  3150  0077FC  6F                 	db	111	;'o'
  3151  0077FD  61                 	db	97	;'a'
  3152  0077FE  64                 	db	100	;'d'
  3153  0077FF  65                 	db	101	;'e'
  3154  007800  72                 	db	114	;'r'
  3155  007801  20                 	db	32
  3156  007802  6E                 	db	110	;'n'
  3157  007803  6F                 	db	111	;'o'
  3158  007804  77                 	db	119	;'w'
  3159  007805  2E                 	db	46
  3160  007806  2E                 	db	46
  3161  007807  2E                 	db	46
  3162  007808  0D                 	db	13
  3163  007809  0A                 	db	10
  3164  00780A  00                 	db	0
  3165  00780B                     STR_204:
  3166  00780B  43                 	db	67	;'C'
  3167  00780C  4C                 	db	76	;'L'
  3168  00780D  4F                 	db	79	;'O'
  3169  00780E  53                 	db	83	;'S'
  3170  00780F  45                 	db	69	;'E'
  3171  007810  20                 	db	32
  3172  007811  2D                 	db	45
  3173  007812  20                 	db	32
  3174  007813  43                 	db	67	;'C'
  3175  007814  6C                 	db	108	;'l'
  3176  007815  6F                 	db	111	;'o'
  3177  007816  73                 	db	115	;'s'
  3178  007817  65                 	db	101	;'e'
  3179  007818  20                 	db	32
  3180  007819  43                 	db	67	;'C'
  3181  00781A  41                 	db	65	;'A'
  3182  00781B  4E                 	db	78	;'N'
  3183  00781C  20                 	db	32
  3184  00781D  69                 	db	105	;'i'
  3185  00781E  6E                 	db	110	;'n'
  3186  00781F  74                 	db	116	;'t'
  3187  007820  65                 	db	101	;'e'
  3188  007821  72                 	db	114	;'r'
  3189  007822  66                 	db	102	;'f'
  3190  007823  61                 	db	97	;'a'
  3191  007824  63                 	db	99	;'c'
  3192  007825  65                 	db	101	;'e'
  3193  007826  2E                 	db	46
  3194  007827  0D                 	db	13
  3195  007828  0A                 	db	10
  3196  007829  00                 	db	0
  3197  00782A                     STR_4:
  3198  00782A  54                 	db	84	;'T'
  3199  00782B  65                 	db	101	;'e'
  3200  00782C  6D                 	db	109	;'m'
  3201  00782D  70                 	db	112	;'p'
  3202  00782E  6F                 	db	111	;'o'
  3203  00782F  72                 	db	114	;'r'
  3204  007830  61                 	db	97	;'a'
  3205  007831  72                 	db	114	;'r'
  3206  007832  79                 	db	121	;'y'
  3207  007833  20                 	db	32
  3208  007834  76                 	db	118	;'v'
  3209  007835  65                 	db	101	;'e'
  3210  007836  72                 	db	114	;'r'
  3211  007837  62                 	db	98	;'b'
  3212  007838  6F                 	db	111	;'o'
  3213  007839  73                 	db	115	;'s'
  3214  00783A  65                 	db	101	;'e'
  3215  00783B  20                 	db	32
  3216  00783C  6D                 	db	109	;'m'
  3217  00783D  6F                 	db	111	;'o'
  3218  00783E  64                 	db	100	;'d'
  3219  00783F  65                 	db	101	;'e'
  3220  007840  20                 	db	32
  3221  007841  73                 	db	115	;'s'
  3222  007842  65                 	db	101	;'e'
  3223  007843  74                 	db	116	;'t'
  3224  007844  0D                 	db	13
  3225  007845  0A                 	db	10
  3226  007846  00                 	db	0
  3227  007847                     STR_115:
  3228  007847  2B                 	db	43
  3229  007848  4F                 	db	79	;'O'
  3230  007849  4B                 	db	75	;'K'
  3231  00784A  20                 	db	32
  3232  00784B  2D                 	db	45
  3233  00784C  20                 	db	32
  3234  00784D  4D                 	db	77	;'M'
  3235  00784E  6F                 	db	111	;'o'
  3236  00784F  64                 	db	100	;'d'
  3237  007850  65                 	db	101	;'e'
  3238  007851  20                 	db	32
  3239  007852  69                 	db	105	;'i'
  3240  007853  73                 	db	115	;'s'
  3241  007854  20                 	db	32
  3242  007855  6E                 	db	110	;'n'
  3243  007856  6F                 	db	111	;'o'
  3244  007857  77                 	db	119	;'w'
  3245  007858  20                 	db	32
  3246  007859  76                 	db	118	;'v'
  3247  00785A  65                 	db	101	;'e'
  3248  00785B  72                 	db	114	;'r'
  3249  00785C  62                 	db	98	;'b'
  3250  00785D  6F                 	db	111	;'o'
  3251  00785E  73                 	db	115	;'s'
  3252  00785F  65                 	db	101	;'e'
  3253  007860  0D                 	db	13
  3254  007861  0A                 	db	10
  3255  007862  00                 	db	0
  3256  007863                     STR_199:
  3257  007863  42                 	db	66	;'B'
  3258  007864  4F                 	db	79	;'O'
  3259  007865  4F                 	db	79	;'O'
  3260  007866  54                 	db	84	;'T'
  3261  007867  20                 	db	32
  3262  007868  2D                 	db	45
  3263  007869  20                 	db	32
  3264  00786A  45                 	db	69	;'E'
  3265  00786B  6E                 	db	110	;'n'
  3266  00786C  74                 	db	116	;'t'
  3267  00786D  65                 	db	101	;'e'
  3268  00786E  72                 	db	114	;'r'
  3269  00786F  20                 	db	32
  3270  007870  62                 	db	98	;'b'
  3271  007871  6F                 	db	111	;'o'
  3272  007872  6F                 	db	111	;'o'
  3273  007873  74                 	db	116	;'t'
  3274  007874  6C                 	db	108	;'l'
  3275  007875  6F                 	db	111	;'o'
  3276  007876  61                 	db	97	;'a'
  3277  007877  64                 	db	100	;'d'
  3278  007878  65                 	db	101	;'e'
  3279  007879  72                 	db	114	;'r'
  3280  00787A  2E                 	db	46
  3281  00787B  0D                 	db	13
  3282  00787C  0A                 	db	10
  3283  00787D  00                 	db	0
  3284  00787E                     STR_123:
  3285  00787E  2D                 	db	45
  3286  00787F  45                 	db	69	;'E'
  3287  007880  52                 	db	82	;'R'
  3288  007881  52                 	db	82	;'R'
  3289  007882  4F                 	db	79	;'O'
  3290  007883  52                 	db	82	;'R'
  3291  007884  20                 	db	32
  3292  007885  2D                 	db	45
  3293  007886  20                 	db	32
  3294  007887  55                 	db	85	;'U'
  3295  007888  6E                 	db	110	;'n'
  3296  007889  6B                 	db	107	;'k'
  3297  00788A  6E                 	db	110	;'n'
  3298  00788B  6F                 	db	111	;'o'
  3299  00788C  77                 	db	119	;'w'
  3300  00788D  6E                 	db	110	;'n'
  3301  00788E  20                 	db	32
  3302  00788F  63                 	db	99	;'c'
  3303  007890  6F                 	db	111	;'o'
  3304  007891  6D                 	db	109	;'m'
  3305  007892  6D                 	db	109	;'m'
  3306  007893  61                 	db	97	;'a'
  3307  007894  6E                 	db	110	;'n'
  3308  007895  64                 	db	100	;'d'
  3309  007896  0D                 	db	13
  3310  007897  0A                 	db	10
  3311  007898  00                 	db	0
  3312  007899                     STR_230:
  3313  007899  4E                 	db	78	;'N'
  3314  00789A  6F                 	db	111	;'o'
  3315  00789B  64                 	db	100	;'d'
  3316  00789C  65                 	db	101	;'e'
  3317  00789D  20                 	db	32
  3318  00789E  66                 	db	102	;'f'
  3319  00789F  6F                 	db	111	;'o'
  3320  0078A0  75                 	db	117	;'u'
  3321  0078A1  6E                 	db	110	;'n'
  3322  0078A2  64                 	db	100	;'d'
  3323  0078A3  20                 	db	32
  3324  0078A4  77                 	db	119	;'w'
  3325  0078A5  69                 	db	105	;'i'
  3326  0078A6  74                 	db	116	;'t'
  3327  0078A7  68                 	db	104	;'h'
  3328  0078A8  20                 	db	32
  3329  0078A9  6E                 	db	110	;'n'
  3330  0078AA  6F                 	db	111	;'o'
  3331  0078AB  64                 	db	100	;'d'
  3332  0078AC  65                 	db	101	;'e'
  3333  0078AD  20                 	db	32
  3334  0078AE  69                 	db	105	;'i'
  3335  0078AF  64                 	db	100	;'d'
  3336  0078B0  20                 	db	32
  3337  0078B1  3D                 	db	61	;'='
  3338  0078B2  20                 	db	32
  3339  0078B3  00                 	db	0
  3340  0078B4                     STR_119:
  3341  0078B4  2B                 	db	43
  3342  0078B5  4F                 	db	79	;'O'
  3343  0078B6  4B                 	db	75	;'K'
  3344  0078B7  20                 	db	32
  3345  0078B8  2D                 	db	45
  3346  0078B9  20                 	db	32
  3347  0078BA  4D                 	db	77	;'M'
  3348  0078BB  6F                 	db	111	;'o'
  3349  0078BC  64                 	db	100	;'d'
  3350  0078BD  65                 	db	101	;'e'
  3351  0078BE  20                 	db	32
  3352  0078BF  69                 	db	105	;'i'
  3353  0078C0  73                 	db	115	;'s'
  3354  0078C1  20                 	db	32
  3355  0078C2  6E                 	db	110	;'n'
  3356  0078C3  6F                 	db	111	;'o'
  3357  0078C4  77                 	db	119	;'w'
  3358  0078C5  20                 	db	32
  3359  0078C6  53                 	db	83	;'S'
  3360  0078C7  4C                 	db	76	;'L'
  3361  0078C8  43                 	db	67	;'C'
  3362  0078C9  41                 	db	65	;'A'
  3363  0078CA  4E                 	db	78	;'N'
  3364  0078CB  0D                 	db	13
  3365  0078CC  0A                 	db	10
  3366  0078CD  00                 	db	0
  3367  0078CE                     STR_24:
  3368  0078CE  2B                 	db	43
  3369  0078CF  4F                 	db	79	;'O'
  3370  0078D0  4B                 	db	75	;'K'
  3371  0078D1  20                 	db	32
  3372  0078D2  2D                 	db	45
  3373  0078D3  20                 	db	32
  3374  0078D4  4C                 	db	76	;'L'
  3375  0078D5  69                 	db	105	;'i'
  3376  0078D6  73                 	db	115	;'s'
  3377  0078D7  74                 	db	116	;'t'
  3378  0078D8  65                 	db	101	;'e'
  3379  0078D9  6E                 	db	110	;'n'
  3380  0078DA  20                 	db	32
  3381  0078DB  6F                 	db	111	;'o'
  3382  0078DC  6E                 	db	110	;'n'
  3383  0078DD  6C                 	db	108	;'l'
  3384  0078DE  79                 	db	121	;'y'
  3385  0078DF  20                 	db	32
  3386  0078E0  6D                 	db	109	;'m'
  3387  0078E1  6F                 	db	111	;'o'
  3388  0078E2  64                 	db	100	;'d'
  3389  0078E3  65                 	db	101	;'e'
  3390  0078E4  0D                 	db	13
  3391  0078E5  0A                 	db	10
  3392  0078E6  00                 	db	0
  3393  0078E7                     STR_183:
  3394  0078E7  54                 	db	84	;'T'
  3395  0078E8  72                 	db	114	;'r'
  3396  0078E9  61                 	db	97	;'a'
  3397  0078EA  6E                 	db	110	;'n'
  3398  0078EB  73                 	db	115	;'s'
  3399  0078EC  6D                 	db	109	;'m'
  3400  0078ED  69                 	db	105	;'i'
  3401  0078EE  74                 	db	116	;'t'
  3402  0078EF  20                 	db	32
  3403  0078F0  45                 	db	69	;'E'
  3404  0078F1  72                 	db	114	;'r'
  3405  0078F2  72                 	db	114	;'r'
  3406  0078F3  6F                 	db	111	;'o'
  3407  0078F4  72                 	db	114	;'r'
  3408  0078F5  20                 	db	32
  3409  0078F6  43                 	db	67	;'C'
  3410  0078F7  6F                 	db	111	;'o'
  3411  0078F8  75                 	db	117	;'u'
  3412  0078F9  6E                 	db	110	;'n'
  3413  0078FA  74                 	db	116	;'t'
  3414  0078FB  65                 	db	101	;'e'
  3415  0078FC  72                 	db	114	;'r'
  3416  0078FD  3A                 	db	58	;':'
  3417  0078FE  20                 	db	32
  3418  0078FF  00                 	db	0
  3419  007900                     STR_207:
  3420  007900  54                 	db	84	;'T'
  3421  007901  58                 	db	88	;'X'
  3422  007902  20                 	db	32
  3423  007903  2D                 	db	45
  3424  007904  20                 	db	32
  3425  007905  53                 	db	83	;'S'
  3426  007906  65                 	db	101	;'e'
  3427  007907  6E                 	db	110	;'n'
  3428  007908  64                 	db	100	;'d'
  3429  007909  20                 	db	32
  3430  00790A  43                 	db	67	;'C'
  3431  00790B  41                 	db	65	;'A'
  3432  00790C  4E                 	db	78	;'N'
  3433  00790D  20                 	db	32
  3434  00790E  66                 	db	102	;'f'
  3435  00790F  72                 	db	114	;'r'
  3436  007910  61                 	db	97	;'a'
  3437  007911  6D                 	db	109	;'m'
  3438  007912  65                 	db	101	;'e'
  3439  007913  20                 	db	32
  3440  007914  2E                 	db	46
  3441  007915  0D                 	db	13
  3442  007916  0A                 	db	10
  3443  007917  00                 	db	0
  3444  007918                     STR_217:
  3445  007918  46                 	db	70	;'F'
  3446  007919  49                 	db	73	;'I'
  3447  00791A  4C                 	db	76	;'L'
  3448  00791B  54                 	db	84	;'T'
  3449  00791C  45                 	db	69	;'E'
  3450  00791D  52                 	db	82	;'R'
  3451  00791E  20                 	db	32
  3452  00791F  2D                 	db	45
  3453  007920  20                 	db	32
  3454  007921  53                 	db	83	;'S'
  3455  007922  65                 	db	101	;'e'
  3456  007923  74                 	db	116	;'t'
  3457  007924  20                 	db	32
  3458  007925  66                 	db	102	;'f'
  3459  007926  69                 	db	105	;'i'
  3460  007927  6C                 	db	108	;'l'
  3461  007928  74                 	db	116	;'t'
  3462  007929  65                 	db	101	;'e'
  3463  00792A  72                 	db	114	;'r'
  3464  00792B  20                 	db	32
  3465  00792C  2E                 	db	46
  3466  00792D  0D                 	db	13
  3467  00792E  0A                 	db	10
  3468  00792F  00                 	db	0
  3469  007930                     STR_47:
  3470  007930  2D                 	db	45
  3471  007931  45                 	db	69	;'E'
  3472  007932  52                 	db	82	;'R'
  3473  007933  52                 	db	82	;'R'
  3474  007934  4F                 	db	79	;'O'
  3475  007935  52                 	db	82	;'R'
  3476  007936  20                 	db	32
  3477  007937  2D                 	db	45
  3478  007938  20                 	db	32
  3479  007939  4E                 	db	78	;'N'
  3480  00793A  65                 	db	101	;'e'
  3481  00793B  65                 	db	101	;'e'
  3482  00793C  64                 	db	100	;'d'
  3483  00793D  73                 	db	115	;'s'
  3484  00793E  20                 	db	32
  3485  00793F  6E                 	db	110	;'n'
  3486  007940  6F                 	db	111	;'o'
  3487  007941  64                 	db	100	;'d'
  3488  007942  65                 	db	101	;'e'
  3489  007943  69                 	db	105	;'i'
  3490  007944  64                 	db	100	;'d'
  3491  007945  0D                 	db	13
  3492  007946  0A                 	db	10
  3493  007947  00                 	db	0
  3494  007948                     STR_27:
  3495  007948  2D                 	db	45
  3496  007949  45                 	db	69	;'E'
  3497  00794A  52                 	db	82	;'R'
  3498  00794B  52                 	db	82	;'R'
  3499  00794C  4F                 	db	79	;'O'
  3500  00794D  52                 	db	82	;'R'
  3501  00794E  20                 	db	32
  3502  00794F  2D                 	db	45
  3503  007950  20                 	db	32
  3504  007951  55                 	db	85	;'U'
  3505  007952  6E                 	db	110	;'n'
  3506  007953  6B                 	db	107	;'k'
  3507  007954  6E                 	db	110	;'n'
  3508  007955  6F                 	db	111	;'o'
  3509  007956  77                 	db	119	;'w'
  3510  007957  6E                 	db	110	;'n'
  3511  007958  20                 	db	32
  3512  007959  6D                 	db	109	;'m'
  3513  00795A  6F                 	db	111	;'o'
  3514  00795B  64                 	db	100	;'d'
  3515  00795C  65                 	db	101	;'e'
  3516  00795D  0D                 	db	13
  3517  00795E  0A                 	db	10
  3518  00795F  00                 	db	0
  3519  007960                     STR_74:
  3520  007960  2D                 	db	45
  3521  007961  45                 	db	69	;'E'
  3522  007962  52                 	db	82	;'R'
  3523  007963  52                 	db	82	;'R'
  3524  007964  4F                 	db	79	;'O'
  3525  007965  52                 	db	82	;'R'
  3526  007966  20                 	db	32
  3527  007967  2D                 	db	45
  3528  007968  20                 	db	32
  3529  007969  4E                 	db	78	;'N'
  3530  00796A  65                 	db	101	;'e'
  3531  00796B  65                 	db	101	;'e'
  3532  00796C  64                 	db	100	;'d'
  3533  00796D  20                 	db	32
  3534  00796E  61                 	db	97	;'a'
  3535  00796F  20                 	db	32
  3536  007970  76                 	db	118	;'v'
  3537  007971  61                 	db	97	;'a'
  3538  007972  6C                 	db	108	;'l'
  3539  007973  75                 	db	117	;'u'
  3540  007974  65                 	db	101	;'e'
  3541  007975  0D                 	db	13
  3542  007976  0A                 	db	10
  3543  007977  00                 	db	0
  3544  007978                     STR_190:
  3545  007978  52                 	db	82	;'R'
  3546  007979  65                 	db	101	;'e'
  3547  00797A  63                 	db	99	;'c'
  3548  00797B  65                 	db	101	;'e'
  3549  00797C  69                 	db	105	;'i'
  3550  00797D  76                 	db	118	;'v'
  3551  00797E  65                 	db	101	;'e'
  3552  00797F  20                 	db	32
  3553  007980  45                 	db	69	;'E'
  3554  007981  72                 	db	114	;'r'
  3555  007982  72                 	db	114	;'r'
  3556  007983  6F                 	db	111	;'o'
  3557  007984  72                 	db	114	;'r'
  3558  007985  20                 	db	32
  3559  007986  43                 	db	67	;'C'
  3560  007987  6F                 	db	111	;'o'
  3561  007988  75                 	db	117	;'u'
  3562  007989  6E                 	db	110	;'n'
  3563  00798A  74                 	db	116	;'t'
  3564  00798B  65                 	db	101	;'e'
  3565  00798C  72                 	db	114	;'r'
  3566  00798D  3A                 	db	58	;':'
  3567  00798E  20                 	db	32
  3568  00798F  00                 	db	0
  3569  007990                     STR_175:
  3570  007990  55                 	db	85	;'U'
  3571  007991  41                 	db	65	;'A'
  3572  007992  52                 	db	82	;'R'
  3573  007993  54                 	db	84	;'T'
  3574  007994  20                 	db	32
  3575  007995  52                 	db	82	;'R'
  3576  007996  65                 	db	101	;'e'
  3577  007997  63                 	db	99	;'c'
  3578  007998  65                 	db	101	;'e'
  3579  007999  69                 	db	105	;'i'
  3580  00799A  76                 	db	118	;'v'
  3581  00799B  65                 	db	101	;'e'
  3582  00799C  20                 	db	32
  3583  00799D  6F                 	db	111	;'o'
  3584  00799E  76                 	db	118	;'v'
  3585  00799F  65                 	db	101	;'e'
  3586  0079A0  72                 	db	114	;'r'
  3587  0079A1  72                 	db	114	;'r'
  3588  0079A2  75                 	db	117	;'u'
  3589  0079A3  6E                 	db	110	;'n'
  3590  0079A4  73                 	db	115	;'s'
  3591  0079A5  3A                 	db	58	;':'
  3592  0079A6  20                 	db	32
  3593  0079A7  00                 	db	0
  3594  0079A8                     STR_171:
  3595  0079A8  43                 	db	67	;'C'
  3596  0079A9  41                 	db	65	;'A'
  3597  0079AA  4E                 	db	78	;'N'
  3598  0079AB  20                 	db	32
  3599  0079AC  54                 	db	84	;'T'
  3600  0079AD  72                 	db	114	;'r'
  3601  0079AE  61                 	db	97	;'a'
  3602  0079AF  6E                 	db	110	;'n'
  3603  0079B0  73                 	db	115	;'s'
  3604  0079B1  6D                 	db	109	;'m'
  3605  0079B2  69                 	db	105	;'i'
  3606  0079B3  74                 	db	116	;'t'
  3607  0079B4  20                 	db	32
  3608  0079B5  6F                 	db	111	;'o'
  3609  0079B6  76                 	db	118	;'v'
  3610  0079B7  65                 	db	101	;'e'
  3611  0079B8  72                 	db	114	;'r'
  3612  0079B9  72                 	db	114	;'r'
  3613  0079BA  75                 	db	117	;'u'
  3614  0079BB  6E                 	db	110	;'n'
  3615  0079BC  73                 	db	115	;'s'
  3616  0079BD  3A                 	db	58	;':'
  3617  0079BE  20                 	db	32
  3618  0079BF  00                 	db	0
  3619  0079C0                     STR_209:
  3620  0079C0  52                 	db	82	;'R'
  3621  0079C1  58                 	db	88	;'X'
  3622  0079C2  20                 	db	32
  3623  0079C3  2D                 	db	45
  3624  0079C4  20                 	db	32
  3625  0079C5  52                 	db	82	;'R'
  3626  0079C6  65                 	db	101	;'e'
  3627  0079C7  61                 	db	97	;'a'
  3628  0079C8  64                 	db	100	;'d'
  3629  0079C9  20                 	db	32
  3630  0079CA  43                 	db	67	;'C'
  3631  0079CB  41                 	db	65	;'A'
  3632  0079CC  4E                 	db	78	;'N'
  3633  0079CD  20                 	db	32
  3634  0079CE  66                 	db	102	;'f'
  3635  0079CF  72                 	db	114	;'r'
  3636  0079D0  61                 	db	97	;'a'
  3637  0079D1  6D                 	db	109	;'m'
  3638  0079D2  65                 	db	101	;'e'
  3639  0079D3  2E                 	db	46
  3640  0079D4  0D                 	db	13
  3641  0079D5  0A                 	db	10
  3642  0079D6  00                 	db	0
  3643  0079D7                     STR_167:
  3644  0079D7  43                 	db	67	;'C'
  3645  0079D8  41                 	db	65	;'A'
  3646  0079D9  4E                 	db	78	;'N'
  3647  0079DA  20                 	db	32
  3648  0079DB  52                 	db	82	;'R'
  3649  0079DC  65                 	db	101	;'e'
  3650  0079DD  63                 	db	99	;'c'
  3651  0079DE  65                 	db	101	;'e'
  3652  0079DF  69                 	db	105	;'i'
  3653  0079E0  76                 	db	118	;'v'
  3654  0079E1  65                 	db	101	;'e'
  3655  0079E2  20                 	db	32
  3656  0079E3  6F                 	db	111	;'o'
  3657  0079E4  76                 	db	118	;'v'
  3658  0079E5  65                 	db	101	;'e'
  3659  0079E6  72                 	db	114	;'r'
  3660  0079E7  72                 	db	114	;'r'
  3661  0079E8  75                 	db	117	;'u'
  3662  0079E9  6E                 	db	110	;'n'
  3663  0079EA  73                 	db	115	;'s'
  3664  0079EB  3A                 	db	58	;':'
  3665  0079EC  20                 	db	32
  3666  0079ED  00                 	db	0
  3667  0079EE                     STR_252:
  3668  0079EE  55                 	db	85	;'U'
  3669  0079EF  6E                 	db	110	;'n'
  3670  0079F0  6B                 	db	107	;'k'
  3671  0079F1  6E                 	db	110	;'n'
  3672  0079F2  6F                 	db	111	;'o'
  3673  0079F3  77                 	db	119	;'w'
  3674  0079F4  6E                 	db	110	;'n'
  3675  0079F5  20                 	db	32
  3676  0079F6  28                 	db	40
  3677  0079F7  56                 	db	86	;'V'
  3678  0079F8  65                 	db	101	;'e'
  3679  0079F9  72                 	db	114	;'r'
  3680  0079FA  62                 	db	98	;'b'
  3681  0079FB  6F                 	db	111	;'o'
  3682  0079FC  73                 	db	115	;'s'
  3683  0079FD  65                 	db	101	;'e'
  3684  0079FE  20                 	db	32
  3685  0079FF  75                 	db	117	;'u'
  3686  007A00  73                 	db	115	;'s'
  3687  007A01  65                 	db	101	;'e'
  3688  007A02  64                 	db	100	;'d'
  3689  007A03  29                 	db	41
  3690  007A04  00                 	db	0
  3691  007A05                     STR_23:
  3692  007A05  2B                 	db	43
  3693  007A06  4F                 	db	79	;'O'
  3694  007A07  4B                 	db	75	;'K'
  3695  007A08  20                 	db	32
  3696  007A09  2D                 	db	45
  3697  007A0A  20                 	db	32
  3698  007A0B  4C                 	db	76	;'L'
  3699  007A0C  6F                 	db	111	;'o'
  3700  007A0D  6F                 	db	111	;'o'
  3701  007A0E  70                 	db	112	;'p'
  3702  007A0F  62                 	db	98	;'b'
  3703  007A10  61                 	db	97	;'a'
  3704  007A11  63                 	db	99	;'c'
  3705  007A12  6B                 	db	107	;'k'
  3706  007A13  20                 	db	32
  3707  007A14  6D                 	db	109	;'m'
  3708  007A15  6F                 	db	111	;'o'
  3709  007A16  64                 	db	100	;'d'
  3710  007A17  65                 	db	101	;'e'
  3711  007A18  0D                 	db	13
  3712  007A19  0A                 	db	10
  3713  007A1A  00                 	db	0
  3714  007A1B                     STR_159:
  3715  007A1B  52                 	db	82	;'R'
  3716  007A1C  65                 	db	101	;'e'
  3717  007A1D  63                 	db	99	;'c'
  3718  007A1E  65                 	db	101	;'e'
  3719  007A1F  69                 	db	105	;'i'
  3720  007A20  76                 	db	118	;'v'
  3721  007A21  65                 	db	101	;'e'
  3722  007A22  64                 	db	100	;'d'
  3723  007A23  20                 	db	32
  3724  007A24  43                 	db	67	;'C'
  3725  007A25  41                 	db	65	;'A'
  3726  007A26  4E                 	db	78	;'N'
  3727  007A27  20                 	db	32
  3728  007A28  66                 	db	102	;'f'
  3729  007A29  72                 	db	114	;'r'
  3730  007A2A  61                 	db	97	;'a'
  3731  007A2B  6D                 	db	109	;'m'
  3732  007A2C  65                 	db	101	;'e'
  3733  007A2D  73                 	db	115	;'s'
  3734  007A2E  3A                 	db	58	;':'
  3735  007A2F  20                 	db	32
  3736  007A30  00                 	db	0
  3737  007A31                     STR_163:
  3738  007A31  52                 	db	82	;'R'
  3739  007A32  65                 	db	101	;'e'
  3740  007A33  63                 	db	99	;'c'
  3741  007A34  65                 	db	101	;'e'
  3742  007A35  69                 	db	105	;'i'
  3743  007A36  76                 	db	118	;'v'
  3744  007A37  65                 	db	101	;'e'
  3745  007A38  64                 	db	100	;'d'
  3746  007A39  20                 	db	32
  3747  007A3A  43                 	db	67	;'C'
  3748  007A3B  41                 	db	65	;'A'
  3749  007A3C  4E                 	db	78	;'N'
  3750  007A3D  20                 	db	32
  3751  007A3E  62                 	db	98	;'b'
  3752  007A3F  79                 	db	121	;'y'
  3753  007A40  74                 	db	116	;'t'
  3754  007A41  65                 	db	101	;'e'
  3755  007A42  73                 	db	115	;'s'
  3756  007A43  3A                 	db	58	;':'
  3757  007A44  20                 	db	32
  3758  007A45  00                 	db	0
  3759  007A46                     STR_219:
  3760  007A46  4D                 	db	77	;'M'
  3761  007A47  41                 	db	65	;'A'
  3762  007A48  53                 	db	83	;'S'
  3763  007A49  4B                 	db	75	;'K'
  3764  007A4A  20                 	db	32
  3765  007A4B  2D                 	db	45
  3766  007A4C  20                 	db	32
  3767  007A4D  53                 	db	83	;'S'
  3768  007A4E  65                 	db	101	;'e'
  3769  007A4F  74                 	db	116	;'t'
  3770  007A50  20                 	db	32
  3771  007A51  6D                 	db	109	;'m'
  3772  007A52  61                 	db	97	;'a'
  3773  007A53  73                 	db	115	;'s'
  3774  007A54  6B                 	db	107	;'k'
  3775  007A55  20                 	db	32
  3776  007A56  2E                 	db	46
  3777  007A57  0D                 	db	13
  3778  007A58  0A                 	db	10
  3779  007A59  00                 	db	0
  3780  007A5A                     STR_124:
  3781  007A5A  4A                 	db	74	;'J'
  3782  007A5B  46                 	db	70	;'F'
  3783  007A5C  72                 	db	114	;'r'
  3784  007A5D  61                 	db	97	;'a'
  3785  007A5E  6E                 	db	110	;'n'
  3786  007A5F  6B                 	db	107	;'k'
  3787  007A60  66                 	db	102	;'f'
  3788  007A61  75                 	db	117	;'u'
  3789  007A62  72                 	db	114	;'r'
  3790  007A63  74                 	db	116	;'t'
  3791  007A64  20                 	db	32
  3792  007A65  52                 	db	82	;'R'
  3793  007A66  53                 	db	83	;'S'
  3794  007A67  2D                 	db	45
  3795  007A68  32                 	db	50	;'2'
  3796  007A69  33                 	db	51	;'3'
  3797  007A6A  32                 	db	50	;'2'
  3798  007A6B  0D                 	db	13
  3799  007A6C  0A                 	db	10
  3800  007A6D  00                 	db	0
  3801  007A6E                     STR_25:
  3802  007A6E  2B                 	db	43
  3803  007A6F  4F                 	db	79	;'O'
  3804  007A70  4B                 	db	75	;'K'
  3805  007A71  20                 	db	32
  3806  007A72  2D                 	db	45
  3807  007A73  20                 	db	32
  3808  007A74  43                 	db	67	;'C'
  3809  007A75  6C                 	db	108	;'l'
  3810  007A76  6F                 	db	111	;'o'
  3811  007A77  73                 	db	115	;'s'
  3812  007A78  65                 	db	101	;'e'
  3813  007A79  64                 	db	100	;'d'
  3814  007A7A  20                 	db	32
  3815  007A7B  6D                 	db	109	;'m'
  3816  007A7C  6F                 	db	111	;'o'
  3817  007A7D  64                 	db	100	;'d'
  3818  007A7E  65                 	db	101	;'e'
  3819  007A7F  0D                 	db	13
  3820  007A80  0A                 	db	10
  3821  007A81  00                 	db	0
  3822  007A82                     STR_20:
  3823  007A82  2B                 	db	43
  3824  007A83  4F                 	db	79	;'O'
  3825  007A84  4B                 	db	75	;'K'
  3826  007A85  20                 	db	32
  3827  007A86  2D                 	db	45
  3828  007A87  20                 	db	32
  3829  007A88  4E                 	db	78	;'N'
  3830  007A89  6F                 	db	111	;'o'
  3831  007A8A  72                 	db	114	;'r'
  3832  007A8B  6D                 	db	109	;'m'
  3833  007A8C  61                 	db	97	;'a'
  3834  007A8D  6C                 	db	108	;'l'
  3835  007A8E  20                 	db	32
  3836  007A8F  6D                 	db	109	;'m'
  3837  007A90  6F                 	db	111	;'o'
  3838  007A91  64                 	db	100	;'d'
  3839  007A92  65                 	db	101	;'e'
  3840  007A93  0D                 	db	13
  3841  007A94  0A                 	db	10
  3842  007A95  00                 	db	0
  3843  007A96                     STR_21:
  3844  007A96  2B                 	db	43
  3845  007A97  4F                 	db	79	;'O'
  3846  007A98  4B                 	db	75	;'K'
  3847  007A99  20                 	db	32
  3848  007A9A  2D                 	db	45
  3849  007A9B  20                 	db	32
  3850  007A9C  53                 	db	83	;'S'
  3851  007A9D  69                 	db	105	;'i'
  3852  007A9E  6C                 	db	108	;'l'
  3853  007A9F  65                 	db	101	;'e'
  3854  007AA0  6E                 	db	110	;'n'
  3855  007AA1  74                 	db	116	;'t'
  3856  007AA2  20                 	db	32
  3857  007AA3  6D                 	db	109	;'m'
  3858  007AA4  6F                 	db	111	;'o'
  3859  007AA5  64                 	db	100	;'d'
  3860  007AA6  65                 	db	101	;'e'
  3861  007AA7  0D                 	db	13
  3862  007AA8  0A                 	db	10
  3863  007AA9  00                 	db	0
  3864  007AAA                     STR_78:
  3865  007AAA  49                 	db	73	;'I'
  3866  007AAB  6E                 	db	110	;'n'
  3867  007AAC  66                 	db	102	;'f'
  3868  007AAD  6F                 	db	111	;'o'
  3869  007AAE  20                 	db	32
  3870  007AAF  66                 	db	102	;'f'
  3871  007AB0  6F                 	db	111	;'o'
  3872  007AB1  72                 	db	114	;'r'
  3873  007AB2  20                 	db	32
  3874  007AB3  6E                 	db	110	;'n'
  3875  007AB4  6F                 	db	111	;'o'
  3876  007AB5  64                 	db	100	;'d'
  3877  007AB6  65                 	db	101	;'e'
  3878  007AB7  20                 	db	32
  3879  007AB8  69                 	db	105	;'i'
  3880  007AB9  64                 	db	100	;'d'
  3881  007ABA  20                 	db	32
  3882  007ABB  3D                 	db	61	;'='
  3883  007ABC  20                 	db	32
  3884  007ABD  00                 	db	0
  3885  007ABE                     STR_241:
  3886  007ABE  46                 	db	70	;'F'
  3887  007ABF  69                 	db	105	;'i'
  3888  007AC0  72                 	db	114	;'r'
  3889  007AC1  6D                 	db	109	;'m'
  3890  007AC2  77                 	db	119	;'w'
  3891  007AC3  61                 	db	97	;'a'
  3892  007AC4  72                 	db	114	;'r'
  3893  007AC5  65                 	db	101	;'e'
  3894  007AC6  20                 	db	32
  3895  007AC7  76                 	db	118	;'v'
  3896  007AC8  65                 	db	101	;'e'
  3897  007AC9  72                 	db	114	;'r'
  3898  007ACA  73                 	db	115	;'s'
  3899  007ACB  69                 	db	105	;'i'
  3900  007ACC  6F                 	db	111	;'o'
  3901  007ACD  6E                 	db	110	;'n'
  3902  007ACE  20                 	db	32
  3903  007ACF  3D                 	db	61	;'='
  3904  007AD0  20                 	db	32
  3905  007AD1  00                 	db	0
  3906  007AD2                     STR_22:
  3907  007AD2  2B                 	db	43
  3908  007AD3  4F                 	db	79	;'O'
  3909  007AD4  4B                 	db	75	;'K'
  3910  007AD5  20                 	db	32
  3911  007AD6  2D                 	db	45
  3912  007AD7  20                 	db	32
  3913  007AD8  53                 	db	83	;'S'
  3914  007AD9  6C                 	db	108	;'l'
  3915  007ADA  65                 	db	101	;'e'
  3916  007ADB  65                 	db	101	;'e'
  3917  007ADC  70                 	db	112	;'p'
  3918  007ADD  20                 	db	32
  3919  007ADE  6D                 	db	109	;'m'
  3920  007ADF  6F                 	db	111	;'o'
  3921  007AE0  64                 	db	100	;'d'
  3922  007AE1  65                 	db	101	;'e'
  3923  007AE2  0D                 	db	13
  3924  007AE3  0A                 	db	10
  3925  007AE4  00                 	db	0
  3926  007AE5                     STR_26:
  3927  007AE5  2B                 	db	43
  3928  007AE6  4F                 	db	79	;'O'
  3929  007AE7  4B                 	db	75	;'K'
  3930  007AE8  20                 	db	32
  3931  007AE9  2D                 	db	45
  3932  007AEA  20                 	db	32
  3933  007AEB  42                 	db	66	;'B'
  3934  007AEC  69                 	db	105	;'i'
  3935  007AED  74                 	db	116	;'t'
  3936  007AEE  73                 	db	115	;'s'
  3937  007AEF  20                 	db	32
  3938  007AF0  6D                 	db	109	;'m'
  3939  007AF1  6F                 	db	111	;'o'
  3940  007AF2  64                 	db	100	;'d'
  3941  007AF3  65                 	db	101	;'e'
  3942  007AF4  0D                 	db	13
  3943  007AF5  0A                 	db	10
  3944  007AF6  00                 	db	0
  3945  007AF7                     STR_39:
  3946  007AF7  2B                 	db	43
  3947  007AF8  4F                 	db	79	;'O'
  3948  007AF9  4B                 	db	75	;'K'
  3949  007AFA  20                 	db	32
  3950  007AFB  2D                 	db	45
  3951  007AFC  20                 	db	32
  3952  007AFD  6E                 	db	110	;'n'
  3953  007AFE  6F                 	db	111	;'o'
  3954  007AFF  20                 	db	32
  3955  007B00  65                 	db	101	;'e'
  3956  007B01  76                 	db	118	;'v'
  3957  007B02  65                 	db	101	;'e'
  3958  007B03  6E                 	db	110	;'n'
  3959  007B04  74                 	db	116	;'t'
  3960  007B05  73                 	db	115	;'s'
  3961  007B06  0D                 	db	13
  3962  007B07  0A                 	db	10
  3963  007B08  00                 	db	0
  3964  007B09                     STR_151:
  3965  007B09  53                 	db	83	;'S'
  3966  007B0A  65                 	db	101	;'e'
  3967  007B0B  6E                 	db	110	;'n'
  3968  007B0C  74                 	db	116	;'t'
  3969  007B0D  20                 	db	32
  3970  007B0E  43                 	db	67	;'C'
  3971  007B0F  41                 	db	65	;'A'
  3972  007B10  4E                 	db	78	;'N'
  3973  007B11  20                 	db	32
  3974  007B12  66                 	db	102	;'f'
  3975  007B13  72                 	db	114	;'r'
  3976  007B14  61                 	db	97	;'a'
  3977  007B15  6D                 	db	109	;'m'
  3978  007B16  65                 	db	101	;'e'
  3979  007B17  73                 	db	115	;'s'
  3980  007B18  3A                 	db	58	;':'
  3981  007B19  20                 	db	32
  3982  007B1A  00                 	db	0
  3983  007B1B                     STR_254:
  3984  007B1B  30                 	db	48	;'0'
  3985  007B1C  31                 	db	49	;'1'
  3986  007B1D  32                 	db	50	;'2'
  3987  007B1E  33                 	db	51	;'3'
  3988  007B1F  34                 	db	52	;'4'
  3989  007B20  35                 	db	53	;'5'
  3990  007B21  36                 	db	54	;'6'
  3991  007B22  37                 	db	55	;'7'
  3992  007B23  38                 	db	56	;'8'
  3993  007B24  39                 	db	57	;'9'
  3994  007B25  41                 	db	65	;'A'
  3995  007B26  42                 	db	66	;'B'
  3996  007B27  43                 	db	67	;'C'
  3997  007B28  44                 	db	68	;'D'
  3998  007B29  45                 	db	69	;'E'
  3999  007B2A  46                 	db	70	;'F'
  4000  007B2B  00                 	db	0
  4001  007B2C                     STR_255:
  4002  007B2C  30                 	db	48	;'0'
  4003  007B2D  31                 	db	49	;'1'
  4004  007B2E  32                 	db	50	;'2'
  4005  007B2F  33                 	db	51	;'3'
  4006  007B30  34                 	db	52	;'4'
  4007  007B31  35                 	db	53	;'5'
  4008  007B32  36                 	db	54	;'6'
  4009  007B33  37                 	db	55	;'7'
  4010  007B34  38                 	db	56	;'8'
  4011  007B35  39                 	db	57	;'9'
  4012  007B36  61                 	db	97	;'a'
  4013  007B37  62                 	db	98	;'b'
  4014  007B38  63                 	db	99	;'c'
  4015  007B39  64                 	db	100	;'d'
  4016  007B3A  65                 	db	101	;'e'
  4017  007B3B  66                 	db	102	;'f'
  4018  007B3C  00                 	db	0
  4019  007B3D                     STR_155:
  4020  007B3D  53                 	db	83	;'S'
  4021  007B3E  65                 	db	101	;'e'
  4022  007B3F  6E                 	db	110	;'n'
  4023  007B40  74                 	db	116	;'t'
  4024  007B41  20                 	db	32
  4025  007B42  43                 	db	67	;'C'
  4026  007B43  41                 	db	65	;'A'
  4027  007B44  4E                 	db	78	;'N'
  4028  007B45  20                 	db	32
  4029  007B46  62                 	db	98	;'b'
  4030  007B47  79                 	db	121	;'y'
  4031  007B48  74                 	db	116	;'t'
  4032  007B49  65                 	db	101	;'e'
  4033  007B4A  73                 	db	115	;'s'
  4034  007B4B  3A                 	db	58	;':'
  4035  007B4C  20                 	db	32
  4036  007B4D  00                 	db	0
  4037  007B4E                     STR_233:
  4038  007B4E  20                 	db	32
  4039  007B4F  6E                 	db	110	;'n'
  4040  007B50  6F                 	db	111	;'o'
  4041  007B51  64                 	db	100	;'d'
  4042  007B52  65                 	db	101	;'e'
  4043  007B53  73                 	db	115	;'s'
  4044  007B54  20                 	db	32
  4045  007B55  66                 	db	102	;'f'
  4046  007B56  6F                 	db	111	;'o'
  4047  007B57  75                 	db	117	;'u'
  4048  007B58  6E                 	db	110	;'n'
  4049  007B59  64                 	db	100	;'d'
  4050  007B5A  0D                 	db	13
  4051  007B5B  0A                 	db	10
  4052  007B5C  00                 	db	0
  4053  007B5D                     STR_51:
  4054  007B5D  56                 	db	86	;'V'
  4055  007B5E  61                 	db	97	;'a'
  4056  007B5F  6C                 	db	108	;'l'
  4057  007B60  75                 	db	117	;'u'
  4058  007B61  65                 	db	101	;'e'
  4059  007B62  20                 	db	32
  4060  007B63  66                 	db	102	;'f'
  4061  007B64  6F                 	db	111	;'o'
  4062  007B65  72                 	db	114	;'r'
  4063  007B66  20                 	db	32
  4064  007B67  72                 	db	114	;'r'
  4065  007B68  65                 	db	101	;'e'
  4066  007B69  67                 	db	103	;'g'
  4067  007B6A  20                 	db	32
  4068  007B6B  00                 	db	0
  4069  007B6C                     STR_239:
  4070  007B6C  4D                 	db	77	;'M'
  4071  007B6D  44                 	db	68	;'D'
  4072  007B6E  46                 	db	70	;'F'
  4073  007B6F  20                 	db	32
  4074  007B70  3D                 	db	61	;'='
  4075  007B71  20                 	db	32
  4076  007B72  68                 	db	104	;'h'
  4077  007B73  74                 	db	116	;'t'
  4078  007B74  74                 	db	116	;'t'
  4079  007B75  70                 	db	112	;'p'
  4080  007B76  3A                 	db	58	;':'
  4081  007B77  2F                 	db	47
  4082  007B78  2F                 	db	47
  4083  007B79  00                 	db	0
  4084  007B7A                     STR_249:
  4085  007B7A  56                 	db	86	;'V'
  4086  007B7B  53                 	db	83	;'S'
  4087  007B7C  43                 	db	67	;'C'
  4088  007B7D  50                 	db	80	;'P'
  4089  007B7E  20                 	db	32
  4090  007B7F  44                 	db	68	;'D'
  4091  007B80  72                 	db	114	;'r'
  4092  007B81  69                 	db	105	;'i'
  4093  007B82  76                 	db	118	;'v'
  4094  007B83  65                 	db	101	;'e'
  4095  007B84  72                 	db	114	;'r'
  4096  007B85  00                 	db	0
  4097  007B86                     STR_111:
  4098  007B86  52                 	db	82	;'R'
  4099  007B87  57                 	db	87	;'W'
  4100  007B88  54                 	db	84	;'T'
  4101  007B89  49                 	db	73	;'I'
  4102  007B8A  4D                 	db	77	;'M'
  4103  007B8B  45                 	db	69	;'E'
  4104  007B8C  4F                 	db	79	;'O'
  4105  007B8D  55                 	db	85	;'U'
  4106  007B8E  54                 	db	84	;'T'
  4107  007B8F  20                 	db	32
  4108  007B90  00                 	db	0
  4109  007B91                     STR_149:
  4110  007B91  2C                 	db	44
  4111  007B92  44                 	db	68	;'D'
  4112  007B93  61                 	db	97	;'a'
  4113  007B94  74                 	db	116	;'t'
  4114  007B95  61                 	db	97	;'a'
  4115  007B96  3D                 	db	61	;'='
  4116  007B97  6E                 	db	110	;'n'
  4117  007B98  6F                 	db	111	;'o'
  4118  007B99  6E                 	db	110	;'n'
  4119  007B9A  65                 	db	101	;'e'
  4120  007B9B  00                 	db	0
  4121  007B9C                     STR_245:
  4122  007B9C  56                 	db	86	;'V'
  4123  007B9D  65                 	db	101	;'e'
  4124  007B9E  72                 	db	114	;'r'
  4125  007B9F  73                 	db	115	;'s'
  4126  007BA0  69                 	db	105	;'i'
  4127  007BA1  6F                 	db	111	;'o'
  4128  007BA2  6E                 	db	110	;'n'
  4129  007BA3  3A                 	db	58	;':'
  4130  007BA4  20                 	db	32
  4131  007BA5  00                 	db	0
  4132  007BA6                     STR_251:
  4133  007BA6  56                 	db	86	;'V'
  4134  007BA7  53                 	db	83	;'S'
  4135  007BA8  43                 	db	67	;'C'
  4136  007BA9  50                 	db	80	;'P'
  4137  007BAA  20                 	db	32
  4138  007BAB  4E                 	db	78	;'N'
  4139  007BAC  6F                 	db	111	;'o'
  4140  007BAD  64                 	db	100	;'d'
  4141  007BAE  65                 	db	101	;'e'
  4142  007BAF  00                 	db	0
  4143  007BB0                     STR_250:
  4144  007BB0  53                 	db	83	;'S'
  4145  007BB1  4C                 	db	76	;'L'
  4146  007BB2  20                 	db	32
  4147  007BB3  44                 	db	68	;'D'
  4148  007BB4  72                 	db	114	;'r'
  4149  007BB5  69                 	db	105	;'i'
  4150  007BB6  76                 	db	118	;'v'
  4151  007BB7  65                 	db	101	;'e'
  4152  007BB8  72                 	db	114	;'r'
  4153  007BB9  00                 	db	0
  4154  007BBA                     STR_112:
  4155  007BBA  53                 	db	83	;'S'
  4156  007BBB  54                 	db	84	;'T'
  4157  007BBC  41                 	db	65	;'A'
  4158  007BBD  52                 	db	82	;'R'
  4159  007BBE  54                 	db	84	;'T'
  4160  007BBF  49                 	db	73	;'I'
  4161  007BC0  46                 	db	70	;'F'
  4162  007BC1  20                 	db	32
  4163  007BC2  00                 	db	0
  4164  007BC3                     STR_139:
  4165  007BC3  2C                 	db	44
  4166  007BC4  6E                 	db	110	;'n'
  4167  007BC5  6F                 	db	111	;'o'
  4168  007BC6  64                 	db	100	;'d'
  4169  007BC7  65                 	db	101	;'e'
  4170  007BC8  69                 	db	105	;'i'
  4171  007BC9  64                 	db	100	;'d'
  4172  007BCA  3D                 	db	61	;'='
  4173  007BCB  00                 	db	0
  4174  007BCC                     STR_13:
  4175  007BCC  4C                 	db	76	;'L'
  4176  007BCD  4F                 	db	79	;'O'
  4177  007BCE  4F                 	db	79	;'O'
  4178  007BCF  50                 	db	80	;'P'
  4179  007BD0  42                 	db	66	;'B'
  4180  007BD1  41                 	db	65	;'A'
  4181  007BD2  43                 	db	67	;'C'
  4182  007BD3  4B                 	db	75	;'K'
  4183  007BD4  00                 	db	0
  4184  007BD5                     STR_125:
  4185  007BD5  56                 	db	86	;'V'
  4186  007BD6  31                 	db	49	;'1'
  4187  007BD7  30                 	db	48	;'0'
  4188  007BD8  31                 	db	49	;'1'
  4189  007BD9  31                 	db	49	;'1'
  4190  007BDA  0D                 	db	13
  4191  007BDB  0A                 	db	10
  4192  007BDC  00                 	db	0
  4193  007BDD                     STR_126:
  4194  007BDD  4E                 	db	78	;'N'
  4195  007BDE  31                 	db	49	;'1'
  4196  007BDF  39                 	db	57	;'9'
  4197  007BE0  37                 	db	55	;'7'
  4198  007BE1  37                 	db	55	;'7'
  4199  007BE2  0D                 	db	13
  4200  007BE3  0A                 	db	10
  4201  007BE4  00                 	db	0
  4202  007BE5                     STR_234:
  4203  007BE5  47                 	db	71	;'G'
  4204  007BE6  55                 	db	85	;'U'
  4205  007BE7  49                 	db	73	;'I'
  4206  007BE8  44                 	db	68	;'D'
  4207  007BE9  20                 	db	32
  4208  007BEA  3D                 	db	61	;'='
  4209  007BEB  20                 	db	32
  4210  007BEC  00                 	db	0
  4211  007BED                     STR_120:
  4212  007BED  46                 	db	70	;'F'
  4213  007BEE  49                 	db	73	;'I'
  4214  007BEF  4C                 	db	76	;'L'
  4215  007BF0  54                 	db	84	;'T'
  4216  007BF1  45                 	db	69	;'E'
  4217  007BF2  52                 	db	82	;'R'
  4218  007BF3  20                 	db	32
  4219  007BF4  00                 	db	0
  4220  007BF5                     STR_133:
  4221  007BF5  2C                 	db	44
  4222  007BF6  63                 	db	99	;'c'
  4223  007BF7  6C                 	db	108	;'l'
  4224  007BF8  61                 	db	97	;'a'
  4225  007BF9  73                 	db	115	;'s'
  4226  007BFA  73                 	db	115	;'s'
  4227  007BFB  3D                 	db	61	;'='
  4228  007BFC  00                 	db	0
  4229  007BFD                     STR_114:
  4230  007BFD  56                 	db	86	;'V'
  4231  007BFE  45                 	db	69	;'E'
  4232  007BFF  52                 	db	82	;'R'
  4233  007C00  42                 	db	66	;'B'
  4234  007C01  4F                 	db	79	;'O'
  4235  007C02  53                 	db	83	;'S'
  4236  007C03  45                 	db	69	;'E'
  4237  007C04  00                 	db	0
  4238  007C05                     STR_109:
  4239  007C05  44                 	db	68	;'D'
  4240  007C06  45                 	db	69	;'E'
  4241  007C07  43                 	db	67	;'C'
  4242  007C08  49                 	db	73	;'I'
  4243  007C09  4D                 	db	77	;'M'
  4244  007C0A  41                 	db	65	;'A'
  4245  007C0B  4C                 	db	76	;'L'
  4246  007C0C  00                 	db	0
  4247  007C0D                     STR_17:
  4248  007C0D  56                 	db	86	;'V'
  4249  007C0E  45                 	db	69	;'E'
  4250  007C0F  52                 	db	82	;'R'
  4251  007C10  53                 	db	83	;'S'
  4252  007C11  49                 	db	73	;'I'
  4253  007C12  4F                 	db	79	;'O'
  4254  007C13  4E                 	db	78	;'N'
  4255  007C14  00                 	db	0
  4256  007C15                     STR_168:
  4257  007C15  30                 	db	48	;'0'
  4258  007C16  78                 	db	120	;'x'
  4259  007C17  25                 	db	37
  4260  007C18  30                 	db	48	;'0'
  4261  007C19  38                 	db	56	;'8'
  4262  007C1A  6C                 	db	108	;'l'
  4263  007C1B  58                 	db	88	;'X'
  4264  007C1C  00                 	db	0
  4265  007C1D                     STR_248:
  4266  007C1D  56                 	db	86	;'V'
  4267  007C1E  65                 	db	101	;'e'
  4268  007C1F  72                 	db	114	;'r'
  4269  007C20  62                 	db	98	;'b'
  4270  007C21  6F                 	db	111	;'o'
  4271  007C22  73                 	db	115	;'s'
  4272  007C23  65                 	db	101	;'e'
  4273  007C24  00                 	db	0
  4274  007C25                     STR_247:
  4275  007C25  4D                 	db	77	;'M'
  4276  007C26  6F                 	db	111	;'o'
  4277  007C27  64                 	db	100	;'d'
  4278  007C28  65                 	db	101	;'e'
  4279  007C29  3A                 	db	58	;':'
  4280  007C2A  20                 	db	32
  4281  007C2B  00                 	db	0
  4282  007C2C                     STR_145:
  4283  007C2C  2C                 	db	44
  4284  007C2D  44                 	db	68	;'D'
  4285  007C2E  61                 	db	97	;'a'
  4286  007C2F  74                 	db	116	;'t'
  4287  007C30  61                 	db	97	;'a'
  4288  007C31  3D                 	db	61	;'='
  4289  007C32  00                 	db	0
  4290  007C33                     STR_136:
  4291  007C33  2C                 	db	44
  4292  007C34  74                 	db	116	;'t'
  4293  007C35  79                 	db	121	;'y'
  4294  007C36  70                 	db	112	;'p'
  4295  007C37  65                 	db	101	;'e'
  4296  007C38  3D                 	db	61	;'='
  4297  007C39  00                 	db	0
  4298  007C3A                     STR_142:
  4299  007C3A  2C                 	db	44
  4300  007C3B  73                 	db	115	;'s'
  4301  007C3C  69                 	db	105	;'i'
  4302  007C3D  7A                 	db	122	;'z'
  4303  007C3E  65                 	db	101	;'e'
  4304  007C3F  3D                 	db	61	;'='
  4305  007C40  00                 	db	0
  4306  007C41                     STR_130:
  4307  007C41  3C                 	db	60	;'<'
  4308  007C42  50                 	db	80	;'P'
  4309  007C43  72                 	db	114	;'r'
  4310  007C44  69                 	db	105	;'i'
  4311  007C45  6F                 	db	111	;'o'
  4312  007C46  3D                 	db	61	;'='
  4313  007C47  00                 	db	0
  4314  007C48                     STR_19:
  4315  007C48  49                 	db	73	;'I'
  4316  007C49  46                 	db	70	;'F'
  4317  007C4A  4D                 	db	77	;'M'
  4318  007C4B  4F                 	db	79	;'O'
  4319  007C4C  44                 	db	68	;'D'
  4320  007C4D  45                 	db	69	;'E'
  4321  007C4E  00                 	db	0
  4322  007C4F                     STR_15:
  4323  007C4F  4C                 	db	76	;'L'
  4324  007C50  49                 	db	73	;'I'
  4325  007C51  53                 	db	83	;'S'
  4326  007C52  54                 	db	84	;'T'
  4327  007C53  45                 	db	69	;'E'
  4328  007C54  4E                 	db	78	;'N'
  4329  007C55  00                 	db	0
  4330  007C56                     STR_82:
  4331  007C56  46                 	db	70	;'F'
  4332  007C57  49                 	db	73	;'I'
  4333  007C58  4C                 	db	76	;'L'
  4334  007C59  54                 	db	84	;'T'
  4335  007C5A  45                 	db	69	;'E'
  4336  007C5B  52                 	db	82	;'R'
  4337  007C5C  00                 	db	0
  4338  007C5D                     STR_9:
  4339  007C5D  53                 	db	83	;'S'
  4340  007C5E  49                 	db	73	;'I'
  4341  007C5F  4C                 	db	76	;'L'
  4342  007C60  45                 	db	69	;'E'
  4343  007C61  4E                 	db	78	;'N'
  4344  007C62  54                 	db	84	;'T'
  4345  007C63  00                 	db	0
  4346  007C64                     STR_52:
  4347  007C64  30                 	db	48	;'0'
  4348  007C65  78                 	db	120	;'x'
  4349  007C66  25                 	db	37
  4350  007C67  30                 	db	48	;'0'
  4351  007C68  32                 	db	50	;'2'
  4352  007C69  58                 	db	88	;'X'
  4353  007C6A  00                 	db	0
  4354  007C6B                     STR_134:
  4355  007C6B  30                 	db	48	;'0'
  4356  007C6C  78                 	db	120	;'x'
  4357  007C6D  25                 	db	37
  4358  007C6E  30                 	db	48	;'0'
  4359  007C6F  34                 	db	52	;'4'
  4360  007C70  58                 	db	88	;'X'
  4361  007C71  00                 	db	0
  4362  007C72                     STR_152:
  4363  007C72  30                 	db	48	;'0'
  4364  007C73  78                 	db	120	;'x'
  4365  007C74  25                 	db	37
  4366  007C75  30                 	db	48	;'0'
  4367  007C76  38                 	db	56	;'8'
  4368  007C77  58                 	db	88	;'X'
  4369  007C78  00                 	db	0
  4370  007C79                     STR_127:
  4371  007C79  46                 	db	70	;'F'
  4372  007C7A  30                 	db	48	;'0'
  4373  007C7B  30                 	db	48	;'0'
  4374  007C7C  0D                 	db	13
  4375  007C7D  0A                 	db	10
  4376  007C7E  00                 	db	0
  4377  007C7F                     STR_8:
  4378  007C7F  2B                 	db	43
  4379  007C80  4F                 	db	79	;'O'
  4380  007C81  4B                 	db	75	;'K'
  4381  007C82  0D                 	db	13
  4382  007C83  0A                 	db	10
  4383  007C84  00                 	db	0
  4384  007C85                     STR_113:
  4385  007C85  4D                 	db	77	;'M'
  4386  007C86  4F                 	db	79	;'O'
  4387  007C87  44                 	db	68	;'D'
  4388  007C88  45                 	db	69	;'E'
  4389  007C89  20                 	db	32
  4390  007C8A  00                 	db	0
  4391  007C8B                     STR_121:
  4392  007C8B  4D                 	db	77	;'M'
  4393  007C8C  41                 	db	65	;'A'
  4394  007C8D  53                 	db	83	;'S'
  4395  007C8E  4B                 	db	75	;'K'
  4396  007C8F  20                 	db	32
  4397  007C90  00                 	db	0
  4398  007C91                     STR_11:
  4399  007C91  43                 	db	67	;'C'
  4400  007C92  4C                 	db	76	;'L'
  4401  007C93  4F                 	db	79	;'O'
  4402  007C94  53                 	db	83	;'S'
  4403  007C95  45                 	db	69	;'E'
  4404  007C96  00                 	db	0
  4405  007C97                     STR_118:
  4406  007C97  53                 	db	83	;'S'
  4407  007C98  4C                 	db	76	;'L'
  4408  007C99  43                 	db	67	;'C'
  4409  007C9A  41                 	db	65	;'A'
  4410  007C9B  4E                 	db	78	;'N'
  4411  007C9C  00                 	db	0
  4412  007C9D                     STR_106:
  4413  007C9D  53                 	db	83	;'S'
  4414  007C9E  45                 	db	69	;'E'
  4415  007C9F  54                 	db	84	;'T'
  4416  007CA0  20                 	db	32
  4417  007CA1  00                 	db	0
  4418  007CA2                     STR_44:
  4419  007CA2  46                 	db	70	;'F'
  4420  007CA3  49                 	db	73	;'I'
  4421  007CA4  4E                 	db	78	;'N'
  4422  007CA5  44                 	db	68	;'D'
  4423  007CA6  00                 	db	0
  4424  007CA7                     STR_45:
  4425  007CA7  52                 	db	82	;'R'
  4426  007CA8  52                 	db	82	;'R'
  4427  007CA9  45                 	db	69	;'E'
  4428  007CAA  47                 	db	71	;'G'
  4429  007CAB  00                 	db	0
  4430  007CAC                     STR_68:
  4431  007CAC  57                 	db	87	;'W'
  4432  007CAD  52                 	db	82	;'R'
  4433  007CAE  45                 	db	69	;'E'
  4434  007CAF  47                 	db	71	;'G'
  4435  007CB0  00                 	db	0
  4436  007CB1                     STR_94:
  4437  007CB1  4D                 	db	77	;'M'
  4438  007CB2  41                 	db	65	;'A'
  4439  007CB3  53                 	db	83	;'S'
  4440  007CB4  4B                 	db	75	;'K'
  4441  007CB5  00                 	db	0
  4442  007CB6                     STR_7:
  4443  007CB6  4F                 	db	79	;'O'
  4444  007CB7  50                 	db	80	;'P'
  4445  007CB8  45                 	db	69	;'E'
  4446  007CB9  4E                 	db	78	;'N'
  4447  007CBA  00                 	db	0
  4448  007CBB                     STR_77:
  4449  007CBB  49                 	db	73	;'I'
  4450  007CBC  4E                 	db	78	;'N'
  4451  007CBD  46                 	db	70	;'F'
  4452  007CBE  4F                 	db	79	;'O'
  4453  007CBF  00                 	db	0
  4454  007CC0                     STR_116:
  4455  007CC0  56                 	db	86	;'V'
  4456  007CC1  53                 	db	83	;'S'
  4457  007CC2  43                 	db	67	;'C'
  4458  007CC3  50                 	db	80	;'P'
  4459  007CC4  00                 	db	0
  4460  007CC5                     STR_42:
  4461  007CC5  48                 	db	72	;'H'
  4462  007CC6  45                 	db	69	;'E'
  4463  007CC7  4C                 	db	76	;'L'
  4464  007CC8  50                 	db	80	;'P'
  4465  007CC9  00                 	db	0
  4466  007CCA                     STR_40:
  4467  007CCA  53                 	db	83	;'S'
  4468  007CCB  54                 	db	84	;'T'
  4469  007CCC  41                 	db	65	;'A'
  4470  007CCD  54                 	db	84	;'T'
  4471  007CCE  00                 	db	0
  4472  007CCF                     STR_5:
  4473  007CCF  42                 	db	66	;'B'
  4474  007CD0  4F                 	db	79	;'O'
  4475  007CD1  4F                 	db	79	;'O'
  4476  007CD2  54                 	db	84	;'T'
  4477  007CD3  00                 	db	0
  4478  007CD4                     STR_150:
  4479  007CD4  3E                 	db	62	;'>'
  4480  007CD5  0D                 	db	13
  4481  007CD6  0A                 	db	10
  4482  007CD7  00                 	db	0
  4483  007CD8                     STR_41:
  4484  007CD8  45                 	db	69	;'E'
  4485  007CD9  52                 	db	82	;'R'
  4486  007CDA  52                 	db	82	;'R'
  4487  007CDB  00                 	db	0
  4488  007CDC                     STR_107:
  4489  007CDC  48                 	db	72	;'H'
  4490  007CDD  45                 	db	69	;'E'
  4491  007CDE  58                 	db	88	;'X'
  4492  007CDF  00                 	db	0
  4493  007CE0                     STR_153:
  4494  007CE0  25                 	db	37
  4495  007CE1  6C                 	db	108	;'l'
  4496  007CE2  75                 	db	117	;'u'
  4497  007CE3  00                 	db	0
  4498  007CE4                     STR_236:
  4499  007CE4  2D                 	db	45
  4500  007CE5  2D                 	db	45
  4501  007CE6  00                 	db	0
  4502  007CE7                     STR_37:
  4503  007CE7  52                 	db	82	;'R'
  4504  007CE8  58                 	db	88	;'X'
  4505  007CE9  00                 	db	0
  4506  007CEA                     STR_28:
  4507  007CEA  54                 	db	84	;'T'
  4508  007CEB  58                 	db	88	;'X'
  4509  007CEC  00                 	db	0
  4510  007CED                     STR_53:
  4511  007CED  25                 	db	37
  4512  007CEE  64                 	db	100	;'d'
  4513  007CEF  00                 	db	0
  4514  007CF0                     STR_129:
  4515  007CF0  07                 	db	7
  4516  007CF1  00                 	db	0
  4517  007CF2                     STR_128:
  4518  007CF2  0D                 	db	13
  4519  007CF3  00                 	db	0
  4520  007CF4                     STR_29:
  4521  007CF4  2C                 	db	44
  4522  007CF5  00                 	db	0
  4523  007CF6                     STR_243:
  4524  007CF6  2E                 	db	46
  4525  007CF7  00                 	db	0
  4526  007CF8                     STR_235:
  4527  007CF8  30                 	db	48	;'0'
  4528  007CF9  00                 	db	0
  4529  007CFA                     STR_237:
  4530  007CFA  3A                 	db	58	;':'
  4531  007CFB  00                 	db	0
  4532  007CFC                     STR_242:
  4533  007CFC  3F                 	db	63	;'?'
  4534  007CFD  00                 	db	0
  4535  007CFE                     __end_of__stringdata:
  4536                           	opt stack 0
  4537                           
  4538                           ; #config settings
  4539  007CFE  00                 	db	0	; dummy byte at the end
  4540  0000                     tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           indf0	equ	0xFEF
  4548                           fsr0h	equ	0xFEA
  4549                           fsr0l	equ	0xFE9
  4550                           wreg	equ	0xFE8
  4551                           indf1	equ	0xFE7
  4552                           postinc1	equ	0xFE6
  4553                           postdec1	equ	0xFE5
  4554                           fsr1h	equ	0xFE2
  4555                           fsr1l	equ	0xFE1
  4556                           indf2	equ	0xFDF
  4557                           postinc2	equ	0xFDE
  4558                           postdec2	equ	0xFDD
  4559                           plusw2	equ	0xFDB
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           
  4564                           	psect	nvBANK0
  4565  0000E0                     __pnvBANK0:
  4566                           	opt stack 0
  4567  0000E0                     ___DCDelay:
  4568                           	opt stack 0
  4569  0000E0                     	ds	1
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           intcon	equ	0xFF2
  4577                           indf0	equ	0xFEF
  4578                           fsr0h	equ	0xFEA
  4579                           fsr0l	equ	0xFE9
  4580                           wreg	equ	0xFE8
  4581                           indf1	equ	0xFE7
  4582                           postinc1	equ	0xFE6
  4583                           postdec1	equ	0xFE5
  4584                           fsr1h	equ	0xFE2
  4585                           fsr1l	equ	0xFE1
  4586                           indf2	equ	0xFDF
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           plusw2	equ	0xFDB
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594                           	psect	cinit
  4595  00234A                     __pcinit:
  4596                           	opt stack 0
  4597  00234A                     start_initialization:
  4598                           	opt stack 0
  4599  00234A                     __initialization:
  4600                           	opt stack 0
  4601                           
  4602                           ; Clear objects allocated to BIGRAM (500 bytes)
  4603  00234A  EE03  F03D         	lfsr	0,__pbssBIGRAM
  4604  00234E  EE11 F0F4          	lfsr	1,500
  4605  002352                     clear_0:
  4606  002352  6AEE               	clrf	postinc0,c
  4607  002354  50E5               	movf	postdec1,w,c
  4608  002356  50E1               	movf	fsr1l,w,c
  4609  002358  E1FC               	bnz	clear_0
  4610  00235A  50E2               	movf	fsr1h,w,c
  4611  00235C  E1FA               	bnz	clear_0
  4612                           
  4613                           ; Clear objects allocated to BANK2 (256 bytes)
  4614  00235E  EE02  F000         	lfsr	0,__pbssBANK2
  4615  002362  EE11 F000          	lfsr	1,256
  4616  002366                     clear_1:
  4617  002366  6AEE               	clrf	postinc0,c
  4618  002368  50E5               	movf	postdec1,w,c
  4619  00236A  50E1               	movf	fsr1l,w,c
  4620  00236C  E1FC               	bnz	clear_1
  4621  00236E  50E2               	movf	fsr1h,w,c
  4622  002370  E1FA               	bnz	clear_1
  4623                           
  4624                           ; Clear objects allocated to BANK1 (204 bytes)
  4625  002372  EE01  F000         	lfsr	0,__pbssBANK1
  4626  002376  0ECC               	movlw	204
  4627  002378                     clear_2:
  4628  002378  6AEE               	clrf	postinc0,c
  4629  00237A  06E8               	decf	wreg,f,c
  4630  00237C  E1FD               	bnz	clear_2
  4631                           
  4632                           ; Clear objects allocated to BANK0 (19 bytes)
  4633  00237E  EE00  F0CD         	lfsr	0,__pbssBANK0
  4634  002382  0E13               	movlw	19
  4635  002384                     clear_3:
  4636  002384  6AEE               	clrf	postinc0,c
  4637  002386  06E8               	decf	wreg,f,c
  4638  002388  E1FD               	bnz	clear_3
  4639                           
  4640                           ; Clear objects allocated to COMRAM (24 bytes)
  4641  00238A  EE00  F030         	lfsr	0,__pbssCOMRAM
  4642  00238E  0E18               	movlw	24
  4643  002390                     clear_4:
  4644  002390  6AEE               	clrf	postinc0,c
  4645  002392  06E8               	decf	wreg,f,c
  4646  002394  E1FD               	bnz	clear_4
  4647  002396                     end_of_initialization:
  4648                           	opt stack 0
  4649  002396                     __end_of__initialization:
  4650                           	opt stack 0
  4651  002396  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4652  002398  6EF8               	movwf	tblptru,c
  4653  00239A  0100               	movlb	0
  4654  00239C  EF1E  F01E         	goto	_main	;jump to C main() function
  4655                           tblptru	equ	0xFF8
  4656                           tblptrh	equ	0xFF7
  4657                           tblptrl	equ	0xFF6
  4658                           tablat	equ	0xFF5
  4659                           prodh	equ	0xFF4
  4660                           prodl	equ	0xFF3
  4661                           intcon	equ	0xFF2
  4662                           indf0	equ	0xFEF
  4663                           postinc0	equ	0xFEE
  4664                           fsr0h	equ	0xFEA
  4665                           fsr0l	equ	0xFE9
  4666                           wreg	equ	0xFE8
  4667                           indf1	equ	0xFE7
  4668                           postinc1	equ	0xFE6
  4669                           postdec1	equ	0xFE5
  4670                           fsr1h	equ	0xFE2
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           postinc2	equ	0xFDE
  4674                           postdec2	equ	0xFDD
  4675                           plusw2	equ	0xFDB
  4676                           fsr2h	equ	0xFDA
  4677                           fsr2l	equ	0xFD9
  4678                           status	equ	0xFD8
  4679                           
  4680                           	psect	bssCOMRAM
  4681  000030                     __pbssCOMRAM:
  4682                           	opt stack 0
  4683  000030                     _status_led_cnt:
  4684                           	opt stack 0
  4685  000030                     	ds	2
  4686  000032                     strtok@sp:
  4687                           	opt stack 0
  4688  000032                     	ds	2
  4689  000034                     _USART_Status:
  4690                           	opt stack 0
  4691  000034                     	ds	1
  4692  000035                     __ECANRxFilterHitInfo:
  4693                           	opt stack 0
  4694  000035                     	ds	1
  4695  000036                     __IT_INT_MASK:
  4696                           	opt stack 0
  4697  000036                     	ds	1
  4698  000037                     __IT_SAVE_BSR:
  4699                           	opt stack 0
  4700  000037                     	ds	1
  4701  000038                     __IT_SAVE_STATUS:
  4702                           	opt stack 0
  4703  000038                     	ds	1
  4704  000039                     __IT_SAVE_WREG:
  4705                           	opt stack 0
  4706  000039                     	ds	1
  4707  00003A                     ___DCByte:
  4708                           	opt stack 0
  4709  00003A                     	ds	1
  4710  00003B                     _bDLE:
  4711                           	opt stack 0
  4712  00003B                     	ds	1
  4713  00003C                     _ledFunctionality:
  4714                           	opt stack 0
  4715  00003C                     	ds	1
  4716  00003D                     _nTimeStamp:
  4717                           	opt stack 0
  4718  00003D                     	ds	1
  4719  00003E                     _sequencyno:
  4720                           	opt stack 0
  4721  00003E                     	ds	1
  4722  00003F                     _stateVscpDriver:
  4723                           	opt stack 0
  4724  00003F                     	ds	1
  4725  000040                     _vscpData:
  4726                           	opt stack 0
  4727  000040                     	ds	8
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           indf0	equ	0xFEF
  4736                           postinc0	equ	0xFEE
  4737                           fsr0h	equ	0xFEA
  4738                           fsr0l	equ	0xFE9
  4739                           wreg	equ	0xFE8
  4740                           indf1	equ	0xFE7
  4741                           postinc1	equ	0xFE6
  4742                           postdec1	equ	0xFE5
  4743                           fsr1h	equ	0xFE2
  4744                           fsr1l	equ	0xFE1
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           plusw2	equ	0xFDB
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753                           	psect	bssBANK0
  4754  0000CD                     __pbssBANK0:
  4755                           	opt stack 0
  4756  0000CD                     _timekeeper:
  4757                           	opt stack 0
  4758  0000CD                     	ds	4
  4759  0000D1                     _made_table:
  4760                           	opt stack 0
  4761  0000D1                     	ds	2
  4762  0000D3                     _bHex:
  4763                           	opt stack 0
  4764  0000D3                     	ds	1
  4765  0000D4                     _bInitiated:
  4766                           	opt stack 0
  4767  0000D4                     	ds	1
  4768  0000D5                     _bOpen:
  4769                           	opt stack 0
  4770  0000D5                     	ds	1
  4771  0000D6                     _bSilent:
  4772                           	opt stack 0
  4773  0000D6                     	ds	1
  4774  0000D7                     _mode:
  4775                           	opt stack 0
  4776  0000D7                     	ds	1
  4777  0000D8                     _pos:
  4778                           	opt stack 0
  4779  0000D8                     	ds	1
  4780  0000D9                     _rwtimeout:
  4781                           	opt stack 0
  4782  0000D9                     	ds	1
  4783  0000DA                     _vscpClass:
  4784                           	opt stack 0
  4785  0000DA                     	ds	2
  4786  0000DC                     _vscpNodeId:
  4787                           	opt stack 0
  4788  0000DC                     	ds	1
  4789  0000DD                     _vscpPriority:
  4790                           	opt stack 0
  4791  0000DD                     	ds	1
  4792  0000DE                     _vscpSize:
  4793                           	opt stack 0
  4794  0000DE                     	ds	1
  4795  0000DF                     _vscpType:
  4796                           	opt stack 0
  4797  0000DF                     	ds	1
  4798                           tblptru	equ	0xFF8
  4799                           tblptrh	equ	0xFF7
  4800                           tblptrl	equ	0xFF6
  4801                           tablat	equ	0xFF5
  4802                           prodh	equ	0xFF4
  4803                           prodl	equ	0xFF3
  4804                           intcon	equ	0xFF2
  4805                           indf0	equ	0xFEF
  4806                           postinc0	equ	0xFEE
  4807                           fsr0h	equ	0xFEA
  4808                           fsr0l	equ	0xFE9
  4809                           wreg	equ	0xFE8
  4810                           indf1	equ	0xFE7
  4811                           postinc1	equ	0xFE6
  4812                           postdec1	equ	0xFE5
  4813                           fsr1h	equ	0xFE2
  4814                           fsr1l	equ	0xFE1
  4815                           indf2	equ	0xFDF
  4816                           postinc2	equ	0xFDE
  4817                           postdec2	equ	0xFDD
  4818                           plusw2	equ	0xFDB
  4819                           fsr2h	equ	0xFDA
  4820                           fsr2l	equ	0xFD9
  4821                           status	equ	0xFD8
  4822                           
  4823                           	psect	bssBANK1
  4824  000100                     __pbssBANK1:
  4825                           	opt stack 0
  4826  000100                     _can_receiveOverruns:
  4827                           	opt stack 0
  4828  000100                     	ds	4
  4829  000104                     _can_transmitOverruns:
  4830                           	opt stack 0
  4831  000104                     	ds	4
  4832  000108                     _cntRxBytes:
  4833                           	opt stack 0
  4834  000108                     	ds	4
  4835  00010C                     _cntRxFrames:
  4836                           	opt stack 0
  4837  00010C                     	ds	4
  4838  000110                     _cntTxBytes:
  4839                           	opt stack 0
  4840  000110                     	ds	4
  4841  000114                     _cntTxFrames:
  4842                           	opt stack 0
  4843  000114                     	ds	4
  4844  000118                     _timer:
  4845                           	opt stack 0
  4846  000118                     	ds	4
  4847  00011C                     _uart_receiveOverruns:
  4848                           	opt stack 0
  4849  00011C                     	ds	4
  4850  000120                     _uart_transmitOverruns:
  4851                           	opt stack 0
  4852  000120                     	ds	4
  4853  000124                     _cmdbuf:
  4854                           	opt stack 0
  4855  000124                     	ds	80
  4856  000174                     _wrkbuf:
  4857                           	opt stack 0
  4858  000174                     	ds	80
  4859  0001C4                     _inputFifo:
  4860                           	opt stack 0
  4861  0001C4                     	ds	8
  4862                           tblptru	equ	0xFF8
  4863                           tblptrh	equ	0xFF7
  4864                           tblptrl	equ	0xFF6
  4865                           tablat	equ	0xFF5
  4866                           prodh	equ	0xFF4
  4867                           prodl	equ	0xFF3
  4868                           intcon	equ	0xFF2
  4869                           indf0	equ	0xFEF
  4870                           postinc0	equ	0xFEE
  4871                           fsr0h	equ	0xFEA
  4872                           fsr0l	equ	0xFE9
  4873                           wreg	equ	0xFE8
  4874                           indf1	equ	0xFE7
  4875                           postinc1	equ	0xFE6
  4876                           postdec1	equ	0xFE5
  4877                           fsr1h	equ	0xFE2
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887                           	psect	bssBANK2
  4888  000200                     __pbssBANK2:
  4889                           	opt stack 0
  4890  000200                     _crc8_table:
  4891                           	opt stack 0
  4892  000200                     	ds	256
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           indf0	equ	0xFEF
  4901                           postinc0	equ	0xFEE
  4902                           fsr0h	equ	0xFEA
  4903                           fsr0l	equ	0xFE9
  4904                           wreg	equ	0xFE8
  4905                           indf1	equ	0xFE7
  4906                           postinc1	equ	0xFE6
  4907                           postdec1	equ	0xFE5
  4908                           fsr1h	equ	0xFE2
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           plusw2	equ	0xFDB
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918                           	psect	bssBIGRAM
  4919  00033D                     __pbssBIGRAM:
  4920                           	opt stack 0
  4921  00033D                     _inputBuffer:
  4922                           	opt stack 0
  4923  00033D                     	ds	500
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           prodh	equ	0xFF4
  4929                           prodl	equ	0xFF3
  4930                           intcon	equ	0xFF2
  4931                           indf0	equ	0xFEF
  4932                           postinc0	equ	0xFEE
  4933                           fsr0h	equ	0xFEA
  4934                           fsr0l	equ	0xFE9
  4935                           wreg	equ	0xFE8
  4936                           indf1	equ	0xFE7
  4937                           postinc1	equ	0xFE6
  4938                           postdec1	equ	0xFE5
  4939                           fsr1h	equ	0xFE2
  4940                           fsr1l	equ	0xFE1
  4941                           indf2	equ	0xFDF
  4942                           postinc2	equ	0xFDE
  4943                           postdec2	equ	0xFDD
  4944                           plusw2	equ	0xFDB
  4945                           fsr2h	equ	0xFDA
  4946                           fsr2l	equ	0xFD9
  4947                           status	equ	0xFD8
  4948                           
  4949                           	psect	cstackBANK3
  4950  000300                     __pcstackBANK3:
  4951                           	opt stack 0
  4952  000300                     doModeVerbose@id:
  4953                           	opt stack 0
  4954                           
  4955                           ; 4 bytes @ 0x0
  4956  000300                     	ds	4
  4957  000304                     doModeVerbose@preg:
  4958                           	opt stack 0
  4959                           
  4960                           ; 2 bytes @ 0x4
  4961  000304                     	ds	2
  4962  000306                     doModeVerbose@preg_1122:
  4963                           	opt stack 0
  4964                           
  4965                           ; 2 bytes @ 0x6
  4966  000306                     	ds	2
  4967  000308                     doModeVerbose@filter_class:
  4968                           	opt stack 0
  4969                           
  4970                           ; 2 bytes @ 0x8
  4971  000308                     	ds	2
  4972  00030A                     doModeVerbose@mask_class:
  4973                           	opt stack 0
  4974                           
  4975                           ; 2 bytes @ 0xA
  4976  00030A                     	ds	2
  4977  00030C                     doModeVerbose@nodeid:
  4978                           	opt stack 0
  4979                           
  4980                           ; 1 bytes @ 0xC
  4981  00030C                     	ds	1
  4982  00030D                     doModeVerbose@nodeid_1114:
  4983                           	opt stack 0
  4984                           
  4985                           ; 1 bytes @ 0xD
  4986  00030D                     	ds	1
  4987  00030E                     doModeVerbose@filter_priority:
  4988                           	opt stack 0
  4989                           
  4990                           ; 1 bytes @ 0xE
  4991  00030E                     	ds	1
  4992  00030F                     doModeVerbose@filter_type:
  4993                           	opt stack 0
  4994                           
  4995                           ; 1 bytes @ 0xF
  4996  00030F                     	ds	1
  4997  000310                     doModeVerbose@filter_nodeid:
  4998                           	opt stack 0
  4999                           
  5000                           ; 1 bytes @ 0x10
  5001  000310                     	ds	1
  5002  000311                     doModeVerbose@mask_priority:
  5003                           	opt stack 0
  5004                           
  5005                           ; 1 bytes @ 0x11
  5006  000311                     	ds	1
  5007  000312                     doModeVerbose@mask_type:
  5008                           	opt stack 0
  5009                           
  5010                           ; 1 bytes @ 0x12
  5011  000312                     	ds	1
  5012  000313                     doModeVerbose@mask_nodeid:
  5013                           	opt stack 0
  5014                           
  5015                           ; 1 bytes @ 0x13
  5016  000313                     	ds	1
  5017  000314                     _doModeVerbose$1082:
  5018                           	opt stack 0
  5019                           
  5020                           ; 2 bytes @ 0x14
  5021  000314                     	ds	2
  5022  000316                     _doModeVerbose$1094:
  5023                           	opt stack 0
  5024                           
  5025                           ; 2 bytes @ 0x16
  5026  000316                     	ds	2
  5027  000318                     _doModeVerbose$1099:
  5028                           	opt stack 0
  5029                           
  5030                           ; 2 bytes @ 0x18
  5031  000318                     	ds	2
  5032  00031A                     _doModeVerbose$1105:
  5033                           	opt stack 0
  5034                           
  5035                           ; 2 bytes @ 0x1A
  5036  00031A                     	ds	2
  5037  00031C                     _doModeVerbose$1109:
  5038                           	opt stack 0
  5039                           
  5040                           ; 2 bytes @ 0x1C
  5041  00031C                     	ds	2
  5042  00031E                     _doModeVerbose$1134:
  5043                           	opt stack 0
  5044                           
  5045                           ; 2 bytes @ 0x1E
  5046  00031E                     	ds	2
  5047  000320                     doModeVerbose@rv:
  5048                           	opt stack 0
  5049                           
  5050                           ; 1 bytes @ 0x20
  5051  000320                     	ds	1
  5052  000321                     doModeVerbose@page_1115:
  5053                           	opt stack 0
  5054                           
  5055                           ; 1 bytes @ 0x21
  5056  000321                     	ds	1
  5057  000322                     doModeVerbose@reg_1116:
  5058                           	opt stack 0
  5059                           
  5060                           ; 1 bytes @ 0x22
  5061  000322                     	ds	1
  5062  000323                     doModeVerbose@id_1173:
  5063                           	opt stack 0
  5064                           
  5065                           ; 4 bytes @ 0x23
  5066  000323                     	ds	4
  5067  000327                     doModeVerbose@filterno:
  5068                           	opt stack 0
  5069                           
  5070                           ; 1 bytes @ 0x27
  5071  000327                     	ds	1
  5072  000328                     doModeVerbose@maskno:
  5073                           	opt stack 0
  5074                           
  5075                           ; 1 bytes @ 0x28
  5076  000328                     	ds	1
  5077  000329                     doModeVerbose@i:
  5078                           	opt stack 0
  5079                           
  5080                           ; 1 bytes @ 0x29
  5081  000329                     	ds	1
  5082  00032A                     doModeVerbose@value_1117:
  5083                           	opt stack 0
  5084                           
  5085                           ; 1 bytes @ 0x2A
  5086  00032A                     	ds	1
  5087  00032B                     doModeVerbose@count:
  5088                           	opt stack 0
  5089                           
  5090                           ; 1 bytes @ 0x2B
  5091  00032B                     	ds	1
  5092  00032C                     doModeVerbose@c:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0x2C
  5096  00032C                     	ds	1
  5097  00032D                     doModeVerbose@page:
  5098                           	opt stack 0
  5099                           
  5100                           ; 1 bytes @ 0x2D
  5101  00032D                     	ds	1
  5102  00032E                     doModeVerbose@reg:
  5103                           	opt stack 0
  5104                           
  5105                           ; 1 bytes @ 0x2E
  5106  00032E                     	ds	1
  5107  00032F                     doModeVerbose@nodeid_1129:
  5108                           	opt stack 0
  5109                           
  5110                           ; 1 bytes @ 0x2F
  5111  00032F                     	ds	1
  5112  000330                     doModeVerbose@i_1064:
  5113                           	opt stack 0
  5114                           
  5115                           ; 1 bytes @ 0x30
  5116  000330                     	ds	1
  5117  000331                     doModeVerbose@value:
  5118                           	opt stack 0
  5119                           
  5120                           ; 1 bytes @ 0x31
  5121  000331                     	ds	1
  5122  000332                     doModeVerbose@p_1070:
  5123                           	opt stack 0
  5124                           
  5125                           ; 2 bytes @ 0x32
  5126  000332                     	ds	2
  5127  000334                     doModeVerbose@p_1118:
  5128                           	opt stack 0
  5129                           
  5130                           ; 2 bytes @ 0x34
  5131  000334                     	ds	2
  5132  000336                     doModeVerbose@ifmode:
  5133                           	opt stack 0
  5134                           
  5135                           ; 1 bytes @ 0x36
  5136  000336                     	ds	1
  5137  000337                     doModeVerbose@p:
  5138                           	opt stack 0
  5139                           
  5140                           ; 2 bytes @ 0x37
  5141  000337                     	ds	2
  5142  000339                     doModeVerbose@p_1142:
  5143                           	opt stack 0
  5144                           
  5145                           ; 2 bytes @ 0x39
  5146  000339                     	ds	2
  5147  00033B                     doModeVerbose@p_1161:
  5148                           	opt stack 0
  5149                           
  5150                           ; 2 bytes @ 0x3B
  5151  00033B                     	ds	2
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           indf0	equ	0xFEF
  5160                           postinc0	equ	0xFEE
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           indf1	equ	0xFE7
  5165                           postinc1	equ	0xFE6
  5166                           postdec1	equ	0xFE5
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177                           	psect	cstackBANK0
  5178  000060                     __pcstackBANK0:
  5179                           	opt stack 0
  5180  000060                     ?_sprintf:
  5181                           	opt stack 0
  5182  000060                     ?_ultoa:
  5183                           	opt stack 0
  5184  000060                     getCANFrame@pid:
  5185                           	opt stack 0
  5186  000060                     sprintf@sp:
  5187                           	opt stack 0
  5188  000060                     ultoa@buf:
  5189                           	opt stack 0
  5190  000060                     ECANSendMessage@pb:
  5191                           	opt stack 0
  5192                           
  5193                           ; 18 bytes @ 0x0
  5194  000060                     	ds	1
  5195  000061                     getCANFrame@flags:
  5196                           	opt stack 0
  5197                           
  5198                           ; 1 bytes @ 0x1
  5199  000061                     	ds	1
  5200  000062                     ?_getVSCPFrame:
  5201                           	opt stack 0
  5202  000062                     getVSCPFrame@pvscptype:
  5203                           	opt stack 0
  5204  000062                     sprintf@f:
  5205                           	opt stack 0
  5206  000062                     ultoa@val:
  5207                           	opt stack 0
  5208  000062                     receivePrintEventCANAL@data:
  5209                           	opt stack 0
  5210  000062                     printFirmwareVersion@wrkbuf:
  5211                           	opt stack 0
  5212                           
  5213                           ; 20 bytes @ 0x2
  5214  000062                     	ds	1
  5215  000063                     getVSCPFrame@pNodeId:
  5216                           	opt stack 0
  5217                           
  5218                           ; 1 bytes @ 0x3
  5219  000063                     	ds	1
  5220  000064                     getVSCPFrame@pPriority:
  5221                           	opt stack 0
  5222                           
  5223                           ; 1 bytes @ 0x4
  5224  000064                     	ds	1
  5225  000065                     getVSCPFrame@pSize:
  5226                           	opt stack 0
  5227                           
  5228                           ; 1 bytes @ 0x5
  5229  000065                     	ds	1
  5230  000066                     getVSCPFrame@pData:
  5231                           	opt stack 0
  5232  000066                     ultoa@base:
  5233                           	opt stack 0
  5234                           
  5235                           ; 2 bytes @ 0x6
  5236  000066                     	ds	1
  5237  000067                     ??_getVSCPFrame:
  5238                           
  5239                           ; 0 bytes @ 0x7
  5240  000067                     	ds	1
  5241  000068                     ??_sprintf:
  5242  000068                     ultoa@v:
  5243                           	opt stack 0
  5244                           
  5245                           ; 4 bytes @ 0x8
  5246  000068                     	ds	2
  5247  00006A                     receivePrintEventCANAL@i:
  5248                           	opt stack 0
  5249                           
  5250                           ; 1 bytes @ 0xA
  5251  00006A                     	ds	1
  5252  00006B                     receivePrintEventCANAL@dlc:
  5253                           	opt stack 0
  5254  00006B                     getVSCPFrame@pvscpclass:
  5255                           	opt stack 0
  5256  00006B                     sprintf@idx:
  5257                           	opt stack 0
  5258                           
  5259                           ; 1 bytes @ 0xB
  5260  00006B                     	ds	1
  5261  00006C                     ultoa@c:
  5262                           	opt stack 0
  5263  00006C                     _sprintf$2087:
  5264                           	opt stack 0
  5265  00006C                     receivePrintEventCANAL@id:
  5266                           	opt stack 0
  5267  00006C                     getVSCPFrame@id:
  5268                           	opt stack 0
  5269                           
  5270                           ; 4 bytes @ 0xC
  5271  00006C                     	ds	1
  5272  00006D                     ??_receivePrintEventSLCAN:
  5273                           
  5274                           ; 0 bytes @ 0xD
  5275  00006D                     	ds	1
  5276  00006E                     _sprintf$2088:
  5277                           	opt stack 0
  5278                           
  5279                           ; 2 bytes @ 0xE
  5280  00006E                     	ds	2
  5281  000070                     receivePrintEventCANAL@crc:
  5282                           	opt stack 0
  5283  000070                     receivePrintEventSLCAN@dlc:
  5284                           	opt stack 0
  5285  000070                     _sprintf$2094:
  5286                           	opt stack 0
  5287                           
  5288                           ; 2 bytes @ 0x10
  5289  000070                     	ds	1
  5290  000071                     receivePrintEventSLCAN@i:
  5291                           	opt stack 0
  5292                           
  5293                           ; 2 bytes @ 0x11
  5294  000071                     	ds	1
  5295  000072                     ECANSendMessage@mode:
  5296                           	opt stack 0
  5297  000072                     sprintf@ap:
  5298                           	opt stack 0
  5299                           
  5300                           ; 1 bytes @ 0x12
  5301  000072                     	ds	1
  5302  000073                     ECANSendMessage@buffers:
  5303                           	opt stack 0
  5304  000073                     sprintf@prec:
  5305                           	opt stack 0
  5306  000073                     receivePrintEventSLCAN@id:
  5307                           	opt stack 0
  5308                           
  5309                           ; 4 bytes @ 0x13
  5310  000073                     	ds	1
  5311  000074                     ECANSendMessage@j:
  5312                           	opt stack 0
  5313                           
  5314                           ; 1 bytes @ 0x14
  5315  000074                     	ds	1
  5316  000075                     ECANSendMessage@tempBSEL0:
  5317                           	opt stack 0
  5318  000075                     sprintf@width:
  5319                           	opt stack 0
  5320                           
  5321                           ; 2 bytes @ 0x15
  5322  000075                     	ds	1
  5323  000076                     ECANSendMessage@tempPtr:
  5324                           	opt stack 0
  5325                           
  5326                           ; 2 bytes @ 0x16
  5327  000076                     	ds	1
  5328  000077                     sprintf@_val:
  5329                           	opt stack 0
  5330                           
  5331                           ; 4 bytes @ 0x17
  5332  000077                     	ds	1
  5333  000078                     ECANSendMessage@temp:
  5334                           	opt stack 0
  5335                           
  5336                           ; 1 bytes @ 0x18
  5337  000078                     	ds	1
  5338  000079                     ECANSendMessage@i:
  5339                           	opt stack 0
  5340                           
  5341                           ; 1 bytes @ 0x19
  5342  000079                     	ds	1
  5343  00007A                     ECANSendMessage@ptr:
  5344                           	opt stack 0
  5345                           
  5346                           ; 2 bytes @ 0x1A
  5347  00007A                     	ds	1
  5348  00007B                     sprintf@c:
  5349                           	opt stack 0
  5350                           
  5351                           ; 1 bytes @ 0x1B
  5352  00007B                     	ds	1
  5353  00007C                     ?_sendCANFrame:
  5354                           	opt stack 0
  5355  00007C                     sprintf@flag:
  5356                           	opt stack 0
  5357  00007C                     sendCANFrame@id:
  5358                           	opt stack 0
  5359                           
  5360                           ; 4 bytes @ 0x1C
  5361  00007C                     	ds	2
  5362  00007E                     ??_receivePrintEventVerbose:
  5363  00007E                     _printStatistics$1308:
  5364                           	opt stack 0
  5365  00007E                     _printErrors$1333:
  5366                           	opt stack 0
  5367                           
  5368                           ; 2 bytes @ 0x1E
  5369  00007E                     	ds	2
  5370  000080                     sendCANFrame@dlc:
  5371                           	opt stack 0
  5372  000080                     _printStatistics$1314:
  5373                           	opt stack 0
  5374  000080                     _printErrors$1339:
  5375                           	opt stack 0
  5376                           
  5377                           ; 2 bytes @ 0x20
  5378  000080                     	ds	1
  5379  000081                     sendCANFrame@pdata:
  5380                           	opt stack 0
  5381                           
  5382                           ; 2 bytes @ 0x21
  5383  000081                     	ds	1
  5384  000082                     _printStatistics$1320:
  5385                           	opt stack 0
  5386  000082                     _printErrors$1345:
  5387                           	opt stack 0
  5388                           
  5389                           ; 2 bytes @ 0x22
  5390  000082                     	ds	1
  5391  000083                     ??_doModeSLCAN:
  5392  000083                     ??_receiveVSCPModeCanalMsg:
  5393  000083                     ?_sendVSCPFrame:
  5394                           	opt stack 0
  5395  000083                     _receivePrintEventVerbose$1226:
  5396                           	opt stack 0
  5397  000083                     sendVSCPFrame@vscpclass:
  5398                           	opt stack 0
  5399                           
  5400                           ; 2 bytes @ 0x23
  5401  000083                     	ds	1
  5402  000084                     _printStatistics$1326:
  5403                           	opt stack 0
  5404  000084                     _printErrors$1351:
  5405                           	opt stack 0
  5406                           
  5407                           ; 2 bytes @ 0x24
  5408  000084                     	ds	1
  5409  000085                     sendVSCPFrame@vscptype:
  5410                           	opt stack 0
  5411  000085                     _receivePrintEventVerbose$1231:
  5412                           	opt stack 0
  5413                           
  5414                           ; 2 bytes @ 0x25
  5415  000085                     	ds	1
  5416  000086                     sendVSCPFrame@nodeid:
  5417                           	opt stack 0
  5418  000086                     _printErrors$1357:
  5419                           	opt stack 0
  5420                           
  5421                           ; 2 bytes @ 0x26
  5422  000086                     	ds	1
  5423  000087                     sendVSCPFrame@priority:
  5424                           	opt stack 0
  5425  000087                     _receivePrintEventVerbose$1236:
  5426                           	opt stack 0
  5427                           
  5428                           ; 2 bytes @ 0x27
  5429  000087                     	ds	1
  5430  000088                     sendVSCPFrame@size:
  5431                           	opt stack 0
  5432  000088                     _printErrors$1366:
  5433                           	opt stack 0
  5434                           
  5435                           ; 2 bytes @ 0x28
  5436  000088                     	ds	1
  5437  000089                     sendVSCPFrame@pData:
  5438                           	opt stack 0
  5439  000089                     _receivePrintEventVerbose$1241:
  5440                           	opt stack 0
  5441                           
  5442                           ; 2 bytes @ 0x29
  5443  000089                     	ds	1
  5444  00008A                     ??_sendVSCPFrame:
  5445  00008A                     doModeSLCAN@id:
  5446                           	opt stack 0
  5447                           
  5448                           ; 4 bytes @ 0x2A
  5449  00008A                     	ds	1
  5450  00008B                     _receivePrintEventVerbose$1246:
  5451                           	opt stack 0
  5452                           
  5453                           ; 2 bytes @ 0x2B
  5454  00008B                     	ds	2
  5455  00008D                     _receivePrintEventVerbose$1251:
  5456                           	opt stack 0
  5457                           
  5458                           ; 2 bytes @ 0x2D
  5459  00008D                     	ds	1
  5460  00008E                     doModeSLCAN@dlc:
  5461                           	opt stack 0
  5462                           
  5463                           ; 1 bytes @ 0x2E
  5464  00008E                     	ds	1
  5465  00008F                     doModeSLCAN@c:
  5466                           	opt stack 0
  5467  00008F                     receivePrintEventVerbose@i:
  5468                           	opt stack 0
  5469                           
  5470                           ; 1 bytes @ 0x2F
  5471  00008F                     	ds	1
  5472  000090                     doModeSLCAN@rv:
  5473                           	opt stack 0
  5474                           
  5475                           ; 1 bytes @ 0x30
  5476  000090                     	ds	7
  5477  000097                     receiveVSCPModeCanalMsg@data:
  5478                           	opt stack 0
  5479                           
  5480                           ; 8 bytes @ 0x37
  5481  000097                     	ds	7
  5482  00009E                     ?_readRegisterExtended:
  5483                           	opt stack 0
  5484  00009E                     ?_writeRegisterExtended:
  5485                           	opt stack 0
  5486  00009E                     ?_readRegister:
  5487                           	opt stack 0
  5488  00009E                     readRegister@reg:
  5489                           	opt stack 0
  5490  00009E                     readRegisterExtended@page:
  5491                           	opt stack 0
  5492  00009E                     writeRegisterExtended@page:
  5493                           	opt stack 0
  5494                           
  5495                           ; 2 bytes @ 0x3E
  5496  00009E                     	ds	1
  5497  00009F                     readRegister@timeout:
  5498                           	opt stack 0
  5499  00009F                     receiveVSCPModeCanalMsg@id:
  5500                           	opt stack 0
  5501                           
  5502                           ; 4 bytes @ 0x3F
  5503  00009F                     	ds	1
  5504  0000A0                     readRegisterExtended@reg:
  5505                           	opt stack 0
  5506  0000A0                     writeRegisterExtended@reg:
  5507                           	opt stack 0
  5508                           
  5509                           ; 1 bytes @ 0x40
  5510  0000A0                     	ds	1
  5511  0000A1                     readRegister@value:
  5512                           	opt stack 0
  5513  0000A1                     readRegisterExtended@timeout:
  5514                           	opt stack 0
  5515  0000A1                     writeRegisterExtended@timeout:
  5516                           	opt stack 0
  5517                           
  5518                           ; 2 bytes @ 0x41
  5519  0000A1                     	ds	1
  5520  0000A2                     ??_readRegister:
  5521                           
  5522                           ; 0 bytes @ 0x42
  5523  0000A2                     	ds	1
  5524  0000A3                     receiveVSCPModeCanalMsg@dlc:
  5525                           	opt stack 0
  5526  0000A3                     readRegisterExtended@value:
  5527                           	opt stack 0
  5528  0000A3                     writeRegisterExtended@value:
  5529                           	opt stack 0
  5530                           
  5531                           ; 2 bytes @ 0x43
  5532  0000A3                     	ds	2
  5533  0000A5                     ??_readRegisterExtended:
  5534  0000A5                     ??_writeRegisterExtended:
  5535                           
  5536                           ; 0 bytes @ 0x45
  5537  0000A5                     	ds	1
  5538  0000A6                     readRegister@nodeid:
  5539                           	opt stack 0
  5540                           
  5541                           ; 1 bytes @ 0x46
  5542  0000A6                     	ds	1
  5543  0000A7                     printGUID@nodeid:
  5544                           	opt stack 0
  5545  0000A7                     printMDF@nodeid:
  5546                           	opt stack 0
  5547  0000A7                     printNodeFirmwareVersion@nodeid:
  5548                           	opt stack 0
  5549                           
  5550                           ; 1 bytes @ 0x47
  5551  0000A7                     	ds	1
  5552  0000A8                     printMDF@value:
  5553                           	opt stack 0
  5554  0000A8                     printGUID@buf:
  5555                           	opt stack 0
  5556  0000A8                     printNodeFirmwareVersion@buf:
  5557                           	opt stack 0
  5558                           
  5559                           ; 3 bytes @ 0x48
  5560  0000A8                     	ds	1
  5561  0000A9                     readRegisterExtended@nodeid:
  5562                           	opt stack 0
  5563  0000A9                     writeRegisterExtended@nodeid:
  5564                           	opt stack 0
  5565  0000A9                     printMDF@p:
  5566                           	opt stack 0
  5567                           
  5568                           ; 2 bytes @ 0x49
  5569  0000A9                     	ds	2
  5570  0000AB                     printGUID@value:
  5571                           	opt stack 0
  5572  0000AB                     printMDF@i:
  5573                           	opt stack 0
  5574  0000AB                     printNodeFirmwareVersion@value:
  5575                           	opt stack 0
  5576                           
  5577                           ; 1 bytes @ 0x4B
  5578  0000AB                     	ds	1
  5579  0000AC                     printGUID@i:
  5580                           	opt stack 0
  5581  0000AC                     printNodeFirmwareVersion@i:
  5582                           	opt stack 0
  5583                           
  5584                           ; 1 bytes @ 0x4C
  5585  0000AC                     	ds	1
  5586  0000AD                     _findNodes$1410:
  5587                           	opt stack 0
  5588                           
  5589                           ; 2 bytes @ 0x4D
  5590  0000AD                     	ds	2
  5591  0000AF                     findNodes@nFound:
  5592                           	opt stack 0
  5593                           
  5594                           ; 1 bytes @ 0x4F
  5595  0000AF                     	ds	1
  5596  0000B0                     findNodes@value:
  5597                           	opt stack 0
  5598                           
  5599                           ; 1 bytes @ 0x50
  5600  0000B0                     	ds	1
  5601  0000B1                     findNodes@i:
  5602                           	opt stack 0
  5603                           
  5604                           ; 1 bytes @ 0x51
  5605  0000B1                     	ds	1
  5606  0000B2                     ??_doModeVerbose:
  5607                           
  5608                           ; 0 bytes @ 0x52
  5609  0000B2                     	ds	20
  5610  0000C6                     
  5611                           ; 2 bytes @ 0x66
  5612  0000C6                     	ds	2
  5613  0000C8                     
  5614                           ; 3 bytes @ 0x68
  5615  0000C8                     	ds	3
  5616  0000CB                     ??_main:
  5617                           
  5618                           ; 0 bytes @ 0x6B
  5619  0000CB                     	ds	1
  5620  0000CC                     main@c:
  5621                           	opt stack 0
  5622                           
  5623                           ; 1 bytes @ 0x6C
  5624  0000CC                     	ds	1
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           intcon	equ	0xFF2
  5632                           indf0	equ	0xFEF
  5633                           postinc0	equ	0xFEE
  5634                           fsr0h	equ	0xFEA
  5635                           fsr0l	equ	0xFE9
  5636                           wreg	equ	0xFE8
  5637                           indf1	equ	0xFE7
  5638                           postinc1	equ	0xFE6
  5639                           postdec1	equ	0xFE5
  5640                           fsr1h	equ	0xFE2
  5641                           fsr1l	equ	0xFE1
  5642                           indf2	equ	0xFDF
  5643                           postinc2	equ	0xFDE
  5644                           postdec2	equ	0xFDD
  5645                           plusw2	equ	0xFDB
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650                           	psect	cstackCOMRAM
  5651  000001                     __pcstackCOMRAM:
  5652                           	opt stack 0
  5653  000001                     ?i1_WriteTimer0:
  5654                           	opt stack 0
  5655  000001                     ?_fifo_write:
  5656                           	opt stack 0
  5657  000001                     ReadUSART@data:
  5658                           	opt stack 0
  5659  000001                     fifo_write@f:
  5660                           	opt stack 0
  5661  000001                     i1WriteTimer0@timer0:
  5662                           	opt stack 0
  5663                           
  5664                           ; 2 bytes @ 0x0
  5665  000001                     	ds	2
  5666  000003                     fifo_write@buf:
  5667                           	opt stack 0
  5668  000003                     i1WriteTimer0@timer:
  5669                           	opt stack 0
  5670                           
  5671                           ; 2 bytes @ 0x2
  5672  000003                     	ds	1
  5673  000004                     fifo_write@nbytes:
  5674                           	opt stack 0
  5675                           
  5676                           ; 4 bytes @ 0x3
  5677  000004                     	ds	4
  5678  000008                     ??_fifo_write:
  5679                           
  5680                           ; 0 bytes @ 0x7
  5681  000008                     	ds	4
  5682  00000C                     fifo_write@p:
  5683                           	opt stack 0
  5684                           
  5685                           ; 1 bytes @ 0xB
  5686  00000C                     	ds	1
  5687  00000D                     fifo_write@i:
  5688                           	opt stack 0
  5689                           
  5690                           ; 4 bytes @ 0xC
  5691  00000D                     	ds	4
  5692  000011                     ??_Interrupt:
  5693                           
  5694                           ; 0 bytes @ 0x10
  5695  000011                     	ds	7
  5696  000018                     Interrupt@c:
  5697                           	opt stack 0
  5698                           
  5699                           ; 1 bytes @ 0x17
  5700  000018                     	ds	1
  5701  000019                     ?_fifo_init:
  5702                           	opt stack 0
  5703  000019                     ?_WriteTimer0:
  5704                           	opt stack 0
  5705  000019                     ?_OpenUSART:
  5706                           	opt stack 0
  5707  000019                     ?_writeEEPROM:
  5708                           	opt stack 0
  5709  000019                     ?_setFilter:
  5710                           	opt stack 0
  5711  000019                     ?__CANIDToRegs:
  5712                           	opt stack 0
  5713  000019                     ?__RegsToCANID:
  5714                           	opt stack 0
  5715  000019                     ??_isdigit:
  5716  000019                     ?_readEEPROM:
  5717                           	opt stack 0
  5718  000019                     ?_fifo_read:
  5719                           	opt stack 0
  5720  000019                     ?_memset:
  5721                           	opt stack 0
  5722  000019                     ?_strcpy:
  5723                           	opt stack 0
  5724  000019                     ?_strchr:
  5725                           	opt stack 0
  5726  000019                     ?_strlen:
  5727                           	opt stack 0
  5728  000019                     ?_memcpy:
  5729                           	opt stack 0
  5730  000019                     ?_strcat:
  5731                           	opt stack 0
  5732  000019                     ?__ECANPointBuffer:
  5733                           	opt stack 0
  5734  000019                     ?___lwdiv:
  5735                           	opt stack 0
  5736  000019                     ?___lwmod:
  5737                           	opt stack 0
  5738  000019                     ?___wmul:
  5739                           	opt stack 0
  5740  000019                     ?___lldiv:
  5741                           	opt stack 0
  5742  000019                     ECANSetOperationMode@mode:
  5743                           	opt stack 0
  5744  000019                     nibbleFromChar@c:
  5745                           	opt stack 0
  5746  000019                     OpenTimer0@config:
  5747                           	opt stack 0
  5748  000019                     WriteUSART@data:
  5749                           	opt stack 0
  5750  000019                     toupper@c:
  5751                           	opt stack 0
  5752  000019                     __CANIDToRegs@ptr:
  5753                           	opt stack 0
  5754  000019                     __RegsToCANID@ptr:
  5755                           	opt stack 0
  5756  000019                     fifo_init@f:
  5757                           	opt stack 0
  5758  000019                     fifo_read@f:
  5759                           	opt stack 0
  5760  000019                     writeEEPROM@address:
  5761                           	opt stack 0
  5762  000019                     readEEPROM@address:
  5763                           	opt stack 0
  5764  000019                     _init_crc8$2025:
  5765                           	opt stack 0
  5766  000019                     WriteTimer0@timer0:
  5767                           	opt stack 0
  5768  000019                     OpenUSART@spbrg:
  5769                           	opt stack 0
  5770  000019                     ___lwdiv@dividend:
  5771                           	opt stack 0
  5772  000019                     ___lwmod@dividend:
  5773                           	opt stack 0
  5774  000019                     memcpy@d1:
  5775                           	opt stack 0
  5776  000019                     memset@p1:
  5777                           	opt stack 0
  5778  000019                     strcat@to:
  5779                           	opt stack 0
  5780  000019                     strchr@ptr:
  5781                           	opt stack 0
  5782  000019                     strcpy@to:
  5783                           	opt stack 0
  5784  000019                     strlen@s:
  5785                           	opt stack 0
  5786  000019                     ___wmul@multiplier:
  5787                           	opt stack 0
  5788  000019                     setFilter@val:
  5789                           	opt stack 0
  5790  000019                     ___lldiv@dividend:
  5791                           	opt stack 0
  5792                           
  5793                           ; 4 bytes @ 0x18
  5794  000019                     	ds	1
  5795  00001A                     ?_putsUSART:
  5796                           	opt stack 0
  5797  00001A                     ??_printBinary:
  5798  00001A                     ?_strichr:
  5799                           	opt stack 0
  5800  00001A                     _isdigit$2846:
  5801                           	opt stack 0
  5802  00001A                     putsUSART@data:
  5803                           	opt stack 0
  5804  00001A                     strichr@ptr:
  5805                           	opt stack 0
  5806                           
  5807                           ; 2 bytes @ 0x19
  5808  00001A                     	ds	1
  5809  00001B                     __RegsToCANID@val:
  5810                           	opt stack 0
  5811  00001B                     writeEEPROM@data:
  5812                           	opt stack 0
  5813  00001B                     readEEPROM@data:
  5814                           	opt stack 0
  5815  00001B                     OpenUSART@config:
  5816                           	opt stack 0
  5817  00001B                     isdigit@c:
  5818                           	opt stack 0
  5819  00001B                     fifo_init@buf:
  5820                           	opt stack 0
  5821  00001B                     fifo_read@buf:
  5822                           	opt stack 0
  5823  00001B                     init_crc8@j:
  5824                           	opt stack 0
  5825  00001B                     WriteTimer0@timer:
  5826                           	opt stack 0
  5827  00001B                     ___lwdiv@divisor:
  5828                           	opt stack 0
  5829  00001B                     ___lwmod@divisor:
  5830                           	opt stack 0
  5831  00001B                     memcpy@s1:
  5832                           	opt stack 0
  5833  00001B                     memset@c:
  5834                           	opt stack 0
  5835  00001B                     strcat@from:
  5836                           	opt stack 0
  5837  00001B                     strchr@chr:
  5838                           	opt stack 0
  5839  00001B                     strcpy@from:
  5840                           	opt stack 0
  5841  00001B                     strlen@cp:
  5842                           	opt stack 0
  5843  00001B                     ___wmul@multiplicand:
  5844                           	opt stack 0
  5845  00001B                     __CANIDToRegs@val:
  5846                           	opt stack 0
  5847                           
  5848                           ; 4 bytes @ 0x1A
  5849  00001B                     	ds	1
  5850  00001C                     ??_putsUSART:
  5851  00001C                     init_app_eeprom@i:
  5852                           	opt stack 0
  5853  00001C                     printBinary@value:
  5854                           	opt stack 0
  5855  00001C                     __RegsToCANID@type:
  5856                           	opt stack 0
  5857  00001C                     __ECANPointBuffer@b:
  5858                           	opt stack 0
  5859  00001C                     strichr@chr:
  5860                           	opt stack 0
  5861                           
  5862                           ; 2 bytes @ 0x1B
  5863  00001C                     	ds	1
  5864  00001D                     ??_strchr:
  5865  00001D                     ??_setFilter:
  5866  00001D                     ??__RegsToCANID:
  5867  00001D                     ?_hexStringToBytes:
  5868                           	opt stack 0
  5869  00001D                     ?_strnicmp:
  5870                           	opt stack 0
  5871  00001D                     init_crc8@crc:
  5872                           	opt stack 0
  5873  00001D                     ___lwdiv@counter:
  5874                           	opt stack 0
  5875  00001D                     ___lwmod@counter:
  5876                           	opt stack 0
  5877  00001D                     printBinary@i:
  5878                           	opt stack 0
  5879  00001D                     __ECANPointBuffer@pt:
  5880                           	opt stack 0
  5881  00001D                     fifo_init@size:
  5882                           	opt stack 0
  5883  00001D                     fifo_read@nbytes:
  5884                           	opt stack 0
  5885  00001D                     hexStringToBytes@buf:
  5886                           	opt stack 0
  5887  00001D                     memcpy@n:
  5888                           	opt stack 0
  5889  00001D                     memset@n:
  5890                           	opt stack 0
  5891  00001D                     strcat@cp:
  5892                           	opt stack 0
  5893  00001D                     strcpy@cp:
  5894                           	opt stack 0
  5895  00001D                     strnicmp@s1:
  5896                           	opt stack 0
  5897  00001D                     ___wmul@product:
  5898                           	opt stack 0
  5899  00001D                     ___lldiv@divisor:
  5900                           	opt stack 0
  5901                           
  5902                           ; 4 bytes @ 0x1C
  5903  00001D                     	ds	1
  5904  00001E                     init_crc8@i:
  5905                           	opt stack 0
  5906  00001E                     ___lwdiv@quotient:
  5907                           	opt stack 0
  5908                           
  5909                           ; 2 bytes @ 0x1D
  5910  00001E                     	ds	1
  5911  00001F                     ??_fifo_read:
  5912  00001F                     ?_atoi:
  5913                           	opt stack 0
  5914  00001F                     ?_strspn:
  5915                           	opt stack 0
  5916  00001F                     ?_strcspn:
  5917                           	opt stack 0
  5918  00001F                     __CANIDToRegs@type:
  5919                           	opt stack 0
  5920  00001F                     __RegsToCANID@Value:
  5921                           	opt stack 0
  5922  00001F                     hexStringToBytes@size:
  5923                           	opt stack 0
  5924  00001F                     atoi@s:
  5925                           	opt stack 0
  5926  00001F                     memcpy@d:
  5927                           	opt stack 0
  5928  00001F                     memset@p:
  5929                           	opt stack 0
  5930  00001F                     strnicmp@s2:
  5931                           	opt stack 0
  5932  00001F                     strcspn@s1:
  5933                           	opt stack 0
  5934  00001F                     strspn@s1:
  5935                           	opt stack 0
  5936                           
  5937                           ; 2 bytes @ 0x1E
  5938  00001F                     	ds	1
  5939  000020                     ??__CANIDToRegs:
  5940  000020                     ?_crc8:
  5941                           	opt stack 0
  5942  000020                     ?_ECANReceiveMessage:
  5943                           	opt stack 0
  5944  000020                     ?_utoa:
  5945                           	opt stack 0
  5946  000020                     ECANReceiveMessage@data:
  5947                           	opt stack 0
  5948  000020                     crc8@crc:
  5949                           	opt stack 0
  5950  000020                     hexStringToBytes@inhex:
  5951                           	opt stack 0
  5952  000020                     utoa@buf:
  5953                           	opt stack 0
  5954                           
  5955                           ; 2 bytes @ 0x1F
  5956  000020                     	ds	1
  5957  000021                     ??_atoi:
  5958  000021                     memcpy@s:
  5959                           	opt stack 0
  5960  000021                     strnicmp@len:
  5961                           	opt stack 0
  5962  000021                     strcspn@s2:
  5963                           	opt stack 0
  5964  000021                     strspn@s2:
  5965                           	opt stack 0
  5966  000021                     ___lldiv@quotient:
  5967                           	opt stack 0
  5968                           
  5969                           ; 4 bytes @ 0x20
  5970  000021                     	ds	1
  5971  000022                     ??_hexStringToBytes:
  5972  000022                     ECANReceiveMessage@dataLen:
  5973                           	opt stack 0
  5974  000022                     __CANIDToRegs@Value:
  5975                           	opt stack 0
  5976  000022                     crc8@m:
  5977                           	opt stack 0
  5978  000022                     utoa@val:
  5979                           	opt stack 0
  5980                           
  5981                           ; 2 bytes @ 0x21
  5982  000022                     	ds	1
  5983  000023                     ??_crc8:
  5984  000023                     ??_strnicmp:
  5985  000023                     ?_ECANSendMessage:
  5986                           	opt stack 0
  5987  000023                     setFilter@filter:
  5988                           	opt stack 0
  5989  000023                     ECANReceiveMessage@msgFlags:
  5990                           	opt stack 0
  5991  000023                     atoi@sign:
  5992                           	opt stack 0
  5993  000023                     fifo_read@p:
  5994                           	opt stack 0
  5995  000023                     strcspn@i:
  5996                           	opt stack 0
  5997  000023                     strspn@i:
  5998                           	opt stack 0
  5999  000023                     ECANSendMessage@id:
  6000                           	opt stack 0
  6001                           
  6002                           ; 4 bytes @ 0x22
  6003  000023                     	ds	1
  6004  000024                     setFilter@sidh:
  6005                           	opt stack 0
  6006  000024                     ECANReceiveMessage@id:
  6007                           	opt stack 0
  6008  000024                     atoi@a:
  6009                           	opt stack 0
  6010  000024                     utoa@base:
  6011                           	opt stack 0
  6012                           
  6013                           ; 2 bytes @ 0x23
  6014  000024                     	ds	1
  6015  000025                     ?_sendEscapedUartData:
  6016                           	opt stack 0
  6017  000025                     ?_calcCRC:
  6018                           	opt stack 0
  6019  000025                     ?_strtok:
  6020                           	opt stack 0
  6021  000025                     setFilter@sidl:
  6022                           	opt stack 0
  6023  000025                     ___lldiv@counter:
  6024                           	opt stack 0
  6025  000025                     strnicmp@r:
  6026                           	opt stack 0
  6027  000025                     sendEscapedUartData@pcrc:
  6028                           	opt stack 0
  6029  000025                     calcCRC@p:
  6030                           	opt stack 0
  6031  000025                     ECANReceiveMessage@savedPtr:
  6032                           	opt stack 0
  6033  000025                     fifo_read@i:
  6034                           	opt stack 0
  6035  000025                     hexStringToBytes@len:
  6036                           	opt stack 0
  6037  000025                     strtok@s1:
  6038                           	opt stack 0
  6039                           
  6040                           ; 2 bytes @ 0x24
  6041  000025                     	ds	1
  6042  000026                     ?_stristr:
  6043                           	opt stack 0
  6044  000026                     ?___llmod:
  6045                           	opt stack 0
  6046  000026                     setFilter@eidh:
  6047                           	opt stack 0
  6048  000026                     utoa@v:
  6049                           	opt stack 0
  6050  000026                     stristr@s1:
  6051                           	opt stack 0
  6052  000026                     ___llmod@dividend:
  6053                           	opt stack 0
  6054                           
  6055                           ; 4 bytes @ 0x25
  6056  000026                     	ds	1
  6057  000027                     sendEscapedUartData@c:
  6058                           	opt stack 0
  6059  000027                     calcCRC@len:
  6060                           	opt stack 0
  6061  000027                     setFilter@eidl:
  6062                           	opt stack 0
  6063  000027                     ECANReceiveMessage@i:
  6064                           	opt stack 0
  6065  000027                     ECANSendMessage@data:
  6066                           	opt stack 0
  6067  000027                     hexStringToBytes@p:
  6068                           	opt stack 0
  6069  000027                     strtok@s2:
  6070                           	opt stack 0
  6071                           
  6072                           ; 2 bytes @ 0x26
  6073  000027                     	ds	1
  6074  000028                     ?_sendVSCPDriverCommandReply:
  6075                           	opt stack 0
  6076  000028                     sendVSCPDriverErrorFrame@errorcode:
  6077                           	opt stack 0
  6078  000028                     sendVSCPDriverAck@crc:
  6079                           	opt stack 0
  6080  000028                     sendVSCPDriverNack@crc:
  6081                           	opt stack 0
  6082  000028                     sendVSCPDriverCommandReply@cmdCode:
  6083                           	opt stack 0
  6084  000028                     calcCRC@j:
  6085                           	opt stack 0
  6086  000028                     ECANReceiveMessage@mode:
  6087                           	opt stack 0
  6088  000028                     utoa@c:
  6089                           	opt stack 0
  6090  000028                     stristr@s2:
  6091                           	opt stack 0
  6092                           
  6093                           ; 2 bytes @ 0x27
  6094  000028                     	ds	1
  6095  000029                     ?_itoa:
  6096                           	opt stack 0
  6097  000029                     sendVSCPDriverErrorFrame@crc:
  6098                           	opt stack 0
  6099  000029                     sendVSCPDriverCommandReply@cmdReplyCode:
  6100                           	opt stack 0
  6101  000029                     calcCRC@crc:
  6102                           	opt stack 0
  6103  000029                     ECANSendMessage@dataLen:
  6104                           	opt stack 0
  6105  000029                     ECANReceiveMessage@temp:
  6106                           	opt stack 0
  6107  000029                     hexStringToBytes@i:
  6108                           	opt stack 0
  6109  000029                     itoa@buf:
  6110                           	opt stack 0
  6111                           
  6112                           ; 2 bytes @ 0x28
  6113  000029                     	ds	1
  6114  00002A                     sendVSCPDriverCommandReply@crc:
  6115                           	opt stack 0
  6116  00002A                     ECANSendMessage@msgFlags:
  6117                           	opt stack 0
  6118  00002A                     ECANReceiveMessage@ptr:
  6119                           	opt stack 0
  6120  00002A                     ___llmod@divisor:
  6121                           	opt stack 0
  6122                           
  6123                           ; 4 bytes @ 0x29
  6124  00002A                     	ds	1
  6125  00002B                     ??_ECANSendMessage:
  6126  00002B                     itoa@val:
  6127                           	opt stack 0
  6128                           
  6129                           ; 2 bytes @ 0x2A
  6130  00002B                     	ds	1
  6131  00002C                     ?_getCANFrame:
  6132                           	opt stack 0
  6133  00002C                     getCANFrame@pdlc:
  6134                           	opt stack 0
  6135  00002C                     sendVSCPFrame@id:
  6136                           	opt stack 0
  6137                           
  6138                           ; 4 bytes @ 0x2B
  6139  00002C                     	ds	1
  6140  00002D                     getCANFrame@pdata:
  6141                           	opt stack 0
  6142  00002D                     itoa@base:
  6143                           	opt stack 0
  6144                           
  6145                           ; 2 bytes @ 0x2C
  6146  00002D                     	ds	1
  6147  00002E                     ___llmod@counter:
  6148                           	opt stack 0
  6149                           
  6150                           ; 1 bytes @ 0x2D
  6151  00002E                     	ds	1
  6152  00002F                     doModeVscp@c:
  6153                           	opt stack 0
  6154                           
  6155                           ; 1 bytes @ 0x2E
  6156  00002F                     	ds	1
  6157  000030                     tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           indf0	equ	0xFEF
  6165                           postinc0	equ	0xFEE
  6166                           fsr0h	equ	0xFEA
  6167                           fsr0l	equ	0xFE9
  6168                           wreg	equ	0xFE8
  6169                           indf1	equ	0xFE7
  6170                           postinc1	equ	0xFE6
  6171                           postdec1	equ	0xFE5
  6172                           fsr1h	equ	0xFE2
  6173                           fsr1l	equ	0xFE1
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           plusw2	equ	0xFDB
  6178                           fsr2h	equ	0xFDA
  6179                           fsr2l	equ	0xFD9
  6180                           status	equ	0xFD8
  6181                           
  6182                           ; 0 bytes @ 0x2F
  6183 ;;
  6184 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6185 ;;
  6186 ;; *************** function _main *****************
  6187 ;; Defined at:
  6188 ;;		line 128 in file "main.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  argc            2  102[BANK0 ] int 
  6191 ;;  argv            3  104[BANK0 ] PTR PTR unsigned char 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  c               1  108[BANK0 ] unsigned char 
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  2  102[BANK0 ] int 
  6196 ;; Registers used:
  6197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : F/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6203 ;;      Params:         0       5       0       0       0       0       0
  6204 ;;      Locals:         0       1       0       0       0       0       0
  6205 ;;      Temps:          0       1       0       0       0       0       0
  6206 ;;      Totals:         0       7       0       0       0       0       0
  6207 ;;Total ram usage:        7 bytes
  6208 ;; Hardware stack levels required when called:   10
  6209 ;; This function calls:
  6210 ;;		_fifo_init
  6211 ;;		_init_crc8
  6212 ;;		_readEEPROM
  6213 ;;		_vscp_restoreDefaults
  6214 ;;		_init
  6215 ;;		_putsUSART
  6216 ;;		_printFirmwareVersion
  6217 ;;		_printMode
  6218 ;;		_fifo_read
  6219 ;;		_doModeVerbose
  6220 ;;		_doModeVscp
  6221 ;;		_doModeSLCAN
  6222 ;;		_doModeVscpNode
  6223 ;; This function is called by:
  6224 ;;		Startup code after reset
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text0
  6229  003C3C                     __ptext0:
  6230                           	opt stack 0
  6231  003C3C                     _main:
  6232                           	opt stack 20
  6233                           
  6234                           ;main.c: 130: fifo_init( &inputFifo, inputBuffer, sizeof(inputBuffer) );
  6235                           
  6236                           ;incstack = 0
  6237                           ;incstack = 0
  6238  003C3C  0101               	movlb	1	; () banked
  6239  003C3E  0E01               	movlw	high _inputFifo
  6240  003C40  6E1A               	movwf	?_fifo_init+1,c
  6241  003C42  0EC4               	movlw	low _inputFifo
  6242  003C44  6E19               	movwf	?_fifo_init,c
  6243  003C46  0E03               	movlw	high _inputBuffer
  6244  003C48  6E1C               	movwf	?_fifo_init+3,c
  6245  003C4A  0E3D               	movlw	low _inputBuffer
  6246  003C4C  6E1B               	movwf	?_fifo_init+2,c
  6247  003C4E  0E01               	movlw	1
  6248  003C50  6E1E               	movwf	?_fifo_init+5,c
  6249  003C52  0EF4               	movlw	244
  6250  003C54  6E1D               	movwf	?_fifo_init+4,c
  6251  003C56  EC3B  F010         	call	_fifo_init	;wreg free
  6252                           
  6253                           ;main.c: 133: init_crc8();
  6254  003C5A  EC8E  F012         	call	_init_crc8	;wreg free
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;main.c: 137: if (( 0x55 != readEEPROM( 0x01 ) ) ||
  6258                           ;main.c: 138: ( 0xaa != readEEPROM( 0x02 ) ) ) {
  6259  003C5E  6A1A               	clrf	?_readEEPROM+1,c
  6260  003C60  0E01               	movlw	1
  6261  003C62  6E19               	movwf	?_readEEPROM,c
  6262  003C64  EC7E  F00E         	call	_readEEPROM	;wreg free
  6263  003C68  0A55               	xorlw	85
  6264  003C6A  E107               	bnz	l12471
  6265  003C6C  6A1A               	clrf	?_readEEPROM+1,c
  6266  003C6E  0E02               	movlw	2
  6267  003C70  6E19               	movwf	?_readEEPROM,c
  6268  003C72  EC7E  F00E         	call	_readEEPROM	;wreg free
  6269  003C76  0AAA               	xorlw	170
  6270  003C78  A4D8               	btfss	status,2,c
  6271  003C7A                     l12471:
  6272                           
  6273                           ;main.c: 139: vscp_restoreDefaults();
  6274  003C7A  EC71  F00E         	call	_vscp_restoreDefaults	;wreg free
  6275                           
  6276                           ;main.c: 140: }
  6277                           ;main.c: 142: init();
  6278  003C7E  EC7B  F010         	call	_init	;wreg free
  6279                           
  6280                           ;main.c: 146: _delay((unsigned long)((10)*(40000000/4000.0)));
  6281  003C82  0E82               	movlw	130
  6282  003C84  0100               	movlb	0	; () banked
  6283  003C86  6FCB               	movwf	??_main& (0+255),b
  6284  003C88  0EDD               	movlw	221
  6285  003C8A                     u20097:
  6286  003C8A  2EE8               	decfsz	wreg,f,c
  6287  003C8C  D7FE               	goto	u20097
  6288  003C8E  2FCB               	decfsz	??_main& (0+255),f,b
  6289  003C90  D7FC               	goto	u20097
  6290  003C92  D000               	nop2	
  6291                           
  6292                           ;main.c: 150: putsUSART((char *)"\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6293  003C94  0E76               	movlw	high STR_1
  6294  003C96  6E1B               	movwf	?_putsUSART+1,c
  6295  003C98  0E52               	movlw	low STR_1
  6296  003C9A  6E1A               	movwf	?_putsUSART,c
  6297  003C9C  EC50  F011         	call	_putsUSART	;wreg free
  6298                           
  6299                           ;main.c: 151: putsUSART((char *)"Copyright (C) 2014 Grodans Paradis AB, Sweden\r\n");
  6300  003CA0  0E72               	movlw	high STR_2
  6301  003CA2  6E1B               	movwf	?_putsUSART+1,c
  6302  003CA4  0EE3               	movlw	low STR_2
  6303  003CA6  6E1A               	movwf	?_putsUSART,c
  6304  003CA8  EC50  F011         	call	_putsUSART	;wreg free
  6305                           
  6306                           ;main.c: 152: printFirmwareVersion();
  6307  003CAC  ECAF  F014         	call	_printFirmwareVersion	;wreg free
  6308                           
  6309                           ;main.c: 153: printMode();
  6310  003CB0  ECFC  F012         	call	_printMode	;wreg free
  6311                           
  6312                           ;main.c: 157: if ( 0 && ( 0 != mode ) ) {
  6313  003CB4  D02A               	goto	l12503
  6314  003CB6                     l368:
  6315                           
  6316                           ; BSR set to: 0
  6317  003CB6  0004               	clrwdt		;# 
  6318                           
  6319                           ;main.c: 168: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  6320  003CB8  0E01               	movlw	high _inputFifo
  6321  003CBA  6E1A               	movwf	?_fifo_read+1,c
  6322  003CBC  0EC4               	movlw	low _inputFifo
  6323  003CBE  6E19               	movwf	?_fifo_read,c
  6324  003CC0  0100               	movlb	0	; () banked
  6325  003CC2  0E00               	movlw	high main@c
  6326  003CC4  6E1C               	movwf	?_fifo_read+3,c
  6327  003CC6  0ECC               	movlw	low main@c
  6328  003CC8  6E1B               	movwf	?_fifo_read+2,c
  6329  003CCA  6A1E               	clrf	?_fifo_read+5,c
  6330  003CCC  0E01               	movlw	1
  6331  003CCE  6E1D               	movwf	?_fifo_read+4,c
  6332  003CD0  EC94  F017         	call	_fifo_read	;wreg free
  6333  003CD4  0419               	decf	?_fifo_read,w,c
  6334  003CD6  101A               	iorwf	?_fifo_read+1,w,c
  6335  003CD8  E10D               	bnz	l369
  6336                           
  6337                           ;main.c: 169: (INTCONbits.GIE = 1);
  6338  003CDA  8EF2               	bsf	intcon,7,c	;volatile
  6339                           
  6340                           ;main.c: 170: if ( 'v' == c ) {
  6341  003CDC  0100               	movlb	0	; () banked
  6342  003CDE  51CC               	movf	main@c& (0+255),w,b
  6343  003CE0  0A76               	xorlw	118
  6344  003CE2  E108               	bnz	l369
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;main.c: 171: mode = 0;
  6348  003CE4  6BD7               	clrf	_mode& (0+255),b
  6349                           
  6350                           ; BSR set to: 0
  6351                           ;main.c: 172: putsUSART((char *)"Temporary verbose mode set\r\n");
  6352  003CE6  0E78               	movlw	high STR_4
  6353  003CE8  6E1B               	movwf	?_putsUSART+1,c
  6354  003CEA  0E2A               	movlw	low STR_4
  6355  003CEC  6E1A               	movwf	?_putsUSART,c
  6356  003CEE  EC50  F011         	call	_putsUSART	;wreg free
  6357                           
  6358                           ;main.c: 173: break;
  6359  003CF2  D00B               	goto	l12503
  6360  003CF4                     l369:
  6361                           
  6362                           ;main.c: 174: }
  6363                           ;main.c: 175: }
  6364                           ;main.c: 176: (INTCONbits.GIE = 1);
  6365  003CF4  8EF2               	bsf	intcon,7,c	;volatile
  6366  003CF6  0EB8               	movlw	184
  6367  003CF8  0100               	movlb	0	; () banked
  6368  003CFA  5DCD               	subwf	_timekeeper& (0+255),w,b	;volatile
  6369  003CFC  0E0B               	movlw	11
  6370  003CFE  59CE               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6371  003D00  0E00               	movlw	0
  6372  003D02  59CF               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6373  003D04  0E00               	movlw	0
  6374  003D06  59D0               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6375  003D08  E3D6               	bnc	l368
  6376  003D0A                     l12503:
  6377                           
  6378                           ;main.c: 177: }
  6379                           ;main.c: 178: }
  6380                           ;main.c: 180: ledFunctionality = 1;
  6381  003D0A  0E01               	movlw	1
  6382  003D0C  6E3C               	movwf	_ledFunctionality,c
  6383  003D0E                     l372:
  6384  003D0E  0004               	clrwdt		;# 
  6385                           
  6386                           ;main.c: 188: if ( COMSTATbits.TXBO ) {
  6387  003D10  AA74               	btfss	3956,5,c	;volatile
  6388  003D12  D002               	goto	l373
  6389                           
  6390                           ;main.c: 190: ledFunctionality = 6;
  6391  003D14  0E06               	movlw	6
  6392  003D16  D009               	goto	L1
  6393  003D18                     l373:
  6394                           
  6395                           ;main.c: 192: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
  6396  003D18  B874               	btfsc	3956,4,c	;volatile
  6397  003D1A  D002               	goto	l12511
  6398  003D1C  A674               	btfss	3956,3,c	;volatile
  6399  003D1E  D002               	goto	l375
  6400  003D20                     l12511:
  6401                           
  6402                           ;main.c: 194: ledFunctionality = 5;
  6403  003D20  0E05               	movlw	5
  6404  003D22  D003               	goto	L1
  6405  003D24                     l375:
  6406                           
  6407                           ;main.c: 198: ledFunctionality = 4;
  6408  003D24  0E04               	movlw	4
  6409                           
  6410                           ;main.c: 196: else if ( COMSTATbits.EWARN ) {
  6411  003D26  A074               	btfss	3956,0,c	;volatile
  6412                           
  6413                           ;main.c: 200: else {
  6414                           ;main.c: 202: ledFunctionality = 1;
  6415                           
  6416                           ;main.c: 199: }
  6417  003D28  0E01               	movlw	1
  6418  003D2A                     L1:
  6419  003D2A  6E3C               	movwf	_ledFunctionality,c
  6420                           
  6421                           ;main.c: 203: }
  6422                           ;main.c: 206: if ( COMSTATbits.RXBnOVFL ) {
  6423  003D2C  AC74               	btfss	3956,6,c	;volatile
  6424  003D2E  D007               	goto	l12523
  6425                           
  6426                           ;main.c: 207: can_receiveOverruns++;
  6427  003D30  0101               	movlb	1	; () banked
  6428  003D32  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6429  003D34  0E00               	movlw	0
  6430  003D36  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6431  003D38  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6432  003D3A  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6433                           
  6434                           ; BSR set to: 1
  6435                           ;main.c: 208: COMSTATbits.RXBnOVFL = 0;
  6436  003D3C  9C74               	bcf	3956,6,c	;volatile
  6437  003D3E                     l12523:
  6438                           
  6439                           ;main.c: 209: }
  6440                           ;main.c: 211: if ( 0 == mode ) {
  6441  003D3E  0100               	movlb	0	; () banked
  6442  003D40  67D7               	tstfsz	_mode& (0+255),b
  6443  003D42  D003               	goto	l12527
  6444  003D44                     l12525:
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;main.c: 212: doModeVerbose();
  6448  003D44  EC0B  F02D         	call	_doModeVerbose	;wreg free
  6449                           
  6450                           ;main.c: 213: }
  6451  003D48  D7E2               	goto	l372
  6452  003D4A                     l12527:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;main.c: 214: else if ( 1 == mode ) {
  6456  003D4A  05D7               	decf	_mode& (0+255),w,b
  6457  003D4C  E103               	bnz	l12531
  6458                           
  6459                           ; BSR set to: 0
  6460                           ;main.c: 215: doModeVscp();
  6461  003D4E  EC13  F020         	call	_doModeVscp	;wreg free
  6462                           
  6463                           ;main.c: 216: }
  6464  003D52  D7DD               	goto	l372
  6465  003D54                     l12531:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;main.c: 217: else if ( 2 == mode ) {
  6469  003D54  51D7               	movf	_mode& (0+255),w,b
  6470  003D56  0A02               	xorlw	2
  6471  003D58  E103               	bnz	l12535
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;main.c: 218: doModeSLCAN();
  6475  003D5A  EC98  F027         	call	_doModeSLCAN	;wreg free
  6476                           
  6477                           ;main.c: 219: }
  6478  003D5E  D7D7               	goto	l372
  6479  003D60                     l12535:
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 220: else if ( 3 == mode ) {
  6483  003D60  51D7               	movf	_mode& (0+255),w,b
  6484  003D62  0A03               	xorlw	3
  6485  003D64  E1EF               	bnz	l12525
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;main.c: 221: doModeVscpNode();
  6489  003D66  EC70  F00E         	call	_doModeVscpNode	;wreg free
  6490                           
  6491                           ;main.c: 222: }
  6492  003D6A  D7D1               	goto	l372
  6493  003D6C                     __end_of_main:
  6494                           	opt stack 0
  6495                           tblptru	equ	0xFF8
  6496                           tblptrh	equ	0xFF7
  6497                           tblptrl	equ	0xFF6
  6498                           tablat	equ	0xFF5
  6499                           prodh	equ	0xFF4
  6500                           prodl	equ	0xFF3
  6501                           intcon	equ	0xFF2
  6502                           indf0	equ	0xFEF
  6503                           postinc0	equ	0xFEE
  6504                           fsr0h	equ	0xFEA
  6505                           fsr0l	equ	0xFE9
  6506                           wreg	equ	0xFE8
  6507                           indf1	equ	0xFE7
  6508                           postinc1	equ	0xFE6
  6509                           postdec1	equ	0xFE5
  6510                           fsr1h	equ	0xFE2
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           plusw2	equ	0xFDB
  6516                           fsr2h	equ	0xFDA
  6517                           fsr2l	equ	0xFD9
  6518                           status	equ	0xFD8
  6519                           
  6520 ;; *************** function _doModeVscpNode *****************
  6521 ;; Defined at:
  6522 ;;		line 1399 in file "main.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;		None               void
  6529 ;; Registers used:
  6530 ;;		None
  6531 ;; Tracked objects:
  6532 ;;		On entry : F/0
  6533 ;;		On exit  : F/0
  6534 ;;		Unchanged: F/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6536 ;;      Params:         0       0       0       0       0       0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0
  6539 ;;      Totals:         0       0       0       0       0       0       0
  6540 ;;Total ram usage:        0 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    2
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_main
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           	psect	text1
  6551  001CE0                     __ptext1:
  6552                           	opt stack 0
  6553  001CE0                     _doModeVscpNode:
  6554                           	opt stack 27
  6555                           
  6556                           ; BSR set to: 0
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;incstack = 0
  6560                           ;incstack = 0
  6561  001CE0  0012               	return	
  6562  001CE2                     __end_of_doModeVscpNode:
  6563                           	opt stack 0
  6564                           tblptru	equ	0xFF8
  6565                           tblptrh	equ	0xFF7
  6566                           tblptrl	equ	0xFF6
  6567                           tablat	equ	0xFF5
  6568                           prodh	equ	0xFF4
  6569                           prodl	equ	0xFF3
  6570                           intcon	equ	0xFF2
  6571                           indf0	equ	0xFEF
  6572                           postinc0	equ	0xFEE
  6573                           fsr0h	equ	0xFEA
  6574                           fsr0l	equ	0xFE9
  6575                           wreg	equ	0xFE8
  6576                           indf1	equ	0xFE7
  6577                           postinc1	equ	0xFE6
  6578                           postdec1	equ	0xFE5
  6579                           fsr1h	equ	0xFE2
  6580                           fsr1l	equ	0xFE1
  6581                           indf2	equ	0xFDF
  6582                           postinc2	equ	0xFDE
  6583                           postdec2	equ	0xFDD
  6584                           plusw2	equ	0xFDB
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _doModeSLCAN *****************
  6590 ;; Defined at:
  6591 ;;		line 1195 in file "main.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;		None
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  id              4   42[BANK0 ] unsigned long 
  6596 ;;  dlc             1   46[BANK0 ] unsigned char 
  6597 ;;  rv              1   48[BANK0 ] enum E15660
  6598 ;;  c               1   47[BANK0 ] unsigned char 
  6599 ;; Return value:  Size  Location     Type
  6600 ;;		None               void
  6601 ;; Registers used:
  6602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : F/0
  6605 ;;		On exit  : C/0
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6608 ;;      Params:         0       0       0       0       0       0       0
  6609 ;;      Locals:         0       7       0       0       0       0       0
  6610 ;;      Temps:          0       7       0       0       0       0       0
  6611 ;;      Totals:         0      14       0       0       0       0       0
  6612 ;;Total ram usage:       14 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:    6
  6615 ;; This function calls:
  6616 ;;		_putsUSART
  6617 ;;		_fifo_read
  6618 ;;		_writeEEPROM
  6619 ;;		_ECANSetOperationMode
  6620 ;;		_memset
  6621 ;;		_receivePrintEventSLCAN
  6622 ;;		_strlen
  6623 ;;		_hexStringToBytes
  6624 ;;		_memcpy
  6625 ;;		_sendCANFrame
  6626 ;; This function is called by:
  6627 ;;		_main
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           	psect	text2
  6632  004F30                     __ptext2:
  6633                           	opt stack 0
  6634  004F30                     _doModeSLCAN:
  6635                           	opt stack 23
  6636                           
  6637                           ; BSR set to: 0
  6638                           ;main.c: 1196: uint8_t c;
  6639                           ;main.c: 1197: BOOL rv = 0;
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643                           ;incstack = 0
  6644  004F30  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;main.c: 1200: receivePrintEventSLCAN();
  6648  004F32  EC53  F022         	call	_receivePrintEventSLCAN	;wreg free
  6649                           
  6650                           ;main.c: 1203: (INTCONbits.GIE = 0);
  6651  004F36  9EF2               	bcf	intcon,7,c	;volatile
  6652                           
  6653                           ;main.c: 1205: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  6654  004F38  0E01               	movlw	high _inputFifo
  6655  004F3A  6E1A               	movwf	?_fifo_read+1,c
  6656  004F3C  0EC4               	movlw	low _inputFifo
  6657  004F3E  6E19               	movwf	?_fifo_read,c
  6658  004F40  0100               	movlb	0	; () banked
  6659  004F42  0E00               	movlw	high doModeSLCAN@c
  6660  004F44  6E1C               	movwf	?_fifo_read+3,c
  6661  004F46  0E8F               	movlw	low doModeSLCAN@c
  6662  004F48  6E1B               	movwf	?_fifo_read+2,c
  6663  004F4A  6A1E               	clrf	?_fifo_read+5,c
  6664  004F4C  0E01               	movlw	1
  6665  004F4E  6E1D               	movwf	?_fifo_read+4,c
  6666  004F50  EC94  F017         	call	_fifo_read	;wreg free
  6667  004F54  0419               	decf	?_fifo_read,w,c
  6668  004F56  101A               	iorwf	?_fifo_read+1,w,c
  6669  004F58  E001 D1AF          	bnz	l13535
  6670                           
  6671                           ;main.c: 1208: (INTCONbits.GIE = 1);
  6672  004F5C  8EF2               	bsf	intcon,7,c	;volatile
  6673                           
  6674                           ;main.c: 1210: if ( 0x0d != c ) {
  6675  004F5E  0100               	movlb	0	; () banked
  6676  004F60  518F               	movf	doModeSLCAN@c& (0+255),w,b
  6677  004F62  0A0D               	xorlw	13
  6678  004F64  E101 D160          	bz	l13523
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 1211: cmdbuf[ pos ] = c;
  6682  004F68  0E24               	movlw	low _cmdbuf
  6683  004F6A  25D8               	addwf	_pos& (0+255),w,b
  6684  004F6C  6ED9               	movwf	fsr2l,c
  6685  004F6E  6ADA               	clrf	fsr2h,c
  6686  004F70  0E01               	movlw	high _cmdbuf
  6687  004F72  22DA               	addwfc	fsr2h,f,c
  6688  004F74  C08F  FFDF         	movff	doModeSLCAN@c,indf2
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;main.c: 1212: pos++;
  6692  004F78  2BD8               	incf	_pos& (0+255),f,b
  6693  004F7A  D1A0               	goto	l663
  6694  004F7C                     l13417:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;main.c: 1220: if ( 1 == strlen(cmdbuf) ) {
  6698  004F7C  0101               	movlb	1	; () banked
  6699  004F7E  0E01               	movlw	high _cmdbuf
  6700  004F80  6E1A               	movwf	?_strlen+1,c
  6701  004F82  0E24               	movlw	low _cmdbuf
  6702  004F84  6E19               	movwf	?_strlen,c
  6703  004F86  ECC0  F00F         	call	_strlen	;wreg free
  6704  004F8A  0419               	decf	?_strlen,w,c
  6705  004F8C  101A               	iorwf	?_strlen+1,w,c
  6706  004F8E  E001 D176          	bnz	l13525
  6707                           
  6708                           ;main.c: 1221: putsUSART((char *)"JFrankfurt RS-232\r\n");
  6709  004F92  0E7A               	movlw	high STR_124
  6710  004F94  6E1B               	movwf	?_putsUSART+1,c
  6711  004F96  0E5A               	movlw	low STR_124
  6712  004F98  6E1A               	movwf	?_putsUSART,c
  6713  004F9A  EC50  F011         	call	_putsUSART	;wreg free
  6714  004F9E                     l13421:
  6715                           
  6716                           ;main.c: 1222: rv = 1;
  6717  004F9E  0E01               	movlw	1
  6718  004FA0  D0ED               	goto	L4
  6719  004FA2                     l13423:
  6720                           
  6721                           ; BSR set to: 0
  6722                           ;main.c: 1228: if ( 1 == strlen(cmdbuf) ) {
  6723  004FA2  0101               	movlb	1	; () banked
  6724  004FA4  0E01               	movlw	high _cmdbuf
  6725  004FA6  6E1A               	movwf	?_strlen+1,c
  6726  004FA8  0E24               	movlw	low _cmdbuf
  6727  004FAA  6E19               	movwf	?_strlen,c
  6728  004FAC  ECC0  F00F         	call	_strlen	;wreg free
  6729  004FB0  0419               	decf	?_strlen,w,c
  6730  004FB2  101A               	iorwf	?_strlen+1,w,c
  6731  004FB4  E001 D163          	bnz	l13525
  6732                           
  6733                           ;main.c: 1229: putsUSART((char *)"V1011\r\n");
  6734  004FB8  0E7B               	movlw	high STR_125
  6735  004FBA  6E1B               	movwf	?_putsUSART+1,c
  6736  004FBC  0ED5               	movlw	low STR_125
  6737  004FBE  6E1A               	movwf	?_putsUSART,c
  6738  004FC0  EC50  F011         	call	_putsUSART	;wreg free
  6739  004FC4  D7EC               	goto	l13421
  6740  004FC6                     l13429:
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;main.c: 1236: if ( 1 == strlen(cmdbuf) ) {
  6744  004FC6  0101               	movlb	1	; () banked
  6745  004FC8  0E01               	movlw	high _cmdbuf
  6746  004FCA  6E1A               	movwf	?_strlen+1,c
  6747  004FCC  0E24               	movlw	low _cmdbuf
  6748  004FCE  6E19               	movwf	?_strlen,c
  6749  004FD0  ECC0  F00F         	call	_strlen	;wreg free
  6750  004FD4  0419               	decf	?_strlen,w,c
  6751  004FD6  101A               	iorwf	?_strlen+1,w,c
  6752  004FD8  E001 D151          	bnz	l13525
  6753                           
  6754                           ;main.c: 1237: putsUSART((char *)"N1977\r\n");
  6755  004FDC  0E7B               	movlw	high STR_126
  6756  004FDE  6E1B               	movwf	?_putsUSART+1,c
  6757  004FE0  0EDD               	movlw	low STR_126
  6758  004FE2  6E1A               	movwf	?_putsUSART,c
  6759  004FE4  EC50  F011         	call	_putsUSART	;wreg free
  6760  004FE8  D7DA               	goto	l13421
  6761  004FEA                     l13435:
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;main.c: 1246: bInitiated = 1;
  6765  004FEA  0E01               	movlw	1
  6766  004FEC  6FD4               	movwf	_bInitiated& (0+255),b
  6767                           
  6768                           ;main.c: 1247: rv = 1;
  6769  004FEE  D0C7               	goto	L3
  6770  004FF0                     l673:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;main.c: 1252: if ( !bOpen ) {
  6774  004FF0  67D5               	tstfsz	_bOpen& (0+255),b
  6775  004FF2  D003               	goto	l13439
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;main.c: 1253: bInitiated = 1;
  6779  004FF4  0E01               	movlw	1
  6780  004FF6  6FD4               	movwf	_bInitiated& (0+255),b
  6781                           
  6782                           ;main.c: 1254: rv = 1;
  6783  004FF8  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  6784  004FFA                     l13439:
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;main.c: 1259: if ( 1 == strlen(cmdbuf) ) {
  6788  004FFA  0101               	movlb	1	; () banked
  6789  004FFC  0E01               	movlw	high _cmdbuf
  6790  004FFE  6E1A               	movwf	?_strlen+1,c
  6791  005000  0E24               	movlw	low _cmdbuf
  6792  005002  6E19               	movwf	?_strlen,c
  6793  005004  ECC0  F00F         	call	_strlen	;wreg free
  6794  005008  0419               	decf	?_strlen,w,c
  6795  00500A  101A               	iorwf	?_strlen+1,w,c
  6796  00500C  E001 D137          	bnz	l13525
  6797                           
  6798                           ;main.c: 1260: if (!bOpen && bInitiated ) {
  6799  005010  0100               	movlb	0	; () banked
  6800  005012  67D5               	tstfsz	_bOpen& (0+255),b
  6801  005014  D134               	goto	l13525
  6802                           
  6803                           ; BSR set to: 0
  6804  005016  51D4               	movf	_bInitiated& (0+255),w,b
  6805  005018  E101 D131          	bz	l13525
  6806                           
  6807                           ; BSR set to: 0
  6808                           ;main.c: 1261: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6809  00501C  0E00               	movlw	0
  6810  00501E  ECA5  F00E         	call	_ECANSetOperationMode
  6811                           
  6812                           ;main.c: 1262: bOpen = 1;
  6813  005022  0E01               	movlw	1
  6814  005024  0100               	movlb	0	; () banked
  6815  005026  6FD5               	movwf	_bOpen& (0+255),b
  6816  005028  D7BA               	goto	l13421
  6817  00502A                     l13451:
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;main.c: 1270: if ( 1 == strlen(cmdbuf) ) {
  6821  00502A  0101               	movlb	1	; () banked
  6822  00502C  0E01               	movlw	high _cmdbuf
  6823  00502E  6E1A               	movwf	?_strlen+1,c
  6824  005030  0E24               	movlw	low _cmdbuf
  6825  005032  6E19               	movwf	?_strlen,c
  6826  005034  ECC0  F00F         	call	_strlen	;wreg free
  6827  005038  0419               	decf	?_strlen,w,c
  6828  00503A  101A               	iorwf	?_strlen+1,w,c
  6829  00503C  E001 D11F          	bnz	l13525
  6830                           
  6831                           ;main.c: 1271: if ( bOpen ) {
  6832  005040  0100               	movlb	0	; () banked
  6833  005042  51D5               	movf	_bOpen& (0+255),w,b
  6834  005044  E0AC               	bz	l13421
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;main.c: 1272: ECANSetOperationMode(0x20);
  6838  005046  0E20               	movlw	32
  6839  005048  ECA5  F00E         	call	_ECANSetOperationMode
  6840                           
  6841                           ;main.c: 1273: bOpen = 0;
  6842  00504C  0100               	movlb	0	; () banked
  6843  00504E  6BD5               	clrf	_bOpen& (0+255),b
  6844  005050  D7A6               	goto	l13421
  6845  005052                     l13461:
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;main.c: 1286: if ( bOpen && ( strlen(cmdbuf) >= 10 ) ) {
  6849  005052  51D5               	movf	_bOpen& (0+255),w,b
  6850  005054  E101 D113          	bz	l13525
  6851                           
  6852                           ; BSR set to: 0
  6853  005058  0101               	movlb	1	; () banked
  6854  00505A  0E01               	movlw	high _cmdbuf
  6855  00505C  6E1A               	movwf	?_strlen+1,c
  6856  00505E  0E24               	movlw	low _cmdbuf
  6857  005060  6E19               	movwf	?_strlen,c
  6858  005062  ECC0  F00F         	call	_strlen	;wreg free
  6859  005066  0E0A               	movlw	10
  6860  005068  5C19               	subwf	?_strlen,w,c
  6861  00506A  0E00               	movlw	0
  6862  00506C  581A               	subwfb	?_strlen+1,w,c
  6863  00506E  E201 D106          	bnc	l13525
  6864                           
  6865                           ;main.c: 1288: uint32_t id;
  6866                           ;main.c: 1289: uint8_t dlc;
  6867                           ;main.c: 1291: if ( hexStringToBytes( wrkbuf, sizeof( wrkbuf ), cmdbuf ) < 5 ) {
  6868  005072  0101               	movlb	1	; () banked
  6869  005074  0E01               	movlw	high _wrkbuf
  6870  005076  6E1E               	movwf	?_hexStringToBytes+1,c
  6871  005078  0E74               	movlw	low _wrkbuf
  6872  00507A  6E1D               	movwf	?_hexStringToBytes,c
  6873  00507C  0E50               	movlw	80
  6874  00507E  6E1F               	movwf	?_hexStringToBytes+2,c
  6875  005080  0E01               	movlw	high _cmdbuf
  6876  005082  6E21               	movwf	?_hexStringToBytes+4,c
  6877  005084  0E24               	movlw	low _cmdbuf
  6878  005086  6E20               	movwf	?_hexStringToBytes+3,c
  6879  005088  EC8A  F015         	call	_hexStringToBytes	;wreg free
  6880  00508C  0100               	movlb	0	; () banked
  6881  00508E  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6882  005090  0E05               	movlw	5
  6883  005092  5D83               	subwf	??_doModeSLCAN& (0+255),w,b
  6884  005094  E201 D0F3          	bnc	l13525
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 1293: }
  6888                           ;main.c: 1295: id = (uint32_t)wrkbuf[0]<<24 + (uint32_t)wrkbuf[1]<<16 + (uint32_t)wrkbuf
      +                          [2]<<8 + wrkbuf[3];
  6889  005098  C177  F083         	movff	_wrkbuf+3,??_doModeSLCAN
  6890  00509C  0E08               	movlw	8
  6891  00509E  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6892  0050A0  C176  F084         	movff	_wrkbuf+2,??_doModeSLCAN+1
  6893  0050A4  0E10               	movlw	16
  6894  0050A6  2784               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  6895  0050A8  C175  F085         	movff	_wrkbuf+1,??_doModeSLCAN+2
  6896  0050AC  0E18               	movlw	24
  6897  0050AE  2785               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  6898  0050B0  C174  F086         	movff	_wrkbuf,??_doModeSLCAN+3
  6899  0050B4  6B87               	clrf	(??_doModeSLCAN+4)& (0+255),b
  6900  0050B6  6B88               	clrf	(??_doModeSLCAN+5)& (0+255),b
  6901  0050B8  6B89               	clrf	(??_doModeSLCAN+6)& (0+255),b
  6902  0050BA  2B85               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  6903  0050BC  D001               	goto	u17900
  6904  0050BE                     u17905:
  6905  0050BE  D8FF               	call	PL80	;call to abstracted procedure
  6906  0050C0                     u17900:
  6907  0050C0  2F85               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  6908  0050C2  D7FD               	goto	u17905
  6909  0050C4  2B84               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  6910  0050C6  D001               	goto	u17910
  6911  0050C8                     u17915:
  6912  0050C8  D8FA               	call	PL80	;call to abstracted procedure
  6913  0050CA                     u17910:
  6914  0050CA  2F84               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  6915  0050CC  D7FD               	goto	u17915
  6916  0050CE  2B83               	incf	??_doModeSLCAN& (0+255),f,b
  6917  0050D0  D001               	goto	u17920
  6918  0050D2                     u17925:
  6919  0050D2  D8F5               	call	PL80	;call to abstracted procedure
  6920  0050D4                     u17920:
  6921  0050D4  2F83               	decfsz	??_doModeSLCAN& (0+255),f,b
  6922  0050D6  D7FD               	goto	u17925
  6923  0050D8  C089  F08D         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  6924  0050DC  C088  F08C         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  6925  0050E0  C087  F08B         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  6926  0050E4  C086  F08A         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  6927                           
  6928                           ; BSR set to: 0
  6929                           ;main.c: 1296: dlc = vscpData[4];
  6930  0050E8  C044  F08E         	movff	_vscpData+4,doModeSLCAN@dlc
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;main.c: 1299: if ( dlc > 8 ) break;
  6934  0050EC  0E08               	movlw	8
  6935  0050EE  658E               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  6936  0050F0  D001               	goto	l13477
  6937  0050F2  D0C5               	goto	l13525
  6938  0050F4                     l13477:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 1300: if ( strlen( cmdbuf ) < ( 10 + 2*dlc) ) break;
  6942  0050F4  90D8               	bcf	status,0,c
  6943  0050F6  358E               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  6944  0050F8  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6945  0050FA  6B84               	clrf	(??_doModeSLCAN+1)& (0+255),b
  6946  0050FC  3784               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  6947  0050FE  0E0A               	movlw	10
  6948  005100  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6949  005102  0E00               	movlw	0
  6950  005104  2384               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  6951  005106  0101               	movlb	1	; () banked
  6952  005108  0E01               	movlw	high _cmdbuf
  6953  00510A  6E1A               	movwf	?_strlen+1,c
  6954  00510C  0E24               	movlw	low _cmdbuf
  6955  00510E  6E19               	movwf	?_strlen,c
  6956  005110  ECC0  F00F         	call	_strlen	;wreg free
  6957  005114  0100               	movlb	0	; () banked
  6958  005116  5183               	movf	??_doModeSLCAN& (0+255),w,b
  6959  005118  5C19               	subwf	?_strlen,w,c
  6960  00511A  5184               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  6961  00511C  581A               	subwfb	?_strlen+1,w,c
  6962  00511E  E201 D0AE          	bnc	l13525
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 1302: memcpy( vscpData, vscpData + 5, dlc );
  6966  005122  0E40               	movlw	low _vscpData
  6967  005124  6E19               	movwf	?_memcpy,c
  6968  005126  0E00               	movlw	high _vscpData
  6969  005128  6E1A               	movwf	?_memcpy+1,c
  6970  00512A  0E0F               	movlw	15
  6971  00512C  6E1A               	movwf	?_memcpy+1,c
  6972  00512E  0E5F               	movlw	__accesstop+-1
  6973  005130  6419               	cpfsgt	?_memcpy,c
  6974  005132  6A1A               	clrf	?_memcpy+1,c
  6975  005134  0E45               	movlw	low (_vscpData+5)
  6976  005136  6E1B               	movwf	?_memcpy+2,c
  6977  005138  0E00               	movlw	high (_vscpData+5)
  6978  00513A  6E1C               	movwf	?_memcpy+3,c
  6979  00513C  0E0F               	movlw	15
  6980  00513E  6E1C               	movwf	?_memcpy+3,c
  6981  005140  0E5F               	movlw	__accesstop+-1
  6982  005142  641B               	cpfsgt	?_memcpy+2,c
  6983  005144  6A1C               	clrf	?_memcpy+3,c
  6984  005146  C08E  F01D         	movff	doModeSLCAN@dlc,?_memcpy+4
  6985  00514A  6A1E               	clrf	?_memcpy+5,c
  6986  00514C  EC5B  F010         	call	_memcpy	;wreg free
  6987                           
  6988                           ;main.c: 1304: rv = sendCANFrame( id, dlc, vscpData );
  6989  005150  C08A  F07C         	movff	doModeSLCAN@id,?_sendCANFrame
  6990  005154  C08B  F07D         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  6991  005158  C08C  F07E         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  6992  00515C  C08D  F07F         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  6993  005160  C08E  F080         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  6994  005164  0E40               	movlw	low _vscpData
  6995  005166  0100               	movlb	0	; () banked
  6996  005168  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  6997  00516A  0E00               	movlw	high _vscpData
  6998  00516C  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  6999  00516E  0E0F               	movlw	15
  7000  005170  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  7001  005172  0E5F               	movlw	__accesstop+-1
  7002  005174  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
  7003  005176  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
  7004  005178  ECA3  F00F         	call	_sendCANFrame	;wreg free
  7005  00517C                     L4:
  7006  00517C  0100               	movlb	0	; () banked
  7007  00517E                     L3:
  7008  00517E  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  7009  005180  D07E               	goto	l13525
  7010  005182                     l13485:
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;main.c: 1319: if ( bOpen && ( strlen(cmdbuf) == 1 ) ) {
  7014  005182  51D5               	movf	_bOpen& (0+255),w,b
  7015  005184  E07C               	bz	l13525
  7016                           
  7017                           ; BSR set to: 0
  7018  005186  0101               	movlb	1	; () banked
  7019  005188  0E01               	movlw	high _cmdbuf
  7020  00518A  6E1A               	movwf	?_strlen+1,c
  7021  00518C  0E24               	movlw	low _cmdbuf
  7022  00518E  6E19               	movwf	?_strlen,c
  7023  005190  ECC0  F00F         	call	_strlen	;wreg free
  7024  005194  0419               	decf	?_strlen,w,c
  7025  005196  101A               	iorwf	?_strlen+1,w,c
  7026  005198  E172               	bnz	l13525
  7027                           
  7028                           ;main.c: 1320: putsUSART((char *)"F00\r\n");
  7029  00519A  0E7C               	movlw	high STR_127
  7030  00519C  6E1B               	movwf	?_putsUSART+1,c
  7031  00519E  0E79               	movlw	low STR_127
  7032  0051A0  6E1A               	movwf	?_putsUSART,c
  7033  0051A2  EC50  F011         	call	_putsUSART	;wreg free
  7034  0051A6  D06B               	goto	l13525
  7035  0051A8                     l13495:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;main.c: 1336: if ( 2 == strlen(cmdbuf) ) {
  7039  0051A8  0101               	movlb	1	; () banked
  7040  0051AA  0E01               	movlw	high _cmdbuf
  7041  0051AC  6E1A               	movwf	?_strlen+1,c
  7042  0051AE  0E24               	movlw	low _cmdbuf
  7043  0051B0  6E19               	movwf	?_strlen,c
  7044  0051B2  ECC0  F00F         	call	_strlen	;wreg free
  7045  0051B6  5019               	movf	?_strlen,w,c
  7046  0051B8  0A02               	xorlw	2
  7047  0051BA  101A               	iorwf	?_strlen+1,w,c
  7048  0051BC  E160               	bnz	l13525
  7049                           
  7050                           ;main.c: 1337: if (!bOpen ) {
  7051  0051BE  0100               	movlb	0	; () banked
  7052  0051C0  67D5               	tstfsz	_bOpen& (0+255),b
  7053  0051C2  D05D               	goto	l13525
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;main.c: 1338: if ( '0' == cmdbuf[1] ) {
  7057  0051C4  0101               	movlb	1	; () banked
  7058  0051C6  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7059  0051C8  0A30               	xorlw	48
  7060  0051CA  E109               	bnz	l13507
  7061                           
  7062                           ; BSR set to: 1
  7063                           ;main.c: 1339: nTimeStamp = 0;
  7064  0051CC  6A3D               	clrf	_nTimeStamp,c
  7065                           
  7066                           ; BSR set to: 1
  7067                           ;main.c: 1341: writeEEPROM( 0x05, 0 );
  7068  0051CE  6A1A               	clrf	?_writeEEPROM+1,c
  7069  0051D0  0E05               	movlw	5
  7070  0051D2  6E19               	movwf	?_writeEEPROM,c
  7071  0051D4  0E00               	movlw	0
  7072  0051D6  6A1B               	clrf	?_writeEEPROM+2,c
  7073  0051D8  ECDE  F00E         	call	_writeEEPROM	;wreg free
  7074  0051DC  D6E0               	goto	l13421
  7075  0051DE                     l13507:
  7076                           
  7077                           ; BSR set to: 1
  7078                           ;main.c: 1344: else if ( '1' == cmdbuf[1] ) {
  7079  0051DE  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7080  0051E0  0A31               	xorlw	49
  7081  0051E2  E10A               	bnz	l698
  7082                           
  7083                           ; BSR set to: 1
  7084                           ;main.c: 1345: nTimeStamp = 1;
  7085  0051E4  0E01               	movlw	1
  7086  0051E6  6E3D               	movwf	_nTimeStamp,c
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;main.c: 1347: writeEEPROM( 0x05,
  7090                           ;main.c: 1348: 1 );
  7091  0051E8  6A1A               	clrf	?_writeEEPROM+1,c
  7092  0051EA  0E05               	movlw	5
  7093  0051EC  6E19               	movwf	?_writeEEPROM,c
  7094  0051EE  0E01               	movlw	1
  7095  0051F0  6E1B               	movwf	?_writeEEPROM+2,c
  7096  0051F2  ECDE  F00E         	call	_writeEEPROM	;wreg free
  7097  0051F6  D6D3               	goto	l13421
  7098  0051F8                     l698:
  7099                           
  7100                           ; BSR set to: 1
  7101                           ;main.c: 1351: else {
  7102                           ;main.c: 1352: rv = 0;
  7103  0051F8  0100               	movlb	0	; () banked
  7104  0051FA  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  7105  0051FC  D040               	goto	l13525
  7106  0051FE                     l13515:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;main.c: 1360: writeEEPROM(0x01, 0xFF);
  7110  0051FE  6A1A               	clrf	?_writeEEPROM+1,c
  7111  005200  0E01               	movlw	1
  7112  005202  6E19               	movwf	?_writeEEPROM,c
  7113  005204  0EFF               	movlw	255
  7114  005206  681B               	setf	?_writeEEPROM+2,c
  7115  005208  ECDE  F00E         	call	_writeEEPROM	;wreg free
  7116  00520C  00FF               	reset		;# 
  7117                           
  7118                           ;main.c: 1362: break;
  7119  00520E  D037               	goto	l13525
  7120  005210                     l13517:
  7121                           
  7122                           ; BSR set to: 0
  7123                           ;main.c: 1365: {
  7124                           ;main.c: 1367: if ( 0 == strlen( cmdbuf ) ) {
  7125  005210  0101               	movlb	1	; () banked
  7126  005212  0E01               	movlw	high _cmdbuf
  7127  005214  6E1A               	movwf	?_strlen+1,c
  7128  005216  0E24               	movlw	low _cmdbuf
  7129  005218  6E19               	movwf	?_strlen,c
  7130  00521A  ECC0  F00F         	call	_strlen	;wreg free
  7131  00521E  501A               	movf	?_strlen+1,w,c
  7132  005220  1019               	iorwf	?_strlen,w,c
  7133  005222  E101 D6BC          	bz	l13421
  7134  005226  D02B               	goto	l13525
  7135  005228                     l13523:
  7136                           
  7137                           ; BSR set to: 0
  7138  005228  518F               	movf	doModeSLCAN@c& (0+255),w,b
  7139                           
  7140                           ; Switch size 1, requested type "space"
  7141                           ; Number of cases is 16, Range of values is 66 to 116
  7142                           ; switch strategies available:
  7143                           ; Name         Instructions Cycles
  7144                           ; simple_byte           49    25 (average)
  7145                           ;	Chosen strategy is simple_byte
  7146  00522A  0A42               	xorlw	66	; case 66
  7147  00522C  E0E8               	bz	l13515
  7148  00522E  0A01               	xorlw	1	; case 67
  7149  005230  E101 D6FB          	bz	l13451
  7150  005234  0A05               	xorlw	5	; case 70
  7151  005236  E0A5               	bz	l13485
  7152  005238  0A0C               	xorlw	12	; case 74
  7153  00523A  E101 D69F          	bz	l13417
  7154  00523E  0A07               	xorlw	7	; case 77
  7155  005240  E101 D6AD          	bz	l13421
  7156  005244  0A03               	xorlw	3	; case 78
  7157  005246  E101 D6BE          	bz	l13429
  7158  00524A  0A01               	xorlw	1	; case 79
  7159  00524C  E101 D6D5          	bz	l13439
  7160  005250  0A1D               	xorlw	29	; case 82
  7161  005252  E015               	bz	l13525
  7162  005254  0A01               	xorlw	1	; case 83
  7163  005256  E101 D6C8          	bz	l13435
  7164  00525A  0A07               	xorlw	7	; case 84
  7165  00525C  E101 D6F9          	bz	l13461
  7166  005260  0A02               	xorlw	2	; case 86
  7167  005262  E101 D69E          	bz	l13423
  7168  005266  0A0C               	xorlw	12	; case 90
  7169  005268  E09F               	bz	l13495
  7170  00526A  0A37               	xorlw	55	; case 109
  7171  00526C  E101 D697          	bz	l13421
  7172  005270  0A1F               	xorlw	31	; case 114
  7173  005272  E005               	bz	l13525
  7174  005274  0A01               	xorlw	1	; case 115
  7175  005276  E101 D6BB          	bz	l673
  7176  00527A  0A07               	xorlw	7	; case 116
  7177  00527C  E1C9               	bnz	l13517
  7178  00527E                     l13525:
  7179                           
  7180                           ;main.c: 1375: if ( rv ) {
  7181  00527E  0100               	movlb	0	; () banked
  7182  005280  5190               	movf	doModeSLCAN@rv& (0+255),w,b
  7183  005282  E007               	bz	l13529
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;main.c: 1377: putsUSART((char *)"\r");
  7187  005284  0E7C               	movlw	high STR_128
  7188  005286  6E1B               	movwf	?_putsUSART+1,c
  7189  005288  0EF2               	movlw	low STR_128
  7190  00528A  6E1A               	movwf	?_putsUSART,c
  7191  00528C  EC50  F011         	call	_putsUSART	;wreg free
  7192                           
  7193                           ;main.c: 1378: }
  7194  005290  D006               	goto	l13531
  7195  005292                     l13529:
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;main.c: 1379: else {
  7199                           ;main.c: 1381: putsUSART((char *)"\a");
  7200  005292  0E7C               	movlw	high STR_129
  7201  005294  6E1B               	movwf	?_putsUSART+1,c
  7202  005296  0EF0               	movlw	low STR_129
  7203  005298  6E1A               	movwf	?_putsUSART,c
  7204  00529A  EC50  F011         	call	_putsUSART	;wreg free
  7205  00529E                     l13531:
  7206                           
  7207                           ;main.c: 1382: }
  7208                           ;main.c: 1385: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7209  00529E  0101               	movlb	1	; () banked
  7210  0052A0  0E01               	movlw	high _cmdbuf
  7211  0052A2  6E1A               	movwf	?_memset+1,c
  7212  0052A4  0E24               	movlw	low _cmdbuf
  7213  0052A6  6E19               	movwf	?_memset,c
  7214  0052A8  6A1C               	clrf	?_memset+3,c
  7215  0052AA  6A1B               	clrf	?_memset+2,c
  7216  0052AC  6A1E               	clrf	?_memset+5,c
  7217  0052AE  0E50               	movlw	80
  7218  0052B0  6E1D               	movwf	?_memset+4,c
  7219  0052B2  ECF1  F00E         	call	_memset	;wreg free
  7220                           
  7221                           ;main.c: 1386: pos = 0;
  7222  0052B6  0100               	movlb	0	; () banked
  7223  0052B8  6BD8               	clrf	_pos& (0+255),b
  7224  0052BA                     l13535:
  7225                           
  7226                           ;main.c: 1388: }
  7227                           ;main.c: 1391: (INTCONbits.GIE = 1);
  7228  0052BA  8EF2               	bsf	intcon,7,c	;volatile
  7229  0052BC                     l663:
  7230  0052BC  0012               	return	
  7231  0052BE                     __end_of_doModeSLCAN:
  7232                           	opt stack 0
  7233  0052BE                     PL80:
  7234                           	opt stack 23
  7235  0052BE  90D8               	bcf	status,0,c
  7236  0052C0  3786               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7237  0052C2  3787               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7238  0052C4  3788               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7239  0052C6  3789               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7240  0052C8  0012               	return	
  7241  0052CA                     __end_ofPL80:
  7242                           	opt stack 0
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           indf0	equ	0xFEF
  7251                           postinc0	equ	0xFEE
  7252                           fsr0h	equ	0xFEA
  7253                           fsr0l	equ	0xFE9
  7254                           wreg	equ	0xFE8
  7255                           indf1	equ	0xFE7
  7256                           postinc1	equ	0xFE6
  7257                           postdec1	equ	0xFE5
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           plusw2	equ	0xFDB
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _hexStringToBytes *****************
  7269 ;; Defined at:
  7270 ;;		line 31 in file "hexutils.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;  buf             2   28[COMRAM] PTR unsigned char 
  7273 ;;		 -> wrkbuf(80), 
  7274 ;;  size            1   30[COMRAM] unsigned char 
  7275 ;;  inhex           2   31[COMRAM] PTR unsigned char 
  7276 ;;		 -> cmdbuf(80), 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  i               2   40[COMRAM] int 
  7279 ;;  p               2   38[COMRAM] PTR unsigned char 
  7280 ;;		 -> cmdbuf(80), 
  7281 ;;  len             2   36[COMRAM] int 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  1    wreg      unsigned char 
  7284 ;; Registers used:
  7285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : F/1
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7291 ;;      Params:         5       0       0       0       0       0       0
  7292 ;;      Locals:         6       0       0       0       0       0       0
  7293 ;;      Temps:          3       0       0       0       0       0       0
  7294 ;;      Totals:        14       0       0       0       0       0       0
  7295 ;;Total ram usage:       14 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    3
  7298 ;; This function calls:
  7299 ;;		_strlen
  7300 ;;		_nibbleFromChar
  7301 ;; This function is called by:
  7302 ;;		_doModeSLCAN
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text3
  7307  002B14                     __ptext3:
  7308                           	opt stack 0
  7309  002B14                     _hexStringToBytes:
  7310                           	opt stack 25
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;hexutils.c: 32: uint8_t *p;
  7314                           ;hexutils.c: 33: int len, i;
  7315                           ;hexutils.c: 35: len = strlen(inhex) / 2;
  7316                           
  7317                           ;incstack = 0
  7318                           ;incstack = 0
  7319  002B14  C020  F019         	movff	hexStringToBytes@inhex,?_strlen
  7320  002B18  C021  F01A         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7321  002B1C  ECC0  F00F         	call	_strlen	;wreg free
  7322  002B20  90D8               	bcf	status,0,c
  7323  002B22  301A               	rrcf	?_strlen+1,w,c
  7324  002B24  6E26               	movwf	hexStringToBytes@len+1,c
  7325  002B26  3019               	rrcf	?_strlen,w,c
  7326  002B28  6E25               	movwf	hexStringToBytes@len,c
  7327                           
  7328                           ;hexutils.c: 36: if ( len > size ) return 0;
  7329  002B2A  501F               	movf	hexStringToBytes@size,w,c
  7330  002B2C  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7331  002B2E  6A23               	clrf	(??_hexStringToBytes+1)& (0+255),c
  7332  002B30  5023               	movf	??_hexStringToBytes+1,w,c
  7333  002B32  0A80               	xorlw	128
  7334  002B34  6E24               	movwf	(??_hexStringToBytes+2)& (0+255),c
  7335  002B36  5025               	movf	hexStringToBytes@len,w,c
  7336  002B38  5C22               	subwf	??_hexStringToBytes,w,c
  7337  002B3A  5026               	movf	hexStringToBytes@len+1,w,c
  7338  002B3C  0A80               	xorlw	128
  7339  002B3E  5824               	subwfb	(??_hexStringToBytes+2)& (0+255),w,c
  7340  002B40  E202               	bc	l1486
  7341  002B42  0E00               	movlw	0
  7342  002B44  D033               	goto	l1487
  7343  002B46                     l1486:
  7344                           
  7345                           ;hexutils.c: 37: for (i=0, p = (uint8_t *)inhex; i<len; i++) {
  7346  002B46  6A29               	clrf	hexStringToBytes@i,c
  7347  002B48  6A2A               	clrf	hexStringToBytes@i+1,c
  7348  002B4A  C020  F027         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7349  002B4E  C021  F028         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7350  002B52  D022               	goto	l11821
  7351  002B54                     l11815:
  7352                           
  7353                           ;hexutils.c: 38: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
  7354  002B54  5029               	movf	hexStringToBytes@i,w,c
  7355  002B56  241D               	addwf	hexStringToBytes@buf,w,c
  7356  002B58  6ED9               	movwf	fsr2l,c
  7357  002B5A  502A               	movf	hexStringToBytes@i+1,w,c
  7358  002B5C  201E               	addwfc	hexStringToBytes@buf+1,w,c
  7359  002B5E  6EDA               	movwf	fsr2h,c
  7360  002B60  EE10 F001          	lfsr	1,1
  7361  002B64  5027               	movf	hexStringToBytes@p,w,c
  7362  002B66  26E1               	addwf	fsr1l,f,c
  7363  002B68  5028               	movf	hexStringToBytes@p+1,w,c
  7364  002B6A  22E2               	addwfc	fsr1h,f,c
  7365  002B6C  50E7               	movf	indf1,w,c
  7366  002B6E  EC1C  F010         	call	_nibbleFromChar
  7367  002B72  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7368  002B74  C027  FFE1         	movff	hexStringToBytes@p,fsr1l
  7369  002B78  C028  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7370  002B7C  50E7               	movf	indf1,w,c
  7371  002B7E  EC1C  F010         	call	_nibbleFromChar
  7372  002B82  6E23               	movwf	(??_hexStringToBytes+1)& (0+255),c
  7373  002B84  3823               	swapf	??_hexStringToBytes+1,w,c
  7374  002B86  0BF0               	andlw	240
  7375  002B88  1022               	iorwf	??_hexStringToBytes,w,c
  7376  002B8A  6EDF               	movwf	indf2,c
  7377                           
  7378                           ;hexutils.c: 39: p += 2;
  7379  002B8C  0E02               	movlw	2
  7380  002B8E  2627               	addwf	hexStringToBytes@p,f,c
  7381  002B90  0E00               	movlw	0
  7382  002B92  2228               	addwfc	hexStringToBytes@p+1,f,c
  7383  002B94  4A29               	infsnz	hexStringToBytes@i,f,c
  7384  002B96  2A2A               	incf	hexStringToBytes@i+1,f,c
  7385  002B98                     l11821:
  7386  002B98  502A               	movf	hexStringToBytes@i+1,w,c
  7387  002B9A  0A80               	xorlw	128
  7388  002B9C  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7389  002B9E  5025               	movf	hexStringToBytes@len,w,c
  7390  002BA0  5C29               	subwf	hexStringToBytes@i,w,c
  7391  002BA2  5026               	movf	hexStringToBytes@len+1,w,c
  7392  002BA4  0A80               	xorlw	128
  7393  002BA6  5822               	subwfb	??_hexStringToBytes& (0+255),w,c
  7394  002BA8  E3D5               	bnc	l11815
  7395                           
  7396                           ;hexutils.c: 40: }
  7397                           ;hexutils.c: 42: return i;
  7398  002BAA  5029               	movf	hexStringToBytes@i,w,c
  7399  002BAC                     l1487:
  7400  002BAC  0012               	return	
  7401  002BAE                     __end_of_hexStringToBytes:
  7402                           	opt stack 0
  7403                           tblptru	equ	0xFF8
  7404                           tblptrh	equ	0xFF7
  7405                           tblptrl	equ	0xFF6
  7406                           tablat	equ	0xFF5
  7407                           prodh	equ	0xFF4
  7408                           prodl	equ	0xFF3
  7409                           intcon	equ	0xFF2
  7410                           indf0	equ	0xFEF
  7411                           postinc0	equ	0xFEE
  7412                           fsr0h	equ	0xFEA
  7413                           fsr0l	equ	0xFE9
  7414                           wreg	equ	0xFE8
  7415                           indf1	equ	0xFE7
  7416                           postinc1	equ	0xFE6
  7417                           postdec1	equ	0xFE5
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           plusw2	equ	0xFDB
  7424                           fsr2h	equ	0xFDA
  7425                           fsr2l	equ	0xFD9
  7426                           status	equ	0xFD8
  7427                           
  7428 ;; *************** function _nibbleFromChar *****************
  7429 ;; Defined at:
  7430 ;;		line 16 in file "hexutils.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;  c               1    wreg     unsigned char 
  7433 ;; Auto vars:     Size  Location     Type
  7434 ;;  c               1   24[COMRAM] unsigned char 
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      unsigned char 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/1
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7444 ;;      Params:         0       0       0       0       0       0       0
  7445 ;;      Locals:         1       0       0       0       0       0       0
  7446 ;;      Temps:          0       0       0       0       0       0       0
  7447 ;;      Totals:         1       0       0       0       0       0       0
  7448 ;;Total ram usage:        1 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    2
  7451 ;; This function calls:
  7452 ;;		Nothing
  7453 ;; This function is called by:
  7454 ;;		_hexStringToBytes
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           	psect	text4
  7459  002038                     __ptext4:
  7460                           	opt stack 0
  7461  002038                     _nibbleFromChar:
  7462                           	opt stack 25
  7463                           
  7464                           ;incstack = 0
  7465                           ;incstack = 0
  7466                           ;nibbleFromChar@c stored from wreg
  7467  002038  CFE8 F019          	movff	wreg,nibbleFromChar@c
  7468                           
  7469                           ;hexutils.c: 17: if(c >= '0' && c <= '9') return c - '0';
  7470  00203C  0E2F               	movlw	47
  7471  00203E  6419               	cpfsgt	nibbleFromChar@c,c
  7472  002040  D006               	goto	l12265
  7473  002042  0E3A               	movlw	58
  7474  002044  6019               	cpfslt	nibbleFromChar@c,c
  7475  002046  D003               	goto	l12265
  7476  002048  5019               	movf	nibbleFromChar@c,w,c
  7477  00204A  0FD0               	addlw	208
  7478  00204C  D013               	goto	l1481
  7479  00204E                     l12265:
  7480                           
  7481                           ;hexutils.c: 18: if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  7482  00204E  0E60               	movlw	96
  7483  002050  6419               	cpfsgt	nibbleFromChar@c,c
  7484  002052  D006               	goto	l12273
  7485  002054  0E67               	movlw	103
  7486  002056  6019               	cpfslt	nibbleFromChar@c,c
  7487  002058  D003               	goto	l12273
  7488  00205A  5019               	movf	nibbleFromChar@c,w,c
  7489  00205C  0FA9               	addlw	169
  7490  00205E  D00A               	goto	l1481
  7491  002060                     l12273:
  7492                           
  7493                           ;hexutils.c: 19: if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  7494  002060  0E40               	movlw	64
  7495  002062  6419               	cpfsgt	nibbleFromChar@c,c
  7496  002064  D006               	goto	l12281
  7497  002066  0E47               	movlw	71
  7498  002068  6019               	cpfslt	nibbleFromChar@c,c
  7499  00206A  D003               	goto	l12281
  7500  00206C  5019               	movf	nibbleFromChar@c,w,c
  7501  00206E  0FC9               	addlw	201
  7502  002070  D001               	goto	l1481
  7503  002072                     l12281:
  7504                           
  7505                           ;hexutils.c: 20: return 255;
  7506  002072  0EFF               	movlw	255
  7507  002074                     l1481:
  7508  002074  0012               	return	
  7509  002076                     __end_of_nibbleFromChar:
  7510                           	opt stack 0
  7511                           tblptru	equ	0xFF8
  7512                           tblptrh	equ	0xFF7
  7513                           tblptrl	equ	0xFF6
  7514                           tablat	equ	0xFF5
  7515                           prodh	equ	0xFF4
  7516                           prodl	equ	0xFF3
  7517                           intcon	equ	0xFF2
  7518                           indf0	equ	0xFEF
  7519                           postinc0	equ	0xFEE
  7520                           fsr0h	equ	0xFEA
  7521                           fsr0l	equ	0xFE9
  7522                           wreg	equ	0xFE8
  7523                           indf1	equ	0xFE7
  7524                           postinc1	equ	0xFE6
  7525                           postdec1	equ	0xFE5
  7526                           fsr1h	equ	0xFE2
  7527                           fsr1l	equ	0xFE1
  7528                           indf2	equ	0xFDF
  7529                           postinc2	equ	0xFDE
  7530                           postdec2	equ	0xFDD
  7531                           plusw2	equ	0xFDB
  7532                           fsr2h	equ	0xFDA
  7533                           fsr2l	equ	0xFD9
  7534                           status	equ	0xFD8
  7535                           
  7536 ;; *************** function _receivePrintEventSLCAN *****************
  7537 ;; Defined at:
  7538 ;;		line 1837 in file "main.c"
  7539 ;; Parameters:    Size  Location     Type
  7540 ;;		None
  7541 ;; Auto vars:     Size  Location     Type
  7542 ;;  id              4   19[BANK0 ] unsigned long 
  7543 ;;  i               2   17[BANK0 ] int 
  7544 ;;  dlc             1   16[BANK0 ] unsigned char 
  7545 ;; Return value:  Size  Location     Type
  7546 ;;                  1    wreg      enum E15660
  7547 ;; Registers used:
  7548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7549 ;; Tracked objects:
  7550 ;;		On entry : F/0
  7551 ;;		On exit  : 0/0
  7552 ;;		Unchanged: 0/0
  7553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7554 ;;      Params:         0       0       0       0       0       0       0
  7555 ;;      Locals:         0       7       0       0       0       0       0
  7556 ;;      Temps:          0       3       0       0       0       0       0
  7557 ;;      Totals:         0      10       0       0       0       0       0
  7558 ;;Total ram usage:       10 bytes
  7559 ;; Hardware stack levels used:    1
  7560 ;; Hardware stack levels required when called:    5
  7561 ;; This function calls:
  7562 ;;		_putsUSART
  7563 ;;		_WriteUSART
  7564 ;;		_strlen
  7565 ;;		_getCANFrame
  7566 ;;		_ultoa
  7567 ;;		_itoa
  7568 ;; This function is called by:
  7569 ;;		_doModeSLCAN
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text5
  7574  0044A6                     __ptext5:
  7575                           	opt stack 0
  7576  0044A6                     _receivePrintEventSLCAN:
  7577                           	opt stack 23
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;main.c: 1838: int i;
  7581                           ;main.c: 1839: uint8_t dlc;
  7582                           ;main.c: 1840: uint32_t id;
  7583                           ;main.c: 1842: if ( getCANFrame( &id, &dlc, vscpData ) ) {
  7584                           
  7585                           ;incstack = 0
  7586                           ;incstack = 0
  7587  0044A6  0E70               	movlw	low receivePrintEventSLCAN@dlc
  7588  0044A8  6E2C               	movwf	?_getCANFrame,c
  7589  0044AA  0E40               	movlw	low _vscpData
  7590  0044AC  6E2D               	movwf	?_getCANFrame+1,c
  7591  0044AE  0E00               	movlw	high _vscpData
  7592  0044B0  6E2E               	movwf	?_getCANFrame+2,c
  7593  0044B2  0E0F               	movlw	15
  7594  0044B4  6E2E               	movwf	?_getCANFrame+2,c
  7595  0044B6  0E5F               	movlw	__accesstop+-1
  7596  0044B8  642D               	cpfsgt	?_getCANFrame+1,c
  7597  0044BA  6A2E               	clrf	?_getCANFrame+2,c
  7598  0044BC  0E73               	movlw	receivePrintEventSLCAN@id& (0+255)
  7599  0044BE  EC1E  F00F         	call	_getCANFrame
  7600  0044C2  0900               	iorlw	0
  7601  0044C4  E101 D0B0          	bz	l953
  7602                           
  7603                           ;main.c: 1845: cntRxFrames++;
  7604  0044C8  0101               	movlb	1	; () banked
  7605  0044CA  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7606  0044CC  0E00               	movlw	0
  7607  0044CE  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7608  0044D0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7609  0044D2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7610                           
  7611                           ;main.c: 1846: cntRxBytes += dlc;
  7612  0044D4  0100               	movlb	0	; () banked
  7613  0044D6  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7614  0044D8  0101               	movlb	1	; () banked
  7615  0044DA  2708               	addwf	_cntRxBytes& (0+255),f,b
  7616  0044DC  0E00               	movlw	0
  7617  0044DE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7618  0044E0  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7619  0044E2  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7620  0044E4                     l926:
  7621  0044E4  A2AC               	btfss	4012,1,c	;volatile
  7622  0044E6  D7FE               	goto	l926
  7623                           
  7624                           ;main.c: 1849: WriteUSART('T');
  7625  0044E8  0E54               	movlw	84
  7626  0044EA  EC90  F00E         	call	_WriteUSART
  7627                           
  7628                           ;main.c: 1851: ultoa( wrkbuf, id, 16 );
  7629  0044EE  0E01               	movlw	high _wrkbuf
  7630  0044F0  0100               	movlb	0	; () banked
  7631  0044F2  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7632  0044F4  0E74               	movlw	low _wrkbuf
  7633  0044F6  6F60               	movwf	?_ultoa& (0+255),b
  7634  0044F8  C073  F062         	movff	receivePrintEventSLCAN@id,?_ultoa+2
  7635  0044FC  C074  F063         	movff	receivePrintEventSLCAN@id+1,?_ultoa+3
  7636  004500  C075  F064         	movff	receivePrintEventSLCAN@id+2,?_ultoa+4
  7637  004504  C076  F065         	movff	receivePrintEventSLCAN@id+3,?_ultoa+5
  7638  004508  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7639  00450A  0E10               	movlw	16
  7640  00450C  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7641  00450E  EC86  F01A         	call	_ultoa	;wreg free
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;main.c: 1853: for ( i=0; i<((uint8_t)(8-sizeof(wrkbuf))); i++ ) {
  7645  004512  6B71               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7646  004514  6B72               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7647  004516                     l931:
  7648                           
  7649                           ; BSR set to: 0
  7650  004516  A2AC               	btfss	4012,1,c	;volatile
  7651  004518  D7FE               	goto	l931
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;main.c: 1855: WriteUSART('0');
  7655  00451A  0E30               	movlw	48
  7656  00451C  EC90  F00E         	call	_WriteUSART
  7657                           
  7658                           ; BSR set to: 0
  7659  004520  D884               	call	PL86	;call to abstracted procedure
  7660  004522  B4D8               	btfsc	status,2,c
  7661  004524  5D71               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7662  004526  E3F7               	bnc	l931
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;main.c: 1856: }
  7666                           ;main.c: 1857: putsUSART(wrkbuf);
  7667  004528  0101               	movlb	1	; () banked
  7668  00452A  0E01               	movlw	high _wrkbuf
  7669  00452C  6E1B               	movwf	?_putsUSART+1,c
  7670  00452E  0E74               	movlw	low _wrkbuf
  7671  004530  6E1A               	movwf	?_putsUSART,c
  7672  004532  EC50  F011         	call	_putsUSART	;wreg free
  7673                           
  7674                           ;main.c: 1860: itoa( wrkbuf, dlc, 16 );
  7675  004536  0E01               	movlw	high _wrkbuf
  7676  004538  6E2A               	movwf	?_itoa+1,c
  7677  00453A  0E74               	movlw	low _wrkbuf
  7678  00453C  6E29               	movwf	?_itoa,c
  7679  00453E  0100               	movlb	0	; () banked
  7680  004540  C070  F02B         	movff	receivePrintEventSLCAN@dlc,?_itoa+2
  7681  004544  6A2C               	clrf	?_itoa+3,c
  7682  004546  6A2E               	clrf	?_itoa+5,c
  7683  004548  0E10               	movlw	16
  7684  00454A  6E2D               	movwf	?_itoa+4,c
  7685  00454C  EC4F  F00F         	call	_itoa	;wreg free
  7686  004550                     l934:
  7687  004550  A2AC               	btfss	4012,1,c	;volatile
  7688  004552  D7FE               	goto	l934
  7689                           
  7690                           ;main.c: 1862: WriteUSART( wrkbuf[0] );
  7691  004554  0101               	movlb	1	; () banked
  7692  004556  5174               	movf	_wrkbuf& (0+255),w,b
  7693  004558  EC90  F00E         	call	_WriteUSART
  7694                           
  7695                           ;main.c: 1865: for ( i=0; i<dlc; i++ ) {
  7696  00455C  0100               	movlb	0	; () banked
  7697  00455E  6B71               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7698  004560  6B72               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7699  004562  D02B               	goto	l14411
  7700  004564                     l14399:
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;main.c: 1866: itoa( wrkbuf, vscpData[i], 16 );
  7704  004564  0E01               	movlw	high _wrkbuf
  7705  004566  6E2A               	movwf	?_itoa+1,c
  7706  004568  0E74               	movlw	low _wrkbuf
  7707  00456A  6E29               	movwf	?_itoa,c
  7708  00456C  0100               	movlb	0	; () banked
  7709  00456E  5171               	movf	receivePrintEventSLCAN@i& (0+255),w,b
  7710  004570  0F40               	addlw	low _vscpData
  7711  004572  6ED9               	movwf	fsr2l,c
  7712  004574  6ADA               	clrf	fsr2h,c
  7713  004576  50DF               	movf	indf2,w,c
  7714  004578  6E2B               	movwf	?_itoa+2,c
  7715  00457A  6A2C               	clrf	?_itoa+3,c
  7716  00457C  6A2E               	clrf	?_itoa+5,c
  7717  00457E  0E10               	movlw	16
  7718  004580  6E2D               	movwf	?_itoa+4,c
  7719  004582  EC4F  F00F         	call	_itoa	;wreg free
  7720                           
  7721                           ;main.c: 1868: if ( 2 != strlen( wrkbuf ) ) {
  7722  004586  0101               	movlb	1	; () banked
  7723  004588  0E01               	movlw	high _wrkbuf
  7724  00458A  6E1A               	movwf	?_strlen+1,c
  7725  00458C  0E74               	movlw	low _wrkbuf
  7726  00458E  6E19               	movwf	?_strlen,c
  7727  004590  ECC0  F00F         	call	_strlen	;wreg free
  7728  004594  5019               	movf	?_strlen,w,c
  7729  004596  0A02               	xorlw	2
  7730  004598  101A               	iorwf	?_strlen+1,w,c
  7731  00459A  E005               	bz	l14407
  7732  00459C                     l940:
  7733  00459C  A2AC               	btfss	4012,1,c	;volatile
  7734  00459E  D7FE               	goto	l940
  7735                           
  7736                           ;main.c: 1870: WriteUSART('0');
  7737  0045A0  0E30               	movlw	48
  7738  0045A2  EC90  F00E         	call	_WriteUSART
  7739  0045A6                     l14407:
  7740                           
  7741                           ;main.c: 1871: }
  7742                           ;main.c: 1873: putsUSART(wrkbuf);
  7743  0045A6  0101               	movlb	1	; () banked
  7744  0045A8  0E01               	movlw	high _wrkbuf
  7745  0045AA  6E1B               	movwf	?_putsUSART+1,c
  7746  0045AC  0E74               	movlw	low _wrkbuf
  7747  0045AE  6E1A               	movwf	?_putsUSART,c
  7748  0045B0  EC50  F011         	call	_putsUSART	;wreg free
  7749  0045B4  0100               	movlb	0	; () banked
  7750  0045B6  4B71               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7751  0045B8  2B72               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7752  0045BA                     l14411:
  7753                           
  7754                           ; BSR set to: 0
  7755  0045BA  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7756  0045BC  6F6D               	movwf	??_receivePrintEventSLCAN& (0+255),b
  7757  0045BE  6B6E               	clrf	(??_receivePrintEventSLCAN+1)& (0+255),b
  7758  0045C0  5172               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7759  0045C2  0A80               	xorlw	128
  7760  0045C4  6F6F               	movwf	(??_receivePrintEventSLCAN+2)& (0+255),b
  7761  0045C6  516D               	movf	??_receivePrintEventSLCAN& (0+255),w,b
  7762  0045C8  5D71               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7763  0045CA  516E               	movf	(??_receivePrintEventSLCAN+1)& (0+255),w,b
  7764  0045CC  0A80               	xorlw	128
  7765  0045CE  596F               	subwfb	(??_receivePrintEventSLCAN+2)& (0+255),w,b
  7766  0045D0  E3C9               	bnc	l14399
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;main.c: 1874: }
  7770                           ;main.c: 1877: if ( nTimeStamp ) {
  7771  0045D2  503D               	movf	_nTimeStamp,w,c
  7772  0045D4  E024               	bz	l950
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;main.c: 1878: ultoa( wrkbuf, timer, 16 );
  7776  0045D6  0E01               	movlw	high _wrkbuf
  7777  0045D8  0100               	movlb	0	; () banked
  7778  0045DA  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7779  0045DC  0E74               	movlw	low _wrkbuf
  7780  0045DE  6F60               	movwf	?_ultoa& (0+255),b
  7781  0045E0  C118  F062         	movff	_timer,?_ultoa+2	;volatile
  7782  0045E4  C119  F063         	movff	_timer+1,?_ultoa+3	;volatile
  7783  0045E8  C11A  F064         	movff	_timer+2,?_ultoa+4	;volatile
  7784  0045EC  C11B  F065         	movff	_timer+3,?_ultoa+5	;volatile
  7785  0045F0  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7786  0045F2  0E10               	movlw	16
  7787  0045F4  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7788  0045F6  EC86  F01A         	call	_ultoa	;wreg free
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;main.c: 1880: for ( i=0; i<((uint8_t)(8-sizeof(wrkbuf))); i++ ) {
  7792  0045FA  6B71               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7793  0045FC  6B72               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7794  0045FE                     l947:
  7795                           
  7796                           ; BSR set to: 0
  7797  0045FE  A2AC               	btfss	4012,1,c	;volatile
  7798  004600  D7FE               	goto	l947
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;main.c: 1882: WriteUSART('0');
  7802  004602  0E30               	movlw	48
  7803  004604  EC90  F00E         	call	_WriteUSART
  7804                           
  7805                           ; BSR set to: 0
  7806  004608  D810               	call	PL86	;call to abstracted procedure
  7807  00460A  B4D8               	btfsc	status,2,c
  7808  00460C  5D71               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7809  00460E  E3F7               	bnc	l947
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;main.c: 1883: }
  7813                           ;main.c: 1884: putsUSART(wrkbuf);
  7814  004610  0101               	movlb	1	; () banked
  7815  004612  0E01               	movlw	high _wrkbuf
  7816  004614  6E1B               	movwf	?_putsUSART+1,c
  7817  004616  0E74               	movlw	low _wrkbuf
  7818  004618  6E1A               	movwf	?_putsUSART,c
  7819  00461A  EC50  F011         	call	_putsUSART	;wreg free
  7820  00461E                     l950:
  7821  00461E  A2AC               	btfss	4012,1,c	;volatile
  7822  004620  D7FE               	goto	l950
  7823                           
  7824                           ;main.c: 1888: WriteUSART(0x0d);
  7825  004622  0E0D               	movlw	13
  7826  004624  EC90  F00E         	call	_WriteUSART
  7827  004628                     l953:
  7828  004628  0012               	return	
  7829  00462A                     __end_of_receivePrintEventSLCAN:
  7830                           	opt stack 0
  7831  00462A                     PL86:
  7832                           	opt stack 23
  7833  00462A  0100               	movlb	0	; () banked
  7834  00462C  4B71               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7835  00462E  2B72               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7836  004630  5172               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7837  004632  0A80               	xorlw	128
  7838  004634  0F80               	addlw	-128
  7839  004636  0CB8               	retlw	184
  7840  004638                     __end_ofPL86:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           indf0	equ	0xFEF
  7850                           postinc0	equ	0xFEE
  7851                           fsr0h	equ	0xFEA
  7852                           fsr0l	equ	0xFE9
  7853                           wreg	equ	0xFE8
  7854                           indf1	equ	0xFE7
  7855                           postinc1	equ	0xFE6
  7856                           postdec1	equ	0xFE5
  7857                           fsr1h	equ	0xFE2
  7858                           fsr1l	equ	0xFE1
  7859                           indf2	equ	0xFDF
  7860                           postinc2	equ	0xFDE
  7861                           postdec2	equ	0xFDD
  7862                           plusw2	equ	0xFDB
  7863                           fsr2h	equ	0xFDA
  7864                           fsr2l	equ	0xFD9
  7865                           status	equ	0xFD8
  7866                           
  7867 ;; *************** function _ultoa *****************
  7868 ;; Defined at:
  7869 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  7872 ;;		 -> wrkbuf(80), 
  7873 ;;  val             4    2[BANK0 ] unsigned long 
  7874 ;;  base            2    6[BANK0 ] int 
  7875 ;; Auto vars:     Size  Location     Type
  7876 ;;  v               4    8[BANK0 ] unsigned long 
  7877 ;;  c               1   12[BANK0 ] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  2    0[BANK0 ] PTR unsigned char 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : F/0
  7884 ;;		On exit  : F/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7887 ;;      Params:         0       8       0       0       0       0       0
  7888 ;;      Locals:         0       5       0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0
  7890 ;;      Totals:         0      13       0       0       0       0       0
  7891 ;;Total ram usage:       13 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    3
  7894 ;; This function calls:
  7895 ;;		___lldiv
  7896 ;;		___llmod
  7897 ;; This function is called by:
  7898 ;;		_receivePrintEventSLCAN
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text6
  7903  00350C                     __ptext6:
  7904                           	opt stack 0
  7905  00350C                     _ultoa:
  7906                           	opt stack 24
  7907                           
  7908                           ; BSR set to: 0
  7909                           
  7910                           ;incstack = 0
  7911                           ;incstack = 0
  7912  00350C  C062  F068         	movff	ultoa@val,ultoa@v
  7913  003510  C063  F069         	movff	ultoa@val+1,ultoa@v+1
  7914  003514  C064  F06A         	movff	ultoa@val+2,ultoa@v+2
  7915  003518  C065  F06B         	movff	ultoa@val+3,ultoa@v+3
  7916  00351C                     l11915:
  7917                           
  7918                           ; BSR set to: 0
  7919  00351C  C068  F019         	movff	ultoa@v,?___lldiv
  7920  003520  C069  F01A         	movff	ultoa@v+1,?___lldiv+1
  7921  003524  C06A  F01B         	movff	ultoa@v+2,?___lldiv+2
  7922  003528  C06B  F01C         	movff	ultoa@v+3,?___lldiv+3
  7923  00352C  D858               	call	PL70	;call to abstracted procedure
  7924  00352E  EC35  F013         	call	___lldiv	;wreg free
  7925  003532  C01C  F06B         	movff	?___lldiv+3,ultoa@v+3
  7926  003536  C01B  F06A         	movff	?___lldiv+2,ultoa@v+2
  7927  00353A  C01A  F069         	movff	?___lldiv+1,ultoa@v+1
  7928  00353E  C019  F068         	movff	?___lldiv,ultoa@v
  7929                           
  7930                           ; BSR set to: 0
  7931  003542  4B60               	infsnz	ultoa@buf& (0+255),f,b
  7932  003544  2B61               	incf	(ultoa@buf+1)& (0+255),f,b
  7933                           
  7934                           ; BSR set to: 0
  7935  003546  516B               	movf	(ultoa@v+3)& (0+255),w,b
  7936  003548  1168               	iorwf	ultoa@v& (0+255),w,b
  7937  00354A  1169               	iorwf	(ultoa@v+1)& (0+255),w,b
  7938  00354C  116A               	iorwf	(ultoa@v+2)& (0+255),w,b
  7939  00354E  E1E6               	bnz	l11915
  7940                           
  7941                           ; BSR set to: 0
  7942  003550  C060  FFD9         	movff	ultoa@buf,fsr2l
  7943  003554  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  7944  003558  6ADF               	clrf	indf2,c
  7945                           
  7946                           ; BSR set to: 0
  7947  00355A  0760               	decf	ultoa@buf& (0+255),f,b
  7948  00355C  A0D8               	btfss	status,0,c
  7949  00355E  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  7950  003560                     l11925:
  7951                           
  7952                           ; BSR set to: 0
  7953  003560  C062  F026         	movff	ultoa@val,?___llmod
  7954  003564  C063  F027         	movff	ultoa@val+1,?___llmod+1
  7955  003568  C064  F028         	movff	ultoa@val+2,?___llmod+2
  7956  00356C  C065  F029         	movff	ultoa@val+3,?___llmod+3
  7957  003570  C066  F02A         	movff	ultoa@base,?___llmod+4
  7958  003574  C067  F02B         	movff	ultoa@base+1,?___llmod+5
  7959  003578  0E00               	movlw	0
  7960  00357A  BE2B               	btfsc	?___llmod+5,7,c
  7961  00357C  0EFF               	movlw	-1
  7962  00357E  6E2C               	movwf	?___llmod+6,c
  7963  003580  6E2D               	movwf	?___llmod+7,c
  7964  003582  EC2C  F012         	call	___llmod	;wreg free
  7965  003586  5026               	movf	?___llmod,w,c
  7966  003588  6F6C               	movwf	ultoa@c& (0+255),b
  7967                           
  7968                           ; BSR set to: 0
  7969  00358A  C062  F019         	movff	ultoa@val,?___lldiv
  7970  00358E  C063  F01A         	movff	ultoa@val+1,?___lldiv+1
  7971  003592  C064  F01B         	movff	ultoa@val+2,?___lldiv+2
  7972  003596  C065  F01C         	movff	ultoa@val+3,?___lldiv+3
  7973  00359A  D821               	call	PL70	;call to abstracted procedure
  7974  00359C  EC35  F013         	call	___lldiv	;wreg free
  7975  0035A0  C01C  F065         	movff	?___lldiv+3,ultoa@val+3
  7976  0035A4  C01B  F064         	movff	?___lldiv+2,ultoa@val+2
  7977  0035A8  C01A  F063         	movff	?___lldiv+1,ultoa@val+1
  7978  0035AC  C019  F062         	movff	?___lldiv,ultoa@val
  7979                           
  7980                           ; BSR set to: 0
  7981  0035B0  0E09               	movlw	9
  7982  0035B2  656C               	cpfsgt	ultoa@c& (0+255),b
  7983  0035B4  D002               	goto	l2302
  7984                           
  7985                           ; BSR set to: 0
  7986  0035B6  0E07               	movlw	7
  7987  0035B8  276C               	addwf	ultoa@c& (0+255),f,b
  7988  0035BA                     l2302:
  7989                           
  7990                           ; BSR set to: 0
  7991  0035BA  0E30               	movlw	48
  7992  0035BC  276C               	addwf	ultoa@c& (0+255),f,b
  7993                           
  7994                           ; BSR set to: 0
  7995  0035BE  C060  FFD9         	movff	ultoa@buf,fsr2l
  7996  0035C2  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  7997  0035C6  C06C  FFDF         	movff	ultoa@c,indf2
  7998                           
  7999                           ; BSR set to: 0
  8000  0035CA  0760               	decf	ultoa@buf& (0+255),f,b
  8001  0035CC  A0D8               	btfss	status,0,c
  8002  0035CE  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  8003                           
  8004                           ; BSR set to: 0
  8005  0035D0  5165               	movf	(ultoa@val+3)& (0+255),w,b
  8006  0035D2  1162               	iorwf	ultoa@val& (0+255),w,b
  8007  0035D4  1163               	iorwf	(ultoa@val+1)& (0+255),w,b
  8008  0035D6  1164               	iorwf	(ultoa@val+2)& (0+255),w,b
  8009  0035D8  B4D8               	btfsc	status,2,c
  8010                           
  8011                           ; BSR set to: 0
  8012  0035DA  0012               	return	
  8013  0035DC  D7C1               	goto	l11925
  8014  0035DE                     __end_of_ultoa:
  8015                           	opt stack 0
  8016  0035DE                     PL70:
  8017                           	opt stack 24
  8018  0035DE  C066  F01D         	movff	ultoa@base,?___lldiv+4
  8019  0035E2  C067  F01E         	movff	ultoa@base+1,?___lldiv+5
  8020  0035E6  0E00               	movlw	0
  8021  0035E8  BE1E               	btfsc	?___lldiv+5,7,c
  8022  0035EA  0EFF               	movlw	-1
  8023  0035EC  6E1F               	movwf	?___lldiv+6,c
  8024  0035EE  6E20               	movwf	?___lldiv+7,c
  8025  0035F0  0012               	return	
  8026  0035F2                     __end_ofPL70:
  8027                           	opt stack 0
  8028                           tblptru	equ	0xFF8
  8029                           tblptrh	equ	0xFF7
  8030                           tblptrl	equ	0xFF6
  8031                           tablat	equ	0xFF5
  8032                           prodh	equ	0xFF4
  8033                           prodl	equ	0xFF3
  8034                           intcon	equ	0xFF2
  8035                           indf0	equ	0xFEF
  8036                           postinc0	equ	0xFEE
  8037                           fsr0h	equ	0xFEA
  8038                           fsr0l	equ	0xFE9
  8039                           wreg	equ	0xFE8
  8040                           indf1	equ	0xFE7
  8041                           postinc1	equ	0xFE6
  8042                           postdec1	equ	0xFE5
  8043                           fsr1h	equ	0xFE2
  8044                           fsr1l	equ	0xFE1
  8045                           indf2	equ	0xFDF
  8046                           postinc2	equ	0xFDE
  8047                           postdec2	equ	0xFDD
  8048                           plusw2	equ	0xFDB
  8049                           fsr2h	equ	0xFDA
  8050                           fsr2l	equ	0xFD9
  8051                           status	equ	0xFD8
  8052                           
  8053 ;; *************** function _doModeVscp *****************
  8054 ;; Defined at:
  8055 ;;		line 1012 in file "main.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;		None
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  c               1   46[COMRAM] unsigned char 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;		None               void
  8062 ;; Registers used:
  8063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8064 ;; Tracked objects:
  8065 ;;		On entry : F/0
  8066 ;;		On exit  : C/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8069 ;;      Params:         0       0       0       0       0       0       0
  8070 ;;      Locals:         1       0       0       0       0       0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0
  8072 ;;      Totals:         1       0       0       0       0       0       0
  8073 ;;Total ram usage:        1 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    6
  8076 ;; This function calls:
  8077 ;;		_fifo_read
  8078 ;;		_ECANSetOperationMode
  8079 ;;		_receivePrintEventCANAL
  8080 ;;		_calcCRC
  8081 ;;		_sendVSCPDriverErrorFrame
  8082 ;;		_sendVSCPDriverAck
  8083 ;;		_receiveVSCPModeCanalMsg
  8084 ;;		_sendVSCPDriverNack
  8085 ;;		_sendVSCPDriverCommandReply
  8086 ;; This function is called by:
  8087 ;;		_main
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           	psect	text7
  8092  004026                     __ptext7:
  8093                           	opt stack 0
  8094  004026                     _doModeVscp:
  8095                           	opt stack 23
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 1013: uint8_t c;
  8099                           ;main.c: 1016: if (!bSilent) {
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;incstack = 0
  8103                           ;incstack = 0
  8104  004026  67D6               	tstfsz	_bSilent& (0+255),b
  8105  004028  D002               	goto	l13273
  8106                           
  8107                           ; BSR set to: 0
  8108                           ;main.c: 1017: receivePrintEventCANAL();
  8109  00402A  ECB6  F01E         	call	_receivePrintEventCANAL	;wreg free
  8110  00402E                     l13273:
  8111                           
  8112                           ;main.c: 1018: }
  8113                           ;main.c: 1021: (INTCONbits.GIE = 0);
  8114  00402E  9EF2               	bcf	intcon,7,c	;volatile
  8115                           
  8116                           ;main.c: 1023: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  8117  004030  0101               	movlb	1	; () banked
  8118  004032  0E01               	movlw	high _inputFifo
  8119  004034  6E1A               	movwf	?_fifo_read+1,c
  8120  004036  0EC4               	movlw	low _inputFifo
  8121  004038  6E19               	movwf	?_fifo_read,c
  8122  00403A  0E2F               	movlw	low doModeVscp@c
  8123  00403C  6E1B               	movwf	?_fifo_read+2,c
  8124  00403E  0E00               	movlw	high doModeVscp@c
  8125  004040  6E1C               	movwf	?_fifo_read+3,c
  8126  004042  0E0F               	movlw	15
  8127  004044  6E1C               	movwf	?_fifo_read+3,c
  8128  004046  0E5F               	movlw	__accesstop+-1
  8129  004048  641B               	cpfsgt	?_fifo_read+2,c
  8130  00404A  6A1C               	clrf	?_fifo_read+3,c
  8131  00404C  6A1E               	clrf	?_fifo_read+5,c
  8132  00404E  0E01               	movlw	1
  8133  004050  6E1D               	movwf	?_fifo_read+4,c
  8134  004052  EC94  F017         	call	_fifo_read	;wreg free
  8135  004056  0419               	decf	?_fifo_read,w,c
  8136  004058  101A               	iorwf	?_fifo_read+1,w,c
  8137  00405A  E001 D09E          	bnz	l13397
  8138                           
  8139                           ;main.c: 1026: (INTCONbits.GIE = 1);
  8140  00405E  8EF2               	bsf	intcon,7,c	;volatile
  8141                           
  8142                           ;main.c: 1028: if ( 0 == stateVscpDriver ) {
  8143  004060  663F               	tstfsz	_stateVscpDriver,c
  8144  004062  D00E               	goto	l13293
  8145                           
  8146                           ;main.c: 1029: if ( bDLE ) {
  8147  004064  503B               	movf	_bDLE,w,c
  8148  004066  E009               	bz	l13289
  8149                           
  8150                           ;main.c: 1030: bDLE = 0;
  8151  004068  6A3B               	clrf	_bDLE,c
  8152                           
  8153                           ;main.c: 1033: if ( 0x02 == c ) {
  8154  00406A  502F               	movf	doModeVscp@c,w,c
  8155  00406C  0A02               	xorlw	2
  8156  00406E  E125               	bnz	l13325
  8157                           
  8158                           ;main.c: 1034: stateVscpDriver = 1;
  8159  004070  0E01               	movlw	1
  8160  004072  6E3F               	movwf	_stateVscpDriver,c
  8161                           
  8162                           ;main.c: 1035: pos = 0;
  8163  004074  0100               	movlb	0	; () banked
  8164  004076  6BD8               	clrf	_pos& (0+255),b
  8165  004078  D020               	goto	l13325
  8166  00407A                     l13289:
  8167                           
  8168                           ;main.c: 1038: else {
  8169                           ;main.c: 1039: bDLE = 1;
  8170  00407A  0E01               	movlw	1
  8171  00407C  6E3B               	movwf	_bDLE,c
  8172  00407E  D08E               	goto	l621
  8173  004080                     l13293:
  8174                           
  8175                           ;main.c: 1043: else if ( 1 == stateVscpDriver ) {
  8176  004080  043F               	decf	_stateVscpDriver,w,c
  8177  004082  E11B               	bnz	l13325
  8178                           
  8179                           ;main.c: 1045: if ( bDLE ) {
  8180  004084  503B               	movf	_bDLE,w,c
  8181  004086  E015               	bz	l13311
  8182                           
  8183                           ;main.c: 1047: bDLE = 0;
  8184  004088  6A3B               	clrf	_bDLE,c
  8185                           
  8186                           ;main.c: 1050: if ( 0x03 == c ) {
  8187  00408A  502F               	movf	doModeVscp@c,w,c
  8188  00408C  0A03               	xorlw	3
  8189  00408E  E103               	bnz	l13303
  8190                           
  8191                           ;main.c: 1051: stateVscpDriver = 2;
  8192  004090  0E02               	movlw	2
  8193  004092  6E3F               	movwf	_stateVscpDriver,c
  8194                           
  8195                           ;main.c: 1052: }
  8196  004094  D012               	goto	l13325
  8197  004096                     l13303:
  8198                           
  8199                           ;main.c: 1054: else if ( 0x10 == c ) {
  8200  004096  502F               	movf	doModeVscp@c,w,c
  8201  004098  0A10               	xorlw	16
  8202  00409A  E10F               	bnz	l13325
  8203  00409C                     l13305:
  8204                           
  8205                           ;main.c: 1056: cmdbuf[ pos++ ] = c;
  8206  00409C  0E24               	movlw	low _cmdbuf
  8207  00409E  0100               	movlb	0	; () banked
  8208  0040A0  25D8               	addwf	_pos& (0+255),w,b
  8209  0040A2  6ED9               	movwf	fsr2l,c
  8210  0040A4  6ADA               	clrf	fsr2h,c
  8211  0040A6  0E01               	movlw	high _cmdbuf
  8212  0040A8  22DA               	addwfc	fsr2h,f,c
  8213  0040AA  C02F  FFDF         	movff	doModeVscp@c,indf2
  8214                           
  8215                           ; BSR set to: 1
  8216  0040AE  2BD8               	incf	_pos& (0+255),f,b
  8217  0040B0  D075               	goto	l621
  8218  0040B2                     l13311:
  8219                           
  8220                           ;main.c: 1061: else {
  8221                           ;main.c: 1062: if ( 0x10 == c ) {
  8222  0040B2  502F               	movf	doModeVscp@c,w,c
  8223  0040B4  0A10               	xorlw	16
  8224  0040B6  E0E1               	bz	l13289
  8225  0040B8  D7F1               	goto	l13305
  8226  0040BA                     l13325:
  8227                           
  8228                           ;main.c: 1078: }
  8229                           ;main.c: 1079: }
  8230                           ;main.c: 1080: }
  8231                           ;main.c: 1085: if ( 2 == stateVscpDriver ) {
  8232  0040BA  503F               	movf	_stateVscpDriver,w,c
  8233  0040BC  0A02               	xorlw	2
  8234  0040BE  E16D               	bnz	l13397
  8235                           
  8236                           ;main.c: 1088: stateVscpDriver = 0;
  8237  0040C0  6A3F               	clrf	_stateVscpDriver,c
  8238                           
  8239                           ;main.c: 1100: if ( calcCRC( cmdbuf, pos ) ) {
  8240  0040C2  0101               	movlb	1	; () banked
  8241  0040C4  0E01               	movlw	high _cmdbuf
  8242  0040C6  6E26               	movwf	?_calcCRC+1,c
  8243  0040C8  0E24               	movlw	low _cmdbuf
  8244  0040CA  6E25               	movwf	?_calcCRC,c
  8245  0040CC  C0D8  F027         	movff	_pos,?_calcCRC+2
  8246  0040D0  EC87  F00F         	call	_calcCRC	;wreg free
  8247  0040D4  0900               	iorlw	0
  8248  0040D6  E003               	bz	l13333
  8249                           
  8250                           ;main.c: 1101: sendVSCPDriverErrorFrame( 1 );
  8251  0040D8  0E01               	movlw	1
  8252  0040DA  ECCB  F018         	call	_sendVSCPDriverErrorFrame
  8253  0040DE                     l13333:
  8254                           
  8255                           ;main.c: 1102: }
  8256                           ;main.c: 1105: if ( 0 ==
  8257                           ;main.c: 1106: cmdbuf[ 0 ] ) {
  8258  0040DE  0101               	movlb	1	; () banked
  8259  0040E0  6724               	tstfsz	_cmdbuf& (0+255),b
  8260  0040E2  D003               	goto	l13337
  8261  0040E4                     l13335:
  8262                           
  8263                           ;main.c: 1107: sendVSCPDriverAck();
  8264  0040E4  EC7B  F016         	call	_sendVSCPDriverAck	;wreg free
  8265                           
  8266                           ;main.c: 1108: }
  8267  0040E8  D055               	goto	l13393
  8268  0040EA                     l13337:
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;main.c: 1110: else if ( 1 ==
  8272                           ;main.c: 1111: cmdbuf[ 0 ] ) {
  8273  0040EA  0524               	decf	_cmdbuf& (0+255),w,b
  8274  0040EC  E053               	bz	l13393
  8275                           
  8276                           ; BSR set to: 1
  8277                           ;main.c: 1115: else if ( 2 ==
  8278                           ;main.c: 1116: cmdbuf[ 0 ] ) {
  8279  0040EE  5124               	movf	_cmdbuf& (0+255),w,b
  8280  0040F0  0A02               	xorlw	2
  8281  0040F2  E107               	bnz	l13349
  8282                           
  8283                           ; BSR set to: 1
  8284                           ;main.c: 1117: if ( receiveVSCPModeCanalMsg() ) {
  8285  0040F4  ECA4  F019         	call	_receiveVSCPModeCanalMsg	;wreg free
  8286  0040F8  0900               	iorlw	0
  8287  0040FA  E1F4               	bnz	l13335
  8288  0040FC                     l13347:
  8289                           
  8290                           ;main.c: 1120: else {
  8291                           ;main.c: 1121: sendVSCPDriverNack();
  8292  0040FC  EC34  F017         	call	_sendVSCPDriverNack	;wreg free
  8293  004100  D049               	goto	l13393
  8294  004102                     l13349:
  8295                           
  8296                           ; BSR set to: 1
  8297                           ;main.c: 1125: else if ( 3 ==
  8298                           ;main.c: 1126: cmdbuf[ 0 ] ) {
  8299  004102  5124               	movf	_cmdbuf& (0+255),w,b
  8300  004104  0A03               	xorlw	3
  8301  004106  E0FA               	bz	l13347
  8302                           
  8303                           ; BSR set to: 1
  8304                           ;main.c: 1130: else if ( 4 ==
  8305                           ;main.c: 1131: cmdbuf[ 0 ] ) {
  8306  004108  5124               	movf	_cmdbuf& (0+255),w,b
  8307  00410A  0A04               	xorlw	4
  8308  00410C  E0F7               	bz	l13347
  8309                           
  8310                           ; BSR set to: 1
  8311                           ;main.c: 1135: else if ( 255 ==
  8312                           ;main.c: 1136: cmdbuf[ 0 ] ) {
  8313  00410E  2924               	incf	_cmdbuf& (0+255),w,b
  8314  004110  E13E               	bnz	l13391
  8315                           
  8316                           ; BSR set to: 1
  8317                           ;main.c: 1138: if ( cmdbuf[ 5 ] ==
  8318                           ;main.c: 1139: 0 ) {
  8319  004112  6729               	tstfsz	(_cmdbuf+5)& (0+255),b
  8320  004114  D005               	goto	l13363
  8321                           
  8322                           ; BSR set to: 1
  8323                           ;main.c: 1140: sendVSCPDriverCommandReply( 0, 0 );
  8324  004116  0E00               	movlw	0
  8325  004118  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8326  00411A  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8327                           
  8328                           ;main.c: 1141: }
  8329  00411E  D03A               	goto	l13393
  8330  004120                     l13363:
  8331                           
  8332                           ; BSR set to: 1
  8333                           ;main.c: 1143: else if ( cmdbuf[ 5 ] ==
  8334                           ;main.c: 1144: 1 ) {
  8335  004120  0529               	decf	(_cmdbuf+5)& (0+255),w,b
  8336  004122  E109               	bnz	l13369
  8337                           
  8338                           ; BSR set to: 1
  8339                           ;main.c: 1145: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8340  004124  0E00               	movlw	0
  8341  004126  ECA5  F00E         	call	_ECANSetOperationMode
  8342                           
  8343                           ;main.c: 1146: sendVSCPDriverCommandReply( 0, 1 );
  8344  00412A  0E01               	movlw	1
  8345  00412C  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8346  00412E  0E00               	movlw	0
  8347  004130  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8348                           
  8349                           ;main.c: 1147: }
  8350  004134  D02F               	goto	l13393
  8351  004136                     l13369:
  8352                           
  8353                           ; BSR set to: 1
  8354                           ;main.c: 1149: else if ( cmdbuf[ 5 ] ==
  8355                           ;main.c: 1150: 2 ) {
  8356  004136  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8357  004138  0A02               	xorlw	2
  8358  00413A  E109               	bnz	l13375
  8359                           
  8360                           ; BSR set to: 1
  8361                           ;main.c: 1151: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8362  00413C  0E40               	movlw	64
  8363  00413E  ECA5  F00E         	call	_ECANSetOperationMode
  8364                           
  8365                           ;main.c: 1152: sendVSCPDriverCommandReply( 0, 2 );
  8366  004142  0E02               	movlw	2
  8367  004144  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8368  004146  0E00               	movlw	0
  8369  004148  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8370                           
  8371                           ;main.c: 1153: }
  8372  00414C  D023               	goto	l13393
  8373  00414E                     l13375:
  8374                           
  8375                           ; BSR set to: 1
  8376                           ;main.c: 1155: else if ( cmdbuf[ 5 ] ==
  8377                           ;main.c: 1156: 3 ) {
  8378  00414E  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8379  004150  0A03               	xorlw	3
  8380  004152  E109               	bnz	l13381
  8381                           
  8382                           ; BSR set to: 1
  8383                           ;main.c: 1157: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8384  004154  0E60               	movlw	96
  8385  004156  ECA5  F00E         	call	_ECANSetOperationMode
  8386                           
  8387                           ;main.c: 1158: sendVSCPDriverCommandReply( 0, 3 );
  8388  00415A  0E03               	movlw	3
  8389  00415C  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8390  00415E  0E00               	movlw	0
  8391  004160  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8392                           
  8393                           ;main.c: 1159: }
  8394  004164  D017               	goto	l13393
  8395  004166                     l13381:
  8396                           
  8397                           ; BSR set to: 1
  8398                           ;main.c: 1161: else if ( cmdbuf[ 5 ] ==
  8399                           ;main.c: 1162: 4 ) {
  8400  004166  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8401  004168  0A04               	xorlw	4
  8402  00416A  E109               	bnz	l13387
  8403                           
  8404                           ; BSR set to: 1
  8405                           ;main.c: 1163: ECANSetOperationMode(0x20);
  8406  00416C  0E20               	movlw	32
  8407  00416E  ECA5  F00E         	call	_ECANSetOperationMode
  8408                           
  8409                           ;main.c: 1164: sendVSCPDriverCommandReply( 0, 4 );
  8410  004172  0E04               	movlw	4
  8411  004174  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8412  004176  0E00               	movlw	0
  8413  004178  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8414                           
  8415                           ;main.c: 1165: }
  8416  00417C  D00B               	goto	l13393
  8417  00417E                     l13387:
  8418                           
  8419                           ; BSR set to: 1
  8420                           ;main.c: 1167: else if ( cmdbuf[ 5 ] ==
  8421                           ;main.c: 1168: 5 ) {
  8422  00417E  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8423  004180  0A05               	xorlw	5
  8424  004182  E108               	bnz	l13393
  8425                           
  8426                           ; BSR set to: 1
  8427                           ;main.c: 1169: sendVSCPDriverCommandReply( 0, 0 );
  8428  004184  0E00               	movlw	0
  8429  004186  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8430  004188  ECF9  F01A         	call	_sendVSCPDriverCommandReply
  8431  00418C  D003               	goto	l13393
  8432  00418E                     l13391:
  8433                           
  8434                           ; BSR set to: 1
  8435                           ;main.c: 1173: else {
  8436                           ;main.c: 1175: sendVSCPDriverErrorFrame( 2 );
  8437  00418E  0E02               	movlw	2
  8438  004190  ECCB  F018         	call	_sendVSCPDriverErrorFrame
  8439  004194                     l13393:
  8440                           
  8441                           ;main.c: 1176: }
  8442                           ;main.c: 1179: pos = 0;
  8443  004194  0100               	movlb	0	; () banked
  8444  004196  6BD8               	clrf	_pos& (0+255),b
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;main.c: 1180: stateVscpDriver = 0;
  8448  004198  6A3F               	clrf	_stateVscpDriver,c
  8449  00419A                     l13397:
  8450                           
  8451                           ;main.c: 1182: }
  8452                           ;main.c: 1184: }
  8453                           ;main.c: 1187: (INTCONbits.GIE = 1);
  8454  00419A  8EF2               	bsf	intcon,7,c	;volatile
  8455  00419C                     l621:
  8456  00419C  0012               	return	
  8457  00419E                     __end_of_doModeVscp:
  8458                           	opt stack 0
  8459                           tblptru	equ	0xFF8
  8460                           tblptrh	equ	0xFF7
  8461                           tblptrl	equ	0xFF6
  8462                           tablat	equ	0xFF5
  8463                           prodh	equ	0xFF4
  8464                           prodl	equ	0xFF3
  8465                           intcon	equ	0xFF2
  8466                           indf0	equ	0xFEF
  8467                           postinc0	equ	0xFEE
  8468                           fsr0h	equ	0xFEA
  8469                           fsr0l	equ	0xFE9
  8470                           wreg	equ	0xFE8
  8471                           indf1	equ	0xFE7
  8472                           postinc1	equ	0xFE6
  8473                           postdec1	equ	0xFE5
  8474                           fsr1h	equ	0xFE2
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           plusw2	equ	0xFDB
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _sendVSCPDriverCommandReply *****************
  8485 ;; Defined at:
  8486 ;;		line 1572 in file "main.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  cmdReplyCode    1    wreg     unsigned char 
  8489 ;;  cmdCode         1   39[COMRAM] unsigned char 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  cmdReplyCode    1   40[COMRAM] unsigned char 
  8492 ;;  crc             1   41[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;		None               void
  8495 ;; Registers used:
  8496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/1
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8502 ;;      Params:         1       0       0       0       0       0       0
  8503 ;;      Locals:         2       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0
  8505 ;;      Totals:         3       0       0       0       0       0       0
  8506 ;;Total ram usage:        3 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    5
  8509 ;; This function calls:
  8510 ;;		_WriteUSART
  8511 ;;		_sendEscapedUartData
  8512 ;;		_crc8
  8513 ;; This function is called by:
  8514 ;;		_doModeVscp
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           	psect	text8
  8519  0035F2                     __ptext8:
  8520                           	opt stack 0
  8521  0035F2                     _sendVSCPDriverCommandReply:
  8522                           	opt stack 23
  8523                           
  8524                           ;incstack = 0
  8525                           ;incstack = 0
  8526                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8527  0035F2  CFE8 F029          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8528                           
  8529                           ;main.c: 1573: uint8_t crc = 0;
  8530  0035F6  6A2A               	clrf	sendVSCPDriverCommandReply@crc,c
  8531  0035F8                     l808:
  8532  0035F8  A2AC               	btfss	4012,1,c	;volatile
  8533  0035FA  D7FE               	goto	l808
  8534                           
  8535                           ;main.c: 1577: WriteUSART(0x10);
  8536  0035FC  0E10               	movlw	16
  8537  0035FE  EC90  F00E         	call	_WriteUSART
  8538  003602                     l811:
  8539  003602  A2AC               	btfss	4012,1,c	;volatile
  8540  003604  D7FE               	goto	l811
  8541                           
  8542                           ;main.c: 1579: WriteUSART(0x02);
  8543  003606  0E02               	movlw	2
  8544  003608  EC90  F00E         	call	_WriteUSART
  8545  00360C                     l814:
  8546  00360C  A2AC               	btfss	4012,1,c	;volatile
  8547  00360E  D7FE               	goto	l814
  8548                           
  8549                           ;main.c: 1583: WriteUSART(254);
  8550  003610  0EFE               	movlw	254
  8551  003612  EC90  F00E         	call	_WriteUSART
  8552                           
  8553                           ;main.c: 1584: crc8( &crc, 254 );
  8554  003616  D85C               	call	PL28	;call to abstracted procedure
  8555  003618  6420               	cpfsgt	?_crc8,c
  8556  00361A  6A21               	clrf	?_crc8+1,c
  8557  00361C  0EFE               	movlw	254
  8558  00361E  6E22               	movwf	?_crc8+2,c
  8559  003620  EC6B  F00F         	call	_crc8	;wreg free
  8560  003624                     l817:
  8561  003624  A2AC               	btfss	4012,1,c	;volatile
  8562  003626  D7FE               	goto	l817
  8563                           
  8564                           ;main.c: 1588: WriteUSART( 0 );
  8565  003628  0E00               	movlw	0
  8566  00362A  EC90  F00E         	call	_WriteUSART
  8567                           
  8568                           ;main.c: 1589: crc8( &crc, 0 );
  8569  00362E  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8570  003630  6E20               	movwf	?_crc8,c
  8571  003632  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8572  003634  EC8C  F017         	call	PL4	;call to abstracted procedure
  8573  003638  EC6B  F00F         	call	_crc8	;wreg free
  8574                           
  8575                           ; BSR set to: 2
  8576                           ;main.c: 1592: sendEscapedUartData( cmdbuf[ 2 ], &crc );
  8577  00363C  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8578  00363E  6E25               	movwf	?_sendEscapedUartData,c
  8579  003640  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8580  003642  EC32  F019         	call	PL46	;call to abstracted procedure
  8581  003646  6425               	cpfsgt	?_sendEscapedUartData,c
  8582  003648  6A26               	clrf	?_sendEscapedUartData+1,c
  8583  00364A  0101               	movlb	1	; () banked
  8584  00364C  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  8585  00364E  ECC5  F012         	call	_sendEscapedUartData
  8586  003652                     l820:
  8587  003652  A2AC               	btfss	4012,1,c	;volatile
  8588  003654  D7FE               	goto	l820
  8589                           
  8590                           ;main.c: 1596: WriteUSART( 0 );
  8591  003656  0E00               	movlw	0
  8592  003658  EC90  F00E         	call	_WriteUSART
  8593                           
  8594                           ;main.c: 1597: crc8( &crc, 0 );
  8595  00365C  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8596  00365E  6E20               	movwf	?_crc8,c
  8597  003660  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8598  003662  EC8C  F017         	call	PL4	;call to abstracted procedure
  8599  003666  EC6B  F00F         	call	_crc8	;wreg free
  8600  00366A                     l823:
  8601  00366A  A2AC               	btfss	4012,1,c	;volatile
  8602  00366C  D7FE               	goto	l823
  8603                           
  8604                           ;main.c: 1599: WriteUSART( 2 );
  8605  00366E  0E02               	movlw	2
  8606  003670  EC90  F00E         	call	_WriteUSART
  8607                           
  8608                           ;main.c: 1600: crc8( &crc, 2 );
  8609  003674  D82D               	call	PL28	;call to abstracted procedure
  8610  003676  6420               	cpfsgt	?_crc8,c
  8611  003678  6A21               	clrf	?_crc8+1,c
  8612  00367A  0E02               	movlw	2
  8613  00367C  6E22               	movwf	?_crc8+2,c
  8614  00367E  EC6B  F00F         	call	_crc8	;wreg free
  8615  003682                     l826:
  8616  003682  A2AC               	btfss	4012,1,c	;volatile
  8617  003684  D7FE               	goto	l826
  8618                           
  8619                           ;main.c: 1604: sendEscapedUartData( cmdReplyCode, &crc );
  8620  003686  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8621  003688  6E25               	movwf	?_sendEscapedUartData,c
  8622  00368A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8623  00368C  EC32  F019         	call	PL46	;call to abstracted procedure
  8624  003690  6425               	cpfsgt	?_sendEscapedUartData,c
  8625  003692  6A26               	clrf	?_sendEscapedUartData+1,c
  8626  003694  5029               	movf	sendVSCPDriverCommandReply@cmdReplyCode,w,c
  8627  003696  ECC5  F012         	call	_sendEscapedUartData
  8628  00369A                     l829:
  8629  00369A  A2AC               	btfss	4012,1,c	;volatile
  8630  00369C  D7FE               	goto	l829
  8631                           
  8632                           ;main.c: 1608: sendEscapedUartData( cmdCode, &crc );
  8633  00369E  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8634  0036A0  6E25               	movwf	?_sendEscapedUartData,c
  8635  0036A2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8636  0036A4  EC32  F019         	call	PL46	;call to abstracted procedure
  8637  0036A8  6425               	cpfsgt	?_sendEscapedUartData,c
  8638  0036AA  6A26               	clrf	?_sendEscapedUartData+1,c
  8639  0036AC  5028               	movf	sendVSCPDriverCommandReply@cmdCode,w,c
  8640  0036AE  ECC5  F012         	call	_sendEscapedUartData
  8641                           
  8642                           ;main.c: 1611: sendEscapedUartData(crc, (0));
  8643  0036B2  6A26               	clrf	?_sendEscapedUartData+1,c
  8644  0036B4  6A25               	clrf	?_sendEscapedUartData,c
  8645  0036B6  502A               	movf	sendVSCPDriverCommandReply@crc,w,c
  8646  0036B8  ECC5  F012         	call	_sendEscapedUartData
  8647  0036BC                     l832:
  8648  0036BC  A2AC               	btfss	4012,1,c	;volatile
  8649  0036BE  D7FE               	goto	l832
  8650                           
  8651                           ;main.c: 1615: WriteUSART(0x10);
  8652  0036C0  0E10               	movlw	16
  8653  0036C2  EC90  F00E         	call	_WriteUSART
  8654  0036C6                     l835:
  8655  0036C6  A2AC               	btfss	4012,1,c	;volatile
  8656  0036C8  D7FE               	goto	l835
  8657                           
  8658                           ;main.c: 1617: WriteUSART(0x03);
  8659  0036CA  0E03               	movlw	3
  8660  0036CC  EF90  F00E         	goto	_WriteUSART
  8661  0036D0                     __end_of_sendVSCPDriverCommandReply:
  8662                           	opt stack 0
  8663  0036D0                     PL28:
  8664                           	opt stack 23
  8665  0036D0  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8666  0036D2  6E20               	movwf	?_crc8,c
  8667  0036D4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8668  0036D6  6E21               	movwf	?_crc8+1,c
  8669  0036D8  0E0F               	movlw	15
  8670  0036DA  6E21               	movwf	?_crc8+1,c
  8671  0036DC  0E5F               	movlw	__accesstop+-1
  8672  0036DE  0012               	return	
  8673  0036E0                     __end_ofPL28:
  8674                           	opt stack 0
  8675                           tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           indf0	equ	0xFEF
  8683                           postinc0	equ	0xFEE
  8684                           fsr0h	equ	0xFEA
  8685                           fsr0l	equ	0xFE9
  8686                           wreg	equ	0xFE8
  8687                           indf1	equ	0xFE7
  8688                           postinc1	equ	0xFE6
  8689                           postdec1	equ	0xFE5
  8690                           fsr1h	equ	0xFE2
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           plusw2	equ	0xFDB
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _sendVSCPDriverNack *****************
  8701 ;; Defined at:
  8702 ;;		line 1527 in file "main.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;  crc             1   39[COMRAM] unsigned char 
  8707 ;; Return value:  Size  Location     Type
  8708 ;;		None               void
  8709 ;; Registers used:
  8710 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : E/1
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8716 ;;      Params:         0       0       0       0       0       0       0
  8717 ;;      Locals:         1       0       0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0
  8719 ;;      Totals:         1       0       0       0       0       0       0
  8720 ;;Total ram usage:        1 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    5
  8723 ;; This function calls:
  8724 ;;		_WriteUSART
  8725 ;;		_sendEscapedUartData
  8726 ;;		_crc8
  8727 ;; This function is called by:
  8728 ;;		_doModeVscp
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text9
  8733  002E68                     __ptext9:
  8734                           	opt stack 0
  8735  002E68                     _sendVSCPDriverNack:
  8736                           	opt stack 23
  8737                           
  8738                           ;main.c: 1528: uint8_t crc = 0;
  8739                           
  8740                           ;incstack = 0
  8741                           ;incstack = 0
  8742  002E68  6A28               	clrf	sendVSCPDriverNack@crc,c
  8743  002E6A                     l781:
  8744  002E6A  A2AC               	btfss	4012,1,c	;volatile
  8745  002E6C  D7FE               	goto	l781
  8746                           
  8747                           ;main.c: 1532: WriteUSART(0x10);
  8748  002E6E  0E10               	movlw	16
  8749  002E70  EC90  F00E         	call	_WriteUSART
  8750  002E74                     l784:
  8751  002E74  A2AC               	btfss	4012,1,c	;volatile
  8752  002E76  D7FE               	goto	l784
  8753                           
  8754                           ;main.c: 1534: WriteUSART(0x02);
  8755  002E78  0E02               	movlw	2
  8756  002E7A  EC90  F00E         	call	_WriteUSART
  8757  002E7E                     l787:
  8758  002E7E  A2AC               	btfss	4012,1,c	;volatile
  8759  002E80  D7FE               	goto	l787
  8760                           
  8761                           ;main.c: 1538: WriteUSART(252);
  8762  002E82  0EFC               	movlw	252
  8763  002E84  EC90  F00E         	call	_WriteUSART
  8764                           
  8765                           ;main.c: 1539: crc8( &crc, 252 );
  8766  002E88  0E28               	movlw	low sendVSCPDriverNack@crc
  8767  002E8A  6E20               	movwf	?_crc8,c
  8768  002E8C  0E00               	movlw	high sendVSCPDriverNack@crc
  8769  002E8E  6E21               	movwf	?_crc8+1,c
  8770  002E90  0E0F               	movlw	15
  8771  002E92  6E21               	movwf	?_crc8+1,c
  8772  002E94  0E5F               	movlw	__accesstop+-1
  8773  002E96  6420               	cpfsgt	?_crc8,c
  8774  002E98  6A21               	clrf	?_crc8+1,c
  8775  002E9A  0EFC               	movlw	252
  8776  002E9C  6E22               	movwf	?_crc8+2,c
  8777  002E9E  EC6B  F00F         	call	_crc8	;wreg free
  8778  002EA2                     l790:
  8779  002EA2  A2AC               	btfss	4012,1,c	;volatile
  8780  002EA4  D7FE               	goto	l790
  8781                           
  8782                           ;main.c: 1543: WriteUSART( 0 );
  8783  002EA6  0E00               	movlw	0
  8784  002EA8  EC90  F00E         	call	_WriteUSART
  8785                           
  8786                           ;main.c: 1544: crc8( &crc, 0 );
  8787  002EAC  0E28               	movlw	low sendVSCPDriverNack@crc
  8788  002EAE  6E20               	movwf	?_crc8,c
  8789  002EB0  0E00               	movlw	high sendVSCPDriverNack@crc
  8790  002EB2  D832               	call	PL4	;call to abstracted procedure
  8791  002EB4  EC6B  F00F         	call	_crc8	;wreg free
  8792                           
  8793                           ; BSR set to: 2
  8794                           ;main.c: 1547: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  8795  002EB8  0E28               	movlw	low sendVSCPDriverNack@crc
  8796  002EBA  6E25               	movwf	?_sendEscapedUartData,c
  8797  002EBC  0E00               	movlw	high sendVSCPDriverNack@crc
  8798  002EBE  EC32  F019         	call	PL46	;call to abstracted procedure
  8799  002EC2  6425               	cpfsgt	?_sendEscapedUartData,c
  8800  002EC4  6A26               	clrf	?_sendEscapedUartData+1,c
  8801  002EC6  0101               	movlb	1	; () banked
  8802  002EC8  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  8803  002ECA  ECC5  F012         	call	_sendEscapedUartData
  8804  002ECE                     l793:
  8805  002ECE  A2AC               	btfss	4012,1,c	;volatile
  8806  002ED0  D7FE               	goto	l793
  8807                           
  8808                           ;main.c: 1551: WriteUSART( 0 );
  8809  002ED2  0E00               	movlw	0
  8810  002ED4  EC90  F00E         	call	_WriteUSART
  8811                           
  8812                           ;main.c: 1552: crc8( &crc, 0 );
  8813  002ED8  0E28               	movlw	low sendVSCPDriverNack@crc
  8814  002EDA  6E20               	movwf	?_crc8,c
  8815  002EDC  0E00               	movlw	high sendVSCPDriverNack@crc
  8816  002EDE  D81C               	call	PL4	;call to abstracted procedure
  8817  002EE0  EC6B  F00F         	call	_crc8	;wreg free
  8818  002EE4                     l796:
  8819  002EE4  A2AC               	btfss	4012,1,c	;volatile
  8820  002EE6  D7FE               	goto	l796
  8821                           
  8822                           ;main.c: 1554: WriteUSART( 0 );
  8823  002EE8  0E00               	movlw	0
  8824  002EEA  EC90  F00E         	call	_WriteUSART
  8825                           
  8826                           ;main.c: 1555: crc8( &crc, 0 );
  8827  002EEE  0E28               	movlw	low sendVSCPDriverNack@crc
  8828  002EF0  6E20               	movwf	?_crc8,c
  8829  002EF2  0E00               	movlw	high sendVSCPDriverNack@crc
  8830  002EF4  D811               	call	PL4	;call to abstracted procedure
  8831  002EF6  EC6B  F00F         	call	_crc8	;wreg free
  8832                           
  8833                           ; BSR set to: 2
  8834                           ;main.c: 1558: sendEscapedUartData( crc, (0) );
  8835  002EFA  6A26               	clrf	?_sendEscapedUartData+1,c
  8836  002EFC  6A25               	clrf	?_sendEscapedUartData,c
  8837  002EFE  5028               	movf	sendVSCPDriverNack@crc,w,c
  8838  002F00  ECC5  F012         	call	_sendEscapedUartData
  8839  002F04                     l799:
  8840  002F04  A2AC               	btfss	4012,1,c	;volatile
  8841  002F06  D7FE               	goto	l799
  8842                           
  8843                           ;main.c: 1562: WriteUSART(0x10);
  8844  002F08  0E10               	movlw	16
  8845  002F0A  EC90  F00E         	call	_WriteUSART
  8846  002F0E                     l802:
  8847  002F0E  A2AC               	btfss	4012,1,c	;volatile
  8848  002F10  D7FE               	goto	l802
  8849                           
  8850                           ;main.c: 1564: WriteUSART(0x03);
  8851  002F12  0E03               	movlw	3
  8852  002F14  EF90  F00E         	goto	_WriteUSART
  8853  002F18                     __end_of_sendVSCPDriverNack:
  8854                           	opt stack 0
  8855  002F18                     PL4:
  8856                           	opt stack 23
  8857  002F18  6E21               	movwf	?_crc8+1,c
  8858  002F1A  0E0F               	movlw	15
  8859  002F1C  6E21               	movwf	?_crc8+1,c
  8860  002F1E  0E5F               	movlw	__accesstop+-1
  8861  002F20  6420               	cpfsgt	?_crc8,c
  8862  002F22  6A21               	clrf	?_crc8+1,c
  8863  002F24  6A22               	clrf	?_crc8+2,c
  8864  002F26  0C00               	retlw	0
  8865  002F28                     __end_ofPL4:
  8866                           	opt stack 0
  8867                           tblptru	equ	0xFF8
  8868                           tblptrh	equ	0xFF7
  8869                           tblptrl	equ	0xFF6
  8870                           tablat	equ	0xFF5
  8871                           prodh	equ	0xFF4
  8872                           prodl	equ	0xFF3
  8873                           intcon	equ	0xFF2
  8874                           indf0	equ	0xFEF
  8875                           postinc0	equ	0xFEE
  8876                           fsr0h	equ	0xFEA
  8877                           fsr0l	equ	0xFE9
  8878                           wreg	equ	0xFE8
  8879                           indf1	equ	0xFE7
  8880                           postinc1	equ	0xFE6
  8881                           postdec1	equ	0xFE5
  8882                           fsr1h	equ	0xFE2
  8883                           fsr1l	equ	0xFE1
  8884                           indf2	equ	0xFDF
  8885                           postinc2	equ	0xFDE
  8886                           postdec2	equ	0xFDD
  8887                           plusw2	equ	0xFDB
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           
  8892 ;; *************** function _receiveVSCPModeCanalMsg *****************
  8893 ;; Defined at:
  8894 ;;		line 1899 in file "main.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;		None
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  data            8   55[BANK0 ] unsigned char [8]
  8899 ;;  id              4   63[BANK0 ] unsigned long 
  8900 ;;  dlc             1   67[BANK0 ] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      enum E15660
  8903 ;; Registers used:
  8904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8905 ;; Tracked objects:
  8906 ;;		On entry : F/1
  8907 ;;		On exit  : E/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8910 ;;      Params:         0       0       0       0       0       0       0
  8911 ;;      Locals:         0      13       0       0       0       0       0
  8912 ;;      Temps:          0      20       0       0       0       0       0
  8913 ;;      Totals:         0      33       0       0       0       0       0
  8914 ;;Total ram usage:       33 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    5
  8917 ;; This function calls:
  8918 ;;		_memcpy
  8919 ;;		_sendCANFrame
  8920 ;; This function is called by:
  8921 ;;		_doModeVscp
  8922 ;; This function uses a non-reentrant model
  8923 ;;
  8924                           
  8925                           	psect	text10
  8926  003348                     __ptext10:
  8927                           	opt stack 0
  8928  003348                     _receiveVSCPModeCanalMsg:
  8929                           	opt stack 23
  8930                           
  8931                           ; BSR set to: 1
  8932                           ;main.c: 1900: uint32_t id;
  8933                           ;main.c: 1901: uint8_t dlc;
  8934                           ;main.c: 1902: uint8_t data[8];
  8935                           ;main.c: 1904: id = ((uint32_t)cmdbuf[5] << 26) |
  8936                           ;main.c: 1905: ((uint32_t)cmdbuf[5+1] << 16) |
  8937                           ;main.c: 1906: ((uint32_t)cmdbuf[5+2] << 8) |
  8938                           ;main.c: 1907: cmdbuf[5+3];
  8939                           
  8940                           ;incstack = 0
  8941                           ;incstack = 0
  8942  003348  C12B  F083         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  8943  00334C  0100               	movlb	0	; () banked
  8944  00334E  6B84               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  8945  003350  6B85               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  8946  003352  6B86               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  8947  003354  C085  F086         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  8948  003358  C084  F085         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  8949  00335C  C083  F084         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  8950  003360  6B83               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  8951  003362  C12A  F087         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  8952  003366  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8953  003368  6B89               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  8954  00336A  6B8A               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  8955  00336C  C088  F08A         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  8956  003370  C087  F089         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  8957  003374  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8958  003376  6B87               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  8959  003378  C129  F08B         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  8960  00337C  6B8C               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  8961  00337E  6B8D               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  8962  003380  6B8E               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  8963  003382  0E1A               	movlw	26
  8964  003384                     u19025:
  8965  003384  90D8               	bcf	status,0,c
  8966  003386  378B               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  8967  003388  378C               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  8968  00338A  378D               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  8969  00338C  378E               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  8970  00338E  2EE8               	decfsz	wreg,f,c
  8971  003390  D7F9               	goto	u19025
  8972  003392  5187               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  8973  003394  118B               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  8974  003396  6F8F               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  8975  003398  5188               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  8976  00339A  118C               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  8977  00339C  6F90               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  8978  00339E  5189               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  8979  0033A0  118D               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  8980  0033A2  6F91               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  8981  0033A4  518A               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  8982  0033A6  118E               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  8983  0033A8  6F92               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  8984  0033AA  5183               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  8985  0033AC  118F               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  8986  0033AE  6F93               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  8987  0033B0  5184               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  8988  0033B2  1190               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  8989  0033B4  6F94               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  8990  0033B6  5185               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  8991  0033B8  1191               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  8992  0033BA  6F95               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  8993  0033BC  5186               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  8994  0033BE  1192               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  8995  0033C0  6F96               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  8996  0033C2  0101               	movlb	1	; () banked
  8997  0033C4  512C               	movf	(_cmdbuf+8)& (0+255),w,b
  8998  0033C6  0100               	movlb	0	; () banked
  8999  0033C8  1193               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9000  0033CA  6F9F               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9001  0033CC  5194               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9002  0033CE  6FA0               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9003  0033D0  5195               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9004  0033D2  6FA1               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9005  0033D4  5196               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9006  0033D6  6FA2               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9007                           
  9008                           ;main.c: 1908: dlc = cmdbuf[4]-4;
  9009  0033D8  0101               	movlb	1	; () banked
  9010  0033DA  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  9011  0033DC  0FFC               	addlw	252
  9012  0033DE  0100               	movlb	0	; () banked
  9013  0033E0  6FA3               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9014                           
  9015                           ; BSR set to: 0
  9016                           ;main.c: 1909: memcpy( data, cmdbuf + 5 + 4, dlc );
  9017  0033E2  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9018  0033E4  6E1A               	movwf	?_memcpy+1,c
  9019  0033E6  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  9020  0033E8  6E19               	movwf	?_memcpy,c
  9021  0033EA  0E2D               	movlw	low (_cmdbuf+9)
  9022  0033EC  6F83               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9023  0033EE  0E01               	movlw	high (_cmdbuf+9)
  9024  0033F0  6F84               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9025  0033F2  C083  F01B         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9026  0033F6  C084  F01C         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9027  0033FA  C0A3  F01D         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9028  0033FE  6A1E               	clrf	?_memcpy+5,c
  9029  003400  EC5B  F010         	call	_memcpy	;wreg free
  9030                           
  9031                           ;main.c: 1911: return sendCANFrame( id, dlc, data);
  9032  003404  C09F  F07C         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9033  003408  C0A0  F07D         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9034  00340C  C0A1  F07E         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9035  003410  C0A2  F07F         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9036  003414  C0A3  F080         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9037  003418  0100               	movlb	0	; () banked
  9038  00341A  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9039  00341C  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  9040  00341E  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  9041  003420  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  9042  003422  EFA3  F00F         	goto	_sendCANFrame	;wreg free
  9043  003426                     __end_of_receiveVSCPModeCanalMsg:
  9044                           	opt stack 0
  9045                           tblptru	equ	0xFF8
  9046                           tblptrh	equ	0xFF7
  9047                           tblptrl	equ	0xFF6
  9048                           tablat	equ	0xFF5
  9049                           prodh	equ	0xFF4
  9050                           prodl	equ	0xFF3
  9051                           intcon	equ	0xFF2
  9052                           indf0	equ	0xFEF
  9053                           postinc0	equ	0xFEE
  9054                           fsr0h	equ	0xFEA
  9055                           fsr0l	equ	0xFE9
  9056                           wreg	equ	0xFE8
  9057                           indf1	equ	0xFE7
  9058                           postinc1	equ	0xFE6
  9059                           postdec1	equ	0xFE5
  9060                           fsr1h	equ	0xFE2
  9061                           fsr1l	equ	0xFE1
  9062                           indf2	equ	0xFDF
  9063                           postinc2	equ	0xFDE
  9064                           postdec2	equ	0xFDD
  9065                           plusw2	equ	0xFDB
  9066                           fsr2h	equ	0xFDA
  9067                           fsr2l	equ	0xFD9
  9068                           status	equ	0xFD8
  9069                           
  9070 ;; *************** function _memcpy *****************
  9071 ;; Defined at:
  9072 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;  d1              2   24[COMRAM] PTR void 
  9075 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9076 ;;  s1              2   26[COMRAM] PTR const void 
  9077 ;;		 -> vscpData(8), cmdbuf(80), 
  9078 ;;  n               2   28[COMRAM] unsigned int 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  s               2   32[COMRAM] PTR const unsigned char 
  9081 ;;		 -> vscpData(8), cmdbuf(80), 
  9082 ;;  d               2   30[COMRAM] PTR unsigned char 
  9083 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  2   24[COMRAM] PTR void 
  9086 ;; Registers used:
  9087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9088 ;; Tracked objects:
  9089 ;;		On entry : F/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9093 ;;      Params:         6       0       0       0       0       0       0
  9094 ;;      Locals:         4       0       0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0
  9096 ;;      Totals:        10       0       0       0       0       0       0
  9097 ;;Total ram usage:       10 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    2
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_doModeSLCAN
  9104 ;;		_receiveVSCPModeCanalMsg
  9105 ;; This function uses a non-reentrant model
  9106 ;;
  9107                           
  9108                           	psect	text11
  9109  0020B6                     __ptext11:
  9110                           	opt stack 0
  9111  0020B6                     _memcpy:
  9112                           	opt stack 26
  9113                           
  9114                           ; BSR set to: 0
  9115                           
  9116                           ;incstack = 0
  9117                           ;incstack = 0
  9118  0020B6  C01B  F021         	movff	memcpy@s1,memcpy@s
  9119  0020BA  C01C  F022         	movff	memcpy@s1+1,memcpy@s+1
  9120  0020BE  C019  F01F         	movff	memcpy@d1,memcpy@d
  9121  0020C2  C01A  F020         	movff	memcpy@d1+1,memcpy@d+1
  9122  0020C6  D00E               	goto	l14443
  9123  0020C8                     l14437:
  9124  0020C8  C021  FFD9         	movff	memcpy@s,fsr2l
  9125  0020CC  C022  FFDA         	movff	memcpy@s+1,fsr2h
  9126  0020D0  C01F  FFE1         	movff	memcpy@d,fsr1l
  9127  0020D4  C020  FFE2         	movff	memcpy@d+1,fsr1h
  9128  0020D8  CFDF FFE7          	movff	indf2,indf1
  9129  0020DC  4A21               	infsnz	memcpy@s,f,c
  9130  0020DE  2A22               	incf	memcpy@s+1,f,c
  9131  0020E0  4A1F               	infsnz	memcpy@d,f,c
  9132  0020E2  2A20               	incf	memcpy@d+1,f,c
  9133  0020E4                     l14443:
  9134  0020E4  061D               	decf	memcpy@n,f,c
  9135  0020E6  A0D8               	btfss	status,0,c
  9136  0020E8  061E               	decf	memcpy@n+1,f,c
  9137  0020EA  281D               	incf	memcpy@n& (0+255),w,c
  9138  0020EC  B4D8               	btfsc	status,2,c
  9139  0020EE  281E               	incf	(memcpy@n+1)& (0+255),w,c
  9140  0020F0  B4D8               	btfsc	status,2,c
  9141  0020F2  0012               	return	
  9142  0020F4  D7E9               	goto	l14437
  9143  0020F6                     __end_of_memcpy:
  9144                           	opt stack 0
  9145                           tblptru	equ	0xFF8
  9146                           tblptrh	equ	0xFF7
  9147                           tblptrl	equ	0xFF6
  9148                           tablat	equ	0xFF5
  9149                           prodh	equ	0xFF4
  9150                           prodl	equ	0xFF3
  9151                           intcon	equ	0xFF2
  9152                           indf0	equ	0xFEF
  9153                           postinc0	equ	0xFEE
  9154                           fsr0h	equ	0xFEA
  9155                           fsr0l	equ	0xFE9
  9156                           wreg	equ	0xFE8
  9157                           indf1	equ	0xFE7
  9158                           postinc1	equ	0xFE6
  9159                           postdec1	equ	0xFE5
  9160                           fsr1h	equ	0xFE2
  9161                           fsr1l	equ	0xFE1
  9162                           indf2	equ	0xFDF
  9163                           postinc2	equ	0xFDE
  9164                           postdec2	equ	0xFDD
  9165                           plusw2	equ	0xFDB
  9166                           fsr2h	equ	0xFDA
  9167                           fsr2l	equ	0xFD9
  9168                           status	equ	0xFD8
  9169                           
  9170 ;; *************** function _sendVSCPDriverAck *****************
  9171 ;; Defined at:
  9172 ;;		line 1482 in file "main.c"
  9173 ;; Parameters:    Size  Location     Type
  9174 ;;		None
  9175 ;; Auto vars:     Size  Location     Type
  9176 ;;  crc             1   39[COMRAM] unsigned char 
  9177 ;; Return value:  Size  Location     Type
  9178 ;;		None               void
  9179 ;; Registers used:
  9180 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9181 ;; Tracked objects:
  9182 ;;		On entry : E/1
  9183 ;;		On exit  : 0/0
  9184 ;;		Unchanged: 0/0
  9185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9186 ;;      Params:         0       0       0       0       0       0       0
  9187 ;;      Locals:         1       0       0       0       0       0       0
  9188 ;;      Temps:          0       0       0       0       0       0       0
  9189 ;;      Totals:         1       0       0       0       0       0       0
  9190 ;;Total ram usage:        1 bytes
  9191 ;; Hardware stack levels used:    1
  9192 ;; Hardware stack levels required when called:    5
  9193 ;; This function calls:
  9194 ;;		_WriteUSART
  9195 ;;		_sendEscapedUartData
  9196 ;;		_crc8
  9197 ;; This function is called by:
  9198 ;;		_doModeVscp
  9199 ;; This function uses a non-reentrant model
  9200 ;;
  9201                           
  9202                           	psect	text12
  9203  002CF6                     __ptext12:
  9204                           	opt stack 0
  9205  002CF6                     _sendVSCPDriverAck:
  9206                           	opt stack 23
  9207                           
  9208                           ;main.c: 1483: uint8_t crc = 0;
  9209                           
  9210                           ;incstack = 0
  9211                           ;incstack = 0
  9212  002CF6  6A28               	clrf	sendVSCPDriverAck@crc,c
  9213  002CF8                     l754:
  9214  002CF8  A2AC               	btfss	4012,1,c	;volatile
  9215  002CFA  D7FE               	goto	l754
  9216                           
  9217                           ;main.c: 1487: WriteUSART(0x10);
  9218  002CFC  0E10               	movlw	16
  9219  002CFE  EC90  F00E         	call	_WriteUSART
  9220  002D02                     l757:
  9221  002D02  A2AC               	btfss	4012,1,c	;volatile
  9222  002D04  D7FE               	goto	l757
  9223                           
  9224                           ;main.c: 1489: WriteUSART(0x02);
  9225  002D06  0E02               	movlw	2
  9226  002D08  EC90  F00E         	call	_WriteUSART
  9227  002D0C                     l760:
  9228  002D0C  A2AC               	btfss	4012,1,c	;volatile
  9229  002D0E  D7FE               	goto	l760
  9230                           
  9231                           ;main.c: 1493: WriteUSART(251);
  9232  002D10  0EFB               	movlw	251
  9233  002D12  EC90  F00E         	call	_WriteUSART
  9234                           
  9235                           ;main.c: 1494: crc8( &crc, 251 );
  9236  002D16  0E28               	movlw	low sendVSCPDriverAck@crc
  9237  002D18  6E20               	movwf	?_crc8,c
  9238  002D1A  0E00               	movlw	high sendVSCPDriverAck@crc
  9239  002D1C  6E21               	movwf	?_crc8+1,c
  9240  002D1E  0E0F               	movlw	15
  9241  002D20  6E21               	movwf	?_crc8+1,c
  9242  002D22  0E5F               	movlw	__accesstop+-1
  9243  002D24  6420               	cpfsgt	?_crc8,c
  9244  002D26  6A21               	clrf	?_crc8+1,c
  9245  002D28  0EFB               	movlw	251
  9246  002D2A  6E22               	movwf	?_crc8+2,c
  9247  002D2C  EC6B  F00F         	call	_crc8	;wreg free
  9248  002D30                     l763:
  9249  002D30  A2AC               	btfss	4012,1,c	;volatile
  9250  002D32  D7FE               	goto	l763
  9251                           
  9252                           ;main.c: 1498: WriteUSART( 0 );
  9253  002D34  0E00               	movlw	0
  9254  002D36  EC90  F00E         	call	_WriteUSART
  9255                           
  9256                           ;main.c: 1499: crc8( &crc, 0 );
  9257  002D3A  0E28               	movlw	low sendVSCPDriverAck@crc
  9258  002D3C  6E20               	movwf	?_crc8,c
  9259  002D3E  0E00               	movlw	high sendVSCPDriverAck@crc
  9260  002D40  EC8C  F017         	call	PL4	;call to abstracted procedure
  9261  002D44  EC6B  F00F         	call	_crc8	;wreg free
  9262                           
  9263                           ; BSR set to: 2
  9264                           ;main.c: 1502: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  9265  002D48  0E28               	movlw	low sendVSCPDriverAck@crc
  9266  002D4A  6E25               	movwf	?_sendEscapedUartData,c
  9267  002D4C  0E00               	movlw	high sendVSCPDriverAck@crc
  9268  002D4E  EC32  F019         	call	PL46	;call to abstracted procedure
  9269  002D52  6425               	cpfsgt	?_sendEscapedUartData,c
  9270  002D54  6A26               	clrf	?_sendEscapedUartData+1,c
  9271  002D56  0101               	movlb	1	; () banked
  9272  002D58  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9273  002D5A  ECC5  F012         	call	_sendEscapedUartData
  9274  002D5E                     l766:
  9275  002D5E  A2AC               	btfss	4012,1,c	;volatile
  9276  002D60  D7FE               	goto	l766
  9277                           
  9278                           ;main.c: 1506: WriteUSART( 0 );
  9279  002D62  0E00               	movlw	0
  9280  002D64  EC90  F00E         	call	_WriteUSART
  9281                           
  9282                           ;main.c: 1507: crc8( &crc, 0 );
  9283  002D68  0E28               	movlw	low sendVSCPDriverAck@crc
  9284  002D6A  6E20               	movwf	?_crc8,c
  9285  002D6C  0E00               	movlw	high sendVSCPDriverAck@crc
  9286  002D6E  EC8C  F017         	call	PL4	;call to abstracted procedure
  9287  002D72  EC6B  F00F         	call	_crc8	;wreg free
  9288  002D76                     l769:
  9289  002D76  A2AC               	btfss	4012,1,c	;volatile
  9290  002D78  D7FE               	goto	l769
  9291                           
  9292                           ;main.c: 1509: WriteUSART( 0 );
  9293  002D7A  0E00               	movlw	0
  9294  002D7C  EC90  F00E         	call	_WriteUSART
  9295                           
  9296                           ;main.c: 1510: crc8( &crc, 0 );
  9297  002D80  0E28               	movlw	low sendVSCPDriverAck@crc
  9298  002D82  6E20               	movwf	?_crc8,c
  9299  002D84  0E00               	movlw	high sendVSCPDriverAck@crc
  9300  002D86  EC8C  F017         	call	PL4	;call to abstracted procedure
  9301  002D8A  EC6B  F00F         	call	_crc8	;wreg free
  9302                           
  9303                           ; BSR set to: 2
  9304                           ;main.c: 1513: sendEscapedUartData( crc, (0) );
  9305  002D8E  6A26               	clrf	?_sendEscapedUartData+1,c
  9306  002D90  6A25               	clrf	?_sendEscapedUartData,c
  9307  002D92  5028               	movf	sendVSCPDriverAck@crc,w,c
  9308  002D94  ECC5  F012         	call	_sendEscapedUartData
  9309  002D98                     l772:
  9310  002D98  A2AC               	btfss	4012,1,c	;volatile
  9311  002D9A  D7FE               	goto	l772
  9312                           
  9313                           ;main.c: 1517: WriteUSART(0x10);
  9314  002D9C  0E10               	movlw	16
  9315  002D9E  EC90  F00E         	call	_WriteUSART
  9316  002DA2                     l775:
  9317  002DA2  A2AC               	btfss	4012,1,c	;volatile
  9318  002DA4  D7FE               	goto	l775
  9319                           
  9320                           ;main.c: 1519: WriteUSART(0x03);
  9321  002DA6  0E03               	movlw	3
  9322  002DA8  EF90  F00E         	goto	_WriteUSART
  9323  002DAC                     __end_of_sendVSCPDriverAck:
  9324                           	opt stack 0
  9325                           tblptru	equ	0xFF8
  9326                           tblptrh	equ	0xFF7
  9327                           tblptrl	equ	0xFF6
  9328                           tablat	equ	0xFF5
  9329                           prodh	equ	0xFF4
  9330                           prodl	equ	0xFF3
  9331                           intcon	equ	0xFF2
  9332                           indf0	equ	0xFEF
  9333                           postinc0	equ	0xFEE
  9334                           fsr0h	equ	0xFEA
  9335                           fsr0l	equ	0xFE9
  9336                           wreg	equ	0xFE8
  9337                           indf1	equ	0xFE7
  9338                           postinc1	equ	0xFE6
  9339                           postdec1	equ	0xFE5
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           plusw2	equ	0xFDB
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9351 ;; Defined at:
  9352 ;;		line 1434 in file "main.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;  errorcode       1    wreg     unsigned char 
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;  errorcode       1   39[COMRAM] unsigned char 
  9357 ;;  crc             1   40[COMRAM] unsigned char 
  9358 ;; Return value:  Size  Location     Type
  9359 ;;		None               void
  9360 ;; Registers used:
  9361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : C/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9367 ;;      Params:         0       0       0       0       0       0       0
  9368 ;;      Locals:         2       0       0       0       0       0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0
  9370 ;;      Totals:         2       0       0       0       0       0       0
  9371 ;;Total ram usage:        2 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    5
  9374 ;; This function calls:
  9375 ;;		_WriteUSART
  9376 ;;		_sendEscapedUartData
  9377 ;;		_crc8
  9378 ;; This function is called by:
  9379 ;;		_doModeVscp
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           	psect	text13
  9384  003196                     __ptext13:
  9385                           	opt stack 0
  9386  003196                     _sendVSCPDriverErrorFrame:
  9387                           	opt stack 23
  9388                           
  9389                           ;incstack = 0
  9390                           ;incstack = 0
  9391                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9392  003196  CFE8 F028          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9393                           
  9394                           ;main.c: 1435: uint8_t crc = 0;
  9395  00319A  6A29               	clrf	sendVSCPDriverErrorFrame@crc,c
  9396  00319C                     l727:
  9397  00319C  A2AC               	btfss	4012,1,c	;volatile
  9398  00319E  D7FE               	goto	l727
  9399                           
  9400                           ;main.c: 1439: WriteUSART(0x10);
  9401  0031A0  0E10               	movlw	16
  9402  0031A2  EC90  F00E         	call	_WriteUSART
  9403  0031A6                     l730:
  9404  0031A6  A2AC               	btfss	4012,1,c	;volatile
  9405  0031A8  D7FE               	goto	l730
  9406                           
  9407                           ;main.c: 1441: WriteUSART(0x02);
  9408  0031AA  0E02               	movlw	2
  9409  0031AC  EC90  F00E         	call	_WriteUSART
  9410  0031B0                     l733:
  9411  0031B0  A2AC               	btfss	4012,1,c	;volatile
  9412  0031B2  D7FE               	goto	l733
  9413                           
  9414                           ;main.c: 1445: WriteUSART(253);
  9415  0031B4  0EFD               	movlw	253
  9416  0031B6  EC90  F00E         	call	_WriteUSART
  9417                           
  9418                           ;main.c: 1446: crc8( &crc, 253 );
  9419  0031BA  D84C               	call	PL24	;call to abstracted procedure
  9420  0031BC  6420               	cpfsgt	?_crc8,c
  9421  0031BE  6A21               	clrf	?_crc8+1,c
  9422  0031C0  0EFD               	movlw	253
  9423  0031C2  6E22               	movwf	?_crc8+2,c
  9424  0031C4  EC6B  F00F         	call	_crc8	;wreg free
  9425  0031C8                     l736:
  9426  0031C8  A2AC               	btfss	4012,1,c	;volatile
  9427  0031CA  D7FE               	goto	l736
  9428                           
  9429                           ;main.c: 1450: WriteUSART( 0);
  9430  0031CC  0E00               	movlw	0
  9431  0031CE  EC90  F00E         	call	_WriteUSART
  9432                           
  9433                           ;main.c: 1451: crc8( &crc, 0 );
  9434  0031D2  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9435  0031D4  6E20               	movwf	?_crc8,c
  9436  0031D6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9437  0031D8  EC8C  F017         	call	PL4	;call to abstracted procedure
  9438  0031DC  EC6B  F00F         	call	_crc8	;wreg free
  9439                           
  9440                           ; BSR set to: 2
  9441                           ;main.c: 1454: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  9442  0031E0  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9443  0031E2  6E25               	movwf	?_sendEscapedUartData,c
  9444  0031E4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9445  0031E6  D83E               	call	PL46	;call to abstracted procedure
  9446  0031E8  6425               	cpfsgt	?_sendEscapedUartData,c
  9447  0031EA  6A26               	clrf	?_sendEscapedUartData+1,c
  9448  0031EC  0101               	movlb	1	; () banked
  9449  0031EE  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9450  0031F0  ECC5  F012         	call	_sendEscapedUartData
  9451  0031F4                     l739:
  9452  0031F4  A2AC               	btfss	4012,1,c	;volatile
  9453  0031F6  D7FE               	goto	l739
  9454                           
  9455                           ;main.c: 1458: WriteUSART( 0 );
  9456  0031F8  0E00               	movlw	0
  9457  0031FA  EC90  F00E         	call	_WriteUSART
  9458                           
  9459                           ;main.c: 1459: crc8( &crc, 0 );
  9460  0031FE  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9461  003200  6E20               	movwf	?_crc8,c
  9462  003202  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9463  003204  EC8C  F017         	call	PL4	;call to abstracted procedure
  9464  003208  EC6B  F00F         	call	_crc8	;wreg free
  9465  00320C                     l742:
  9466  00320C  A2AC               	btfss	4012,1,c	;volatile
  9467  00320E  D7FE               	goto	l742
  9468                           
  9469                           ;main.c: 1461: WriteUSART(1);
  9470  003210  0E01               	movlw	1
  9471  003212  EC90  F00E         	call	_WriteUSART
  9472                           
  9473                           ;main.c: 1462: crc8( &crc, 1 );
  9474  003216  D81E               	call	PL24	;call to abstracted procedure
  9475  003218  6420               	cpfsgt	?_crc8,c
  9476  00321A  6A21               	clrf	?_crc8+1,c
  9477  00321C  0E01               	movlw	1
  9478  00321E  6E22               	movwf	?_crc8+2,c
  9479  003220  EC6B  F00F         	call	_crc8	;wreg free
  9480                           
  9481                           ; BSR set to: 2
  9482                           ;main.c: 1465: sendEscapedUartData( errorcode, &crc );
  9483  003224  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9484  003226  6E25               	movwf	?_sendEscapedUartData,c
  9485  003228  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9486  00322A  D81C               	call	PL46	;call to abstracted procedure
  9487  00322C  6425               	cpfsgt	?_sendEscapedUartData,c
  9488  00322E  6A26               	clrf	?_sendEscapedUartData+1,c
  9489  003230  5028               	movf	sendVSCPDriverErrorFrame@errorcode,w,c
  9490  003232  ECC5  F012         	call	_sendEscapedUartData
  9491                           
  9492                           ;main.c: 1468: sendEscapedUartData( crc, (0) );
  9493  003236  6A26               	clrf	?_sendEscapedUartData+1,c
  9494  003238  6A25               	clrf	?_sendEscapedUartData,c
  9495  00323A  5029               	movf	sendVSCPDriverErrorFrame@crc,w,c
  9496  00323C  ECC5  F012         	call	_sendEscapedUartData
  9497  003240                     l745:
  9498  003240  A2AC               	btfss	4012,1,c	;volatile
  9499  003242  D7FE               	goto	l745
  9500                           
  9501                           ;main.c: 1472: WriteUSART(0x10);
  9502  003244  0E10               	movlw	16
  9503  003246  EC90  F00E         	call	_WriteUSART
  9504  00324A                     l748:
  9505  00324A  A2AC               	btfss	4012,1,c	;volatile
  9506  00324C  D7FE               	goto	l748
  9507                           
  9508                           ;main.c: 1474: WriteUSART(0x03);
  9509  00324E  0E03               	movlw	3
  9510  003250  EF90  F00E         	goto	_WriteUSART
  9511  003254                     __end_of_sendVSCPDriverErrorFrame:
  9512                           	opt stack 0
  9513  003254                     PL24:
  9514                           	opt stack 23
  9515  003254  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9516  003256  6E20               	movwf	?_crc8,c
  9517  003258  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9518  00325A  6E21               	movwf	?_crc8+1,c
  9519  00325C  0E0F               	movlw	15
  9520  00325E  6E21               	movwf	?_crc8+1,c
  9521  003260  0E5F               	movlw	__accesstop+-1
  9522  003262  0012               	return	
  9523  003264                     __end_ofPL24:
  9524                           	opt stack 0
  9525  003264                     PL46:
  9526                           	opt stack 23
  9527  003264  6E26               	movwf	?_sendEscapedUartData+1,c
  9528  003266  0E0F               	movlw	15
  9529  003268  6E26               	movwf	?_sendEscapedUartData+1,c
  9530  00326A  0E5F               	movlw	__accesstop+-1
  9531  00326C  0012               	return	
  9532  00326E                     __end_ofPL46:
  9533                           	opt stack 0
  9534                           tblptru	equ	0xFF8
  9535                           tblptrh	equ	0xFF7
  9536                           tblptrl	equ	0xFF6
  9537                           tablat	equ	0xFF5
  9538                           prodh	equ	0xFF4
  9539                           prodl	equ	0xFF3
  9540                           intcon	equ	0xFF2
  9541                           indf0	equ	0xFEF
  9542                           postinc0	equ	0xFEE
  9543                           fsr0h	equ	0xFEA
  9544                           fsr0l	equ	0xFE9
  9545                           wreg	equ	0xFE8
  9546                           indf1	equ	0xFE7
  9547                           postinc1	equ	0xFE6
  9548                           postdec1	equ	0xFE5
  9549                           fsr1h	equ	0xFE2
  9550                           fsr1l	equ	0xFE1
  9551                           indf2	equ	0xFDF
  9552                           postinc2	equ	0xFDE
  9553                           postdec2	equ	0xFDD
  9554                           plusw2	equ	0xFDB
  9555                           fsr2h	equ	0xFDA
  9556                           fsr2l	equ	0xFD9
  9557                           status	equ	0xFD8
  9558                           
  9559 ;; *************** function _calcCRC *****************
  9560 ;; Defined at:
  9561 ;;		line 2121 in file "main.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;  p               2   36[COMRAM] PTR unsigned char 
  9564 ;;		 -> cmdbuf(80), 
  9565 ;;  len             1   38[COMRAM] unsigned char 
  9566 ;; Auto vars:     Size  Location     Type
  9567 ;;  crc             1   40[COMRAM] unsigned char 
  9568 ;;  j               1   39[COMRAM] unsigned char 
  9569 ;; Return value:  Size  Location     Type
  9570 ;;                  1    wreg      unsigned char 
  9571 ;; Registers used:
  9572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9573 ;; Tracked objects:
  9574 ;;		On entry : F/1
  9575 ;;		On exit  : C/0
  9576 ;;		Unchanged: 0/0
  9577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9578 ;;      Params:         3       0       0       0       0       0       0
  9579 ;;      Locals:         2       0       0       0       0       0       0
  9580 ;;      Temps:          0       0       0       0       0       0       0
  9581 ;;      Totals:         5       0       0       0       0       0       0
  9582 ;;Total ram usage:        5 bytes
  9583 ;; Hardware stack levels used:    1
  9584 ;; Hardware stack levels required when called:    4
  9585 ;; This function calls:
  9586 ;;		_crc8
  9587 ;; This function is called by:
  9588 ;;		_doModeVscp
  9589 ;; This function uses a non-reentrant model
  9590 ;;
  9591                           
  9592                           	psect	text14
  9593  001F0E                     __ptext14:
  9594                           	opt stack 0
  9595  001F0E                     _calcCRC:
  9596                           	opt stack 24
  9597                           
  9598                           ; BSR set to: 1
  9599                           ;main.c: 2122: uint8_t j;
  9600                           ;main.c: 2123: uint8_t crc = 0;
  9601                           
  9602                           ;incstack = 0
  9603                           ;incstack = 0
  9604  001F0E  6A29               	clrf	calcCRC@crc,c
  9605                           
  9606                           ;main.c: 2125: for ( j = 0 ; j < len ; j++ ) {
  9607  001F10  6A28               	clrf	calcCRC@j,c
  9608  001F12  D014               	goto	l14233
  9609  001F14                     l14229:
  9610                           
  9611                           ;main.c: 2126: crc8( &crc, p[j] );
  9612  001F14  0E29               	movlw	low calcCRC@crc
  9613  001F16  6E20               	movwf	?_crc8,c
  9614  001F18  0E00               	movlw	high calcCRC@crc
  9615  001F1A  6E21               	movwf	?_crc8+1,c
  9616  001F1C  0E0F               	movlw	15
  9617  001F1E  6E21               	movwf	?_crc8+1,c
  9618  001F20  0E5F               	movlw	__accesstop+-1
  9619  001F22  6420               	cpfsgt	?_crc8,c
  9620  001F24  6A21               	clrf	?_crc8+1,c
  9621  001F26  5028               	movf	calcCRC@j,w,c
  9622  001F28  2425               	addwf	calcCRC@p,w,c
  9623  001F2A  6ED9               	movwf	fsr2l,c
  9624  001F2C  0E00               	movlw	0
  9625  001F2E  2026               	addwfc	calcCRC@p+1,w,c
  9626  001F30  6EDA               	movwf	fsr2h,c
  9627  001F32  50DF               	movf	indf2,w,c
  9628  001F34  6E22               	movwf	?_crc8+2,c
  9629  001F36  EC6B  F00F         	call	_crc8	;wreg free
  9630                           
  9631                           ; BSR set to: 2
  9632  001F3A  2A28               	incf	calcCRC@j,f,c
  9633  001F3C                     l14233:
  9634  001F3C  5027               	movf	calcCRC@len,w,c
  9635  001F3E  5C28               	subwf	calcCRC@j,w,c
  9636  001F40  E3E9               	bnc	l14229
  9637                           
  9638                           ;main.c: 2127: }
  9639                           ;main.c: 2129: return crc;
  9640  001F42  5029               	movf	calcCRC@crc,w,c
  9641  001F44  0012               	return	
  9642  001F46                     __end_of_calcCRC:
  9643                           	opt stack 0
  9644                           tblptru	equ	0xFF8
  9645                           tblptrh	equ	0xFF7
  9646                           tblptrl	equ	0xFF6
  9647                           tablat	equ	0xFF5
  9648                           prodh	equ	0xFF4
  9649                           prodl	equ	0xFF3
  9650                           intcon	equ	0xFF2
  9651                           indf0	equ	0xFEF
  9652                           postinc0	equ	0xFEE
  9653                           fsr0h	equ	0xFEA
  9654                           fsr0l	equ	0xFE9
  9655                           wreg	equ	0xFE8
  9656                           indf1	equ	0xFE7
  9657                           postinc1	equ	0xFE6
  9658                           postdec1	equ	0xFE5
  9659                           fsr1h	equ	0xFE2
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           plusw2	equ	0xFDB
  9665                           fsr2h	equ	0xFDA
  9666                           fsr2l	equ	0xFD9
  9667                           status	equ	0xFD8
  9668                           
  9669 ;; *************** function _receivePrintEventCANAL *****************
  9670 ;; Defined at:
  9671 ;;		line 1680 in file "main.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  crc             1   16[BANK0 ] unsigned char 
  9676 ;;  data            8    2[BANK0 ] unsigned char [8]
  9677 ;;  id              4   12[BANK0 ] unsigned long 
  9678 ;;  dlc             1   11[BANK0 ] unsigned char 
  9679 ;;  i               1   10[BANK0 ] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;                  1    wreg      enum E15660
  9682 ;; Registers used:
  9683 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9684 ;; Tracked objects:
  9685 ;;		On entry : F/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9689 ;;      Params:         0       0       0       0       0       0       0
  9690 ;;      Locals:         0      15       0       0       0       0       0
  9691 ;;      Temps:          0       0       0       0       0       0       0
  9692 ;;      Totals:         0      15       0       0       0       0       0
  9693 ;;Total ram usage:       15 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    5
  9696 ;; This function calls:
  9697 ;;		_WriteUSART
  9698 ;;		_sendEscapedUartData
  9699 ;;		_crc8
  9700 ;;		_getCANFrame
  9701 ;; This function is called by:
  9702 ;;		_doModeVscp
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           	psect	text15
  9707  003D6C                     __ptext15:
  9708                           	opt stack 0
  9709  003D6C                     _receivePrintEventCANAL:
  9710                           	opt stack 23
  9711                           
  9712                           ; BSR set to: 0
  9713                           ;main.c: 1681: uint8_t i;
  9714                           ;main.c: 1682: uint32_t id;
  9715                           ;main.c: 1683: uint8_t dlc;
  9716                           ;main.c: 1684: uint8_t data[8];
  9717                           ;main.c: 1686: if ( getCANFrame( &id, &dlc, &data ) ) {
  9718                           
  9719                           ;incstack = 0
  9720                           ;incstack = 0
  9721  003D6C  0E6B               	movlw	low receivePrintEventCANAL@dlc
  9722  003D6E  6E2C               	movwf	?_getCANFrame,c
  9723  003D70  0E00               	movlw	high receivePrintEventCANAL@data
  9724  003D72  6E2E               	movwf	?_getCANFrame+2,c
  9725  003D74  0E62               	movlw	low receivePrintEventCANAL@data
  9726  003D76  6E2D               	movwf	?_getCANFrame+1,c
  9727  003D78  0E6C               	movlw	receivePrintEventCANAL@id& (0+255)
  9728  003D7A  EC1E  F00F         	call	_getCANFrame
  9729  003D7E  0900               	iorlw	0
  9730  003D80  E101 D090          	bz	l897
  9731                           
  9732                           ;main.c: 1688: uint8_t crc = 0;
  9733  003D84  0100               	movlb	0	; () banked
  9734  003D86  6B70               	clrf	receivePrintEventCANAL@crc& (0+255),b
  9735                           
  9736                           ; BSR set to: 0
  9737                           ;main.c: 1691: cntRxFrames++;
  9738  003D88  0101               	movlb	1	; () banked
  9739  003D8A  2B0C               	incf	_cntRxFrames& (0+255),f,b
  9740  003D8C  0E00               	movlw	0
  9741  003D8E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  9742  003D90  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  9743  003D92  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  9744                           
  9745                           ;main.c: 1692: cntRxBytes += dlc;
  9746  003D94  0100               	movlb	0	; () banked
  9747  003D96  516B               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9748  003D98  0101               	movlb	1	; () banked
  9749  003D9A  2708               	addwf	_cntRxBytes& (0+255),f,b
  9750  003D9C  0E00               	movlw	0
  9751  003D9E  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  9752  003DA0  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  9753  003DA2  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  9754  003DA4                     l876:
  9755  003DA4  A2AC               	btfss	4012,1,c	;volatile
  9756  003DA6  D7FE               	goto	l876
  9757                           
  9758                           ;main.c: 1696: WriteUSART(0x10);
  9759  003DA8  0E10               	movlw	16
  9760  003DAA  EC90  F00E         	call	_WriteUSART
  9761  003DAE                     l879:
  9762  003DAE  A2AC               	btfss	4012,1,c	;volatile
  9763  003DB0  D7FE               	goto	l879
  9764                           
  9765                           ;main.c: 1698: WriteUSART(0x02);
  9766  003DB2  0E02               	movlw	2
  9767  003DB4  EC90  F00E         	call	_WriteUSART
  9768  003DB8                     l882:
  9769  003DB8  A2AC               	btfss	4012,1,c	;volatile
  9770  003DBA  D7FE               	goto	l882
  9771                           
  9772                           ;main.c: 1702: WriteUSART(2);
  9773  003DBC  0E02               	movlw	2
  9774  003DBE  EC90  F00E         	call	_WriteUSART
  9775                           
  9776                           ;main.c: 1703: crc8( &crc, 2 );
  9777  003DC2  0100               	movlb	0	; () banked
  9778  003DC4  0E00               	movlw	high receivePrintEventCANAL@crc
  9779  003DC6  6E21               	movwf	?_crc8+1,c
  9780  003DC8  0E70               	movlw	low receivePrintEventCANAL@crc
  9781  003DCA  6E20               	movwf	?_crc8,c
  9782  003DCC  0E02               	movlw	2
  9783  003DCE  6E22               	movwf	?_crc8+2,c
  9784  003DD0  EC6B  F00F         	call	_crc8	;wreg free
  9785  003DD4                     l885:
  9786  003DD4  A2AC               	btfss	4012,1,c	;volatile
  9787  003DD6  D7FE               	goto	l885
  9788                           
  9789                           ;main.c: 1707: WriteUSART( 0 );
  9790  003DD8  0E00               	movlw	0
  9791  003DDA  EC90  F00E         	call	_WriteUSART
  9792                           
  9793                           ;main.c: 1708: crc8( &crc, 0 );
  9794  003DDE  0100               	movlb	0	; () banked
  9795  003DE0  0E00               	movlw	high receivePrintEventCANAL@crc
  9796  003DE2  6E21               	movwf	?_crc8+1,c
  9797  003DE4  0E70               	movlw	low receivePrintEventCANAL@crc
  9798  003DE6  6E20               	movwf	?_crc8,c
  9799  003DE8  0E00               	movlw	0
  9800  003DEA  6A22               	clrf	?_crc8+2,c
  9801  003DEC  EC6B  F00F         	call	_crc8	;wreg free
  9802                           
  9803                           ; BSR set to: 2
  9804                           ;main.c: 1711: sendEscapedUartData( sequencyno, &crc );
  9805  003DF0  0100               	movlb	0	; () banked
  9806  003DF2  0E00               	movlw	high receivePrintEventCANAL@crc
  9807  003DF4  6E26               	movwf	?_sendEscapedUartData+1,c
  9808  003DF6  0E70               	movlw	low receivePrintEventCANAL@crc
  9809  003DF8  6E25               	movwf	?_sendEscapedUartData,c
  9810  003DFA  503E               	movf	_sequencyno,w,c
  9811  003DFC  ECC5  F012         	call	_sendEscapedUartData
  9812                           
  9813                           ;main.c: 1712: sequencyno++;
  9814  003E00  2A3E               	incf	_sequencyno,f,c
  9815                           
  9816                           ;main.c: 1715: sendEscapedUartData( 0, &crc );
  9817  003E02  0100               	movlb	0	; () banked
  9818  003E04  0E00               	movlw	high receivePrintEventCANAL@crc
  9819  003E06  6E26               	movwf	?_sendEscapedUartData+1,c
  9820  003E08  0E70               	movlw	low receivePrintEventCANAL@crc
  9821  003E0A  6E25               	movwf	?_sendEscapedUartData,c
  9822  003E0C  0E00               	movlw	0
  9823  003E0E  ECC5  F012         	call	_sendEscapedUartData
  9824                           
  9825                           ;main.c: 1716: sendEscapedUartData( 4 + dlc, &crc );
  9826  003E12  D849               	call	PL92	;call to abstracted procedure
  9827  003E14  0F04               	addlw	4
  9828  003E16  ECC5  F012         	call	_sendEscapedUartData
  9829                           
  9830                           ;main.c: 1722: sendEscapedUartData( (id>>24) & 0xff, &crc );
  9831  003E1A  0E00               	movlw	high receivePrintEventCANAL@crc
  9832  003E1C  6E26               	movwf	?_sendEscapedUartData+1,c
  9833  003E1E  0E70               	movlw	low receivePrintEventCANAL@crc
  9834  003E20  6E25               	movwf	?_sendEscapedUartData,c
  9835  003E22  0100               	movlb	0	; () banked
  9836  003E24  516F               	movf	(receivePrintEventCANAL@id+3)& (0+255),w,b
  9837  003E26  ECC5  F012         	call	_sendEscapedUartData
  9838                           
  9839                           ;main.c: 1723: sendEscapedUartData( (id>>16) & 0xff, &crc );
  9840  003E2A  0E00               	movlw	high receivePrintEventCANAL@crc
  9841  003E2C  6E26               	movwf	?_sendEscapedUartData+1,c
  9842  003E2E  0E70               	movlw	low receivePrintEventCANAL@crc
  9843  003E30  6E25               	movwf	?_sendEscapedUartData,c
  9844  003E32  0100               	movlb	0	; () banked
  9845  003E34  516E               	movf	(receivePrintEventCANAL@id+2)& (0+255),w,b
  9846  003E36  ECC5  F012         	call	_sendEscapedUartData
  9847                           
  9848                           ;main.c: 1724: sendEscapedUartData( (id>>8) & 0xff, &crc );
  9849  003E3A  0E00               	movlw	high receivePrintEventCANAL@crc
  9850  003E3C  6E26               	movwf	?_sendEscapedUartData+1,c
  9851  003E3E  0E70               	movlw	low receivePrintEventCANAL@crc
  9852  003E40  6E25               	movwf	?_sendEscapedUartData,c
  9853  003E42  0100               	movlb	0	; () banked
  9854  003E44  516D               	movf	(receivePrintEventCANAL@id+1)& (0+255),w,b
  9855  003E46  ECC5  F012         	call	_sendEscapedUartData
  9856                           
  9857                           ;main.c: 1725: sendEscapedUartData( id & 0xff, &crc );
  9858  003E4A  0100               	movlb	0	; () banked
  9859  003E4C  0E00               	movlw	high receivePrintEventCANAL@crc
  9860  003E4E  6E26               	movwf	?_sendEscapedUartData+1,c
  9861  003E50  0E70               	movlw	low receivePrintEventCANAL@crc
  9862  003E52  6E25               	movwf	?_sendEscapedUartData,c
  9863  003E54  516C               	movf	receivePrintEventCANAL@id& (0+255),w,b
  9864  003E56  ECC5  F012         	call	_sendEscapedUartData
  9865                           
  9866                           ;main.c: 1728: sendEscapedUartData( dlc, &crc );
  9867  003E5A  D825               	call	PL92	;call to abstracted procedure
  9868  003E5C  ECC5  F012         	call	_sendEscapedUartData
  9869                           
  9870                           ;main.c: 1730: for (i = 0; i < dlc; i++) {
  9871  003E60  0100               	movlb	0	; () banked
  9872  003E62  6B6A               	clrf	receivePrintEventCANAL@i& (0+255),b
  9873  003E64  D00D               	goto	l14217
  9874  003E66                     l14213:
  9875                           
  9876                           ; BSR set to: 0
  9877                           ;main.c: 1731: sendEscapedUartData( data[ i ], &crc );
  9878  003E66  0E00               	movlw	high receivePrintEventCANAL@crc
  9879  003E68  6E26               	movwf	?_sendEscapedUartData+1,c
  9880  003E6A  0E70               	movlw	low receivePrintEventCANAL@crc
  9881  003E6C  6E25               	movwf	?_sendEscapedUartData,c
  9882  003E6E  516A               	movf	receivePrintEventCANAL@i& (0+255),w,b
  9883  003E70  0F62               	addlw	low receivePrintEventCANAL@data
  9884  003E72  6ED9               	movwf	fsr2l,c
  9885  003E74  6ADA               	clrf	fsr2h,c
  9886  003E76  50DF               	movf	indf2,w,c
  9887  003E78  ECC5  F012         	call	_sendEscapedUartData
  9888  003E7C  0100               	movlb	0	; () banked
  9889  003E7E  2B6A               	incf	receivePrintEventCANAL@i& (0+255),f,b
  9890  003E80                     l14217:
  9891                           
  9892                           ; BSR set to: 0
  9893  003E80  516B               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9894  003E82  5D6A               	subwf	receivePrintEventCANAL@i& (0+255),w,b
  9895  003E84  E3F0               	bnc	l14213
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;main.c: 1732: }
  9899                           ;main.c: 1735: sendEscapedUartData( crc, (0) );
  9900  003E86  6A26               	clrf	?_sendEscapedUartData+1,c
  9901  003E88  6A25               	clrf	?_sendEscapedUartData,c
  9902  003E8A  5170               	movf	receivePrintEventCANAL@crc& (0+255),w,b
  9903  003E8C  ECC5  F012         	call	_sendEscapedUartData
  9904  003E90                     l891:
  9905  003E90  A2AC               	btfss	4012,1,c	;volatile
  9906  003E92  D7FE               	goto	l891
  9907                           
  9908                           ;main.c: 1739: WriteUSART(0x10);
  9909  003E94  0E10               	movlw	16
  9910  003E96  EC90  F00E         	call	_WriteUSART
  9911  003E9A                     l894:
  9912  003E9A  A2AC               	btfss	4012,1,c	;volatile
  9913  003E9C  D7FE               	goto	l894
  9914                           
  9915                           ;main.c: 1741: WriteUSART(0x03);
  9916  003E9E  0E03               	movlw	3
  9917  003EA0  EC90  F00E         	call	_WriteUSART
  9918  003EA4                     l897:
  9919  003EA4  0012               	return	
  9920  003EA6                     __end_of_receivePrintEventCANAL:
  9921                           	opt stack 0
  9922  003EA6                     PL92:
  9923                           	opt stack 23
  9924  003EA6  0100               	movlb	0	; () banked
  9925  003EA8  0E00               	movlw	high receivePrintEventCANAL@crc
  9926  003EAA  6E26               	movwf	?_sendEscapedUartData+1,c
  9927  003EAC  0E70               	movlw	low receivePrintEventCANAL@crc
  9928  003EAE  6E25               	movwf	?_sendEscapedUartData,c
  9929  003EB0  516B               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9930  003EB2  0012               	return	
  9931  003EB4                     __end_ofPL92:
  9932                           	opt stack 0
  9933                           tblptru	equ	0xFF8
  9934                           tblptrh	equ	0xFF7
  9935                           tblptrl	equ	0xFF6
  9936                           tablat	equ	0xFF5
  9937                           prodh	equ	0xFF4
  9938                           prodl	equ	0xFF3
  9939                           intcon	equ	0xFF2
  9940                           indf0	equ	0xFEF
  9941                           postinc0	equ	0xFEE
  9942                           fsr0h	equ	0xFEA
  9943                           fsr0l	equ	0xFE9
  9944                           wreg	equ	0xFE8
  9945                           indf1	equ	0xFE7
  9946                           postinc1	equ	0xFE6
  9947                           postdec1	equ	0xFE5
  9948                           fsr1h	equ	0xFE2
  9949                           fsr1l	equ	0xFE1
  9950                           indf2	equ	0xFDF
  9951                           postinc2	equ	0xFDE
  9952                           postdec2	equ	0xFDD
  9953                           plusw2	equ	0xFDB
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function _sendEscapedUartData *****************
  9959 ;; Defined at:
  9960 ;;		line 1408 in file "main.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  c               1    wreg     unsigned char 
  9963 ;;  pcrc            2   36[COMRAM] PTR unsigned char 
  9964 ;;		 -> sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNac
      +k@crc(1), 
  9965 ;;		 -> sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;  c               1   38[COMRAM] unsigned char 
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/1
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9977 ;;      Params:         2       0       0       0       0       0       0
  9978 ;;      Locals:         1       0       0       0       0       0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0
  9980 ;;      Totals:         3       0       0       0       0       0       0
  9981 ;;Total ram usage:        3 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    4
  9984 ;; This function calls:
  9985 ;;		_WriteUSART
  9986 ;;		_crc8
  9987 ;; This function is called by:
  9988 ;;		_sendVSCPDriverErrorFrame
  9989 ;;		_sendVSCPDriverAck
  9990 ;;		_sendVSCPDriverNack
  9991 ;;		_sendVSCPDriverCommandReply
  9992 ;;		_receivePrintEventCANAL
  9993 ;; This function uses a non-reentrant model
  9994 ;;
  9995                           
  9996                           	psect	text16
  9997  00258A                     __ptext16:
  9998                           	opt stack 0
  9999  00258A                     _sendEscapedUartData:
 10000                           	opt stack 23
 10001                           
 10002                           ;incstack = 0
 10003                           ;incstack = 0
 10004                           ;sendEscapedUartData@c stored from wreg
 10005  00258A  CFE8 F027          	movff	wreg,sendEscapedUartData@c
 10006                           
 10007                           ;main.c: 1409: if ( 0x10 == c ) {
 10008  00258E  5027               	movf	sendEscapedUartData@c,w,c
 10009  002590  0A10               	xorlw	16
 10010  002592  E121               	bnz	l720
 10011  002594                     l711:
 10012  002594  A2AC               	btfss	4012,1,c	;volatile
 10013  002596  D7FE               	goto	l711
 10014                           
 10015                           ;main.c: 1412: WriteUSART( 0x10 );
 10016  002598  0E10               	movlw	16
 10017  00259A  EC90  F00E         	call	_WriteUSART
 10018                           
 10019                           ;main.c: 1413: if ( (0) != pcrc ) crc8( pcrc, 0x10 );
 10020  00259E  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10021  0025A0  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10022  0025A2  E008               	bz	l715
 10023  0025A4  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10024  0025A8  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10025  0025AC  0E10               	movlw	16
 10026  0025AE  6E22               	movwf	?_crc8+2,c
 10027  0025B0  EC6B  F00F         	call	_crc8	;wreg free
 10028  0025B4                     l715:
 10029  0025B4  A2AC               	btfss	4012,1,c	;volatile
 10030  0025B6  D7FE               	goto	l715
 10031                           
 10032                           ;main.c: 1416: WriteUSART( 0x10 );
 10033  0025B8  0E10               	movlw	16
 10034  0025BA  EC90  F00E         	call	_WriteUSART
 10035                           
 10036                           ;main.c: 1417: if ( (0) != pcrc ) crc8( pcrc, 0x10 );
 10037  0025BE  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10038  0025C0  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10039  0025C2  E019               	bz	l724
 10040  0025C4  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10041  0025C8  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10042  0025CC  0E10               	movlw	16
 10043  0025CE  6E22               	movwf	?_crc8+2,c
 10044  0025D0  EC6B  F00F         	call	_crc8	;wreg free
 10045  0025D4  D010               	goto	l724
 10046  0025D6                     l720:
 10047  0025D6  A2AC               	btfss	4012,1,c	;volatile
 10048  0025D8  D7FE               	goto	l720
 10049                           
 10050                           ;main.c: 1423: WriteUSART( c );
 10051  0025DA  5027               	movf	sendEscapedUartData@c,w,c
 10052  0025DC  EC90  F00E         	call	_WriteUSART
 10053                           
 10054                           ;main.c: 1424: if ( (0) != pcrc ) crc8( pcrc, c );
 10055  0025E0  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10056  0025E2  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10057  0025E4  E008               	bz	l724
 10058  0025E6  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10059  0025EA  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10060  0025EE  C027  F022         	movff	sendEscapedUartData@c,?_crc8+2
 10061  0025F2  EC6B  F00F         	call	_crc8	;wreg free
 10062  0025F6                     l724:
 10063  0025F6  0012               	return	
 10064  0025F8                     __end_of_sendEscapedUartData:
 10065                           	opt stack 0
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           indf0	equ	0xFEF
 10074                           postinc0	equ	0xFEE
 10075                           fsr0h	equ	0xFEA
 10076                           fsr0l	equ	0xFE9
 10077                           wreg	equ	0xFE8
 10078                           indf1	equ	0xFE7
 10079                           postinc1	equ	0xFE6
 10080                           postdec1	equ	0xFE5
 10081                           fsr1h	equ	0xFE2
 10082                           fsr1l	equ	0xFE1
 10083                           indf2	equ	0xFDF
 10084                           postinc2	equ	0xFDE
 10085                           postdec2	equ	0xFDD
 10086                           plusw2	equ	0xFDB
 10087                           fsr2h	equ	0xFDA
 10088                           fsr2l	equ	0xFD9
 10089                           status	equ	0xFD8
 10090                           
 10091 ;; *************** function _crc8 *****************
 10092 ;; Defined at:
 10093 ;;		line 47 in file "crc8.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;  crc             2   31[COMRAM] PTR unsigned char 
 10096 ;;		 -> calcCRC@crc(1), sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), 
 10097 ;;		 -> sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10098 ;;  m               1   33[COMRAM] unsigned char 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;		None
 10101 ;; Return value:  Size  Location     Type
 10102 ;;		None               void
 10103 ;; Registers used:
 10104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/1
 10107 ;;		On exit  : F/2
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10110 ;;      Params:         3       0       0       0       0       0       0
 10111 ;;      Locals:         0       0       0       0       0       0       0
 10112 ;;      Temps:          2       0       0       0       0       0       0
 10113 ;;      Totals:         5       0       0       0       0       0       0
 10114 ;;Total ram usage:        5 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    3
 10117 ;; This function calls:
 10118 ;;		_init_crc8
 10119 ;; This function is called by:
 10120 ;;		_sendEscapedUartData
 10121 ;;		_sendVSCPDriverErrorFrame
 10122 ;;		_sendVSCPDriverAck
 10123 ;;		_sendVSCPDriverNack
 10124 ;;		_sendVSCPDriverCommandReply
 10125 ;;		_receivePrintEventCANAL
 10126 ;;		_calcCRC
 10127 ;; This function uses a non-reentrant model
 10128 ;;
 10129                           
 10130                           	psect	text17
 10131  001ED6                     __ptext17:
 10132                           	opt stack 0
 10133  001ED6                     _crc8:
 10134                           	opt stack 24
 10135                           
 10136                           ;crc8.c: 48: if ( !made_table ) {
 10137                           
 10138                           ;incstack = 0
 10139                           ;incstack = 0
 10140  001ED6  0100               	movlb	0	; () banked
 10141  001ED8  51D2               	movf	(_made_table+1)& (0+255),w,b
 10142  001EDA  11D1               	iorwf	_made_table& (0+255),w,b
 10143  001EDC  B4D8               	btfsc	status,2,c
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;crc8.c: 49: init_crc8();
 10147  001EDE  EC8E  F012         	call	_init_crc8	;wreg free
 10148                           
 10149                           ; BSR set to: 0
 10150                           ;crc8.c: 50: }
 10151                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 10152  001EE2  C020  FFD9         	movff	crc8@crc,fsr2l
 10153  001EE6  C021  FFDA         	movff	crc8@crc+1,fsr2h
 10154  001EEA  50DF               	movf	indf2,w,c
 10155  001EEC  1822               	xorwf	crc8@m,w,c
 10156  001EEE  6E23               	movwf	??_crc8& (0+255),c
 10157  001EF0  6A24               	clrf	(??_crc8+1)& (0+255),c
 10158  001EF2  0102               	movlb	2	; () banked
 10159  001EF4  0E00               	movlw	low _crc8_table
 10160  001EF6  2423               	addwf	??_crc8,w,c
 10161  001EF8  6ED9               	movwf	fsr2l,c
 10162  001EFA  0E02               	movlw	high _crc8_table
 10163  001EFC  2024               	addwfc	??_crc8+1,w,c
 10164  001EFE  6EDA               	movwf	fsr2h,c
 10165  001F00  C020  FFE1         	movff	crc8@crc,fsr1l
 10166  001F04  C021  FFE2         	movff	crc8@crc+1,fsr1h
 10167  001F08  CFDF FFE7          	movff	indf2,indf1
 10168                           
 10169                           ; BSR set to: 2
 10170  001F0C  0012               	return	
 10171  001F0E                     __end_of_crc8:
 10172                           	opt stack 0
 10173                           tblptru	equ	0xFF8
 10174                           tblptrh	equ	0xFF7
 10175                           tblptrl	equ	0xFF6
 10176                           tablat	equ	0xFF5
 10177                           prodh	equ	0xFF4
 10178                           prodl	equ	0xFF3
 10179                           intcon	equ	0xFF2
 10180                           indf0	equ	0xFEF
 10181                           postinc0	equ	0xFEE
 10182                           fsr0h	equ	0xFEA
 10183                           fsr0l	equ	0xFE9
 10184                           wreg	equ	0xFE8
 10185                           indf1	equ	0xFE7
 10186                           postinc1	equ	0xFE6
 10187                           postdec1	equ	0xFE5
 10188                           fsr1h	equ	0xFE2
 10189                           fsr1l	equ	0xFE1
 10190                           indf2	equ	0xFDF
 10191                           postinc2	equ	0xFDE
 10192                           postdec2	equ	0xFDD
 10193                           plusw2	equ	0xFDB
 10194                           fsr2h	equ	0xFDA
 10195                           fsr2l	equ	0xFD9
 10196                           status	equ	0xFD8
 10197                           
 10198 ;; *************** function _init_crc8 *****************
 10199 ;; Defined at:
 10200 ;;		line 25 in file "crc8.c"
 10201 ;; Parameters:    Size  Location     Type
 10202 ;;		None
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  i               2   29[COMRAM] int 
 10205 ;;  j               2   26[COMRAM] int 
 10206 ;;  crc             1   28[COMRAM] unsigned char 
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10211 ;; Tracked objects:
 10212 ;;		On entry : E/1
 10213 ;;		On exit  : F/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10216 ;;      Params:         0       0       0       0       0       0       0
 10217 ;;      Locals:         7       0       0       0       0       0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0
 10219 ;;      Totals:         7       0       0       0       0       0       0
 10220 ;;Total ram usage:        7 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    2
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_main
 10227 ;;		_crc8
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           	psect	text18
 10232  00251C                     __ptext18:
 10233                           	opt stack 0
 10234  00251C                     _init_crc8:
 10235                           	opt stack 24
 10236                           
 10237                           ;crc8.c: 26: int i,j;
 10238                           ;crc8.c: 27: unsigned char crc;
 10239                           ;crc8.c: 29: if (!made_table) {
 10240                           
 10241                           ; BSR set to: 2
 10242                           ;incstack = 0
 10243                           ;incstack = 0
 10244  00251C  0100               	movlb	0	; () banked
 10245  00251E  51D2               	movf	(_made_table+1)& (0+255),w,b
 10246  002520  11D1               	iorwf	_made_table& (0+255),w,b
 10247  002522  E132               	bnz	l1471
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 10251  002524  6A1E               	clrf	init_crc8@i,c
 10252  002526  6A1F               	clrf	init_crc8@i+1,c
 10253  002528                     l1463:
 10254                           
 10255                           ;crc8.c: 31: crc = i;
 10256  002528  C01E  F01D         	movff	init_crc8@i,init_crc8@crc
 10257                           
 10258                           ;crc8.c: 32: for (j=0; j<8; j++) {
 10259  00252C  6A1B               	clrf	init_crc8@j,c
 10260  00252E  6A1C               	clrf	init_crc8@j+1,c
 10261  002530                     l1465:
 10262                           
 10263                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 10264  002530  BE1D               	btfsc	init_crc8@crc,7,c
 10265  002532  D003               	goto	l12555
 10266  002534  6A19               	clrf	_init_crc8$2025,c
 10267  002536  6A1A               	clrf	_init_crc8$2025+1,c
 10268  002538  D003               	goto	l12557
 10269  00253A                     l12555:
 10270  00253A  6A1A               	clrf	_init_crc8$2025+1,c
 10271  00253C  0E07               	movlw	7
 10272  00253E  6E19               	movwf	_init_crc8$2025,c
 10273  002540                     l12557:
 10274  002540  501D               	movf	init_crc8@crc,w,c
 10275  002542  241D               	addwf	init_crc8@crc,w,c
 10276  002544  1819               	xorwf	_init_crc8$2025,w,c
 10277  002546  6E1D               	movwf	init_crc8@crc,c
 10278  002548  4A1B               	infsnz	init_crc8@j,f,c
 10279  00254A  2A1C               	incf	init_crc8@j+1,f,c
 10280  00254C  501C               	movf	init_crc8@j+1,w,c
 10281  00254E  0A80               	xorlw	128
 10282  002550  0F80               	addlw	-128
 10283  002552  0E08               	movlw	8
 10284  002554  B4D8               	btfsc	status,2,c
 10285  002556  5C1B               	subwf	init_crc8@j,w,c
 10286  002558  E3EB               	bnc	l1465
 10287                           
 10288                           ;crc8.c: 34: }
 10289                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 10290  00255A  0102               	movlb	2	; () banked
 10291  00255C  0E00               	movlw	low _crc8_table
 10292  00255E  241E               	addwf	init_crc8@i,w,c
 10293  002560  6ED9               	movwf	fsr2l,c
 10294  002562  0E02               	movlw	high _crc8_table
 10295  002564  201F               	addwfc	init_crc8@i+1,w,c
 10296  002566  6EDA               	movwf	fsr2h,c
 10297  002568  C01D  FFDF         	movff	init_crc8@crc,indf2
 10298                           
 10299                           ; BSR set to: 2
 10300  00256C  4A1E               	infsnz	init_crc8@i,f,c
 10301  00256E  2A1F               	incf	init_crc8@i+1,f,c
 10302                           
 10303                           ; BSR set to: 2
 10304  002570  501F               	movf	init_crc8@i+1,w,c
 10305  002572  0A80               	xorlw	128
 10306  002574  0F7F               	addlw	-129
 10307  002576  0E00               	movlw	0
 10308  002578  B4D8               	btfsc	status,2,c
 10309  00257A  5C1E               	subwf	init_crc8@i,w,c
 10310  00257C  E3D5               	bnc	l1463
 10311                           
 10312                           ; BSR set to: 2
 10313                           ;crc8.c: 37: }
 10314                           ;crc8.c: 38: made_table=1;
 10315  00257E  0E00               	movlw	0
 10316  002580  0100               	movlb	0	; () banked
 10317  002582  6FD2               	movwf	(_made_table+1)& (0+255),b
 10318  002584  0E01               	movlw	1
 10319  002586  6FD1               	movwf	_made_table& (0+255),b
 10320  002588                     l1471:
 10321                           
 10322                           ; BSR set to: 0
 10323  002588  0012               	return	
 10324  00258A                     __end_of_init_crc8:
 10325                           	opt stack 0
 10326                           tblptru	equ	0xFF8
 10327                           tblptrh	equ	0xFF7
 10328                           tblptrl	equ	0xFF6
 10329                           tablat	equ	0xFF5
 10330                           prodh	equ	0xFF4
 10331                           prodl	equ	0xFF3
 10332                           intcon	equ	0xFF2
 10333                           indf0	equ	0xFEF
 10334                           postinc0	equ	0xFEE
 10335                           fsr0h	equ	0xFEA
 10336                           fsr0l	equ	0xFE9
 10337                           wreg	equ	0xFE8
 10338                           indf1	equ	0xFE7
 10339                           postinc1	equ	0xFE6
 10340                           postdec1	equ	0xFE5
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           plusw2	equ	0xFDB
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function _doModeVerbose *****************
 10352 ;; Defined at:
 10353 ;;		line 421 in file "main.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  preg            2    6[BANK3 ] PTR unsigned char 
 10358 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10359 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10360 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10361 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10362 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10363 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10364 ;;  preg            2    4[BANK3 ] PTR unsigned char 
 10365 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10366 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10367 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10368 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10369 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10370 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10371 ;;  id              4   35[BANK3 ] unsigned long 
 10372 ;;  p               2   59[BANK3 ] PTR unsigned char 
 10373 ;;		 -> NULL(0), cmdbuf(80), 
 10374 ;;  mask_class      2   10[BANK3 ] unsigned short 
 10375 ;;  maskno          1   40[BANK3 ] unsigned char 
 10376 ;;  mask_nodeid     1   19[BANK3 ] unsigned char 
 10377 ;;  mask_type       1   18[BANK3 ] unsigned char 
 10378 ;;  mask_priorit    1   17[BANK3 ] unsigned char 
 10379 ;;  id              4    0[BANK3 ] unsigned long 
 10380 ;;  p               2   57[BANK3 ] PTR unsigned char 
 10381 ;;		 -> NULL(0), cmdbuf(80), 
 10382 ;;  filter_class    2    8[BANK3 ] unsigned short 
 10383 ;;  filterno        1   39[BANK3 ] unsigned char 
 10384 ;;  filter_nodei    1   16[BANK3 ] unsigned char 
 10385 ;;  filter_type     1   15[BANK3 ] unsigned char 
 10386 ;;  filter_prior    1   14[BANK3 ] unsigned char 
 10387 ;;  nodeid          1   47[BANK3 ] unsigned char 
 10388 ;;  p               2   52[BANK3 ] PTR unsigned char 
 10389 ;;		 -> NULL(0), cmdbuf(80), 
 10390 ;;  value           1   42[BANK3 ] unsigned char 
 10391 ;;  reg             1   34[BANK3 ] unsigned char 
 10392 ;;  page            1   33[BANK3 ] unsigned char 
 10393 ;;  nodeid          1   13[BANK3 ] unsigned char 
 10394 ;;  p               2   50[BANK3 ] PTR unsigned char 
 10395 ;;		 -> NULL(0), cmdbuf(80), 
 10396 ;;  value           1   49[BANK3 ] unsigned char 
 10397 ;;  i               1   48[BANK3 ] unsigned char 
 10398 ;;  reg             1   46[BANK3 ] unsigned char 
 10399 ;;  page            1   45[BANK3 ] unsigned char 
 10400 ;;  count           1   43[BANK3 ] unsigned char 
 10401 ;;  rv              1   32[BANK3 ] enum E15660
 10402 ;;  nodeid          1   12[BANK3 ] unsigned char 
 10403 ;;  p               2   55[BANK3 ] PTR unsigned char 
 10404 ;;		 -> NULL(0), cmdbuf(80), 
 10405 ;;  ifmode          1   54[BANK3 ] enum E16371
 10406 ;;  c               1   44[BANK3 ] unsigned char 
 10407 ;;  i               1   41[BANK3 ] unsigned char 
 10408 ;; Return value:  Size  Location     Type
 10409 ;;		None               void
 10410 ;; Registers used:
 10411 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10417 ;;      Params:         0       0       0       0       0       0       0
 10418 ;;      Locals:         0       0       0       0      61       0       0
 10419 ;;      Temps:          0      20       0       0       0       0       0
 10420 ;;      Totals:         0      20       0       0      61       0       0
 10421 ;;Total ram usage:       81 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    9
 10424 ;; This function calls:
 10425 ;;		_putsUSART
 10426 ;;		_printFirmwareVersion
 10427 ;;		_fifo_read
 10428 ;;		_writeEEPROM
 10429 ;;		_receivePrintEventVerbose
 10430 ;;		_stristr
 10431 ;;		_ECANSetOperationMode
 10432 ;;		_strtok
 10433 ;;		_atoi
 10434 ;;		_memset
 10435 ;;		_sendVSCPFrame
 10436 ;;		_printStatistics
 10437 ;;		_printErrors
 10438 ;;		_printHelp
 10439 ;;		_findNodes
 10440 ;;		_strcpy
 10441 ;;		_strchr
 10442 ;;		_readRegisterExtended
 10443 ;;		_sprintf
 10444 ;;		_WriteUSART
 10445 ;;		_printBinary
 10446 ;;		_writeRegisterExtended
 10447 ;;		_printNodeFirmwareVersion
 10448 ;;		_printGUID
 10449 ;;		_printMDF
 10450 ;;		_setFilter
 10451 ;;		__CANIDToRegs
 10452 ;; This function is called by:
 10453 ;;		_main
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text19
 10458  005A16                     __ptext19:
 10459                           	opt stack 0
 10460  005A16                     _doModeVerbose:
 10461                           	opt stack 20
 10462                           
 10463                           ;main.c: 422: uint8_t c;
 10464                           ;main.c: 423: uint8_t i;
 10465                           ;main.c: 426: if (!bSilent) {
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;incstack = 0
 10469                           ;incstack = 0
 10470  005A16  0100               	movlb	0	; () banked
 10471  005A18  67D6               	tstfsz	_bSilent& (0+255),b
 10472  005A1A  D002               	goto	l12671
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;main.c: 427: receivePrintEventVerbose();
 10476  005A1C  EC10  F025         	call	_receivePrintEventVerbose	;wreg free
 10477  005A20                     l12671:
 10478                           
 10479                           ;main.c: 428: }
 10480                           ;main.c: 431: (INTCONbits.GIE = 0);
 10481  005A20  9EF2               	bcf	intcon,7,c	;volatile
 10482                           
 10483                           ;main.c: 433: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
 10484  005A22  0E01               	movlw	high _inputFifo
 10485  005A24  6E1A               	movwf	?_fifo_read+1,c
 10486  005A26  0EC4               	movlw	low _inputFifo
 10487  005A28  6E19               	movwf	?_fifo_read,c
 10488  005A2A  0103               	movlb	3	; () banked
 10489  005A2C  0E03               	movlw	high doModeVerbose@c
 10490  005A2E  6E1C               	movwf	?_fifo_read+3,c
 10491  005A30  0E2C               	movlw	low doModeVerbose@c
 10492  005A32  6E1B               	movwf	?_fifo_read+2,c
 10493  005A34  6A1E               	clrf	?_fifo_read+5,c
 10494  005A36  0E01               	movlw	1
 10495  005A38  6E1D               	movwf	?_fifo_read+4,c
 10496  005A3A  EC94  F017         	call	_fifo_read	;wreg free
 10497  005A3E  0419               	decf	?_fifo_read,w,c
 10498  005A40  101A               	iorwf	?_fifo_read+1,w,c
 10499  005A42  E002 EFD3  F035    	bnz	l13267
 10500                           
 10501                           ;main.c: 436: (INTCONbits.GIE = 1);
 10502  005A48  8EF2               	bsf	intcon,7,c	;volatile
 10503                           
 10504                           ;main.c: 439: cmdbuf[ pos ] = c;
 10505  005A4A  0E24               	movlw	low _cmdbuf
 10506  005A4C  0100               	movlb	0	; () banked
 10507  005A4E  25D8               	addwf	_pos& (0+255),w,b
 10508  005A50  6ED9               	movwf	fsr2l,c
 10509  005A52  6ADA               	clrf	fsr2h,c
 10510  005A54  0E01               	movlw	high _cmdbuf
 10511  005A56  22DA               	addwfc	fsr2h,f,c
 10512  005A58  C32C  FFDF         	movff	doModeVerbose@c,indf2
 10513                           
 10514                           ; BSR set to: 3
 10515                           ;main.c: 440: pos++;
 10516  005A5C  2BD8               	incf	_pos& (0+255),f,b
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;main.c: 447: }
 10520                           ;main.c: 450: if ( 0x0d == c ) {
 10521                           
 10522                           ;main.c: 442: if ( pos >= 500u ) {
 10523  005A5E  0103               	movlb	3	; () banked
 10524  005A60  512C               	movf	doModeVerbose@c& (0+255),w,b
 10525  005A62  0A0D               	xorlw	13
 10526  005A64  E002 EFD3  F035    	bnz	l13267
 10527                           
 10528                           ; BSR set to: 3
 10529                           ;main.c: 452: cmdbuf[ pos ] = 0;
 10530  005A6A  0E24               	movlw	low _cmdbuf
 10531  005A6C  0100               	movlb	0	; () banked
 10532  005A6E  25D8               	addwf	_pos& (0+255),w,b
 10533  005A70  6ED9               	movwf	fsr2l,c
 10534  005A72  6ADA               	clrf	fsr2h,c
 10535  005A74  0101               	movlb	1	; () banked
 10536  005A76  0E01               	movlw	high _cmdbuf
 10537  005A78  22DA               	addwfc	fsr2h,f,c
 10538  005A7A  6ADF               	clrf	indf2,c
 10539                           
 10540                           ; BSR set to: 1
 10541                           ;main.c: 455: if ( cmdbuf == stristr(cmdbuf, "BOOT")) {
 10542  005A7C  6E27               	movwf	?_stristr+1,c
 10543  005A7E  0E24               	movlw	low _cmdbuf
 10544  005A80  6E26               	movwf	?_stristr,c
 10545  005A82  0E7C               	movlw	high STR_5
 10546  005A84  6E29               	movwf	?_stristr+3,c
 10547  005A86  0ECF               	movlw	low STR_5
 10548  005A88  6E28               	movwf	?_stristr+2,c
 10549  005A8A  ECAB  F013         	call	_stristr	;wreg free
 10550  005A8E  ECD5  F035         	call	PL2	;call to abstracted procedure
 10551  005A92  E102               	bnz	u16615
 10552  005A94  5026               	movf	?_stristr,w,c
 10553  005A96  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10554  005A98                     u16615:
 10555  005A98  E10F               	bnz	l12693
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;main.c: 456: putsUSART((char *) "Will enter bootloader now...\r\n");
 10559  005A9A  0E77               	movlw	high STR_6
 10560  005A9C  6E1B               	movwf	?_putsUSART+1,c
 10561  005A9E  0EEC               	movlw	low STR_6
 10562  005AA0  6E1A               	movwf	?_putsUSART,c
 10563  005AA2  EC50  F011         	call	_putsUSART	;wreg free
 10564                           
 10565                           ;main.c: 457: writeEEPROM(0x00, 0xFF);
 10566  005AA6  6A1A               	clrf	?_writeEEPROM+1,c
 10567  005AA8  6A19               	clrf	?_writeEEPROM,c
 10568  005AAA  0EFF               	movlw	255
 10569  005AAC  681B               	setf	?_writeEEPROM+2,c
 10570  005AAE  ECDE  F00E         	call	_writeEEPROM	;wreg free
 10571  005AB2  00FF               	reset		;# 
 10572                           
 10573                           ;main.c: 459: }
 10574  005AB4  EFC5  F035         	goto	l13263
 10575  005AB8                     l12693:
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;main.c: 461: else if ( cmdbuf == stristr(cmdbuf, "OPEN")) {
 10579  005AB8  0101               	movlb	1	; () banked
 10580  005ABA  0E01               	movlw	high _cmdbuf
 10581  005ABC  6E27               	movwf	?_stristr+1,c
 10582  005ABE  0E24               	movlw	low _cmdbuf
 10583  005AC0  6E26               	movwf	?_stristr,c
 10584  005AC2  0E7C               	movlw	high STR_7
 10585  005AC4  6E29               	movwf	?_stristr+3,c
 10586  005AC6  0EB6               	movlw	low STR_7
 10587  005AC8  6E28               	movwf	?_stristr+2,c
 10588  005ACA  ECAB  F013         	call	_stristr	;wreg free
 10589  005ACE  ECD5  F035         	call	PL2	;call to abstracted procedure
 10590  005AD2  E102               	bnz	u16625
 10591  005AD4  5026               	movf	?_stristr,w,c
 10592  005AD6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10593  005AD8                     u16625:
 10594  005AD8  E10C               	bnz	l12701
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;main.c: 462: bSilent = 0;
 10598  005ADA  6BD6               	clrf	_bSilent& (0+255),b
 10599                           
 10600                           ; BSR set to: 0
 10601                           ;main.c: 463: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10602  005ADC  0E00               	movlw	0
 10603  005ADE  ECA5  F00E         	call	_ECANSetOperationMode
 10604                           
 10605                           ;main.c: 464: putsUSART((char *) "+OK\r\n");
 10606  005AE2  0E7C               	movlw	high STR_8
 10607  005AE4  6E1B               	movwf	?_putsUSART+1,c
 10608  005AE6  0E7F               	movlw	low STR_8
 10609  005AE8  6E1A               	movwf	?_putsUSART,c
 10610  005AEA  EC50  F011         	call	_putsUSART	;wreg free
 10611                           
 10612                           ;main.c: 465: }
 10613  005AEE  EFC5  F035         	goto	l13263
 10614  005AF2                     l12701:
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;main.c: 467: else if ( cmdbuf == stristr(cmdbuf, "SILENT")) {
 10618  005AF2  0101               	movlb	1	; () banked
 10619  005AF4  0E01               	movlw	high _cmdbuf
 10620  005AF6  6E27               	movwf	?_stristr+1,c
 10621  005AF8  0E24               	movlw	low _cmdbuf
 10622  005AFA  6E26               	movwf	?_stristr,c
 10623  005AFC  0E7C               	movlw	high STR_9
 10624  005AFE  6E29               	movwf	?_stristr+3,c
 10625  005B00  0E5D               	movlw	low STR_9
 10626  005B02  6E28               	movwf	?_stristr+2,c
 10627  005B04  ECAB  F013         	call	_stristr	;wreg free
 10628  005B08  ECD5  F035         	call	PL2	;call to abstracted procedure
 10629  005B0C  E102               	bnz	u16635
 10630  005B0E  5026               	movf	?_stristr,w,c
 10631  005B10  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10632  005B12                     u16635:
 10633  005B12  E10D               	bnz	l12709
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;main.c: 468: bSilent = 1;
 10637  005B14  0E01               	movlw	1
 10638  005B16  6FD6               	movwf	_bSilent& (0+255),b
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;main.c: 469: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10642  005B18  0E00               	movlw	0
 10643  005B1A  ECA5  F00E         	call	_ECANSetOperationMode
 10644                           
 10645                           ;main.c: 470: putsUSART((char *) "+OK\r\n");
 10646  005B1E  0E7C               	movlw	high STR_8
 10647  005B20  6E1B               	movwf	?_putsUSART+1,c
 10648  005B22  0E7F               	movlw	low STR_8
 10649  005B24  6E1A               	movwf	?_putsUSART,c
 10650  005B26  EC50  F011         	call	_putsUSART	;wreg free
 10651                           
 10652                           ;main.c: 471: }
 10653  005B2A  EFC5  F035         	goto	l13263
 10654  005B2E                     l12709:
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;main.c: 473: else if ( cmdbuf == stristr(cmdbuf, "CLOSE")) {
 10658  005B2E  0101               	movlb	1	; () banked
 10659  005B30  0E01               	movlw	high _cmdbuf
 10660  005B32  6E27               	movwf	?_stristr+1,c
 10661  005B34  0E24               	movlw	low _cmdbuf
 10662  005B36  6E26               	movwf	?_stristr,c
 10663  005B38  0E7C               	movlw	high STR_11
 10664  005B3A  6E29               	movwf	?_stristr+3,c
 10665  005B3C  0E91               	movlw	low STR_11
 10666  005B3E  6E28               	movwf	?_stristr+2,c
 10667  005B40  ECAB  F013         	call	_stristr	;wreg free
 10668  005B44  ECD5  F035         	call	PL2	;call to abstracted procedure
 10669  005B48  E102               	bnz	u16645
 10670  005B4A  5026               	movf	?_stristr,w,c
 10671  005B4C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10672  005B4E                     u16645:
 10673  005B4E  E10D               	bnz	l12717
 10674                           
 10675                           ; BSR set to: 0
 10676                           ;main.c: 474: bSilent = 1;
 10677  005B50  0E01               	movlw	1
 10678  005B52  6FD6               	movwf	_bSilent& (0+255),b
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 475: ECANSetOperationMode(0x20);
 10682  005B54  0E20               	movlw	32
 10683  005B56  ECA5  F00E         	call	_ECANSetOperationMode
 10684                           
 10685                           ;main.c: 476: putsUSART((char *) "+OK\r\n");
 10686  005B5A  0E7C               	movlw	high STR_8
 10687  005B5C  6E1B               	movwf	?_putsUSART+1,c
 10688  005B5E  0E7F               	movlw	low STR_8
 10689  005B60  6E1A               	movwf	?_putsUSART,c
 10690  005B62  EC50  F011         	call	_putsUSART	;wreg free
 10691                           
 10692                           ;main.c: 477: }
 10693  005B66  EFC5  F035         	goto	l13263
 10694  005B6A                     l12717:
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;main.c: 479: else if ( cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 10698  005B6A  0101               	movlb	1	; () banked
 10699  005B6C  0E01               	movlw	high _cmdbuf
 10700  005B6E  6E27               	movwf	?_stristr+1,c
 10701  005B70  0E24               	movlw	low _cmdbuf
 10702  005B72  6E26               	movwf	?_stristr,c
 10703  005B74  0E7B               	movlw	high STR_13
 10704  005B76  6E29               	movwf	?_stristr+3,c
 10705  005B78  0ECC               	movlw	low STR_13
 10706  005B7A  6E28               	movwf	?_stristr+2,c
 10707  005B7C  ECAB  F013         	call	_stristr	;wreg free
 10708  005B80  ECD5  F035         	call	PL2	;call to abstracted procedure
 10709  005B84  E102               	bnz	u16655
 10710  005B86  5026               	movf	?_stristr,w,c
 10711  005B88  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10712  005B8A                     u16655:
 10713  005B8A  E10C               	bnz	l12725
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;main.c: 480: bSilent = 0;
 10717  005B8C  6BD6               	clrf	_bSilent& (0+255),b
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;main.c: 481: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 10721  005B8E  0E40               	movlw	64
 10722  005B90  ECA5  F00E         	call	_ECANSetOperationMode
 10723                           
 10724                           ;main.c: 482: putsUSART((char *) "+OK\r\n");
 10725  005B94  0E7C               	movlw	high STR_8
 10726  005B96  6E1B               	movwf	?_putsUSART+1,c
 10727  005B98  0E7F               	movlw	low STR_8
 10728  005B9A  6E1A               	movwf	?_putsUSART,c
 10729  005B9C  EC50  F011         	call	_putsUSART	;wreg free
 10730                           
 10731                           ;main.c: 483: }
 10732  005BA0  EFC5  F035         	goto	l13263
 10733  005BA4                     l12725:
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;main.c: 485: else if ( cmdbuf == stristr(cmdbuf, "LISTEN")) {
 10737  005BA4  0101               	movlb	1	; () banked
 10738  005BA6  0E01               	movlw	high _cmdbuf
 10739  005BA8  6E27               	movwf	?_stristr+1,c
 10740  005BAA  0E24               	movlw	low _cmdbuf
 10741  005BAC  6E26               	movwf	?_stristr,c
 10742  005BAE  0E7C               	movlw	high STR_15
 10743  005BB0  6E29               	movwf	?_stristr+3,c
 10744  005BB2  0E4F               	movlw	low STR_15
 10745  005BB4  6E28               	movwf	?_stristr+2,c
 10746  005BB6  ECAB  F013         	call	_stristr	;wreg free
 10747  005BBA  ECD5  F035         	call	PL2	;call to abstracted procedure
 10748  005BBE  E102               	bnz	u16665
 10749  005BC0  5026               	movf	?_stristr,w,c
 10750  005BC2  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10751  005BC4                     u16665:
 10752  005BC4  E10C               	bnz	l12733
 10753                           
 10754                           ; BSR set to: 0
 10755                           ;main.c: 486: bSilent = 0;
 10756  005BC6  6BD6               	clrf	_bSilent& (0+255),b
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 487: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 10760  005BC8  0E60               	movlw	96
 10761  005BCA  ECA5  F00E         	call	_ECANSetOperationMode
 10762                           
 10763                           ;main.c: 488: putsUSART((char *) "+OK\r\n");
 10764  005BCE  0E7C               	movlw	high STR_8
 10765  005BD0  6E1B               	movwf	?_putsUSART+1,c
 10766  005BD2  0E7F               	movlw	low STR_8
 10767  005BD4  6E1A               	movwf	?_putsUSART,c
 10768  005BD6  EC50  F011         	call	_putsUSART	;wreg free
 10769                           
 10770                           ;main.c: 489: }
 10771  005BDA  EFC5  F035         	goto	l13263
 10772  005BDE                     l12733:
 10773                           
 10774                           ; BSR set to: 0
 10775                           ;main.c: 491: else if ( cmdbuf == stristr(cmdbuf, "VERSION")) {
 10776  005BDE  0101               	movlb	1	; () banked
 10777  005BE0  0E01               	movlw	high _cmdbuf
 10778  005BE2  6E27               	movwf	?_stristr+1,c
 10779  005BE4  0E24               	movlw	low _cmdbuf
 10780  005BE6  6E26               	movwf	?_stristr,c
 10781  005BE8  0E7C               	movlw	high STR_17
 10782  005BEA  6E29               	movwf	?_stristr+3,c
 10783  005BEC  0E0D               	movlw	low STR_17
 10784  005BEE  6E28               	movwf	?_stristr+2,c
 10785  005BF0  ECAB  F013         	call	_stristr	;wreg free
 10786  005BF4  ECD5  F035         	call	PL2	;call to abstracted procedure
 10787  005BF8  E102               	bnz	u16675
 10788  005BFA  5026               	movf	?_stristr,w,c
 10789  005BFC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10790  005BFE                     u16675:
 10791  005BFE  E10A               	bnz	l12739
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;main.c: 492: printFirmwareVersion();
 10795  005C00  ECAF  F014         	call	_printFirmwareVersion	;wreg free
 10796                           
 10797                           ;main.c: 493: putsUSART((char *) "+OK\r\n");
 10798  005C04  0E7C               	movlw	high STR_8
 10799  005C06  6E1B               	movwf	?_putsUSART+1,c
 10800  005C08  0E7F               	movlw	low STR_8
 10801  005C0A  6E1A               	movwf	?_putsUSART,c
 10802  005C0C  EC50  F011         	call	_putsUSART	;wreg free
 10803                           
 10804                           ;main.c: 494: }
 10805  005C10  EFC5  F035         	goto	l13263
 10806  005C14                     l12739:
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 495: else if ( cmdbuf == stristr(cmdbuf, "IFMODE")) {
 10810  005C14  0101               	movlb	1	; () banked
 10811  005C16  0E01               	movlw	high _cmdbuf
 10812  005C18  6E27               	movwf	?_stristr+1,c
 10813  005C1A  0E24               	movlw	low _cmdbuf
 10814  005C1C  6E26               	movwf	?_stristr,c
 10815  005C1E  0E7C               	movlw	high STR_19
 10816  005C20  6E29               	movwf	?_stristr+3,c
 10817  005C22  0E48               	movlw	low STR_19
 10818  005C24  6E28               	movwf	?_stristr+2,c
 10819  005C26  ECAB  F013         	call	_stristr	;wreg free
 10820  005C2A  ECD5  F035         	call	PL2	;call to abstracted procedure
 10821  005C2E  E102               	bnz	u16685
 10822  005C30  5026               	movf	?_stristr,w,c
 10823  005C32  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10824  005C34                     u16685:
 10825  005C34  E161               	bnz	l12775
 10826                           
 10827                           ; BSR set to: 0
 10828                           ;main.c: 496: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 10829  005C36  506F               	movf	3951,w,c	;volatile
 10830  005C38  0BE0               	andlw	224
 10831  005C3A  0103               	movlb	3	; () banked
 10832  005C3C  6F36               	movwf	doModeVerbose@ifmode& (0+255),b
 10833                           
 10834                           ; BSR set to: 3
 10835                           ;main.c: 497: if ( ( ECAN_OP_MODE_NORMAL == ifmode ) & !bSilent ) {
 10836  005C3E  6736               	tstfsz	doModeVerbose@ifmode& (0+255),b
 10837  005C40  D00B               	goto	l12749
 10838                           
 10839                           ; BSR set to: 3
 10840  005C42  0100               	movlb	0	; () banked
 10841  005C44  67D6               	tstfsz	_bSilent& (0+255),b
 10842  005C46  D008               	goto	l12749
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 498: putsUSART((char *) "+OK - Normal mode\r\n");
 10846  005C48  0E7A               	movlw	high STR_20
 10847  005C4A  6E1B               	movwf	?_putsUSART+1,c
 10848  005C4C  0E82               	movlw	low STR_20
 10849  005C4E  6E1A               	movwf	?_putsUSART,c
 10850  005C50  EC50  F011         	call	_putsUSART	;wreg free
 10851                           
 10852                           ;main.c: 499: }
 10853  005C54  EFC5  F035         	goto	l13263
 10854  005C58                     l12749:
 10855                           
 10856                           ;main.c: 500: else if ( ( ECAN_OP_MODE_NORMAL == ifmode ) & bSilent ) {
 10857  005C58  0103               	movlb	3	; () banked
 10858  005C5A  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10859  005C5C  0E01               	movlw	1
 10860  005C5E  A4D8               	btfss	status,2,c
 10861  005C60  0E00               	movlw	0
 10862  005C62  0100               	movlb	0	; () banked
 10863  005C64  15D6               	andwf	_bSilent& (0+255),w,b
 10864  005C66  E008               	bz	l12753
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;main.c: 501: putsUSART((char *) "+OK - Silent mode\r\n");
 10868  005C68  0E7A               	movlw	high STR_21
 10869  005C6A  6E1B               	movwf	?_putsUSART+1,c
 10870  005C6C  0E96               	movlw	low STR_21
 10871  005C6E  6E1A               	movwf	?_putsUSART,c
 10872  005C70  EC50  F011         	call	_putsUSART	;wreg free
 10873                           
 10874                           ;main.c: 502: }
 10875  005C74  EFC5  F035         	goto	l13263
 10876  005C78                     l12753:
 10877                           
 10878                           ; BSR set to: 0
 10879                           ;main.c: 503: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 10880  005C78  0103               	movlb	3	; () banked
 10881  005C7A  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10882  005C7C  0A20               	xorlw	32
 10883  005C7E  E108               	bnz	l12757
 10884                           
 10885                           ; BSR set to: 3
 10886                           ;main.c: 504: putsUSART((char *) "+OK - Sleep mode\r\n");
 10887  005C80  0E7A               	movlw	high STR_22
 10888  005C82  6E1B               	movwf	?_putsUSART+1,c
 10889  005C84  0ED2               	movlw	low STR_22
 10890  005C86  6E1A               	movwf	?_putsUSART,c
 10891  005C88  EC50  F011         	call	_putsUSART	;wreg free
 10892                           
 10893                           ;main.c: 505: }
 10894  005C8C  EFC5  F035         	goto	l13263
 10895  005C90                     l12757:
 10896                           
 10897                           ; BSR set to: 3
 10898                           ;main.c: 506: else if (ECAN_OP_MODE_LOOP == ifmode) {
 10899  005C90  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10900  005C92  0A40               	xorlw	64
 10901  005C94  E108               	bnz	l12761
 10902                           
 10903                           ; BSR set to: 3
 10904                           ;main.c: 507: putsUSART((char *) "+OK - Loopback mode\r\n");
 10905  005C96  0E7A               	movlw	high STR_23
 10906  005C98  6E1B               	movwf	?_putsUSART+1,c
 10907  005C9A  0E05               	movlw	low STR_23
 10908  005C9C  6E1A               	movwf	?_putsUSART,c
 10909  005C9E  EC50  F011         	call	_putsUSART	;wreg free
 10910                           
 10911                           ;main.c: 508: }
 10912  005CA2  EFC5  F035         	goto	l13263
 10913  005CA6                     l12761:
 10914                           
 10915                           ; BSR set to: 3
 10916                           ;main.c: 509: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 10917  005CA6  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10918  005CA8  0A60               	xorlw	96
 10919  005CAA  E108               	bnz	l12765
 10920                           
 10921                           ; BSR set to: 3
 10922                           ;main.c: 510: putsUSART((char *) "+OK - Listen only mode\r\n");
 10923  005CAC  0E78               	movlw	high STR_24
 10924  005CAE  6E1B               	movwf	?_putsUSART+1,c
 10925  005CB0  0ECE               	movlw	low STR_24
 10926  005CB2  6E1A               	movwf	?_putsUSART,c
 10927  005CB4  EC50  F011         	call	_putsUSART	;wreg free
 10928                           
 10929                           ;main.c: 511: }
 10930  005CB8  EFC5  F035         	goto	l13263
 10931  005CBC                     l12765:
 10932                           
 10933                           ; BSR set to: 3
 10934                           ;main.c: 512: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 10935  005CBC  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10936  005CBE  0A80               	xorlw	128
 10937  005CC0  E108               	bnz	l12769
 10938                           
 10939                           ; BSR set to: 3
 10940                           ;main.c: 513: putsUSART((char *) "+OK - Closed mode\r\n");
 10941  005CC2  0E7A               	movlw	high STR_25
 10942  005CC4  6E1B               	movwf	?_putsUSART+1,c
 10943  005CC6  0E6E               	movlw	low STR_25
 10944  005CC8  6E1A               	movwf	?_putsUSART,c
 10945  005CCA  EC50  F011         	call	_putsUSART	;wreg free
 10946                           
 10947                           ;main.c: 514: }
 10948  005CCE  EFC5  F035         	goto	l13263
 10949  005CD2                     l12769:
 10950                           
 10951                           ; BSR set to: 3
 10952                           ;main.c: 515: else if (ECAN_OP_MODE_BITS == ifmode) {
 10953  005CD2  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10954  005CD4  0AE0               	xorlw	224
 10955  005CD6  E108               	bnz	l12773
 10956                           
 10957                           ; BSR set to: 3
 10958                           ;main.c: 516: putsUSART((char *) "+OK - Bits mode\r\n");
 10959  005CD8  0E7A               	movlw	high STR_26
 10960  005CDA  6E1B               	movwf	?_putsUSART+1,c
 10961  005CDC  0EE5               	movlw	low STR_26
 10962  005CDE  6E1A               	movwf	?_putsUSART,c
 10963  005CE0  EC50  F011         	call	_putsUSART	;wreg free
 10964                           
 10965                           ;main.c: 517: }
 10966  005CE4  EFC5  F035         	goto	l13263
 10967  005CE8                     l12773:
 10968                           
 10969                           ; BSR set to: 3
 10970                           ;main.c: 518: else {
 10971                           ;main.c: 519: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 10972  005CE8  0E79               	movlw	high STR_27
 10973  005CEA  6E1B               	movwf	?_putsUSART+1,c
 10974  005CEC  0E48               	movlw	low STR_27
 10975  005CEE  6E1A               	movwf	?_putsUSART,c
 10976  005CF0  EC50  F011         	call	_putsUSART	;wreg free
 10977  005CF4  EFC5  F035         	goto	l13263
 10978  005CF8                     l12775:
 10979                           
 10980                           ; BSR set to: 0
 10981                           ;main.c: 524: else if ( cmdbuf == stristr(cmdbuf, "TX")) {
 10982  005CF8  0101               	movlb	1	; () banked
 10983  005CFA  0E01               	movlw	high _cmdbuf
 10984  005CFC  6E27               	movwf	?_stristr+1,c
 10985  005CFE  0E24               	movlw	low _cmdbuf
 10986  005D00  6E26               	movwf	?_stristr,c
 10987  005D02  0E7C               	movlw	high STR_28
 10988  005D04  6E29               	movwf	?_stristr+3,c
 10989  005D06  0EEA               	movlw	low STR_28
 10990  005D08  6E28               	movwf	?_stristr+2,c
 10991  005D0A  ECAB  F013         	call	_stristr	;wreg free
 10992  005D0E  ECD5  F035         	call	PL2	;call to abstracted procedure
 10993  005D12  E102               	bnz	u16785
 10994  005D14  5026               	movf	?_stristr,w,c
 10995  005D16  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10996  005D18                     u16785:
 10997  005D18  E001 D0D9          	bnz	l12829
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;main.c: 526: char *p = strtok(cmdbuf, ",");
 11001  005D1C  EC23  F036         	call	PL30	;call to abstracted procedure
 11002  005D20  ECF7  F014         	call	_strtok	;wreg free
 11003  005D24  C025  F337         	movff	?_strtok,doModeVerbose@p
 11004  005D28  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11005                           
 11006                           ;main.c: 529: vscpPriority = 3;
 11007  005D2C  0E03               	movlw	3
 11008  005D2E  0100               	movlb	0	; () banked
 11009  005D30  6FDD               	movwf	_vscpPriority& (0+255),b
 11010                           
 11011                           ; BSR set to: 0
 11012                           ;main.c: 530: if ((0) != p) {
 11013  005D32  0103               	movlb	3	; () banked
 11014  005D34  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11015  005D36  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11016  005D38  E009               	bz	l12785
 11017                           
 11018                           ; BSR set to: 3
 11019                           ;main.c: 531: vscpPriority = atoi(p);
 11020  005D3A  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11021  005D3E  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11022  005D42  EC70  F01B         	call	_atoi	;wreg free
 11023  005D46  501F               	movf	?_atoi,w,c
 11024  005D48  0100               	movlb	0	; () banked
 11025  005D4A  6FDD               	movwf	_vscpPriority& (0+255),b
 11026  005D4C                     l12785:
 11027                           
 11028                           ;main.c: 532: }
 11029                           ;main.c: 535: vscpClass = 0;
 11030  005D4C  0100               	movlb	0	; () banked
 11031  005D4E  6BDA               	clrf	_vscpClass& (0+255),b
 11032  005D50  6BDB               	clrf	(_vscpClass+1)& (0+255),b
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;main.c: 536: if ((0) != (p = strtok((0), ","))) {
 11036  005D52  ECDC  F035         	call	PL6	;call to abstracted procedure
 11037  005D56  ECF7  F014         	call	_strtok	;wreg free
 11038  005D5A  C025  F337         	movff	?_strtok,doModeVerbose@p
 11039  005D5E  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11040  005D62  0103               	movlb	3	; () banked
 11041  005D64  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11042  005D66  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11043  005D68  E00A               	bz	l12791
 11044                           
 11045                           ; BSR set to: 3
 11046                           ;main.c: 537: vscpClass = atoi(p);
 11047  005D6A  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11048  005D6E  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11049  005D72  EC70  F01B         	call	_atoi	;wreg free
 11050  005D76  C01F  F0DA         	movff	?_atoi,_vscpClass
 11051  005D7A  C020  F0DB         	movff	?_atoi+1,_vscpClass+1
 11052  005D7E                     l12791:
 11053                           
 11054                           ;main.c: 538: }
 11055                           ;main.c: 541: vscpType = 0;
 11056  005D7E  0100               	movlb	0	; () banked
 11057  005D80  6BDF               	clrf	_vscpType& (0+255),b
 11058                           
 11059                           ; BSR set to: 0
 11060                           ;main.c: 542: if ((0) != (p = strtok((0), ","))) {
 11061  005D82  ECDC  F035         	call	PL6	;call to abstracted procedure
 11062  005D86  ECF7  F014         	call	_strtok	;wreg free
 11063  005D8A  C025  F337         	movff	?_strtok,doModeVerbose@p
 11064  005D8E  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11065  005D92  0103               	movlb	3	; () banked
 11066  005D94  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11067  005D96  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11068  005D98  E009               	bz	l12797
 11069                           
 11070                           ; BSR set to: 3
 11071                           ;main.c: 543: vscpType = atoi(p);
 11072  005D9A  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11073  005D9E  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11074  005DA2  EC70  F01B         	call	_atoi	;wreg free
 11075  005DA6  501F               	movf	?_atoi,w,c
 11076  005DA8  0100               	movlb	0	; () banked
 11077  005DAA  6FDF               	movwf	_vscpType& (0+255),b
 11078  005DAC                     l12797:
 11079                           
 11080                           ;main.c: 544: }
 11081                           ;main.c: 547: vscpNodeId = 0;
 11082  005DAC  0100               	movlb	0	; () banked
 11083  005DAE  6BDC               	clrf	_vscpNodeId& (0+255),b
 11084                           
 11085                           ; BSR set to: 0
 11086                           ;main.c: 548: if ((0) != (p = strtok((0), ","))) {
 11087  005DB0  ECDC  F035         	call	PL6	;call to abstracted procedure
 11088  005DB4  ECF7  F014         	call	_strtok	;wreg free
 11089  005DB8  C025  F337         	movff	?_strtok,doModeVerbose@p
 11090  005DBC  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11091  005DC0  0103               	movlb	3	; () banked
 11092  005DC2  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11093  005DC4  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11094  005DC6  E009               	bz	l12803
 11095                           
 11096                           ; BSR set to: 3
 11097                           ;main.c: 549: vscpNodeId = atoi(p);
 11098  005DC8  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11099  005DCC  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11100  005DD0  EC70  F01B         	call	_atoi	;wreg free
 11101  005DD4  501F               	movf	?_atoi,w,c
 11102  005DD6  0100               	movlb	0	; () banked
 11103  005DD8  6FDC               	movwf	_vscpNodeId& (0+255),b
 11104  005DDA                     l12803:
 11105                           
 11106                           ;main.c: 550: }
 11107                           ;main.c: 553: vscpSize = 0;
 11108  005DDA  0100               	movlb	0	; () banked
 11109  005DDC  6BDE               	clrf	_vscpSize& (0+255),b
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;main.c: 554: if ((0) != (p = strtok((0), ","))) {
 11113  005DDE  ECDC  F035         	call	PL6	;call to abstracted procedure
 11114  005DE2  ECF7  F014         	call	_strtok	;wreg free
 11115  005DE6  C025  F337         	movff	?_strtok,doModeVerbose@p
 11116  005DEA  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11117  005DEE  0103               	movlb	3	; () banked
 11118  005DF0  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11119  005DF2  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11120  005DF4  E009               	bz	l12809
 11121                           
 11122                           ; BSR set to: 3
 11123                           ;main.c: 555: vscpSize = atoi(p);
 11124  005DF6  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11125  005DFA  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11126  005DFE  EC70  F01B         	call	_atoi	;wreg free
 11127  005E02  501F               	movf	?_atoi,w,c
 11128  005E04  0100               	movlb	0	; () banked
 11129  005E06  6FDE               	movwf	_vscpSize& (0+255),b
 11130  005E08                     l12809:
 11131                           
 11132                           ;main.c: 556: }
 11133                           ;main.c: 558: memset(vscpData, 0, 8);
 11134  005E08  0E40               	movlw	low _vscpData
 11135  005E0A  6E19               	movwf	?_memset,c
 11136  005E0C  0E00               	movlw	high _vscpData
 11137  005E0E  6E1A               	movwf	?_memset+1,c
 11138  005E10  0E0F               	movlw	15
 11139  005E12  6E1A               	movwf	?_memset+1,c
 11140  005E14  0E5F               	movlw	__accesstop+-1
 11141  005E16  6419               	cpfsgt	?_memset,c
 11142  005E18  6A1A               	clrf	?_memset+1,c
 11143  005E1A  6A1C               	clrf	?_memset+3,c
 11144  005E1C  6A1B               	clrf	?_memset+2,c
 11145  005E1E  6A1E               	clrf	?_memset+5,c
 11146  005E20  0E08               	movlw	8
 11147  005E22  6E1D               	movwf	?_memset+4,c
 11148  005E24  ECF1  F00E         	call	_memset	;wreg free
 11149                           
 11150                           ;main.c: 559: for (i = 0; i < vscpSize; i++) {
 11151  005E28  0103               	movlb	3	; () banked
 11152  005E2A  6B29               	clrf	doModeVerbose@i& (0+255),b
 11153  005E2C  D01A               	goto	l12819
 11154  005E2E                     l12813:
 11155                           
 11156                           ; BSR set to: 3
 11157                           ;main.c: 560: if ((0) != (p = strtok((0), ","))) {
 11158  005E2E  ECDC  F035         	call	PL6	;call to abstracted procedure
 11159  005E32  ECF7  F014         	call	_strtok	;wreg free
 11160  005E36  C025  F337         	movff	?_strtok,doModeVerbose@p
 11161  005E3A  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11162  005E3E  0103               	movlb	3	; () banked
 11163  005E40  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11164  005E42  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11165  005E44  E013               	bz	l12821
 11166                           
 11167                           ; BSR set to: 3
 11168                           ;main.c: 561: vscpData[ i ] = atoi(p);
 11169  005E46  5129               	movf	doModeVerbose@i& (0+255),w,b
 11170  005E48  0F40               	addlw	low _vscpData
 11171  005E4A  6ED9               	movwf	fsr2l,c
 11172  005E4C  6ADA               	clrf	fsr2h,c
 11173  005E4E  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11174  005E52  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11175  005E56  EC70  F01B         	call	_atoi	;wreg free
 11176  005E5A  501F               	movf	?_atoi,w,c
 11177  005E5C  6EDF               	movwf	indf2,c
 11178                           
 11179                           ;main.c: 562: }
 11180  005E5E  0103               	movlb	3	; () banked
 11181  005E60  2B29               	incf	doModeVerbose@i& (0+255),f,b
 11182  005E62                     l12819:
 11183                           
 11184                           ; BSR set to: 3
 11185  005E62  0100               	movlb	0	; () banked
 11186  005E64  51DE               	movf	_vscpSize& (0+255),w,b
 11187  005E66  0103               	movlb	3	; () banked
 11188  005E68  5D29               	subwf	doModeVerbose@i& (0+255),w,b
 11189  005E6A  E3E1               	bnc	l12813
 11190  005E6C                     l12821:
 11191                           
 11192                           ; BSR set to: 3
 11193                           ;main.c: 565: }
 11194                           ;main.c: 566: }
 11195                           ;main.c: 568: if ( sendVSCPFrame( vscpClass,
 11196                           ;main.c: 569: vscpType,
 11197                           ;main.c: 570: vscpNodeId,
 11198                           ;main.c: 571: vscpPriority,
 11199                           ;main.c: 572: vscpSize,
 11200                           ;main.c: 573: vscpData ) ) {
 11201  005E6C  C0DA  F083         	movff	_vscpClass,?_sendVSCPFrame
 11202  005E70  C0DB  F084         	movff	_vscpClass+1,?_sendVSCPFrame+1
 11203  005E74  C0DF  F085         	movff	_vscpType,?_sendVSCPFrame+2
 11204  005E78  C0DC  F086         	movff	_vscpNodeId,?_sendVSCPFrame+3
 11205  005E7C  C0DD  F087         	movff	_vscpPriority,?_sendVSCPFrame+4
 11206  005E80  C0DE  F088         	movff	_vscpSize,?_sendVSCPFrame+5
 11207  005E84  0E40               	movlw	low _vscpData
 11208  005E86  0100               	movlb	0	; () banked
 11209  005E88  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 11210  005E8A  ECD6  F016         	call	_sendVSCPFrame	;wreg free
 11211  005E8E  0900               	iorlw	0
 11212  005E90  E016               	bz	l12827
 11213                           
 11214                           ;main.c: 575: cntTxFrames++;
 11215  005E92  0101               	movlb	1	; () banked
 11216  005E94  2B14               	incf	_cntTxFrames& (0+255),f,b
 11217  005E96  0E00               	movlw	0
 11218  005E98  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 11219  005E9A  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 11220  005E9C  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 11221                           
 11222                           ;main.c: 576: cntTxBytes += vscpSize;
 11223  005E9E  0100               	movlb	0	; () banked
 11224  005EA0  51DE               	movf	_vscpSize& (0+255),w,b
 11225  005EA2  0101               	movlb	1	; () banked
 11226  005EA4  2710               	addwf	_cntTxBytes& (0+255),f,b
 11227  005EA6  0E00               	movlw	0
 11228  005EA8  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 11229  005EAA  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 11230  005EAC  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 11231                           
 11232                           ; BSR set to: 1
 11233                           ;main.c: 577: putsUSART((char *) "+OK\r\n");
 11234  005EAE  0E7C               	movlw	high STR_8
 11235  005EB0  6E1B               	movwf	?_putsUSART+1,c
 11236  005EB2  0E7F               	movlw	low STR_8
 11237  005EB4  6E1A               	movwf	?_putsUSART,c
 11238  005EB6  EC50  F011         	call	_putsUSART	;wreg free
 11239                           
 11240                           ;main.c: 578: }
 11241  005EBA  EFC5  F035         	goto	l13263
 11242  005EBE                     l12827:
 11243                           
 11244                           ;main.c: 579: else {
 11245                           ;main.c: 580: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 11246  005EBE  0E77               	movlw	high STR_36
 11247  005EC0  6E1B               	movwf	?_putsUSART+1,c
 11248  005EC2  0E48               	movlw	low STR_36
 11249  005EC4  6E1A               	movwf	?_putsUSART,c
 11250  005EC6  EC50  F011         	call	_putsUSART	;wreg free
 11251  005ECA  EFC5  F035         	goto	l13263
 11252  005ECE                     l12829:
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;main.c: 584: else if ( cmdbuf == stristr(cmdbuf, "RX")) {
 11256  005ECE  0101               	movlb	1	; () banked
 11257  005ED0  0E01               	movlw	high _cmdbuf
 11258  005ED2  6E27               	movwf	?_stristr+1,c
 11259  005ED4  0E24               	movlw	low _cmdbuf
 11260  005ED6  6E26               	movwf	?_stristr,c
 11261  005ED8  0E7C               	movlw	high STR_37
 11262  005EDA  6E29               	movwf	?_stristr+3,c
 11263  005EDC  0EE7               	movlw	low STR_37
 11264  005EDE  6E28               	movwf	?_stristr+2,c
 11265  005EE0  ECAB  F013         	call	_stristr	;wreg free
 11266  005EE4  ECD5  F035         	call	PL2	;call to abstracted procedure
 11267  005EE8  E102               	bnz	u16875
 11268  005EEA  5026               	movf	?_stristr,w,c
 11269  005EEC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11270  005EEE                     u16875:
 11271  005EEE  E114               	bnz	l12837
 11272                           
 11273                           ; BSR set to: 0
 11274                           ;main.c: 585: if (receivePrintEventVerbose()) {
 11275  005EF0  EC10  F025         	call	_receivePrintEventVerbose	;wreg free
 11276  005EF4  0900               	iorlw	0
 11277  005EF6  E008               	bz	l12835
 11278                           
 11279                           ;main.c: 586: putsUSART((char *) "+OK\r\n");
 11280  005EF8  0E7C               	movlw	high STR_8
 11281  005EFA  6E1B               	movwf	?_putsUSART+1,c
 11282  005EFC  0E7F               	movlw	low STR_8
 11283  005EFE  6E1A               	movwf	?_putsUSART,c
 11284  005F00  EC50  F011         	call	_putsUSART	;wreg free
 11285                           
 11286                           ;main.c: 587: }
 11287  005F04  EFC5  F035         	goto	l13263
 11288  005F08                     l12835:
 11289                           
 11290                           ;main.c: 588: else {
 11291                           ;main.c: 589: putsUSART((char *) "+OK - no events\r\n");
 11292  005F08  0E7A               	movlw	high STR_39
 11293  005F0A  6E1B               	movwf	?_putsUSART+1,c
 11294  005F0C  0EF7               	movlw	low STR_39
 11295  005F0E  6E1A               	movwf	?_putsUSART,c
 11296  005F10  EC50  F011         	call	_putsUSART	;wreg free
 11297  005F14  EFC5  F035         	goto	l13263
 11298  005F18                     l12837:
 11299                           
 11300                           ; BSR set to: 0
 11301                           ;main.c: 593: else if ( cmdbuf == stristr(cmdbuf, "STAT")) {
 11302  005F18  0101               	movlb	1	; () banked
 11303  005F1A  0E01               	movlw	high _cmdbuf
 11304  005F1C  6E27               	movwf	?_stristr+1,c
 11305  005F1E  0E24               	movlw	low _cmdbuf
 11306  005F20  6E26               	movwf	?_stristr,c
 11307  005F22  0E7C               	movlw	high STR_40
 11308  005F24  6E29               	movwf	?_stristr+3,c
 11309  005F26  0ECA               	movlw	low STR_40
 11310  005F28  6E28               	movwf	?_stristr+2,c
 11311  005F2A  ECAB  F013         	call	_stristr	;wreg free
 11312  005F2E  ECD5  F035         	call	PL2	;call to abstracted procedure
 11313  005F32  E102               	bnz	u16895
 11314  005F34  5026               	movf	?_stristr,w,c
 11315  005F36  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11316  005F38                     u16895:
 11317  005F38  E104               	bnz	l12841
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;main.c: 594: printStatistics();
 11321  005F3A  EC8F  F021         	call	_printStatistics	;wreg free
 11322                           
 11323                           ;main.c: 595: }
 11324  005F3E  EFC5  F035         	goto	l13263
 11325  005F42                     l12841:
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;main.c: 597: else if ( cmdbuf == stristr(cmdbuf, "ERR")) {
 11329  005F42  0101               	movlb	1	; () banked
 11330  005F44  0E01               	movlw	high _cmdbuf
 11331  005F46  6E27               	movwf	?_stristr+1,c
 11332  005F48  0E24               	movlw	low _cmdbuf
 11333  005F4A  6E26               	movwf	?_stristr,c
 11334  005F4C  0E7C               	movlw	high STR_41
 11335  005F4E  6E29               	movwf	?_stristr+3,c
 11336  005F50  0ED8               	movlw	low STR_41
 11337  005F52  6E28               	movwf	?_stristr+2,c
 11338  005F54  ECAB  F013         	call	_stristr	;wreg free
 11339  005F58  ECD5  F035         	call	PL2	;call to abstracted procedure
 11340  005F5C  E102               	bnz	u16905
 11341  005F5E  5026               	movf	?_stristr,w,c
 11342  005F60  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11343  005F62                     u16905:
 11344  005F62  E104               	bnz	l12845
 11345                           
 11346                           ; BSR set to: 0
 11347                           ;main.c: 598: printErrors();
 11348  005F64  EC4B  F026         	call	_printErrors	;wreg free
 11349                           
 11350                           ;main.c: 599: }
 11351  005F68  EFC5  F035         	goto	l13263
 11352  005F6C                     l12845:
 11353                           
 11354                           ; BSR set to: 0
 11355                           ;main.c: 601: else if ( cmdbuf == stristr(cmdbuf, "HELP")) {
 11356  005F6C  0101               	movlb	1	; () banked
 11357  005F6E  0E01               	movlw	high _cmdbuf
 11358  005F70  6E27               	movwf	?_stristr+1,c
 11359  005F72  0E24               	movlw	low _cmdbuf
 11360  005F74  6E26               	movwf	?_stristr,c
 11361  005F76  0E7C               	movlw	high STR_42
 11362  005F78  6E29               	movwf	?_stristr+3,c
 11363  005F7A  0EC5               	movlw	low STR_42
 11364  005F7C  6E28               	movwf	?_stristr+2,c
 11365  005F7E  ECAB  F013         	call	_stristr	;wreg free
 11366  005F82  ECD5  F035         	call	PL2	;call to abstracted procedure
 11367  005F86  E102               	bnz	u16915
 11368  005F88  5026               	movf	?_stristr,w,c
 11369  005F8A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11370  005F8C                     u16915:
 11371  005F8C  E10A               	bnz	l12849
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;main.c: 602: printHelp();
 11375  005F8E  ECCF  F020         	call	_printHelp	;wreg free
 11376                           
 11377                           ;main.c: 603: putsUSART((char *) "+OK\r\n");
 11378  005F92  0E7C               	movlw	high STR_8
 11379  005F94  6E1B               	movwf	?_putsUSART+1,c
 11380  005F96  0E7F               	movlw	low STR_8
 11381  005F98  6E1A               	movwf	?_putsUSART,c
 11382  005F9A  EC50  F011         	call	_putsUSART	;wreg free
 11383                           
 11384                           ;main.c: 604: }
 11385  005F9E  EFC5  F035         	goto	l13263
 11386  005FA2                     l12849:
 11387                           
 11388                           ; BSR set to: 0
 11389                           ;main.c: 606: else if ( cmdbuf == stristr(cmdbuf, "FIND")) {
 11390  005FA2  0101               	movlb	1	; () banked
 11391  005FA4  0E01               	movlw	high _cmdbuf
 11392  005FA6  6E27               	movwf	?_stristr+1,c
 11393  005FA8  0E24               	movlw	low _cmdbuf
 11394  005FAA  6E26               	movwf	?_stristr,c
 11395  005FAC  0E7C               	movlw	high STR_44
 11396  005FAE  6E29               	movwf	?_stristr+3,c
 11397  005FB0  0EA2               	movlw	low STR_44
 11398  005FB2  6E28               	movwf	?_stristr+2,c
 11399  005FB4  ECAB  F013         	call	_stristr	;wreg free
 11400  005FB8  ECD5  F035         	call	PL2	;call to abstracted procedure
 11401  005FBC  E102               	bnz	u16925
 11402  005FBE  5026               	movf	?_stristr,w,c
 11403  005FC0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11404  005FC2                     u16925:
 11405  005FC2  E104               	bnz	l12853
 11406                           
 11407                           ; BSR set to: 0
 11408                           ;main.c: 607: findNodes();
 11409  005FC4  EC13  F01A         	call	_findNodes	;wreg free
 11410                           
 11411                           ;main.c: 608: }
 11412  005FC8  EFC5  F035         	goto	l13263
 11413  005FCC                     l12853:
 11414                           
 11415                           ; BSR set to: 0
 11416                           ;main.c: 611: else if ( cmdbuf == stristr(cmdbuf, "RREG")) {
 11417  005FCC  0101               	movlb	1	; () banked
 11418  005FCE  0E01               	movlw	high _cmdbuf
 11419  005FD0  6E27               	movwf	?_stristr+1,c
 11420  005FD2  0E24               	movlw	low _cmdbuf
 11421  005FD4  6E26               	movwf	?_stristr,c
 11422  005FD6  0E7C               	movlw	high STR_45
 11423  005FD8  6E29               	movwf	?_stristr+3,c
 11424  005FDA  0EA7               	movlw	low STR_45
 11425  005FDC  6E28               	movwf	?_stristr+2,c
 11426  005FDE  ECAB  F013         	call	_stristr	;wreg free
 11427  005FE2  ECD5  F035         	call	PL2	;call to abstracted procedure
 11428  005FE6  E102               	bnz	u16935
 11429  005FE8  5026               	movf	?_stristr,w,c
 11430  005FEA  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11431  005FEC                     u16935:
 11432  005FEC  E001 D1AB          	bnz	l12983
 11433                           
 11434                           ; BSR set to: 0
 11435                           ;main.c: 613: uint8_t i;
 11436                           ;main.c: 614: uint8_t nodeid;
 11437                           ;main.c: 615: uint8_t page = 0;
 11438  005FF0  0103               	movlb	3	; () banked
 11439  005FF2  6B2D               	clrf	doModeVerbose@page& (0+255),b
 11440                           
 11441                           ; BSR set to: 3
 11442                           ;main.c: 616: uint8_t reg;
 11443                           ;main.c: 617: uint8_t value;
 11444                           ;main.c: 618: uint8_t count = 1;
 11445  005FF4  0E01               	movlw	1
 11446  005FF6  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11447                           
 11448                           ; BSR set to: 3
 11449                           ;main.c: 620: strcpy(cmdbuf, cmdbuf + 5);
 11450  005FF8  EC08  F036         	call	PL10	;call to abstracted procedure
 11451  005FFC  EC07  F00F         	call	_strcpy	;wreg free
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;main.c: 621: char *p = strtok(cmdbuf, " ");
 11455  006000  0101               	movlb	1	; () banked
 11456  006002  EC2D  F036         	call	PL34	;call to abstracted procedure
 11457  006006  ECF7  F014         	call	_strtok	;wreg free
 11458  00600A  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11459  00600E  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11460                           
 11461                           ;main.c: 622: if ((0) != p) {
 11462  006012  0103               	movlb	3	; () banked
 11463  006014  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11464  006016  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11465  006018  E00A               	bz	l12867
 11466                           
 11467                           ; BSR set to: 3
 11468                           ;main.c: 623: nodeid = atoi(p);
 11469  00601A  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11470  00601E  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11471  006022  EC70  F01B         	call	_atoi	;wreg free
 11472  006026  501F               	movf	?_atoi,w,c
 11473  006028  0103               	movlb	3	; () banked
 11474  00602A  6F0C               	movwf	doModeVerbose@nodeid& (0+255),b
 11475                           
 11476                           ;main.c: 624: }
 11477  00602C  D008               	goto	l12871
 11478  00602E                     l12867:
 11479                           
 11480                           ; BSR set to: 3
 11481                           ;main.c: 625: else {
 11482                           ;main.c: 626: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11483  00602E  0E79               	movlw	high STR_47
 11484  006030  6E1B               	movwf	?_putsUSART+1,c
 11485  006032  0E30               	movlw	low STR_47
 11486  006034  6E1A               	movwf	?_putsUSART,c
 11487  006036  EC50  F011         	call	_putsUSART	;wreg free
 11488  00603A  EFD4  F035         	goto	l491
 11489  00603E                     l12871:
 11490                           
 11491                           ; BSR set to: 3
 11492                           ;main.c: 628: }
 11493                           ;main.c: 630: if ((0) != (p = strtok((0), " "))) {
 11494  00603E  EC36  F036         	call	PL36	;call to abstracted procedure
 11495  006042  ECF7  F014         	call	_strtok	;wreg free
 11496  006046  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11497  00604A  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11498  00604E  0103               	movlb	3	; () banked
 11499  006050  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11500  006052  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11501  006054  E033               	bz	l12879
 11502                           
 11503                           ; BSR set to: 3
 11504                           ;main.c: 632: char *preg;
 11505                           ;main.c: 633: if (preg = strchr(p, ':')) {
 11506  006056  C332  F019         	movff	doModeVerbose@p_1070,?_strchr
 11507  00605A  C333  F01A         	movff	doModeVerbose@p_1070+1,?_strchr+1
 11508  00605E  6A1C               	clrf	?_strchr+3,c
 11509  006060  0E3A               	movlw	58
 11510  006062  6E1B               	movwf	?_strchr+2,c
 11511  006064  ECFE  F011         	call	_strchr	;wreg free
 11512  006068  C019  F304         	movff	?_strchr,doModeVerbose@preg
 11513  00606C  C01A  F305         	movff	?_strchr+1,doModeVerbose@preg+1
 11514  006070  0103               	movlb	3	; () banked
 11515  006072  5105               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 11516  006074  1104               	iorwf	doModeVerbose@preg& (0+255),w,b
 11517  006076  E018               	bz	l12877
 11518                           
 11519                           ; BSR set to: 3
 11520                           ;main.c: 634: page = atoi(p);
 11521  006078  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11522  00607C  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11523  006080  EC70  F01B         	call	_atoi	;wreg free
 11524  006084  501F               	movf	?_atoi,w,c
 11525  006086  0103               	movlb	3	; () banked
 11526  006088  6F2D               	movwf	doModeVerbose@page& (0+255),b
 11527                           
 11528                           ;main.c: 635: reg = atoi(preg + 1);
 11529  00608A  2904               	incf	doModeVerbose@preg& (0+255),w,b
 11530  00608C  0100               	movlb	0	; () banked
 11531  00608E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 11532  006090  0E00               	movlw	0
 11533  006092  0103               	movlb	3	; () banked
 11534  006094  2105               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 11535  006096  0100               	movlb	0	; () banked
 11536  006098  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 11537  00609A  C0B2  F01F         	movff	??_doModeVerbose,?_atoi
 11538  00609E  C0B3  F020         	movff	??_doModeVerbose+1,?_atoi+1
 11539  0060A2  EC70  F01B         	call	_atoi	;wreg free
 11540  0060A6  D006               	goto	L5
 11541  0060A8                     l12877:
 11542                           
 11543                           ; BSR set to: 3
 11544                           ;main.c: 637: else {
 11545                           ;main.c: 638: reg = atoi(p);
 11546  0060A8  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11547  0060AC  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11548  0060B0  EC70  F01B         	call	_atoi	;wreg free
 11549  0060B4                     L5:
 11550  0060B4  501F               	movf	?_atoi,w,c
 11551  0060B6  0103               	movlb	3	; () banked
 11552  0060B8  6F2E               	movwf	doModeVerbose@reg& (0+255),b
 11553  0060BA  D008               	goto	l12883
 11554  0060BC                     l12879:
 11555                           
 11556                           ; BSR set to: 3
 11557                           ;main.c: 643: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 11558  0060BC  0E77               	movlw	high STR_49
 11559  0060BE  6E1B               	movwf	?_putsUSART+1,c
 11560  0060C0  0EAB               	movlw	low STR_49
 11561  0060C2  6E1A               	movwf	?_putsUSART,c
 11562  0060C4  EC50  F011         	call	_putsUSART	;wreg free
 11563  0060C8  EFD4  F035         	goto	l491
 11564  0060CC                     l12883:
 11565                           
 11566                           ; BSR set to: 3
 11567                           ;main.c: 645: }
 11568                           ;main.c: 648: if ((0) != (p = strtok((0), " "))) {
 11569  0060CC  EC36  F036         	call	PL36	;call to abstracted procedure
 11570  0060D0  ECF7  F014         	call	_strtok	;wreg free
 11571  0060D4  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11572  0060D8  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11573  0060DC  0103               	movlb	3	; () banked
 11574  0060DE  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11575  0060E0  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11576  0060E2  E00D               	bz	l496
 11577                           
 11578                           ; BSR set to: 3
 11579                           ;main.c: 649: count = atoi(p);
 11580  0060E4  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11581  0060E8  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11582  0060EC  EC70  F01B         	call	_atoi	;wreg free
 11583  0060F0  501F               	movf	?_atoi,w,c
 11584  0060F2  0103               	movlb	3	; () banked
 11585  0060F4  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11586                           
 11587                           ; BSR set to: 3
 11588                           ;main.c: 650: if (0 == count) count = 1;
 11589  0060F6  672B               	tstfsz	doModeVerbose@count& (0+255),b
 11590  0060F8  D002               	goto	l496
 11591                           
 11592                           ; BSR set to: 3
 11593  0060FA  0E01               	movlw	1
 11594  0060FC  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11595  0060FE                     l496:
 11596                           
 11597                           ; BSR set to: 3
 11598                           ;main.c: 651: }
 11599                           ;main.c: 653: BOOL rv = 1;
 11600  0060FE  0E01               	movlw	1
 11601  006100  6F20               	movwf	doModeVerbose@rv& (0+255),b
 11602                           
 11603                           ; BSR set to: 3
 11604                           ;main.c: 654: for (i = 0; i < count; i++) {
 11605  006102  6B30               	clrf	doModeVerbose@i_1064& (0+255),b
 11606  006104  D10A               	goto	l12975
 11607  006106                     l12893:
 11608                           
 11609                           ; BSR set to: 3
 11610                           ;main.c: 656: if ( readRegisterExtended(nodeid,
 11611                           ;main.c: 657: page,
 11612                           ;main.c: 658: (reg + i) & 0xff,
 11613                           ;main.c: 659: rwtimeout,
 11614                           ;main.c: 660: &value)) {
 11615  006106  0100               	movlb	0	; () banked
 11616  006108  C32D  F09E         	movff	doModeVerbose@page,?_readRegisterExtended
 11617  00610C  6B9F               	clrf	(?_readRegisterExtended+1)& (0+255),b
 11618  00610E  0103               	movlb	3	; () banked
 11619  006110  512E               	movf	doModeVerbose@reg& (0+255),w,b
 11620  006112  2530               	addwf	doModeVerbose@i_1064& (0+255),w,b
 11621  006114  0100               	movlb	0	; () banked
 11622  006116  6FA0               	movwf	(?_readRegisterExtended+2)& (0+255),b
 11623  006118  C0D9  F0A1         	movff	_rwtimeout,?_readRegisterExtended+3
 11624  00611C  6BA2               	clrf	(?_readRegisterExtended+4)& (0+255),b
 11625  00611E  0E03               	movlw	high doModeVerbose@value
 11626  006120  6FA4               	movwf	(?_readRegisterExtended+6)& (0+255),b
 11627  006122  0E31               	movlw	low doModeVerbose@value
 11628  006124  6FA3               	movwf	(?_readRegisterExtended+5)& (0+255),b
 11629  006126  0103               	movlb	3	; () banked
 11630  006128  510C               	movf	doModeVerbose@nodeid& (0+255),w,b
 11631  00612A  EC63  F018         	call	_readRegisterExtended
 11632  00612E  0900               	iorlw	0
 11633  006130  E101 D09B          	bz	l500
 11634                           
 11635                           ;main.c: 661: putsUSART((char *) "Value for reg ");
 11636  006134  0E7B               	movlw	high STR_51
 11637  006136  6E1B               	movwf	?_putsUSART+1,c
 11638  006138  0E5D               	movlw	low STR_51
 11639  00613A  6E1A               	movwf	?_putsUSART,c
 11640  00613C  EC50  F011         	call	_putsUSART	;wreg free
 11641                           
 11642                           ;main.c: 662: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", page );
 11643  006140  0100               	movlb	0	; () banked
 11644  006142  67D3               	tstfsz	_bHex& (0+255),b
 11645  006144  D005               	goto	l12901
 11646                           
 11647                           ; BSR set to: 0
 11648  006146  0E7C               	movlw	high STR_53
 11649  006148  0103               	movlb	3	; () banked
 11650  00614A  6F15               	movwf	(_doModeVerbose$1082+1)& (0+255),b
 11651  00614C  0EED               	movlw	low STR_53
 11652  00614E  D004               	goto	L6
 11653  006150                     l12901:
 11654                           
 11655                           ; BSR set to: 0
 11656  006150  0E7C               	movlw	high STR_52
 11657  006152  0103               	movlb	3	; () banked
 11658  006154  6F15               	movwf	(_doModeVerbose$1082+1)& (0+255),b
 11659  006156  0E64               	movlw	low STR_52
 11660  006158                     L6:
 11661  006158  6F14               	movwf	_doModeVerbose$1082& (0+255),b
 11662                           
 11663                           ; BSR set to: 3
 11664  00615A  0E01               	movlw	high _wrkbuf
 11665  00615C  0100               	movlb	0	; () banked
 11666  00615E  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11667  006160  0E74               	movlw	low _wrkbuf
 11668  006162  6F60               	movwf	?_sprintf& (0+255),b
 11669  006164  C314  F062         	movff	_doModeVerbose$1082,?_sprintf+2
 11670  006168  C315  F063         	movff	_doModeVerbose$1082+1,?_sprintf+3
 11671  00616C  C32D  F064         	movff	doModeVerbose@page,?_sprintf+4
 11672  006170  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11673  006172  EC65  F029         	call	_sprintf	;wreg free
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;main.c: 663: putsUSART(wrkbuf);
 11677  006176  0101               	movlb	1	; () banked
 11678  006178  0E01               	movlw	high _wrkbuf
 11679  00617A  6E1B               	movwf	?_putsUSART+1,c
 11680  00617C  0E74               	movlw	low _wrkbuf
 11681  00617E  6E1A               	movwf	?_putsUSART,c
 11682  006180  EC50  F011         	call	_putsUSART	;wreg free
 11683  006184                     l505:
 11684  006184  A2AC               	btfss	4012,1,c	;volatile
 11685  006186  D7FE               	goto	l505
 11686                           
 11687                           ;main.c: 665: WriteUSART(':');
 11688  006188  0E3A               	movlw	58
 11689  00618A  EC90  F00E         	call	_WriteUSART
 11690                           
 11691                           ;main.c: 666: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff );
 11692  00618E  0100               	movlb	0	; () banked
 11693  006190  67D3               	tstfsz	_bHex& (0+255),b
 11694  006192  D005               	goto	l12913
 11695                           
 11696                           ; BSR set to: 0
 11697  006194  0E7C               	movlw	high STR_53
 11698  006196  0103               	movlb	3	; () banked
 11699  006198  6F17               	movwf	(_doModeVerbose$1094+1)& (0+255),b
 11700  00619A  0EED               	movlw	low STR_53
 11701  00619C  D004               	goto	L7
 11702  00619E                     l12913:
 11703                           
 11704                           ; BSR set to: 0
 11705  00619E  0E7C               	movlw	high STR_52
 11706  0061A0  0103               	movlb	3	; () banked
 11707  0061A2  6F17               	movwf	(_doModeVerbose$1094+1)& (0+255),b
 11708  0061A4  0E64               	movlw	low STR_52
 11709  0061A6                     L7:
 11710  0061A6  6F16               	movwf	_doModeVerbose$1094& (0+255),b
 11711                           
 11712                           ; BSR set to: 3
 11713  0061A8  0E01               	movlw	high _wrkbuf
 11714  0061AA  0100               	movlb	0	; () banked
 11715  0061AC  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11716  0061AE  0E74               	movlw	low _wrkbuf
 11717  0061B0  6F60               	movwf	?_sprintf& (0+255),b
 11718  0061B2  C316  F062         	movff	_doModeVerbose$1094,?_sprintf+2
 11719  0061B6  C317  F063         	movff	_doModeVerbose$1094+1,?_sprintf+3
 11720  0061BA  EC3D  F036         	call	PL40	;call to abstracted procedure
 11721  0061BE  EC65  F029         	call	_sprintf	;wreg free
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;main.c: 667: putsUSART(wrkbuf);
 11725  0061C2  0101               	movlb	1	; () banked
 11726  0061C4  0E01               	movlw	high _wrkbuf
 11727  0061C6  6E1B               	movwf	?_putsUSART+1,c
 11728  0061C8  0E74               	movlw	low _wrkbuf
 11729  0061CA  6E1A               	movwf	?_putsUSART,c
 11730  0061CC  EC50  F011         	call	_putsUSART	;wreg free
 11731                           
 11732                           ;main.c: 668: putsUSART((char *) " = ");
 11733  0061D0  0E7B               	movlw	high (STR_234+4)
 11734  0061D2  6E1B               	movwf	?_putsUSART+1,c
 11735  0061D4  0EE9               	movlw	low (STR_234+4)
 11736  0061D6  6E1A               	movwf	?_putsUSART,c
 11737  0061D8  EC50  F011         	call	_putsUSART	;wreg free
 11738                           
 11739                           ;main.c: 669: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", value );
 11740  0061DC  0100               	movlb	0	; () banked
 11741  0061DE  67D3               	tstfsz	_bHex& (0+255),b
 11742  0061E0  D005               	goto	l12925
 11743                           
 11744                           ; BSR set to: 0
 11745  0061E2  0E7C               	movlw	high STR_53
 11746  0061E4  0103               	movlb	3	; () banked
 11747  0061E6  6F19               	movwf	(_doModeVerbose$1099+1)& (0+255),b
 11748  0061E8  0EED               	movlw	low STR_53
 11749  0061EA  D004               	goto	L8
 11750  0061EC                     l12925:
 11751                           
 11752                           ; BSR set to: 0
 11753  0061EC  0E7C               	movlw	high STR_52
 11754  0061EE  0103               	movlb	3	; () banked
 11755  0061F0  6F19               	movwf	(_doModeVerbose$1099+1)& (0+255),b
 11756  0061F2  0E64               	movlw	low STR_52
 11757  0061F4                     L8:
 11758  0061F4  6F18               	movwf	_doModeVerbose$1099& (0+255),b
 11759                           
 11760                           ; BSR set to: 3
 11761  0061F6  0E01               	movlw	high _wrkbuf
 11762  0061F8  0100               	movlb	0	; () banked
 11763  0061FA  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11764  0061FC  0E74               	movlw	low _wrkbuf
 11765  0061FE  6F60               	movwf	?_sprintf& (0+255),b
 11766  006200  C318  F062         	movff	_doModeVerbose$1099,?_sprintf+2
 11767  006204  C319  F063         	movff	_doModeVerbose$1099+1,?_sprintf+3
 11768  006208  C331  F064         	movff	doModeVerbose@value,?_sprintf+4
 11769  00620C  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11770  00620E  EC65  F029         	call	_sprintf	;wreg free
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;main.c: 670: putsUSART(wrkbuf);
 11774  006212  0101               	movlb	1	; () banked
 11775  006214  0E01               	movlw	high _wrkbuf
 11776  006216  6E1B               	movwf	?_putsUSART+1,c
 11777  006218  0E74               	movlw	low _wrkbuf
 11778  00621A  6E1A               	movwf	?_putsUSART,c
 11779  00621C  EC50  F011         	call	_putsUSART	;wreg free
 11780  006220                     l516:
 11781  006220  A2AC               	btfss	4012,1,c	;volatile
 11782  006222  D7FE               	goto	l516
 11783                           
 11784                           ;main.c: 672: WriteUSART(' ');
 11785  006224  0E20               	movlw	32
 11786  006226  EC90  F00E         	call	_WriteUSART
 11787  00622A                     l519:
 11788  00622A  A2AC               	btfss	4012,1,c	;volatile
 11789  00622C  D7FE               	goto	l519
 11790                           
 11791                           ;main.c: 674: if ((value > 32) && (value < 127)) {
 11792  00622E  0E20               	movlw	32
 11793  006230  0103               	movlb	3	; () banked
 11794  006232  6531               	cpfsgt	doModeVerbose@value& (0+255),b
 11795  006234  D007               	goto	l12939
 11796                           
 11797                           ; BSR set to: 3
 11798  006236  0E7F               	movlw	127
 11799  006238  6131               	cpfslt	doModeVerbose@value& (0+255),b
 11800  00623A  D004               	goto	l12939
 11801                           
 11802                           ; BSR set to: 3
 11803                           ;main.c: 675: WriteUSART(value);
 11804  00623C  5131               	movf	doModeVerbose@value& (0+255),w,b
 11805  00623E  EC90  F00E         	call	_WriteUSART
 11806                           
 11807                           ;main.c: 676: }
 11808  006242  D003               	goto	l524
 11809  006244                     l12939:
 11810                           
 11811                           ; BSR set to: 3
 11812                           ;main.c: 677: else {
 11813                           ;main.c: 678: WriteUSART('.');
 11814  006244  0E2E               	movlw	46
 11815  006246  EC90  F00E         	call	_WriteUSART
 11816  00624A                     l524:
 11817  00624A  A2AC               	btfss	4012,1,c	;volatile
 11818  00624C  D7FE               	goto	l524
 11819                           
 11820                           ;main.c: 681: WriteUSART(' ');
 11821  00624E  0E20               	movlw	32
 11822  006250  EC90  F00E         	call	_WriteUSART
 11823                           
 11824                           ;main.c: 682: printBinary(value);
 11825  006254  0103               	movlb	3	; () banked
 11826  006256  5131               	movf	doModeVerbose@value& (0+255),w,b
 11827  006258  ECE1  F010         	call	_printBinary
 11828                           
 11829                           ;main.c: 683: putsUSART((char *) "\r\n");
 11830  00625C  0E71               	movlw	high (STR_188+50)
 11831  00625E  6E1B               	movwf	?_putsUSART+1,c
 11832  006260  0EB2               	movlw	low (STR_188+50)
 11833  006262  6E1A               	movwf	?_putsUSART,c
 11834  006264  EC50  F011         	call	_putsUSART	;wreg free
 11835                           
 11836                           ;main.c: 684: }
 11837  006268  D056               	goto	l12973
 11838  00626A                     l500:
 11839                           
 11840                           ;main.c: 685: else {
 11841                           ;main.c: 686: rv = 0;
 11842  00626A  0103               	movlb	3	; () banked
 11843  00626C  6B20               	clrf	doModeVerbose@rv& (0+255),b
 11844                           
 11845                           ; BSR set to: 3
 11846                           ;main.c: 687: putsUSART((char *) "-ERROR - Unable to read register ");
 11847  00626E  0E77               	movlw	high STR_60
 11848  006270  6E1B               	movwf	?_putsUSART+1,c
 11849  006272  0E05               	movlw	low STR_60
 11850  006274  6E1A               	movwf	?_putsUSART,c
 11851  006276  EC50  F011         	call	_putsUSART	;wreg free
 11852                           
 11853                           ;main.c: 688: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", page );
 11854  00627A  0100               	movlb	0	; () banked
 11855  00627C  67D3               	tstfsz	_bHex& (0+255),b
 11856  00627E  D005               	goto	l12953
 11857                           
 11858                           ; BSR set to: 0
 11859  006280  0E7C               	movlw	high STR_53
 11860  006282  0103               	movlb	3	; () banked
 11861  006284  6F1B               	movwf	(_doModeVerbose$1105+1)& (0+255),b
 11862  006286  0EED               	movlw	low STR_53
 11863  006288  D004               	goto	L9
 11864  00628A                     l12953:
 11865                           
 11866                           ; BSR set to: 0
 11867  00628A  0E7C               	movlw	high STR_52
 11868  00628C  0103               	movlb	3	; () banked
 11869  00628E  6F1B               	movwf	(_doModeVerbose$1105+1)& (0+255),b
 11870  006290  0E64               	movlw	low STR_52
 11871  006292                     L9:
 11872  006292  6F1A               	movwf	_doModeVerbose$1105& (0+255),b
 11873                           
 11874                           ; BSR set to: 3
 11875  006294  0E01               	movlw	high _wrkbuf
 11876  006296  0100               	movlb	0	; () banked
 11877  006298  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11878  00629A  0E74               	movlw	low _wrkbuf
 11879  00629C  6F60               	movwf	?_sprintf& (0+255),b
 11880  00629E  C31A  F062         	movff	_doModeVerbose$1105,?_sprintf+2
 11881  0062A2  C31B  F063         	movff	_doModeVerbose$1105+1,?_sprintf+3
 11882  0062A6  C32D  F064         	movff	doModeVerbose@page,?_sprintf+4
 11883  0062AA  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11884  0062AC  EC65  F029         	call	_sprintf	;wreg free
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;main.c: 689: putsUSART(wrkbuf);
 11888  0062B0  0101               	movlb	1	; () banked
 11889  0062B2  0E01               	movlw	high _wrkbuf
 11890  0062B4  6E1B               	movwf	?_putsUSART+1,c
 11891  0062B6  0E74               	movlw	low _wrkbuf
 11892  0062B8  6E1A               	movwf	?_putsUSART,c
 11893  0062BA  EC50  F011         	call	_putsUSART	;wreg free
 11894  0062BE                     l532:
 11895  0062BE  A2AC               	btfss	4012,1,c	;volatile
 11896  0062C0  D7FE               	goto	l532
 11897                           
 11898                           ;main.c: 691: WriteUSART(':');
 11899  0062C2  0E3A               	movlw	58
 11900  0062C4  EC90  F00E         	call	_WriteUSART
 11901                           
 11902                           ;main.c: 692: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff );
 11903  0062C8  0100               	movlb	0	; () banked
 11904  0062CA  67D3               	tstfsz	_bHex& (0+255),b
 11905  0062CC  D005               	goto	l12965
 11906                           
 11907                           ; BSR set to: 0
 11908  0062CE  0E7C               	movlw	high STR_53
 11909  0062D0  0103               	movlb	3	; () banked
 11910  0062D2  6F1D               	movwf	(_doModeVerbose$1109+1)& (0+255),b
 11911  0062D4  0EED               	movlw	low STR_53
 11912  0062D6  D004               	goto	L10
 11913  0062D8                     l12965:
 11914                           
 11915                           ; BSR set to: 0
 11916  0062D8  0E7C               	movlw	high STR_52
 11917  0062DA  0103               	movlb	3	; () banked
 11918  0062DC  6F1D               	movwf	(_doModeVerbose$1109+1)& (0+255),b
 11919  0062DE  0E64               	movlw	low STR_52
 11920  0062E0                     L10:
 11921  0062E0  6F1C               	movwf	_doModeVerbose$1109& (0+255),b
 11922                           
 11923                           ; BSR set to: 3
 11924  0062E2  0E01               	movlw	high _wrkbuf
 11925  0062E4  0100               	movlb	0	; () banked
 11926  0062E6  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11927  0062E8  0E74               	movlw	low _wrkbuf
 11928  0062EA  6F60               	movwf	?_sprintf& (0+255),b
 11929  0062EC  C31C  F062         	movff	_doModeVerbose$1109,?_sprintf+2
 11930  0062F0  C31D  F063         	movff	_doModeVerbose$1109+1,?_sprintf+3
 11931  0062F4  EC3D  F036         	call	PL40	;call to abstracted procedure
 11932  0062F8  EC65  F029         	call	_sprintf	;wreg free
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;main.c: 693: putsUSART(wrkbuf);
 11936  0062FC  0101               	movlb	1	; () banked
 11937  0062FE  0E01               	movlw	high _wrkbuf
 11938  006300  6E1B               	movwf	?_putsUSART+1,c
 11939  006302  0E74               	movlw	low _wrkbuf
 11940  006304  6E1A               	movwf	?_putsUSART,c
 11941  006306  EC50  F011         	call	_putsUSART	;wreg free
 11942                           
 11943                           ;main.c: 694: putsUSART((char *) "\r\n");
 11944  00630A  0E71               	movlw	high (STR_188+50)
 11945  00630C  6E1B               	movwf	?_putsUSART+1,c
 11946  00630E  0EB2               	movlw	low (STR_188+50)
 11947  006310  6E1A               	movwf	?_putsUSART,c
 11948  006312  EC50  F011         	call	_putsUSART	;wreg free
 11949  006316                     l12973:
 11950  006316  0103               	movlb	3	; () banked
 11951  006318  2B30               	incf	doModeVerbose@i_1064& (0+255),f,b
 11952  00631A                     l12975:
 11953                           
 11954                           ; BSR set to: 3
 11955  00631A  512B               	movf	doModeVerbose@count& (0+255),w,b
 11956  00631C  5D30               	subwf	doModeVerbose@i_1064& (0+255),w,b
 11957  00631E  E201 D6F2          	bnc	l12893
 11958                           
 11959                           ; BSR set to: 3
 11960                           ;main.c: 695: }
 11961                           ;main.c: 696: }
 11962                           ;main.c: 698: if (rv) {
 11963  006322  5120               	movf	doModeVerbose@rv& (0+255),w,b
 11964  006324  E008               	bz	l12981
 11965                           
 11966                           ; BSR set to: 3
 11967                           ;main.c: 699: putsUSART((char *) "+OK\r\n");
 11968  006326  0E7C               	movlw	high STR_8
 11969  006328  6E1B               	movwf	?_putsUSART+1,c
 11970  00632A  0E7F               	movlw	low STR_8
 11971  00632C  6E1A               	movwf	?_putsUSART,c
 11972  00632E  EC50  F011         	call	_putsUSART	;wreg free
 11973                           
 11974                           ;main.c: 700: }
 11975  006332  EFC5  F035         	goto	l13263
 11976  006336                     l12981:
 11977                           
 11978                           ; BSR set to: 3
 11979                           ;main.c: 701: else {
 11980                           ;main.c: 702: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 11981  006336  0E71               	movlw	high STR_67
 11982  006338  6E1B               	movwf	?_putsUSART+1,c
 11983  00633A  0E4A               	movlw	low STR_67
 11984  00633C  6E1A               	movwf	?_putsUSART,c
 11985  00633E  EC50  F011         	call	_putsUSART	;wreg free
 11986  006342  EFC5  F035         	goto	l13263
 11987  006346                     l12983:
 11988                           
 11989                           ; BSR set to: 0
 11990                           ;main.c: 708: else if ( cmdbuf == stristr(cmdbuf, "WREG")) {
 11991  006346  0101               	movlb	1	; () banked
 11992  006348  0E01               	movlw	high _cmdbuf
 11993  00634A  6E27               	movwf	?_stristr+1,c
 11994  00634C  0E24               	movlw	low _cmdbuf
 11995  00634E  6E26               	movwf	?_stristr,c
 11996  006350  0E7C               	movlw	high STR_68
 11997  006352  6E29               	movwf	?_stristr+3,c
 11998  006354  0EAC               	movlw	low STR_68
 11999  006356  6E28               	movwf	?_stristr+2,c
 12000  006358  ECAB  F013         	call	_stristr	;wreg free
 12001  00635C  ECD5  F035         	call	PL2	;call to abstracted procedure
 12002  006360  E102               	bnz	u17145
 12003  006362  5026               	movf	?_stristr,w,c
 12004  006364  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12005  006366                     u17145:
 12006  006366  E001 D0A8          	bnz	l13025
 12007                           
 12008                           ; BSR set to: 0
 12009                           ;main.c: 710: uint8_t nodeid;
 12010                           ;main.c: 711: uint8_t page = 0;
 12011  00636A  0103               	movlb	3	; () banked
 12012  00636C  6B21               	clrf	doModeVerbose@page_1115& (0+255),b
 12013                           
 12014                           ; BSR set to: 3
 12015                           ;main.c: 712: uint8_t reg;
 12016                           ;main.c: 713: uint8_t value;
 12017                           ;main.c: 715: strcpy( cmdbuf, cmdbuf + 5);
 12018  00636E  EC08  F036         	call	PL10	;call to abstracted procedure
 12019  006372  EC07  F00F         	call	_strcpy	;wreg free
 12020                           
 12021                           ; BSR set to: 0
 12022                           ;main.c: 716: char *p = strtok(cmdbuf, " ");
 12023  006376  0101               	movlb	1	; () banked
 12024  006378  EC2D  F036         	call	PL34	;call to abstracted procedure
 12025  00637C  ECF7  F014         	call	_strtok	;wreg free
 12026  006380  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 12027  006384  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 12028                           
 12029                           ;main.c: 717: if ((0) != p) {
 12030  006388  0103               	movlb	3	; () banked
 12031  00638A  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 12032  00638C  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 12033  00638E  E00A               	bz	l12995
 12034                           
 12035                           ; BSR set to: 3
 12036                           ;main.c: 718: nodeid = atoi(p);
 12037  006390  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12038  006394  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12039  006398  EC70  F01B         	call	_atoi	;wreg free
 12040  00639C  501F               	movf	?_atoi,w,c
 12041  00639E  0103               	movlb	3	; () banked
 12042  0063A0  6F0D               	movwf	doModeVerbose@nodeid_1114& (0+255),b
 12043                           
 12044                           ;main.c: 719: }
 12045  0063A2  D007               	goto	l12999
 12046  0063A4                     l12995:
 12047                           
 12048                           ; BSR set to: 3
 12049                           ;main.c: 720: else {
 12050                           ;main.c: 721: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12051  0063A4  0E79               	movlw	high STR_47
 12052  0063A6  6E1B               	movwf	?_putsUSART+1,c
 12053  0063A8  0E30               	movlw	low STR_47
 12054  0063AA  6E1A               	movwf	?_putsUSART,c
 12055  0063AC  EC50  F011         	call	_putsUSART	;wreg free
 12056  0063B0  D3FB               	goto	l491
 12057  0063B2                     l12999:
 12058                           
 12059                           ; BSR set to: 3
 12060                           ;main.c: 723: }
 12061                           ;main.c: 725: if ((0) != (p = strtok((0), " "))) {
 12062  0063B2  EC36  F036         	call	PL36	;call to abstracted procedure
 12063  0063B6  ECF7  F014         	call	_strtok	;wreg free
 12064  0063BA  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 12065  0063BE  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 12066  0063C2  0103               	movlb	3	; () banked
 12067  0063C4  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 12068  0063C6  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 12069  0063C8  E033               	bz	l13007
 12070                           
 12071                           ; BSR set to: 3
 12072                           ;main.c: 727: char *preg;
 12073                           ;main.c: 728: if (preg = strchr(p, ':')) {
 12074  0063CA  C334  F019         	movff	doModeVerbose@p_1118,?_strchr
 12075  0063CE  C335  F01A         	movff	doModeVerbose@p_1118+1,?_strchr+1
 12076  0063D2  6A1C               	clrf	?_strchr+3,c
 12077  0063D4  0E3A               	movlw	58
 12078  0063D6  6E1B               	movwf	?_strchr+2,c
 12079  0063D8  ECFE  F011         	call	_strchr	;wreg free
 12080  0063DC  C019  F306         	movff	?_strchr,doModeVerbose@preg_1122
 12081  0063E0  C01A  F307         	movff	?_strchr+1,doModeVerbose@preg_1122+1
 12082  0063E4  0103               	movlb	3	; () banked
 12083  0063E6  5107               	movf	(doModeVerbose@preg_1122+1)& (0+255),w,b
 12084  0063E8  1106               	iorwf	doModeVerbose@preg_1122& (0+255),w,b
 12085  0063EA  E018               	bz	l13005
 12086                           
 12087                           ; BSR set to: 3
 12088                           ;main.c: 729: page = atoi(p);
 12089  0063EC  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12090  0063F0  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12091  0063F4  EC70  F01B         	call	_atoi	;wreg free
 12092  0063F8  501F               	movf	?_atoi,w,c
 12093  0063FA  0103               	movlb	3	; () banked
 12094  0063FC  6F21               	movwf	doModeVerbose@page_1115& (0+255),b
 12095                           
 12096                           ;main.c: 730: reg = atoi(preg + 1);
 12097  0063FE  2906               	incf	doModeVerbose@preg_1122& (0+255),w,b
 12098  006400  0100               	movlb	0	; () banked
 12099  006402  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12100  006404  0E00               	movlw	0
 12101  006406  0103               	movlb	3	; () banked
 12102  006408  2107               	addwfc	(doModeVerbose@preg_1122+1)& (0+255),w,b
 12103  00640A  0100               	movlb	0	; () banked
 12104  00640C  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12105  00640E  C0B2  F01F         	movff	??_doModeVerbose,?_atoi
 12106  006412  C0B3  F020         	movff	??_doModeVerbose+1,?_atoi+1
 12107  006416  EC70  F01B         	call	_atoi	;wreg free
 12108  00641A  D006               	goto	L11
 12109  00641C                     l13005:
 12110                           
 12111                           ; BSR set to: 3
 12112                           ;main.c: 732: else {
 12113                           ;main.c: 733: reg = atoi(p);
 12114  00641C  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12115  006420  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12116  006424  EC70  F01B         	call	_atoi	;wreg free
 12117  006428                     L11:
 12118  006428  501F               	movf	?_atoi,w,c
 12119  00642A  0103               	movlb	3	; () banked
 12120  00642C  6F22               	movwf	doModeVerbose@reg_1116& (0+255),b
 12121  00642E  D007               	goto	l13011
 12122  006430                     l13007:
 12123                           
 12124                           ; BSR set to: 3
 12125                           ;main.c: 738: else {
 12126                           ;main.c: 739: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12127  006430  0E77               	movlw	high STR_49
 12128  006432  6E1B               	movwf	?_putsUSART+1,c
 12129  006434  0EAB               	movlw	low STR_49
 12130  006436  6E1A               	movwf	?_putsUSART,c
 12131  006438  EC50  F011         	call	_putsUSART	;wreg free
 12132  00643C  D3B5               	goto	l491
 12133  00643E                     l13011:
 12134                           
 12135                           ; BSR set to: 3
 12136                           ;main.c: 741: }
 12137                           ;main.c: 744: if ((0) != (p = strtok((0), " "))) {
 12138  00643E  EC36  F036         	call	PL36	;call to abstracted procedure
 12139  006442  ECF7  F014         	call	_strtok	;wreg free
 12140  006446  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 12141  00644A  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 12142  00644E  0103               	movlb	3	; () banked
 12143  006450  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 12144  006452  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 12145  006454  E00A               	bz	l13015
 12146                           
 12147                           ; BSR set to: 3
 12148                           ;main.c: 745: value = atoi(p);
 12149  006456  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12150  00645A  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12151  00645E  EC70  F01B         	call	_atoi	;wreg free
 12152  006462  501F               	movf	?_atoi,w,c
 12153  006464  0103               	movlb	3	; () banked
 12154  006466  6F2A               	movwf	doModeVerbose@value_1117& (0+255),b
 12155                           
 12156                           ;main.c: 746: }
 12157  006468  D007               	goto	l13019
 12158  00646A                     l13015:
 12159                           
 12160                           ; BSR set to: 3
 12161                           ;main.c: 747: else {
 12162                           ;main.c: 748: putsUSART((char *) "-ERROR - Need a value\r\n");
 12163  00646A  0E79               	movlw	high STR_74
 12164  00646C  6E1B               	movwf	?_putsUSART+1,c
 12165  00646E  0E60               	movlw	low STR_74
 12166  006470  6E1A               	movwf	?_putsUSART,c
 12167  006472  EC50  F011         	call	_putsUSART	;wreg free
 12168  006476  D398               	goto	l491
 12169  006478                     l13019:
 12170                           
 12171                           ; BSR set to: 3
 12172                           ;main.c: 750: }
 12173                           ;main.c: 752: if (writeRegisterExtended(nodeid,
 12174                           ;main.c: 753: page,
 12175                           ;main.c: 754: reg,
 12176                           ;main.c: 755: rwtimeout,
 12177                           ;main.c: 756: &value)) {
 12178  006478  0100               	movlb	0	; () banked
 12179  00647A  C321  F09E         	movff	doModeVerbose@page_1115,?_writeRegisterExtended
 12180  00647E  6B9F               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 12181  006480  C322  F0A0         	movff	doModeVerbose@reg_1116,?_writeRegisterExtended+2
 12182  006484  C0D9  F0A1         	movff	_rwtimeout,?_writeRegisterExtended+3
 12183  006488  6BA2               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 12184  00648A  0E03               	movlw	high doModeVerbose@value_1117
 12185  00648C  6FA4               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 12186  00648E  0E2A               	movlw	low doModeVerbose@value_1117
 12187  006490  6FA3               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 12188  006492  0103               	movlb	3	; () banked
 12189  006494  510D               	movf	doModeVerbose@nodeid_1114& (0+255),w,b
 12190  006496  EC37  F019         	call	_writeRegisterExtended
 12191  00649A  0900               	iorlw	0
 12192  00649C  E007               	bz	l13023
 12193                           
 12194                           ;main.c: 757: putsUSART((char *) "+OK - Value written successfully\r\n");
 12195  00649E  0E76               	movlw	high STR_75
 12196  0064A0  6E1B               	movwf	?_putsUSART+1,c
 12197  0064A2  0EC0               	movlw	low STR_75
 12198  0064A4  6E1A               	movwf	?_putsUSART,c
 12199  0064A6  EC50  F011         	call	_putsUSART	;wreg free
 12200                           
 12201                           ;main.c: 758: } else {
 12202  0064AA  D36F               	goto	l13263
 12203  0064AC                     l13023:
 12204                           
 12205                           ;main.c: 759: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 12206  0064AC  0E77               	movlw	high STR_76
 12207  0064AE  6E1B               	movwf	?_putsUSART+1,c
 12208  0064B0  0E8A               	movlw	low STR_76
 12209  0064B2  6E1A               	movwf	?_putsUSART,c
 12210  0064B4  EC50  F011         	call	_putsUSART	;wreg free
 12211  0064B8  D368               	goto	l13263
 12212  0064BA                     l13025:
 12213                           
 12214                           ; BSR set to: 0
 12215                           ;main.c: 765: else if ( cmdbuf == stristr(cmdbuf, "INFO")) {
 12216  0064BA  0101               	movlb	1	; () banked
 12217  0064BC  0E01               	movlw	high _cmdbuf
 12218  0064BE  6E27               	movwf	?_stristr+1,c
 12219  0064C0  0E24               	movlw	low _cmdbuf
 12220  0064C2  6E26               	movwf	?_stristr,c
 12221  0064C4  0E7C               	movlw	high STR_77
 12222  0064C6  6E29               	movwf	?_stristr+3,c
 12223  0064C8  0EBB               	movlw	low STR_77
 12224  0064CA  6E28               	movwf	?_stristr+2,c
 12225  0064CC  ECAB  F013         	call	_stristr	;wreg free
 12226  0064D0  DB6C               	call	PL2	;call to abstracted procedure
 12227  0064D2  E102               	bnz	u17205
 12228  0064D4  5026               	movf	?_stristr,w,c
 12229  0064D6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12230  0064D8                     u17205:
 12231  0064D8  E154               	bnz	l13051
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;main.c: 766: uint8_t nodeid;
 12235                           ;main.c: 768: strcpy(cmdbuf, cmdbuf + 9);
 12236  0064DA  0E01               	movlw	high _cmdbuf
 12237  0064DC  6E1A               	movwf	?_strcpy+1,c
 12238  0064DE  0E24               	movlw	low _cmdbuf
 12239  0064E0  6E19               	movwf	?_strcpy,c
 12240  0064E2  0E2D               	movlw	low (_cmdbuf+9)
 12241  0064E4  0100               	movlb	0	; () banked
 12242  0064E6  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12243  0064E8  0E01               	movlw	high (_cmdbuf+9)
 12244  0064EA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12245  0064EC  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12246  0064F0  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12247  0064F4  EC07  F00F         	call	_strcpy	;wreg free
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;main.c: 769: nodeid = atoi(cmdbuf);
 12251  0064F8  0101               	movlb	1	; () banked
 12252  0064FA  0E01               	movlw	high _cmdbuf
 12253  0064FC  6E20               	movwf	?_atoi+1,c
 12254  0064FE  0E24               	movlw	low _cmdbuf
 12255  006500  6E1F               	movwf	?_atoi,c
 12256  006502  EC70  F01B         	call	_atoi	;wreg free
 12257  006506  501F               	movf	?_atoi,w,c
 12258  006508  0103               	movlb	3	; () banked
 12259  00650A  6F2F               	movwf	doModeVerbose@nodeid_1129& (0+255),b
 12260                           
 12261                           ; BSR set to: 3
 12262                           ;main.c: 771: putsUSART((char *) "Info for node id = ");
 12263  00650C  0E7A               	movlw	high STR_78
 12264  00650E  6E1B               	movwf	?_putsUSART+1,c
 12265  006510  0EAA               	movlw	low STR_78
 12266  006512  6E1A               	movwf	?_putsUSART,c
 12267  006514  EC50  F011         	call	_putsUSART	;wreg free
 12268                           
 12269                           ;main.c: 772: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", nodeid );
 12270  006518  0100               	movlb	0	; () banked
 12271  00651A  67D3               	tstfsz	_bHex& (0+255),b
 12272  00651C  D005               	goto	l13037
 12273                           
 12274                           ; BSR set to: 0
 12275  00651E  0E7C               	movlw	high STR_53
 12276  006520  0103               	movlb	3	; () banked
 12277  006522  6F1F               	movwf	(_doModeVerbose$1134+1)& (0+255),b
 12278  006524  0EED               	movlw	low STR_53
 12279  006526  D004               	goto	L12
 12280  006528                     l13037:
 12281                           
 12282                           ; BSR set to: 0
 12283  006528  0E7C               	movlw	high STR_52
 12284  00652A  0103               	movlb	3	; () banked
 12285  00652C  6F1F               	movwf	(_doModeVerbose$1134+1)& (0+255),b
 12286  00652E  0E64               	movlw	low STR_52
 12287  006530                     L12:
 12288  006530  6F1E               	movwf	_doModeVerbose$1134& (0+255),b
 12289                           
 12290                           ; BSR set to: 3
 12291  006532  0E01               	movlw	high _wrkbuf
 12292  006534  0100               	movlb	0	; () banked
 12293  006536  6F61               	movwf	(?_sprintf+1)& (0+255),b
 12294  006538  0E74               	movlw	low _wrkbuf
 12295  00653A  6F60               	movwf	?_sprintf& (0+255),b
 12296  00653C  C31E  F062         	movff	_doModeVerbose$1134,?_sprintf+2
 12297  006540  C31F  F063         	movff	_doModeVerbose$1134+1,?_sprintf+3
 12298  006544  C32F  F064         	movff	doModeVerbose@nodeid_1129,?_sprintf+4
 12299  006548  6B65               	clrf	(?_sprintf+5)& (0+255),b
 12300  00654A  EC65  F029         	call	_sprintf	;wreg free
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;main.c: 773: putsUSART(wrkbuf);
 12304  00654E  0101               	movlb	1	; () banked
 12305  006550  0E01               	movlw	high _wrkbuf
 12306  006552  6E1B               	movwf	?_putsUSART+1,c
 12307  006554  0E74               	movlw	low _wrkbuf
 12308  006556  6E1A               	movwf	?_putsUSART,c
 12309  006558  EC50  F011         	call	_putsUSART	;wreg free
 12310                           
 12311                           ;main.c: 774: putsUSART((char *) "\r\n");
 12312  00655C  0E71               	movlw	high (STR_188+50)
 12313  00655E  6E1B               	movwf	?_putsUSART+1,c
 12314  006560  0EB2               	movlw	low (STR_188+50)
 12315  006562  6E1A               	movwf	?_putsUSART,c
 12316  006564  EC50  F011         	call	_putsUSART	;wreg free
 12317                           
 12318                           ;main.c: 775: printNodeFirmwareVersion(nodeid);
 12319  006568  0103               	movlb	3	; () banked
 12320  00656A  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12321  00656C  ECFB  F017         	call	_printNodeFirmwareVersion
 12322                           
 12323                           ;main.c: 776: printGUID(nodeid);
 12324  006570  0103               	movlb	3	; () banked
 12325  006572  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12326  006574  ECEF  F01B         	call	_printGUID
 12327                           
 12328                           ;main.c: 777: printMDF(nodeid);
 12329  006578  0103               	movlb	3	; () banked
 12330  00657A  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12331  00657C  EC40  F015         	call	_printMDF
 12332                           
 12333                           ;main.c: 778: }
 12334  006580  D304               	goto	l13263
 12335  006582                     l13051:
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;main.c: 782: else if ( cmdbuf == stristr(cmdbuf, "FILTER")) {
 12339  006582  0101               	movlb	1	; () banked
 12340  006584  0E01               	movlw	high _cmdbuf
 12341  006586  6E27               	movwf	?_stristr+1,c
 12342  006588  0E24               	movlw	low _cmdbuf
 12343  00658A  6E26               	movwf	?_stristr,c
 12344  00658C  0E7C               	movlw	high STR_82
 12345  00658E  6E29               	movwf	?_stristr+3,c
 12346  006590  0E56               	movlw	low STR_82
 12347  006592  6E28               	movwf	?_stristr+2,c
 12348  006594  ECAB  F013         	call	_stristr	;wreg free
 12349  006598  DB08               	call	PL2	;call to abstracted procedure
 12350  00659A  E102               	bnz	u17225
 12351  00659C  5026               	movf	?_stristr,w,c
 12352  00659E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12353  0065A0                     u17225:
 12354  0065A0  E001 D0C6          	bnz	l13117
 12355                           
 12356                           ; BSR set to: 0
 12357                           ;main.c: 784: uint8_t filterno;
 12358                           ;main.c: 785: uint8_t filter_priority;
 12359                           ;main.c: 786: uint16_t filter_class;
 12360                           ;main.c: 787: uint8_t filter_type;
 12361                           ;main.c: 788: uint8_t filter_nodeid;
 12362                           ;main.c: 790: strcpy( cmdbuf, cmdbuf + 8);
 12363  0065A4  0E01               	movlw	high _cmdbuf
 12364  0065A6  DB42               	call	PL16	;call to abstracted procedure
 12365  0065A8  EC07  F00F         	call	_strcpy	;wreg free
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;main.c: 791: char *p = strtok(cmdbuf, ",");
 12369  0065AC  DB4C               	call	PL30	;call to abstracted procedure
 12370  0065AE  ECF7  F014         	call	_strtok	;wreg free
 12371  0065B2  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12372  0065B6  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12373                           
 12374                           ;main.c: 792: if ((0) != p) {
 12375  0065BA  0103               	movlb	3	; () banked
 12376  0065BC  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12377  0065BE  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12378  0065C0  E013               	bz	l13067
 12379                           
 12380                           ; BSR set to: 3
 12381                           ;main.c: 793: filterno = atoi( p );
 12382  0065C2  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12383  0065C6  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12384  0065CA  EC70  F01B         	call	_atoi	;wreg free
 12385  0065CE  501F               	movf	?_atoi,w,c
 12386  0065D0  0103               	movlb	3	; () banked
 12387  0065D2  6F27               	movwf	doModeVerbose@filterno& (0+255),b
 12388                           
 12389                           ; BSR set to: 3
 12390                           ;main.c: 794: if ( filterno > 15 ) {
 12391  0065D4  0E0F               	movlw	15
 12392  0065D6  6527               	cpfsgt	doModeVerbose@filterno& (0+255),b
 12393  0065D8  D00E               	goto	l13071
 12394                           
 12395                           ; BSR set to: 3
 12396                           ;main.c: 795: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 12397  0065DA  0E6F               	movlw	high STR_84
 12398  0065DC  6E1B               	movwf	?_putsUSART+1,c
 12399  0065DE  0E44               	movlw	low STR_84
 12400  0065E0  6E1A               	movwf	?_putsUSART,c
 12401  0065E2  EC50  F011         	call	_putsUSART	;wreg free
 12402  0065E6  D2E0               	goto	l491
 12403  0065E8                     l13067:
 12404                           
 12405                           ; BSR set to: 3
 12406                           ;main.c: 799: else {
 12407                           ;main.c: 800: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 12408  0065E8  0E75               	movlw	high STR_85
 12409  0065EA  6E1B               	movwf	?_putsUSART+1,c
 12410  0065EC  0E1D               	movlw	low STR_85
 12411  0065EE  6E1A               	movwf	?_putsUSART,c
 12412  0065F0  EC50  F011         	call	_putsUSART	;wreg free
 12413  0065F4  D2D9               	goto	l491
 12414  0065F6                     l13071:
 12415                           
 12416                           ; BSR set to: 3
 12417                           ;main.c: 802: }
 12418                           ;main.c: 805: p = strtok((0), ",");
 12419  0065F6  DAE0               	call	PL6	;call to abstracted procedure
 12420  0065F8  ECF7  F014         	call	_strtok	;wreg free
 12421  0065FC  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12422  006600  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12423                           
 12424                           ;main.c: 806: if ((0) != p) {
 12425  006604  0103               	movlb	3	; () banked
 12426  006606  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12427  006608  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12428  00660A  E00A               	bz	l13077
 12429                           
 12430                           ; BSR set to: 3
 12431                           ;main.c: 807: filter_priority = atoi( p );
 12432  00660C  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12433  006610  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12434  006614  EC70  F01B         	call	_atoi	;wreg free
 12435  006618  501F               	movf	?_atoi,w,c
 12436  00661A  0103               	movlb	3	; () banked
 12437  00661C  6F0E               	movwf	doModeVerbose@filter_priority& (0+255),b
 12438                           
 12439                           ;main.c: 808: }
 12440  00661E  D007               	goto	l13081
 12441  006620                     l13077:
 12442                           
 12443                           ; BSR set to: 3
 12444                           ;main.c: 809: else {
 12445                           ;main.c: 810: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 12446  006620  0E74               	movlw	high STR_87
 12447  006622  6E1B               	movwf	?_putsUSART+1,c
 12448  006624  0E52               	movlw	low STR_87
 12449  006626  6E1A               	movwf	?_putsUSART,c
 12450  006628  EC50  F011         	call	_putsUSART	;wreg free
 12451  00662C  D2BD               	goto	l491
 12452  00662E                     l13081:
 12453                           
 12454                           ; BSR set to: 3
 12455                           ;main.c: 812: }
 12456                           ;main.c: 815: p = strtok((0), ",");
 12457  00662E  DAC4               	call	PL6	;call to abstracted procedure
 12458  006630  ECF7  F014         	call	_strtok	;wreg free
 12459  006634  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12460  006638  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12461                           
 12462                           ;main.c: 816: if ((0) != p) {
 12463  00663C  0103               	movlb	3	; () banked
 12464  00663E  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12465  006640  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12466  006642  E00B               	bz	l13087
 12467                           
 12468                           ; BSR set to: 3
 12469                           ;main.c: 817: filter_class = atoi( p );
 12470  006644  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12471  006648  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12472  00664C  EC70  F01B         	call	_atoi	;wreg free
 12473  006650  C01F  F308         	movff	?_atoi,doModeVerbose@filter_class
 12474  006654  C020  F309         	movff	?_atoi+1,doModeVerbose@filter_class+1
 12475                           
 12476                           ;main.c: 818: }
 12477  006658  D007               	goto	l13091
 12478  00665A                     l13087:
 12479                           
 12480                           ; BSR set to: 3
 12481                           ;main.c: 819: else {
 12482                           ;main.c: 820: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 12483  00665A  0E75               	movlw	high STR_89
 12484  00665C  6E1B               	movwf	?_putsUSART+1,c
 12485  00665E  0EB9               	movlw	low STR_89
 12486  006660  6E1A               	movwf	?_putsUSART,c
 12487  006662  EC50  F011         	call	_putsUSART	;wreg free
 12488  006666  D2A0               	goto	l491
 12489  006668                     l13091:
 12490                           
 12491                           ;main.c: 822: }
 12492                           ;main.c: 825: p = strtok((0), ",");
 12493  006668  DAA7               	call	PL6	;call to abstracted procedure
 12494  00666A  ECF7  F014         	call	_strtok	;wreg free
 12495  00666E  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12496  006672  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12497                           
 12498                           ;main.c: 826: if ((0) != p) {
 12499  006676  0103               	movlb	3	; () banked
 12500  006678  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12501  00667A  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12502  00667C  E00A               	bz	l13097
 12503                           
 12504                           ; BSR set to: 3
 12505                           ;main.c: 827: filter_type = atoi( p );
 12506  00667E  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12507  006682  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12508  006686  EC70  F01B         	call	_atoi	;wreg free
 12509  00668A  501F               	movf	?_atoi,w,c
 12510  00668C  0103               	movlb	3	; () banked
 12511  00668E  6F0F               	movwf	doModeVerbose@filter_type& (0+255),b
 12512                           
 12513                           ;main.c: 828: }
 12514  006690  D007               	goto	l13101
 12515  006692                     l13097:
 12516                           
 12517                           ; BSR set to: 3
 12518                           ;main.c: 829: else {
 12519                           ;main.c: 830: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 12520  006692  0E76               	movlw	high STR_91
 12521  006694  6E1B               	movwf	?_putsUSART+1,c
 12522  006696  0E07               	movlw	low STR_91
 12523  006698  6E1A               	movwf	?_putsUSART,c
 12524  00669A  EC50  F011         	call	_putsUSART	;wreg free
 12525  00669E  D284               	goto	l491
 12526  0066A0                     l13101:
 12527                           
 12528                           ; BSR set to: 3
 12529                           ;main.c: 832: }
 12530                           ;main.c: 835: p = strtok((0), ",");
 12531  0066A0  DA8B               	call	PL6	;call to abstracted procedure
 12532  0066A2  ECF7  F014         	call	_strtok	;wreg free
 12533  0066A6  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12534  0066AA  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12535                           
 12536                           ;main.c: 836: if ((0) != p) {
 12537  0066AE  0103               	movlb	3	; () banked
 12538  0066B0  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12539  0066B2  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12540  0066B4  E00A               	bz	l13107
 12541                           
 12542                           ; BSR set to: 3
 12543                           ;main.c: 837: filter_nodeid = atoi( p );
 12544  0066B6  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12545  0066BA  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12546  0066BE  EC70  F01B         	call	_atoi	;wreg free
 12547  0066C2  501F               	movf	?_atoi,w,c
 12548  0066C4  0103               	movlb	3	; () banked
 12549  0066C6  6F10               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 12550                           
 12551                           ;main.c: 838: }
 12552  0066C8  D007               	goto	l13111
 12553  0066CA                     l13107:
 12554                           
 12555                           ; BSR set to: 3
 12556                           ;main.c: 839: else {
 12557                           ;main.c: 840: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 12558  0066CA  0E74               	movlw	high STR_93
 12559  0066CC  6E1B               	movwf	?_putsUSART+1,c
 12560  0066CE  0E7C               	movlw	low STR_93
 12561  0066D0  6E1A               	movwf	?_putsUSART,c
 12562  0066D2  EC50  F011         	call	_putsUSART	;wreg free
 12563  0066D6  D268               	goto	l491
 12564  0066D8                     l13111:
 12565                           
 12566                           ; BSR set to: 3
 12567                           ;main.c: 842: }
 12568                           ;main.c: 845: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12569  0066D8  0E80               	movlw	128
 12570  0066DA  ECA5  F00E         	call	_ECANSetOperationMode
 12571                           
 12572                           ;main.c: 847: uint32_t id = ((uint32_t) filter_priority << 26) |
 12573                           ;main.c: 848: ((uint32_t) filter_class << 16) |
 12574                           ;main.c: 849: ((uint32_t) filter_type << 8) |
 12575                           ;main.c: 850: filter_nodeid;
 12576  0066DE  C30F  F0B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 12577  0066E2  DAD8               	call	PL42	;call to abstracted procedure
 12578  0066E4  5108               	movf	doModeVerbose@filter_class& (0+255),w,b
 12579  0066E6  0100               	movlb	0	; () banked
 12580  0066E8  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 12581  0066EA  0103               	movlb	3	; () banked
 12582  0066EC  5109               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 12583  0066EE  DAEB               	call	PL56	;call to abstracted procedure
 12584  0066F0  C30E  F0BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 12585  0066F4  DA68               	call	PL8	;call to abstracted procedure
 12586  0066F6  5110               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 12587  0066F8  0100               	movlb	0	; () banked
 12588  0066FA  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12589  0066FC  0103               	movlb	3	; () banked
 12590  0066FE  6F00               	movwf	doModeVerbose@id& (0+255),b
 12591  006700  0100               	movlb	0	; () banked
 12592  006702  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12593  006704  0103               	movlb	3	; () banked
 12594  006706  6F01               	movwf	(doModeVerbose@id+1)& (0+255),b
 12595  006708  0100               	movlb	0	; () banked
 12596  00670A  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12597  00670C  0103               	movlb	3	; () banked
 12598  00670E  6F02               	movwf	(doModeVerbose@id+2)& (0+255),b
 12599  006710  0100               	movlb	0	; () banked
 12600  006712  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12601  006714  0103               	movlb	3	; () banked
 12602  006716  6F03               	movwf	(doModeVerbose@id+3)& (0+255),b
 12603                           
 12604                           ; BSR set to: 3
 12605                           ;main.c: 851: setFilter( filterno, id );
 12606  006718  C300  F019         	movff	doModeVerbose@id,?_setFilter
 12607  00671C  C301  F01A         	movff	doModeVerbose@id+1,?_setFilter+1
 12608  006720  C302  F01B         	movff	doModeVerbose@id+2,?_setFilter+2
 12609  006724  C303  F01C         	movff	doModeVerbose@id+3,?_setFilter+3
 12610  006728  5127               	movf	doModeVerbose@filterno& (0+255),w,b
 12611  00672A  EC1C  F023         	call	_setFilter
 12612                           
 12613                           ;main.c: 852: }
 12614  00672E  D22D               	goto	l13263
 12615  006730                     l13117:
 12616                           
 12617                           ; BSR set to: 0
 12618                           ;main.c: 856: else if ( cmdbuf == stristr(cmdbuf, "MASK")) {
 12619  006730  0101               	movlb	1	; () banked
 12620  006732  0E01               	movlw	high _cmdbuf
 12621  006734  6E27               	movwf	?_stristr+1,c
 12622  006736  0E24               	movlw	low _cmdbuf
 12623  006738  6E26               	movwf	?_stristr,c
 12624  00673A  0E7C               	movlw	high STR_94
 12625  00673C  6E29               	movwf	?_stristr+3,c
 12626  00673E  0EB1               	movlw	low STR_94
 12627  006740  6E28               	movwf	?_stristr+2,c
 12628  006742  ECAB  F013         	call	_stristr	;wreg free
 12629  006746  DA31               	call	PL2	;call to abstracted procedure
 12630  006748  E102               	bnz	u17305
 12631  00674A  5026               	movf	?_stristr,w,c
 12632  00674C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12633  00674E                     u17305:
 12634  00674E  E001 D0CD          	bnz	l13187
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;main.c: 857: uint8_t maskno;
 12638                           ;main.c: 858: uint8_t mask_priority;
 12639                           ;main.c: 859: uint16_t mask_class;
 12640                           ;main.c: 860: uint8_t mask_type;
 12641                           ;main.c: 861: uint8_t mask_nodeid;
 12642                           ;main.c: 863: strcpy( cmdbuf, cmdbuf + 8);
 12643  006752  0E01               	movlw	high _cmdbuf
 12644  006754  DA6B               	call	PL16	;call to abstracted procedure
 12645  006756  EC07  F00F         	call	_strcpy	;wreg free
 12646                           
 12647                           ; BSR set to: 0
 12648                           ;main.c: 864: char *p = strtok(cmdbuf, ",");
 12649  00675A  DA75               	call	PL30	;call to abstracted procedure
 12650  00675C  ECF7  F014         	call	_strtok	;wreg free
 12651  006760  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12652  006764  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12653                           
 12654                           ;main.c: 865: if ((0) != p) {
 12655  006768  0103               	movlb	3	; () banked
 12656  00676A  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12657  00676C  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12658  00676E  E013               	bz	l13133
 12659                           
 12660                           ; BSR set to: 3
 12661                           ;main.c: 866: maskno = atoi( p );
 12662  006770  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12663  006774  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12664  006778  EC70  F01B         	call	_atoi	;wreg free
 12665  00677C  501F               	movf	?_atoi,w,c
 12666  00677E  0103               	movlb	3	; () banked
 12667  006780  6F28               	movwf	doModeVerbose@maskno& (0+255),b
 12668                           
 12669                           ; BSR set to: 3
 12670                           ;main.c: 867: if ( maskno > 1 ) {
 12671  006782  0E01               	movlw	1
 12672  006784  6528               	cpfsgt	doModeVerbose@maskno& (0+255),b
 12673  006786  D00E               	goto	l13137
 12674                           
 12675                           ; BSR set to: 3
 12676                           ;main.c: 868: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 12677  006788  0E72               	movlw	high STR_96
 12678  00678A  6E1B               	movwf	?_putsUSART+1,c
 12679  00678C  0E1C               	movlw	low STR_96
 12680  00678E  6E1A               	movwf	?_putsUSART,c
 12681  006790  EC50  F011         	call	_putsUSART	;wreg free
 12682  006794  D209               	goto	l491
 12683  006796                     l13133:
 12684                           
 12685                           ; BSR set to: 3
 12686                           ;main.c: 872: else {
 12687                           ;main.c: 873: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 12688  006796  0E76               	movlw	high STR_97
 12689  006798  6E1B               	movwf	?_putsUSART+1,c
 12690  00679A  0E2D               	movlw	low STR_97
 12691  00679C  6E1A               	movwf	?_putsUSART,c
 12692  00679E  EC50  F011         	call	_putsUSART	;wreg free
 12693  0067A2  D202               	goto	l491
 12694  0067A4                     l13137:
 12695                           
 12696                           ; BSR set to: 3
 12697                           ;main.c: 875: }
 12698                           ;main.c: 878: p = strtok((0), ",");
 12699  0067A4  DA09               	call	PL6	;call to abstracted procedure
 12700  0067A6  ECF7  F014         	call	_strtok	;wreg free
 12701  0067AA  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12702  0067AE  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12703                           
 12704                           ;main.c: 879: if ((0) != p) {
 12705  0067B2  0103               	movlb	3	; () banked
 12706  0067B4  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12707  0067B6  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12708  0067B8  E00A               	bz	l13143
 12709                           
 12710                           ; BSR set to: 3
 12711                           ;main.c: 880: mask_priority = atoi( p );
 12712  0067BA  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12713  0067BE  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12714  0067C2  EC70  F01B         	call	_atoi	;wreg free
 12715  0067C6  501F               	movf	?_atoi,w,c
 12716  0067C8  0103               	movlb	3	; () banked
 12717  0067CA  6F11               	movwf	doModeVerbose@mask_priority& (0+255),b
 12718                           
 12719                           ;main.c: 881: }
 12720  0067CC  D007               	goto	l13147
 12721  0067CE                     l13143:
 12722                           
 12723                           ; BSR set to: 3
 12724                           ;main.c: 882: else {
 12725                           ;main.c: 883: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 12726  0067CE  0E74               	movlw	high STR_99
 12727  0067D0  6E1B               	movwf	?_putsUSART+1,c
 12728  0067D2  0ECD               	movlw	low STR_99
 12729  0067D4  6E1A               	movwf	?_putsUSART,c
 12730  0067D6  EC50  F011         	call	_putsUSART	;wreg free
 12731  0067DA  D1E6               	goto	l491
 12732  0067DC                     l13147:
 12733                           
 12734                           ; BSR set to: 3
 12735                           ;main.c: 885: }
 12736                           ;main.c: 888: p = strtok((0), ",");
 12737  0067DC  D9ED               	call	PL6	;call to abstracted procedure
 12738  0067DE  ECF7  F014         	call	_strtok	;wreg free
 12739  0067E2  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12740  0067E6  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12741                           
 12742                           ;main.c: 889: if ((0) != p) {
 12743  0067EA  0103               	movlb	3	; () banked
 12744  0067EC  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12745  0067EE  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12746  0067F0  E00B               	bz	l13153
 12747                           
 12748                           ; BSR set to: 3
 12749                           ;main.c: 890: mask_class = atoi( p );
 12750  0067F2  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12751  0067F6  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12752  0067FA  EC70  F01B         	call	_atoi	;wreg free
 12753  0067FE  C01F  F30A         	movff	?_atoi,doModeVerbose@mask_class
 12754  006802  C020  F30B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 12755                           
 12756                           ;main.c: 891: }
 12757  006806  D007               	goto	l13157
 12758  006808                     l13153:
 12759                           
 12760                           ; BSR set to: 3
 12761                           ;main.c: 892: else {
 12762                           ;main.c: 893: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 12763  006808  0E76               	movlw	high STR_101
 12764  00680A  6E1B               	movwf	?_putsUSART+1,c
 12765  00680C  0E77               	movlw	low STR_101
 12766  00680E  6E1A               	movwf	?_putsUSART,c
 12767  006810  EC50  F011         	call	_putsUSART	;wreg free
 12768  006814  D1C9               	goto	l491
 12769  006816                     l13157:
 12770                           
 12771                           ;main.c: 895: }
 12772                           ;main.c: 898: p = strtok((0), ",");
 12773  006816  D9D0               	call	PL6	;call to abstracted procedure
 12774  006818  ECF7  F014         	call	_strtok	;wreg free
 12775  00681C  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12776  006820  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12777                           
 12778                           ;main.c: 899: if ((0) != p) {
 12779  006824  0103               	movlb	3	; () banked
 12780  006826  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12781  006828  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12782  00682A  E00A               	bz	l13163
 12783                           
 12784                           ; BSR set to: 3
 12785                           ;main.c: 900: mask_type = atoi( p );
 12786  00682C  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12787  006830  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12788  006834  EC70  F01B         	call	_atoi	;wreg free
 12789  006838  501F               	movf	?_atoi,w,c
 12790  00683A  0103               	movlb	3	; () banked
 12791  00683C  6F12               	movwf	doModeVerbose@mask_type& (0+255),b
 12792                           
 12793                           ;main.c: 901: }
 12794  00683E  D007               	goto	l13167
 12795  006840                     l13163:
 12796                           
 12797                           ; BSR set to: 3
 12798                           ;main.c: 902: else {
 12799                           ;main.c: 903: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 12800  006840  0E76               	movlw	high STR_103
 12801  006842  6E1B               	movwf	?_putsUSART+1,c
 12802  006844  0E9C               	movlw	low STR_103
 12803  006846  6E1A               	movwf	?_putsUSART,c
 12804  006848  EC50  F011         	call	_putsUSART	;wreg free
 12805  00684C  D1AD               	goto	l491
 12806  00684E                     l13167:
 12807                           
 12808                           ; BSR set to: 3
 12809                           ;main.c: 905: }
 12810                           ;main.c: 908: p = strtok((0), ",");
 12811  00684E  D9B4               	call	PL6	;call to abstracted procedure
 12812  006850  ECF7  F014         	call	_strtok	;wreg free
 12813  006854  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12814  006858  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12815                           
 12816                           ;main.c: 909: if ((0) != p) {
 12817  00685C  0103               	movlb	3	; () banked
 12818  00685E  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12819  006860  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12820  006862  E00A               	bz	l13173
 12821                           
 12822                           ; BSR set to: 3
 12823                           ;main.c: 910: mask_nodeid = atoi( p );
 12824  006864  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12825  006868  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12826  00686C  EC70  F01B         	call	_atoi	;wreg free
 12827  006870  501F               	movf	?_atoi,w,c
 12828  006872  0103               	movlb	3	; () banked
 12829  006874  6F13               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 12830                           
 12831                           ;main.c: 911: }
 12832  006876  D007               	goto	l13177
 12833  006878                     l13173:
 12834                           
 12835                           ; BSR set to: 3
 12836                           ;main.c: 912: else {
 12837                           ;main.c: 913: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 12838  006878  0E75               	movlw	high STR_105
 12839  00687A  6E1B               	movwf	?_putsUSART+1,c
 12840  00687C  0E92               	movlw	low STR_105
 12841  00687E  6E1A               	movwf	?_putsUSART,c
 12842  006880  EC50  F011         	call	_putsUSART	;wreg free
 12843  006884  D191               	goto	l491
 12844  006886                     l13177:
 12845                           
 12846                           ; BSR set to: 3
 12847                           ;main.c: 915: }
 12848                           ;main.c: 917: uint32_t id = ((uint32_t) mask_priority << 26) |
 12849                           ;main.c: 918: ((uint32_t) mask_class << 16) |
 12850                           ;main.c: 919: ((uint32_t) mask_type << 8) |
 12851                           ;main.c: 920: mask_nodeid;
 12852  006886  C312  F0B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 12853  00688A  DA04               	call	PL42	;call to abstracted procedure
 12854  00688C  510A               	movf	doModeVerbose@mask_class& (0+255),w,b
 12855  00688E  0100               	movlb	0	; () banked
 12856  006890  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 12857  006892  0103               	movlb	3	; () banked
 12858  006894  510B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 12859  006896  DA17               	call	PL56	;call to abstracted procedure
 12860  006898  C311  F0BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 12861  00689C  D994               	call	PL8	;call to abstracted procedure
 12862  00689E  5113               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 12863  0068A0  0100               	movlb	0	; () banked
 12864  0068A2  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12865  0068A4  0103               	movlb	3	; () banked
 12866  0068A6  6F23               	movwf	doModeVerbose@id_1173& (0+255),b
 12867  0068A8  0100               	movlb	0	; () banked
 12868  0068AA  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12869  0068AC  0103               	movlb	3	; () banked
 12870  0068AE  6F24               	movwf	(doModeVerbose@id_1173+1)& (0+255),b
 12871  0068B0  0100               	movlb	0	; () banked
 12872  0068B2  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12873  0068B4  0103               	movlb	3	; () banked
 12874  0068B6  6F25               	movwf	(doModeVerbose@id_1173+2)& (0+255),b
 12875  0068B8  0100               	movlb	0	; () banked
 12876  0068BA  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12877  0068BC  0103               	movlb	3	; () banked
 12878  0068BE  6F26               	movwf	(doModeVerbose@id_1173+3)& (0+255),b
 12879                           
 12880                           ; BSR set to: 3
 12881                           ;main.c: 923: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12882  0068C0  0E80               	movlw	128
 12883  0068C2  ECA5  F00E         	call	_ECANSetOperationMode
 12884                           
 12885                           ;main.c: 925: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 12886                           ;main.c: 926: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 12887  0068C6  0103               	movlb	3	; () banked
 12888  0068C8  5128               	movf	doModeVerbose@maskno& (0+255),w,b
 12889  0068CA  E008               	bz	l13185
 12890                           
 12891                           ; BSR set to: 3
 12892  0068CC  010F               	movlb	15	; () banked
 12893  0068CE  0E0F               	movlw	15	;volatile
 12894  0068D0  6E1A               	movwf	?__CANIDToRegs+1,c
 12895  0068D2  0E18               	movlw	24	;volatile
 12896  0068D4  D9EC               	call	PL54	;call to abstracted procedure
 12897  0068D6  EC72  F01C         	call	__CANIDToRegs	;wreg free
 12898  0068DA  D157               	goto	l13263
 12899  0068DC                     l13185:
 12900                           
 12901                           ; BSR set to: 3
 12902  0068DC  010F               	movlb	15	; () banked
 12903  0068DE  0E0F               	movlw	15	;volatile
 12904  0068E0  6E1A               	movwf	?__CANIDToRegs+1,c
 12905  0068E2  0E1C               	movlw	28	;volatile
 12906  0068E4  D9E4               	call	PL54	;call to abstracted procedure
 12907  0068E6  EC72  F01C         	call	__CANIDToRegs	;wreg free
 12908  0068EA  D14F               	goto	l13263
 12909  0068EC                     l13187:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;main.c: 935: else if ( cmdbuf == stristr(cmdbuf, "SET ") ) {
 12913  0068EC  0101               	movlb	1	; () banked
 12914  0068EE  0E01               	movlw	high _cmdbuf
 12915  0068F0  6E27               	movwf	?_stristr+1,c
 12916  0068F2  0E24               	movlw	low _cmdbuf
 12917  0068F4  6E26               	movwf	?_stristr,c
 12918  0068F6  0E7C               	movlw	high STR_106
 12919  0068F8  6E29               	movwf	?_stristr+3,c
 12920  0068FA  0E9D               	movlw	low STR_106
 12921  0068FC  6E28               	movwf	?_stristr+2,c
 12922  0068FE  ECAB  F013         	call	_stristr	;wreg free
 12923  006902  D953               	call	PL2	;call to abstracted procedure
 12924  006904  E102               	bnz	u17395
 12925  006906  5026               	movf	?_stristr,w,c
 12926  006908  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12927  00690A                     u17395:
 12928  00690A  E001 D138          	bnz	l13261
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;main.c: 938: strcpy( cmdbuf, cmdbuf + 4);
 12932  00690E  0E01               	movlw	high _cmdbuf
 12933  006910  6E1A               	movwf	?_strcpy+1,c
 12934  006912  0E24               	movlw	low _cmdbuf
 12935  006914  6E19               	movwf	?_strcpy,c
 12936  006916  0E28               	movlw	low (_cmdbuf+4)
 12937  006918  0100               	movlb	0	; () banked
 12938  00691A  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12939  00691C  0E01               	movlw	high (_cmdbuf+4)
 12940  00691E  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12941  006920  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12942  006924  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12943  006928  EC07  F00F         	call	_strcpy	;wreg free
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;main.c: 941: if ( cmdbuf == stristr(cmdbuf, "HEX")) {
 12947  00692C  0101               	movlb	1	; () banked
 12948  00692E  0E01               	movlw	high _cmdbuf
 12949  006930  6E27               	movwf	?_stristr+1,c
 12950  006932  0E24               	movlw	low _cmdbuf
 12951  006934  6E26               	movwf	?_stristr,c
 12952  006936  0E7C               	movlw	high STR_107
 12953  006938  6E29               	movwf	?_stristr+3,c
 12954  00693A  0EDC               	movlw	low STR_107
 12955  00693C  6E28               	movwf	?_stristr+2,c
 12956  00693E  ECAB  F013         	call	_stristr	;wreg free
 12957  006942  D933               	call	PL2	;call to abstracted procedure
 12958  006944  E102               	bnz	u17405
 12959  006946  5026               	movf	?_stristr,w,c
 12960  006948  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12961  00694A                     u17405:
 12962  00694A  E110               	bnz	l13199
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;main.c: 942: bHex = 1;
 12966  00694C  0E01               	movlw	1
 12967  00694E  6FD3               	movwf	_bHex& (0+255),b
 12968                           
 12969                           ; BSR set to: 0
 12970                           ;main.c: 943: writeEEPROM( 0x06, 1 );
 12971  006950  6A1A               	clrf	?_writeEEPROM+1,c
 12972  006952  0E06               	movlw	6
 12973  006954  6E19               	movwf	?_writeEEPROM,c
 12974  006956  0E01               	movlw	1
 12975  006958  6E1B               	movwf	?_writeEEPROM+2,c
 12976  00695A  ECDE  F00E         	call	_writeEEPROM	;wreg free
 12977                           
 12978                           ;main.c: 944: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 12979  00695E  0E74               	movlw	high STR_108
 12980  006960  6E1B               	movwf	?_putsUSART+1,c
 12981  006962  0E26               	movlw	low STR_108
 12982  006964  6E1A               	movwf	?_putsUSART,c
 12983  006966  EC50  F011         	call	_putsUSART	;wreg free
 12984                           
 12985                           ;main.c: 945: }
 12986  00696A  D10F               	goto	l13263
 12987  00696C                     l13199:
 12988                           
 12989                           ; BSR set to: 0
 12990                           ;main.c: 947: else if ( cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 12991  00696C  0101               	movlb	1	; () banked
 12992  00696E  0E01               	movlw	high _cmdbuf
 12993  006970  6E27               	movwf	?_stristr+1,c
 12994  006972  0E24               	movlw	low _cmdbuf
 12995  006974  6E26               	movwf	?_stristr,c
 12996  006976  0E7C               	movlw	high STR_109
 12997  006978  6E29               	movwf	?_stristr+3,c
 12998  00697A  0E05               	movlw	low STR_109
 12999  00697C  6E28               	movwf	?_stristr+2,c
 13000  00697E  ECAB  F013         	call	_stristr	;wreg free
 13001  006982  D913               	call	PL2	;call to abstracted procedure
 13002  006984  E102               	bnz	u17415
 13003  006986  5026               	movf	?_stristr,w,c
 13004  006988  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13005  00698A                     u17415:
 13006  00698A  E10F               	bnz	l13207
 13007                           
 13008                           ; BSR set to: 0
 13009                           ;main.c: 948: bHex = 0;
 13010  00698C  6BD3               	clrf	_bHex& (0+255),b
 13011                           
 13012                           ; BSR set to: 0
 13013                           ;main.c: 949: writeEEPROM( 0x06, 0 );
 13014  00698E  6A1A               	clrf	?_writeEEPROM+1,c
 13015  006990  0E06               	movlw	6
 13016  006992  6E19               	movwf	?_writeEEPROM,c
 13017  006994  0E00               	movlw	0
 13018  006996  6A1B               	clrf	?_writeEEPROM+2,c
 13019  006998  ECDE  F00E         	call	_writeEEPROM	;wreg free
 13020                           
 13021                           ;main.c: 950: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 13022  00699C  0E74               	movlw	high STR_110
 13023  00699E  6E1B               	movwf	?_putsUSART+1,c
 13024  0069A0  0EF5               	movlw	low STR_110
 13025  0069A2  6E1A               	movwf	?_putsUSART,c
 13026  0069A4  EC50  F011         	call	_putsUSART	;wreg free
 13027                           
 13028                           ;main.c: 951: }
 13029  0069A8  D0F0               	goto	l13263
 13030  0069AA                     l13207:
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;main.c: 952: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 13034  0069AA  0101               	movlb	1	; () banked
 13035  0069AC  0E01               	movlw	high _cmdbuf
 13036  0069AE  6E27               	movwf	?_stristr+1,c
 13037  0069B0  0E24               	movlw	low _cmdbuf
 13038  0069B2  6E26               	movwf	?_stristr,c
 13039  0069B4  0E7B               	movlw	high STR_111
 13040  0069B6  6E29               	movwf	?_stristr+3,c
 13041  0069B8  0E86               	movlw	low STR_111
 13042  0069BA  6E28               	movwf	?_stristr+2,c
 13043  0069BC  ECAB  F013         	call	_stristr	;wreg free
 13044  0069C0  5027               	movf	?_stristr+1,w,c
 13045  0069C2  1026               	iorwf	?_stristr,w,c
 13046  0069C4  E025               	bz	l13219
 13047                           
 13048                           ;main.c: 953: strcpy( cmdbuf, cmdbuf + 10);
 13049  0069C6  0E01               	movlw	high _cmdbuf
 13050  0069C8  6E1A               	movwf	?_strcpy+1,c
 13051  0069CA  0E24               	movlw	low _cmdbuf
 13052  0069CC  6E19               	movwf	?_strcpy,c
 13053  0069CE  0E2E               	movlw	low (_cmdbuf+10)
 13054  0069D0  0100               	movlb	0	; () banked
 13055  0069D2  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13056  0069D4  0E01               	movlw	high (_cmdbuf+10)
 13057  0069D6  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13058  0069D8  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13059  0069DC  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13060  0069E0  EC07  F00F         	call	_strcpy	;wreg free
 13061                           
 13062                           ; BSR set to: 0
 13063                           ;main.c: 954: rwtimeout = atoi( cmdbuf );
 13064  0069E4  0101               	movlb	1	; () banked
 13065  0069E6  0E01               	movlw	high _cmdbuf
 13066  0069E8  6E20               	movwf	?_atoi+1,c
 13067  0069EA  0E24               	movlw	low _cmdbuf
 13068  0069EC  6E1F               	movwf	?_atoi,c
 13069  0069EE  EC70  F01B         	call	_atoi	;wreg free
 13070  0069F2  501F               	movf	?_atoi,w,c
 13071  0069F4  0100               	movlb	0	; () banked
 13072  0069F6  6FD9               	movwf	_rwtimeout& (0+255),b
 13073                           
 13074                           ; BSR set to: 0
 13075                           ;main.c: 955: if ( rwtimeout < 10u ) {
 13076  0069F8  0E0A               	movlw	10
 13077  0069FA  61D9               	cpfslt	_rwtimeout& (0+255),b
 13078  0069FC  D001               	goto	l13217
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;main.c: 956: rwtimeout = 10u;
 13082  0069FE  6FD9               	movwf	_rwtimeout& (0+255),b
 13083  006A00                     l13217:
 13084                           
 13085                           ; BSR set to: 0
 13086                           ;main.c: 957: }
 13087                           ;main.c: 958: writeEEPROM( 0x09, rwtimeout );
 13088  006A00  6A1A               	clrf	?_writeEEPROM+1,c
 13089  006A02  0E09               	movlw	9
 13090  006A04  6E19               	movwf	?_writeEEPROM,c
 13091  006A06  C0D9  F01B         	movff	_rwtimeout,?_writeEEPROM+2
 13092  006A0A  ECDE  F00E         	call	_writeEEPROM	;wreg free
 13093                           
 13094                           ;main.c: 959: }
 13095  006A0E  D0BD               	goto	l13263
 13096  006A10                     l13219:
 13097                           
 13098                           ;main.c: 960: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 13099  006A10  0101               	movlb	1	; () banked
 13100  006A12  0E01               	movlw	high _cmdbuf
 13101  006A14  6E27               	movwf	?_stristr+1,c
 13102  006A16  0E24               	movlw	low _cmdbuf
 13103  006A18  6E26               	movwf	?_stristr,c
 13104  006A1A  0E7B               	movlw	high STR_112
 13105  006A1C  6E29               	movwf	?_stristr+3,c
 13106  006A1E  0EBA               	movlw	low STR_112
 13107  006A20  6E28               	movwf	?_stristr+2,c
 13108  006A22  ECAB  F013         	call	_stristr	;wreg free
 13109  006A26  5027               	movf	?_stristr+1,w,c
 13110  006A28  1026               	iorwf	?_stristr,w,c
 13111  006A2A  E005               	bz	l13223
 13112                           
 13113                           ;main.c: 961: strcpy( cmdbuf, cmdbuf + 8);
 13114  006A2C  0E01               	movlw	high _cmdbuf
 13115  006A2E  D8FE               	call	PL16	;call to abstracted procedure
 13116  006A30  EC07  F00F         	call	_strcpy	;wreg free
 13117                           
 13118                           ;main.c: 962: }
 13119  006A34  D0AA               	goto	l13263
 13120  006A36                     l13223:
 13121                           
 13122                           ;main.c: 963: else if (0 != stristr(cmdbuf, "MODE ")) {
 13123  006A36  0101               	movlb	1	; () banked
 13124  006A38  0E01               	movlw	high _cmdbuf
 13125  006A3A  6E27               	movwf	?_stristr+1,c
 13126  006A3C  0E24               	movlw	low _cmdbuf
 13127  006A3E  6E26               	movwf	?_stristr,c
 13128  006A40  0E7C               	movlw	high STR_113
 13129  006A42  6E29               	movwf	?_stristr+3,c
 13130  006A44  0E85               	movlw	low STR_113
 13131  006A46  6E28               	movwf	?_stristr+2,c
 13132  006A48  ECAB  F013         	call	_stristr	;wreg free
 13133  006A4C  5027               	movf	?_stristr+1,w,c
 13134  006A4E  1026               	iorwf	?_stristr,w,c
 13135  006A50  E05F               	bz	l13251
 13136                           
 13137                           ;main.c: 964: strcpy( cmdbuf, cmdbuf + 5);
 13138  006A52  D8DE               	call	PL10	;call to abstracted procedure
 13139  006A54  EC07  F00F         	call	_strcpy	;wreg free
 13140                           
 13141                           ; BSR set to: 0
 13142                           ;main.c: 965: if (0 != stristr(cmdbuf, "VERBOSE")) {
 13143  006A58  0101               	movlb	1	; () banked
 13144  006A5A  0E01               	movlw	high _cmdbuf
 13145  006A5C  6E27               	movwf	?_stristr+1,c
 13146  006A5E  0E24               	movlw	low _cmdbuf
 13147  006A60  6E26               	movwf	?_stristr,c
 13148  006A62  0E7B               	movlw	high STR_114
 13149  006A64  6E29               	movwf	?_stristr+3,c
 13150  006A66  0EFD               	movlw	low STR_114
 13151  006A68  6E28               	movwf	?_stristr+2,c
 13152  006A6A  ECAB  F013         	call	_stristr	;wreg free
 13153  006A6E  5027               	movf	?_stristr+1,w,c
 13154  006A70  1026               	iorwf	?_stristr,w,c
 13155  006A72  E010               	bz	l13235
 13156                           
 13157                           ;main.c: 966: mode = 0;
 13158  006A74  0100               	movlb	0	; () banked
 13159  006A76  6BD7               	clrf	_mode& (0+255),b
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;main.c: 967: writeEEPROM(0x03, 0);
 13163  006A78  6A1A               	clrf	?_writeEEPROM+1,c
 13164  006A7A  0E03               	movlw	3
 13165  006A7C  6E19               	movwf	?_writeEEPROM,c
 13166  006A7E  0E00               	movlw	0
 13167  006A80  6A1B               	clrf	?_writeEEPROM+2,c
 13168  006A82  ECDE  F00E         	call	_writeEEPROM	;wreg free
 13169                           
 13170                           ;main.c: 968: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 13171  006A86  0E78               	movlw	high STR_115
 13172  006A88  6E1B               	movwf	?_putsUSART+1,c
 13173  006A8A  0E47               	movlw	low STR_115
 13174  006A8C  6E1A               	movwf	?_putsUSART,c
 13175  006A8E  EC50  F011         	call	_putsUSART	;wreg free
 13176                           
 13177                           ;main.c: 969: }
 13178  006A92  D07B               	goto	l13263
 13179  006A94                     l13235:
 13180                           
 13181                           ;main.c: 970: else if (0 != stristr(cmdbuf, "VSCP")) {
 13182  006A94  0101               	movlb	1	; () banked
 13183  006A96  0E01               	movlw	high _cmdbuf
 13184  006A98  6E27               	movwf	?_stristr+1,c
 13185  006A9A  0E24               	movlw	low _cmdbuf
 13186  006A9C  6E26               	movwf	?_stristr,c
 13187  006A9E  0E7C               	movlw	high STR_116
 13188  006AA0  6E29               	movwf	?_stristr+3,c
 13189  006AA2  0EC0               	movlw	low STR_116
 13190  006AA4  6E28               	movwf	?_stristr+2,c
 13191  006AA6  ECAB  F013         	call	_stristr	;wreg free
 13192  006AAA  5027               	movf	?_stristr+1,w,c
 13193  006AAC  1026               	iorwf	?_stristr,w,c
 13194  006AAE  E011               	bz	l13243
 13195                           
 13196                           ;main.c: 971: mode = 1;
 13197  006AB0  0E01               	movlw	1
 13198  006AB2  0100               	movlb	0	; () banked
 13199  006AB4  6FD7               	movwf	_mode& (0+255),b
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;main.c: 972: writeEEPROM(0x03, 1);
 13203  006AB6  6A1A               	clrf	?_writeEEPROM+1,c
 13204  006AB8  0E03               	movlw	3
 13205  006ABA  6E19               	movwf	?_writeEEPROM,c
 13206  006ABC  0E01               	movlw	1
 13207  006ABE  6E1B               	movwf	?_writeEEPROM+2,c
 13208  006AC0  ECDE  F00E         	call	_writeEEPROM	;wreg free
 13209                           
 13210                           ;main.c: 973: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 13211  006AC4  0E77               	movlw	high STR_117
 13212  006AC6  6E1B               	movwf	?_putsUSART+1,c
 13213  006AC8  0ECC               	movlw	low STR_117
 13214  006ACA  6E1A               	movwf	?_putsUSART,c
 13215  006ACC  EC50  F011         	call	_putsUSART	;wreg free
 13216                           
 13217                           ;main.c: 974: }
 13218  006AD0  D05C               	goto	l13263
 13219  006AD2                     l13243:
 13220                           
 13221                           ;main.c: 975: else if (0 != stristr(cmdbuf, "SLCAN")) {
 13222  006AD2  0101               	movlb	1	; () banked
 13223  006AD4  0E01               	movlw	high _cmdbuf
 13224  006AD6  6E27               	movwf	?_stristr+1,c
 13225  006AD8  0E24               	movlw	low _cmdbuf
 13226  006ADA  6E26               	movwf	?_stristr,c
 13227  006ADC  0E7C               	movlw	high STR_118
 13228  006ADE  6E29               	movwf	?_stristr+3,c
 13229  006AE0  0E97               	movlw	low STR_118
 13230  006AE2  6E28               	movwf	?_stristr+2,c
 13231  006AE4  ECAB  F013         	call	_stristr	;wreg free
 13232  006AE8  5027               	movf	?_stristr+1,w,c
 13233  006AEA  1026               	iorwf	?_stristr,w,c
 13234  006AEC  E04E               	bz	l13263
 13235                           
 13236                           ;main.c: 976: mode = 2;
 13237  006AEE  0E02               	movlw	2
 13238  006AF0  0100               	movlb	0	; () banked
 13239  006AF2  6FD7               	movwf	_mode& (0+255),b
 13240                           
 13241                           ; BSR set to: 0
 13242                           ;main.c: 977: writeEEPROM(0x03, 2);
 13243  006AF4  6A1A               	clrf	?_writeEEPROM+1,c
 13244  006AF6  0E03               	movlw	3
 13245  006AF8  6E19               	movwf	?_writeEEPROM,c
 13246  006AFA  0E02               	movlw	2
 13247  006AFC  6E1B               	movwf	?_writeEEPROM+2,c
 13248  006AFE  ECDE  F00E         	call	_writeEEPROM	;wreg free
 13249                           
 13250                           ;main.c: 978: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 13251  006B02  0E78               	movlw	high STR_119
 13252  006B04  6E1B               	movwf	?_putsUSART+1,c
 13253  006B06  0EB4               	movlw	low STR_119
 13254  006B08  6E1A               	movwf	?_putsUSART,c
 13255  006B0A  EC50  F011         	call	_putsUSART	;wreg free
 13256  006B0E  D03D               	goto	l13263
 13257  006B10                     l13251:
 13258                           
 13259                           ;main.c: 982: else if (0 != stristr(cmdbuf, "FILTER ")) {
 13260  006B10  0101               	movlb	1	; () banked
 13261  006B12  0E01               	movlw	high _cmdbuf
 13262  006B14  6E27               	movwf	?_stristr+1,c
 13263  006B16  0E24               	movlw	low _cmdbuf
 13264  006B18  6E26               	movwf	?_stristr,c
 13265  006B1A  0E7B               	movlw	high STR_120
 13266  006B1C  6E29               	movwf	?_stristr+3,c
 13267  006B1E  0EED               	movlw	low STR_120
 13268  006B20  6E28               	movwf	?_stristr+2,c
 13269  006B22  ECAB  F013         	call	_stristr	;wreg free
 13270  006B26  5027               	movf	?_stristr+1,w,c
 13271  006B28  1026               	iorwf	?_stristr,w,c
 13272  006B2A  E010               	bz	l13255
 13273                           
 13274                           ;main.c: 983: strcpy( cmdbuf, cmdbuf + 7);
 13275  006B2C  0E01               	movlw	high _cmdbuf
 13276  006B2E  6E1A               	movwf	?_strcpy+1,c
 13277  006B30  0E24               	movlw	low _cmdbuf
 13278  006B32  6E19               	movwf	?_strcpy,c
 13279  006B34  0E2B               	movlw	low (_cmdbuf+7)
 13280  006B36  0100               	movlb	0	; () banked
 13281  006B38  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13282  006B3A  0E01               	movlw	high (_cmdbuf+7)
 13283  006B3C  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13284  006B3E  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13285  006B42  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13286  006B46  EC07  F00F         	call	_strcpy	;wreg free
 13287                           
 13288                           ;main.c: 984: }
 13289  006B4A  D01F               	goto	l13263
 13290  006B4C                     l13255:
 13291                           
 13292                           ;main.c: 986: else if (0 != stristr(cmdbuf, "MASK ")) {
 13293  006B4C  0101               	movlb	1	; () banked
 13294  006B4E  0E01               	movlw	high _cmdbuf
 13295  006B50  6E27               	movwf	?_stristr+1,c
 13296  006B52  0E24               	movlw	low _cmdbuf
 13297  006B54  6E26               	movwf	?_stristr,c
 13298  006B56  0E7C               	movlw	high STR_121
 13299  006B58  6E29               	movwf	?_stristr+3,c
 13300  006B5A  0E8B               	movlw	low STR_121
 13301  006B5C  6E28               	movwf	?_stristr+2,c
 13302  006B5E  ECAB  F013         	call	_stristr	;wreg free
 13303  006B62  5027               	movf	?_stristr+1,w,c
 13304  006B64  1026               	iorwf	?_stristr,w,c
 13305  006B66  E004               	bz	l13259
 13306                           
 13307                           ;main.c: 987: strcpy( cmdbuf, cmdbuf + 5);
 13308  006B68  D853               	call	PL10	;call to abstracted procedure
 13309  006B6A  EC07  F00F         	call	_strcpy	;wreg free
 13310                           
 13311                           ;main.c: 988: }
 13312  006B6E  D00D               	goto	l13263
 13313  006B70                     l13259:
 13314                           
 13315                           ;main.c: 989: else {
 13316                           ;main.c: 990: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 13317  006B70  0E77               	movlw	high STR_122
 13318  006B72  6E1B               	movwf	?_putsUSART+1,c
 13319  006B74  0E69               	movlw	low STR_122
 13320  006B76  6E1A               	movwf	?_putsUSART,c
 13321  006B78  EC50  F011         	call	_putsUSART	;wreg free
 13322  006B7C  D006               	goto	l13263
 13323  006B7E                     l13261:
 13324                           
 13325                           ; BSR set to: 0
 13326                           ;main.c: 994: else {
 13327                           ;main.c: 995: putsUSART((char *) "-ERROR - Unknown command\r\n");
 13328  006B7E  0E78               	movlw	high STR_123
 13329  006B80  6E1B               	movwf	?_putsUSART+1,c
 13330  006B82  0E7E               	movlw	low STR_123
 13331  006B84  6E1A               	movwf	?_putsUSART,c
 13332  006B86  EC50  F011         	call	_putsUSART	;wreg free
 13333  006B8A                     l13263:
 13334                           
 13335                           ;main.c: 996: }
 13336                           ;main.c: 998: memset(cmdbuf, 0, sizeof( cmdbuf));
 13337  006B8A  0101               	movlb	1	; () banked
 13338  006B8C  0E01               	movlw	high _cmdbuf
 13339  006B8E  6E1A               	movwf	?_memset+1,c
 13340  006B90  0E24               	movlw	low _cmdbuf
 13341  006B92  6E19               	movwf	?_memset,c
 13342  006B94  6A1C               	clrf	?_memset+3,c
 13343  006B96  6A1B               	clrf	?_memset+2,c
 13344  006B98  6A1E               	clrf	?_memset+5,c
 13345  006B9A  0E50               	movlw	80
 13346  006B9C  6E1D               	movwf	?_memset+4,c
 13347  006B9E  ECF1  F00E         	call	_memset	;wreg free
 13348                           
 13349                           ;main.c: 999: pos = 0;
 13350  006BA2  0100               	movlb	0	; () banked
 13351  006BA4  6BD8               	clrf	_pos& (0+255),b
 13352  006BA6                     l13267:
 13353                           
 13354                           ;main.c: 1000: }
 13355                           ;main.c: 1001: }
 13356                           ;main.c: 1004: (INTCONbits.GIE = 1);
 13357  006BA6  8EF2               	bsf	intcon,7,c	;volatile
 13358  006BA8                     l491:
 13359  006BA8  0012               	return	
 13360  006BAA                     __end_of_doModeVerbose:
 13361                           	opt stack 0
 13362  006BAA                     PL2:
 13363                           	opt stack 20
 13364  006BAA  0E24               	movlw	low _cmdbuf
 13365  006BAC  0100               	movlb	0	; () banked
 13366  006BAE  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13367  006BB0  0E01               	movlw	high _cmdbuf
 13368  006BB2  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13369  006BB4  1827               	xorwf	?_stristr+1,w,c
 13370  006BB6  0012               	return	
 13371  006BB8                     __end_ofPL2:
 13372                           	opt stack 0
 13373  006BB8                     PL6:
 13374                           	opt stack 20
 13375  006BB8  6A26               	clrf	?_strtok+1,c
 13376  006BBA  6A25               	clrf	?_strtok,c
 13377  006BBC  0E7C               	movlw	high STR_29
 13378  006BBE  6E28               	movwf	?_strtok+3,c
 13379  006BC0  0EF4               	movlw	low STR_29
 13380  006BC2  6E27               	movwf	?_strtok+2,c
 13381  006BC4  0012               	return	
 13382  006BC6                     __end_ofPL6:
 13383                           	opt stack 0
 13384  006BC6                     PL8:
 13385                           	opt stack 20
 13386  006BC6  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 13387  006BC8  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 13388  006BCA  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 13389  006BCC  0E1A               	movlw	26
 13390  006BCE                     u17295:
 13391  006BCE  90D8               	bcf	status,0,c
 13392  006BD0  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 13393  006BD2  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 13394  006BD4  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 13395  006BD6  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 13396  006BD8  2EE8               	decfsz	wreg,f,c
 13397  006BDA  D7F9               	goto	u17295
 13398  006BDC  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 13399  006BDE  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 13400  006BE0  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 13401  006BE2  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 13402  006BE4  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 13403  006BE6  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 13404  006BE8  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 13405  006BEA  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 13406  006BEC  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 13407  006BEE  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 13408  006BF0  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 13409  006BF2  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 13410  006BF4  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13411  006BF6  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 13412  006BF8  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 13413  006BFA  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 13414  006BFC  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 13415  006BFE  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 13416  006C00  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 13417  006C02  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 13418  006C04  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 13419  006C06  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 13420  006C08  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 13421  006C0A  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 13422  006C0C  0103               	movlb	3	; () banked
 13423  006C0E  0012               	return	
 13424  006C10                     __end_ofPL8:
 13425                           	opt stack 0
 13426  006C10                     PL10:
 13427                           	opt stack 20
 13428  006C10  0E01               	movlw	high _cmdbuf
 13429  006C12  6E1A               	movwf	?_strcpy+1,c
 13430  006C14  0E24               	movlw	low _cmdbuf
 13431  006C16  6E19               	movwf	?_strcpy,c
 13432  006C18  0E29               	movlw	low (_cmdbuf+5)
 13433  006C1A  0100               	movlb	0	; () banked
 13434  006C1C  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13435  006C1E  0E01               	movlw	high (_cmdbuf+5)
 13436  006C20  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13437  006C22  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13438  006C26  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13439  006C2A  0012               	return	
 13440  006C2C                     __end_ofPL10:
 13441                           	opt stack 0
 13442  006C2C                     PL16:
 13443                           	opt stack 20
 13444  006C2C  6E1A               	movwf	?_strcpy+1,c
 13445  006C2E  0E24               	movlw	low _cmdbuf
 13446  006C30  6E19               	movwf	?_strcpy,c
 13447  006C32  0E2C               	movlw	low (_cmdbuf+8)
 13448  006C34  0100               	movlb	0	; () banked
 13449  006C36  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13450  006C38  0E01               	movlw	high (_cmdbuf+8)
 13451  006C3A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13452  006C3C  C0B2  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13453  006C40  C0B3  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13454  006C44  0012               	return	
 13455  006C46                     __end_ofPL16:
 13456                           	opt stack 0
 13457  006C46                     PL30:
 13458                           	opt stack 20
 13459  006C46  0101               	movlb	1	; () banked
 13460  006C48  0E01               	movlw	high _cmdbuf
 13461  006C4A  6E26               	movwf	?_strtok+1,c
 13462  006C4C  0E24               	movlw	low _cmdbuf
 13463  006C4E  6E25               	movwf	?_strtok,c
 13464  006C50  0E7C               	movlw	high STR_29
 13465  006C52  6E28               	movwf	?_strtok+3,c
 13466  006C54  0EF4               	movlw	low STR_29
 13467  006C56  6E27               	movwf	?_strtok+2,c
 13468  006C58  0012               	return	
 13469  006C5A                     __end_ofPL30:
 13470                           	opt stack 0
 13471  006C5A                     PL34:
 13472                           	opt stack 20
 13473  006C5A  0E01               	movlw	high _cmdbuf
 13474  006C5C  6E26               	movwf	?_strtok+1,c
 13475  006C5E  0E24               	movlw	low _cmdbuf
 13476  006C60  6E25               	movwf	?_strtok,c
 13477  006C62  0E7C               	movlw	high (STR_247+5)
 13478  006C64  6E28               	movwf	?_strtok+3,c
 13479  006C66  0E2A               	movlw	low (STR_247+5)
 13480  006C68  6E27               	movwf	?_strtok+2,c
 13481  006C6A  0012               	return	
 13482  006C6C                     __end_ofPL34:
 13483                           	opt stack 0
 13484  006C6C                     PL36:
 13485                           	opt stack 20
 13486  006C6C  6A26               	clrf	?_strtok+1,c
 13487  006C6E  6A25               	clrf	?_strtok,c
 13488  006C70  0E7C               	movlw	high (STR_247+5)
 13489  006C72  6E28               	movwf	?_strtok+3,c
 13490  006C74  0E2A               	movlw	low (STR_247+5)
 13491  006C76  6E27               	movwf	?_strtok+2,c
 13492  006C78  0012               	return	
 13493  006C7A                     __end_ofPL36:
 13494                           	opt stack 0
 13495  006C7A                     PL40:
 13496                           	opt stack 20
 13497  006C7A  0103               	movlb	3	; () banked
 13498  006C7C  5130               	movf	doModeVerbose@i_1064& (0+255),w,b
 13499  006C7E  C32E  F0B2         	movff	doModeVerbose@reg,??_doModeVerbose
 13500  006C82  0100               	movlb	0	; () banked
 13501  006C84  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 13502  006C86  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 13503  006C88  0E00               	movlw	0
 13504  006C8A  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 13505  006C8C  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13506  006C8E  6F64               	movwf	(?_sprintf+4)& (0+255),b
 13507  006C90  6B65               	clrf	(?_sprintf+5)& (0+255),b
 13508  006C92  0012               	return	
 13509  006C94                     __end_ofPL40:
 13510                           	opt stack 0
 13511  006C94                     PL42:
 13512                           	opt stack 20
 13513  006C94  0100               	movlb	0	; () banked
 13514  006C96  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 13515  006C98  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 13516  006C9A  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 13517  006C9C  C0B4  F0B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 13518  006CA0  C0B3  F0B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 13519  006CA4  C0B2  F0B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 13520  006CA8  6BB2               	clrf	??_doModeVerbose& (0+255),b
 13521  006CAA  0103               	movlb	3	; () banked
 13522  006CAC  0012               	return	
 13523  006CAE                     __end_ofPL42:
 13524                           	opt stack 0
 13525  006CAE                     PL54:
 13526                           	opt stack 20
 13527  006CAE  6E19               	movwf	?__CANIDToRegs,c
 13528  006CB0  C323  F01B         	movff	doModeVerbose@id_1173,?__CANIDToRegs+2
 13529  006CB4  C324  F01C         	movff	doModeVerbose@id_1173+1,?__CANIDToRegs+3
 13530  006CB8  C325  F01D         	movff	doModeVerbose@id_1173+2,?__CANIDToRegs+4
 13531  006CBC  C326  F01E         	movff	doModeVerbose@id_1173+3,?__CANIDToRegs+5
 13532  006CC0  0E01               	movlw	1
 13533  006CC2  6E1F               	movwf	?__CANIDToRegs+6,c
 13534  006CC4  0C01               	retlw	1
 13535  006CC6                     __end_ofPL54:
 13536                           	opt stack 0
 13537  006CC6                     PL56:
 13538                           	opt stack 20
 13539  006CC6  0100               	movlb	0	; () banked
 13540  006CC8  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 13541  006CCA  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 13542  006CCC  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 13543  006CCE  C0B7  F0B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 13544  006CD2  C0B6  F0B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 13545  006CD6  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 13546  006CD8  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 13547  006CDA  0012               	return	
 13548  006CDC                     __end_ofPL56:
 13549                           	opt stack 0
 13550                           tblptru	equ	0xFF8
 13551                           tblptrh	equ	0xFF7
 13552                           tblptrl	equ	0xFF6
 13553                           tablat	equ	0xFF5
 13554                           prodh	equ	0xFF4
 13555                           prodl	equ	0xFF3
 13556                           intcon	equ	0xFF2
 13557                           indf0	equ	0xFEF
 13558                           postinc0	equ	0xFEE
 13559                           fsr0h	equ	0xFEA
 13560                           fsr0l	equ	0xFE9
 13561                           wreg	equ	0xFE8
 13562                           indf1	equ	0xFE7
 13563                           postinc1	equ	0xFE6
 13564                           postdec1	equ	0xFE5
 13565                           fsr1h	equ	0xFE2
 13566                           fsr1l	equ	0xFE1
 13567                           indf2	equ	0xFDF
 13568                           postinc2	equ	0xFDE
 13569                           postdec2	equ	0xFDD
 13570                           plusw2	equ	0xFDB
 13571                           fsr2h	equ	0xFDA
 13572                           fsr2l	equ	0xFD9
 13573                           status	equ	0xFD8
 13574                           
 13575 ;; *************** function _setFilter *****************
 13576 ;; Defined at:
 13577 ;;		line 2521 in file "main.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;  filter          1    wreg     unsigned char 
 13580 ;;  val             4   24[COMRAM] unsigned long 
 13581 ;; Auto vars:     Size  Location     Type
 13582 ;;  filter          1   34[COMRAM] unsigned char 
 13583 ;;  eidl            1   38[COMRAM] unsigned char 
 13584 ;;  eidh            1   37[COMRAM] unsigned char 
 13585 ;;  sidl            1   36[COMRAM] unsigned char 
 13586 ;;  sidh            1   35[COMRAM] unsigned char 
 13587 ;; Return value:  Size  Location     Type
 13588 ;;		None               void
 13589 ;; Registers used:
 13590 ;;		wreg, status,2, status,0
 13591 ;; Tracked objects:
 13592 ;;		On entry : F/3
 13593 ;;		On exit  : F/3
 13594 ;;		Unchanged: E/0
 13595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13596 ;;      Params:         4       0       0       0       0       0       0
 13597 ;;      Locals:         5       0       0       0       0       0       0
 13598 ;;      Temps:          6       0       0       0       0       0       0
 13599 ;;      Totals:        15       0       0       0       0       0       0
 13600 ;;Total ram usage:       15 bytes
 13601 ;; Hardware stack levels used:    1
 13602 ;; Hardware stack levels required when called:    2
 13603 ;; This function calls:
 13604 ;;		Nothing
 13605 ;; This function is called by:
 13606 ;;		_doModeVerbose
 13607 ;; This function uses a non-reentrant model
 13608 ;;
 13609                           
 13610                           	psect	text20
 13611  004638                     __ptext20:
 13612                           	opt stack 0
 13613  004638                     _setFilter:
 13614                           	opt stack 26
 13615                           
 13616                           ;incstack = 0
 13617                           ;incstack = 0
 13618                           ;setFilter@filter stored from wreg
 13619  004638  CFE8 F023          	movff	wreg,setFilter@filter
 13620                           
 13621                           ; BSR set to: 3
 13622                           ;main.c: 2522: uint8_t sidh = (long)val >> 21L;
 13623  00463C  0E15               	movlw	21
 13624  00463E  6E1D               	movwf	??_setFilter& (0+255),c
 13625  004640  C019  F01E         	movff	setFilter@val,??_setFilter+1
 13626  004644  C01A  F01F         	movff	setFilter@val+1,??_setFilter+2
 13627  004648  C01B  F020         	movff	setFilter@val+2,??_setFilter+3
 13628  00464C  C01C  F021         	movff	setFilter@val+3,??_setFilter+4
 13629  004650                     u14545:
 13630  004650  661D               	tstfsz	??_setFilter,c
 13631  004652  D001               	goto	u14546
 13632  004654  D007               	goto	u14547
 13633  004656                     u14546:
 13634  004656  3421               	rlcf	??_setFilter+4,w,c
 13635  004658  3221               	rrcf	??_setFilter+4,f,c
 13636  00465A  3220               	rrcf	??_setFilter+3,f,c
 13637  00465C  321F               	rrcf	??_setFilter+2,f,c
 13638  00465E  321E               	rrcf	??_setFilter+1,f,c
 13639  004660  2E1D               	decfsz	??_setFilter,f,c
 13640  004662  D7F6               	goto	u14545
 13641  004664                     u14547:
 13642  004664  501E               	movf	??_setFilter+1,w,c
 13643  004666  6E24               	movwf	setFilter@sidh,c
 13644                           
 13645                           ;main.c: 2523: uint8_t sidl = ( ( (long)val >> 13L) & 0xe0) |
 13646                           ;main.c: 2524: ( (long)(val) & 0x03L) |
 13647                           ;main.c: 2525: 0x08;
 13648  004668  C019  F01D         	movff	setFilter@val,??_setFilter
 13649  00466C  0E03               	movlw	3
 13650  00466E  161D               	andwf	??_setFilter,f,c
 13651  004670  0E0D               	movlw	13
 13652  004672  6E1E               	movwf	(??_setFilter+1)& (0+255),c
 13653  004674  C019  F01F         	movff	setFilter@val,??_setFilter+2
 13654  004678  C01A  F020         	movff	setFilter@val+1,??_setFilter+3
 13655  00467C  C01B  F021         	movff	setFilter@val+2,??_setFilter+4
 13656  004680  C01C  F022         	movff	setFilter@val+3,??_setFilter+5
 13657  004684                     u14555:
 13658  004684  661E               	tstfsz	??_setFilter+1,c
 13659  004686  D001               	goto	u14556
 13660  004688  D007               	goto	u14557
 13661  00468A                     u14556:
 13662  00468A  3422               	rlcf	??_setFilter+5,w,c
 13663  00468C  3222               	rrcf	??_setFilter+5,f,c
 13664  00468E  3221               	rrcf	??_setFilter+4,f,c
 13665  004690  3220               	rrcf	??_setFilter+3,f,c
 13666  004692  321F               	rrcf	??_setFilter+2,f,c
 13667  004694  2E1E               	decfsz	??_setFilter+1,f,c
 13668  004696  D7F6               	goto	u14555
 13669  004698                     u14557:
 13670  004698  501F               	movf	??_setFilter+2,w,c
 13671  00469A  0BE0               	andlw	224
 13672  00469C  101D               	iorwf	??_setFilter,w,c
 13673  00469E  0908               	iorlw	8
 13674  0046A0  6E25               	movwf	setFilter@sidl,c
 13675                           
 13676                           ; BSR set to: 3
 13677                           ;main.c: 2526: uint8_t eidh = (long)val >> 8L;
 13678  0046A2  C01A  F026         	movff	setFilter@val+1,setFilter@eidh
 13679                           
 13680                           ; BSR set to: 3
 13681                           ;main.c: 2527: uint8_t eidl = val;
 13682  0046A6  C019  F027         	movff	setFilter@val,setFilter@eidl
 13683                           
 13684                           ;main.c: 2529: switch ( filter ) {
 13685  0046AA  D090               	goto	l11509
 13686  0046AC                     l1131:
 13687                           
 13688                           ; BSR set to: 3
 13689                           ;main.c: 2532: RXF0SIDH = sidh;
 13690  0046AC  C024  FF00         	movff	setFilter@sidh,3840	;volatile
 13691                           
 13692                           ;main.c: 2533: RXF0SIDL = sidl;
 13693  0046B0  C025  FF01         	movff	setFilter@sidl,3841	;volatile
 13694                           
 13695                           ;main.c: 2534: RXF0EIDH = eidh;
 13696  0046B4  C026  FF02         	movff	setFilter@eidh,3842	;volatile
 13697                           
 13698                           ;main.c: 2535: RXF0EIDL = eidl;
 13699  0046B8  C027  FF03         	movff	setFilter@eidl,3843	;volatile
 13700                           
 13701                           ;main.c: 2536: break;
 13702  0046BC  D0AA               	goto	l1148
 13703  0046BE                     l1133:
 13704                           
 13705                           ; BSR set to: 3
 13706                           ;main.c: 2539: RXF1SIDH = sidh;
 13707  0046BE  C024  FF04         	movff	setFilter@sidh,3844	;volatile
 13708                           
 13709                           ;main.c: 2540: RXF1SIDL = sidl;
 13710  0046C2  C025  FF05         	movff	setFilter@sidl,3845	;volatile
 13711                           
 13712                           ;main.c: 2541: RXF1EIDH = eidh;
 13713  0046C6  C026  FF06         	movff	setFilter@eidh,3846	;volatile
 13714                           
 13715                           ;main.c: 2542: RXF1EIDL = eidl;
 13716  0046CA  C027  FF07         	movff	setFilter@eidl,3847	;volatile
 13717                           
 13718                           ;main.c: 2543: break;
 13719  0046CE  D0A1               	goto	l1148
 13720  0046D0                     l1134:
 13721                           
 13722                           ; BSR set to: 3
 13723                           ;main.c: 2546: RXF2SIDH = sidh;
 13724  0046D0  C024  FF08         	movff	setFilter@sidh,3848	;volatile
 13725                           
 13726                           ;main.c: 2547: RXF2SIDL = sidl;
 13727  0046D4  C025  FF09         	movff	setFilter@sidl,3849	;volatile
 13728                           
 13729                           ;main.c: 2548: RXF2EIDH = eidh;
 13730  0046D8  C026  FF0A         	movff	setFilter@eidh,3850	;volatile
 13731                           
 13732                           ;main.c: 2549: RXF2EIDL = eidl;
 13733  0046DC  C027  FF0B         	movff	setFilter@eidl,3851	;volatile
 13734                           
 13735                           ;main.c: 2550: break;
 13736  0046E0  D098               	goto	l1148
 13737  0046E2                     l1135:
 13738                           
 13739                           ; BSR set to: 3
 13740                           ;main.c: 2553: RXF3SIDH = sidh;
 13741  0046E2  C024  FF0C         	movff	setFilter@sidh,3852	;volatile
 13742                           
 13743                           ;main.c: 2554: RXF3SIDL = sidl;
 13744  0046E6  C025  FF0D         	movff	setFilter@sidl,3853	;volatile
 13745                           
 13746                           ;main.c: 2555: RXF3EIDH = eidh;
 13747  0046EA  C026  FF0E         	movff	setFilter@eidh,3854	;volatile
 13748                           
 13749                           ;main.c: 2556: RXF3EIDL = eidl;
 13750  0046EE  C027  FF0F         	movff	setFilter@eidl,3855	;volatile
 13751                           
 13752                           ;main.c: 2557: break;
 13753  0046F2  D08F               	goto	l1148
 13754  0046F4                     l1136:
 13755                           
 13756                           ; BSR set to: 3
 13757                           ;main.c: 2560: RXF4SIDH = sidh;
 13758  0046F4  C024  FF10         	movff	setFilter@sidh,3856	;volatile
 13759                           
 13760                           ;main.c: 2561: RXF4SIDL = sidl;
 13761  0046F8  C025  FF11         	movff	setFilter@sidl,3857	;volatile
 13762                           
 13763                           ;main.c: 2562: RXF4EIDH = eidh;
 13764  0046FC  C026  FF12         	movff	setFilter@eidh,3858	;volatile
 13765                           
 13766                           ;main.c: 2563: RXF4EIDL = eidl;
 13767  004700  C027  FF13         	movff	setFilter@eidl,3859	;volatile
 13768                           
 13769                           ;main.c: 2564: break;
 13770  004704  D086               	goto	l1148
 13771  004706                     l1137:
 13772                           
 13773                           ; BSR set to: 3
 13774                           ;main.c: 2567: RXF5SIDH = sidh;
 13775  004706  C024  FF14         	movff	setFilter@sidh,3860	;volatile
 13776                           
 13777                           ;main.c: 2568: RXF5SIDL = sidl;
 13778  00470A  C025  FF15         	movff	setFilter@sidl,3861	;volatile
 13779                           
 13780                           ;main.c: 2569: RXF5EIDH = eidh;
 13781  00470E  C026  FF16         	movff	setFilter@eidh,3862	;volatile
 13782                           
 13783                           ;main.c: 2570: RXF5EIDL = eidl;
 13784  004712  C027  FF17         	movff	setFilter@eidl,3863	;volatile
 13785                           
 13786                           ;main.c: 2571: break;
 13787  004716  D07D               	goto	l1148
 13788  004718                     l1138:
 13789                           
 13790                           ; BSR set to: 3
 13791                           ;main.c: 2574: RXF6SIDH = sidh;
 13792  004718  C024  FD60         	movff	setFilter@sidh,3424	;volatile
 13793                           
 13794                           ;main.c: 2575: RXF6SIDL = sidl;
 13795  00471C  C025  FD61         	movff	setFilter@sidl,3425	;volatile
 13796                           
 13797                           ;main.c: 2576: RXF6EIDH = eidh;
 13798  004720  C026  FD62         	movff	setFilter@eidh,3426	;volatile
 13799                           
 13800                           ;main.c: 2577: RXF6EIDL = eidl;
 13801  004724  C027  FD63         	movff	setFilter@eidl,3427	;volatile
 13802                           
 13803                           ;main.c: 2578: break;
 13804  004728  D074               	goto	l1148
 13805  00472A                     l1139:
 13806                           
 13807                           ; BSR set to: 3
 13808                           ;main.c: 2581: RXF7SIDH = sidh;
 13809  00472A  C024  FD64         	movff	setFilter@sidh,3428	;volatile
 13810                           
 13811                           ;main.c: 2582: RXF7SIDL = sidl;
 13812  00472E  C025  FD65         	movff	setFilter@sidl,3429	;volatile
 13813                           
 13814                           ;main.c: 2583: RXF7EIDH = eidh;
 13815  004732  C026  FD66         	movff	setFilter@eidh,3430	;volatile
 13816                           
 13817                           ;main.c: 2584: RXF7EIDL = eidl;
 13818  004736  C027  FD67         	movff	setFilter@eidl,3431	;volatile
 13819                           
 13820                           ;main.c: 2585: break;
 13821  00473A  D06B               	goto	l1148
 13822  00473C                     l1140:
 13823                           
 13824                           ; BSR set to: 3
 13825                           ;main.c: 2588: RXF8SIDH = sidh;
 13826  00473C  C024  FD68         	movff	setFilter@sidh,3432	;volatile
 13827                           
 13828                           ;main.c: 2589: RXF8SIDL = sidl;
 13829  004740  C025  FD69         	movff	setFilter@sidl,3433	;volatile
 13830                           
 13831                           ;main.c: 2590: RXF8EIDH = eidh;
 13832  004744  C026  FD6A         	movff	setFilter@eidh,3434	;volatile
 13833                           
 13834                           ;main.c: 2591: RXF8EIDL = eidl;
 13835  004748  C027  FD6B         	movff	setFilter@eidl,3435	;volatile
 13836                           
 13837                           ;main.c: 2592: break;
 13838  00474C  D062               	goto	l1148
 13839  00474E                     l1141:
 13840                           
 13841                           ; BSR set to: 3
 13842                           ;main.c: 2595: RXF9SIDH = sidh;
 13843  00474E  C024  FD70         	movff	setFilter@sidh,3440	;volatile
 13844                           
 13845                           ;main.c: 2596: RXF9SIDL = sidl;
 13846  004752  C025  FD71         	movff	setFilter@sidl,3441	;volatile
 13847                           
 13848                           ;main.c: 2597: RXF9EIDH = eidh;
 13849  004756  C026  FD72         	movff	setFilter@eidh,3442	;volatile
 13850                           
 13851                           ;main.c: 2598: RXF9EIDL = eidl;
 13852  00475A  C027  FD73         	movff	setFilter@eidl,3443	;volatile
 13853                           
 13854                           ;main.c: 2599: break;
 13855  00475E  D059               	goto	l1148
 13856  004760                     l1142:
 13857                           
 13858                           ; BSR set to: 3
 13859                           ;main.c: 2602: RXF10SIDH = sidh;
 13860  004760  C024  FD74         	movff	setFilter@sidh,3444	;volatile
 13861                           
 13862                           ;main.c: 2603: RXF10SIDL = sidl;
 13863  004764  C025  FD75         	movff	setFilter@sidl,3445	;volatile
 13864                           
 13865                           ;main.c: 2604: RXF10EIDH = eidh;
 13866  004768  C026  FD76         	movff	setFilter@eidh,3446	;volatile
 13867                           
 13868                           ;main.c: 2605: RXF10EIDL = eidl;
 13869  00476C  C027  FD77         	movff	setFilter@eidl,3447	;volatile
 13870                           
 13871                           ;main.c: 2606: break;
 13872  004770  D050               	goto	l1148
 13873  004772                     l1143:
 13874                           
 13875                           ; BSR set to: 3
 13876                           ;main.c: 2609: RXF11SIDH = sidh;
 13877  004772  C024  FD78         	movff	setFilter@sidh,3448	;volatile
 13878                           
 13879                           ;main.c: 2610: RXF11SIDL = sidl;
 13880  004776  C025  FD79         	movff	setFilter@sidl,3449	;volatile
 13881                           
 13882                           ;main.c: 2611: RXF11EIDH = eidh;
 13883  00477A  C026  FD7A         	movff	setFilter@eidh,3450	;volatile
 13884                           
 13885                           ;main.c: 2612: RXF11EIDL = eidl;
 13886  00477E  C027  FD7B         	movff	setFilter@eidl,3451	;volatile
 13887                           
 13888                           ;main.c: 2613: break;
 13889  004782  D047               	goto	l1148
 13890  004784                     l1144:
 13891                           
 13892                           ; BSR set to: 3
 13893                           ;main.c: 2616: RXF12SIDH = sidh;
 13894  004784  C024  FD80         	movff	setFilter@sidh,3456	;volatile
 13895                           
 13896                           ;main.c: 2617: RXF12SIDL = sidl;
 13897  004788  C025  FD81         	movff	setFilter@sidl,3457	;volatile
 13898                           
 13899                           ;main.c: 2618: RXF12EIDH = eidh;
 13900  00478C  C026  FD82         	movff	setFilter@eidh,3458	;volatile
 13901                           
 13902                           ;main.c: 2619: RXF12EIDL = eidl;
 13903  004790  C027  FD83         	movff	setFilter@eidl,3459	;volatile
 13904                           
 13905                           ;main.c: 2620: break;
 13906  004794  D03E               	goto	l1148
 13907  004796                     l1145:
 13908                           
 13909                           ; BSR set to: 3
 13910                           ;main.c: 2623: RXF13SIDH = sidh;
 13911  004796  C024  FD84         	movff	setFilter@sidh,3460	;volatile
 13912                           
 13913                           ;main.c: 2624: RXF13SIDL = sidl;
 13914  00479A  C025  FD85         	movff	setFilter@sidl,3461	;volatile
 13915                           
 13916                           ;main.c: 2625: RXF13EIDH = eidh;
 13917  00479E  C026  FD86         	movff	setFilter@eidh,3462	;volatile
 13918                           
 13919                           ;main.c: 2626: RXF13EIDL = eidl;
 13920  0047A2  C027  FD87         	movff	setFilter@eidl,3463	;volatile
 13921                           
 13922                           ;main.c: 2627: break;
 13923  0047A6  D035               	goto	l1148
 13924  0047A8                     l1146:
 13925                           
 13926                           ; BSR set to: 3
 13927                           ;main.c: 2630: RXF14SIDH = sidh;
 13928  0047A8  C024  FD88         	movff	setFilter@sidh,3464	;volatile
 13929                           
 13930                           ;main.c: 2631: RXF14SIDL = sidl;
 13931  0047AC  C025  FD89         	movff	setFilter@sidl,3465	;volatile
 13932                           
 13933                           ;main.c: 2632: RXF14EIDH = eidh;
 13934  0047B0  C026  FD8A         	movff	setFilter@eidh,3466	;volatile
 13935                           
 13936                           ;main.c: 2633: RXF14EIDL = eidl;
 13937  0047B4  C027  FD8B         	movff	setFilter@eidl,3467	;volatile
 13938                           
 13939                           ;main.c: 2634: break;
 13940  0047B8  D02C               	goto	l1148
 13941  0047BA                     l1147:
 13942                           
 13943                           ; BSR set to: 3
 13944                           ;main.c: 2637: RXF15SIDH = sidh;
 13945  0047BA  C024  FD90         	movff	setFilter@sidh,3472	;volatile
 13946                           
 13947                           ;main.c: 2638: RXF15SIDL = sidl;
 13948  0047BE  C025  FD91         	movff	setFilter@sidl,3473	;volatile
 13949                           
 13950                           ;main.c: 2639: RXF15EIDH = eidh;
 13951  0047C2  C026  FD92         	movff	setFilter@eidh,3474	;volatile
 13952                           
 13953                           ;main.c: 2640: RXF15EIDL = eidl;
 13954  0047C6  C027  FD93         	movff	setFilter@eidl,3475	;volatile
 13955                           
 13956                           ;main.c: 2641: break;
 13957  0047CA  D023               	goto	l1148
 13958  0047CC                     l11509:
 13959                           
 13960                           ; BSR set to: 3
 13961  0047CC  5023               	movf	setFilter@filter,w,c
 13962                           
 13963                           ; Switch size 1, requested type "space"
 13964                           ; Number of cases is 16, Range of values is 0 to 15
 13965                           ; switch strategies available:
 13966                           ; Name         Instructions Cycles
 13967                           ; simple_byte           49    25 (average)
 13968                           ;	Chosen strategy is simple_byte
 13969  0047CE  E101 D76D          	bz	l1131
 13970  0047D2  0A01               	xorlw	1	; case 1
 13971  0047D4  E101 D773          	bz	l1133
 13972  0047D8  0A03               	xorlw	3	; case 2
 13973  0047DA  E101 D779          	bz	l1134
 13974  0047DE  0A01               	xorlw	1	; case 3
 13975  0047E0  E080               	bz	l1135
 13976  0047E2  0A07               	xorlw	7	; case 4
 13977  0047E4  E087               	bz	l1136
 13978  0047E6  0A01               	xorlw	1	; case 5
 13979  0047E8  E08E               	bz	l1137
 13980  0047EA  0A03               	xorlw	3	; case 6
 13981  0047EC  E095               	bz	l1138
 13982  0047EE  0A01               	xorlw	1	; case 7
 13983  0047F0  E09C               	bz	l1139
 13984  0047F2  0A0F               	xorlw	15	; case 8
 13985  0047F4  E0A3               	bz	l1140
 13986  0047F6  0A01               	xorlw	1	; case 9
 13987  0047F8  E0AA               	bz	l1141
 13988  0047FA  0A03               	xorlw	3	; case 10
 13989  0047FC  E0B1               	bz	l1142
 13990  0047FE  0A01               	xorlw	1	; case 11
 13991  004800  E0B8               	bz	l1143
 13992  004802  0A07               	xorlw	7	; case 12
 13993  004804  E0BF               	bz	l1144
 13994  004806  0A01               	xorlw	1	; case 13
 13995  004808  E0C6               	bz	l1145
 13996  00480A  0A03               	xorlw	3	; case 14
 13997  00480C  E0CD               	bz	l1146
 13998  00480E  0A01               	xorlw	1	; case 15
 13999  004810  E0D4               	bz	l1147
 14000  004812                     l1148:
 14001                           
 14002                           ; BSR set to: 3
 14003  004812  0012               	return	
 14004  004814                     __end_of_setFilter:
 14005                           	opt stack 0
 14006                           tblptru	equ	0xFF8
 14007                           tblptrh	equ	0xFF7
 14008                           tblptrl	equ	0xFF6
 14009                           tablat	equ	0xFF5
 14010                           prodh	equ	0xFF4
 14011                           prodl	equ	0xFF3
 14012                           intcon	equ	0xFF2
 14013                           indf0	equ	0xFEF
 14014                           postinc0	equ	0xFEE
 14015                           fsr0h	equ	0xFEA
 14016                           fsr0l	equ	0xFE9
 14017                           wreg	equ	0xFE8
 14018                           indf1	equ	0xFE7
 14019                           postinc1	equ	0xFE6
 14020                           postdec1	equ	0xFE5
 14021                           fsr1h	equ	0xFE2
 14022                           fsr1l	equ	0xFE1
 14023                           indf2	equ	0xFDF
 14024                           postinc2	equ	0xFDE
 14025                           postdec2	equ	0xFDD
 14026                           plusw2	equ	0xFDB
 14027                           fsr2h	equ	0xFDA
 14028                           fsr2l	equ	0xFD9
 14029                           status	equ	0xFD8
 14030                           
 14031 ;; *************** function _writeRegisterExtended *****************
 14032 ;; Defined at:
 14033 ;;		line 2070 in file "main.c"
 14034 ;; Parameters:    Size  Location     Type
 14035 ;;  nodeid          1    wreg     unsigned char 
 14036 ;;  page            2   62[BANK0 ] unsigned short 
 14037 ;;  reg             1   64[BANK0 ] unsigned char 
 14038 ;;  timeout         2   65[BANK0 ] unsigned short 
 14039 ;;  value           2   67[BANK0 ] PTR unsigned char 
 14040 ;;		 -> doModeVerbose@value_1117(1), 
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;  nodeid          1   73[BANK0 ] unsigned char 
 14043 ;; Return value:  Size  Location     Type
 14044 ;;                  1    wreg      enum E15660
 14045 ;; Registers used:
 14046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14047 ;; Tracked objects:
 14048 ;;		On entry : F/3
 14049 ;;		On exit  : E/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14052 ;;      Params:         0       7       0       0       0       0       0
 14053 ;;      Locals:         0       1       0       0       0       0       0
 14054 ;;      Temps:          0       4       0       0       0       0       0
 14055 ;;      Totals:         0      12       0       0       0       0       0
 14056 ;;Total ram usage:       12 bytes
 14057 ;; Hardware stack levels used:    1
 14058 ;; Hardware stack levels required when called:    6
 14059 ;; This function calls:
 14060 ;;		_sendVSCPFrame
 14061 ;;		_getVSCPFrame
 14062 ;; This function is called by:
 14063 ;;		_doModeVerbose
 14064 ;; This function uses a non-reentrant model
 14065 ;;
 14066                           
 14067                           	psect	text21
 14068  00326E                     __ptext21:
 14069                           	opt stack 0
 14070  00326E                     _writeRegisterExtended:
 14071                           	opt stack 22
 14072                           
 14073                           ; BSR set to: 3
 14074                           ;incstack = 0
 14075                           ;incstack = 0
 14076                           ;writeRegisterExtended@nodeid stored from wreg
 14077  00326E  CFE8 F0A9          	movff	wreg,writeRegisterExtended@nodeid
 14078                           
 14079                           ; BSR set to: 3
 14080                           ;main.c: 2071: vscpData[ 0 ] = nodeid;
 14081  003272  C0A9  F040         	movff	writeRegisterExtended@nodeid,_vscpData
 14082                           
 14083                           ; BSR set to: 3
 14084                           ;main.c: 2072: vscpData[ 1 ] = page>>8;
 14085  003276  0100               	movlb	0	; () banked
 14086  003278  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14087  00327A  6E41               	movwf	_vscpData+1,c
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;main.c: 2073: vscpData[ 2 ] = page&0xff;
 14091  00327C  C09E  F042         	movff	writeRegisterExtended@page,_vscpData+2
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;main.c: 2074: vscpData[ 3 ] = reg;
 14095  003280  C0A0  F043         	movff	writeRegisterExtended@reg,_vscpData+3
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;main.c: 2075: vscpData[ 4 ] = *value;
 14099  003284  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14100  003288  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14101  00328C  50DF               	movf	indf2,w,c
 14102  00328E  6E44               	movwf	_vscpData+4,c
 14103                           
 14104                           ; BSR set to: 0
 14105                           ;main.c: 2077: if (sendVSCPFrame( 0,
 14106                           ;main.c: 2078: 38,
 14107                           ;main.c: 2079: 0,
 14108                           ;main.c: 2080: 0,
 14109                           ;main.c: 2081: 5,
 14110                           ;main.c: 2082: vscpData)) {
 14111  003290  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14112  003292  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14113  003294  0E26               	movlw	38
 14114  003296  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14115  003298  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14116  00329A  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14117  00329C  0E05               	movlw	5
 14118  00329E  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14119  0032A0  0E40               	movlw	low _vscpData
 14120  0032A2  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14121  0032A4  ECD6  F016         	call	_sendVSCPFrame	;wreg free
 14122  0032A8  0900               	iorlw	0
 14123  0032AA  E04C               	bz	l14057
 14124                           
 14125                           ;main.c: 2084: timekeeper = 0;
 14126  0032AC  0100               	movlb	0	; () banked
 14127  0032AE  6BCD               	clrf	_timekeeper& (0+255),b	;volatile
 14128  0032B0  6BCE               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14129  0032B2  6BCF               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14130  0032B4  6BD0               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14131                           
 14132                           ;main.c: 2085: while ( timekeeper < timeout ) {
 14133  0032B6  D036               	goto	l14055
 14134  0032B8                     l988:
 14135                           
 14136                           ; BSR set to: 0
 14137  0032B8  0004               	clrwdt		;# 
 14138                           
 14139                           ;main.c: 2089: if ( getVSCPFrame( &vscpClass,
 14140                           ;main.c: 2090: &vscpType,
 14141                           ;main.c: 2091: &vscpNodeId,
 14142                           ;main.c: 2092: &vscpPriority,
 14143                           ;main.c: 2093: &vscpSize,
 14144                           ;main.c: 2094: vscpData ) ) {
 14145  0032BA  0100               	movlb	0	; () banked
 14146  0032BC  0EDF               	movlw	low _vscpType
 14147  0032BE  6F62               	movwf	?_getVSCPFrame& (0+255),b
 14148  0032C0  0EDC               	movlw	low _vscpNodeId
 14149  0032C2  6F63               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14150  0032C4  0EDD               	movlw	low _vscpPriority
 14151  0032C6  6F64               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14152  0032C8  0EDE               	movlw	low _vscpSize
 14153  0032CA  6F65               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14154  0032CC  0E40               	movlw	low _vscpData
 14155  0032CE  6F66               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14156  0032D0  0EDA               	movlw	_vscpClass& (0+255)
 14157  0032D2  EC28  F014         	call	_getVSCPFrame
 14158  0032D6  0900               	iorlw	0
 14159  0032D8  E025               	bz	l14055
 14160                           
 14161                           ;main.c: 2096: if ( ( nodeid == vscpNodeId) &&
 14162                           ;main.c: 2097: (5 == vscpSize) &&
 14163                           ;main.c: 2098: (0 == vscpData[ 0 ]) &&
 14164                           ;main.c: 2099: ((page>>8) == vscpData[ 1 ]) &&
 14165                           ;main.c: 2100: ((page&0xff) == vscpData[ 2 ]) &&
 14166                           ;main.c: 2101: (reg == vscpData[ 3 ]) &&
 14167                           ;main.c: 2102: (*value == vscpData[ 4 ]) ) {
 14168  0032DA  0100               	movlb	0	; () banked
 14169  0032DC  51DC               	movf	_vscpNodeId& (0+255),w,b
 14170  0032DE  63A9               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 14171  0032E0  D021               	goto	l14055
 14172                           
 14173                           ; BSR set to: 0
 14174  0032E2  51DE               	movf	_vscpSize& (0+255),w,b
 14175  0032E4  0A05               	xorlw	5
 14176  0032E6  E11E               	bnz	l14055
 14177                           
 14178                           ; BSR set to: 0
 14179  0032E8  6640               	tstfsz	_vscpData,c
 14180  0032EA  D01C               	goto	l14055
 14181                           
 14182                           ; BSR set to: 0
 14183  0032EC  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14184  0032EE  1841               	xorwf	_vscpData+1,w,c
 14185  0032F0  E119               	bnz	l14055
 14186                           
 14187                           ; BSR set to: 0
 14188  0032F2  519E               	movf	writeRegisterExtended@page& (0+255),w,b
 14189  0032F4  EE20  F042         	lfsr	2,_vscpData+2
 14190  0032F8  62DF               	cpfseq	indf2,c
 14191  0032FA  D014               	goto	l14055
 14192                           
 14193                           ; BSR set to: 0
 14194  0032FC  51A0               	movf	writeRegisterExtended@reg& (0+255),w,b
 14195  0032FE  EE20  F043         	lfsr	2,_vscpData+3
 14196  003302  62DF               	cpfseq	indf2,c
 14197  003304  D00F               	goto	l14055
 14198                           
 14199                           ; BSR set to: 0
 14200  003306  5044               	movf	_vscpData+4,w,c
 14201  003308  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14202  00330C  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14203  003310  62DF               	cpfseq	indf2,c
 14204  003312  D008               	goto	l14055
 14205                           
 14206                           ; BSR set to: 0
 14207                           ;main.c: 2103: *value = vscpData[ 1 ];
 14208  003314  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14209  003318  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14210  00331C  C041  FFDF         	movff	_vscpData+1,indf2
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;main.c: 2104: return 1;
 14214  003320  0E01               	movlw	1
 14215  003322  D011               	goto	l991
 14216  003324                     l14055:
 14217  003324  0100               	movlb	0	; () banked
 14218  003326  51A1               	movf	writeRegisterExtended@timeout& (0+255),w,b
 14219  003328  6FA5               	movwf	??_writeRegisterExtended& (0+255),b
 14220  00332A  51A2               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 14221  00332C  6FA6               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 14222  00332E  6BA7               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 14223  003330  6BA8               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 14224  003332  51A5               	movf	??_writeRegisterExtended& (0+255),w,b
 14225  003334  5DCD               	subwf	_timekeeper& (0+255),w,b	;volatile
 14226  003336  51A6               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 14227  003338  59CE               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14228  00333A  51A7               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 14229  00333C  59CF               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14230  00333E  51A8               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 14231  003340  59D0               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14232  003342  E3BA               	bnc	l988
 14233  003344                     l14057:
 14234                           
 14235                           ;main.c: 2105: }
 14236                           ;main.c: 2107: }
 14237                           ;main.c: 2109: }
 14238                           ;main.c: 2111: }
 14239                           ;main.c: 2113: return 0;
 14240  003344  0E00               	movlw	0
 14241  003346                     l991:
 14242  003346  0012               	return	
 14243  003348                     __end_of_writeRegisterExtended:
 14244                           	opt stack 0
 14245                           tblptru	equ	0xFF8
 14246                           tblptrh	equ	0xFF7
 14247                           tblptrl	equ	0xFF6
 14248                           tablat	equ	0xFF5
 14249                           prodh	equ	0xFF4
 14250                           prodl	equ	0xFF3
 14251                           intcon	equ	0xFF2
 14252                           indf0	equ	0xFEF
 14253                           postinc0	equ	0xFEE
 14254                           fsr0h	equ	0xFEA
 14255                           fsr0l	equ	0xFE9
 14256                           wreg	equ	0xFE8
 14257                           indf1	equ	0xFE7
 14258                           postinc1	equ	0xFE6
 14259                           postdec1	equ	0xFE5
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           indf2	equ	0xFDF
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           plusw2	equ	0xFDB
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function _printBinary *****************
 14271 ;; Defined at:
 14272 ;;		line 2157 in file "main.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  value           1    wreg     unsigned char 
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;  value           1   27[COMRAM] unsigned char 
 14277 ;;  i               2   28[COMRAM] int 
 14278 ;; Return value:  Size  Location     Type
 14279 ;;		None               void
 14280 ;; Registers used:
 14281 ;;		wreg, status,2, status,0, cstack
 14282 ;; Tracked objects:
 14283 ;;		On entry : F/3
 14284 ;;		On exit  : 0/0
 14285 ;;		Unchanged: 0/0
 14286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14287 ;;      Params:         0       0       0       0       0       0       0
 14288 ;;      Locals:         3       0       0       0       0       0       0
 14289 ;;      Temps:          2       0       0       0       0       0       0
 14290 ;;      Totals:         5       0       0       0       0       0       0
 14291 ;;Total ram usage:        5 bytes
 14292 ;; Hardware stack levels used:    1
 14293 ;; Hardware stack levels required when called:    3
 14294 ;; This function calls:
 14295 ;;		_WriteUSART
 14296 ;; This function is called by:
 14297 ;;		_doModeVerbose
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text22
 14302  0021C2                     __ptext22:
 14303                           	opt stack 0
 14304  0021C2                     _printBinary:
 14305                           	opt stack 25
 14306                           
 14307                           ;incstack = 0
 14308                           ;incstack = 0
 14309                           ;printBinary@value stored from wreg
 14310  0021C2  CFE8 F01C          	movff	wreg,printBinary@value
 14311                           
 14312                           ; BSR set to: 3
 14313                           ;main.c: 2158: int i;
 14314                           ;main.c: 2160: for ( i=7; i>=0; i-- ) {
 14315  0021C6  6A1E               	clrf	printBinary@i+1,c
 14316  0021C8  0E07               	movlw	7
 14317  0021CA  6E1D               	movwf	printBinary@i,c
 14318  0021CC                     l14007:
 14319                           
 14320                           ;main.c: 2161: if ( value & (1<<i) ) {
 14321  0021CC  C01D  F01A         	movff	printBinary@i,??_printBinary
 14322  0021D0  0E01               	movlw	1
 14323  0021D2  6E1B               	movwf	(??_printBinary+1)& (0+255),c
 14324  0021D4  2A1A               	incf	??_printBinary,f,c
 14325  0021D6  D002               	goto	u18494
 14326  0021D8                     u18495:
 14327  0021D8  90D8               	bcf	status,0,c
 14328  0021DA  361B               	rlcf	??_printBinary+1,f,c
 14329  0021DC                     u18494:
 14330  0021DC  2E1A               	decfsz	??_printBinary,f,c
 14331  0021DE  D7FC               	goto	u18495
 14332  0021E0  501B               	movf	??_printBinary+1,w,c
 14333  0021E2  141C               	andwf	printBinary@value,w,c
 14334  0021E4  E006               	bz	l1011
 14335  0021E6                     l1007:
 14336  0021E6  A2AC               	btfss	4012,1,c	;volatile
 14337  0021E8  D7FE               	goto	l1007
 14338                           
 14339                           ;main.c: 2163: WriteUSART('1');
 14340  0021EA  0E31               	movlw	49
 14341  0021EC  EC90  F00E         	call	_WriteUSART
 14342                           
 14343                           ;main.c: 2164: }
 14344  0021F0  D005               	goto	l14015
 14345  0021F2                     l1011:
 14346  0021F2  A2AC               	btfss	4012,1,c	;volatile
 14347  0021F4  D7FE               	goto	l1011
 14348                           
 14349                           ;main.c: 2167: WriteUSART('0');
 14350  0021F6  0E30               	movlw	48
 14351  0021F8  EC90  F00E         	call	_WriteUSART
 14352  0021FC                     l14015:
 14353  0021FC  061D               	decf	printBinary@i,f,c
 14354  0021FE  A0D8               	btfss	status,0,c
 14355  002200  061E               	decf	printBinary@i+1,f,c
 14356  002202  BE1E               	btfsc	printBinary@i+1,7,c
 14357  002204  0012               	return	
 14358  002206  D7E2               	goto	l14007
 14359  002208                     __end_of_printBinary:
 14360                           	opt stack 0
 14361                           tblptru	equ	0xFF8
 14362                           tblptrh	equ	0xFF7
 14363                           tblptrl	equ	0xFF6
 14364                           tablat	equ	0xFF5
 14365                           prodh	equ	0xFF4
 14366                           prodl	equ	0xFF3
 14367                           intcon	equ	0xFF2
 14368                           indf0	equ	0xFEF
 14369                           postinc0	equ	0xFEE
 14370                           fsr0h	equ	0xFEA
 14371                           fsr0l	equ	0xFE9
 14372                           wreg	equ	0xFE8
 14373                           indf1	equ	0xFE7
 14374                           postinc1	equ	0xFE6
 14375                           postdec1	equ	0xFE5
 14376                           fsr1h	equ	0xFE2
 14377                           fsr1l	equ	0xFE1
 14378                           indf2	equ	0xFDF
 14379                           postinc2	equ	0xFDE
 14380                           postdec2	equ	0xFDD
 14381                           plusw2	equ	0xFDB
 14382                           fsr2h	equ	0xFDA
 14383                           fsr2l	equ	0xFD9
 14384                           status	equ	0xFD8
 14385                           
 14386 ;; *************** function _readRegisterExtended *****************
 14387 ;; Defined at:
 14388 ;;		line 1969 in file "main.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  nodeid          1    wreg     unsigned char 
 14391 ;;  page            2   62[BANK0 ] unsigned short 
 14392 ;;  reg             1   64[BANK0 ] unsigned char 
 14393 ;;  timeout         2   65[BANK0 ] unsigned short 
 14394 ;;  value           2   67[BANK0 ] PTR unsigned char 
 14395 ;;		 -> doModeVerbose@value(1), 
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;  nodeid          1   73[BANK0 ] unsigned char 
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      enum E15660
 14400 ;; Registers used:
 14401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14402 ;; Tracked objects:
 14403 ;;		On entry : F/3
 14404 ;;		On exit  : E/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14407 ;;      Params:         0       7       0       0       0       0       0
 14408 ;;      Locals:         0       1       0       0       0       0       0
 14409 ;;      Temps:          0       4       0       0       0       0       0
 14410 ;;      Totals:         0      12       0       0       0       0       0
 14411 ;;Total ram usage:       12 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; Hardware stack levels required when called:    6
 14414 ;; This function calls:
 14415 ;;		_sendVSCPFrame
 14416 ;;		_getVSCPFrame
 14417 ;; This function is called by:
 14418 ;;		_doModeVerbose
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           	psect	text23
 14423  0030C6                     __ptext23:
 14424                           	opt stack 0
 14425  0030C6                     _readRegisterExtended:
 14426                           	opt stack 22
 14427                           
 14428                           ;incstack = 0
 14429                           ;incstack = 0
 14430                           ;readRegisterExtended@nodeid stored from wreg
 14431  0030C6  CFE8 F0A9          	movff	wreg,readRegisterExtended@nodeid
 14432                           
 14433                           ; BSR set to: 3
 14434                           ;main.c: 1970: vscpData[ 0 ] = nodeid;
 14435  0030CA  C0A9  F040         	movff	readRegisterExtended@nodeid,_vscpData
 14436                           
 14437                           ; BSR set to: 3
 14438                           ;main.c: 1971: vscpData[ 1 ] = page>>8;
 14439  0030CE  0100               	movlb	0	; () banked
 14440  0030D0  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14441  0030D2  6E41               	movwf	_vscpData+1,c
 14442                           
 14443                           ; BSR set to: 0
 14444                           ;main.c: 1972: vscpData[ 2 ] = page&0xff;
 14445  0030D4  C09E  F042         	movff	readRegisterExtended@page,_vscpData+2
 14446                           
 14447                           ; BSR set to: 0
 14448                           ;main.c: 1973: vscpData[ 3 ] = reg;
 14449  0030D8  C0A0  F043         	movff	readRegisterExtended@reg,_vscpData+3
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;main.c: 1974: vscpData[ 4 ] = 1;
 14453  0030DC  0E01               	movlw	1
 14454  0030DE  6E44               	movwf	_vscpData+4,c
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;main.c: 1976: if ( sendVSCPFrame( 0,
 14458                           ;main.c: 1977: 37,
 14459                           ;main.c: 1978: 0,
 14460                           ;main.c: 1979: 0,
 14461                           ;main.c: 1980: 5,
 14462                           ;main.c: 1981: vscpData ) ) {
 14463  0030E0  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14464  0030E2  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14465  0030E4  0E25               	movlw	37
 14466  0030E6  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14467  0030E8  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14468  0030EA  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14469  0030EC  0E05               	movlw	5
 14470  0030EE  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14471  0030F0  0E40               	movlw	low _vscpData
 14472  0030F2  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14473  0030F4  ECD6  F016         	call	_sendVSCPFrame	;wreg free
 14474  0030F8  0900               	iorlw	0
 14475  0030FA  E04B               	bz	l13989
 14476                           
 14477                           ;main.c: 1983: timekeeper = 0;
 14478  0030FC  0100               	movlb	0	; () banked
 14479  0030FE  6BCD               	clrf	_timekeeper& (0+255),b	;volatile
 14480  003100  6BCE               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14481  003102  6BCF               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14482  003104  6BD0               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14483                           
 14484                           ;main.c: 1984: while ( timekeeper < timeout ) {
 14485  003106  D035               	goto	l13987
 14486  003108                     l970:
 14487                           
 14488                           ; BSR set to: 0
 14489  003108  0004               	clrwdt		;# 
 14490                           
 14491                           ;main.c: 1988: if ( getVSCPFrame( &vscpClass,
 14492                           ;main.c: 1989: &vscpType,
 14493                           ;main.c: 1990: &vscpNodeId,
 14494                           ;main.c: 1991: &vscpPriority,
 14495                           ;main.c: 1992: &vscpSize,
 14496                           ;main.c: 1993: vscpData) ) {
 14497  00310A  0100               	movlb	0	; () banked
 14498  00310C  0EDF               	movlw	low _vscpType
 14499  00310E  6F62               	movwf	?_getVSCPFrame& (0+255),b
 14500  003110  0EDC               	movlw	low _vscpNodeId
 14501  003112  6F63               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14502  003114  0EDD               	movlw	low _vscpPriority
 14503  003116  6F64               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14504  003118  0EDE               	movlw	low _vscpSize
 14505  00311A  6F65               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14506  00311C  0E40               	movlw	low _vscpData
 14507  00311E  6F66               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14508  003120  0EDA               	movlw	_vscpClass& (0+255)
 14509  003122  EC28  F014         	call	_getVSCPFrame
 14510  003126  0900               	iorlw	0
 14511  003128  E024               	bz	l13987
 14512                           
 14513                           ;main.c: 1994: if ( ( nodeid == vscpNodeId) &&
 14514                           ;main.c: 1995: (0 == vscpClass) &&
 14515                           ;main.c: 1996: (39 == vscpType) &&
 14516                           ;main.c: 1997: (5 == vscpSize) &&
 14517                           ;main.c: 1998: (0 == vscpData[ 0 ]) &&
 14518                           ;main.c: 1999: ((page>>8) == vscpData[ 1 ]) &&
 14519                           ;main.c: 2000: ((page&0xff) == vscpData[ 2 ]) &&
 14520                           ;main.c: 2001: (reg == vscpData[ 3 ]) ) {
 14521  00312A  0100               	movlb	0	; () banked
 14522  00312C  51DC               	movf	_vscpNodeId& (0+255),w,b
 14523  00312E  63A9               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 14524  003130  D020               	goto	l13987
 14525                           
 14526                           ; BSR set to: 0
 14527  003132  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 14528  003134  11DA               	iorwf	_vscpClass& (0+255),w,b
 14529  003136  E11D               	bnz	l13987
 14530                           
 14531                           ; BSR set to: 0
 14532  003138  51DF               	movf	_vscpType& (0+255),w,b
 14533  00313A  0A27               	xorlw	39
 14534  00313C  E11A               	bnz	l13987
 14535                           
 14536                           ; BSR set to: 0
 14537  00313E  51DE               	movf	_vscpSize& (0+255),w,b
 14538  003140  0A05               	xorlw	5
 14539  003142  E117               	bnz	l13987
 14540                           
 14541                           ; BSR set to: 0
 14542  003144  6640               	tstfsz	_vscpData,c
 14543  003146  D015               	goto	l13987
 14544                           
 14545                           ; BSR set to: 0
 14546  003148  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14547  00314A  1841               	xorwf	_vscpData+1,w,c
 14548  00314C  E112               	bnz	l13987
 14549                           
 14550                           ; BSR set to: 0
 14551  00314E  519E               	movf	readRegisterExtended@page& (0+255),w,b
 14552  003150  EE20  F042         	lfsr	2,_vscpData+2
 14553  003154  62DF               	cpfseq	indf2,c
 14554  003156  D00D               	goto	l13987
 14555                           
 14556                           ; BSR set to: 0
 14557  003158  51A0               	movf	readRegisterExtended@reg& (0+255),w,b
 14558  00315A  EE20  F043         	lfsr	2,_vscpData+3
 14559  00315E  62DF               	cpfseq	indf2,c
 14560  003160  D008               	goto	l13987
 14561                           
 14562                           ; BSR set to: 0
 14563                           ;main.c: 2002: *value = vscpData[ 4 ];
 14564  003162  C0A3  FFD9         	movff	readRegisterExtended@value,fsr2l
 14565  003166  C0A4  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 14566  00316A  C044  FFDF         	movff	_vscpData+4,indf2
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;main.c: 2003: return 1;
 14570  00316E  0E01               	movlw	1
 14571  003170  D011               	goto	l973
 14572  003172                     l13987:
 14573  003172  0100               	movlb	0	; () banked
 14574  003174  51A1               	movf	readRegisterExtended@timeout& (0+255),w,b
 14575  003176  6FA5               	movwf	??_readRegisterExtended& (0+255),b
 14576  003178  51A2               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 14577  00317A  6FA6               	movwf	(??_readRegisterExtended+1)& (0+255),b
 14578  00317C  6BA7               	clrf	(??_readRegisterExtended+2)& (0+255),b
 14579  00317E  6BA8               	clrf	(??_readRegisterExtended+3)& (0+255),b
 14580  003180  51A5               	movf	??_readRegisterExtended& (0+255),w,b
 14581  003182  5DCD               	subwf	_timekeeper& (0+255),w,b	;volatile
 14582  003184  51A6               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 14583  003186  59CE               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14584  003188  51A7               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 14585  00318A  59CF               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14586  00318C  51A8               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 14587  00318E  59D0               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14588  003190  E3BB               	bnc	l970
 14589  003192                     l13989:
 14590                           
 14591                           ;main.c: 2004: }
 14592                           ;main.c: 2005: }
 14593                           ;main.c: 2006: }
 14594                           ;main.c: 2007: }
 14595                           ;main.c: 2009: return 0;
 14596  003192  0E00               	movlw	0
 14597  003194                     l973:
 14598  003194  0012               	return	
 14599  003196                     __end_of_readRegisterExtended:
 14600                           	opt stack 0
 14601                           tblptru	equ	0xFF8
 14602                           tblptrh	equ	0xFF7
 14603                           tblptrl	equ	0xFF6
 14604                           tablat	equ	0xFF5
 14605                           prodh	equ	0xFF4
 14606                           prodl	equ	0xFF3
 14607                           intcon	equ	0xFF2
 14608                           indf0	equ	0xFEF
 14609                           postinc0	equ	0xFEE
 14610                           fsr0h	equ	0xFEA
 14611                           fsr0l	equ	0xFE9
 14612                           wreg	equ	0xFE8
 14613                           indf1	equ	0xFE7
 14614                           postinc1	equ	0xFE6
 14615                           postdec1	equ	0xFE5
 14616                           fsr1h	equ	0xFE2
 14617                           fsr1l	equ	0xFE1
 14618                           indf2	equ	0xFDF
 14619                           postinc2	equ	0xFDE
 14620                           postdec2	equ	0xFDD
 14621                           plusw2	equ	0xFDB
 14622                           fsr2h	equ	0xFDA
 14623                           fsr2l	equ	0xFD9
 14624                           status	equ	0xFD8
 14625                           
 14626 ;; *************** function _strcpy *****************
 14627 ;; Defined at:
 14628 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 14629 ;; Parameters:    Size  Location     Type
 14630 ;;  to              2   24[COMRAM] PTR unsigned char 
 14631 ;;		 -> cmdbuf(80), 
 14632 ;;  from            2   26[COMRAM] PTR const unsigned char 
 14633 ;;		 -> cmdbuf(80), 
 14634 ;; Auto vars:     Size  Location     Type
 14635 ;;  cp              2   28[COMRAM] PTR unsigned char 
 14636 ;;		 -> cmdbuf(80), 
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  2   24[COMRAM] PTR unsigned char 
 14639 ;; Registers used:
 14640 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14641 ;; Tracked objects:
 14642 ;;		On entry : F/0
 14643 ;;		On exit  : F/0
 14644 ;;		Unchanged: F/0
 14645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14646 ;;      Params:         4       0       0       0       0       0       0
 14647 ;;      Locals:         2       0       0       0       0       0       0
 14648 ;;      Temps:          0       0       0       0       0       0       0
 14649 ;;      Totals:         6       0       0       0       0       0       0
 14650 ;;Total ram usage:        6 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    2
 14653 ;; This function calls:
 14654 ;;		Nothing
 14655 ;; This function is called by:
 14656 ;;		_doModeVerbose
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text24
 14661  001E0E                     __ptext24:
 14662                           	opt stack 0
 14663  001E0E                     _strcpy:
 14664                           	opt stack 26
 14665                           
 14666                           ; BSR set to: 0
 14667                           
 14668                           ;incstack = 0
 14669                           ;incstack = 0
 14670  001E0E  C019  F01D         	movff	strcpy@to,strcpy@cp
 14671  001E12  C01A  F01E         	movff	strcpy@to+1,strcpy@cp+1
 14672  001E16  D004               	goto	l10951
 14673  001E18                     l10949:
 14674                           
 14675                           ; BSR set to: 0
 14676  001E18  4A1D               	infsnz	strcpy@cp,f,c
 14677  001E1A  2A1E               	incf	strcpy@cp+1,f,c
 14678  001E1C  4A1B               	infsnz	strcpy@from,f,c
 14679  001E1E  2A1C               	incf	strcpy@from+1,f,c
 14680  001E20                     l10951:
 14681                           
 14682                           ; BSR set to: 0
 14683  001E20  C01B  FFD9         	movff	strcpy@from,fsr2l
 14684  001E24  C01C  FFDA         	movff	strcpy@from+1,fsr2h
 14685  001E28  C01D  FFE1         	movff	strcpy@cp,fsr1l
 14686  001E2C  C01E  FFE2         	movff	strcpy@cp+1,fsr1h
 14687  001E30  CFDF FFE7          	movff	indf2,indf1
 14688  001E34  50E7               	movf	indf1,w,c
 14689  001E36  B4D8               	btfsc	status,2,c
 14690                           
 14691                           ; BSR set to: 0
 14692  001E38  0012               	return	
 14693  001E3A  D7EE               	goto	l10949
 14694  001E3C                     __end_of_strcpy:
 14695                           	opt stack 0
 14696                           tblptru	equ	0xFF8
 14697                           tblptrh	equ	0xFF7
 14698                           tblptrl	equ	0xFF6
 14699                           tablat	equ	0xFF5
 14700                           prodh	equ	0xFF4
 14701                           prodl	equ	0xFF3
 14702                           intcon	equ	0xFF2
 14703                           indf0	equ	0xFEF
 14704                           postinc0	equ	0xFEE
 14705                           fsr0h	equ	0xFEA
 14706                           fsr0l	equ	0xFE9
 14707                           wreg	equ	0xFE8
 14708                           indf1	equ	0xFE7
 14709                           postinc1	equ	0xFE6
 14710                           postdec1	equ	0xFE5
 14711                           fsr1h	equ	0xFE2
 14712                           fsr1l	equ	0xFE1
 14713                           indf2	equ	0xFDF
 14714                           postinc2	equ	0xFDE
 14715                           postdec2	equ	0xFDD
 14716                           plusw2	equ	0xFDB
 14717                           fsr2h	equ	0xFDA
 14718                           fsr2l	equ	0xFD9
 14719                           status	equ	0xFD8
 14720                           
 14721 ;; *************** function _findNodes *****************
 14722 ;; Defined at:
 14723 ;;		line 2316 in file "main.c"
 14724 ;; Parameters:    Size  Location     Type
 14725 ;;		None
 14726 ;; Auto vars:     Size  Location     Type
 14727 ;;  i               1   81[BANK0 ] unsigned char 
 14728 ;;  value           1   80[BANK0 ] unsigned char 
 14729 ;;  nFound          1   79[BANK0 ] unsigned char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;		None               void
 14732 ;; Registers used:
 14733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14734 ;; Tracked objects:
 14735 ;;		On entry : F/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14739 ;;      Params:         0       0       0       0       0       0       0
 14740 ;;      Locals:         0       5       0       0       0       0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0
 14742 ;;      Totals:         0       5       0       0       0       0       0
 14743 ;;Total ram usage:        5 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    8
 14746 ;; This function calls:
 14747 ;;		_putsUSART
 14748 ;;		_printNodeFirmwareVersion
 14749 ;;		_printGUID
 14750 ;;		_printMDF
 14751 ;;		_itoa
 14752 ;;		_readRegister
 14753 ;; This function is called by:
 14754 ;;		_doModeVerbose
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text25
 14759  003426                     __ptext25:
 14760                           	opt stack 0
 14761  003426                     _findNodes:
 14762                           	opt stack 20
 14763                           
 14764                           ; BSR set to: 0
 14765                           ;main.c: 2317: uint8_t nFound = 0;
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;incstack = 0
 14769                           ;incstack = 0
 14770  003426  6BAF               	clrf	findNodes@nFound& (0+255),b
 14771                           
 14772                           ; BSR set to: 0
 14773                           ;main.c: 2318: uint8_t i;
 14774                           ;main.c: 2319: uint8_t value;
 14775                           ;main.c: 2321: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14776  003428  0E6E               	movlw	high STR_229
 14777  00342A  6E1B               	movwf	?_putsUSART+1,c
 14778  00342C  0E7B               	movlw	low STR_229
 14779  00342E  6E1A               	movwf	?_putsUSART,c
 14780  003430  EC50  F011         	call	_putsUSART	;wreg free
 14781                           
 14782                           ;main.c: 2323: for (i = 1; i != 0; i++) {
 14783  003434  0E01               	movlw	1
 14784  003436  0100               	movlb	0	; () banked
 14785  003438  6FB1               	movwf	findNodes@i& (0+255),b
 14786  00343A                     l1072:
 14787                           
 14788                           ; BSR set to: 0
 14789  00343A  0004               	clrwdt		;# 
 14790                           
 14791                           ;main.c: 2327: if ( readRegister( i,
 14792                           ;main.c: 2328: 0xE0,
 14793                           ;main.c: 2329: rwtimeout,
 14794                           ;main.c: 2330: &value) ) {
 14795  00343C  0EE0               	movlw	224
 14796  00343E  0100               	movlb	0	; () banked
 14797  003440  6F9E               	movwf	?_readRegister& (0+255),b
 14798  003442  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 14799  003446  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 14800  003448  0EB0               	movlw	low findNodes@value
 14801  00344A  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 14802  00344C  51B1               	movf	findNodes@i& (0+255),w,b
 14803  00344E  EC27  F016         	call	_readRegister
 14804  003452  0900               	iorlw	0
 14805  003454  E03E               	bz	l13939
 14806                           
 14807                           ;main.c: 2331: putsUSART((char *) "Node found with node id = ");
 14808  003456  0E78               	movlw	high STR_230
 14809  003458  6E1B               	movwf	?_putsUSART+1,c
 14810  00345A  0E99               	movlw	low STR_230
 14811  00345C  6E1A               	movwf	?_putsUSART,c
 14812  00345E  EC50  F011         	call	_putsUSART	;wreg free
 14813                           
 14814                           ;main.c: 2332: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 14815  003462  0100               	movlb	0	; () banked
 14816  003464  67D3               	tstfsz	_bHex& (0+255),b
 14817  003466  D003               	goto	l13921
 14818                           
 14819                           ; BSR set to: 0
 14820  003468  6BAE               	clrf	(_findNodes$1410+1)& (0+255),b
 14821  00346A  0E0A               	movlw	10
 14822  00346C  D002               	goto	L13
 14823  00346E                     l13921:
 14824                           
 14825                           ; BSR set to: 0
 14826  00346E  6BAE               	clrf	(_findNodes$1410+1)& (0+255),b
 14827  003470  0E10               	movlw	16
 14828  003472                     L13:
 14829  003472  6FAD               	movwf	_findNodes$1410& (0+255),b
 14830                           
 14831                           ; BSR set to: 0
 14832  003474  0E01               	movlw	high _wrkbuf
 14833  003476  6E2A               	movwf	?_itoa+1,c
 14834  003478  0E74               	movlw	low _wrkbuf
 14835  00347A  6E29               	movwf	?_itoa,c
 14836  00347C  0100               	movlb	0	; () banked
 14837  00347E  C0DC  F02B         	movff	_vscpNodeId,?_itoa+2
 14838  003482  6A2C               	clrf	?_itoa+3,c
 14839  003484  C0AD  F02D         	movff	_findNodes$1410,?_itoa+4
 14840  003488  C0AE  F02E         	movff	_findNodes$1410+1,?_itoa+5
 14841  00348C  EC4F  F00F         	call	_itoa	;wreg free
 14842                           
 14843                           ;main.c: 2333: putsUSART(wrkbuf);
 14844  003490  0101               	movlb	1	; () banked
 14845  003492  0E01               	movlw	high _wrkbuf
 14846  003494  6E1B               	movwf	?_putsUSART+1,c
 14847  003496  0E74               	movlw	low _wrkbuf
 14848  003498  6E1A               	movwf	?_putsUSART,c
 14849  00349A  EC50  F011         	call	_putsUSART	;wreg free
 14850                           
 14851                           ;main.c: 2334: putsUSART((char *) "\r\n");
 14852  00349E  0E71               	movlw	high (STR_188+50)
 14853  0034A0  6E1B               	movwf	?_putsUSART+1,c
 14854  0034A2  0EB2               	movlw	low (STR_188+50)
 14855  0034A4  6E1A               	movwf	?_putsUSART,c
 14856  0034A6  EC50  F011         	call	_putsUSART	;wreg free
 14857                           
 14858                           ;main.c: 2335: printNodeFirmwareVersion( i );
 14859  0034AA  0100               	movlb	0	; () banked
 14860  0034AC  51B1               	movf	findNodes@i& (0+255),w,b
 14861  0034AE  ECFB  F017         	call	_printNodeFirmwareVersion
 14862                           
 14863                           ;main.c: 2336: printGUID( i );
 14864  0034B2  0100               	movlb	0	; () banked
 14865  0034B4  51B1               	movf	findNodes@i& (0+255),w,b
 14866  0034B6  ECEF  F01B         	call	_printGUID
 14867                           
 14868                           ;main.c: 2337: printMDF( i );
 14869  0034BA  0100               	movlb	0	; () banked
 14870  0034BC  51B1               	movf	findNodes@i& (0+255),w,b
 14871  0034BE  EC40  F015         	call	_printMDF
 14872                           
 14873                           ;main.c: 2338: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14874  0034C2  0E6E               	movlw	high STR_229
 14875  0034C4  6E1B               	movwf	?_putsUSART+1,c
 14876  0034C6  0E7B               	movlw	low STR_229
 14877  0034C8  6E1A               	movwf	?_putsUSART,c
 14878  0034CA  EC50  F011         	call	_putsUSART	;wreg free
 14879                           
 14880                           ;main.c: 2339: nFound++;
 14881  0034CE  0100               	movlb	0	; () banked
 14882  0034D0  2BAF               	incf	findNodes@nFound& (0+255),f,b
 14883  0034D2                     l13939:
 14884  0034D2  0100               	movlb	0	; () banked
 14885  0034D4  2BB1               	incf	findNodes@i& (0+255),f,b
 14886                           
 14887                           ; BSR set to: 0
 14888  0034D6  67B1               	tstfsz	findNodes@i& (0+255),b
 14889  0034D8  D7B0               	goto	l1072
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;main.c: 2340: }
 14893                           ;main.c: 2342: }
 14894                           ;main.c: 2344: itoa(wrkbuf, nFound, 10);
 14895  0034DA  0E01               	movlw	high _wrkbuf
 14896  0034DC  6E2A               	movwf	?_itoa+1,c
 14897  0034DE  0E74               	movlw	low _wrkbuf
 14898  0034E0  6E29               	movwf	?_itoa,c
 14899  0034E2  C0AF  F02B         	movff	findNodes@nFound,?_itoa+2
 14900  0034E6  6A2C               	clrf	?_itoa+3,c
 14901  0034E8  6A2E               	clrf	?_itoa+5,c
 14902  0034EA  0E0A               	movlw	10
 14903  0034EC  6E2D               	movwf	?_itoa+4,c
 14904  0034EE  EC4F  F00F         	call	_itoa	;wreg free
 14905                           
 14906                           ;main.c: 2345: putsUSART(wrkbuf);
 14907  0034F2  0101               	movlb	1	; () banked
 14908  0034F4  0E01               	movlw	high _wrkbuf
 14909  0034F6  6E1B               	movwf	?_putsUSART+1,c
 14910  0034F8  0E74               	movlw	low _wrkbuf
 14911  0034FA  6E1A               	movwf	?_putsUSART,c
 14912  0034FC  EC50  F011         	call	_putsUSART	;wreg free
 14913                           
 14914                           ;main.c: 2346: putsUSART((char *) " nodes found\r\n");
 14915  003500  0E7B               	movlw	high STR_233
 14916  003502  6E1B               	movwf	?_putsUSART+1,c
 14917  003504  0E4E               	movlw	low STR_233
 14918  003506  6E1A               	movwf	?_putsUSART,c
 14919  003508  EF50  F011         	goto	_putsUSART	;wreg free
 14920  00350C                     __end_of_findNodes:
 14921                           	opt stack 0
 14922                           tblptru	equ	0xFF8
 14923                           tblptrh	equ	0xFF7
 14924                           tblptrl	equ	0xFF6
 14925                           tablat	equ	0xFF5
 14926                           prodh	equ	0xFF4
 14927                           prodl	equ	0xFF3
 14928                           intcon	equ	0xFF2
 14929                           indf0	equ	0xFEF
 14930                           postinc0	equ	0xFEE
 14931                           fsr0h	equ	0xFEA
 14932                           fsr0l	equ	0xFE9
 14933                           wreg	equ	0xFE8
 14934                           indf1	equ	0xFE7
 14935                           postinc1	equ	0xFE6
 14936                           postdec1	equ	0xFE5
 14937                           fsr1h	equ	0xFE2
 14938                           fsr1l	equ	0xFE1
 14939                           indf2	equ	0xFDF
 14940                           postinc2	equ	0xFDE
 14941                           postdec2	equ	0xFDD
 14942                           plusw2	equ	0xFDB
 14943                           fsr2h	equ	0xFDA
 14944                           fsr2l	equ	0xFD9
 14945                           status	equ	0xFD8
 14946                           
 14947 ;; *************** function _printMDF *****************
 14948 ;; Defined at:
 14949 ;;		line 2399 in file "main.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  nodeid          1    wreg     unsigned char 
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;  nodeid          1   71[BANK0 ] unsigned char 
 14954 ;;  p               2   73[BANK0 ] PTR unsigned char 
 14955 ;;		 -> wrkbuf(80), 
 14956 ;;  i               1   75[BANK0 ] unsigned char 
 14957 ;;  value           1   72[BANK0 ] unsigned char 
 14958 ;; Return value:  Size  Location     Type
 14959 ;;		None               void
 14960 ;; Registers used:
 14961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14962 ;; Tracked objects:
 14963 ;;		On entry : C/3
 14964 ;;		On exit  : 0/0
 14965 ;;		Unchanged: 0/0
 14966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14967 ;;      Params:         0       0       0       0       0       0       0
 14968 ;;      Locals:         0       5       0       0       0       0       0
 14969 ;;      Temps:          0       0       0       0       0       0       0
 14970 ;;      Totals:         0       5       0       0       0       0       0
 14971 ;;Total ram usage:        5 bytes
 14972 ;; Hardware stack levels used:    1
 14973 ;; Hardware stack levels required when called:    7
 14974 ;; This function calls:
 14975 ;;		_putsUSART
 14976 ;;		_memset
 14977 ;;		_readRegister
 14978 ;; This function is called by:
 14979 ;;		_doModeVerbose
 14980 ;;		_findNodes
 14981 ;; This function uses a non-reentrant model
 14982 ;;
 14983                           
 14984                           	psect	text26
 14985  002A80                     __ptext26:
 14986                           	opt stack 0
 14987  002A80                     _printMDF:
 14988                           	opt stack 21
 14989                           
 14990                           ;incstack = 0
 14991                           ;incstack = 0
 14992                           ;printMDF@nodeid stored from wreg
 14993  002A80  CFE8 F0A7          	movff	wreg,printMDF@nodeid
 14994                           
 14995                           ;main.c: 2400: uint8_t i;
 14996                           ;main.c: 2401: uint8_t value;
 14997                           ;main.c: 2402: char *p = wrkbuf;
 14998  002A84  0E01               	movlw	high _wrkbuf
 14999  002A86  0100               	movlb	0	; () banked
 15000  002A88  6FAA               	movwf	(printMDF@p+1)& (0+255),b
 15001  002A8A  0E74               	movlw	low _wrkbuf
 15002  002A8C  6FA9               	movwf	printMDF@p& (0+255),b
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;main.c: 2403: memset( wrkbuf, 0, sizeof(wrkbuf) );
 15006  002A8E  0101               	movlb	1	; () banked
 15007  002A90  0E01               	movlw	high _wrkbuf
 15008  002A92  6E1A               	movwf	?_memset+1,c
 15009  002A94  0E74               	movlw	low _wrkbuf
 15010  002A96  6E19               	movwf	?_memset,c
 15011  002A98  6A1C               	clrf	?_memset+3,c
 15012  002A9A  6A1B               	clrf	?_memset+2,c
 15013  002A9C  6A1E               	clrf	?_memset+5,c
 15014  002A9E  0E50               	movlw	80
 15015  002AA0  6E1D               	movwf	?_memset+4,c
 15016  002AA2  ECF1  F00E         	call	_memset	;wreg free
 15017                           
 15018                           ;main.c: 2404: putsUSART((char *) "MDF = http://");
 15019  002AA6  0E7B               	movlw	high STR_239
 15020  002AA8  6E1B               	movwf	?_putsUSART+1,c
 15021  002AAA  0E6C               	movlw	low STR_239
 15022  002AAC  6E1A               	movwf	?_putsUSART,c
 15023  002AAE  EC50  F011         	call	_putsUSART	;wreg free
 15024                           
 15025                           ;main.c: 2406: for ( i=0; i<32; i++ ) {
 15026  002AB2  0100               	movlb	0	; () banked
 15027  002AB4  6BAB               	clrf	printMDF@i& (0+255),b
 15028  002AB6                     l14133:
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;main.c: 2407: if ( readRegister( nodeid,
 15032                           ;main.c: 2408: 0xE0 + i,
 15033                           ;main.c: 2409: rwtimeout,
 15034                           ;main.c: 2410: &value ) ) {
 15035  002AB6  51AB               	movf	printMDF@i& (0+255),w,b
 15036  002AB8  0FE0               	addlw	224
 15037  002ABA  6F9E               	movwf	?_readRegister& (0+255),b
 15038  002ABC  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15039  002AC0  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15040  002AC2  0EA8               	movlw	low printMDF@value
 15041  002AC4  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15042  002AC6  51A7               	movf	printMDF@nodeid& (0+255),w,b
 15043  002AC8  EC27  F016         	call	_readRegister
 15044  002ACC  0900               	iorlw	0
 15045  002ACE  E00A               	bz	l14139
 15046                           
 15047                           ;main.c: 2411: *p = value;
 15048  002AD0  C0A9  FFD9         	movff	printMDF@p,fsr2l
 15049  002AD4  C0AA  FFDA         	movff	printMDF@p+1,fsr2h
 15050  002AD8  C0A8  FFDF         	movff	printMDF@value,indf2
 15051  002ADC                     l14137:
 15052                           
 15053                           ;main.c: 2412: p++;
 15054  002ADC  0100               	movlb	0	; () banked
 15055  002ADE  4BA9               	infsnz	printMDF@p& (0+255),f,b
 15056  002AE0  2BAA               	incf	(printMDF@p+1)& (0+255),f,b
 15057                           
 15058                           ;main.c: 2414: }
 15059  002AE2  D007               	goto	l14143
 15060  002AE4                     l14139:
 15061                           
 15062                           ;main.c: 2415: else {
 15063                           ;main.c: 2416: *p = '?';
 15064  002AE4  C0A9  FFD9         	movff	printMDF@p,fsr2l
 15065  002AE8  C0AA  FFDA         	movff	printMDF@p+1,fsr2h
 15066  002AEC  0E3F               	movlw	63
 15067  002AEE  6EDF               	movwf	indf2,c
 15068  002AF0  D7F5               	goto	l14137
 15069  002AF2                     l14143:
 15070                           
 15071                           ; BSR set to: 0
 15072  002AF2  2BAB               	incf	printMDF@i& (0+255),f,b
 15073                           
 15074                           ; BSR set to: 0
 15075  002AF4  0E1F               	movlw	31
 15076  002AF6  65AB               	cpfsgt	printMDF@i& (0+255),b
 15077  002AF8  D7DE               	goto	l14133
 15078                           
 15079                           ; BSR set to: 0
 15080                           ;main.c: 2418: }
 15081                           ;main.c: 2419: }
 15082                           ;main.c: 2421: putsUSART( wrkbuf );
 15083  002AFA  0101               	movlb	1	; () banked
 15084  002AFC  0E01               	movlw	high _wrkbuf
 15085  002AFE  6E1B               	movwf	?_putsUSART+1,c
 15086  002B00  0E74               	movlw	low _wrkbuf
 15087  002B02  6E1A               	movwf	?_putsUSART,c
 15088  002B04  EC50  F011         	call	_putsUSART	;wreg free
 15089                           
 15090                           ;main.c: 2422: putsUSART((char *)"\r\n");
 15091  002B08  0E71               	movlw	high (STR_188+50)
 15092  002B0A  6E1B               	movwf	?_putsUSART+1,c
 15093  002B0C  0EB2               	movlw	low (STR_188+50)
 15094  002B0E  6E1A               	movwf	?_putsUSART,c
 15095  002B10  EF50  F011         	goto	_putsUSART	;wreg free
 15096  002B14                     __end_of_printMDF:
 15097                           	opt stack 0
 15098                           tblptru	equ	0xFF8
 15099                           tblptrh	equ	0xFF7
 15100                           tblptrl	equ	0xFF6
 15101                           tablat	equ	0xFF5
 15102                           prodh	equ	0xFF4
 15103                           prodl	equ	0xFF3
 15104                           intcon	equ	0xFF2
 15105                           indf0	equ	0xFEF
 15106                           postinc0	equ	0xFEE
 15107                           fsr0h	equ	0xFEA
 15108                           fsr0l	equ	0xFE9
 15109                           wreg	equ	0xFE8
 15110                           indf1	equ	0xFE7
 15111                           postinc1	equ	0xFE6
 15112                           postdec1	equ	0xFE5
 15113                           fsr1h	equ	0xFE2
 15114                           fsr1l	equ	0xFE1
 15115                           indf2	equ	0xFDF
 15116                           postinc2	equ	0xFDE
 15117                           postdec2	equ	0xFDD
 15118                           plusw2	equ	0xFDB
 15119                           fsr2h	equ	0xFDA
 15120                           fsr2l	equ	0xFD9
 15121                           status	equ	0xFD8
 15122                           
 15123 ;; *************** function _printGUID *****************
 15124 ;; Defined at:
 15125 ;;		line 2356 in file "main.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  nodeid          1    wreg     unsigned char 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  nodeid          1   71[BANK0 ] unsigned char 
 15130 ;;  buf             3   72[BANK0 ] unsigned char [3]
 15131 ;;  i               1   76[BANK0 ] unsigned char 
 15132 ;;  value           1   75[BANK0 ] unsigned char 
 15133 ;; Return value:  Size  Location     Type
 15134 ;;		None               void
 15135 ;; Registers used:
 15136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15137 ;; Tracked objects:
 15138 ;;		On entry : C/3
 15139 ;;		On exit  : 0/0
 15140 ;;		Unchanged: 0/0
 15141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15142 ;;      Params:         0       0       0       0       0       0       0
 15143 ;;      Locals:         0       6       0       0       0       0       0
 15144 ;;      Temps:          0       0       0       0       0       0       0
 15145 ;;      Totals:         0       6       0       0       0       0       0
 15146 ;;Total ram usage:        6 bytes
 15147 ;; Hardware stack levels used:    1
 15148 ;; Hardware stack levels required when called:    7
 15149 ;; This function calls:
 15150 ;;		_putsUSART
 15151 ;;		_memset
 15152 ;;		_strlen
 15153 ;;		_itoa
 15154 ;;		_readRegister
 15155 ;;		_strcat
 15156 ;; This function is called by:
 15157 ;;		_doModeVerbose
 15158 ;;		_findNodes
 15159 ;; This function uses a non-reentrant model
 15160 ;;
 15161                           
 15162                           	psect	text27
 15163  0037DE                     __ptext27:
 15164                           	opt stack 0
 15165  0037DE                     _printGUID:
 15166                           	opt stack 21
 15167                           
 15168                           ;incstack = 0
 15169                           ;incstack = 0
 15170                           ;printGUID@nodeid stored from wreg
 15171  0037DE  CFE8 F0A7          	movff	wreg,printGUID@nodeid
 15172                           
 15173                           ;main.c: 2357: uint8_t i;
 15174                           ;main.c: 2358: uint8_t value;
 15175                           ;main.c: 2359: char buf[3];
 15176                           ;main.c: 2361: memset( wrkbuf, 0, sizeof(wrkbuf) );
 15177  0037E2  0101               	movlb	1	; () banked
 15178  0037E4  0E01               	movlw	high _wrkbuf
 15179  0037E6  6E1A               	movwf	?_memset+1,c
 15180  0037E8  0E74               	movlw	low _wrkbuf
 15181  0037EA  6E19               	movwf	?_memset,c
 15182  0037EC  6A1C               	clrf	?_memset+3,c
 15183  0037EE  6A1B               	clrf	?_memset+2,c
 15184  0037F0  6A1E               	clrf	?_memset+5,c
 15185  0037F2  0E50               	movlw	80
 15186  0037F4  6E1D               	movwf	?_memset+4,c
 15187  0037F6  ECF1  F00E         	call	_memset	;wreg free
 15188                           
 15189                           ;main.c: 2362: putsUSART((char *) "GUID = ");
 15190  0037FA  0E7B               	movlw	high STR_234
 15191  0037FC  6E1B               	movwf	?_putsUSART+1,c
 15192  0037FE  0EE5               	movlw	low STR_234
 15193  003800  6E1A               	movwf	?_putsUSART,c
 15194  003802  EC50  F011         	call	_putsUSART	;wreg free
 15195                           
 15196                           ;main.c: 2364: for ( i=0; i<16; i++ ) {
 15197  003806  0100               	movlb	0	; () banked
 15198  003808  6BAC               	clrf	printGUID@i& (0+255),b
 15199  00380A                     l14099:
 15200                           
 15201                           ; BSR set to: 0
 15202                           ;main.c: 2365: if ( readRegister( nodeid,
 15203                           ;main.c: 2366: 0xD0 + i,
 15204                           ;main.c: 2367: rwtimeout,
 15205                           ;main.c: 2368: &value ) ) {
 15206  00380A  51AC               	movf	printGUID@i& (0+255),w,b
 15207  00380C  0FD0               	addlw	208
 15208  00380E  6F9E               	movwf	?_readRegister& (0+255),b
 15209  003810  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15210  003814  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15211  003816  0EAB               	movlw	low printGUID@value
 15212  003818  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15213  00381A  51A7               	movf	printGUID@nodeid& (0+255),w,b
 15214  00381C  EC27  F016         	call	_readRegister
 15215  003820  0900               	iorlw	0
 15216  003822  E02A               	bz	l14109
 15217                           
 15218                           ;main.c: 2369: itoa( buf, value, 16 );
 15219  003824  0100               	movlb	0	; () banked
 15220  003826  0E00               	movlw	high printGUID@buf
 15221  003828  6E2A               	movwf	?_itoa+1,c
 15222  00382A  0EA8               	movlw	low printGUID@buf
 15223  00382C  6E29               	movwf	?_itoa,c
 15224  00382E  C0AB  F02B         	movff	printGUID@value,?_itoa+2
 15225  003832  6A2C               	clrf	?_itoa+3,c
 15226  003834  6A2E               	clrf	?_itoa+5,c
 15227  003836  0E10               	movlw	16
 15228  003838  6E2D               	movwf	?_itoa+4,c
 15229  00383A  EC4F  F00F         	call	_itoa	;wreg free
 15230                           
 15231                           ;main.c: 2370: if ( 1 == strlen( buf ) ) {
 15232  00383E  0100               	movlb	0	; () banked
 15233  003840  0E00               	movlw	high printGUID@buf
 15234  003842  6E1A               	movwf	?_strlen+1,c
 15235  003844  0EA8               	movlw	low printGUID@buf
 15236  003846  6E19               	movwf	?_strlen,c
 15237  003848  ECC0  F00F         	call	_strlen	;wreg free
 15238  00384C  0419               	decf	?_strlen,w,c
 15239  00384E  101A               	iorwf	?_strlen+1,w,c
 15240  003850  E10F               	bnz	l14107
 15241                           
 15242                           ;main.c: 2371: strcat( wrkbuf, "0" );
 15243  003852  0101               	movlb	1	; () banked
 15244  003854  0E01               	movlw	high _wrkbuf
 15245  003856  6E1A               	movwf	?_strcat+1,c
 15246  003858  0E74               	movlw	low _wrkbuf
 15247  00385A  6E19               	movwf	?_strcat,c
 15248  00385C  0E7C               	movlw	high STR_235
 15249  00385E  6E1C               	movwf	?_strcat+3,c
 15250  003860  0EF8               	movlw	low STR_235
 15251  003862  6E1B               	movwf	?_strcat+2,c
 15252  003864  EC7A  F011         	call	_strcat	;wreg free
 15253                           
 15254                           ;main.c: 2372: strcat( wrkbuf, buf );
 15255  003868  D833               	call	PL74	;call to abstracted procedure
 15256  00386A  EC7A  F011         	call	_strcat	;wreg free
 15257                           
 15258                           ;main.c: 2373: }
 15259  00386E  D00F               	goto	l14111
 15260  003870                     l14107:
 15261                           
 15262                           ;main.c: 2374: else {
 15263                           ;main.c: 2375: strcat( wrkbuf, buf );
 15264  003870  D82F               	call	PL74	;call to abstracted procedure
 15265  003872  EC7A  F011         	call	_strcat	;wreg free
 15266  003876  D00B               	goto	l14111
 15267  003878                     l14109:
 15268                           
 15269                           ;main.c: 2379: else {
 15270                           ;main.c: 2380: strcat( wrkbuf, "--" );
 15271  003878  0101               	movlb	1	; () banked
 15272  00387A  0E01               	movlw	high _wrkbuf
 15273  00387C  6E1A               	movwf	?_strcat+1,c
 15274  00387E  0E74               	movlw	low _wrkbuf
 15275  003880  6E19               	movwf	?_strcat,c
 15276  003882  0E7C               	movlw	high STR_236
 15277  003884  6E1C               	movwf	?_strcat+3,c
 15278  003886  0EE4               	movlw	low STR_236
 15279  003888  6E1B               	movwf	?_strcat+2,c
 15280  00388A  EC7A  F011         	call	_strcat	;wreg free
 15281  00388E                     l14111:
 15282                           
 15283                           ;main.c: 2381: }
 15284                           ;main.c: 2383: if ( i < 15 ) {
 15285  00388E  0E0F               	movlw	15
 15286  003890  0100               	movlb	0	; () banked
 15287  003892  61AC               	cpfslt	printGUID@i& (0+255),b
 15288  003894  D00B               	goto	l14115
 15289                           
 15290                           ; BSR set to: 0
 15291                           ;main.c: 2384: strcat( wrkbuf, ":" );
 15292  003896  0101               	movlb	1	; () banked
 15293  003898  0E01               	movlw	high _wrkbuf
 15294  00389A  6E1A               	movwf	?_strcat+1,c
 15295  00389C  0E74               	movlw	low _wrkbuf
 15296  00389E  6E19               	movwf	?_strcat,c
 15297  0038A0  0E7C               	movlw	high STR_237
 15298  0038A2  6E1C               	movwf	?_strcat+3,c
 15299  0038A4  0EFA               	movlw	low STR_237
 15300  0038A6  6E1B               	movwf	?_strcat+2,c
 15301  0038A8  EC7A  F011         	call	_strcat	;wreg free
 15302  0038AC                     l14115:
 15303  0038AC  0100               	movlb	0	; () banked
 15304  0038AE  2BAC               	incf	printGUID@i& (0+255),f,b
 15305                           
 15306                           ; BSR set to: 0
 15307  0038B0  0E0F               	movlw	15
 15308  0038B2  65AC               	cpfsgt	printGUID@i& (0+255),b
 15309  0038B4  D7AA               	goto	l14099
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;main.c: 2385: }
 15313                           ;main.c: 2387: }
 15314                           ;main.c: 2389: putsUSART( wrkbuf );
 15315  0038B6  0101               	movlb	1	; () banked
 15316  0038B8  0E01               	movlw	high _wrkbuf
 15317  0038BA  6E1B               	movwf	?_putsUSART+1,c
 15318  0038BC  0E74               	movlw	low _wrkbuf
 15319  0038BE  6E1A               	movwf	?_putsUSART,c
 15320  0038C0  EC50  F011         	call	_putsUSART	;wreg free
 15321                           
 15322                           ;main.c: 2390: putsUSART((char *)"\r\n");
 15323  0038C4  0E71               	movlw	high (STR_188+50)
 15324  0038C6  6E1B               	movwf	?_putsUSART+1,c
 15325  0038C8  0EB2               	movlw	low (STR_188+50)
 15326  0038CA  6E1A               	movwf	?_putsUSART,c
 15327  0038CC  EF50  F011         	goto	_putsUSART	;wreg free
 15328  0038D0                     __end_of_printGUID:
 15329                           	opt stack 0
 15330  0038D0                     PL74:
 15331                           	opt stack 21
 15332  0038D0  0E01               	movlw	high _wrkbuf
 15333  0038D2  6E1A               	movwf	?_strcat+1,c
 15334  0038D4  0E74               	movlw	low _wrkbuf
 15335  0038D6  6E19               	movwf	?_strcat,c
 15336  0038D8  0100               	movlb	0	; () banked
 15337  0038DA  0E00               	movlw	high printGUID@buf
 15338  0038DC  6E1C               	movwf	?_strcat+3,c
 15339  0038DE  0EA8               	movlw	low printGUID@buf
 15340  0038E0  6E1B               	movwf	?_strcat+2,c
 15341  0038E2  0012               	return	
 15342  0038E4                     __end_ofPL74:
 15343                           	opt stack 0
 15344                           tblptru	equ	0xFF8
 15345                           tblptrh	equ	0xFF7
 15346                           tblptrl	equ	0xFF6
 15347                           tablat	equ	0xFF5
 15348                           prodh	equ	0xFF4
 15349                           prodl	equ	0xFF3
 15350                           intcon	equ	0xFF2
 15351                           indf0	equ	0xFEF
 15352                           postinc0	equ	0xFEE
 15353                           fsr0h	equ	0xFEA
 15354                           fsr0l	equ	0xFE9
 15355                           wreg	equ	0xFE8
 15356                           indf1	equ	0xFE7
 15357                           postinc1	equ	0xFE6
 15358                           postdec1	equ	0xFE5
 15359                           fsr1h	equ	0xFE2
 15360                           fsr1l	equ	0xFE1
 15361                           indf2	equ	0xFDF
 15362                           postinc2	equ	0xFDE
 15363                           postdec2	equ	0xFDD
 15364                           plusw2	equ	0xFDB
 15365                           fsr2h	equ	0xFDA
 15366                           fsr2l	equ	0xFD9
 15367                           status	equ	0xFD8
 15368                           
 15369 ;; *************** function _printNodeFirmwareVersion *****************
 15370 ;; Defined at:
 15371 ;;		line 2430 in file "main.c"
 15372 ;; Parameters:    Size  Location     Type
 15373 ;;  nodeid          1    wreg     unsigned char 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  nodeid          1   71[BANK0 ] unsigned char 
 15376 ;;  buf             3   72[BANK0 ] unsigned char [3]
 15377 ;;  i               1   76[BANK0 ] unsigned char 
 15378 ;;  value           1   75[BANK0 ] unsigned char 
 15379 ;; Return value:  Size  Location     Type
 15380 ;;		None               void
 15381 ;; Registers used:
 15382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : C/3
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15388 ;;      Params:         0       0       0       0       0       0       0
 15389 ;;      Locals:         0       6       0       0       0       0       0
 15390 ;;      Temps:          0       0       0       0       0       0       0
 15391 ;;      Totals:         0       6       0       0       0       0       0
 15392 ;;Total ram usage:        6 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    7
 15395 ;; This function calls:
 15396 ;;		_putsUSART
 15397 ;;		_memset
 15398 ;;		_itoa
 15399 ;;		_readRegister
 15400 ;;		_strcat
 15401 ;; This function is called by:
 15402 ;;		_doModeVerbose
 15403 ;;		_findNodes
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407                           	psect	text28
 15408  002FF6                     __ptext28:
 15409                           	opt stack 0
 15410  002FF6                     _printNodeFirmwareVersion:
 15411                           	opt stack 21
 15412                           
 15413                           ;incstack = 0
 15414                           ;incstack = 0
 15415                           ;printNodeFirmwareVersion@nodeid stored from wreg
 15416  002FF6  CFE8 F0A7          	movff	wreg,printNodeFirmwareVersion@nodeid
 15417                           
 15418                           ;main.c: 2431: uint8_t i;
 15419                           ;main.c: 2432: uint8_t value;
 15420                           ;main.c: 2433: char buf[3];
 15421                           ;main.c: 2435: memset( wrkbuf, 0, sizeof(wrkbuf) );
 15422  002FFA  0101               	movlb	1	; () banked
 15423  002FFC  0E01               	movlw	high _wrkbuf
 15424  002FFE  6E1A               	movwf	?_memset+1,c
 15425  003000  0E74               	movlw	low _wrkbuf
 15426  003002  6E19               	movwf	?_memset,c
 15427  003004  6A1C               	clrf	?_memset+3,c
 15428  003006  6A1B               	clrf	?_memset+2,c
 15429  003008  6A1E               	clrf	?_memset+5,c
 15430  00300A  0E50               	movlw	80
 15431  00300C  6E1D               	movwf	?_memset+4,c
 15432  00300E  ECF1  F00E         	call	_memset	;wreg free
 15433                           
 15434                           ;main.c: 2436: putsUSART((char *) "Firmware version = ");
 15435  003012  0E7A               	movlw	high STR_241
 15436  003014  6E1B               	movwf	?_putsUSART+1,c
 15437  003016  0EBE               	movlw	low STR_241
 15438  003018  6E1A               	movwf	?_putsUSART,c
 15439  00301A  EC50  F011         	call	_putsUSART	;wreg free
 15440                           
 15441                           ;main.c: 2438: for ( i=0; i<3; i++ ) {
 15442  00301E  0100               	movlb	0	; () banked
 15443  003020  6BAC               	clrf	printNodeFirmwareVersion@i& (0+255),b
 15444  003022                     l14071:
 15445                           
 15446                           ; BSR set to: 0
 15447                           ;main.c: 2439: if ( readRegister( nodeid,
 15448                           ;main.c: 2440: 0x94 + i,
 15449                           ;main.c: 2441: rwtimeout,
 15450                           ;main.c: 2442: &value ) ) {
 15451  003022  51AC               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 15452  003024  0F94               	addlw	148
 15453  003026  6F9E               	movwf	?_readRegister& (0+255),b
 15454  003028  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15455  00302C  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15456  00302E  0EAB               	movlw	low printNodeFirmwareVersion@value
 15457  003030  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15458  003032  51A7               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 15459  003034  EC27  F016         	call	_readRegister
 15460  003038  0900               	iorlw	0
 15461  00303A  E019               	bz	l14077
 15462                           
 15463                           ;main.c: 2443: itoa( buf, value, 16 );
 15464  00303C  0100               	movlb	0	; () banked
 15465  00303E  0E00               	movlw	high printNodeFirmwareVersion@buf
 15466  003040  6E2A               	movwf	?_itoa+1,c
 15467  003042  0EA8               	movlw	low printNodeFirmwareVersion@buf
 15468  003044  6E29               	movwf	?_itoa,c
 15469  003046  C0AB  F02B         	movff	printNodeFirmwareVersion@value,?_itoa+2
 15470  00304A  6A2C               	clrf	?_itoa+3,c
 15471  00304C  6A2E               	clrf	?_itoa+5,c
 15472  00304E  0E10               	movlw	16
 15473  003050  6E2D               	movwf	?_itoa+4,c
 15474  003052  EC4F  F00F         	call	_itoa	;wreg free
 15475                           
 15476                           ;main.c: 2444: strcat( wrkbuf, buf );
 15477  003056  0E01               	movlw	high _wrkbuf
 15478  003058  6E1A               	movwf	?_strcat+1,c
 15479  00305A  0E74               	movlw	low _wrkbuf
 15480  00305C  6E19               	movwf	?_strcat,c
 15481  00305E  0100               	movlb	0	; () banked
 15482  003060  0E00               	movlw	high printNodeFirmwareVersion@buf
 15483  003062  6E1C               	movwf	?_strcat+3,c
 15484  003064  0EA8               	movlw	low printNodeFirmwareVersion@buf
 15485  003066  6E1B               	movwf	?_strcat+2,c
 15486  003068  EC7A  F011         	call	_strcat	;wreg free
 15487                           
 15488                           ;main.c: 2445: }
 15489  00306C  D00B               	goto	l14079
 15490  00306E                     l14077:
 15491                           
 15492                           ;main.c: 2446: else {
 15493                           ;main.c: 2447: strcat( wrkbuf, "?" );
 15494  00306E  0101               	movlb	1	; () banked
 15495  003070  0E01               	movlw	high _wrkbuf
 15496  003072  6E1A               	movwf	?_strcat+1,c
 15497  003074  0E74               	movlw	low _wrkbuf
 15498  003076  6E19               	movwf	?_strcat,c
 15499  003078  0E7C               	movlw	high STR_242
 15500  00307A  6E1C               	movwf	?_strcat+3,c
 15501  00307C  0EFC               	movlw	low STR_242
 15502  00307E  6E1B               	movwf	?_strcat+2,c
 15503  003080  EC7A  F011         	call	_strcat	;wreg free
 15504  003084                     l14079:
 15505                           
 15506                           ;main.c: 2448: }
 15507                           ;main.c: 2450: if ( i < 2 ) {
 15508  003084  0E02               	movlw	2
 15509  003086  0100               	movlb	0	; () banked
 15510  003088  61AC               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 15511  00308A  D00B               	goto	l14083
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;main.c: 2451: strcat( wrkbuf, "." );
 15515  00308C  0101               	movlb	1	; () banked
 15516  00308E  0E01               	movlw	high _wrkbuf
 15517  003090  6E1A               	movwf	?_strcat+1,c
 15518  003092  0E74               	movlw	low _wrkbuf
 15519  003094  6E19               	movwf	?_strcat,c
 15520  003096  0E7C               	movlw	high STR_243
 15521  003098  6E1C               	movwf	?_strcat+3,c
 15522  00309A  0EF6               	movlw	low STR_243
 15523  00309C  6E1B               	movwf	?_strcat+2,c
 15524  00309E  EC7A  F011         	call	_strcat	;wreg free
 15525  0030A2                     l14083:
 15526  0030A2  0100               	movlb	0	; () banked
 15527  0030A4  2BAC               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 15528                           
 15529                           ; BSR set to: 0
 15530  0030A6  0E02               	movlw	2
 15531  0030A8  65AC               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 15532  0030AA  D7BB               	goto	l14071
 15533                           
 15534                           ; BSR set to: 0
 15535                           ;main.c: 2452: }
 15536                           ;main.c: 2454: }
 15537                           ;main.c: 2456: putsUSART( wrkbuf );
 15538  0030AC  0101               	movlb	1	; () banked
 15539  0030AE  0E01               	movlw	high _wrkbuf
 15540  0030B0  6E1B               	movwf	?_putsUSART+1,c
 15541  0030B2  0E74               	movlw	low _wrkbuf
 15542  0030B4  6E1A               	movwf	?_putsUSART,c
 15543  0030B6  EC50  F011         	call	_putsUSART	;wreg free
 15544                           
 15545                           ;main.c: 2457: putsUSART((char *)"\r\n");
 15546  0030BA  0E71               	movlw	high (STR_188+50)
 15547  0030BC  6E1B               	movwf	?_putsUSART+1,c
 15548  0030BE  0EB2               	movlw	low (STR_188+50)
 15549  0030C0  6E1A               	movwf	?_putsUSART,c
 15550  0030C2  EF50  F011         	goto	_putsUSART	;wreg free
 15551  0030C6                     __end_of_printNodeFirmwareVersion:
 15552                           	opt stack 0
 15553                           tblptru	equ	0xFF8
 15554                           tblptrh	equ	0xFF7
 15555                           tblptrl	equ	0xFF6
 15556                           tablat	equ	0xFF5
 15557                           prodh	equ	0xFF4
 15558                           prodl	equ	0xFF3
 15559                           intcon	equ	0xFF2
 15560                           indf0	equ	0xFEF
 15561                           postinc0	equ	0xFEE
 15562                           fsr0h	equ	0xFEA
 15563                           fsr0l	equ	0xFE9
 15564                           wreg	equ	0xFE8
 15565                           indf1	equ	0xFE7
 15566                           postinc1	equ	0xFE6
 15567                           postdec1	equ	0xFE5
 15568                           fsr1h	equ	0xFE2
 15569                           fsr1l	equ	0xFE1
 15570                           indf2	equ	0xFDF
 15571                           postinc2	equ	0xFDE
 15572                           postdec2	equ	0xFDD
 15573                           plusw2	equ	0xFDB
 15574                           fsr2h	equ	0xFDA
 15575                           fsr2l	equ	0xFD9
 15576                           status	equ	0xFD8
 15577                           
 15578 ;; *************** function _strcat *****************
 15579 ;; Defined at:
 15580 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  to              2   24[COMRAM] PTR unsigned char 
 15583 ;;		 -> wrkbuf(80), 
 15584 ;;  from            2   26[COMRAM] PTR const unsigned char 
 15585 ;;		 -> STR_243(2), STR_242(2), printNodeFirmwareVersion@buf(3), STR_237(2), 
 15586 ;;		 -> STR_236(3), STR_235(2), printGUID@buf(3), 
 15587 ;; Auto vars:     Size  Location     Type
 15588 ;;  cp              2   28[COMRAM] PTR unsigned char 
 15589 ;;		 -> wrkbuf(80), 
 15590 ;; Return value:  Size  Location     Type
 15591 ;;                  2   24[COMRAM] PTR unsigned char 
 15592 ;; Registers used:
 15593 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15594 ;; Tracked objects:
 15595 ;;		On entry : E/1
 15596 ;;		On exit  : 0/0
 15597 ;;		Unchanged: 0/0
 15598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15599 ;;      Params:         4       0       0       0       0       0       0
 15600 ;;      Locals:         2       0       0       0       0       0       0
 15601 ;;      Temps:          0       0       0       0       0       0       0
 15602 ;;      Totals:         6       0       0       0       0       0       0
 15603 ;;Total ram usage:        6 bytes
 15604 ;; Hardware stack levels used:    1
 15605 ;; Hardware stack levels required when called:    2
 15606 ;; This function calls:
 15607 ;;		Nothing
 15608 ;; This function is called by:
 15609 ;;		_printGUID
 15610 ;;		_printNodeFirmwareVersion
 15611 ;; This function uses a non-reentrant model
 15612 ;;
 15613                           
 15614                           	psect	text29
 15615  0022F4                     __ptext29:
 15616                           	opt stack 0
 15617  0022F4                     _strcat:
 15618                           	opt stack 25
 15619                           
 15620                           ;incstack = 0
 15621                           ;incstack = 0
 15622  0022F4  C019  F01D         	movff	strcat@to,strcat@cp
 15623  0022F8  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
 15624  0022FC  D002               	goto	l11987
 15625  0022FE                     l11985:
 15626  0022FE  4A1D               	infsnz	strcat@cp,f,c
 15627  002300  2A1E               	incf	strcat@cp+1,f,c
 15628  002302                     l11987:
 15629  002302  C01D  FFD9         	movff	strcat@cp,fsr2l
 15630  002306  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15631  00230A  50DF               	movf	indf2,w,c
 15632  00230C  E005               	bz	l11991
 15633  00230E  D7F7               	goto	l11985
 15634  002310                     l11989:
 15635  002310  4A1D               	infsnz	strcat@cp,f,c
 15636  002312  2A1E               	incf	strcat@cp+1,f,c
 15637  002314  4A1B               	infsnz	strcat@from,f,c
 15638  002316  2A1C               	incf	strcat@from+1,f,c
 15639  002318                     l11991:
 15640  002318  C01B  FFF6         	movff	strcat@from,tblptrl
 15641  00231C  C01C  FFF7         	movff	strcat@from+1,tblptrh
 15642  002320  6AF8               	clrf	tblptru,c
 15643  002322  C01D  FFD9         	movff	strcat@cp,fsr2l
 15644  002326  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15645  00232A  0E05               	movlw	(high __ramtop+-1)
 15646  00232C  64F7               	cpfsgt	tblptrh,c
 15647  00232E  D003               	bra	u15497
 15648  002330  0008               	tblrd		*
 15649  002332  50F5               	movf	tablat,w,c
 15650  002334  D005               	bra	u15490
 15651  002336                     u15497:
 15652  002336  CFF6 FFE9          	movff	tblptrl,fsr0l
 15653  00233A  CFF7 FFEA          	movff	tblptrh,fsr0h
 15654  00233E  50EF               	movf	indf0,w,c
 15655  002340                     u15490:
 15656  002340  6EDF               	movwf	indf2,c
 15657  002342  50DF               	movf	indf2,w,c
 15658  002344  B4D8               	btfsc	status,2,c
 15659  002346  0012               	return	
 15660  002348  D7E3               	goto	l11989
 15661  00234A                     __end_of_strcat:
 15662                           	opt stack 0
 15663                           tblptru	equ	0xFF8
 15664                           tblptrh	equ	0xFF7
 15665                           tblptrl	equ	0xFF6
 15666                           tablat	equ	0xFF5
 15667                           prodh	equ	0xFF4
 15668                           prodl	equ	0xFF3
 15669                           intcon	equ	0xFF2
 15670                           indf0	equ	0xFEF
 15671                           postinc0	equ	0xFEE
 15672                           fsr0h	equ	0xFEA
 15673                           fsr0l	equ	0xFE9
 15674                           wreg	equ	0xFE8
 15675                           indf1	equ	0xFE7
 15676                           postinc1	equ	0xFE6
 15677                           postdec1	equ	0xFE5
 15678                           fsr1h	equ	0xFE2
 15679                           fsr1l	equ	0xFE1
 15680                           indf2	equ	0xFDF
 15681                           postinc2	equ	0xFDE
 15682                           postdec2	equ	0xFDD
 15683                           plusw2	equ	0xFDB
 15684                           fsr2h	equ	0xFDA
 15685                           fsr2l	equ	0xFD9
 15686                           status	equ	0xFD8
 15687                           
 15688 ;; *************** function _readRegister *****************
 15689 ;; Defined at:
 15690 ;;		line 1923 in file "main.c"
 15691 ;; Parameters:    Size  Location     Type
 15692 ;;  nodeid          1    wreg     unsigned char 
 15693 ;;  reg             1   62[BANK0 ] unsigned char 
 15694 ;;  timeout         2   63[BANK0 ] unsigned short 
 15695 ;;  value           1   65[BANK0 ] PTR unsigned char 
 15696 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 15697 ;; Auto vars:     Size  Location     Type
 15698 ;;  nodeid          1   70[BANK0 ] unsigned char 
 15699 ;; Return value:  Size  Location     Type
 15700 ;;                  1    wreg      enum E15660
 15701 ;; Registers used:
 15702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15703 ;; Tracked objects:
 15704 ;;		On entry : F/0
 15705 ;;		On exit  : E/0
 15706 ;;		Unchanged: 0/0
 15707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15708 ;;      Params:         0       4       0       0       0       0       0
 15709 ;;      Locals:         0       1       0       0       0       0       0
 15710 ;;      Temps:          0       4       0       0       0       0       0
 15711 ;;      Totals:         0       9       0       0       0       0       0
 15712 ;;Total ram usage:        9 bytes
 15713 ;; Hardware stack levels used:    1
 15714 ;; Hardware stack levels required when called:    6
 15715 ;; This function calls:
 15716 ;;		_sendVSCPFrame
 15717 ;;		_getVSCPFrame
 15718 ;; This function is called by:
 15719 ;;		_findNodes
 15720 ;;		_printGUID
 15721 ;;		_printMDF
 15722 ;;		_printNodeFirmwareVersion
 15723 ;; This function uses a non-reentrant model
 15724 ;;
 15725                           
 15726                           	psect	text30
 15727  002C4E                     __ptext30:
 15728                           	opt stack 0
 15729  002C4E                     _readRegister:
 15730                           	opt stack 21
 15731                           
 15732                           ;incstack = 0
 15733                           ;incstack = 0
 15734                           ;readRegister@nodeid stored from wreg
 15735  002C4E  CFE8 F0A6          	movff	wreg,readRegister@nodeid
 15736                           
 15737                           ; BSR set to: 0
 15738                           ;main.c: 1924: vscpData[ 0 ] = nodeid;
 15739  002C52  C0A6  F040         	movff	readRegister@nodeid,_vscpData
 15740                           
 15741                           ; BSR set to: 0
 15742                           ;main.c: 1925: vscpData[ 1 ] = reg;
 15743  002C56  C09E  F041         	movff	readRegister@reg,_vscpData+1
 15744                           
 15745                           ; BSR set to: 0
 15746                           ;main.c: 1927: if (sendVSCPFrame( 0,
 15747                           ;main.c: 1928: 9,
 15748                           ;main.c: 1929: 0,
 15749                           ;main.c: 1930: 0,
 15750                           ;main.c: 1931: 2,
 15751                           ;main.c: 1932: vscpData)) {
 15752  002C5A  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15753  002C5C  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 15754  002C5E  0E09               	movlw	9
 15755  002C60  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15756  002C62  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15757  002C64  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15758  002C66  0E02               	movlw	2
 15759  002C68  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15760  002C6A  0E40               	movlw	low _vscpData
 15761  002C6C  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15762  002C6E  ECD6  F016         	call	_sendVSCPFrame	;wreg free
 15763  002C72  0900               	iorlw	0
 15764  002C74  E03E               	bz	l14561
 15765                           
 15766                           ;main.c: 1934: timekeeper = 0;
 15767  002C76  0100               	movlb	0	; () banked
 15768  002C78  6BCD               	clrf	_timekeeper& (0+255),b	;volatile
 15769  002C7A  6BCE               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15770  002C7C  6BCF               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15771  002C7E  6BD0               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15772                           
 15773                           ;main.c: 1935: while ( timekeeper < timeout ) {
 15774  002C80  D028               	goto	l14559
 15775  002C82                     l961:
 15776                           
 15777                           ; BSR set to: 0
 15778  002C82  0004               	clrwdt		;# 
 15779                           
 15780                           ;main.c: 1939: if ( getVSCPFrame( &vscpClass,
 15781                           ;main.c: 1940: &vscpType,
 15782                           ;main.c: 1941: &vscpNodeId,
 15783                           ;main.c: 1942: &vscpPriority,
 15784                           ;main.c: 1943: &vscpSize,
 15785                           ;main.c: 1944: vscpData)) {
 15786  002C84  0100               	movlb	0	; () banked
 15787  002C86  0EDF               	movlw	low _vscpType
 15788  002C88  6F62               	movwf	?_getVSCPFrame& (0+255),b
 15789  002C8A  0EDC               	movlw	low _vscpNodeId
 15790  002C8C  6F63               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15791  002C8E  0EDD               	movlw	low _vscpPriority
 15792  002C90  6F64               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15793  002C92  0EDE               	movlw	low _vscpSize
 15794  002C94  6F65               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15795  002C96  0E40               	movlw	low _vscpData
 15796  002C98  6F66               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15797  002C9A  0EDA               	movlw	_vscpClass& (0+255)
 15798  002C9C  EC28  F014         	call	_getVSCPFrame
 15799  002CA0  0900               	iorlw	0
 15800  002CA2  E017               	bz	l14559
 15801                           
 15802                           ;main.c: 1945: if ( ( nodeid == vscpNodeId) &&
 15803                           ;main.c: 1946: (0 == vscpClass) &&
 15804                           ;main.c: 1947: (10 == vscpType) &&
 15805                           ;main.c: 1948: (2 == vscpSize) &&
 15806                           ;main.c: 1949: (reg == vscpData[ 0 ])) {
 15807  002CA4  0100               	movlb	0	; () banked
 15808  002CA6  51DC               	movf	_vscpNodeId& (0+255),w,b
 15809  002CA8  63A6               	cpfseq	readRegister@nodeid& (0+255),b
 15810  002CAA  D013               	goto	l14559
 15811                           
 15812                           ; BSR set to: 0
 15813  002CAC  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 15814  002CAE  11DA               	iorwf	_vscpClass& (0+255),w,b
 15815  002CB0  E110               	bnz	l14559
 15816                           
 15817                           ; BSR set to: 0
 15818  002CB2  51DF               	movf	_vscpType& (0+255),w,b
 15819  002CB4  0A0A               	xorlw	10
 15820  002CB6  E10D               	bnz	l14559
 15821                           
 15822                           ; BSR set to: 0
 15823  002CB8  51DE               	movf	_vscpSize& (0+255),w,b
 15824  002CBA  0A02               	xorlw	2
 15825  002CBC  E10A               	bnz	l14559
 15826                           
 15827                           ; BSR set to: 0
 15828  002CBE  5040               	movf	_vscpData,w,c
 15829  002CC0  639E               	cpfseq	readRegister@reg& (0+255),b
 15830  002CC2  D007               	goto	l14559
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;main.c: 1950: *value = vscpData[ 1 ];
 15834  002CC4  51A1               	movf	readRegister@value& (0+255),w,b
 15835  002CC6  6ED9               	movwf	fsr2l,c
 15836  002CC8  6ADA               	clrf	fsr2h,c
 15837  002CCA  C041  FFDF         	movff	_vscpData+1,indf2
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;main.c: 1951: return 1;
 15841  002CCE  0E01               	movlw	1
 15842  002CD0  D011               	goto	l964
 15843  002CD2                     l14559:
 15844  002CD2  0100               	movlb	0	; () banked
 15845  002CD4  519F               	movf	readRegister@timeout& (0+255),w,b
 15846  002CD6  6FA2               	movwf	??_readRegister& (0+255),b
 15847  002CD8  51A0               	movf	(readRegister@timeout+1)& (0+255),w,b
 15848  002CDA  6FA3               	movwf	(??_readRegister+1)& (0+255),b
 15849  002CDC  6BA4               	clrf	(??_readRegister+2)& (0+255),b
 15850  002CDE  6BA5               	clrf	(??_readRegister+3)& (0+255),b
 15851  002CE0  51A2               	movf	??_readRegister& (0+255),w,b
 15852  002CE2  5DCD               	subwf	_timekeeper& (0+255),w,b	;volatile
 15853  002CE4  51A3               	movf	(??_readRegister+1)& (0+255),w,b
 15854  002CE6  59CE               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15855  002CE8  51A4               	movf	(??_readRegister+2)& (0+255),w,b
 15856  002CEA  59CF               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15857  002CEC  51A5               	movf	(??_readRegister+3)& (0+255),w,b
 15858  002CEE  59D0               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15859  002CF0  E3C8               	bnc	l961
 15860  002CF2                     l14561:
 15861                           
 15862                           ;main.c: 1952: }
 15863                           ;main.c: 1953: }
 15864                           ;main.c: 1954: }
 15865                           ;main.c: 1955: }
 15866                           ;main.c: 1957: return 0;
 15867  002CF2  0E00               	movlw	0
 15868  002CF4                     l964:
 15869  002CF4  0012               	return	
 15870  002CF6                     __end_of_readRegister:
 15871                           	opt stack 0
 15872                           tblptru	equ	0xFF8
 15873                           tblptrh	equ	0xFF7
 15874                           tblptrl	equ	0xFF6
 15875                           tablat	equ	0xFF5
 15876                           prodh	equ	0xFF4
 15877                           prodl	equ	0xFF3
 15878                           intcon	equ	0xFF2
 15879                           indf0	equ	0xFEF
 15880                           postinc0	equ	0xFEE
 15881                           fsr0h	equ	0xFEA
 15882                           fsr0l	equ	0xFE9
 15883                           wreg	equ	0xFE8
 15884                           indf1	equ	0xFE7
 15885                           postinc1	equ	0xFE6
 15886                           postdec1	equ	0xFE5
 15887                           fsr1h	equ	0xFE2
 15888                           fsr1l	equ	0xFE1
 15889                           indf2	equ	0xFDF
 15890                           postinc2	equ	0xFDE
 15891                           postdec2	equ	0xFDD
 15892                           plusw2	equ	0xFDB
 15893                           fsr2h	equ	0xFDA
 15894                           fsr2l	equ	0xFD9
 15895                           status	equ	0xFD8
 15896                           
 15897 ;; *************** function _sendVSCPFrame *****************
 15898 ;; Defined at:
 15899 ;;		line 2658 in file "main.c"
 15900 ;; Parameters:    Size  Location     Type
 15901 ;;  vscpclass       2   35[BANK0 ] unsigned short 
 15902 ;;  vscptype        1   37[BANK0 ] unsigned char 
 15903 ;;  nodeid          1   38[BANK0 ] unsigned char 
 15904 ;;  priority        1   39[BANK0 ] unsigned char 
 15905 ;;  size            1   40[BANK0 ] unsigned char 
 15906 ;;  pData           1   41[BANK0 ] PTR unsigned char 
 15907 ;;		 -> vscpData(8), 
 15908 ;; Auto vars:     Size  Location     Type
 15909 ;;  id              4   43[COMRAM] unsigned long 
 15910 ;; Return value:  Size  Location     Type
 15911 ;;                  1    wreg      unsigned char 
 15912 ;; Registers used:
 15913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15914 ;; Tracked objects:
 15915 ;;		On entry : F/0
 15916 ;;		On exit  : E/0
 15917 ;;		Unchanged: 0/0
 15918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15919 ;;      Params:         0       7       0       0       0       0       0
 15920 ;;      Locals:         4       0       0       0       0       0       0
 15921 ;;      Temps:          0      20       0       0       0       0       0
 15922 ;;      Totals:         4      27       0       0       0       0       0
 15923 ;;Total ram usage:       31 bytes
 15924 ;; Hardware stack levels used:    1
 15925 ;; Hardware stack levels required when called:    5
 15926 ;; This function calls:
 15927 ;;		_sendCANFrame
 15928 ;; This function is called by:
 15929 ;;		_doModeVerbose
 15930 ;;		_readRegister
 15931 ;;		_readRegisterExtended
 15932 ;;		_writeRegisterExtended
 15933 ;; This function uses a non-reentrant model
 15934 ;;
 15935                           
 15936                           	psect	text31
 15937  002DAC                     __ptext31:
 15938                           	opt stack 0
 15939  002DAC                     _sendVSCPFrame:
 15940                           	opt stack 21
 15941                           
 15942                           ; BSR set to: 0
 15943                           ;main.c: 2659: uint32_t id = ((uint32_t) priority << 26) |
 15944                           ;main.c: 2660: ((uint32_t) vscpclass << 16) |
 15945                           ;main.c: 2661: ((uint32_t) vscptype << 8) |
 15946                           ;main.c: 2662: nodeid;
 15947                           
 15948                           ;incstack = 0
 15949                           ;incstack = 0
 15950  002DAC  C085  F08A         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15951  002DB0  6B8B               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15952  002DB2  6B8C               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15953  002DB4  6B8D               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15954  002DB6  C08C  F08D         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15955  002DBA  C08B  F08C         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15956  002DBE  C08A  F08B         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15957  002DC2  6B8A               	clrf	??_sendVSCPFrame& (0+255),b
 15958  002DC4  5183               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15959  002DC6  6F8E               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15960  002DC8  5184               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15961  002DCA  6F8F               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15962  002DCC  6B90               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15963  002DCE  6B91               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15964  002DD0  C08F  F091         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15965  002DD4  C08E  F090         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15966  002DD8  6B8F               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15967  002DDA  6B8E               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15968  002DDC  C087  F092         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15969  002DE0  6B93               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15970  002DE2  6B94               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15971  002DE4  6B95               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15972  002DE6  0E1A               	movlw	26
 15973  002DE8                     u18145:
 15974  002DE8  90D8               	bcf	status,0,c
 15975  002DEA  3792               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15976  002DEC  3793               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15977  002DEE  3794               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15978  002DF0  3795               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15979  002DF2  2EE8               	decfsz	wreg,f,c
 15980  002DF4  D7F9               	goto	u18145
 15981  002DF6  518E               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15982  002DF8  1192               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15983  002DFA  6F96               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15984  002DFC  518F               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15985  002DFE  1193               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15986  002E00  6F97               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15987  002E02  5190               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15988  002E04  1194               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15989  002E06  6F98               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15990  002E08  5191               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15991  002E0A  1195               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15992  002E0C  6F99               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15993  002E0E  518A               	movf	??_sendVSCPFrame& (0+255),w,b
 15994  002E10  1196               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15995  002E12  6F9A               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15996  002E14  518B               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15997  002E16  1197               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15998  002E18  6F9B               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15999  002E1A  518C               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 16000  002E1C  1198               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 16001  002E1E  6F9C               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 16002  002E20  518D               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 16003  002E22  1199               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 16004  002E24  6F9D               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 16005  002E26  5186               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 16006  002E28  119A               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 16007  002E2A  6E2C               	movwf	sendVSCPFrame@id,c
 16008  002E2C  519B               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 16009  002E2E  6E2D               	movwf	sendVSCPFrame@id+1,c
 16010  002E30  519C               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 16011  002E32  6E2E               	movwf	sendVSCPFrame@id+2,c
 16012  002E34  519D               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 16013  002E36  6E2F               	movwf	sendVSCPFrame@id+3,c
 16014                           
 16015                           ; BSR set to: 0
 16016                           ;main.c: 2664: if (!sendCANFrame(id, size, pData)) {
 16017  002E38  C02C  F07C         	movff	sendVSCPFrame@id,?_sendCANFrame
 16018  002E3C  C02D  F07D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 16019  002E40  C02E  F07E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 16020  002E44  C02F  F07F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 16021  002E48  C088  F080         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 16022  002E4C  C089  F081         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 16023  002E50  0E0F               	movlw	15
 16024  002E52  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
 16025  002E54  0E5F               	movlw	__accesstop+-1
 16026  002E56  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
 16027  002E58  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
 16028  002E5A  ECA3  F00F         	call	_sendCANFrame	;wreg free
 16029  002E5E  0900               	iorlw	0
 16030                           
 16031                           ;main.c: 2666: return 0;
 16032  002E60  0E00               	movlw	0
 16033  002E62  A4D8               	btfss	status,2,c
 16034                           
 16035                           ;main.c: 2667: }
 16036                           ;main.c: 2669: return 1;
 16037  002E64  0E01               	movlw	1
 16038  002E66  0012               	return	
 16039  002E68                     __end_of_sendVSCPFrame:
 16040                           	opt stack 0
 16041                           tblptru	equ	0xFF8
 16042                           tblptrh	equ	0xFF7
 16043                           tblptrl	equ	0xFF6
 16044                           tablat	equ	0xFF5
 16045                           prodh	equ	0xFF4
 16046                           prodl	equ	0xFF3
 16047                           intcon	equ	0xFF2
 16048                           indf0	equ	0xFEF
 16049                           postinc0	equ	0xFEE
 16050                           fsr0h	equ	0xFEA
 16051                           fsr0l	equ	0xFE9
 16052                           wreg	equ	0xFE8
 16053                           indf1	equ	0xFE7
 16054                           postinc1	equ	0xFE6
 16055                           postdec1	equ	0xFE5
 16056                           fsr1h	equ	0xFE2
 16057                           fsr1l	equ	0xFE1
 16058                           indf2	equ	0xFDF
 16059                           postinc2	equ	0xFDE
 16060                           postdec2	equ	0xFDD
 16061                           plusw2	equ	0xFDB
 16062                           fsr2h	equ	0xFDA
 16063                           fsr2l	equ	0xFD9
 16064                           status	equ	0xFD8
 16065                           
 16066 ;; *************** function _sendCANFrame *****************
 16067 ;; Defined at:
 16068 ;;		line 2704 in file "main.c"
 16069 ;; Parameters:    Size  Location     Type
 16070 ;;  id              4   28[BANK0 ] unsigned long 
 16071 ;;  dlc             1   32[BANK0 ] unsigned char 
 16072 ;;  pdata           2   33[BANK0 ] PTR unsigned char 
 16073 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16074 ;; Auto vars:     Size  Location     Type
 16075 ;;		None
 16076 ;; Return value:  Size  Location     Type
 16077 ;;                  1    wreg      unsigned char 
 16078 ;; Registers used:
 16079 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16080 ;; Tracked objects:
 16081 ;;		On entry : F/0
 16082 ;;		On exit  : E/0
 16083 ;;		Unchanged: 0/0
 16084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16085 ;;      Params:         0       7       0       0       0       0       0
 16086 ;;      Locals:         0       0       0       0       0       0       0
 16087 ;;      Temps:          0       0       0       0       0       0       0
 16088 ;;      Totals:         0       7       0       0       0       0       0
 16089 ;;Total ram usage:        7 bytes
 16090 ;; Hardware stack levels used:    1
 16091 ;; Hardware stack levels required when called:    4
 16092 ;; This function calls:
 16093 ;;		_ECANSendMessage
 16094 ;; This function is called by:
 16095 ;;		_doModeSLCAN
 16096 ;;		_receiveVSCPModeCanalMsg
 16097 ;;		_sendVSCPFrame
 16098 ;; This function uses a non-reentrant model
 16099 ;;
 16100                           
 16101                           	psect	text32
 16102  001F46                     __ptext32:
 16103                           	opt stack 0
 16104  001F46                     _sendCANFrame:
 16105                           	opt stack 24
 16106                           
 16107                           ; BSR set to: 0
 16108                           ;main.c: 2705: if ( !ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16109                           
 16110                           ;incstack = 0
 16111                           ;incstack = 0
 16112  001F46  C07C  F023         	movff	sendCANFrame@id,?_ECANSendMessage
 16113  001F4A  C07D  F024         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16114  001F4E  C07E  F025         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16115  001F52  C07F  F026         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16116  001F56  C081  F027         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16117  001F5A  C082  F028         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16118  001F5E  C080  F029         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16119  001F62  0E20               	movlw	32
 16120  001F64  6E2A               	movwf	?_ECANSendMessage+7,c
 16121  001F66  EC5A  F01F         	call	_ECANSendMessage	;wreg free
 16122  001F6A  0900               	iorlw	0
 16123  001F6C  E107               	bnz	l14453
 16124                           
 16125                           ; BSR set to: 0
 16126                           ;main.c: 2707: can_transmitOverruns++;
 16127  001F6E  0101               	movlb	1	; () banked
 16128  001F70  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 16129  001F72  0E00               	movlw	0
 16130  001F74  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 16131  001F76  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 16132  001F78  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 16133                           
 16134                           ; BSR set to: 1
 16135                           ;main.c: 2708: return 0;
 16136  001F7A  D001               	goto	l1160
 16137  001F7C                     l14453:
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;main.c: 2709: }
 16141                           ;main.c: 2711: return 1;
 16142  001F7C  0E01               	movlw	1
 16143  001F7E                     l1160:
 16144  001F7E  0012               	return	
 16145  001F80                     __end_of_sendCANFrame:
 16146                           	opt stack 0
 16147                           tblptru	equ	0xFF8
 16148                           tblptrh	equ	0xFF7
 16149                           tblptrl	equ	0xFF6
 16150                           tablat	equ	0xFF5
 16151                           prodh	equ	0xFF4
 16152                           prodl	equ	0xFF3
 16153                           intcon	equ	0xFF2
 16154                           indf0	equ	0xFEF
 16155                           postinc0	equ	0xFEE
 16156                           fsr0h	equ	0xFEA
 16157                           fsr0l	equ	0xFE9
 16158                           wreg	equ	0xFE8
 16159                           indf1	equ	0xFE7
 16160                           postinc1	equ	0xFE6
 16161                           postdec1	equ	0xFE5
 16162                           fsr1h	equ	0xFE2
 16163                           fsr1l	equ	0xFE1
 16164                           indf2	equ	0xFDF
 16165                           postinc2	equ	0xFDE
 16166                           postdec2	equ	0xFDD
 16167                           plusw2	equ	0xFDB
 16168                           fsr2h	equ	0xFDA
 16169                           fsr2l	equ	0xFD9
 16170                           status	equ	0xFD8
 16171                           
 16172 ;; *************** function _ECANSendMessage *****************
 16173 ;; Defined at:
 16174 ;;		line 617 in file "ECAN.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;  id              4   34[COMRAM] unsigned long 
 16177 ;;  data            2   38[COMRAM] PTR unsigned char 
 16178 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16179 ;;  dataLen         1   40[COMRAM] unsigned char 
 16180 ;;  msgFlags        1   41[COMRAM] enum E16315
 16181 ;; Auto vars:     Size  Location     Type
 16182 ;;  pb             18    0[BANK0 ] PTR unsigned char [9]
 16183 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16184 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16185 ;;		 -> B0CON(1), 
 16186 ;;  ptr             2   26[BANK0 ] PTR unsigned char 
 16187 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16188 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16189 ;;		 -> B0CON(1), 
 16190 ;;  tempPtr         2   22[BANK0 ] PTR unsigned char 
 16191 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16192 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16193 ;;		 -> B0CON(1), 
 16194 ;;  i               1   25[BANK0 ] unsigned char 
 16195 ;;  temp            1   24[BANK0 ] unsigned char 
 16196 ;;  tempBSEL0       1   21[BANK0 ] struct .
 16197 ;;  j               1   20[BANK0 ] unsigned char 
 16198 ;;  buffers         1   19[BANK0 ] unsigned char 
 16199 ;;  mode            1   18[BANK0 ] unsigned char 
 16200 ;; Return value:  Size  Location     Type
 16201 ;;                  1    wreg      enum E15660
 16202 ;; Registers used:
 16203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16204 ;; Tracked objects:
 16205 ;;		On entry : F/0
 16206 ;;		On exit  : F/0
 16207 ;;		Unchanged: 0/0
 16208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16209 ;;      Params:         8       0       0       0       0       0       0
 16210 ;;      Locals:         0      28       0       0       0       0       0
 16211 ;;      Temps:          1       0       0       0       0       0       0
 16212 ;;      Totals:         9      28       0       0       0       0       0
 16213 ;;Total ram usage:       37 bytes
 16214 ;; Hardware stack levels used:    1
 16215 ;; Hardware stack levels required when called:    3
 16216 ;; This function calls:
 16217 ;;		__CANIDToRegs
 16218 ;; This function is called by:
 16219 ;;		_sendCANFrame
 16220 ;; This function uses a non-reentrant model
 16221 ;;
 16222                           
 16223                           	psect	text33
 16224  003EB4                     __ptext33:
 16225                           	opt stack 0
 16226  003EB4                     _ECANSendMessage:
 16227                           	opt stack 24
 16228                           
 16229                           ; BSR set to: 0
 16230                           ;ECAN.c: 619: BYTE mode;
 16231                           ;ECAN.c: 620: BYTE buffers;
 16232                           ;ECAN.c: 628: BYTE i,j;
 16233                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16234                           ;ECAN.c: 630: BYTE* pb[9];
 16235                           ;ECAN.c: 631: BYTE temp;
 16236                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16237                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16238                           
 16239                           ;incstack = 0
 16240                           ;incstack = 0
 16241  003EB4  0E0F               	movlw	15	;volatile
 16242  003EB6  0100               	movlb	0	; () banked
 16243  003EB8  6F61               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 16244  003EBA  0E40               	movlw	64	;volatile
 16245  003EBC  6F60               	movwf	ECANSendMessage@pb& (0+255),b
 16246                           
 16247                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16248  003EBE  0E0F               	movlw	15	;volatile
 16249  003EC0  6F63               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 16250  003EC2  0E30               	movlw	48	;volatile
 16251  003EC4  6F62               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 16252                           
 16253                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16254  003EC6  0E0F               	movlw	15	;volatile
 16255  003EC8  6F65               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 16256  003ECA  0E20               	movlw	32	;volatile
 16257  003ECC  6F64               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 16258                           
 16259                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16260  003ECE  0E0E               	movlw	14	;volatile
 16261  003ED0  6F67               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 16262  003ED2  0E20               	movlw	32	;volatile
 16263  003ED4  6F66               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 16264                           
 16265                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16266  003ED6  0E0E               	movlw	14	;volatile
 16267  003ED8  6F69               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 16268  003EDA  0E30               	movlw	48	;volatile
 16269  003EDC  6F68               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 16270                           
 16271                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16272  003EDE  0E0E               	movlw	14	;volatile
 16273  003EE0  6F6B               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 16274  003EE2  0E40               	movlw	64	;volatile
 16275  003EE4  6F6A               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 16276                           
 16277                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16278  003EE6  0E0E               	movlw	14	;volatile
 16279  003EE8  6F6D               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 16280  003EEA  0E50               	movlw	80	;volatile
 16281  003EEC  6F6C               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 16282                           
 16283                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16284  003EEE  0E0E               	movlw	14	;volatile
 16285  003EF0  6F6F               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 16286  003EF2  0E60               	movlw	96	;volatile
 16287  003EF4  6F6E               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 16288                           
 16289                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16290  003EF6  0E0E               	movlw	14	;volatile
 16291  003EF8  6F71               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 16292  003EFA  0E70               	movlw	112	;volatile
 16293  003EFC  6F70               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16297  003EFE  5077               	movf	3959,w,c	;volatile
 16298  003F00  0BC0               	andlw	192
 16299  003F02  6F72               	movwf	ECANSendMessage@mode& (0+255),b
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;ECAN.c: 660: if ( mode == 0x00 )
 16303  003F04  6772               	tstfsz	ECANSendMessage@mode& (0+255),b
 16304  003F06  D002               	goto	l14573
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;ECAN.c: 661: buffers = 2;
 16308  003F08  0E02               	movlw	2
 16309  003F0A  D001               	goto	L14
 16310  003F0C                     l14573:
 16311                           
 16312                           ; BSR set to: 0
 16313                           ;ECAN.c: 662: else
 16314                           ;ECAN.c: 663: buffers = 8;
 16315  003F0C  0E08               	movlw	8
 16316  003F0E                     L14:
 16317  003F0E  6F73               	movwf	ECANSendMessage@buffers& (0+255),b
 16318                           
 16319                           ; BSR set to: 0
 16320                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16321  003F10  010D               	movlb	13	; () banked
 16322  003F12  90D8               	bcf	status,0,c
 16323  003F14  31F8               	rrcf	248,w,b	;volatile
 16324  003F16  0100               	movlb	0	; () banked
 16325  003F18  6F75               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 16326                           
 16327                           ; BSR set to: 0
 16328                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16329  003F1A  6B79               	clrf	ECANSendMessage@i& (0+255),b
 16330  003F1C  D07E               	goto	l14633
 16331  003F1E                     l14579:
 16332                           
 16333                           ; BSR set to: 0
 16334                           ;ECAN.c: 688: {
 16335                           ;ECAN.c: 693: ptr = pb[i];
 16336  003F1E  5179               	movf	ECANSendMessage@i& (0+255),w,b
 16337  003F20  0D02               	mullw	2
 16338  003F22  50F3               	movf	prodl,w,c
 16339  003F24  0F60               	addlw	low ECANSendMessage@pb
 16340  003F26  6ED9               	movwf	fsr2l,c
 16341  003F28  6ADA               	clrf	fsr2h,c
 16342  003F2A  CFDE F07A          	movff	postinc2,ECANSendMessage@ptr
 16343  003F2E  CFDD F07B          	movff	postdec2,ECANSendMessage@ptr+1
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;ECAN.c: 694: tempPtr = ptr;
 16347  003F32  C07A  F076         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16348  003F36  C07B  F077         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;ECAN.c: 702: if ( i > 2 )
 16352  003F3A  0E02               	movlw	2
 16353  003F3C  6579               	cpfsgt	ECANSendMessage@i& (0+255),b
 16354  003F3E  D004               	goto	l14591
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;ECAN.c: 703: {
 16358                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16359  003F40  90D8               	bcf	status,0,c
 16360  003F42  3375               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 16361                           
 16362                           ; BSR set to: 0
 16363                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16364  003F44  A175               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 16365  003F46  D068               	goto	l14631
 16366  003F48                     l14591:
 16367                           
 16368                           ; BSR set to: 0
 16369                           ;ECAN.c: 714: }
 16370                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16371  003F48  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16372  003F4C  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16373  003F50  50DF               	movf	indf2,w,c
 16374  003F52  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16375  003F54  B62B               	btfsc	??_ECANSendMessage,3,c
 16376  003F56  D060               	goto	l14631
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;ECAN.c: 721: {
 16380                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16381  003F58  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16382  003F5C  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16383  003F60  0EFC               	movlw	252
 16384  003F62  16DF               	andwf	indf2,f,c
 16385                           
 16386                           ; BSR set to: 0
 16387                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16388  003F64  C02A  F02B         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16389  003F68  0E03               	movlw	3
 16390  003F6A  162B               	andwf	??_ECANSendMessage,f,c
 16391  003F6C  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16392  003F70  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16393  003F74  502B               	movf	??_ECANSendMessage,w,c
 16394  003F76  12DF               	iorwf	indf2,f,c
 16395                           
 16396                           ; BSR set to: 0
 16397                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16398  003F78  AC2A               	btfss	ECANSendMessage@msgFlags,6,c
 16399  003F7A  D004               	goto	l1326
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16403  003F7C  5029               	movf	ECANSendMessage@dataLen,w,c
 16404  003F7E  0940               	iorlw	64
 16405  003F80  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16406  003F82  D002               	goto	l14601
 16407  003F84                     l1326:
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;ECAN.c: 729: else
 16411                           ;ECAN.c: 730: temp = dataLen;
 16412  003F84  C029  F078         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16413  003F88                     l14601:
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;ECAN.c: 732: *(ptr+5) = temp;
 16417  003F88  EE20 F005          	lfsr	2,5
 16418  003F8C  517A               	movf	ECANSendMessage@ptr& (0+255),w,b
 16419  003F8E  26D9               	addwf	fsr2l,f,c
 16420  003F90  517B               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 16421  003F92  22DA               	addwfc	fsr2h,f,c
 16422  003F94  C078  FFDF         	movff	ECANSendMessage@temp,indf2
 16423                           
 16424                           ; BSR set to: 0
 16425                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16426  003F98  AA2A               	btfss	ECANSendMessage@msgFlags,5,c
 16427  003F9A  D003               	goto	l1328
 16428                           
 16429                           ; BSR set to: 0
 16430                           ;ECAN.c: 736: temp = 1;
 16431  003F9C  0E01               	movlw	1
 16432  003F9E  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16433  003FA0  D001               	goto	l14607
 16434  003FA2                     l1328:
 16435                           
 16436                           ; BSR set to: 0
 16437                           ;ECAN.c: 738: else
 16438                           ;ECAN.c: 739: temp = 0;
 16439  003FA2  6B78               	clrf	ECANSendMessage@temp& (0+255),b
 16440  003FA4                     l14607:
 16441                           
 16442                           ; BSR set to: 0
 16443                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16444  003FA4  297A               	incf	ECANSendMessage@ptr& (0+255),w,b
 16445  003FA6  6E19               	movwf	?__CANIDToRegs,c
 16446  003FA8  0E00               	movlw	0
 16447  003FAA  217B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 16448  003FAC  6E1A               	movwf	?__CANIDToRegs+1,c
 16449  003FAE  C023  F01B         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16450  003FB2  C024  F01C         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16451  003FB6  C025  F01D         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16452  003FBA  C026  F01E         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16453  003FBE  C078  F01F         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16454  003FC2  EC72  F01C         	call	__CANIDToRegs	;wreg free
 16455                           
 16456                           ;ECAN.c: 745: ptr += 6;
 16457  003FC6  0E06               	movlw	6
 16458  003FC8  0100               	movlb	0	; () banked
 16459  003FCA  277A               	addwf	ECANSendMessage@ptr& (0+255),f,b
 16460  003FCC  0E00               	movlw	0
 16461  003FCE  237B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 16462                           
 16463                           ; BSR set to: 0
 16464                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16465  003FD0  6B74               	clrf	ECANSendMessage@j& (0+255),b
 16466  003FD2  D00F               	goto	l14621
 16467  003FD4                     l14613:
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;ECAN.c: 748: *ptr++ = *data++;
 16471  003FD4  C027  FFD9         	movff	ECANSendMessage@data,fsr2l
 16472  003FD8  C028  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16473  003FDC  C07A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16474  003FE0  C07B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16475  003FE4  CFDF FFE7          	movff	indf2,indf1
 16476                           
 16477                           ; BSR set to: 0
 16478  003FE8  4A27               	infsnz	ECANSendMessage@data,f,c
 16479  003FEA  2A28               	incf	ECANSendMessage@data+1,f,c
 16480                           
 16481                           ; BSR set to: 0
 16482  003FEC  4B7A               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 16483  003FEE  2B7B               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 16484                           
 16485                           ; BSR set to: 0
 16486  003FF0  2B74               	incf	ECANSendMessage@j& (0+255),f,b
 16487  003FF2                     l14621:
 16488                           
 16489                           ; BSR set to: 0
 16490  003FF2  5029               	movf	ECANSendMessage@dataLen,w,c
 16491  003FF4  5D74               	subwf	ECANSendMessage@j& (0+255),w,b
 16492  003FF6  E3EE               	bnc	l14613
 16493                           
 16494                           ; BSR set to: 0
 16495                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16496  003FF8  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16497  003FFC  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16498  004000  50DF               	movf	indf2,w,c
 16499  004002  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16500  004004  B42B               	btfsc	??_ECANSendMessage,2,c
 16501  004006  D006               	goto	l14627
 16502                           
 16503                           ; BSR set to: 0
 16504                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16505  004008  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16506  00400C  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16507  004010  0E00               	movlw	0
 16508  004012  86DB               	bsf	plusw2,3,c
 16509  004014                     l14627:
 16510                           
 16511                           ; BSR set to: 0
 16512                           ;ECAN.c: 755: return TRUE;
 16513  004014  0E01               	movlw	1
 16514  004016  D006               	goto	l1334
 16515  004018                     l14631:
 16516                           
 16517                           ; BSR set to: 0
 16518  004018  2B79               	incf	ECANSendMessage@i& (0+255),f,b
 16519  00401A                     l14633:
 16520                           
 16521                           ; BSR set to: 0
 16522  00401A  5173               	movf	ECANSendMessage@buffers& (0+255),w,b
 16523  00401C  5D79               	subwf	ECANSendMessage@i& (0+255),w,b
 16524  00401E  E201 D77E          	bnc	l14579
 16525                           
 16526                           ; BSR set to: 0
 16527                           ;ECAN.c: 756: }
 16528                           ;ECAN.c: 757: }
 16529                           ;ECAN.c: 760: return FALSE;
 16530  004022  0E00               	movlw	0
 16531  004024                     l1334:
 16532                           
 16533                           ; BSR set to: 0
 16534  004024  0012               	return	
 16535  004026                     __end_of_ECANSendMessage:
 16536                           	opt stack 0
 16537                           tblptru	equ	0xFF8
 16538                           tblptrh	equ	0xFF7
 16539                           tblptrl	equ	0xFF6
 16540                           tablat	equ	0xFF5
 16541                           prodh	equ	0xFF4
 16542                           prodl	equ	0xFF3
 16543                           intcon	equ	0xFF2
 16544                           indf0	equ	0xFEF
 16545                           postinc0	equ	0xFEE
 16546                           fsr0h	equ	0xFEA
 16547                           fsr0l	equ	0xFE9
 16548                           wreg	equ	0xFE8
 16549                           indf1	equ	0xFE7
 16550                           postinc1	equ	0xFE6
 16551                           postdec1	equ	0xFE5
 16552                           fsr1h	equ	0xFE2
 16553                           fsr1l	equ	0xFE1
 16554                           indf2	equ	0xFDF
 16555                           postinc2	equ	0xFDE
 16556                           postdec2	equ	0xFDD
 16557                           plusw2	equ	0xFDB
 16558                           fsr2h	equ	0xFDA
 16559                           fsr2l	equ	0xFD9
 16560                           status	equ	0xFD8
 16561                           
 16562 ;; *************** function __CANIDToRegs *****************
 16563 ;; Defined at:
 16564 ;;		line 1099 in file "ECAN.c"
 16565 ;; Parameters:    Size  Location     Type
 16566 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 16567 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16568 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16569 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 16570 ;;  val             4   26[COMRAM] unsigned long 
 16571 ;;  type            1   30[COMRAM] unsigned char 
 16572 ;; Auto vars:     Size  Location     Type
 16573 ;;  Value           1   33[COMRAM] PTR struct _CAN_MESSAGE_
 16574 ;;		 -> _CANIDToRegs@val(4), 
 16575 ;; Return value:  Size  Location     Type
 16576 ;;		None               void
 16577 ;; Registers used:
 16578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/F
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16584 ;;      Params:         7       0       0       0       0       0       0
 16585 ;;      Locals:         1       0       0       0       0       0       0
 16586 ;;      Temps:          2       0       0       0       0       0       0
 16587 ;;      Totals:        10       0       0       0       0       0       0
 16588 ;;Total ram usage:       10 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    2
 16591 ;; This function calls:
 16592 ;;		Nothing
 16593 ;; This function is called by:
 16594 ;;		_doModeVerbose
 16595 ;;		_ECANSendMessage
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           	psect	text34
 16600  0038E4                     __ptext34:
 16601                           	opt stack 0
 16602  0038E4                     __CANIDToRegs:
 16603                           	opt stack 24
 16604                           
 16605                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16606                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;incstack = 0
 16610                           ;incstack = 0
 16611  0038E4  0E1B               	movlw	low __CANIDToRegs@val
 16612  0038E6  6E22               	movwf	__CANIDToRegs@Value,c
 16613                           
 16614                           ;ECAN.c: 1104: if ( type == 0 )
 16615  0038E8  661F               	tstfsz	__CANIDToRegs@type,c
 16616  0038EA  D022               	goto	l14159
 16617                           
 16618                           ;ECAN.c: 1105: {
 16619                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16620  0038EC  5022               	movf	__CANIDToRegs@Value,w,c
 16621  0038EE  6ED9               	movwf	fsr2l,c
 16622  0038F0  6ADA               	clrf	fsr2h,c
 16623  0038F2  50DF               	movf	indf2,w,c
 16624  0038F4  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16625  0038F6  90D8               	bcf	status,0,c
 16626  0038F8  3220               	rrcf	??__CANIDToRegs,f,c
 16627  0038FA  90D8               	bcf	status,0,c
 16628  0038FC  3220               	rrcf	??__CANIDToRegs,f,c
 16629  0038FE  90D8               	bcf	status,0,c
 16630  003900  3020               	rrcf	??__CANIDToRegs,w,c
 16631                           
 16632                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16633  003902  D862               	call	PL52	;call to abstracted procedure
 16634  003904  2AD9               	incf	fsr2l,f,c
 16635  003906  6ADA               	clrf	fsr2h,c
 16636  003908  D872               	call	PL94	;call to abstracted procedure
 16637  00390A                     u18745:
 16638  00390A  90D8               	bcf	status,0,c
 16639  00390C  3620               	rlcf	??__CANIDToRegs,f,c
 16640  00390E  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16641  003910  D7FC               	goto	u18745
 16642  003912  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16643                           
 16644                           ;ECAN.c: 1109: ptr++;
 16645                           
 16646                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16647  003916  D846               	call	PL32	;call to abstracted procedure
 16648  003918  D86A               	call	PL94	;call to abstracted procedure
 16649  00391A                     u18755:
 16650  00391A  90D8               	bcf	status,0,c
 16651  00391C  3620               	rlcf	??__CANIDToRegs,f,c
 16652  00391E  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16653  003920  D7FC               	goto	u18755
 16654  003922  5020               	movf	??__CANIDToRegs,w,c
 16655  003924  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16656  003928  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16657  00392C  6EDF               	movwf	indf2,c
 16658                           
 16659                           ;ECAN.c: 1111: }
 16660  00392E  D039               	goto	l1388
 16661  003930                     l14159:
 16662                           
 16663                           ;ECAN.c: 1112: else
 16664                           ;ECAN.c: 1113: {
 16665                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16666  003930  5022               	movf	__CANIDToRegs@Value,w,c
 16667  003932  D842               	call	PL48	;call to abstracted procedure
 16668  003934  0E05               	movlw	5
 16669  003936  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16670  003938                     u18765:
 16671  003938  90D8               	bcf	status,0,c
 16672  00393A  3220               	rrcf	??__CANIDToRegs,f,c
 16673  00393C  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16674  00393E  D7FC               	goto	u18765
 16675  003940  5020               	movf	??__CANIDToRegs,w,c
 16676                           
 16677                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16678  003942  D842               	call	PL52	;call to abstracted procedure
 16679  003944  0E03               	movlw	3
 16680  003946  D849               	call	PL72	;call to abstracted procedure
 16681  003948  3620               	rlcf	??__CANIDToRegs,f,c
 16682  00394A  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16683                           
 16684                           ;ECAN.c: 1117: ptr++;
 16685                           
 16686                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16687  00394E  D82A               	call	PL32	;call to abstracted procedure
 16688  003950  0E02               	movlw	2
 16689  003952  D843               	call	PL72	;call to abstracted procedure
 16690  003954  3420               	rlcf	??__CANIDToRegs,w,c
 16691  003956  0BE0               	andlw	224
 16692  003958  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16693  00395C  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16694  003960  6EDF               	movwf	indf2,c
 16695                           
 16696                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16697  003962  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16698  003966  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16699  00396A  0E00               	movlw	0
 16700  00396C  86DB               	bsf	plusw2,3,c
 16701                           
 16702                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16703  00396E  5022               	movf	__CANIDToRegs@Value,w,c
 16704  003970  D823               	call	PL48	;call to abstracted procedure
 16705  003972  0E03               	movlw	3
 16706  003974  1620               	andwf	??__CANIDToRegs,f,c
 16707  003976  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16708                           
 16709                           ;ECAN.c: 1122: ptr++;
 16710                           
 16711                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16712  00397A  D814               	call	PL32	;call to abstracted procedure
 16713  00397C  2AD9               	incf	fsr2l,f,c
 16714  00397E  6ADA               	clrf	fsr2h,c
 16715  003980  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16716  003984  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16717  003988  CFDF FFE7          	movff	indf2,indf1
 16718                           
 16719                           ;ECAN.c: 1124: ptr++;
 16720  00398C  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16721  00398E  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16722                           
 16723                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16724  003990  5022               	movf	__CANIDToRegs@Value,w,c
 16725  003992  6ED9               	movwf	fsr2l,c
 16726  003994  6ADA               	clrf	fsr2h,c
 16727  003996  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16728  00399A  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16729  00399E  CFDF FFE7          	movff	indf2,indf1
 16730  0039A2                     l1388:
 16731  0039A2  0012               	return	
 16732  0039A4                     __end_of__CANIDToRegs:
 16733                           	opt stack 0
 16734  0039A4                     PL32:
 16735                           	opt stack 24
 16736  0039A4  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16737  0039A8  5020               	movf	??__CANIDToRegs,w,c
 16738  0039AA  12DF               	iorwf	indf2,f,c
 16739  0039AC  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16740  0039AE  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16741  0039B0  5022               	movf	__CANIDToRegs@Value,w,c
 16742  0039B2  6ED9               	movwf	fsr2l,c
 16743  0039B4  6ADA               	clrf	fsr2h,c
 16744  0039B6  0012               	return	
 16745  0039B8                     __end_ofPL32:
 16746                           	opt stack 0
 16747  0039B8                     PL48:
 16748                           	opt stack 24
 16749  0039B8  6ED9               	movwf	fsr2l,c
 16750  0039BA  6ADA               	clrf	fsr2h,c
 16751  0039BC  0E02               	movlw	2
 16752  0039BE  26D9               	addwf	fsr2l,f,c
 16753  0039C0  6ADA               	clrf	fsr2h,c
 16754  0039C2  50DF               	movf	indf2,w,c
 16755  0039C4  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16756  0039C6  0012               	return	
 16757  0039C8                     __end_ofPL48:
 16758                           	opt stack 0
 16759  0039C8                     PL52:
 16760                           	opt stack 24
 16761  0039C8  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16762  0039CC  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16763  0039D0  6EDF               	movwf	indf2,c
 16764  0039D2  5022               	movf	__CANIDToRegs@Value,w,c
 16765  0039D4  6ED9               	movwf	fsr2l,c
 16766  0039D6  6ADA               	clrf	fsr2h,c
 16767  0039D8  0012               	return	
 16768  0039DA                     __end_ofPL52:
 16769                           	opt stack 0
 16770  0039DA                     PL72:
 16771                           	opt stack 24
 16772  0039DA  26D9               	addwf	fsr2l,f,c
 16773  0039DC  6ADA               	clrf	fsr2h,c
 16774  0039DE  50DF               	movf	indf2,w,c
 16775  0039E0  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16776  0039E2  90D8               	bcf	status,0,c
 16777  0039E4  3620               	rlcf	??__CANIDToRegs,f,c
 16778  0039E6  90D8               	bcf	status,0,c
 16779  0039E8  3620               	rlcf	??__CANIDToRegs,f,c
 16780  0039EA  90D8               	bcf	status,0,c
 16781  0039EC  0012               	return	
 16782  0039EE                     __end_ofPL72:
 16783                           	opt stack 0
 16784  0039EE                     PL94:
 16785                           	opt stack 24
 16786  0039EE  50DF               	movf	indf2,w,c
 16787  0039F0  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16788  0039F2  0E05               	movlw	5
 16789  0039F4  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16790  0039F6  0C05               	retlw	5
 16791  0039F8                     __end_ofPL94:
 16792                           	opt stack 0
 16793                           tblptru	equ	0xFF8
 16794                           tblptrh	equ	0xFF7
 16795                           tblptrl	equ	0xFF6
 16796                           tablat	equ	0xFF5
 16797                           prodh	equ	0xFF4
 16798                           prodl	equ	0xFF3
 16799                           intcon	equ	0xFF2
 16800                           indf0	equ	0xFEF
 16801                           postinc0	equ	0xFEE
 16802                           fsr0h	equ	0xFEA
 16803                           fsr0l	equ	0xFE9
 16804                           wreg	equ	0xFE8
 16805                           indf1	equ	0xFE7
 16806                           postinc1	equ	0xFE6
 16807                           postdec1	equ	0xFE5
 16808                           fsr1h	equ	0xFE2
 16809                           fsr1l	equ	0xFE1
 16810                           indf2	equ	0xFDF
 16811                           postinc2	equ	0xFDE
 16812                           postdec2	equ	0xFDD
 16813                           plusw2	equ	0xFDB
 16814                           fsr2h	equ	0xFDA
 16815                           fsr2l	equ	0xFD9
 16816                           status	equ	0xFD8
 16817                           
 16818 ;; *************** function _memset *****************
 16819 ;; Defined at:
 16820 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 16821 ;; Parameters:    Size  Location     Type
 16822 ;;  p1              2   24[COMRAM] PTR void 
 16823 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16824 ;;  c               2   26[COMRAM] int 
 16825 ;;  n               2   28[COMRAM] unsigned int 
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;  p               2   30[COMRAM] PTR unsigned char 
 16828 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16829 ;; Return value:  Size  Location     Type
 16830 ;;                  2   24[COMRAM] PTR void 
 16831 ;; Registers used:
 16832 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16833 ;; Tracked objects:
 16834 ;;		On entry : C/1
 16835 ;;		On exit  : 0/0
 16836 ;;		Unchanged: 0/0
 16837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16838 ;;      Params:         6       0       0       0       0       0       0
 16839 ;;      Locals:         2       0       0       0       0       0       0
 16840 ;;      Temps:          0       0       0       0       0       0       0
 16841 ;;      Totals:         8       0       0       0       0       0       0
 16842 ;;Total ram usage:        8 bytes
 16843 ;; Hardware stack levels used:    1
 16844 ;; Hardware stack levels required when called:    2
 16845 ;; This function calls:
 16846 ;;		Nothing
 16847 ;; This function is called by:
 16848 ;;		_doModeVerbose
 16849 ;;		_doModeSLCAN
 16850 ;;		_printGUID
 16851 ;;		_printMDF
 16852 ;;		_printNodeFirmwareVersion
 16853 ;; This function uses a non-reentrant model
 16854 ;;
 16855                           
 16856                           	psect	text35
 16857  001DE2                     __ptext35:
 16858                           	opt stack 0
 16859  001DE2                     _memset:
 16860                           	opt stack 26
 16861                           
 16862                           ;incstack = 0
 16863                           ;incstack = 0
 16864  001DE2  C019  F01F         	movff	memset@p1,memset@p
 16865  001DE6  C01A  F020         	movff	memset@p1+1,memset@p+1
 16866  001DEA  D008               	goto	l10723
 16867  001DEC                     l10719:
 16868  001DEC  C01F  FFD9         	movff	memset@p,fsr2l
 16869  001DF0  C020  FFDA         	movff	memset@p+1,fsr2h
 16870  001DF4  C01B  FFDF         	movff	memset@c,indf2
 16871  001DF8  4A1F               	infsnz	memset@p,f,c
 16872  001DFA  2A20               	incf	memset@p+1,f,c
 16873  001DFC                     l10723:
 16874  001DFC  061D               	decf	memset@n,f,c
 16875  001DFE  A0D8               	btfss	status,0,c
 16876  001E00  061E               	decf	memset@n+1,f,c
 16877  001E02  281D               	incf	memset@n& (0+255),w,c
 16878  001E04  B4D8               	btfsc	status,2,c
 16879  001E06  281E               	incf	(memset@n+1)& (0+255),w,c
 16880  001E08  B4D8               	btfsc	status,2,c
 16881  001E0A  0012               	return	
 16882  001E0C  D7EF               	goto	l10719
 16883  001E0E                     __end_of_memset:
 16884                           	opt stack 0
 16885                           tblptru	equ	0xFF8
 16886                           tblptrh	equ	0xFF7
 16887                           tblptrl	equ	0xFF6
 16888                           tablat	equ	0xFF5
 16889                           prodh	equ	0xFF4
 16890                           prodl	equ	0xFF3
 16891                           intcon	equ	0xFF2
 16892                           indf0	equ	0xFEF
 16893                           postinc0	equ	0xFEE
 16894                           fsr0h	equ	0xFEA
 16895                           fsr0l	equ	0xFE9
 16896                           wreg	equ	0xFE8
 16897                           indf1	equ	0xFE7
 16898                           postinc1	equ	0xFE6
 16899                           postdec1	equ	0xFE5
 16900                           fsr1h	equ	0xFE2
 16901                           fsr1l	equ	0xFE1
 16902                           indf2	equ	0xFDF
 16903                           postinc2	equ	0xFDE
 16904                           postdec2	equ	0xFDD
 16905                           plusw2	equ	0xFDB
 16906                           fsr2h	equ	0xFDA
 16907                           fsr2l	equ	0xFD9
 16908                           status	equ	0xFD8
 16909                           
 16910 ;; *************** function _printHelp *****************
 16911 ;; Defined at:
 16912 ;;		line 2275 in file "main.c"
 16913 ;; Parameters:    Size  Location     Type
 16914 ;;		None
 16915 ;; Auto vars:     Size  Location     Type
 16916 ;;		None
 16917 ;; Return value:  Size  Location     Type
 16918 ;;		None               void
 16919 ;; Registers used:
 16920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16921 ;; Tracked objects:
 16922 ;;		On entry : F/0
 16923 ;;		On exit  : 0/0
 16924 ;;		Unchanged: 0/0
 16925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16926 ;;      Params:         0       0       0       0       0       0       0
 16927 ;;      Locals:         0       0       0       0       0       0       0
 16928 ;;      Temps:          0       0       0       0       0       0       0
 16929 ;;      Totals:         0       0       0       0       0       0       0
 16930 ;;Total ram usage:        0 bytes
 16931 ;; Hardware stack levels used:    1
 16932 ;; Hardware stack levels required when called:    4
 16933 ;; This function calls:
 16934 ;;		_putsUSART
 16935 ;; This function is called by:
 16936 ;;		_doModeVerbose
 16937 ;; This function uses a non-reentrant model
 16938 ;;
 16939                           
 16940                           	psect	text36
 16941  00419E                     __ptext36:
 16942                           	opt stack 0
 16943  00419E                     _printHelp:
 16944                           	opt stack 24
 16945                           
 16946                           ; BSR set to: 0
 16947                           ;main.c: 2276: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 16948                           
 16949                           ;incstack = 0
 16950                           ;incstack = 0
 16951  00419E  0E75               	movlw	high STR_197
 16952  0041A0  6E1B               	movwf	?_putsUSART+1,c
 16953  0041A2  0E6B               	movlw	low STR_197
 16954  0041A4  6E1A               	movwf	?_putsUSART,c
 16955  0041A6  EC50  F011         	call	_putsUSART	;wreg free
 16956                           
 16957                           ;main.c: 2277: putsUSART((char *) "------------------------------------\r\n");
 16958  0041AA  0E6E               	movlw	high (STR_229+28)
 16959  0041AC  6E1B               	movwf	?_putsUSART+1,c
 16960  0041AE  0E97               	movlw	low (STR_229+28)
 16961  0041B0  6E1A               	movwf	?_putsUSART,c
 16962  0041B2  EC50  F011         	call	_putsUSART	;wreg free
 16963                           
 16964                           ;main.c: 2278: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 16965  0041B6  0E78               	movlw	high STR_199
 16966  0041B8  6E1B               	movwf	?_putsUSART+1,c
 16967  0041BA  0E63               	movlw	low STR_199
 16968  0041BC  6E1A               	movwf	?_putsUSART,c
 16969  0041BE  EC50  F011         	call	_putsUSART	;wreg free
 16970                           
 16971                           ;main.c: 2279: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 16972  0041C2  0E73               	movlw	high STR_200
 16973  0041C4  6E1B               	movwf	?_putsUSART+1,c
 16974  0041C6  0EFA               	movlw	low STR_200
 16975  0041C8  6E1A               	movwf	?_putsUSART,c
 16976  0041CA  EC50  F011         	call	_putsUSART	;wreg free
 16977                           
 16978                           ;main.c: 2280: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 16979  0041CE  0E73               	movlw	high STR_201
 16980  0041D0  6E1B               	movwf	?_putsUSART+1,c
 16981  0041D2  0EA0               	movlw	low STR_201
 16982  0041D4  6E1A               	movwf	?_putsUSART,c
 16983  0041D6  EC50  F011         	call	_putsUSART	;wreg free
 16984                           
 16985                           ;main.c: 2281: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 16986  0041DA  0E71               	movlw	high STR_202
 16987  0041DC  6E1B               	movwf	?_putsUSART+1,c
 16988  0041DE  0EE9               	movlw	low STR_202
 16989  0041E0  6E1A               	movwf	?_putsUSART,c
 16990  0041E2  EC50  F011         	call	_putsUSART	;wreg free
 16991                           
 16992                           ;main.c: 2282: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 16993  0041E6  0E72               	movlw	high STR_203
 16994  0041E8  6E1B               	movwf	?_putsUSART+1,c
 16995  0041EA  0E4E               	movlw	low STR_203
 16996  0041EC  6E1A               	movwf	?_putsUSART,c
 16997  0041EE  EC50  F011         	call	_putsUSART	;wreg free
 16998                           
 16999                           ;main.c: 2283: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 17000  0041F2  0E78               	movlw	high STR_204
 17001  0041F4  6E1B               	movwf	?_putsUSART+1,c
 17002  0041F6  0E0B               	movlw	low STR_204
 17003  0041F8  6E1A               	movwf	?_putsUSART,c
 17004  0041FA  EC50  F011         	call	_putsUSART	;wreg free
 17005                           
 17006                           ;main.c: 2284: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 17007  0041FE  0E72               	movlw	high STR_205
 17008  004200  6E1B               	movwf	?_putsUSART+1,c
 17009  004202  0E80               	movlw	low STR_205
 17010  004204  6E1A               	movwf	?_putsUSART,c
 17011  004206  EC50  F011         	call	_putsUSART	;wreg free
 17012                           
 17013                           ;main.c: 2285: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 17014  00420A  0E73               	movlw	high STR_206
 17015  00420C  6E1B               	movwf	?_putsUSART+1,c
 17016  00420E  0ECE               	movlw	low STR_206
 17017  004210  6E1A               	movwf	?_putsUSART,c
 17018  004212  EC50  F011         	call	_putsUSART	;wreg free
 17019                           
 17020                           ;main.c: 2286: putsUSART((char *) "TX - Send CAN frame .\r\n");
 17021  004216  0E79               	movlw	high STR_207
 17022  004218  6E1B               	movwf	?_putsUSART+1,c
 17023  00421A  0E00               	movlw	low STR_207
 17024  00421C  6E1A               	movwf	?_putsUSART,c
 17025  00421E  EC50  F011         	call	_putsUSART	;wreg free
 17026                           
 17027                           ;main.c: 2287: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 17028  004222  0E70               	movlw	high STR_208
 17029  004224  6E1B               	movwf	?_putsUSART+1,c
 17030  004226  0E37               	movlw	low STR_208
 17031  004228  6E1A               	movwf	?_putsUSART,c
 17032  00422A  EC50  F011         	call	_putsUSART	;wreg free
 17033                           
 17034                           ;main.c: 2288: putsUSART((char *) "RX - Read CAN frame.\r\n");
 17035  00422E  0E79               	movlw	high STR_209
 17036  004230  6E1B               	movwf	?_putsUSART+1,c
 17037  004232  0EC0               	movlw	low STR_209
 17038  004234  6E1A               	movwf	?_putsUSART,c
 17039  004236  EC50  F011         	call	_putsUSART	;wreg free
 17040                           
 17041                           ;main.c: 2289: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 17042  00423A  0E77               	movlw	high STR_210
 17043  00423C  6E1B               	movwf	?_putsUSART+1,c
 17044  00423E  0E27               	movlw	low STR_210
 17045  004240  6E1A               	movwf	?_putsUSART,c
 17046  004242  EC50  F011         	call	_putsUSART	;wreg free
 17047                           
 17048                           ;main.c: 2290: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 17049  004246  0E75               	movlw	high STR_211
 17050  004248  6E1B               	movwf	?_putsUSART+1,c
 17051  00424A  0E44               	movlw	low STR_211
 17052  00424C  6E1A               	movwf	?_putsUSART,c
 17053  00424E  EC50  F011         	call	_putsUSART	;wreg free
 17054                           
 17055                           ;main.c: 2291: putsUSART((char *) "HELP - Display this help information.\r\n");
 17056  004252  0E74               	movlw	high STR_212
 17057  004254  6E1B               	movwf	?_putsUSART+1,c
 17058  004256  0EA5               	movlw	low STR_212
 17059  004258  6E1A               	movwf	?_putsUSART,c
 17060  00425A  EC50  F011         	call	_putsUSART	;wreg free
 17061                           
 17062                           ;main.c: 2292: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 17063  00425E  0E73               	movlw	high STR_213
 17064  004260  6E1B               	movwf	?_putsUSART+1,c
 17065  004262  0E71               	movlw	low STR_213
 17066  004264  6E1A               	movwf	?_putsUSART,c
 17067  004266  EC50  F011         	call	_putsUSART	;wreg free
 17068                           
 17069                           ;main.c: 2293: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 17070  00426A  0E6E               	movlw	high STR_214
 17071  00426C  6E1B               	movwf	?_putsUSART+1,c
 17072  00426E  0E36               	movlw	low STR_214
 17073  004270  6E1A               	movwf	?_putsUSART,c
 17074  004272  EC50  F011         	call	_putsUSART	;wreg free
 17075                           
 17076                           ;main.c: 2294: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 17077  004276  0E6F               	movlw	high STR_215
 17078  004278  6E1B               	movwf	?_putsUSART+1,c
 17079  00427A  0E01               	movlw	low STR_215
 17080  00427C  6E1A               	movwf	?_putsUSART,c
 17081  00427E  EC50  F011         	call	_putsUSART	;wreg free
 17082                           
 17083                           ;main.c: 2295: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 17084  004282  0E6D               	movlw	high STR_216
 17085  004284  6E1B               	movwf	?_putsUSART+1,c
 17086  004286  0EA2               	movlw	low STR_216
 17087  004288  6E1A               	movwf	?_putsUSART,c
 17088  00428A  EC50  F011         	call	_putsUSART	;wreg free
 17089                           
 17090                           ;main.c: 2296: putsUSART((char *) "FILTER - Set filter .\r\n");
 17091  00428E  0E79               	movlw	high STR_217
 17092  004290  6E1B               	movwf	?_putsUSART+1,c
 17093  004292  0E18               	movlw	low STR_217
 17094  004294  6E1A               	movwf	?_putsUSART,c
 17095  004296  EC50  F011         	call	_putsUSART	;wreg free
 17096                           
 17097                           ;main.c: 2297: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 17098  00429A  0E6D               	movlw	high STR_218
 17099  00429C  6E1B               	movwf	?_putsUSART+1,c
 17100  00429E  0E54               	movlw	low STR_218
 17101  0042A0  6E1A               	movwf	?_putsUSART,c
 17102  0042A2  EC50  F011         	call	_putsUSART	;wreg free
 17103                           
 17104                           ;main.c: 2298: putsUSART((char *) "MASK - Set mask .\r\n");
 17105  0042A6  0E7A               	movlw	high STR_219
 17106  0042A8  6E1B               	movwf	?_putsUSART+1,c
 17107  0042AA  0E46               	movlw	low STR_219
 17108  0042AC  6E1A               	movwf	?_putsUSART,c
 17109  0042AE  EC50  F011         	call	_putsUSART	;wreg free
 17110                           
 17111                           ;main.c: 2299: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 17112  0042B2  0E6D               	movlw	high STR_220
 17113  0042B4  6E1B               	movwf	?_putsUSART+1,c
 17114  0042B6  0EEF               	movlw	low STR_220
 17115  0042B8  6E1A               	movwf	?_putsUSART,c
 17116  0042BA  EC50  F011         	call	_putsUSART	;wreg free
 17117                           
 17118                           ;main.c: 2300: putsUSART((char *) "SET - Persistent functionality.\r\n");
 17119  0042BE  0E76               	movlw	high STR_221
 17120  0042C0  6E1B               	movwf	?_putsUSART+1,c
 17121  0042C2  0EE3               	movlw	low STR_221
 17122  0042C4  6E1A               	movwf	?_putsUSART,c
 17123  0042C6  EC50  F011         	call	_putsUSART	;wreg free
 17124                           
 17125                           ;main.c: 2301: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 17126  0042CA  0E73               	movlw	high STR_222
 17127  0042CC  6E1B               	movwf	?_putsUSART+1,c
 17128  0042CE  0E42               	movlw	low STR_222
 17129  0042D0  6E1A               	movwf	?_putsUSART,c
 17130  0042D2  EC50  F011         	call	_putsUSART	;wreg free
 17131                           
 17132                           ;main.c: 2302: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 17133  0042D6  0E73               	movlw	high STR_223
 17134  0042D8  6E1B               	movwf	?_putsUSART+1,c
 17135  0042DA  0E13               	movlw	low STR_223
 17136  0042DC  6E1A               	movwf	?_putsUSART,c
 17137  0042DE  EC50  F011         	call	_putsUSART	;wreg free
 17138                           
 17139                           ;main.c: 2303: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 17140  0042E2  0E6E               	movlw	high STR_224
 17141  0042E4  6E1B               	movwf	?_putsUSART+1,c
 17142  0042E6  0EBE               	movlw	low STR_224
 17143  0042E8  6E1A               	movwf	?_putsUSART,c
 17144  0042EA  EC50  F011         	call	_putsUSART	;wreg free
 17145                           
 17146                           ;main.c: 2304: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 17147  0042EE  0E72               	movlw	high STR_225
 17148  0042F0  6E1B               	movwf	?_putsUSART+1,c
 17149  0042F2  0EB2               	movlw	low STR_225
 17150  0042F4  6E1A               	movwf	?_putsUSART,c
 17151  0042F6  EC50  F011         	call	_putsUSART	;wreg free
 17152                           
 17153                           ;main.c: 2305: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 17154  0042FA  0E70               	movlw	high STR_226
 17155  0042FC  6E1B               	movwf	?_putsUSART+1,c
 17156  0042FE  0EA6               	movlw	low STR_226
 17157  004300  6E1A               	movwf	?_putsUSART,c
 17158  004302  EC50  F011         	call	_putsUSART	;wreg free
 17159                           
 17160                           ;main.c: 2306: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 17161  004306  0E6F               	movlw	high STR_227
 17162  004308  6E1B               	movwf	?_putsUSART+1,c
 17163  00430A  0E86               	movlw	low STR_227
 17164  00430C  6E1A               	movwf	?_putsUSART,c
 17165  00430E  EC50  F011         	call	_putsUSART	;wreg free
 17166                           
 17167                           ;main.c: 2307: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 17168  004312  0E75               	movlw	high STR_228
 17169  004314  6E1B               	movwf	?_putsUSART+1,c
 17170  004316  0EE0               	movlw	low STR_228
 17171  004318  6E1A               	movwf	?_putsUSART,c
 17172  00431A  EF50  F011         	goto	_putsUSART	;wreg free
 17173  00431E                     __end_of_printHelp:
 17174                           	opt stack 0
 17175                           tblptru	equ	0xFF8
 17176                           tblptrh	equ	0xFF7
 17177                           tblptrl	equ	0xFF6
 17178                           tablat	equ	0xFF5
 17179                           prodh	equ	0xFF4
 17180                           prodl	equ	0xFF3
 17181                           intcon	equ	0xFF2
 17182                           indf0	equ	0xFEF
 17183                           postinc0	equ	0xFEE
 17184                           fsr0h	equ	0xFEA
 17185                           fsr0l	equ	0xFE9
 17186                           wreg	equ	0xFE8
 17187                           indf1	equ	0xFE7
 17188                           postinc1	equ	0xFE6
 17189                           postdec1	equ	0xFE5
 17190                           fsr1h	equ	0xFE2
 17191                           fsr1l	equ	0xFE1
 17192                           indf2	equ	0xFDF
 17193                           postinc2	equ	0xFDE
 17194                           postdec2	equ	0xFDD
 17195                           plusw2	equ	0xFDB
 17196                           fsr2h	equ	0xFDA
 17197                           fsr2l	equ	0xFD9
 17198                           status	equ	0xFD8
 17199                           
 17200 ;; *************** function _printErrors *****************
 17201 ;; Defined at:
 17202 ;;		line 2204 in file "main.c"
 17203 ;; Parameters:    Size  Location     Type
 17204 ;;		None
 17205 ;; Auto vars:     Size  Location     Type
 17206 ;;		None
 17207 ;; Return value:  Size  Location     Type
 17208 ;;		None               void
 17209 ;; Registers used:
 17210 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17211 ;; Tracked objects:
 17212 ;;		On entry : F/0
 17213 ;;		On exit  : 0/0
 17214 ;;		Unchanged: 0/0
 17215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17216 ;;      Params:         0       0       0       0       0       0       0
 17217 ;;      Locals:         0      12       0       0       0       0       0
 17218 ;;      Temps:          0       0       0       0       0       0       0
 17219 ;;      Totals:         0      12       0       0       0       0       0
 17220 ;;Total ram usage:       12 bytes
 17221 ;; Hardware stack levels used:    1
 17222 ;; Hardware stack levels required when called:    4
 17223 ;; This function calls:
 17224 ;;		_putsUSART
 17225 ;;		_sprintf
 17226 ;; This function is called by:
 17227 ;;		_doModeVerbose
 17228 ;; This function uses a non-reentrant model
 17229 ;;
 17230                           
 17231                           	psect	text37
 17232  004C96                     __ptext37:
 17233                           	opt stack 0
 17234  004C96                     _printErrors:
 17235                           	opt stack 24
 17236                           
 17237                           ; BSR set to: 0
 17238                           ;main.c: 2205: putsUSART((char *) "CAN Receive overruns: ");
 17239                           
 17240                           ;incstack = 0
 17241                           ;incstack = 0
 17242  004C96  0E79               	movlw	high STR_167
 17243  004C98  6E1B               	movwf	?_putsUSART+1,c
 17244  004C9A  0ED7               	movlw	low STR_167
 17245  004C9C  6E1A               	movwf	?_putsUSART,c
 17246  004C9E  EC50  F011         	call	_putsUSART	;wreg free
 17247                           
 17248                           ;main.c: 2206: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns );
 17249  004CA2  0100               	movlb	0	; () banked
 17250  004CA4  67D3               	tstfsz	_bHex& (0+255),b
 17251  004CA6  D004               	goto	l13801
 17252                           
 17253                           ; BSR set to: 0
 17254  004CA8  0E7C               	movlw	high STR_153
 17255  004CAA  6F7F               	movwf	(_printErrors$1333+1)& (0+255),b
 17256  004CAC  0EE0               	movlw	low STR_153
 17257  004CAE  D003               	goto	L15
 17258  004CB0                     l13801:
 17259                           
 17260                           ; BSR set to: 0
 17261  004CB0  0E7C               	movlw	high STR_168
 17262  004CB2  6F7F               	movwf	(_printErrors$1333+1)& (0+255),b
 17263  004CB4  0E15               	movlw	low STR_168
 17264  004CB6                     L15:
 17265  004CB6  6F7E               	movwf	_printErrors$1333& (0+255),b
 17266                           
 17267                           ; BSR set to: 0
 17268  004CB8  0E01               	movlw	high _wrkbuf
 17269  004CBA  0100               	movlb	0	; () banked
 17270  004CBC  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17271  004CBE  0E74               	movlw	low _wrkbuf
 17272  004CC0  6F60               	movwf	?_sprintf& (0+255),b
 17273  004CC2  C07E  F062         	movff	_printErrors$1333,?_sprintf+2
 17274  004CC6  C07F  F063         	movff	_printErrors$1333+1,?_sprintf+3
 17275  004CCA  C100  F064         	movff	_can_receiveOverruns,?_sprintf+4
 17276  004CCE  C101  F065         	movff	_can_receiveOverruns+1,?_sprintf+5
 17277  004CD2  C102  F066         	movff	_can_receiveOverruns+2,?_sprintf+6
 17278  004CD6  C103  F067         	movff	_can_receiveOverruns+3,?_sprintf+7
 17279  004CDA  EC65  F029         	call	_sprintf	;wreg free
 17280                           
 17281                           ; BSR set to: 0
 17282                           ;main.c: 2207: putsUSART(wrkbuf);
 17283  004CDE  0101               	movlb	1	; () banked
 17284  004CE0  0E01               	movlw	high _wrkbuf
 17285  004CE2  6E1B               	movwf	?_putsUSART+1,c
 17286  004CE4  0E74               	movlw	low _wrkbuf
 17287  004CE6  6E1A               	movwf	?_putsUSART,c
 17288  004CE8  EC50  F011         	call	_putsUSART	;wreg free
 17289                           
 17290                           ;main.c: 2208: putsUSART((char *) "\r\n");
 17291  004CEC  0E71               	movlw	high (STR_188+50)
 17292  004CEE  6E1B               	movwf	?_putsUSART+1,c
 17293  004CF0  0EB2               	movlw	low (STR_188+50)
 17294  004CF2  6E1A               	movwf	?_putsUSART,c
 17295  004CF4  EC50  F011         	call	_putsUSART	;wreg free
 17296                           
 17297                           ;main.c: 2210: putsUSART((char *) "CAN Transmit overruns: ");
 17298  004CF8  0E79               	movlw	high STR_171
 17299  004CFA  6E1B               	movwf	?_putsUSART+1,c
 17300  004CFC  0EA8               	movlw	low STR_171
 17301  004CFE  6E1A               	movwf	?_putsUSART,c
 17302  004D00  EC50  F011         	call	_putsUSART	;wreg free
 17303                           
 17304                           ;main.c: 2211: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns );
 17305  004D04  0100               	movlb	0	; () banked
 17306  004D06  67D3               	tstfsz	_bHex& (0+255),b
 17307  004D08  D004               	goto	l13815
 17308                           
 17309                           ; BSR set to: 0
 17310  004D0A  0E7C               	movlw	high STR_153
 17311  004D0C  6F81               	movwf	(_printErrors$1339+1)& (0+255),b
 17312  004D0E  0EE0               	movlw	low STR_153
 17313  004D10  D003               	goto	L16
 17314  004D12                     l13815:
 17315                           
 17316                           ; BSR set to: 0
 17317  004D12  0E7C               	movlw	high STR_168
 17318  004D14  6F81               	movwf	(_printErrors$1339+1)& (0+255),b
 17319  004D16  0E15               	movlw	low STR_168
 17320  004D18                     L16:
 17321  004D18  6F80               	movwf	_printErrors$1339& (0+255),b
 17322                           
 17323                           ; BSR set to: 0
 17324  004D1A  0E01               	movlw	high _wrkbuf
 17325  004D1C  0100               	movlb	0	; () banked
 17326  004D1E  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17327  004D20  0E74               	movlw	low _wrkbuf
 17328  004D22  6F60               	movwf	?_sprintf& (0+255),b
 17329  004D24  C080  F062         	movff	_printErrors$1339,?_sprintf+2
 17330  004D28  C081  F063         	movff	_printErrors$1339+1,?_sprintf+3
 17331  004D2C  C104  F064         	movff	_can_transmitOverruns,?_sprintf+4
 17332  004D30  C105  F065         	movff	_can_transmitOverruns+1,?_sprintf+5
 17333  004D34  C106  F066         	movff	_can_transmitOverruns+2,?_sprintf+6
 17334  004D38  C107  F067         	movff	_can_transmitOverruns+3,?_sprintf+7
 17335  004D3C  EC65  F029         	call	_sprintf	;wreg free
 17336                           
 17337                           ; BSR set to: 0
 17338                           ;main.c: 2212: putsUSART(wrkbuf);
 17339  004D40  0101               	movlb	1	; () banked
 17340  004D42  0E01               	movlw	high _wrkbuf
 17341  004D44  6E1B               	movwf	?_putsUSART+1,c
 17342  004D46  0E74               	movlw	low _wrkbuf
 17343  004D48  6E1A               	movwf	?_putsUSART,c
 17344  004D4A  EC50  F011         	call	_putsUSART	;wreg free
 17345                           
 17346                           ;main.c: 2213: putsUSART((char *) "\r\n");
 17347  004D4E  0E71               	movlw	high (STR_188+50)
 17348  004D50  6E1B               	movwf	?_putsUSART+1,c
 17349  004D52  0EB2               	movlw	low (STR_188+50)
 17350  004D54  6E1A               	movwf	?_putsUSART,c
 17351  004D56  EC50  F011         	call	_putsUSART	;wreg free
 17352                           
 17353                           ;main.c: 2215: putsUSART((char *) "UART Receive overruns: ");
 17354  004D5A  0E79               	movlw	high STR_175
 17355  004D5C  6E1B               	movwf	?_putsUSART+1,c
 17356  004D5E  0E90               	movlw	low STR_175
 17357  004D60  6E1A               	movwf	?_putsUSART,c
 17358  004D62  EC50  F011         	call	_putsUSART	;wreg free
 17359                           
 17360                           ;main.c: 2216: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns );
 17361  004D66  0100               	movlb	0	; () banked
 17362  004D68  67D3               	tstfsz	_bHex& (0+255),b
 17363  004D6A  D004               	goto	l13829
 17364                           
 17365                           ; BSR set to: 0
 17366  004D6C  0E7C               	movlw	high STR_153
 17367  004D6E  6F83               	movwf	(_printErrors$1345+1)& (0+255),b
 17368  004D70  0EE0               	movlw	low STR_153
 17369  004D72  D003               	goto	L17
 17370  004D74                     l13829:
 17371                           
 17372                           ; BSR set to: 0
 17373  004D74  0E7C               	movlw	high STR_168
 17374  004D76  6F83               	movwf	(_printErrors$1345+1)& (0+255),b
 17375  004D78  0E15               	movlw	low STR_168
 17376  004D7A                     L17:
 17377  004D7A  6F82               	movwf	_printErrors$1345& (0+255),b
 17378                           
 17379                           ; BSR set to: 0
 17380  004D7C  0E01               	movlw	high _wrkbuf
 17381  004D7E  0100               	movlb	0	; () banked
 17382  004D80  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17383  004D82  0E74               	movlw	low _wrkbuf
 17384  004D84  6F60               	movwf	?_sprintf& (0+255),b
 17385  004D86  C082  F062         	movff	_printErrors$1345,?_sprintf+2
 17386  004D8A  C083  F063         	movff	_printErrors$1345+1,?_sprintf+3
 17387  004D8E  C11C  F064         	movff	_uart_receiveOverruns,?_sprintf+4
 17388  004D92  C11D  F065         	movff	_uart_receiveOverruns+1,?_sprintf+5
 17389  004D96  C11E  F066         	movff	_uart_receiveOverruns+2,?_sprintf+6
 17390  004D9A  C11F  F067         	movff	_uart_receiveOverruns+3,?_sprintf+7
 17391  004D9E  EC65  F029         	call	_sprintf	;wreg free
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;main.c: 2217: putsUSART(wrkbuf);
 17395  004DA2  0101               	movlb	1	; () banked
 17396  004DA4  0E01               	movlw	high _wrkbuf
 17397  004DA6  6E1B               	movwf	?_putsUSART+1,c
 17398  004DA8  0E74               	movlw	low _wrkbuf
 17399  004DAA  6E1A               	movwf	?_putsUSART,c
 17400  004DAC  EC50  F011         	call	_putsUSART	;wreg free
 17401                           
 17402                           ;main.c: 2218: putsUSART((char *) "\r\n");
 17403  004DB0  0E71               	movlw	high (STR_188+50)
 17404  004DB2  6E1B               	movwf	?_putsUSART+1,c
 17405  004DB4  0EB2               	movlw	low (STR_188+50)
 17406  004DB6  6E1A               	movwf	?_putsUSART,c
 17407  004DB8  EC50  F011         	call	_putsUSART	;wreg free
 17408                           
 17409                           ;main.c: 2220: putsUSART((char *) "UART Receive overruns: ");
 17410  004DBC  0E79               	movlw	high STR_175
 17411  004DBE  6E1B               	movwf	?_putsUSART+1,c
 17412  004DC0  0E90               	movlw	low STR_175
 17413  004DC2  6E1A               	movwf	?_putsUSART,c
 17414  004DC4  EC50  F011         	call	_putsUSART	;wreg free
 17415                           
 17416                           ;main.c: 2221: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns );
 17417  004DC8  0100               	movlb	0	; () banked
 17418  004DCA  67D3               	tstfsz	_bHex& (0+255),b
 17419  004DCC  D004               	goto	l13843
 17420                           
 17421                           ; BSR set to: 0
 17422  004DCE  0E7C               	movlw	high STR_153
 17423  004DD0  6F85               	movwf	(_printErrors$1351+1)& (0+255),b
 17424  004DD2  0EE0               	movlw	low STR_153
 17425  004DD4  D003               	goto	L18
 17426  004DD6                     l13843:
 17427                           
 17428                           ; BSR set to: 0
 17429  004DD6  0E7C               	movlw	high STR_168
 17430  004DD8  6F85               	movwf	(_printErrors$1351+1)& (0+255),b
 17431  004DDA  0E15               	movlw	low STR_168
 17432  004DDC                     L18:
 17433  004DDC  6F84               	movwf	_printErrors$1351& (0+255),b
 17434                           
 17435                           ; BSR set to: 0
 17436  004DDE  0E01               	movlw	high _wrkbuf
 17437  004DE0  0100               	movlb	0	; () banked
 17438  004DE2  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17439  004DE4  0E74               	movlw	low _wrkbuf
 17440  004DE6  6F60               	movwf	?_sprintf& (0+255),b
 17441  004DE8  C084  F062         	movff	_printErrors$1351,?_sprintf+2
 17442  004DEC  C085  F063         	movff	_printErrors$1351+1,?_sprintf+3
 17443  004DF0  C120  F064         	movff	_uart_transmitOverruns,?_sprintf+4
 17444  004DF4  C121  F065         	movff	_uart_transmitOverruns+1,?_sprintf+5
 17445  004DF8  C122  F066         	movff	_uart_transmitOverruns+2,?_sprintf+6
 17446  004DFC  C123  F067         	movff	_uart_transmitOverruns+3,?_sprintf+7
 17447  004E00  EC65  F029         	call	_sprintf	;wreg free
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;main.c: 2222: putsUSART(wrkbuf);
 17451  004E04  0101               	movlb	1	; () banked
 17452  004E06  0E01               	movlw	high _wrkbuf
 17453  004E08  6E1B               	movwf	?_putsUSART+1,c
 17454  004E0A  0E74               	movlw	low _wrkbuf
 17455  004E0C  6E1A               	movwf	?_putsUSART,c
 17456  004E0E  EC50  F011         	call	_putsUSART	;wreg free
 17457                           
 17458                           ;main.c: 2223: putsUSART((char *) "\r\n");
 17459  004E12  0E71               	movlw	high (STR_188+50)
 17460  004E14  6E1B               	movwf	?_putsUSART+1,c
 17461  004E16  0EB2               	movlw	low (STR_188+50)
 17462  004E18  6E1A               	movwf	?_putsUSART,c
 17463  004E1A  EC50  F011         	call	_putsUSART	;wreg free
 17464                           
 17465                           ;main.c: 2229: putsUSART((char *) "Transmit Error Counter: ");
 17466  004E1E  0E78               	movlw	high STR_183
 17467  004E20  6E1B               	movwf	?_putsUSART+1,c
 17468  004E22  0EE7               	movlw	low STR_183
 17469  004E24  6E1A               	movwf	?_putsUSART,c
 17470  004E26  EC50  F011         	call	_putsUSART	;wreg free
 17471                           
 17472                           ;main.c: 2230: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT );
 17473  004E2A  0100               	movlb	0	; () banked
 17474  004E2C  67D3               	tstfsz	_bHex& (0+255),b
 17475  004E2E  D004               	goto	l13857
 17476                           
 17477                           ; BSR set to: 0
 17478  004E30  0E7C               	movlw	high STR_53
 17479  004E32  6F87               	movwf	(_printErrors$1357+1)& (0+255),b
 17480  004E34  0EED               	movlw	low STR_53
 17481  004E36  D003               	goto	L19
 17482  004E38                     l13857:
 17483                           
 17484                           ; BSR set to: 0
 17485  004E38  0E7C               	movlw	high STR_52
 17486  004E3A  6F87               	movwf	(_printErrors$1357+1)& (0+255),b
 17487  004E3C  0E64               	movlw	low STR_52
 17488  004E3E                     L19:
 17489  004E3E  6F86               	movwf	_printErrors$1357& (0+255),b
 17490                           
 17491                           ; BSR set to: 0
 17492  004E40  0E01               	movlw	high _wrkbuf
 17493  004E42  0100               	movlb	0	; () banked
 17494  004E44  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17495  004E46  0E74               	movlw	low _wrkbuf
 17496  004E48  6F60               	movwf	?_sprintf& (0+255),b
 17497  004E4A  C086  F062         	movff	_printErrors$1357,?_sprintf+2
 17498  004E4E  C087  F063         	movff	_printErrors$1357+1,?_sprintf+3
 17499  004E52  CF76 F064          	movff	3958,?_sprintf+4	;volatile
 17500  004E56  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17501  004E58  EC65  F029         	call	_sprintf	;wreg free
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;main.c: 2231: putsUSART(wrkbuf);
 17505  004E5C  0101               	movlb	1	; () banked
 17506  004E5E  0E01               	movlw	high _wrkbuf
 17507  004E60  6E1B               	movwf	?_putsUSART+1,c
 17508  004E62  0E74               	movlw	low _wrkbuf
 17509  004E64  6E1A               	movwf	?_putsUSART,c
 17510  004E66  EC50  F011         	call	_putsUSART	;wreg free
 17511                           
 17512                           ;main.c: 2232: putsUSART((char *) "\r\n");
 17513  004E6A  0E71               	movlw	high (STR_188+50)
 17514  004E6C  6E1B               	movwf	?_putsUSART+1,c
 17515  004E6E  0EB2               	movlw	low (STR_188+50)
 17516  004E70  6E1A               	movwf	?_putsUSART,c
 17517  004E72  EC50  F011         	call	_putsUSART	;wreg free
 17518                           
 17519                           ;main.c: 2234: if ( COMSTATbits.TXWARN ) {
 17520  004E76  A474               	btfss	3956,2,c	;volatile
 17521  004E78  D006               	goto	l13869
 17522                           
 17523                           ;main.c: 2235: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 17524  004E7A  0E6F               	movlw	high STR_187
 17525  004E7C  6E1B               	movwf	?_putsUSART+1,c
 17526  004E7E  0EC4               	movlw	low STR_187
 17527  004E80  6E1A               	movwf	?_putsUSART,c
 17528  004E82  EC50  F011         	call	_putsUSART	;wreg free
 17529  004E86                     l13869:
 17530                           
 17531                           ;main.c: 2236: }
 17532                           ;main.c: 2238: if ( COMSTATbits.TXBO ) {
 17533  004E86  AA74               	btfss	3956,5,c	;volatile
 17534  004E88  D006               	goto	l13873
 17535                           
 17536                           ;main.c: 2239: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 17537  004E8A  0E71               	movlw	high STR_188
 17538  004E8C  6E1B               	movwf	?_putsUSART+1,c
 17539  004E8E  0E80               	movlw	low STR_188
 17540  004E90  6E1A               	movwf	?_putsUSART,c
 17541  004E92  EC50  F011         	call	_putsUSART	;wreg free
 17542  004E96                     l13873:
 17543                           
 17544                           ;main.c: 2240: }
 17545                           ;main.c: 2242: if ( COMSTATbits.TXBP ) {
 17546  004E96  A874               	btfss	3956,4,c	;volatile
 17547  004E98  D006               	goto	l1058
 17548                           
 17549                           ;main.c: 2243: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 17550  004E9A  0E6F               	movlw	high STR_189
 17551  004E9C  6E1B               	movwf	?_putsUSART+1,c
 17552  004E9E  0EFE               	movlw	low STR_189
 17553  004EA0  6E1A               	movwf	?_putsUSART,c
 17554  004EA2  EC50  F011         	call	_putsUSART	;wreg free
 17555  004EA6                     l1058:
 17556                           
 17557                           ;main.c: 2244: }
 17558                           ;main.c: 2250: putsUSART((char *) "Receive Error Counter: ");
 17559  004EA6  0E79               	movlw	high STR_190
 17560  004EA8  6E1B               	movwf	?_putsUSART+1,c
 17561  004EAA  0E78               	movlw	low STR_190
 17562  004EAC  6E1A               	movwf	?_putsUSART,c
 17563  004EAE  EC50  F011         	call	_putsUSART	;wreg free
 17564                           
 17565                           ;main.c: 2251: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT );
 17566  004EB2  0100               	movlb	0	; () banked
 17567  004EB4  67D3               	tstfsz	_bHex& (0+255),b
 17568  004EB6  D004               	goto	l13881
 17569                           
 17570                           ; BSR set to: 0
 17571  004EB8  0E7C               	movlw	high STR_53
 17572  004EBA  6F89               	movwf	(_printErrors$1366+1)& (0+255),b
 17573  004EBC  0EED               	movlw	low STR_53
 17574  004EBE  D003               	goto	L20
 17575  004EC0                     l13881:
 17576                           
 17577                           ; BSR set to: 0
 17578  004EC0  0E7C               	movlw	high STR_52
 17579  004EC2  6F89               	movwf	(_printErrors$1366+1)& (0+255),b
 17580  004EC4  0E64               	movlw	low STR_52
 17581  004EC6                     L20:
 17582  004EC6  6F88               	movwf	_printErrors$1366& (0+255),b
 17583                           
 17584                           ; BSR set to: 0
 17585  004EC8  0E01               	movlw	high _wrkbuf
 17586  004ECA  0100               	movlb	0	; () banked
 17587  004ECC  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17588  004ECE  0E74               	movlw	low _wrkbuf
 17589  004ED0  6F60               	movwf	?_sprintf& (0+255),b
 17590  004ED2  C088  F062         	movff	_printErrors$1366,?_sprintf+2
 17591  004ED6  C089  F063         	movff	_printErrors$1366+1,?_sprintf+3
 17592  004EDA  CF75 F064          	movff	3957,?_sprintf+4	;volatile
 17593  004EDE  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17594  004EE0  EC65  F029         	call	_sprintf	;wreg free
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;main.c: 2252: putsUSART(wrkbuf);
 17598  004EE4  0101               	movlb	1	; () banked
 17599  004EE6  0E01               	movlw	high _wrkbuf
 17600  004EE8  6E1B               	movwf	?_putsUSART+1,c
 17601  004EEA  0E74               	movlw	low _wrkbuf
 17602  004EEC  6E1A               	movwf	?_putsUSART,c
 17603  004EEE  EC50  F011         	call	_putsUSART	;wreg free
 17604                           
 17605                           ;main.c: 2253: putsUSART((char *) "\r\n");
 17606  004EF2  0E71               	movlw	high (STR_188+50)
 17607  004EF4  6E1B               	movwf	?_putsUSART+1,c
 17608  004EF6  0EB2               	movlw	low (STR_188+50)
 17609  004EF8  6E1A               	movwf	?_putsUSART,c
 17610  004EFA  EC50  F011         	call	_putsUSART	;wreg free
 17611                           
 17612                           ;main.c: 2255: if ( COMSTATbits.RXWARN ) {
 17613  004EFE  A274               	btfss	3956,1,c	;volatile
 17614  004F00  D006               	goto	l13893
 17615                           
 17616                           ;main.c: 2256: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 17617  004F02  0E70               	movlw	high STR_194
 17618  004F04  6E1B               	movwf	?_putsUSART+1,c
 17619  004F06  0E6F               	movlw	low STR_194
 17620  004F08  6E1A               	movwf	?_putsUSART,c
 17621  004F0A  EC50  F011         	call	_putsUSART	;wreg free
 17622  004F0E                     l13893:
 17623                           
 17624                           ;main.c: 2257: }
 17625                           ;main.c: 2259: if ( COMSTATbits.RXBP ) {
 17626  004F0E  A674               	btfss	3956,3,c	;volatile
 17627  004F10  D006               	goto	l13897
 17628                           
 17629                           ;main.c: 2260: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 17630  004F12  0E71               	movlw	high STR_195
 17631  004F14  6E1B               	movwf	?_putsUSART+1,c
 17632  004F16  0E14               	movlw	low STR_195
 17633  004F18  6E1A               	movwf	?_putsUSART,c
 17634  004F1A  EC50  F011         	call	_putsUSART	;wreg free
 17635  004F1E                     l13897:
 17636                           
 17637                           ;main.c: 2261: }
 17638                           ;main.c: 2263: if ( COMSTATbits.EWARN ) {
 17639  004F1E  A074               	btfss	3956,0,c	;volatile
 17640  004F20  D006               	goto	l1066
 17641                           
 17642                           ;main.c: 2264: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 17643  004F22  0E71               	movlw	high STR_196
 17644  004F24  6E1B               	movwf	?_putsUSART+1,c
 17645  004F26  0EB5               	movlw	low STR_196
 17646  004F28  6E1A               	movwf	?_putsUSART,c
 17647  004F2A  EC50  F011         	call	_putsUSART	;wreg free
 17648  004F2E                     l1066:
 17649  004F2E  0012               	return	
 17650  004F30                     __end_of_printErrors:
 17651                           	opt stack 0
 17652                           tblptru	equ	0xFF8
 17653                           tblptrh	equ	0xFF7
 17654                           tblptrl	equ	0xFF6
 17655                           tablat	equ	0xFF5
 17656                           prodh	equ	0xFF4
 17657                           prodl	equ	0xFF3
 17658                           intcon	equ	0xFF2
 17659                           indf0	equ	0xFEF
 17660                           postinc0	equ	0xFEE
 17661                           fsr0h	equ	0xFEA
 17662                           fsr0l	equ	0xFE9
 17663                           wreg	equ	0xFE8
 17664                           indf1	equ	0xFE7
 17665                           postinc1	equ	0xFE6
 17666                           postdec1	equ	0xFE5
 17667                           fsr1h	equ	0xFE2
 17668                           fsr1l	equ	0xFE1
 17669                           indf2	equ	0xFDF
 17670                           postinc2	equ	0xFDE
 17671                           postdec2	equ	0xFDD
 17672                           plusw2	equ	0xFDB
 17673                           fsr2h	equ	0xFDA
 17674                           fsr2l	equ	0xFD9
 17675                           status	equ	0xFD8
 17676                           
 17677 ;; *************** function _printStatistics *****************
 17678 ;; Defined at:
 17679 ;;		line 2177 in file "main.c"
 17680 ;; Parameters:    Size  Location     Type
 17681 ;;		None
 17682 ;; Auto vars:     Size  Location     Type
 17683 ;;		None
 17684 ;; Return value:  Size  Location     Type
 17685 ;;		None               void
 17686 ;; Registers used:
 17687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17688 ;; Tracked objects:
 17689 ;;		On entry : F/0
 17690 ;;		On exit  : 0/0
 17691 ;;		Unchanged: 0/0
 17692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17693 ;;      Params:         0       0       0       0       0       0       0
 17694 ;;      Locals:         0       8       0       0       0       0       0
 17695 ;;      Temps:          0       0       0       0       0       0       0
 17696 ;;      Totals:         0       8       0       0       0       0       0
 17697 ;;Total ram usage:        8 bytes
 17698 ;; Hardware stack levels used:    1
 17699 ;; Hardware stack levels required when called:    4
 17700 ;; This function calls:
 17701 ;;		_putsUSART
 17702 ;;		_sprintf
 17703 ;; This function is called by:
 17704 ;;		_doModeVerbose
 17705 ;; This function uses a non-reentrant model
 17706 ;;
 17707                           
 17708                           	psect	text38
 17709  00431E                     __ptext38:
 17710                           	opt stack 0
 17711  00431E                     _printStatistics:
 17712                           	opt stack 24
 17713                           
 17714                           ; BSR set to: 0
 17715                           ;main.c: 2178: putsUSART((char *) "Sent CAN frames: ");
 17716                           
 17717                           ;incstack = 0
 17718                           ;incstack = 0
 17719  00431E  0E7B               	movlw	high STR_151
 17720  004320  6E1B               	movwf	?_putsUSART+1,c
 17721  004322  0E09               	movlw	low STR_151
 17722  004324  6E1A               	movwf	?_putsUSART,c
 17723  004326  EC50  F011         	call	_putsUSART	;wreg free
 17724                           
 17725                           ;main.c: 2179: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames );
 17726  00432A  0100               	movlb	0	; () banked
 17727  00432C  67D3               	tstfsz	_bHex& (0+255),b
 17728  00432E  D004               	goto	l13745
 17729                           
 17730                           ; BSR set to: 0
 17731  004330  0E7C               	movlw	high STR_153
 17732  004332  6F7F               	movwf	(_printStatistics$1308+1)& (0+255),b
 17733  004334  0EE0               	movlw	low STR_153
 17734  004336  D003               	goto	L21
 17735  004338                     l13745:
 17736                           
 17737                           ; BSR set to: 0
 17738  004338  0E7C               	movlw	high STR_152
 17739  00433A  6F7F               	movwf	(_printStatistics$1308+1)& (0+255),b
 17740  00433C  0E72               	movlw	low STR_152
 17741  00433E                     L21:
 17742  00433E  6F7E               	movwf	_printStatistics$1308& (0+255),b
 17743                           
 17744                           ; BSR set to: 0
 17745  004340  0E01               	movlw	high _wrkbuf
 17746  004342  0100               	movlb	0	; () banked
 17747  004344  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17748  004346  0E74               	movlw	low _wrkbuf
 17749  004348  6F60               	movwf	?_sprintf& (0+255),b
 17750  00434A  C07E  F062         	movff	_printStatistics$1308,?_sprintf+2
 17751  00434E  C07F  F063         	movff	_printStatistics$1308+1,?_sprintf+3
 17752  004352  C114  F064         	movff	_cntTxFrames,?_sprintf+4
 17753  004356  C115  F065         	movff	_cntTxFrames+1,?_sprintf+5
 17754  00435A  C116  F066         	movff	_cntTxFrames+2,?_sprintf+6
 17755  00435E  C117  F067         	movff	_cntTxFrames+3,?_sprintf+7
 17756  004362  EC65  F029         	call	_sprintf	;wreg free
 17757                           
 17758                           ; BSR set to: 0
 17759                           ;main.c: 2180: putsUSART(wrkbuf);
 17760  004366  0101               	movlb	1	; () banked
 17761  004368  0E01               	movlw	high _wrkbuf
 17762  00436A  6E1B               	movwf	?_putsUSART+1,c
 17763  00436C  0E74               	movlw	low _wrkbuf
 17764  00436E  6E1A               	movwf	?_putsUSART,c
 17765  004370  EC50  F011         	call	_putsUSART	;wreg free
 17766                           
 17767                           ;main.c: 2181: putsUSART((char *) "\r\n");
 17768  004374  0E71               	movlw	high (STR_188+50)
 17769  004376  6E1B               	movwf	?_putsUSART+1,c
 17770  004378  0EB2               	movlw	low (STR_188+50)
 17771  00437A  6E1A               	movwf	?_putsUSART,c
 17772  00437C  EC50  F011         	call	_putsUSART	;wreg free
 17773                           
 17774                           ;main.c: 2183: putsUSART((char *) "Sent CAN bytes: ");
 17775  004380  0E7B               	movlw	high STR_155
 17776  004382  6E1B               	movwf	?_putsUSART+1,c
 17777  004384  0E3D               	movlw	low STR_155
 17778  004386  6E1A               	movwf	?_putsUSART,c
 17779  004388  EC50  F011         	call	_putsUSART	;wreg free
 17780                           
 17781                           ;main.c: 2184: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes );
 17782  00438C  0100               	movlb	0	; () banked
 17783  00438E  67D3               	tstfsz	_bHex& (0+255),b
 17784  004390  D004               	goto	l13759
 17785                           
 17786                           ; BSR set to: 0
 17787  004392  0E7C               	movlw	high STR_153
 17788  004394  6F81               	movwf	(_printStatistics$1314+1)& (0+255),b
 17789  004396  0EE0               	movlw	low STR_153
 17790  004398  D003               	goto	L22
 17791  00439A                     l13759:
 17792                           
 17793                           ; BSR set to: 0
 17794  00439A  0E7C               	movlw	high STR_152
 17795  00439C  6F81               	movwf	(_printStatistics$1314+1)& (0+255),b
 17796  00439E  0E72               	movlw	low STR_152
 17797  0043A0                     L22:
 17798  0043A0  6F80               	movwf	_printStatistics$1314& (0+255),b
 17799                           
 17800                           ; BSR set to: 0
 17801  0043A2  0E01               	movlw	high _wrkbuf
 17802  0043A4  0100               	movlb	0	; () banked
 17803  0043A6  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17804  0043A8  0E74               	movlw	low _wrkbuf
 17805  0043AA  6F60               	movwf	?_sprintf& (0+255),b
 17806  0043AC  C080  F062         	movff	_printStatistics$1314,?_sprintf+2
 17807  0043B0  C081  F063         	movff	_printStatistics$1314+1,?_sprintf+3
 17808  0043B4  C110  F064         	movff	_cntTxBytes,?_sprintf+4
 17809  0043B8  C111  F065         	movff	_cntTxBytes+1,?_sprintf+5
 17810  0043BC  C112  F066         	movff	_cntTxBytes+2,?_sprintf+6
 17811  0043C0  C113  F067         	movff	_cntTxBytes+3,?_sprintf+7
 17812  0043C4  EC65  F029         	call	_sprintf	;wreg free
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;main.c: 2185: putsUSART(wrkbuf);
 17816  0043C8  0101               	movlb	1	; () banked
 17817  0043CA  0E01               	movlw	high _wrkbuf
 17818  0043CC  6E1B               	movwf	?_putsUSART+1,c
 17819  0043CE  0E74               	movlw	low _wrkbuf
 17820  0043D0  6E1A               	movwf	?_putsUSART,c
 17821  0043D2  EC50  F011         	call	_putsUSART	;wreg free
 17822                           
 17823                           ;main.c: 2186: putsUSART((char *) "\r\n");
 17824  0043D6  0E71               	movlw	high (STR_188+50)
 17825  0043D8  6E1B               	movwf	?_putsUSART+1,c
 17826  0043DA  0EB2               	movlw	low (STR_188+50)
 17827  0043DC  6E1A               	movwf	?_putsUSART,c
 17828  0043DE  EC50  F011         	call	_putsUSART	;wreg free
 17829                           
 17830                           ;main.c: 2188: putsUSART((char *) "Received CAN frames: ");
 17831  0043E2  0E7A               	movlw	high STR_159
 17832  0043E4  6E1B               	movwf	?_putsUSART+1,c
 17833  0043E6  0E1B               	movlw	low STR_159
 17834  0043E8  6E1A               	movwf	?_putsUSART,c
 17835  0043EA  EC50  F011         	call	_putsUSART	;wreg free
 17836                           
 17837                           ;main.c: 2189: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames );
 17838  0043EE  0100               	movlb	0	; () banked
 17839  0043F0  67D3               	tstfsz	_bHex& (0+255),b
 17840  0043F2  D004               	goto	l13773
 17841                           
 17842                           ; BSR set to: 0
 17843  0043F4  0E7C               	movlw	high STR_153
 17844  0043F6  6F83               	movwf	(_printStatistics$1320+1)& (0+255),b
 17845  0043F8  0EE0               	movlw	low STR_153
 17846  0043FA  D003               	goto	L23
 17847  0043FC                     l13773:
 17848                           
 17849                           ; BSR set to: 0
 17850  0043FC  0E7C               	movlw	high STR_152
 17851  0043FE  6F83               	movwf	(_printStatistics$1320+1)& (0+255),b
 17852  004400  0E72               	movlw	low STR_152
 17853  004402                     L23:
 17854  004402  6F82               	movwf	_printStatistics$1320& (0+255),b
 17855                           
 17856                           ; BSR set to: 0
 17857  004404  0E01               	movlw	high _wrkbuf
 17858  004406  0100               	movlb	0	; () banked
 17859  004408  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17860  00440A  0E74               	movlw	low _wrkbuf
 17861  00440C  6F60               	movwf	?_sprintf& (0+255),b
 17862  00440E  C082  F062         	movff	_printStatistics$1320,?_sprintf+2
 17863  004412  C083  F063         	movff	_printStatistics$1320+1,?_sprintf+3
 17864  004416  C10C  F064         	movff	_cntRxFrames,?_sprintf+4
 17865  00441A  C10D  F065         	movff	_cntRxFrames+1,?_sprintf+5
 17866  00441E  C10E  F066         	movff	_cntRxFrames+2,?_sprintf+6
 17867  004422  C10F  F067         	movff	_cntRxFrames+3,?_sprintf+7
 17868  004426  EC65  F029         	call	_sprintf	;wreg free
 17869                           
 17870                           ; BSR set to: 0
 17871                           ;main.c: 2190: putsUSART(wrkbuf);
 17872  00442A  0101               	movlb	1	; () banked
 17873  00442C  0E01               	movlw	high _wrkbuf
 17874  00442E  6E1B               	movwf	?_putsUSART+1,c
 17875  004430  0E74               	movlw	low _wrkbuf
 17876  004432  6E1A               	movwf	?_putsUSART,c
 17877  004434  EC50  F011         	call	_putsUSART	;wreg free
 17878                           
 17879                           ;main.c: 2191: putsUSART((char *) "\r\n");
 17880  004438  0E71               	movlw	high (STR_188+50)
 17881  00443A  6E1B               	movwf	?_putsUSART+1,c
 17882  00443C  0EB2               	movlw	low (STR_188+50)
 17883  00443E  6E1A               	movwf	?_putsUSART,c
 17884  004440  EC50  F011         	call	_putsUSART	;wreg free
 17885                           
 17886                           ;main.c: 2193: putsUSART((char *) "Received CAN bytes: ");
 17887  004444  0E7A               	movlw	high STR_163
 17888  004446  6E1B               	movwf	?_putsUSART+1,c
 17889  004448  0E31               	movlw	low STR_163
 17890  00444A  6E1A               	movwf	?_putsUSART,c
 17891  00444C  EC50  F011         	call	_putsUSART	;wreg free
 17892                           
 17893                           ;main.c: 2194: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes );
 17894  004450  0100               	movlb	0	; () banked
 17895  004452  67D3               	tstfsz	_bHex& (0+255),b
 17896  004454  D004               	goto	l13787
 17897                           
 17898                           ; BSR set to: 0
 17899  004456  0E7C               	movlw	high STR_153
 17900  004458  6F85               	movwf	(_printStatistics$1326+1)& (0+255),b
 17901  00445A  0EE0               	movlw	low STR_153
 17902  00445C  D003               	goto	L24
 17903  00445E                     l13787:
 17904                           
 17905                           ; BSR set to: 0
 17906  00445E  0E7C               	movlw	high STR_152
 17907  004460  6F85               	movwf	(_printStatistics$1326+1)& (0+255),b
 17908  004462  0E72               	movlw	low STR_152
 17909  004464                     L24:
 17910  004464  6F84               	movwf	_printStatistics$1326& (0+255),b
 17911                           
 17912                           ; BSR set to: 0
 17913  004466  0E01               	movlw	high _wrkbuf
 17914  004468  0100               	movlb	0	; () banked
 17915  00446A  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17916  00446C  0E74               	movlw	low _wrkbuf
 17917  00446E  6F60               	movwf	?_sprintf& (0+255),b
 17918  004470  C084  F062         	movff	_printStatistics$1326,?_sprintf+2
 17919  004474  C085  F063         	movff	_printStatistics$1326+1,?_sprintf+3
 17920  004478  C108  F064         	movff	_cntRxBytes,?_sprintf+4
 17921  00447C  C109  F065         	movff	_cntRxBytes+1,?_sprintf+5
 17922  004480  C10A  F066         	movff	_cntRxBytes+2,?_sprintf+6
 17923  004484  C10B  F067         	movff	_cntRxBytes+3,?_sprintf+7
 17924  004488  EC65  F029         	call	_sprintf	;wreg free
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;main.c: 2195: putsUSART(wrkbuf);
 17928  00448C  0101               	movlb	1	; () banked
 17929  00448E  0E01               	movlw	high _wrkbuf
 17930  004490  6E1B               	movwf	?_putsUSART+1,c
 17931  004492  0E74               	movlw	low _wrkbuf
 17932  004494  6E1A               	movwf	?_putsUSART,c
 17933  004496  EC50  F011         	call	_putsUSART	;wreg free
 17934                           
 17935                           ;main.c: 2196: putsUSART((char *) "\r\n");
 17936  00449A  0E71               	movlw	high (STR_188+50)
 17937  00449C  6E1B               	movwf	?_putsUSART+1,c
 17938  00449E  0EB2               	movlw	low (STR_188+50)
 17939  0044A0  6E1A               	movwf	?_putsUSART,c
 17940  0044A2  EF50  F011         	goto	_putsUSART	;wreg free
 17941  0044A6                     __end_of_printStatistics:
 17942                           	opt stack 0
 17943                           tblptru	equ	0xFF8
 17944                           tblptrh	equ	0xFF7
 17945                           tblptrl	equ	0xFF6
 17946                           tablat	equ	0xFF5
 17947                           prodh	equ	0xFF4
 17948                           prodl	equ	0xFF3
 17949                           intcon	equ	0xFF2
 17950                           indf0	equ	0xFEF
 17951                           postinc0	equ	0xFEE
 17952                           fsr0h	equ	0xFEA
 17953                           fsr0l	equ	0xFE9
 17954                           wreg	equ	0xFE8
 17955                           indf1	equ	0xFE7
 17956                           postinc1	equ	0xFE6
 17957                           postdec1	equ	0xFE5
 17958                           fsr1h	equ	0xFE2
 17959                           fsr1l	equ	0xFE1
 17960                           indf2	equ	0xFDF
 17961                           postinc2	equ	0xFDE
 17962                           postdec2	equ	0xFDD
 17963                           plusw2	equ	0xFDB
 17964                           fsr2h	equ	0xFDA
 17965                           fsr2l	equ	0xFD9
 17966                           status	equ	0xFD8
 17967                           
 17968 ;; *************** function _atoi *****************
 17969 ;; Defined at:
 17970 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 17971 ;; Parameters:    Size  Location     Type
 17972 ;;  s               2   30[COMRAM] PTR const unsigned char 
 17973 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 17974 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 17975 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 17976 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 17977 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 17978 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 17979 ;; Auto vars:     Size  Location     Type
 17980 ;;  a               2   35[COMRAM] int 
 17981 ;;  sign            1   34[COMRAM] unsigned char 
 17982 ;; Return value:  Size  Location     Type
 17983 ;;                  2   30[COMRAM] int 
 17984 ;; Registers used:
 17985 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17986 ;; Tracked objects:
 17987 ;;		On entry : C/3
 17988 ;;		On exit  : 0/0
 17989 ;;		Unchanged: 0/0
 17990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17991 ;;      Params:         2       0       0       0       0       0       0
 17992 ;;      Locals:         3       0       0       0       0       0       0
 17993 ;;      Temps:          2       0       0       0       0       0       0
 17994 ;;      Totals:         7       0       0       0       0       0       0
 17995 ;;Total ram usage:        7 bytes
 17996 ;; Hardware stack levels used:    1
 17997 ;; Hardware stack levels required when called:    3
 17998 ;; This function calls:
 17999 ;;		_isdigit
 18000 ;;		___wmul
 18001 ;; This function is called by:
 18002 ;;		_doModeVerbose
 18003 ;; This function uses a non-reentrant model
 18004 ;;
 18005                           
 18006                           	psect	text39
 18007  0036E0                     __ptext39:
 18008                           	opt stack 0
 18009  0036E0                     _atoi:
 18010                           	opt stack 25
 18011                           
 18012                           ;incstack = 0
 18013                           ;incstack = 0
 18014  0036E0  D002               	goto	l10695
 18015  0036E2                     l10693:
 18016  0036E2  4A1F               	infsnz	atoi@s,f,c
 18017  0036E4  2A20               	incf	atoi@s+1,f,c
 18018  0036E6                     l10695:
 18019  0036E6  501F               	movf	atoi@s,w,c
 18020  0036E8  6EF6               	movwf	tblptrl,c
 18021  0036EA  6EE9               	movwf	fsr0l,c
 18022  0036EC  0E05               	movlw	(high __ramtop+-1)
 18023  0036EE  6EEA               	movwf	fsr0h,c
 18024  0036F0  5020               	movf	atoi@s+1,w,c
 18025  0036F2  64EA               	cpfsgt	fsr0h,c
 18026  0036F4  D003               	bra	u13177
 18027  0036F6  6EEA               	movwf	fsr0h,c
 18028  0036F8  50EF               	movf	indf0,w,c
 18029  0036FA  D003               	bra	u13170
 18030  0036FC                     u13177:
 18031  0036FC  6EF7               	movwf	tblptrh,c
 18032  0036FE  0008               	tblrd		*
 18033  003700  50F5               	movf	tablat,w,c
 18034  003702                     u13170:
 18035  003702  0A20               	xorlw	32
 18036  003704  E0EE               	bz	l10693
 18037  003706  D864               	call	PL22	;call to abstracted procedure
 18038  003708  64EA               	cpfsgt	fsr0h,c
 18039  00370A  D003               	bra	u13197
 18040  00370C  6EEA               	movwf	fsr0h,c
 18041  00370E  50EF               	movf	indf0,w,c
 18042  003710  D003               	bra	u13190
 18043  003712                     u13197:
 18044  003712  6EF7               	movwf	tblptrh,c
 18045  003714  0008               	tblrd		*
 18046  003716  50F5               	movf	tablat,w,c
 18047  003718                     u13190:
 18048  003718  0A09               	xorlw	9
 18049  00371A  E0E3               	bz	l10693
 18050  00371C  6A24               	clrf	atoi@a,c
 18051  00371E  6A25               	clrf	atoi@a+1,c
 18052  003720  6A23               	clrf	atoi@sign,c
 18053  003722  D856               	call	PL22	;call to abstracted procedure
 18054  003724  64EA               	cpfsgt	fsr0h,c
 18055  003726  D003               	bra	u13217
 18056  003728  6EEA               	movwf	fsr0h,c
 18057  00372A  50EF               	movf	indf0,w,c
 18058  00372C  D003               	bra	u13210
 18059  00372E                     u13217:
 18060  00372E  6EF7               	movwf	tblptrh,c
 18061  003730  0008               	tblrd		*
 18062  003732  50F5               	movf	tablat,w,c
 18063  003734                     u13210:
 18064  003734  0A2D               	xorlw	45
 18065  003736  E102               	bnz	l10703
 18066  003738  2A23               	incf	atoi@sign,f,c
 18067  00373A  D00B               	goto	l10705
 18068  00373C                     l10703:
 18069  00373C  D849               	call	PL22	;call to abstracted procedure
 18070  00373E  64EA               	cpfsgt	fsr0h,c
 18071  003740  D003               	bra	u13237
 18072  003742  6EEA               	movwf	fsr0h,c
 18073  003744  50EF               	movf	indf0,w,c
 18074  003746  D003               	bra	u13230
 18075  003748                     u13237:
 18076  003748  6EF7               	movwf	tblptrh,c
 18077  00374A  0008               	tblrd		*
 18078  00374C  50F5               	movf	tablat,w,c
 18079  00374E                     u13230:
 18080  00374E  0A2B               	xorlw	43
 18081  003750  E11F               	bnz	l10711
 18082  003752                     l10705:
 18083  003752  4A1F               	infsnz	atoi@s,f,c
 18084  003754  2A20               	incf	atoi@s+1,f,c
 18085  003756  D01C               	goto	l10711
 18086  003758                     l10707:
 18087  003758  C024  F019         	movff	atoi@a,?___wmul
 18088  00375C  C025  F01A         	movff	atoi@a+1,?___wmul+1
 18089  003760  6A1C               	clrf	?___wmul+3,c
 18090  003762  0E0A               	movlw	10
 18091  003764  6E1B               	movwf	?___wmul+2,c
 18092  003766  EC36  F00F         	call	___wmul	;wreg free
 18093  00376A  D832               	call	PL22	;call to abstracted procedure
 18094  00376C  64EA               	cpfsgt	fsr0h,c
 18095  00376E  D003               	bra	u13257
 18096  003770  6EEA               	movwf	fsr0h,c
 18097  003772  50EF               	movf	indf0,w,c
 18098  003774  D003               	bra	u13250
 18099  003776                     u13257:
 18100  003776  6EF7               	movwf	tblptrh,c
 18101  003778  0008               	tblrd		*
 18102  00377A  50F5               	movf	tablat,w,c
 18103  00377C                     u13250:
 18104  00377C  2619               	addwf	?___wmul,f,c
 18105  00377E  0E00               	movlw	0
 18106  003780  221A               	addwfc	?___wmul+1,f,c
 18107  003782  0ED0               	movlw	208
 18108  003784  2419               	addwf	?___wmul,w,c
 18109  003786  6E24               	movwf	atoi@a,c
 18110  003788  0EFF               	movlw	255
 18111  00378A  201A               	addwfc	?___wmul+1,w,c
 18112  00378C  6E25               	movwf	atoi@a+1,c
 18113  00378E  D7E1               	goto	l10705
 18114  003790                     l10711:
 18115  003790  D81F               	call	PL22	;call to abstracted procedure
 18116  003792  64EA               	cpfsgt	fsr0h,c
 18117  003794  D003               	bra	u13267
 18118  003796  6EEA               	movwf	fsr0h,c
 18119  003798  50EF               	movf	indf0,w,c
 18120  00379A  D003               	bra	u13260
 18121  00379C                     u13267:
 18122  00379C  6EF7               	movwf	tblptrh,c
 18123  00379E  0008               	tblrd		*
 18124  0037A0  50F5               	movf	tablat,w,c
 18125  0037A2                     u13260:
 18126  0037A2  ECCF  F00E         	call	_isdigit
 18127  0037A6  E2D8               	bc	l10707
 18128  0037A8  5023               	movf	atoi@sign,w,c
 18129  0037AA  E00D               	bz	l1927
 18130  0037AC  C024  F021         	movff	atoi@a,??_atoi
 18131  0037B0  C025  F022         	movff	atoi@a+1,??_atoi+1
 18132  0037B4  1E21               	comf	??_atoi,f,c
 18133  0037B6  1E22               	comf	??_atoi+1,f,c
 18134  0037B8  4A21               	infsnz	??_atoi,f,c
 18135  0037BA  2A22               	incf	??_atoi+1,f,c
 18136  0037BC  C021  F01F         	movff	??_atoi,?_atoi
 18137  0037C0  C022  F020         	movff	??_atoi+1,?_atoi+1
 18138  0037C4  D004               	goto	l1928
 18139  0037C6                     l1927:
 18140  0037C6  C024  F01F         	movff	atoi@a,?_atoi
 18141  0037CA  C025  F020         	movff	atoi@a+1,?_atoi+1
 18142  0037CE                     l1928:
 18143  0037CE  0012               	return	
 18144  0037D0                     __end_of_atoi:
 18145                           	opt stack 0
 18146  0037D0                     PL22:
 18147                           	opt stack 25
 18148  0037D0  501F               	movf	atoi@s,w,c
 18149  0037D2  6EF6               	movwf	tblptrl,c
 18150  0037D4  6EE9               	movwf	fsr0l,c
 18151  0037D6  0E05               	movlw	(high __ramtop+-1)
 18152  0037D8  6EEA               	movwf	fsr0h,c
 18153  0037DA  5020               	movf	atoi@s+1,w,c
 18154  0037DC  0012               	return	
 18155  0037DE                     __end_ofPL22:
 18156                           	opt stack 0
 18157                           tblptru	equ	0xFF8
 18158                           tblptrh	equ	0xFF7
 18159                           tblptrl	equ	0xFF6
 18160                           tablat	equ	0xFF5
 18161                           prodh	equ	0xFF4
 18162                           prodl	equ	0xFF3
 18163                           intcon	equ	0xFF2
 18164                           indf0	equ	0xFEF
 18165                           postinc0	equ	0xFEE
 18166                           fsr0h	equ	0xFEA
 18167                           fsr0l	equ	0xFE9
 18168                           wreg	equ	0xFE8
 18169                           indf1	equ	0xFE7
 18170                           postinc1	equ	0xFE6
 18171                           postdec1	equ	0xFE5
 18172                           fsr1h	equ	0xFE2
 18173                           fsr1l	equ	0xFE1
 18174                           indf2	equ	0xFDF
 18175                           postinc2	equ	0xFDE
 18176                           postdec2	equ	0xFDD
 18177                           plusw2	equ	0xFDB
 18178                           fsr2h	equ	0xFDA
 18179                           fsr2l	equ	0xFD9
 18180                           status	equ	0xFD8
 18181                           
 18182 ;; *************** function _strtok *****************
 18183 ;; Defined at:
 18184 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 18185 ;; Parameters:    Size  Location     Type
 18186 ;;  s1              2   36[COMRAM] PTR unsigned char 
 18187 ;;		 -> NULL(0), cmdbuf(80), 
 18188 ;;  s2              2   38[COMRAM] PTR const unsigned char 
 18189 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18190 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18191 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18192 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18193 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18194 ;;		 -> STR_30(2), STR_29(2), 
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;		None
 18197 ;; Return value:  Size  Location     Type
 18198 ;;                  2   36[COMRAM] PTR unsigned char 
 18199 ;; Registers used:
 18200 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/1
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18206 ;;      Params:         4       0       0       0       0       0       0
 18207 ;;      Locals:         0       0       0       0       0       0       0
 18208 ;;      Temps:          0       0       0       0       0       0       0
 18209 ;;      Totals:         4       0       0       0       0       0       0
 18210 ;;Total ram usage:        4 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:    4
 18213 ;; This function calls:
 18214 ;;		_strspn
 18215 ;;		_strcspn
 18216 ;; This function is called by:
 18217 ;;		_doModeVerbose
 18218 ;; This function uses a non-reentrant model
 18219 ;;
 18220                           
 18221                           	psect	text40
 18222  0029EE                     __ptext40:
 18223                           	opt stack 0
 18224  0029EE                     _strtok:
 18225                           	opt stack 24
 18226                           
 18227                           ;incstack = 0
 18228                           ;incstack = 0
 18229  0029EE  5026               	movf	strtok@s1+1,w,c
 18230  0029F0  1025               	iorwf	strtok@s1,w,c
 18231  0029F2  E104               	bnz	l10673
 18232  0029F4  C032  F025         	movff	strtok@sp,strtok@s1
 18233  0029F8  C033  F026         	movff	strtok@sp+1,strtok@s1+1
 18234  0029FC                     l10673:
 18235  0029FC  5026               	movf	strtok@s1+1,w,c
 18236  0029FE  1025               	iorwf	strtok@s1,w,c
 18237  002A00  E016               	bz	L25
 18238  002A02  C025  F01F         	movff	strtok@s1,?_strspn
 18239  002A06  C026  F020         	movff	strtok@s1+1,?_strspn+1
 18240  002A0A  C027  F021         	movff	strtok@s2,?_strspn+2
 18241  002A0E  C028  F022         	movff	strtok@s2+1,?_strspn+3
 18242  002A12  EC9D  F010         	call	_strspn	;wreg free
 18243  002A16  501F               	movf	?_strspn,w,c
 18244  002A18  2625               	addwf	strtok@s1,f,c
 18245  002A1A  5020               	movf	?_strspn+1,w,c
 18246  002A1C  2226               	addwfc	strtok@s1+1,f,c
 18247  002A1E  C025  FFD9         	movff	strtok@s1,fsr2l
 18248  002A22  C026  FFDA         	movff	strtok@s1+1,fsr2h
 18249  002A26  50DF               	movf	indf2,w,c
 18250  002A28  E105               	bnz	l10683
 18251  002A2A  6A32               	clrf	strtok@sp,c
 18252  002A2C  6A33               	clrf	strtok@sp+1,c
 18253  002A2E                     L25:
 18254  002A2E  6A25               	clrf	?_strtok,c
 18255  002A30  6A26               	clrf	?_strtok+1,c
 18256  002A32  D025               	goto	l2420
 18257  002A34                     l10683:
 18258  002A34  C025  F01F         	movff	strtok@s1,?_strcspn
 18259  002A38  C026  F020         	movff	strtok@s1+1,?_strcspn+1
 18260  002A3C  C027  F021         	movff	strtok@s2,?_strcspn+2
 18261  002A40  C028  F022         	movff	strtok@s2+1,?_strcspn+3
 18262  002A44  ECBF  F010         	call	_strcspn	;wreg free
 18263  002A48  501F               	movf	?_strcspn,w,c
 18264  002A4A  2425               	addwf	strtok@s1,w,c
 18265  002A4C  6E32               	movwf	strtok@sp,c
 18266  002A4E  5020               	movf	?_strcspn+1,w,c
 18267  002A50  2026               	addwfc	strtok@s1+1,w,c
 18268  002A52  6E33               	movwf	strtok@sp+1,c
 18269  002A54  C032  FFD9         	movff	strtok@sp,fsr2l
 18270  002A58  C033  FFDA         	movff	strtok@sp+1,fsr2h
 18271  002A5C  50DF               	movf	indf2,w,c
 18272  002A5E  E009               	bz	l2422
 18273  002A60  C032  FFD9         	movff	strtok@sp,fsr2l
 18274  002A64  C033  FFDA         	movff	strtok@sp+1,fsr2h
 18275  002A68  0E00               	movlw	0
 18276  002A6A  6EDF               	movwf	indf2,c
 18277  002A6C  4A32               	infsnz	strtok@sp,f,c
 18278  002A6E  2A33               	incf	strtok@sp+1,f,c
 18279  002A70  D002               	goto	l2423
 18280  002A72                     l2422:
 18281  002A72  6A32               	clrf	strtok@sp,c
 18282  002A74  6A33               	clrf	strtok@sp+1,c
 18283  002A76                     l2423:
 18284  002A76  C025  F025         	movff	strtok@s1,?_strtok
 18285  002A7A  C026  F026         	movff	strtok@s1+1,?_strtok+1
 18286  002A7E                     l2420:
 18287  002A7E  0012               	return	
 18288  002A80                     __end_of_strtok:
 18289                           	opt stack 0
 18290                           tblptru	equ	0xFF8
 18291                           tblptrh	equ	0xFF7
 18292                           tblptrl	equ	0xFF6
 18293                           tablat	equ	0xFF5
 18294                           prodh	equ	0xFF4
 18295                           prodl	equ	0xFF3
 18296                           intcon	equ	0xFF2
 18297                           indf0	equ	0xFEF
 18298                           postinc0	equ	0xFEE
 18299                           fsr0h	equ	0xFEA
 18300                           fsr0l	equ	0xFE9
 18301                           wreg	equ	0xFE8
 18302                           indf1	equ	0xFE7
 18303                           postinc1	equ	0xFE6
 18304                           postdec1	equ	0xFE5
 18305                           fsr1h	equ	0xFE2
 18306                           fsr1l	equ	0xFE1
 18307                           indf2	equ	0xFDF
 18308                           postinc2	equ	0xFDE
 18309                           postdec2	equ	0xFDD
 18310                           plusw2	equ	0xFDB
 18311                           fsr2h	equ	0xFDA
 18312                           fsr2l	equ	0xFD9
 18313                           status	equ	0xFD8
 18314                           
 18315 ;; *************** function _strcspn *****************
 18316 ;; Defined at:
 18317 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 18318 ;; Parameters:    Size  Location     Type
 18319 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18320 ;;		 -> NULL(0), cmdbuf(80), 
 18321 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18322 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18323 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18324 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18325 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18326 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18327 ;;		 -> STR_30(2), STR_29(2), 
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;  i               2   34[COMRAM] unsigned int 
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  2   30[COMRAM] unsigned int 
 18332 ;; Registers used:
 18333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/1
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18339 ;;      Params:         4       0       0       0       0       0       0
 18340 ;;      Locals:         2       0       0       0       0       0       0
 18341 ;;      Temps:          0       0       0       0       0       0       0
 18342 ;;      Totals:         6       0       0       0       0       0       0
 18343 ;;Total ram usage:        6 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; Hardware stack levels required when called:    3
 18346 ;; This function calls:
 18347 ;;		_strchr
 18348 ;; This function is called by:
 18349 ;;		_strtok
 18350 ;; This function uses a non-reentrant model
 18351 ;;
 18352                           
 18353                           	psect	text41
 18354  00217E                     __ptext41:
 18355                           	opt stack 0
 18356  00217E                     _strcspn:
 18357                           	opt stack 24
 18358                           
 18359                           ;incstack = 0
 18360                           ;incstack = 0
 18361  00217E  6A23               	clrf	strcspn@i,c
 18362  002180  6A24               	clrf	strcspn@i+1,c
 18363  002182  D004               	goto	l12449
 18364  002184                     l12447:
 18365  002184  4A1F               	infsnz	strcspn@s1,f,c
 18366  002186  2A20               	incf	strcspn@s1+1,f,c
 18367  002188  4A23               	infsnz	strcspn@i,f,c
 18368  00218A  2A24               	incf	strcspn@i+1,f,c
 18369  00218C                     l12449:
 18370  00218C  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18371  002190  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18372  002194  50DF               	movf	indf2,w,c
 18373  002196  E010               	bz	l2447
 18374  002198  C021  F019         	movff	strcspn@s2,?_strchr
 18375  00219C  C022  F01A         	movff	strcspn@s2+1,?_strchr+1
 18376  0021A0  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18377  0021A4  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18378  0021A8  50DF               	movf	indf2,w,c
 18379  0021AA  6E1B               	movwf	?_strchr+2,c
 18380  0021AC  6A1C               	clrf	?_strchr+3,c
 18381  0021AE  ECFE  F011         	call	_strchr	;wreg free
 18382  0021B2  501A               	movf	?_strchr+1,w,c
 18383  0021B4  1019               	iorwf	?_strchr,w,c
 18384  0021B6  E0E6               	bz	l12447
 18385  0021B8                     l2447:
 18386  0021B8  C023  F01F         	movff	strcspn@i,?_strcspn
 18387  0021BC  C024  F020         	movff	strcspn@i+1,?_strcspn+1
 18388  0021C0  0012               	return	
 18389  0021C2                     __end_of_strcspn:
 18390                           	opt stack 0
 18391                           tblptru	equ	0xFF8
 18392                           tblptrh	equ	0xFF7
 18393                           tblptrl	equ	0xFF6
 18394                           tablat	equ	0xFF5
 18395                           prodh	equ	0xFF4
 18396                           prodl	equ	0xFF3
 18397                           intcon	equ	0xFF2
 18398                           indf0	equ	0xFEF
 18399                           postinc0	equ	0xFEE
 18400                           fsr0h	equ	0xFEA
 18401                           fsr0l	equ	0xFE9
 18402                           wreg	equ	0xFE8
 18403                           indf1	equ	0xFE7
 18404                           postinc1	equ	0xFE6
 18405                           postdec1	equ	0xFE5
 18406                           fsr1h	equ	0xFE2
 18407                           fsr1l	equ	0xFE1
 18408                           indf2	equ	0xFDF
 18409                           postinc2	equ	0xFDE
 18410                           postdec2	equ	0xFDD
 18411                           plusw2	equ	0xFDB
 18412                           fsr2h	equ	0xFDA
 18413                           fsr2l	equ	0xFD9
 18414                           status	equ	0xFD8
 18415                           
 18416 ;; *************** function _strspn *****************
 18417 ;; Defined at:
 18418 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 18419 ;; Parameters:    Size  Location     Type
 18420 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18421 ;;		 -> NULL(0), cmdbuf(80), 
 18422 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18423 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18424 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18425 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18426 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18427 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18428 ;;		 -> STR_30(2), STR_29(2), 
 18429 ;; Auto vars:     Size  Location     Type
 18430 ;;  i               2   34[COMRAM] unsigned int 
 18431 ;; Return value:  Size  Location     Type
 18432 ;;                  2   30[COMRAM] unsigned int 
 18433 ;; Registers used:
 18434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18435 ;; Tracked objects:
 18436 ;;		On entry : 0/1
 18437 ;;		On exit  : 0/0
 18438 ;;		Unchanged: 0/0
 18439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18440 ;;      Params:         4       0       0       0       0       0       0
 18441 ;;      Locals:         2       0       0       0       0       0       0
 18442 ;;      Temps:          0       0       0       0       0       0       0
 18443 ;;      Totals:         6       0       0       0       0       0       0
 18444 ;;Total ram usage:        6 bytes
 18445 ;; Hardware stack levels used:    1
 18446 ;; Hardware stack levels required when called:    3
 18447 ;; This function calls:
 18448 ;;		_strchr
 18449 ;; This function is called by:
 18450 ;;		_strtok
 18451 ;; This function uses a non-reentrant model
 18452 ;;
 18453                           
 18454                           	psect	text42
 18455  00213A                     __ptext42:
 18456                           	opt stack 0
 18457  00213A                     _strspn:
 18458                           	opt stack 24
 18459                           
 18460                           ;incstack = 0
 18461                           ;incstack = 0
 18462  00213A  6A23               	clrf	strspn@i,c
 18463  00213C  6A24               	clrf	strspn@i+1,c
 18464  00213E  D004               	goto	l12441
 18465  002140                     l12439:
 18466  002140  4A1F               	infsnz	strspn@s1,f,c
 18467  002142  2A20               	incf	strspn@s1+1,f,c
 18468  002144  4A23               	infsnz	strspn@i,f,c
 18469  002146  2A24               	incf	strspn@i+1,f,c
 18470  002148                     l12441:
 18471  002148  C01F  FFD9         	movff	strspn@s1,fsr2l
 18472  00214C  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18473  002150  50DF               	movf	indf2,w,c
 18474  002152  E010               	bz	l2466
 18475  002154  C021  F019         	movff	strspn@s2,?_strchr
 18476  002158  C022  F01A         	movff	strspn@s2+1,?_strchr+1
 18477  00215C  C01F  FFD9         	movff	strspn@s1,fsr2l
 18478  002160  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18479  002164  50DF               	movf	indf2,w,c
 18480  002166  6E1B               	movwf	?_strchr+2,c
 18481  002168  6A1C               	clrf	?_strchr+3,c
 18482  00216A  ECFE  F011         	call	_strchr	;wreg free
 18483  00216E  501A               	movf	?_strchr+1,w,c
 18484  002170  1019               	iorwf	?_strchr,w,c
 18485  002172  E1E6               	bnz	l12439
 18486  002174                     l2466:
 18487  002174  C023  F01F         	movff	strspn@i,?_strspn
 18488  002178  C024  F020         	movff	strspn@i+1,?_strspn+1
 18489  00217C  0012               	return	
 18490  00217E                     __end_of_strspn:
 18491                           	opt stack 0
 18492                           tblptru	equ	0xFF8
 18493                           tblptrh	equ	0xFF7
 18494                           tblptrl	equ	0xFF6
 18495                           tablat	equ	0xFF5
 18496                           prodh	equ	0xFF4
 18497                           prodl	equ	0xFF3
 18498                           intcon	equ	0xFF2
 18499                           indf0	equ	0xFEF
 18500                           postinc0	equ	0xFEE
 18501                           fsr0h	equ	0xFEA
 18502                           fsr0l	equ	0xFE9
 18503                           wreg	equ	0xFE8
 18504                           indf1	equ	0xFE7
 18505                           postinc1	equ	0xFE6
 18506                           postdec1	equ	0xFE5
 18507                           fsr1h	equ	0xFE2
 18508                           fsr1l	equ	0xFE1
 18509                           indf2	equ	0xFDF
 18510                           postinc2	equ	0xFDE
 18511                           postdec2	equ	0xFDD
 18512                           plusw2	equ	0xFDB
 18513                           fsr2h	equ	0xFDA
 18514                           fsr2l	equ	0xFD9
 18515                           status	equ	0xFD8
 18516                           
 18517 ;; *************** function _strchr *****************
 18518 ;; Defined at:
 18519 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 18520 ;; Parameters:    Size  Location     Type
 18521 ;;  ptr             2   24[COMRAM] PTR const unsigned char 
 18522 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18523 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18524 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18525 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18526 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18527 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 18528 ;;  chr             2   26[COMRAM] int 
 18529 ;; Auto vars:     Size  Location     Type
 18530 ;;		None
 18531 ;; Return value:  Size  Location     Type
 18532 ;;                  2   24[COMRAM] PTR unsigned char 
 18533 ;; Registers used:
 18534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 18535 ;; Tracked objects:
 18536 ;;		On entry : 0/3
 18537 ;;		On exit  : 0/0
 18538 ;;		Unchanged: 0/0
 18539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18540 ;;      Params:         4       0       0       0       0       0       0
 18541 ;;      Locals:         0       0       0       0       0       0       0
 18542 ;;      Temps:          2       0       0       0       0       0       0
 18543 ;;      Totals:         6       0       0       0       0       0       0
 18544 ;;Total ram usage:        6 bytes
 18545 ;; Hardware stack levels used:    1
 18546 ;; Hardware stack levels required when called:    2
 18547 ;; This function calls:
 18548 ;;		Nothing
 18549 ;; This function is called by:
 18550 ;;		_doModeVerbose
 18551 ;;		_strcspn
 18552 ;;		_strspn
 18553 ;; This function uses a non-reentrant model
 18554 ;;
 18555                           
 18556                           	psect	text43
 18557  0023FC                     __ptext43:
 18558                           	opt stack 0
 18559  0023FC                     _strchr:
 18560                           	opt stack 26
 18561  0023FC                     l2368:
 18562  0023FC  5019               	movf	strchr@ptr,w,c
 18563  0023FE  6EF6               	movwf	tblptrl,c
 18564  002400  6EE9               	movwf	fsr0l,c
 18565  002402  0E05               	movlw	(high __ramtop+-1)
 18566  002404  6EEA               	movwf	fsr0h,c
 18567  002406  501A               	movf	strchr@ptr+1,w,c
 18568  002408  64EA               	cpfsgt	fsr0h,c
 18569  00240A  D003               	bra	u13537
 18570  00240C  6EEA               	movwf	fsr0h,c
 18571  00240E  50EF               	movf	indf0,w,c
 18572  002410  D003               	bra	u13530
 18573  002412                     u13537:
 18574  002412  6EF7               	movwf	tblptrh,c
 18575  002414  0008               	tblrd		*
 18576  002416  50F5               	movf	tablat,w,c
 18577  002418                     u13530:
 18578  002418  181B               	xorwf	strchr@chr,w,c
 18579  00241A  E105               	bnz	l10957
 18580  00241C  C019  F019         	movff	strchr@ptr,?_strchr
 18581  002420  C01A  F01A         	movff	strchr@ptr+1,?_strchr+1
 18582  002424  D018               	goto	l2370
 18583  002426                     l10957:
 18584  002426  5019               	movf	strchr@ptr,w,c
 18585  002428  6E1D               	movwf	??_strchr& (0+255),c
 18586  00242A  501A               	movf	strchr@ptr+1,w,c
 18587  00242C  6E1E               	movwf	(??_strchr+1)& (0+255),c
 18588  00242E  4A19               	infsnz	strchr@ptr,f,c
 18589  002430  2A1A               	incf	strchr@ptr+1,f,c
 18590  002432  501D               	movf	??_strchr,w,c
 18591  002434  6EF6               	movwf	tblptrl,c
 18592  002436  6EE9               	movwf	fsr0l,c
 18593  002438  0E05               	movlw	(high __ramtop+-1)
 18594  00243A  6EEA               	movwf	fsr0h,c
 18595  00243C  501E               	movf	??_strchr+1,w,c
 18596  00243E  64EA               	cpfsgt	fsr0h,c
 18597  002440  D003               	bra	u13557
 18598  002442  6EEA               	movwf	fsr0h,c
 18599  002444  50EF               	movf	indf0,w,c
 18600  002446  D003               	bra	u13550
 18601  002448                     u13557:
 18602  002448  6EF7               	movwf	tblptrh,c
 18603  00244A  0008               	tblrd		*
 18604  00244C  50F5               	movf	tablat,w,c
 18605  00244E                     u13550:
 18606  00244E  0900               	iorlw	0
 18607  002450  E1D5               	bnz	l2368
 18608  002452  6A19               	clrf	?_strchr,c
 18609  002454  6A1A               	clrf	?_strchr+1,c
 18610  002456                     l2370:
 18611  002456  0012               	return	
 18612  002458                     __end_of_strchr:
 18613                           	opt stack 0
 18614                           tblptru	equ	0xFF8
 18615                           tblptrh	equ	0xFF7
 18616                           tblptrl	equ	0xFF6
 18617                           tablat	equ	0xFF5
 18618                           prodh	equ	0xFF4
 18619                           prodl	equ	0xFF3
 18620                           intcon	equ	0xFF2
 18621                           indf0	equ	0xFEF
 18622                           postinc0	equ	0xFEE
 18623                           fsr0h	equ	0xFEA
 18624                           fsr0l	equ	0xFE9
 18625                           wreg	equ	0xFE8
 18626                           indf1	equ	0xFE7
 18627                           postinc1	equ	0xFE6
 18628                           postdec1	equ	0xFE5
 18629                           fsr1h	equ	0xFE2
 18630                           fsr1l	equ	0xFE1
 18631                           indf2	equ	0xFDF
 18632                           postinc2	equ	0xFDE
 18633                           postdec2	equ	0xFDD
 18634                           plusw2	equ	0xFDB
 18635                           fsr2h	equ	0xFDA
 18636                           fsr2l	equ	0xFD9
 18637                           status	equ	0xFD8
 18638                           
 18639 ;; *************** function _stristr *****************
 18640 ;; Defined at:
 18641 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 18642 ;; Parameters:    Size  Location     Type
 18643 ;;  s1              2   37[COMRAM] PTR const unsigned char 
 18644 ;;		 -> NULL(0), cmdbuf(80), 
 18645 ;;  s2              2   39[COMRAM] PTR const unsigned char 
 18646 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18647 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18648 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18649 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18650 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18651 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18652 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18653 ;;		 -> STR_7(5), STR_5(5), 
 18654 ;; Auto vars:     Size  Location     Type
 18655 ;;		None
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  2   37[COMRAM] PTR unsigned char 
 18658 ;; Registers used:
 18659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18660 ;; Tracked objects:
 18661 ;;		On entry : F/1
 18662 ;;		On exit  : 0/0
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18665 ;;      Params:         4       0       0       0       0       0       0
 18666 ;;      Locals:         0       0       0       0       0       0       0
 18667 ;;      Temps:          0       0       0       0       0       0       0
 18668 ;;      Totals:         4       0       0       0       0       0       0
 18669 ;;Total ram usage:        4 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:    4
 18672 ;; This function calls:
 18673 ;;		_strlen
 18674 ;;		_strnicmp
 18675 ;;		_strichr
 18676 ;; This function is called by:
 18677 ;;		_doModeVerbose
 18678 ;; This function uses a non-reentrant model
 18679 ;;
 18680                           
 18681                           	psect	text44
 18682  002756                     __ptext44:
 18683                           	opt stack 0
 18684  002756                     _stristr:
 18685                           	opt stack 24
 18686                           
 18687                           ; BSR set to: 1
 18688                           
 18689                           ;incstack = 0
 18690                           ;incstack = 0
 18691  002756  D02F               	goto	l10661
 18692  002758                     l10655:
 18693  002758  C026  F01D         	movff	stristr@s1,?_strnicmp
 18694  00275C  C027  F01E         	movff	stristr@s1+1,?_strnicmp+1
 18695  002760  C028  F01F         	movff	stristr@s2,?_strnicmp+2
 18696  002764  C029  F020         	movff	stristr@s2+1,?_strnicmp+3
 18697  002768  C028  F019         	movff	stristr@s2,?_strlen
 18698  00276C  C029  F01A         	movff	stristr@s2+1,?_strlen+1
 18699  002770  ECC0  F00F         	call	_strlen	;wreg free
 18700  002774  C019  F021         	movff	?_strlen,?_strnicmp+4
 18701  002778  C01A  F022         	movff	?_strlen+1,?_strnicmp+5
 18702  00277C  EC5D  F012         	call	_strnicmp	;wreg free
 18703  002780  501E               	movf	?_strnicmp+1,w,c
 18704  002782  101D               	iorwf	?_strnicmp,w,c
 18705  002784  E105               	bnz	l10659
 18706  002786  C026  F026         	movff	stristr@s1,?_stristr
 18707  00278A  C027  F027         	movff	stristr@s1+1,?_stristr+1
 18708  00278E  D01E               	goto	l2389
 18709  002790                     l10659:
 18710  002790  2826               	incf	stristr@s1,w,c
 18711  002792  6E1A               	movwf	?_strichr,c
 18712  002794  0E00               	movlw	0
 18713  002796  2027               	addwfc	stristr@s1+1,w,c
 18714  002798  6E1B               	movwf	?_strichr+1,c
 18715  00279A  C028  FFF6         	movff	stristr@s2,tblptrl
 18716  00279E  C029  FFF7         	movff	stristr@s2+1,tblptrh
 18717  0027A2  0008               	tblrd		*
 18718  0027A4  50F5               	movf	tablat,w,c
 18719  0027A6  6E1C               	movwf	?_strichr+2,c
 18720  0027A8  6A1D               	clrf	?_strichr+3,c
 18721  0027AA  ECFD  F00F         	call	_strichr	;wreg free
 18722  0027AE  C01A  F026         	movff	?_strichr,stristr@s1
 18723  0027B2  C01B  F027         	movff	?_strichr+1,stristr@s1+1
 18724  0027B6                     l10661:
 18725  0027B6  5027               	movf	stristr@s1+1,w,c
 18726  0027B8  1026               	iorwf	stristr@s1,w,c
 18727  0027BA  E006               	bz	l2392
 18728  0027BC  C026  FFD9         	movff	stristr@s1,fsr2l
 18729  0027C0  C027  FFDA         	movff	stristr@s1+1,fsr2h
 18730  0027C4  50DF               	movf	indf2,w,c
 18731  0027C6  E1C8               	bnz	l10655
 18732  0027C8                     l2392:
 18733  0027C8  6A26               	clrf	?_stristr,c
 18734  0027CA  6A27               	clrf	?_stristr+1,c
 18735  0027CC                     l2389:
 18736  0027CC  0012               	return	
 18737  0027CE                     __end_of_stristr:
 18738                           	opt stack 0
 18739                           tblptru	equ	0xFF8
 18740                           tblptrh	equ	0xFF7
 18741                           tblptrl	equ	0xFF6
 18742                           tablat	equ	0xFF5
 18743                           prodh	equ	0xFF4
 18744                           prodl	equ	0xFF3
 18745                           intcon	equ	0xFF2
 18746                           indf0	equ	0xFEF
 18747                           postinc0	equ	0xFEE
 18748                           fsr0h	equ	0xFEA
 18749                           fsr0l	equ	0xFE9
 18750                           wreg	equ	0xFE8
 18751                           indf1	equ	0xFE7
 18752                           postinc1	equ	0xFE6
 18753                           postdec1	equ	0xFE5
 18754                           fsr1h	equ	0xFE2
 18755                           fsr1l	equ	0xFE1
 18756                           indf2	equ	0xFDF
 18757                           postinc2	equ	0xFDE
 18758                           postdec2	equ	0xFDD
 18759                           plusw2	equ	0xFDB
 18760                           fsr2h	equ	0xFDA
 18761                           fsr2l	equ	0xFD9
 18762                           status	equ	0xFD8
 18763                           
 18764 ;; *************** function _strichr *****************
 18765 ;; Defined at:
 18766 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 18767 ;; Parameters:    Size  Location     Type
 18768 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 18769 ;;		 -> NULL(0), cmdbuf(80), 
 18770 ;;  chr             2   27[COMRAM] int 
 18771 ;; Auto vars:     Size  Location     Type
 18772 ;;		None
 18773 ;; Return value:  Size  Location     Type
 18774 ;;                  2   25[COMRAM] PTR unsigned char 
 18775 ;; Registers used:
 18776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18777 ;; Tracked objects:
 18778 ;;		On entry : 0/1
 18779 ;;		On exit  : 0/0
 18780 ;;		Unchanged: 0/0
 18781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18782 ;;      Params:         4       0       0       0       0       0       0
 18783 ;;      Locals:         0       0       0       0       0       0       0
 18784 ;;      Temps:          0       0       0       0       0       0       0
 18785 ;;      Totals:         4       0       0       0       0       0       0
 18786 ;;Total ram usage:        4 bytes
 18787 ;; Hardware stack levels used:    1
 18788 ;; Hardware stack levels required when called:    3
 18789 ;; This function calls:
 18790 ;;		_toupper
 18791 ;; This function is called by:
 18792 ;;		_stristr
 18793 ;; This function uses a non-reentrant model
 18794 ;;
 18795                           
 18796                           	psect	text45
 18797  001FFA                     __ptext45:
 18798                           	opt stack 0
 18799  001FFA                     _strichr:
 18800                           	opt stack 24
 18801                           
 18802                           ;incstack = 0
 18803                           ;incstack = 0
 18804  001FFA  501C               	movf	strichr@chr,w,c
 18805  001FFC  EC9A  F00E         	call	_toupper
 18806  002000  6E1C               	movwf	strichr@chr,c
 18807  002002  6A1D               	clrf	strichr@chr+1,c
 18808  002004  D010               	goto	l12425
 18809  002006                     l12419:
 18810  002006  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18811  00200A  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18812  00200E  50DF               	movf	indf2,w,c
 18813  002010  EC9A  F00E         	call	_toupper
 18814  002014  181C               	xorwf	strichr@chr,w,c
 18815  002016  E105               	bnz	l12423
 18816  002018  C01A  F01A         	movff	strichr@ptr,?_strichr
 18817  00201C  C01B  F01B         	movff	strichr@ptr+1,?_strichr+1
 18818  002020  D00A               	goto	l2456
 18819  002022                     l12423:
 18820  002022  4A1A               	infsnz	strichr@ptr,f,c
 18821  002024  2A1B               	incf	strichr@ptr+1,f,c
 18822  002026                     l12425:
 18823  002026  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18824  00202A  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18825  00202E  50DF               	movf	indf2,w,c
 18826  002030  E1EA               	bnz	l12419
 18827  002032  6A1A               	clrf	?_strichr,c
 18828  002034  6A1B               	clrf	?_strichr+1,c
 18829  002036                     l2456:
 18830  002036  0012               	return	
 18831  002038                     __end_of_strichr:
 18832                           	opt stack 0
 18833                           tblptru	equ	0xFF8
 18834                           tblptrh	equ	0xFF7
 18835                           tblptrl	equ	0xFF6
 18836                           tablat	equ	0xFF5
 18837                           prodh	equ	0xFF4
 18838                           prodl	equ	0xFF3
 18839                           intcon	equ	0xFF2
 18840                           indf0	equ	0xFEF
 18841                           postinc0	equ	0xFEE
 18842                           fsr0h	equ	0xFEA
 18843                           fsr0l	equ	0xFE9
 18844                           wreg	equ	0xFE8
 18845                           indf1	equ	0xFE7
 18846                           postinc1	equ	0xFE6
 18847                           postdec1	equ	0xFE5
 18848                           fsr1h	equ	0xFE2
 18849                           fsr1l	equ	0xFE1
 18850                           indf2	equ	0xFDF
 18851                           postinc2	equ	0xFDE
 18852                           postdec2	equ	0xFDD
 18853                           plusw2	equ	0xFDB
 18854                           fsr2h	equ	0xFDA
 18855                           fsr2l	equ	0xFD9
 18856                           status	equ	0xFD8
 18857                           
 18858 ;; *************** function _strnicmp *****************
 18859 ;; Defined at:
 18860 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 18861 ;; Parameters:    Size  Location     Type
 18862 ;;  s1              2   28[COMRAM] PTR const unsigned char 
 18863 ;;		 -> NULL(0), cmdbuf(80), 
 18864 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 18865 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18866 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18867 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18868 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18869 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18870 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18871 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18872 ;;		 -> STR_7(5), STR_5(5), 
 18873 ;;  len             2   32[COMRAM] unsigned int 
 18874 ;; Auto vars:     Size  Location     Type
 18875 ;;  r               1   36[COMRAM] char 
 18876 ;; Return value:  Size  Location     Type
 18877 ;;                  2   28[COMRAM] int 
 18878 ;; Registers used:
 18879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18880 ;; Tracked objects:
 18881 ;;		On entry : 0/1
 18882 ;;		On exit  : 0/0
 18883 ;;		Unchanged: 0/0
 18884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18885 ;;      Params:         6       0       0       0       0       0       0
 18886 ;;      Locals:         1       0       0       0       0       0       0
 18887 ;;      Temps:          2       0       0       0       0       0       0
 18888 ;;      Totals:         9       0       0       0       0       0       0
 18889 ;;Total ram usage:        9 bytes
 18890 ;; Hardware stack levels used:    1
 18891 ;; Hardware stack levels required when called:    3
 18892 ;; This function calls:
 18893 ;;		_toupper
 18894 ;; This function is called by:
 18895 ;;		_stristr
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           	psect	text46
 18900  0024BA                     __ptext46:
 18901                           	opt stack 0
 18902  0024BA                     _strnicmp:
 18903                           	opt stack 24
 18904                           
 18905                           ;incstack = 0
 18906                           ;incstack = 0
 18907  0024BA  D026               	goto	l12415
 18908  0024BC                     l12405:
 18909  0024BC  C01F  FFF6         	movff	strnicmp@s2,tblptrl
 18910  0024C0  C020  FFF7         	movff	strnicmp@s2+1,tblptrh
 18911  0024C4  0008               	tblrd		*
 18912  0024C6  50F5               	movf	tablat,w,c
 18913  0024C8  EC9A  F00E         	call	_toupper
 18914  0024CC  6E23               	movwf	??_strnicmp& (0+255),c
 18915  0024CE  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18916  0024D2  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18917  0024D6  50DF               	movf	indf2,w,c
 18918  0024D8  EC9A  F00E         	call	_toupper
 18919  0024DC  6E24               	movwf	(??_strnicmp+1)& (0+255),c
 18920  0024DE  5023               	movf	??_strnicmp,w,c
 18921  0024E0  5C24               	subwf	??_strnicmp+1,w,c
 18922  0024E2  6E25               	movwf	strnicmp@r,c
 18923  0024E4  6625               	tstfsz	strnicmp@r& (0+255),c
 18924  0024E6  D006               	goto	l12409
 18925  0024E8  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18926  0024EC  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18927  0024F0  50DF               	movf	indf2,w,c
 18928  0024F2  E106               	bnz	l12413
 18929  0024F4                     l12409:
 18930  0024F4  5025               	movf	strnicmp@r,w,c
 18931  0024F6  6E1D               	movwf	?_strnicmp,c
 18932  0024F8  6A1E               	clrf	?_strnicmp+1,c
 18933  0024FA  BE1D               	btfsc	?_strnicmp,7,c
 18934  0024FC  061E               	decf	?_strnicmp+1,f,c
 18935  0024FE  D00D               	goto	l2408
 18936  002500                     l12413:
 18937  002500  4A1D               	infsnz	strnicmp@s1,f,c
 18938  002502  2A1E               	incf	strnicmp@s1+1,f,c
 18939  002504  4A1F               	infsnz	strnicmp@s2,f,c
 18940  002506  2A20               	incf	strnicmp@s2+1,f,c
 18941  002508                     l12415:
 18942  002508  0621               	decf	strnicmp@len,f,c
 18943  00250A  A0D8               	btfss	status,0,c
 18944  00250C  0622               	decf	strnicmp@len+1,f,c
 18945  00250E  2821               	incf	strnicmp@len& (0+255),w,c
 18946  002510  B4D8               	btfsc	status,2,c
 18947  002512  2822               	incf	(strnicmp@len+1)& (0+255),w,c
 18948  002514  E1D3               	bnz	l12405
 18949  002516  6A1D               	clrf	?_strnicmp,c
 18950  002518  6A1E               	clrf	?_strnicmp+1,c
 18951  00251A                     l2408:
 18952  00251A  0012               	return	
 18953  00251C                     __end_of_strnicmp:
 18954                           	opt stack 0
 18955                           tblptru	equ	0xFF8
 18956                           tblptrh	equ	0xFF7
 18957                           tblptrl	equ	0xFF6
 18958                           tablat	equ	0xFF5
 18959                           prodh	equ	0xFF4
 18960                           prodl	equ	0xFF3
 18961                           intcon	equ	0xFF2
 18962                           indf0	equ	0xFEF
 18963                           postinc0	equ	0xFEE
 18964                           fsr0h	equ	0xFEA
 18965                           fsr0l	equ	0xFE9
 18966                           wreg	equ	0xFE8
 18967                           indf1	equ	0xFE7
 18968                           postinc1	equ	0xFE6
 18969                           postdec1	equ	0xFE5
 18970                           fsr1h	equ	0xFE2
 18971                           fsr1l	equ	0xFE1
 18972                           indf2	equ	0xFDF
 18973                           postinc2	equ	0xFDE
 18974                           postdec2	equ	0xFDD
 18975                           plusw2	equ	0xFDB
 18976                           fsr2h	equ	0xFDA
 18977                           fsr2l	equ	0xFD9
 18978                           status	equ	0xFD8
 18979                           
 18980 ;; *************** function _toupper *****************
 18981 ;; Defined at:
 18982 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 18983 ;; Parameters:    Size  Location     Type
 18984 ;;  c               1    wreg     unsigned char 
 18985 ;; Auto vars:     Size  Location     Type
 18986 ;;  c               1   24[COMRAM] unsigned char 
 18987 ;; Return value:  Size  Location     Type
 18988 ;;                  1    wreg      unsigned char 
 18989 ;; Registers used:
 18990 ;;		wreg, status,2, status,0
 18991 ;; Tracked objects:
 18992 ;;		On entry : 0/1
 18993 ;;		On exit  : 0/0
 18994 ;;		Unchanged: 0/0
 18995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18996 ;;      Params:         0       0       0       0       0       0       0
 18997 ;;      Locals:         1       0       0       0       0       0       0
 18998 ;;      Temps:          0       0       0       0       0       0       0
 18999 ;;      Totals:         1       0       0       0       0       0       0
 19000 ;;Total ram usage:        1 bytes
 19001 ;; Hardware stack levels used:    1
 19002 ;; Hardware stack levels required when called:    2
 19003 ;; This function calls:
 19004 ;;		Nothing
 19005 ;; This function is called by:
 19006 ;;		_strnicmp
 19007 ;;		_strichr
 19008 ;; This function uses a non-reentrant model
 19009 ;;
 19010                           
 19011                           	psect	text47
 19012  001D34                     __ptext47:
 19013                           	opt stack 0
 19014  001D34                     _toupper:
 19015                           	opt stack 24
 19016                           
 19017                           ;incstack = 0
 19018                           ;incstack = 0
 19019                           ;toupper@c stored from wreg
 19020  001D34  CFE8 F019          	movff	wreg,toupper@c
 19021  001D38  0E7B               	movlw	123
 19022  001D3A  6019               	cpfslt	toupper@c,c
 19023  001D3C  D004               	goto	l12433
 19024  001D3E  0E60               	movlw	96
 19025  001D40  6419               	cpfsgt	toupper@c,c
 19026  001D42  D001               	goto	l12433
 19027  001D44  9A19               	bcf	toupper@c,5,c
 19028  001D46                     l12433:
 19029  001D46  5019               	movf	toupper@c,w,c
 19030  001D48  0012               	return	
 19031  001D4A                     __end_of_toupper:
 19032                           	opt stack 0
 19033                           tblptru	equ	0xFF8
 19034                           tblptrh	equ	0xFF7
 19035                           tblptrl	equ	0xFF6
 19036                           tablat	equ	0xFF5
 19037                           prodh	equ	0xFF4
 19038                           prodl	equ	0xFF3
 19039                           intcon	equ	0xFF2
 19040                           indf0	equ	0xFEF
 19041                           postinc0	equ	0xFEE
 19042                           fsr0h	equ	0xFEA
 19043                           fsr0l	equ	0xFE9
 19044                           wreg	equ	0xFE8
 19045                           indf1	equ	0xFE7
 19046                           postinc1	equ	0xFE6
 19047                           postdec1	equ	0xFE5
 19048                           fsr1h	equ	0xFE2
 19049                           fsr1l	equ	0xFE1
 19050                           indf2	equ	0xFDF
 19051                           postinc2	equ	0xFDE
 19052                           postdec2	equ	0xFDD
 19053                           plusw2	equ	0xFDB
 19054                           fsr2h	equ	0xFDA
 19055                           fsr2l	equ	0xFD9
 19056                           status	equ	0xFD8
 19057                           
 19058 ;; *************** function _strlen *****************
 19059 ;; Defined at:
 19060 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 19061 ;; Parameters:    Size  Location     Type
 19062 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19063 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19064 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19065 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19066 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19067 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19068 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19069 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19070 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19071 ;;		 -> cmdbuf(80), 
 19072 ;; Auto vars:     Size  Location     Type
 19073 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19074 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19075 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19076 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19077 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19078 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19079 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19080 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19081 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19082 ;;		 -> cmdbuf(80), 
 19083 ;; Return value:  Size  Location     Type
 19084 ;;                  2   24[COMRAM] unsigned int 
 19085 ;; Registers used:
 19086 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19087 ;; Tracked objects:
 19088 ;;		On entry : 0/1
 19089 ;;		On exit  : 0/0
 19090 ;;		Unchanged: 0/0
 19091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19092 ;;      Params:         2       0       0       0       0       0       0
 19093 ;;      Locals:         2       0       0       0       0       0       0
 19094 ;;      Temps:          0       0       0       0       0       0       0
 19095 ;;      Totals:         4       0       0       0       0       0       0
 19096 ;;Total ram usage:        4 bytes
 19097 ;; Hardware stack levels used:    1
 19098 ;; Hardware stack levels required when called:    2
 19099 ;; This function calls:
 19100 ;;		Nothing
 19101 ;; This function is called by:
 19102 ;;		_doModeSLCAN
 19103 ;;		_receivePrintEventSLCAN
 19104 ;;		_printGUID
 19105 ;;		_hexStringToBytes
 19106 ;;		_stristr
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           	psect	text48
 19111  001F80                     __ptext48:
 19112                           	opt stack 0
 19113  001F80                     _strlen:
 19114                           	opt stack 25
 19115                           
 19116                           ;incstack = 0
 19117                           ;incstack = 0
 19118  001F80  C019  F01B         	movff	strlen@s,strlen@cp
 19119  001F84  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19120  001F88  D002               	goto	l11801
 19121  001F8A                     l11799:
 19122  001F8A  4A1B               	infsnz	strlen@cp,f,c
 19123  001F8C  2A1C               	incf	strlen@cp+1,f,c
 19124  001F8E                     l11801:
 19125  001F8E  501B               	movf	strlen@cp,w,c
 19126  001F90  6EF6               	movwf	tblptrl,c
 19127  001F92  6EE9               	movwf	fsr0l,c
 19128  001F94  0E05               	movlw	(high __ramtop+-1)
 19129  001F96  6EEA               	movwf	fsr0h,c
 19130  001F98  501C               	movf	strlen@cp+1,w,c
 19131  001F9A  64EA               	cpfsgt	fsr0h,c
 19132  001F9C  D003               	bra	u15167
 19133  001F9E  6EEA               	movwf	fsr0h,c
 19134  001FA0  50EF               	movf	indf0,w,c
 19135  001FA2  D003               	bra	u15160
 19136  001FA4                     u15167:
 19137  001FA4  6EF7               	movwf	tblptrh,c
 19138  001FA6  0008               	tblrd		*
 19139  001FA8  50F5               	movf	tablat,w,c
 19140  001FAA                     u15160:
 19141  001FAA  0900               	iorlw	0
 19142  001FAC  E1EE               	bnz	l11799
 19143  001FAE  5019               	movf	strlen@s,w,c
 19144  001FB0  5C1B               	subwf	strlen@cp,w,c
 19145  001FB2  6E19               	movwf	?_strlen,c
 19146  001FB4  501A               	movf	strlen@s+1,w,c
 19147  001FB6  581C               	subwfb	strlen@cp+1,w,c
 19148  001FB8  6E1A               	movwf	?_strlen+1,c
 19149  001FBA  0012               	return	
 19150  001FBC                     __end_of_strlen:
 19151                           	opt stack 0
 19152                           tblptru	equ	0xFF8
 19153                           tblptrh	equ	0xFF7
 19154                           tblptrl	equ	0xFF6
 19155                           tablat	equ	0xFF5
 19156                           prodh	equ	0xFF4
 19157                           prodl	equ	0xFF3
 19158                           intcon	equ	0xFF2
 19159                           indf0	equ	0xFEF
 19160                           postinc0	equ	0xFEE
 19161                           fsr0h	equ	0xFEA
 19162                           fsr0l	equ	0xFE9
 19163                           wreg	equ	0xFE8
 19164                           indf1	equ	0xFE7
 19165                           postinc1	equ	0xFE6
 19166                           postdec1	equ	0xFE5
 19167                           fsr1h	equ	0xFE2
 19168                           fsr1l	equ	0xFE1
 19169                           indf2	equ	0xFDF
 19170                           postinc2	equ	0xFDE
 19171                           postdec2	equ	0xFDD
 19172                           plusw2	equ	0xFDB
 19173                           fsr2h	equ	0xFDA
 19174                           fsr2l	equ	0xFD9
 19175                           status	equ	0xFD8
 19176                           
 19177 ;; *************** function _receivePrintEventVerbose *****************
 19178 ;; Defined at:
 19179 ;;		line 1625 in file "main.c"
 19180 ;; Parameters:    Size  Location     Type
 19181 ;;		None
 19182 ;; Auto vars:     Size  Location     Type
 19183 ;;  i               1   47[BANK0 ] unsigned char 
 19184 ;; Return value:  Size  Location     Type
 19185 ;;                  1    wreg      enum E15660
 19186 ;; Registers used:
 19187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : F/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19193 ;;      Params:         0       0       0       0       0       0       0
 19194 ;;      Locals:         0      13       0       0       0       0       0
 19195 ;;      Temps:          0       5       0       0       0       0       0
 19196 ;;      Totals:         0      18       0       0       0       0       0
 19197 ;;Total ram usage:       18 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    6
 19200 ;; This function calls:
 19201 ;;		_putsUSART
 19202 ;;		_sprintf
 19203 ;;		_getVSCPFrame
 19204 ;; This function is called by:
 19205 ;;		_doModeVerbose
 19206 ;; This function uses a non-reentrant model
 19207 ;;
 19208                           
 19209                           	psect	text49
 19210  004A20                     __ptext49:
 19211                           	opt stack 0
 19212  004A20                     _receivePrintEventVerbose:
 19213                           	opt stack 22
 19214                           
 19215                           ; BSR set to: 0
 19216                           ;main.c: 1626: uint8_t i;
 19217                           ;main.c: 1628: if ( getVSCPFrame(&vscpClass,
 19218                           ;main.c: 1629: &vscpType,
 19219                           ;main.c: 1630: &vscpNodeId,
 19220                           ;main.c: 1631: &vscpPriority,
 19221                           ;main.c: 1632: &vscpSize,
 19222                           ;main.c: 1633: vscpData)) {
 19223                           
 19224                           ;incstack = 0
 19225                           ;incstack = 0
 19226  004A20  0EDF               	movlw	low _vscpType
 19227  004A22  6F62               	movwf	?_getVSCPFrame& (0+255),b
 19228  004A24  0EDC               	movlw	low _vscpNodeId
 19229  004A26  6F63               	movwf	(?_getVSCPFrame+1)& (0+255),b
 19230  004A28  0EDD               	movlw	low _vscpPriority
 19231  004A2A  6F64               	movwf	(?_getVSCPFrame+2)& (0+255),b
 19232  004A2C  0EDE               	movlw	low _vscpSize
 19233  004A2E  6F65               	movwf	(?_getVSCPFrame+3)& (0+255),b
 19234  004A30  0E40               	movlw	low _vscpData
 19235  004A32  6F66               	movwf	(?_getVSCPFrame+4)& (0+255),b
 19236  004A34  0EDA               	movlw	_vscpClass& (0+255)
 19237  004A36  EC28  F014         	call	_getVSCPFrame
 19238  004A3A  0900               	iorlw	0
 19239  004A3C  E101 D129          	bz	l13719
 19240                           
 19241                           ;main.c: 1636: cntRxFrames++;
 19242  004A40  0101               	movlb	1	; () banked
 19243  004A42  2B0C               	incf	_cntRxFrames& (0+255),f,b
 19244  004A44  0E00               	movlw	0
 19245  004A46  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 19246  004A48  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 19247  004A4A  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 19248                           
 19249                           ;main.c: 1637: cntRxBytes += vscpSize;
 19250  004A4C  0100               	movlb	0	; () banked
 19251  004A4E  51DE               	movf	_vscpSize& (0+255),w,b
 19252  004A50  0101               	movlb	1	; () banked
 19253  004A52  2708               	addwf	_cntRxBytes& (0+255),f,b
 19254  004A54  0E00               	movlw	0
 19255  004A56  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 19256  004A58  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 19257  004A5A  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 19258                           
 19259                           ; BSR set to: 1
 19260                           ;main.c: 1639: putsUSART((char *) "<Prio=");
 19261  004A5C  0E7C               	movlw	high STR_130
 19262  004A5E  6E1B               	movwf	?_putsUSART+1,c
 19263  004A60  0E41               	movlw	low STR_130
 19264  004A62  6E1A               	movwf	?_putsUSART,c
 19265  004A64  EC50  F011         	call	_putsUSART	;wreg free
 19266                           
 19267                           ;main.c: 1640: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority );
 19268  004A68  0100               	movlb	0	; () banked
 19269  004A6A  67D3               	tstfsz	_bHex& (0+255),b
 19270  004A6C  D004               	goto	l13637
 19271                           
 19272                           ; BSR set to: 0
 19273  004A6E  0E7C               	movlw	high STR_53
 19274  004A70  6F84               	movwf	(_receivePrintEventVerbose$1226+1)& (0+255),b
 19275  004A72  0EED               	movlw	low STR_53
 19276  004A74  D003               	goto	L26
 19277  004A76                     l13637:
 19278                           
 19279                           ; BSR set to: 0
 19280  004A76  0E7C               	movlw	high STR_52
 19281  004A78  6F84               	movwf	(_receivePrintEventVerbose$1226+1)& (0+255),b
 19282  004A7A  0E64               	movlw	low STR_52
 19283  004A7C                     L26:
 19284  004A7C  6F83               	movwf	_receivePrintEventVerbose$1226& (0+255),b
 19285                           
 19286                           ; BSR set to: 0
 19287  004A7E  0E01               	movlw	high _wrkbuf
 19288  004A80  0100               	movlb	0	; () banked
 19289  004A82  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19290  004A84  0E74               	movlw	low _wrkbuf
 19291  004A86  6F60               	movwf	?_sprintf& (0+255),b
 19292  004A88  C083  F062         	movff	_receivePrintEventVerbose$1226,?_sprintf+2
 19293  004A8C  C084  F063         	movff	_receivePrintEventVerbose$1226+1,?_sprintf+3
 19294  004A90  C0DD  F064         	movff	_vscpPriority,?_sprintf+4
 19295  004A94  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19296  004A96  EC65  F029         	call	_sprintf	;wreg free
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;main.c: 1641: putsUSART(wrkbuf);
 19300  004A9A  0101               	movlb	1	; () banked
 19301  004A9C  0E01               	movlw	high _wrkbuf
 19302  004A9E  6E1B               	movwf	?_putsUSART+1,c
 19303  004AA0  0E74               	movlw	low _wrkbuf
 19304  004AA2  6E1A               	movwf	?_putsUSART,c
 19305  004AA4  EC50  F011         	call	_putsUSART	;wreg free
 19306                           
 19307                           ;main.c: 1642: putsUSART((char *) ",class=");
 19308  004AA8  0E7B               	movlw	high STR_133
 19309  004AAA  6E1B               	movwf	?_putsUSART+1,c
 19310  004AAC  0EF5               	movlw	low STR_133
 19311  004AAE  6E1A               	movwf	?_putsUSART,c
 19312  004AB0  EC50  F011         	call	_putsUSART	;wreg free
 19313                           
 19314                           ;main.c: 1643: sprintf( wrkbuf, bHex ? "0x%04X" : "%d", vscpClass );
 19315  004AB4  0100               	movlb	0	; () banked
 19316  004AB6  67D3               	tstfsz	_bHex& (0+255),b
 19317  004AB8  D004               	goto	l13649
 19318                           
 19319                           ; BSR set to: 0
 19320  004ABA  0E7C               	movlw	high STR_53
 19321  004ABC  6F86               	movwf	(_receivePrintEventVerbose$1231+1)& (0+255),b
 19322  004ABE  0EED               	movlw	low STR_53
 19323  004AC0  D003               	goto	L27
 19324  004AC2                     l13649:
 19325                           
 19326                           ; BSR set to: 0
 19327  004AC2  0E7C               	movlw	high STR_134
 19328  004AC4  6F86               	movwf	(_receivePrintEventVerbose$1231+1)& (0+255),b
 19329  004AC6  0E6B               	movlw	low STR_134
 19330  004AC8                     L27:
 19331  004AC8  6F85               	movwf	_receivePrintEventVerbose$1231& (0+255),b
 19332                           
 19333                           ; BSR set to: 0
 19334  004ACA  0E01               	movlw	high _wrkbuf
 19335  004ACC  0100               	movlb	0	; () banked
 19336  004ACE  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19337  004AD0  0E74               	movlw	low _wrkbuf
 19338  004AD2  6F60               	movwf	?_sprintf& (0+255),b
 19339  004AD4  C085  F062         	movff	_receivePrintEventVerbose$1231,?_sprintf+2
 19340  004AD8  C086  F063         	movff	_receivePrintEventVerbose$1231+1,?_sprintf+3
 19341  004ADC  C0DA  F064         	movff	_vscpClass,?_sprintf+4
 19342  004AE0  C0DB  F065         	movff	_vscpClass+1,?_sprintf+5
 19343  004AE4  EC65  F029         	call	_sprintf	;wreg free
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;main.c: 1644: putsUSART(wrkbuf);
 19347  004AE8  0101               	movlb	1	; () banked
 19348  004AEA  0E01               	movlw	high _wrkbuf
 19349  004AEC  6E1B               	movwf	?_putsUSART+1,c
 19350  004AEE  0E74               	movlw	low _wrkbuf
 19351  004AF0  6E1A               	movwf	?_putsUSART,c
 19352  004AF2  EC50  F011         	call	_putsUSART	;wreg free
 19353                           
 19354                           ;main.c: 1645: putsUSART((char *) ",type=");
 19355  004AF6  0E7C               	movlw	high STR_136
 19356  004AF8  6E1B               	movwf	?_putsUSART+1,c
 19357  004AFA  0E33               	movlw	low STR_136
 19358  004AFC  6E1A               	movwf	?_putsUSART,c
 19359  004AFE  EC50  F011         	call	_putsUSART	;wreg free
 19360                           
 19361                           ;main.c: 1646: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpType );
 19362  004B02  0100               	movlb	0	; () banked
 19363  004B04  67D3               	tstfsz	_bHex& (0+255),b
 19364  004B06  D004               	goto	l13661
 19365                           
 19366                           ; BSR set to: 0
 19367  004B08  0E7C               	movlw	high STR_53
 19368  004B0A  6F88               	movwf	(_receivePrintEventVerbose$1236+1)& (0+255),b
 19369  004B0C  0EED               	movlw	low STR_53
 19370  004B0E  D003               	goto	L28
 19371  004B10                     l13661:
 19372                           
 19373                           ; BSR set to: 0
 19374  004B10  0E7C               	movlw	high STR_52
 19375  004B12  6F88               	movwf	(_receivePrintEventVerbose$1236+1)& (0+255),b
 19376  004B14  0E64               	movlw	low STR_52
 19377  004B16                     L28:
 19378  004B16  6F87               	movwf	_receivePrintEventVerbose$1236& (0+255),b
 19379                           
 19380                           ; BSR set to: 0
 19381  004B18  0E01               	movlw	high _wrkbuf
 19382  004B1A  0100               	movlb	0	; () banked
 19383  004B1C  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19384  004B1E  0E74               	movlw	low _wrkbuf
 19385  004B20  6F60               	movwf	?_sprintf& (0+255),b
 19386  004B22  C087  F062         	movff	_receivePrintEventVerbose$1236,?_sprintf+2
 19387  004B26  C088  F063         	movff	_receivePrintEventVerbose$1236+1,?_sprintf+3
 19388  004B2A  C0DF  F064         	movff	_vscpType,?_sprintf+4
 19389  004B2E  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19390  004B30  EC65  F029         	call	_sprintf	;wreg free
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;main.c: 1647: putsUSART(wrkbuf);
 19394  004B34  0101               	movlb	1	; () banked
 19395  004B36  0E01               	movlw	high _wrkbuf
 19396  004B38  6E1B               	movwf	?_putsUSART+1,c
 19397  004B3A  0E74               	movlw	low _wrkbuf
 19398  004B3C  6E1A               	movwf	?_putsUSART,c
 19399  004B3E  EC50  F011         	call	_putsUSART	;wreg free
 19400                           
 19401                           ;main.c: 1648: putsUSART((char *) ",nodeid=");
 19402  004B42  0E7B               	movlw	high STR_139
 19403  004B44  6E1B               	movwf	?_putsUSART+1,c
 19404  004B46  0EC3               	movlw	low STR_139
 19405  004B48  6E1A               	movwf	?_putsUSART,c
 19406  004B4A  EC50  F011         	call	_putsUSART	;wreg free
 19407                           
 19408                           ;main.c: 1649: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId );
 19409  004B4E  0100               	movlb	0	; () banked
 19410  004B50  67D3               	tstfsz	_bHex& (0+255),b
 19411  004B52  D004               	goto	l13673
 19412                           
 19413                           ; BSR set to: 0
 19414  004B54  0E7C               	movlw	high STR_53
 19415  004B56  6F8A               	movwf	(_receivePrintEventVerbose$1241+1)& (0+255),b
 19416  004B58  0EED               	movlw	low STR_53
 19417  004B5A  D003               	goto	L29
 19418  004B5C                     l13673:
 19419                           
 19420                           ; BSR set to: 0
 19421  004B5C  0E7C               	movlw	high STR_52
 19422  004B5E  6F8A               	movwf	(_receivePrintEventVerbose$1241+1)& (0+255),b
 19423  004B60  0E64               	movlw	low STR_52
 19424  004B62                     L29:
 19425  004B62  6F89               	movwf	_receivePrintEventVerbose$1241& (0+255),b
 19426                           
 19427                           ; BSR set to: 0
 19428  004B64  0E01               	movlw	high _wrkbuf
 19429  004B66  0100               	movlb	0	; () banked
 19430  004B68  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19431  004B6A  0E74               	movlw	low _wrkbuf
 19432  004B6C  6F60               	movwf	?_sprintf& (0+255),b
 19433  004B6E  C089  F062         	movff	_receivePrintEventVerbose$1241,?_sprintf+2
 19434  004B72  C08A  F063         	movff	_receivePrintEventVerbose$1241+1,?_sprintf+3
 19435  004B76  C0DC  F064         	movff	_vscpNodeId,?_sprintf+4
 19436  004B7A  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19437  004B7C  EC65  F029         	call	_sprintf	;wreg free
 19438                           
 19439                           ; BSR set to: 0
 19440                           ;main.c: 1650: putsUSART(wrkbuf);
 19441  004B80  0101               	movlb	1	; () banked
 19442  004B82  0E01               	movlw	high _wrkbuf
 19443  004B84  6E1B               	movwf	?_putsUSART+1,c
 19444  004B86  0E74               	movlw	low _wrkbuf
 19445  004B88  6E1A               	movwf	?_putsUSART,c
 19446  004B8A  EC50  F011         	call	_putsUSART	;wreg free
 19447                           
 19448                           ;main.c: 1651: putsUSART((char *) ",size=");
 19449  004B8E  0E7C               	movlw	high STR_142
 19450  004B90  6E1B               	movwf	?_putsUSART+1,c
 19451  004B92  0E3A               	movlw	low STR_142
 19452  004B94  6E1A               	movwf	?_putsUSART,c
 19453  004B96  EC50  F011         	call	_putsUSART	;wreg free
 19454                           
 19455                           ;main.c: 1652: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpSize );
 19456  004B9A  0100               	movlb	0	; () banked
 19457  004B9C  67D3               	tstfsz	_bHex& (0+255),b
 19458  004B9E  D004               	goto	l13685
 19459                           
 19460                           ; BSR set to: 0
 19461  004BA0  0E7C               	movlw	high STR_53
 19462  004BA2  6F8C               	movwf	(_receivePrintEventVerbose$1246+1)& (0+255),b
 19463  004BA4  0EED               	movlw	low STR_53
 19464  004BA6  D003               	goto	L30
 19465  004BA8                     l13685:
 19466                           
 19467                           ; BSR set to: 0
 19468  004BA8  0E7C               	movlw	high STR_52
 19469  004BAA  6F8C               	movwf	(_receivePrintEventVerbose$1246+1)& (0+255),b
 19470  004BAC  0E64               	movlw	low STR_52
 19471  004BAE                     L30:
 19472  004BAE  6F8B               	movwf	_receivePrintEventVerbose$1246& (0+255),b
 19473                           
 19474                           ; BSR set to: 0
 19475  004BB0  0E01               	movlw	high _wrkbuf
 19476  004BB2  0100               	movlb	0	; () banked
 19477  004BB4  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19478  004BB6  0E74               	movlw	low _wrkbuf
 19479  004BB8  6F60               	movwf	?_sprintf& (0+255),b
 19480  004BBA  C08B  F062         	movff	_receivePrintEventVerbose$1246,?_sprintf+2
 19481  004BBE  C08C  F063         	movff	_receivePrintEventVerbose$1246+1,?_sprintf+3
 19482  004BC2  C0DE  F064         	movff	_vscpSize,?_sprintf+4
 19483  004BC6  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19484  004BC8  EC65  F029         	call	_sprintf	;wreg free
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;main.c: 1653: putsUSART(wrkbuf);
 19488  004BCC  0101               	movlb	1	; () banked
 19489  004BCE  0E01               	movlw	high _wrkbuf
 19490  004BD0  6E1B               	movwf	?_putsUSART+1,c
 19491  004BD2  0E74               	movlw	low _wrkbuf
 19492  004BD4  6E1A               	movwf	?_putsUSART,c
 19493  004BD6  EC50  F011         	call	_putsUSART	;wreg free
 19494                           
 19495                           ;main.c: 1654: if (vscpSize > 0) {
 19496  004BDA  0100               	movlb	0	; () banked
 19497  004BDC  51DE               	movf	_vscpSize& (0+255),w,b
 19498  004BDE  E04B               	bz	l13713
 19499                           
 19500                           ; BSR set to: 0
 19501                           ;main.c: 1655: putsUSART((char *) ",Data=");
 19502  004BE0  0E7C               	movlw	high STR_145
 19503  004BE2  6E1B               	movwf	?_putsUSART+1,c
 19504  004BE4  0E2C               	movlw	low STR_145
 19505  004BE6  6E1A               	movwf	?_putsUSART,c
 19506  004BE8  EC50  F011         	call	_putsUSART	;wreg free
 19507                           
 19508                           ;main.c: 1656: for (i = 0; i < vscpSize; i++) {
 19509  004BEC  0100               	movlb	0	; () banked
 19510  004BEE  6B8F               	clrf	receivePrintEventVerbose@i& (0+255),b
 19511  004BF0  D03E               	goto	l13711
 19512  004BF2                     l864:
 19513                           
 19514                           ; BSR set to: 0
 19515                           ;main.c: 1658: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i] );
 19516  004BF2  67D3               	tstfsz	_bHex& (0+255),b
 19517  004BF4  D004               	goto	l13699
 19518                           
 19519                           ; BSR set to: 0
 19520  004BF6  0E7C               	movlw	high STR_53
 19521  004BF8  6F8E               	movwf	(_receivePrintEventVerbose$1251+1)& (0+255),b
 19522  004BFA  0EED               	movlw	low STR_53
 19523  004BFC  D003               	goto	L31
 19524  004BFE                     l13699:
 19525                           
 19526                           ; BSR set to: 0
 19527  004BFE  0E7C               	movlw	high STR_52
 19528  004C00  6F8E               	movwf	(_receivePrintEventVerbose$1251+1)& (0+255),b
 19529  004C02  0E64               	movlw	low STR_52
 19530  004C04                     L31:
 19531  004C04  6F8D               	movwf	_receivePrintEventVerbose$1251& (0+255),b
 19532                           
 19533                           ; BSR set to: 0
 19534  004C06  0E01               	movlw	high _wrkbuf
 19535  004C08  0100               	movlb	0	; () banked
 19536  004C0A  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19537  004C0C  0E74               	movlw	low _wrkbuf
 19538  004C0E  6F60               	movwf	?_sprintf& (0+255),b
 19539  004C10  C08D  F062         	movff	_receivePrintEventVerbose$1251,?_sprintf+2
 19540  004C14  C08E  F063         	movff	_receivePrintEventVerbose$1251+1,?_sprintf+3
 19541  004C18  518F               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19542  004C1A  0F40               	addlw	low _vscpData
 19543  004C1C  6ED9               	movwf	fsr2l,c
 19544  004C1E  6ADA               	clrf	fsr2h,c
 19545  004C20  50DF               	movf	indf2,w,c
 19546  004C22  6F64               	movwf	(?_sprintf+4)& (0+255),b
 19547  004C24  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19548  004C26  EC65  F029         	call	_sprintf	;wreg free
 19549                           
 19550                           ; BSR set to: 0
 19551                           ;main.c: 1659: putsUSART(wrkbuf);
 19552  004C2A  0101               	movlb	1	; () banked
 19553  004C2C  0E01               	movlw	high _wrkbuf
 19554  004C2E  6E1B               	movwf	?_putsUSART+1,c
 19555  004C30  0E74               	movlw	low _wrkbuf
 19556  004C32  6E1A               	movwf	?_putsUSART,c
 19557  004C34  EC50  F011         	call	_putsUSART	;wreg free
 19558                           
 19559                           ;main.c: 1660: if (i < (vscpSize - 1)) {
 19560  004C38  0EFF               	movlw	255
 19561  004C3A  0100               	movlb	0	; () banked
 19562  004C3C  25DE               	addwf	_vscpSize& (0+255),w,b
 19563  004C3E  6F7E               	movwf	??_receivePrintEventVerbose& (0+255),b
 19564  004C40  6B7F               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 19565  004C42  0EFF               	movlw	255
 19566  004C44  237F               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 19567  004C46  518F               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19568  004C48  6F80               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 19569  004C4A  6B81               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 19570  004C4C  5181               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 19571  004C4E  0A80               	xorlw	128
 19572  004C50  6F82               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 19573  004C52  517E               	movf	??_receivePrintEventVerbose& (0+255),w,b
 19574  004C54  5D80               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 19575  004C56  517F               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 19576  004C58  0A80               	xorlw	128
 19577  004C5A  5982               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 19578  004C5C  E206               	bc	l13709
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;main.c: 1661: putsUSART((char *) ",");
 19582  004C5E  0E7C               	movlw	high STR_29
 19583  004C60  6E1B               	movwf	?_putsUSART+1,c
 19584  004C62  0EF4               	movlw	low STR_29
 19585  004C64  6E1A               	movwf	?_putsUSART,c
 19586  004C66  EC50  F011         	call	_putsUSART	;wreg free
 19587  004C6A                     l13709:
 19588  004C6A  0100               	movlb	0	; () banked
 19589  004C6C  2B8F               	incf	receivePrintEventVerbose@i& (0+255),f,b
 19590  004C6E                     l13711:
 19591                           
 19592                           ; BSR set to: 0
 19593  004C6E  51DE               	movf	_vscpSize& (0+255),w,b
 19594  004C70  5D8F               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 19595  004C72  E207               	bc	l871
 19596  004C74  D7BE               	goto	l864
 19597  004C76                     l13713:
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;main.c: 1665: else {
 19601                           ;main.c: 1666: putsUSART((char *) ",Data=none");
 19602  004C76  0E7B               	movlw	high STR_149
 19603  004C78  6E1B               	movwf	?_putsUSART+1,c
 19604  004C7A  0E91               	movlw	low STR_149
 19605  004C7C  6E1A               	movwf	?_putsUSART,c
 19606  004C7E  EC50  F011         	call	_putsUSART	;wreg free
 19607  004C82                     l871:
 19608                           
 19609                           ;main.c: 1667: }
 19610                           ;main.c: 1668: putsUSART((char *) ">\r\n");
 19611  004C82  0E7C               	movlw	high STR_150
 19612  004C84  6E1B               	movwf	?_putsUSART+1,c
 19613  004C86  0ED4               	movlw	low STR_150
 19614  004C88  6E1A               	movwf	?_putsUSART,c
 19615  004C8A  EC50  F011         	call	_putsUSART	;wreg free
 19616                           
 19617                           ;main.c: 1669: return 1;
 19618  004C8E  0E01               	movlw	1
 19619  004C90  D001               	goto	l872
 19620  004C92                     l13719:
 19621                           
 19622                           ;main.c: 1670: }
 19623                           ;main.c: 1672: return 0;
 19624  004C92  0E00               	movlw	0
 19625  004C94                     l872:
 19626  004C94  0012               	return	
 19627  004C96                     __end_of_receivePrintEventVerbose:
 19628                           	opt stack 0
 19629                           tblptru	equ	0xFF8
 19630                           tblptrh	equ	0xFF7
 19631                           tblptrl	equ	0xFF6
 19632                           tablat	equ	0xFF5
 19633                           prodh	equ	0xFF4
 19634                           prodl	equ	0xFF3
 19635                           intcon	equ	0xFF2
 19636                           indf0	equ	0xFEF
 19637                           postinc0	equ	0xFEE
 19638                           fsr0h	equ	0xFEA
 19639                           fsr0l	equ	0xFE9
 19640                           wreg	equ	0xFE8
 19641                           indf1	equ	0xFE7
 19642                           postinc1	equ	0xFE6
 19643                           postdec1	equ	0xFE5
 19644                           fsr1h	equ	0xFE2
 19645                           fsr1l	equ	0xFE1
 19646                           indf2	equ	0xFDF
 19647                           postinc2	equ	0xFDE
 19648                           postdec2	equ	0xFDD
 19649                           plusw2	equ	0xFDB
 19650                           fsr2h	equ	0xFDA
 19651                           fsr2l	equ	0xFD9
 19652                           status	equ	0xFD8
 19653                           
 19654 ;; *************** function _getVSCPFrame *****************
 19655 ;; Defined at:
 19656 ;;		line 2683 in file "main.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;  pvscpclass      1    wreg     PTR unsigned short 
 19659 ;;		 -> vscpClass(2), 
 19660 ;;  pvscptype       1    2[BANK0 ] PTR unsigned char 
 19661 ;;		 -> vscpType(1), 
 19662 ;;  pNodeId         1    3[BANK0 ] PTR unsigned char 
 19663 ;;		 -> vscpNodeId(1), 
 19664 ;;  pPriority       1    4[BANK0 ] PTR unsigned char 
 19665 ;;		 -> vscpPriority(1), 
 19666 ;;  pSize           1    5[BANK0 ] PTR unsigned char 
 19667 ;;		 -> vscpSize(1), 
 19668 ;;  pData           1    6[BANK0 ] PTR unsigned char 
 19669 ;;		 -> vscpData(8), 
 19670 ;; Auto vars:     Size  Location     Type
 19671 ;;  pvscpclass      1   11[BANK0 ] PTR unsigned short 
 19672 ;;		 -> vscpClass(2), 
 19673 ;;  id              4   12[BANK0 ] unsigned long 
 19674 ;; Return value:  Size  Location     Type
 19675 ;;                  1    wreg      unsigned char 
 19676 ;; Registers used:
 19677 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19678 ;; Tracked objects:
 19679 ;;		On entry : F/0
 19680 ;;		On exit  : 0/0
 19681 ;;		Unchanged: 0/0
 19682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19683 ;;      Params:         0       5       0       0       0       0       0
 19684 ;;      Locals:         0       5       0       0       0       0       0
 19685 ;;      Temps:          0       4       0       0       0       0       0
 19686 ;;      Totals:         0      14       0       0       0       0       0
 19687 ;;Total ram usage:       14 bytes
 19688 ;; Hardware stack levels used:    1
 19689 ;; Hardware stack levels required when called:    5
 19690 ;; This function calls:
 19691 ;;		_getCANFrame
 19692 ;; This function is called by:
 19693 ;;		_receivePrintEventVerbose
 19694 ;;		_readRegister
 19695 ;;		_readRegisterExtended
 19696 ;;		_writeRegisterExtended
 19697 ;; This function uses a non-reentrant model
 19698 ;;
 19699                           
 19700                           	psect	text50
 19701  002850                     __ptext50:
 19702                           	opt stack 0
 19703  002850                     _getVSCPFrame:
 19704                           	opt stack 21
 19705                           
 19706                           ;incstack = 0
 19707                           ;incstack = 0
 19708                           ;getVSCPFrame@pvscpclass stored from wreg
 19709  002850  CFE8 F06B          	movff	wreg,getVSCPFrame@pvscpclass
 19710                           
 19711                           ; BSR set to: 0
 19712                           ;main.c: 2684: uint32_t id;
 19713                           ;main.c: 2686: if ( !getCANFrame( &id, pSize, pData ) ) {
 19714  002854  C065  F02C         	movff	getVSCPFrame@pSize,?_getCANFrame
 19715  002858  C066  F02D         	movff	getVSCPFrame@pData,?_getCANFrame+1
 19716  00285C  0E0F               	movlw	15
 19717  00285E  6E2E               	movwf	?_getCANFrame+2,c
 19718  002860  0E5F               	movlw	__accesstop+-1
 19719  002862  642D               	cpfsgt	?_getCANFrame+1,c
 19720  002864  6A2E               	clrf	?_getCANFrame+2,c
 19721  002866  0E6C               	movlw	getVSCPFrame@id& (0+255)
 19722  002868  EC1E  F00F         	call	_getCANFrame
 19723  00286C  0900               	iorlw	0
 19724  00286E  E102               	bnz	l14491
 19725                           
 19726                           ;main.c: 2687: return 0;
 19727  002870  0E00               	movlw	0
 19728  002872  D02F               	goto	l1156
 19729  002874                     l14491:
 19730                           
 19731                           ;main.c: 2688: }
 19732                           ;main.c: 2690: *pNodeId = id & 0x0ff;
 19733  002874  0100               	movlb	0	; () banked
 19734  002876  5163               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 19735  002878  6ED9               	movwf	fsr2l,c
 19736  00287A  6ADA               	clrf	fsr2h,c
 19737  00287C  C06C  FFDF         	movff	getVSCPFrame@id,indf2
 19738                           
 19739                           ;main.c: 2691: *pvscptype = (id >> 8) & 0xff;
 19740  002880  5162               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 19741  002882  6ED9               	movwf	fsr2l,c
 19742  002884  6ADA               	clrf	fsr2h,c
 19743  002886  C06D  FFDF         	movff	getVSCPFrame@id+1,indf2
 19744                           
 19745                           ; BSR set to: 0
 19746                           ;main.c: 2692: *pvscpclass = (id >> 16) & 0x1ff;
 19747  00288A  516E               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 19748  00288C  6F67               	movwf	??_getVSCPFrame& (0+255),b
 19749  00288E  0E01               	movlw	1
 19750  002890  156F               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 19751  002892  6F68               	movwf	(??_getVSCPFrame+1)& (0+255),b
 19752  002894  516B               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 19753  002896  6ED9               	movwf	fsr2l,c
 19754  002898  6ADA               	clrf	fsr2h,c
 19755  00289A  C067  FFDE         	movff	??_getVSCPFrame,postinc2
 19756  00289E  C068  FFDD         	movff	??_getVSCPFrame+1,postdec2
 19757                           
 19758                           ; BSR set to: 0
 19759                           ;main.c: 2693: *pPriority = (uint16_t) (0x07 & (id >> 26));
 19760  0028A2  5164               	movf	getVSCPFrame@pPriority& (0+255),w,b
 19761  0028A4  6ED9               	movwf	fsr2l,c
 19762  0028A6  6ADA               	clrf	fsr2h,c
 19763  0028A8  C06C  F067         	movff	getVSCPFrame@id,??_getVSCPFrame
 19764  0028AC  C06D  F068         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 19765  0028B0  C06E  F069         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 19766  0028B4  C06F  F06A         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 19767  0028B8  0E1B               	movlw	27
 19768  0028BA  D005               	goto	u19450
 19769  0028BC                     u19455:
 19770  0028BC  90D8               	bcf	status,0,c
 19771  0028BE  336A               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 19772  0028C0  3369               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 19773  0028C2  3368               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 19774  0028C4  3367               	rrcf	??_getVSCPFrame& (0+255),f,b
 19775  0028C6                     u19450:
 19776  0028C6  2EE8               	decfsz	wreg,f,c
 19777  0028C8  D7F9               	goto	u19455
 19778  0028CA  5167               	movf	??_getVSCPFrame& (0+255),w,b
 19779  0028CC  0B07               	andlw	7
 19780  0028CE  6EDF               	movwf	indf2,c
 19781                           
 19782                           ; BSR set to: 0
 19783                           ;main.c: 2695: return 1;
 19784  0028D0  0E01               	movlw	1
 19785  0028D2                     l1156:
 19786  0028D2  0012               	return	
 19787  0028D4                     __end_of_getVSCPFrame:
 19788                           	opt stack 0
 19789                           tblptru	equ	0xFF8
 19790                           tblptrh	equ	0xFF7
 19791                           tblptrl	equ	0xFF6
 19792                           tablat	equ	0xFF5
 19793                           prodh	equ	0xFF4
 19794                           prodl	equ	0xFF3
 19795                           intcon	equ	0xFF2
 19796                           indf0	equ	0xFEF
 19797                           postinc0	equ	0xFEE
 19798                           fsr0h	equ	0xFEA
 19799                           fsr0l	equ	0xFE9
 19800                           wreg	equ	0xFE8
 19801                           indf1	equ	0xFE7
 19802                           postinc1	equ	0xFE6
 19803                           postdec1	equ	0xFE5
 19804                           fsr1h	equ	0xFE2
 19805                           fsr1l	equ	0xFE1
 19806                           indf2	equ	0xFDF
 19807                           postinc2	equ	0xFDE
 19808                           postdec2	equ	0xFDD
 19809                           plusw2	equ	0xFDB
 19810                           fsr2h	equ	0xFDA
 19811                           fsr2l	equ	0xFD9
 19812                           status	equ	0xFD8
 19813                           
 19814 ;; *************** function _getCANFrame *****************
 19815 ;; Defined at:
 19816 ;;		line 2718 in file "main.c"
 19817 ;; Parameters:    Size  Location     Type
 19818 ;;  pid             1    wreg     PTR unsigned long 
 19819 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19820 ;;  pdlc            1   43[COMRAM] PTR unsigned char 
 19821 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19822 ;;  pdata           2   44[COMRAM] PTR unsigned char 
 19823 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19824 ;; Auto vars:     Size  Location     Type
 19825 ;;  pid             1    0[BANK0 ] PTR unsigned long 
 19826 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19827 ;;  flags           1    1[BANK0 ] enum E16358
 19828 ;; Return value:  Size  Location     Type
 19829 ;;                  1    wreg      unsigned char 
 19830 ;; Registers used:
 19831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19832 ;; Tracked objects:
 19833 ;;		On entry : F/0
 19834 ;;		On exit  : 0/0
 19835 ;;		Unchanged: 0/0
 19836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19837 ;;      Params:         3       0       0       0       0       0       0
 19838 ;;      Locals:         0       2       0       0       0       0       0
 19839 ;;      Temps:          0       0       0       0       0       0       0
 19840 ;;      Totals:         3       2       0       0       0       0       0
 19841 ;;Total ram usage:        5 bytes
 19842 ;; Hardware stack levels used:    1
 19843 ;; Hardware stack levels required when called:    4
 19844 ;; This function calls:
 19845 ;;		_ECANReceiveMessage
 19846 ;; This function is called by:
 19847 ;;		_receivePrintEventCANAL
 19848 ;;		_receivePrintEventSLCAN
 19849 ;;		_getVSCPFrame
 19850 ;; This function uses a non-reentrant model
 19851 ;;
 19852                           
 19853                           	psect	text51
 19854  001E3C                     __ptext51:
 19855                           	opt stack 0
 19856  001E3C                     _getCANFrame:
 19857                           	opt stack 23
 19858                           
 19859                           ;incstack = 0
 19860                           ;incstack = 0
 19861                           ;getCANFrame@pid stored from wreg
 19862  001E3C  CFE8 F060          	movff	wreg,getCANFrame@pid
 19863                           
 19864                           ; BSR set to: 0
 19865                           ;main.c: 2720: ECAN_RX_MSG_FLAGS flags;
 19866                           ;main.c: 2722: if ( ECANReceiveMessage((unsigned long *) pid,
 19867                           ;main.c: 2723: (BYTE*)pdata,
 19868                           ;main.c: 2724: (BYTE*) pdlc,
 19869                           ;main.c: 2725: &flags) ) {
 19870  001E40  C02D  F020         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 19871  001E44  C02E  F021         	movff	getCANFrame@pdata+1,?_ECANReceiveMessage+1
 19872  001E48  C02C  F022         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+2
 19873  001E4C  0E61               	movlw	low getCANFrame@flags
 19874  001E4E  6E23               	movwf	?_ECANReceiveMessage+3,c
 19875  001E50  5160               	movf	getCANFrame@pid& (0+255),w,b
 19876  001E52  EC0A  F024         	call	_ECANReceiveMessage
 19877  001E56  0900               	iorlw	0
 19878  001E58  E003               	bz	l14505
 19879                           
 19880                           ;main.c: 2728: if (flags & ECAN_RX_RTR_FRAME) return 0;
 19881  001E5A  0100               	movlb	0	; () banked
 19882  001E5C  AD61               	btfss	getCANFrame@flags& (0+255),6,b
 19883  001E5E  D002               	goto	l1164
 19884  001E60                     l14505:
 19885  001E60  0E00               	movlw	0
 19886  001E62  D003               	goto	l1165
 19887  001E64                     l1164:
 19888                           
 19889                           ; BSR set to: 0
 19890                           ;main.c: 2731: if ( !(flags & ECAN_RX_XTD_FRAME)) return 0;
 19891  001E64  AB61               	btfss	getCANFrame@flags& (0+255),5,b
 19892  001E66  D7FC               	goto	l14505
 19893                           
 19894                           ; BSR set to: 0
 19895                           ;main.c: 2733: return 1;
 19896  001E68  0E01               	movlw	1
 19897  001E6A                     l1165:
 19898  001E6A  0012               	return	
 19899  001E6C                     __end_of_getCANFrame:
 19900                           	opt stack 0
 19901                           tblptru	equ	0xFF8
 19902                           tblptrh	equ	0xFF7
 19903                           tblptrl	equ	0xFF6
 19904                           tablat	equ	0xFF5
 19905                           prodh	equ	0xFF4
 19906                           prodl	equ	0xFF3
 19907                           intcon	equ	0xFF2
 19908                           indf0	equ	0xFEF
 19909                           postinc0	equ	0xFEE
 19910                           fsr0h	equ	0xFEA
 19911                           fsr0l	equ	0xFE9
 19912                           wreg	equ	0xFE8
 19913                           indf1	equ	0xFE7
 19914                           postinc1	equ	0xFE6
 19915                           postdec1	equ	0xFE5
 19916                           fsr1h	equ	0xFE2
 19917                           fsr1l	equ	0xFE1
 19918                           indf2	equ	0xFDF
 19919                           postinc2	equ	0xFDE
 19920                           postdec2	equ	0xFDD
 19921                           plusw2	equ	0xFDB
 19922                           fsr2h	equ	0xFDA
 19923                           fsr2l	equ	0xFD9
 19924                           status	equ	0xFD8
 19925                           
 19926 ;; *************** function _ECANReceiveMessage *****************
 19927 ;; Defined at:
 19928 ;;		line 803 in file "ECAN.c"
 19929 ;; Parameters:    Size  Location     Type
 19930 ;;  id              1    wreg     PTR unsigned long 
 19931 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19932 ;;  data            2   31[COMRAM] PTR unsigned char 
 19933 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19934 ;;  dataLen         1   33[COMRAM] PTR unsigned char 
 19935 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19936 ;;  msgFlags        1   34[COMRAM] PTR enum E16333
 19937 ;;		 -> getCANFrame@flags(1), 
 19938 ;; Auto vars:     Size  Location     Type
 19939 ;;  id              1   35[COMRAM] PTR unsigned long 
 19940 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19941 ;;  ptr             2   41[COMRAM] PTR unsigned char 
 19942 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19943 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19944 ;;  savedPtr        2   36[COMRAM] PTR unsigned char 
 19945 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19946 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19947 ;;  temp            1   40[COMRAM] struct .
 19948 ;;  mode            1   39[COMRAM] unsigned char 
 19949 ;;  i               1   38[COMRAM] unsigned char 
 19950 ;; Return value:  Size  Location     Type
 19951 ;;                  1    wreg      enum E15660
 19952 ;; Registers used:
 19953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19954 ;; Tracked objects:
 19955 ;;		On entry : F/0
 19956 ;;		On exit  : 0/0
 19957 ;;		Unchanged: 0/0
 19958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19959 ;;      Params:         4       0       0       0       0       0       0
 19960 ;;      Locals:         8       0       0       0       0       0       0
 19961 ;;      Temps:          0       0       0       0       0       0       0
 19962 ;;      Totals:        12       0       0       0       0       0       0
 19963 ;;Total ram usage:       12 bytes
 19964 ;; Hardware stack levels used:    1
 19965 ;; Hardware stack levels required when called:    3
 19966 ;; This function calls:
 19967 ;;		__ECANPointBuffer
 19968 ;;		__RegsToCANID
 19969 ;; This function is called by:
 19970 ;;		_getCANFrame
 19971 ;; This function uses a non-reentrant model
 19972 ;;
 19973                           
 19974                           	psect	text52
 19975  004814                     __ptext52:
 19976                           	opt stack 0
 19977  004814                     _ECANReceiveMessage:
 19978                           	opt stack 23
 19979                           
 19980                           ;incstack = 0
 19981                           ;incstack = 0
 19982                           ;ECANReceiveMessage@id stored from wreg
 19983  004814  CFE8 F024          	movff	wreg,ECANReceiveMessage@id
 19984                           
 19985                           ; BSR set to: 0
 19986                           ;ECAN.c: 805: BYTE mode;
 19987                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 19988                           ;ECAN.c: 809: char i;
 19989                           ;ECAN.c: 810: BYTE_VAL temp;
 19990                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 19991  004818  6A35               	clrf	__ECANRxFilterHitInfo,c
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 19995  00481A  5077               	movf	3959,w,c	;volatile
 19996  00481C  0BC0               	andlw	192
 19997  00481E  6E28               	movwf	ECANReceiveMessage@mode,c
 19998                           
 19999                           ; BSR set to: 0
 20000                           ;ECAN.c: 816: if ( mode == 0x00 )
 20001  004820  6628               	tstfsz	ECANReceiveMessage@mode,c
 20002  004822  D032               	goto	l14677
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;ECAN.c: 822: {
 20006                           ;ECAN.c: 824: if ( RXB0FUL )
 20007  004824  AE60               	btfss	3936,7,c	;volatile
 20008  004826  D012               	goto	l1339
 20009                           
 20010                           ; BSR set to: 0
 20011                           ;ECAN.c: 825: {
 20012                           ;ECAN.c: 827: RXB0IF = 0;
 20013  004828  90A4               	bcf	4004,0,c	;volatile
 20014                           
 20015                           ;ECAN.c: 830: if ( RXB0OVFL )
 20016  00482A  AE74               	btfss	3956,7,c	;volatile
 20017  00482C  D006               	goto	l14653
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;ECAN.c: 831: {
 20021                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 20022  00482E  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20023  004830  6ED9               	movwf	fsr2l,c
 20024  004832  6ADA               	clrf	fsr2h,c
 20025  004834  0E00               	movlw	0
 20026  004836  86DB               	bsf	plusw2,3,c
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;ECAN.c: 833: RXB0OVFL = 0;
 20030  004838  9E74               	bcf	3956,7,c	;volatile
 20031  00483A                     l14653:
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;ECAN.c: 834: }
 20035                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 20036  00483A  A060               	btfss	3936,0,c	;volatile
 20037  00483C  D002               	bra	u19705
 20038  00483E  8035               	bsf	__ECANRxFilterHitInfo,0,c
 20039  004840  D001               	bra	u19707
 20040  004842                     u19705:
 20041  004842  9035               	bcf	__ECANRxFilterHitInfo,0,c
 20042  004844                     u19707:
 20043                           
 20044                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 20045  004844  0E0F               	movlw	15	;volatile
 20046  004846  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20047  004848  0E60               	movlw	96	;volatile
 20048  00484A  D01A               	goto	L32
 20049  00484C                     l1339:
 20050                           
 20051                           ; BSR set to: 0
 20052                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 20053  00484C  010F               	movlb	15	; () banked
 20054  00484E  AF50               	btfss	80,7,b	;volatile
 20055  004850  D019               	goto	l14671
 20056                           
 20057                           ; BSR set to: 15
 20058                           ;ECAN.c: 842: {
 20059                           ;ECAN.c: 844: RXB1IF = 0;
 20060  004852  92A4               	bcf	4004,1,c	;volatile
 20061                           
 20062                           ;ECAN.c: 847: if ( RXB1OVFL )
 20063  004854  AC74               	btfss	3956,6,c	;volatile
 20064  004856  D006               	goto	l14663
 20065                           
 20066                           ; BSR set to: 15
 20067                           ;ECAN.c: 848: {
 20068                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 20069  004858  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20070  00485A  6ED9               	movwf	fsr2l,c
 20071  00485C  6ADA               	clrf	fsr2h,c
 20072  00485E  0E00               	movlw	0
 20073  004860  86DB               	bsf	plusw2,3,c
 20074                           
 20075                           ; BSR set to: 15
 20076                           ;ECAN.c: 850: RXB1OVFL = 0;
 20077  004862  9C74               	bcf	3956,6,c	;volatile
 20078  004864                     l14663:
 20079                           
 20080                           ; BSR set to: 15
 20081                           ;ECAN.c: 851: }
 20082                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 20083  004864  5150               	movf	80,w,b	;volatile
 20084  004866  0B07               	andlw	7
 20085  004868  6E35               	movwf	__ECANRxFilterHitInfo,c
 20086                           
 20087                           ; BSR set to: 15
 20088                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 20089  00486A  0E02               	movlw	2
 20090  00486C  6035               	cpfslt	__ECANRxFilterHitInfo,c
 20091  00486E  D005               	goto	l14669
 20092                           
 20093                           ; BSR set to: 15
 20094                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 20095  004870  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20096  004872  6ED9               	movwf	fsr2l,c
 20097  004874  6ADA               	clrf	fsr2h,c
 20098  004876  0E00               	movlw	0
 20099  004878  8EDB               	bsf	plusw2,7,c
 20100  00487A                     l14669:
 20101                           
 20102                           ; BSR set to: 15
 20103                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 20104  00487A  0E0F               	movlw	15	;volatile
 20105  00487C  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20106  00487E  0E50               	movlw	80	;volatile
 20107  004880                     L32:
 20108  004880  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20109                           
 20110                           ;ECAN.c: 860: }
 20111  004882  D065               	goto	l14731
 20112  004884                     l14671:
 20113                           
 20114                           ;ECAN.c: 861: else
 20115                           ;ECAN.c: 862: return FALSE;
 20116  004884  0E00               	movlw	0
 20117  004886  D0C4               	goto	l1346
 20118  004888                     l14677:
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;ECAN.c: 869: else if ( mode == 0x40 )
 20122  004888  5028               	movf	ECANReceiveMessage@mode,w,c
 20123  00488A  0A40               	xorlw	64
 20124  00488C  E146               	bnz	l1349
 20125                           
 20126                           ; BSR set to: 0
 20127                           ;ECAN.c: 875: {
 20128                           ;ECAN.c: 876: if ( RXB0FUL )
 20129  00488E  AE60               	btfss	3936,7,c	;volatile
 20130  004890  D004               	goto	l1350
 20131                           
 20132                           ; BSR set to: 0
 20133                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 20134  004892  0E0F               	movlw	15	;volatile
 20135  004894  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20136  004896  0E60               	movlw	96	;volatile
 20137  004898  D03E               	goto	L39
 20138  00489A                     l1350:
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 20142  00489A  010F               	movlb	15	; () banked
 20143  00489C  AF50               	btfss	80,7,b	;volatile
 20144  00489E  D004               	goto	l1352
 20145                           
 20146                           ; BSR set to: 15
 20147                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 20148  0048A0  0E0F               	movlw	15	;volatile
 20149  0048A2  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20150  0048A4  0E50               	movlw	80	;volatile
 20151  0048A6  D037               	goto	L39
 20152  0048A8                     l1352:
 20153                           
 20154                           ; BSR set to: 15
 20155                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 20156  0048A8  010D               	movlb	13
 20157  0048AA  B5F8               	btfsc	248,2,b	;volatile
 20158  0048AC  D007               	goto	l1354
 20159  0048AE  010E               	movlb	14
 20160  0048B0  AF20               	btfss	32,7,b	;volatile
 20161  0048B2  D004               	goto	l1354
 20162                           
 20163                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 20164  0048B4  0E0E               	movlw	14	;volatile
 20165  0048B6  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20166  0048B8  0E20               	movlw	32	;volatile
 20167  0048BA  D02D               	goto	L39
 20168  0048BC                     l1354:
 20169                           
 20170                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 20171  0048BC  010D               	movlb	13
 20172  0048BE  B7F8               	btfsc	248,3,b	;volatile
 20173  0048C0  D007               	goto	l1356
 20174  0048C2  010E               	movlb	14
 20175  0048C4  AF30               	btfss	48,7,b	;volatile
 20176  0048C6  D004               	goto	l1356
 20177                           
 20178                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 20179  0048C8  0E0E               	movlw	14	;volatile
 20180  0048CA  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20181  0048CC  0E30               	movlw	48	;volatile
 20182  0048CE  D023               	goto	L39
 20183  0048D0                     l1356:
 20184                           
 20185                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 20186  0048D0  010D               	movlb	13
 20187  0048D2  B9F8               	btfsc	248,4,b	;volatile
 20188  0048D4  D007               	goto	l1358
 20189  0048D6  010E               	movlb	14
 20190  0048D8  AF40               	btfss	64,7,b	;volatile
 20191  0048DA  D004               	goto	l1358
 20192                           
 20193                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 20194  0048DC  0E0E               	movlw	14	;volatile
 20195  0048DE  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20196  0048E0  0E40               	movlw	64	;volatile
 20197  0048E2  D019               	goto	L39
 20198  0048E4                     l1358:
 20199                           
 20200                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 20201  0048E4  010D               	movlb	13
 20202  0048E6  BBF8               	btfsc	248,5,b	;volatile
 20203  0048E8  D005               	goto	l1360
 20204  0048EA  010E               	movlb	14
 20205  0048EC  AF50               	btfss	80,7,b	;volatile
 20206  0048EE  D002               	goto	l1360
 20207                           
 20208                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 20209  0048F0  0E0E               	movlw	14	;volatile
 20210  0048F2  D7D7               	goto	L40
 20211  0048F4                     l1360:
 20212                           
 20213                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 20214  0048F4  010D               	movlb	13
 20215  0048F6  BDF8               	btfsc	248,6,b	;volatile
 20216  0048F8  D005               	goto	l1362
 20217  0048FA  010E               	movlb	14
 20218  0048FC  AF60               	btfss	96,7,b	;volatile
 20219  0048FE  D002               	goto	l1362
 20220                           
 20221                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 20222  004900  0E0E               	movlw	14	;volatile
 20223  004902  D7C8               	goto	L41
 20224  004904                     l1362:
 20225                           
 20226                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 20227  004904  010D               	movlb	13
 20228  004906  BFF8               	btfsc	248,7,b	;volatile
 20229  004908  D7BD               	goto	l14671
 20230  00490A  010E               	movlb	14
 20231  00490C  AF70               	btfss	112,7,b	;volatile
 20232  00490E  D7BA               	goto	l14671
 20233                           
 20234                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 20235  004910  0E0E               	movlw	14	;volatile
 20236  004912  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20237  004914  0E70               	movlw	112	;volatile
 20238  004916                     L39:
 20239  004916  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20240  004918  D00A               	goto	l14721
 20241  00491A                     l1349:
 20242                           
 20243                           ; BSR set to: 0
 20244                           ;ECAN.c: 910: else
 20245                           ;ECAN.c: 915: {
 20246                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 20247  00491A  AE74               	btfss	3956,7,c	;volatile
 20248  00491C  D7B3               	goto	l14671
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;ECAN.c: 917: {
 20252                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 20253  00491E  506F               	movf	3951,w,c	;volatile
 20254  004920  0B07               	andlw	7
 20255  004922  EC70  F013         	call	__ECANPointBuffer
 20256  004926  C019  F02A         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 20257  00492A  C01A  F02B         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 20258  00492E                     l14721:
 20259                           
 20260                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 20261  00492E  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20262  004932  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20263  004936  50DF               	movf	indf2,w,c
 20264  004938  0B1F               	andlw	31
 20265  00493A  6E35               	movwf	__ECANRxFilterHitInfo,c
 20266                           
 20267                           ;ECAN.c: 932: RXB1IF = 0;
 20268  00493C  92A4               	bcf	4004,1,c	;volatile
 20269                           
 20270                           ;ECAN.c: 934: if ( RXB1OVFL )
 20271  00493E  AC74               	btfss	3956,6,c	;volatile
 20272  004940  D006               	goto	l14731
 20273                           
 20274                           ;ECAN.c: 935: {
 20275                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 20276  004942  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20277  004944  6ED9               	movwf	fsr2l,c
 20278  004946  6ADA               	clrf	fsr2h,c
 20279  004948  0E00               	movlw	0
 20280  00494A  86DB               	bsf	plusw2,3,c
 20281                           
 20282                           ;ECAN.c: 937: RXB1OVFL = 0;
 20283  00494C  9C74               	bcf	3956,6,c	;volatile
 20284  00494E                     l14731:
 20285                           
 20286                           ;ECAN.c: 942: savedPtr = ptr;
 20287  00494E  C02A  F025         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 20288  004952  C02B  F026         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 20289                           
 20290                           ;ECAN.c: 943: *msgFlags = 0;
 20291  004956  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20292  004958  6ED9               	movwf	fsr2l,c
 20293  00495A  6ADA               	clrf	fsr2h,c
 20294  00495C  6ADF               	clrf	indf2,c
 20295                           
 20296                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 20297  00495E  EE20 F005          	lfsr	2,5
 20298  004962  D857               	call	PL88	;call to abstracted procedure
 20299                           
 20300                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 20301  004964  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20302  004966  6ED9               	movwf	fsr2l,c
 20303  004968  6ADA               	clrf	fsr2h,c
 20304  00496A  5029               	movf	ECANReceiveMessage@temp,w,c
 20305  00496C  0B0F               	andlw	15
 20306  00496E  6EDF               	movwf	indf2,c
 20307                           
 20308                           ;ECAN.c: 950: if ( temp.bits.b6 )
 20309  004970  AC29               	btfss	ECANReceiveMessage@temp,6,c
 20310  004972  D005               	goto	l1370
 20311                           
 20312                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 20313  004974  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20314  004976  6ED9               	movwf	fsr2l,c
 20315  004978  6ADA               	clrf	fsr2h,c
 20316  00497A  0E00               	movlw	0
 20317  00497C  8CDB               	bsf	plusw2,6,c
 20318  00497E                     l1370:
 20319                           
 20320                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 20321  00497E  EE20 F002          	lfsr	2,2
 20322  004982  D847               	call	PL88	;call to abstracted procedure
 20323                           
 20324                           ;ECAN.c: 955: if ( temp.bits.b3 )
 20325  004984  A629               	btfss	ECANReceiveMessage@temp,3,c
 20326  004986  D008               	goto	l1371
 20327                           
 20328                           ;ECAN.c: 956: {
 20329                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 20330  004988  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20331  00498A  6ED9               	movwf	fsr2l,c
 20332  00498C  6ADA               	clrf	fsr2h,c
 20333  00498E  0E00               	movlw	0
 20334  004990  8ADB               	bsf	plusw2,5,c
 20335                           
 20336                           ;ECAN.c: 958: temp.Val = 1;
 20337  004992  0E01               	movlw	1
 20338  004994  6E29               	movwf	ECANReceiveMessage@temp,c
 20339                           
 20340                           ;ECAN.c: 959: }
 20341  004996  D001               	goto	l14749
 20342  004998                     l1371:
 20343                           
 20344                           ;ECAN.c: 960: else
 20345                           ;ECAN.c: 961: temp.Val = 0;
 20346  004998  6A29               	clrf	ECANReceiveMessage@temp,c
 20347  00499A                     l14749:
 20348                           
 20349                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 20350  00499A  282A               	incf	ECANReceiveMessage@ptr,w,c
 20351  00499C  6E19               	movwf	?__RegsToCANID,c
 20352  00499E  0E00               	movlw	0
 20353  0049A0  202B               	addwfc	ECANReceiveMessage@ptr+1,w,c
 20354  0049A2  6E1A               	movwf	?__RegsToCANID+1,c
 20355  0049A4  C024  F01B         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 20356  0049A8  C029  F01C         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 20357  0049AC  ECFC  F01C         	call	__RegsToCANID	;wreg free
 20358                           
 20359                           ;ECAN.c: 966: ptr += 6;
 20360  0049B0  0E06               	movlw	6
 20361  0049B2  262A               	addwf	ECANReceiveMessage@ptr,f,c
 20362  0049B4  0E00               	movlw	0
 20363  0049B6  222B               	addwfc	ECANReceiveMessage@ptr+1,f,c
 20364                           
 20365                           ;ECAN.c: 967: temp.Val = *dataLen;
 20366  0049B8  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20367  0049BA  6ED9               	movwf	fsr2l,c
 20368  0049BC  6ADA               	clrf	fsr2h,c
 20369  0049BE  50DF               	movf	indf2,w,c
 20370  0049C0  6E29               	movwf	ECANReceiveMessage@temp,c
 20371                           
 20372                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 20373  0049C2  6A27               	clrf	ECANReceiveMessage@i,c
 20374  0049C4  D00F               	goto	l14765
 20375  0049C6                     l14757:
 20376                           
 20377                           ;ECAN.c: 969: *data++ = *ptr++;
 20378  0049C6  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20379  0049CA  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20380  0049CE  C020  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 20381  0049D2  C021  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 20382  0049D6  CFDF FFE7          	movff	indf2,indf1
 20383  0049DA  4A2A               	infsnz	ECANReceiveMessage@ptr,f,c
 20384  0049DC  2A2B               	incf	ECANReceiveMessage@ptr+1,f,c
 20385  0049DE  4A20               	infsnz	ECANReceiveMessage@data,f,c
 20386  0049E0  2A21               	incf	ECANReceiveMessage@data+1,f,c
 20387  0049E2  2A27               	incf	ECANReceiveMessage@i,f,c
 20388  0049E4                     l14765:
 20389  0049E4  5029               	movf	ECANReceiveMessage@temp,w,c
 20390  0049E6  5C27               	subwf	ECANReceiveMessage@i,w,c
 20391  0049E8  E3EE               	bnc	l14757
 20392                           
 20393                           ;ECAN.c: 972: if ( IRXIF )
 20394  0049EA  AEA4               	btfss	4004,7,c	;volatile
 20395  0049EC  D006               	goto	l14771
 20396                           
 20397                           ;ECAN.c: 973: {
 20398                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 20399  0049EE  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20400  0049F0  6ED9               	movwf	fsr2l,c
 20401  0049F2  6ADA               	clrf	fsr2h,c
 20402  0049F4  0E00               	movlw	0
 20403  0049F6  88DB               	bsf	plusw2,4,c
 20404                           
 20405                           ;ECAN.c: 975: IRXIF = 0;
 20406  0049F8  9EA4               	bcf	4004,7,c	;volatile
 20407  0049FA                     l14771:
 20408                           
 20409                           ;ECAN.c: 976: }
 20410                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 20411  0049FA  C025  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 20412  0049FE  C026  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 20413  004A02  0E7F               	movlw	127
 20414  004A04  16DF               	andwf	indf2,f,c
 20415                           
 20416                           ;ECAN.c: 983: if ( mode == 0x80 )
 20417  004A06  5028               	movf	ECANReceiveMessage@mode,w,c
 20418  004A08  0A80               	xorlw	128
 20419  004A0A  B4D8               	btfsc	status,2,c
 20420                           
 20421                           ;ECAN.c: 984: FIFOEMPTY = 0;
 20422  004A0C  9E74               	bcf	3956,7,c	;volatile
 20423                           
 20424                           ;ECAN.c: 990: return TRUE;
 20425  004A0E  0E01               	movlw	1
 20426  004A10                     l1346:
 20427  004A10  0012               	return	
 20428  004A12                     __end_of_ECANReceiveMessage:
 20429                           	opt stack 0
 20430  004A12                     PL88:
 20431                           	opt stack 23
 20432  004A12  502A               	movf	ECANReceiveMessage@ptr,w,c
 20433  004A14  26D9               	addwf	fsr2l,f,c
 20434  004A16  502B               	movf	ECANReceiveMessage@ptr+1,w,c
 20435  004A18  22DA               	addwfc	fsr2h,f,c
 20436  004A1A  50DF               	movf	indf2,w,c
 20437  004A1C  6E29               	movwf	ECANReceiveMessage@temp,c
 20438  004A1E  0012               	return	
 20439  004A20                     __end_ofPL88:
 20440                           	opt stack 0
 20441                           tblptru	equ	0xFF8
 20442                           tblptrh	equ	0xFF7
 20443                           tblptrl	equ	0xFF6
 20444                           tablat	equ	0xFF5
 20445                           prodh	equ	0xFF4
 20446                           prodl	equ	0xFF3
 20447                           intcon	equ	0xFF2
 20448                           indf0	equ	0xFEF
 20449                           postinc0	equ	0xFEE
 20450                           fsr0h	equ	0xFEA
 20451                           fsr0l	equ	0xFE9
 20452                           wreg	equ	0xFE8
 20453                           indf1	equ	0xFE7
 20454                           postinc1	equ	0xFE6
 20455                           postdec1	equ	0xFE5
 20456                           fsr1h	equ	0xFE2
 20457                           fsr1l	equ	0xFE1
 20458                           indf2	equ	0xFDF
 20459                           postinc2	equ	0xFDE
 20460                           postdec2	equ	0xFDD
 20461                           plusw2	equ	0xFDB
 20462                           fsr2h	equ	0xFDA
 20463                           fsr2l	equ	0xFD9
 20464                           status	equ	0xFD8
 20465                           
 20466 ;; *************** function __RegsToCANID *****************
 20467 ;; Defined at:
 20468 ;;		line 1156 in file "ECAN.c"
 20469 ;; Parameters:    Size  Location     Type
 20470 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 20471 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20472 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20473 ;;  val             1   26[COMRAM] PTR unsigned long 
 20474 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20475 ;;  type            1   27[COMRAM] unsigned char 
 20476 ;; Auto vars:     Size  Location     Type
 20477 ;;  Value           1   30[COMRAM] PTR struct _CAN_MESSAGE_
 20478 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20479 ;; Return value:  Size  Location     Type
 20480 ;;		None               void
 20481 ;; Registers used:
 20482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20483 ;; Tracked objects:
 20484 ;;		On entry : 0/0
 20485 ;;		On exit  : 0/0
 20486 ;;		Unchanged: 0/0
 20487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20488 ;;      Params:         4       0       0       0       0       0       0
 20489 ;;      Locals:         1       0       0       0       0       0       0
 20490 ;;      Temps:          2       0       0       0       0       0       0
 20491 ;;      Totals:         7       0       0       0       0       0       0
 20492 ;;Total ram usage:        7 bytes
 20493 ;; Hardware stack levels used:    1
 20494 ;; Hardware stack levels required when called:    2
 20495 ;; This function calls:
 20496 ;;		Nothing
 20497 ;; This function is called by:
 20498 ;;		_ECANReceiveMessage
 20499 ;; This function uses a non-reentrant model
 20500 ;;
 20501                           
 20502                           	psect	text53
 20503  0039F8                     __ptext53:
 20504                           	opt stack 0
 20505  0039F8                     __RegsToCANID:
 20506                           	opt stack 23
 20507                           
 20508                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 20509                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 20510                           
 20511                           ;incstack = 0
 20512                           ;incstack = 0
 20513  0039F8  C01B  F01F         	movff	__RegsToCANID@val,__RegsToCANID@Value
 20514                           
 20515                           ;ECAN.c: 1161: if ( type == 0 )
 20516  0039FC  661C               	tstfsz	__RegsToCANID@type,c
 20517  0039FE  D02B               	goto	l14815
 20518                           
 20519                           ;ECAN.c: 1162: {
 20520                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 20521  003A00  501F               	movf	__RegsToCANID@Value,w,c
 20522  003A02  6ED9               	movwf	fsr2l,c
 20523  003A04  D86C               	call	PL66	;call to abstracted procedure
 20524  003A06  361D               	rlcf	??__RegsToCANID,f,c
 20525  003A08  90D8               	bcf	status,0,c
 20526  003A0A  361D               	rlcf	??__RegsToCANID,f,c
 20527  003A0C  90D8               	bcf	status,0,c
 20528  003A0E  341D               	rlcf	??__RegsToCANID,w,c
 20529  003A10  6EDF               	movwf	indf2,c
 20530                           
 20531                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 20532  003A12  501F               	movf	__RegsToCANID@Value,w,c
 20533  003A14  6ED9               	movwf	fsr2l,c
 20534  003A16  6ADA               	clrf	fsr2h,c
 20535  003A18  2AD9               	incf	fsr2l,f,c
 20536  003A1A  6ADA               	clrf	fsr2h,c
 20537  003A1C  D873               	call	PL76	;call to abstracted procedure
 20538  003A1E                     u19975:
 20539  003A1E  90D8               	bcf	status,0,c
 20540  003A20  321D               	rrcf	??__RegsToCANID,f,c
 20541  003A22  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20542  003A24  D7FC               	goto	u19975
 20543  003A26  501D               	movf	??__RegsToCANID,w,c
 20544                           
 20545                           ;ECAN.c: 1166: ptr++;
 20546                           
 20547                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 20548  003A28  D863               	call	PL68	;call to abstracted procedure
 20549  003A2A  0E05               	movlw	5
 20550  003A2C  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20551  003A2E                     u19985:
 20552  003A2E  90D8               	bcf	status,0,c
 20553  003A30  321D               	rrcf	??__RegsToCANID,f,c
 20554  003A32  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20555  003A34  D7FC               	goto	u19985
 20556  003A36  501F               	movf	__RegsToCANID@Value,w,c
 20557  003A38  6ED9               	movwf	fsr2l,c
 20558  003A3A  6ADA               	clrf	fsr2h,c
 20559  003A3C  501D               	movf	??__RegsToCANID,w,c
 20560  003A3E  12DF               	iorwf	indf2,f,c
 20561                           
 20562                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 20563  003A40  D83D               	call	PL38	;call to abstracted procedure
 20564  003A42  6ADF               	clrf	indf2,c
 20565                           
 20566                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 20567  003A44  501F               	movf	__RegsToCANID@Value,w,c
 20568  003A46  6ED9               	movwf	fsr2l,c
 20569  003A48  6ADA               	clrf	fsr2h,c
 20570  003A4A  0E03               	movlw	3
 20571  003A4C  26D9               	addwf	fsr2l,f,c
 20572  003A4E  6ADA               	clrf	fsr2h,c
 20573  003A50  0E00               	movlw	0
 20574  003A52  6EDF               	movwf	indf2,c
 20575                           
 20576                           ;ECAN.c: 1170: }
 20577  003A54  D032               	goto	l1393
 20578  003A56                     l14815:
 20579                           
 20580                           ;ECAN.c: 1171: else
 20581                           ;ECAN.c: 1172: {
 20582                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 20583  003A56  D832               	call	PL38	;call to abstracted procedure
 20584  003A58  D855               	call	PL76	;call to abstracted procedure
 20585  003A5A                     u19995:
 20586  003A5A  90D8               	bcf	status,0,c
 20587  003A5C  361D               	rlcf	??__RegsToCANID,f,c
 20588  003A5E  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20589  003A60  D7FC               	goto	u19995
 20590  003A62  501D               	movf	??__RegsToCANID,w,c
 20591  003A64  6EDF               	movwf	indf2,c
 20592                           
 20593                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 20594  003A66  501F               	movf	__RegsToCANID@Value,w,c
 20595  003A68  6ED9               	movwf	fsr2l,c
 20596  003A6A  6ADA               	clrf	fsr2h,c
 20597  003A6C  0E03               	movlw	3
 20598  003A6E  26D9               	addwf	fsr2l,f,c
 20599  003A70  D836               	call	PL66	;call to abstracted procedure
 20600  003A72  321D               	rrcf	??__RegsToCANID,f,c
 20601  003A74  90D8               	bcf	status,0,c
 20602  003A76  321D               	rrcf	??__RegsToCANID,f,c
 20603  003A78  90D8               	bcf	status,0,c
 20604  003A7A  301D               	rrcf	??__RegsToCANID,w,c
 20605                           
 20606                           ;ECAN.c: 1176: ptr++;
 20607                           
 20608                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 20609  003A7C  D839               	call	PL68	;call to abstracted procedure
 20610  003A7E  0E03               	movlw	3
 20611  003A80  161D               	andwf	??__RegsToCANID,f,c
 20612  003A82  D81C               	call	PL38	;call to abstracted procedure
 20613  003A84  501D               	movf	??__RegsToCANID,w,c
 20614  003A86  12DF               	iorwf	indf2,f,c
 20615                           
 20616                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 20617  003A88  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20618  003A8C  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20619  003A90  50DF               	movf	indf2,w,c
 20620  003A92  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20621  003A94  90D8               	bcf	status,0,c
 20622  003A96  321D               	rrcf	??__RegsToCANID,f,c
 20623  003A98  90D8               	bcf	status,0,c
 20624  003A9A  321D               	rrcf	??__RegsToCANID,f,c
 20625  003A9C  90D8               	bcf	status,0,c
 20626  003A9E  321D               	rrcf	??__RegsToCANID,f,c
 20627  003AA0  0E1C               	movlw	28
 20628  003AA2  161D               	andwf	??__RegsToCANID,f,c
 20629  003AA4  D80B               	call	PL38	;call to abstracted procedure
 20630  003AA6  501D               	movf	??__RegsToCANID,w,c
 20631  003AA8  12DF               	iorwf	indf2,f,c
 20632                           
 20633                           ;ECAN.c: 1180: ptr++;
 20634                           
 20635                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 20636  003AAA  D80F               	call	PL62	;call to abstracted procedure
 20637  003AAC  2AE1               	incf	fsr1l,f,c
 20638  003AAE  6AE2               	clrf	fsr1h,c
 20639  003AB0  CFDF FFE7          	movff	indf2,indf1
 20640                           
 20641                           ;ECAN.c: 1182: ptr++;
 20642                           
 20643                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 20644  003AB4  D80A               	call	PL62	;call to abstracted procedure
 20645  003AB6  CFDF FFE7          	movff	indf2,indf1
 20646  003ABA                     l1393:
 20647  003ABA  0012               	return	
 20648  003ABC                     __end_of__RegsToCANID:
 20649                           	opt stack 0
 20650  003ABC                     PL38:
 20651                           	opt stack 23
 20652  003ABC  501F               	movf	__RegsToCANID@Value,w,c
 20653  003ABE  6ED9               	movwf	fsr2l,c
 20654  003AC0  6ADA               	clrf	fsr2h,c
 20655  003AC2  0E02               	movlw	2
 20656  003AC4  26D9               	addwf	fsr2l,f,c
 20657  003AC6  6ADA               	clrf	fsr2h,c
 20658  003AC8  0012               	return	
 20659  003ACA                     __end_ofPL38:
 20660                           	opt stack 0
 20661  003ACA                     PL62:
 20662                           	opt stack 23
 20663  003ACA  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20664  003ACC  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20665  003ACE  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20666  003AD2  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20667  003AD6  501F               	movf	__RegsToCANID@Value,w,c
 20668  003AD8  6EE1               	movwf	fsr1l,c
 20669  003ADA  6AE2               	clrf	fsr1h,c
 20670  003ADC  0012               	return	
 20671  003ADE                     __end_ofPL62:
 20672                           	opt stack 0
 20673  003ADE                     PL66:
 20674                           	opt stack 23
 20675  003ADE  6ADA               	clrf	fsr2h,c
 20676  003AE0  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20677  003AE4  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20678  003AE8  50E7               	movf	indf1,w,c
 20679  003AEA  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20680  003AEC  90D8               	bcf	status,0,c
 20681  003AEE  0012               	return	
 20682  003AF0                     __end_ofPL66:
 20683                           	opt stack 0
 20684  003AF0                     PL68:
 20685                           	opt stack 23
 20686  003AF0  6EDF               	movwf	indf2,c
 20687  003AF2  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20688  003AF4  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20689  003AF6  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20690  003AFA  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20691  003AFE  50DF               	movf	indf2,w,c
 20692  003B00  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20693  003B02  0012               	return	
 20694  003B04                     __end_ofPL68:
 20695                           	opt stack 0
 20696  003B04                     PL76:
 20697                           	opt stack 23
 20698  003B04  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20699  003B08  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20700  003B0C  50E7               	movf	indf1,w,c
 20701  003B0E  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20702  003B10  0E05               	movlw	5
 20703  003B12  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20704  003B14  0C05               	retlw	5
 20705  003B16                     __end_ofPL76:
 20706                           	opt stack 0
 20707                           tblptru	equ	0xFF8
 20708                           tblptrh	equ	0xFF7
 20709                           tblptrl	equ	0xFF6
 20710                           tablat	equ	0xFF5
 20711                           prodh	equ	0xFF4
 20712                           prodl	equ	0xFF3
 20713                           intcon	equ	0xFF2
 20714                           indf0	equ	0xFEF
 20715                           postinc0	equ	0xFEE
 20716                           fsr0h	equ	0xFEA
 20717                           fsr0l	equ	0xFE9
 20718                           wreg	equ	0xFE8
 20719                           indf1	equ	0xFE7
 20720                           postinc1	equ	0xFE6
 20721                           postdec1	equ	0xFE5
 20722                           fsr1h	equ	0xFE2
 20723                           fsr1l	equ	0xFE1
 20724                           indf2	equ	0xFDF
 20725                           postinc2	equ	0xFDE
 20726                           postdec2	equ	0xFDD
 20727                           plusw2	equ	0xFDB
 20728                           fsr2h	equ	0xFDA
 20729                           fsr2l	equ	0xFD9
 20730                           status	equ	0xFD8
 20731                           
 20732 ;; *************** function __ECANPointBuffer *****************
 20733 ;; Defined at:
 20734 ;;		line 1207 in file "ECAN.c"
 20735 ;; Parameters:    Size  Location     Type
 20736 ;;  b               1    wreg     unsigned char 
 20737 ;; Auto vars:     Size  Location     Type
 20738 ;;  b               1   27[COMRAM] unsigned char 
 20739 ;;  pt              2   28[COMRAM] PTR unsigned char 
 20740 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20741 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20742 ;; Return value:  Size  Location     Type
 20743 ;;                  2   24[COMRAM] PTR unsigned char 
 20744 ;; Registers used:
 20745 ;;		wreg, status,2, status,0
 20746 ;; Tracked objects:
 20747 ;;		On entry : F/0
 20748 ;;		On exit  : 0/0
 20749 ;;		Unchanged: 0/0
 20750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20751 ;;      Params:         3       0       0       0       0       0       0
 20752 ;;      Locals:         3       0       0       0       0       0       0
 20753 ;;      Temps:          0       0       0       0       0       0       0
 20754 ;;      Totals:         6       0       0       0       0       0       0
 20755 ;;Total ram usage:        6 bytes
 20756 ;; Hardware stack levels used:    1
 20757 ;; Hardware stack levels required when called:    2
 20758 ;; This function calls:
 20759 ;;		Nothing
 20760 ;; This function is called by:
 20761 ;;		_ECANReceiveMessage
 20762 ;; This function uses a non-reentrant model
 20763 ;;
 20764                           
 20765                           	psect	text54
 20766  0026E0                     __ptext54:
 20767                           	opt stack 0
 20768  0026E0                     __ECANPointBuffer:
 20769                           	opt stack 23
 20770                           
 20771                           ;incstack = 0
 20772                           ;incstack = 0
 20773                           ;__ECANPointBuffer@b stored from wreg
 20774  0026E0  CFE8 F01C          	movff	wreg,__ECANPointBuffer@b
 20775                           
 20776                           ; BSR set to: 0
 20777                           ;ECAN.c: 1208: BYTE* pt;
 20778                           ;ECAN.c: 1210: switch(b)
 20779  0026E4  D024               	goto	l14801
 20780  0026E6                     l14783:
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 20784  0026E6  0E0F               	movlw	15	;volatile
 20785  0026E8  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20786  0026EA  0E60               	movlw	96	;volatile
 20787  0026EC  D01E               	goto	L48
 20788  0026EE                     l14785:
 20789                           
 20790                           ; BSR set to: 0
 20791                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 20792  0026EE  010F               	movlb	15	; () banked
 20793  0026F0  0E0F               	movlw	15	;volatile
 20794  0026F2  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20795  0026F4  0E50               	movlw	80	;volatile
 20796  0026F6  D019               	goto	L48
 20797  0026F8                     l14787:
 20798                           
 20799                           ; BSR set to: 0
 20800                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 20801  0026F8  010E               	movlb	14	; () banked
 20802  0026FA  0E0E               	movlw	14	;volatile
 20803  0026FC  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20804  0026FE  0E20               	movlw	32	;volatile
 20805  002700  D014               	goto	L48
 20806  002702                     l14789:
 20807                           
 20808                           ; BSR set to: 0
 20809                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 20810  002702  010E               	movlb	14	; () banked
 20811  002704  0E0E               	movlw	14	;volatile
 20812  002706  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20813  002708  0E30               	movlw	48	;volatile
 20814  00270A  D00F               	goto	L48
 20815  00270C                     l14791:
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 20819  00270C  010E               	movlb	14	; () banked
 20820  00270E  0E0E               	movlw	14	;volatile
 20821  002710  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20822  002712  0E40               	movlw	64	;volatile
 20823  002714  D00A               	goto	L48
 20824  002716                     l14793:
 20825                           
 20826                           ; BSR set to: 0
 20827                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 20828  002716  010E               	movlb	14	; () banked
 20829  002718  0E0E               	movlw	14	;volatile
 20830  00271A  D7EB               	goto	L49
 20831  00271C                     l14795:
 20832                           
 20833                           ; BSR set to: 0
 20834                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 20835  00271C  010E               	movlb	14	; () banked
 20836  00271E  0E0E               	movlw	14	;volatile
 20837  002720  D7E3               	goto	L50
 20838  002722                     l14797:
 20839                           
 20840                           ; BSR set to: 0
 20841                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 20842  002722  010E               	movlb	14	; () banked
 20843  002724  0E0E               	movlw	14	;volatile
 20844  002726  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20845  002728  0E70               	movlw	112	;volatile
 20846  00272A                     L48:
 20847  00272A  6E1D               	movwf	__ECANPointBuffer@pt,c
 20848                           
 20849                           ;ECAN.c: 1235: break;
 20850  00272C  D00F               	goto	l1398
 20851  00272E                     l14801:
 20852                           
 20853                           ; BSR set to: 0
 20854  00272E  501C               	movf	__ECANPointBuffer@b,w,c
 20855                           
 20856                           ; Switch size 1, requested type "space"
 20857                           ; Number of cases is 7, Range of values is 0 to 6
 20858                           ; switch strategies available:
 20859                           ; Name         Instructions Cycles
 20860                           ; simple_byte           22    12 (average)
 20861                           ;	Chosen strategy is simple_byte
 20862  002730  E0DA               	bz	l14783
 20863  002732  0A01               	xorlw	1	; case 1
 20864  002734  E0DC               	bz	l14785
 20865  002736  0A03               	xorlw	3	; case 2
 20866  002738  E0DF               	bz	l14787
 20867  00273A  0A01               	xorlw	1	; case 3
 20868  00273C  E0E2               	bz	l14789
 20869  00273E  0A07               	xorlw	7	; case 4
 20870  002740  E0E5               	bz	l14791
 20871  002742  0A01               	xorlw	1	; case 5
 20872  002744  E0E8               	bz	l14793
 20873  002746  0A03               	xorlw	3	; case 6
 20874  002748  E0E9               	bz	l14795
 20875  00274A  D7EB               	goto	l14797
 20876  00274C                     l1398:
 20877                           
 20878                           ;ECAN.c: 1237: return (pt);
 20879  00274C  C01D  F019         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 20880  002750  C01E  F01A         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 20881  002754  0012               	return	
 20882  002756                     __end_of__ECANPointBuffer:
 20883                           	opt stack 0
 20884                           tblptru	equ	0xFF8
 20885                           tblptrh	equ	0xFF7
 20886                           tblptrl	equ	0xFF6
 20887                           tablat	equ	0xFF5
 20888                           prodh	equ	0xFF4
 20889                           prodl	equ	0xFF3
 20890                           intcon	equ	0xFF2
 20891                           indf0	equ	0xFEF
 20892                           postinc0	equ	0xFEE
 20893                           fsr0h	equ	0xFEA
 20894                           fsr0l	equ	0xFE9
 20895                           wreg	equ	0xFE8
 20896                           indf1	equ	0xFE7
 20897                           postinc1	equ	0xFE6
 20898                           postdec1	equ	0xFE5
 20899                           fsr1h	equ	0xFE2
 20900                           fsr1l	equ	0xFE1
 20901                           indf2	equ	0xFDF
 20902                           postinc2	equ	0xFDE
 20903                           postdec2	equ	0xFDD
 20904                           plusw2	equ	0xFDB
 20905                           fsr2h	equ	0xFDA
 20906                           fsr2l	equ	0xFD9
 20907                           status	equ	0xFD8
 20908                           
 20909 ;; *************** function _sprintf *****************
 20910 ;; Defined at:
 20911 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 20912 ;; Parameters:    Size  Location     Type
 20913 ;;  sp              2    0[BANK0 ] PTR unsigned char 
 20914 ;;		 -> wrkbuf(80), 
 20915 ;;  f               2    2[BANK0 ] PTR const unsigned char 
 20916 ;;		 -> STR_192(3), STR_191(7), STR_185(3), STR_184(7), 
 20917 ;;		 -> STR_181(4), STR_180(8), STR_177(4), STR_176(8), 
 20918 ;;		 -> STR_173(4), STR_172(8), STR_169(4), STR_168(8), 
 20919 ;;		 -> STR_165(4), STR_164(7), STR_161(4), STR_160(7), 
 20920 ;;		 -> STR_157(4), STR_156(7), STR_153(4), STR_152(7), 
 20921 ;;		 -> STR_147(3), STR_146(7), STR_144(3), STR_143(7), 
 20922 ;;		 -> STR_141(3), STR_140(7), STR_138(3), STR_137(7), 
 20923 ;;		 -> STR_135(3), STR_134(7), STR_132(3), STR_131(7), 
 20924 ;;		 -> STR_80(3), STR_79(7), STR_64(3), STR_63(7), 
 20925 ;;		 -> STR_62(3), STR_61(7), STR_58(3), STR_57(7), 
 20926 ;;		 -> STR_55(3), STR_54(7), STR_53(3), STR_52(7), 
 20927 ;; Auto vars:     Size  Location     Type
 20928 ;;  idx             1   11[BANK0 ] unsigned char 
 20929 ;;  _val            4   23[BANK0 ] struct .
 20930 ;;  flag            2   28[BANK0 ] unsigned short 
 20931 ;;  width           2   21[BANK0 ] int 
 20932 ;;  prec            2   19[BANK0 ] int 
 20933 ;;  c               1   27[BANK0 ] char 
 20934 ;;  ap              1   18[BANK0 ] PTR void [1]
 20935 ;;		 -> ?_sprintf(2), 
 20936 ;; Return value:  Size  Location     Type
 20937 ;;                  2    0[BANK0 ] int 
 20938 ;; Registers used:
 20939 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20940 ;; Tracked objects:
 20941 ;;		On entry : F/0
 20942 ;;		On exit  : F/0
 20943 ;;		Unchanged: 0/0
 20944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20945 ;;      Params:         0       8       0       0       0       0       0
 20946 ;;      Locals:         0      19       0       0       0       0       0
 20947 ;;      Temps:          0       3       0       0       0       0       0
 20948 ;;      Totals:         0      30       0       0       0       0       0
 20949 ;;Total ram usage:       30 bytes
 20950 ;; Hardware stack levels used:    1
 20951 ;; Hardware stack levels required when called:    3
 20952 ;; This function calls:
 20953 ;;		_isdigit
 20954 ;;		___lldiv
 20955 ;;		___llmod
 20956 ;;		___wmul
 20957 ;; This function is called by:
 20958 ;;		_doModeVerbose
 20959 ;;		_receivePrintEventVerbose
 20960 ;;		_printStatistics
 20961 ;;		_printErrors
 20962 ;; This function uses a non-reentrant model
 20963 ;;
 20964                           
 20965                           	psect	text55
 20966  0052CA                     __ptext55:
 20967                           	opt stack 0
 20968  0052CA                     _sprintf:
 20969                           	opt stack 25
 20970                           
 20971                           ; BSR set to: 0
 20972                           ;doprnt.c: 494: va_list ap;
 20973                           ;doprnt.c: 499: signed char c;
 20974                           ;doprnt.c: 501: int width;
 20975                           ;doprnt.c: 504: int prec;
 20976                           ;doprnt.c: 508: unsigned short flag;
 20977                           ;doprnt.c: 527: union {
 20978                           ;doprnt.c: 528: unsigned long _val;
 20979                           ;doprnt.c: 529: struct {
 20980                           ;doprnt.c: 530: const char * _cp;
 20981                           ;doprnt.c: 531: unsigned _len;
 20982                           ;doprnt.c: 532: } _str;
 20983                           ;doprnt.c: 533: } _val;
 20984                           ;doprnt.c: 542: *ap = __va_start();
 20985                           
 20986                           ;incstack = 0
 20987                           ;incstack = 0
 20988  0052CA  0E64               	movlw	low (?_sprintf+4)
 20989  0052CC  6F72               	movwf	sprintf@ap& (0+255),b
 20990                           
 20991                           ;doprnt.c: 545: while(c = *f++) {
 20992  0052CE  D332               	goto	l11339
 20993  0052D0                     l11005:
 20994                           
 20995                           ; BSR set to: 0
 20996                           ;doprnt.c: 547: if(c != '%')
 20997  0052D0  517B               	movf	sprintf@c& (0+255),w,b
 20998  0052D2  0A25               	xorlw	37
 20999  0052D4  E009               	bz	l1522
 21000                           
 21001                           ; BSR set to: 0
 21002                           ;doprnt.c: 549: {
 21003                           ;doprnt.c: 550: ((*sp++ = (c)));
 21004  0052D6  C060  FFD9         	movff	sprintf@sp,fsr2l
 21005  0052DA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21006  0052DE  C07B  FFDF         	movff	sprintf@c,indf2
 21007                           
 21008                           ; BSR set to: 0
 21009  0052E2  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21010  0052E4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21011                           
 21012                           ;doprnt.c: 551: continue;
 21013  0052E6  D326               	goto	l11339
 21014  0052E8                     l1522:
 21015                           
 21016                           ; BSR set to: 0
 21017                           ;doprnt.c: 552: }
 21018                           ;doprnt.c: 555: width = 0;
 21019  0052E8  6B75               	clrf	sprintf@width& (0+255),b
 21020  0052EA  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21021                           
 21022                           ;doprnt.c: 557: flag = 0;
 21023  0052EC  6B7C               	clrf	sprintf@flag& (0+255),b
 21024  0052EE  6B7D               	clrf	(sprintf@flag+1)& (0+255),b
 21025  0052F0  D009               	goto	l11021
 21026  0052F2                     l11011:
 21027                           
 21028                           ; BSR set to: 0
 21029                           ;doprnt.c: 563: flag |= 0x08;
 21030  0052F2  877C               	bsf	sprintf@flag& (0+255),3,b
 21031  0052F4  D005               	goto	L51
 21032  0052F6                     l11013:
 21033                           
 21034                           ; BSR set to: 0
 21035                           ;doprnt.c: 570: flag |= 0x01;
 21036  0052F6  817C               	bsf	sprintf@flag& (0+255),0,b
 21037  0052F8  D003               	goto	L51
 21038  0052FA                     l11015:
 21039                           
 21040                           ; BSR set to: 0
 21041                           ;doprnt.c: 583: flag |= 0x800;
 21042  0052FA  877D               	bsf	(sprintf@flag+1)& (0+255),3,b
 21043  0052FC  D001               	goto	L51
 21044  0052FE                     l11017:
 21045                           
 21046                           ; BSR set to: 0
 21047                           ;doprnt.c: 589: flag |= 0x04;
 21048  0052FE  857C               	bsf	sprintf@flag& (0+255),2,b
 21049  005300                     L51:
 21050                           
 21051                           ;doprnt.c: 590: f++;
 21052  005300  4B62               	infsnz	sprintf@f& (0+255),f,b
 21053  005302  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21054  005304                     l11021:
 21055                           
 21056                           ; BSR set to: 0
 21057  005304  C062  FFF6         	movff	sprintf@f,tblptrl
 21058  005308  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21059  00530C  0008               	tblrd		*
 21060  00530E  50F5               	movf	tablat,w,c
 21061                           
 21062                           ; Switch size 1, requested type "space"
 21063                           ; Number of cases is 4, Range of values is 32 to 48
 21064                           ; switch strategies available:
 21065                           ; Name         Instructions Cycles
 21066                           ; simple_byte           13     7 (average)
 21067                           ;	Chosen strategy is simple_byte
 21068  005310  0A20               	xorlw	32	; case 32
 21069  005312  E0F1               	bz	l11013
 21070  005314  0A03               	xorlw	3	; case 35
 21071  005316  E0F1               	bz	l11015
 21072  005318  0A0E               	xorlw	14	; case 45
 21073  00531A  E0EB               	bz	l11011
 21074  00531C  0A1D               	xorlw	29	; case 48
 21075  00531E  E0EF               	bz	l11017
 21076                           
 21077                           ; BSR set to: 0
 21078                           ;doprnt.c: 602: if(flag & 0x08)
 21079  005320  B77C               	btfsc	sprintf@flag& (0+255),3,b
 21080                           
 21081                           ; BSR set to: 0
 21082                           ;doprnt.c: 603: flag &= ~0x04;
 21083  005322  957C               	bcf	sprintf@flag& (0+255),2,b
 21084                           
 21085                           ; BSR set to: 0
 21086                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21087  005324  C062  FFF6         	movff	sprintf@f,tblptrl
 21088  005328  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21089  00532C  0008               	tblrd		*
 21090  00532E  50F5               	movf	tablat,w,c
 21091  005330  ECCF  F00E         	call	_isdigit
 21092  005334  E327               	bnc	l11037
 21093                           
 21094                           ;doprnt.c: 607: width = 0;
 21095  005336  0100               	movlb	0	; () banked
 21096  005338  6B75               	clrf	sprintf@width& (0+255),b
 21097  00533A  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21098  00533C                     l11029:
 21099                           
 21100                           ;doprnt.c: 609: width *= 10;
 21101  00533C  C075  F019         	movff	sprintf@width,?___wmul
 21102  005340  C076  F01A         	movff	sprintf@width+1,?___wmul+1
 21103  005344  6A1C               	clrf	?___wmul+3,c
 21104  005346  0E0A               	movlw	10
 21105  005348  6E1B               	movwf	?___wmul+2,c
 21106  00534A  EC36  F00F         	call	___wmul	;wreg free
 21107  00534E  C019  F075         	movff	?___wmul,sprintf@width
 21108  005352  C01A  F076         	movff	?___wmul+1,sprintf@width+1
 21109                           
 21110                           ;doprnt.c: 610: width += *f++ - '0';
 21111  005356  0100               	movlb	0	; () banked
 21112  005358  C062  FFF6         	movff	sprintf@f,tblptrl
 21113  00535C  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21114  005360  0008               	tblrd		*
 21115  005362  CFF5 F068          	movff	tablat,??_sprintf
 21116  005366  0ED0               	movlw	208
 21117  005368  2568               	addwf	??_sprintf& (0+255),w,b
 21118  00536A  6F69               	movwf	(??_sprintf+1)& (0+255),b
 21119  00536C  6B6A               	clrf	(??_sprintf+2)& (0+255),b
 21120  00536E  0EFF               	movlw	255
 21121  005370  236A               	addwfc	(??_sprintf+2)& (0+255),f,b
 21122  005372  5169               	movf	(??_sprintf+1)& (0+255),w,b
 21123  005374  2775               	addwf	sprintf@width& (0+255),f,b
 21124  005376  516A               	movf	(??_sprintf+2)& (0+255),w,b
 21125  005378  2376               	addwfc	(sprintf@width+1)& (0+255),f,b
 21126                           
 21127                           ; BSR set to: 0
 21128                           
 21129                           ; BSR set to: 0
 21130                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21131  00537A  DB3A               	call	PL78	;call to abstracted procedure
 21132  00537C  ECCF  F00E         	call	_isdigit
 21133  005380  E315               	bnc	l11045
 21134  005382  D7DC               	goto	l11029
 21135  005384                     l11037:
 21136  005384  0100               	movlb	0	; () banked
 21137  005386  C062  FFF6         	movff	sprintf@f,tblptrl
 21138  00538A  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21139  00538E  0008               	tblrd		*
 21140  005390  50F5               	movf	tablat,w,c
 21141  005392  0A2A               	xorlw	42
 21142  005394  E10B               	bnz	l11045
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21146  005396  5172               	movf	sprintf@ap& (0+255),w,b
 21147  005398  6ED9               	movwf	fsr2l,c
 21148  00539A  6ADA               	clrf	fsr2h,c
 21149  00539C  CFDE F075          	movff	postinc2,sprintf@width
 21150  0053A0  CFDD F076          	movff	postdec2,sprintf@width+1
 21151                           
 21152                           ; BSR set to: 0
 21153  0053A4  0E02               	movlw	2
 21154  0053A6  2772               	addwf	sprintf@ap& (0+255),f,b
 21155                           
 21156                           ; BSR set to: 0
 21157                           ;doprnt.c: 615: f++;
 21158  0053A8  4B62               	infsnz	sprintf@f& (0+255),f,b
 21159  0053AA  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21160  0053AC                     l11045:
 21161                           
 21162                           ;doprnt.c: 617: }
 21163                           ;doprnt.c: 620: if(*f == '.') {
 21164  0053AC  0100               	movlb	0	; () banked
 21165  0053AE  C062  FFF6         	movff	sprintf@f,tblptrl
 21166  0053B2  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21167  0053B6  0008               	tblrd		*
 21168  0053B8  50F5               	movf	tablat,w,c
 21169  0053BA  0A2E               	xorlw	46
 21170  0053BC  E138               	bnz	l1538
 21171                           
 21172                           ; BSR set to: 0
 21173                           ;doprnt.c: 621: flag |= 0x4000;
 21174  0053BE  8D7D               	bsf	(sprintf@flag+1)& (0+255),6,b
 21175                           
 21176                           ;doprnt.c: 622: f++;
 21177                           
 21178                           ; BSR set to: 0
 21179                           ;doprnt.c: 624: if(*f == '*') {
 21180  0053C0  DB17               	call	PL78	;call to abstracted procedure
 21181  0053C2  0A2A               	xorlw	42
 21182  0053C4  E10C               	bnz	l1539
 21183                           
 21184                           ; BSR set to: 0
 21185                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21186  0053C6  5172               	movf	sprintf@ap& (0+255),w,b
 21187  0053C8  6ED9               	movwf	fsr2l,c
 21188  0053CA  6ADA               	clrf	fsr2h,c
 21189  0053CC  CFDE F073          	movff	postinc2,sprintf@prec
 21190  0053D0  CFDD F074          	movff	postdec2,sprintf@prec+1
 21191                           
 21192                           ; BSR set to: 0
 21193  0053D4  0E02               	movlw	2
 21194  0053D6  2772               	addwf	sprintf@ap& (0+255),f,b
 21195                           
 21196                           ; BSR set to: 0
 21197                           ;doprnt.c: 626: f++;
 21198  0053D8  4B62               	infsnz	sprintf@f& (0+255),f,b
 21199  0053DA  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21200                           
 21201                           ;doprnt.c: 627: } else
 21202  0053DC  D089               	goto	l11115
 21203  0053DE                     l1539:
 21204                           
 21205                           ; BSR set to: 0
 21206                           ;doprnt.c: 629: {
 21207                           ;doprnt.c: 630: prec = 0;
 21208  0053DE  6B73               	clrf	sprintf@prec& (0+255),b
 21209  0053E0  6B74               	clrf	(sprintf@prec+1)& (0+255),b
 21210                           
 21211                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21212  0053E2  D01B               	goto	l11061
 21213  0053E4                     l11057:
 21214                           
 21215                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21216  0053E4  C073  F019         	movff	sprintf@prec,?___wmul
 21217  0053E8  C074  F01A         	movff	sprintf@prec+1,?___wmul+1
 21218  0053EC  6A1C               	clrf	?___wmul+3,c
 21219  0053EE  0E0A               	movlw	10
 21220  0053F0  6E1B               	movwf	?___wmul+2,c
 21221  0053F2  EC36  F00F         	call	___wmul	;wreg free
 21222  0053F6  0100               	movlb	0	; () banked
 21223  0053F8  C062  FFF6         	movff	sprintf@f,tblptrl
 21224  0053FC  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21225  005400  0008               	tblrd		*
 21226  005402  50F5               	movf	tablat,w,c
 21227  005404  2619               	addwf	?___wmul,f,c
 21228  005406  0E00               	movlw	0
 21229  005408  221A               	addwfc	?___wmul+1,f,c
 21230  00540A  0ED0               	movlw	208
 21231  00540C  2419               	addwf	?___wmul,w,c
 21232  00540E  6F73               	movwf	sprintf@prec& (0+255),b
 21233  005410  0EFF               	movlw	255
 21234  005412  201A               	addwfc	?___wmul+1,w,c
 21235  005414  6F74               	movwf	(sprintf@prec+1)& (0+255),b
 21236                           
 21237                           ; BSR set to: 0
 21238  005416  4B62               	infsnz	sprintf@f& (0+255),f,b
 21239  005418  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21240  00541A                     l11061:
 21241                           
 21242                           ; BSR set to: 0
 21243  00541A  C062  FFF6         	movff	sprintf@f,tblptrl
 21244  00541E  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21245  005422  0008               	tblrd		*
 21246  005424  50F5               	movf	tablat,w,c
 21247  005426  ECCF  F00E         	call	_isdigit
 21248  00542A  E362               	bnc	l11115
 21249  00542C  D7DB               	goto	l11057
 21250  00542E                     l1538:
 21251                           
 21252                           ; BSR set to: 0
 21253                           ;doprnt.c: 635: prec = 0;
 21254  00542E  6B73               	clrf	sprintf@prec& (0+255),b
 21255  005430  6B74               	clrf	(sprintf@prec+1)& (0+255),b
 21256  005432  D05E               	goto	l11115
 21257  005434                     l11063:
 21258                           
 21259                           ; BSR set to: 0
 21260                           ;doprnt.c: 652: flag |= 0x10;
 21261  005434  897C               	bsf	sprintf@flag& (0+255),4,b
 21262                           
 21263                           ;doprnt.c: 653: goto loop;
 21264  005436  D05C               	goto	l11115
 21265  005438                     l11065:
 21266                           
 21267                           ; BSR set to: 0
 21268                           ;doprnt.c: 700: flag |= 0x40;
 21269  005438  8D7C               	bsf	sprintf@flag& (0+255),6,b
 21270                           
 21271                           ;doprnt.c: 702: break;
 21272  00543A  D070               	goto	l11117
 21273  00543C                     l11067:
 21274                           
 21275                           ; BSR set to: 0
 21276                           ;doprnt.c: 723: flag |= 0x20;
 21277  00543C  8B7C               	bsf	sprintf@flag& (0+255),5,b
 21278  00543E                     l1555:
 21279                           
 21280                           ; BSR set to: 0
 21281                           ;doprnt.c: 730: flag |= 0x80;
 21282  00543E  8F7C               	bsf	sprintf@flag& (0+255),7,b
 21283                           
 21284                           ;doprnt.c: 732: break;
 21285  005440  D06D               	goto	l11117
 21286  005442                     l11069:
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21290  005442  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21291  005444  1173               	iorwf	sprintf@prec& (0+255),w,b
 21292  005446  E009               	bz	l11075
 21293                           
 21294                           ; BSR set to: 0
 21295  005448  5178               	movf	(sprintf@_val+1)& (0+255),w,b
 21296  00544A  5D73               	subwf	sprintf@prec& (0+255),w,b
 21297  00544C  5179               	movf	(sprintf@_val+2)& (0+255),w,b
 21298  00544E  5974               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21299  005450  E204               	bc	l11075
 21300                           
 21301                           ; BSR set to: 0
 21302                           ;doprnt.c: 763: _val._str._len = prec;
 21303  005452  C073  F078         	movff	sprintf@prec,sprintf@_val+1
 21304  005456  C074  F079         	movff	sprintf@prec+1,sprintf@_val+2
 21305  00545A                     l11075:
 21306                           
 21307                           ; BSR set to: 0
 21308                           ;doprnt.c: 766: if(width > _val._str._len)
 21309  00545A  5175               	movf	sprintf@width& (0+255),w,b
 21310  00545C  5D78               	subwf	(sprintf@_val+1)& (0+255),w,b
 21311  00545E  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21312  005460  5979               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21313  005462  E207               	bc	l1558
 21314                           
 21315                           ; BSR set to: 0
 21316                           ;doprnt.c: 767: width -= _val._str._len;
 21317  005464  EE20  F078         	lfsr	2,sprintf@_val+1
 21318  005468  50DE               	movf	postinc2,w,c
 21319  00546A  5F75               	subwf	sprintf@width& (0+255),f,b
 21320  00546C  50DD               	movf	postdec2,w,c
 21321  00546E  5B76               	subwfb	(sprintf@width+1)& (0+255),f,b
 21322  005470  D002               	goto	l1559
 21323  005472                     l1558:
 21324                           
 21325                           ; BSR set to: 0
 21326                           ;doprnt.c: 768: else
 21327                           ;doprnt.c: 769: width = 0;
 21328  005472  6B75               	clrf	sprintf@width& (0+255),b
 21329  005474  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21330  005476                     l1559:
 21331                           
 21332                           ; BSR set to: 0
 21333                           ;doprnt.c: 771: if(!(flag & 0x08))
 21334  005476  A77C               	btfss	sprintf@flag& (0+255),3,b
 21335  005478  D004               	goto	l11085
 21336  00547A  D015               	goto	l11093
 21337  00547C                     l11081:
 21338                           
 21339                           ; BSR set to: 0
 21340                           ;doprnt.c: 774: ((*sp++ = (' ')));
 21341  00547C  DAA8               	call	PL60	;call to abstracted procedure
 21342                           
 21343                           ; BSR set to: 0
 21344  00547E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21345  005480  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21346  005482                     l11085:
 21347                           
 21348                           ; BSR set to: 0
 21349  005482  0775               	decf	sprintf@width& (0+255),f,b
 21350  005484  DAC3               	call	PL96	;call to abstracted procedure
 21351  005486  B4D8               	btfsc	status,2,c
 21352  005488  2976               	incf	(sprintf@width+1)& (0+255),w,b
 21353  00548A  E00D               	bz	l11093
 21354  00548C  D7F7               	goto	l11081
 21355  00548E                     l11087:
 21356                           
 21357                           ; BSR set to: 0
 21358                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 21359  00548E  5177               	movf	sprintf@_val& (0+255),w,b
 21360  005490  6ED9               	movwf	fsr2l,c
 21361  005492  6ADA               	clrf	fsr2h,c
 21362  005494  C060  FFE1         	movff	sprintf@sp,fsr1l
 21363  005498  C061  FFE2         	movff	sprintf@sp+1,fsr1h
 21364  00549C  CFDF FFE7          	movff	indf2,indf1
 21365                           
 21366                           ; BSR set to: 0
 21367  0054A0  2B77               	incf	sprintf@_val& (0+255),f,b
 21368                           
 21369                           ; BSR set to: 0
 21370  0054A2  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21371  0054A4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21372  0054A6                     l11093:
 21373                           
 21374                           ; BSR set to: 0
 21375  0054A6  0778               	decf	(sprintf@_val+1)& (0+255),f,b
 21376  0054A8  A0D8               	btfss	status,0,c
 21377  0054AA  0779               	decf	(sprintf@_val+2)& (0+255),f,b
 21378  0054AC  0100               	movlb	0	; () banked
 21379  0054AE  2978               	incf	(sprintf@_val+1)& (0+255),w,b
 21380  0054B0  B4D8               	btfsc	status,2,c
 21381  0054B2  2979               	incf	(sprintf@_val+2)& (0+255),w,b
 21382  0054B4  E1EC               	bnz	l11087
 21383                           
 21384                           ; BSR set to: 0
 21385                           ;doprnt.c: 779: if(flag & 0x08)
 21386  0054B6  B77C               	btfsc	sprintf@flag& (0+255),3,b
 21387  0054B8  D004               	goto	l11101
 21388  0054BA  D23C               	goto	l11339
 21389  0054BC                     l11097:
 21390                           
 21391                           ; BSR set to: 0
 21392                           ;doprnt.c: 781: ((*sp++ = (' ')));
 21393  0054BC  DA88               	call	PL60	;call to abstracted procedure
 21394                           
 21395                           ; BSR set to: 0
 21396  0054BE  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21397  0054C0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21398  0054C2                     l11101:
 21399                           
 21400                           ; BSR set to: 0
 21401  0054C2  0775               	decf	sprintf@width& (0+255),f,b
 21402  0054C4  DAA3               	call	PL96	;call to abstracted procedure
 21403  0054C6  B4D8               	btfsc	status,2,c
 21404  0054C8  2976               	incf	(sprintf@width+1)& (0+255),w,b
 21405  0054CA  E101 D233          	bz	l11339
 21406  0054CE  D7F6               	goto	l11097
 21407  0054D0                     l11103:
 21408                           
 21409                           ; BSR set to: 0
 21410                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21411  0054D0  5172               	movf	sprintf@ap& (0+255),w,b
 21412  0054D2  6ED9               	movwf	fsr2l,c
 21413  0054D4  6ADA               	clrf	fsr2h,c
 21414  0054D6  50DF               	movf	indf2,w,c
 21415  0054D8  6F7B               	movwf	sprintf@c& (0+255),b
 21416                           
 21417                           ; BSR set to: 0
 21418  0054DA  0E02               	movlw	2
 21419  0054DC  2772               	addwf	sprintf@ap& (0+255),f,b
 21420  0054DE                     l11107:
 21421                           
 21422                           ; BSR set to: 0
 21423                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 21424  0054DE  0E7B               	movlw	low sprintf@c
 21425  0054E0  6F77               	movwf	sprintf@_val& (0+255),b
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;doprnt.c: 815: _val._str._len = 1;
 21429  0054E2  6B79               	clrf	(sprintf@_val+2)& (0+255),b
 21430  0054E4  0E01               	movlw	1
 21431  0054E6  6F78               	movwf	(sprintf@_val+1)& (0+255),b
 21432                           
 21433                           ;doprnt.c: 816: goto dostring;
 21434  0054E8  D7AC               	goto	l11069
 21435  0054EA                     l11111:
 21436                           
 21437                           ; BSR set to: 0
 21438                           ;doprnt.c: 827: flag |= 0xC0;
 21439  0054EA  0EC0               	movlw	192
 21440  0054EC  137C               	iorwf	sprintf@flag& (0+255),f,b
 21441                           
 21442                           ;doprnt.c: 828: break;
 21443  0054EE  D016               	goto	l11117
 21444  0054F0                     l11115:
 21445  0054F0  0100               	movlb	0	; () banked
 21446  0054F2  DA74               	call	PL64	;call to abstracted procedure
 21447  0054F4  517B               	movf	sprintf@c& (0+255),w,b
 21448                           
 21449                           ; Switch size 1, requested type "space"
 21450                           ; Number of cases is 9, Range of values is 0 to 120
 21451                           ; switch strategies available:
 21452                           ; Name         Instructions Cycles
 21453                           ; simple_byte           28    15 (average)
 21454                           ;	Chosen strategy is simple_byte
 21455  0054F6  E101 D221          	bz	l11341
 21456  0054FA  0A58               	xorlw	88	; case 88
 21457  0054FC  E09F               	bz	l11067
 21458  0054FE  0A3B               	xorlw	59	; case 99
 21459  005500  E0E7               	bz	l11103
 21460  005502  0A07               	xorlw	7	; case 100
 21461  005504  E00B               	bz	l11117
 21462  005506  0A0D               	xorlw	13	; case 105
 21463  005508  E009               	bz	l11117
 21464  00550A  0A05               	xorlw	5	; case 108
 21465  00550C  E093               	bz	l11063
 21466  00550E  0A03               	xorlw	3	; case 111
 21467  005510  E093               	bz	l11065
 21468  005512  0A1A               	xorlw	26	; case 117
 21469  005514  E0EA               	bz	l11111
 21470  005516  0A0D               	xorlw	13	; case 120
 21471  005518  E092               	bz	l1555
 21472  00551A  D7E1               	goto	l11107
 21473  00551C                     l11117:
 21474                           
 21475                           ; BSR set to: 0
 21476                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 21477  00551C  517C               	movf	sprintf@flag& (0+255),w,b
 21478  00551E  0BC0               	andlw	192
 21479  005520  E120               	bnz	l1574
 21480                           
 21481                           ; BSR set to: 0
 21482                           ;doprnt.c: 1260: {
 21483                           ;doprnt.c: 1262: if(flag & 0x10)
 21484  005522  A97C               	btfss	sprintf@flag& (0+255),4,b
 21485  005524  D003               	goto	l11125
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 21489  005526  5172               	movf	sprintf@ap& (0+255),w,b
 21490                           
 21491                           ; BSR set to: 0
 21492  005528  DA47               	call	PL50	;call to abstracted procedure
 21493  00552A  D00D               	goto	L52
 21494  00552C                     l11125:
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;doprnt.c: 1264: else
 21498                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 21499  00552C  5172               	movf	sprintf@ap& (0+255),w,b
 21500  00552E  6ED9               	movwf	fsr2l,c
 21501  005530  6ADA               	clrf	fsr2h,c
 21502  005532  CFDE F077          	movff	postinc2,sprintf@_val
 21503  005536  CFDD F078          	movff	postdec2,sprintf@_val+1
 21504  00553A  0E00               	movlw	0
 21505  00553C  BF78               	btfsc	(sprintf@_val+1)& (0+255),7,b
 21506  00553E  0EFF               	movlw	-1
 21507  005540  6F79               	movwf	(sprintf@_val+2)& (0+255),b
 21508  005542  6F7A               	movwf	(sprintf@_val+3)& (0+255),b
 21509                           
 21510                           ; BSR set to: 0
 21511  005544  0E02               	movlw	2
 21512  005546                     L52:
 21513  005546  2772               	addwf	sprintf@ap& (0+255),f,b
 21514                           
 21515                           ; BSR set to: 0
 21516                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 21517  005548  AF7A               	btfss	(sprintf@_val+3)& (0+255),7,b
 21518  00554A  D01F               	goto	l11143
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;doprnt.c: 1269: flag |= 0x03;
 21522  00554C  0E03               	movlw	3
 21523  00554E  137C               	iorwf	sprintf@flag& (0+255),f,b
 21524                           
 21525                           ; BSR set to: 0
 21526                           ;doprnt.c: 1270: _val._val = -_val._val;
 21527  005550  1F7A               	comf	(sprintf@_val+3)& (0+255),f,b
 21528  005552  1F79               	comf	(sprintf@_val+2)& (0+255),f,b
 21529  005554  1F78               	comf	(sprintf@_val+1)& (0+255),f,b
 21530  005556  6D77               	negf	sprintf@_val& (0+255),b
 21531  005558  0E00               	movlw	0
 21532  00555A  2378               	addwfc	(sprintf@_val+1)& (0+255),f,b
 21533  00555C  2379               	addwfc	(sprintf@_val+2)& (0+255),f,b
 21534  00555E  237A               	addwfc	(sprintf@_val+3)& (0+255),f,b
 21535  005560  D014               	goto	l11143
 21536  005562                     l1574:
 21537                           
 21538                           ; BSR set to: 0
 21539                           ;doprnt.c: 1275: else
 21540                           ;doprnt.c: 1280: {
 21541                           ;doprnt.c: 1288: if(flag & 0x10)
 21542  005562  A97C               	btfss	sprintf@flag& (0+255),4,b
 21543  005564  D003               	goto	l11139
 21544                           
 21545                           ; BSR set to: 0
 21546                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 21547  005566  5172               	movf	sprintf@ap& (0+255),w,b
 21548                           
 21549                           ; BSR set to: 0
 21550  005568  DA27               	call	PL50	;call to abstracted procedure
 21551  00556A  D00E               	goto	L53
 21552  00556C                     l11139:
 21553                           
 21554                           ; BSR set to: 0
 21555                           ;doprnt.c: 1290: else
 21556                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21557  00556C  5172               	movf	sprintf@ap& (0+255),w,b
 21558  00556E  6ED9               	movwf	fsr2l,c
 21559  005570  6ADA               	clrf	fsr2h,c
 21560  005572  CFDE F068          	movff	postinc2,??_sprintf
 21561  005576  CFDD F069          	movff	postdec2,??_sprintf+1
 21562  00557A  C068  F077         	movff	??_sprintf,sprintf@_val
 21563  00557E  C069  F078         	movff	??_sprintf+1,sprintf@_val+1
 21564  005582  6B79               	clrf	(sprintf@_val+2)& (0+255),b
 21565  005584  6B7A               	clrf	(sprintf@_val+3)& (0+255),b
 21566                           
 21567                           ; BSR set to: 0
 21568  005586  0E02               	movlw	2
 21569  005588                     L53:
 21570  005588  2772               	addwf	sprintf@ap& (0+255),f,b
 21571  00558A                     l11143:
 21572                           
 21573                           ; BSR set to: 0
 21574                           ;doprnt.c: 1294: }
 21575                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 21576  00558A  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21577  00558C  1173               	iorwf	sprintf@prec& (0+255),w,b
 21578  00558E  E15C               	bnz	l11193
 21579                           
 21580                           ; BSR set to: 0
 21581  005590  517A               	movf	(sprintf@_val+3)& (0+255),w,b
 21582  005592  1177               	iorwf	sprintf@_val& (0+255),w,b
 21583  005594  1178               	iorwf	(sprintf@_val+1)& (0+255),w,b
 21584  005596  1179               	iorwf	(sprintf@_val+2)& (0+255),w,b
 21585  005598  E157               	bnz	l11193
 21586                           
 21587                           ; BSR set to: 0
 21588                           ;doprnt.c: 1298: prec++;
 21589  00559A  4B73               	infsnz	sprintf@prec& (0+255),f,b
 21590  00559C  2B74               	incf	(sprintf@prec+1)& (0+255),f,b
 21591  00559E  D054               	goto	l11193
 21592  0055A0                     l11149:
 21593                           
 21594                           ; BSR set to: 0
 21595                           ;doprnt.c: 1309: case 0xC0:
 21596                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21597  0055A0  0E01               	movlw	1
 21598  0055A2  6F7B               	movwf	sprintf@c& (0+255),b
 21599  0055A4                     l11151:
 21600                           
 21601                           ; BSR set to: 0
 21602  0055A4  517B               	movf	sprintf@c& (0+255),w,b
 21603  0055A6  0A0A               	xorlw	10
 21604  0055A8  E058               	bz	l11195
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 21608  0055AA  517B               	movf	sprintf@c& (0+255),w,b
 21609  0055AC  0D04               	mullw	4
 21610  0055AE  0E0C               	movlw	low _dpowers
 21611  0055B0  24F3               	addwf	prodl,w,c
 21612  0055B2  6EF6               	movwf	tblptrl,c
 21613  0055B4  0E6D               	movlw	high _dpowers
 21614  0055B6  20F4               	addwfc	prodh,w,c
 21615  0055B8  6EF7               	movwf	tblptrh,c
 21616  0055BA  0009               	tblrd		*+
 21617  0055BC  50F5               	movf	tablat,w,c
 21618  0055BE  5D77               	subwf	sprintf@_val& (0+255),w,b
 21619  0055C0  0009               	tblrd		*+
 21620  0055C2  50F5               	movf	tablat,w,c
 21621  0055C4  5978               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21622  0055C6  0009               	tblrd		*+
 21623  0055C8  50F5               	movf	tablat,w,c
 21624  0055CA  5979               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21625  0055CC  0009               	tblrd		*+
 21626  0055CE  50F5               	movf	tablat,w,c
 21627  0055D0  597A               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21628  0055D2  E343               	bnc	l11195
 21629                           
 21630                           ; BSR set to: 0
 21631  0055D4  2B7B               	incf	sprintf@c& (0+255),f,b
 21632  0055D6  D7E6               	goto	l11151
 21633  0055D8                     l11163:
 21634                           
 21635                           ; BSR set to: 0
 21636                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21637  0055D8  0E01               	movlw	1
 21638  0055DA  6F7B               	movwf	sprintf@c& (0+255),b
 21639  0055DC                     l11165:
 21640                           
 21641                           ; BSR set to: 0
 21642  0055DC  517B               	movf	sprintf@c& (0+255),w,b
 21643  0055DE  0A08               	xorlw	8
 21644  0055E0  E03C               	bz	l11195
 21645                           
 21646                           ; BSR set to: 0
 21647                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 21648  0055E2  517B               	movf	sprintf@c& (0+255),w,b
 21649  0055E4  0D04               	mullw	4
 21650  0055E6  0E34               	movlw	low _hexpowers
 21651  0055E8  24F3               	addwf	prodl,w,c
 21652  0055EA  6EF6               	movwf	tblptrl,c
 21653  0055EC  0E6D               	movlw	high _hexpowers
 21654  0055EE  20F4               	addwfc	prodh,w,c
 21655  0055F0  6EF7               	movwf	tblptrh,c
 21656  0055F2  0009               	tblrd		*+
 21657  0055F4  50F5               	movf	tablat,w,c
 21658  0055F6  5D77               	subwf	sprintf@_val& (0+255),w,b
 21659  0055F8  0009               	tblrd		*+
 21660  0055FA  50F5               	movf	tablat,w,c
 21661  0055FC  5978               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21662  0055FE  0009               	tblrd		*+
 21663  005600  50F5               	movf	tablat,w,c
 21664  005602  5979               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21665  005604  0009               	tblrd		*+
 21666  005606  50F5               	movf	tablat,w,c
 21667  005608  597A               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21668  00560A  E327               	bnc	l11195
 21669                           
 21670                           ; BSR set to: 0
 21671  00560C  2B7B               	incf	sprintf@c& (0+255),f,b
 21672  00560E  D7E6               	goto	l11165
 21673  005610                     l11177:
 21674                           
 21675                           ; BSR set to: 0
 21676                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 21677  005610  0E01               	movlw	1
 21678  005612  6F7B               	movwf	sprintf@c& (0+255),b
 21679  005614                     l11179:
 21680                           
 21681                           ; BSR set to: 0
 21682  005614  517B               	movf	sprintf@c& (0+255),w,b
 21683  005616  0A0C               	xorlw	12
 21684  005618  E020               	bz	l11195
 21685                           
 21686                           ; BSR set to: 0
 21687                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 21688  00561A  517B               	movf	sprintf@c& (0+255),w,b
 21689  00561C  0D04               	mullw	4
 21690  00561E  0EDC               	movlw	low _octpowers
 21691  005620  24F3               	addwf	prodl,w,c
 21692  005622  6EF6               	movwf	tblptrl,c
 21693  005624  0E6C               	movlw	high _octpowers
 21694  005626  20F4               	addwfc	prodh,w,c
 21695  005628  6EF7               	movwf	tblptrh,c
 21696  00562A  0009               	tblrd		*+
 21697  00562C  50F5               	movf	tablat,w,c
 21698  00562E  5D77               	subwf	sprintf@_val& (0+255),w,b
 21699  005630  0009               	tblrd		*+
 21700  005632  50F5               	movf	tablat,w,c
 21701  005634  5978               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21702  005636  0009               	tblrd		*+
 21703  005638  50F5               	movf	tablat,w,c
 21704  00563A  5979               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21705  00563C  0009               	tblrd		*+
 21706  00563E  50F5               	movf	tablat,w,c
 21707  005640  597A               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21708  005642  E30B               	bnc	l11195
 21709                           
 21710                           ; BSR set to: 0
 21711  005644  2B7B               	incf	sprintf@c& (0+255),f,b
 21712  005646  D7E6               	goto	l11179
 21713  005648                     l11193:
 21714                           
 21715                           ; BSR set to: 0
 21716  005648  517C               	movf	sprintf@flag& (0+255),w,b
 21717  00564A  0BC0               	andlw	192
 21718                           
 21719                           ; Switch size 1, requested type "space"
 21720                           ; Number of cases is 4, Range of values is 0 to 192
 21721                           ; switch strategies available:
 21722                           ; Name         Instructions Cycles
 21723                           ; simple_byte           13     7 (average)
 21724                           ;	Chosen strategy is simple_byte
 21725  00564C  E0A9               	bz	l11149
 21726  00564E  0A40               	xorlw	64	; case 64
 21727  005650  E0DF               	bz	l11177
 21728  005652  0AC0               	xorlw	192	; case 128
 21729  005654  E0C1               	bz	l11163
 21730  005656  0A40               	xorlw	64	; case 192
 21731  005658  E0A3               	bz	l11149
 21732  00565A                     l11195:
 21733                           
 21734                           ; BSR set to: 0
 21735                           ;doprnt.c: 1346: if(c < prec)
 21736  00565A  0E80               	movlw	128
 21737  00565C  BF7B               	btfsc	sprintf@c& (0+255),7,b
 21738  00565E  0E7F               	movlw	127
 21739  005660  6F68               	movwf	??_sprintf& (0+255),b
 21740  005662  5173               	movf	sprintf@prec& (0+255),w,b
 21741  005664  5D7B               	subwf	sprintf@c& (0+255),w,b
 21742  005666  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21743  005668  0A80               	xorlw	128
 21744  00566A  5968               	subwfb	??_sprintf& (0+255),w,b
 21745  00566C  E203               	bc	l11199
 21746                           
 21747                           ; BSR set to: 0
 21748                           ;doprnt.c: 1347: c = prec;
 21749  00566E  C073  F07B         	movff	sprintf@prec,sprintf@c
 21750  005672  D00F               	goto	l11203
 21751  005674                     l11199:
 21752                           
 21753                           ; BSR set to: 0
 21754                           ;doprnt.c: 1348: else if(prec < c)
 21755  005674  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21756  005676  0A80               	xorlw	128
 21757  005678  6F68               	movwf	??_sprintf& (0+255),b
 21758  00567A  517B               	movf	sprintf@c& (0+255),w,b
 21759  00567C  5D73               	subwf	sprintf@prec& (0+255),w,b
 21760  00567E  0E80               	movlw	128
 21761  005680  BF7B               	btfsc	sprintf@c& (0+255),7,b
 21762  005682  0E7F               	movlw	127
 21763  005684  5968               	subwfb	??_sprintf& (0+255),w,b
 21764  005686  E205               	bc	l11203
 21765                           
 21766                           ; BSR set to: 0
 21767                           ;doprnt.c: 1349: prec = c;
 21768  005688  517B               	movf	sprintf@c& (0+255),w,b
 21769  00568A  6F73               	movwf	sprintf@prec& (0+255),b
 21770  00568C  6B74               	clrf	(sprintf@prec+1)& (0+255),b
 21771  00568E  BF73               	btfsc	sprintf@prec& (0+255),7,b
 21772  005690  0774               	decf	(sprintf@prec+1)& (0+255),f,b
 21773  005692                     l11203:
 21774                           
 21775                           ; BSR set to: 0
 21776                           ;doprnt.c: 1352: if(width && flag & 0x03)
 21777  005692  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21778  005694  1175               	iorwf	sprintf@width& (0+255),w,b
 21779  005696  E006               	bz	l11209
 21780                           
 21781                           ; BSR set to: 0
 21782  005698  517C               	movf	sprintf@flag& (0+255),w,b
 21783  00569A  0B03               	andlw	3
 21784  00569C  E003               	bz	l11209
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;doprnt.c: 1353: width--;
 21788  00569E  0775               	decf	sprintf@width& (0+255),f,b
 21789  0056A0  A0D8               	btfss	status,0,c
 21790  0056A2  0776               	decf	(sprintf@width+1)& (0+255),f,b
 21791  0056A4                     l11209:
 21792                           
 21793                           ; BSR set to: 0
 21794                           ;doprnt.c: 1355: if(flag & 0x4000) {
 21795  0056A4  AD7D               	btfss	(sprintf@flag+1)& (0+255),6,b
 21796  0056A6  D010               	goto	l11215
 21797                           
 21798                           ; BSR set to: 0
 21799                           ;doprnt.c: 1356: if(width > prec)
 21800  0056A8  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21801  0056AA  0A80               	xorlw	128
 21802  0056AC  6F68               	movwf	??_sprintf& (0+255),b
 21803  0056AE  5175               	movf	sprintf@width& (0+255),w,b
 21804  0056B0  5D73               	subwf	sprintf@prec& (0+255),w,b
 21805  0056B2  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21806  0056B4  0A80               	xorlw	128
 21807  0056B6  5968               	subwfb	??_sprintf& (0+255),w,b
 21808  0056B8  E205               	bc	l1602
 21809                           
 21810                           ; BSR set to: 0
 21811                           ;doprnt.c: 1357: width -= prec;
 21812  0056BA  5173               	movf	sprintf@prec& (0+255),w,b
 21813  0056BC  5F75               	subwf	sprintf@width& (0+255),f,b
 21814  0056BE  5174               	movf	(sprintf@prec+1)& (0+255),w,b
 21815  0056C0  5B76               	subwfb	(sprintf@width+1)& (0+255),f,b
 21816  0056C2  D002               	goto	l11215
 21817  0056C4                     l1602:
 21818                           
 21819                           ; BSR set to: 0
 21820                           ;doprnt.c: 1358: else
 21821                           ;doprnt.c: 1359: width = 0;
 21822  0056C4  6B75               	clrf	sprintf@width& (0+255),b
 21823  0056C6  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21824  0056C8                     l11215:
 21825                           
 21826                           ; BSR set to: 0
 21827                           ;doprnt.c: 1360: }
 21828                           ;doprnt.c: 1364: if((flag & (
 21829                           ;doprnt.c: 1366: 0x04|
 21830                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 21831  0056C8  0EC4               	movlw	196
 21832  0056CA  D94E               	call	PL18	;call to abstracted procedure
 21833  0056CC  0E40               	movlw	64
 21834  0056CE  B4D8               	btfsc	status,2,c
 21835  0056D0  1968               	xorwf	??_sprintf& (0+255),w,b
 21836  0056D2  E107               	bnz	l11221
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;doprnt.c: 1369: if(width)
 21840  0056D4  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21841  0056D6  1175               	iorwf	sprintf@width& (0+255),w,b
 21842  0056D8  E018               	bz	l11227
 21843                           
 21844                           ; BSR set to: 0
 21845                           ;doprnt.c: 1370: width--;
 21846  0056DA  0775               	decf	sprintf@width& (0+255),f,b
 21847  0056DC  A0D8               	btfss	status,0,c
 21848  0056DE  0776               	decf	(sprintf@width+1)& (0+255),f,b
 21849  0056E0  D014               	goto	l11227
 21850  0056E2                     l11221:
 21851                           
 21852                           ; BSR set to: 0
 21853                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21854  0056E2  0EC0               	movlw	192
 21855  0056E4  D941               	call	PL18	;call to abstracted procedure
 21856  0056E6  0E80               	movlw	128
 21857  0056E8  B4D8               	btfsc	status,2,c
 21858  0056EA  1968               	xorwf	??_sprintf& (0+255),w,b
 21859  0056EC  E10E               	bnz	l11227
 21860                           
 21861                           ; BSR set to: 0
 21862                           ;doprnt.c: 1379: if(width > 2)
 21863  0056EE  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21864  0056F0  0A80               	xorlw	128
 21865  0056F2  0F80               	addlw	-128
 21866  0056F4  0E03               	movlw	3
 21867  0056F6  B4D8               	btfsc	status,2,c
 21868  0056F8  5D75               	subwf	sprintf@width& (0+255),w,b
 21869  0056FA  E305               	bnc	l1608
 21870                           
 21871                           ; BSR set to: 0
 21872                           ;doprnt.c: 1380: width -= 2;
 21873  0056FC  0EFE               	movlw	254
 21874  0056FE  2775               	addwf	sprintf@width& (0+255),f,b
 21875  005700  0EFF               	movlw	255
 21876  005702  2376               	addwfc	(sprintf@width+1)& (0+255),f,b
 21877  005704  D002               	goto	l11227
 21878  005706                     l1608:
 21879                           
 21880                           ; BSR set to: 0
 21881                           ;doprnt.c: 1381: else
 21882                           ;doprnt.c: 1382: width = 0;
 21883  005706  6B75               	clrf	sprintf@width& (0+255),b
 21884  005708  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21885  00570A                     l11227:
 21886                           
 21887                           ; BSR set to: 0
 21888                           ;doprnt.c: 1383: }
 21889                           ;doprnt.c: 1388: if(width > c)
 21890  00570A  0E80               	movlw	128
 21891  00570C  BF7B               	btfsc	sprintf@c& (0+255),7,b
 21892  00570E  0E7F               	movlw	127
 21893  005710  6F68               	movwf	??_sprintf& (0+255),b
 21894  005712  5175               	movf	sprintf@width& (0+255),w,b
 21895  005714  5D7B               	subwf	sprintf@c& (0+255),w,b
 21896  005716  5176               	movf	(sprintf@width+1)& (0+255),w,b
 21897  005718  0A80               	xorlw	128
 21898  00571A  5968               	subwfb	??_sprintf& (0+255),w,b
 21899  00571C  E207               	bc	l1610
 21900                           
 21901                           ; BSR set to: 0
 21902                           ;doprnt.c: 1389: width -= c;
 21903  00571E  517B               	movf	sprintf@c& (0+255),w,b
 21904  005720  5F75               	subwf	sprintf@width& (0+255),f,b
 21905  005722  0E00               	movlw	0
 21906  005724  BF7B               	btfsc	sprintf@c& (0+255),7,b
 21907  005726  0EFF               	movlw	255
 21908  005728  5B76               	subwfb	(sprintf@width+1)& (0+255),f,b
 21909  00572A  D002               	goto	l1611
 21910  00572C                     l1610:
 21911                           
 21912                           ; BSR set to: 0
 21913                           ;doprnt.c: 1390: else
 21914                           ;doprnt.c: 1391: width = 0;
 21915  00572C  6B75               	clrf	sprintf@width& (0+255),b
 21916  00572E  6B76               	clrf	(sprintf@width+1)& (0+255),b
 21917  005730                     l1611:
 21918                           
 21919                           ; BSR set to: 0
 21920                           ;doprnt.c: 1394: if(flag & 0x04) {
 21921  005730  A57C               	btfss	sprintf@flag& (0+255),2,b
 21922  005732  D03C               	goto	l11265
 21923                           
 21924                           ; BSR set to: 0
 21925                           ;doprnt.c: 1399: if(flag & 0x03)
 21926  005734  517C               	movf	sprintf@flag& (0+255),w,b
 21927  005736  0B03               	andlw	3
 21928  005738  E009               	bz	l1613
 21929                           
 21930                           ; BSR set to: 0
 21931                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 21932  00573A  C060  FFD9         	movff	sprintf@sp,fsr2l
 21933  00573E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21934  005742  0E2D               	movlw	45
 21935  005744  6EDF               	movwf	indf2,c
 21936  005746                     l11235:
 21937                           
 21938                           ; BSR set to: 0
 21939  005746  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21940  005748  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21941  00574A  D022               	goto	l11257
 21942  00574C                     l1613:
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;doprnt.c: 1403: else
 21946                           ;doprnt.c: 1406: if(flag & 0x01)
 21947  00574C  A17C               	btfss	sprintf@flag& (0+255),0,b
 21948  00574E  D006               	goto	l11241
 21949                           
 21950                           ; BSR set to: 0
 21951                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 21952  005750  C060  FFD9         	movff	sprintf@sp,fsr2l
 21953  005754  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21954  005758  0E20               	movlw	32
 21955  00575A  D7F4               	goto	L54
 21956  00575C                     l11241:
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21960  00575C  0EC0               	movlw	192
 21961  00575E  D904               	call	PL18	;call to abstracted procedure
 21962  005760  0E80               	movlw	128
 21963  005762  B4D8               	btfsc	status,2,c
 21964  005764  1968               	xorwf	??_sprintf& (0+255),w,b
 21965  005766  E114               	bnz	l11257
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 21969  005768  C060  FFD9         	movff	sprintf@sp,fsr2l
 21970  00576C  D94A               	call	PL82	;call to abstracted procedure
 21971                           
 21972                           ; BSR set to: 0
 21973  00576E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21974  005770  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21975                           
 21976                           ; BSR set to: 0
 21977                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 21978  005772  BB7C               	btfsc	sprintf@flag& (0+255),5,b
 21979  005774  D003               	goto	l11251
 21980                           
 21981                           ; BSR set to: 0
 21982  005776  6B6D               	clrf	(_sprintf$2087+1)& (0+255),b
 21983  005778  0E78               	movlw	120
 21984  00577A  D002               	goto	L55
 21985  00577C                     l11251:
 21986                           
 21987                           ; BSR set to: 0
 21988  00577C  6B6D               	clrf	(_sprintf$2087+1)& (0+255),b
 21989  00577E  0E58               	movlw	88
 21990  005780                     L55:
 21991  005780  6F6C               	movwf	_sprintf$2087& (0+255),b
 21992                           
 21993                           ; BSR set to: 0
 21994  005782  C060  FFD9         	movff	sprintf@sp,fsr2l
 21995  005786  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21996  00578A  C06C  FFDF         	movff	_sprintf$2087,indf2
 21997  00578E  D7DB               	goto	l11235
 21998  005790                     l11257:
 21999                           
 22000                           ; BSR set to: 0
 22001                           ;doprnt.c: 1419: }
 22002                           ;doprnt.c: 1422: if(width)
 22003  005790  5176               	movf	(sprintf@width+1)& (0+255),w,b
 22004  005792  1175               	iorwf	sprintf@width& (0+255),w,b
 22005  005794  E101 D0B9          	bz	l11329
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22009  005798  C060  FFD9         	movff	sprintf@sp,fsr2l
 22010  00579C  D932               	call	PL82	;call to abstracted procedure
 22011                           
 22012                           ; BSR set to: 0
 22013  00579E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22014  0057A0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22015                           
 22016                           ; BSR set to: 0
 22017                           ;doprnt.c: 1425: while(--width);
 22018  0057A2  0775               	decf	sprintf@width& (0+255),f,b
 22019  0057A4  A0D8               	btfss	status,0,c
 22020  0057A6  0776               	decf	(sprintf@width+1)& (0+255),f,b
 22021  0057A8  0100               	movlb	0	; () banked
 22022  0057AA  D7F2               	goto	l11257
 22023  0057AC                     l11265:
 22024                           
 22025                           ; BSR set to: 0
 22026                           ;doprnt.c: 1429: {
 22027                           ;doprnt.c: 1431: if(width
 22028                           ;doprnt.c: 1433: && !(flag & 0x08)
 22029                           ;doprnt.c: 1435: )
 22030  0057AC  5176               	movf	(sprintf@width+1)& (0+255),w,b
 22031  0057AE  1175               	iorwf	sprintf@width& (0+255),w,b
 22032  0057B0  A4D8               	btfss	status,2,c
 22033                           
 22034                           ; BSR set to: 0
 22035  0057B2  B77C               	btfsc	sprintf@flag& (0+255),3,b
 22036  0057B4  D004               	goto	l11275
 22037  0057B6                     l11269:
 22038                           
 22039                           ; BSR set to: 0
 22040                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22041  0057B6  C060  FFD9         	movff	sprintf@sp,fsr2l
 22042                           
 22043                           ; BSR set to: 0
 22044                           
 22045                           ; BSR set to: 0
 22046                           ;doprnt.c: 1438: while(--width);
 22047  0057BA  D8F1               	call	PL44	;call to abstracted procedure
 22048  0057BC  E1FC               	bnz	l11269
 22049  0057BE                     l11275:
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;doprnt.c: 1445: if(flag & 0x03)
 22053  0057BE  517C               	movf	sprintf@flag& (0+255),w,b
 22054  0057C0  0B03               	andlw	3
 22055  0057C2  E009               	bz	l1629
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22059  0057C4  C060  FFD9         	movff	sprintf@sp,fsr2l
 22060  0057C8  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22061  0057CC  0E2D               	movlw	45
 22062  0057CE  6EDF               	movwf	indf2,c
 22063                           
 22064                           ; BSR set to: 0
 22065  0057D0  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22066  0057D2  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22067  0057D4  D008               	goto	l11285
 22068  0057D6                     l1629:
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;doprnt.c: 1450: else if(flag & 0x01)
 22072  0057D6  A17C               	btfss	sprintf@flag& (0+255),0,b
 22073  0057D8  D006               	goto	l11285
 22074                           
 22075                           ; BSR set to: 0
 22076                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22077  0057DA  C060  FFD9         	movff	sprintf@sp,fsr2l
 22078  0057DE  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22079  0057E2  0E20               	movlw	32
 22080  0057E4  D7F4               	goto	L56
 22081  0057E6                     l11285:
 22082                           
 22083                           ; BSR set to: 0
 22084                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22085  0057E6  0EC0               	movlw	192
 22086  0057E8  D8BF               	call	PL18	;call to abstracted procedure
 22087  0057EA  0E40               	movlw	64
 22088  0057EC  B4D8               	btfsc	status,2,c
 22089  0057EE  1968               	xorwf	??_sprintf& (0+255),w,b
 22090  0057F0  E106               	bnz	l11291
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22094  0057F2  C060  FFD9         	movff	sprintf@sp,fsr2l
 22095  0057F6  D905               	call	PL82	;call to abstracted procedure
 22096  0057F8                     l11289:
 22097                           
 22098                           ; BSR set to: 0
 22099  0057F8  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22100  0057FA  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22101  0057FC  D086               	goto	l11329
 22102  0057FE                     l11291:
 22103                           
 22104                           ; BSR set to: 0
 22105                           ;doprnt.c: 1457: else
 22106                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22107  0057FE  0EC0               	movlw	192
 22108  005800  D8B3               	call	PL18	;call to abstracted procedure
 22109  005802  0E80               	movlw	128
 22110  005804  B4D8               	btfsc	status,2,c
 22111  005806  1968               	xorwf	??_sprintf& (0+255),w,b
 22112  005808  E001 D07F          	bnz	l11329
 22113                           
 22114                           ; BSR set to: 0
 22115                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22116  00580C  C060  FFD9         	movff	sprintf@sp,fsr2l
 22117  005810  D8F8               	call	PL82	;call to abstracted procedure
 22118                           
 22119                           ; BSR set to: 0
 22120  005812  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22121  005814  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22122                           
 22123                           ; BSR set to: 0
 22124                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22125  005816  BB7C               	btfsc	sprintf@flag& (0+255),5,b
 22126  005818  D003               	goto	l11301
 22127                           
 22128                           ; BSR set to: 0
 22129  00581A  6B6F               	clrf	(_sprintf$2088+1)& (0+255),b
 22130  00581C  0E78               	movlw	120
 22131  00581E  D002               	goto	L57
 22132  005820                     l11301:
 22133                           
 22134                           ; BSR set to: 0
 22135  005820  6B6F               	clrf	(_sprintf$2088+1)& (0+255),b
 22136  005822  0E58               	movlw	88
 22137  005824                     L57:
 22138  005824  6F6E               	movwf	_sprintf$2088& (0+255),b
 22139                           
 22140                           ; BSR set to: 0
 22141  005826  C060  FFD9         	movff	sprintf@sp,fsr2l
 22142  00582A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22143  00582E  C06E  FFDF         	movff	_sprintf$2088,indf2
 22144  005832  D7E2               	goto	l11289
 22145  005834                     l11307:
 22146                           
 22147                           ; BSR set to: 0
 22148                           ;doprnt.c: 1493: case 0xC0:
 22149                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22150  005834  C073  F068         	movff	sprintf@prec,??_sprintf
 22151  005838  C074  F069         	movff	sprintf@prec+1,??_sprintf+1
 22152  00583C  90D8               	bcf	status,0,c
 22153  00583E  3768               	rlcf	??_sprintf& (0+255),f,b
 22154  005840  3769               	rlcf	(??_sprintf+1)& (0+255),f,b
 22155  005842  90D8               	bcf	status,0,c
 22156  005844  3768               	rlcf	??_sprintf& (0+255),f,b
 22157  005846  3769               	rlcf	(??_sprintf+1)& (0+255),f,b
 22158  005848  0E0C               	movlw	low _dpowers
 22159  00584A  2568               	addwf	??_sprintf& (0+255),w,b
 22160  00584C  6EF6               	movwf	tblptrl,c
 22161  00584E  0E6D               	movlw	high _dpowers
 22162  005850  D87C               	call	PL12	;call to abstracted procedure
 22163  005852  C077  F019         	movff	sprintf@_val,?___lldiv
 22164  005856  C078  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22165  00585A  C079  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22166  00585E  C07A  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22167  005862  EC35  F013         	call	___lldiv	;wreg free
 22168  005866  C01C  F029         	movff	?___lldiv+3,?___llmod+3
 22169  00586A  C01B  F028         	movff	?___lldiv+2,?___llmod+2
 22170  00586E  C01A  F027         	movff	?___lldiv+1,?___llmod+1
 22171  005872  C019  F026         	movff	?___lldiv,?___llmod
 22172  005876  0E0A               	movlw	10
 22173  005878  6E2A               	movwf	?___llmod+4,c
 22174  00587A  0E00               	movlw	0
 22175  00587C  6A2B               	clrf	?___llmod+5,c
 22176  00587E  6A2C               	clrf	?___llmod+6,c
 22177  005880  6A2D               	clrf	?___llmod+7,c
 22178  005882  EC2C  F012         	call	___llmod	;wreg free
 22179  005886  5026               	movf	?___llmod,w,c
 22180  005888  D02D               	goto	L58
 22181  00588A                     l11309:
 22182                           
 22183                           ; BSR set to: 0
 22184                           ;doprnt.c: 1506: {
 22185                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22186  00588A  D876               	call	PL20	;call to abstracted procedure
 22187  00588C  0E34               	movlw	low _hexpowers
 22188  00588E  2568               	addwf	??_sprintf& (0+255),w,b
 22189  005890  6EF6               	movwf	tblptrl,c
 22190  005892  0E6D               	movlw	high _hexpowers
 22191  005894  D85A               	call	PL12	;call to abstracted procedure
 22192  005896  EC35  F013         	call	___lldiv	;wreg free
 22193  00589A  5019               	movf	?___lldiv,w,c
 22194  00589C  0B0F               	andlw	15
 22195  00589E  6F6B               	movwf	sprintf@idx& (0+255),b
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22199  0058A0  BB7C               	btfsc	sprintf@flag& (0+255),5,b
 22200  0058A2  D004               	goto	l11315
 22201                           
 22202                           ; BSR set to: 0
 22203  0058A4  0E7B               	movlw	high STR_255
 22204  0058A6  6F71               	movwf	(_sprintf$2094+1)& (0+255),b
 22205  0058A8  0E2C               	movlw	low STR_255
 22206  0058AA  D003               	goto	L59
 22207  0058AC                     l11315:
 22208                           
 22209                           ; BSR set to: 0
 22210  0058AC  0E7B               	movlw	high STR_254
 22211  0058AE  6F71               	movwf	(_sprintf$2094+1)& (0+255),b
 22212  0058B0  0E1B               	movlw	low STR_254
 22213  0058B2                     L59:
 22214  0058B2  6F70               	movwf	_sprintf$2094& (0+255),b
 22215                           
 22216                           ; BSR set to: 0
 22217  0058B4  516B               	movf	sprintf@idx& (0+255),w,b
 22218  0058B6  2570               	addwf	_sprintf$2094& (0+255),w,b
 22219  0058B8  6F68               	movwf	??_sprintf& (0+255),b
 22220  0058BA  0E00               	movlw	0
 22221  0058BC  2171               	addwfc	(_sprintf$2094+1)& (0+255),w,b
 22222  0058BE  6F69               	movwf	(??_sprintf+1)& (0+255),b
 22223  0058C0  C068  FFF6         	movff	??_sprintf,tblptrl
 22224  0058C4  C069  FFF7         	movff	??_sprintf+1,tblptrh
 22225  0058C8  0008               	tblrd		*
 22226  0058CA  CFF5 F07B          	movff	tablat,sprintf@c
 22227                           
 22228                           ;doprnt.c: 1515: }
 22229                           ;doprnt.c: 1517: break;
 22230  0058CE  D016               	goto	l11325
 22231  0058D0                     l11319:
 22232                           
 22233                           ; BSR set to: 0
 22234                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22235  0058D0  D853               	call	PL20	;call to abstracted procedure
 22236  0058D2  0EDC               	movlw	low _octpowers
 22237  0058D4  2568               	addwf	??_sprintf& (0+255),w,b
 22238  0058D6  6EF6               	movwf	tblptrl,c
 22239  0058D8  0E6C               	movlw	high _octpowers
 22240  0058DA  D837               	call	PL12	;call to abstracted procedure
 22241  0058DC  EC35  F013         	call	___lldiv	;wreg free
 22242  0058E0  5019               	movf	?___lldiv,w,c
 22243  0058E2  0B07               	andlw	7
 22244  0058E4                     L58:
 22245  0058E4  0F30               	addlw	48
 22246  0058E6  6F7B               	movwf	sprintf@c& (0+255),b
 22247                           
 22248                           ;doprnt.c: 1527: break;
 22249  0058E8  D009               	goto	l11325
 22250  0058EA                     l11323:
 22251                           
 22252                           ; BSR set to: 0
 22253  0058EA  517C               	movf	sprintf@flag& (0+255),w,b
 22254  0058EC  0BC0               	andlw	192
 22255                           
 22256                           ; Switch size 1, requested type "space"
 22257                           ; Number of cases is 4, Range of values is 0 to 192
 22258                           ; switch strategies available:
 22259                           ; Name         Instructions Cycles
 22260                           ; simple_byte           13     7 (average)
 22261                           ;	Chosen strategy is simple_byte
 22262  0058EE  E0A2               	bz	l11307
 22263  0058F0  0A40               	xorlw	64	; case 64
 22264  0058F2  E0EE               	bz	l11319
 22265  0058F4  0AC0               	xorlw	192	; case 128
 22266  0058F6  E0C9               	bz	l11309
 22267  0058F8  0A40               	xorlw	64	; case 192
 22268  0058FA  E09C               	bz	l11307
 22269  0058FC                     l11325:
 22270                           
 22271                           ; BSR set to: 0
 22272                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22273  0058FC  C060  FFD9         	movff	sprintf@sp,fsr2l
 22274  005900  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22275  005904  C07B  FFDF         	movff	sprintf@c,indf2
 22276  005908  D777               	goto	l11289
 22277  00590A                     l11329:
 22278                           
 22279                           ; BSR set to: 0
 22280  00590A  0773               	decf	sprintf@prec& (0+255),f,b
 22281  00590C  A0D8               	btfss	status,0,c
 22282  00590E  0774               	decf	(sprintf@prec+1)& (0+255),f,b
 22283  005910  0100               	movlb	0	; () banked
 22284  005912  2973               	incf	sprintf@prec& (0+255),w,b
 22285  005914  B4D8               	btfsc	status,2,c
 22286  005916  2974               	incf	(sprintf@prec+1)& (0+255),w,b
 22287  005918  E1E8               	bnz	l11323
 22288                           
 22289                           ; BSR set to: 0
 22290                           ;doprnt.c: 1532: }
 22291                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22292  00591A  A77C               	btfss	sprintf@flag& (0+255),3,b
 22293  00591C  D00B               	goto	l11339
 22294                           
 22295                           ; BSR set to: 0
 22296  00591E  5176               	movf	(sprintf@width+1)& (0+255),w,b
 22297  005920  0A80               	xorlw	128
 22298  005922  0F80               	addlw	-128
 22299  005924  0E01               	movlw	1
 22300  005926  B4D8               	btfsc	status,2,c
 22301  005928  5D75               	subwf	sprintf@width& (0+255),w,b
 22302  00592A  E304               	bnc	l11339
 22303  00592C                     l11333:
 22304                           
 22305                           ; BSR set to: 0
 22306                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22307  00592C  C060  FFD9         	movff	sprintf@sp,fsr2l
 22308                           
 22309                           ; BSR set to: 0
 22310                           
 22311                           ; BSR set to: 0
 22312                           ;doprnt.c: 1538: while(--width);
 22313  005930  D836               	call	PL44	;call to abstracted procedure
 22314  005932  E1FC               	bnz	l11333
 22315  005934                     l11339:
 22316                           
 22317                           ; BSR set to: 0
 22318  005934  D853               	call	PL64	;call to abstracted procedure
 22319  005936  0100               	movlb	0	; () banked
 22320  005938  677B               	tstfsz	sprintf@c& (0+255),b
 22321  00593A  D4CA               	goto	l11005
 22322  00593C                     l11341:
 22323                           
 22324                           ; BSR set to: 0
 22325                           ;doprnt.c: 1545: *sp = 0;
 22326  00593C  C060  FFD9         	movff	sprintf@sp,fsr2l
 22327  005940  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22328  005944  0E00               	movlw	0
 22329  005946  6EDF               	movwf	indf2,c
 22330                           
 22331                           ; BSR set to: 0
 22332  005948  0C00               	retlw	0
 22333  00594A                     __end_of_sprintf:
 22334                           	opt stack 0
 22335  00594A                     PL12:
 22336                           	opt stack 25
 22337  00594A  2169               	addwfc	(??_sprintf+1)& (0+255),w,b
 22338  00594C  6EF7               	movwf	tblptrh,c
 22339  00594E  0009               	tblrd		*+
 22340  005950  CFF5 F01D          	movff	tablat,?___lldiv+4
 22341  005954  0009               	tblrd		*+
 22342  005956  CFF5 F01E          	movff	tablat,?___lldiv+5
 22343  00595A  0009               	tblrd		*+
 22344  00595C  CFF5 F01F          	movff	tablat,?___lldiv+6
 22345  005960  000A               	tblrd		*-
 22346  005962  CFF5 F020          	movff	tablat,?___lldiv+7
 22347  005966  0012               	return	
 22348  005968                     __end_ofPL12:
 22349                           	opt stack 0
 22350  005968                     PL18:
 22351                           	opt stack 25
 22352  005968  157C               	andwf	sprintf@flag& (0+255),w,b
 22353  00596A  6F68               	movwf	??_sprintf& (0+255),b
 22354  00596C  0E08               	movlw	8
 22355  00596E  157D               	andwf	(sprintf@flag+1)& (0+255),w,b
 22356  005970  6F69               	movwf	(??_sprintf+1)& (0+255),b
 22357  005972  5169               	movf	(??_sprintf+1)& (0+255),w,b
 22358  005974  0A08               	xorlw	8
 22359  005976  0012               	return	
 22360  005978                     __end_ofPL18:
 22361                           	opt stack 0
 22362  005978                     PL20:
 22363                           	opt stack 25
 22364  005978  C077  F019         	movff	sprintf@_val,?___lldiv
 22365  00597C  C078  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22366  005980  C079  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22367  005984  C07A  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22368  005988  C073  F068         	movff	sprintf@prec,??_sprintf
 22369  00598C  C074  F069         	movff	sprintf@prec+1,??_sprintf+1
 22370  005990  90D8               	bcf	status,0,c
 22371  005992  3768               	rlcf	??_sprintf& (0+255),f,b
 22372  005994  3769               	rlcf	(??_sprintf+1)& (0+255),f,b
 22373  005996  90D8               	bcf	status,0,c
 22374  005998  3768               	rlcf	??_sprintf& (0+255),f,b
 22375  00599A  3769               	rlcf	(??_sprintf+1)& (0+255),f,b
 22376  00599C  0012               	return	
 22377  00599E                     __end_ofPL20:
 22378                           	opt stack 0
 22379  00599E                     PL44:
 22380                           	opt stack 25
 22381  00599E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22382  0059A2  0E20               	movlw	32
 22383  0059A4  6EDF               	movwf	indf2,c
 22384  0059A6  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22385  0059A8  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22386  0059AA  0775               	decf	sprintf@width& (0+255),f,b
 22387  0059AC  A0D8               	btfss	status,0,c
 22388  0059AE  0776               	decf	(sprintf@width+1)& (0+255),f,b
 22389  0059B0  0100               	movlb	0	; () banked
 22390  0059B2  5176               	movf	(sprintf@width+1)& (0+255),w,b
 22391  0059B4  1175               	iorwf	sprintf@width& (0+255),w,b
 22392  0059B6  0012               	return	
 22393  0059B8                     __end_ofPL44:
 22394                           	opt stack 0
 22395  0059B8                     PL50:
 22396                           	opt stack 25
 22397  0059B8  6ED9               	movwf	fsr2l,c
 22398  0059BA  6ADA               	clrf	fsr2h,c
 22399  0059BC  CFDE F077          	movff	postinc2,sprintf@_val
 22400  0059C0  CFDE F078          	movff	postinc2,sprintf@_val+1
 22401  0059C4  CFDE F079          	movff	postinc2,sprintf@_val+2
 22402  0059C8  CFDE F07A          	movff	postinc2,sprintf@_val+3
 22403  0059CC  0C04               	retlw	4
 22404  0059CE                     __end_ofPL50:
 22405                           	opt stack 0
 22406  0059CE                     PL60:
 22407                           	opt stack 25
 22408  0059CE  C060  FFD9         	movff	sprintf@sp,fsr2l
 22409  0059D2  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22410  0059D6  0E20               	movlw	32
 22411  0059D8  6EDF               	movwf	indf2,c
 22412  0059DA  0C20               	retlw	32
 22413  0059DC                     __end_ofPL60:
 22414                           	opt stack 0
 22415  0059DC                     PL64:
 22416                           	opt stack 25
 22417  0059DC  C062  FFF6         	movff	sprintf@f,tblptrl
 22418  0059E0  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22419  0059E4  4B62               	infsnz	sprintf@f& (0+255),f,b
 22420  0059E6  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22421  0059E8  0008               	tblrd		*
 22422  0059EA  CFF5 F07B          	movff	tablat,sprintf@c
 22423  0059EE  0012               	return	
 22424  0059F0                     __end_ofPL64:
 22425                           	opt stack 0
 22426  0059F0                     PL78:
 22427                           	opt stack 25
 22428  0059F0  4B62               	infsnz	sprintf@f& (0+255),f,b
 22429  0059F2  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22430  0059F4  C062  FFF6         	movff	sprintf@f,tblptrl
 22431  0059F8  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22432  0059FC  0008               	tblrd		*
 22433  0059FE  50F5               	movf	tablat,w,c
 22434  005A00  0012               	return	
 22435  005A02                     __end_ofPL78:
 22436                           	opt stack 0
 22437  005A02                     PL82:
 22438                           	opt stack 25
 22439  005A02  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22440  005A06  0E30               	movlw	48
 22441  005A08  6EDF               	movwf	indf2,c
 22442  005A0A  0C30               	retlw	48
 22443  005A0C                     __end_ofPL82:
 22444                           	opt stack 0
 22445  005A0C                     PL96:
 22446                           	opt stack 25
 22447  005A0C  A0D8               	btfss	status,0,c
 22448  005A0E  0776               	decf	(sprintf@width+1)& (0+255),f,b
 22449  005A10  0100               	movlb	0	; () banked
 22450  005A12  2975               	incf	sprintf@width& (0+255),w,b
 22451  005A14  0012               	return	
 22452  005A16                     __end_ofPL96:
 22453                           	opt stack 0
 22454                           tblptru	equ	0xFF8
 22455                           tblptrh	equ	0xFF7
 22456                           tblptrl	equ	0xFF6
 22457                           tablat	equ	0xFF5
 22458                           prodh	equ	0xFF4
 22459                           prodl	equ	0xFF3
 22460                           intcon	equ	0xFF2
 22461                           indf0	equ	0xFEF
 22462                           postinc0	equ	0xFEE
 22463                           fsr0h	equ	0xFEA
 22464                           fsr0l	equ	0xFE9
 22465                           wreg	equ	0xFE8
 22466                           indf1	equ	0xFE7
 22467                           postinc1	equ	0xFE6
 22468                           postdec1	equ	0xFE5
 22469                           fsr1h	equ	0xFE2
 22470                           fsr1l	equ	0xFE1
 22471                           indf2	equ	0xFDF
 22472                           postinc2	equ	0xFDE
 22473                           postdec2	equ	0xFDD
 22474                           plusw2	equ	0xFDB
 22475                           fsr2h	equ	0xFDA
 22476                           fsr2l	equ	0xFD9
 22477                           status	equ	0xFD8
 22478                           
 22479 ;; *************** function ___wmul *****************
 22480 ;; Defined at:
 22481 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 22482 ;; Parameters:    Size  Location     Type
 22483 ;;  multiplier      2   24[COMRAM] unsigned int 
 22484 ;;  multiplicand    2   26[COMRAM] unsigned int 
 22485 ;; Auto vars:     Size  Location     Type
 22486 ;;  product         2   28[COMRAM] unsigned int 
 22487 ;; Return value:  Size  Location     Type
 22488 ;;                  2   24[COMRAM] unsigned int 
 22489 ;; Registers used:
 22490 ;;		wreg, status,2, status,0, prodl, prodh
 22491 ;; Tracked objects:
 22492 ;;		On entry : 0/3
 22493 ;;		On exit  : 0/0
 22494 ;;		Unchanged: 0/0
 22495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22496 ;;      Params:         4       0       0       0       0       0       0
 22497 ;;      Locals:         2       0       0       0       0       0       0
 22498 ;;      Temps:          0       0       0       0       0       0       0
 22499 ;;      Totals:         6       0       0       0       0       0       0
 22500 ;;Total ram usage:        6 bytes
 22501 ;; Hardware stack levels used:    1
 22502 ;; Hardware stack levels required when called:    2
 22503 ;; This function calls:
 22504 ;;		Nothing
 22505 ;; This function is called by:
 22506 ;;		_sprintf
 22507 ;;		_atoi
 22508 ;; This function uses a non-reentrant model
 22509 ;;
 22510                           
 22511                           	psect	text56
 22512  001E6C                     __ptext56:
 22513                           	opt stack 0
 22514  001E6C                     ___wmul:
 22515                           	opt stack 25
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;incstack = 0
 22519                           ;incstack = 0
 22520  001E6C  5019               	movf	___wmul@multiplier,w,c
 22521  001E6E  021B               	mulwf	___wmul@multiplicand,c
 22522  001E70  CFF3 F01D          	movff	prodl,___wmul@product
 22523  001E74  CFF4 F01E          	movff	prodh,___wmul@product+1
 22524  001E78  5019               	movf	___wmul@multiplier,w,c
 22525  001E7A  021C               	mulwf	___wmul@multiplicand+1,c
 22526  001E7C  D808               	call	PL84	;call to abstracted procedure
 22527  001E7E  501A               	movf	___wmul@multiplier+1,w,c
 22528  001E80  021B               	mulwf	___wmul@multiplicand,c
 22529  001E82  D805               	call	PL84	;call to abstracted procedure
 22530  001E84  C01D  F019         	movff	___wmul@product,?___wmul
 22531  001E88  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 22532  001E8C  0012               	return	
 22533  001E8E                     __end_of___wmul:
 22534                           	opt stack 0
 22535  001E8E                     PL84:
 22536                           	opt stack 25
 22537  001E8E  CFF3 FFF4          	movff	prodl,prodh
 22538  001E92  6AF3               	clrf	prodl,c
 22539  001E94  50F3               	movf	prodl,w,c
 22540  001E96  261D               	addwf	___wmul@product,f,c
 22541  001E98  50F4               	movf	prodh,w,c
 22542  001E9A  221E               	addwfc	___wmul@product+1,f,c
 22543  001E9C  0012               	return	
 22544  001E9E                     __end_ofPL84:
 22545                           	opt stack 0
 22546                           tblptru	equ	0xFF8
 22547                           tblptrh	equ	0xFF7
 22548                           tblptrl	equ	0xFF6
 22549                           tablat	equ	0xFF5
 22550                           prodh	equ	0xFF4
 22551                           prodl	equ	0xFF3
 22552                           intcon	equ	0xFF2
 22553                           indf0	equ	0xFEF
 22554                           postinc0	equ	0xFEE
 22555                           fsr0h	equ	0xFEA
 22556                           fsr0l	equ	0xFE9
 22557                           wreg	equ	0xFE8
 22558                           indf1	equ	0xFE7
 22559                           postinc1	equ	0xFE6
 22560                           postdec1	equ	0xFE5
 22561                           fsr1h	equ	0xFE2
 22562                           fsr1l	equ	0xFE1
 22563                           indf2	equ	0xFDF
 22564                           postinc2	equ	0xFDE
 22565                           postdec2	equ	0xFDD
 22566                           plusw2	equ	0xFDB
 22567                           fsr2h	equ	0xFDA
 22568                           fsr2l	equ	0xFD9
 22569                           status	equ	0xFD8
 22570                           
 22571 ;; *************** function ___llmod *****************
 22572 ;; Defined at:
 22573 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 22574 ;; Parameters:    Size  Location     Type
 22575 ;;  dividend        4   37[COMRAM] unsigned long 
 22576 ;;  divisor         4   41[COMRAM] unsigned long 
 22577 ;; Auto vars:     Size  Location     Type
 22578 ;;  counter         1   45[COMRAM] unsigned char 
 22579 ;; Return value:  Size  Location     Type
 22580 ;;                  4   37[COMRAM] unsigned long 
 22581 ;; Registers used:
 22582 ;;		wreg, status,2, status,0
 22583 ;; Tracked objects:
 22584 ;;		On entry : F/0
 22585 ;;		On exit  : F/0
 22586 ;;		Unchanged: F/0
 22587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22588 ;;      Params:         8       0       0       0       0       0       0
 22589 ;;      Locals:         1       0       0       0       0       0       0
 22590 ;;      Temps:          0       0       0       0       0       0       0
 22591 ;;      Totals:         9       0       0       0       0       0       0
 22592 ;;Total ram usage:        9 bytes
 22593 ;; Hardware stack levels used:    1
 22594 ;; Hardware stack levels required when called:    2
 22595 ;; This function calls:
 22596 ;;		Nothing
 22597 ;; This function is called by:
 22598 ;;		_sprintf
 22599 ;;		_ultoa
 22600 ;; This function uses a non-reentrant model
 22601 ;;
 22602                           
 22603                           	psect	text57
 22604  002458                     __ptext57:
 22605                           	opt stack 0
 22606  002458                     ___llmod:
 22607                           	opt stack 24
 22608                           
 22609                           ; BSR set to: 0
 22610                           
 22611                           ;incstack = 0
 22612                           ;incstack = 0
 22613  002458  502D               	movf	___llmod@divisor+3,w,c
 22614  00245A  102A               	iorwf	___llmod@divisor,w,c
 22615  00245C  102B               	iorwf	___llmod@divisor+1,w,c
 22616  00245E  102C               	iorwf	___llmod@divisor+2,w,c
 22617  002460  E023               	bz	l2244
 22618                           
 22619                           ; BSR set to: 0
 22620  002462  0E01               	movlw	1
 22621  002464  6E2E               	movwf	___llmod@counter,c
 22622  002466  D006               	goto	l12355
 22623  002468                     l12353:
 22624                           
 22625                           ; BSR set to: 0
 22626  002468  90D8               	bcf	status,0,c
 22627  00246A  362A               	rlcf	___llmod@divisor,f,c
 22628  00246C  362B               	rlcf	___llmod@divisor+1,f,c
 22629  00246E  362C               	rlcf	___llmod@divisor+2,f,c
 22630  002470  362D               	rlcf	___llmod@divisor+3,f,c
 22631  002472  2A2E               	incf	___llmod@counter,f,c
 22632  002474                     l12355:
 22633                           
 22634                           ; BSR set to: 0
 22635  002474  AE2D               	btfss	___llmod@divisor+3,7,c
 22636  002476  D7F8               	goto	l12353
 22637  002478                     l12357:
 22638                           
 22639                           ; BSR set to: 0
 22640  002478  502A               	movf	___llmod@divisor,w,c
 22641  00247A  5C26               	subwf	___llmod@dividend,w,c
 22642  00247C  502B               	movf	___llmod@divisor+1,w,c
 22643  00247E  5827               	subwfb	___llmod@dividend+1,w,c
 22644  002480  502C               	movf	___llmod@divisor+2,w,c
 22645  002482  5828               	subwfb	___llmod@dividend+2,w,c
 22646  002484  502D               	movf	___llmod@divisor+3,w,c
 22647  002486  5829               	subwfb	___llmod@dividend+3,w,c
 22648  002488  E308               	bnc	l12361
 22649                           
 22650                           ; BSR set to: 0
 22651  00248A  502A               	movf	___llmod@divisor,w,c
 22652  00248C  5E26               	subwf	___llmod@dividend,f,c
 22653  00248E  502B               	movf	___llmod@divisor+1,w,c
 22654  002490  5A27               	subwfb	___llmod@dividend+1,f,c
 22655  002492  502C               	movf	___llmod@divisor+2,w,c
 22656  002494  5A28               	subwfb	___llmod@dividend+2,f,c
 22657  002496  502D               	movf	___llmod@divisor+3,w,c
 22658  002498  5A29               	subwfb	___llmod@dividend+3,f,c
 22659  00249A                     l12361:
 22660                           
 22661                           ; BSR set to: 0
 22662  00249A  90D8               	bcf	status,0,c
 22663  00249C  322D               	rrcf	___llmod@divisor+3,f,c
 22664  00249E  322C               	rrcf	___llmod@divisor+2,f,c
 22665  0024A0  322B               	rrcf	___llmod@divisor+1,f,c
 22666  0024A2  322A               	rrcf	___llmod@divisor,f,c
 22667                           
 22668                           ; BSR set to: 0
 22669  0024A4  2E2E               	decfsz	___llmod@counter,f,c
 22670  0024A6  D7E8               	goto	l12357
 22671  0024A8                     l2244:
 22672                           
 22673                           ; BSR set to: 0
 22674  0024A8  C026  F026         	movff	___llmod@dividend,?___llmod
 22675  0024AC  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 22676  0024B0  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 22677  0024B4  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 22678                           
 22679                           ; BSR set to: 0
 22680  0024B8  0012               	return	
 22681  0024BA                     __end_of___llmod:
 22682                           	opt stack 0
 22683                           tblptru	equ	0xFF8
 22684                           tblptrh	equ	0xFF7
 22685                           tblptrl	equ	0xFF6
 22686                           tablat	equ	0xFF5
 22687                           prodh	equ	0xFF4
 22688                           prodl	equ	0xFF3
 22689                           intcon	equ	0xFF2
 22690                           indf0	equ	0xFEF
 22691                           postinc0	equ	0xFEE
 22692                           fsr0h	equ	0xFEA
 22693                           fsr0l	equ	0xFE9
 22694                           wreg	equ	0xFE8
 22695                           indf1	equ	0xFE7
 22696                           postinc1	equ	0xFE6
 22697                           postdec1	equ	0xFE5
 22698                           fsr1h	equ	0xFE2
 22699                           fsr1l	equ	0xFE1
 22700                           indf2	equ	0xFDF
 22701                           postinc2	equ	0xFDE
 22702                           postdec2	equ	0xFDD
 22703                           plusw2	equ	0xFDB
 22704                           fsr2h	equ	0xFDA
 22705                           fsr2l	equ	0xFD9
 22706                           status	equ	0xFD8
 22707                           
 22708 ;; *************** function ___lldiv *****************
 22709 ;; Defined at:
 22710 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 22711 ;; Parameters:    Size  Location     Type
 22712 ;;  dividend        4   24[COMRAM] unsigned long 
 22713 ;;  divisor         4   28[COMRAM] unsigned long 
 22714 ;; Auto vars:     Size  Location     Type
 22715 ;;  quotient        4   32[COMRAM] unsigned long 
 22716 ;;  counter         1   36[COMRAM] unsigned char 
 22717 ;; Return value:  Size  Location     Type
 22718 ;;                  4   24[COMRAM] unsigned long 
 22719 ;; Registers used:
 22720 ;;		wreg, status,2, status,0
 22721 ;; Tracked objects:
 22722 ;;		On entry : F/0
 22723 ;;		On exit  : F/0
 22724 ;;		Unchanged: F/0
 22725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22726 ;;      Params:         8       0       0       0       0       0       0
 22727 ;;      Locals:         5       0       0       0       0       0       0
 22728 ;;      Temps:          0       0       0       0       0       0       0
 22729 ;;      Totals:        13       0       0       0       0       0       0
 22730 ;;Total ram usage:       13 bytes
 22731 ;; Hardware stack levels used:    1
 22732 ;; Hardware stack levels required when called:    2
 22733 ;; This function calls:
 22734 ;;		Nothing
 22735 ;; This function is called by:
 22736 ;;		_sprintf
 22737 ;;		_ultoa
 22738 ;; This function uses a non-reentrant model
 22739 ;;
 22740                           
 22741                           	psect	text58
 22742  00266A                     __ptext58:
 22743                           	opt stack 0
 22744  00266A                     ___lldiv:
 22745                           	opt stack 24
 22746                           
 22747                           ; BSR set to: 0
 22748                           
 22749                           ; BSR set to: 0
 22750                           ;incstack = 0
 22751                           ;incstack = 0
 22752  00266A  6A21               	clrf	___lldiv@quotient,c
 22753  00266C  6A22               	clrf	___lldiv@quotient+1,c
 22754  00266E  6A23               	clrf	___lldiv@quotient+2,c
 22755  002670  6A24               	clrf	___lldiv@quotient+3,c
 22756                           
 22757                           ; BSR set to: 0
 22758  002672  5020               	movf	___lldiv@divisor+3,w,c
 22759  002674  101D               	iorwf	___lldiv@divisor,w,c
 22760  002676  101E               	iorwf	___lldiv@divisor+1,w,c
 22761  002678  101F               	iorwf	___lldiv@divisor+2,w,c
 22762  00267A  E029               	bz	l2234
 22763                           
 22764                           ; BSR set to: 0
 22765  00267C  0E01               	movlw	1
 22766  00267E  6E25               	movwf	___lldiv@counter,c
 22767  002680  D006               	goto	l12335
 22768  002682                     l12333:
 22769                           
 22770                           ; BSR set to: 0
 22771  002682  90D8               	bcf	status,0,c
 22772  002684  361D               	rlcf	___lldiv@divisor,f,c
 22773  002686  361E               	rlcf	___lldiv@divisor+1,f,c
 22774  002688  361F               	rlcf	___lldiv@divisor+2,f,c
 22775  00268A  3620               	rlcf	___lldiv@divisor+3,f,c
 22776  00268C  2A25               	incf	___lldiv@counter,f,c
 22777  00268E                     l12335:
 22778                           
 22779                           ; BSR set to: 0
 22780  00268E  AE20               	btfss	___lldiv@divisor+3,7,c
 22781  002690  D7F8               	goto	l12333
 22782  002692                     l12337:
 22783                           
 22784                           ; BSR set to: 0
 22785  002692  90D8               	bcf	status,0,c
 22786  002694  3621               	rlcf	___lldiv@quotient,f,c
 22787  002696  3622               	rlcf	___lldiv@quotient+1,f,c
 22788  002698  3623               	rlcf	___lldiv@quotient+2,f,c
 22789  00269A  3624               	rlcf	___lldiv@quotient+3,f,c
 22790                           
 22791                           ; BSR set to: 0
 22792  00269C  501D               	movf	___lldiv@divisor,w,c
 22793  00269E  5C19               	subwf	___lldiv@dividend,w,c
 22794  0026A0  501E               	movf	___lldiv@divisor+1,w,c
 22795  0026A2  581A               	subwfb	___lldiv@dividend+1,w,c
 22796  0026A4  501F               	movf	___lldiv@divisor+2,w,c
 22797  0026A6  581B               	subwfb	___lldiv@dividend+2,w,c
 22798  0026A8  5020               	movf	___lldiv@divisor+3,w,c
 22799  0026AA  581C               	subwfb	___lldiv@dividend+3,w,c
 22800  0026AC  E309               	bnc	l12345
 22801                           
 22802                           ; BSR set to: 0
 22803  0026AE  501D               	movf	___lldiv@divisor,w,c
 22804  0026B0  5E19               	subwf	___lldiv@dividend,f,c
 22805  0026B2  501E               	movf	___lldiv@divisor+1,w,c
 22806  0026B4  5A1A               	subwfb	___lldiv@dividend+1,f,c
 22807  0026B6  501F               	movf	___lldiv@divisor+2,w,c
 22808  0026B8  5A1B               	subwfb	___lldiv@dividend+2,f,c
 22809  0026BA  5020               	movf	___lldiv@divisor+3,w,c
 22810  0026BC  5A1C               	subwfb	___lldiv@dividend+3,f,c
 22811                           
 22812                           ; BSR set to: 0
 22813  0026BE  8021               	bsf	___lldiv@quotient,0,c
 22814  0026C0                     l12345:
 22815                           
 22816                           ; BSR set to: 0
 22817  0026C0  90D8               	bcf	status,0,c
 22818  0026C2  3220               	rrcf	___lldiv@divisor+3,f,c
 22819  0026C4  321F               	rrcf	___lldiv@divisor+2,f,c
 22820  0026C6  321E               	rrcf	___lldiv@divisor+1,f,c
 22821  0026C8  321D               	rrcf	___lldiv@divisor,f,c
 22822                           
 22823                           ; BSR set to: 0
 22824  0026CA  2E25               	decfsz	___lldiv@counter,f,c
 22825  0026CC  D7E2               	goto	l12337
 22826  0026CE                     l2234:
 22827                           
 22828                           ; BSR set to: 0
 22829  0026CE  C021  F019         	movff	___lldiv@quotient,?___lldiv
 22830  0026D2  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 22831  0026D6  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 22832  0026DA  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 22833                           
 22834                           ; BSR set to: 0
 22835  0026DE  0012               	return	
 22836  0026E0                     __end_of___lldiv:
 22837                           	opt stack 0
 22838                           tblptru	equ	0xFF8
 22839                           tblptrh	equ	0xFF7
 22840                           tblptrl	equ	0xFF6
 22841                           tablat	equ	0xFF5
 22842                           prodh	equ	0xFF4
 22843                           prodl	equ	0xFF3
 22844                           intcon	equ	0xFF2
 22845                           indf0	equ	0xFEF
 22846                           postinc0	equ	0xFEE
 22847                           fsr0h	equ	0xFEA
 22848                           fsr0l	equ	0xFE9
 22849                           wreg	equ	0xFE8
 22850                           indf1	equ	0xFE7
 22851                           postinc1	equ	0xFE6
 22852                           postdec1	equ	0xFE5
 22853                           fsr1h	equ	0xFE2
 22854                           fsr1l	equ	0xFE1
 22855                           indf2	equ	0xFDF
 22856                           postinc2	equ	0xFDE
 22857                           postdec2	equ	0xFDD
 22858                           plusw2	equ	0xFDB
 22859                           fsr2h	equ	0xFDA
 22860                           fsr2l	equ	0xFD9
 22861                           status	equ	0xFD8
 22862                           
 22863 ;; *************** function _isdigit *****************
 22864 ;; Defined at:
 22865 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 22866 ;; Parameters:    Size  Location     Type
 22867 ;;  c               1    wreg     unsigned char 
 22868 ;; Auto vars:     Size  Location     Type
 22869 ;;  c               1   26[COMRAM] unsigned char 
 22870 ;; Return value:  Size  Location     Type
 22871 ;;		None               void
 22872 ;; Registers used:
 22873 ;;		wreg, status,2, status,0
 22874 ;; Tracked objects:
 22875 ;;		On entry : 0/3
 22876 ;;		On exit  : 0/0
 22877 ;;		Unchanged: 0/0
 22878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22879 ;;      Params:         0       0       0       0       0       0       0
 22880 ;;      Locals:         2       0       0       0       0       0       0
 22881 ;;      Temps:          1       0       0       0       0       0       0
 22882 ;;      Totals:         3       0       0       0       0       0       0
 22883 ;;Total ram usage:        3 bytes
 22884 ;; Hardware stack levels used:    1
 22885 ;; Hardware stack levels required when called:    2
 22886 ;; This function calls:
 22887 ;;		Nothing
 22888 ;; This function is called by:
 22889 ;;		_sprintf
 22890 ;;		_atoi
 22891 ;; This function uses a non-reentrant model
 22892 ;;
 22893                           
 22894                           	psect	text59
 22895  001D9E                     __ptext59:
 22896                           	opt stack 0
 22897  001D9E                     _isdigit:
 22898                           	opt stack 25
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;incstack = 0
 22902                           ;incstack = 0
 22903                           ;isdigit@c stored from wreg
 22904  001D9E  CFE8 F01B          	movff	wreg,isdigit@c
 22905  001DA2  6A1A               	clrf	_isdigit$2846,c
 22906  001DA4  0E3A               	movlw	58
 22907  001DA6  601B               	cpfslt	isdigit@c,c
 22908  001DA8  D005               	goto	l12293
 22909  001DAA  0E2F               	movlw	47
 22910  001DAC  641B               	cpfsgt	isdigit@c,c
 22911  001DAE  D002               	goto	l12293
 22912  001DB0  0E01               	movlw	1
 22913  001DB2  6E1A               	movwf	_isdigit$2846,c
 22914  001DB4                     l12293:
 22915  001DB4  C01A  F019         	movff	_isdigit$2846,??_isdigit
 22916  001DB8  3019               	rrcf	??_isdigit,w,c
 22917  001DBA  0012               	return	
 22918  001DBC                     __end_of_isdigit:
 22919                           	opt stack 0
 22920                           tblptru	equ	0xFF8
 22921                           tblptrh	equ	0xFF7
 22922                           tblptrl	equ	0xFF6
 22923                           tablat	equ	0xFF5
 22924                           prodh	equ	0xFF4
 22925                           prodl	equ	0xFF3
 22926                           intcon	equ	0xFF2
 22927                           indf0	equ	0xFEF
 22928                           postinc0	equ	0xFEE
 22929                           fsr0h	equ	0xFEA
 22930                           fsr0l	equ	0xFE9
 22931                           wreg	equ	0xFE8
 22932                           indf1	equ	0xFE7
 22933                           postinc1	equ	0xFE6
 22934                           postdec1	equ	0xFE5
 22935                           fsr1h	equ	0xFE2
 22936                           fsr1l	equ	0xFE1
 22937                           indf2	equ	0xFDF
 22938                           postinc2	equ	0xFDE
 22939                           postdec2	equ	0xFDD
 22940                           plusw2	equ	0xFDB
 22941                           fsr2h	equ	0xFDA
 22942                           fsr2l	equ	0xFD9
 22943                           status	equ	0xFD8
 22944                           
 22945 ;; *************** function _fifo_read *****************
 22946 ;; Defined at:
 22947 ;;		line 29 in file "fifo.c"
 22948 ;; Parameters:    Size  Location     Type
 22949 ;;  f               2   24[COMRAM] PTR struct .
 22950 ;;		 -> inputFifo(8), 
 22951 ;;  buf             2   26[COMRAM] PTR void 
 22952 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22953 ;;  nbytes          2   28[COMRAM] unsigned short 
 22954 ;; Auto vars:     Size  Location     Type
 22955 ;;  i               2   36[COMRAM] unsigned short 
 22956 ;;  p               2   34[COMRAM] PTR unsigned char 
 22957 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22958 ;; Return value:  Size  Location     Type
 22959 ;;                  2   24[COMRAM] unsigned short 
 22960 ;; Registers used:
 22961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 22962 ;; Tracked objects:
 22963 ;;		On entry : C/0
 22964 ;;		On exit  : C/0
 22965 ;;		Unchanged: C/0
 22966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22967 ;;      Params:         6       0       0       0       0       0       0
 22968 ;;      Locals:         4       0       0       0       0       0       0
 22969 ;;      Temps:          4       0       0       0       0       0       0
 22970 ;;      Totals:        14       0       0       0       0       0       0
 22971 ;;Total ram usage:       14 bytes
 22972 ;; Hardware stack levels used:    1
 22973 ;; Hardware stack levels required when called:    2
 22974 ;; This function calls:
 22975 ;;		Nothing
 22976 ;; This function is called by:
 22977 ;;		_main
 22978 ;;		_doModeVerbose
 22979 ;;		_doModeVscp
 22980 ;;		_doModeSLCAN
 22981 ;; This function uses a non-reentrant model
 22982 ;;
 22983                           
 22984                           	psect	text60
 22985  002F28                     __ptext60:
 22986                           	opt stack 0
 22987  002F28                     _fifo_read:
 22988                           	opt stack 26
 22989                           
 22990                           ;fifo.c: 30: uint16_t i;
 22991                           ;fifo.c: 31: uint8_t *p;
 22992                           ;fifo.c: 32: p = buf;
 22993                           
 22994                           ;incstack = 0
 22995                           ;incstack = 0
 22996  002F28  C01B  F023         	movff	fifo_read@buf,fifo_read@p
 22997  002F2C  C01C  F024         	movff	fifo_read@buf+1,fifo_read@p+1
 22998                           
 22999                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 23000  002F30  6A25               	clrf	fifo_read@i,c
 23001  002F32  6A26               	clrf	fifo_read@i+1,c
 23002  002F34  D045               	goto	l12665
 23003  002F36                     l12651:
 23004                           
 23005                           ;fifo.c: 36: if (f->tail != f->head) {
 23006  002F36  EE20 F002          	lfsr	2,2
 23007  002F3A  D84C               	call	PL26	;call to abstracted procedure
 23008  002F3C  B4D8               	btfsc	status,2,c
 23009  002F3E  18E7               	xorwf	indf1,w,c
 23010  002F40  E038               	bz	l1414
 23011                           
 23012                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 23013  002F42  EE20 F004          	lfsr	2,4
 23014  002F46  5019               	movf	fifo_read@f,w,c
 23015  002F48  26D9               	addwf	fsr2l,f,c
 23016  002F4A  501A               	movf	fifo_read@f+1,w,c
 23017  002F4C  22DA               	addwfc	fsr2h,f,c
 23018  002F4E  CFDE F01F          	movff	postinc2,??_fifo_read
 23019  002F52  CFDD F020          	movff	postdec2,??_fifo_read+1
 23020  002F56  C019  FFD9         	movff	fifo_read@f,fsr2l
 23021  002F5A  C01A  FFDA         	movff	fifo_read@f+1,fsr2h
 23022  002F5E  CFDE F021          	movff	postinc2,??_fifo_read+2
 23023  002F62  CFDD F022          	movff	postdec2,??_fifo_read+3
 23024  002F66  501F               	movf	??_fifo_read,w,c
 23025  002F68  2421               	addwf	??_fifo_read+2,w,c
 23026  002F6A  6ED9               	movwf	fsr2l,c
 23027  002F6C  5020               	movf	??_fifo_read+1,w,c
 23028  002F6E  2022               	addwfc	??_fifo_read+3,w,c
 23029  002F70  6EDA               	movwf	fsr2h,c
 23030  002F72  C023  FFE1         	movff	fifo_read@p,fsr1l
 23031  002F76  C024  FFE2         	movff	fifo_read@p+1,fsr1h
 23032  002F7A  CFDF FFE7          	movff	indf2,indf1
 23033  002F7E  4A23               	infsnz	fifo_read@p,f,c
 23034  002F80  2A24               	incf	fifo_read@p+1,f,c
 23035                           
 23036                           ;fifo.c: 38: f->tail++;
 23037  002F82  EE20 F004          	lfsr	2,4
 23038  002F86  5019               	movf	fifo_read@f,w,c
 23039  002F88  26D9               	addwf	fsr2l,f,c
 23040  002F8A  501A               	movf	fifo_read@f+1,w,c
 23041  002F8C  22DA               	addwfc	fsr2h,f,c
 23042  002F8E  2ADE               	incf	postinc2,f,c
 23043  002F90  0E00               	movlw	0
 23044  002F92  22DD               	addwfc	postdec2,f,c
 23045                           
 23046                           ;fifo.c: 39: if (f->tail == f->size) {
 23047  002F94  EE20 F006          	lfsr	2,6
 23048  002F98  D81D               	call	PL26	;call to abstracted procedure
 23049  002F9A  B4D8               	btfsc	status,2,c
 23050  002F9C  18E7               	xorwf	indf1,w,c
 23051  002F9E  E10E               	bnz	l12663
 23052                           
 23053                           ;fifo.c: 40: f->tail = 0;
 23054  002FA0  EE20 F004          	lfsr	2,4
 23055  002FA4  5019               	movf	fifo_read@f,w,c
 23056  002FA6  26D9               	addwf	fsr2l,f,c
 23057  002FA8  501A               	movf	fifo_read@f+1,w,c
 23058  002FAA  22DA               	addwfc	fsr2h,f,c
 23059  002FAC  6ADE               	clrf	postinc2,c
 23060  002FAE  6ADD               	clrf	postdec2,c
 23061  002FB0  D005               	goto	l12663
 23062  002FB2                     l1414:
 23063                           
 23064                           ;fifo.c: 43: else {
 23065                           ;fifo.c: 44: return i;
 23066  002FB2  C025  F019         	movff	fifo_read@i,?_fifo_read
 23067  002FB6  C026  F01A         	movff	fifo_read@i+1,?_fifo_read+1
 23068  002FBA  D00B               	goto	l1417
 23069  002FBC                     l12663:
 23070  002FBC  4A25               	infsnz	fifo_read@i,f,c
 23071  002FBE  2A26               	incf	fifo_read@i+1,f,c
 23072  002FC0                     l12665:
 23073  002FC0  501D               	movf	fifo_read@nbytes,w,c
 23074  002FC2  5C25               	subwf	fifo_read@i,w,c
 23075  002FC4  501E               	movf	fifo_read@nbytes+1,w,c
 23076  002FC6  5826               	subwfb	fifo_read@i+1,w,c
 23077  002FC8  E3B6               	bnc	l12651
 23078                           
 23079                           ;fifo.c: 45: }
 23080                           ;fifo.c: 47: }
 23081                           ;fifo.c: 49: return nbytes;
 23082  002FCA  C01D  F019         	movff	fifo_read@nbytes,?_fifo_read
 23083  002FCE  C01E  F01A         	movff	fifo_read@nbytes+1,?_fifo_read+1
 23084  002FD2                     l1417:
 23085  002FD2  0012               	return	
 23086  002FD4                     __end_of_fifo_read:
 23087                           	opt stack 0
 23088  002FD4                     PL26:
 23089                           	opt stack 26
 23090  002FD4  5019               	movf	fifo_read@f,w,c
 23091  002FD6  26D9               	addwf	fsr2l,f,c
 23092  002FD8  501A               	movf	fifo_read@f+1,w,c
 23093  002FDA  22DA               	addwfc	fsr2h,f,c
 23094  002FDC  EE10 F004          	lfsr	1,4
 23095  002FE0  5019               	movf	fifo_read@f,w,c
 23096  002FE2  26E1               	addwf	fsr1l,f,c
 23097  002FE4  501A               	movf	fifo_read@f+1,w,c
 23098  002FE6  22E2               	addwfc	fsr1h,f,c
 23099  002FE8  52E6               	movf	postinc1,f,c
 23100  002FEA  52DE               	movf	postinc2,f,c
 23101  002FEC  50DD               	movf	postdec2,w,c
 23102  002FEE  18E5               	xorwf	postdec1,w,c
 23103  002FF0  CFDF FFE8          	movff	indf2,wreg
 23104  002FF4  0012               	return	
 23105  002FF6                     __end_ofPL26:
 23106                           	opt stack 0
 23107                           tblptru	equ	0xFF8
 23108                           tblptrh	equ	0xFF7
 23109                           tblptrl	equ	0xFF6
 23110                           tablat	equ	0xFF5
 23111                           prodh	equ	0xFF4
 23112                           prodl	equ	0xFF3
 23113                           intcon	equ	0xFF2
 23114                           indf0	equ	0xFEF
 23115                           postinc0	equ	0xFEE
 23116                           fsr0h	equ	0xFEA
 23117                           fsr0l	equ	0xFE9
 23118                           wreg	equ	0xFE8
 23119                           indf1	equ	0xFE7
 23120                           postinc1	equ	0xFE6
 23121                           postdec1	equ	0xFE5
 23122                           fsr1h	equ	0xFE2
 23123                           fsr1l	equ	0xFE1
 23124                           indf2	equ	0xFDF
 23125                           postinc2	equ	0xFDE
 23126                           postdec2	equ	0xFDD
 23127                           plusw2	equ	0xFDB
 23128                           fsr2h	equ	0xFDA
 23129                           fsr2l	equ	0xFD9
 23130                           status	equ	0xFD8
 23131                           
 23132 ;; *************** function _printFirmwareVersion *****************
 23133 ;; Defined at:
 23134 ;;		line 2475 in file "main.c"
 23135 ;; Parameters:    Size  Location     Type
 23136 ;;		None
 23137 ;; Auto vars:     Size  Location     Type
 23138 ;;  wrkbuf         20    2[BANK0 ] unsigned char [20]
 23139 ;; Return value:  Size  Location     Type
 23140 ;;		None               void
 23141 ;; Registers used:
 23142 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23143 ;; Tracked objects:
 23144 ;;		On entry : 0/0
 23145 ;;		On exit  : 0/0
 23146 ;;		Unchanged: 0/0
 23147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23148 ;;      Params:         0       0       0       0       0       0       0
 23149 ;;      Locals:         0      20       0       0       0       0       0
 23150 ;;      Temps:          0       0       0       0       0       0       0
 23151 ;;      Totals:         0      20       0       0       0       0       0
 23152 ;;Total ram usage:       20 bytes
 23153 ;; Hardware stack levels used:    1
 23154 ;; Hardware stack levels required when called:    5
 23155 ;; This function calls:
 23156 ;;		_putsUSART
 23157 ;;		_WriteUSART
 23158 ;;		_itoa
 23159 ;; This function is called by:
 23160 ;;		_main
 23161 ;;		_doModeVerbose
 23162 ;; This function uses a non-reentrant model
 23163 ;;
 23164                           
 23165                           	psect	text61
 23166  00295E                     __ptext61:
 23167                           	opt stack 0
 23168  00295E                     _printFirmwareVersion:
 23169                           	opt stack 23
 23170                           
 23171                           ;main.c: 2476: char wrkbuf[20];
 23172                           ;main.c: 2477: putsUSART((char *)"Version: ");
 23173                           
 23174                           ;incstack = 0
 23175                           ;incstack = 0
 23176  00295E  0E7B               	movlw	high STR_245
 23177  002960  6E1B               	movwf	?_putsUSART+1,c
 23178  002962  0E9C               	movlw	low STR_245
 23179  002964  6E1A               	movwf	?_putsUSART,c
 23180  002966  EC50  F011         	call	_putsUSART	;wreg free
 23181                           
 23182                           ;main.c: 2478: itoa( wrkbuf, 1, 10 );
 23183  00296A  D83A               	call	PL58	;call to abstracted procedure
 23184  00296C  0E01               	movlw	1
 23185  00296E  6E2B               	movwf	?_itoa+2,c
 23186  002970  6A2E               	clrf	?_itoa+5,c
 23187  002972  0E0A               	movlw	10
 23188  002974  6E2D               	movwf	?_itoa+4,c
 23189  002976  EC4F  F00F         	call	_itoa	;wreg free
 23190                           
 23191                           ;main.c: 2479: putsUSART( wrkbuf );
 23192  00297A  0100               	movlb	0	; () banked
 23193  00297C  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23194  00297E  6E1B               	movwf	?_putsUSART+1,c
 23195  002980  0E62               	movlw	low printFirmwareVersion@wrkbuf
 23196  002982  6E1A               	movwf	?_putsUSART,c
 23197  002984  EC50  F011         	call	_putsUSART	;wreg free
 23198  002988                     l1110:
 23199  002988  A2AC               	btfss	4012,1,c	;volatile
 23200  00298A  D7FE               	goto	l1110
 23201                           
 23202                           ;main.c: 2481: WriteUSART('.');
 23203  00298C  0E2E               	movlw	46
 23204  00298E  EC90  F00E         	call	_WriteUSART
 23205                           
 23206                           ;main.c: 2482: itoa( wrkbuf, 0, 10 );
 23207  002992  D826               	call	PL58	;call to abstracted procedure
 23208  002994  6A2B               	clrf	?_itoa+2,c
 23209  002996  6A2E               	clrf	?_itoa+5,c
 23210  002998  0E0A               	movlw	10
 23211  00299A  6E2D               	movwf	?_itoa+4,c
 23212  00299C  EC4F  F00F         	call	_itoa	;wreg free
 23213                           
 23214                           ;main.c: 2483: putsUSART( wrkbuf );
 23215  0029A0  0100               	movlb	0	; () banked
 23216  0029A2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23217  0029A4  6E1B               	movwf	?_putsUSART+1,c
 23218  0029A6  0E62               	movlw	low printFirmwareVersion@wrkbuf
 23219  0029A8  6E1A               	movwf	?_putsUSART,c
 23220  0029AA  EC50  F011         	call	_putsUSART	;wreg free
 23221  0029AE                     l1113:
 23222  0029AE  A2AC               	btfss	4012,1,c	;volatile
 23223  0029B0  D7FE               	goto	l1113
 23224                           
 23225                           ;main.c: 2485: WriteUSART('.');
 23226  0029B2  0E2E               	movlw	46
 23227  0029B4  EC90  F00E         	call	_WriteUSART
 23228                           
 23229                           ;main.c: 2486: itoa( wrkbuf, 0, 10 );
 23230  0029B8  D813               	call	PL58	;call to abstracted procedure
 23231  0029BA  6A2B               	clrf	?_itoa+2,c
 23232  0029BC  6A2E               	clrf	?_itoa+5,c
 23233  0029BE  0E0A               	movlw	10
 23234  0029C0  6E2D               	movwf	?_itoa+4,c
 23235  0029C2  EC4F  F00F         	call	_itoa	;wreg free
 23236                           
 23237                           ;main.c: 2487: putsUSART( wrkbuf );
 23238  0029C6  0100               	movlb	0	; () banked
 23239  0029C8  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23240  0029CA  6E1B               	movwf	?_putsUSART+1,c
 23241  0029CC  0E62               	movlw	low printFirmwareVersion@wrkbuf
 23242  0029CE  6E1A               	movwf	?_putsUSART,c
 23243  0029D0  EC50  F011         	call	_putsUSART	;wreg free
 23244                           
 23245                           ;main.c: 2488: putsUSART((char *)"\r\n");
 23246  0029D4  0E71               	movlw	high (STR_188+50)
 23247  0029D6  6E1B               	movwf	?_putsUSART+1,c
 23248  0029D8  0EB2               	movlw	low (STR_188+50)
 23249  0029DA  6E1A               	movwf	?_putsUSART,c
 23250  0029DC  EF50  F011         	goto	_putsUSART	;wreg free
 23251  0029E0                     __end_of_printFirmwareVersion:
 23252                           	opt stack 0
 23253  0029E0                     PL58:
 23254                           	opt stack 23
 23255  0029E0  0100               	movlb	0	; () banked
 23256  0029E2  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23257  0029E4  6E2A               	movwf	?_itoa+1,c
 23258  0029E6  0E62               	movlw	low printFirmwareVersion@wrkbuf
 23259  0029E8  6E29               	movwf	?_itoa,c
 23260  0029EA  6A2C               	clrf	?_itoa+3,c
 23261  0029EC  0012               	return	
 23262  0029EE                     __end_ofPL58:
 23263                           	opt stack 0
 23264                           tblptru	equ	0xFF8
 23265                           tblptrh	equ	0xFF7
 23266                           tblptrl	equ	0xFF6
 23267                           tablat	equ	0xFF5
 23268                           prodh	equ	0xFF4
 23269                           prodl	equ	0xFF3
 23270                           intcon	equ	0xFF2
 23271                           indf0	equ	0xFEF
 23272                           postinc0	equ	0xFEE
 23273                           fsr0h	equ	0xFEA
 23274                           fsr0l	equ	0xFE9
 23275                           wreg	equ	0xFE8
 23276                           indf1	equ	0xFE7
 23277                           postinc1	equ	0xFE6
 23278                           postdec1	equ	0xFE5
 23279                           fsr1h	equ	0xFE2
 23280                           fsr1l	equ	0xFE1
 23281                           indf2	equ	0xFDF
 23282                           postinc2	equ	0xFDE
 23283                           postdec2	equ	0xFDD
 23284                           plusw2	equ	0xFDB
 23285                           fsr2h	equ	0xFDA
 23286                           fsr2l	equ	0xFD9
 23287                           status	equ	0xFD8
 23288                           
 23289 ;; *************** function _itoa *****************
 23290 ;; Defined at:
 23291 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23292 ;; Parameters:    Size  Location     Type
 23293 ;;  buf             2   40[COMRAM] PTR unsigned char 
 23294 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23295 ;;  val             2   42[COMRAM] int 
 23296 ;;  base            2   44[COMRAM] int 
 23297 ;; Auto vars:     Size  Location     Type
 23298 ;;  cp              2    0        PTR unsigned char 
 23299 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23300 ;; Return value:  Size  Location     Type
 23301 ;;                  2   40[COMRAM] PTR unsigned char 
 23302 ;; Registers used:
 23303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23304 ;; Tracked objects:
 23305 ;;		On entry : F/0
 23306 ;;		On exit  : 0/0
 23307 ;;		Unchanged: 0/0
 23308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23309 ;;      Params:         6       0       0       0       0       0       0
 23310 ;;      Locals:         0       2       0       0       0       0       0
 23311 ;;      Temps:          0       0       0       0       0       0       0
 23312 ;;      Totals:         6       2       0       0       0       0       0
 23313 ;;Total ram usage:        8 bytes
 23314 ;; Hardware stack levels used:    1
 23315 ;; Hardware stack levels required when called:    4
 23316 ;; This function calls:
 23317 ;;		_utoa
 23318 ;; This function is called by:
 23319 ;;		_receivePrintEventSLCAN
 23320 ;;		_findNodes
 23321 ;;		_printGUID
 23322 ;;		_printNodeFirmwareVersion
 23323 ;;		_printFirmwareVersion
 23324 ;; This function uses a non-reentrant model
 23325 ;;
 23326                           
 23327                           	psect	text62
 23328  001E9E                     __ptext62:
 23329                           	opt stack 0
 23330  001E9E                     _itoa:
 23331                           	opt stack 23
 23332                           
 23333                           ; BSR set to: 0
 23334                           
 23335                           ;incstack = 0
 23336                           ;incstack = 0
 23337  001E9E  AE2C               	btfss	itoa@val+1,7,c
 23338  001EA0  D00C               	goto	l14529
 23339                           
 23340                           ; BSR set to: 0
 23341  001EA2  C029  FFD9         	movff	itoa@buf,fsr2l
 23342  001EA6  C02A  FFDA         	movff	itoa@buf+1,fsr2h
 23343  001EAA  0E2D               	movlw	45
 23344  001EAC  6EDF               	movwf	indf2,c
 23345                           
 23346                           ; BSR set to: 0
 23347  001EAE  4A29               	infsnz	itoa@buf,f,c
 23348  001EB0  2A2A               	incf	itoa@buf+1,f,c
 23349                           
 23350                           ; BSR set to: 0
 23351  001EB2  6C2B               	negf	itoa@val,c
 23352  001EB4  1E2C               	comf	itoa@val+1,f,c
 23353  001EB6  B0D8               	btfsc	status,0,c
 23354  001EB8  2A2C               	incf	itoa@val+1,f,c
 23355  001EBA                     l14529:
 23356                           
 23357                           ; BSR set to: 0
 23358  001EBA  C029  F020         	movff	itoa@buf,?_utoa
 23359  001EBE  C02A  F021         	movff	itoa@buf+1,?_utoa+1
 23360  001EC2  C02B  F022         	movff	itoa@val,?_utoa+2
 23361  001EC6  C02C  F023         	movff	itoa@val+1,?_utoa+3
 23362  001ECA  C02D  F024         	movff	itoa@base,?_utoa+4
 23363  001ECE  C02E  F025         	movff	itoa@base+1,?_utoa+5
 23364  001ED2  EFD7  F015         	goto	_utoa	;wreg free
 23365  001ED6                     __end_of_itoa:
 23366                           	opt stack 0
 23367                           tblptru	equ	0xFF8
 23368                           tblptrh	equ	0xFF7
 23369                           tblptrl	equ	0xFF6
 23370                           tablat	equ	0xFF5
 23371                           prodh	equ	0xFF4
 23372                           prodl	equ	0xFF3
 23373                           intcon	equ	0xFF2
 23374                           indf0	equ	0xFEF
 23375                           postinc0	equ	0xFEE
 23376                           fsr0h	equ	0xFEA
 23377                           fsr0l	equ	0xFE9
 23378                           wreg	equ	0xFE8
 23379                           indf1	equ	0xFE7
 23380                           postinc1	equ	0xFE6
 23381                           postdec1	equ	0xFE5
 23382                           fsr1h	equ	0xFE2
 23383                           fsr1l	equ	0xFE1
 23384                           indf2	equ	0xFDF
 23385                           postinc2	equ	0xFDE
 23386                           postdec2	equ	0xFDD
 23387                           plusw2	equ	0xFDB
 23388                           fsr2h	equ	0xFDA
 23389                           fsr2l	equ	0xFD9
 23390                           status	equ	0xFD8
 23391                           
 23392 ;; *************** function _utoa *****************
 23393 ;; Defined at:
 23394 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23395 ;; Parameters:    Size  Location     Type
 23396 ;;  buf             2   31[COMRAM] PTR unsigned char 
 23397 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23398 ;;  val             2   33[COMRAM] unsigned int 
 23399 ;;  base            2   35[COMRAM] int 
 23400 ;; Auto vars:     Size  Location     Type
 23401 ;;  v               2   37[COMRAM] unsigned int 
 23402 ;;  c               1   39[COMRAM] unsigned char 
 23403 ;; Return value:  Size  Location     Type
 23404 ;;                  2   31[COMRAM] PTR unsigned char 
 23405 ;; Registers used:
 23406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23407 ;; Tracked objects:
 23408 ;;		On entry : F/0
 23409 ;;		On exit  : 0/0
 23410 ;;		Unchanged: 0/0
 23411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23412 ;;      Params:         6       0       0       0       0       0       0
 23413 ;;      Locals:         3       0       0       0       0       0       0
 23414 ;;      Temps:          0       0       0       0       0       0       0
 23415 ;;      Totals:         9       0       0       0       0       0       0
 23416 ;;Total ram usage:        9 bytes
 23417 ;; Hardware stack levels used:    1
 23418 ;; Hardware stack levels required when called:    3
 23419 ;; This function calls:
 23420 ;;		___lwdiv
 23421 ;;		___lwmod
 23422 ;; This function is called by:
 23423 ;;		_itoa
 23424 ;; This function uses a non-reentrant model
 23425 ;;
 23426                           
 23427                           	psect	text63
 23428  002BAE                     __ptext63:
 23429                           	opt stack 0
 23430  002BAE                     _utoa:
 23431                           	opt stack 23
 23432                           
 23433                           ; BSR set to: 0
 23434                           
 23435                           ;incstack = 0
 23436                           ;incstack = 0
 23437  002BAE  C022  F026         	movff	utoa@val,utoa@v
 23438  002BB2  C023  F027         	movff	utoa@val+1,utoa@v+1
 23439  002BB6                     l14831:
 23440  002BB6  C026  F019         	movff	utoa@v,?___lwdiv
 23441  002BBA  C027  F01A         	movff	utoa@v+1,?___lwdiv+1
 23442  002BBE  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23443  002BC2  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23444  002BC6  EC04  F011         	call	___lwdiv	;wreg free
 23445  002BCA  C019  F026         	movff	?___lwdiv,utoa@v
 23446  002BCE  C01A  F027         	movff	?___lwdiv+1,utoa@v+1
 23447  002BD2  4A20               	infsnz	utoa@buf,f,c
 23448  002BD4  2A21               	incf	utoa@buf+1,f,c
 23449  002BD6  5027               	movf	utoa@v+1,w,c
 23450  002BD8  1026               	iorwf	utoa@v,w,c
 23451  002BDA  E1ED               	bnz	l14831
 23452  002BDC  C020  FFD9         	movff	utoa@buf,fsr2l
 23453  002BE0  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23454  002BE4  0E00               	movlw	0
 23455  002BE6  6ADF               	clrf	indf2,c
 23456  002BE8  0620               	decf	utoa@buf,f,c
 23457  002BEA  A0D8               	btfss	status,0,c
 23458  002BEC  0621               	decf	utoa@buf+1,f,c
 23459  002BEE                     l14841:
 23460  002BEE  C022  F019         	movff	utoa@val,?___lwmod
 23461  002BF2  C023  F01A         	movff	utoa@val+1,?___lwmod+1
 23462  002BF6  C024  F01B         	movff	utoa@base,?___lwmod+2
 23463  002BFA  C025  F01C         	movff	utoa@base+1,?___lwmod+3
 23464  002BFE  ECDE  F00F         	call	___lwmod	;wreg free
 23465  002C02  5019               	movf	?___lwmod,w,c
 23466  002C04  6E28               	movwf	utoa@c,c
 23467  002C06  C022  F019         	movff	utoa@val,?___lwdiv
 23468  002C0A  C023  F01A         	movff	utoa@val+1,?___lwdiv+1
 23469  002C0E  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23470  002C12  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23471  002C16  EC04  F011         	call	___lwdiv	;wreg free
 23472  002C1A  C019  F022         	movff	?___lwdiv,utoa@val
 23473  002C1E  C01A  F023         	movff	?___lwdiv+1,utoa@val+1
 23474  002C22  0E09               	movlw	9
 23475  002C24  6428               	cpfsgt	utoa@c,c
 23476  002C26  D002               	goto	l2203
 23477  002C28  0E07               	movlw	7
 23478  002C2A  2628               	addwf	utoa@c,f,c
 23479  002C2C                     l2203:
 23480  002C2C  0E30               	movlw	48
 23481  002C2E  2628               	addwf	utoa@c,f,c
 23482  002C30  C020  FFD9         	movff	utoa@buf,fsr2l
 23483  002C34  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23484  002C38  C028  FFDF         	movff	utoa@c,indf2
 23485  002C3C  0620               	decf	utoa@buf,f,c
 23486  002C3E  A0D8               	btfss	status,0,c
 23487  002C40  0621               	decf	utoa@buf+1,f,c
 23488  002C42  5023               	movf	utoa@val+1,w,c
 23489  002C44  1022               	iorwf	utoa@val,w,c
 23490  002C46  E1D3               	bnz	l14841
 23491                           
 23492                           ;	Return value of _utoa is never used
 23493  002C48  4A20               	infsnz	utoa@buf,f,c
 23494  002C4A  2A21               	incf	utoa@buf+1,f,c
 23495  002C4C  0012               	return	
 23496  002C4E                     __end_of_utoa:
 23497                           	opt stack 0
 23498                           tblptru	equ	0xFF8
 23499                           tblptrh	equ	0xFF7
 23500                           tblptrl	equ	0xFF6
 23501                           tablat	equ	0xFF5
 23502                           prodh	equ	0xFF4
 23503                           prodl	equ	0xFF3
 23504                           intcon	equ	0xFF2
 23505                           indf0	equ	0xFEF
 23506                           postinc0	equ	0xFEE
 23507                           fsr0h	equ	0xFEA
 23508                           fsr0l	equ	0xFE9
 23509                           wreg	equ	0xFE8
 23510                           indf1	equ	0xFE7
 23511                           postinc1	equ	0xFE6
 23512                           postdec1	equ	0xFE5
 23513                           fsr1h	equ	0xFE2
 23514                           fsr1l	equ	0xFE1
 23515                           indf2	equ	0xFDF
 23516                           postinc2	equ	0xFDE
 23517                           postdec2	equ	0xFDD
 23518                           plusw2	equ	0xFDB
 23519                           fsr2h	equ	0xFDA
 23520                           fsr2l	equ	0xFD9
 23521                           status	equ	0xFD8
 23522                           
 23523 ;; *************** function ___lwmod *****************
 23524 ;; Defined at:
 23525 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 23526 ;; Parameters:    Size  Location     Type
 23527 ;;  dividend        2   24[COMRAM] unsigned int 
 23528 ;;  divisor         2   26[COMRAM] unsigned int 
 23529 ;; Auto vars:     Size  Location     Type
 23530 ;;  counter         1   28[COMRAM] unsigned char 
 23531 ;; Return value:  Size  Location     Type
 23532 ;;                  2   24[COMRAM] unsigned int 
 23533 ;; Registers used:
 23534 ;;		wreg, status,2, status,0
 23535 ;; Tracked objects:
 23536 ;;		On entry : 0/0
 23537 ;;		On exit  : 0/0
 23538 ;;		Unchanged: 0/0
 23539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23540 ;;      Params:         4       0       0       0       0       0       0
 23541 ;;      Locals:         1       0       0       0       0       0       0
 23542 ;;      Temps:          0       0       0       0       0       0       0
 23543 ;;      Totals:         5       0       0       0       0       0       0
 23544 ;;Total ram usage:        5 bytes
 23545 ;; Hardware stack levels used:    1
 23546 ;; Hardware stack levels required when called:    2
 23547 ;; This function calls:
 23548 ;;		Nothing
 23549 ;; This function is called by:
 23550 ;;		_utoa
 23551 ;; This function uses a non-reentrant model
 23552 ;;
 23553                           
 23554                           	psect	text64
 23555  001FBC                     __ptext64:
 23556                           	opt stack 0
 23557  001FBC                     ___lwmod:
 23558                           	opt stack 23
 23559                           
 23560                           ;incstack = 0
 23561                           ;incstack = 0
 23562  001FBC  501C               	movf	___lwmod@divisor+1,w,c
 23563  001FBE  101B               	iorwf	___lwmod@divisor,w,c
 23564  001FC0  E017               	bz	l2327
 23565  001FC2  0E01               	movlw	1
 23566  001FC4  6E1D               	movwf	___lwmod@counter,c
 23567  001FC6  D004               	goto	l14887
 23568  001FC8                     l14885:
 23569  001FC8  90D8               	bcf	status,0,c
 23570  001FCA  361B               	rlcf	___lwmod@divisor,f,c
 23571  001FCC  361C               	rlcf	___lwmod@divisor+1,f,c
 23572  001FCE  2A1D               	incf	___lwmod@counter,f,c
 23573  001FD0                     l14887:
 23574  001FD0  AE1C               	btfss	___lwmod@divisor+1,7,c
 23575  001FD2  D7FA               	goto	l14885
 23576  001FD4                     l14889:
 23577  001FD4  501B               	movf	___lwmod@divisor,w,c
 23578  001FD6  5C19               	subwf	___lwmod@dividend,w,c
 23579  001FD8  501C               	movf	___lwmod@divisor+1,w,c
 23580  001FDA  581A               	subwfb	___lwmod@dividend+1,w,c
 23581  001FDC  E304               	bnc	l14893
 23582  001FDE  501B               	movf	___lwmod@divisor,w,c
 23583  001FE0  5E19               	subwf	___lwmod@dividend,f,c
 23584  001FE2  501C               	movf	___lwmod@divisor+1,w,c
 23585  001FE4  5A1A               	subwfb	___lwmod@dividend+1,f,c
 23586  001FE6                     l14893:
 23587  001FE6  90D8               	bcf	status,0,c
 23588  001FE8  321C               	rrcf	___lwmod@divisor+1,f,c
 23589  001FEA  321B               	rrcf	___lwmod@divisor,f,c
 23590  001FEC  2E1D               	decfsz	___lwmod@counter,f,c
 23591  001FEE  D7F2               	goto	l14889
 23592  001FF0                     l2327:
 23593  001FF0  C019  F019         	movff	___lwmod@dividend,?___lwmod
 23594  001FF4  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
 23595  001FF8  0012               	return	
 23596  001FFA                     __end_of___lwmod:
 23597                           	opt stack 0
 23598                           tblptru	equ	0xFF8
 23599                           tblptrh	equ	0xFF7
 23600                           tblptrl	equ	0xFF6
 23601                           tablat	equ	0xFF5
 23602                           prodh	equ	0xFF4
 23603                           prodl	equ	0xFF3
 23604                           intcon	equ	0xFF2
 23605                           indf0	equ	0xFEF
 23606                           postinc0	equ	0xFEE
 23607                           fsr0h	equ	0xFEA
 23608                           fsr0l	equ	0xFE9
 23609                           wreg	equ	0xFE8
 23610                           indf1	equ	0xFE7
 23611                           postinc1	equ	0xFE6
 23612                           postdec1	equ	0xFE5
 23613                           fsr1h	equ	0xFE2
 23614                           fsr1l	equ	0xFE1
 23615                           indf2	equ	0xFDF
 23616                           postinc2	equ	0xFDE
 23617                           postdec2	equ	0xFDD
 23618                           plusw2	equ	0xFDB
 23619                           fsr2h	equ	0xFDA
 23620                           fsr2l	equ	0xFD9
 23621                           status	equ	0xFD8
 23622                           
 23623 ;; *************** function ___lwdiv *****************
 23624 ;; Defined at:
 23625 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 23626 ;; Parameters:    Size  Location     Type
 23627 ;;  dividend        2   24[COMRAM] unsigned int 
 23628 ;;  divisor         2   26[COMRAM] unsigned int 
 23629 ;; Auto vars:     Size  Location     Type
 23630 ;;  quotient        2   29[COMRAM] unsigned int 
 23631 ;;  counter         1   28[COMRAM] unsigned char 
 23632 ;; Return value:  Size  Location     Type
 23633 ;;                  2   24[COMRAM] unsigned int 
 23634 ;; Registers used:
 23635 ;;		wreg, status,2, status,0
 23636 ;; Tracked objects:
 23637 ;;		On entry : 0/0
 23638 ;;		On exit  : 0/0
 23639 ;;		Unchanged: 0/0
 23640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23641 ;;      Params:         4       0       0       0       0       0       0
 23642 ;;      Locals:         3       0       0       0       0       0       0
 23643 ;;      Temps:          0       0       0       0       0       0       0
 23644 ;;      Totals:         7       0       0       0       0       0       0
 23645 ;;Total ram usage:        7 bytes
 23646 ;; Hardware stack levels used:    1
 23647 ;; Hardware stack levels required when called:    2
 23648 ;; This function calls:
 23649 ;;		Nothing
 23650 ;; This function is called by:
 23651 ;;		_utoa
 23652 ;; This function uses a non-reentrant model
 23653 ;;
 23654                           
 23655                           	psect	text65
 23656  002208                     __ptext65:
 23657                           	opt stack 0
 23658  002208                     ___lwdiv:
 23659                           	opt stack 23
 23660                           
 23661                           ;incstack = 0
 23662                           ;incstack = 0
 23663  002208  6A1E               	clrf	___lwdiv@quotient,c
 23664  00220A  6A1F               	clrf	___lwdiv@quotient+1,c
 23665  00220C  501C               	movf	___lwdiv@divisor+1,w,c
 23666  00220E  101B               	iorwf	___lwdiv@divisor,w,c
 23667  002210  E01B               	bz	l2317
 23668  002212  0E01               	movlw	1
 23669  002214  6E1D               	movwf	___lwdiv@counter,c
 23670  002216  D004               	goto	l14867
 23671  002218                     l14865:
 23672  002218  90D8               	bcf	status,0,c
 23673  00221A  361B               	rlcf	___lwdiv@divisor,f,c
 23674  00221C  361C               	rlcf	___lwdiv@divisor+1,f,c
 23675  00221E  2A1D               	incf	___lwdiv@counter,f,c
 23676  002220                     l14867:
 23677  002220  AE1C               	btfss	___lwdiv@divisor+1,7,c
 23678  002222  D7FA               	goto	l14865
 23679  002224                     l14869:
 23680  002224  90D8               	bcf	status,0,c
 23681  002226  361E               	rlcf	___lwdiv@quotient,f,c
 23682  002228  361F               	rlcf	___lwdiv@quotient+1,f,c
 23683  00222A  501B               	movf	___lwdiv@divisor,w,c
 23684  00222C  5C19               	subwf	___lwdiv@dividend,w,c
 23685  00222E  501C               	movf	___lwdiv@divisor+1,w,c
 23686  002230  581A               	subwfb	___lwdiv@dividend+1,w,c
 23687  002232  E305               	bnc	l14877
 23688  002234  501B               	movf	___lwdiv@divisor,w,c
 23689  002236  5E19               	subwf	___lwdiv@dividend,f,c
 23690  002238  501C               	movf	___lwdiv@divisor+1,w,c
 23691  00223A  5A1A               	subwfb	___lwdiv@dividend+1,f,c
 23692  00223C  801E               	bsf	___lwdiv@quotient,0,c
 23693  00223E                     l14877:
 23694  00223E  90D8               	bcf	status,0,c
 23695  002240  321C               	rrcf	___lwdiv@divisor+1,f,c
 23696  002242  321B               	rrcf	___lwdiv@divisor,f,c
 23697  002244  2E1D               	decfsz	___lwdiv@counter,f,c
 23698  002246  D7EE               	goto	l14869
 23699  002248                     l2317:
 23700  002248  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
 23701  00224C  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23702  002250  0012               	return	
 23703  002252                     __end_of___lwdiv:
 23704                           	opt stack 0
 23705                           tblptru	equ	0xFF8
 23706                           tblptrh	equ	0xFF7
 23707                           tblptrl	equ	0xFF6
 23708                           tablat	equ	0xFF5
 23709                           prodh	equ	0xFF4
 23710                           prodl	equ	0xFF3
 23711                           intcon	equ	0xFF2
 23712                           indf0	equ	0xFEF
 23713                           postinc0	equ	0xFEE
 23714                           fsr0h	equ	0xFEA
 23715                           fsr0l	equ	0xFE9
 23716                           wreg	equ	0xFE8
 23717                           indf1	equ	0xFE7
 23718                           postinc1	equ	0xFE6
 23719                           postdec1	equ	0xFE5
 23720                           fsr1h	equ	0xFE2
 23721                           fsr1l	equ	0xFE1
 23722                           indf2	equ	0xFDF
 23723                           postinc2	equ	0xFDE
 23724                           postdec2	equ	0xFDD
 23725                           plusw2	equ	0xFDB
 23726                           fsr2h	equ	0xFDA
 23727                           fsr2l	equ	0xFD9
 23728                           status	equ	0xFD8
 23729                           
 23730 ;; *************** function _printMode *****************
 23731 ;; Defined at:
 23732 ;;		line 2496 in file "main.c"
 23733 ;; Parameters:    Size  Location     Type
 23734 ;;		None
 23735 ;; Auto vars:     Size  Location     Type
 23736 ;;		None
 23737 ;; Return value:  Size  Location     Type
 23738 ;;		None               void
 23739 ;; Registers used:
 23740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23741 ;; Tracked objects:
 23742 ;;		On entry : 0/0
 23743 ;;		On exit  : 0/0
 23744 ;;		Unchanged: 0/0
 23745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23746 ;;      Params:         0       0       0       0       0       0       0
 23747 ;;      Locals:         0       0       0       0       0       0       0
 23748 ;;      Temps:          0       0       0       0       0       0       0
 23749 ;;      Totals:         0       0       0       0       0       0       0
 23750 ;;Total ram usage:        0 bytes
 23751 ;; Hardware stack levels used:    1
 23752 ;; Hardware stack levels required when called:    4
 23753 ;; This function calls:
 23754 ;;		_putsUSART
 23755 ;; This function is called by:
 23756 ;;		_main
 23757 ;; This function uses a non-reentrant model
 23758 ;;
 23759                           
 23760                           	psect	text66
 23761  0025F8                     __ptext66:
 23762                           	opt stack 0
 23763  0025F8                     _printMode:
 23764                           	opt stack 25
 23765                           
 23766                           ;main.c: 2497: putsUSART((char *)"Mode: ");
 23767                           
 23768                           ;incstack = 0
 23769                           ;incstack = 0
 23770  0025F8  0E7C               	movlw	high STR_247
 23771  0025FA  6E1B               	movwf	?_putsUSART+1,c
 23772  0025FC  0E25               	movlw	low STR_247
 23773  0025FE  6E1A               	movwf	?_putsUSART,c
 23774  002600  EC50  F011         	call	_putsUSART	;wreg free
 23775                           
 23776                           ;main.c: 2498: if ( 0 == mode ) {
 23777  002604  0100               	movlb	0	; () banked
 23778  002606  67D7               	tstfsz	_mode& (0+255),b
 23779  002608  D007               	goto	l12635
 23780                           
 23781                           ; BSR set to: 0
 23782                           ;main.c: 2499: putsUSART((char *)"Verbose");
 23783  00260A  0E7C               	movlw	high STR_248
 23784  00260C  6E1B               	movwf	?_putsUSART+1,c
 23785  00260E  0E1D               	movlw	low STR_248
 23786  002610  6E1A               	movwf	?_putsUSART,c
 23787  002612  EC50  F011         	call	_putsUSART	;wreg free
 23788                           
 23789                           ;main.c: 2500: }
 23790  002616  D023               	goto	l1120
 23791  002618                     l12635:
 23792                           
 23793                           ; BSR set to: 0
 23794                           ;main.c: 2501: else if ( 1 == mode ) {
 23795  002618  05D7               	decf	_mode& (0+255),w,b
 23796  00261A  E107               	bnz	l12639
 23797                           
 23798                           ; BSR set to: 0
 23799                           ;main.c: 2502: putsUSART((char *)"VSCP Driver");
 23800  00261C  0E7B               	movlw	high STR_249
 23801  00261E  6E1B               	movwf	?_putsUSART+1,c
 23802  002620  0E7A               	movlw	low STR_249
 23803  002622  6E1A               	movwf	?_putsUSART,c
 23804  002624  EC50  F011         	call	_putsUSART	;wreg free
 23805                           
 23806                           ;main.c: 2503: }
 23807  002628  D01A               	goto	l1120
 23808  00262A                     l12639:
 23809                           
 23810                           ; BSR set to: 0
 23811                           ;main.c: 2504: else if ( 2 == mode ) {
 23812  00262A  51D7               	movf	_mode& (0+255),w,b
 23813  00262C  0A02               	xorlw	2
 23814  00262E  E107               	bnz	l12643
 23815                           
 23816                           ; BSR set to: 0
 23817                           ;main.c: 2505: putsUSART((char *)"SL Driver");
 23818  002630  0E7B               	movlw	high STR_250
 23819  002632  6E1B               	movwf	?_putsUSART+1,c
 23820  002634  0EB0               	movlw	low STR_250
 23821  002636  6E1A               	movwf	?_putsUSART,c
 23822  002638  EC50  F011         	call	_putsUSART	;wreg free
 23823                           
 23824                           ;main.c: 2506: }
 23825  00263C  D010               	goto	l1120
 23826  00263E                     l12643:
 23827                           
 23828                           ; BSR set to: 0
 23829                           ;main.c: 2507: else if ( 3 == mode ) {
 23830  00263E  51D7               	movf	_mode& (0+255),w,b
 23831  002640  0A03               	xorlw	3
 23832  002642  E107               	bnz	l12647
 23833                           
 23834                           ; BSR set to: 0
 23835                           ;main.c: 2508: putsUSART((char *)"VSCP Node");
 23836  002644  0E7B               	movlw	high STR_251
 23837  002646  6E1B               	movwf	?_putsUSART+1,c
 23838  002648  0EA6               	movlw	low STR_251
 23839  00264A  6E1A               	movwf	?_putsUSART,c
 23840  00264C  EC50  F011         	call	_putsUSART	;wreg free
 23841                           
 23842                           ;main.c: 2509: }
 23843  002650  D006               	goto	l1120
 23844  002652                     l12647:
 23845                           
 23846                           ; BSR set to: 0
 23847                           ;main.c: 2510: else {
 23848                           ;main.c: 2511: putsUSART((char *)"Unknown (Verbose used)");
 23849  002652  0E79               	movlw	high STR_252
 23850  002654  6E1B               	movwf	?_putsUSART+1,c
 23851  002656  0EEE               	movlw	low STR_252
 23852  002658  6E1A               	movwf	?_putsUSART,c
 23853  00265A  EC50  F011         	call	_putsUSART	;wreg free
 23854  00265E                     l1120:
 23855                           
 23856                           ;main.c: 2512: }
 23857                           ;main.c: 2513: putsUSART((char *)"\r\n");
 23858  00265E  0E71               	movlw	high (STR_188+50)
 23859  002660  6E1B               	movwf	?_putsUSART+1,c
 23860  002662  0EB2               	movlw	low (STR_188+50)
 23861  002664  6E1A               	movwf	?_putsUSART,c
 23862  002666  EF50  F011         	goto	_putsUSART	;wreg free
 23863  00266A                     __end_of_printMode:
 23864                           	opt stack 0
 23865                           tblptru	equ	0xFF8
 23866                           tblptrh	equ	0xFF7
 23867                           tblptrl	equ	0xFF6
 23868                           tablat	equ	0xFF5
 23869                           prodh	equ	0xFF4
 23870                           prodl	equ	0xFF3
 23871                           intcon	equ	0xFF2
 23872                           indf0	equ	0xFEF
 23873                           postinc0	equ	0xFEE
 23874                           fsr0h	equ	0xFEA
 23875                           fsr0l	equ	0xFE9
 23876                           wreg	equ	0xFE8
 23877                           indf1	equ	0xFE7
 23878                           postinc1	equ	0xFE6
 23879                           postdec1	equ	0xFE5
 23880                           fsr1h	equ	0xFE2
 23881                           fsr1l	equ	0xFE1
 23882                           indf2	equ	0xFDF
 23883                           postinc2	equ	0xFDE
 23884                           postdec2	equ	0xFDD
 23885                           plusw2	equ	0xFDB
 23886                           fsr2h	equ	0xFDA
 23887                           fsr2l	equ	0xFD9
 23888                           status	equ	0xFD8
 23889                           
 23890 ;; *************** function _putsUSART *****************
 23891 ;; Defined at:
 23892 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 23893 ;; Parameters:    Size  Location     Type
 23894 ;;  data            2   25[COMRAM] PTR unsigned char 
 23895 ;;		 -> STR_253(3), STR_252(23), STR_251(10), STR_250(10), 
 23896 ;;		 -> STR_249(12), STR_248(8), STR_247(7), STR_246(3), 
 23897 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_245(10), STR_244(3), STR_241(20), 
 23898 ;;		 -> STR_240(3), STR_239(14), STR_238(3), STR_234(8), 
 23899 ;;		 -> STR_233(15), STR_232(67), STR_231(3), STR_230(27), 
 23900 ;;		 -> STR_229(67), STR_228(39), STR_227(62), STR_226(55), 
 23901 ;;		 -> STR_225(49), STR_224(67), STR_223(47), STR_222(47), 
 23902 ;;		 -> STR_221(34), STR_220(71), STR_219(20), STR_218(78), 
 23903 ;;		 -> STR_217(24), STR_216(77), STR_215(67), STR_214(69), 
 23904 ;;		 -> STR_213(47), STR_212(40), STR_211(39), STR_210(33), 
 23905 ;;		 -> STR_209(23), STR_208(56), STR_207(24), STR_206(44), 
 23906 ;;		 -> STR_205(50), STR_204(31), STR_203(50), STR_202(51), 
 23907 ;;		 -> STR_201(46), STR_200(44), STR_199(27), STR_198(39), 
 23908 ;;		 -> STR_197(39), STR_196(52), STR_195(54), STR_194(55), 
 23909 ;;		 -> STR_193(3), STR_190(24), STR_189(57), STR_188(53), 
 23910 ;;		 -> STR_187(58), STR_186(3), STR_183(25), STR_182(3), 
 23911 ;;		 -> STR_179(24), STR_178(3), STR_175(24), STR_174(3), 
 23912 ;;		 -> STR_171(24), STR_170(3), STR_167(23), STR_166(3), 
 23913 ;;		 -> STR_163(21), STR_162(3), STR_159(22), STR_158(3), 
 23914 ;;		 -> STR_155(17), STR_154(3), STR_151(18), STR_150(4), 
 23915 ;;		 -> STR_149(11), STR_148(2), STR_145(7), STR_142(7), 
 23916 ;;		 -> STR_139(9), STR_136(7), STR_133(8), STR_130(7), 
 23917 ;;		 -> STR_129(2), STR_128(2), STR_127(6), STR_126(8), 
 23918 ;;		 -> STR_125(8), STR_124(20), STR_123(27), STR_122(33), 
 23919 ;;		 -> STR_119(26), STR_117(32), STR_115(28), STR_110(40), 
 23920 ;;		 -> STR_108(44), STR_105(39), STR_103(36), STR_101(37), 
 23921 ;;		 -> STR_99(40), STR_97(37), STR_96(50), STR_93(41), 
 23922 ;;		 -> STR_91(38), STR_89(39), STR_87(42), STR_85(39), 
 23923 ;;		 -> STR_84(66), STR_81(3), STR_78(20), STR_76(33), 
 23924 ;;		 -> STR_75(35), STR_74(24), STR_72(33), STR_70(24), 
 23925 ;;		 -> STR_67(54), STR_66(6), STR_65(3), STR_60(34), 
 23926 ;;		 -> STR_59(3), STR_56(4), wrkbuf(80), STR_51(15), 
 23927 ;;		 -> STR_49(33), STR_47(24), STR_43(6), STR_39(18), 
 23928 ;;		 -> STR_38(6), STR_36(33), STR_35(6), STR_27(24), 
 23929 ;;		 -> STR_26(18), STR_25(20), STR_24(25), STR_23(22), 
 23930 ;;		 -> STR_22(19), STR_21(20), STR_20(20), STR_18(6), 
 23931 ;;		 -> STR_16(6), STR_14(6), STR_12(6), STR_10(6), 
 23932 ;;		 -> STR_8(6), STR_6(31), STR_4(29), STR_3(55), 
 23933 ;;		 -> STR_2(48), STR_1(37), 
 23934 ;; Auto vars:     Size  Location     Type
 23935 ;;		None
 23936 ;; Return value:  Size  Location     Type
 23937 ;;		None               void
 23938 ;; Registers used:
 23939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23940 ;; Tracked objects:
 23941 ;;		On entry : 0/0
 23942 ;;		On exit  : 0/0
 23943 ;;		Unchanged: 0/0
 23944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23945 ;;      Params:         2       0       0       0       0       0       0
 23946 ;;      Locals:         0       0       0       0       0       0       0
 23947 ;;      Temps:          2       0       0       0       0       0       0
 23948 ;;      Totals:         4       0       0       0       0       0       0
 23949 ;;Total ram usage:        4 bytes
 23950 ;; Hardware stack levels used:    1
 23951 ;; Hardware stack levels required when called:    3
 23952 ;; This function calls:
 23953 ;;		_WriteUSART
 23954 ;; This function is called by:
 23955 ;;		_main
 23956 ;;		_doModeVerbose
 23957 ;;		_doModeSLCAN
 23958 ;;		_receivePrintEventVerbose
 23959 ;;		_receivePrintEventSLCAN
 23960 ;;		_printStatistics
 23961 ;;		_printErrors
 23962 ;;		_printHelp
 23963 ;;		_findNodes
 23964 ;;		_printGUID
 23965 ;;		_printMDF
 23966 ;;		_printNodeFirmwareVersion
 23967 ;;		_printFirmwareVersion
 23968 ;;		_printMode
 23969 ;; This function uses a non-reentrant model
 23970 ;;
 23971                           
 23972                           	psect	text67
 23973  0022A0                     __ptext67:
 23974                           	opt stack 0
 23975  0022A0                     _putsUSART:
 23976                           	opt stack 24
 23977  0022A0                     l1719:
 23978  0022A0  A2AC               	btfss	4012,1,c	;volatile
 23979  0022A2  D7FE               	goto	l1719
 23980  0022A4  501A               	movf	putsUSART@data,w,c
 23981  0022A6  6EF6               	movwf	tblptrl,c
 23982  0022A8  6EE9               	movwf	fsr0l,c
 23983  0022AA  0E05               	movlw	(high __ramtop+-1)
 23984  0022AC  6EEA               	movwf	fsr0h,c
 23985  0022AE  501B               	movf	putsUSART@data+1,w,c
 23986  0022B0  64EA               	cpfsgt	fsr0h,c
 23987  0022B2  D003               	bra	u16467
 23988  0022B4  6EEA               	movwf	fsr0h,c
 23989  0022B6  50EF               	movf	indf0,w,c
 23990  0022B8  D003               	bra	u16460
 23991  0022BA                     u16467:
 23992  0022BA  6EF7               	movwf	tblptrh,c
 23993  0022BC  0008               	tblrd		*
 23994  0022BE  50F5               	movf	tablat,w,c
 23995  0022C0                     u16460:
 23996  0022C0  EC90  F00E         	call	_WriteUSART
 23997  0022C4  501A               	movf	putsUSART@data,w,c
 23998  0022C6  6E1C               	movwf	??_putsUSART& (0+255),c
 23999  0022C8  501B               	movf	putsUSART@data+1,w,c
 24000  0022CA  6E1D               	movwf	(??_putsUSART+1)& (0+255),c
 24001  0022CC  4A1A               	infsnz	putsUSART@data,f,c
 24002  0022CE  2A1B               	incf	putsUSART@data+1,f,c
 24003  0022D0  501C               	movf	??_putsUSART,w,c
 24004  0022D2  6EF6               	movwf	tblptrl,c
 24005  0022D4  6EE9               	movwf	fsr0l,c
 24006  0022D6  0E05               	movlw	(high __ramtop+-1)
 24007  0022D8  6EEA               	movwf	fsr0h,c
 24008  0022DA  501D               	movf	??_putsUSART+1,w,c
 24009  0022DC  64EA               	cpfsgt	fsr0h,c
 24010  0022DE  D003               	bra	u16477
 24011  0022E0  6EEA               	movwf	fsr0h,c
 24012  0022E2  50EF               	movf	indf0,w,c
 24013  0022E4  D003               	bra	u16470
 24014  0022E6                     u16477:
 24015  0022E6  6EF7               	movwf	tblptrh,c
 24016  0022E8  0008               	tblrd		*
 24017  0022EA  50F5               	movf	tablat,w,c
 24018  0022EC                     u16470:
 24019  0022EC  0900               	iorlw	0
 24020  0022EE  B4D8               	btfsc	status,2,c
 24021  0022F0  0012               	return	
 24022  0022F2  D7D6               	goto	l1719
 24023  0022F4                     __end_of_putsUSART:
 24024                           	opt stack 0
 24025                           tblptru	equ	0xFF8
 24026                           tblptrh	equ	0xFF7
 24027                           tblptrl	equ	0xFF6
 24028                           tablat	equ	0xFF5
 24029                           prodh	equ	0xFF4
 24030                           prodl	equ	0xFF3
 24031                           intcon	equ	0xFF2
 24032                           indf0	equ	0xFEF
 24033                           postinc0	equ	0xFEE
 24034                           fsr0h	equ	0xFEA
 24035                           fsr0l	equ	0xFE9
 24036                           wreg	equ	0xFE8
 24037                           indf1	equ	0xFE7
 24038                           postinc1	equ	0xFE6
 24039                           postdec1	equ	0xFE5
 24040                           fsr1h	equ	0xFE2
 24041                           fsr1l	equ	0xFE1
 24042                           indf2	equ	0xFDF
 24043                           postinc2	equ	0xFDE
 24044                           postdec2	equ	0xFDD
 24045                           plusw2	equ	0xFDB
 24046                           fsr2h	equ	0xFDA
 24047                           fsr2l	equ	0xFD9
 24048                           status	equ	0xFD8
 24049                           
 24050 ;; *************** function _WriteUSART *****************
 24051 ;; Defined at:
 24052 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24053 ;; Parameters:    Size  Location     Type
 24054 ;;  data            1    wreg     unsigned char 
 24055 ;; Auto vars:     Size  Location     Type
 24056 ;;  data            1   24[COMRAM] unsigned char 
 24057 ;; Return value:  Size  Location     Type
 24058 ;;		None               void
 24059 ;; Registers used:
 24060 ;;		wreg
 24061 ;; Tracked objects:
 24062 ;;		On entry : 0/1
 24063 ;;		On exit  : 0/0
 24064 ;;		Unchanged: 0/0
 24065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24066 ;;      Params:         0       0       0       0       0       0       0
 24067 ;;      Locals:         1       0       0       0       0       0       0
 24068 ;;      Temps:          0       0       0       0       0       0       0
 24069 ;;      Totals:         1       0       0       0       0       0       0
 24070 ;;Total ram usage:        1 bytes
 24071 ;; Hardware stack levels used:    1
 24072 ;; Hardware stack levels required when called:    2
 24073 ;; This function calls:
 24074 ;;		Nothing
 24075 ;; This function is called by:
 24076 ;;		_doModeVerbose
 24077 ;;		_sendEscapedUartData
 24078 ;;		_sendVSCPDriverErrorFrame
 24079 ;;		_sendVSCPDriverAck
 24080 ;;		_sendVSCPDriverNack
 24081 ;;		_sendVSCPDriverCommandReply
 24082 ;;		_receivePrintEventCANAL
 24083 ;;		_receivePrintEventSLCAN
 24084 ;;		_printBinary
 24085 ;;		_printFirmwareVersion
 24086 ;;		_putsUSART
 24087 ;; This function uses a non-reentrant model
 24088 ;;
 24089                           
 24090                           	psect	text68
 24091  001D20                     __ptext68:
 24092                           	opt stack 0
 24093  001D20                     _WriteUSART:
 24094                           	opt stack 25
 24095                           
 24096                           ;incstack = 0
 24097                           ;incstack = 0
 24098                           ;WriteUSART@data stored from wreg
 24099  001D20  CFE8 F019          	movff	wreg,WriteUSART@data
 24100  001D24  ACAC               	btfss	4012,6,c	;volatile
 24101  001D26  D003               	goto	l13999
 24102  001D28  90AC               	bcf	4012,0,c	;volatile
 24103  001D2A  B234               	btfsc	_USART_Status,1,c
 24104  001D2C  80AC               	bsf	4012,0,c	;volatile
 24105  001D2E                     l13999:
 24106  001D2E  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
 24107  001D32  0012               	return	
 24108  001D34                     __end_of_WriteUSART:
 24109                           	opt stack 0
 24110                           tblptru	equ	0xFF8
 24111                           tblptrh	equ	0xFF7
 24112                           tblptrl	equ	0xFF6
 24113                           tablat	equ	0xFF5
 24114                           prodh	equ	0xFF4
 24115                           prodl	equ	0xFF3
 24116                           intcon	equ	0xFF2
 24117                           indf0	equ	0xFEF
 24118                           postinc0	equ	0xFEE
 24119                           fsr0h	equ	0xFEA
 24120                           fsr0l	equ	0xFE9
 24121                           wreg	equ	0xFE8
 24122                           indf1	equ	0xFE7
 24123                           postinc1	equ	0xFE6
 24124                           postdec1	equ	0xFE5
 24125                           fsr1h	equ	0xFE2
 24126                           fsr1l	equ	0xFE1
 24127                           indf2	equ	0xFDF
 24128                           postinc2	equ	0xFDE
 24129                           postdec2	equ	0xFDD
 24130                           plusw2	equ	0xFDB
 24131                           fsr2h	equ	0xFDA
 24132                           fsr2l	equ	0xFD9
 24133                           status	equ	0xFD8
 24134                           
 24135 ;; *************** function _init *****************
 24136 ;; Defined at:
 24137 ;;		line 307 in file "main.c"
 24138 ;; Parameters:    Size  Location     Type
 24139 ;;		None
 24140 ;; Auto vars:     Size  Location     Type
 24141 ;;		None
 24142 ;; Return value:  Size  Location     Type
 24143 ;;		None               void
 24144 ;; Registers used:
 24145 ;;		wreg, status,2, status,0, cstack
 24146 ;; Tracked objects:
 24147 ;;		On entry : 0/0
 24148 ;;		On exit  : 0/0
 24149 ;;		Unchanged: 0/0
 24150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24151 ;;      Params:         0       0       0       0       0       0       0
 24152 ;;      Locals:         0       0       0       0       0       0       0
 24153 ;;      Temps:          0       0       0       0       0       0       0
 24154 ;;      Totals:         0       0       0       0       0       0       0
 24155 ;;Total ram usage:        0 bytes
 24156 ;; Hardware stack levels used:    1
 24157 ;; Hardware stack levels required when called:    4
 24158 ;; This function calls:
 24159 ;;		_WriteTimer0
 24160 ;;		_init_app_ram
 24161 ;;		_OpenUSART
 24162 ;;		_OpenTimer0
 24163 ;;		_ECANInitialize
 24164 ;; This function is called by:
 24165 ;;		_main
 24166 ;; This function uses a non-reentrant model
 24167 ;;
 24168                           
 24169                           	psect	text69
 24170  0020F6                     __ptext69:
 24171                           	opt stack 0
 24172  0020F6                     _init:
 24173                           	opt stack 25
 24174                           
 24175                           ;main.c: 310: init_app_ram();
 24176                           
 24177                           ;incstack = 0
 24178                           ;incstack = 0
 24179  0020F6  EC29  F011         	call	_init_app_ram	;wreg free
 24180                           
 24181                           ; BSR set to: 0
 24182                           ;main.c: 313: OSCCONbits.IRCF0 = 1;
 24183  0020FA  88D3               	bsf	4051,4,c	;volatile
 24184                           
 24185                           ; BSR set to: 0
 24186                           ;main.c: 314: OSCCONbits.IRCF1 = 1;
 24187  0020FC  8AD3               	bsf	4051,5,c	;volatile
 24188                           
 24189                           ; BSR set to: 0
 24190                           ;main.c: 315: OSCCONbits.IRCF2 = 1;
 24191  0020FE  8CD3               	bsf	4051,6,c	;volatile
 24192                           
 24193                           ; BSR set to: 0
 24194                           ;main.c: 316: OSCTUNEbits.PLLEN = 1;
 24195  002100  8C9B               	bsf	3995,6,c	;volatile
 24196                           
 24197                           ; BSR set to: 0
 24198                           ;main.c: 318: TRISBbits.RB2 = 0;
 24199  002102  9493               	bcf	3987,2,c	;volatile
 24200                           
 24201                           ; BSR set to: 0
 24202                           ;main.c: 319: TRISBbits.RB3 = 1;
 24203  002104  8693               	bsf	3987,3,c	;volatile
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;main.c: 321: TRISCbits.RC1 = 0;
 24207  002106  9294               	bcf	3988,1,c	;volatile
 24208                           
 24209                           ; BSR set to: 0
 24210                           ;main.c: 322: TRISCbits.RC6 = 0;
 24211  002108  9C94               	bcf	3988,6,c	;volatile
 24212                           
 24213                           ; BSR set to: 0
 24214                           ;main.c: 323: TRISCbits.RC7 = 1;
 24215  00210A  8E94               	bsf	3988,7,c	;volatile
 24216                           
 24217                           ;main.c: 327: OpenUSART( 0b01111111 &
 24218                           ;main.c: 328: 0b11111111 &
 24219                           ;main.c: 329: 0b11111110 &
 24220                           ;main.c: 330: 0b11111101 &
 24221                           ;main.c: 331: 0b11111111,
 24222                           ;main.c: 332: 21 );
 24223  00210C  6A1A               	clrf	?_OpenUSART+1,c
 24224  00210E  0E15               	movlw	21
 24225  002110  6E19               	movwf	?_OpenUSART,c
 24226  002112  0E7C               	movlw	124
 24227  002114  ECD0  F011         	call	_OpenUSART
 24228                           
 24229                           ; BSR set to: 0
 24230                           ;main.c: 334: RCIF = 0;
 24231  002118  9A9E               	bcf	3998,5,c	;volatile
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;main.c: 335: RCIP = 0;
 24235  00211A  9A9F               	bcf	3999,5,c	;volatile
 24236                           
 24237                           ; BSR set to: 0
 24238                           ;main.c: 336: RCIE = 1;
 24239  00211C  8A9D               	bsf	3997,5,c	;volatile
 24240                           
 24241                           ; BSR set to: 0
 24242                           ;main.c: 337: PEIE = 1;
 24243  00211E  8CF2               	bsf	intcon,6,c	;volatile
 24244                           
 24245                           ; BSR set to: 0
 24246                           ;main.c: 340: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 24247  002120  0E92               	movlw	146
 24248  002122  ECC0  F00E         	call	_OpenTimer0
 24249                           
 24250                           ; BSR set to: 0
 24251                           ;main.c: 341: WriteTimer0( 0xfb1d );
 24252  002126  0EFB               	movlw	251
 24253  002128  6E1A               	movwf	?_WriteTimer0+1,c
 24254  00212A  0E1D               	movlw	29
 24255  00212C  6E19               	movwf	?_WriteTimer0,c
 24256  00212E  EC87  F00E         	call	_WriteTimer0	;wreg free
 24257                           
 24258                           ;main.c: 344: ECANInitialize();
 24259  002132  ECE7  F013         	call	_ECANInitialize	;wreg free
 24260                           
 24261                           ;main.c: 367: (INTCONbits.GIE = 1);
 24262  002136  8EF2               	bsf	intcon,7,c	;volatile
 24263  002138  0012               	return	
 24264  00213A                     __end_of_init:
 24265                           	opt stack 0
 24266                           tblptru	equ	0xFF8
 24267                           tblptrh	equ	0xFF7
 24268                           tblptrl	equ	0xFF6
 24269                           tablat	equ	0xFF5
 24270                           prodh	equ	0xFF4
 24271                           prodl	equ	0xFF3
 24272                           intcon	equ	0xFF2
 24273                           indf0	equ	0xFEF
 24274                           postinc0	equ	0xFEE
 24275                           fsr0h	equ	0xFEA
 24276                           fsr0l	equ	0xFE9
 24277                           wreg	equ	0xFE8
 24278                           indf1	equ	0xFE7
 24279                           postinc1	equ	0xFE6
 24280                           postdec1	equ	0xFE5
 24281                           fsr1h	equ	0xFE2
 24282                           fsr1l	equ	0xFE1
 24283                           indf2	equ	0xFDF
 24284                           postinc2	equ	0xFDE
 24285                           postdec2	equ	0xFDD
 24286                           plusw2	equ	0xFDB
 24287                           fsr2h	equ	0xFDA
 24288                           fsr2l	equ	0xFD9
 24289                           status	equ	0xFD8
 24290                           
 24291 ;; *************** function _ECANInitialize *****************
 24292 ;; Defined at:
 24293 ;;		line 168 in file "ECAN.c"
 24294 ;; Parameters:    Size  Location     Type
 24295 ;;		None
 24296 ;; Auto vars:     Size  Location     Type
 24297 ;;		None
 24298 ;; Return value:  Size  Location     Type
 24299 ;;		None               void
 24300 ;; Registers used:
 24301 ;;		wreg, status,2, status,0, cstack
 24302 ;; Tracked objects:
 24303 ;;		On entry : F/0
 24304 ;;		On exit  : 0/0
 24305 ;;		Unchanged: 0/0
 24306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24307 ;;      Params:         0       0       0       0       0       0       0
 24308 ;;      Locals:         0       0       0       0       0       0       0
 24309 ;;      Temps:          0       0       0       0       0       0       0
 24310 ;;      Totals:         0       0       0       0       0       0       0
 24311 ;;Total ram usage:        0 bytes
 24312 ;; Hardware stack levels used:    1
 24313 ;; Hardware stack levels required when called:    3
 24314 ;; This function calls:
 24315 ;;		_ECANSetOperationMode
 24316 ;; This function is called by:
 24317 ;;		_init
 24318 ;; This function uses a non-reentrant model
 24319 ;;
 24320                           
 24321                           	psect	text70
 24322  0027CE                     __ptext70:
 24323                           	opt stack 0
 24324  0027CE                     _ECANInitialize:
 24325                           	opt stack 25
 24326                           
 24327                           ; BSR set to: 0
 24328                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24329                           
 24330                           ;incstack = 0
 24331                           ;incstack = 0
 24332  0027CE  0E80               	movlw	128
 24333  0027D0  ECA5  F00E         	call	_ECANSetOperationMode
 24334                           
 24335                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24336  0027D4  0E09               	movlw	9
 24337  0027D6  6E70               	movwf	3952,c	;volatile
 24338                           
 24339                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24340  0027D8  0EFC               	movlw	252
 24341  0027DA  6E71               	movwf	3953,c	;volatile
 24342                           
 24343                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24344                           ;ECAN.c: 181: (0 << 6) |
 24345                           ;ECAN.c: 182: (2-1);
 24346  0027DC  0E01               	movlw	1
 24347  0027DE  6E72               	movwf	3954,c	;volatile
 24348                           
 24349                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24350  0027E0  0E20               	movlw	32
 24351  0027E2  6E73               	movwf	3955,c	;volatile
 24352                           
 24353                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24354  0027E4  8E77               	bsf	3959,7,c	;volatile
 24355                           
 24356                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24357  0027E6  9C77               	bcf	3959,6,c	;volatile
 24358                           
 24359                           ;ECAN.c: 205: RXB0CON = 0;
 24360  0027E8  6A60               	clrf	3936,c	;volatile
 24361                           
 24362                           ;ECAN.c: 211: RXB1CON = 0;
 24363  0027EA  010F               	movlb	15	; () banked
 24364  0027EC  6B50               	clrf	80,b	;volatile
 24365                           
 24366                           ; BSR set to: 15
 24367                           ;ECAN.c: 221: B0CON = 0;
 24368  0027EE  010E               	movlb	14	; () banked
 24369  0027F0  6B20               	clrf	32,b	;volatile
 24370                           
 24371                           ; BSR set to: 14
 24372                           ;ECAN.c: 231: B1CON = 0;
 24373  0027F2  6B30               	clrf	48,b	;volatile
 24374                           
 24375                           ; BSR set to: 14
 24376                           ;ECAN.c: 241: B2CON = 0;
 24377  0027F4  6B40               	clrf	64,b	;volatile
 24378                           
 24379                           ; BSR set to: 14
 24380                           ;ECAN.c: 254: B3CON = 0 << 2;
 24381  0027F6  6B50               	clrf	80,b	;volatile
 24382                           
 24383                           ; BSR set to: 14
 24384                           ;ECAN.c: 264: B4CON = 0 << 2;
 24385  0027F8  6B60               	clrf	96,b	;volatile
 24386                           
 24387                           ; BSR set to: 14
 24388                           ;ECAN.c: 274: B5CON = 0 << 2;
 24389  0027FA  6B70               	clrf	112,b	;volatile
 24390                           
 24391                           ; BSR set to: 14
 24392                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24393  0027FC  0EE0               	movlw	224
 24394  0027FE  010D               	movlb	13	; () banked
 24395  002800  6FF8               	movwf	248,b	;volatile
 24396                           
 24397                           ; BSR set to: 13
 24398                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24399  002802  010F               	movlb	15	; () banked
 24400  002804  6B00               	clrf	0,b	;volatile
 24401                           
 24402                           ; BSR set to: 15
 24403  002806  0E08               	movlw	8
 24404  002808  6F01               	movwf	1,b	;volatile
 24405                           
 24406                           ; BSR set to: 15
 24407  00280A  6B02               	clrf	2,b	;volatile
 24408                           
 24409                           ; BSR set to: 15
 24410  00280C  6B03               	clrf	3,b	;volatile
 24411                           
 24412                           ; BSR set to: 15
 24413                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24414  00280E  0E01               	movlw	1
 24415  002810  010D               	movlb	13	; () banked
 24416  002812  6FD4               	movwf	212,b	;volatile
 24417                           
 24418                           ; BSR set to: 13
 24419                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24420  002814  6BD5               	clrf	213,b	;volatile
 24421                           
 24422                           ; BSR set to: 13
 24423                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 24424  002816  6BE0               	clrf	224,b	;volatile
 24425                           
 24426                           ; BSR set to: 13
 24427                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 24428  002818  0E11               	movlw	17
 24429  00281A  6FE1               	movwf	225,b	;volatile
 24430                           
 24431                           ; BSR set to: 13
 24432                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 24433  00281C  6FE2               	movwf	226,b	;volatile
 24434                           
 24435                           ; BSR set to: 13
 24436                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 24437  00281E  6BE3               	clrf	227,b	;volatile
 24438                           
 24439                           ; BSR set to: 13
 24440                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 24441  002820  6BE4               	clrf	228,b	;volatile
 24442                           
 24443                           ; BSR set to: 13
 24444                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 24445  002822  6BE5               	clrf	229,b	;volatile
 24446                           
 24447                           ; BSR set to: 13
 24448                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 24449  002824  6BE6               	clrf	230,b	;volatile
 24450                           
 24451                           ; BSR set to: 13
 24452                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 24453  002826  6BE7               	clrf	231,b	;volatile
 24454                           
 24455                           ; BSR set to: 13
 24456                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 24457  002828  0E54               	movlw	84
 24458  00282A  6FF0               	movwf	240,b	;volatile
 24459                           
 24460                           ; BSR set to: 13
 24461                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 24462  00282C  0E05               	movlw	5
 24463  00282E  6FF1               	movwf	241,b	;volatile
 24464                           
 24465                           ; BSR set to: 13
 24466                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24467  002830  6BF2               	clrf	242,b	;volatile
 24468                           
 24469                           ; BSR set to: 13
 24470                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24471  002832  6BF2               	clrf	242,b	;volatile
 24472                           
 24473                           ; BSR set to: 13
 24474                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 24475  002834  010F               	movlb	15	; () banked
 24476  002836  6B18               	clrf	24,b	;volatile
 24477                           
 24478                           ; BSR set to: 15
 24479  002838  6B19               	clrf	25,b	;volatile
 24480                           
 24481                           ; BSR set to: 15
 24482  00283A  6B1A               	clrf	26,b	;volatile
 24483                           
 24484                           ; BSR set to: 15
 24485  00283C  6B1B               	clrf	27,b	;volatile
 24486                           
 24487                           ; BSR set to: 15
 24488                           ;ECAN.c: 482: RXM0EXIDM = 1;
 24489  00283E  8719               	bsf	25,3,b	;volatile
 24490                           
 24491                           ; BSR set to: 15
 24492                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 24493  002840  6B1C               	clrf	28,b	;volatile
 24494                           
 24495                           ; BSR set to: 15
 24496  002842  6B1D               	clrf	29,b	;volatile
 24497                           
 24498                           ; BSR set to: 15
 24499  002844  6B1E               	clrf	30,b	;volatile
 24500                           
 24501                           ; BSR set to: 15
 24502  002846  6B1F               	clrf	31,b	;volatile
 24503                           
 24504                           ; BSR set to: 15
 24505                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 24506  002848  871D               	bsf	29,3,b	;volatile
 24507                           
 24508                           ; BSR set to: 15
 24509                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 24510  00284A  0E20               	movlw	32
 24511  00284C  EFA5  F00E         	goto	_ECANSetOperationMode
 24512  002850                     __end_of_ECANInitialize:
 24513                           	opt stack 0
 24514                           tblptru	equ	0xFF8
 24515                           tblptrh	equ	0xFF7
 24516                           tblptrl	equ	0xFF6
 24517                           tablat	equ	0xFF5
 24518                           prodh	equ	0xFF4
 24519                           prodl	equ	0xFF3
 24520                           intcon	equ	0xFF2
 24521                           indf0	equ	0xFEF
 24522                           postinc0	equ	0xFEE
 24523                           fsr0h	equ	0xFEA
 24524                           fsr0l	equ	0xFE9
 24525                           wreg	equ	0xFE8
 24526                           indf1	equ	0xFE7
 24527                           postinc1	equ	0xFE6
 24528                           postdec1	equ	0xFE5
 24529                           fsr1h	equ	0xFE2
 24530                           fsr1l	equ	0xFE1
 24531                           indf2	equ	0xFDF
 24532                           postinc2	equ	0xFDE
 24533                           postdec2	equ	0xFDD
 24534                           plusw2	equ	0xFDB
 24535                           fsr2h	equ	0xFDA
 24536                           fsr2l	equ	0xFD9
 24537                           status	equ	0xFD8
 24538                           
 24539 ;; *************** function _ECANSetOperationMode *****************
 24540 ;; Defined at:
 24541 ;;		line 1012 in file "ECAN.c"
 24542 ;; Parameters:    Size  Location     Type
 24543 ;;  mode            1    wreg     enum E16346
 24544 ;; Auto vars:     Size  Location     Type
 24545 ;;  mode            1   24[COMRAM] enum E16346
 24546 ;; Return value:  Size  Location     Type
 24547 ;;		None               void
 24548 ;; Registers used:
 24549 ;;		wreg, status,2, status,0
 24550 ;; Tracked objects:
 24551 ;;		On entry : 0/0
 24552 ;;		On exit  : 0/0
 24553 ;;		Unchanged: 0/0
 24554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24555 ;;      Params:         0       0       0       0       0       0       0
 24556 ;;      Locals:         1       0       0       0       0       0       0
 24557 ;;      Temps:          0       0       0       0       0       0       0
 24558 ;;      Totals:         1       0       0       0       0       0       0
 24559 ;;Total ram usage:        1 bytes
 24560 ;; Hardware stack levels used:    1
 24561 ;; Hardware stack levels required when called:    2
 24562 ;; This function calls:
 24563 ;;		Nothing
 24564 ;; This function is called by:
 24565 ;;		_doModeVerbose
 24566 ;;		_doModeVscp
 24567 ;;		_doModeSLCAN
 24568 ;;		_ECANInitialize
 24569 ;; This function uses a non-reentrant model
 24570 ;;
 24571                           
 24572                           	psect	text71
 24573  001D4A                     __ptext71:
 24574                           	opt stack 0
 24575  001D4A                     _ECANSetOperationMode:
 24576                           	opt stack 26
 24577                           
 24578                           ;incstack = 0
 24579                           ;incstack = 0
 24580                           ;ECANSetOperationMode@mode stored from wreg
 24581  001D4A  CFE8 F019          	movff	wreg,ECANSetOperationMode@mode
 24582                           
 24583                           ;ECAN.c: 1013: CANCON &= 0x1F;
 24584  001D4E  0E1F               	movlw	31
 24585  001D50  166F               	andwf	3951,f,c	;volatile
 24586                           
 24587                           ;ECAN.c: 1014: CANCON |= mode;
 24588  001D52  5019               	movf	ECANSetOperationMode@mode,w,c
 24589  001D54  126F               	iorwf	3951,f,c	;volatile
 24590  001D56                     l13725:
 24591  001D56  506F               	movf	3951,w,c	;volatile
 24592  001D58  0BE0               	andlw	224
 24593  001D5A  1819               	xorwf	ECANSetOperationMode@mode,w,c
 24594  001D5C  B4D8               	btfsc	status,2,c
 24595  001D5E  0012               	return	
 24596  001D60  D7FA               	goto	l13725
 24597  001D62                     __end_of_ECANSetOperationMode:
 24598                           	opt stack 0
 24599                           tblptru	equ	0xFF8
 24600                           tblptrh	equ	0xFF7
 24601                           tblptrl	equ	0xFF6
 24602                           tablat	equ	0xFF5
 24603                           prodh	equ	0xFF4
 24604                           prodl	equ	0xFF3
 24605                           intcon	equ	0xFF2
 24606                           indf0	equ	0xFEF
 24607                           postinc0	equ	0xFEE
 24608                           fsr0h	equ	0xFEA
 24609                           fsr0l	equ	0xFE9
 24610                           wreg	equ	0xFE8
 24611                           indf1	equ	0xFE7
 24612                           postinc1	equ	0xFE6
 24613                           postdec1	equ	0xFE5
 24614                           fsr1h	equ	0xFE2
 24615                           fsr1l	equ	0xFE1
 24616                           indf2	equ	0xFDF
 24617                           postinc2	equ	0xFDE
 24618                           postdec2	equ	0xFDD
 24619                           plusw2	equ	0xFDB
 24620                           fsr2h	equ	0xFDA
 24621                           fsr2l	equ	0xFD9
 24622                           status	equ	0xFD8
 24623                           
 24624 ;; *************** function _OpenTimer0 *****************
 24625 ;; Defined at:
 24626 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 24627 ;; Parameters:    Size  Location     Type
 24628 ;;  config          1    wreg     unsigned char 
 24629 ;; Auto vars:     Size  Location     Type
 24630 ;;  config          1   24[COMRAM] unsigned char 
 24631 ;; Return value:  Size  Location     Type
 24632 ;;		None               void
 24633 ;; Registers used:
 24634 ;;		wreg, status,2, status,0
 24635 ;; Tracked objects:
 24636 ;;		On entry : F/0
 24637 ;;		On exit  : F/0
 24638 ;;		Unchanged: F/0
 24639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24640 ;;      Params:         0       0       0       0       0       0       0
 24641 ;;      Locals:         1       0       0       0       0       0       0
 24642 ;;      Temps:          0       0       0       0       0       0       0
 24643 ;;      Totals:         1       0       0       0       0       0       0
 24644 ;;Total ram usage:        1 bytes
 24645 ;; Hardware stack levels used:    1
 24646 ;; Hardware stack levels required when called:    2
 24647 ;; This function calls:
 24648 ;;		Nothing
 24649 ;; This function is called by:
 24650 ;;		_init
 24651 ;; This function uses a non-reentrant model
 24652 ;;
 24653                           
 24654                           	psect	text72
 24655  001D80                     __ptext72:
 24656                           	opt stack 0
 24657  001D80                     _OpenTimer0:
 24658                           	opt stack 26
 24659                           
 24660                           ;incstack = 0
 24661                           ;incstack = 0
 24662                           ;OpenTimer0@config stored from wreg
 24663  001D80  CFE8 F019          	movff	wreg,OpenTimer0@config
 24664                           
 24665                           ; BSR set to: 0
 24666  001D84  5019               	movf	OpenTimer0@config,w,c
 24667  001D86  0B7F               	andlw	127
 24668  001D88  6ED5               	movwf	4053,c	;volatile
 24669                           
 24670                           ; BSR set to: 0
 24671  001D8A  6AD7               	clrf	4055,c	;volatile
 24672                           
 24673                           ; BSR set to: 0
 24674  001D8C  6AD6               	clrf	4054,c	;volatile
 24675                           
 24676                           ; BSR set to: 0
 24677  001D8E  94F2               	bcf	intcon,2,c	;volatile
 24678                           
 24679                           ; BSR set to: 0
 24680  001D90  AE19               	btfss	OpenTimer0@config,7,c
 24681  001D92  D002               	goto	l1669
 24682                           
 24683                           ; BSR set to: 0
 24684  001D94  8AF2               	bsf	intcon,5,c	;volatile
 24685  001D96  D001               	goto	l1670
 24686  001D98                     l1669:
 24687                           
 24688                           ; BSR set to: 0
 24689  001D98  9AF2               	bcf	intcon,5,c	;volatile
 24690  001D9A                     l1670:
 24691                           
 24692                           ; BSR set to: 0
 24693  001D9A  8ED5               	bsf	4053,7,c	;volatile
 24694                           
 24695                           ; BSR set to: 0
 24696  001D9C  0012               	return	
 24697  001D9E                     __end_of_OpenTimer0:
 24698                           	opt stack 0
 24699                           tblptru	equ	0xFF8
 24700                           tblptrh	equ	0xFF7
 24701                           tblptrl	equ	0xFF6
 24702                           tablat	equ	0xFF5
 24703                           prodh	equ	0xFF4
 24704                           prodl	equ	0xFF3
 24705                           intcon	equ	0xFF2
 24706                           indf0	equ	0xFEF
 24707                           postinc0	equ	0xFEE
 24708                           fsr0h	equ	0xFEA
 24709                           fsr0l	equ	0xFE9
 24710                           wreg	equ	0xFE8
 24711                           indf1	equ	0xFE7
 24712                           postinc1	equ	0xFE6
 24713                           postdec1	equ	0xFE5
 24714                           fsr1h	equ	0xFE2
 24715                           fsr1l	equ	0xFE1
 24716                           indf2	equ	0xFDF
 24717                           postinc2	equ	0xFDE
 24718                           postdec2	equ	0xFDD
 24719                           plusw2	equ	0xFDB
 24720                           fsr2h	equ	0xFDA
 24721                           fsr2l	equ	0xFD9
 24722                           status	equ	0xFD8
 24723                           
 24724 ;; *************** function _OpenUSART *****************
 24725 ;; Defined at:
 24726 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 24727 ;; Parameters:    Size  Location     Type
 24728 ;;  config          1    wreg     unsigned char 
 24729 ;;  spbrg           2   24[COMRAM] unsigned int 
 24730 ;; Auto vars:     Size  Location     Type
 24731 ;;  config          1   26[COMRAM] unsigned char 
 24732 ;; Return value:  Size  Location     Type
 24733 ;;		None               void
 24734 ;; Registers used:
 24735 ;;		wreg, status,2
 24736 ;; Tracked objects:
 24737 ;;		On entry : F/0
 24738 ;;		On exit  : F/0
 24739 ;;		Unchanged: F/0
 24740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24741 ;;      Params:         2       0       0       0       0       0       0
 24742 ;;      Locals:         1       0       0       0       0       0       0
 24743 ;;      Temps:          0       0       0       0       0       0       0
 24744 ;;      Totals:         3       0       0       0       0       0       0
 24745 ;;Total ram usage:        3 bytes
 24746 ;; Hardware stack levels used:    1
 24747 ;; Hardware stack levels required when called:    2
 24748 ;; This function calls:
 24749 ;;		Nothing
 24750 ;; This function is called by:
 24751 ;;		_init
 24752 ;; This function uses a non-reentrant model
 24753 ;;
 24754                           
 24755                           	psect	text73
 24756  0023A0                     __ptext73:
 24757                           	opt stack 0
 24758  0023A0                     _OpenUSART:
 24759                           	opt stack 26
 24760                           
 24761                           ; BSR set to: 0
 24762                           ;incstack = 0
 24763                           ;incstack = 0
 24764                           ;OpenUSART@config stored from wreg
 24765  0023A0  CFE8 F01B          	movff	wreg,OpenUSART@config
 24766                           
 24767                           ; BSR set to: 0
 24768  0023A4  6AAC               	clrf	4012,c	;volatile
 24769  0023A6  6AAB               	clrf	4011,c	;volatile
 24770                           
 24771                           ; BSR set to: 0
 24772  0023A8  B01B               	btfsc	OpenUSART@config,0,c
 24773                           
 24774                           ; BSR set to: 0
 24775  0023AA  88AC               	bsf	4012,4,c	;volatile
 24776                           
 24777                           ; BSR set to: 0
 24778  0023AC  A21B               	btfss	OpenUSART@config,1,c
 24779  0023AE  D002               	goto	l10381
 24780                           
 24781                           ; BSR set to: 0
 24782  0023B0  8CAC               	bsf	4012,6,c	;volatile
 24783  0023B2  8CAB               	bsf	4011,6,c	;volatile
 24784  0023B4                     l10381:
 24785                           
 24786                           ; BSR set to: 0
 24787  0023B4  B41B               	btfsc	OpenUSART@config,2,c
 24788                           
 24789                           ; BSR set to: 0
 24790  0023B6  8EAC               	bsf	4012,7,c	;volatile
 24791                           
 24792                           ; BSR set to: 0
 24793  0023B8  A61B               	btfss	OpenUSART@config,3,c
 24794  0023BA  D002               	goto	l1702
 24795                           
 24796                           ; BSR set to: 0
 24797  0023BC  88AB               	bsf	4011,4,c	;volatile
 24798  0023BE  D001               	goto	l10389
 24799  0023C0                     l1702:
 24800                           
 24801                           ; BSR set to: 0
 24802  0023C0  8AAB               	bsf	4011,5,c	;volatile
 24803  0023C2                     l10389:
 24804                           
 24805                           ; BSR set to: 0
 24806  0023C2  B81B               	btfsc	OpenUSART@config,4,c
 24807                           
 24808                           ; BSR set to: 0
 24809  0023C4  84AC               	bsf	4012,2,c	;volatile
 24810                           
 24811                           ; BSR set to: 0
 24812  0023C6  989E               	bcf	3998,4,c	;volatile
 24813                           
 24814                           ; BSR set to: 0
 24815  0023C8  BA1B               	btfsc	OpenUSART@config,5,c
 24816                           
 24817                           ; BSR set to: 0
 24818  0023CA  86AB               	bsf	4011,3,c	;volatile
 24819                           
 24820                           ; BSR set to: 0
 24821  0023CC  AC1B               	btfss	OpenUSART@config,6,c
 24822  0023CE  D002               	goto	l1706
 24823                           
 24824                           ; BSR set to: 0
 24825  0023D0  8A9D               	bsf	3997,5,c	;volatile
 24826  0023D2  D001               	goto	l1707
 24827  0023D4                     l1706:
 24828                           
 24829                           ; BSR set to: 0
 24830  0023D4  9A9D               	bcf	3997,5,c	;volatile
 24831  0023D6                     l1707:
 24832                           
 24833                           ; BSR set to: 0
 24834  0023D6  9A9E               	bcf	3998,5,c	;volatile
 24835                           
 24836                           ; BSR set to: 0
 24837  0023D8  AE1B               	btfss	OpenUSART@config,7,c
 24838  0023DA  D002               	goto	l1708
 24839                           
 24840                           ; BSR set to: 0
 24841  0023DC  889D               	bsf	3997,4,c	;volatile
 24842  0023DE  D001               	goto	l1709
 24843  0023E0                     l1708:
 24844                           
 24845                           ; BSR set to: 0
 24846  0023E0  989D               	bcf	3997,4,c	;volatile
 24847  0023E2                     l1709:
 24848                           
 24849                           ; BSR set to: 0
 24850  0023E2  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 24851                           
 24852                           ; BSR set to: 0
 24853  0023E6  501A               	movf	OpenUSART@spbrg+1,w,c
 24854  0023E8  6EB0               	movwf	4016,c	;volatile
 24855                           
 24856                           ; BSR set to: 0
 24857  0023EA  8AAC               	bsf	4012,5,c	;volatile
 24858                           
 24859                           ; BSR set to: 0
 24860  0023EC  8EAB               	bsf	4011,7,c	;volatile
 24861                           
 24862                           ; BSR set to: 0
 24863  0023EE  9C94               	bcf	3988,6,c	;volatile
 24864                           
 24865                           ; BSR set to: 0
 24866  0023F0  8E94               	bsf	3988,7,c	;volatile
 24867                           
 24868                           ; BSR set to: 0
 24869  0023F2  B8AC               	btfsc	4012,4,c	;volatile
 24870                           
 24871                           ; BSR set to: 0
 24872  0023F4  BEAC               	btfsc	4012,7,c	;volatile
 24873  0023F6  D001               	goto	l1711
 24874                           
 24875                           ; BSR set to: 0
 24876  0023F8  8C94               	bsf	3988,6,c	;volatile
 24877  0023FA                     l1711:
 24878                           
 24879                           ; BSR set to: 0
 24880  0023FA  0012               	return	
 24881  0023FC                     __end_of_OpenUSART:
 24882                           	opt stack 0
 24883                           tblptru	equ	0xFF8
 24884                           tblptrh	equ	0xFF7
 24885                           tblptrl	equ	0xFF6
 24886                           tablat	equ	0xFF5
 24887                           prodh	equ	0xFF4
 24888                           prodl	equ	0xFF3
 24889                           intcon	equ	0xFF2
 24890                           indf0	equ	0xFEF
 24891                           postinc0	equ	0xFEE
 24892                           fsr0h	equ	0xFEA
 24893                           fsr0l	equ	0xFE9
 24894                           wreg	equ	0xFE8
 24895                           indf1	equ	0xFE7
 24896                           postinc1	equ	0xFE6
 24897                           postdec1	equ	0xFE5
 24898                           fsr1h	equ	0xFE2
 24899                           fsr1l	equ	0xFE1
 24900                           indf2	equ	0xFDF
 24901                           postinc2	equ	0xFDE
 24902                           postdec2	equ	0xFDD
 24903                           plusw2	equ	0xFDB
 24904                           fsr2h	equ	0xFDA
 24905                           fsr2l	equ	0xFD9
 24906                           status	equ	0xFD8
 24907                           
 24908 ;; *************** function _WriteTimer0 *****************
 24909 ;; Defined at:
 24910 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 24911 ;; Parameters:    Size  Location     Type
 24912 ;;  timer0          2   24[COMRAM] unsigned int 
 24913 ;; Auto vars:     Size  Location     Type
 24914 ;;  timer           2   26[COMRAM] struct Timers
 24915 ;; Return value:  Size  Location     Type
 24916 ;;		None               void
 24917 ;; Registers used:
 24918 ;;		None
 24919 ;; Tracked objects:
 24920 ;;		On entry : F/0
 24921 ;;		On exit  : F/0
 24922 ;;		Unchanged: F/0
 24923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24924 ;;      Params:         2       0       0       0       0       0       0
 24925 ;;      Locals:         2       0       0       0       0       0       0
 24926 ;;      Temps:          0       0       0       0       0       0       0
 24927 ;;      Totals:         4       0       0       0       0       0       0
 24928 ;;Total ram usage:        4 bytes
 24929 ;; Hardware stack levels used:    1
 24930 ;; Hardware stack levels required when called:    2
 24931 ;; This function calls:
 24932 ;;		Nothing
 24933 ;; This function is called by:
 24934 ;;		_init
 24935 ;; This function uses a non-reentrant model
 24936 ;;
 24937                           
 24938                           	psect	text74
 24939  001D0E                     __ptext74:
 24940                           	opt stack 0
 24941  001D0E                     _WriteTimer0:
 24942                           	opt stack 26
 24943                           
 24944                           ; BSR set to: 0
 24945                           
 24946                           ; BSR set to: 0
 24947                           ;incstack = 0
 24948                           ;incstack = 0
 24949  001D0E  C019  F01B         	movff	WriteTimer0@timer0,WriteTimer0@timer
 24950  001D12  C01A  F01C         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 24951  001D16  C01C  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 24952  001D1A  C01B  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 24953                           
 24954                           ; BSR set to: 0
 24955  001D1E  0012               	return	
 24956  001D20                     __end_of_WriteTimer0:
 24957                           	opt stack 0
 24958                           tblptru	equ	0xFF8
 24959                           tblptrh	equ	0xFF7
 24960                           tblptrl	equ	0xFF6
 24961                           tablat	equ	0xFF5
 24962                           prodh	equ	0xFF4
 24963                           prodl	equ	0xFF3
 24964                           intcon	equ	0xFF2
 24965                           indf0	equ	0xFEF
 24966                           postinc0	equ	0xFEE
 24967                           fsr0h	equ	0xFEA
 24968                           fsr0l	equ	0xFE9
 24969                           wreg	equ	0xFE8
 24970                           indf1	equ	0xFE7
 24971                           postinc1	equ	0xFE6
 24972                           postdec1	equ	0xFE5
 24973                           fsr1h	equ	0xFE2
 24974                           fsr1l	equ	0xFE1
 24975                           indf2	equ	0xFDF
 24976                           postinc2	equ	0xFDE
 24977                           postdec2	equ	0xFDD
 24978                           plusw2	equ	0xFDB
 24979                           fsr2h	equ	0xFDA
 24980                           fsr2l	equ	0xFD9
 24981                           status	equ	0xFD8
 24982                           
 24983 ;; *************** function _vscp_restoreDefaults *****************
 24984 ;; Defined at:
 24985 ;;		line 2465 in file "main.c"
 24986 ;; Parameters:    Size  Location     Type
 24987 ;;		None
 24988 ;; Auto vars:     Size  Location     Type
 24989 ;;		None
 24990 ;; Return value:  Size  Location     Type
 24991 ;;		None               void
 24992 ;; Registers used:
 24993 ;;		wreg, status,2, status,0, cstack
 24994 ;; Tracked objects:
 24995 ;;		On entry : 0/0
 24996 ;;		On exit  : F/0
 24997 ;;		Unchanged: 0/0
 24998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24999 ;;      Params:         0       0       0       0       0       0       0
 25000 ;;      Locals:         0       0       0       0       0       0       0
 25001 ;;      Temps:          0       0       0       0       0       0       0
 25002 ;;      Totals:         0       0       0       0       0       0       0
 25003 ;;Total ram usage:        0 bytes
 25004 ;; Hardware stack levels used:    1
 25005 ;; Hardware stack levels required when called:    4
 25006 ;; This function calls:
 25007 ;;		_init_app_ram
 25008 ;;		_init_app_eeprom
 25009 ;; This function is called by:
 25010 ;;		_main
 25011 ;; This function uses a non-reentrant model
 25012 ;;
 25013                           
 25014                           	psect	text75
 25015  001CE2                     __ptext75:
 25016                           	opt stack 0
 25017  001CE2                     _vscp_restoreDefaults:
 25018                           	opt stack 25
 25019                           
 25020                           ;main.c: 2466: init_app_eeprom();
 25021                           
 25022                           ; BSR set to: 0
 25023                           ;incstack = 0
 25024                           ;incstack = 0
 25025  001CE2  EC6A  F014         	call	_init_app_eeprom	;wreg free
 25026                           
 25027                           ;main.c: 2467: init_app_ram();
 25028  001CE6  EF29  F011         	goto	_init_app_ram	;wreg free
 25029  001CEA                     __end_of_vscp_restoreDefaults:
 25030                           	opt stack 0
 25031                           tblptru	equ	0xFF8
 25032                           tblptrh	equ	0xFF7
 25033                           tblptrl	equ	0xFF6
 25034                           tablat	equ	0xFF5
 25035                           prodh	equ	0xFF4
 25036                           prodl	equ	0xFF3
 25037                           intcon	equ	0xFF2
 25038                           indf0	equ	0xFEF
 25039                           postinc0	equ	0xFEE
 25040                           fsr0h	equ	0xFEA
 25041                           fsr0l	equ	0xFE9
 25042                           wreg	equ	0xFE8
 25043                           indf1	equ	0xFE7
 25044                           postinc1	equ	0xFE6
 25045                           postdec1	equ	0xFE5
 25046                           fsr1h	equ	0xFE2
 25047                           fsr1l	equ	0xFE1
 25048                           indf2	equ	0xFDF
 25049                           postinc2	equ	0xFDE
 25050                           postdec2	equ	0xFDD
 25051                           plusw2	equ	0xFDB
 25052                           fsr2h	equ	0xFDA
 25053                           fsr2l	equ	0xFD9
 25054                           status	equ	0xFD8
 25055                           
 25056 ;; *************** function _init_app_eeprom *****************
 25057 ;; Defined at:
 25058 ;;		line 394 in file "main.c"
 25059 ;; Parameters:    Size  Location     Type
 25060 ;;		None
 25061 ;; Auto vars:     Size  Location     Type
 25062 ;;  i               1   27[COMRAM] unsigned char 
 25063 ;; Return value:  Size  Location     Type
 25064 ;;		None               void
 25065 ;; Registers used:
 25066 ;;		wreg, status,2, status,0, cstack
 25067 ;; Tracked objects:
 25068 ;;		On entry : 0/0
 25069 ;;		On exit  : 0/0
 25070 ;;		Unchanged: 0/0
 25071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25072 ;;      Params:         0       0       0       0       0       0       0
 25073 ;;      Locals:         1       0       0       0       0       0       0
 25074 ;;      Temps:          0       0       0       0       0       0       0
 25075 ;;      Totals:         1       0       0       0       0       0       0
 25076 ;;Total ram usage:        1 bytes
 25077 ;; Hardware stack levels used:    1
 25078 ;; Hardware stack levels required when called:    3
 25079 ;; This function calls:
 25080 ;;		_writeEEPROM
 25081 ;; This function is called by:
 25082 ;;		_vscp_restoreDefaults
 25083 ;; This function uses a non-reentrant model
 25084 ;;
 25085                           
 25086                           	psect	text76
 25087  0028D4                     __ptext76:
 25088                           	opt stack 0
 25089  0028D4                     _init_app_eeprom:
 25090                           	opt stack 25
 25091                           
 25092                           ;main.c: 395: uint8_t i;
 25093                           ;main.c: 397: writeEEPROM( 0x01, 0x55 );
 25094                           
 25095                           ; BSR set to: 0
 25096                           ;incstack = 0
 25097                           ;incstack = 0
 25098  0028D4  6A1A               	clrf	?_writeEEPROM+1,c
 25099  0028D6  0E01               	movlw	1
 25100  0028D8  6E19               	movwf	?_writeEEPROM,c
 25101  0028DA  0E55               	movlw	85
 25102  0028DC  6E1B               	movwf	?_writeEEPROM+2,c
 25103  0028DE  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25104                           
 25105                           ;main.c: 398: writeEEPROM( 0x02, 0xAA );
 25106  0028E2  6A1A               	clrf	?_writeEEPROM+1,c
 25107  0028E4  0E02               	movlw	2
 25108  0028E6  6E19               	movwf	?_writeEEPROM,c
 25109  0028E8  0EAA               	movlw	170
 25110  0028EA  6E1B               	movwf	?_writeEEPROM+2,c
 25111  0028EC  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25112                           
 25113                           ;main.c: 399: writeEEPROM( 0x03, 0 );
 25114  0028F0  6A1A               	clrf	?_writeEEPROM+1,c
 25115  0028F2  0E03               	movlw	3
 25116  0028F4  6E19               	movwf	?_writeEEPROM,c
 25117  0028F6  0E00               	movlw	0
 25118  0028F8  6A1B               	clrf	?_writeEEPROM+2,c
 25119  0028FA  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25120                           
 25121                           ;main.c: 400: writeEEPROM( 0x05, 0 );
 25122  0028FE  6A1A               	clrf	?_writeEEPROM+1,c
 25123  002900  0E05               	movlw	5
 25124  002902  6E19               	movwf	?_writeEEPROM,c
 25125  002904  0E00               	movlw	0
 25126  002906  6A1B               	clrf	?_writeEEPROM+2,c
 25127  002908  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25128                           
 25129                           ;main.c: 401: writeEEPROM( 0x06, 0 );
 25130  00290C  6A1A               	clrf	?_writeEEPROM+1,c
 25131  00290E  0E06               	movlw	6
 25132  002910  6E19               	movwf	?_writeEEPROM,c
 25133  002912  0E00               	movlw	0
 25134  002914  6A1B               	clrf	?_writeEEPROM+2,c
 25135  002916  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25136                           
 25137                           ;main.c: 402: writeEEPROM( 0x09, 10u );
 25138  00291A  6A1A               	clrf	?_writeEEPROM+1,c
 25139  00291C  0E09               	movlw	9
 25140  00291E  6E19               	movwf	?_writeEEPROM,c
 25141  002920  0E0A               	movlw	10
 25142  002922  6E1B               	movwf	?_writeEEPROM+2,c
 25143  002924  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25144                           
 25145                           ;main.c: 405: for ( i=0x20; i<(0x5C + 4); i++ ) {
 25146  002928  0E20               	movlw	32
 25147  00292A  6E1C               	movwf	init_app_eeprom@i,c
 25148  00292C                     l10531:
 25149                           
 25150                           ;main.c: 406: writeEEPROM( 0x01, 0xFF );
 25151  00292C  6A1A               	clrf	?_writeEEPROM+1,c
 25152  00292E  0E01               	movlw	1
 25153  002930  6E19               	movwf	?_writeEEPROM,c
 25154  002932  0EFF               	movlw	255
 25155  002934  681B               	setf	?_writeEEPROM+2,c
 25156  002936  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25157  00293A  2A1C               	incf	init_app_eeprom@i,f,c
 25158  00293C  0E5F               	movlw	95
 25159  00293E  641C               	cpfsgt	init_app_eeprom@i,c
 25160  002940  D7F5               	goto	l10531
 25161                           
 25162                           ;main.c: 407: }
 25163                           ;main.c: 410: for ( i=0x60; i<(0x64 + 4); i++ ) {
 25164  002942  0E60               	movlw	96
 25165  002944  6E1C               	movwf	init_app_eeprom@i,c
 25166  002946                     l10543:
 25167                           
 25168                           ;main.c: 411: writeEEPROM( 0x01, 0xFF );
 25169  002946  6A1A               	clrf	?_writeEEPROM+1,c
 25170  002948  0E01               	movlw	1
 25171  00294A  6E19               	movwf	?_writeEEPROM,c
 25172  00294C  0EFF               	movlw	255
 25173  00294E  681B               	setf	?_writeEEPROM+2,c
 25174  002950  ECDE  F00E         	call	_writeEEPROM	;wreg free
 25175  002954  2A1C               	incf	init_app_eeprom@i,f,c
 25176  002956  0E67               	movlw	103
 25177  002958  641C               	cpfsgt	init_app_eeprom@i,c
 25178  00295A  D7F5               	goto	l10543
 25179  00295C  0C67               	retlw	103
 25180  00295E                     __end_of_init_app_eeprom:
 25181                           	opt stack 0
 25182                           tblptru	equ	0xFF8
 25183                           tblptrh	equ	0xFF7
 25184                           tblptrl	equ	0xFF6
 25185                           tablat	equ	0xFF5
 25186                           prodh	equ	0xFF4
 25187                           prodl	equ	0xFF3
 25188                           intcon	equ	0xFF2
 25189                           indf0	equ	0xFEF
 25190                           postinc0	equ	0xFEE
 25191                           fsr0h	equ	0xFEA
 25192                           fsr0l	equ	0xFE9
 25193                           wreg	equ	0xFE8
 25194                           indf1	equ	0xFE7
 25195                           postinc1	equ	0xFE6
 25196                           postdec1	equ	0xFE5
 25197                           fsr1h	equ	0xFE2
 25198                           fsr1l	equ	0xFE1
 25199                           indf2	equ	0xFDF
 25200                           postinc2	equ	0xFDE
 25201                           postdec2	equ	0xFDD
 25202                           plusw2	equ	0xFDB
 25203                           fsr2h	equ	0xFDA
 25204                           fsr2l	equ	0xFD9
 25205                           status	equ	0xFD8
 25206                           
 25207 ;; *************** function _writeEEPROM *****************
 25208 ;; Defined at:
 25209 ;;		line 23 in file "eeprom.c"
 25210 ;; Parameters:    Size  Location     Type
 25211 ;;  address         2   24[COMRAM] unsigned short 
 25212 ;;  data            1   26[COMRAM] unsigned char 
 25213 ;; Auto vars:     Size  Location     Type
 25214 ;;		None
 25215 ;; Return value:  Size  Location     Type
 25216 ;;		None               void
 25217 ;; Registers used:
 25218 ;;		wreg, status,2
 25219 ;; Tracked objects:
 25220 ;;		On entry : 0/1
 25221 ;;		On exit  : 0/0
 25222 ;;		Unchanged: 0/0
 25223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25224 ;;      Params:         3       0       0       0       0       0       0
 25225 ;;      Locals:         0       0       0       0       0       0       0
 25226 ;;      Temps:          0       0       0       0       0       0       0
 25227 ;;      Totals:         3       0       0       0       0       0       0
 25228 ;;Total ram usage:        3 bytes
 25229 ;; Hardware stack levels used:    1
 25230 ;; Hardware stack levels required when called:    2
 25231 ;; This function calls:
 25232 ;;		Nothing
 25233 ;; This function is called by:
 25234 ;;		_init_app_eeprom
 25235 ;;		_doModeVerbose
 25236 ;;		_doModeSLCAN
 25237 ;; This function uses a non-reentrant model
 25238 ;;
 25239                           
 25240                           	psect	text77
 25241  001DBC                     __ptext77:
 25242                           	opt stack 0
 25243  001DBC                     _writeEEPROM:
 25244                           	opt stack 26
 25245                           
 25246                           ;eeprom.c: 29: EEADR = address & 0xff;
 25247                           
 25248                           ;incstack = 0
 25249                           ;incstack = 0
 25250  001DBC  C019  FFA9         	movff	writeEEPROM@address,4009	;volatile
 25251                           
 25252                           ;eeprom.c: 30: EEDATA = data;
 25253  001DC0  C01B  FFA8         	movff	writeEEPROM@data,4008	;volatile
 25254                           
 25255                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 25256  001DC4  9EA6               	bcf	4006,7,c	;volatile
 25257                           
 25258                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 25259  001DC6  9CA6               	bcf	4006,6,c	;volatile
 25260                           
 25261                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 25262  001DC8  84A6               	bsf	4006,2,c	;volatile
 25263                           
 25264                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 25265  001DCA  9EF2               	bcf	intcon,7,c	;volatile
 25266                           
 25267                           ;eeprom.c: 37: EECON2 = 0x55;
 25268  001DCC  0E55               	movlw	85
 25269  001DCE  6EA7               	movwf	4007,c	;volatile
 25270                           
 25271                           ;eeprom.c: 38: EECON2 = 0xaa;
 25272  001DD0  0EAA               	movlw	170
 25273  001DD2  6EA7               	movwf	4007,c	;volatile
 25274                           
 25275                           ;eeprom.c: 39: EECON1bits.WR = 1;
 25276  001DD4  82A6               	bsf	4006,1,c	;volatile
 25277                           
 25278                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 25279  001DD6  8EF2               	bsf	intcon,7,c	;volatile
 25280  001DD8                     l1449:
 25281  001DD8  A8A1               	btfss	4001,4,c	;volatile
 25282  001DDA  D7FE               	goto	l1449
 25283                           
 25284                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 25285  001DDC  98A1               	bcf	4001,4,c	;volatile
 25286                           
 25287                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 25288  001DDE  94A6               	bcf	4006,2,c	;volatile
 25289  001DE0  0012               	return	
 25290  001DE2                     __end_of_writeEEPROM:
 25291                           	opt stack 0
 25292                           tblptru	equ	0xFF8
 25293                           tblptrh	equ	0xFF7
 25294                           tblptrl	equ	0xFF6
 25295                           tablat	equ	0xFF5
 25296                           prodh	equ	0xFF4
 25297                           prodl	equ	0xFF3
 25298                           intcon	equ	0xFF2
 25299                           indf0	equ	0xFEF
 25300                           postinc0	equ	0xFEE
 25301                           fsr0h	equ	0xFEA
 25302                           fsr0l	equ	0xFE9
 25303                           wreg	equ	0xFE8
 25304                           indf1	equ	0xFE7
 25305                           postinc1	equ	0xFE6
 25306                           postdec1	equ	0xFE5
 25307                           fsr1h	equ	0xFE2
 25308                           fsr1l	equ	0xFE1
 25309                           indf2	equ	0xFDF
 25310                           postinc2	equ	0xFDE
 25311                           postdec2	equ	0xFDD
 25312                           plusw2	equ	0xFDB
 25313                           fsr2h	equ	0xFDA
 25314                           fsr2l	equ	0xFD9
 25315                           status	equ	0xFD8
 25316                           
 25317 ;; *************** function _init_app_ram *****************
 25318 ;; Defined at:
 25319 ;;		line 376 in file "main.c"
 25320 ;; Parameters:    Size  Location     Type
 25321 ;;		None
 25322 ;; Auto vars:     Size  Location     Type
 25323 ;;		None
 25324 ;; Return value:  Size  Location     Type
 25325 ;;		None               void
 25326 ;; Registers used:
 25327 ;;		wreg, status,2, cstack
 25328 ;; Tracked objects:
 25329 ;;		On entry : 0/0
 25330 ;;		On exit  : F/0
 25331 ;;		Unchanged: 0/0
 25332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25333 ;;      Params:         0       0       0       0       0       0       0
 25334 ;;      Locals:         0       0       0       0       0       0       0
 25335 ;;      Temps:          0       0       0       0       0       0       0
 25336 ;;      Totals:         0       0       0       0       0       0       0
 25337 ;;Total ram usage:        0 bytes
 25338 ;; Hardware stack levels used:    1
 25339 ;; Hardware stack levels required when called:    3
 25340 ;; This function calls:
 25341 ;;		_readEEPROM
 25342 ;; This function is called by:
 25343 ;;		_init
 25344 ;;		_vscp_restoreDefaults
 25345 ;; This function uses a non-reentrant model
 25346 ;;
 25347                           
 25348                           	psect	text78
 25349  002252                     __ptext78:
 25350                           	opt stack 0
 25351  002252                     _init_app_ram:
 25352                           	opt stack 25
 25353                           
 25354                           ;main.c: 378: can_receiveOverruns = 0;
 25355                           
 25356                           ;incstack = 0
 25357                           ;incstack = 0
 25358  002252  0101               	movlb	1	; () banked
 25359  002254  6B00               	clrf	_can_receiveOverruns& (0+255),b
 25360  002256  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 25361  002258  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 25362  00225A  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 25363                           
 25364                           ;main.c: 379: can_transmitOverruns = 0;
 25365  00225C  6B04               	clrf	_can_transmitOverruns& (0+255),b
 25366  00225E  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 25367  002260  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 25368  002262  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 25369                           
 25370                           ;main.c: 380: uart_receiveOverruns = 0;
 25371  002264  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 25372  002266  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 25373  002268  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 25374  00226A  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 25375                           
 25376                           ;main.c: 381: uart_transmitOverruns = 0;
 25377  00226C  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 25378  00226E  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 25379  002270  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 25380  002272  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 25381                           
 25382                           ; BSR set to: 1
 25383                           ;main.c: 383: bHex = readEEPROM( 0x06 );
 25384  002274  6A1A               	clrf	?_readEEPROM+1,c
 25385  002276  0E06               	movlw	6
 25386  002278  6E19               	movwf	?_readEEPROM,c
 25387  00227A  EC7E  F00E         	call	_readEEPROM	;wreg free
 25388  00227E  0100               	movlb	0	; () banked
 25389  002280  6FD3               	movwf	_bHex& (0+255),b
 25390                           
 25391                           ;main.c: 384: mode = readEEPROM( 0x03 );
 25392  002282  6A1A               	clrf	?_readEEPROM+1,c
 25393  002284  0E03               	movlw	3
 25394  002286  6E19               	movwf	?_readEEPROM,c
 25395  002288  EC7E  F00E         	call	_readEEPROM	;wreg free
 25396  00228C  0100               	movlb	0	; () banked
 25397  00228E  6FD7               	movwf	_mode& (0+255),b
 25398                           
 25399                           ;main.c: 386: rwtimeout = readEEPROM( 0x09 );
 25400  002290  6A1A               	clrf	?_readEEPROM+1,c
 25401  002292  0E09               	movlw	9
 25402  002294  6E19               	movwf	?_readEEPROM,c
 25403  002296  EC7E  F00E         	call	_readEEPROM	;wreg free
 25404  00229A  0100               	movlb	0	; () banked
 25405  00229C  6FD9               	movwf	_rwtimeout& (0+255),b
 25406                           
 25407                           ; BSR set to: 0
 25408  00229E  0012               	return	
 25409  0022A0                     __end_of_init_app_ram:
 25410                           	opt stack 0
 25411                           tblptru	equ	0xFF8
 25412                           tblptrh	equ	0xFF7
 25413                           tblptrl	equ	0xFF6
 25414                           tablat	equ	0xFF5
 25415                           prodh	equ	0xFF4
 25416                           prodl	equ	0xFF3
 25417                           intcon	equ	0xFF2
 25418                           indf0	equ	0xFEF
 25419                           postinc0	equ	0xFEE
 25420                           fsr0h	equ	0xFEA
 25421                           fsr0l	equ	0xFE9
 25422                           wreg	equ	0xFE8
 25423                           indf1	equ	0xFE7
 25424                           postinc1	equ	0xFE6
 25425                           postdec1	equ	0xFE5
 25426                           fsr1h	equ	0xFE2
 25427                           fsr1l	equ	0xFE1
 25428                           indf2	equ	0xFDF
 25429                           postinc2	equ	0xFDE
 25430                           postdec2	equ	0xFDD
 25431                           plusw2	equ	0xFDB
 25432                           fsr2h	equ	0xFDA
 25433                           fsr2l	equ	0xFD9
 25434                           status	equ	0xFD8
 25435                           
 25436 ;; *************** function _readEEPROM *****************
 25437 ;; Defined at:
 25438 ;;		line 87 in file "eeprom.c"
 25439 ;; Parameters:    Size  Location     Type
 25440 ;;  address         2   24[COMRAM] unsigned short 
 25441 ;; Auto vars:     Size  Location     Type
 25442 ;;  data            1   26[COMRAM] unsigned char 
 25443 ;; Return value:  Size  Location     Type
 25444 ;;                  1    wreg      unsigned char 
 25445 ;; Registers used:
 25446 ;;		wreg, status,2
 25447 ;; Tracked objects:
 25448 ;;		On entry : 0/0
 25449 ;;		On exit  : 0/0
 25450 ;;		Unchanged: 0/0
 25451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25452 ;;      Params:         2       0       0       0       0       0       0
 25453 ;;      Locals:         1       0       0       0       0       0       0
 25454 ;;      Temps:          0       0       0       0       0       0       0
 25455 ;;      Totals:         3       0       0       0       0       0       0
 25456 ;;Total ram usage:        3 bytes
 25457 ;; Hardware stack levels used:    1
 25458 ;; Hardware stack levels required when called:    2
 25459 ;; This function calls:
 25460 ;;		Nothing
 25461 ;; This function is called by:
 25462 ;;		_main
 25463 ;;		_init_app_ram
 25464 ;; This function uses a non-reentrant model
 25465 ;;
 25466                           
 25467                           	psect	text79
 25468  001CFC                     __ptext79:
 25469                           	opt stack 0
 25470  001CFC                     _readEEPROM:
 25471                           	opt stack 25
 25472                           
 25473                           ;eeprom.c: 88: uint8_t data;
 25474                           ;eeprom.c: 93: EEADR = address & 0xff;
 25475                           
 25476                           ; BSR set to: 0
 25477                           ;incstack = 0
 25478                           ;incstack = 0
 25479  001CFC  C019  FFA9         	movff	readEEPROM@address,4009	;volatile
 25480                           
 25481                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 25482  001D00  9EA6               	bcf	4006,7,c	;volatile
 25483                           
 25484                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 25485  001D02  9CA6               	bcf	4006,6,c	;volatile
 25486                           
 25487                           ;eeprom.c: 96: EECON1bits.RD = 1;
 25488  001D04  80A6               	bsf	4006,0,c	;volatile
 25489                           
 25490                           ;eeprom.c: 97: data = EEDATA;
 25491  001D06  CFA8 F01B          	movff	4008,readEEPROM@data	;volatile
 25492                           
 25493                           ;eeprom.c: 99: return data;
 25494  001D0A  501B               	movf	readEEPROM@data,w,c
 25495  001D0C  0012               	return	
 25496  001D0E                     __end_of_readEEPROM:
 25497                           	opt stack 0
 25498                           tblptru	equ	0xFF8
 25499                           tblptrh	equ	0xFF7
 25500                           tblptrl	equ	0xFF6
 25501                           tablat	equ	0xFF5
 25502                           prodh	equ	0xFF4
 25503                           prodl	equ	0xFF3
 25504                           intcon	equ	0xFF2
 25505                           indf0	equ	0xFEF
 25506                           postinc0	equ	0xFEE
 25507                           fsr0h	equ	0xFEA
 25508                           fsr0l	equ	0xFE9
 25509                           wreg	equ	0xFE8
 25510                           indf1	equ	0xFE7
 25511                           postinc1	equ	0xFE6
 25512                           postdec1	equ	0xFE5
 25513                           fsr1h	equ	0xFE2
 25514                           fsr1l	equ	0xFE1
 25515                           indf2	equ	0xFDF
 25516                           postinc2	equ	0xFDE
 25517                           postdec2	equ	0xFDD
 25518                           plusw2	equ	0xFDB
 25519                           fsr2h	equ	0xFDA
 25520                           fsr2l	equ	0xFD9
 25521                           status	equ	0xFD8
 25522                           
 25523 ;; *************** function _fifo_init *****************
 25524 ;; Defined at:
 25525 ;;		line 14 in file "fifo.c"
 25526 ;; Parameters:    Size  Location     Type
 25527 ;;  f               2   24[COMRAM] PTR struct .
 25528 ;;		 -> inputFifo(8), 
 25529 ;;  buf             2   26[COMRAM] PTR unsigned char 
 25530 ;;		 -> inputBuffer(500), 
 25531 ;;  size            2   28[COMRAM] unsigned short 
 25532 ;; Auto vars:     Size  Location     Type
 25533 ;;		None
 25534 ;; Return value:  Size  Location     Type
 25535 ;;		None               void
 25536 ;; Registers used:
 25537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25538 ;; Tracked objects:
 25539 ;;		On entry : F/1
 25540 ;;		On exit  : F/1
 25541 ;;		Unchanged: F/0
 25542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25543 ;;      Params:         6       0       0       0       0       0       0
 25544 ;;      Locals:         0       0       0       0       0       0       0
 25545 ;;      Temps:          0       0       0       0       0       0       0
 25546 ;;      Totals:         6       0       0       0       0       0       0
 25547 ;;Total ram usage:        6 bytes
 25548 ;; Hardware stack levels used:    1
 25549 ;; Hardware stack levels required when called:    2
 25550 ;; This function calls:
 25551 ;;		Nothing
 25552 ;; This function is called by:
 25553 ;;		_main
 25554 ;; This function uses a non-reentrant model
 25555 ;;
 25556                           
 25557                           	psect	text80
 25558  002076                     __ptext80:
 25559                           	opt stack 0
 25560  002076                     _fifo_init:
 25561                           	opt stack 27
 25562                           
 25563                           ; BSR set to: 1
 25564                           ;fifo.c: 15: f->head = 0;
 25565                           
 25566                           ;incstack = 0
 25567                           ;incstack = 0
 25568  002076  EE20 F002          	lfsr	2,2
 25569  00207A  D816               	call	PL90	;call to abstracted procedure
 25570                           
 25571                           ;fifo.c: 16: f->tail = 0;
 25572  00207C  EE20 F004          	lfsr	2,4
 25573  002080  D813               	call	PL90	;call to abstracted procedure
 25574                           
 25575                           ;fifo.c: 17: f->size = size;
 25576  002082  EE20 F006          	lfsr	2,6
 25577  002086  5019               	movf	fifo_init@f,w,c
 25578  002088  26D9               	addwf	fsr2l,f,c
 25579  00208A  501A               	movf	fifo_init@f+1,w,c
 25580  00208C  22DA               	addwfc	fsr2h,f,c
 25581  00208E  C01D  FFDE         	movff	fifo_init@size,postinc2
 25582  002092  C01E  FFDD         	movff	fifo_init@size+1,postdec2
 25583                           
 25584                           ; BSR set to: 1
 25585                           ;fifo.c: 18: f->buf = buf;
 25586  002096  C019  FFD9         	movff	fifo_init@f,fsr2l
 25587  00209A  C01A  FFDA         	movff	fifo_init@f+1,fsr2h
 25588  00209E  C01B  FFDE         	movff	fifo_init@buf,postinc2
 25589  0020A2  C01C  FFDD         	movff	fifo_init@buf+1,postdec2
 25590                           
 25591                           ; BSR set to: 1
 25592  0020A6  0012               	return	
 25593  0020A8                     __end_of_fifo_init:
 25594                           	opt stack 0
 25595  0020A8                     PL90:
 25596                           	opt stack 27
 25597  0020A8  5019               	movf	fifo_init@f,w,c
 25598  0020AA  26D9               	addwf	fsr2l,f,c
 25599  0020AC  501A               	movf	fifo_init@f+1,w,c
 25600  0020AE  22DA               	addwfc	fsr2h,f,c
 25601  0020B0  6ADE               	clrf	postinc2,c
 25602  0020B2  6ADD               	clrf	postdec2,c
 25603  0020B4  0012               	return	
 25604  0020B6                     __end_ofPL90:
 25605                           	opt stack 0
 25606                           tblptru	equ	0xFF8
 25607                           tblptrh	equ	0xFF7
 25608                           tblptrl	equ	0xFF6
 25609                           tablat	equ	0xFF5
 25610                           prodh	equ	0xFF4
 25611                           prodl	equ	0xFF3
 25612                           intcon	equ	0xFF2
 25613                           indf0	equ	0xFEF
 25614                           postinc0	equ	0xFEE
 25615                           fsr0h	equ	0xFEA
 25616                           fsr0l	equ	0xFE9
 25617                           wreg	equ	0xFE8
 25618                           indf1	equ	0xFE7
 25619                           postinc1	equ	0xFE6
 25620                           postdec1	equ	0xFE5
 25621                           fsr1h	equ	0xFE2
 25622                           fsr1l	equ	0xFE1
 25623                           indf2	equ	0xFDF
 25624                           postinc2	equ	0xFDE
 25625                           postdec2	equ	0xFDD
 25626                           plusw2	equ	0xFDB
 25627                           fsr2h	equ	0xFDA
 25628                           fsr2l	equ	0xFD9
 25629                           status	equ	0xFD8
 25630                           
 25631 ;; *************** function _Interrupt *****************
 25632 ;; Defined at:
 25633 ;;		line 238 in file "main.c"
 25634 ;; Parameters:    Size  Location     Type
 25635 ;;		None
 25636 ;; Auto vars:     Size  Location     Type
 25637 ;;  c               1   23[COMRAM] unsigned char 
 25638 ;; Return value:  Size  Location     Type
 25639 ;;		None               void
 25640 ;; Registers used:
 25641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25642 ;; Tracked objects:
 25643 ;;		On entry : 0/0
 25644 ;;		On exit  : 0/0
 25645 ;;		Unchanged: 0/0
 25646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25647 ;;      Params:         0       0       0       0       0       0       0
 25648 ;;      Locals:         1       0       0       0       0       0       0
 25649 ;;      Temps:          7       0       0       0       0       0       0
 25650 ;;      Totals:         8       0       0       0       0       0       0
 25651 ;;Total ram usage:        8 bytes
 25652 ;; Hardware stack levels used:    1
 25653 ;; Hardware stack levels required when called:    1
 25654 ;; This function calls:
 25655 ;;		_ReadUSART
 25656 ;;		_fifo_write
 25657 ;;		i1_WriteTimer0
 25658 ;; This function is called by:
 25659 ;;		Interrupt level 1
 25660 ;; This function uses a non-reentrant model
 25661 ;;
 25662                           
 25663                           	psect	intcodelo
 25664  000018                     __pintcodelo:
 25665                           	opt stack 0
 25666  000018                     _Interrupt:
 25667                           	opt stack 20
 25668                           
 25669                           ; BSR set to: 1
 25670                           ;incstack = 0
 25671  000018  CFD8 F011          	movff	status,??_Interrupt
 25672  00001C  CFE8 F012          	movff	wreg,??_Interrupt+1
 25673  000020  CFE0 F013          	movff	bsr,??_Interrupt+2
 25674  000024  CFE1 F014          	movff	fsr1l,??_Interrupt+3
 25675  000028  CFE2 F015          	movff	fsr1h,??_Interrupt+4
 25676  00002C  CFD9 F016          	movff	fsr2l,??_Interrupt+5
 25677  000030  CFDA F017          	movff	fsr2h,??_Interrupt+6
 25678  000034                     
 25679                           ;main.c: 239: uint8_t c;
 25680                           ;main.c: 242: if (1 == PIR1bits.RCIF ) {
 25681  000034  AA9E               	btfss	3998,5,c	;volatile
 25682  000036  D001               	goto	i1u1094_21
 25683  000038  D001               	goto	i1u1094_20
 25684  00003A                     i1u1094_21:
 25685  00003A  D024               	goto	i1l395
 25686  00003C                     i1u1094_20:
 25687  00003C                     
 25688                           ;main.c: 244: c = ReadUSART();
 25689  00003C  ECB1  F00E         	call	_ReadUSART	;wreg free
 25690  000040  6E18               	movwf	Interrupt@c,c
 25691  000042                     
 25692                           ;main.c: 245: if (1 != fifo_write(&inputFifo, &c, 1)) {
 25693  000042  0101               	movlb	1	; () banked
 25694  000044  0E01               	movlw	high _inputFifo
 25695  000046  6E02               	movwf	?_fifo_write+1,c
 25696  000048  0EC4               	movlw	low _inputFifo
 25697  00004A  6E01               	movwf	?_fifo_write,c
 25698  00004C  0E18               	movlw	low Interrupt@c
 25699  00004E  6E03               	movwf	?_fifo_write+2,c
 25700  000050  0E01               	movlw	1
 25701  000052  6E04               	movwf	?_fifo_write+3,c
 25702  000054  0E00               	movlw	0
 25703  000056  6E05               	movwf	?_fifo_write+4,c
 25704  000058  0E00               	movlw	0
 25705  00005A  6E06               	movwf	?_fifo_write+5,c
 25706  00005C  0E00               	movlw	0
 25707  00005E  6E07               	movwf	?_fifo_write+6,c
 25708  000060  EC8B  F01D         	call	_fifo_write	;wreg free
 25709  000064  0401               	decf	?_fifo_write,w,c
 25710  000066  1002               	iorwf	?_fifo_write+1,w,c
 25711  000068  B4D8               	btfsc	status,2,c
 25712  00006A  D001               	goto	i1u1095_21
 25713  00006C  D001               	goto	i1u1095_20
 25714  00006E                     i1u1095_21:
 25715  00006E  D008               	goto	i1l9209
 25716  000070                     i1u1095_20:
 25717  000070                     
 25718                           ; BSR set to: 1
 25719                           ;main.c: 247: uart_receiveOverruns++;
 25720  000070  0E01               	movlw	1
 25721  000072  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 25722  000074  0E00               	movlw	0
 25723  000076  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 25724  000078  0E00               	movlw	0
 25725  00007A  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 25726  00007C  0E00               	movlw	0
 25727  00007E  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 25728  000080                     i1l9209:
 25729                           
 25730                           ; BSR set to: 1
 25731                           ;main.c: 248: }
 25732                           ;main.c: 251: PIR1bits.RCIF = 0;
 25733  000080  9A9E               	bcf	3998,5,c	;volatile
 25734                           
 25735                           ;main.c: 252: }
 25736  000082  D07E               	goto	i1l412
 25737  000084                     i1l395:
 25738                           
 25739                           ;main.c: 253: else if (1 == INTCONbits.TMR0IF) {
 25740  000084  A4F2               	btfss	intcon,2,c	;volatile
 25741  000086  D001               	goto	i1u1096_21
 25742  000088  D001               	goto	i1u1096_20
 25743  00008A                     i1u1096_21:
 25744  00008A  D07A               	goto	i1l412
 25745  00008C                     i1u1096_20:
 25746  00008C                     
 25747                           ;main.c: 255: timer++;
 25748  00008C  0E01               	movlw	1
 25749  00008E  0101               	movlb	1	; () banked
 25750  000090  2718               	addwf	_timer& (0+255),f,b	;volatile
 25751  000092  0E00               	movlw	0
 25752  000094  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 25753  000096  0E00               	movlw	0
 25754  000098  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 25755  00009A  0E00               	movlw	0
 25756  00009C  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 25757                           
 25758                           ;main.c: 256: timekeeper++;
 25759  00009E  0E01               	movlw	1
 25760  0000A0  0100               	movlb	0	; () banked
 25761  0000A2  27CD               	addwf	_timekeeper& (0+255),f,b	;volatile
 25762  0000A4  0E00               	movlw	0
 25763  0000A6  23CE               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 25764  0000A8  0E00               	movlw	0
 25765  0000AA  23CF               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 25766  0000AC  0E00               	movlw	0
 25767  0000AE  23D0               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 25768  0000B0                     
 25769                           ; BSR set to: 0
 25770                           ;main.c: 258: WriteTimer0(0xfb1d);
 25771  0000B0  0EFB               	movlw	251
 25772  0000B2  6E02               	movwf	?i1_WriteTimer0+1,c
 25773  0000B4  0E1D               	movlw	29
 25774  0000B6  6E01               	movwf	?i1_WriteTimer0,c
 25775  0000B8  EC75  F00E         	call	i1_WriteTimer0	;wreg free
 25776  0000BC                     
 25777                           ; BSR set to: 0
 25778                           ;main.c: 261: status_led_cnt++;
 25779  0000BC  4A30               	infsnz	_status_led_cnt,f,c	;volatile
 25780  0000BE  2A31               	incf	_status_led_cnt+1,f,c	;volatile
 25781  0000C0                     
 25782                           ; BSR set to: 0
 25783                           ;main.c: 262: if ((2 == ledFunctionality) &&
 25784                           ;main.c: 263: (status_led_cnt > 1000)) {
 25785  0000C0  503C               	movf	_ledFunctionality,w,c
 25786  0000C2  0A02               	xorlw	2
 25787  0000C4  A4D8               	btfss	status,2,c
 25788  0000C6  D001               	goto	i1u1097_21
 25789  0000C8  D001               	goto	i1u1097_20
 25790  0000CA                     i1u1097_21:
 25791  0000CA  D00C               	goto	i1l9223
 25792  0000CC                     i1u1097_20:
 25793  0000CC                     
 25794                           ; BSR set to: 0
 25795  0000CC  0EE9               	movlw	233
 25796  0000CE  5C30               	subwf	_status_led_cnt,w,c	;volatile
 25797  0000D0  0E03               	movlw	3
 25798  0000D2  5831               	subwfb	_status_led_cnt+1,w,c	;volatile
 25799  0000D4  A0D8               	btfss	status,0,c
 25800  0000D6  D001               	goto	i1u1098_21
 25801  0000D8  D001               	goto	i1u1098_20
 25802  0000DA                     i1u1098_21:
 25803  0000DA  D004               	goto	i1l9223
 25804  0000DC                     i1u1098_20:
 25805  0000DC                     i1l9221:
 25806                           
 25807                           ; BSR set to: 0
 25808                           ;main.c: 264: LATC1 = ~LATC1;
 25809  0000DC  728B               	btg	3979,1,c	;volatile
 25810                           
 25811                           ;main.c: 265: status_led_cnt = 0;
 25812  0000DE  6A30               	clrf	_status_led_cnt,c	;volatile
 25813  0000E0  6A31               	clrf	_status_led_cnt+1,c	;volatile
 25814                           
 25815                           ;main.c: 266: }
 25816  0000E2  D04D               	goto	i1l400
 25817  0000E4                     i1l9223:
 25818                           
 25819                           ; BSR set to: 0
 25820                           ;main.c: 267: else if ((3 == ledFunctionality) &&
 25821                           ;main.c: 268: (status_led_cnt > 400)) {
 25822  0000E4  503C               	movf	_ledFunctionality,w,c
 25823  0000E6  0A03               	xorlw	3
 25824  0000E8  A4D8               	btfss	status,2,c
 25825  0000EA  D001               	goto	i1u1099_21
 25826  0000EC  D001               	goto	i1u1099_20
 25827  0000EE                     i1u1099_21:
 25828  0000EE  D009               	goto	i1l9229
 25829  0000F0                     i1u1099_20:
 25830  0000F0                     
 25831                           ; BSR set to: 0
 25832  0000F0  0E91               	movlw	145
 25833  0000F2  5C30               	subwf	_status_led_cnt,w,c	;volatile
 25834  0000F4  0E01               	movlw	1
 25835  0000F6  5831               	subwfb	_status_led_cnt+1,w,c	;volatile
 25836  0000F8  A0D8               	btfss	status,0,c
 25837  0000FA  D001               	goto	i1u1100_21
 25838  0000FC  D001               	goto	i1u1100_20
 25839  0000FE                     i1u1100_21:
 25840  0000FE  D001               	goto	i1l9229
 25841  000100                     i1u1100_20:
 25842  000100  D7ED               	goto	i1l9221
 25843  000102                     i1l9229:
 25844                           
 25845                           ; BSR set to: 0
 25846                           ;main.c: 272: else if ((4 == ledFunctionality) &&
 25847                           ;main.c: 273: (status_led_cnt > 100)) {
 25848  000102  503C               	movf	_ledFunctionality,w,c
 25849  000104  0A04               	xorlw	4
 25850  000106  A4D8               	btfss	status,2,c
 25851  000108  D001               	goto	i1u1101_21
 25852  00010A  D001               	goto	i1u1101_20
 25853  00010C                     i1u1101_21:
 25854  00010C  D009               	goto	i1l9235
 25855  00010E                     i1u1101_20:
 25856  00010E                     
 25857                           ; BSR set to: 0
 25858  00010E  0E65               	movlw	101
 25859  000110  5C30               	subwf	_status_led_cnt,w,c	;volatile
 25860  000112  0E00               	movlw	0
 25861  000114  5831               	subwfb	_status_led_cnt+1,w,c	;volatile
 25862  000116  A0D8               	btfss	status,0,c
 25863  000118  D001               	goto	i1u1102_21
 25864  00011A  D001               	goto	i1u1102_20
 25865  00011C                     i1u1102_21:
 25866  00011C  D001               	goto	i1l9235
 25867  00011E                     i1u1102_20:
 25868  00011E  D7DE               	goto	i1l9221
 25869  000120                     i1l9235:
 25870                           
 25871                           ; BSR set to: 0
 25872                           ;main.c: 277: else if ((5 == ledFunctionality) &&
 25873                           ;main.c: 278: (status_led_cnt > 70)) {
 25874  000120  503C               	movf	_ledFunctionality,w,c
 25875  000122  0A05               	xorlw	5
 25876  000124  A4D8               	btfss	status,2,c
 25877  000126  D001               	goto	i1u1103_21
 25878  000128  D001               	goto	i1u1103_20
 25879  00012A                     i1u1103_21:
 25880  00012A  D009               	goto	i1l9241
 25881  00012C                     i1u1103_20:
 25882  00012C                     
 25883                           ; BSR set to: 0
 25884  00012C  0E47               	movlw	71
 25885  00012E  5C30               	subwf	_status_led_cnt,w,c	;volatile
 25886  000130  0E00               	movlw	0
 25887  000132  5831               	subwfb	_status_led_cnt+1,w,c	;volatile
 25888  000134  A0D8               	btfss	status,0,c
 25889  000136  D001               	goto	i1u1104_21
 25890  000138  D001               	goto	i1u1104_20
 25891  00013A                     i1u1104_21:
 25892  00013A  D001               	goto	i1l9241
 25893  00013C                     i1u1104_20:
 25894  00013C  D7CF               	goto	i1l9221
 25895  00013E                     i1l9241:
 25896                           
 25897                           ; BSR set to: 0
 25898                           ;main.c: 282: else if ((6 == ledFunctionality) &&
 25899                           ;main.c: 283: (status_led_cnt > 40)) {
 25900  00013E  503C               	movf	_ledFunctionality,w,c
 25901  000140  0A06               	xorlw	6
 25902  000142  A4D8               	btfss	status,2,c
 25903  000144  D001               	goto	i1u1105_21
 25904  000146  D001               	goto	i1u1105_20
 25905  000148                     i1u1105_21:
 25906  000148  D009               	goto	i1l9247
 25907  00014A                     i1u1105_20:
 25908  00014A                     
 25909                           ; BSR set to: 0
 25910  00014A  0E29               	movlw	41
 25911  00014C  5C30               	subwf	_status_led_cnt,w,c	;volatile
 25912  00014E  0E00               	movlw	0
 25913  000150  5831               	subwfb	_status_led_cnt+1,w,c	;volatile
 25914  000152  A0D8               	btfss	status,0,c
 25915  000154  D001               	goto	i1u1106_21
 25916  000156  D001               	goto	i1u1106_20
 25917  000158                     i1u1106_21:
 25918  000158  D001               	goto	i1l9247
 25919  00015A                     i1u1106_20:
 25920  00015A  D7C0               	goto	i1l9221
 25921  00015C                     i1l9247:
 25922                           
 25923                           ; BSR set to: 0
 25924                           ;main.c: 287: else if (1 == ledFunctionality) {
 25925  00015C  043C               	decf	_ledFunctionality,w,c
 25926  00015E  A4D8               	btfss	status,2,c
 25927  000160  D001               	goto	i1u1107_21
 25928  000162  D001               	goto	i1u1107_20
 25929  000164                     i1u1107_21:
 25930  000164  D004               	goto	i1l409
 25931  000166                     i1u1107_20:
 25932  000166                     
 25933                           ; BSR set to: 0
 25934                           ;main.c: 288: LATC1 = 1;
 25935  000166  828B               	bsf	3979,1,c	;volatile
 25936                           
 25937                           ;main.c: 289: status_led_cnt = 0;
 25938  000168  6A30               	clrf	_status_led_cnt,c	;volatile
 25939  00016A  6A31               	clrf	_status_led_cnt+1,c	;volatile
 25940                           
 25941                           ;main.c: 290: }
 25942  00016C  D008               	goto	i1l400
 25943  00016E                     i1l409:
 25944                           
 25945                           ; BSR set to: 0
 25946                           ;main.c: 291: else if (0 == ledFunctionality) {
 25947  00016E  663C               	tstfsz	_ledFunctionality,c
 25948  000170  D001               	goto	i1u1108_21
 25949  000172  D001               	goto	i1u1108_20
 25950  000174                     i1u1108_21:
 25951  000174  D004               	goto	i1l406
 25952  000176                     i1u1108_20:
 25953  000176                     
 25954                           ; BSR set to: 0
 25955                           ;main.c: 292: LATC1 = 0;
 25956  000176  928B               	bcf	3979,1,c	;volatile
 25957                           
 25958                           ;main.c: 293: status_led_cnt = 0;
 25959  000178  6A30               	clrf	_status_led_cnt,c	;volatile
 25960  00017A  6A31               	clrf	_status_led_cnt+1,c	;volatile
 25961  00017C  D000               	goto	i1l400
 25962  00017E                     i1l406:
 25963  00017E                     i1l400:
 25964                           
 25965                           ; BSR set to: 0
 25966                           ;main.c: 294: }
 25967                           ;main.c: 296: INTCONbits.TMR0IF = 0;
 25968  00017E  94F2               	bcf	intcon,2,c	;volatile
 25969  000180                     i1l412:
 25970  000180  C017  FFDA         	movff	??_Interrupt+6,fsr2h
 25971  000184  C016  FFD9         	movff	??_Interrupt+5,fsr2l
 25972  000188  C015  FFE2         	movff	??_Interrupt+4,fsr1h
 25973  00018C  C014  FFE1         	movff	??_Interrupt+3,fsr1l
 25974  000190  C013  FFE0         	movff	??_Interrupt+2,bsr
 25975  000194  C012  FFE8         	movff	??_Interrupt+1,wreg
 25976  000198  C011  FFD8         	movff	??_Interrupt,status
 25977  00019C  0010               	retfie	
 25978  00019E                     __end_of_Interrupt:
 25979                           	opt stack 0
 25980                           tblptru	equ	0xFF8
 25981                           tblptrh	equ	0xFF7
 25982                           tblptrl	equ	0xFF6
 25983                           tablat	equ	0xFF5
 25984                           prodh	equ	0xFF4
 25985                           prodl	equ	0xFF3
 25986                           intcon	equ	0xFF2
 25987                           indf0	equ	0xFEF
 25988                           postinc0	equ	0xFEE
 25989                           fsr0h	equ	0xFEA
 25990                           fsr0l	equ	0xFE9
 25991                           wreg	equ	0xFE8
 25992                           indf1	equ	0xFE7
 25993                           postinc1	equ	0xFE6
 25994                           postdec1	equ	0xFE5
 25995                           fsr1h	equ	0xFE2
 25996                           fsr1l	equ	0xFE1
 25997                           bsr	equ	0xFE0
 25998                           indf2	equ	0xFDF
 25999                           postinc2	equ	0xFDE
 26000                           postdec2	equ	0xFDD
 26001                           plusw2	equ	0xFDB
 26002                           fsr2h	equ	0xFDA
 26003                           fsr2l	equ	0xFD9
 26004                           status	equ	0xFD8
 26005                           
 26006 ;; *************** function i1_WriteTimer0 *****************
 26007 ;; Defined at:
 26008 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26009 ;; Parameters:    Size  Location     Type
 26010 ;;  timer0          2    0[COMRAM] unsigned int 
 26011 ;; Auto vars:     Size  Location     Type
 26012 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 26013 ;; Return value:  Size  Location     Type
 26014 ;;		None               void
 26015 ;; Registers used:
 26016 ;;		None
 26017 ;; Tracked objects:
 26018 ;;		On entry : F/0
 26019 ;;		On exit  : F/0
 26020 ;;		Unchanged: F/0
 26021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26022 ;;      Params:         2       0       0       0       0       0       0
 26023 ;;      Locals:         2       0       0       0       0       0       0
 26024 ;;      Temps:          0       0       0       0       0       0       0
 26025 ;;      Totals:         4       0       0       0       0       0       0
 26026 ;;Total ram usage:        4 bytes
 26027 ;; Hardware stack levels used:    1
 26028 ;; This function calls:
 26029 ;;		Nothing
 26030 ;; This function is called by:
 26031 ;;		_Interrupt
 26032 ;; This function uses a non-reentrant model
 26033 ;;
 26034                           
 26035                           	psect	text82
 26036  001CEA                     __ptext82:
 26037                           	opt stack 0
 26038  001CEA                     i1_WriteTimer0:
 26039                           	opt stack 20
 26040                           
 26041                           ; BSR set to: 0
 26042                           
 26043                           ;incstack = 0
 26044                           ;incstack = 0
 26045  001CEA  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 26046  001CEE  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 26047  001CF2  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 26048  001CF6  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 26049                           
 26050                           ; BSR set to: 0
 26051  001CFA  0012               	return	
 26052  001CFC                     __end_ofi1_WriteTimer0:
 26053                           	opt stack 0
 26054                           tblptru	equ	0xFF8
 26055                           tblptrh	equ	0xFF7
 26056                           tblptrl	equ	0xFF6
 26057                           tablat	equ	0xFF5
 26058                           prodh	equ	0xFF4
 26059                           prodl	equ	0xFF3
 26060                           intcon	equ	0xFF2
 26061                           indf0	equ	0xFEF
 26062                           postinc0	equ	0xFEE
 26063                           fsr0h	equ	0xFEA
 26064                           fsr0l	equ	0xFE9
 26065                           wreg	equ	0xFE8
 26066                           indf1	equ	0xFE7
 26067                           postinc1	equ	0xFE6
 26068                           postdec1	equ	0xFE5
 26069                           fsr1h	equ	0xFE2
 26070                           fsr1l	equ	0xFE1
 26071                           bsr	equ	0xFE0
 26072                           indf2	equ	0xFDF
 26073                           postinc2	equ	0xFDE
 26074                           postdec2	equ	0xFDD
 26075                           plusw2	equ	0xFDB
 26076                           fsr2h	equ	0xFDA
 26077                           fsr2l	equ	0xFD9
 26078                           status	equ	0xFD8
 26079                           
 26080 ;; *************** function _fifo_write *****************
 26081 ;; Defined at:
 26082 ;;		line 61 in file "fifo.c"
 26083 ;; Parameters:    Size  Location     Type
 26084 ;;  f               2    0[COMRAM] PTR struct .
 26085 ;;		 -> inputFifo(8), 
 26086 ;;  buf             1    2[COMRAM] PTR const void 
 26087 ;;		 -> Interrupt@c(1), 
 26088 ;;  nbytes          4    3[COMRAM] unsigned long 
 26089 ;; Auto vars:     Size  Location     Type
 26090 ;;  i               4   12[COMRAM] unsigned long 
 26091 ;;  p               1   11[COMRAM] PTR const unsigned char 
 26092 ;;		 -> Interrupt@c(1), 
 26093 ;; Return value:  Size  Location     Type
 26094 ;;                  2    0[COMRAM] unsigned short 
 26095 ;; Registers used:
 26096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26097 ;; Tracked objects:
 26098 ;;		On entry : F/1
 26099 ;;		On exit  : F/1
 26100 ;;		Unchanged: F/0
 26101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26102 ;;      Params:         7       0       0       0       0       0       0
 26103 ;;      Locals:         5       0       0       0       0       0       0
 26104 ;;      Temps:          4       0       0       0       0       0       0
 26105 ;;      Totals:        16       0       0       0       0       0       0
 26106 ;;Total ram usage:       16 bytes
 26107 ;; Hardware stack levels used:    1
 26108 ;; This function calls:
 26109 ;;		Nothing
 26110 ;; This function is called by:
 26111 ;;		_Interrupt
 26112 ;; This function uses a non-reentrant model
 26113 ;;
 26114                           
 26115                           	psect	text83
 26116  003B16                     __ptext83:
 26117                           	opt stack 0
 26118  003B16                     _fifo_write:
 26119                           	opt stack 20
 26120                           
 26121                           ; BSR set to: 1
 26122                           ;fifo.c: 62: uint32_t i;
 26123                           ;fifo.c: 63: const uint8_t *p;
 26124                           ;fifo.c: 64: p = buf;
 26125                           
 26126                           ; BSR set to: 0
 26127                           ;incstack = 0
 26128                           ;incstack = 0
 26129  003B16  C003  F00C         	movff	fifo_write@buf,fifo_write@p
 26130                           
 26131                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 26132  003B1A  6A0D               	clrf	fifo_write@i,c
 26133  003B1C  6A0E               	clrf	fifo_write@i+1,c
 26134  003B1E  6A0F               	clrf	fifo_write@i+2,c
 26135  003B20  6A10               	clrf	fifo_write@i+3,c
 26136  003B22  D067               	goto	i1l7103
 26137  003B24                     i1l7083:
 26138                           
 26139                           ; BSR set to: 1
 26140                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 26141                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 26142  003B24  EE20 F004          	lfsr	2,4
 26143  003B28  5001               	movf	fifo_write@f,w,c
 26144  003B2A  D871               	call	PL14	;call to abstracted procedure
 26145  003B2C  E102               	bnz	i1u748_25
 26146  003B2E  5008               	movf	??_fifo_write,w,c
 26147  003B30  180A               	xorwf	??_fifo_write+2,w,c
 26148  003B32                     i1u748_25:
 26149  003B32  E011               	bz	i1l1425
 26150                           
 26151                           ; BSR set to: 1
 26152  003B34  EE20 F006          	lfsr	2,6
 26153  003B38  5001               	movf	fifo_write@f,w,c
 26154  003B3A  D869               	call	PL14	;call to abstracted procedure
 26155  003B3C  E102               	bnz	i1u749_25
 26156  003B3E  5008               	movf	??_fifo_write,w,c
 26157  003B40  180A               	xorwf	??_fifo_write+2,w,c
 26158  003B42                     i1u749_25:
 26159  003B42  E10E               	bnz	i1l7091
 26160                           
 26161                           ; BSR set to: 1
 26162  003B44  EE20 F004          	lfsr	2,4
 26163  003B48  5001               	movf	fifo_write@f,w,c
 26164  003B4A  26D9               	addwf	fsr2l,f,c
 26165  003B4C  5002               	movf	fifo_write@f+1,w,c
 26166  003B4E  22DA               	addwfc	fsr2h,f,c
 26167  003B50  50DE               	movf	postinc2,w,c
 26168  003B52  10DD               	iorwf	postdec2,w,c
 26169  003B54  E105               	bnz	i1l7091
 26170  003B56                     i1l1425:
 26171                           
 26172                           ; BSR set to: 1
 26173                           ;fifo.c: 71: return i;
 26174  003B56  C00D  F001         	movff	fifo_write@i,?_fifo_write
 26175  003B5A  C00E  F002         	movff	fifo_write@i+1,?_fifo_write+1
 26176  003B5E  D056               	goto	i1l1426
 26177  003B60                     i1l7091:
 26178                           
 26179                           ; BSR set to: 1
 26180                           ;fifo.c: 73: else {
 26181                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 26182  003B60  500C               	movf	fifo_write@p,w,c
 26183  003B62  6ED9               	movwf	fsr2l,c
 26184  003B64  6ADA               	clrf	fsr2h,c
 26185  003B66  EE10 F002          	lfsr	1,2
 26186  003B6A  5001               	movf	fifo_write@f,w,c
 26187  003B6C  26E1               	addwf	fsr1l,f,c
 26188  003B6E  5002               	movf	fifo_write@f+1,w,c
 26189  003B70  22E2               	addwfc	fsr1h,f,c
 26190  003B72  CFE6 F008          	movff	postinc1,??_fifo_write
 26191  003B76  CFE5 F009          	movff	postdec1,??_fifo_write+1
 26192  003B7A  C001  FFE1         	movff	fifo_write@f,fsr1l
 26193  003B7E  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 26194  003B82  CFE6 F00A          	movff	postinc1,??_fifo_write+2
 26195  003B86  CFE5 F00B          	movff	postdec1,??_fifo_write+3
 26196  003B8A  5008               	movf	??_fifo_write,w,c
 26197  003B8C  240A               	addwf	??_fifo_write+2,w,c
 26198  003B8E  6EE1               	movwf	fsr1l,c
 26199  003B90  5009               	movf	??_fifo_write+1,w,c
 26200  003B92  200B               	addwfc	??_fifo_write+3,w,c
 26201  003B94  6EE2               	movwf	fsr1h,c
 26202  003B96  CFDF FFE7          	movff	indf2,indf1
 26203                           
 26204                           ; BSR set to: 1
 26205  003B9A  2A0C               	incf	fifo_write@p,f,c
 26206                           
 26207                           ; BSR set to: 1
 26208                           ;fifo.c: 75: f->head++;
 26209  003B9C  EE20 F002          	lfsr	2,2
 26210  003BA0  5001               	movf	fifo_write@f,w,c
 26211  003BA2  26D9               	addwf	fsr2l,f,c
 26212  003BA4  5002               	movf	fifo_write@f+1,w,c
 26213  003BA6  22DA               	addwfc	fsr2h,f,c
 26214  003BA8  2ADE               	incf	postinc2,f,c
 26215  003BAA  0E00               	movlw	0
 26216  003BAC  22DD               	addwfc	postdec2,f,c
 26217                           
 26218                           ; BSR set to: 1
 26219                           ;fifo.c: 76: if (f->head == f->size) {
 26220  003BAE  EE20 F006          	lfsr	2,6
 26221  003BB2  5001               	movf	fifo_write@f,w,c
 26222  003BB4  26D9               	addwf	fsr2l,f,c
 26223  003BB6  5002               	movf	fifo_write@f+1,w,c
 26224  003BB8  22DA               	addwfc	fsr2h,f,c
 26225  003BBA  EE10 F002          	lfsr	1,2
 26226  003BBE  5001               	movf	fifo_write@f,w,c
 26227  003BC0  26E1               	addwf	fsr1l,f,c
 26228  003BC2  5002               	movf	fifo_write@f+1,w,c
 26229  003BC4  22E2               	addwfc	fsr1h,f,c
 26230  003BC6  52E6               	movf	postinc1,f,c
 26231  003BC8  52DE               	movf	postinc2,f,c
 26232  003BCA  50DD               	movf	postdec2,w,c
 26233  003BCC  18E5               	xorwf	postdec1,w,c
 26234  003BCE  CFDF FFE8          	movff	indf2,wreg
 26235  003BD2  B4D8               	btfsc	status,2,c
 26236  003BD4  18E7               	xorwf	indf1,w,c
 26237  003BD6  E108               	bnz	i1l7101
 26238                           
 26239                           ; BSR set to: 1
 26240                           ;fifo.c: 77: f->head = 0;
 26241  003BD8  EE20 F002          	lfsr	2,2
 26242  003BDC  5001               	movf	fifo_write@f,w,c
 26243  003BDE  26D9               	addwf	fsr2l,f,c
 26244  003BE0  5002               	movf	fifo_write@f+1,w,c
 26245  003BE2  22DA               	addwfc	fsr2h,f,c
 26246  003BE4  6ADE               	clrf	postinc2,c
 26247  003BE6  6ADD               	clrf	postdec2,c
 26248  003BE8                     i1l7101:
 26249                           
 26250                           ; BSR set to: 1
 26251  003BE8  2A0D               	incf	fifo_write@i,f,c
 26252  003BEA  0E00               	movlw	0
 26253  003BEC  220E               	addwfc	fifo_write@i+1,f,c
 26254  003BEE  220F               	addwfc	fifo_write@i+2,f,c
 26255  003BF0  2210               	addwfc	fifo_write@i+3,f,c
 26256  003BF2                     i1l7103:
 26257                           
 26258                           ; BSR set to: 1
 26259  003BF2  5004               	movf	fifo_write@nbytes,w,c
 26260  003BF4  5C0D               	subwf	fifo_write@i,w,c
 26261  003BF6  5005               	movf	fifo_write@nbytes+1,w,c
 26262  003BF8  580E               	subwfb	fifo_write@i+1,w,c
 26263  003BFA  5006               	movf	fifo_write@nbytes+2,w,c
 26264  003BFC  580F               	subwfb	fifo_write@i+2,w,c
 26265  003BFE  5007               	movf	fifo_write@nbytes+3,w,c
 26266  003C00  5810               	subwfb	fifo_write@i+3,w,c
 26267  003C02  E390               	bnc	i1l7083
 26268                           
 26269                           ; BSR set to: 1
 26270                           ;fifo.c: 78: }
 26271                           ;fifo.c: 79: }
 26272                           ;fifo.c: 81: }
 26273                           ;fifo.c: 83: return nbytes;
 26274  003C04  C004  F001         	movff	fifo_write@nbytes,?_fifo_write
 26275  003C08  C005  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 26276  003C0C                     i1l1426:
 26277                           
 26278                           ; BSR set to: 1
 26279  003C0C  0012               	return	
 26280  003C0E                     __end_of_fifo_write:
 26281                           	opt stack 0
 26282  003C0E                     PL14:
 26283                           	opt stack 20
 26284  003C0E  26D9               	addwf	fsr2l,f,c
 26285  003C10  5002               	movf	fifo_write@f+1,w,c
 26286  003C12  22DA               	addwfc	fsr2h,f,c
 26287  003C14  CFDE F008          	movff	postinc2,??_fifo_write
 26288  003C18  CFDD F009          	movff	postdec2,??_fifo_write+1
 26289  003C1C  EE20 F002          	lfsr	2,2
 26290  003C20  5001               	movf	fifo_write@f,w,c
 26291  003C22  26D9               	addwf	fsr2l,f,c
 26292  003C24  5002               	movf	fifo_write@f+1,w,c
 26293  003C26  22DA               	addwfc	fsr2h,f,c
 26294  003C28  CFDE F00A          	movff	postinc2,??_fifo_write+2
 26295  003C2C  CFDD F00B          	movff	postdec2,??_fifo_write+3
 26296  003C30  2A0A               	incf	??_fifo_write+2,f,c
 26297  003C32  0E00               	movlw	0
 26298  003C34  220B               	addwfc	??_fifo_write+3,f,c
 26299  003C36  5009               	movf	??_fifo_write+1,w,c
 26300  003C38  180B               	xorwf	??_fifo_write+3,w,c
 26301  003C3A  0012               	return	
 26302  003C3C                     __end_ofPL14:
 26303                           	opt stack 0
 26304                           tblptru	equ	0xFF8
 26305                           tblptrh	equ	0xFF7
 26306                           tblptrl	equ	0xFF6
 26307                           tablat	equ	0xFF5
 26308                           prodh	equ	0xFF4
 26309                           prodl	equ	0xFF3
 26310                           intcon	equ	0xFF2
 26311                           indf0	equ	0xFEF
 26312                           postinc0	equ	0xFEE
 26313                           fsr0h	equ	0xFEA
 26314                           fsr0l	equ	0xFE9
 26315                           wreg	equ	0xFE8
 26316                           indf1	equ	0xFE7
 26317                           postinc1	equ	0xFE6
 26318                           postdec1	equ	0xFE5
 26319                           fsr1h	equ	0xFE2
 26320                           fsr1l	equ	0xFE1
 26321                           bsr	equ	0xFE0
 26322                           indf2	equ	0xFDF
 26323                           postinc2	equ	0xFDE
 26324                           postdec2	equ	0xFDD
 26325                           plusw2	equ	0xFDB
 26326                           fsr2h	equ	0xFDA
 26327                           fsr2l	equ	0xFD9
 26328                           status	equ	0xFD8
 26329                           
 26330 ;; *************** function _ReadUSART *****************
 26331 ;; Defined at:
 26332 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 26333 ;; Parameters:    Size  Location     Type
 26334 ;;		None
 26335 ;; Auto vars:     Size  Location     Type
 26336 ;;  data            1    0[COMRAM] unsigned char 
 26337 ;; Return value:  Size  Location     Type
 26338 ;;                  1    wreg      unsigned char 
 26339 ;; Registers used:
 26340 ;;		wreg, status,2, status,0
 26341 ;; Tracked objects:
 26342 ;;		On entry : 0/0
 26343 ;;		On exit  : 0/0
 26344 ;;		Unchanged: 0/0
 26345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26346 ;;      Params:         0       0       0       0       0       0       0
 26347 ;;      Locals:         1       0       0       0       0       0       0
 26348 ;;      Temps:          0       0       0       0       0       0       0
 26349 ;;      Totals:         1       0       0       0       0       0       0
 26350 ;;Total ram usage:        1 bytes
 26351 ;; Hardware stack levels used:    1
 26352 ;; This function calls:
 26353 ;;		Nothing
 26354 ;; This function is called by:
 26355 ;;		_Interrupt
 26356 ;; This function uses a non-reentrant model
 26357 ;;
 26358                           
 26359                           	psect	text84
 26360  001D62                     __ptext84:
 26361                           	opt stack 0
 26362  001D62                     _ReadUSART:
 26363                           	opt stack 20
 26364                           
 26365                           ; BSR set to: 1
 26366                           ;incstack = 0
 26367                           ;incstack = 0
 26368  001D62  0EF2               	movlw	242
 26369  001D64  1634               	andwf	_USART_Status,f,c
 26370  001D66  ACAB               	btfss	4011,6,c	;volatile
 26371  001D68  D003               	goto	i1l1732
 26372  001D6A  9034               	bcf	_USART_Status,0,c
 26373  001D6C  B0AB               	btfsc	4011,0,c	;volatile
 26374  001D6E  8034               	bsf	_USART_Status,0,c
 26375  001D70                     i1l1732:
 26376  001D70  B4AB               	btfsc	4011,2,c	;volatile
 26377  001D72  8434               	bsf	_USART_Status,2,c
 26378  001D74  B2AB               	btfsc	4011,1,c	;volatile
 26379  001D76  8634               	bsf	_USART_Status,3,c
 26380  001D78  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 26381  001D7C  5001               	movf	ReadUSART@data,w,c
 26382  001D7E  0012               	return	
 26383  001D80                     __end_of_ReadUSART:
 26384                           	opt stack 0
 26385                           tblptru	equ	0xFF8
 26386                           tblptrh	equ	0xFF7
 26387                           tblptrl	equ	0xFF6
 26388                           tablat	equ	0xFF5
 26389                           prodh	equ	0xFF4
 26390                           prodl	equ	0xFF3
 26391                           intcon	equ	0xFF2
 26392                           indf0	equ	0xFEF
 26393                           postinc0	equ	0xFEE
 26394                           fsr0h	equ	0xFEA
 26395                           fsr0l	equ	0xFE9
 26396                           wreg	equ	0xFE8
 26397                           indf1	equ	0xFE7
 26398                           postinc1	equ	0xFE6
 26399                           postdec1	equ	0xFE5
 26400                           fsr1h	equ	0xFE2
 26401                           fsr1l	equ	0xFE1
 26402                           bsr	equ	0xFE0
 26403                           indf2	equ	0xFDF
 26404                           postinc2	equ	0xFDE
 26405                           postdec2	equ	0xFDD
 26406                           plusw2	equ	0xFDB
 26407                           fsr2h	equ	0xFDA
 26408                           fsr2l	equ	0xFD9
 26409                           status	equ	0xFD8
 26410                           tblptru	equ	0xFF8
 26411                           tblptrh	equ	0xFF7
 26412                           tblptrl	equ	0xFF6
 26413                           tablat	equ	0xFF5
 26414                           prodh	equ	0xFF4
 26415                           prodl	equ	0xFF3
 26416                           intcon	equ	0xFF2
 26417                           indf0	equ	0xFEF
 26418                           postinc0	equ	0xFEE
 26419                           fsr0h	equ	0xFEA
 26420                           fsr0l	equ	0xFE9
 26421                           wreg	equ	0xFE8
 26422                           indf1	equ	0xFE7
 26423                           postinc1	equ	0xFE6
 26424                           postdec1	equ	0xFE5
 26425                           fsr1h	equ	0xFE2
 26426                           fsr1l	equ	0xFE1
 26427                           bsr	equ	0xFE0
 26428                           indf2	equ	0xFDF
 26429                           postinc2	equ	0xFDE
 26430                           postdec2	equ	0xFDD
 26431                           plusw2	equ	0xFDB
 26432                           fsr2h	equ	0xFDA
 26433                           fsr2l	equ	0xFD9
 26434                           status	equ	0xFD8
 26435                           
 26436                           	psect	rparam
 26437  0000                     tblptru	equ	0xFF8
 26438                           tblptrh	equ	0xFF7
 26439                           tblptrl	equ	0xFF6
 26440                           tablat	equ	0xFF5
 26441                           prodh	equ	0xFF4
 26442                           prodl	equ	0xFF3
 26443                           intcon	equ	0xFF2
 26444                           indf0	equ	0xFEF
 26445                           postinc0	equ	0xFEE
 26446                           fsr0h	equ	0xFEA
 26447                           fsr0l	equ	0xFE9
 26448                           wreg	equ	0xFE8
 26449                           indf1	equ	0xFE7
 26450                           postinc1	equ	0xFE6
 26451                           postdec1	equ	0xFE5
 26452                           fsr1h	equ	0xFE2
 26453                           fsr1l	equ	0xFE1
 26454                           bsr	equ	0xFE0
 26455                           indf2	equ	0xFDF
 26456                           postinc2	equ	0xFDE
 26457                           postdec2	equ	0xFDD
 26458                           plusw2	equ	0xFDB
 26459                           fsr2h	equ	0xFDA
 26460                           fsr2l	equ	0xFD9
 26461                           status	equ	0xFD8
 26462                           tblptru	equ	0xFF8
 26463                           tblptrh	equ	0xFF7
 26464                           tblptrl	equ	0xFF6
 26465                           tablat	equ	0xFF5
 26466                           prodh	equ	0xFF4
 26467                           prodl	equ	0xFF3
 26468                           intcon	equ	0xFF2
 26469                           indf0	equ	0xFEF
 26470                           postinc0	equ	0xFEE
 26471                           fsr0h	equ	0xFEA
 26472                           fsr0l	equ	0xFE9
 26473                           wreg	equ	0xFE8
 26474                           indf1	equ	0xFE7
 26475                           postinc1	equ	0xFE6
 26476                           postdec1	equ	0xFE5
 26477                           fsr1h	equ	0xFE2
 26478                           fsr1l	equ	0xFE1
 26479                           bsr	equ	0xFE0
 26480                           indf2	equ	0xFDF
 26481                           postinc2	equ	0xFDE
 26482                           postdec2	equ	0xFDD
 26483                           plusw2	equ	0xFDB
 26484                           fsr2h	equ	0xFDA
 26485                           fsr2l	equ	0xFD9
 26486                           status	equ	0xFD8


Data Sizes:
    Strings     4010
    Constant    120
    Data        0
    BSS         1003
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     47      71
    BANK0           160    109     129
    BANK1           256      0     204
    BANK2           256      0     256
    BANK3           256     61      61
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(COMRAM[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_write	unsigned short  size(2) Largest target is 0

    ?_fifo_read	unsigned short  size(2) Largest target is 0

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_243(CODE[2]), STR_242(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_237(CODE[2]), 
		 -> STR_236(CODE[3]), STR_235(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_253(CODE[3]), STR_252(CODE[23]), STR_251(CODE[10]), STR_250(CODE[10]), 
		 -> STR_249(CODE[12]), STR_248(CODE[8]), STR_247(CODE[7]), STR_246(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_245(CODE[10]), STR_244(CODE[3]), STR_241(CODE[20]), 
		 -> STR_240(CODE[3]), STR_239(CODE[14]), STR_238(CODE[3]), STR_234(CODE[8]), 
		 -> STR_233(CODE[15]), STR_232(CODE[67]), STR_231(CODE[3]), STR_230(CODE[27]), 
		 -> STR_229(CODE[67]), STR_228(CODE[39]), STR_227(CODE[62]), STR_226(CODE[55]), 
		 -> STR_225(CODE[49]), STR_224(CODE[67]), STR_223(CODE[47]), STR_222(CODE[47]), 
		 -> STR_221(CODE[34]), STR_220(CODE[71]), STR_219(CODE[20]), STR_218(CODE[78]), 
		 -> STR_217(CODE[24]), STR_216(CODE[77]), STR_215(CODE[67]), STR_214(CODE[69]), 
		 -> STR_213(CODE[47]), STR_212(CODE[40]), STR_211(CODE[39]), STR_210(CODE[33]), 
		 -> STR_209(CODE[23]), STR_208(CODE[56]), STR_207(CODE[24]), STR_206(CODE[44]), 
		 -> STR_205(CODE[50]), STR_204(CODE[31]), STR_203(CODE[50]), STR_202(CODE[51]), 
		 -> STR_201(CODE[46]), STR_200(CODE[44]), STR_199(CODE[27]), STR_198(CODE[39]), 
		 -> STR_197(CODE[39]), STR_196(CODE[52]), STR_195(CODE[54]), STR_194(CODE[55]), 
		 -> STR_193(CODE[3]), STR_190(CODE[24]), STR_189(CODE[57]), STR_188(CODE[53]), 
		 -> STR_187(CODE[58]), STR_186(CODE[3]), STR_183(CODE[25]), STR_182(CODE[3]), 
		 -> STR_179(CODE[24]), STR_178(CODE[3]), STR_175(CODE[24]), STR_174(CODE[3]), 
		 -> STR_171(CODE[24]), STR_170(CODE[3]), STR_167(CODE[23]), STR_166(CODE[3]), 
		 -> STR_163(CODE[21]), STR_162(CODE[3]), STR_159(CODE[22]), STR_158(CODE[3]), 
		 -> STR_155(CODE[17]), STR_154(CODE[3]), STR_151(CODE[18]), STR_150(CODE[4]), 
		 -> STR_149(CODE[11]), STR_148(CODE[2]), STR_145(CODE[7]), STR_142(CODE[7]), 
		 -> STR_139(CODE[9]), STR_136(CODE[7]), STR_133(CODE[8]), STR_130(CODE[7]), 
		 -> STR_129(CODE[2]), STR_128(CODE[2]), STR_127(CODE[6]), STR_126(CODE[8]), 
		 -> STR_125(CODE[8]), STR_124(CODE[20]), STR_123(CODE[27]), STR_122(CODE[33]), 
		 -> STR_119(CODE[26]), STR_117(CODE[32]), STR_115(CODE[28]), STR_110(CODE[40]), 
		 -> STR_108(CODE[44]), STR_105(CODE[39]), STR_103(CODE[36]), STR_101(CODE[37]), 
		 -> STR_99(CODE[40]), STR_97(CODE[37]), STR_96(CODE[50]), STR_93(CODE[41]), 
		 -> STR_91(CODE[38]), STR_89(CODE[39]), STR_87(CODE[42]), STR_85(CODE[39]), 
		 -> STR_84(CODE[66]), STR_81(CODE[3]), STR_78(CODE[20]), STR_76(CODE[33]), 
		 -> STR_75(CODE[35]), STR_74(CODE[24]), STR_72(CODE[33]), STR_70(CODE[24]), 
		 -> STR_67(CODE[54]), STR_66(CODE[6]), STR_65(CODE[3]), STR_60(CODE[34]), 
		 -> STR_59(CODE[3]), STR_56(CODE[4]), wrkbuf(BANK1[80]), STR_51(CODE[15]), 
		 -> STR_49(CODE[33]), STR_47(CODE[24]), STR_43(CODE[6]), STR_39(CODE[18]), 
		 -> STR_38(CODE[6]), STR_36(CODE[33]), STR_35(CODE[6]), STR_27(CODE[24]), 
		 -> STR_26(CODE[18]), STR_25(CODE[20]), STR_24(CODE[25]), STR_23(CODE[22]), 
		 -> STR_22(CODE[19]), STR_21(CODE[20]), STR_20(CODE[20]), STR_18(CODE[6]), 
		 -> STR_16(CODE[6]), STR_14(CODE[6]), STR_12(CODE[6]), STR_10(CODE[6]), 
		 -> STR_8(CODE[6]), STR_6(CODE[31]), STR_4(CODE[29]), STR_3(CODE[55]), 
		 -> STR_2(CODE[48]), STR_1(CODE[37]), 

    sprintf$2094	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_255(CODE[17]), STR_254(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_192(CODE[3]), STR_191(CODE[7]), STR_185(CODE[3]), STR_184(CODE[7]), 
		 -> STR_181(CODE[4]), STR_180(CODE[8]), STR_177(CODE[4]), STR_176(CODE[8]), 
		 -> STR_173(CODE[4]), STR_172(CODE[8]), STR_169(CODE[4]), STR_168(CODE[8]), 
		 -> STR_165(CODE[4]), STR_164(CODE[7]), STR_161(CODE[4]), STR_160(CODE[7]), 
		 -> STR_157(CODE[4]), STR_156(CODE[7]), STR_153(CODE[4]), STR_152(CODE[7]), 
		 -> STR_147(CODE[3]), STR_146(CODE[7]), STR_144(CODE[3]), STR_143(CODE[7]), 
		 -> STR_141(CODE[3]), STR_140(CODE[7]), STR_138(CODE[3]), STR_137(CODE[7]), 
		 -> STR_135(CODE[3]), STR_134(CODE[7]), STR_132(CODE[3]), STR_131(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[7]), STR_64(CODE[3]), STR_63(CODE[7]), 
		 -> STR_62(CODE[3]), STR_61(CODE[7]), STR_58(CODE[3]), STR_57(CODE[7]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[3]), STR_52(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2074$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(COMRAM[1]), sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), 
		 -> sendVSCPDriverNack@crc(COMRAM[1]), sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK3[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK3[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> getCANFrame@flags(BANK0[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(BANK0[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1366	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_192(CODE[3]), STR_191(CODE[7]), 

    printErrors$1357	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[3]), STR_184(CODE[7]), 

    printErrors$1351	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_181(CODE[4]), STR_180(CODE[8]), 

    printErrors$1345	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_177(CODE[4]), STR_176(CODE[8]), 

    printErrors$1339	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_173(CODE[4]), STR_172(CODE[8]), 

    printErrors$1333	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_169(CODE[4]), STR_168(CODE[8]), 

    printStatistics$1326	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_165(CODE[4]), STR_164(CODE[7]), 

    printStatistics$1320	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[4]), STR_160(CODE[7]), 

    printStatistics$1314	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_157(CODE[4]), STR_156(CODE[7]), 

    printStatistics$1308	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[4]), STR_152(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1117(BANK3[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK3[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1251	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1246	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1241	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    receivePrintEventVerbose$1236	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_138(CODE[3]), STR_137(CODE[7]), 

    receivePrintEventVerbose$1231	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_135(CODE[3]), STR_134(CODE[7]), 

    receivePrintEventVerbose$1226	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_132(CODE[3]), STR_131(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), sendVSCPDriverNack@crc(COMRAM[1]), 
		 -> sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    doModeVerbose@p_1161	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1142	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1134	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_80(CODE[3]), STR_79(CODE[7]), 

    doModeVerbose@preg_1122	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1118	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1109	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[3]), STR_63(CODE[7]), 

    doModeVerbose$1105	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1099	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_58(CODE[3]), STR_57(CODE[7]), 

    doModeVerbose$1094	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_55(CODE[3]), STR_54(CODE[7]), 

    doModeVerbose$1082	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[3]), STR_52(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1070	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    inputFifo.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 


Critical Paths under _main in COMRAM

    _main->_doModeVscp
    _hexStringToBytes->_strlen
    _receivePrintEventSLCAN->_getCANFrame
    _receivePrintEventSLCAN->_itoa
    _ultoa->___llmod
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receivePrintEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_sendVSCPFrame
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _readRegister->_sendVSCPFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_fifo_write

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receivePrintEventSLCAN->_ultoa
    _doModeVscp->_receiveVSCPModeCanalMsg
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _receivePrintEventCANAL->_getCANFrame
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _printFirmwareVersion->_itoa

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  151409
                                            102 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0   11716
                                             35 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
             _receivePrintEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                             28 COMRAM    14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventSLCAN                              10    10      0    6246
                                             13 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                              0 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   18794
                                             46 COMRAM     1     1      0
                          _fifo_read
               _ECANSetOperationMode
             _receivePrintEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2094
                                             39 COMRAM     3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1926
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3260
                                             35 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                             24 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1926
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    2010
                                             39 COMRAM     2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             36 COMRAM     5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventCANAL                              15    15      0    5694
                                              2 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2    1014
                                             36 COMRAM     3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                             31 COMRAM     5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                             24 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0  116264
                                             82 BANK0     20    20      0
                                              0 BANK3     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                             24 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    6924
                                             62 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                             25 COMRAM     5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    6840
                                             62 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   34601
                                             77 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    7313
                                             71 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    9342
                                             71 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    9122
                                             71 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    6672
                                             62 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    3078
                                             43 COMRAM     4     4      0
                                             35 BANK0     27    20      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             28 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                             34 COMRAM     9     1      8
                                              0 BANK0     28    28      0
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             24 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5537
                                             30 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5429
                                             30 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                             30 COMRAM     7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             36 COMRAM     4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             37 COMRAM     4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                             25 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                             28 COMRAM     9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    9017
                                             30 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        14     9      5    3342
                                              2 BANK0     14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     2      3    2748
                                             43 COMRAM     3     0      3
                                              0 BANK0      2     2      0
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  12     8      4    2400
                                             31 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     954
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3     132
                                             24 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                              0 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fifo_read                                           14     8      6     612
                                             24 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                              2 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             40 COMRAM     6     0      6
                                              0 BANK0      2     2      0
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                             31 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                             25 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     625
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                             27 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                             24 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                            8     8      0     646
                                             16 COMRAM     8     8      0
                          _ReadUSART
                         _fifo_write
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         16     9      7     378
                                              0 COMRAM    16     9      7
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receivePrintEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receivePrintEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1F4      16       32.9%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100     3D      3D      10       23.8%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CC       6       79.7%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     6D      81       4       80.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2F      47       1       74.7%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D1      15        0.0%
DATA                 0      0     4D1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Dec 19 14:58:30 2014

                 __end_of_doModeVerbose 6BAA                            printBinary@i 001D  
                           fifo_write@f 0001                             fifo_write@i 000D  
                           fifo_write@p 000C                   __end_of_sendVSCPFrame 2E68  
            doModeVerbose@filter_nodeid 0310                                      PL2 6BAA  
                                    PL4 2F18                                      PL6 6BB8  
                                    PL8 6BC6                                      bsr 000FE0  
                   ___wmul@multiplicand 001B                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 1CE2                                     PL10 6C10  
                                   PL20 5978                                     PL12 594A  
                                   PL30 6C46                                     PL22 37D0  
                                   PL14 3C0E                                     PL40 6C7A  
                                   PL32 39A4                                     PL24 3254  
                                   PL16 6C2C                                     PL50 59B8  
                                   PL42 6C94                                     PL34 6C5A  
                                   PL26 2FD4                                     PL18 5968  
                                   PL60 59CE                                     PL52 39C8  
                                   PL44 599E                                     PL36 6C6C  
                                   PL28 36D0                                     PL70 35DE  
                                   PL62 3ACA                                     PL54 6CAE  
                                   PL46 3264                                     PL38 3ABC  
                                   PL80 52BE                                     PL72 39DA  
                                   PL64 59DC                                     PL56 6CC6  
                                   PL48 39B8                                     PL90 20A8  
                                   PL82 5A02                                     PL74 38D0  
                                   PL66 3ADE                                     PL58 29E0  
                                   PL92 3EA6                                     PL84 1E8E  
                                   PL76 3B04                                     PL68 3AF0  
                                   PL94 39EE                                     PL86 462A  
                                   PL78 59F0                                     PL96 5A0C  
                                   PL88 4A12                 sendEscapedUartData@pcrc 0025  
               receivePrintEventCANAL@i 006A                                     l500 626A  
                                   l505 6184                                     l532 62BE  
                                   l524 624A                                     l516 6220  
                                   l372 3D0E                                     l621 419C  
                                   l373 3D18                                     l519 622A  
                                   l711 2594                                     l375 3D24  
                                   l720 25D6                                     l368 3CB6  
                                   l369 3CF4                                     l730 31A6  
                                   l802 2F0E                                     l491 6BA8  
                                   l715 25B4                                     l811 3602  
                                   l724 25F6                                     l820 3652  
                                   l733 31B0                                     l742 320C  
                                   l814 360C                                     l727 319C  
                                   l823 366A                                     l663 52BC  
                                   l496 60FE                                     l736 31C8  
                                   l760 2D0C                                     l832 36BC  
                                   l808 35F8                                     l745 3240  
                                   l817 3624                                     l673 4FF0  
                                   l754 2CF8                                     l826 3682  
                                   l739 31F4                                     l763 2D30  
                                   l835 36C6                                     l931 4516  
                                   l748 324A                                     l772 2D98  
                                   l940 459C                                     l757 2D02  
                                   l781 2E6A                                     l829 369A  
                                   l766 2D5E                                     l790 2EA2  
                                   l950 461E                                     l934 4550  
                                   l926 44E4                                     l871 4C82  
                                   l775 2DA2                                     l872 4C94  
                                   l864 4BF2                                     l784 2E74  
                                   l961 2C82                                     l769 2D76  
                                   l793 2ECE                                     l953 4628  
                                   l970 3108                                     l882 3DB8  
                                   l698 51F8                                     l891 3E90  
                                   l787 2E7E                                     l947 45FE  
                                   l964 2CF4                                     l876 3DA4  
                                   l796 2EE4                                     l973 3194  
                                   l885 3DD4                                     l894 3E9A  
                                   l991 3346                                     l879 3DAE  
                                   l799 2F04                                     l897 3EA4  
                                   l988 32B8                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 006C                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 00D8          __size_of_writeRegisterExtended 00DA  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3348  
                          __CFG_LVP$OFF 000000                 receivePrintEventSLCAN@i 0071  
              receivePrintEventCANAL@id 006C                            __CFG_WDT$OFF 000000  
                                  l1011 21F2                                    l1110 2988  
                                  l1007 21E6                                    l1120 265E  
                                  l1113 29AE                                    l1131 46AC  
                                  l1140 473C                                    l1141 474E  
                                  l1133 46BE                                    l1142 4760  
                                  l1134 46D0                                    l1143 4772  
                                  l1135 46E2                                    l1160 1F7E  
                                  l1072 343A                                    l1144 4784  
                                  l1136 46F4                                    l1145 4796  
                                  l1137 4706                                    l1066 4F2E  
                                  l1058 4EA6                                    l1146 47A8  
                                  l1138 4718                                    l2203 2C2C  
                                  l1147 47BA                                    l1139 472A  
                                  l1164 1E64                                    l1156 28D2  
                                  l1148 4812                                    l1165 1E6A  
                                  l1414 2FB2                                    l1350 489A  
                                  l1334 4024                                    l1326 3F84  
                                  l2302 35BA                                    l1360 48F4  
                                  l1352 48A8                                    l1328 3FA2  
                                  l1417 2FD2                                    l2234 26CE  
                                  l1610 572C                                    l1602 56C4  
                                  l1522 52E8                                    l1370 497E  
                                  l1362 4904                                    l1354 48BC  
                                  l1346 4A10                                    l1611 5730  
                                  l1371 4998                                    l1339 484C  
                                  l2244 24A8                                    l1356 48D0  
                                  l2420 2A7E                                    l2317 2248  
                                  l1613 574C                                    l1349 491A  
                                  l1702 23C0                                    l1358 48E4  
                                  l2422 2A72                                    l1711 23FA  
                                  l2327 1FF0                                    l2423 2A76  
                                  l1463 2528                                    l1471 2588  
                                  l1608 5706                                    l2408 251A  
                                  l1449 1DD8                                    l1393 3ABA  
                                  l1465 2530                                    l1481 2074  
                                  l1706 23D4                                    l1538 542E  
                                  l2370 2456                                    l1707 23D6  
                                  l1555 543E                                    l1539 53DE  
                                  l1708 23E0                                    l1388 39A2  
                                  l1709 23E2                                    l1629 57D6  
                                  l1670 1D9A                                    l1574 5562  
                                  l1558 5472                                    l1398 274C  
                                  l1486 2B46                                    l1719 22A0  
                                  l1559 5476                                    l2447 21B8  
                                  l1487 2BAC                                    l2456 2036  
                                  l2392 27C8                                    l2368 23FC  
                                  l2466 2174                                    l1669 1D98  
                                  l2389 27CC                                    l1927 37C6  
                                  l1928 37CE                                    STR_1 7652  
                                  STR_2 72E3                                    STR_3 70DD  
                                  STR_4 782A                                    STR_5 7CCF  
                                  STR_6 77EC                                    STR_7 7CB6  
                                  STR_8 7C7F                                    STR_9 7C5D  
                                  _PEIE 007F96                          sendCANFrame@id 007C  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 001A  
                                  _bDLE 003B                            __CFG_PWRT$ON 000000  
                                  ___IT 000101              __end_of_sendVSCPDriverNack 2F18  
                                  _bHex 00D3            doModeVerbose@filter_priority 030E  
                                  _crc8 1ED6                                    _atoi 36E0  
                                  _main 3C3C                                    _init 20F6  
                                  _mode 00D7                                    _itoa 1E9E  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 2BAE  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 019E  
                          _sprintf$2094 0070                            _sprintf$2087 006C  
                          _sprintf$2088 006E                             _writeEEPROM 1DBC  
             ECANReceiveMessage@dataLen 0022                      doModeVerbose@count 032B  
                 getVSCPFrame@pPriority 0064                      doModeVerbose@value 0331  
                  __end_of_getVSCPFrame 28D4                        __RegsToCANID@val 001B  
                      __RegsToCANID@ptr 0019                    __size_of_getCANFrame 0030  
              ?_receiveVSCPModeCanalMsg 0001                receivePrintEventSLCAN@id 0073  
                       ?_doModeVscpNode 0001                                   l11011 52F2  
                                 l11101 54C2                                   l11013 52F6  
                                 l11021 5304                                   l11005 52D0  
                                 l11111 54EA                                   l11103 54D0  
                                 l11015 52FA                                   l11017 52FE  
                                 l11203 5692                                   l11107 54DE  
                                 l11115 54F0                                   l11301 5820  
                                 l11221 56E2                                   l11125 552C  
                                 l11117 551C                                   l11061 541A  
                                 l11045 53AC                                   l11029 533C  
                                 l11037 5384                                   l11215 56C8  
                                 l11151 55A4                                   l11143 558A  
                                 l11063 5434                                   _B0CON 000E20  
                                 l11241 575C                                   l11209 56A4  
                                 l11081 547C                                   l11065 5438  
                                 l11057 53E4                                   l10531 292C  
                                 l11323 58EA                                   l11315 58AC  
                                 l11307 5834                                   l11251 577C  
                                 l11235 5746                                   l11227 570A  
                                 l11163 55D8                                   l11139 556C  
                                 l11075 545A                                   l11067 543C  
                                 l13011 643E                                   l10381 23B4  
                                 l11333 592C                                   l11309 588A  
                                 l11325 58FC                                   l11165 55DC  
                                 l11149 55A0                                   l11341 593C  
                                 l11085 5482                                   l11093 54A6  
                                 l11069 5442                                   l13101 66A0  
                                 l13005 641C                                   l10543 2946  
                                 l11319 58D0                                   l11087 548E  
                                 l10711 3790                                   l10703 373C  
                                 l13111 66D8                                   l13023 64AC  
                                 l13015 646A                                   l13007 6430  
                                 _B1CON 000E30                                   l11329 590A  
                                 l11257 5790                                   l11265 57AC  
                                 l11177 5610                                   l11193 5648  
                                 l11097 54BC                                   l10705 3752  
                                 l13025 64BA                                   l11291 57FE  
                                 l11275 57BE                                   l11179 5614  
                                 l11195 565A                                   l11339 5934  
                                 l10707 3758                                   l10723 1DFC  
                                 l13107 66CA                                   l13051 6582  
                                 l13019 6478                                   l10389 23C2  
                                 l12333 2682                                   l11285 57E6  
                                 l11269 57B6                                   l12413 2500  
                                 l12405 24BC                                   l10661 27B6  
                                 l11509 47CC                                   l13133 6796  
                                 l13117 6730                                   l13037 6528  
                                 l12335 268E                                   l11199 5674  
                                 l12415 2508                                   l12423 2022  
                                 l10655 2758                                   l10719 1DEC  
                                 l14111 388E                                   l14015 21FC  
                                 l14007 21CC                                   l13223 6A36  
                                 l13207 69AA                                   l13143 67CE  
                                 l13071 65F6                                   l13303 4096  
                                 l13311 40B2                                   l12511 3D20  
                                 l12503 3D0A                                   _B2CON 000E40  
                                 l12345 26C0                                   l12337 2692  
                                 l12361 249A                                   l12353 2468  
                                 l11289 57F8                                   l11801 1F8E  
                                 l12433 1D46                                   l12409 24F4  
                                 l12425 2026                                   l12441 2148  
                                 l10673 29FC                                   l13217 6A00  
                                 l13153 6808                                   l13137 67A4  
                                 l13081 662E                                   l13305 409C  
                                 l12281 2072                                   l12273 2060  
                                 l12265 204E                                   l12355 2474  
                                 l12419 2006                                   l10659 2790  
                                 l10683 2A34                                   l14115 38AC  
                                 l14107 3870                                   l13243 6AD2  
                                 l13235 6A94                                   l13251 6B10  
                                 l13219 6A10                                   l13163 6840  
                                 l13147 67DC                                   l13091 6668  
                                 l13067 65E8                                   l12531 3D54  
                                 l12523 3D3E                                   l12293 1DB4  
                                 l12357 2478                                   l10693 36E2  
                                 l14109 3878                                   l14133 2AB6  
                                 l13261 6B7E                                   l13173 6878  
                                 l13157 6816                                   l13077 6620  
                                 l12701 5AF2                                   l14213 3E66  
                                 l13333 40DE                                   l13325 40BA  
                                 l11821 2B98                                   l13421 4F9E  
                                 l12525 3D44                                   l12439 2140  
                                 l12447 2184                                   l10695 36E6  
                                 l14071 3022                                   l14143 2AF2  
                                 l10951 1E20                                   l14055 3324  
                                 l13255 6B4C                                   l13167 684E  
                                 l13087 665A                                   l13263 6B8A  
                                 l13335 40E4                                   l11815 2B54  
                                 l13423 4FA2                                   l12535 3D60  
                                 l12527 3D4A                                   l12471 3C7A  
                                 _B3CON 000E50                                   l12449 218C  
                                 l14137 2ADC                                   l14057 3344  
                                 l13185 68DC                                   l13177 6886  
                                 l13097 6692                                   l14217 3E80  
                                 l14233 1F3C                                   l13337 40EA  
                                 l13273 402E                                   l13417 4F7C  
                                 l12643 263E                                   l12635 2618  
                                 l12651 2F36                                   l14083 30A2  
                                 l14139 2AE4                                   l13259 6B70  
                                 l13187 68EC                                   l12803 5DDA  
                                 l13267 6BA6                                   l12555 253A  
                                 l13363 4120                                   l13347 40FC  
                                 l11915 351C                                   l14411 45BA  
                                 l13531 529E                                   l13515 51FE  
                                 l13507 51DE                                   l13451 502A  
                                 l13435 4FEA                                   l13523 5228  
                                 l10957 2426                                   l14077 306E  
                                 l10949 1E18                                   l12901 6150  
                                 l12821 5E6C                                   l12813 5E2E  
                                 l12733 5BDE                                   l12725 5BA4  
                                 l12717 5B6A                                   l12709 5B2E  
                                 l12557 2540                                   l14229 1F14  
                                 l13381 4166                                   l13349 4102  
                                 l13293 4080                                   l11925 3560  
                                 l13517 5210                                   l13461 5052  
                                 l13429 4FC6                                   l13525 527E  
                                 l12647 2652                                   l12639 262A  
                                 l12663 2FBC                                   l13711 4C6E  
                                 l14159 3930                                   l14079 3084  
                                 l13199 696C                                   l12671 5A20  
                                 l13375 414E                                   l13391 418E  
                                 l14407 45A6                                   l13439 4FFA  
                                 l13535 52BA                                   _B4CON 000E60  
                                 l12665 2FC0                                   l14505 1E60  
                                 l13713 4C76                                   l13801 4CB0  
                                 l14601 3F88                                   l12913 619E  
                                 l12841 5F42                                   l12809 5E08  
                                 l12761 5CA6                                   l12753 5C78  
                                 l13369 4136                                   l13393 4194  
                                 l13289 407A                                   l13529 5292  
                                 l14099 380A                                   l12835 5F08  
                                 l12827 5EBE                                   l12819 5E62  
                                 l12739 5C14                                   l14443 20E4  
                                 l13387 417E                                   l13725 1D56  
                                 l13709 4C6A                                   l13661 4B10  
                                 l13637 4A76                                   l14613 3FD4  
                                 l14621 3FF2                                   l14453 1F7C  
                                 l12925 61EC                                   l12853 5FCC  
                                 l12845 5F6C                                   l12837 5F18  
                                 l12829 5ECE                                   l12773 5CE8  
                                 l12765 5CBC                                   l12757 5C90  
                                 l12749 5C58                                   l12693 5AB8  
                                 l14437 20C8                                   l13397 419A  
                                 l13485 5182                                   l13477 50F4  
                                 l13719 4C92                                   l11799 1F8A  
                                 l13815 4D12                                   l14607 3FA4  
                                 l14631 4018                                   l11991 2318  
                                 l12871 603E                                   l12791 5D7E  
                                 l12775 5CF8                                   l13495 51A8  
                                 _B5CON 000E70                                   l14529 1EBA  
                                 l14801 272E                                   l14721 492E  
                                 l13673 4B5C                                   l13649 4AC2  
                                 l13745 4338                                   l14633 401A  
                                 l14561 2CF2                                   l11985 22FE  
                                 l13921 346E                                   l12953 628A  
                                 l12849 5FA2                                   l12785 5D4C  
                                 l12769 5CD2                                   l14731 494E  
                                 l14491 2874                                   l13843 4DD6  
                                 l14627 4014                                   l11987 2302  
                                 l12939 6244                                   l12883 60CC  
                                 l12867 602E                                   l14653 483A  
                                 l13685 4BA8                                   l13773 43FC  
                                 l13829 4D74                                   l14573 3F0C  
                                 l11989 2310                                   l12981 6336  
                                 l12965 62D8                                   l12973 6316  
                                 l12893 6106                                   l12877 60A8  
                                 l12797 5DAC                                   l14831 2BB6  
                                 l14815 3A56                                   l14663 4864  
                                 l14671 4884                                   l13759 439A  
                                 l14591 3F48                                   l14559 2CD2  
                                 l12975 631A                                   l12879 60BC  
                                 l12983 6346                                   l14399 4564  
                                 l14841 2BEE                                   l13881 4EC0  
                                 l13873 4E96                                   l13857 4E38  
                                 l14771 49FA                                   l13699 4BFE  
                                 l13787 445E                                   l14579 3F1E  
                                 l13939 34D2                                   l12995 63A4  
                                 l14757 49C6                                   l14765 49E4  
                                 l14749 499A                                   l14669 487A  
                                 l14677 4888                                   l13893 4F0E  
                                 l13869 4E86                                   ?_crc8 0020  
                                 l14791 270C                                   l14783 26E6  
                                 l12999 63B2                                   l14865 2218  
                                 l14793 2716                                   l14785 26EE  
                                 l13897 4F1E                                   l14867 2220  
                                 l14795 271C                                   l14787 26F8  
                                 l13987 3172                                   l14877 223E  
                                 l14869 2224                                   l14893 1FE6  
                                 l14885 1FC8                                   l14797 2722  
                                 l14789 2702                                   l13989 3192  
                                 l13999 1D2E                                   l14887 1FD0  
                                 l14889 1FD4                    __size_of_doModeSLCAN 038E  
                    writeEEPROM@address 0019                                   ?_atoi 001F  
                                 ?_main 00C6                                   ?_init 0001  
                                 ?_itoa 0029                           i1_WriteTimer0 1CEA  
                                 _EEADR 000FA9                                   STR_10 7C7F  
                                 STR_11 7C91                                   STR_12 7C7F  
                                 STR_20 7A82                                   STR_13 7BCC  
                                 STR_21 7A96                                   STR_14 7C7F  
                                 STR_30 7CF4                                   STR_22 7AD2  
                                 STR_31 7CF4                                   STR_15 7C4F  
                                 STR_23 7A05                                   STR_16 7C7F  
                                 STR_32 7CF4                                   STR_40 7CCA  
                                 STR_24 78CE                                   STR_33 7CF4  
                                 STR_41 7CD8                                   STR_17 7C0D  
                                 STR_25 7A6E                                   STR_18 7C7F  
                                 STR_50 7C2A                                   STR_34 7CF4  
                                 STR_42 7CC5                                   STR_26 7AE5  
                                 STR_43 7C7F                                   STR_35 7C7F  
                                 STR_19 7C48                                   STR_51 7B5D  
                                 STR_27 7948                                   STR_28 7CEA  
                                 STR_44 7CA2                                   STR_52 7C64  
                                 STR_36 7748                                   STR_60 7705  
                                 STR_61 7C64                                   STR_29 7CF4  
                                 STR_53 7CED                                   STR_37 7CE7  
                                 STR_45 7CA7                                   STR_38 7C7F  
                                 STR_70 7930                                   STR_46 7C2A  
                                 STR_54 7C64                                   STR_62 7CED  
                                 STR_71 7C2A                                   STR_63 7C64  
                                 STR_55 7CED                                   STR_39 7AF7  
                                 STR_47 7930                                   STR_72 77AB  
                                 STR_48 7C2A                                   STR_56 7BE9  
                                 STR_80 7CED                                   STR_64 7CED  
                                 STR_81 71B2                                   STR_65 71B2  
                                 STR_73 7C2A                                   STR_57 7C64  
                                 STR_49 77AB                                   STR_66 7C7F  
                                 STR_90 7CF4                                   STR_58 7CED  
                                 STR_82 7C56                                   STR_74 7960  
                                 STR_59 71B2                                   STR_83 7CF4  
                                 STR_75 76C0                                   STR_91 7607  
                                 STR_67 714A                                   STR_92 7CF4  
                                 STR_68 7CAC                                   STR_76 778A  
                                 STR_84 6F44                                   STR_69 7C2A  
                                 STR_77 7CBB                                   STR_85 751D  
                                 STR_93 747C                                   STR_86 7CF4  
                                 STR_94 7CB1                                   STR_78 7AAA  
                                 STR_95 7CF4                                   STR_79 7C64  
                                 STR_87 7452                                   STR_88 7CF4  
                                 STR_96 721C                                   STR_97 762D  
                                 STR_89 75B9                                   STR_98 7CF4  
                                 STR_99 74CD            __end_of_printFirmwareVersion 29E0  
                                 _BSEL0 000DF8                         __end_of___lldiv 26E0  
                                 ?_utoa 0020                         __end_of_calcCRC 1F46  
                                 _T0CON 000FD5                         __end_of___llmod 24BA  
                                 u13210 3734                                   u13230 374E  
                                 u13217 372E                                   u20097 3C8A  
                                 u13250 377C                                   u13170 3702  
                                 u13260 37A2                                   u13237 3748  
                                 u13190 3718                                   _LATC1 007C59  
                                 u13257 3776                                   u13177 36FC  
                                 u13530 2418                                   u13267 379C  
                                 u13197 3712                                   u13550 244E  
                                 u15160 1FAA                                   u13537 2412  
                                 u13557 2448                                   u15167 1FA4  
                                 u14545 4650                                   u14546 4656  
                                 u14555 4684                                   u14547 4664  
                                 u14556 468A                                   u14557 4698  
                                 u17205 64D8                                   u17305 674E  
                                 u17225 65A0                                   u17145 6366  
                                 u15490 2340                                   u16460 22C0  
                                 u17405 694A                                   u16470 22EC  
                                 u17415 698A                                   u16615 5A98  
                                 u18145 2DE8                                   u15497 2336  
                                 u16625 5AD8                                   u19025 3384  
                                 u16467 22BA                                   u16635 5B12  
                                 u16477 22E6                                   u16645 5B4E  
                                 u17295 6BCE                                   u16655 5B8A  
                                 u16905 5F62                                   u16665 5BC4  
                       __end_of___lwdiv 2252                                   u17395 690A  
                                 u16915 5F8C                                   u16675 5BFE  
                                 u17900 50C0                                   u16925 5FC2  
                                 u16685 5C34                                   u17910 50CA  
                                 u16935 5FEC                                   u17920 50D4  
                                 u16785 5D18                                   u17905 50BE  
                                 u19450 28C6                                   u16875 5EEE  
                                 u17915 50C8                                   u17925 50D2  
                                 u18494 21DC                                   u19455 28BC  
                                 u18495 21D8                                   u16895 5F38  
                                 u19705 4842                                   u18745 390A  
                                 u19707 4844                                   u18755 391A  
                                 u18765 3938                            _vscpPriority 00DD  
                                 i1l400 017E                                   i1l412 0180  
                                 i1l406 017E                                   i1l409 016E  
                       __end_of___lwmod 1FFA                                   u19975 3A1E  
                                 u19985 3A2E                                   i1l395 0084  
                                 u19995 3A5A                         sendCANFrame@dlc 0080  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 001C                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00A0                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00D5  
               readRegisterExtended@reg 00A0                           __CFG_WRTD$OFF 000000  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 2B14  
                                 crc8@m 0022                         __end_of_dpowers 6D34  
                       __end_of_isdigit 1DBC                                   _timer 0118  
                                 atoi@a 0024                                   atoi@s 001F  
                                 main@c 00CC                                   _ultoa 350C  
                            Interrupt@c 0018              ??_printNodeFirmwareVersion 0030  
                      _printErrors$1333 007E                        _printErrors$1351 0084  
                      _printErrors$1345 0082                        _printErrors$1339 0080  
                      _printErrors$1357 0086                        _printErrors$1366 0088  
                                 tablat 000FF5             __end_of_sendEscapedUartData 25F8  
                                 plusw2 000FDB                                   utoa@c 0028  
                                 utoa@v 0026                                   status 000FD8  
               ?_receivePrintEventCANAL 0001                         __end_of_sprintf 594A  
                       __end_of_strichr 2038                         __end_of_strcspn 21C2  
                       __end_of_toupper 1D4A                         __end_of_stristr 27CE  
               ?_receivePrintEventSLCAN 0001       __size_of_receivePrintEventVerbose 0276  
                   doModeVerbose@i_1064 0330               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1142 0339                     doModeVerbose@p_1118 0334  
                   doModeVerbose@p_1070 0332                     doModeVerbose@p_1161 033B  
                        WriteUSART@data 0019                    _ECANSetOperationMode 1D4A  
                       __initialization 234A                  doModeVerbose@page_1115 0321  
                          __end_of_crc8 1F0E                            __end_of_atoi 37D0  
                          __end_of_main 3D6C                            __end_of_init 213A  
                          __end_of_itoa 1ED6                            __end_of_utoa 2C4E  
                   doModeVerbose@ifmode 0336                     doModeVerbose@maskno 0328  
                   doModeVerbose@nodeid 030C                           doModeSLCAN@id 008A  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 0090  
                     ??_ECANSendMessage 002B                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00A3                                  ??_crc8 0023  
                 getVSCPFrame@pvscptype 0062                                  ??_atoi 0021  
                ??_vscp_restoreDefaults 001D                                  ??_main 00CB  
                     readRegister@value 00A1                                  ??_init 001D  
                                ??_itoa 002F                                  ??_utoa 0026  
                doModeVerbose@mask_type 0312                           __activetblptr 000002  
                       _stateVscpDriver 003F                       __RegsToCANID@type 001C  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 0023  
                         ?_readRegister 009E               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                doModeVerbose@preg_1122 0306                                  _B2TXEN 006FC4  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00A1  
            ECANReceiveMessage@savedPtr 0025                                  _CANCON 000F6F  
                      ___llmod@dividend 0026                                  STR_100 7CF4  
                                STR_101 7677                                  STR_102 7CF4  
                                STR_110 74F5                                  STR_111 7B86  
                                STR_103 769C                                  STR_104 7CF4  
                                STR_120 7BED                                  STR_112 7BBA  
                                STR_200 73FA                                  STR_121 7C8B  
                                STR_113 7C85                                  STR_105 7592  
                                STR_201 73A0                                  STR_106 7C9D  
                                STR_130 7C41                                  STR_114 7BFD  
                                STR_122 7769                                  STR_210 7727  
                                STR_202 71E9                                  STR_131 7C64  
                                STR_107 7CDC                                  STR_123 787E  
                                STR_115 7847                                  STR_211 7544  
                                STR_203 724E                                  STR_140 7C64  
                                STR_132 7CED                                  STR_116 7CC0  
                                STR_124 7A5A                                  STR_204 780B  
                                STR_212 74A5                                  STR_108 7426  
                                STR_220 6DEF                                  STR_141 7CED  
                                STR_109 7C05                                  STR_133 7BF5  
                                STR_125 7BD5                                  STR_117 77CC  
                                STR_221 76E3                                  STR_213 7371  
                                STR_205 7280                                  STR_150 7CD4  
                                STR_118 7C97                                  STR_134 7C6B  
                                STR_142 7C3A                                  STR_126 7BDD  
                                STR_230 7899                                  STR_206 73CE  
                                STR_222 7342                                  STR_214 6E36  
                                STR_231 71B2                                  STR_143 7C64  
                                STR_135 7CED                                  STR_127 7C79  
                                STR_151 7B09                                  STR_207 7900  
                                STR_119 78B4                                  STR_223 7313  
                                STR_215 6F01                                  STR_240 71B2  
                                STR_232 6E7B                                  STR_160 7C72  
                                STR_144 7CED                                  STR_128 7CF2  
                                STR_152 7C72                                  STR_136 7C33  
                                STR_208 7037                                  STR_224 6EBE  
                                STR_216 6DA2                                  STR_137 7C64  
                                STR_161 7CE0                                  STR_129 7CF0  
                                STR_153 7CE0                                  STR_145 7C2C  
                                STR_233 7B4E                                  STR_241 7ABE  
                                STR_209 79C0                                  STR_217 7918  
                                STR_225 72B2                                  STR_170 71B2  
                                STR_162 71B2                                  STR_154 71B2  
                                STR_146 7C64                                  STR_138 7CED  
                                STR_242 7CFC                                  STR_234 7BE5  
                                STR_250 7BB0                                  STR_226 70A6  
                                STR_218 6D54                                  STR_147 7CED  
                                STR_235 7CF8                                  STR_243 7CF6  
                                STR_139 7BC3                                  STR_251 7BA6  
                                STR_155 7B3D                                  STR_219 7A46  
                                STR_163 7A31                                  STR_171 79A8  
                                STR_227 6F86                                  STR_244 71B2  
                                STR_148 7CF4                                  STR_164 7C72  
                                STR_156 7C72                                  STR_180 7C15  
                                STR_172 7C15                                  STR_236 7CE4  
                                STR_252 79EE                                  STR_228 75E0  
                                STR_253 71B2                                  STR_181 7CE0  
                                STR_173 7CE0                                  STR_165 7CE0  
                                STR_157 7CE0                                  STR_237 7CFA  
                                STR_245 7B9C                                  STR_149 7B91  
                                STR_229 6E7B                                  _EEDATA 000FA8  
                                STR_246 71B2                                  STR_238 71B2  
                                STR_182 71B2                                  STR_174 71B2  
                                STR_166 71B2                                  STR_158 71B2  
                                STR_254 7B1B                                  STR_190 7978  
                                STR_191 7C64                                  STR_247 7C25  
                                STR_239 7B6C                                  STR_255 7B2C  
                                STR_159 7A1B                                  STR_167 79D7  
                                STR_175 7990                                  STR_183 78E7  
                                STR_184 7C64                                  STR_176 7C15  
                                STR_192 7CED                                  STR_248 7C1D  
                                STR_168 7C15                                  STR_193 71B2  
                                STR_185 7CED                                  STR_177 7CE0  
                                STR_169 7CE0                                  STR_249 7B7A  
                                STR_186 71B2                                  STR_178 71B2  
                                STR_194 706F                                  STR_179 7990  
                                STR_195 7114                                  STR_187 6FC4  
                                STR_196 71B5                                  STR_188 7180  
                                STR_197 756B                                  STR_189 6FFE  
                                STR_198 6E97                                  STR_199 7863  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3196  
                                _CIOCON 000F73                                  ?_ultoa 0060  
          ??_sendVSCPDriverCommandReply 0029                                  i1l1425 3B56  
                         ?_init_app_ram 0001                                  i1l1426 3C0C  
                                _MDSEL0 007BBE                                  _MDSEL1 007BBF  
                                i1l1732 1D70                                  i1l7101 3BE8  
                                i1l7103 3BF2                              _OpenTimer0 1D80  
                                i1l7091 3B60                                  i1l7083 3B24  
        __end_of_receivePrintEventCANAL 3EA6                                  i1l9201 0034  
                                i1l9211 008C                                  i1l9203 003C  
                                i1l9221 00DC                                  i1l9213 00B0  
                                i1l9205 0042                                  i1l9231 010E  
                                i1l9223 00E4                                  i1l9215 00BC  
                                i1l9207 0070                                  i1l9241 013E  
                                i1l9225 00F0                                  i1l9217 00C0  
                                i1l9209 0080                                  i1l9251 0176  
                                i1l9243 014A                                  i1l9235 0120  
                                i1l9219 00CC                                  i1l9237 012C  
                                i1l9229 0102                                  i1l9247 015C  
                                i1l9249 0166                         _init_app_eeprom 28D4  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0020          __end_of_receivePrintEventSLCAN 462A  
                ECANReceiveMessage@mode 0028                  ECANReceiveMessage@temp 0029  
                     getVSCPFrame@pData 0066              ??_sendVSCPDriverErrorFrame 0028  
                     getVSCPFrame@pSize 0065                      _doModeVerbose$1105 031A  
                    _doModeVerbose$1109 031C                      _doModeVerbose$1134 031E  
                    _doModeVerbose$1082 0314                      _doModeVerbose$1094 0316  
                    _doModeVerbose$1099 0318                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0022                      __size_of_Interrupt 0186  
              readRegisterExtended@page 009E                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0004                          getCANFrame@pid 0060  
                                ___wmul 1E6C                              _bInitiated 00D4  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0021  
                             ??_calcCRC 0028                                  _cmdbuf 0124  
                             ??___llmod 002E                        OpenTimer0@config 0019  
                             ??___lwdiv 001D                               ??___lwmod 001D  
         _receivePrintEventVerbose$1231 0085           _receivePrintEventVerbose$1241 0089  
         _receivePrintEventVerbose$1226 0083           _receivePrintEventVerbose$1251 008D  
         _receivePrintEventVerbose$1236 0087           _receivePrintEventVerbose$1246 008B  
                                _memcpy 20B6                                  _memset 1DE2  
                                clear_0 2352                                  clear_1 2366  
                                clear_2 2378                                  clear_3 2384  
                                clear_4 2390                           ?_sendCANFrame 007C  
                                _strcat 22F4                                  _strchr 23FC  
                                _strcpy 1E0E                                  _strlen 1F80  
                                _wrkbuf 0174                                  _strtok 29EE  
                                _strspn 213A     __size_of_sendVSCPDriverCommandReply 00DE  
                             ??_isdigit 0019                        __end_of_printMDF 2B14  
                          __mediumconst 6CDC                          ??_readRegister 00A2  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 006C  
                                ultoa@v 0068                            ?_printErrors 0001  
                             ??_sprintf 0068                               ??_strichr 001E  
                             ??_strcspn 0023                               ??_toupper 0019  
                        ??_init_app_ram 001C                               ??_stristr 002A  
            doModeVerbose@mask_priority 0311                        __end_of_strnicmp 251C  
                            __accesstop 0060                 __end_of__initialization 2396  
                  _printFirmwareVersion 295E                         writeEEPROM@data 001B  
                 __size_of_getVSCPFrame 0084                    doModeVerbose@id_1173 0323  
                            _WriteUSART 1D20                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0188                    _printStatistics$1320 0082  
                  _printStatistics$1314 0080                    _printStatistics$1308 007E  
                  _printStatistics$1326 0084                   _uart_transmitOverruns 0120  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 35DE  
                            __end_ofPL2 6BB8                              __end_ofPL4 2F28  
                            __end_ofPL6 6BC6                              __end_ofPL8 6C10  
                        ??_sendCANFrame 002C                       __end_of_ReadUSART 1D80  
                         ?__RegsToCANID 0019             __size_of_ECANReceiveMessage 01FE  
                    sendVSCPFrame@pData 0089                         readRegister@reg 009E  
                  sendVSCPDriverAck@crc 0028                      __size_of_findNodes 00E6  
                        doModeSLCAN@dlc 008E                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00AC                  getVSCPFrame@pvscpclass 006B  
               __end_of_init_app_eeprom 295E                       __end_of_Interrupt 019E  
                         ReadUSART@data 0001                      readRegister@nodeid 00A6  
                        _status_led_cnt 0030                      __RegsToCANID@Value 001F  
                            _crc8_table 0200                       __end_of_OpenUSART 23FC  
               doModeVerbose@mask_class 030A               printNodeFirmwareVersion@i 00AC  
                       setFilter@filter 0023                            sprintf@width 0075  
      __end_of_printNodeFirmwareVersion 30C6                              _doModeVscp 4026  
                               ??_ultoa 002F                            _getVSCPFrame 2850  
                            __pbssBANK0 00CD                              __pbssBANK1 0100  
                            __pbssBANK2 0200                             ?_OpenTimer0 0001  
                            calcCRC@crc 0029                              calcCRC@len 0027  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0019  
                    __size_of_init_crc8 006E                            __IT_INT_MASK 0036  
                         setFilter@eidh 0026                           setFilter@eidl 0027  
                          __IT_SAVE_BSR 0037                           setFilter@sidh 0024  
                         setFilter@sidl 0025                            ?_writeEEPROM 0019  
                      ??_doModeVscpNode 0019                              _nTimeStamp 003D  
              __end_of_hexStringToBytes 2BAE                ECANSetOperationMode@mode 0019  
                               ?___wmul 0019                      __size_of_setFilter 01DC  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0035                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 2E68                                 _B5RXFUL 007387  
                      WriteTimer0@timer 001B                           putsUSART@data 001A  
                  _readRegisterExtended 30C6                                 ?_memcpy 0019  
                               _ECANCON 000F77                                 ?_memset 0019  
                         ??_WriteTimer0 001B                          ??__RegsToCANID 001D  
                 sendVSCPFrame@priority 0087                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0019                                 ?_strchr 0019  
                               ?_strcpy 0019                                 ?_strlen 0019  
                               ?_strtok 0025                                 ?_strspn 001F  
                            _cntRxBytes 0108                              _cntTxBytes 0110  
                    __size_of_printGUID 00F2                     ?_sendVSCPDriverNack 0001  
                            _fifo_write 3B16                      __size_of_printHelp 0180  
                    __size_of_printMode 0072                   sendVSCPFrame@vscptype 0085  
               doModeVerbose@value_1117 032A                       sendCANFrame@pdata 0081  
                            _made_table 00D1                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 26E0                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0054      __end_of_sendVSCPDriverCommandReply 36D0  
            _sendVSCPDriverCommandReply 35F2                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 326E  
      __size_of_receiveVSCPModeCanalMsg 00DE                  __size_of_doModeVerbose 1194  
                  sendEscapedUartData@c 0027                  __size_of_sendVSCPFrame 00BC  
      __end_of_sendVSCPDriverErrorFrame 3254                              _readEEPROM 1CFC  
                  ??_sendVSCPDriverNack 0028              printFirmwareVersion@wrkbuf 0062  
                       _ECANSendMessage 3EB4                                 __Hparam 0000  
                     __end_of_findNodes 350C                                 __Lparam 0000  
                     __end_of_fifo_init 20A8                       __end_of_fifo_read 2FD4  
                         ??_getCANFrame 002F                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00A3                    __end_of_readRegister 2CF6  
                             ?_printMDF 0001                                 _bSilent 00D6  
             receiveVSCPModeCanalMsg@id 009F                           ??_doModeSLCAN 0083  
                               ___lldiv 266A                         __size_of___wmul 0022  
                               _calcCRC 1F0E                         getCANFrame@pdlc 002C  
                               ___llmod 2458                                 ___lwdiv 2208  
                             _FIFOEMPTY 007BA7                                 ___lwmod 1FBC  
                 ?_readRegisterExtended 009E             printNodeFirmwareVersion@buf 00A8  
                  __end_of_init_app_ram 22A0                            init_crc8@crc 001D  
                               __pcinit 234A                         __size_of_memcpy 0040  
                       __size_of_memset 002C                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 001D  
                               __ptext0 3C3C                                 __ptext1 1CE0  
                               __ptext2 4F30                                 __ptext3 2B14  
                               __ptext4 2038                                 __ptext5 44A6  
                               __ptext6 350C                                 __ptext7 4026  
                               __ptext8 35F2                                 __ptext9 2E68  
                               crc8@crc 0020           printNodeFirmwareVersion@value 00AB  
                     ??_printStatistics 002F                               _T0CONbits 000FD5  
                       __size_of_strcat 0056                         __size_of_strchr 005C  
                       __size_of_strcpy 002E                         __size_of_strlen 003C  
                     __end_of_hexpowers 6D54                         __size_of_strtok 0092  
                       __size_of_strspn 0044                                 _dpowers 6D0C  
                     __end_of_init_crc8 258A                                 _isdigit 1D9E  
        printNodeFirmwareVersion@nodeid 00A7                     __end_of_WriteTimer0 1D20  
                        _nibbleFromChar 2038                        ?_init_app_eeprom 0001  
                               _sprintf 52CA                       __end_of_setFilter 4814  
                               _strichr 1FFA                          doModeVerbose@c 032C  
                        doModeVerbose@i 0329                          doModeVerbose@p 0337  
                               _strcspn 217E                                 _toupper 1D34  
                           ?_doModeVscp 0001                                 _stristr 2756  
                  __size_of_printBinary 0046                    end_of_initialization 2396  
                     __end_of_octpowers 6D0C                    __size_of_printErrors 029A  
                               memcpy@d 001F                                 memcpy@n 001D  
                               memcpy@s 0021                  ??_printFirmwareVersion 002F  
                             i1u1100_20 0100                               i1u1100_21 00FE  
                             i1u1101_20 010E                               i1u1101_21 010C  
                             i1u1102_20 011E                               i1u1102_21 011C  
                             i1u1103_20 012C                               i1u1103_21 012A  
                             i1u1104_20 013C                               i1u1104_21 013A  
                               itoa@buf 0029                               i1u1105_20 014A  
                             i1u1105_21 0148                               i1u1106_20 015A  
                             i1u1106_21 0158                               i1u1107_20 0166  
                             i1u1107_21 0164                               i1u1108_20 0176  
                             i1u1108_21 0174                                 memset@c 001B  
                               itoa@val 002B                                 memset@n 001D  
                               memset@p 001F                           __Lmediumconst 6CDC  
                  __end_of_sendCANFrame 1F80                               i1u1094_20 003C  
                             i1u1094_21 003A                               i1u1095_20 0070  
                             i1u1095_21 006E                               i1u1096_20 008C  
                             i1u1096_21 008A                               i1u1097_20 00CC  
                             i1u1097_21 00CA                               i1u1098_20 00DC  
                             i1u1098_21 00DA                               i1u1099_20 00F0  
                             i1u1099_21 00EE                     _can_receiveOverruns 0100  
                     __end_of_printGUID 38D0                         ___lldiv@divisor 001D  
                     __end_of_printHelp 431E                         ___lldiv@counter 0025  
                     __end_of_printMode 266A                       ECANSendMessage@id 0023  
                     ECANSendMessage@pb 0060            __size_of_sendEscapedUartData 006E  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 0030                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0082                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 22F4                      __ECANPointBuffer@b 001C  
                         _doModeVerbose 5A16                                 utoa@buf 0020  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0022  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 2DAC  
                               strlen@s 0019                              _sequencyno 003E  
                            _timekeeper 00CD                               _RXM0EXIDM 0078CB  
                               strspn@i 0023                              ??_strnicmp 0023  
                   __end_of_getCANFrame 1E6C                              findNodes@i 00B1  
                __end_of_nibbleFromChar 2076                     __end_of_doModeSLCAN 52BE  
                           ?_fifo_write 0001                              fifo_init@f 0019  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 0019  
                            fifo_read@i 0025                              fifo_read@p 0023  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 009E       sendVSCPDriverCommandReply@cmdCode 0028  
                   __size_of_WriteUSART 0014                       readEEPROM@address 0019  
               __end_of_ECANSendMessage 4026                    _uart_receiveOverruns 011C  
              _receivePrintEventVerbose 4A20                              _vscpNodeId 00DC  
                         ?__CANIDToRegs 0019                    __end_of__RegsToCANID 3ABC  
                           ?_readEEPROM 0019                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 032D  
                     doModeVerbose@preg 0304                          _init_crc8$2025 0019  
                ??_readRegisterExtended 00A5                          ?_doModeVerbose 0001  
                        ?_sendVSCPFrame 0083                    __size_of_writeEEPROM 0026  
                        __end_of___wmul 1E8E                     __size_of_doModeVscp 0178  
                           _WriteTimer0 1D0E                          __end_of_memcpy 20F6  
                        __end_of_memset 1E0E       __size_of_sendVSCPDriverErrorFrame 00BE  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                             ___DCDelay 00E0                          __end_of_strcat 234A  
                        __end_of_strchr 2458                          __end_of_strcpy 1E3C  
                        __end_of_strlen 1FBC                doModeVerbose@filter_type 030F  
                        __end_of_strtok 2A80                          __end_of_strspn 217E  
                           __end_ofPL10 6C2C                             __end_ofPL20 599E  
                           __end_ofPL12 5968                             __end_ofPL30 6C5A  
                           __end_ofPL22 37DE                             __end_ofPL14 3C3C  
                           __end_ofPL40 6C94                             __end_ofPL32 39B8  
                           __end_ofPL24 3264                             __end_ofPL16 6C46  
                           __end_ofPL50 59CE                             __end_ofPL42 6CAE  
                           __end_ofPL34 6C6C                             __end_ofPL26 2FF6  
                           __end_ofPL18 5978                             __end_ofPL60 59DC  
                           __end_ofPL52 39DA                             __end_ofPL44 59B8  
                           __end_ofPL36 6C7A                             __end_ofPL28 36E0  
                           __end_ofPL70 35F2                             __end_ofPL62 3ADE  
                           __end_ofPL54 6CC6                             __end_ofPL46 326E  
                           __end_ofPL38 3ACA                             __end_ofPL80 52CA  
                           __end_ofPL72 39EE                             __end_ofPL64 59F0  
                           __end_ofPL56 6CDC                             __end_ofPL48 39C8  
                           __end_ofPL90 20B6                             __end_ofPL82 5A0C  
                           __end_ofPL74 38E4                             __end_ofPL66 3AF0  
                           __end_ofPL58 29EE                             __end_ofPL92 3EB4  
                           __end_ofPL84 1E9E                             __end_ofPL76 3B16  
                           __end_ofPL68 3B04                             __end_ofPL94 39F8  
                           __end_ofPL86 4638                             __end_ofPL78 5A02  
                           __end_ofPL96 5A16                             __end_ofPL88 4A20  
                   start_initialization 234A                               _ReadUSART 1D62  
                       findNodes@nFound 00AF                   doModeVerbose@reg_1116 0322  
                 doModeVerbose@filterno 0327                 _receiveVSCPModeCanalMsg 3348  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 008F  
                          ??_OpenTimer0 0019  sendVSCPDriverCommandReply@cmdReplyCode 0029  
                             _Interrupt 0018                          ??__CANIDToRegs 0020  
            readRegisterExtended@nodeid 00A9                               _OpenUSART 23A0  
                   sendVSCPFrame@nodeid 0086                         ___llmod@divisor 002A  
                 __size_of_readRegister 00A8                         ___llmod@counter 002E  
                 ECANReceiveMessage@ptr 002A                     __size_of_fifo_write 00F8  
                 __size_of_init_app_ram 004E                          _findNodes$1410 00AD  
              __end_of__ECANPointBuffer 2756                       __CANIDToRegs@type 001F  
                            init_crc8@i 001E                              init_crc8@j 001B  
                           _getCANFrame 1E3C                                ??___wmul 001D  
                     ?_hexStringToBytes 001D                             _doModeSLCAN 4F30  
            __end_of_ECANReceiveMessage 4A12                                ??_memcpy 001F  
                   readRegister@timeout 009F                                ??_memset 001F  
                 sendVSCPDriverNack@crc 0028                doModeVerbose@mask_nodeid 0313  
                 __end_ofi1_WriteTimer0 1CFC                      ??_hexStringToBytes 0022  
                              ??_strcat 001D                                ??_strchr 001D  
                              ??_strcpy 001D                                ??_strlen 001B  
                    __end_of_OpenTimer0 1D9E                                ??_strtok 0029  
                              ??_strspn 0023                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 033D                             __pbssCOMRAM 0030  
                            ?_ReadUSART 0001                         __IT_SAVE_STATUS 0038  
              ??_receivePrintEventCANAL 002F                           __pcstackBANK0 0060  
                         __pcstackBANK3 0300                     __end_of__stringdata 7CFE  
              ??_receivePrintEventSLCAN 006D                            _readRegister 2C4E  
                 __size_of_sendCANFrame 003A                            _isdigit$2846 001A  
           ?_sendVSCPDriverCommandReply 0028             sendVSCPDriverErrorFrame@crc 0029  
                      ?_ECANSendMessage 0023                       sendVSCPFrame@size 0088  
                          _init_app_ram 2252                              ?_Interrupt 0001  
                            ?_OpenUSART 0019                             sprintf@_val 0077  
                           sprintf@flag 007C                             sprintf@prec 0073  
                             __pnvBANK0 00E0                           __IT_SAVE_WREG 0039  
                      _ledFunctionality 003C                doModeVerbose@nodeid_1114 030D  
              doModeVerbose@nodeid_1129 032F                            setFilter@val 0019  
                      ___lwdiv@dividend 0019                         ??_doModeVerbose 00B2  
         __size_of_ECANSetOperationMode 0018                         _printStatistics 431E  
                          ??_WriteUSART 0019                         ??_sendVSCPFrame 008A  
                        _ECANInitialize 27CE                       _sendVSCPDriverAck 2CF6  
                         __pmediumconst 6CDC               receivePrintEventCANAL@dlc 006B  
             receivePrintEventCANAL@crc 0070                                ?___lldiv 0019  
                              ?_calcCRC 0025                                ?___llmod 0026  
                             _findNodes 3426                                ?___lwdiv 0019  
                              ?___lwmod 0019                               _fifo_init 2076  
                             _fifo_read 2F28                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0094                             __pintcodelo 0018  
                          _sendCANFrame 1F46                       WriteTimer0@timer0 0019  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0083                     ??_sendVSCPDriverAck 0028  
                     __size_of_strnicmp 0062                         printGUID@nodeid 00A7  
                   _sendEscapedUartData 258A                               _hexpowers 6D34  
                      ___lwdiv@quotient 001E                               _init_crc8 251C  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0308  
                              ?_sprintf 0060                                ?_strichr 001A  
                           _cntRxFrames 010C                            ??_doModeVscp 002F  
                              ?_strcspn 001F                                ?_toupper 0001  
                              ?_stristr 0026                      __end_of_WriteUSART 1D34  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                             _inputFifo 01C4                          ___wmul@product 001D  
                sendVSCPFrame@vscpclass 0083                               _setFilter 4638  
                           strnicmp@len 0021                               _octpowers 6CDC  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 00B0  
                __end_of_ECANInitialize 2850               __end_of_sendVSCPDriverAck 2DAC  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                              i1u748_25 3B32                                i1u749_25 3B42  
                      ECANSendMessage@i 0079                        ECANSendMessage@j 0074  
                  ?_sendEscapedUartData 0025                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0029  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 0027                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 37DE  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00AC                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 419E                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 25F8  
                            ?_fifo_init 0019                              ?_fifo_read 0019  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 419E  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 39A4  
                             _putsUSART 22A0                             __stringdata 6D54  
                     ___wmul@multiplier 0019               receivePrintEventSLCAN@dlc 0070  
                          __RegsToCANID 39F8                               _vscpClass 00DA  
               ??_writeRegisterExtended 00A5                            ??_fifo_write 0008  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 007E  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0063  
                         ??_printBinary 001A         __size_of_receivePrintEventCANAL 013A  
                      doModeVerbose@reg 032E                           ??_printErrors 002F  
                            ?_init_crc8 0001         __size_of_receivePrintEventSLCAN 0184  
                             _rwtimeout 00D9               writeRegisterExtended@page 009E  
                              ___DCByte 003A                             ??_Interrupt 0011  
               __end_of_printStatistics 44A6                             ??_OpenUSART 001B  
          writeRegisterExtended@timeout 00A1                            ??_readEEPROM 001B  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0019  
                       OpenUSART@config 001B                          findNodes@value 00B0  
          __end_of_vscp_restoreDefaults 1CEA                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0082         __end_of_receiveVSCPModeCanalMsg 3426  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 0024                   ??_sendEscapedUartData 0027  
                              __Lrparam 0000                        __CANIDToRegs@val 001B  
                    __end_of_fifo_write 3C0E                        __CANIDToRegs@ptr 0019  
           receiveVSCPModeCanalMsg@data 0097                              ?_printGUID 0001  
                           doModeVscp@c 002F                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0019  
                      ??_nibbleFromChar 0019                        __size_of___lldiv 0076  
                      __size_of_calcCRC 0038                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                      getCANFrame@flags 0061                            ?_WriteTimer0 0019  
                      getCANFrame@pdata 002D                              ?_putsUSART 001A  
                       fifo_read@nbytes 001D                              sprintf@idx 006B  
                    __end_of_readEEPROM 1D0E                   hexStringToBytes@inhex 0020  
                              calcCRC@j 0028                                calcCRC@p 0025  
                            strcat@from 001B                        __size_of_isdigit 001E  
                       ___lwdiv@divisor 001B                         ___lwdiv@counter 001D  
                              __ptext10 3348                                __ptext11 20B6  
                              __ptext20 4638                                __ptext12 2CF6  
                              __ptext21 326E                                __ptext13 3196  
                              __ptext30 2C4E                                __ptext22 21C2  
                              __ptext14 1F0E                                __ptext31 2DAC  
                              __ptext23 30C6                                __ptext15 3D6C  
                              __ptext40 29EE                                __ptext32 1F46  
                              __ptext24 1E0E                                __ptext16 258A  
                              __ptext41 217E                                __ptext33 3EB4  
                              __ptext25 3426                                __ptext17 1ED6  
                              __ptext50 2850                                __ptext42 213A  
                              __ptext34 38E4                                __ptext26 2A80  
                              __ptext18 251C                                __ptext51 1E3C  
                              __ptext43 23FC                                __ptext35 1DE2  
                              __ptext27 37DE                                __ptext19 5A16  
                              __ptext60 2F28                                __ptext52 4814  
                              __ptext44 2756                                __ptext36 419E  
                              __ptext28 2FF6                                __ptext61 295E  
                              __ptext53 39F8                                __ptext45 1FFA  
                              __ptext37 4C96                                __ptext29 22F4  
                              __ptext70 27CE                                __ptext62 1E9E  
                              __ptext54 26E0                                __ptext46 24BA  
                              __ptext38 431E                                __ptext71 1D4A  
                              __ptext63 2BAE                                __ptext55 52CA  
                              __ptext47 1D34                                __ptext39 36E0  
                              __ptext80 2076                                __ptext72 1D80  
                              __ptext64 1FBC                                __ptext56 1E6C  
                              __ptext48 1F80                                __ptext73 23A0  
                              __ptext65 2208                                __ptext57 2458  
                              __ptext49 4A20                                __ptext82 1CEA  
                              __ptext74 1D0E                                __ptext66 25F8  
                              __ptext58 266A                                __ptext83 3B16  
                              __ptext75 1CE2                                __ptext67 22A0  
                              __ptext59 1D9E                                __ptext84 1D62  
                              __ptext76 28D4                                __ptext68 1D20  
                              __ptext77 1DBC                                __ptext69 20F6  
                              __ptext78 2252                                __ptext79 1CFC  
                        printMDF@nodeid 00A7                           ?_getVSCPFrame 0062  
                            strichr@chr 001C                        __size_of_sprintf 0680  
                            strichr@ptr 001A                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 001B  
                        printGUID@value 00AB                     __end_of_printBinary 2208  
                         __size_of_crc8 0038                           __size_of_atoi 00F0  
                         __size_of_main 0130                           __size_of_init 0044  
                         __size_of_itoa 0038                     __end_of_printErrors 4F30  
                         __size_of_utoa 00A0                              strnicmp@s1 001D  
                            strnicmp@s2 001F                             _inputBuffer 033D  
            __size_of_sendVSCPDriverAck 00B6                  _receivePrintEventCANAL 3D6C  
                         ??_writeEEPROM 001C                _printNodeFirmwareVersion 2FF6  
                   ECANSendMessage@data 0027                ECANSendMessage@tempBSEL0 0075  
                              _printMDF 2A80                               printMDF@i 00AB  
                _receivePrintEventSLCAN 44A6                               printMDF@p 00A9  
                          ?_getCANFrame 002C                     ECANSendMessage@mode 0072  
                   ECANSendMessage@temp 0078                       ?__ECANPointBuffer 0019  
                              atoi@sign 0023                             ??_findNodes 0030  
                          ?_doModeSLCAN 0001                             ??_fifo_init 001F  
                           ??_fifo_read 001F                                _vscpData 0040  
         __size_of_readRegisterExtended 00D0                                main@argc 00C6  
                              main@argv 00C8                                _vscpSize 00DE  
                    ??__ECANPointBuffer 001C                                _vscpType 00DF  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 0028  
                       doModeVerbose@id 0300                         doModeVerbose@rv 0320  
                              _strnicmp 24BA                        init_app_eeprom@i 001C  
           writeRegisterExtended@nodeid 00A9                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0019                     ECANReceiveMessage@i 0027  
                              memcpy@d1 0019                                memcpy@s1 001B  
             receivePrintEventVerbose@i 008F                                itoa@base 002D  
                              isdigit@c 001B                      _ECANReceiveMessage 4814  
                              memset@p1 0019                             ??_init_crc8 0019  
                             ultoa@base 0066                          ??_getVSCPFrame 0067  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 002C  
                              intlevel1 0000                               sprintf@ap 0072  
                             sprintf@sp 0060                    hexStringToBytes@size 001F  
                             strchr@chr 001B                        ?_printStatistics 0001  
                      ___lwmod@dividend 0019                               strchr@ptr 0019  
                   ?_ECANReceiveMessage 0020                        ___lldiv@dividend 0019  
                           ??_setFilter 001D                           printMDF@value 00A8  
                             strcspn@s1 001F                               strcspn@s2 0021  
               ECANSendMessage@msgFlags 002A                              _OSCCONbits 000FD3  
                             strnicmp@r 0025                               stristr@s1 0026  
                             stristr@s2 0028                      ECANSendMessage@ptr 007A  
                     ??_init_app_eeprom 001C              receivePrintEventCANAL@data 0062  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 0030  
                        readEEPROM@data 001B                             ??_printHelp 001E  
                           ??_printMode 001E                _sendVSCPDriverErrorFrame 3196  
                ECANSendMessage@dataLen 0029                     __end_of_writeEEPROM 1DE2  
                   __ECANPointBuffer@pt 001D                    ??_ECANReceiveMessage 0024  
                           ??_putsUSART 001C                                utoa@base 0024  
                              ultoa@buf 0060                                ultoa@val 0062  
                         fifo_init@size 001D                                sprintf@c 007B  
                              sprintf@f 0062                     hexStringToBytes@buf 001D  
                              strcat@cp 001D                     hexStringToBytes@len 0025  
                        _doModeVscpNode 1CE0                                strcat@to 0019  
      __end_of_receivePrintEventVerbose 4C96                  ECANSendMessage@buffers 0073  
                      ___lldiv@quotient 0021                         ___lwmod@divisor 001B  
          __end_of_ECANSetOperationMode 1D62                    _vscp_restoreDefaults 1CE2  
                          printGUID@buf 00A8                                strcpy@cp 001D  
                              strlen@cp 001B                                strcpy@to 0019  
                       ___lwmod@counter 001D                                strcspn@i 0023  
                              toupper@c 0019                             _printBinary 21C2  
                              strtok@s1 0025                                strtok@s2 0027  
                              strspn@s1 001F                                strspn@s2 0021  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0032  
                ECANSendMessage@tempPtr 0076                             _printErrors 4C96  
                          fifo_init@buf 001B                            fifo_read@buf 001B  
         sendVSCPDriverCommandReply@crc 002A                            __CANIDToRegs 38E4  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0034  
             readRegisterExtended@value 00A3                __size_of_ECANSendMessage 0172  
