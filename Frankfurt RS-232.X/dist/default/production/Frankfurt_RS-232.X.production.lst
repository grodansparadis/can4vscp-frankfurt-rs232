

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Fri Feb 13 15:03:25 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	text61,global,reloc=2,class=CODE,delta=1
    77                           	psect	text62,global,reloc=2,class=CODE,delta=1
    78                           	psect	text63,global,reloc=2,class=CODE,delta=1
    79                           	psect	text64,global,reloc=2,class=CODE,delta=1
    80                           	psect	text65,global,reloc=2,class=CODE,delta=1
    81                           	psect	text66,global,reloc=2,class=CODE,delta=1
    82                           	psect	text67,global,reloc=2,class=CODE,delta=1
    83                           	psect	text68,global,reloc=2,class=CODE,delta=1
    84                           	psect	text69,global,reloc=2,class=CODE,delta=1
    85                           	psect	text70,global,reloc=2,class=CODE,delta=1
    86                           	psect	text71,global,reloc=2,class=CODE,delta=1
    87                           	psect	text72,global,reloc=2,class=CODE,delta=1
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	text74,global,reloc=2,class=CODE,delta=1
    90                           	psect	text75,global,reloc=2,class=CODE,delta=1
    91                           	psect	text76,global,reloc=2,class=CODE,delta=1
    92                           	psect	text77,global,reloc=2,class=CODE,delta=1
    93                           	psect	text78,global,reloc=2,class=CODE,delta=1
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	text80,global,reloc=2,class=CODE,delta=1
    96                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    97                           	psect	text82,global,reloc=2,class=CODE,delta=1
    98                           	psect	text83,global,reloc=2,class=CODE,delta=1
    99                           	psect	text84,global,reloc=2,class=CODE,delta=1
   100                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   101                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   102                           	psect	pa_nodes,global,class=CODE,delta=1
   103  0000                     tblptru	equ	0xFF8
   104                           tblptrh	equ	0xFF7
   105                           tblptrl	equ	0xFF6
   106                           tablat	equ	0xFF5
   107                           prodh	equ	0xFF4
   108                           prodl	equ	0xFF3
   109                           intcon	equ	0xFF2
   110                           indf0	equ	0xFEF
   111                           fsr0h	equ	0xFEA
   112                           fsr0l	equ	0xFE9
   113                           wreg	equ	0xFE8
   114                           indf1	equ	0xFE7
   115                           postinc1	equ	0xFE6
   116                           postdec1	equ	0xFE5
   117                           fsr1h	equ	0xFE2
   118                           fsr1l	equ	0xFE1
   119                           indf2	equ	0xFDF
   120                           postinc2	equ	0xFDE
   121                           postdec2	equ	0xFDD
   122                           plusw2	equ	0xFDB
   123                           fsr2h	equ	0xFDA
   124                           fsr2l	equ	0xFD9
   125                           status	equ	0xFD8
   126                           
   127                           	psect	mediumconst
   128  006FDC                     __pmediumconst:
   129                           	opt stack 0
   130  006FDC                     _octpowers:
   131                           	opt stack 0
   132  006FDC  0001               	dw	1
   133  006FDE  0000               	dw	0
   134  006FE0  0008               	dw	8
   135  006FE2  0000               	dw	0
   136  006FE4  0040               	dw	64
   137  006FE6  0000               	dw	0
   138  006FE8  0200               	dw	512
   139  006FEA  0000               	dw	0
   140  006FEC  1000               	dw	4096
   141  006FEE  0000               	dw	0
   142  006FF0  8000               	dw	32768
   143  006FF2  0000               	dw	0
   144  006FF4  0000               	dw	0
   145  006FF6  0004               	dw	4
   146  006FF8  0000               	dw	0
   147  006FFA  0020               	dw	32
   148  006FFC  0000               	dw	0
   149  006FFE  0100               	dw	256
   150  007000  0000               	dw	0
   151  007002  0800               	dw	2048
   152  007004  0000               	dw	0
   153  007006  4000               	dw	16384
   154  007008  0000               	dw	0
   155  00700A  0000               	dw	0
   156  00700C                     __end_of_octpowers:
   157                           	opt stack 0
   158  00700C                     _dpowers:
   159                           	opt stack 0
   160  00700C  0001               	dw	1
   161  00700E  0000               	dw	0
   162  007010  000A               	dw	10
   163  007012  0000               	dw	0
   164  007014  0064               	dw	100
   165  007016  0000               	dw	0
   166  007018  03E8               	dw	1000
   167  00701A  0000               	dw	0
   168  00701C  2710               	dw	10000
   169  00701E  0000               	dw	0
   170  007020  86A0               	dw	34464
   171  007022  0001               	dw	1
   172  007024  4240               	dw	16960
   173  007026  000F               	dw	15
   174  007028  9680               	dw	38528
   175  00702A  0098               	dw	152
   176  00702C  E100               	dw	57600
   177  00702E  05F5               	dw	1525
   178  007030  CA00               	dw	51712
   179  007032  3B9A               	dw	15258
   180  007034                     __end_of_dpowers:
   181                           	opt stack 0
   182  007034                     _hexpowers:
   183                           	opt stack 0
   184  007034  0001               	dw	1
   185  007036  0000               	dw	0
   186  007038  0010               	dw	16
   187  00703A  0000               	dw	0
   188  00703C  0100               	dw	256
   189  00703E  0000               	dw	0
   190  007040  1000               	dw	4096
   191  007042  0000               	dw	0
   192  007044  0000               	dw	0
   193  007046  0001               	dw	1
   194  007048  0000               	dw	0
   195  00704A  0010               	dw	16
   196  00704C  0000               	dw	0
   197  00704E  0100               	dw	256
   198  007050  0000               	dw	0
   199  007052  1000               	dw	4096
   200  007054                     __end_of_hexpowers:
   201                           	opt stack 0
   202  0000                     _BRGCON1	set	3952
   203  0000                     _BRGCON2	set	3953
   204  0000                     _BRGCON3	set	3954
   205  0000                     _BSEL0	set	3576
   206  0000                     _CANCON	set	3951
   207  0000                     _CIOCON	set	3955
   208  0000                     _COMSTATbits	set	3956
   209  0000                     _ECANCON	set	3959
   210  0000                     _EEADR	set	4009
   211  0000                     _EECON1bits	set	4006
   212  0000                     _EECON2	set	4007
   213  0000                     _EEDATA	set	4008
   214  0000                     _INTCONbits	set	4082
   215  0000                     _MSEL0	set	3568
   216  0000                     _MSEL1	set	3569
   217  0000                     _MSEL2	set	3570
   218  0000                     _OSCCONbits	set	4051
   219  0000                     _OSCTUNEbits	set	3995
   220  0000                     _PIE1bits	set	3997
   221  0000                     _PIR1bits	set	3998
   222  0000                     _PIR2bits	set	4001
   223  0000                     _RCREG	set	4014
   224  0000                     _RCSTA	set	4011
   225  0000                     _RCSTAbits	set	4011
   226  0000                     _RXB1CONbits	set	3920
   227  0000                     _RXERRCNT	set	3957
   228  0000                     _RXF0EIDH	set	3842
   229  0000                     _RXF0EIDL	set	3843
   230  0000                     _RXF0SIDH	set	3840
   231  0000                     _RXF0SIDL	set	3841
   232  0000                     _RXF10EIDH	set	3446
   233  0000                     _RXF10EIDL	set	3447
   234  0000                     _RXF10SIDH	set	3444
   235  0000                     _RXF10SIDL	set	3445
   236  0000                     _RXF11EIDH	set	3450
   237  0000                     _RXF11EIDL	set	3451
   238  0000                     _RXF11SIDH	set	3448
   239  0000                     _RXF11SIDL	set	3449
   240  0000                     _RXF12EIDH	set	3458
   241  0000                     _RXF12EIDL	set	3459
   242  0000                     _RXF12SIDH	set	3456
   243  0000                     _RXF12SIDL	set	3457
   244  0000                     _RXF13EIDH	set	3462
   245  0000                     _RXF13EIDL	set	3463
   246  0000                     _RXF13SIDH	set	3460
   247  0000                     _RXF13SIDL	set	3461
   248  0000                     _RXF14EIDH	set	3466
   249  0000                     _RXF14EIDL	set	3467
   250  0000                     _RXF14SIDH	set	3464
   251  0000                     _RXF14SIDL	set	3465
   252  0000                     _RXF15EIDH	set	3474
   253  0000                     _RXF15EIDL	set	3475
   254  0000                     _RXF15SIDH	set	3472
   255  0000                     _RXF15SIDL	set	3473
   256  0000                     _RXF1EIDH	set	3846
   257  0000                     _RXF1EIDL	set	3847
   258  0000                     _RXF1SIDH	set	3844
   259  0000                     _RXF1SIDL	set	3845
   260  0000                     _RXF2EIDH	set	3850
   261  0000                     _RXF2EIDL	set	3851
   262  0000                     _RXF2SIDH	set	3848
   263  0000                     _RXF2SIDL	set	3849
   264  0000                     _RXF3EIDH	set	3854
   265  0000                     _RXF3EIDL	set	3855
   266  0000                     _RXF3SIDH	set	3852
   267  0000                     _RXF3SIDL	set	3853
   268  0000                     _RXF4EIDH	set	3858
   269  0000                     _RXF4EIDL	set	3859
   270  0000                     _RXF4SIDH	set	3856
   271  0000                     _RXF4SIDL	set	3857
   272  0000                     _RXF5EIDH	set	3862
   273  0000                     _RXF5EIDL	set	3863
   274  0000                     _RXF5SIDH	set	3860
   275  0000                     _RXF5SIDL	set	3861
   276  0000                     _RXF6EIDH	set	3426
   277  0000                     _RXF6EIDL	set	3427
   278  0000                     _RXF6SIDH	set	3424
   279  0000                     _RXF6SIDL	set	3425
   280  0000                     _RXF7EIDH	set	3430
   281  0000                     _RXF7EIDL	set	3431
   282  0000                     _RXF7SIDH	set	3428
   283  0000                     _RXF7SIDL	set	3429
   284  0000                     _RXF8EIDH	set	3434
   285  0000                     _RXF8EIDL	set	3435
   286  0000                     _RXF8SIDH	set	3432
   287  0000                     _RXF8SIDL	set	3433
   288  0000                     _RXF9EIDH	set	3442
   289  0000                     _RXF9EIDL	set	3443
   290  0000                     _RXF9SIDH	set	3440
   291  0000                     _RXF9SIDL	set	3441
   292  0000                     _RXFBCON0	set	3552
   293  0000                     _RXFBCON1	set	3553
   294  0000                     _RXFBCON2	set	3554
   295  0000                     _RXFBCON3	set	3555
   296  0000                     _RXFBCON4	set	3556
   297  0000                     _RXFBCON5	set	3557
   298  0000                     _RXFBCON6	set	3558
   299  0000                     _RXFBCON7	set	3559
   300  0000                     _RXFCON0	set	3540
   301  0000                     _RXFCON1	set	3541
   302  0000                     _RXM0EIDH	set	3866
   303  0000                     _RXM0EIDL	set	3867
   304  0000                     _RXM0SIDL	set	3865
   305  0000                     _RXM1EIDH	set	3870
   306  0000                     _RXM1EIDL	set	3871
   307  0000                     _RXM1SIDL	set	3869
   308  0000                     _SPBRG	set	4015
   309  0000                     _SPBRGH	set	4016
   310  0000                     _T0CON	set	4053
   311  0000                     _T0CONbits	set	4053
   312  0000                     _TMR0H	set	4055
   313  0000                     _TMR0L	set	4054
   314  0000                     _TRISBbits	set	3987
   315  0000                     _TRISCbits	set	3988
   316  0000                     _TXERRCNT	set	3958
   317  0000                     _TXREG	set	4013
   318  0000                     _TXSTA	set	4012
   319  0000                     _TXSTAbits	set	4012
   320  0000                     _B0RXFUL	set	28935
   321  0000                     _B0TXEN	set	28610
   322  0000                     _B1RXFUL	set	29063
   323  0000                     _B1TXEN	set	28611
   324  0000                     _B2RXFUL	set	29191
   325  0000                     _B2TXEN	set	28612
   326  0000                     _B3RXFUL	set	29319
   327  0000                     _B3TXEN	set	28613
   328  0000                     _B4RXFUL	set	29447
   329  0000                     _B4TXEN	set	28614
   330  0000                     _B5RXFUL	set	29575
   331  0000                     _B5TXEN	set	28615
   332  0000                     _FIFOEMPTY	set	31655
   333  0000                     _IRXIF	set	32039
   334  0000                     _LATC1	set	31833
   335  0000                     _MDSEL0	set	31678
   336  0000                     _MDSEL1	set	31679
   337  0000                     _PEIE	set	32662
   338  0000                     _RCIE	set	31981
   339  0000                     _RCIF	set	31989
   340  0000                     _RCIP	set	31997
   341  0000                     _RXB0FILHIT0	set	31488
   342  0000                     _RXB0FUL	set	31495
   343  0000                     _RXB0IF	set	32032
   344  0000                     _RXB0OVFL	set	31655
   345  0000                     _RXB1IF	set	32033
   346  0000                     _RXB1OVFL	set	31654
   347  0000                     _RXM0EXIDM	set	30923
   348  0000                     _RXM1EXIDEN	set	30955
   349  0000                     _B0CON	set	3616
   350  0000                     _B1CON	set	3632
   351  0000                     _B2CON	set	3648
   352  0000                     _B3CON	set	3664
   353  0000                     _B4CON	set	3680
   354  0000                     _B5CON	set	3696
   355  0000                     _RXB0CON	set	3936
   356  0000                     _RXB1CON	set	3920
   357  0000                     _RXM0SIDH	set	3864
   358  0000                     _RXM1SIDH	set	3868
   359  0000                     _TXB0CON	set	3904
   360  0000                     _TXB1CON	set	3888
   361  0000                     _TXB2CON	set	3872
   362  007054                     __stringdata:
   363                           	opt stack 0
   364  007054                     STR_218:
   365  007054  20                 	db	32
   366  007055  20                 	db	32
   367  007056  20                 	db	32
   368  007057  20                 	db	32
   369  007058  20                 	db	32
   370  007059  20                 	db	32
   371  00705A  20                 	db	32
   372  00705B  20                 	db	32
   373  00705C  20                 	db	32
   374  00705D  46                 	db	70	;'F'
   375  00705E  6F                 	db	111	;'o'
   376  00705F  72                 	db	114	;'r'
   377  007060  6D                 	db	109	;'m'
   378  007061  61                 	db	97	;'a'
   379  007062  74                 	db	116	;'t'
   380  007063  3A                 	db	58	;':'
   381  007064  20                 	db	32
   382  007065  66                 	db	102	;'f'
   383  007066  69                 	db	105	;'i'
   384  007067  6C                 	db	108	;'l'
   385  007068  74                 	db	116	;'t'
   386  007069  65                 	db	101	;'e'
   387  00706A  72                 	db	114	;'r'
   388  00706B  20                 	db	32
   389  00706C  66                 	db	102	;'f'
   390  00706D  69                 	db	105	;'i'
   391  00706E  6C                 	db	108	;'l'
   392  00706F  74                 	db	116	;'t'
   393  007070  65                 	db	101	;'e'
   394  007071  72                 	db	114	;'r'
   395  007072  6E                 	db	110	;'n'
   396  007073  6F                 	db	111	;'o'
   397  007074  2C                 	db	44
   398  007075  70                 	db	112	;'p'
   399  007076  72                 	db	114	;'r'
   400  007077  69                 	db	105	;'i'
   401  007078  6F                 	db	111	;'o'
   402  007079  2C                 	db	44
   403  00707A  63                 	db	99	;'c'
   404  00707B  6C                 	db	108	;'l'
   405  00707C  61                 	db	97	;'a'
   406  00707D  73                 	db	115	;'s'
   407  00707E  73                 	db	115	;'s'
   408  00707F  2C                 	db	44
   409  007080  74                 	db	116	;'t'
   410  007081  79                 	db	121	;'y'
   411  007082  70                 	db	112	;'p'
   412  007083  65                 	db	101	;'e'
   413  007084  2C                 	db	44
   414  007085  6E                 	db	110	;'n'
   415  007086  6F                 	db	111	;'o'
   416  007087  64                 	db	100	;'d'
   417  007088  65                 	db	101	;'e'
   418  007089  69                 	db	105	;'i'
   419  00708A  64                 	db	100	;'d'
   420  00708B  20                 	db	32
   421  00708C  20                 	db	32
   422  00708D  28                 	db	40
   423  00708E  66                 	db	102	;'f'
   424  00708F  69                 	db	105	;'i'
   425  007090  6C                 	db	108	;'l'
   426  007091  74                 	db	116	;'t'
   427  007092  65                 	db	101	;'e'
   428  007093  72                 	db	114	;'r'
   429  007094  6E                 	db	110	;'n'
   430  007095  6F                 	db	111	;'o'
   431  007096  20                 	db	32
   432  007097  3D                 	db	61	;'='
   433  007098  20                 	db	32
   434  007099  30                 	db	48	;'0'
   435  00709A  2D                 	db	45
   436  00709B  31                 	db	49	;'1'
   437  00709C  35                 	db	53	;'5'
   438  00709D  29                 	db	41
   439  00709E  2E                 	db	46
   440  00709F  0D                 	db	13
   441  0070A0  0A                 	db	10
   442  0070A1  00                 	db	0
   443  0070A2                     STR_216:
   444  0070A2  49                 	db	73	;'I'
   445  0070A3  4E                 	db	78	;'N'
   446  0070A4  46                 	db	70	;'F'
   447  0070A5  4F                 	db	79	;'O'
   448  0070A6  20                 	db	32
   449  0070A7  2D                 	db	45
   450  0070A8  20                 	db	32
   451  0070A9  47                 	db	71	;'G'
   452  0070AA  65                 	db	101	;'e'
   453  0070AB  74                 	db	116	;'t'
   454  0070AC  20                 	db	32
   455  0070AD  69                 	db	105	;'i'
   456  0070AE  6E                 	db	110	;'n'
   457  0070AF  66                 	db	102	;'f'
   458  0070B0  6F                 	db	111	;'o'
   459  0070B1  20                 	db	32
   460  0070B2  61                 	db	97	;'a'
   461  0070B3  62                 	db	98	;'b'
   462  0070B4  6F                 	db	111	;'o'
   463  0070B5  75                 	db	117	;'u'
   464  0070B6  74                 	db	116	;'t'
   465  0070B7  20                 	db	32
   466  0070B8  61                 	db	97	;'a'
   467  0070B9  6E                 	db	110	;'n'
   468  0070BA  20                 	db	32
   469  0070BB  65                 	db	101	;'e'
   470  0070BC  78                 	db	120	;'x'
   471  0070BD  69                 	db	105	;'i'
   472  0070BE  73                 	db	115	;'s'
   473  0070BF  74                 	db	116	;'t'
   474  0070C0  65                 	db	101	;'e'
   475  0070C1  6E                 	db	110	;'n'
   476  0070C2  74                 	db	116	;'t'
   477  0070C3  20                 	db	32
   478  0070C4  6E                 	db	110	;'n'
   479  0070C5  6F                 	db	111	;'o'
   480  0070C6  64                 	db	100	;'d'
   481  0070C7  65                 	db	101	;'e'
   482  0070C8  20                 	db	32
   483  0070C9  6F                 	db	111	;'o'
   484  0070CA  6E                 	db	110	;'n'
   485  0070CB  20                 	db	32
   486  0070CC  74                 	db	116	;'t'
   487  0070CD  68                 	db	104	;'h'
   488  0070CE  65                 	db	101	;'e'
   489  0070CF  20                 	db	32
   490  0070D0  62                 	db	98	;'b'
   491  0070D1  75                 	db	117	;'u'
   492  0070D2  73                 	db	115	;'s'
   493  0070D3  20                 	db	32
   494  0070D4  28                 	db	40
   495  0070D5  46                 	db	70	;'F'
   496  0070D6  6F                 	db	111	;'o'
   497  0070D7  72                 	db	114	;'r'
   498  0070D8  6D                 	db	109	;'m'
   499  0070D9  61                 	db	97	;'a'
   500  0070DA  74                 	db	116	;'t'
   501  0070DB  3A                 	db	58	;':'
   502  0070DC  20                 	db	32
   503  0070DD  69                 	db	105	;'i'
   504  0070DE  6E                 	db	110	;'n'
   505  0070DF  66                 	db	102	;'f'
   506  0070E0  6F                 	db	111	;'o'
   507  0070E1  20                 	db	32
   508  0070E2  6E                 	db	110	;'n'
   509  0070E3  69                 	db	105	;'i'
   510  0070E4  63                 	db	99	;'c'
   511  0070E5  6B                 	db	107	;'k'
   512  0070E6  6E                 	db	110	;'n'
   513  0070E7  61                 	db	97	;'a'
   514  0070E8  6D                 	db	109	;'m'
   515  0070E9  65                 	db	101	;'e'
   516  0070EA  29                 	db	41
   517  0070EB  2E                 	db	46
   518  0070EC  0D                 	db	13
   519  0070ED  0A                 	db	10
   520  0070EE  00                 	db	0
   521  0070EF                     STR_220:
   522  0070EF  20                 	db	32
   523  0070F0  20                 	db	32
   524  0070F1  20                 	db	32
   525  0070F2  20                 	db	32
   526  0070F3  20                 	db	32
   527  0070F4  20                 	db	32
   528  0070F5  20                 	db	32
   529  0070F6  46                 	db	70	;'F'
   530  0070F7  6F                 	db	111	;'o'
   531  0070F8  72                 	db	114	;'r'
   532  0070F9  6D                 	db	109	;'m'
   533  0070FA  61                 	db	97	;'a'
   534  0070FB  74                 	db	116	;'t'
   535  0070FC  3A                 	db	58	;':'
   536  0070FD  20                 	db	32
   537  0070FE  6D                 	db	109	;'m'
   538  0070FF  61                 	db	97	;'a'
   539  007100  73                 	db	115	;'s'
   540  007101  6B                 	db	107	;'k'
   541  007102  20                 	db	32
   542  007103  6D                 	db	109	;'m'
   543  007104  61                 	db	97	;'a'
   544  007105  73                 	db	115	;'s'
   545  007106  6B                 	db	107	;'k'
   546  007107  6E                 	db	110	;'n'
   547  007108  6F                 	db	111	;'o'
   548  007109  2C                 	db	44
   549  00710A  70                 	db	112	;'p'
   550  00710B  72                 	db	114	;'r'
   551  00710C  69                 	db	105	;'i'
   552  00710D  6F                 	db	111	;'o'
   553  00710E  2C                 	db	44
   554  00710F  63                 	db	99	;'c'
   555  007110  6C                 	db	108	;'l'
   556  007111  61                 	db	97	;'a'
   557  007112  73                 	db	115	;'s'
   558  007113  73                 	db	115	;'s'
   559  007114  2C                 	db	44
   560  007115  74                 	db	116	;'t'
   561  007116  79                 	db	121	;'y'
   562  007117  70                 	db	112	;'p'
   563  007118  65                 	db	101	;'e'
   564  007119  2C                 	db	44
   565  00711A  6E                 	db	110	;'n'
   566  00711B  6F                 	db	111	;'o'
   567  00711C  64                 	db	100	;'d'
   568  00711D  65                 	db	101	;'e'
   569  00711E  69                 	db	105	;'i'
   570  00711F  64                 	db	100	;'d'
   571  007120  20                 	db	32
   572  007121  28                 	db	40
   573  007122  6D                 	db	109	;'m'
   574  007123  61                 	db	97	;'a'
   575  007124  73                 	db	115	;'s'
   576  007125  6B                 	db	107	;'k'
   577  007126  6E                 	db	110	;'n'
   578  007127  6F                 	db	111	;'o'
   579  007128  20                 	db	32
   580  007129  3D                 	db	61	;'='
   581  00712A  20                 	db	32
   582  00712B  30                 	db	48	;'0'
   583  00712C  20                 	db	32
   584  00712D  6F                 	db	111	;'o'
   585  00712E  72                 	db	114	;'r'
   586  00712F  20                 	db	32
   587  007130  31                 	db	49	;'1'
   588  007131  29                 	db	41
   589  007132  2E                 	db	46
   590  007133  0D                 	db	13
   591  007134  0A                 	db	10
   592  007135  00                 	db	0
   593  007136                     STR_214:
   594  007136  52                 	db	82	;'R'
   595  007137  52                 	db	82	;'R'
   596  007138  45                 	db	69	;'E'
   597  007139  47                 	db	71	;'G'
   598  00713A  20                 	db	32
   599  00713B  2D                 	db	45
   600  00713C  20                 	db	32
   601  00713D  52                 	db	82	;'R'
   602  00713E  65                 	db	101	;'e'
   603  00713F  61                 	db	97	;'a'
   604  007140  64                 	db	100	;'d'
   605  007141  20                 	db	32
   606  007142  72                 	db	114	;'r'
   607  007143  65                 	db	101	;'e'
   608  007144  67                 	db	103	;'g'
   609  007145  69                 	db	105	;'i'
   610  007146  73                 	db	115	;'s'
   611  007147  74                 	db	116	;'t'
   612  007148  65                 	db	101	;'e'
   613  007149  72                 	db	114	;'r'
   614  00714A  28                 	db	40
   615  00714B  73                 	db	115	;'s'
   616  00714C  29                 	db	41
   617  00714D  20                 	db	32
   618  00714E  6F                 	db	111	;'o'
   619  00714F  66                 	db	102	;'f'
   620  007150  20                 	db	32
   621  007151  6E                 	db	110	;'n'
   622  007152  6F                 	db	111	;'o'
   623  007153  64                 	db	100	;'d'
   624  007154  65                 	db	101	;'e'
   625  007155  20                 	db	32
   626  007156  28                 	db	40
   627  007157  46                 	db	70	;'F'
   628  007158  6F                 	db	111	;'o'
   629  007159  72                 	db	114	;'r'
   630  00715A  6D                 	db	109	;'m'
   631  00715B  61                 	db	97	;'a'
   632  00715C  74                 	db	116	;'t'
   633  00715D  3A                 	db	58	;':'
   634  00715E  20                 	db	32
   635  00715F  72                 	db	114	;'r'
   636  007160  72                 	db	114	;'r'
   637  007161  65                 	db	101	;'e'
   638  007162  67                 	db	103	;'g'
   639  007163  20                 	db	32
   640  007164  5B                 	db	91	;'['
   641  007165  70                 	db	112	;'p'
   642  007166  61                 	db	97	;'a'
   643  007167  67                 	db	103	;'g'
   644  007168  65                 	db	101	;'e'
   645  007169  3A                 	db	58	;':'
   646  00716A  5D                 	db	93	;']'
   647  00716B  72                 	db	114	;'r'
   648  00716C  65                 	db	101	;'e'
   649  00716D  67                 	db	103	;'g'
   650  00716E  20                 	db	32
   651  00716F  5B                 	db	91	;'['
   652  007170  63                 	db	99	;'c'
   653  007171  6F                 	db	111	;'o'
   654  007172  75                 	db	117	;'u'
   655  007173  6E                 	db	110	;'n'
   656  007174  74                 	db	116	;'t'
   657  007175  5D                 	db	93	;']'
   658  007176  29                 	db	41
   659  007177  2E                 	db	46
   660  007178  0D                 	db	13
   661  007179  0A                 	db	10
   662  00717A  00                 	db	0
   663  00717B                     STR_229:
   664  00717B  2D                 	db	45
   665  00717C  2D                 	db	45
   666  00717D  2D                 	db	45
   667  00717E  2D                 	db	45
   668  00717F  2D                 	db	45
   669  007180  2D                 	db	45
   670  007181  2D                 	db	45
   671  007182  2D                 	db	45
   672  007183  2D                 	db	45
   673  007184  2D                 	db	45
   674  007185  2D                 	db	45
   675  007186  2D                 	db	45
   676  007187  2D                 	db	45
   677  007188  2D                 	db	45
   678  007189  2D                 	db	45
   679  00718A  2D                 	db	45
   680  00718B  2D                 	db	45
   681  00718C  2D                 	db	45
   682  00718D  2D                 	db	45
   683  00718E  2D                 	db	45
   684  00718F  2D                 	db	45
   685  007190  2D                 	db	45
   686  007191  2D                 	db	45
   687  007192  2D                 	db	45
   688  007193  2D                 	db	45
   689  007194  2D                 	db	45
   690  007195  2D                 	db	45
   691  007196  2D                 	db	45
   692  007197  2D                 	db	45
   693  007198  2D                 	db	45
   694  007199  2D                 	db	45
   695  00719A  2D                 	db	45
   696  00719B  2D                 	db	45
   697  00719C  2D                 	db	45
   698  00719D  2D                 	db	45
   699  00719E  2D                 	db	45
   700  00719F  2D                 	db	45
   701  0071A0  2D                 	db	45
   702  0071A1  2D                 	db	45
   703  0071A2  2D                 	db	45
   704  0071A3  2D                 	db	45
   705  0071A4  2D                 	db	45
   706  0071A5  2D                 	db	45
   707  0071A6  2D                 	db	45
   708  0071A7  2D                 	db	45
   709  0071A8  2D                 	db	45
   710  0071A9  2D                 	db	45
   711  0071AA  2D                 	db	45
   712  0071AB  2D                 	db	45
   713  0071AC  2D                 	db	45
   714  0071AD  2D                 	db	45
   715  0071AE  2D                 	db	45
   716  0071AF  2D                 	db	45
   717  0071B0  2D                 	db	45
   718  0071B1  2D                 	db	45
   719  0071B2  2D                 	db	45
   720  0071B3  2D                 	db	45
   721  0071B4  2D                 	db	45
   722  0071B5  2D                 	db	45
   723  0071B6  2D                 	db	45
   724  0071B7  2D                 	db	45
   725  0071B8  2D                 	db	45
   726  0071B9  2D                 	db	45
   727  0071BA  2D                 	db	45
   728  0071BB  0D                 	db	13
   729  0071BC  0A                 	db	10
   730  0071BD  00                 	db	0
   731  0071BE                     STR_224:
   732  0071BE  20                 	db	32
   733  0071BF  20                 	db	32
   734  0071C0  20                 	db	32
   735  0071C1  20                 	db	32
   736  0071C2  52                 	db	82	;'R'
   737  0071C3  57                 	db	87	;'W'
   738  0071C4  54                 	db	84	;'T'
   739  0071C5  49                 	db	73	;'I'
   740  0071C6  4D                 	db	77	;'M'
   741  0071C7  45                 	db	69	;'E'
   742  0071C8  4F                 	db	79	;'O'
   743  0071C9  55                 	db	85	;'U'
   744  0071CA  54                 	db	84	;'T'
   745  0071CB  20                 	db	32
   746  0071CC  2D                 	db	45
   747  0071CD  20                 	db	32
   748  0071CE  53                 	db	83	;'S'
   749  0071CF  65                 	db	101	;'e'
   750  0071D0  74                 	db	116	;'t'
   751  0071D1  20                 	db	32
   752  0071D2  72                 	db	114	;'r'
   753  0071D3  65                 	db	101	;'e'
   754  0071D4  67                 	db	103	;'g'
   755  0071D5  69                 	db	105	;'i'
   756  0071D6  73                 	db	115	;'s'
   757  0071D7  74                 	db	116	;'t'
   758  0071D8  65                 	db	101	;'e'
   759  0071D9  72                 	db	114	;'r'
   760  0071DA  20                 	db	32
   761  0071DB  72                 	db	114	;'r'
   762  0071DC  65                 	db	101	;'e'
   763  0071DD  61                 	db	97	;'a'
   764  0071DE  64                 	db	100	;'d'
   765  0071DF  2F                 	db	47
   766  0071E0  77                 	db	119	;'w'
   767  0071E1  72                 	db	114	;'r'
   768  0071E2  69                 	db	105	;'i'
   769  0071E3  74                 	db	116	;'t'
   770  0071E4  65                 	db	101	;'e'
   771  0071E5  20                 	db	32
   772  0071E6  74                 	db	116	;'t'
   773  0071E7  69                 	db	105	;'i'
   774  0071E8  6D                 	db	109	;'m'
   775  0071E9  65                 	db	101	;'e'
   776  0071EA  6F                 	db	111	;'o'
   777  0071EB  75                 	db	117	;'u'
   778  0071EC  74                 	db	116	;'t'
   779  0071ED  2E                 	db	46
   780  0071EE  20                 	db	32
   781  0071EF  44                 	db	68	;'D'
   782  0071F0  65                 	db	101	;'e'
   783  0071F1  66                 	db	102	;'f'
   784  0071F2  61                 	db	97	;'a'
   785  0071F3  75                 	db	117	;'u'
   786  0071F4  6C                 	db	108	;'l'
   787  0071F5  74                 	db	116	;'t'
   788  0071F6  3D                 	db	61	;'='
   789  0071F7  31                 	db	49	;'1'
   790  0071F8  30                 	db	48	;'0'
   791  0071F9  20                 	db	32
   792  0071FA  6D                 	db	109	;'m'
   793  0071FB  73                 	db	115	;'s'
   794  0071FC  20                 	db	32
   795  0071FD  2E                 	db	46
   796  0071FE  0D                 	db	13
   797  0071FF  0A                 	db	10
   798  007200  00                 	db	0
   799  007201                     STR_215:
   800  007201  57                 	db	87	;'W'
   801  007202  52                 	db	82	;'R'
   802  007203  45                 	db	69	;'E'
   803  007204  47                 	db	71	;'G'
   804  007205  20                 	db	32
   805  007206  2D                 	db	45
   806  007207  20                 	db	32
   807  007208  57                 	db	87	;'W'
   808  007209  72                 	db	114	;'r'
   809  00720A  69                 	db	105	;'i'
   810  00720B  74                 	db	116	;'t'
   811  00720C  65                 	db	101	;'e'
   812  00720D  20                 	db	32
   813  00720E  72                 	db	114	;'r'
   814  00720F  65                 	db	101	;'e'
   815  007210  67                 	db	103	;'g'
   816  007211  69                 	db	105	;'i'
   817  007212  73                 	db	115	;'s'
   818  007213  74                 	db	116	;'t'
   819  007214  65                 	db	101	;'e'
   820  007215  72                 	db	114	;'r'
   821  007216  20                 	db	32
   822  007217  6F                 	db	111	;'o'
   823  007218  66                 	db	102	;'f'
   824  007219  20                 	db	32
   825  00721A  6E                 	db	110	;'n'
   826  00721B  6F                 	db	111	;'o'
   827  00721C  64                 	db	100	;'d'
   828  00721D  65                 	db	101	;'e'
   829  00721E  20                 	db	32
   830  00721F  28                 	db	40
   831  007220  46                 	db	70	;'F'
   832  007221  6F                 	db	111	;'o'
   833  007222  72                 	db	114	;'r'
   834  007223  6D                 	db	109	;'m'
   835  007224  61                 	db	97	;'a'
   836  007225  74                 	db	116	;'t'
   837  007226  3A                 	db	58	;':'
   838  007227  20                 	db	32
   839  007228  77                 	db	119	;'w'
   840  007229  72                 	db	114	;'r'
   841  00722A  65                 	db	101	;'e'
   842  00722B  67                 	db	103	;'g'
   843  00722C  20                 	db	32
   844  00722D  5B                 	db	91	;'['
   845  00722E  70                 	db	112	;'p'
   846  00722F  61                 	db	97	;'a'
   847  007230  67                 	db	103	;'g'
   848  007231  65                 	db	101	;'e'
   849  007232  3A                 	db	58	;':'
   850  007233  5D                 	db	93	;']'
   851  007234  72                 	db	114	;'r'
   852  007235  65                 	db	101	;'e'
   853  007236  67                 	db	103	;'g'
   854  007237  20                 	db	32
   855  007238  63                 	db	99	;'c'
   856  007239  6F                 	db	111	;'o'
   857  00723A  6E                 	db	110	;'n'
   858  00723B  74                 	db	116	;'t'
   859  00723C  65                 	db	101	;'e'
   860  00723D  6E                 	db	110	;'n'
   861  00723E  74                 	db	116	;'t'
   862  00723F  29                 	db	41
   863  007240  2E                 	db	46
   864  007241  0D                 	db	13
   865  007242  0A                 	db	10
   866  007243  00                 	db	0
   867  007244                     STR_84:
   868  007244  2D                 	db	45
   869  007245  45                 	db	69	;'E'
   870  007246  52                 	db	82	;'R'
   871  007247  52                 	db	82	;'R'
   872  007248  4F                 	db	79	;'O'
   873  007249  52                 	db	82	;'R'
   874  00724A  20                 	db	32
   875  00724B  2D                 	db	45
   876  00724C  20                 	db	32
   877  00724D  46                 	db	70	;'F'
   878  00724E  69                 	db	105	;'i'
   879  00724F  6C                 	db	108	;'l'
   880  007250  74                 	db	116	;'t'
   881  007251  65                 	db	101	;'e'
   882  007252  72                 	db	114	;'r'
   883  007253  20                 	db	32
   884  007254  6E                 	db	110	;'n'
   885  007255  75                 	db	117	;'u'
   886  007256  6D                 	db	109	;'m'
   887  007257  62                 	db	98	;'b'
   888  007258  65                 	db	101	;'e'
   889  007259  72                 	db	114	;'r'
   890  00725A  20                 	db	32
   891  00725B  63                 	db	99	;'c'
   892  00725C  61                 	db	97	;'a'
   893  00725D  6E                 	db	110	;'n'
   894  00725E  20                 	db	32
   895  00725F  6F                 	db	111	;'o'
   896  007260  6E                 	db	110	;'n'
   897  007261  6C                 	db	108	;'l'
   898  007262  79                 	db	121	;'y'
   899  007263  20                 	db	32
   900  007264  62                 	db	98	;'b'
   901  007265  65                 	db	101	;'e'
   902  007266  20                 	db	32
   903  007267  73                 	db	115	;'s'
   904  007268  65                 	db	101	;'e'
   905  007269  74                 	db	116	;'t'
   906  00726A  20                 	db	32
   907  00726B  74                 	db	116	;'t'
   908  00726C  6F                 	db	111	;'o'
   909  00726D  20                 	db	32
   910  00726E  61                 	db	97	;'a'
   911  00726F  20                 	db	32
   912  007270  76                 	db	118	;'v'
   913  007271  61                 	db	97	;'a'
   914  007272  6C                 	db	108	;'l'
   915  007273  75                 	db	117	;'u'
   916  007274  65                 	db	101	;'e'
   917  007275  20                 	db	32
   918  007276  62                 	db	98	;'b'
   919  007277  65                 	db	101	;'e'
   920  007278  74                 	db	116	;'t'
   921  007279  77                 	db	119	;'w'
   922  00727A  65                 	db	101	;'e'
   923  00727B  65                 	db	101	;'e'
   924  00727C  6E                 	db	110	;'n'
   925  00727D  20                 	db	32
   926  00727E  30                 	db	48	;'0'
   927  00727F  2D                 	db	45
   928  007280  31                 	db	49	;'1'
   929  007281  35                 	db	53	;'5'
   930  007282  2E                 	db	46
   931  007283  0D                 	db	13
   932  007284  0A                 	db	10
   933  007285  00                 	db	0
   934  007286                     STR_227:
   935  007286  20                 	db	32
   936  007287  20                 	db	32
   937  007288  20                 	db	32
   938  007289  20                 	db	32
   939  00728A  4D                 	db	77	;'M'
   940  00728B  4F                 	db	79	;'O'
   941  00728C  44                 	db	68	;'D'
   942  00728D  45                 	db	69	;'E'
   943  00728E  20                 	db	32
   944  00728F  2D                 	db	45
   945  007290  20                 	db	32
   946  007291  53                 	db	83	;'S'
   947  007292  65                 	db	101	;'e'
   948  007293  74                 	db	116	;'t'
   949  007294  20                 	db	32
   950  007295  61                 	db	97	;'a'
   951  007296  64                 	db	100	;'d'
   952  007297  61                 	db	97	;'a'
   953  007298  70                 	db	112	;'p'
   954  007299  74                 	db	116	;'t'
   955  00729A  65                 	db	101	;'e'
   956  00729B  72                 	db	114	;'r'
   957  00729C  20                 	db	32
   958  00729D  6D                 	db	109	;'m'
   959  00729E  6F                 	db	111	;'o'
   960  00729F  64                 	db	100	;'d'
   961  0072A0  65                 	db	101	;'e'
   962  0072A1  20                 	db	32
   963  0072A2  74                 	db	116	;'t'
   964  0072A3  68                 	db	104	;'h'
   965  0072A4  61                 	db	97	;'a'
   966  0072A5  74                 	db	116	;'t'
   967  0072A6  20                 	db	32
   968  0072A7  73                 	db	115	;'s'
   969  0072A8  68                 	db	104	;'h'
   970  0072A9  6F                 	db	111	;'o'
   971  0072AA  75                 	db	117	;'u'
   972  0072AB  6C                 	db	108	;'l'
   973  0072AC  64                 	db	100	;'d'
   974  0072AD  20                 	db	32
   975  0072AE  62                 	db	98	;'b'
   976  0072AF  65                 	db	101	;'e'
   977  0072B0  20                 	db	32
   978  0072B1  75                 	db	117	;'u'
   979  0072B2  73                 	db	115	;'s'
   980  0072B3  65                 	db	101	;'e'
   981  0072B4  64                 	db	100	;'d'
   982  0072B5  20                 	db	32
   983  0072B6  6F                 	db	111	;'o'
   984  0072B7  6E                 	db	110	;'n'
   985  0072B8  20                 	db	32
   986  0072B9  73                 	db	115	;'s'
   987  0072BA  74                 	db	116	;'t'
   988  0072BB  61                 	db	97	;'a'
   989  0072BC  72                 	db	114	;'r'
   990  0072BD  74                 	db	116	;'t'
   991  0072BE  75                 	db	117	;'u'
   992  0072BF  70                 	db	112	;'p'
   993  0072C0  2E                 	db	46
   994  0072C1  0D                 	db	13
   995  0072C2  0A                 	db	10
   996  0072C3  00                 	db	0
   997  0072C4                     STR_187:
   998  0072C4  54                 	db	84	;'T'
   999  0072C5  72                 	db	114	;'r'
  1000  0072C6  61                 	db	97	;'a'
  1001  0072C7  6E                 	db	110	;'n'
  1002  0072C8  73                 	db	115	;'s'
  1003  0072C9  6D                 	db	109	;'m'
  1004  0072CA  69                 	db	105	;'i'
  1005  0072CB  74                 	db	116	;'t'
  1006  0072CC  74                 	db	116	;'t'
  1007  0072CD  65                 	db	101	;'e'
  1008  0072CE  72                 	db	114	;'r'
  1009  0072CF  20                 	db	32
  1010  0072D0  69                 	db	105	;'i'
  1011  0072D1  6E                 	db	110	;'n'
  1012  0072D2  20                 	db	32
  1013  0072D3  45                 	db	69	;'E'
  1014  0072D4  72                 	db	114	;'r'
  1015  0072D5  72                 	db	114	;'r'
  1016  0072D6  6F                 	db	111	;'o'
  1017  0072D7  72                 	db	114	;'r'
  1018  0072D8  20                 	db	32
  1019  0072D9  53                 	db	83	;'S'
  1020  0072DA  74                 	db	116	;'t'
  1021  0072DB  61                 	db	97	;'a'
  1022  0072DC  74                 	db	116	;'t'
  1023  0072DD  65                 	db	101	;'e'
  1024  0072DE  20                 	db	32
  1025  0072DF  57                 	db	87	;'W'
  1026  0072E0  61                 	db	97	;'a'
  1027  0072E1  72                 	db	114	;'r'
  1028  0072E2  6E                 	db	110	;'n'
  1029  0072E3  69                 	db	105	;'i'
  1030  0072E4  6E                 	db	110	;'n'
  1031  0072E5  67                 	db	103	;'g'
  1032  0072E6  20                 	db	32
  1033  0072E7  28                 	db	40
  1034  0072E8  31                 	db	49	;'1'
  1035  0072E9  32                 	db	50	;'2'
  1036  0072EA  38                 	db	56	;'8'
  1037  0072EB  20                 	db	32
  1038  0072EC  3E                 	db	62	;'>'
  1039  0072ED  20                 	db	32
  1040  0072EE  54                 	db	84	;'T'
  1041  0072EF  45                 	db	69	;'E'
  1042  0072F0  52                 	db	82	;'R'
  1043  0072F1  52                 	db	82	;'R'
  1044  0072F2  43                 	db	67	;'C'
  1045  0072F3  4E                 	db	78	;'N'
  1046  0072F4  54                 	db	84	;'T'
  1047  0072F5  20                 	db	32
  1048  0072F6  3F                 	db	63	;'?'
  1049  0072F7  20                 	db	32
  1050  0072F8  39                 	db	57	;'9'
  1051  0072F9  36                 	db	54	;'6'
  1052  0072FA  29                 	db	41
  1053  0072FB  0D                 	db	13
  1054  0072FC  0A                 	db	10
  1055  0072FD  00                 	db	0
  1056  0072FE                     STR_189:
  1057  0072FE  54                 	db	84	;'T'
  1058  0072FF  72                 	db	114	;'r'
  1059  007300  61                 	db	97	;'a'
  1060  007301  6E                 	db	110	;'n'
  1061  007302  73                 	db	115	;'s'
  1062  007303  6D                 	db	109	;'m'
  1063  007304  69                 	db	105	;'i'
  1064  007305  74                 	db	116	;'t'
  1065  007306  74                 	db	116	;'t'
  1066  007307  65                 	db	101	;'e'
  1067  007308  72                 	db	114	;'r'
  1068  007309  20                 	db	32
  1069  00730A  69                 	db	105	;'i'
  1070  00730B  6E                 	db	110	;'n'
  1071  00730C  20                 	db	32
  1072  00730D  45                 	db	69	;'E'
  1073  00730E  72                 	db	114	;'r'
  1074  00730F  72                 	db	114	;'r'
  1075  007310  6F                 	db	111	;'o'
  1076  007311  72                 	db	114	;'r'
  1077  007312  20                 	db	32
  1078  007313  53                 	db	83	;'S'
  1079  007314  74                 	db	116	;'t'
  1080  007315  61                 	db	97	;'a'
  1081  007316  74                 	db	116	;'t'
  1082  007317  65                 	db	101	;'e'
  1083  007318  20                 	db	32
  1084  007319  42                 	db	66	;'B'
  1085  00731A  75                 	db	117	;'u'
  1086  00731B  73                 	db	115	;'s'
  1087  00731C  20                 	db	32
  1088  00731D  50                 	db	80	;'P'
  1089  00731E  61                 	db	97	;'a'
  1090  00731F  73                 	db	115	;'s'
  1091  007320  73                 	db	115	;'s'
  1092  007321  69                 	db	105	;'i'
  1093  007322  76                 	db	118	;'v'
  1094  007323  65                 	db	101	;'e'
  1095  007324  20                 	db	32
  1096  007325  28                 	db	40
  1097  007326  54                 	db	84	;'T'
  1098  007327  45                 	db	69	;'E'
  1099  007328  52                 	db	82	;'R'
  1100  007329  52                 	db	82	;'R'
  1101  00732A  43                 	db	67	;'C'
  1102  00732B  4E                 	db	78	;'N'
  1103  00732C  54                 	db	84	;'T'
  1104  00732D  20                 	db	32
  1105  00732E  3F                 	db	63	;'?'
  1106  00732F  20                 	db	32
  1107  007330  31                 	db	49	;'1'
  1108  007331  32                 	db	50	;'2'
  1109  007332  38                 	db	56	;'8'
  1110  007333  29                 	db	41
  1111  007334  0D                 	db	13
  1112  007335  0A                 	db	10
  1113  007336  00                 	db	0
  1114  007337                     STR_208:
  1115  007337  20                 	db	32
  1116  007338  20                 	db	32
  1117  007339  20                 	db	32
  1118  00733A  20                 	db	32
  1119  00733B  20                 	db	32
  1120  00733C  46                 	db	70	;'F'
  1121  00733D  6F                 	db	111	;'o'
  1122  00733E  72                 	db	114	;'r'
  1123  00733F  6D                 	db	109	;'m'
  1124  007340  61                 	db	97	;'a'
  1125  007341  74                 	db	116	;'t'
  1126  007342  3A                 	db	58	;':'
  1127  007343  20                 	db	32
  1128  007344  70                 	db	112	;'p'
  1129  007345  72                 	db	114	;'r'
  1130  007346  69                 	db	105	;'i'
  1131  007347  6F                 	db	111	;'o'
  1132  007348  72                 	db	114	;'r'
  1133  007349  69                 	db	105	;'i'
  1134  00734A  74                 	db	116	;'t'
  1135  00734B  79                 	db	121	;'y'
  1136  00734C  2C                 	db	44
  1137  00734D  63                 	db	99	;'c'
  1138  00734E  6C                 	db	108	;'l'
  1139  00734F  61                 	db	97	;'a'
  1140  007350  73                 	db	115	;'s'
  1141  007351  73                 	db	115	;'s'
  1142  007352  2C                 	db	44
  1143  007353  74                 	db	116	;'t'
  1144  007354  79                 	db	121	;'y'
  1145  007355  70                 	db	112	;'p'
  1146  007356  65                 	db	101	;'e'
  1147  007357  2C                 	db	44
  1148  007358  6E                 	db	110	;'n'
  1149  007359  6F                 	db	111	;'o'
  1150  00735A  64                 	db	100	;'d'
  1151  00735B  65                 	db	101	;'e'
  1152  00735C  69                 	db	105	;'i'
  1153  00735D  64                 	db	100	;'d'
  1154  00735E  2C                 	db	44
  1155  00735F  63                 	db	99	;'c'
  1156  007360  6F                 	db	111	;'o'
  1157  007361  75                 	db	117	;'u'
  1158  007362  6E                 	db	110	;'n'
  1159  007363  74                 	db	116	;'t'
  1160  007364  2C                 	db	44
  1161  007365  64                 	db	100	;'d'
  1162  007366  61                 	db	97	;'a'
  1163  007367  74                 	db	116	;'t'
  1164  007368  61                 	db	97	;'a'
  1165  007369  2C                 	db	44
  1166  00736A  2C                 	db	44
  1167  00736B  2C                 	db	44
  1168  00736C  0D                 	db	13
  1169  00736D  0A                 	db	10
  1170  00736E  00                 	db	0
  1171  00736F                     STR_194:
  1172  00736F  52                 	db	82	;'R'
  1173  007370  65                 	db	101	;'e'
  1174  007371  63                 	db	99	;'c'
  1175  007372  65                 	db	101	;'e'
  1176  007373  69                 	db	105	;'i'
  1177  007374  76                 	db	118	;'v'
  1178  007375  65                 	db	101	;'e'
  1179  007376  72                 	db	114	;'r'
  1180  007377  20                 	db	32
  1181  007378  69                 	db	105	;'i'
  1182  007379  6E                 	db	110	;'n'
  1183  00737A  20                 	db	32
  1184  00737B  45                 	db	69	;'E'
  1185  00737C  72                 	db	114	;'r'
  1186  00737D  72                 	db	114	;'r'
  1187  00737E  6F                 	db	111	;'o'
  1188  00737F  72                 	db	114	;'r'
  1189  007380  20                 	db	32
  1190  007381  53                 	db	83	;'S'
  1191  007382  74                 	db	116	;'t'
  1192  007383  61                 	db	97	;'a'
  1193  007384  74                 	db	116	;'t'
  1194  007385  65                 	db	101	;'e'
  1195  007386  20                 	db	32
  1196  007387  57                 	db	87	;'W'
  1197  007388  61                 	db	97	;'a'
  1198  007389  72                 	db	114	;'r'
  1199  00738A  6E                 	db	110	;'n'
  1200  00738B  69                 	db	105	;'i'
  1201  00738C  6E                 	db	110	;'n'
  1202  00738D  67                 	db	103	;'g'
  1203  00738E  20                 	db	32
  1204  00738F  28                 	db	40
  1205  007390  31                 	db	49	;'1'
  1206  007391  32                 	db	50	;'2'
  1207  007392  38                 	db	56	;'8'
  1208  007393  20                 	db	32
  1209  007394  3E                 	db	62	;'>'
  1210  007395  20                 	db	32
  1211  007396  52                 	db	82	;'R'
  1212  007397  45                 	db	69	;'E'
  1213  007398  52                 	db	82	;'R'
  1214  007399  52                 	db	82	;'R'
  1215  00739A  43                 	db	67	;'C'
  1216  00739B  4E                 	db	78	;'N'
  1217  00739C  54                 	db	84	;'T'
  1218  00739D  20                 	db	32
  1219  00739E  3F                 	db	63	;'?'
  1220  00739F  20                 	db	32
  1221  0073A0  39                 	db	57	;'9'
  1222  0073A1  36                 	db	54	;'6'
  1223  0073A2  29                 	db	41
  1224  0073A3  0D                 	db	13
  1225  0073A4  0A                 	db	10
  1226  0073A5  00                 	db	0
  1227  0073A6                     STR_226:
  1228  0073A6  20                 	db	32
  1229  0073A7  20                 	db	32
  1230  0073A8  20                 	db	32
  1231  0073A9  20                 	db	32
  1232  0073AA  53                 	db	83	;'S'
  1233  0073AB  54                 	db	84	;'T'
  1234  0073AC  41                 	db	65	;'A'
  1235  0073AD  52                 	db	82	;'R'
  1236  0073AE  54                 	db	84	;'T'
  1237  0073AF  49                 	db	73	;'I'
  1238  0073B0  46                 	db	70	;'F'
  1239  0073B1  20                 	db	32
  1240  0073B2  2D                 	db	45
  1241  0073B3  20                 	db	32
  1242  0073B4  53                 	db	83	;'S'
  1243  0073B5  65                 	db	101	;'e'
  1244  0073B6  74                 	db	116	;'t'
  1245  0073B7  20                 	db	32
  1246  0073B8  69                 	db	105	;'i'
  1247  0073B9  6E                 	db	110	;'n'
  1248  0073BA  74                 	db	116	;'t'
  1249  0073BB  65                 	db	101	;'e'
  1250  0073BC  72                 	db	114	;'r'
  1251  0073BD  66                 	db	102	;'f'
  1252  0073BE  61                 	db	97	;'a'
  1253  0073BF  63                 	db	99	;'c'
  1254  0073C0  65                 	db	101	;'e'
  1255  0073C1  20                 	db	32
  1256  0073C2  73                 	db	115	;'s'
  1257  0073C3  74                 	db	116	;'t'
  1258  0073C4  61                 	db	97	;'a'
  1259  0073C5  74                 	db	116	;'t'
  1260  0073C6  65                 	db	101	;'e'
  1261  0073C7  20                 	db	32
  1262  0073C8  74                 	db	116	;'t'
  1263  0073C9  6F                 	db	111	;'o'
  1264  0073CA  20                 	db	32
  1265  0073CB  75                 	db	117	;'u'
  1266  0073CC  73                 	db	115	;'s'
  1267  0073CD  65                 	db	101	;'e'
  1268  0073CE  20                 	db	32
  1269  0073CF  6F                 	db	111	;'o'
  1270  0073D0  6E                 	db	110	;'n'
  1271  0073D1  20                 	db	32
  1272  0073D2  73                 	db	115	;'s'
  1273  0073D3  74                 	db	116	;'t'
  1274  0073D4  61                 	db	97	;'a'
  1275  0073D5  72                 	db	114	;'r'
  1276  0073D6  74                 	db	116	;'t'
  1277  0073D7  75                 	db	117	;'u'
  1278  0073D8  70                 	db	112	;'p'
  1279  0073D9  2E                 	db	46
  1280  0073DA  0D                 	db	13
  1281  0073DB  0A                 	db	10
  1282  0073DC  00                 	db	0
  1283  0073DD  50                 	db	80	;'P'
  1284  0073DE  72                 	db	114	;'r'
  1285  0073DF  65                 	db	101	;'e'
  1286  0073E0  73                 	db	115	;'s'
  1287  0073E1  73                 	db	115	;'s'
  1288  0073E2  20                 	db	32
  1289  0073E3  27                 	db	39
  1290  0073E4  76                 	db	118	;'v'
  1291  0073E5  27                 	db	39
  1292  0073E6  20                 	db	32
  1293  0073E7  77                 	db	119	;'w'
  1294  0073E8  69                 	db	105	;'i'
  1295  0073E9  74                 	db	116	;'t'
  1296  0073EA  68                 	db	104	;'h'
  1297  0073EB  69                 	db	105	;'i'
  1298  0073EC  6E                 	db	110	;'n'
  1299  0073ED  20                 	db	32
  1300  0073EE  74                 	db	116	;'t'
  1301  0073EF  68                 	db	104	;'h'
  1302  0073F0  72                 	db	114	;'r'
  1303  0073F1  65                 	db	101	;'e'
  1304  0073F2  65                 	db	101	;'e'
  1305  0073F3  20                 	db	32
  1306  0073F4  73                 	db	115	;'s'
  1307  0073F5  65                 	db	101	;'e'
  1308  0073F6  63                 	db	99	;'c'
  1309  0073F7  6F                 	db	111	;'o'
  1310  0073F8  6E                 	db	110	;'n'
  1311  0073F9  64                 	db	100	;'d'
  1312  0073FA  73                 	db	115	;'s'
  1313  0073FB  20                 	db	32
  1314  0073FC  74                 	db	116	;'t'
  1315  0073FD  6F                 	db	111	;'o'
  1316  0073FE  20                 	db	32
  1317  0073FF  65                 	db	101	;'e'
  1318  007400  6E                 	db	110	;'n'
  1319  007401  74                 	db	116	;'t'
  1320  007402  65                 	db	101	;'e'
  1321  007403  72                 	db	114	;'r'
  1322  007404  20                 	db	32
  1323  007405  76                 	db	118	;'v'
  1324  007406  65                 	db	101	;'e'
  1325  007407  72                 	db	114	;'r'
  1326  007408  62                 	db	98	;'b'
  1327  007409  6F                 	db	111	;'o'
  1328  00740A  73                 	db	115	;'s'
  1329  00740B  65                 	db	101	;'e'
  1330  00740C  20                 	db	32
  1331  00740D  6D                 	db	109	;'m'
  1332  00740E  6F                 	db	111	;'o'
  1333  00740F  64                 	db	100	;'d'
  1334  007410  65                 	db	101	;'e'
  1335  007411  0D                 	db	13
  1336  007412  0A                 	db	10
  1337  007413  00                 	db	0
  1338  007414                     STR_195:
  1339  007414  52                 	db	82	;'R'
  1340  007415  65                 	db	101	;'e'
  1341  007416  63                 	db	99	;'c'
  1342  007417  65                 	db	101	;'e'
  1343  007418  69                 	db	105	;'i'
  1344  007419  76                 	db	118	;'v'
  1345  00741A  65                 	db	101	;'e'
  1346  00741B  72                 	db	114	;'r'
  1347  00741C  20                 	db	32
  1348  00741D  69                 	db	105	;'i'
  1349  00741E  6E                 	db	110	;'n'
  1350  00741F  20                 	db	32
  1351  007420  45                 	db	69	;'E'
  1352  007421  72                 	db	114	;'r'
  1353  007422  72                 	db	114	;'r'
  1354  007423  6F                 	db	111	;'o'
  1355  007424  72                 	db	114	;'r'
  1356  007425  20                 	db	32
  1357  007426  53                 	db	83	;'S'
  1358  007427  74                 	db	116	;'t'
  1359  007428  61                 	db	97	;'a'
  1360  007429  74                 	db	116	;'t'
  1361  00742A  65                 	db	101	;'e'
  1362  00742B  20                 	db	32
  1363  00742C  42                 	db	66	;'B'
  1364  00742D  75                 	db	117	;'u'
  1365  00742E  73                 	db	115	;'s'
  1366  00742F  20                 	db	32
  1367  007430  50                 	db	80	;'P'
  1368  007431  61                 	db	97	;'a'
  1369  007432  73                 	db	115	;'s'
  1370  007433  73                 	db	115	;'s'
  1371  007434  69                 	db	105	;'i'
  1372  007435  76                 	db	118	;'v'
  1373  007436  65                 	db	101	;'e'
  1374  007437  20                 	db	32
  1375  007438  28                 	db	40
  1376  007439  52                 	db	82	;'R'
  1377  00743A  45                 	db	69	;'E'
  1378  00743B  52                 	db	82	;'R'
  1379  00743C  52                 	db	82	;'R'
  1380  00743D  43                 	db	67	;'C'
  1381  00743E  4E                 	db	78	;'N'
  1382  00743F  54                 	db	84	;'T'
  1383  007440  20                 	db	32
  1384  007441  3F                 	db	63	;'?'
  1385  007442  20                 	db	32
  1386  007443  31                 	db	49	;'1'
  1387  007444  32                 	db	50	;'2'
  1388  007445  38                 	db	56	;'8'
  1389  007446  29                 	db	41
  1390  007447  0D                 	db	13
  1391  007448  0A                 	db	10
  1392  007449  00                 	db	0
  1393  00744A                     STR_67:
  1394  00744A  2D                 	db	45
  1395  00744B  45                 	db	69	;'E'
  1396  00744C  52                 	db	82	;'R'
  1397  00744D  52                 	db	82	;'R'
  1398  00744E  4F                 	db	79	;'O'
  1399  00744F  52                 	db	82	;'R'
  1400  007450  20                 	db	32
  1401  007451  2D                 	db	45
  1402  007452  20                 	db	32
  1403  007453  4F                 	db	79	;'O'
  1404  007454  6E                 	db	110	;'n'
  1405  007455  65                 	db	101	;'e'
  1406  007456  20                 	db	32
  1407  007457  6F                 	db	111	;'o'
  1408  007458  72                 	db	114	;'r'
  1409  007459  20                 	db	32
  1410  00745A  6D                 	db	109	;'m'
  1411  00745B  6F                 	db	111	;'o'
  1412  00745C  72                 	db	114	;'r'
  1413  00745D  65                 	db	101	;'e'
  1414  00745E  20                 	db	32
  1415  00745F  72                 	db	114	;'r'
  1416  007460  65                 	db	101	;'e'
  1417  007461  67                 	db	103	;'g'
  1418  007462  69                 	db	105	;'i'
  1419  007463  73                 	db	115	;'s'
  1420  007464  74                 	db	116	;'t'
  1421  007465  65                 	db	101	;'e'
  1422  007466  72                 	db	114	;'r'
  1423  007467  28                 	db	40
  1424  007468  73                 	db	115	;'s'
  1425  007469  29                 	db	41
  1426  00746A  20                 	db	32
  1427  00746B  63                 	db	99	;'c'
  1428  00746C  6F                 	db	111	;'o'
  1429  00746D  75                 	db	117	;'u'
  1430  00746E  6C                 	db	108	;'l'
  1431  00746F  64                 	db	100	;'d'
  1432  007470  20                 	db	32
  1433  007471  6E                 	db	110	;'n'
  1434  007472  6F                 	db	111	;'o'
  1435  007473  74                 	db	116	;'t'
  1436  007474  20                 	db	32
  1437  007475  62                 	db	98	;'b'
  1438  007476  65                 	db	101	;'e'
  1439  007477  20                 	db	32
  1440  007478  72                 	db	114	;'r'
  1441  007479  65                 	db	101	;'e'
  1442  00747A  61                 	db	97	;'a'
  1443  00747B  64                 	db	100	;'d'
  1444  00747C  2E                 	db	46
  1445  00747D  0D                 	db	13
  1446  00747E  0A                 	db	10
  1447  00747F  00                 	db	0
  1448  007480                     STR_188:
  1449  007480  54                 	db	84	;'T'
  1450  007481  72                 	db	114	;'r'
  1451  007482  61                 	db	97	;'a'
  1452  007483  6E                 	db	110	;'n'
  1453  007484  73                 	db	115	;'s'
  1454  007485  6D                 	db	109	;'m'
  1455  007486  69                 	db	105	;'i'
  1456  007487  74                 	db	116	;'t'
  1457  007488  74                 	db	116	;'t'
  1458  007489  65                 	db	101	;'e'
  1459  00748A  72                 	db	114	;'r'
  1460  00748B  20                 	db	32
  1461  00748C  69                 	db	105	;'i'
  1462  00748D  6E                 	db	110	;'n'
  1463  00748E  20                 	db	32
  1464  00748F  45                 	db	69	;'E'
  1465  007490  72                 	db	114	;'r'
  1466  007491  72                 	db	114	;'r'
  1467  007492  6F                 	db	111	;'o'
  1468  007493  72                 	db	114	;'r'
  1469  007494  20                 	db	32
  1470  007495  53                 	db	83	;'S'
  1471  007496  74                 	db	116	;'t'
  1472  007497  61                 	db	97	;'a'
  1473  007498  74                 	db	116	;'t'
  1474  007499  65                 	db	101	;'e'
  1475  00749A  20                 	db	32
  1476  00749B  42                 	db	66	;'B'
  1477  00749C  75                 	db	117	;'u'
  1478  00749D  73                 	db	115	;'s'
  1479  00749E  20                 	db	32
  1480  00749F  4F                 	db	79	;'O'
  1481  0074A0  46                 	db	70	;'F'
  1482  0074A1  46                 	db	70	;'F'
  1483  0074A2  20                 	db	32
  1484  0074A3  28                 	db	40
  1485  0074A4  54                 	db	84	;'T'
  1486  0074A5  45                 	db	69	;'E'
  1487  0074A6  52                 	db	82	;'R'
  1488  0074A7  52                 	db	82	;'R'
  1489  0074A8  43                 	db	67	;'C'
  1490  0074A9  4E                 	db	78	;'N'
  1491  0074AA  54                 	db	84	;'T'
  1492  0074AB  20                 	db	32
  1493  0074AC  3F                 	db	63	;'?'
  1494  0074AD  20                 	db	32
  1495  0074AE  32                 	db	50	;'2'
  1496  0074AF  35                 	db	53	;'5'
  1497  0074B0  36                 	db	54	;'6'
  1498  0074B1  29                 	db	41
  1499  0074B2  0D                 	db	13
  1500  0074B3  0A                 	db	10
  1501  0074B4  00                 	db	0
  1502  0074B5                     STR_196:
  1503  0074B5  54                 	db	84	;'T'
  1504  0074B6  72                 	db	114	;'r'
  1505  0074B7  61                 	db	97	;'a'
  1506  0074B8  6E                 	db	110	;'n'
  1507  0074B9  73                 	db	115	;'s'
  1508  0074BA  6D                 	db	109	;'m'
  1509  0074BB  69                 	db	105	;'i'
  1510  0074BC  74                 	db	116	;'t'
  1511  0074BD  74                 	db	116	;'t'
  1512  0074BE  65                 	db	101	;'e'
  1513  0074BF  72                 	db	114	;'r'
  1514  0074C0  20                 	db	32
  1515  0074C1  6F                 	db	111	;'o'
  1516  0074C2  72                 	db	114	;'r'
  1517  0074C3  20                 	db	32
  1518  0074C4  52                 	db	82	;'R'
  1519  0074C5  65                 	db	101	;'e'
  1520  0074C6  63                 	db	99	;'c'
  1521  0074C7  65                 	db	101	;'e'
  1522  0074C8  69                 	db	105	;'i'
  1523  0074C9  76                 	db	118	;'v'
  1524  0074CA  65                 	db	101	;'e'
  1525  0074CB  72                 	db	114	;'r'
  1526  0074CC  20                 	db	32
  1527  0074CD  69                 	db	105	;'i'
  1528  0074CE  73                 	db	115	;'s'
  1529  0074CF  20                 	db	32
  1530  0074D0  69                 	db	105	;'i'
  1531  0074D1  6E                 	db	110	;'n'
  1532  0074D2  20                 	db	32
  1533  0074D3  45                 	db	69	;'E'
  1534  0074D4  72                 	db	114	;'r'
  1535  0074D5  72                 	db	114	;'r'
  1536  0074D6  6F                 	db	111	;'o'
  1537  0074D7  72                 	db	114	;'r'
  1538  0074D8  20                 	db	32
  1539  0074D9  53                 	db	83	;'S'
  1540  0074DA  74                 	db	116	;'t'
  1541  0074DB  61                 	db	97	;'a'
  1542  0074DC  74                 	db	116	;'t'
  1543  0074DD  65                 	db	101	;'e'
  1544  0074DE  20                 	db	32
  1545  0074DF  57                 	db	87	;'W'
  1546  0074E0  61                 	db	97	;'a'
  1547  0074E1  72                 	db	114	;'r'
  1548  0074E2  6E                 	db	110	;'n'
  1549  0074E3  69                 	db	105	;'i'
  1550  0074E4  6E                 	db	110	;'n'
  1551  0074E5  67                 	db	103	;'g'
  1552  0074E6  0D                 	db	13
  1553  0074E7  0A                 	db	10
  1554  0074E8  00                 	db	0
  1555  0074E9                     STR_202:
  1556  0074E9  4C                 	db	76	;'L'
  1557  0074EA  49                 	db	73	;'I'
  1558  0074EB  53                 	db	83	;'S'
  1559  0074EC  54                 	db	84	;'T'
  1560  0074ED  45                 	db	69	;'E'
  1561  0074EE  4E                 	db	78	;'N'
  1562  0074EF  20                 	db	32
  1563  0074F0  2D                 	db	45
  1564  0074F1  20                 	db	32
  1565  0074F2  4F                 	db	79	;'O'
  1566  0074F3  70                 	db	112	;'p'
  1567  0074F4  65                 	db	101	;'e'
  1568  0074F5  6E                 	db	110	;'n'
  1569  0074F6  20                 	db	32
  1570  0074F7  43                 	db	67	;'C'
  1571  0074F8  41                 	db	65	;'A'
  1572  0074F9  4E                 	db	78	;'N'
  1573  0074FA  20                 	db	32
  1574  0074FB  69                 	db	105	;'i'
  1575  0074FC  6E                 	db	110	;'n'
  1576  0074FD  74                 	db	116	;'t'
  1577  0074FE  65                 	db	101	;'e'
  1578  0074FF  72                 	db	114	;'r'
  1579  007500  66                 	db	102	;'f'
  1580  007501  61                 	db	97	;'a'
  1581  007502  63                 	db	99	;'c'
  1582  007503  65                 	db	101	;'e'
  1583  007504  20                 	db	32
  1584  007505  69                 	db	105	;'i'
  1585  007506  6E                 	db	110	;'n'
  1586  007507  20                 	db	32
  1587  007508  6C                 	db	108	;'l'
  1588  007509  69                 	db	105	;'i'
  1589  00750A  73                 	db	115	;'s'
  1590  00750B  74                 	db	116	;'t'
  1591  00750C  65                 	db	101	;'e'
  1592  00750D  6E                 	db	110	;'n'
  1593  00750E  20                 	db	32
  1594  00750F  6F                 	db	111	;'o'
  1595  007510  6E                 	db	110	;'n'
  1596  007511  6C                 	db	108	;'l'
  1597  007512  79                 	db	121	;'y'
  1598  007513  20                 	db	32
  1599  007514  6D                 	db	109	;'m'
  1600  007515  6F                 	db	111	;'o'
  1601  007516  64                 	db	100	;'d'
  1602  007517  65                 	db	101	;'e'
  1603  007518  2E                 	db	46
  1604  007519  0D                 	db	13
  1605  00751A  0A                 	db	10
  1606  00751B  00                 	db	0
  1607  00751C                     STR_96:
  1608  00751C  2D                 	db	45
  1609  00751D  45                 	db	69	;'E'
  1610  00751E  52                 	db	82	;'R'
  1611  00751F  52                 	db	82	;'R'
  1612  007520  4F                 	db	79	;'O'
  1613  007521  52                 	db	82	;'R'
  1614  007522  20                 	db	32
  1615  007523  2D                 	db	45
  1616  007524  20                 	db	32
  1617  007525  4D                 	db	77	;'M'
  1618  007526  61                 	db	97	;'a'
  1619  007527  73                 	db	115	;'s'
  1620  007528  6B                 	db	107	;'k'
  1621  007529  20                 	db	32
  1622  00752A  6E                 	db	110	;'n'
  1623  00752B  75                 	db	117	;'u'
  1624  00752C  6D                 	db	109	;'m'
  1625  00752D  62                 	db	98	;'b'
  1626  00752E  65                 	db	101	;'e'
  1627  00752F  72                 	db	114	;'r'
  1628  007530  20                 	db	32
  1629  007531  63                 	db	99	;'c'
  1630  007532  61                 	db	97	;'a'
  1631  007533  6E                 	db	110	;'n'
  1632  007534  20                 	db	32
  1633  007535  6F                 	db	111	;'o'
  1634  007536  6E                 	db	110	;'n'
  1635  007537  6C                 	db	108	;'l'
  1636  007538  79                 	db	121	;'y'
  1637  007539  20                 	db	32
  1638  00753A  62                 	db	98	;'b'
  1639  00753B  65                 	db	101	;'e'
  1640  00753C  20                 	db	32
  1641  00753D  73                 	db	115	;'s'
  1642  00753E  65                 	db	101	;'e'
  1643  00753F  74                 	db	116	;'t'
  1644  007540  20                 	db	32
  1645  007541  61                 	db	97	;'a'
  1646  007542  73                 	db	115	;'s'
  1647  007543  20                 	db	32
  1648  007544  30                 	db	48	;'0'
  1649  007545  20                 	db	32
  1650  007546  6F                 	db	111	;'o'
  1651  007547  72                 	db	114	;'r'
  1652  007548  20                 	db	32
  1653  007549  31                 	db	49	;'1'
  1654  00754A  2E                 	db	46
  1655  00754B  0D                 	db	13
  1656  00754C  0A                 	db	10
  1657  00754D  00                 	db	0
  1658  00754E                     STR_203:
  1659  00754E  4C                 	db	76	;'L'
  1660  00754F  4F                 	db	79	;'O'
  1661  007550  4F                 	db	79	;'O'
  1662  007551  50                 	db	80	;'P'
  1663  007552  42                 	db	66	;'B'
  1664  007553  41                 	db	65	;'A'
  1665  007554  43                 	db	67	;'C'
  1666  007555  4B                 	db	75	;'K'
  1667  007556  20                 	db	32
  1668  007557  2D                 	db	45
  1669  007558  20                 	db	32
  1670  007559  4F                 	db	79	;'O'
  1671  00755A  70                 	db	112	;'p'
  1672  00755B  65                 	db	101	;'e'
  1673  00755C  6E                 	db	110	;'n'
  1674  00755D  20                 	db	32
  1675  00755E  43                 	db	67	;'C'
  1676  00755F  41                 	db	65	;'A'
  1677  007560  4E                 	db	78	;'N'
  1678  007561  20                 	db	32
  1679  007562  69                 	db	105	;'i'
  1680  007563  6E                 	db	110	;'n'
  1681  007564  74                 	db	116	;'t'
  1682  007565  65                 	db	101	;'e'
  1683  007566  72                 	db	114	;'r'
  1684  007567  66                 	db	102	;'f'
  1685  007568  61                 	db	97	;'a'
  1686  007569  63                 	db	99	;'c'
  1687  00756A  65                 	db	101	;'e'
  1688  00756B  20                 	db	32
  1689  00756C  69                 	db	105	;'i'
  1690  00756D  6E                 	db	110	;'n'
  1691  00756E  20                 	db	32
  1692  00756F  6C                 	db	108	;'l'
  1693  007570  6F                 	db	111	;'o'
  1694  007571  6F                 	db	111	;'o'
  1695  007572  70                 	db	112	;'p'
  1696  007573  62                 	db	98	;'b'
  1697  007574  61                 	db	97	;'a'
  1698  007575  63                 	db	99	;'c'
  1699  007576  6B                 	db	107	;'k'
  1700  007577  20                 	db	32
  1701  007578  6D                 	db	109	;'m'
  1702  007579  6F                 	db	111	;'o'
  1703  00757A  64                 	db	100	;'d'
  1704  00757B  65                 	db	101	;'e'
  1705  00757C  2E                 	db	46
  1706  00757D  0D                 	db	13
  1707  00757E  0A                 	db	10
  1708  00757F  00                 	db	0
  1709  007580                     STR_205:
  1710  007580  56                 	db	86	;'V'
  1711  007581  45                 	db	69	;'E'
  1712  007582  52                 	db	82	;'R'
  1713  007583  53                 	db	83	;'S'
  1714  007584  49                 	db	73	;'I'
  1715  007585  4F                 	db	79	;'O'
  1716  007586  4E                 	db	78	;'N'
  1717  007587  20                 	db	32
  1718  007588  2D                 	db	45
  1719  007589  20                 	db	32
  1720  00758A  44                 	db	68	;'D'
  1721  00758B  69                 	db	105	;'i'
  1722  00758C  73                 	db	115	;'s'
  1723  00758D  70                 	db	112	;'p'
  1724  00758E  6C                 	db	108	;'l'
  1725  00758F  61                 	db	97	;'a'
  1726  007590  79                 	db	121	;'y'
  1727  007591  20                 	db	32
  1728  007592  66                 	db	102	;'f'
  1729  007593  69                 	db	105	;'i'
  1730  007594  72                 	db	114	;'r'
  1731  007595  6D                 	db	109	;'m'
  1732  007596  77                 	db	119	;'w'
  1733  007597  61                 	db	97	;'a'
  1734  007598  72                 	db	114	;'r'
  1735  007599  65                 	db	101	;'e'
  1736  00759A  20                 	db	32
  1737  00759B  76                 	db	118	;'v'
  1738  00759C  65                 	db	101	;'e'
  1739  00759D  72                 	db	114	;'r'
  1740  00759E  73                 	db	115	;'s'
  1741  00759F  69                 	db	105	;'i'
  1742  0075A0  6F                 	db	111	;'o'
  1743  0075A1  6E                 	db	110	;'n'
  1744  0075A2  20                 	db	32
  1745  0075A3  69                 	db	105	;'i'
  1746  0075A4  6E                 	db	110	;'n'
  1747  0075A5  66                 	db	102	;'f'
  1748  0075A6  6F                 	db	111	;'o'
  1749  0075A7  72                 	db	114	;'r'
  1750  0075A8  6D                 	db	109	;'m'
  1751  0075A9  61                 	db	97	;'a'
  1752  0075AA  74                 	db	116	;'t'
  1753  0075AB  69                 	db	105	;'i'
  1754  0075AC  6F                 	db	111	;'o'
  1755  0075AD  6E                 	db	110	;'n'
  1756  0075AE  2E                 	db	46
  1757  0075AF  0D                 	db	13
  1758  0075B0  0A                 	db	10
  1759  0075B1  00                 	db	0
  1760  0075B2                     STR_225:
  1761  0075B2  20                 	db	32
  1762  0075B3  20                 	db	32
  1763  0075B4  20                 	db	32
  1764  0075B5  20                 	db	32
  1765  0075B6  20                 	db	32
  1766  0075B7  20                 	db	32
  1767  0075B8  20                 	db	32
  1768  0075B9  20                 	db	32
  1769  0075BA  20                 	db	32
  1770  0075BB  20                 	db	32
  1771  0075BC  20                 	db	32
  1772  0075BD  20                 	db	32
  1773  0075BE  20                 	db	32
  1774  0075BF  20                 	db	32
  1775  0075C0  20                 	db	32
  1776  0075C1  20                 	db	32
  1777  0075C2  46                 	db	70	;'F'
  1778  0075C3  6F                 	db	111	;'o'
  1779  0075C4  72                 	db	114	;'r'
  1780  0075C5  6D                 	db	109	;'m'
  1781  0075C6  61                 	db	97	;'a'
  1782  0075C7  74                 	db	116	;'t'
  1783  0075C8  3A                 	db	58	;':'
  1784  0075C9  20                 	db	32
  1785  0075CA  73                 	db	115	;'s'
  1786  0075CB  65                 	db	101	;'e'
  1787  0075CC  74                 	db	116	;'t'
  1788  0075CD  20                 	db	32
  1789  0075CE  72                 	db	114	;'r'
  1790  0075CF  77                 	db	119	;'w'
  1791  0075D0  74                 	db	116	;'t'
  1792  0075D1  69                 	db	105	;'i'
  1793  0075D2  6D                 	db	109	;'m'
  1794  0075D3  65                 	db	101	;'e'
  1795  0075D4  6F                 	db	111	;'o'
  1796  0075D5  75                 	db	117	;'u'
  1797  0075D6  74                 	db	116	;'t'
  1798  0075D7  20                 	db	32
  1799  0075D8  74                 	db	116	;'t'
  1800  0075D9  69                 	db	105	;'i'
  1801  0075DA  6D                 	db	109	;'m'
  1802  0075DB  65                 	db	101	;'e'
  1803  0075DC  6F                 	db	111	;'o'
  1804  0075DD  75                 	db	117	;'u'
  1805  0075DE  74                 	db	116	;'t'
  1806  0075DF  2E                 	db	46
  1807  0075E0  0D                 	db	13
  1808  0075E1  0A                 	db	10
  1809  0075E2  00                 	db	0
  1810  0075E3                     STR_2:
  1811  0075E3  43                 	db	67	;'C'
  1812  0075E4  6F                 	db	111	;'o'
  1813  0075E5  70                 	db	112	;'p'
  1814  0075E6  79                 	db	121	;'y'
  1815  0075E7  72                 	db	114	;'r'
  1816  0075E8  69                 	db	105	;'i'
  1817  0075E9  67                 	db	103	;'g'
  1818  0075EA  68                 	db	104	;'h'
  1819  0075EB  74                 	db	116	;'t'
  1820  0075EC  20                 	db	32
  1821  0075ED  28                 	db	40
  1822  0075EE  43                 	db	67	;'C'
  1823  0075EF  29                 	db	41
  1824  0075F0  20                 	db	32
  1825  0075F1  32                 	db	50	;'2'
  1826  0075F2  30                 	db	48	;'0'
  1827  0075F3  31                 	db	49	;'1'
  1828  0075F4  34                 	db	52	;'4'
  1829  0075F5  20                 	db	32
  1830  0075F6  47                 	db	71	;'G'
  1831  0075F7  72                 	db	114	;'r'
  1832  0075F8  6F                 	db	111	;'o'
  1833  0075F9  64                 	db	100	;'d'
  1834  0075FA  61                 	db	97	;'a'
  1835  0075FB  6E                 	db	110	;'n'
  1836  0075FC  73                 	db	115	;'s'
  1837  0075FD  20                 	db	32
  1838  0075FE  50                 	db	80	;'P'
  1839  0075FF  61                 	db	97	;'a'
  1840  007600  72                 	db	114	;'r'
  1841  007601  61                 	db	97	;'a'
  1842  007602  64                 	db	100	;'d'
  1843  007603  69                 	db	105	;'i'
  1844  007604  73                 	db	115	;'s'
  1845  007605  20                 	db	32
  1846  007606  41                 	db	65	;'A'
  1847  007607  42                 	db	66	;'B'
  1848  007608  2C                 	db	44
  1849  007609  20                 	db	32
  1850  00760A  53                 	db	83	;'S'
  1851  00760B  77                 	db	119	;'w'
  1852  00760C  65                 	db	101	;'e'
  1853  00760D  64                 	db	100	;'d'
  1854  00760E  65                 	db	101	;'e'
  1855  00760F  6E                 	db	110	;'n'
  1856  007610  0D                 	db	13
  1857  007611  0A                 	db	10
  1858  007612  00                 	db	0
  1859  007613                     STR_223:
  1860  007613  20                 	db	32
  1861  007614  20                 	db	32
  1862  007615  20                 	db	32
  1863  007616  20                 	db	32
  1864  007617  44                 	db	68	;'D'
  1865  007618  45                 	db	69	;'E'
  1866  007619  43                 	db	67	;'C'
  1867  00761A  49                 	db	73	;'I'
  1868  00761B  4D                 	db	77	;'M'
  1869  00761C  41                 	db	65	;'A'
  1870  00761D  4C                 	db	76	;'L'
  1871  00761E  20                 	db	32
  1872  00761F  2D                 	db	45
  1873  007620  20                 	db	32
  1874  007621  44                 	db	68	;'D'
  1875  007622  69                 	db	105	;'i'
  1876  007623  73                 	db	115	;'s'
  1877  007624  70                 	db	112	;'p'
  1878  007625  6C                 	db	108	;'l'
  1879  007626  61                 	db	97	;'a'
  1880  007627  79                 	db	121	;'y'
  1881  007628  20                 	db	32
  1882  007629  6E                 	db	110	;'n'
  1883  00762A  75                 	db	117	;'u'
  1884  00762B  6D                 	db	109	;'m'
  1885  00762C  65                 	db	101	;'e'
  1886  00762D  72                 	db	114	;'r'
  1887  00762E  69                 	db	105	;'i'
  1888  00762F  63                 	db	99	;'c'
  1889  007630  61                 	db	97	;'a'
  1890  007631  6C                 	db	108	;'l'
  1891  007632  73                 	db	115	;'s'
  1892  007633  20                 	db	32
  1893  007634  69                 	db	105	;'i'
  1894  007635  6E                 	db	110	;'n'
  1895  007636  20                 	db	32
  1896  007637  64                 	db	100	;'d'
  1897  007638  65                 	db	101	;'e'
  1898  007639  63                 	db	99	;'c'
  1899  00763A  69                 	db	105	;'i'
  1900  00763B  6D                 	db	109	;'m'
  1901  00763C  61                 	db	97	;'a'
  1902  00763D  6C                 	db	108	;'l'
  1903  00763E  2E                 	db	46
  1904  00763F  0D                 	db	13
  1905  007640  0A                 	db	10
  1906  007641  00                 	db	0
  1907  007642                     STR_222:
  1908  007642  20                 	db	32
  1909  007643  20                 	db	32
  1910  007644  20                 	db	32
  1911  007645  20                 	db	32
  1912  007646  48                 	db	72	;'H'
  1913  007647  45                 	db	69	;'E'
  1914  007648  58                 	db	88	;'X'
  1915  007649  20                 	db	32
  1916  00764A  2D                 	db	45
  1917  00764B  20                 	db	32
  1918  00764C  44                 	db	68	;'D'
  1919  00764D  69                 	db	105	;'i'
  1920  00764E  73                 	db	115	;'s'
  1921  00764F  70                 	db	112	;'p'
  1922  007650  6C                 	db	108	;'l'
  1923  007651  61                 	db	97	;'a'
  1924  007652  79                 	db	121	;'y'
  1925  007653  20                 	db	32
  1926  007654  6E                 	db	110	;'n'
  1927  007655  75                 	db	117	;'u'
  1928  007656  6D                 	db	109	;'m'
  1929  007657  65                 	db	101	;'e'
  1930  007658  72                 	db	114	;'r'
  1931  007659  69                 	db	105	;'i'
  1932  00765A  63                 	db	99	;'c'
  1933  00765B  61                 	db	97	;'a'
  1934  00765C  6C                 	db	108	;'l'
  1935  00765D  73                 	db	115	;'s'
  1936  00765E  20                 	db	32
  1937  00765F  69                 	db	105	;'i'
  1938  007660  6E                 	db	110	;'n'
  1939  007661  20                 	db	32
  1940  007662  68                 	db	104	;'h'
  1941  007663  65                 	db	101	;'e'
  1942  007664  78                 	db	120	;'x'
  1943  007665  61                 	db	97	;'a'
  1944  007666  64                 	db	100	;'d'
  1945  007667  65                 	db	101	;'e'
  1946  007668  63                 	db	99	;'c'
  1947  007669  69                 	db	105	;'i'
  1948  00766A  6D                 	db	109	;'m'
  1949  00766B  61                 	db	97	;'a'
  1950  00766C  6C                 	db	108	;'l'
  1951  00766D  2E                 	db	46
  1952  00766E  0D                 	db	13
  1953  00766F  0A                 	db	10
  1954  007670  00                 	db	0
  1955  007671                     STR_213:
  1956  007671  46                 	db	70	;'F'
  1957  007672  49                 	db	73	;'I'
  1958  007673  4E                 	db	78	;'N'
  1959  007674  44                 	db	68	;'D'
  1960  007675  20                 	db	32
  1961  007676  2D                 	db	45
  1962  007677  20                 	db	32
  1963  007678  46                 	db	70	;'F'
  1964  007679  69                 	db	105	;'i'
  1965  00767A  6E                 	db	110	;'n'
  1966  00767B  64                 	db	100	;'d'
  1967  00767C  20                 	db	32
  1968  00767D  61                 	db	97	;'a'
  1969  00767E  76                 	db	118	;'v'
  1970  00767F  61                 	db	97	;'a'
  1971  007680  69                 	db	105	;'i'
  1972  007681  6C                 	db	108	;'l'
  1973  007682  61                 	db	97	;'a'
  1974  007683  62                 	db	98	;'b'
  1975  007684  6C                 	db	108	;'l'
  1976  007685  65                 	db	101	;'e'
  1977  007686  20                 	db	32
  1978  007687  43                 	db	67	;'C'
  1979  007688  41                 	db	65	;'A'
  1980  007689  4E                 	db	78	;'N'
  1981  00768A  34                 	db	52	;'4'
  1982  00768B  56                 	db	86	;'V'
  1983  00768C  53                 	db	83	;'S'
  1984  00768D  43                 	db	67	;'C'
  1985  00768E  50                 	db	80	;'P'
  1986  00768F  20                 	db	32
  1987  007690  6E                 	db	110	;'n'
  1988  007691  6F                 	db	111	;'o'
  1989  007692  64                 	db	100	;'d'
  1990  007693  65                 	db	101	;'e'
  1991  007694  73                 	db	115	;'s'
  1992  007695  20                 	db	32
  1993  007696  6F                 	db	111	;'o'
  1994  007697  6E                 	db	110	;'n'
  1995  007698  20                 	db	32
  1996  007699  62                 	db	98	;'b'
  1997  00769A  75                 	db	117	;'u'
  1998  00769B  73                 	db	115	;'s'
  1999  00769C  2E                 	db	46
  2000  00769D  0D                 	db	13
  2001  00769E  0A                 	db	10
  2002  00769F  00                 	db	0
  2003  0076A0                     STR_201:
  2004  0076A0  53                 	db	83	;'S'
  2005  0076A1  49                 	db	73	;'I'
  2006  0076A2  4C                 	db	76	;'L'
  2007  0076A3  45                 	db	69	;'E'
  2008  0076A4  4E                 	db	78	;'N'
  2009  0076A5  54                 	db	84	;'T'
  2010  0076A6  20                 	db	32
  2011  0076A7  2D                 	db	45
  2012  0076A8  20                 	db	32
  2013  0076A9  4F                 	db	79	;'O'
  2014  0076AA  70                 	db	112	;'p'
  2015  0076AB  65                 	db	101	;'e'
  2016  0076AC  6E                 	db	110	;'n'
  2017  0076AD  20                 	db	32
  2018  0076AE  43                 	db	67	;'C'
  2019  0076AF  41                 	db	65	;'A'
  2020  0076B0  4E                 	db	78	;'N'
  2021  0076B1  20                 	db	32
  2022  0076B2  69                 	db	105	;'i'
  2023  0076B3  6E                 	db	110	;'n'
  2024  0076B4  74                 	db	116	;'t'
  2025  0076B5  65                 	db	101	;'e'
  2026  0076B6  72                 	db	114	;'r'
  2027  0076B7  66                 	db	102	;'f'
  2028  0076B8  61                 	db	97	;'a'
  2029  0076B9  63                 	db	99	;'c'
  2030  0076BA  65                 	db	101	;'e'
  2031  0076BB  20                 	db	32
  2032  0076BC  69                 	db	105	;'i'
  2033  0076BD  6E                 	db	110	;'n'
  2034  0076BE  20                 	db	32
  2035  0076BF  73                 	db	115	;'s'
  2036  0076C0  69                 	db	105	;'i'
  2037  0076C1  6C                 	db	108	;'l'
  2038  0076C2  65                 	db	101	;'e'
  2039  0076C3  6E                 	db	110	;'n'
  2040  0076C4  74                 	db	116	;'t'
  2041  0076C5  20                 	db	32
  2042  0076C6  6D                 	db	109	;'m'
  2043  0076C7  6F                 	db	111	;'o'
  2044  0076C8  64                 	db	100	;'d'
  2045  0076C9  65                 	db	101	;'e'
  2046  0076CA  2E                 	db	46
  2047  0076CB  0D                 	db	13
  2048  0076CC  0A                 	db	10
  2049  0076CD  00                 	db	0
  2050  0076CE                     STR_206:
  2051  0076CE  49                 	db	73	;'I'
  2052  0076CF  46                 	db	70	;'F'
  2053  0076D0  4D                 	db	77	;'M'
  2054  0076D1  4F                 	db	79	;'O'
  2055  0076D2  44                 	db	68	;'D'
  2056  0076D3  45                 	db	69	;'E'
  2057  0076D4  20                 	db	32
  2058  0076D5  2D                 	db	45
  2059  0076D6  20                 	db	32
  2060  0076D7  44                 	db	68	;'D'
  2061  0076D8  69                 	db	105	;'i'
  2062  0076D9  73                 	db	115	;'s'
  2063  0076DA  70                 	db	112	;'p'
  2064  0076DB  6C                 	db	108	;'l'
  2065  0076DC  61                 	db	97	;'a'
  2066  0076DD  79                 	db	121	;'y'
  2067  0076DE  20                 	db	32
  2068  0076DF  73                 	db	115	;'s'
  2069  0076E0  65                 	db	101	;'e'
  2070  0076E1  6C                 	db	108	;'l'
  2071  0076E2  65                 	db	101	;'e'
  2072  0076E3  63                 	db	99	;'c'
  2073  0076E4  74                 	db	116	;'t'
  2074  0076E5  65                 	db	101	;'e'
  2075  0076E6  64                 	db	100	;'d'
  2076  0076E7  20                 	db	32
  2077  0076E8  69                 	db	105	;'i'
  2078  0076E9  6E                 	db	110	;'n'
  2079  0076EA  74                 	db	116	;'t'
  2080  0076EB  65                 	db	101	;'e'
  2081  0076EC  72                 	db	114	;'r'
  2082  0076ED  66                 	db	102	;'f'
  2083  0076EE  61                 	db	97	;'a'
  2084  0076EF  63                 	db	99	;'c'
  2085  0076F0  65                 	db	101	;'e'
  2086  0076F1  20                 	db	32
  2087  0076F2  6D                 	db	109	;'m'
  2088  0076F3  6F                 	db	111	;'o'
  2089  0076F4  64                 	db	100	;'d'
  2090  0076F5  65                 	db	101	;'e'
  2091  0076F6  2E                 	db	46
  2092  0076F7  0D                 	db	13
  2093  0076F8  0A                 	db	10
  2094  0076F9  00                 	db	0
  2095  0076FA                     STR_200:
  2096  0076FA  4F                 	db	79	;'O'
  2097  0076FB  50                 	db	80	;'P'
  2098  0076FC  45                 	db	69	;'E'
  2099  0076FD  4E                 	db	78	;'N'
  2100  0076FE  20                 	db	32
  2101  0076FF  2D                 	db	45
  2102  007700  20                 	db	32
  2103  007701  4F                 	db	79	;'O'
  2104  007702  70                 	db	112	;'p'
  2105  007703  65                 	db	101	;'e'
  2106  007704  6E                 	db	110	;'n'
  2107  007705  20                 	db	32
  2108  007706  43                 	db	67	;'C'
  2109  007707  41                 	db	65	;'A'
  2110  007708  4E                 	db	78	;'N'
  2111  007709  20                 	db	32
  2112  00770A  69                 	db	105	;'i'
  2113  00770B  6E                 	db	110	;'n'
  2114  00770C  74                 	db	116	;'t'
  2115  00770D  65                 	db	101	;'e'
  2116  00770E  72                 	db	114	;'r'
  2117  00770F  66                 	db	102	;'f'
  2118  007710  61                 	db	97	;'a'
  2119  007711  63                 	db	99	;'c'
  2120  007712  65                 	db	101	;'e'
  2121  007713  20                 	db	32
  2122  007714  69                 	db	105	;'i'
  2123  007715  6E                 	db	110	;'n'
  2124  007716  20                 	db	32
  2125  007717  6E                 	db	110	;'n'
  2126  007718  6F                 	db	111	;'o'
  2127  007719  72                 	db	114	;'r'
  2128  00771A  6D                 	db	109	;'m'
  2129  00771B  61                 	db	97	;'a'
  2130  00771C  6C                 	db	108	;'l'
  2131  00771D  20                 	db	32
  2132  00771E  6D                 	db	109	;'m'
  2133  00771F  6F                 	db	111	;'o'
  2134  007720  64                 	db	100	;'d'
  2135  007721  65                 	db	101	;'e'
  2136  007722  2E                 	db	46
  2137  007723  0D                 	db	13
  2138  007724  0A                 	db	10
  2139  007725  00                 	db	0
  2140  007726                     STR_108:
  2141  007726  2B                 	db	43
  2142  007727  4F                 	db	79	;'O'
  2143  007728  4B                 	db	75	;'K'
  2144  007729  20                 	db	32
  2145  00772A  2D                 	db	45
  2146  00772B  20                 	db	32
  2147  00772C  4E                 	db	78	;'N'
  2148  00772D  75                 	db	117	;'u'
  2149  00772E  6D                 	db	109	;'m'
  2150  00772F  65                 	db	101	;'e'
  2151  007730  72                 	db	114	;'r'
  2152  007731  69                 	db	105	;'i'
  2153  007732  63                 	db	99	;'c'
  2154  007733  61                 	db	97	;'a'
  2155  007734  6C                 	db	108	;'l'
  2156  007735  20                 	db	32
  2157  007736  6F                 	db	111	;'o'
  2158  007737  75                 	db	117	;'u'
  2159  007738  74                 	db	116	;'t'
  2160  007739  70                 	db	112	;'p'
  2161  00773A  75                 	db	117	;'u'
  2162  00773B  74                 	db	116	;'t'
  2163  00773C  20                 	db	32
  2164  00773D  6E                 	db	110	;'n'
  2165  00773E  6F                 	db	111	;'o'
  2166  00773F  77                 	db	119	;'w'
  2167  007740  20                 	db	32
  2168  007741  69                 	db	105	;'i'
  2169  007742  6E                 	db	110	;'n'
  2170  007743  20                 	db	32
  2171  007744  68                 	db	104	;'h'
  2172  007745  65                 	db	101	;'e'
  2173  007746  78                 	db	120	;'x'
  2174  007747  61                 	db	97	;'a'
  2175  007748  64                 	db	100	;'d'
  2176  007749  65                 	db	101	;'e'
  2177  00774A  63                 	db	99	;'c'
  2178  00774B  69                 	db	105	;'i'
  2179  00774C  6D                 	db	109	;'m'
  2180  00774D  61                 	db	97	;'a'
  2181  00774E  6C                 	db	108	;'l'
  2182  00774F  0D                 	db	13
  2183  007750  0A                 	db	10
  2184  007751  00                 	db	0
  2185  007752                     STR_87:
  2186  007752  2D                 	db	45
  2187  007753  45                 	db	69	;'E'
  2188  007754  52                 	db	82	;'R'
  2189  007755  52                 	db	82	;'R'
  2190  007756  4F                 	db	79	;'O'
  2191  007757  52                 	db	82	;'R'
  2192  007758  20                 	db	32
  2193  007759  2D                 	db	45
  2194  00775A  20                 	db	32
  2195  00775B  66                 	db	102	;'f'
  2196  00775C  69                 	db	105	;'i'
  2197  00775D  6C                 	db	108	;'l'
  2198  00775E  74                 	db	116	;'t'
  2199  00775F  65                 	db	101	;'e'
  2200  007760  72                 	db	114	;'r'
  2201  007761  20                 	db	32
  2202  007762  66                 	db	102	;'f'
  2203  007763  6F                 	db	111	;'o'
  2204  007764  72                 	db	114	;'r'
  2205  007765  20                 	db	32
  2206  007766  70                 	db	112	;'p'
  2207  007767  72                 	db	114	;'r'
  2208  007768  69                 	db	105	;'i'
  2209  007769  6F                 	db	111	;'o'
  2210  00776A  72                 	db	114	;'r'
  2211  00776B  69                 	db	105	;'i'
  2212  00776C  74                 	db	116	;'t'
  2213  00776D  79                 	db	121	;'y'
  2214  00776E  20                 	db	32
  2215  00776F  69                 	db	105	;'i'
  2216  007770  73                 	db	115	;'s'
  2217  007771  20                 	db	32
  2218  007772  6D                 	db	109	;'m'
  2219  007773  69                 	db	105	;'i'
  2220  007774  73                 	db	115	;'s'
  2221  007775  73                 	db	115	;'s'
  2222  007776  69                 	db	105	;'i'
  2223  007777  6E                 	db	110	;'n'
  2224  007778  67                 	db	103	;'g'
  2225  007779  0D                 	db	13
  2226  00777A  0A                 	db	10
  2227  00777B  00                 	db	0
  2228  00777C                     STR_93:
  2229  00777C  2D                 	db	45
  2230  00777D  45                 	db	69	;'E'
  2231  00777E  52                 	db	82	;'R'
  2232  00777F  52                 	db	82	;'R'
  2233  007780  4F                 	db	79	;'O'
  2234  007781  52                 	db	82	;'R'
  2235  007782  20                 	db	32
  2236  007783  2D                 	db	45
  2237  007784  20                 	db	32
  2238  007785  66                 	db	102	;'f'
  2239  007786  69                 	db	105	;'i'
  2240  007787  6C                 	db	108	;'l'
  2241  007788  74                 	db	116	;'t'
  2242  007789  65                 	db	101	;'e'
  2243  00778A  72                 	db	114	;'r'
  2244  00778B  20                 	db	32
  2245  00778C  66                 	db	102	;'f'
  2246  00778D  6F                 	db	111	;'o'
  2247  00778E  72                 	db	114	;'r'
  2248  00778F  20                 	db	32
  2249  007790  6E                 	db	110	;'n'
  2250  007791  69                 	db	105	;'i'
  2251  007792  64                 	db	100	;'d'
  2252  007793  65                 	db	101	;'e'
  2253  007794  20                 	db	32
  2254  007795  69                 	db	105	;'i'
  2255  007796  64                 	db	100	;'d'
  2256  007797  20                 	db	32
  2257  007798  69                 	db	105	;'i'
  2258  007799  73                 	db	115	;'s'
  2259  00779A  20                 	db	32
  2260  00779B  6D                 	db	109	;'m'
  2261  00779C  69                 	db	105	;'i'
  2262  00779D  73                 	db	115	;'s'
  2263  00779E  73                 	db	115	;'s'
  2264  00779F  69                 	db	105	;'i'
  2265  0077A0  6E                 	db	110	;'n'
  2266  0077A1  67                 	db	103	;'g'
  2267  0077A2  0D                 	db	13
  2268  0077A3  0A                 	db	10
  2269  0077A4  00                 	db	0
  2270  0077A5                     STR_212:
  2271  0077A5  48                 	db	72	;'H'
  2272  0077A6  45                 	db	69	;'E'
  2273  0077A7  4C                 	db	76	;'L'
  2274  0077A8  50                 	db	80	;'P'
  2275  0077A9  20                 	db	32
  2276  0077AA  2D                 	db	45
  2277  0077AB  20                 	db	32
  2278  0077AC  44                 	db	68	;'D'
  2279  0077AD  69                 	db	105	;'i'
  2280  0077AE  73                 	db	115	;'s'
  2281  0077AF  70                 	db	112	;'p'
  2282  0077B0  6C                 	db	108	;'l'
  2283  0077B1  61                 	db	97	;'a'
  2284  0077B2  79                 	db	121	;'y'
  2285  0077B3  20                 	db	32
  2286  0077B4  74                 	db	116	;'t'
  2287  0077B5  68                 	db	104	;'h'
  2288  0077B6  69                 	db	105	;'i'
  2289  0077B7  73                 	db	115	;'s'
  2290  0077B8  20                 	db	32
  2291  0077B9  68                 	db	104	;'h'
  2292  0077BA  65                 	db	101	;'e'
  2293  0077BB  6C                 	db	108	;'l'
  2294  0077BC  70                 	db	112	;'p'
  2295  0077BD  20                 	db	32
  2296  0077BE  69                 	db	105	;'i'
  2297  0077BF  6E                 	db	110	;'n'
  2298  0077C0  66                 	db	102	;'f'
  2299  0077C1  6F                 	db	111	;'o'
  2300  0077C2  72                 	db	114	;'r'
  2301  0077C3  6D                 	db	109	;'m'
  2302  0077C4  61                 	db	97	;'a'
  2303  0077C5  74                 	db	116	;'t'
  2304  0077C6  69                 	db	105	;'i'
  2305  0077C7  6F                 	db	111	;'o'
  2306  0077C8  6E                 	db	110	;'n'
  2307  0077C9  2E                 	db	46
  2308  0077CA  0D                 	db	13
  2309  0077CB  0A                 	db	10
  2310  0077CC  00                 	db	0
  2311  0077CD                     STR_99:
  2312  0077CD  2D                 	db	45
  2313  0077CE  45                 	db	69	;'E'
  2314  0077CF  52                 	db	82	;'R'
  2315  0077D0  52                 	db	82	;'R'
  2316  0077D1  4F                 	db	79	;'O'
  2317  0077D2  52                 	db	82	;'R'
  2318  0077D3  20                 	db	32
  2319  0077D4  2D                 	db	45
  2320  0077D5  20                 	db	32
  2321  0077D6  6D                 	db	109	;'m'
  2322  0077D7  61                 	db	97	;'a'
  2323  0077D8  73                 	db	115	;'s'
  2324  0077D9  6B                 	db	107	;'k'
  2325  0077DA  20                 	db	32
  2326  0077DB  66                 	db	102	;'f'
  2327  0077DC  6F                 	db	111	;'o'
  2328  0077DD  72                 	db	114	;'r'
  2329  0077DE  20                 	db	32
  2330  0077DF  70                 	db	112	;'p'
  2331  0077E0  72                 	db	114	;'r'
  2332  0077E1  69                 	db	105	;'i'
  2333  0077E2  6F                 	db	111	;'o'
  2334  0077E3  72                 	db	114	;'r'
  2335  0077E4  69                 	db	105	;'i'
  2336  0077E5  74                 	db	116	;'t'
  2337  0077E6  79                 	db	121	;'y'
  2338  0077E7  20                 	db	32
  2339  0077E8  69                 	db	105	;'i'
  2340  0077E9  73                 	db	115	;'s'
  2341  0077EA  20                 	db	32
  2342  0077EB  6D                 	db	109	;'m'
  2343  0077EC  69                 	db	105	;'i'
  2344  0077ED  73                 	db	115	;'s'
  2345  0077EE  73                 	db	115	;'s'
  2346  0077EF  69                 	db	105	;'i'
  2347  0077F0  6E                 	db	110	;'n'
  2348  0077F1  67                 	db	103	;'g'
  2349  0077F2  0D                 	db	13
  2350  0077F3  0A                 	db	10
  2351  0077F4  00                 	db	0
  2352  0077F5                     STR_110:
  2353  0077F5  2B                 	db	43
  2354  0077F6  4F                 	db	79	;'O'
  2355  0077F7  4B                 	db	75	;'K'
  2356  0077F8  20                 	db	32
  2357  0077F9  2D                 	db	45
  2358  0077FA  20                 	db	32
  2359  0077FB  4E                 	db	78	;'N'
  2360  0077FC  75                 	db	117	;'u'
  2361  0077FD  6D                 	db	109	;'m'
  2362  0077FE  65                 	db	101	;'e'
  2363  0077FF  72                 	db	114	;'r'
  2364  007800  69                 	db	105	;'i'
  2365  007801  63                 	db	99	;'c'
  2366  007802  61                 	db	97	;'a'
  2367  007803  6C                 	db	108	;'l'
  2368  007804  20                 	db	32
  2369  007805  6F                 	db	111	;'o'
  2370  007806  75                 	db	117	;'u'
  2371  007807  74                 	db	116	;'t'
  2372  007808  70                 	db	112	;'p'
  2373  007809  75                 	db	117	;'u'
  2374  00780A  74                 	db	116	;'t'
  2375  00780B  20                 	db	32
  2376  00780C  6E                 	db	110	;'n'
  2377  00780D  6F                 	db	111	;'o'
  2378  00780E  77                 	db	119	;'w'
  2379  00780F  20                 	db	32
  2380  007810  69                 	db	105	;'i'
  2381  007811  6E                 	db	110	;'n'
  2382  007812  20                 	db	32
  2383  007813  64                 	db	100	;'d'
  2384  007814  65                 	db	101	;'e'
  2385  007815  63                 	db	99	;'c'
  2386  007816  69                 	db	105	;'i'
  2387  007817  6D                 	db	109	;'m'
  2388  007818  61                 	db	97	;'a'
  2389  007819  6C                 	db	108	;'l'
  2390  00781A  0D                 	db	13
  2391  00781B  0A                 	db	10
  2392  00781C  00                 	db	0
  2393  00781D                     STR_85:
  2394  00781D  2D                 	db	45
  2395  00781E  45                 	db	69	;'E'
  2396  00781F  52                 	db	82	;'R'
  2397  007820  52                 	db	82	;'R'
  2398  007821  4F                 	db	79	;'O'
  2399  007822  52                 	db	82	;'R'
  2400  007823  20                 	db	32
  2401  007824  2D                 	db	45
  2402  007825  20                 	db	32
  2403  007826  4E                 	db	78	;'N'
  2404  007827  6F                 	db	111	;'o'
  2405  007828  20                 	db	32
  2406  007829  66                 	db	102	;'f'
  2407  00782A  69                 	db	105	;'i'
  2408  00782B  6C                 	db	108	;'l'
  2409  00782C  74                 	db	116	;'t'
  2410  00782D  65                 	db	101	;'e'
  2411  00782E  72                 	db	114	;'r'
  2412  00782F  20                 	db	32
  2413  007830  6E                 	db	110	;'n'
  2414  007831  75                 	db	117	;'u'
  2415  007832  6D                 	db	109	;'m'
  2416  007833  62                 	db	98	;'b'
  2417  007834  65                 	db	101	;'e'
  2418  007835  72                 	db	114	;'r'
  2419  007836  20                 	db	32
  2420  007837  73                 	db	115	;'s'
  2421  007838  70                 	db	112	;'p'
  2422  007839  65                 	db	101	;'e'
  2423  00783A  63                 	db	99	;'c'
  2424  00783B  69                 	db	105	;'i'
  2425  00783C  66                 	db	102	;'f'
  2426  00783D  69                 	db	105	;'i'
  2427  00783E  65                 	db	101	;'e'
  2428  00783F  64                 	db	100	;'d'
  2429  007840  2E                 	db	46
  2430  007841  0D                 	db	13
  2431  007842  0A                 	db	10
  2432  007843  00                 	db	0
  2433  007844                     STR_211:
  2434  007844  45                 	db	69	;'E'
  2435  007845  52                 	db	82	;'R'
  2436  007846  52                 	db	82	;'R'
  2437  007847  20                 	db	32
  2438  007848  2D                 	db	45
  2439  007849  20                 	db	32
  2440  00784A  44                 	db	68	;'D'
  2441  00784B  69                 	db	105	;'i'
  2442  00784C  73                 	db	115	;'s'
  2443  00784D  70                 	db	112	;'p'
  2444  00784E  6C                 	db	108	;'l'
  2445  00784F  61                 	db	97	;'a'
  2446  007850  79                 	db	121	;'y'
  2447  007851  20                 	db	32
  2448  007852  43                 	db	67	;'C'
  2449  007853  41                 	db	65	;'A'
  2450  007854  4E                 	db	78	;'N'
  2451  007855  20                 	db	32
  2452  007856  65                 	db	101	;'e'
  2453  007857  72                 	db	114	;'r'
  2454  007858  72                 	db	114	;'r'
  2455  007859  6F                 	db	111	;'o'
  2456  00785A  72                 	db	114	;'r'
  2457  00785B  20                 	db	32
  2458  00785C  69                 	db	105	;'i'
  2459  00785D  6E                 	db	110	;'n'
  2460  00785E  66                 	db	102	;'f'
  2461  00785F  6F                 	db	111	;'o'
  2462  007860  72                 	db	114	;'r'
  2463  007861  6D                 	db	109	;'m'
  2464  007862  61                 	db	97	;'a'
  2465  007863  74                 	db	116	;'t'
  2466  007864  69                 	db	105	;'i'
  2467  007865  6F                 	db	111	;'o'
  2468  007866  6E                 	db	110	;'n'
  2469  007867  2E                 	db	46
  2470  007868  0D                 	db	13
  2471  007869  0A                 	db	10
  2472  00786A  00                 	db	0
  2473  00786B                     STR_197:
  2474  00786B  48                 	db	72	;'H'
  2475  00786C  65                 	db	101	;'e'
  2476  00786D  6C                 	db	108	;'l'
  2477  00786E  70                 	db	112	;'p'
  2478  00786F  20                 	db	32
  2479  007870  66                 	db	102	;'f'
  2480  007871  6F                 	db	111	;'o'
  2481  007872  72                 	db	114	;'r'
  2482  007873  20                 	db	32
  2483  007874  74                 	db	116	;'t'
  2484  007875  68                 	db	104	;'h'
  2485  007876  65                 	db	101	;'e'
  2486  007877  20                 	db	32
  2487  007878  46                 	db	70	;'F'
  2488  007879  72                 	db	114	;'r'
  2489  00787A  61                 	db	97	;'a'
  2490  00787B  6E                 	db	110	;'n'
  2491  00787C  6B                 	db	107	;'k'
  2492  00787D  66                 	db	102	;'f'
  2493  00787E  75                 	db	117	;'u'
  2494  00787F  72                 	db	114	;'r'
  2495  007880  74                 	db	116	;'t'
  2496  007881  20                 	db	32
  2497  007882  52                 	db	82	;'R'
  2498  007883  53                 	db	83	;'S'
  2499  007884  2D                 	db	45
  2500  007885  32                 	db	50	;'2'
  2501  007886  33                 	db	51	;'3'
  2502  007887  32                 	db	50	;'2'
  2503  007888  20                 	db	32
  2504  007889  6D                 	db	109	;'m'
  2505  00788A  6F                 	db	111	;'o'
  2506  00788B  64                 	db	100	;'d'
  2507  00788C  75                 	db	117	;'u'
  2508  00788D  6C                 	db	108	;'l'
  2509  00788E  65                 	db	101	;'e'
  2510  00788F  0D                 	db	13
  2511  007890  0A                 	db	10
  2512  007891  00                 	db	0
  2513  007892                     STR_105:
  2514  007892  2D                 	db	45
  2515  007893  45                 	db	69	;'E'
  2516  007894  52                 	db	82	;'R'
  2517  007895  52                 	db	82	;'R'
  2518  007896  4F                 	db	79	;'O'
  2519  007897  52                 	db	82	;'R'
  2520  007898  20                 	db	32
  2521  007899  2D                 	db	45
  2522  00789A  20                 	db	32
  2523  00789B  6D                 	db	109	;'m'
  2524  00789C  61                 	db	97	;'a'
  2525  00789D  73                 	db	115	;'s'
  2526  00789E  6B                 	db	107	;'k'
  2527  00789F  20                 	db	32
  2528  0078A0  66                 	db	102	;'f'
  2529  0078A1  6F                 	db	111	;'o'
  2530  0078A2  72                 	db	114	;'r'
  2531  0078A3  20                 	db	32
  2532  0078A4  6E                 	db	110	;'n'
  2533  0078A5  69                 	db	105	;'i'
  2534  0078A6  64                 	db	100	;'d'
  2535  0078A7  65                 	db	101	;'e'
  2536  0078A8  20                 	db	32
  2537  0078A9  69                 	db	105	;'i'
  2538  0078AA  64                 	db	100	;'d'
  2539  0078AB  20                 	db	32
  2540  0078AC  69                 	db	105	;'i'
  2541  0078AD  73                 	db	115	;'s'
  2542  0078AE  20                 	db	32
  2543  0078AF  6D                 	db	109	;'m'
  2544  0078B0  69                 	db	105	;'i'
  2545  0078B1  73                 	db	115	;'s'
  2546  0078B2  73                 	db	115	;'s'
  2547  0078B3  69                 	db	105	;'i'
  2548  0078B4  6E                 	db	110	;'n'
  2549  0078B5  67                 	db	103	;'g'
  2550  0078B6  0D                 	db	13
  2551  0078B7  0A                 	db	10
  2552  0078B8  00                 	db	0
  2553  0078B9                     STR_89:
  2554  0078B9  2D                 	db	45
  2555  0078BA  45                 	db	69	;'E'
  2556  0078BB  52                 	db	82	;'R'
  2557  0078BC  52                 	db	82	;'R'
  2558  0078BD  4F                 	db	79	;'O'
  2559  0078BE  52                 	db	82	;'R'
  2560  0078BF  20                 	db	32
  2561  0078C0  2D                 	db	45
  2562  0078C1  20                 	db	32
  2563  0078C2  66                 	db	102	;'f'
  2564  0078C3  69                 	db	105	;'i'
  2565  0078C4  6C                 	db	108	;'l'
  2566  0078C5  74                 	db	116	;'t'
  2567  0078C6  65                 	db	101	;'e'
  2568  0078C7  72                 	db	114	;'r'
  2569  0078C8  20                 	db	32
  2570  0078C9  66                 	db	102	;'f'
  2571  0078CA  6F                 	db	111	;'o'
  2572  0078CB  72                 	db	114	;'r'
  2573  0078CC  20                 	db	32
  2574  0078CD  63                 	db	99	;'c'
  2575  0078CE  6C                 	db	108	;'l'
  2576  0078CF  61                 	db	97	;'a'
  2577  0078D0  73                 	db	115	;'s'
  2578  0078D1  73                 	db	115	;'s'
  2579  0078D2  20                 	db	32
  2580  0078D3  69                 	db	105	;'i'
  2581  0078D4  73                 	db	115	;'s'
  2582  0078D5  20                 	db	32
  2583  0078D6  6D                 	db	109	;'m'
  2584  0078D7  69                 	db	105	;'i'
  2585  0078D8  73                 	db	115	;'s'
  2586  0078D9  73                 	db	115	;'s'
  2587  0078DA  69                 	db	105	;'i'
  2588  0078DB  6E                 	db	110	;'n'
  2589  0078DC  67                 	db	103	;'g'
  2590  0078DD  0D                 	db	13
  2591  0078DE  0A                 	db	10
  2592  0078DF  00                 	db	0
  2593  0078E0                     STR_228:
  2594  0078E0  20                 	db	32
  2595  0078E1  20                 	db	32
  2596  0078E2  20                 	db	32
  2597  0078E3  20                 	db	32
  2598  0078E4  20                 	db	32
  2599  0078E5  20                 	db	32
  2600  0078E6  20                 	db	32
  2601  0078E7  20                 	db	32
  2602  0078E8  20                 	db	32
  2603  0078E9  20                 	db	32
  2604  0078EA  20                 	db	32
  2605  0078EB  4D                 	db	77	;'M'
  2606  0078EC  6F                 	db	111	;'o'
  2607  0078ED  64                 	db	100	;'d'
  2608  0078EE  65                 	db	101	;'e'
  2609  0078EF  73                 	db	115	;'s'
  2610  0078F0  3A                 	db	58	;':'
  2611  0078F1  20                 	db	32
  2612  0078F2  76                 	db	118	;'v'
  2613  0078F3  65                 	db	101	;'e'
  2614  0078F4  72                 	db	114	;'r'
  2615  0078F5  62                 	db	98	;'b'
  2616  0078F6  6F                 	db	111	;'o'
  2617  0078F7  73                 	db	115	;'s'
  2618  0078F8  65                 	db	101	;'e'
  2619  0078F9  7C                 	db	124
  2620  0078FA  76                 	db	118	;'v'
  2621  0078FB  73                 	db	115	;'s'
  2622  0078FC  63                 	db	99	;'c'
  2623  0078FD  70                 	db	112	;'p'
  2624  0078FE  7C                 	db	124
  2625  0078FF  73                 	db	115	;'s'
  2626  007900  6C                 	db	108	;'l'
  2627  007901  63                 	db	99	;'c'
  2628  007902  61                 	db	97	;'a'
  2629  007903  6E                 	db	110	;'n'
  2630  007904  0D                 	db	13
  2631  007905  0A                 	db	10
  2632  007906  00                 	db	0
  2633  007907                     STR_91:
  2634  007907  2D                 	db	45
  2635  007908  45                 	db	69	;'E'
  2636  007909  52                 	db	82	;'R'
  2637  00790A  52                 	db	82	;'R'
  2638  00790B  4F                 	db	79	;'O'
  2639  00790C  52                 	db	82	;'R'
  2640  00790D  20                 	db	32
  2641  00790E  2D                 	db	45
  2642  00790F  20                 	db	32
  2643  007910  66                 	db	102	;'f'
  2644  007911  69                 	db	105	;'i'
  2645  007912  6C                 	db	108	;'l'
  2646  007913  74                 	db	116	;'t'
  2647  007914  65                 	db	101	;'e'
  2648  007915  72                 	db	114	;'r'
  2649  007916  20                 	db	32
  2650  007917  66                 	db	102	;'f'
  2651  007918  6F                 	db	111	;'o'
  2652  007919  72                 	db	114	;'r'
  2653  00791A  20                 	db	32
  2654  00791B  74                 	db	116	;'t'
  2655  00791C  79                 	db	121	;'y'
  2656  00791D  70                 	db	112	;'p'
  2657  00791E  65                 	db	101	;'e'
  2658  00791F  20                 	db	32
  2659  007920  69                 	db	105	;'i'
  2660  007921  73                 	db	115	;'s'
  2661  007922  20                 	db	32
  2662  007923  6D                 	db	109	;'m'
  2663  007924  69                 	db	105	;'i'
  2664  007925  73                 	db	115	;'s'
  2665  007926  73                 	db	115	;'s'
  2666  007927  69                 	db	105	;'i'
  2667  007928  6E                 	db	110	;'n'
  2668  007929  67                 	db	103	;'g'
  2669  00792A  0D                 	db	13
  2670  00792B  0A                 	db	10
  2671  00792C  00                 	db	0
  2672  00792D                     STR_97:
  2673  00792D  2D                 	db	45
  2674  00792E  45                 	db	69	;'E'
  2675  00792F  52                 	db	82	;'R'
  2676  007930  52                 	db	82	;'R'
  2677  007931  4F                 	db	79	;'O'
  2678  007932  52                 	db	82	;'R'
  2679  007933  20                 	db	32
  2680  007934  2D                 	db	45
  2681  007935  20                 	db	32
  2682  007936  4E                 	db	78	;'N'
  2683  007937  6F                 	db	111	;'o'
  2684  007938  20                 	db	32
  2685  007939  6D                 	db	109	;'m'
  2686  00793A  61                 	db	97	;'a'
  2687  00793B  73                 	db	115	;'s'
  2688  00793C  6B                 	db	107	;'k'
  2689  00793D  20                 	db	32
  2690  00793E  6E                 	db	110	;'n'
  2691  00793F  75                 	db	117	;'u'
  2692  007940  6D                 	db	109	;'m'
  2693  007941  62                 	db	98	;'b'
  2694  007942  65                 	db	101	;'e'
  2695  007943  72                 	db	114	;'r'
  2696  007944  20                 	db	32
  2697  007945  73                 	db	115	;'s'
  2698  007946  70                 	db	112	;'p'
  2699  007947  65                 	db	101	;'e'
  2700  007948  63                 	db	99	;'c'
  2701  007949  69                 	db	105	;'i'
  2702  00794A  66                 	db	102	;'f'
  2703  00794B  69                 	db	105	;'i'
  2704  00794C  65                 	db	101	;'e'
  2705  00794D  64                 	db	100	;'d'
  2706  00794E  2E                 	db	46
  2707  00794F  0D                 	db	13
  2708  007950  0A                 	db	10
  2709  007951  00                 	db	0
  2710  007952                     STR_1:
  2711  007952  0D                 	db	13
  2712  007953  0A                 	db	10
  2713  007954  46                 	db	70	;'F'
  2714  007955  72                 	db	114	;'r'
  2715  007956  61                 	db	97	;'a'
  2716  007957  6E                 	db	110	;'n'
  2717  007958  6B                 	db	107	;'k'
  2718  007959  66                 	db	102	;'f'
  2719  00795A  75                 	db	117	;'u'
  2720  00795B  72                 	db	114	;'r'
  2721  00795C  74                 	db	116	;'t'
  2722  00795D  20                 	db	32
  2723  00795E  52                 	db	82	;'R'
  2724  00795F  53                 	db	83	;'S'
  2725  007960  2D                 	db	45
  2726  007961  32                 	db	50	;'2'
  2727  007962  33                 	db	51	;'3'
  2728  007963  32                 	db	50	;'2'
  2729  007964  20                 	db	32
  2730  007965  43                 	db	67	;'C'
  2731  007966  41                 	db	65	;'A'
  2732  007967  4E                 	db	78	;'N'
  2733  007968  34                 	db	52	;'4'
  2734  007969  56                 	db	86	;'V'
  2735  00796A  53                 	db	83	;'S'
  2736  00796B  43                 	db	67	;'C'
  2737  00796C  50                 	db	80	;'P'
  2738  00796D  20                 	db	32
  2739  00796E  6D                 	db	109	;'m'
  2740  00796F  6F                 	db	111	;'o'
  2741  007970  64                 	db	100	;'d'
  2742  007971  75                 	db	117	;'u'
  2743  007972  6C                 	db	108	;'l'
  2744  007973  65                 	db	101	;'e'
  2745  007974  0D                 	db	13
  2746  007975  0A                 	db	10
  2747  007976  00                 	db	0
  2748  007977                     STR_101:
  2749  007977  2D                 	db	45
  2750  007978  45                 	db	69	;'E'
  2751  007979  52                 	db	82	;'R'
  2752  00797A  52                 	db	82	;'R'
  2753  00797B  4F                 	db	79	;'O'
  2754  00797C  52                 	db	82	;'R'
  2755  00797D  20                 	db	32
  2756  00797E  2D                 	db	45
  2757  00797F  20                 	db	32
  2758  007980  6D                 	db	109	;'m'
  2759  007981  61                 	db	97	;'a'
  2760  007982  73                 	db	115	;'s'
  2761  007983  6B                 	db	107	;'k'
  2762  007984  20                 	db	32
  2763  007985  66                 	db	102	;'f'
  2764  007986  6F                 	db	111	;'o'
  2765  007987  72                 	db	114	;'r'
  2766  007988  20                 	db	32
  2767  007989  63                 	db	99	;'c'
  2768  00798A  6C                 	db	108	;'l'
  2769  00798B  61                 	db	97	;'a'
  2770  00798C  73                 	db	115	;'s'
  2771  00798D  73                 	db	115	;'s'
  2772  00798E  20                 	db	32
  2773  00798F  69                 	db	105	;'i'
  2774  007990  73                 	db	115	;'s'
  2775  007991  20                 	db	32
  2776  007992  6D                 	db	109	;'m'
  2777  007993  69                 	db	105	;'i'
  2778  007994  73                 	db	115	;'s'
  2779  007995  73                 	db	115	;'s'
  2780  007996  69                 	db	105	;'i'
  2781  007997  6E                 	db	110	;'n'
  2782  007998  67                 	db	103	;'g'
  2783  007999  0D                 	db	13
  2784  00799A  0A                 	db	10
  2785  00799B  00                 	db	0
  2786  00799C                     STR_103:
  2787  00799C  2D                 	db	45
  2788  00799D  45                 	db	69	;'E'
  2789  00799E  52                 	db	82	;'R'
  2790  00799F  52                 	db	82	;'R'
  2791  0079A0  4F                 	db	79	;'O'
  2792  0079A1  52                 	db	82	;'R'
  2793  0079A2  20                 	db	32
  2794  0079A3  2D                 	db	45
  2795  0079A4  20                 	db	32
  2796  0079A5  6D                 	db	109	;'m'
  2797  0079A6  61                 	db	97	;'a'
  2798  0079A7  73                 	db	115	;'s'
  2799  0079A8  6B                 	db	107	;'k'
  2800  0079A9  20                 	db	32
  2801  0079AA  66                 	db	102	;'f'
  2802  0079AB  6F                 	db	111	;'o'
  2803  0079AC  72                 	db	114	;'r'
  2804  0079AD  20                 	db	32
  2805  0079AE  74                 	db	116	;'t'
  2806  0079AF  79                 	db	121	;'y'
  2807  0079B0  70                 	db	112	;'p'
  2808  0079B1  65                 	db	101	;'e'
  2809  0079B2  20                 	db	32
  2810  0079B3  69                 	db	105	;'i'
  2811  0079B4  73                 	db	115	;'s'
  2812  0079B5  20                 	db	32
  2813  0079B6  6D                 	db	109	;'m'
  2814  0079B7  69                 	db	105	;'i'
  2815  0079B8  73                 	db	115	;'s'
  2816  0079B9  73                 	db	115	;'s'
  2817  0079BA  69                 	db	105	;'i'
  2818  0079BB  6E                 	db	110	;'n'
  2819  0079BC  67                 	db	103	;'g'
  2820  0079BD  0D                 	db	13
  2821  0079BE  0A                 	db	10
  2822  0079BF  00                 	db	0
  2823  0079C0                     STR_75:
  2824  0079C0  2B                 	db	43
  2825  0079C1  4F                 	db	79	;'O'
  2826  0079C2  4B                 	db	75	;'K'
  2827  0079C3  20                 	db	32
  2828  0079C4  2D                 	db	45
  2829  0079C5  20                 	db	32
  2830  0079C6  56                 	db	86	;'V'
  2831  0079C7  61                 	db	97	;'a'
  2832  0079C8  6C                 	db	108	;'l'
  2833  0079C9  75                 	db	117	;'u'
  2834  0079CA  65                 	db	101	;'e'
  2835  0079CB  20                 	db	32
  2836  0079CC  77                 	db	119	;'w'
  2837  0079CD  72                 	db	114	;'r'
  2838  0079CE  69                 	db	105	;'i'
  2839  0079CF  74                 	db	116	;'t'
  2840  0079D0  74                 	db	116	;'t'
  2841  0079D1  65                 	db	101	;'e'
  2842  0079D2  6E                 	db	110	;'n'
  2843  0079D3  20                 	db	32
  2844  0079D4  73                 	db	115	;'s'
  2845  0079D5  75                 	db	117	;'u'
  2846  0079D6  63                 	db	99	;'c'
  2847  0079D7  63                 	db	99	;'c'
  2848  0079D8  65                 	db	101	;'e'
  2849  0079D9  73                 	db	115	;'s'
  2850  0079DA  73                 	db	115	;'s'
  2851  0079DB  66                 	db	102	;'f'
  2852  0079DC  75                 	db	117	;'u'
  2853  0079DD  6C                 	db	108	;'l'
  2854  0079DE  6C                 	db	108	;'l'
  2855  0079DF  79                 	db	121	;'y'
  2856  0079E0  0D                 	db	13
  2857  0079E1  0A                 	db	10
  2858  0079E2  00                 	db	0
  2859  0079E3                     STR_221:
  2860  0079E3  53                 	db	83	;'S'
  2861  0079E4  45                 	db	69	;'E'
  2862  0079E5  54                 	db	84	;'T'
  2863  0079E6  20                 	db	32
  2864  0079E7  2D                 	db	45
  2865  0079E8  20                 	db	32
  2866  0079E9  50                 	db	80	;'P'
  2867  0079EA  65                 	db	101	;'e'
  2868  0079EB  72                 	db	114	;'r'
  2869  0079EC  73                 	db	115	;'s'
  2870  0079ED  69                 	db	105	;'i'
  2871  0079EE  73                 	db	115	;'s'
  2872  0079EF  74                 	db	116	;'t'
  2873  0079F0  65                 	db	101	;'e'
  2874  0079F1  6E                 	db	110	;'n'
  2875  0079F2  74                 	db	116	;'t'
  2876  0079F3  20                 	db	32
  2877  0079F4  66                 	db	102	;'f'
  2878  0079F5  75                 	db	117	;'u'
  2879  0079F6  6E                 	db	110	;'n'
  2880  0079F7  63                 	db	99	;'c'
  2881  0079F8  74                 	db	116	;'t'
  2882  0079F9  69                 	db	105	;'i'
  2883  0079FA  6F                 	db	111	;'o'
  2884  0079FB  6E                 	db	110	;'n'
  2885  0079FC  61                 	db	97	;'a'
  2886  0079FD  6C                 	db	108	;'l'
  2887  0079FE  69                 	db	105	;'i'
  2888  0079FF  74                 	db	116	;'t'
  2889  007A00  79                 	db	121	;'y'
  2890  007A01  2E                 	db	46
  2891  007A02  0D                 	db	13
  2892  007A03  0A                 	db	10
  2893  007A04  00                 	db	0
  2894  007A05                     STR_60:
  2895  007A05  2D                 	db	45
  2896  007A06  45                 	db	69	;'E'
  2897  007A07  52                 	db	82	;'R'
  2898  007A08  52                 	db	82	;'R'
  2899  007A09  4F                 	db	79	;'O'
  2900  007A0A  52                 	db	82	;'R'
  2901  007A0B  20                 	db	32
  2902  007A0C  2D                 	db	45
  2903  007A0D  20                 	db	32
  2904  007A0E  55                 	db	85	;'U'
  2905  007A0F  6E                 	db	110	;'n'
  2906  007A10  61                 	db	97	;'a'
  2907  007A11  62                 	db	98	;'b'
  2908  007A12  6C                 	db	108	;'l'
  2909  007A13  65                 	db	101	;'e'
  2910  007A14  20                 	db	32
  2911  007A15  74                 	db	116	;'t'
  2912  007A16  6F                 	db	111	;'o'
  2913  007A17  20                 	db	32
  2914  007A18  72                 	db	114	;'r'
  2915  007A19  65                 	db	101	;'e'
  2916  007A1A  61                 	db	97	;'a'
  2917  007A1B  64                 	db	100	;'d'
  2918  007A1C  20                 	db	32
  2919  007A1D  72                 	db	114	;'r'
  2920  007A1E  65                 	db	101	;'e'
  2921  007A1F  67                 	db	103	;'g'
  2922  007A20  69                 	db	105	;'i'
  2923  007A21  73                 	db	115	;'s'
  2924  007A22  74                 	db	116	;'t'
  2925  007A23  65                 	db	101	;'e'
  2926  007A24  72                 	db	114	;'r'
  2927  007A25  20                 	db	32
  2928  007A26  00                 	db	0
  2929  007A27                     STR_210:
  2930  007A27  53                 	db	83	;'S'
  2931  007A28  54                 	db	84	;'T'
  2932  007A29  41                 	db	65	;'A'
  2933  007A2A  54                 	db	84	;'T'
  2934  007A2B  20                 	db	32
  2935  007A2C  2D                 	db	45
  2936  007A2D  20                 	db	32
  2937  007A2E  44                 	db	68	;'D'
  2938  007A2F  69                 	db	105	;'i'
  2939  007A30  73                 	db	115	;'s'
  2940  007A31  70                 	db	112	;'p'
  2941  007A32  6C                 	db	108	;'l'
  2942  007A33  61                 	db	97	;'a'
  2943  007A34  79                 	db	121	;'y'
  2944  007A35  20                 	db	32
  2945  007A36  43                 	db	67	;'C'
  2946  007A37  41                 	db	65	;'A'
  2947  007A38  4E                 	db	78	;'N'
  2948  007A39  20                 	db	32
  2949  007A3A  73                 	db	115	;'s'
  2950  007A3B  74                 	db	116	;'t'
  2951  007A3C  61                 	db	97	;'a'
  2952  007A3D  74                 	db	116	;'t'
  2953  007A3E  69                 	db	105	;'i'
  2954  007A3F  73                 	db	115	;'s'
  2955  007A40  74                 	db	116	;'t'
  2956  007A41  69                 	db	105	;'i'
  2957  007A42  63                 	db	99	;'c'
  2958  007A43  73                 	db	115	;'s'
  2959  007A44  2E                 	db	46
  2960  007A45  0D                 	db	13
  2961  007A46  0A                 	db	10
  2962  007A47  00                 	db	0
  2963  007A48                     STR_36:
  2964  007A48  2D                 	db	45
  2965  007A49  45                 	db	69	;'E'
  2966  007A4A  52                 	db	82	;'R'
  2967  007A4B  52                 	db	82	;'R'
  2968  007A4C  4F                 	db	79	;'O'
  2969  007A4D  52                 	db	82	;'R'
  2970  007A4E  20                 	db	32
  2971  007A4F  2D                 	db	45
  2972  007A50  20                 	db	32
  2973  007A51  46                 	db	70	;'F'
  2974  007A52  61                 	db	97	;'a'
  2975  007A53  69                 	db	105	;'i'
  2976  007A54  6C                 	db	108	;'l'
  2977  007A55  65                 	db	101	;'e'
  2978  007A56  64                 	db	100	;'d'
  2979  007A57  20                 	db	32
  2980  007A58  74                 	db	116	;'t'
  2981  007A59  6F                 	db	111	;'o'
  2982  007A5A  20                 	db	32
  2983  007A5B  73                 	db	115	;'s'
  2984  007A5C  65                 	db	101	;'e'
  2985  007A5D  6E                 	db	110	;'n'
  2986  007A5E  64                 	db	100	;'d'
  2987  007A5F  20                 	db	32
  2988  007A60  65                 	db	101	;'e'
  2989  007A61  76                 	db	118	;'v'
  2990  007A62  65                 	db	101	;'e'
  2991  007A63  6E                 	db	110	;'n'
  2992  007A64  74                 	db	116	;'t'
  2993  007A65  2E                 	db	46
  2994  007A66  0D                 	db	13
  2995  007A67  0A                 	db	10
  2996  007A68  00                 	db	0
  2997  007A69                     STR_122:
  2998  007A69  2D                 	db	45
  2999  007A6A  45                 	db	69	;'E'
  3000  007A6B  52                 	db	82	;'R'
  3001  007A6C  52                 	db	82	;'R'
  3002  007A6D  4F                 	db	79	;'O'
  3003  007A6E  52                 	db	82	;'R'
  3004  007A6F  20                 	db	32
  3005  007A70  2D                 	db	45
  3006  007A71  20                 	db	32
  3007  007A72  55                 	db	85	;'U'
  3008  007A73  6E                 	db	110	;'n'
  3009  007A74  6B                 	db	107	;'k'
  3010  007A75  6E                 	db	110	;'n'
  3011  007A76  6F                 	db	111	;'o'
  3012  007A77  77                 	db	119	;'w'
  3013  007A78  6E                 	db	110	;'n'
  3014  007A79  20                 	db	32
  3015  007A7A  27                 	db	39
  3016  007A7B  53                 	db	83	;'S'
  3017  007A7C  45                 	db	69	;'E'
  3018  007A7D  54                 	db	84	;'T'
  3019  007A7E  27                 	db	39
  3020  007A7F  20                 	db	32
  3021  007A80  63                 	db	99	;'c'
  3022  007A81  6F                 	db	111	;'o'
  3023  007A82  6D                 	db	109	;'m'
  3024  007A83  6D                 	db	109	;'m'
  3025  007A84  61                 	db	97	;'a'
  3026  007A85  6E                 	db	110	;'n'
  3027  007A86  64                 	db	100	;'d'
  3028  007A87  0D                 	db	13
  3029  007A88  0A                 	db	10
  3030  007A89  00                 	db	0
  3031  007A8A                     STR_76:
  3032  007A8A  2D                 	db	45
  3033  007A8B  45                 	db	69	;'E'
  3034  007A8C  52                 	db	82	;'R'
  3035  007A8D  52                 	db	82	;'R'
  3036  007A8E  4F                 	db	79	;'O'
  3037  007A8F  52                 	db	82	;'R'
  3038  007A90  20                 	db	32
  3039  007A91  2D                 	db	45
  3040  007A92  20                 	db	32
  3041  007A93  46                 	db	70	;'F'
  3042  007A94  61                 	db	97	;'a'
  3043  007A95  69                 	db	105	;'i'
  3044  007A96  6C                 	db	108	;'l'
  3045  007A97  65                 	db	101	;'e'
  3046  007A98  64                 	db	100	;'d'
  3047  007A99  20                 	db	32
  3048  007A9A  74                 	db	116	;'t'
  3049  007A9B  6F                 	db	111	;'o'
  3050  007A9C  20                 	db	32
  3051  007A9D  77                 	db	119	;'w'
  3052  007A9E  72                 	db	114	;'r'
  3053  007A9F  69                 	db	105	;'i'
  3054  007AA0  74                 	db	116	;'t'
  3055  007AA1  65                 	db	101	;'e'
  3056  007AA2  20                 	db	32
  3057  007AA3  76                 	db	118	;'v'
  3058  007AA4  61                 	db	97	;'a'
  3059  007AA5  6C                 	db	108	;'l'
  3060  007AA6  75                 	db	117	;'u'
  3061  007AA7  65                 	db	101	;'e'
  3062  007AA8  0D                 	db	13
  3063  007AA9  0A                 	db	10
  3064  007AAA  00                 	db	0
  3065  007AAB                     STR_49:
  3066  007AAB  2D                 	db	45
  3067  007AAC  45                 	db	69	;'E'
  3068  007AAD  52                 	db	82	;'R'
  3069  007AAE  52                 	db	82	;'R'
  3070  007AAF  4F                 	db	79	;'O'
  3071  007AB0  52                 	db	82	;'R'
  3072  007AB1  20                 	db	32
  3073  007AB2  2D                 	db	45
  3074  007AB3  20                 	db	32
  3075  007AB4  4E                 	db	78	;'N'
  3076  007AB5  65                 	db	101	;'e'
  3077  007AB6  65                 	db	101	;'e'
  3078  007AB7  64                 	db	100	;'d'
  3079  007AB8  73                 	db	115	;'s'
  3080  007AB9  20                 	db	32
  3081  007ABA  5B                 	db	91	;'['
  3082  007ABB  70                 	db	112	;'p'
  3083  007ABC  61                 	db	97	;'a'
  3084  007ABD  67                 	db	103	;'g'
  3085  007ABE  65                 	db	101	;'e'
  3086  007ABF  3A                 	db	58	;':'
  3087  007AC0  5D                 	db	93	;']'
  3088  007AC1  72                 	db	114	;'r'
  3089  007AC2  65                 	db	101	;'e'
  3090  007AC3  67                 	db	103	;'g'
  3091  007AC4  69                 	db	105	;'i'
  3092  007AC5  73                 	db	115	;'s'
  3093  007AC6  74                 	db	116	;'t'
  3094  007AC7  65                 	db	101	;'e'
  3095  007AC8  72                 	db	114	;'r'
  3096  007AC9  0D                 	db	13
  3097  007ACA  0A                 	db	10
  3098  007ACB  00                 	db	0
  3099  007ACC                     STR_117:
  3100  007ACC  2B                 	db	43
  3101  007ACD  4F                 	db	79	;'O'
  3102  007ACE  4B                 	db	75	;'K'
  3103  007ACF  20                 	db	32
  3104  007AD0  2D                 	db	45
  3105  007AD1  20                 	db	32
  3106  007AD2  4D                 	db	77	;'M'
  3107  007AD3  6F                 	db	111	;'o'
  3108  007AD4  64                 	db	100	;'d'
  3109  007AD5  65                 	db	101	;'e'
  3110  007AD6  20                 	db	32
  3111  007AD7  69                 	db	105	;'i'
  3112  007AD8  73                 	db	115	;'s'
  3113  007AD9  20                 	db	32
  3114  007ADA  6E                 	db	110	;'n'
  3115  007ADB  6F                 	db	111	;'o'
  3116  007ADC  77                 	db	119	;'w'
  3117  007ADD  20                 	db	32
  3118  007ADE  56                 	db	86	;'V'
  3119  007ADF  53                 	db	83	;'S'
  3120  007AE0  43                 	db	67	;'C'
  3121  007AE1  50                 	db	80	;'P'
  3122  007AE2  20                 	db	32
  3123  007AE3  44                 	db	68	;'D'
  3124  007AE4  72                 	db	114	;'r'
  3125  007AE5  69                 	db	105	;'i'
  3126  007AE6  76                 	db	118	;'v'
  3127  007AE7  65                 	db	101	;'e'
  3128  007AE8  72                 	db	114	;'r'
  3129  007AE9  0D                 	db	13
  3130  007AEA  0A                 	db	10
  3131  007AEB  00                 	db	0
  3132  007AEC                     STR_6:
  3133  007AEC  57                 	db	87	;'W'
  3134  007AED  69                 	db	105	;'i'
  3135  007AEE  6C                 	db	108	;'l'
  3136  007AEF  6C                 	db	108	;'l'
  3137  007AF0  20                 	db	32
  3138  007AF1  65                 	db	101	;'e'
  3139  007AF2  6E                 	db	110	;'n'
  3140  007AF3  74                 	db	116	;'t'
  3141  007AF4  65                 	db	101	;'e'
  3142  007AF5  72                 	db	114	;'r'
  3143  007AF6  20                 	db	32
  3144  007AF7  62                 	db	98	;'b'
  3145  007AF8  6F                 	db	111	;'o'
  3146  007AF9  6F                 	db	111	;'o'
  3147  007AFA  74                 	db	116	;'t'
  3148  007AFB  6C                 	db	108	;'l'
  3149  007AFC  6F                 	db	111	;'o'
  3150  007AFD  61                 	db	97	;'a'
  3151  007AFE  64                 	db	100	;'d'
  3152  007AFF  65                 	db	101	;'e'
  3153  007B00  72                 	db	114	;'r'
  3154  007B01  20                 	db	32
  3155  007B02  6E                 	db	110	;'n'
  3156  007B03  6F                 	db	111	;'o'
  3157  007B04  77                 	db	119	;'w'
  3158  007B05  2E                 	db	46
  3159  007B06  2E                 	db	46
  3160  007B07  2E                 	db	46
  3161  007B08  0D                 	db	13
  3162  007B09  0A                 	db	10
  3163  007B0A  00                 	db	0
  3164  007B0B                     STR_204:
  3165  007B0B  43                 	db	67	;'C'
  3166  007B0C  4C                 	db	76	;'L'
  3167  007B0D  4F                 	db	79	;'O'
  3168  007B0E  53                 	db	83	;'S'
  3169  007B0F  45                 	db	69	;'E'
  3170  007B10  20                 	db	32
  3171  007B11  2D                 	db	45
  3172  007B12  20                 	db	32
  3173  007B13  43                 	db	67	;'C'
  3174  007B14  6C                 	db	108	;'l'
  3175  007B15  6F                 	db	111	;'o'
  3176  007B16  73                 	db	115	;'s'
  3177  007B17  65                 	db	101	;'e'
  3178  007B18  20                 	db	32
  3179  007B19  43                 	db	67	;'C'
  3180  007B1A  41                 	db	65	;'A'
  3181  007B1B  4E                 	db	78	;'N'
  3182  007B1C  20                 	db	32
  3183  007B1D  69                 	db	105	;'i'
  3184  007B1E  6E                 	db	110	;'n'
  3185  007B1F  74                 	db	116	;'t'
  3186  007B20  65                 	db	101	;'e'
  3187  007B21  72                 	db	114	;'r'
  3188  007B22  66                 	db	102	;'f'
  3189  007B23  61                 	db	97	;'a'
  3190  007B24  63                 	db	99	;'c'
  3191  007B25  65                 	db	101	;'e'
  3192  007B26  2E                 	db	46
  3193  007B27  0D                 	db	13
  3194  007B28  0A                 	db	10
  3195  007B29  00                 	db	0
  3196  007B2A                     STR_4:
  3197  007B2A  54                 	db	84	;'T'
  3198  007B2B  65                 	db	101	;'e'
  3199  007B2C  6D                 	db	109	;'m'
  3200  007B2D  70                 	db	112	;'p'
  3201  007B2E  6F                 	db	111	;'o'
  3202  007B2F  72                 	db	114	;'r'
  3203  007B30  61                 	db	97	;'a'
  3204  007B31  72                 	db	114	;'r'
  3205  007B32  79                 	db	121	;'y'
  3206  007B33  20                 	db	32
  3207  007B34  76                 	db	118	;'v'
  3208  007B35  65                 	db	101	;'e'
  3209  007B36  72                 	db	114	;'r'
  3210  007B37  62                 	db	98	;'b'
  3211  007B38  6F                 	db	111	;'o'
  3212  007B39  73                 	db	115	;'s'
  3213  007B3A  65                 	db	101	;'e'
  3214  007B3B  20                 	db	32
  3215  007B3C  6D                 	db	109	;'m'
  3216  007B3D  6F                 	db	111	;'o'
  3217  007B3E  64                 	db	100	;'d'
  3218  007B3F  65                 	db	101	;'e'
  3219  007B40  20                 	db	32
  3220  007B41  73                 	db	115	;'s'
  3221  007B42  65                 	db	101	;'e'
  3222  007B43  74                 	db	116	;'t'
  3223  007B44  0D                 	db	13
  3224  007B45  0A                 	db	10
  3225  007B46  00                 	db	0
  3226  007B47                     STR_115:
  3227  007B47  2B                 	db	43
  3228  007B48  4F                 	db	79	;'O'
  3229  007B49  4B                 	db	75	;'K'
  3230  007B4A  20                 	db	32
  3231  007B4B  2D                 	db	45
  3232  007B4C  20                 	db	32
  3233  007B4D  4D                 	db	77	;'M'
  3234  007B4E  6F                 	db	111	;'o'
  3235  007B4F  64                 	db	100	;'d'
  3236  007B50  65                 	db	101	;'e'
  3237  007B51  20                 	db	32
  3238  007B52  69                 	db	105	;'i'
  3239  007B53  73                 	db	115	;'s'
  3240  007B54  20                 	db	32
  3241  007B55  6E                 	db	110	;'n'
  3242  007B56  6F                 	db	111	;'o'
  3243  007B57  77                 	db	119	;'w'
  3244  007B58  20                 	db	32
  3245  007B59  76                 	db	118	;'v'
  3246  007B5A  65                 	db	101	;'e'
  3247  007B5B  72                 	db	114	;'r'
  3248  007B5C  62                 	db	98	;'b'
  3249  007B5D  6F                 	db	111	;'o'
  3250  007B5E  73                 	db	115	;'s'
  3251  007B5F  65                 	db	101	;'e'
  3252  007B60  0D                 	db	13
  3253  007B61  0A                 	db	10
  3254  007B62  00                 	db	0
  3255  007B63                     STR_199:
  3256  007B63  42                 	db	66	;'B'
  3257  007B64  4F                 	db	79	;'O'
  3258  007B65  4F                 	db	79	;'O'
  3259  007B66  54                 	db	84	;'T'
  3260  007B67  20                 	db	32
  3261  007B68  2D                 	db	45
  3262  007B69  20                 	db	32
  3263  007B6A  45                 	db	69	;'E'
  3264  007B6B  6E                 	db	110	;'n'
  3265  007B6C  74                 	db	116	;'t'
  3266  007B6D  65                 	db	101	;'e'
  3267  007B6E  72                 	db	114	;'r'
  3268  007B6F  20                 	db	32
  3269  007B70  62                 	db	98	;'b'
  3270  007B71  6F                 	db	111	;'o'
  3271  007B72  6F                 	db	111	;'o'
  3272  007B73  74                 	db	116	;'t'
  3273  007B74  6C                 	db	108	;'l'
  3274  007B75  6F                 	db	111	;'o'
  3275  007B76  61                 	db	97	;'a'
  3276  007B77  64                 	db	100	;'d'
  3277  007B78  65                 	db	101	;'e'
  3278  007B79  72                 	db	114	;'r'
  3279  007B7A  2E                 	db	46
  3280  007B7B  0D                 	db	13
  3281  007B7C  0A                 	db	10
  3282  007B7D  00                 	db	0
  3283  007B7E                     STR_123:
  3284  007B7E  2D                 	db	45
  3285  007B7F  45                 	db	69	;'E'
  3286  007B80  52                 	db	82	;'R'
  3287  007B81  52                 	db	82	;'R'
  3288  007B82  4F                 	db	79	;'O'
  3289  007B83  52                 	db	82	;'R'
  3290  007B84  20                 	db	32
  3291  007B85  2D                 	db	45
  3292  007B86  20                 	db	32
  3293  007B87  55                 	db	85	;'U'
  3294  007B88  6E                 	db	110	;'n'
  3295  007B89  6B                 	db	107	;'k'
  3296  007B8A  6E                 	db	110	;'n'
  3297  007B8B  6F                 	db	111	;'o'
  3298  007B8C  77                 	db	119	;'w'
  3299  007B8D  6E                 	db	110	;'n'
  3300  007B8E  20                 	db	32
  3301  007B8F  63                 	db	99	;'c'
  3302  007B90  6F                 	db	111	;'o'
  3303  007B91  6D                 	db	109	;'m'
  3304  007B92  6D                 	db	109	;'m'
  3305  007B93  61                 	db	97	;'a'
  3306  007B94  6E                 	db	110	;'n'
  3307  007B95  64                 	db	100	;'d'
  3308  007B96  0D                 	db	13
  3309  007B97  0A                 	db	10
  3310  007B98  00                 	db	0
  3311  007B99                     STR_230:
  3312  007B99  4E                 	db	78	;'N'
  3313  007B9A  6F                 	db	111	;'o'
  3314  007B9B  64                 	db	100	;'d'
  3315  007B9C  65                 	db	101	;'e'
  3316  007B9D  20                 	db	32
  3317  007B9E  66                 	db	102	;'f'
  3318  007B9F  6F                 	db	111	;'o'
  3319  007BA0  75                 	db	117	;'u'
  3320  007BA1  6E                 	db	110	;'n'
  3321  007BA2  64                 	db	100	;'d'
  3322  007BA3  20                 	db	32
  3323  007BA4  77                 	db	119	;'w'
  3324  007BA5  69                 	db	105	;'i'
  3325  007BA6  74                 	db	116	;'t'
  3326  007BA7  68                 	db	104	;'h'
  3327  007BA8  20                 	db	32
  3328  007BA9  6E                 	db	110	;'n'
  3329  007BAA  6F                 	db	111	;'o'
  3330  007BAB  64                 	db	100	;'d'
  3331  007BAC  65                 	db	101	;'e'
  3332  007BAD  20                 	db	32
  3333  007BAE  69                 	db	105	;'i'
  3334  007BAF  64                 	db	100	;'d'
  3335  007BB0  20                 	db	32
  3336  007BB1  3D                 	db	61	;'='
  3337  007BB2  20                 	db	32
  3338  007BB3  00                 	db	0
  3339  007BB4                     STR_119:
  3340  007BB4  2B                 	db	43
  3341  007BB5  4F                 	db	79	;'O'
  3342  007BB6  4B                 	db	75	;'K'
  3343  007BB7  20                 	db	32
  3344  007BB8  2D                 	db	45
  3345  007BB9  20                 	db	32
  3346  007BBA  4D                 	db	77	;'M'
  3347  007BBB  6F                 	db	111	;'o'
  3348  007BBC  64                 	db	100	;'d'
  3349  007BBD  65                 	db	101	;'e'
  3350  007BBE  20                 	db	32
  3351  007BBF  69                 	db	105	;'i'
  3352  007BC0  73                 	db	115	;'s'
  3353  007BC1  20                 	db	32
  3354  007BC2  6E                 	db	110	;'n'
  3355  007BC3  6F                 	db	111	;'o'
  3356  007BC4  77                 	db	119	;'w'
  3357  007BC5  20                 	db	32
  3358  007BC6  53                 	db	83	;'S'
  3359  007BC7  4C                 	db	76	;'L'
  3360  007BC8  43                 	db	67	;'C'
  3361  007BC9  41                 	db	65	;'A'
  3362  007BCA  4E                 	db	78	;'N'
  3363  007BCB  0D                 	db	13
  3364  007BCC  0A                 	db	10
  3365  007BCD  00                 	db	0
  3366  007BCE                     STR_24:
  3367  007BCE  2B                 	db	43
  3368  007BCF  4F                 	db	79	;'O'
  3369  007BD0  4B                 	db	75	;'K'
  3370  007BD1  20                 	db	32
  3371  007BD2  2D                 	db	45
  3372  007BD3  20                 	db	32
  3373  007BD4  4C                 	db	76	;'L'
  3374  007BD5  69                 	db	105	;'i'
  3375  007BD6  73                 	db	115	;'s'
  3376  007BD7  74                 	db	116	;'t'
  3377  007BD8  65                 	db	101	;'e'
  3378  007BD9  6E                 	db	110	;'n'
  3379  007BDA  20                 	db	32
  3380  007BDB  6F                 	db	111	;'o'
  3381  007BDC  6E                 	db	110	;'n'
  3382  007BDD  6C                 	db	108	;'l'
  3383  007BDE  79                 	db	121	;'y'
  3384  007BDF  20                 	db	32
  3385  007BE0  6D                 	db	109	;'m'
  3386  007BE1  6F                 	db	111	;'o'
  3387  007BE2  64                 	db	100	;'d'
  3388  007BE3  65                 	db	101	;'e'
  3389  007BE4  0D                 	db	13
  3390  007BE5  0A                 	db	10
  3391  007BE6  00                 	db	0
  3392  007BE7                     STR_183:
  3393  007BE7  54                 	db	84	;'T'
  3394  007BE8  72                 	db	114	;'r'
  3395  007BE9  61                 	db	97	;'a'
  3396  007BEA  6E                 	db	110	;'n'
  3397  007BEB  73                 	db	115	;'s'
  3398  007BEC  6D                 	db	109	;'m'
  3399  007BED  69                 	db	105	;'i'
  3400  007BEE  74                 	db	116	;'t'
  3401  007BEF  20                 	db	32
  3402  007BF0  45                 	db	69	;'E'
  3403  007BF1  72                 	db	114	;'r'
  3404  007BF2  72                 	db	114	;'r'
  3405  007BF3  6F                 	db	111	;'o'
  3406  007BF4  72                 	db	114	;'r'
  3407  007BF5  20                 	db	32
  3408  007BF6  43                 	db	67	;'C'
  3409  007BF7  6F                 	db	111	;'o'
  3410  007BF8  75                 	db	117	;'u'
  3411  007BF9  6E                 	db	110	;'n'
  3412  007BFA  74                 	db	116	;'t'
  3413  007BFB  65                 	db	101	;'e'
  3414  007BFC  72                 	db	114	;'r'
  3415  007BFD  3A                 	db	58	;':'
  3416  007BFE  20                 	db	32
  3417  007BFF  00                 	db	0
  3418  007C00                     STR_207:
  3419  007C00  54                 	db	84	;'T'
  3420  007C01  58                 	db	88	;'X'
  3421  007C02  20                 	db	32
  3422  007C03  2D                 	db	45
  3423  007C04  20                 	db	32
  3424  007C05  53                 	db	83	;'S'
  3425  007C06  65                 	db	101	;'e'
  3426  007C07  6E                 	db	110	;'n'
  3427  007C08  64                 	db	100	;'d'
  3428  007C09  20                 	db	32
  3429  007C0A  43                 	db	67	;'C'
  3430  007C0B  41                 	db	65	;'A'
  3431  007C0C  4E                 	db	78	;'N'
  3432  007C0D  20                 	db	32
  3433  007C0E  66                 	db	102	;'f'
  3434  007C0F  72                 	db	114	;'r'
  3435  007C10  61                 	db	97	;'a'
  3436  007C11  6D                 	db	109	;'m'
  3437  007C12  65                 	db	101	;'e'
  3438  007C13  20                 	db	32
  3439  007C14  2E                 	db	46
  3440  007C15  0D                 	db	13
  3441  007C16  0A                 	db	10
  3442  007C17  00                 	db	0
  3443  007C18                     STR_217:
  3444  007C18  46                 	db	70	;'F'
  3445  007C19  49                 	db	73	;'I'
  3446  007C1A  4C                 	db	76	;'L'
  3447  007C1B  54                 	db	84	;'T'
  3448  007C1C  45                 	db	69	;'E'
  3449  007C1D  52                 	db	82	;'R'
  3450  007C1E  20                 	db	32
  3451  007C1F  2D                 	db	45
  3452  007C20  20                 	db	32
  3453  007C21  53                 	db	83	;'S'
  3454  007C22  65                 	db	101	;'e'
  3455  007C23  74                 	db	116	;'t'
  3456  007C24  20                 	db	32
  3457  007C25  66                 	db	102	;'f'
  3458  007C26  69                 	db	105	;'i'
  3459  007C27  6C                 	db	108	;'l'
  3460  007C28  74                 	db	116	;'t'
  3461  007C29  65                 	db	101	;'e'
  3462  007C2A  72                 	db	114	;'r'
  3463  007C2B  20                 	db	32
  3464  007C2C  2E                 	db	46
  3465  007C2D  0D                 	db	13
  3466  007C2E  0A                 	db	10
  3467  007C2F  00                 	db	0
  3468  007C30                     STR_47:
  3469  007C30  2D                 	db	45
  3470  007C31  45                 	db	69	;'E'
  3471  007C32  52                 	db	82	;'R'
  3472  007C33  52                 	db	82	;'R'
  3473  007C34  4F                 	db	79	;'O'
  3474  007C35  52                 	db	82	;'R'
  3475  007C36  20                 	db	32
  3476  007C37  2D                 	db	45
  3477  007C38  20                 	db	32
  3478  007C39  4E                 	db	78	;'N'
  3479  007C3A  65                 	db	101	;'e'
  3480  007C3B  65                 	db	101	;'e'
  3481  007C3C  64                 	db	100	;'d'
  3482  007C3D  73                 	db	115	;'s'
  3483  007C3E  20                 	db	32
  3484  007C3F  6E                 	db	110	;'n'
  3485  007C40  6F                 	db	111	;'o'
  3486  007C41  64                 	db	100	;'d'
  3487  007C42  65                 	db	101	;'e'
  3488  007C43  69                 	db	105	;'i'
  3489  007C44  64                 	db	100	;'d'
  3490  007C45  0D                 	db	13
  3491  007C46  0A                 	db	10
  3492  007C47  00                 	db	0
  3493  007C48                     STR_27:
  3494  007C48  2D                 	db	45
  3495  007C49  45                 	db	69	;'E'
  3496  007C4A  52                 	db	82	;'R'
  3497  007C4B  52                 	db	82	;'R'
  3498  007C4C  4F                 	db	79	;'O'
  3499  007C4D  52                 	db	82	;'R'
  3500  007C4E  20                 	db	32
  3501  007C4F  2D                 	db	45
  3502  007C50  20                 	db	32
  3503  007C51  55                 	db	85	;'U'
  3504  007C52  6E                 	db	110	;'n'
  3505  007C53  6B                 	db	107	;'k'
  3506  007C54  6E                 	db	110	;'n'
  3507  007C55  6F                 	db	111	;'o'
  3508  007C56  77                 	db	119	;'w'
  3509  007C57  6E                 	db	110	;'n'
  3510  007C58  20                 	db	32
  3511  007C59  6D                 	db	109	;'m'
  3512  007C5A  6F                 	db	111	;'o'
  3513  007C5B  64                 	db	100	;'d'
  3514  007C5C  65                 	db	101	;'e'
  3515  007C5D  0D                 	db	13
  3516  007C5E  0A                 	db	10
  3517  007C5F  00                 	db	0
  3518  007C60                     STR_74:
  3519  007C60  2D                 	db	45
  3520  007C61  45                 	db	69	;'E'
  3521  007C62  52                 	db	82	;'R'
  3522  007C63  52                 	db	82	;'R'
  3523  007C64  4F                 	db	79	;'O'
  3524  007C65  52                 	db	82	;'R'
  3525  007C66  20                 	db	32
  3526  007C67  2D                 	db	45
  3527  007C68  20                 	db	32
  3528  007C69  4E                 	db	78	;'N'
  3529  007C6A  65                 	db	101	;'e'
  3530  007C6B  65                 	db	101	;'e'
  3531  007C6C  64                 	db	100	;'d'
  3532  007C6D  20                 	db	32
  3533  007C6E  61                 	db	97	;'a'
  3534  007C6F  20                 	db	32
  3535  007C70  76                 	db	118	;'v'
  3536  007C71  61                 	db	97	;'a'
  3537  007C72  6C                 	db	108	;'l'
  3538  007C73  75                 	db	117	;'u'
  3539  007C74  65                 	db	101	;'e'
  3540  007C75  0D                 	db	13
  3541  007C76  0A                 	db	10
  3542  007C77  00                 	db	0
  3543  007C78                     STR_190:
  3544  007C78  52                 	db	82	;'R'
  3545  007C79  65                 	db	101	;'e'
  3546  007C7A  63                 	db	99	;'c'
  3547  007C7B  65                 	db	101	;'e'
  3548  007C7C  69                 	db	105	;'i'
  3549  007C7D  76                 	db	118	;'v'
  3550  007C7E  65                 	db	101	;'e'
  3551  007C7F  20                 	db	32
  3552  007C80  45                 	db	69	;'E'
  3553  007C81  72                 	db	114	;'r'
  3554  007C82  72                 	db	114	;'r'
  3555  007C83  6F                 	db	111	;'o'
  3556  007C84  72                 	db	114	;'r'
  3557  007C85  20                 	db	32
  3558  007C86  43                 	db	67	;'C'
  3559  007C87  6F                 	db	111	;'o'
  3560  007C88  75                 	db	117	;'u'
  3561  007C89  6E                 	db	110	;'n'
  3562  007C8A  74                 	db	116	;'t'
  3563  007C8B  65                 	db	101	;'e'
  3564  007C8C  72                 	db	114	;'r'
  3565  007C8D  3A                 	db	58	;':'
  3566  007C8E  20                 	db	32
  3567  007C8F  00                 	db	0
  3568  007C90                     STR_175:
  3569  007C90  55                 	db	85	;'U'
  3570  007C91  41                 	db	65	;'A'
  3571  007C92  52                 	db	82	;'R'
  3572  007C93  54                 	db	84	;'T'
  3573  007C94  20                 	db	32
  3574  007C95  52                 	db	82	;'R'
  3575  007C96  65                 	db	101	;'e'
  3576  007C97  63                 	db	99	;'c'
  3577  007C98  65                 	db	101	;'e'
  3578  007C99  69                 	db	105	;'i'
  3579  007C9A  76                 	db	118	;'v'
  3580  007C9B  65                 	db	101	;'e'
  3581  007C9C  20                 	db	32
  3582  007C9D  6F                 	db	111	;'o'
  3583  007C9E  76                 	db	118	;'v'
  3584  007C9F  65                 	db	101	;'e'
  3585  007CA0  72                 	db	114	;'r'
  3586  007CA1  72                 	db	114	;'r'
  3587  007CA2  75                 	db	117	;'u'
  3588  007CA3  6E                 	db	110	;'n'
  3589  007CA4  73                 	db	115	;'s'
  3590  007CA5  3A                 	db	58	;':'
  3591  007CA6  20                 	db	32
  3592  007CA7  00                 	db	0
  3593  007CA8                     STR_171:
  3594  007CA8  43                 	db	67	;'C'
  3595  007CA9  41                 	db	65	;'A'
  3596  007CAA  4E                 	db	78	;'N'
  3597  007CAB  20                 	db	32
  3598  007CAC  54                 	db	84	;'T'
  3599  007CAD  72                 	db	114	;'r'
  3600  007CAE  61                 	db	97	;'a'
  3601  007CAF  6E                 	db	110	;'n'
  3602  007CB0  73                 	db	115	;'s'
  3603  007CB1  6D                 	db	109	;'m'
  3604  007CB2  69                 	db	105	;'i'
  3605  007CB3  74                 	db	116	;'t'
  3606  007CB4  20                 	db	32
  3607  007CB5  6F                 	db	111	;'o'
  3608  007CB6  76                 	db	118	;'v'
  3609  007CB7  65                 	db	101	;'e'
  3610  007CB8  72                 	db	114	;'r'
  3611  007CB9  72                 	db	114	;'r'
  3612  007CBA  75                 	db	117	;'u'
  3613  007CBB  6E                 	db	110	;'n'
  3614  007CBC  73                 	db	115	;'s'
  3615  007CBD  3A                 	db	58	;':'
  3616  007CBE  20                 	db	32
  3617  007CBF  00                 	db	0
  3618  007CC0                     STR_209:
  3619  007CC0  52                 	db	82	;'R'
  3620  007CC1  58                 	db	88	;'X'
  3621  007CC2  20                 	db	32
  3622  007CC3  2D                 	db	45
  3623  007CC4  20                 	db	32
  3624  007CC5  52                 	db	82	;'R'
  3625  007CC6  65                 	db	101	;'e'
  3626  007CC7  61                 	db	97	;'a'
  3627  007CC8  64                 	db	100	;'d'
  3628  007CC9  20                 	db	32
  3629  007CCA  43                 	db	67	;'C'
  3630  007CCB  41                 	db	65	;'A'
  3631  007CCC  4E                 	db	78	;'N'
  3632  007CCD  20                 	db	32
  3633  007CCE  66                 	db	102	;'f'
  3634  007CCF  72                 	db	114	;'r'
  3635  007CD0  61                 	db	97	;'a'
  3636  007CD1  6D                 	db	109	;'m'
  3637  007CD2  65                 	db	101	;'e'
  3638  007CD3  2E                 	db	46
  3639  007CD4  0D                 	db	13
  3640  007CD5  0A                 	db	10
  3641  007CD6  00                 	db	0
  3642  007CD7                     STR_167:
  3643  007CD7  43                 	db	67	;'C'
  3644  007CD8  41                 	db	65	;'A'
  3645  007CD9  4E                 	db	78	;'N'
  3646  007CDA  20                 	db	32
  3647  007CDB  52                 	db	82	;'R'
  3648  007CDC  65                 	db	101	;'e'
  3649  007CDD  63                 	db	99	;'c'
  3650  007CDE  65                 	db	101	;'e'
  3651  007CDF  69                 	db	105	;'i'
  3652  007CE0  76                 	db	118	;'v'
  3653  007CE1  65                 	db	101	;'e'
  3654  007CE2  20                 	db	32
  3655  007CE3  6F                 	db	111	;'o'
  3656  007CE4  76                 	db	118	;'v'
  3657  007CE5  65                 	db	101	;'e'
  3658  007CE6  72                 	db	114	;'r'
  3659  007CE7  72                 	db	114	;'r'
  3660  007CE8  75                 	db	117	;'u'
  3661  007CE9  6E                 	db	110	;'n'
  3662  007CEA  73                 	db	115	;'s'
  3663  007CEB  3A                 	db	58	;':'
  3664  007CEC  20                 	db	32
  3665  007CED  00                 	db	0
  3666  007CEE                     STR_252:
  3667  007CEE  55                 	db	85	;'U'
  3668  007CEF  6E                 	db	110	;'n'
  3669  007CF0  6B                 	db	107	;'k'
  3670  007CF1  6E                 	db	110	;'n'
  3671  007CF2  6F                 	db	111	;'o'
  3672  007CF3  77                 	db	119	;'w'
  3673  007CF4  6E                 	db	110	;'n'
  3674  007CF5  20                 	db	32
  3675  007CF6  28                 	db	40
  3676  007CF7  56                 	db	86	;'V'
  3677  007CF8  65                 	db	101	;'e'
  3678  007CF9  72                 	db	114	;'r'
  3679  007CFA  62                 	db	98	;'b'
  3680  007CFB  6F                 	db	111	;'o'
  3681  007CFC  73                 	db	115	;'s'
  3682  007CFD  65                 	db	101	;'e'
  3683  007CFE  20                 	db	32
  3684  007CFF  75                 	db	117	;'u'
  3685  007D00  73                 	db	115	;'s'
  3686  007D01  65                 	db	101	;'e'
  3687  007D02  64                 	db	100	;'d'
  3688  007D03  29                 	db	41
  3689  007D04  00                 	db	0
  3690  007D05                     STR_23:
  3691  007D05  2B                 	db	43
  3692  007D06  4F                 	db	79	;'O'
  3693  007D07  4B                 	db	75	;'K'
  3694  007D08  20                 	db	32
  3695  007D09  2D                 	db	45
  3696  007D0A  20                 	db	32
  3697  007D0B  4C                 	db	76	;'L'
  3698  007D0C  6F                 	db	111	;'o'
  3699  007D0D  6F                 	db	111	;'o'
  3700  007D0E  70                 	db	112	;'p'
  3701  007D0F  62                 	db	98	;'b'
  3702  007D10  61                 	db	97	;'a'
  3703  007D11  63                 	db	99	;'c'
  3704  007D12  6B                 	db	107	;'k'
  3705  007D13  20                 	db	32
  3706  007D14  6D                 	db	109	;'m'
  3707  007D15  6F                 	db	111	;'o'
  3708  007D16  64                 	db	100	;'d'
  3709  007D17  65                 	db	101	;'e'
  3710  007D18  0D                 	db	13
  3711  007D19  0A                 	db	10
  3712  007D1A  00                 	db	0
  3713  007D1B                     STR_159:
  3714  007D1B  52                 	db	82	;'R'
  3715  007D1C  65                 	db	101	;'e'
  3716  007D1D  63                 	db	99	;'c'
  3717  007D1E  65                 	db	101	;'e'
  3718  007D1F  69                 	db	105	;'i'
  3719  007D20  76                 	db	118	;'v'
  3720  007D21  65                 	db	101	;'e'
  3721  007D22  64                 	db	100	;'d'
  3722  007D23  20                 	db	32
  3723  007D24  43                 	db	67	;'C'
  3724  007D25  41                 	db	65	;'A'
  3725  007D26  4E                 	db	78	;'N'
  3726  007D27  20                 	db	32
  3727  007D28  66                 	db	102	;'f'
  3728  007D29  72                 	db	114	;'r'
  3729  007D2A  61                 	db	97	;'a'
  3730  007D2B  6D                 	db	109	;'m'
  3731  007D2C  65                 	db	101	;'e'
  3732  007D2D  73                 	db	115	;'s'
  3733  007D2E  3A                 	db	58	;':'
  3734  007D2F  20                 	db	32
  3735  007D30  00                 	db	0
  3736  007D31                     STR_163:
  3737  007D31  52                 	db	82	;'R'
  3738  007D32  65                 	db	101	;'e'
  3739  007D33  63                 	db	99	;'c'
  3740  007D34  65                 	db	101	;'e'
  3741  007D35  69                 	db	105	;'i'
  3742  007D36  76                 	db	118	;'v'
  3743  007D37  65                 	db	101	;'e'
  3744  007D38  64                 	db	100	;'d'
  3745  007D39  20                 	db	32
  3746  007D3A  43                 	db	67	;'C'
  3747  007D3B  41                 	db	65	;'A'
  3748  007D3C  4E                 	db	78	;'N'
  3749  007D3D  20                 	db	32
  3750  007D3E  62                 	db	98	;'b'
  3751  007D3F  79                 	db	121	;'y'
  3752  007D40  74                 	db	116	;'t'
  3753  007D41  65                 	db	101	;'e'
  3754  007D42  73                 	db	115	;'s'
  3755  007D43  3A                 	db	58	;':'
  3756  007D44  20                 	db	32
  3757  007D45  00                 	db	0
  3758  007D46                     STR_219:
  3759  007D46  4D                 	db	77	;'M'
  3760  007D47  41                 	db	65	;'A'
  3761  007D48  53                 	db	83	;'S'
  3762  007D49  4B                 	db	75	;'K'
  3763  007D4A  20                 	db	32
  3764  007D4B  2D                 	db	45
  3765  007D4C  20                 	db	32
  3766  007D4D  53                 	db	83	;'S'
  3767  007D4E  65                 	db	101	;'e'
  3768  007D4F  74                 	db	116	;'t'
  3769  007D50  20                 	db	32
  3770  007D51  6D                 	db	109	;'m'
  3771  007D52  61                 	db	97	;'a'
  3772  007D53  73                 	db	115	;'s'
  3773  007D54  6B                 	db	107	;'k'
  3774  007D55  20                 	db	32
  3775  007D56  2E                 	db	46
  3776  007D57  0D                 	db	13
  3777  007D58  0A                 	db	10
  3778  007D59  00                 	db	0
  3779  007D5A                     STR_124:
  3780  007D5A  4A                 	db	74	;'J'
  3781  007D5B  46                 	db	70	;'F'
  3782  007D5C  72                 	db	114	;'r'
  3783  007D5D  61                 	db	97	;'a'
  3784  007D5E  6E                 	db	110	;'n'
  3785  007D5F  6B                 	db	107	;'k'
  3786  007D60  66                 	db	102	;'f'
  3787  007D61  75                 	db	117	;'u'
  3788  007D62  72                 	db	114	;'r'
  3789  007D63  74                 	db	116	;'t'
  3790  007D64  20                 	db	32
  3791  007D65  52                 	db	82	;'R'
  3792  007D66  53                 	db	83	;'S'
  3793  007D67  2D                 	db	45
  3794  007D68  32                 	db	50	;'2'
  3795  007D69  33                 	db	51	;'3'
  3796  007D6A  32                 	db	50	;'2'
  3797  007D6B  0D                 	db	13
  3798  007D6C  0A                 	db	10
  3799  007D6D  00                 	db	0
  3800  007D6E                     STR_25:
  3801  007D6E  2B                 	db	43
  3802  007D6F  4F                 	db	79	;'O'
  3803  007D70  4B                 	db	75	;'K'
  3804  007D71  20                 	db	32
  3805  007D72  2D                 	db	45
  3806  007D73  20                 	db	32
  3807  007D74  43                 	db	67	;'C'
  3808  007D75  6C                 	db	108	;'l'
  3809  007D76  6F                 	db	111	;'o'
  3810  007D77  73                 	db	115	;'s'
  3811  007D78  65                 	db	101	;'e'
  3812  007D79  64                 	db	100	;'d'
  3813  007D7A  20                 	db	32
  3814  007D7B  6D                 	db	109	;'m'
  3815  007D7C  6F                 	db	111	;'o'
  3816  007D7D  64                 	db	100	;'d'
  3817  007D7E  65                 	db	101	;'e'
  3818  007D7F  0D                 	db	13
  3819  007D80  0A                 	db	10
  3820  007D81  00                 	db	0
  3821  007D82                     STR_20:
  3822  007D82  2B                 	db	43
  3823  007D83  4F                 	db	79	;'O'
  3824  007D84  4B                 	db	75	;'K'
  3825  007D85  20                 	db	32
  3826  007D86  2D                 	db	45
  3827  007D87  20                 	db	32
  3828  007D88  4E                 	db	78	;'N'
  3829  007D89  6F                 	db	111	;'o'
  3830  007D8A  72                 	db	114	;'r'
  3831  007D8B  6D                 	db	109	;'m'
  3832  007D8C  61                 	db	97	;'a'
  3833  007D8D  6C                 	db	108	;'l'
  3834  007D8E  20                 	db	32
  3835  007D8F  6D                 	db	109	;'m'
  3836  007D90  6F                 	db	111	;'o'
  3837  007D91  64                 	db	100	;'d'
  3838  007D92  65                 	db	101	;'e'
  3839  007D93  0D                 	db	13
  3840  007D94  0A                 	db	10
  3841  007D95  00                 	db	0
  3842  007D96                     STR_21:
  3843  007D96  2B                 	db	43
  3844  007D97  4F                 	db	79	;'O'
  3845  007D98  4B                 	db	75	;'K'
  3846  007D99  20                 	db	32
  3847  007D9A  2D                 	db	45
  3848  007D9B  20                 	db	32
  3849  007D9C  53                 	db	83	;'S'
  3850  007D9D  69                 	db	105	;'i'
  3851  007D9E  6C                 	db	108	;'l'
  3852  007D9F  65                 	db	101	;'e'
  3853  007DA0  6E                 	db	110	;'n'
  3854  007DA1  74                 	db	116	;'t'
  3855  007DA2  20                 	db	32
  3856  007DA3  6D                 	db	109	;'m'
  3857  007DA4  6F                 	db	111	;'o'
  3858  007DA5  64                 	db	100	;'d'
  3859  007DA6  65                 	db	101	;'e'
  3860  007DA7  0D                 	db	13
  3861  007DA8  0A                 	db	10
  3862  007DA9  00                 	db	0
  3863  007DAA                     STR_78:
  3864  007DAA  49                 	db	73	;'I'
  3865  007DAB  6E                 	db	110	;'n'
  3866  007DAC  66                 	db	102	;'f'
  3867  007DAD  6F                 	db	111	;'o'
  3868  007DAE  20                 	db	32
  3869  007DAF  66                 	db	102	;'f'
  3870  007DB0  6F                 	db	111	;'o'
  3871  007DB1  72                 	db	114	;'r'
  3872  007DB2  20                 	db	32
  3873  007DB3  6E                 	db	110	;'n'
  3874  007DB4  6F                 	db	111	;'o'
  3875  007DB5  64                 	db	100	;'d'
  3876  007DB6  65                 	db	101	;'e'
  3877  007DB7  20                 	db	32
  3878  007DB8  69                 	db	105	;'i'
  3879  007DB9  64                 	db	100	;'d'
  3880  007DBA  20                 	db	32
  3881  007DBB  3D                 	db	61	;'='
  3882  007DBC  20                 	db	32
  3883  007DBD  00                 	db	0
  3884  007DBE                     STR_241:
  3885  007DBE  46                 	db	70	;'F'
  3886  007DBF  69                 	db	105	;'i'
  3887  007DC0  72                 	db	114	;'r'
  3888  007DC1  6D                 	db	109	;'m'
  3889  007DC2  77                 	db	119	;'w'
  3890  007DC3  61                 	db	97	;'a'
  3891  007DC4  72                 	db	114	;'r'
  3892  007DC5  65                 	db	101	;'e'
  3893  007DC6  20                 	db	32
  3894  007DC7  76                 	db	118	;'v'
  3895  007DC8  65                 	db	101	;'e'
  3896  007DC9  72                 	db	114	;'r'
  3897  007DCA  73                 	db	115	;'s'
  3898  007DCB  69                 	db	105	;'i'
  3899  007DCC  6F                 	db	111	;'o'
  3900  007DCD  6E                 	db	110	;'n'
  3901  007DCE  20                 	db	32
  3902  007DCF  3D                 	db	61	;'='
  3903  007DD0  20                 	db	32
  3904  007DD1  00                 	db	0
  3905  007DD2                     STR_22:
  3906  007DD2  2B                 	db	43
  3907  007DD3  4F                 	db	79	;'O'
  3908  007DD4  4B                 	db	75	;'K'
  3909  007DD5  20                 	db	32
  3910  007DD6  2D                 	db	45
  3911  007DD7  20                 	db	32
  3912  007DD8  53                 	db	83	;'S'
  3913  007DD9  6C                 	db	108	;'l'
  3914  007DDA  65                 	db	101	;'e'
  3915  007DDB  65                 	db	101	;'e'
  3916  007DDC  70                 	db	112	;'p'
  3917  007DDD  20                 	db	32
  3918  007DDE  6D                 	db	109	;'m'
  3919  007DDF  6F                 	db	111	;'o'
  3920  007DE0  64                 	db	100	;'d'
  3921  007DE1  65                 	db	101	;'e'
  3922  007DE2  0D                 	db	13
  3923  007DE3  0A                 	db	10
  3924  007DE4  00                 	db	0
  3925  007DE5                     STR_26:
  3926  007DE5  2B                 	db	43
  3927  007DE6  4F                 	db	79	;'O'
  3928  007DE7  4B                 	db	75	;'K'
  3929  007DE8  20                 	db	32
  3930  007DE9  2D                 	db	45
  3931  007DEA  20                 	db	32
  3932  007DEB  42                 	db	66	;'B'
  3933  007DEC  69                 	db	105	;'i'
  3934  007DED  74                 	db	116	;'t'
  3935  007DEE  73                 	db	115	;'s'
  3936  007DEF  20                 	db	32
  3937  007DF0  6D                 	db	109	;'m'
  3938  007DF1  6F                 	db	111	;'o'
  3939  007DF2  64                 	db	100	;'d'
  3940  007DF3  65                 	db	101	;'e'
  3941  007DF4  0D                 	db	13
  3942  007DF5  0A                 	db	10
  3943  007DF6  00                 	db	0
  3944  007DF7                     STR_39:
  3945  007DF7  2B                 	db	43
  3946  007DF8  4F                 	db	79	;'O'
  3947  007DF9  4B                 	db	75	;'K'
  3948  007DFA  20                 	db	32
  3949  007DFB  2D                 	db	45
  3950  007DFC  20                 	db	32
  3951  007DFD  6E                 	db	110	;'n'
  3952  007DFE  6F                 	db	111	;'o'
  3953  007DFF  20                 	db	32
  3954  007E00  65                 	db	101	;'e'
  3955  007E01  76                 	db	118	;'v'
  3956  007E02  65                 	db	101	;'e'
  3957  007E03  6E                 	db	110	;'n'
  3958  007E04  74                 	db	116	;'t'
  3959  007E05  73                 	db	115	;'s'
  3960  007E06  0D                 	db	13
  3961  007E07  0A                 	db	10
  3962  007E08  00                 	db	0
  3963  007E09                     STR_151:
  3964  007E09  53                 	db	83	;'S'
  3965  007E0A  65                 	db	101	;'e'
  3966  007E0B  6E                 	db	110	;'n'
  3967  007E0C  74                 	db	116	;'t'
  3968  007E0D  20                 	db	32
  3969  007E0E  43                 	db	67	;'C'
  3970  007E0F  41                 	db	65	;'A'
  3971  007E10  4E                 	db	78	;'N'
  3972  007E11  20                 	db	32
  3973  007E12  66                 	db	102	;'f'
  3974  007E13  72                 	db	114	;'r'
  3975  007E14  61                 	db	97	;'a'
  3976  007E15  6D                 	db	109	;'m'
  3977  007E16  65                 	db	101	;'e'
  3978  007E17  73                 	db	115	;'s'
  3979  007E18  3A                 	db	58	;':'
  3980  007E19  20                 	db	32
  3981  007E1A  00                 	db	0
  3982  007E1B                     STR_254:
  3983  007E1B  30                 	db	48	;'0'
  3984  007E1C  31                 	db	49	;'1'
  3985  007E1D  32                 	db	50	;'2'
  3986  007E1E  33                 	db	51	;'3'
  3987  007E1F  34                 	db	52	;'4'
  3988  007E20  35                 	db	53	;'5'
  3989  007E21  36                 	db	54	;'6'
  3990  007E22  37                 	db	55	;'7'
  3991  007E23  38                 	db	56	;'8'
  3992  007E24  39                 	db	57	;'9'
  3993  007E25  41                 	db	65	;'A'
  3994  007E26  42                 	db	66	;'B'
  3995  007E27  43                 	db	67	;'C'
  3996  007E28  44                 	db	68	;'D'
  3997  007E29  45                 	db	69	;'E'
  3998  007E2A  46                 	db	70	;'F'
  3999  007E2B  00                 	db	0
  4000  007E2C                     STR_255:
  4001  007E2C  30                 	db	48	;'0'
  4002  007E2D  31                 	db	49	;'1'
  4003  007E2E  32                 	db	50	;'2'
  4004  007E2F  33                 	db	51	;'3'
  4005  007E30  34                 	db	52	;'4'
  4006  007E31  35                 	db	53	;'5'
  4007  007E32  36                 	db	54	;'6'
  4008  007E33  37                 	db	55	;'7'
  4009  007E34  38                 	db	56	;'8'
  4010  007E35  39                 	db	57	;'9'
  4011  007E36  61                 	db	97	;'a'
  4012  007E37  62                 	db	98	;'b'
  4013  007E38  63                 	db	99	;'c'
  4014  007E39  64                 	db	100	;'d'
  4015  007E3A  65                 	db	101	;'e'
  4016  007E3B  66                 	db	102	;'f'
  4017  007E3C  00                 	db	0
  4018  007E3D                     STR_155:
  4019  007E3D  53                 	db	83	;'S'
  4020  007E3E  65                 	db	101	;'e'
  4021  007E3F  6E                 	db	110	;'n'
  4022  007E40  74                 	db	116	;'t'
  4023  007E41  20                 	db	32
  4024  007E42  43                 	db	67	;'C'
  4025  007E43  41                 	db	65	;'A'
  4026  007E44  4E                 	db	78	;'N'
  4027  007E45  20                 	db	32
  4028  007E46  62                 	db	98	;'b'
  4029  007E47  79                 	db	121	;'y'
  4030  007E48  74                 	db	116	;'t'
  4031  007E49  65                 	db	101	;'e'
  4032  007E4A  73                 	db	115	;'s'
  4033  007E4B  3A                 	db	58	;':'
  4034  007E4C  20                 	db	32
  4035  007E4D  00                 	db	0
  4036  007E4E                     STR_233:
  4037  007E4E  20                 	db	32
  4038  007E4F  6E                 	db	110	;'n'
  4039  007E50  6F                 	db	111	;'o'
  4040  007E51  64                 	db	100	;'d'
  4041  007E52  65                 	db	101	;'e'
  4042  007E53  73                 	db	115	;'s'
  4043  007E54  20                 	db	32
  4044  007E55  66                 	db	102	;'f'
  4045  007E56  6F                 	db	111	;'o'
  4046  007E57  75                 	db	117	;'u'
  4047  007E58  6E                 	db	110	;'n'
  4048  007E59  64                 	db	100	;'d'
  4049  007E5A  0D                 	db	13
  4050  007E5B  0A                 	db	10
  4051  007E5C  00                 	db	0
  4052  007E5D                     STR_51:
  4053  007E5D  56                 	db	86	;'V'
  4054  007E5E  61                 	db	97	;'a'
  4055  007E5F  6C                 	db	108	;'l'
  4056  007E60  75                 	db	117	;'u'
  4057  007E61  65                 	db	101	;'e'
  4058  007E62  20                 	db	32
  4059  007E63  66                 	db	102	;'f'
  4060  007E64  6F                 	db	111	;'o'
  4061  007E65  72                 	db	114	;'r'
  4062  007E66  20                 	db	32
  4063  007E67  72                 	db	114	;'r'
  4064  007E68  65                 	db	101	;'e'
  4065  007E69  67                 	db	103	;'g'
  4066  007E6A  20                 	db	32
  4067  007E6B  00                 	db	0
  4068  007E6C                     STR_239:
  4069  007E6C  4D                 	db	77	;'M'
  4070  007E6D  44                 	db	68	;'D'
  4071  007E6E  46                 	db	70	;'F'
  4072  007E6F  20                 	db	32
  4073  007E70  3D                 	db	61	;'='
  4074  007E71  20                 	db	32
  4075  007E72  68                 	db	104	;'h'
  4076  007E73  74                 	db	116	;'t'
  4077  007E74  74                 	db	116	;'t'
  4078  007E75  70                 	db	112	;'p'
  4079  007E76  3A                 	db	58	;':'
  4080  007E77  2F                 	db	47
  4081  007E78  2F                 	db	47
  4082  007E79  00                 	db	0
  4083  007E7A                     STR_249:
  4084  007E7A  56                 	db	86	;'V'
  4085  007E7B  53                 	db	83	;'S'
  4086  007E7C  43                 	db	67	;'C'
  4087  007E7D  50                 	db	80	;'P'
  4088  007E7E  20                 	db	32
  4089  007E7F  44                 	db	68	;'D'
  4090  007E80  72                 	db	114	;'r'
  4091  007E81  69                 	db	105	;'i'
  4092  007E82  76                 	db	118	;'v'
  4093  007E83  65                 	db	101	;'e'
  4094  007E84  72                 	db	114	;'r'
  4095  007E85  00                 	db	0
  4096  007E86                     STR_111:
  4097  007E86  52                 	db	82	;'R'
  4098  007E87  57                 	db	87	;'W'
  4099  007E88  54                 	db	84	;'T'
  4100  007E89  49                 	db	73	;'I'
  4101  007E8A  4D                 	db	77	;'M'
  4102  007E8B  45                 	db	69	;'E'
  4103  007E8C  4F                 	db	79	;'O'
  4104  007E8D  55                 	db	85	;'U'
  4105  007E8E  54                 	db	84	;'T'
  4106  007E8F  20                 	db	32
  4107  007E90  00                 	db	0
  4108  007E91                     STR_149:
  4109  007E91  2C                 	db	44
  4110  007E92  44                 	db	68	;'D'
  4111  007E93  61                 	db	97	;'a'
  4112  007E94  74                 	db	116	;'t'
  4113  007E95  61                 	db	97	;'a'
  4114  007E96  3D                 	db	61	;'='
  4115  007E97  6E                 	db	110	;'n'
  4116  007E98  6F                 	db	111	;'o'
  4117  007E99  6E                 	db	110	;'n'
  4118  007E9A  65                 	db	101	;'e'
  4119  007E9B  00                 	db	0
  4120  007E9C                     STR_245:
  4121  007E9C  56                 	db	86	;'V'
  4122  007E9D  65                 	db	101	;'e'
  4123  007E9E  72                 	db	114	;'r'
  4124  007E9F  73                 	db	115	;'s'
  4125  007EA0  69                 	db	105	;'i'
  4126  007EA1  6F                 	db	111	;'o'
  4127  007EA2  6E                 	db	110	;'n'
  4128  007EA3  3A                 	db	58	;':'
  4129  007EA4  20                 	db	32
  4130  007EA5  00                 	db	0
  4131  007EA6                     STR_251:
  4132  007EA6  56                 	db	86	;'V'
  4133  007EA7  53                 	db	83	;'S'
  4134  007EA8  43                 	db	67	;'C'
  4135  007EA9  50                 	db	80	;'P'
  4136  007EAA  20                 	db	32
  4137  007EAB  4E                 	db	78	;'N'
  4138  007EAC  6F                 	db	111	;'o'
  4139  007EAD  64                 	db	100	;'d'
  4140  007EAE  65                 	db	101	;'e'
  4141  007EAF  00                 	db	0
  4142  007EB0                     STR_250:
  4143  007EB0  53                 	db	83	;'S'
  4144  007EB1  4C                 	db	76	;'L'
  4145  007EB2  20                 	db	32
  4146  007EB3  44                 	db	68	;'D'
  4147  007EB4  72                 	db	114	;'r'
  4148  007EB5  69                 	db	105	;'i'
  4149  007EB6  76                 	db	118	;'v'
  4150  007EB7  65                 	db	101	;'e'
  4151  007EB8  72                 	db	114	;'r'
  4152  007EB9  00                 	db	0
  4153  007EBA                     STR_112:
  4154  007EBA  53                 	db	83	;'S'
  4155  007EBB  54                 	db	84	;'T'
  4156  007EBC  41                 	db	65	;'A'
  4157  007EBD  52                 	db	82	;'R'
  4158  007EBE  54                 	db	84	;'T'
  4159  007EBF  49                 	db	73	;'I'
  4160  007EC0  46                 	db	70	;'F'
  4161  007EC1  20                 	db	32
  4162  007EC2  00                 	db	0
  4163  007EC3                     STR_139:
  4164  007EC3  2C                 	db	44
  4165  007EC4  6E                 	db	110	;'n'
  4166  007EC5  6F                 	db	111	;'o'
  4167  007EC6  64                 	db	100	;'d'
  4168  007EC7  65                 	db	101	;'e'
  4169  007EC8  69                 	db	105	;'i'
  4170  007EC9  64                 	db	100	;'d'
  4171  007ECA  3D                 	db	61	;'='
  4172  007ECB  00                 	db	0
  4173  007ECC                     STR_13:
  4174  007ECC  4C                 	db	76	;'L'
  4175  007ECD  4F                 	db	79	;'O'
  4176  007ECE  4F                 	db	79	;'O'
  4177  007ECF  50                 	db	80	;'P'
  4178  007ED0  42                 	db	66	;'B'
  4179  007ED1  41                 	db	65	;'A'
  4180  007ED2  43                 	db	67	;'C'
  4181  007ED3  4B                 	db	75	;'K'
  4182  007ED4  00                 	db	0
  4183  007ED5                     STR_125:
  4184  007ED5  56                 	db	86	;'V'
  4185  007ED6  31                 	db	49	;'1'
  4186  007ED7  30                 	db	48	;'0'
  4187  007ED8  31                 	db	49	;'1'
  4188  007ED9  31                 	db	49	;'1'
  4189  007EDA  0D                 	db	13
  4190  007EDB  0A                 	db	10
  4191  007EDC  00                 	db	0
  4192  007EDD                     STR_126:
  4193  007EDD  4E                 	db	78	;'N'
  4194  007EDE  31                 	db	49	;'1'
  4195  007EDF  39                 	db	57	;'9'
  4196  007EE0  37                 	db	55	;'7'
  4197  007EE1  37                 	db	55	;'7'
  4198  007EE2  0D                 	db	13
  4199  007EE3  0A                 	db	10
  4200  007EE4  00                 	db	0
  4201  007EE5                     STR_234:
  4202  007EE5  47                 	db	71	;'G'
  4203  007EE6  55                 	db	85	;'U'
  4204  007EE7  49                 	db	73	;'I'
  4205  007EE8  44                 	db	68	;'D'
  4206  007EE9  20                 	db	32
  4207  007EEA  3D                 	db	61	;'='
  4208  007EEB  20                 	db	32
  4209  007EEC  00                 	db	0
  4210  007EED                     STR_120:
  4211  007EED  46                 	db	70	;'F'
  4212  007EEE  49                 	db	73	;'I'
  4213  007EEF  4C                 	db	76	;'L'
  4214  007EF0  54                 	db	84	;'T'
  4215  007EF1  45                 	db	69	;'E'
  4216  007EF2  52                 	db	82	;'R'
  4217  007EF3  20                 	db	32
  4218  007EF4  00                 	db	0
  4219  007EF5                     STR_133:
  4220  007EF5  2C                 	db	44
  4221  007EF6  63                 	db	99	;'c'
  4222  007EF7  6C                 	db	108	;'l'
  4223  007EF8  61                 	db	97	;'a'
  4224  007EF9  73                 	db	115	;'s'
  4225  007EFA  73                 	db	115	;'s'
  4226  007EFB  3D                 	db	61	;'='
  4227  007EFC  00                 	db	0
  4228  007EFD                     STR_114:
  4229  007EFD  56                 	db	86	;'V'
  4230  007EFE  45                 	db	69	;'E'
  4231  007EFF  52                 	db	82	;'R'
  4232  007F00  42                 	db	66	;'B'
  4233  007F01  4F                 	db	79	;'O'
  4234  007F02  53                 	db	83	;'S'
  4235  007F03  45                 	db	69	;'E'
  4236  007F04  00                 	db	0
  4237  007F05                     STR_109:
  4238  007F05  44                 	db	68	;'D'
  4239  007F06  45                 	db	69	;'E'
  4240  007F07  43                 	db	67	;'C'
  4241  007F08  49                 	db	73	;'I'
  4242  007F09  4D                 	db	77	;'M'
  4243  007F0A  41                 	db	65	;'A'
  4244  007F0B  4C                 	db	76	;'L'
  4245  007F0C  00                 	db	0
  4246  007F0D                     STR_17:
  4247  007F0D  56                 	db	86	;'V'
  4248  007F0E  45                 	db	69	;'E'
  4249  007F0F  52                 	db	82	;'R'
  4250  007F10  53                 	db	83	;'S'
  4251  007F11  49                 	db	73	;'I'
  4252  007F12  4F                 	db	79	;'O'
  4253  007F13  4E                 	db	78	;'N'
  4254  007F14  00                 	db	0
  4255  007F15                     STR_168:
  4256  007F15  30                 	db	48	;'0'
  4257  007F16  78                 	db	120	;'x'
  4258  007F17  25                 	db	37
  4259  007F18  30                 	db	48	;'0'
  4260  007F19  38                 	db	56	;'8'
  4261  007F1A  6C                 	db	108	;'l'
  4262  007F1B  58                 	db	88	;'X'
  4263  007F1C  00                 	db	0
  4264  007F1D                     STR_248:
  4265  007F1D  56                 	db	86	;'V'
  4266  007F1E  65                 	db	101	;'e'
  4267  007F1F  72                 	db	114	;'r'
  4268  007F20  62                 	db	98	;'b'
  4269  007F21  6F                 	db	111	;'o'
  4270  007F22  73                 	db	115	;'s'
  4271  007F23  65                 	db	101	;'e'
  4272  007F24  00                 	db	0
  4273  007F25                     STR_247:
  4274  007F25  4D                 	db	77	;'M'
  4275  007F26  6F                 	db	111	;'o'
  4276  007F27  64                 	db	100	;'d'
  4277  007F28  65                 	db	101	;'e'
  4278  007F29  3A                 	db	58	;':'
  4279  007F2A  20                 	db	32
  4280  007F2B  00                 	db	0
  4281  007F2C                     STR_145:
  4282  007F2C  2C                 	db	44
  4283  007F2D  44                 	db	68	;'D'
  4284  007F2E  61                 	db	97	;'a'
  4285  007F2F  74                 	db	116	;'t'
  4286  007F30  61                 	db	97	;'a'
  4287  007F31  3D                 	db	61	;'='
  4288  007F32  00                 	db	0
  4289  007F33                     STR_136:
  4290  007F33  2C                 	db	44
  4291  007F34  74                 	db	116	;'t'
  4292  007F35  79                 	db	121	;'y'
  4293  007F36  70                 	db	112	;'p'
  4294  007F37  65                 	db	101	;'e'
  4295  007F38  3D                 	db	61	;'='
  4296  007F39  00                 	db	0
  4297  007F3A                     STR_142:
  4298  007F3A  2C                 	db	44
  4299  007F3B  73                 	db	115	;'s'
  4300  007F3C  69                 	db	105	;'i'
  4301  007F3D  7A                 	db	122	;'z'
  4302  007F3E  65                 	db	101	;'e'
  4303  007F3F  3D                 	db	61	;'='
  4304  007F40  00                 	db	0
  4305  007F41                     STR_130:
  4306  007F41  3C                 	db	60	;'<'
  4307  007F42  50                 	db	80	;'P'
  4308  007F43  72                 	db	114	;'r'
  4309  007F44  69                 	db	105	;'i'
  4310  007F45  6F                 	db	111	;'o'
  4311  007F46  3D                 	db	61	;'='
  4312  007F47  00                 	db	0
  4313  007F48                     STR_19:
  4314  007F48  49                 	db	73	;'I'
  4315  007F49  46                 	db	70	;'F'
  4316  007F4A  4D                 	db	77	;'M'
  4317  007F4B  4F                 	db	79	;'O'
  4318  007F4C  44                 	db	68	;'D'
  4319  007F4D  45                 	db	69	;'E'
  4320  007F4E  00                 	db	0
  4321  007F4F                     STR_15:
  4322  007F4F  4C                 	db	76	;'L'
  4323  007F50  49                 	db	73	;'I'
  4324  007F51  53                 	db	83	;'S'
  4325  007F52  54                 	db	84	;'T'
  4326  007F53  45                 	db	69	;'E'
  4327  007F54  4E                 	db	78	;'N'
  4328  007F55  00                 	db	0
  4329  007F56                     STR_82:
  4330  007F56  46                 	db	70	;'F'
  4331  007F57  49                 	db	73	;'I'
  4332  007F58  4C                 	db	76	;'L'
  4333  007F59  54                 	db	84	;'T'
  4334  007F5A  45                 	db	69	;'E'
  4335  007F5B  52                 	db	82	;'R'
  4336  007F5C  00                 	db	0
  4337  007F5D                     STR_9:
  4338  007F5D  53                 	db	83	;'S'
  4339  007F5E  49                 	db	73	;'I'
  4340  007F5F  4C                 	db	76	;'L'
  4341  007F60  45                 	db	69	;'E'
  4342  007F61  4E                 	db	78	;'N'
  4343  007F62  54                 	db	84	;'T'
  4344  007F63  00                 	db	0
  4345  007F64                     STR_52:
  4346  007F64  30                 	db	48	;'0'
  4347  007F65  78                 	db	120	;'x'
  4348  007F66  25                 	db	37
  4349  007F67  30                 	db	48	;'0'
  4350  007F68  32                 	db	50	;'2'
  4351  007F69  58                 	db	88	;'X'
  4352  007F6A  00                 	db	0
  4353  007F6B                     STR_134:
  4354  007F6B  30                 	db	48	;'0'
  4355  007F6C  78                 	db	120	;'x'
  4356  007F6D  25                 	db	37
  4357  007F6E  30                 	db	48	;'0'
  4358  007F6F  34                 	db	52	;'4'
  4359  007F70  58                 	db	88	;'X'
  4360  007F71  00                 	db	0
  4361  007F72                     STR_152:
  4362  007F72  30                 	db	48	;'0'
  4363  007F73  78                 	db	120	;'x'
  4364  007F74  25                 	db	37
  4365  007F75  30                 	db	48	;'0'
  4366  007F76  38                 	db	56	;'8'
  4367  007F77  58                 	db	88	;'X'
  4368  007F78  00                 	db	0
  4369  007F79                     STR_127:
  4370  007F79  46                 	db	70	;'F'
  4371  007F7A  30                 	db	48	;'0'
  4372  007F7B  30                 	db	48	;'0'
  4373  007F7C  0D                 	db	13
  4374  007F7D  0A                 	db	10
  4375  007F7E  00                 	db	0
  4376  007F7F                     STR_8:
  4377  007F7F  2B                 	db	43
  4378  007F80  4F                 	db	79	;'O'
  4379  007F81  4B                 	db	75	;'K'
  4380  007F82  0D                 	db	13
  4381  007F83  0A                 	db	10
  4382  007F84  00                 	db	0
  4383  007F85                     STR_113:
  4384  007F85  4D                 	db	77	;'M'
  4385  007F86  4F                 	db	79	;'O'
  4386  007F87  44                 	db	68	;'D'
  4387  007F88  45                 	db	69	;'E'
  4388  007F89  20                 	db	32
  4389  007F8A  00                 	db	0
  4390  007F8B                     STR_121:
  4391  007F8B  4D                 	db	77	;'M'
  4392  007F8C  41                 	db	65	;'A'
  4393  007F8D  53                 	db	83	;'S'
  4394  007F8E  4B                 	db	75	;'K'
  4395  007F8F  20                 	db	32
  4396  007F90  00                 	db	0
  4397  007F91                     STR_11:
  4398  007F91  43                 	db	67	;'C'
  4399  007F92  4C                 	db	76	;'L'
  4400  007F93  4F                 	db	79	;'O'
  4401  007F94  53                 	db	83	;'S'
  4402  007F95  45                 	db	69	;'E'
  4403  007F96  00                 	db	0
  4404  007F97                     STR_118:
  4405  007F97  53                 	db	83	;'S'
  4406  007F98  4C                 	db	76	;'L'
  4407  007F99  43                 	db	67	;'C'
  4408  007F9A  41                 	db	65	;'A'
  4409  007F9B  4E                 	db	78	;'N'
  4410  007F9C  00                 	db	0
  4411  007F9D                     STR_106:
  4412  007F9D  53                 	db	83	;'S'
  4413  007F9E  45                 	db	69	;'E'
  4414  007F9F  54                 	db	84	;'T'
  4415  007FA0  20                 	db	32
  4416  007FA1  00                 	db	0
  4417  007FA2                     STR_44:
  4418  007FA2  46                 	db	70	;'F'
  4419  007FA3  49                 	db	73	;'I'
  4420  007FA4  4E                 	db	78	;'N'
  4421  007FA5  44                 	db	68	;'D'
  4422  007FA6  00                 	db	0
  4423  007FA7                     STR_45:
  4424  007FA7  52                 	db	82	;'R'
  4425  007FA8  52                 	db	82	;'R'
  4426  007FA9  45                 	db	69	;'E'
  4427  007FAA  47                 	db	71	;'G'
  4428  007FAB  00                 	db	0
  4429  007FAC                     STR_68:
  4430  007FAC  57                 	db	87	;'W'
  4431  007FAD  52                 	db	82	;'R'
  4432  007FAE  45                 	db	69	;'E'
  4433  007FAF  47                 	db	71	;'G'
  4434  007FB0  00                 	db	0
  4435  007FB1                     STR_94:
  4436  007FB1  4D                 	db	77	;'M'
  4437  007FB2  41                 	db	65	;'A'
  4438  007FB3  53                 	db	83	;'S'
  4439  007FB4  4B                 	db	75	;'K'
  4440  007FB5  00                 	db	0
  4441  007FB6                     STR_7:
  4442  007FB6  4F                 	db	79	;'O'
  4443  007FB7  50                 	db	80	;'P'
  4444  007FB8  45                 	db	69	;'E'
  4445  007FB9  4E                 	db	78	;'N'
  4446  007FBA  00                 	db	0
  4447  007FBB                     STR_77:
  4448  007FBB  49                 	db	73	;'I'
  4449  007FBC  4E                 	db	78	;'N'
  4450  007FBD  46                 	db	70	;'F'
  4451  007FBE  4F                 	db	79	;'O'
  4452  007FBF  00                 	db	0
  4453  007FC0                     STR_116:
  4454  007FC0  56                 	db	86	;'V'
  4455  007FC1  53                 	db	83	;'S'
  4456  007FC2  43                 	db	67	;'C'
  4457  007FC3  50                 	db	80	;'P'
  4458  007FC4  00                 	db	0
  4459  007FC5                     STR_42:
  4460  007FC5  48                 	db	72	;'H'
  4461  007FC6  45                 	db	69	;'E'
  4462  007FC7  4C                 	db	76	;'L'
  4463  007FC8  50                 	db	80	;'P'
  4464  007FC9  00                 	db	0
  4465  007FCA                     STR_40:
  4466  007FCA  53                 	db	83	;'S'
  4467  007FCB  54                 	db	84	;'T'
  4468  007FCC  41                 	db	65	;'A'
  4469  007FCD  54                 	db	84	;'T'
  4470  007FCE  00                 	db	0
  4471  007FCF                     STR_5:
  4472  007FCF  42                 	db	66	;'B'
  4473  007FD0  4F                 	db	79	;'O'
  4474  007FD1  4F                 	db	79	;'O'
  4475  007FD2  54                 	db	84	;'T'
  4476  007FD3  00                 	db	0
  4477  007FD4                     STR_150:
  4478  007FD4  3E                 	db	62	;'>'
  4479  007FD5  0D                 	db	13
  4480  007FD6  0A                 	db	10
  4481  007FD7  00                 	db	0
  4482  007FD8                     STR_41:
  4483  007FD8  45                 	db	69	;'E'
  4484  007FD9  52                 	db	82	;'R'
  4485  007FDA  52                 	db	82	;'R'
  4486  007FDB  00                 	db	0
  4487  007FDC                     STR_107:
  4488  007FDC  48                 	db	72	;'H'
  4489  007FDD  45                 	db	69	;'E'
  4490  007FDE  58                 	db	88	;'X'
  4491  007FDF  00                 	db	0
  4492  007FE0                     STR_153:
  4493  007FE0  25                 	db	37
  4494  007FE1  6C                 	db	108	;'l'
  4495  007FE2  75                 	db	117	;'u'
  4496  007FE3  00                 	db	0
  4497  007FE4                     STR_236:
  4498  007FE4  2D                 	db	45
  4499  007FE5  2D                 	db	45
  4500  007FE6  00                 	db	0
  4501  007FE7                     STR_37:
  4502  007FE7  52                 	db	82	;'R'
  4503  007FE8  58                 	db	88	;'X'
  4504  007FE9  00                 	db	0
  4505  007FEA                     STR_28:
  4506  007FEA  54                 	db	84	;'T'
  4507  007FEB  58                 	db	88	;'X'
  4508  007FEC  00                 	db	0
  4509  007FED                     STR_53:
  4510  007FED  25                 	db	37
  4511  007FEE  64                 	db	100	;'d'
  4512  007FEF  00                 	db	0
  4513  007FF0                     STR_129:
  4514  007FF0  07                 	db	7
  4515  007FF1  00                 	db	0
  4516  007FF2                     STR_128:
  4517  007FF2  0D                 	db	13
  4518  007FF3  00                 	db	0
  4519  007FF4                     STR_29:
  4520  007FF4  2C                 	db	44
  4521  007FF5  00                 	db	0
  4522  007FF6                     STR_243:
  4523  007FF6  2E                 	db	46
  4524  007FF7  00                 	db	0
  4525  007FF8                     STR_235:
  4526  007FF8  30                 	db	48	;'0'
  4527  007FF9  00                 	db	0
  4528  007FFA                     STR_237:
  4529  007FFA  3A                 	db	58	;':'
  4530  007FFB  00                 	db	0
  4531  007FFC                     STR_242:
  4532  007FFC  3F                 	db	63	;'?'
  4533  007FFD  00                 	db	0
  4534  007FFE                     __end_of__stringdata:
  4535                           	opt stack 0
  4536                           
  4537                           ; #config settings
  4538  007FFE  00                 	db	0	; dummy byte at the end
  4539  0000                     tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           indf0	equ	0xFEF
  4547                           fsr0h	equ	0xFEA
  4548                           fsr0l	equ	0xFE9
  4549                           wreg	equ	0xFE8
  4550                           indf1	equ	0xFE7
  4551                           postinc1	equ	0xFE6
  4552                           postdec1	equ	0xFE5
  4553                           fsr1h	equ	0xFE2
  4554                           fsr1l	equ	0xFE1
  4555                           indf2	equ	0xFDF
  4556                           postinc2	equ	0xFDE
  4557                           postdec2	equ	0xFDD
  4558                           plusw2	equ	0xFDB
  4559                           fsr2h	equ	0xFDA
  4560                           fsr2l	equ	0xFD9
  4561                           status	equ	0xFD8
  4562                           
  4563                           	psect	cinit
  4564  004AD6                     __pcinit:
  4565                           	opt stack 0
  4566  004AD6                     start_initialization:
  4567                           	opt stack 0
  4568  004AD6                     __initialization:
  4569                           	opt stack 0
  4570                           
  4571                           ; Clear objects allocated to BIGRAM (500 bytes)
  4572  004AD6  EE03  F03D         	lfsr	0,__pbssBIGRAM
  4573  004ADA  EE11 F0F4          	lfsr	1,500
  4574  004ADE                     clear_0:
  4575  004ADE  6AEE               	clrf	postinc0,c
  4576  004AE0  50E5               	movf	postdec1,w,c
  4577  004AE2  50E1               	movf	fsr1l,w,c
  4578  004AE4  E1FC               	bnz	clear_0
  4579  004AE6  50E2               	movf	fsr1h,w,c
  4580  004AE8  E1FA               	bnz	clear_0
  4581                           
  4582                           ; Clear objects allocated to BANK2 (256 bytes)
  4583  004AEA  EE02  F000         	lfsr	0,__pbssBANK2
  4584  004AEE  EE11 F000          	lfsr	1,256
  4585  004AF2                     clear_1:
  4586  004AF2  6AEE               	clrf	postinc0,c
  4587  004AF4  50E5               	movf	postdec1,w,c
  4588  004AF6  50E1               	movf	fsr1l,w,c
  4589  004AF8  E1FC               	bnz	clear_1
  4590  004AFA  50E2               	movf	fsr1h,w,c
  4591  004AFC  E1FA               	bnz	clear_1
  4592                           
  4593                           ; Clear objects allocated to BANK1 (200 bytes)
  4594  004AFE  EE01  F000         	lfsr	0,__pbssBANK1
  4595  004B02  0EC8               	movlw	200
  4596  004B04                     clear_2:
  4597  004B04  6AEE               	clrf	postinc0,c
  4598  004B06  06E8               	decf	wreg,f,c
  4599  004B08  E1FD               	bnz	clear_2
  4600                           
  4601                           ; Clear objects allocated to BANK0 (21 bytes)
  4602  004B0A  EE00  F0CB         	lfsr	0,__pbssBANK0
  4603  004B0E  0E15               	movlw	21
  4604  004B10                     clear_3:
  4605  004B10  6AEE               	clrf	postinc0,c
  4606  004B12  06E8               	decf	wreg,f,c
  4607  004B14  E1FD               	bnz	clear_3
  4608                           
  4609                           ; Clear objects allocated to COMRAM (21 bytes)
  4610  004B16  EE00  F033         	lfsr	0,__pbssCOMRAM
  4611  004B1A  0E15               	movlw	21
  4612  004B1C                     clear_4:
  4613  004B1C  6AEE               	clrf	postinc0,c
  4614  004B1E  06E8               	decf	wreg,f,c
  4615  004B20  E1FD               	bnz	clear_4
  4616  004B22                     end_of_initialization:
  4617                           	opt stack 0
  4618  004B22                     __end_of__initialization:
  4619                           	opt stack 0
  4620  004B22  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4621  004B24  6EF8               	movwf	tblptru,c
  4622  004B26  0100               	movlb	0
  4623  004B28  EF88  F018         	goto	_main	;jump to C main() function
  4624                           tblptru	equ	0xFF8
  4625                           tblptrh	equ	0xFF7
  4626                           tblptrl	equ	0xFF6
  4627                           tablat	equ	0xFF5
  4628                           prodh	equ	0xFF4
  4629                           prodl	equ	0xFF3
  4630                           intcon	equ	0xFF2
  4631                           indf0	equ	0xFEF
  4632                           postinc0	equ	0xFEE
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           indf1	equ	0xFE7
  4637                           postinc1	equ	0xFE6
  4638                           postdec1	equ	0xFE5
  4639                           fsr1h	equ	0xFE2
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           plusw2	equ	0xFDB
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649                           	psect	bssCOMRAM
  4650  000033                     __pbssCOMRAM:
  4651                           	opt stack 0
  4652  000033                     _made_table:
  4653                           	opt stack 0
  4654  000033                     	ds	2
  4655  000035                     _status_led_cnt:
  4656                           	opt stack 0
  4657  000035                     	ds	2
  4658  000037                     strtok@sp:
  4659                           	opt stack 0
  4660  000037                     	ds	2
  4661  000039                     _USART_Status:
  4662                           	opt stack 0
  4663  000039                     	ds	1
  4664  00003A                     __ECANRxFilterHitInfo:
  4665                           	opt stack 0
  4666  00003A                     	ds	1
  4667  00003B                     _bDLE:
  4668                           	opt stack 0
  4669  00003B                     	ds	1
  4670  00003C                     _ledFunctionality:
  4671                           	opt stack 0
  4672  00003C                     	ds	1
  4673  00003D                     _nTimeStamp:
  4674                           	opt stack 0
  4675  00003D                     	ds	1
  4676  00003E                     _sequencyno:
  4677                           	opt stack 0
  4678  00003E                     	ds	1
  4679  00003F                     _stateVscpDriver:
  4680                           	opt stack 0
  4681  00003F                     	ds	1
  4682  000040                     _vscpData:
  4683                           	opt stack 0
  4684  000040                     	ds	8
  4685                           tblptru	equ	0xFF8
  4686                           tblptrh	equ	0xFF7
  4687                           tblptrl	equ	0xFF6
  4688                           tablat	equ	0xFF5
  4689                           prodh	equ	0xFF4
  4690                           prodl	equ	0xFF3
  4691                           intcon	equ	0xFF2
  4692                           indf0	equ	0xFEF
  4693                           postinc0	equ	0xFEE
  4694                           fsr0h	equ	0xFEA
  4695                           fsr0l	equ	0xFE9
  4696                           wreg	equ	0xFE8
  4697                           indf1	equ	0xFE7
  4698                           postinc1	equ	0xFE6
  4699                           postdec1	equ	0xFE5
  4700                           fsr1h	equ	0xFE2
  4701                           fsr1l	equ	0xFE1
  4702                           indf2	equ	0xFDF
  4703                           postinc2	equ	0xFDE
  4704                           postdec2	equ	0xFDD
  4705                           plusw2	equ	0xFDB
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710                           	psect	bssBANK0
  4711  0000CB                     __pbssBANK0:
  4712                           	opt stack 0
  4713  0000CB                     _timekeeper:
  4714                           	opt stack 0
  4715  0000CB                     	ds	4
  4716  0000CF                     _timer:
  4717                           	opt stack 0
  4718  0000CF                     	ds	4
  4719  0000D3                     _bHex:
  4720                           	opt stack 0
  4721  0000D3                     	ds	1
  4722  0000D4                     _bInitiated:
  4723                           	opt stack 0
  4724  0000D4                     	ds	1
  4725  0000D5                     _bOpen:
  4726                           	opt stack 0
  4727  0000D5                     	ds	1
  4728  0000D6                     _bSilent:
  4729                           	opt stack 0
  4730  0000D6                     	ds	1
  4731  0000D7                     _mode:
  4732                           	opt stack 0
  4733  0000D7                     	ds	1
  4734  0000D8                     _pos:
  4735                           	opt stack 0
  4736  0000D8                     	ds	1
  4737  0000D9                     _rwtimeout:
  4738                           	opt stack 0
  4739  0000D9                     	ds	1
  4740  0000DA                     _vscpClass:
  4741                           	opt stack 0
  4742  0000DA                     	ds	2
  4743  0000DC                     _vscpNodeId:
  4744                           	opt stack 0
  4745  0000DC                     	ds	1
  4746  0000DD                     _vscpPriority:
  4747                           	opt stack 0
  4748  0000DD                     	ds	1
  4749  0000DE                     _vscpSize:
  4750                           	opt stack 0
  4751  0000DE                     	ds	1
  4752  0000DF                     _vscpType:
  4753                           	opt stack 0
  4754  0000DF                     	ds	1
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           indf0	equ	0xFEF
  4763                           postinc0	equ	0xFEE
  4764                           fsr0h	equ	0xFEA
  4765                           fsr0l	equ	0xFE9
  4766                           wreg	equ	0xFE8
  4767                           indf1	equ	0xFE7
  4768                           postinc1	equ	0xFE6
  4769                           postdec1	equ	0xFE5
  4770                           fsr1h	equ	0xFE2
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780                           	psect	bssBANK1
  4781  000100                     __pbssBANK1:
  4782                           	opt stack 0
  4783  000100                     _can_receiveOverruns:
  4784                           	opt stack 0
  4785  000100                     	ds	4
  4786  000104                     _can_transmitOverruns:
  4787                           	opt stack 0
  4788  000104                     	ds	4
  4789  000108                     _cntRxBytes:
  4790                           	opt stack 0
  4791  000108                     	ds	4
  4792  00010C                     _cntRxFrames:
  4793                           	opt stack 0
  4794  00010C                     	ds	4
  4795  000110                     _cntTxBytes:
  4796                           	opt stack 0
  4797  000110                     	ds	4
  4798  000114                     _cntTxFrames:
  4799                           	opt stack 0
  4800  000114                     	ds	4
  4801  000118                     _uart_receiveOverruns:
  4802                           	opt stack 0
  4803  000118                     	ds	4
  4804  00011C                     _uart_transmitOverruns:
  4805                           	opt stack 0
  4806  00011C                     	ds	4
  4807  000120                     _cmdbuf:
  4808                           	opt stack 0
  4809  000120                     	ds	80
  4810  000170                     _wrkbuf:
  4811                           	opt stack 0
  4812  000170                     	ds	80
  4813  0001C0                     _inputFifo:
  4814                           	opt stack 0
  4815  0001C0                     	ds	8
  4816                           tblptru	equ	0xFF8
  4817                           tblptrh	equ	0xFF7
  4818                           tblptrl	equ	0xFF6
  4819                           tablat	equ	0xFF5
  4820                           prodh	equ	0xFF4
  4821                           prodl	equ	0xFF3
  4822                           intcon	equ	0xFF2
  4823                           indf0	equ	0xFEF
  4824                           postinc0	equ	0xFEE
  4825                           fsr0h	equ	0xFEA
  4826                           fsr0l	equ	0xFE9
  4827                           wreg	equ	0xFE8
  4828                           indf1	equ	0xFE7
  4829                           postinc1	equ	0xFE6
  4830                           postdec1	equ	0xFE5
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           postinc2	equ	0xFDE
  4835                           postdec2	equ	0xFDD
  4836                           plusw2	equ	0xFDB
  4837                           fsr2h	equ	0xFDA
  4838                           fsr2l	equ	0xFD9
  4839                           status	equ	0xFD8
  4840                           
  4841                           	psect	bssBANK2
  4842  000200                     __pbssBANK2:
  4843                           	opt stack 0
  4844  000200                     _crc8_table:
  4845                           	opt stack 0
  4846  000200                     	ds	256
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           indf0	equ	0xFEF
  4855                           postinc0	equ	0xFEE
  4856                           fsr0h	equ	0xFEA
  4857                           fsr0l	equ	0xFE9
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           postinc1	equ	0xFE6
  4861                           postdec1	equ	0xFE5
  4862                           fsr1h	equ	0xFE2
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           plusw2	equ	0xFDB
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872                           	psect	bssBIGRAM
  4873  00033D                     __pbssBIGRAM:
  4874                           	opt stack 0
  4875  00033D                     _inputBuffer:
  4876                           	opt stack 0
  4877  00033D                     	ds	500
  4878                           tblptru	equ	0xFF8
  4879                           tblptrh	equ	0xFF7
  4880                           tblptrl	equ	0xFF6
  4881                           tablat	equ	0xFF5
  4882                           prodh	equ	0xFF4
  4883                           prodl	equ	0xFF3
  4884                           intcon	equ	0xFF2
  4885                           indf0	equ	0xFEF
  4886                           postinc0	equ	0xFEE
  4887                           fsr0h	equ	0xFEA
  4888                           fsr0l	equ	0xFE9
  4889                           wreg	equ	0xFE8
  4890                           indf1	equ	0xFE7
  4891                           postinc1	equ	0xFE6
  4892                           postdec1	equ	0xFE5
  4893                           fsr1h	equ	0xFE2
  4894                           fsr1l	equ	0xFE1
  4895                           indf2	equ	0xFDF
  4896                           postinc2	equ	0xFDE
  4897                           postdec2	equ	0xFDD
  4898                           plusw2	equ	0xFDB
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903                           	psect	cstackBANK3
  4904  000300                     __pcstackBANK3:
  4905                           	opt stack 0
  4906  000300                     doModeVerbose@id:
  4907                           	opt stack 0
  4908                           
  4909                           ; 4 bytes @ 0x0
  4910  000300                     	ds	4
  4911  000304                     doModeVerbose@preg:
  4912                           	opt stack 0
  4913                           
  4914                           ; 2 bytes @ 0x4
  4915  000304                     	ds	2
  4916  000306                     doModeVerbose@preg_1122:
  4917                           	opt stack 0
  4918                           
  4919                           ; 2 bytes @ 0x6
  4920  000306                     	ds	2
  4921  000308                     doModeVerbose@filter_class:
  4922                           	opt stack 0
  4923                           
  4924                           ; 2 bytes @ 0x8
  4925  000308                     	ds	2
  4926  00030A                     doModeVerbose@mask_class:
  4927                           	opt stack 0
  4928                           
  4929                           ; 2 bytes @ 0xA
  4930  00030A                     	ds	2
  4931  00030C                     doModeVerbose@nodeid:
  4932                           	opt stack 0
  4933                           
  4934                           ; 1 bytes @ 0xC
  4935  00030C                     	ds	1
  4936  00030D                     doModeVerbose@nodeid_1114:
  4937                           	opt stack 0
  4938                           
  4939                           ; 1 bytes @ 0xD
  4940  00030D                     	ds	1
  4941  00030E                     doModeVerbose@filter_priority:
  4942                           	opt stack 0
  4943                           
  4944                           ; 1 bytes @ 0xE
  4945  00030E                     	ds	1
  4946  00030F                     doModeVerbose@filter_type:
  4947                           	opt stack 0
  4948                           
  4949                           ; 1 bytes @ 0xF
  4950  00030F                     	ds	1
  4951  000310                     doModeVerbose@filter_nodeid:
  4952                           	opt stack 0
  4953                           
  4954                           ; 1 bytes @ 0x10
  4955  000310                     	ds	1
  4956  000311                     doModeVerbose@mask_priority:
  4957                           	opt stack 0
  4958                           
  4959                           ; 1 bytes @ 0x11
  4960  000311                     	ds	1
  4961  000312                     doModeVerbose@mask_type:
  4962                           	opt stack 0
  4963                           
  4964                           ; 1 bytes @ 0x12
  4965  000312                     	ds	1
  4966  000313                     doModeVerbose@mask_nodeid:
  4967                           	opt stack 0
  4968                           
  4969                           ; 1 bytes @ 0x13
  4970  000313                     	ds	1
  4971  000314                     _doModeVerbose$1082:
  4972                           	opt stack 0
  4973                           
  4974                           ; 2 bytes @ 0x14
  4975  000314                     	ds	2
  4976  000316                     _doModeVerbose$1094:
  4977                           	opt stack 0
  4978                           
  4979                           ; 2 bytes @ 0x16
  4980  000316                     	ds	2
  4981  000318                     _doModeVerbose$1099:
  4982                           	opt stack 0
  4983                           
  4984                           ; 2 bytes @ 0x18
  4985  000318                     	ds	2
  4986  00031A                     _doModeVerbose$1105:
  4987                           	opt stack 0
  4988                           
  4989                           ; 2 bytes @ 0x1A
  4990  00031A                     	ds	2
  4991  00031C                     _doModeVerbose$1109:
  4992                           	opt stack 0
  4993                           
  4994                           ; 2 bytes @ 0x1C
  4995  00031C                     	ds	2
  4996  00031E                     _doModeVerbose$1134:
  4997                           	opt stack 0
  4998                           
  4999                           ; 2 bytes @ 0x1E
  5000  00031E                     	ds	2
  5001  000320                     doModeVerbose@rv:
  5002                           	opt stack 0
  5003                           
  5004                           ; 1 bytes @ 0x20
  5005  000320                     	ds	1
  5006  000321                     doModeVerbose@page_1115:
  5007                           	opt stack 0
  5008                           
  5009                           ; 1 bytes @ 0x21
  5010  000321                     	ds	1
  5011  000322                     doModeVerbose@reg_1116:
  5012                           	opt stack 0
  5013                           
  5014                           ; 1 bytes @ 0x22
  5015  000322                     	ds	1
  5016  000323                     doModeVerbose@id_1173:
  5017                           	opt stack 0
  5018                           
  5019                           ; 4 bytes @ 0x23
  5020  000323                     	ds	4
  5021  000327                     doModeVerbose@value_1117:
  5022                           	opt stack 0
  5023                           
  5024                           ; 1 bytes @ 0x27
  5025  000327                     	ds	1
  5026  000328                     doModeVerbose@filterno:
  5027                           	opt stack 0
  5028                           
  5029                           ; 1 bytes @ 0x28
  5030  000328                     	ds	1
  5031  000329                     doModeVerbose@maskno:
  5032                           	opt stack 0
  5033                           
  5034                           ; 1 bytes @ 0x29
  5035  000329                     	ds	1
  5036  00032A                     doModeVerbose@i:
  5037                           	opt stack 0
  5038                           
  5039                           ; 1 bytes @ 0x2A
  5040  00032A                     	ds	1
  5041  00032B                     doModeVerbose@count:
  5042                           	opt stack 0
  5043                           
  5044                           ; 1 bytes @ 0x2B
  5045  00032B                     	ds	1
  5046  00032C                     doModeVerbose@c:
  5047                           	opt stack 0
  5048                           
  5049                           ; 1 bytes @ 0x2C
  5050  00032C                     	ds	1
  5051  00032D                     doModeVerbose@page:
  5052                           	opt stack 0
  5053                           
  5054                           ; 1 bytes @ 0x2D
  5055  00032D                     	ds	1
  5056  00032E                     doModeVerbose@reg:
  5057                           	opt stack 0
  5058                           
  5059                           ; 1 bytes @ 0x2E
  5060  00032E                     	ds	1
  5061  00032F                     doModeVerbose@nodeid_1129:
  5062                           	opt stack 0
  5063                           
  5064                           ; 1 bytes @ 0x2F
  5065  00032F                     	ds	1
  5066  000330                     doModeVerbose@i_1064:
  5067                           	opt stack 0
  5068                           
  5069                           ; 1 bytes @ 0x30
  5070  000330                     	ds	1
  5071  000331                     doModeVerbose@value:
  5072                           	opt stack 0
  5073                           
  5074                           ; 1 bytes @ 0x31
  5075  000331                     	ds	1
  5076  000332                     doModeVerbose@p_1070:
  5077                           	opt stack 0
  5078                           
  5079                           ; 2 bytes @ 0x32
  5080  000332                     	ds	2
  5081  000334                     doModeVerbose@p_1118:
  5082                           	opt stack 0
  5083                           
  5084                           ; 2 bytes @ 0x34
  5085  000334                     	ds	2
  5086  000336                     doModeVerbose@ifmode:
  5087                           	opt stack 0
  5088                           
  5089                           ; 1 bytes @ 0x36
  5090  000336                     	ds	1
  5091  000337                     doModeVerbose@p:
  5092                           	opt stack 0
  5093                           
  5094                           ; 2 bytes @ 0x37
  5095  000337                     	ds	2
  5096  000339                     doModeVerbose@p_1142:
  5097                           	opt stack 0
  5098                           
  5099                           ; 2 bytes @ 0x39
  5100  000339                     	ds	2
  5101  00033B                     doModeVerbose@p_1161:
  5102                           	opt stack 0
  5103                           
  5104                           ; 2 bytes @ 0x3B
  5105  00033B                     	ds	2
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           intcon	equ	0xFF2
  5113                           indf0	equ	0xFEF
  5114                           postinc0	equ	0xFEE
  5115                           fsr0h	equ	0xFEA
  5116                           fsr0l	equ	0xFE9
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           postinc1	equ	0xFE6
  5120                           postdec1	equ	0xFE5
  5121                           fsr1h	equ	0xFE2
  5122                           fsr1l	equ	0xFE1
  5123                           indf2	equ	0xFDF
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           plusw2	equ	0xFDB
  5127                           fsr2h	equ	0xFDA
  5128                           fsr2l	equ	0xFD9
  5129                           status	equ	0xFD8
  5130                           
  5131                           	psect	cstackBANK0
  5132  000060                     __pcstackBANK0:
  5133                           	opt stack 0
  5134  000060                     ?_getVSCPFrame:
  5135                           	opt stack 0
  5136  000060                     ?_sprintf:
  5137                           	opt stack 0
  5138  000060                     ?_ultoa:
  5139                           	opt stack 0
  5140  000060                     getVSCPFrame@pvscptype:
  5141                           	opt stack 0
  5142  000060                     sprintf@sp:
  5143                           	opt stack 0
  5144  000060                     ultoa@buf:
  5145                           	opt stack 0
  5146  000060                     receivePrintEventCANAL@data:
  5147                           	opt stack 0
  5148  000060                     ECANSendMessage@pb:
  5149                           	opt stack 0
  5150  000060                     printFirmwareVersion@wrkbuf:
  5151                           	opt stack 0
  5152                           
  5153                           ; 20 bytes @ 0x0
  5154  000060                     	ds	1
  5155  000061                     getVSCPFrame@pNodeId:
  5156                           	opt stack 0
  5157                           
  5158                           ; 1 bytes @ 0x1
  5159  000061                     	ds	1
  5160  000062                     getVSCPFrame@pPriority:
  5161                           	opt stack 0
  5162  000062                     sprintf@f:
  5163                           	opt stack 0
  5164  000062                     ultoa@val:
  5165                           	opt stack 0
  5166                           
  5167                           ; 4 bytes @ 0x2
  5168  000062                     	ds	1
  5169  000063                     getVSCPFrame@pSize:
  5170                           	opt stack 0
  5171                           
  5172                           ; 1 bytes @ 0x3
  5173  000063                     	ds	1
  5174  000064                     getVSCPFrame@pData:
  5175                           	opt stack 0
  5176                           
  5177                           ; 1 bytes @ 0x4
  5178  000064                     	ds	1
  5179  000065                     ??_getVSCPFrame:
  5180                           
  5181                           ; 0 bytes @ 0x5
  5182  000065                     	ds	1
  5183  000066                     ultoa@base:
  5184                           	opt stack 0
  5185                           
  5186                           ; 2 bytes @ 0x6
  5187  000066                     	ds	2
  5188  000068                     receivePrintEventCANAL@i:
  5189                           	opt stack 0
  5190  000068                     sprintf@idx:
  5191                           	opt stack 0
  5192  000068                     ultoa@v:
  5193                           	opt stack 0
  5194                           
  5195                           ; 4 bytes @ 0x8
  5196  000068                     	ds	1
  5197  000069                     receivePrintEventCANAL@dlc:
  5198                           	opt stack 0
  5199  000069                     getVSCPFrame@pvscpclass:
  5200                           	opt stack 0
  5201  000069                     _sprintf$2087:
  5202                           	opt stack 0
  5203                           
  5204                           ; 2 bytes @ 0x9
  5205  000069                     	ds	1
  5206  00006A                     receivePrintEventCANAL@id:
  5207                           	opt stack 0
  5208  00006A                     getVSCPFrame@id:
  5209                           	opt stack 0
  5210                           
  5211                           ; 4 bytes @ 0xA
  5212  00006A                     	ds	1
  5213  00006B                     _sprintf$2088:
  5214                           	opt stack 0
  5215                           
  5216                           ; 2 bytes @ 0xB
  5217  00006B                     	ds	1
  5218  00006C                     ultoa@c:
  5219                           	opt stack 0
  5220                           
  5221                           ; 1 bytes @ 0xC
  5222  00006C                     	ds	1
  5223  00006D                     ??_receivePrintEventSLCAN:
  5224  00006D                     _sprintf$2094:
  5225                           	opt stack 0
  5226                           
  5227                           ; 2 bytes @ 0xD
  5228  00006D                     	ds	1
  5229  00006E                     receivePrintEventCANAL@crc:
  5230                           	opt stack 0
  5231                           
  5232                           ; 1 bytes @ 0xE
  5233  00006E                     	ds	1
  5234  00006F                     sprintf@ap:
  5235                           	opt stack 0
  5236                           
  5237                           ; 1 bytes @ 0xF
  5238  00006F                     	ds	1
  5239  000070                     receivePrintEventSLCAN@dlc:
  5240                           	opt stack 0
  5241  000070                     sprintf@prec:
  5242                           	opt stack 0
  5243                           
  5244                           ; 2 bytes @ 0x10
  5245  000070                     	ds	1
  5246  000071                     receivePrintEventSLCAN@id:
  5247                           	opt stack 0
  5248                           
  5249                           ; 4 bytes @ 0x11
  5250  000071                     	ds	1
  5251  000072                     ECANSendMessage@mode:
  5252                           	opt stack 0
  5253  000072                     sprintf@width:
  5254                           	opt stack 0
  5255                           
  5256                           ; 2 bytes @ 0x12
  5257  000072                     	ds	1
  5258  000073                     ECANSendMessage@buffers:
  5259                           	opt stack 0
  5260                           
  5261                           ; 1 bytes @ 0x13
  5262  000073                     	ds	1
  5263  000074                     ECANSendMessage@j:
  5264                           	opt stack 0
  5265  000074                     sprintf@_val:
  5266                           	opt stack 0
  5267                           
  5268                           ; 4 bytes @ 0x14
  5269  000074                     	ds	1
  5270  000075                     ECANSendMessage@tempBSEL0:
  5271                           	opt stack 0
  5272  000075                     receivePrintEventSLCAN@i:
  5273                           	opt stack 0
  5274                           
  5275                           ; 2 bytes @ 0x15
  5276  000075                     	ds	1
  5277  000076                     ECANSendMessage@tempPtr:
  5278                           	opt stack 0
  5279                           
  5280                           ; 2 bytes @ 0x16
  5281  000076                     	ds	2
  5282  000078                     ECANSendMessage@temp:
  5283                           	opt stack 0
  5284  000078                     sprintf@c:
  5285                           	opt stack 0
  5286                           
  5287                           ; 1 bytes @ 0x18
  5288  000078                     	ds	1
  5289  000079                     ECANSendMessage@i:
  5290                           	opt stack 0
  5291  000079                     sprintf@flag:
  5292                           	opt stack 0
  5293                           
  5294                           ; 2 bytes @ 0x19
  5295  000079                     	ds	1
  5296  00007A                     ECANSendMessage@ptr:
  5297                           	opt stack 0
  5298                           
  5299                           ; 2 bytes @ 0x1A
  5300  00007A                     	ds	1
  5301  00007B                     ??_receivePrintEventVerbose:
  5302  00007B                     _printStatistics$1308:
  5303                           	opt stack 0
  5304  00007B                     _printErrors$1333:
  5305                           	opt stack 0
  5306                           
  5307                           ; 2 bytes @ 0x1B
  5308  00007B                     	ds	1
  5309  00007C                     ?_sendCANFrame:
  5310                           	opt stack 0
  5311  00007C                     sendCANFrame@id:
  5312                           	opt stack 0
  5313                           
  5314                           ; 4 bytes @ 0x1C
  5315  00007C                     	ds	1
  5316  00007D                     _printStatistics$1314:
  5317                           	opt stack 0
  5318  00007D                     _printErrors$1339:
  5319                           	opt stack 0
  5320                           
  5321                           ; 2 bytes @ 0x1D
  5322  00007D                     	ds	2
  5323  00007F                     _printStatistics$1320:
  5324                           	opt stack 0
  5325  00007F                     _printErrors$1345:
  5326                           	opt stack 0
  5327                           
  5328                           ; 2 bytes @ 0x1F
  5329  00007F                     	ds	1
  5330  000080                     sendCANFrame@dlc:
  5331                           	opt stack 0
  5332  000080                     _receivePrintEventVerbose$1226:
  5333                           	opt stack 0
  5334                           
  5335                           ; 2 bytes @ 0x20
  5336  000080                     	ds	1
  5337  000081                     _printStatistics$1326:
  5338                           	opt stack 0
  5339  000081                     _printErrors$1351:
  5340                           	opt stack 0
  5341  000081                     sendCANFrame@pdata:
  5342                           	opt stack 0
  5343                           
  5344                           ; 2 bytes @ 0x21
  5345  000081                     	ds	1
  5346  000082                     _receivePrintEventVerbose$1231:
  5347                           	opt stack 0
  5348                           
  5349                           ; 2 bytes @ 0x22
  5350  000082                     	ds	1
  5351  000083                     ??_doModeSLCAN:
  5352  000083                     ??_receiveVSCPModeCanalMsg:
  5353  000083                     ?_sendVSCPFrame:
  5354                           	opt stack 0
  5355  000083                     _printErrors$1357:
  5356                           	opt stack 0
  5357  000083                     sendVSCPFrame@vscpclass:
  5358                           	opt stack 0
  5359                           
  5360                           ; 2 bytes @ 0x23
  5361  000083                     	ds	1
  5362  000084                     _receivePrintEventVerbose$1236:
  5363                           	opt stack 0
  5364                           
  5365                           ; 2 bytes @ 0x24
  5366  000084                     	ds	1
  5367  000085                     sendVSCPFrame@vscptype:
  5368                           	opt stack 0
  5369  000085                     _printErrors$1366:
  5370                           	opt stack 0
  5371                           
  5372                           ; 2 bytes @ 0x25
  5373  000085                     	ds	1
  5374  000086                     sendVSCPFrame@nodeid:
  5375                           	opt stack 0
  5376  000086                     _receivePrintEventVerbose$1241:
  5377                           	opt stack 0
  5378                           
  5379                           ; 2 bytes @ 0x26
  5380  000086                     	ds	1
  5381  000087                     sendVSCPFrame@priority:
  5382                           	opt stack 0
  5383                           
  5384                           ; 1 bytes @ 0x27
  5385  000087                     	ds	1
  5386  000088                     sendVSCPFrame@size:
  5387                           	opt stack 0
  5388  000088                     _receivePrintEventVerbose$1246:
  5389                           	opt stack 0
  5390                           
  5391                           ; 2 bytes @ 0x28
  5392  000088                     	ds	1
  5393  000089                     sendVSCPFrame@pData:
  5394                           	opt stack 0
  5395                           
  5396                           ; 1 bytes @ 0x29
  5397  000089                     	ds	1
  5398  00008A                     ??_sendVSCPFrame:
  5399  00008A                     _receivePrintEventVerbose$1251:
  5400                           	opt stack 0
  5401  00008A                     doModeSLCAN@id:
  5402                           	opt stack 0
  5403                           
  5404                           ; 4 bytes @ 0x2A
  5405  00008A                     	ds	2
  5406  00008C                     receivePrintEventVerbose@i:
  5407                           	opt stack 0
  5408                           
  5409                           ; 1 bytes @ 0x2C
  5410  00008C                     	ds	2
  5411  00008E                     doModeSLCAN@dlc:
  5412                           	opt stack 0
  5413                           
  5414                           ; 1 bytes @ 0x2E
  5415  00008E                     	ds	1
  5416  00008F                     doModeSLCAN@c:
  5417                           	opt stack 0
  5418                           
  5419                           ; 1 bytes @ 0x2F
  5420  00008F                     	ds	1
  5421  000090                     doModeSLCAN@rv:
  5422                           	opt stack 0
  5423                           
  5424                           ; 1 bytes @ 0x30
  5425  000090                     	ds	7
  5426  000097                     receiveVSCPModeCanalMsg@data:
  5427                           	opt stack 0
  5428                           
  5429                           ; 8 bytes @ 0x37
  5430  000097                     	ds	7
  5431  00009E                     ?_readRegisterExtended:
  5432                           	opt stack 0
  5433  00009E                     ?_writeRegisterExtended:
  5434                           	opt stack 0
  5435  00009E                     ?_readRegister:
  5436                           	opt stack 0
  5437  00009E                     readRegister@reg:
  5438                           	opt stack 0
  5439  00009E                     readRegisterExtended@page:
  5440                           	opt stack 0
  5441  00009E                     writeRegisterExtended@page:
  5442                           	opt stack 0
  5443                           
  5444                           ; 2 bytes @ 0x3E
  5445  00009E                     	ds	1
  5446  00009F                     readRegister@timeout:
  5447                           	opt stack 0
  5448  00009F                     receiveVSCPModeCanalMsg@id:
  5449                           	opt stack 0
  5450                           
  5451                           ; 4 bytes @ 0x3F
  5452  00009F                     	ds	1
  5453  0000A0                     readRegisterExtended@reg:
  5454                           	opt stack 0
  5455  0000A0                     writeRegisterExtended@reg:
  5456                           	opt stack 0
  5457                           
  5458                           ; 1 bytes @ 0x40
  5459  0000A0                     	ds	1
  5460  0000A1                     readRegister@value:
  5461                           	opt stack 0
  5462  0000A1                     readRegisterExtended@timeout:
  5463                           	opt stack 0
  5464  0000A1                     writeRegisterExtended@timeout:
  5465                           	opt stack 0
  5466                           
  5467                           ; 2 bytes @ 0x41
  5468  0000A1                     	ds	1
  5469  0000A2                     ??_readRegister:
  5470                           
  5471                           ; 0 bytes @ 0x42
  5472  0000A2                     	ds	1
  5473  0000A3                     receiveVSCPModeCanalMsg@dlc:
  5474                           	opt stack 0
  5475  0000A3                     readRegisterExtended@value:
  5476                           	opt stack 0
  5477  0000A3                     writeRegisterExtended@value:
  5478                           	opt stack 0
  5479                           
  5480                           ; 2 bytes @ 0x43
  5481  0000A3                     	ds	2
  5482  0000A5                     ??_readRegisterExtended:
  5483  0000A5                     ??_writeRegisterExtended:
  5484                           
  5485                           ; 0 bytes @ 0x45
  5486  0000A5                     	ds	1
  5487  0000A6                     printGUID@nodeid:
  5488                           	opt stack 0
  5489  0000A6                     printMDF@nodeid:
  5490                           	opt stack 0
  5491  0000A6                     printNodeFirmwareVersion@nodeid:
  5492                           	opt stack 0
  5493                           
  5494                           ; 1 bytes @ 0x46
  5495  0000A6                     	ds	1
  5496  0000A7                     printMDF@value:
  5497                           	opt stack 0
  5498  0000A7                     printGUID@buf:
  5499                           	opt stack 0
  5500  0000A7                     printNodeFirmwareVersion@buf:
  5501                           	opt stack 0
  5502                           
  5503                           ; 3 bytes @ 0x47
  5504  0000A7                     	ds	1
  5505  0000A8                     printMDF@p:
  5506                           	opt stack 0
  5507                           
  5508                           ; 2 bytes @ 0x48
  5509  0000A8                     	ds	2
  5510  0000AA                     printGUID@value:
  5511                           	opt stack 0
  5512  0000AA                     printMDF@i:
  5513                           	opt stack 0
  5514  0000AA                     printNodeFirmwareVersion@value:
  5515                           	opt stack 0
  5516                           
  5517                           ; 1 bytes @ 0x4A
  5518  0000AA                     	ds	1
  5519  0000AB                     printGUID@i:
  5520                           	opt stack 0
  5521  0000AB                     printNodeFirmwareVersion@i:
  5522                           	opt stack 0
  5523                           
  5524                           ; 1 bytes @ 0x4B
  5525  0000AB                     	ds	1
  5526  0000AC                     _findNodes$1410:
  5527                           	opt stack 0
  5528                           
  5529                           ; 2 bytes @ 0x4C
  5530  0000AC                     	ds	2
  5531  0000AE                     findNodes@nFound:
  5532                           	opt stack 0
  5533                           
  5534                           ; 1 bytes @ 0x4E
  5535  0000AE                     	ds	1
  5536  0000AF                     findNodes@value:
  5537                           	opt stack 0
  5538                           
  5539                           ; 1 bytes @ 0x4F
  5540  0000AF                     	ds	1
  5541  0000B0                     findNodes@i:
  5542                           	opt stack 0
  5543                           
  5544                           ; 1 bytes @ 0x50
  5545  0000B0                     	ds	1
  5546  0000B1                     ??_doModeVerbose:
  5547                           
  5548                           ; 0 bytes @ 0x51
  5549  0000B1                     	ds	20
  5550  0000C5                     
  5551                           ; 2 bytes @ 0x65
  5552  0000C5                     	ds	2
  5553  0000C7                     
  5554                           ; 3 bytes @ 0x67
  5555  0000C7                     	ds	3
  5556  0000CA                     main@c:
  5557                           	opt stack 0
  5558                           
  5559                           ; 1 bytes @ 0x6A
  5560  0000CA                     	ds	1
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           indf0	equ	0xFEF
  5569                           postinc0	equ	0xFEE
  5570                           fsr0h	equ	0xFEA
  5571                           fsr0l	equ	0xFE9
  5572                           wreg	equ	0xFE8
  5573                           indf1	equ	0xFE7
  5574                           postinc1	equ	0xFE6
  5575                           postdec1	equ	0xFE5
  5576                           fsr1h	equ	0xFE2
  5577                           fsr1l	equ	0xFE1
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           plusw2	equ	0xFDB
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586                           	psect	cstackCOMRAM
  5587  000001                     __pcstackCOMRAM:
  5588                           	opt stack 0
  5589  000001                     ?i1_WriteTimer0:
  5590                           	opt stack 0
  5591  000001                     ?_fifo_write:
  5592                           	opt stack 0
  5593  000001                     ReadUSART@data:
  5594                           	opt stack 0
  5595  000001                     fifo_write@f:
  5596                           	opt stack 0
  5597  000001                     i1WriteTimer0@timer0:
  5598                           	opt stack 0
  5599                           
  5600                           ; 2 bytes @ 0x0
  5601  000001                     	ds	2
  5602  000003                     fifo_write@buf:
  5603                           	opt stack 0
  5604  000003                     i1WriteTimer0@timer:
  5605                           	opt stack 0
  5606                           
  5607                           ; 2 bytes @ 0x2
  5608  000003                     	ds	1
  5609  000004                     fifo_write@nbytes:
  5610                           	opt stack 0
  5611                           
  5612                           ; 4 bytes @ 0x3
  5613  000004                     	ds	4
  5614  000008                     ??_fifo_write:
  5615                           
  5616                           ; 0 bytes @ 0x7
  5617  000008                     	ds	4
  5618  00000C                     fifo_write@p:
  5619                           	opt stack 0
  5620                           
  5621                           ; 1 bytes @ 0xB
  5622  00000C                     	ds	1
  5623  00000D                     fifo_write@i:
  5624                           	opt stack 0
  5625                           
  5626                           ; 4 bytes @ 0xC
  5627  00000D                     	ds	4
  5628  000011                     ??_Interrupt:
  5629                           
  5630                           ; 0 bytes @ 0x10
  5631  000011                     	ds	7
  5632  000018                     Interrupt@c:
  5633                           	opt stack 0
  5634                           
  5635                           ; 1 bytes @ 0x17
  5636  000018                     	ds	1
  5637  000019                     ?_fifo_init:
  5638                           	opt stack 0
  5639  000019                     ?_WriteTimer0:
  5640                           	opt stack 0
  5641  000019                     ?_OpenUSART:
  5642                           	opt stack 0
  5643  000019                     ?_writeEEPROM:
  5644                           	opt stack 0
  5645  000019                     ?_setFilter:
  5646                           	opt stack 0
  5647  000019                     ?__CANIDToRegs:
  5648                           	opt stack 0
  5649  000019                     ?__RegsToCANID:
  5650                           	opt stack 0
  5651  000019                     ??_isdigit:
  5652  000019                     ?_readEEPROM:
  5653                           	opt stack 0
  5654  000019                     ?_fifo_read:
  5655                           	opt stack 0
  5656  000019                     ?_memset:
  5657                           	opt stack 0
  5658  000019                     ?_strcpy:
  5659                           	opt stack 0
  5660  000019                     ?_strchr:
  5661                           	opt stack 0
  5662  000019                     ?_strlen:
  5663                           	opt stack 0
  5664  000019                     ?_memcpy:
  5665                           	opt stack 0
  5666  000019                     ?_strcat:
  5667                           	opt stack 0
  5668  000019                     ?__ECANPointBuffer:
  5669                           	opt stack 0
  5670  000019                     ?___lwdiv:
  5671                           	opt stack 0
  5672  000019                     ?___lwmod:
  5673                           	opt stack 0
  5674  000019                     ?___wmul:
  5675                           	opt stack 0
  5676  000019                     ?___lldiv:
  5677                           	opt stack 0
  5678  000019                     ECANSetOperationMode@mode:
  5679                           	opt stack 0
  5680  000019                     nibbleFromChar@c:
  5681                           	opt stack 0
  5682  000019                     OpenTimer0@config:
  5683                           	opt stack 0
  5684  000019                     WriteUSART@data:
  5685                           	opt stack 0
  5686  000019                     toupper@c:
  5687                           	opt stack 0
  5688  000019                     __CANIDToRegs@ptr:
  5689                           	opt stack 0
  5690  000019                     __RegsToCANID@ptr:
  5691                           	opt stack 0
  5692  000019                     fifo_init@f:
  5693                           	opt stack 0
  5694  000019                     fifo_read@f:
  5695                           	opt stack 0
  5696  000019                     writeEEPROM@address:
  5697                           	opt stack 0
  5698  000019                     readEEPROM@address:
  5699                           	opt stack 0
  5700  000019                     _init_crc8$2025:
  5701                           	opt stack 0
  5702  000019                     WriteTimer0@timer0:
  5703                           	opt stack 0
  5704  000019                     OpenUSART@spbrg:
  5705                           	opt stack 0
  5706  000019                     ___lwdiv@dividend:
  5707                           	opt stack 0
  5708  000019                     ___lwmod@dividend:
  5709                           	opt stack 0
  5710  000019                     memcpy@d1:
  5711                           	opt stack 0
  5712  000019                     memset@p1:
  5713                           	opt stack 0
  5714  000019                     strcat@to:
  5715                           	opt stack 0
  5716  000019                     strchr@ptr:
  5717                           	opt stack 0
  5718  000019                     strcpy@to:
  5719                           	opt stack 0
  5720  000019                     strlen@s:
  5721                           	opt stack 0
  5722  000019                     ___wmul@multiplier:
  5723                           	opt stack 0
  5724  000019                     setFilter@val:
  5725                           	opt stack 0
  5726  000019                     ___lldiv@dividend:
  5727                           	opt stack 0
  5728                           
  5729                           ; 4 bytes @ 0x18
  5730  000019                     	ds	1
  5731  00001A                     ?_putsUSART:
  5732                           	opt stack 0
  5733  00001A                     ??_printBinary:
  5734  00001A                     ?_strichr:
  5735                           	opt stack 0
  5736  00001A                     _isdigit$2838:
  5737                           	opt stack 0
  5738  00001A                     putsUSART@data:
  5739                           	opt stack 0
  5740  00001A                     strichr@ptr:
  5741                           	opt stack 0
  5742                           
  5743                           ; 2 bytes @ 0x19
  5744  00001A                     	ds	1
  5745  00001B                     __RegsToCANID@val:
  5746                           	opt stack 0
  5747  00001B                     writeEEPROM@data:
  5748                           	opt stack 0
  5749  00001B                     readEEPROM@data:
  5750                           	opt stack 0
  5751  00001B                     OpenUSART@config:
  5752                           	opt stack 0
  5753  00001B                     isdigit@c:
  5754                           	opt stack 0
  5755  00001B                     fifo_init@buf:
  5756                           	opt stack 0
  5757  00001B                     fifo_read@buf:
  5758                           	opt stack 0
  5759  00001B                     init_crc8@j:
  5760                           	opt stack 0
  5761  00001B                     WriteTimer0@timer:
  5762                           	opt stack 0
  5763  00001B                     ___lwdiv@divisor:
  5764                           	opt stack 0
  5765  00001B                     ___lwmod@divisor:
  5766                           	opt stack 0
  5767  00001B                     memcpy@s1:
  5768                           	opt stack 0
  5769  00001B                     memset@c:
  5770                           	opt stack 0
  5771  00001B                     strcat@from:
  5772                           	opt stack 0
  5773  00001B                     strchr@chr:
  5774                           	opt stack 0
  5775  00001B                     strcpy@from:
  5776                           	opt stack 0
  5777  00001B                     strlen@cp:
  5778                           	opt stack 0
  5779  00001B                     ___wmul@multiplicand:
  5780                           	opt stack 0
  5781  00001B                     __CANIDToRegs@val:
  5782                           	opt stack 0
  5783                           
  5784                           ; 4 bytes @ 0x1A
  5785  00001B                     	ds	1
  5786  00001C                     ??_putsUSART:
  5787  00001C                     init_app_eeprom@i:
  5788                           	opt stack 0
  5789  00001C                     printBinary@value:
  5790                           	opt stack 0
  5791  00001C                     __RegsToCANID@type:
  5792                           	opt stack 0
  5793  00001C                     __ECANPointBuffer@b:
  5794                           	opt stack 0
  5795  00001C                     strichr@chr:
  5796                           	opt stack 0
  5797                           
  5798                           ; 2 bytes @ 0x1B
  5799  00001C                     	ds	1
  5800  00001D                     ??_strchr:
  5801  00001D                     ??_setFilter:
  5802  00001D                     ??__RegsToCANID:
  5803  00001D                     ?_hexStringToBytes:
  5804                           	opt stack 0
  5805  00001D                     ?_strnicmp:
  5806                           	opt stack 0
  5807  00001D                     init_crc8@crc:
  5808                           	opt stack 0
  5809  00001D                     ___lwdiv@counter:
  5810                           	opt stack 0
  5811  00001D                     ___lwmod@counter:
  5812                           	opt stack 0
  5813  00001D                     printBinary@i:
  5814                           	opt stack 0
  5815  00001D                     __ECANPointBuffer@pt:
  5816                           	opt stack 0
  5817  00001D                     fifo_init@size:
  5818                           	opt stack 0
  5819  00001D                     fifo_read@nbytes:
  5820                           	opt stack 0
  5821  00001D                     hexStringToBytes@buf:
  5822                           	opt stack 0
  5823  00001D                     memcpy@n:
  5824                           	opt stack 0
  5825  00001D                     memset@n:
  5826                           	opt stack 0
  5827  00001D                     strcat@cp:
  5828                           	opt stack 0
  5829  00001D                     strcpy@cp:
  5830                           	opt stack 0
  5831  00001D                     strnicmp@s1:
  5832                           	opt stack 0
  5833  00001D                     ___wmul@product:
  5834                           	opt stack 0
  5835  00001D                     ___lldiv@divisor:
  5836                           	opt stack 0
  5837                           
  5838                           ; 4 bytes @ 0x1C
  5839  00001D                     	ds	1
  5840  00001E                     init_crc8@i:
  5841                           	opt stack 0
  5842  00001E                     ___lwdiv@quotient:
  5843                           	opt stack 0
  5844                           
  5845                           ; 2 bytes @ 0x1D
  5846  00001E                     	ds	1
  5847  00001F                     ??_fifo_read:
  5848  00001F                     ?_atoi:
  5849                           	opt stack 0
  5850  00001F                     ?_strspn:
  5851                           	opt stack 0
  5852  00001F                     ?_strcspn:
  5853                           	opt stack 0
  5854  00001F                     __CANIDToRegs@type:
  5855                           	opt stack 0
  5856  00001F                     __RegsToCANID@Value:
  5857                           	opt stack 0
  5858  00001F                     hexStringToBytes@size:
  5859                           	opt stack 0
  5860  00001F                     atoi@s:
  5861                           	opt stack 0
  5862  00001F                     memcpy@d:
  5863                           	opt stack 0
  5864  00001F                     memset@p:
  5865                           	opt stack 0
  5866  00001F                     strnicmp@s2:
  5867                           	opt stack 0
  5868  00001F                     strcspn@s1:
  5869                           	opt stack 0
  5870  00001F                     strspn@s1:
  5871                           	opt stack 0
  5872                           
  5873                           ; 2 bytes @ 0x1E
  5874  00001F                     	ds	1
  5875  000020                     ??__CANIDToRegs:
  5876  000020                     ?_crc8:
  5877                           	opt stack 0
  5878  000020                     ?_ECANReceiveMessage:
  5879                           	opt stack 0
  5880  000020                     ?_utoa:
  5881                           	opt stack 0
  5882  000020                     ECANReceiveMessage@data:
  5883                           	opt stack 0
  5884  000020                     crc8@crc:
  5885                           	opt stack 0
  5886  000020                     hexStringToBytes@inhex:
  5887                           	opt stack 0
  5888  000020                     utoa@buf:
  5889                           	opt stack 0
  5890                           
  5891                           ; 2 bytes @ 0x1F
  5892  000020                     	ds	1
  5893  000021                     ??_atoi:
  5894  000021                     ___lldiv@counter:
  5895                           	opt stack 0
  5896  000021                     memcpy@s:
  5897                           	opt stack 0
  5898  000021                     strnicmp@len:
  5899                           	opt stack 0
  5900  000021                     strcspn@s2:
  5901                           	opt stack 0
  5902  000021                     strspn@s2:
  5903                           	opt stack 0
  5904                           
  5905                           ; 2 bytes @ 0x20
  5906  000021                     	ds	1
  5907  000022                     ??_hexStringToBytes:
  5908  000022                     ECANReceiveMessage@dataLen:
  5909                           	opt stack 0
  5910  000022                     __CANIDToRegs@Value:
  5911                           	opt stack 0
  5912  000022                     crc8@m:
  5913                           	opt stack 0
  5914  000022                     utoa@val:
  5915                           	opt stack 0
  5916  000022                     ___lldiv@quotient:
  5917                           	opt stack 0
  5918                           
  5919                           ; 4 bytes @ 0x21
  5920  000022                     	ds	1
  5921  000023                     ??_crc8:
  5922  000023                     ??_strnicmp:
  5923  000023                     ?_ECANSendMessage:
  5924                           	opt stack 0
  5925  000023                     setFilter@filter:
  5926                           	opt stack 0
  5927  000023                     ECANReceiveMessage@msgFlags:
  5928                           	opt stack 0
  5929  000023                     atoi@sign:
  5930                           	opt stack 0
  5931  000023                     fifo_read@p:
  5932                           	opt stack 0
  5933  000023                     strcspn@i:
  5934                           	opt stack 0
  5935  000023                     strspn@i:
  5936                           	opt stack 0
  5937  000023                     ECANSendMessage@id:
  5938                           	opt stack 0
  5939                           
  5940                           ; 4 bytes @ 0x22
  5941  000023                     	ds	1
  5942  000024                     setFilter@sidh:
  5943                           	opt stack 0
  5944  000024                     ECANReceiveMessage@id:
  5945                           	opt stack 0
  5946  000024                     atoi@a:
  5947                           	opt stack 0
  5948  000024                     utoa@base:
  5949                           	opt stack 0
  5950                           
  5951                           ; 2 bytes @ 0x23
  5952  000024                     	ds	1
  5953  000025                     ?_sendEscapedUartData:
  5954                           	opt stack 0
  5955  000025                     ?_calcCRC:
  5956                           	opt stack 0
  5957  000025                     ?_strtok:
  5958                           	opt stack 0
  5959  000025                     setFilter@sidl:
  5960                           	opt stack 0
  5961  000025                     strnicmp@r:
  5962                           	opt stack 0
  5963  000025                     sendEscapedUartData@pcrc:
  5964                           	opt stack 0
  5965  000025                     calcCRC@p:
  5966                           	opt stack 0
  5967  000025                     ECANReceiveMessage@savedPtr:
  5968                           	opt stack 0
  5969  000025                     fifo_read@i:
  5970                           	opt stack 0
  5971  000025                     hexStringToBytes@len:
  5972                           	opt stack 0
  5973  000025                     strtok@s1:
  5974                           	opt stack 0
  5975                           
  5976                           ; 2 bytes @ 0x24
  5977  000025                     	ds	1
  5978  000026                     ?_stristr:
  5979                           	opt stack 0
  5980  000026                     ?___llmod:
  5981                           	opt stack 0
  5982  000026                     setFilter@eidh:
  5983                           	opt stack 0
  5984  000026                     utoa@v:
  5985                           	opt stack 0
  5986  000026                     stristr@s1:
  5987                           	opt stack 0
  5988  000026                     ___llmod@dividend:
  5989                           	opt stack 0
  5990                           
  5991                           ; 4 bytes @ 0x25
  5992  000026                     	ds	1
  5993  000027                     sendEscapedUartData@c:
  5994                           	opt stack 0
  5995  000027                     calcCRC@len:
  5996                           	opt stack 0
  5997  000027                     setFilter@eidl:
  5998                           	opt stack 0
  5999  000027                     ECANReceiveMessage@i:
  6000                           	opt stack 0
  6001  000027                     ECANSendMessage@data:
  6002                           	opt stack 0
  6003  000027                     hexStringToBytes@p:
  6004                           	opt stack 0
  6005  000027                     strtok@s2:
  6006                           	opt stack 0
  6007                           
  6008                           ; 2 bytes @ 0x26
  6009  000027                     	ds	1
  6010  000028                     ?_sendVSCPDriverCommandReply:
  6011                           	opt stack 0
  6012  000028                     sendVSCPDriverErrorFrame@errorcode:
  6013                           	opt stack 0
  6014  000028                     sendVSCPDriverAck@crc:
  6015                           	opt stack 0
  6016  000028                     sendVSCPDriverNack@crc:
  6017                           	opt stack 0
  6018  000028                     sendVSCPDriverCommandReply@cmdCode:
  6019                           	opt stack 0
  6020  000028                     calcCRC@j:
  6021                           	opt stack 0
  6022  000028                     ECANReceiveMessage@mode:
  6023                           	opt stack 0
  6024  000028                     utoa@c:
  6025                           	opt stack 0
  6026  000028                     stristr@s2:
  6027                           	opt stack 0
  6028                           
  6029                           ; 2 bytes @ 0x27
  6030  000028                     	ds	1
  6031  000029                     ?_itoa:
  6032                           	opt stack 0
  6033  000029                     sendVSCPDriverErrorFrame@crc:
  6034                           	opt stack 0
  6035  000029                     sendVSCPDriverCommandReply@cmdReplyCode:
  6036                           	opt stack 0
  6037  000029                     calcCRC@crc:
  6038                           	opt stack 0
  6039  000029                     ECANSendMessage@dataLen:
  6040                           	opt stack 0
  6041  000029                     ECANReceiveMessage@temp:
  6042                           	opt stack 0
  6043  000029                     hexStringToBytes@i:
  6044                           	opt stack 0
  6045  000029                     itoa@buf:
  6046                           	opt stack 0
  6047                           
  6048                           ; 2 bytes @ 0x28
  6049  000029                     	ds	1
  6050  00002A                     sendVSCPDriverCommandReply@crc:
  6051                           	opt stack 0
  6052  00002A                     ECANSendMessage@msgFlags:
  6053                           	opt stack 0
  6054  00002A                     ECANReceiveMessage@ptr:
  6055                           	opt stack 0
  6056  00002A                     ___llmod@divisor:
  6057                           	opt stack 0
  6058                           
  6059                           ; 4 bytes @ 0x29
  6060  00002A                     	ds	1
  6061  00002B                     ??_ECANSendMessage:
  6062  00002B                     itoa@val:
  6063                           	opt stack 0
  6064                           
  6065                           ; 2 bytes @ 0x2A
  6066  00002B                     	ds	1
  6067  00002C                     ?_getCANFrame:
  6068                           	opt stack 0
  6069  00002C                     getCANFrame@pdlc:
  6070                           	opt stack 0
  6071  00002C                     sendVSCPFrame@id:
  6072                           	opt stack 0
  6073                           
  6074                           ; 4 bytes @ 0x2B
  6075  00002C                     	ds	1
  6076  00002D                     getCANFrame@pdata:
  6077                           	opt stack 0
  6078  00002D                     itoa@base:
  6079                           	opt stack 0
  6080                           
  6081                           ; 2 bytes @ 0x2C
  6082  00002D                     	ds	1
  6083  00002E                     ___llmod@counter:
  6084                           	opt stack 0
  6085                           
  6086                           ; 1 bytes @ 0x2D
  6087  00002E                     	ds	1
  6088  00002F                     ??_sprintf:
  6089  00002F                     getCANFrame@pid:
  6090                           	opt stack 0
  6091                           
  6092                           ; 1 bytes @ 0x2E
  6093  00002F                     	ds	1
  6094  000030                     getCANFrame@flags:
  6095                           	opt stack 0
  6096                           
  6097                           ; 1 bytes @ 0x2F
  6098  000030                     	ds	1
  6099  000031                     doModeVscp@c:
  6100                           	opt stack 0
  6101  000031                     readRegister@nodeid:
  6102                           	opt stack 0
  6103  000031                     readRegisterExtended@nodeid:
  6104                           	opt stack 0
  6105  000031                     writeRegisterExtended@nodeid:
  6106                           	opt stack 0
  6107                           
  6108                           ; 1 bytes @ 0x30
  6109  000031                     	ds	1
  6110  000032                     ??_main:
  6111                           
  6112                           ; 0 bytes @ 0x31
  6113  000032                     	ds	1
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           indf0	equ	0xFEF
  6122                           postinc0	equ	0xFEE
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           indf1	equ	0xFE7
  6127                           postinc1	equ	0xFE6
  6128                           postdec1	equ	0xFE5
  6129                           fsr1h	equ	0xFE2
  6130                           fsr1l	equ	0xFE1
  6131                           indf2	equ	0xFDF
  6132                           postinc2	equ	0xFDE
  6133                           postdec2	equ	0xFDD
  6134                           plusw2	equ	0xFDB
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;;
  6140 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6141 ;;
  6142 ;; *************** function _main *****************
  6143 ;; Defined at:
  6144 ;;		line 128 in file "main.c"
  6145 ;; Parameters:    Size  Location     Type
  6146 ;;  argc            2  101[BANK0 ] int 
  6147 ;;  argv            3  103[BANK0 ] PTR PTR unsigned char 
  6148 ;; Auto vars:     Size  Location     Type
  6149 ;;  c               1  106[BANK0 ] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  2  101[BANK0 ] int 
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : F/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6159 ;;      Params:         0       5       0       0       0       0       0
  6160 ;;      Locals:         0       1       0       0       0       0       0
  6161 ;;      Temps:          1       0       0       0       0       0       0
  6162 ;;      Totals:         1       6       0       0       0       0       0
  6163 ;;Total ram usage:        7 bytes
  6164 ;; Hardware stack levels required when called:   10
  6165 ;; This function calls:
  6166 ;;		_fifo_init
  6167 ;;		_init_crc8
  6168 ;;		_readEEPROM
  6169 ;;		_vscp_restoreDefaults
  6170 ;;		_init
  6171 ;;		_putsUSART
  6172 ;;		_printFirmwareVersion
  6173 ;;		_printMode
  6174 ;;		_fifo_read
  6175 ;;		_doModeVerbose
  6176 ;;		_doModeVscp
  6177 ;;		_doModeSLCAN
  6178 ;;		_doModeVscpNode
  6179 ;; This function is called by:
  6180 ;;		Startup code after reset
  6181 ;; This function uses a non-reentrant model
  6182 ;;
  6183                           
  6184                           	psect	text0
  6185  003110                     __ptext0:
  6186                           	opt stack 0
  6187  003110                     _main:
  6188                           	opt stack 21
  6189                           
  6190                           ;main.c: 130: fifo_init( &inputFifo, inputBuffer, sizeof(inputBuffer) );
  6191                           
  6192                           ;incstack = 0
  6193                           ;incstack = 0
  6194  003110  0101               	movlb	1	; () banked
  6195  003112  0E01               	movlw	high _inputFifo
  6196  003114  6E1A               	movwf	?_fifo_init+1,c
  6197  003116  0EC0               	movlw	low _inputFifo
  6198  003118  6E19               	movwf	?_fifo_init,c
  6199  00311A  0E03               	movlw	high _inputBuffer
  6200  00311C  6E1C               	movwf	?_fifo_init+3,c
  6201  00311E  0E3D               	movlw	low _inputBuffer
  6202  003120  6E1B               	movwf	?_fifo_init+2,c
  6203  003122  0E01               	movlw	1
  6204  003124  6E1E               	movwf	?_fifo_init+5,c
  6205  003126  0EF4               	movlw	244
  6206  003128  6E1D               	movwf	?_fifo_init+4,c
  6207  00312A  ECE0  F026         	call	_fifo_init	;wreg free
  6208                           
  6209                           ;main.c: 133: init_crc8();
  6210  00312E  EC78  F024         	call	_init_crc8	;wreg free
  6211                           
  6212                           ;main.c: 137: if (( 0x55 != readEEPROM( 0x01 ) ) ||
  6213                           ;main.c: 138: ( 0xaa != readEEPROM( 0x02 ) ) ) {
  6214  003132  6A1A               	clrf	?_readEEPROM+1,c
  6215  003134  0E01               	movlw	1
  6216  003136  6E19               	movwf	?_readEEPROM,c
  6217  003138  ECB2  F028         	call	_readEEPROM	;wreg free
  6218  00313C  0A55               	xorlw	85
  6219  00313E  E107               	bnz	l12467
  6220  003140  6A1A               	clrf	?_readEEPROM+1,c
  6221  003142  0E02               	movlw	2
  6222  003144  6E19               	movwf	?_readEEPROM,c
  6223  003146  ECB2  F028         	call	_readEEPROM	;wreg free
  6224  00314A  0AAA               	xorlw	170
  6225  00314C  A4D8               	btfss	status,2,c
  6226  00314E                     l12467:
  6227                           
  6228                           ;main.c: 139: vscp_restoreDefaults();
  6229  00314E  ECC4  F028         	call	_vscp_restoreDefaults	;wreg free
  6230                           
  6231                           ;main.c: 140: }
  6232                           ;main.c: 142: init();
  6233  003152  EC9E  F026         	call	_init	;wreg free
  6234                           
  6235                           ;main.c: 146: _delay((unsigned long)((10)*(40000000/4000.0)));
  6236  003156  0E82               	movlw	130
  6237  003158  6E32               	movwf	??_main& (0+255),c
  6238  00315A  0EDD               	movlw	221
  6239  00315C                     u18687:
  6240  00315C  2EE8               	decfsz	wreg,f,c
  6241  00315E  D7FE               	goto	u18687
  6242  003160  2E32               	decfsz	??_main& (0+255),f,c
  6243  003162  D7FC               	goto	u18687
  6244  003164  D000               	nop2	
  6245                           
  6246                           ;main.c: 150: putsUSART((char *)"\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6247  003166  0E79               	movlw	high STR_1
  6248  003168  6E1B               	movwf	?_putsUSART+1,c
  6249  00316A  0E52               	movlw	low STR_1
  6250  00316C  6E1A               	movwf	?_putsUSART,c
  6251  00316E  ECC1  F025         	call	_putsUSART	;wreg free
  6252                           
  6253                           ;main.c: 151: putsUSART((char *)"Copyright (C) 2014 Grodans Paradis AB, Sweden\r\n");
  6254  003172  0E75               	movlw	high STR_2
  6255  003174  6E1B               	movwf	?_putsUSART+1,c
  6256  003176  0EE3               	movlw	low STR_2
  6257  003178  6E1A               	movwf	?_putsUSART,c
  6258  00317A  ECC1  F025         	call	_putsUSART	;wreg free
  6259                           
  6260                           ;main.c: 152: printFirmwareVersion();
  6261  00317E  EC46  F022         	call	_printFirmwareVersion	;wreg free
  6262                           
  6263                           ;main.c: 153: printMode();
  6264  003182  EC08  F024         	call	_printMode	;wreg free
  6265                           
  6266                           ;main.c: 157: if ( 0 && ( 0 != mode ) ) {
  6267  003186  D02A               	goto	l12499
  6268  003188                     l368:
  6269                           
  6270                           ; BSR set to: 0
  6271  003188  0004               	clrwdt		;# 
  6272                           
  6273                           ;main.c: 168: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  6274  00318A  0E01               	movlw	high _inputFifo
  6275  00318C  6E1A               	movwf	?_fifo_read+1,c
  6276  00318E  0EC0               	movlw	low _inputFifo
  6277  003190  6E19               	movwf	?_fifo_read,c
  6278  003192  0100               	movlb	0	; () banked
  6279  003194  0E00               	movlw	high main@c
  6280  003196  6E1C               	movwf	?_fifo_read+3,c
  6281  003198  0ECA               	movlw	low main@c
  6282  00319A  6E1B               	movwf	?_fifo_read+2,c
  6283  00319C  6A1E               	clrf	?_fifo_read+5,c
  6284  00319E  0E01               	movlw	1
  6285  0031A0  6E1D               	movwf	?_fifo_read+4,c
  6286  0031A2  EC42  F01F         	call	_fifo_read	;wreg free
  6287  0031A6  0419               	decf	?_fifo_read,w,c
  6288  0031A8  101A               	iorwf	?_fifo_read+1,w,c
  6289  0031AA  E10D               	bnz	l369
  6290                           
  6291                           ;main.c: 169: (INTCONbits.GIE = 1);
  6292  0031AC  8EF2               	bsf	intcon,7,c	;volatile
  6293                           
  6294                           ;main.c: 170: if ( 'v' == c ) {
  6295  0031AE  0100               	movlb	0	; () banked
  6296  0031B0  51CA               	movf	main@c& (0+255),w,b
  6297  0031B2  0A76               	xorlw	118
  6298  0031B4  E108               	bnz	l369
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;main.c: 171: mode = 0;
  6302  0031B6  6BD7               	clrf	_mode& (0+255),b
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;main.c: 172: putsUSART((char *)"Temporary verbose mode set\r\n");
  6306  0031B8  0E7B               	movlw	high STR_4
  6307  0031BA  6E1B               	movwf	?_putsUSART+1,c
  6308  0031BC  0E2A               	movlw	low STR_4
  6309  0031BE  6E1A               	movwf	?_putsUSART,c
  6310  0031C0  ECC1  F025         	call	_putsUSART	;wreg free
  6311                           
  6312                           ;main.c: 173: break;
  6313  0031C4  D00B               	goto	l12499
  6314  0031C6                     l369:
  6315                           
  6316                           ;main.c: 174: }
  6317                           ;main.c: 175: }
  6318                           ;main.c: 176: (INTCONbits.GIE = 1);
  6319  0031C6  8EF2               	bsf	intcon,7,c	;volatile
  6320  0031C8  0EB8               	movlw	184
  6321  0031CA  0100               	movlb	0	; () banked
  6322  0031CC  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
  6323  0031CE  0E0B               	movlw	11
  6324  0031D0  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6325  0031D2  0E00               	movlw	0
  6326  0031D4  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6327  0031D6  0E00               	movlw	0
  6328  0031D8  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6329  0031DA  E3D6               	bnc	l368
  6330  0031DC                     l12499:
  6331                           
  6332                           ;main.c: 177: }
  6333                           ;main.c: 178: }
  6334                           ;main.c: 180: ledFunctionality = 1;
  6335  0031DC  0E01               	movlw	1
  6336  0031DE  6E3C               	movwf	_ledFunctionality,c
  6337  0031E0                     l372:
  6338  0031E0  0004               	clrwdt		;# 
  6339                           
  6340                           ;main.c: 188: if ( COMSTATbits.TXBO ) {
  6341  0031E2  AA74               	btfss	3956,5,c	;volatile
  6342  0031E4  D002               	goto	l373
  6343                           
  6344                           ;main.c: 190: ledFunctionality = 6;
  6345  0031E6  0E06               	movlw	6
  6346  0031E8  D009               	goto	L1
  6347  0031EA                     l373:
  6348                           
  6349                           ;main.c: 192: else if ( COMSTATbits.TXBP || COMSTATbits.RXBP ) {
  6350  0031EA  B874               	btfsc	3956,4,c	;volatile
  6351  0031EC  D002               	goto	l12507
  6352  0031EE  A674               	btfss	3956,3,c	;volatile
  6353  0031F0  D002               	goto	l375
  6354  0031F2                     l12507:
  6355                           
  6356                           ;main.c: 194: ledFunctionality = 5;
  6357  0031F2  0E05               	movlw	5
  6358  0031F4  D003               	goto	L1
  6359  0031F6                     l375:
  6360                           
  6361                           ;main.c: 198: ledFunctionality = 4;
  6362  0031F6  0E04               	movlw	4
  6363                           
  6364                           ;main.c: 196: else if ( COMSTATbits.EWARN ) {
  6365  0031F8  A074               	btfss	3956,0,c	;volatile
  6366                           
  6367                           ;main.c: 200: else {
  6368                           ;main.c: 202: ledFunctionality = 1;
  6369                           
  6370                           ;main.c: 199: }
  6371  0031FA  0E01               	movlw	1
  6372  0031FC                     L1:
  6373  0031FC  6E3C               	movwf	_ledFunctionality,c
  6374                           
  6375                           ;main.c: 203: }
  6376                           ;main.c: 206: if ( COMSTATbits.RXBnOVFL ) {
  6377  0031FE  AC74               	btfss	3956,6,c	;volatile
  6378  003200  D007               	goto	l12519
  6379                           
  6380                           ;main.c: 207: can_receiveOverruns++;
  6381  003202  0101               	movlb	1	; () banked
  6382  003204  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6383  003206  0E00               	movlw	0
  6384  003208  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6385  00320A  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6386  00320C  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6387                           
  6388                           ; BSR set to: 1
  6389                           ;main.c: 208: COMSTATbits.RXBnOVFL = 0;
  6390  00320E  9C74               	bcf	3956,6,c	;volatile
  6391  003210                     l12519:
  6392                           
  6393                           ;main.c: 209: }
  6394                           ;main.c: 211: if ( 0 == mode ) {
  6395  003210  0100               	movlb	0	; () banked
  6396  003212  67D7               	tstfsz	_mode& (0+255),b
  6397  003214  D003               	goto	l12523
  6398  003216                     l12521:
  6399                           
  6400                           ; BSR set to: 0
  6401                           ;main.c: 212: doModeVerbose();
  6402  003216  ECD0  F000         	call	_doModeVerbose	;wreg free
  6403                           
  6404                           ;main.c: 213: }
  6405  00321A  D7E2               	goto	l372
  6406  00321C                     l12523:
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;main.c: 214: else if ( 1 == mode ) {
  6410  00321C  05D7               	decf	_mode& (0+255),w,b
  6411  00321E  E103               	bnz	l12527
  6412                           
  6413                           ; BSR set to: 0
  6414                           ;main.c: 215: doModeVscp();
  6415  003220  EC6F  F016         	call	_doModeVscp	;wreg free
  6416                           
  6417                           ;main.c: 216: }
  6418  003224  D7DD               	goto	l372
  6419  003226                     l12527:
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 217: else if ( 2 == mode ) {
  6423  003226  51D7               	movf	_mode& (0+255),w,b
  6424  003228  0A02               	xorlw	2
  6425  00322A  E103               	bnz	l12531
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 218: doModeSLCAN();
  6429  00322C  ECD9  F00D         	call	_doModeSLCAN	;wreg free
  6430                           
  6431                           ;main.c: 219: }
  6432  003230  D7D7               	goto	l372
  6433  003232                     l12531:
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;main.c: 220: else if ( 3 == mode ) {
  6437  003232  51D7               	movf	_mode& (0+255),w,b
  6438  003234  0A03               	xorlw	3
  6439  003236  E1EF               	bnz	l12521
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;main.c: 221: doModeVscpNode();
  6443  003238  ECC8  F028         	call	_doModeVscpNode	;wreg free
  6444                           
  6445                           ;main.c: 222: }
  6446  00323C  D7D1               	goto	l372
  6447  00323E                     __end_of_main:
  6448                           	opt stack 0
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           indf0	equ	0xFEF
  6457                           postinc0	equ	0xFEE
  6458                           fsr0h	equ	0xFEA
  6459                           fsr0l	equ	0xFE9
  6460                           wreg	equ	0xFE8
  6461                           indf1	equ	0xFE7
  6462                           postinc1	equ	0xFE6
  6463                           postdec1	equ	0xFE5
  6464                           fsr1h	equ	0xFE2
  6465                           fsr1l	equ	0xFE1
  6466                           indf2	equ	0xFDF
  6467                           postinc2	equ	0xFDE
  6468                           postdec2	equ	0xFDD
  6469                           plusw2	equ	0xFDB
  6470                           fsr2h	equ	0xFDA
  6471                           fsr2l	equ	0xFD9
  6472                           status	equ	0xFD8
  6473                           
  6474 ;; *************** function _doModeVscpNode *****************
  6475 ;; Defined at:
  6476 ;;		line 1399 in file "main.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;		None               void
  6483 ;; Registers used:
  6484 ;;		None
  6485 ;; Tracked objects:
  6486 ;;		On entry : F/0
  6487 ;;		On exit  : F/0
  6488 ;;		Unchanged: F/0
  6489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6490 ;;      Params:         0       0       0       0       0       0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:    2
  6497 ;; This function calls:
  6498 ;;		Nothing
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text1
  6505  005190                     __ptext1:
  6506                           	opt stack 0
  6507  005190                     _doModeVscpNode:
  6508                           	opt stack 28
  6509                           
  6510                           ; BSR set to: 0
  6511                           
  6512                           ; BSR set to: 0
  6513                           ;incstack = 0
  6514                           ;incstack = 0
  6515  005190  0012               	return	
  6516  005192                     __end_of_doModeVscpNode:
  6517                           	opt stack 0
  6518                           tblptru	equ	0xFF8
  6519                           tblptrh	equ	0xFF7
  6520                           tblptrl	equ	0xFF6
  6521                           tablat	equ	0xFF5
  6522                           prodh	equ	0xFF4
  6523                           prodl	equ	0xFF3
  6524                           intcon	equ	0xFF2
  6525                           indf0	equ	0xFEF
  6526                           postinc0	equ	0xFEE
  6527                           fsr0h	equ	0xFEA
  6528                           fsr0l	equ	0xFE9
  6529                           wreg	equ	0xFE8
  6530                           indf1	equ	0xFE7
  6531                           postinc1	equ	0xFE6
  6532                           postdec1	equ	0xFE5
  6533                           fsr1h	equ	0xFE2
  6534                           fsr1l	equ	0xFE1
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           plusw2	equ	0xFDB
  6539                           fsr2h	equ	0xFDA
  6540                           fsr2l	equ	0xFD9
  6541                           status	equ	0xFD8
  6542                           
  6543 ;; *************** function _doModeSLCAN *****************
  6544 ;; Defined at:
  6545 ;;		line 1195 in file "main.c"
  6546 ;; Parameters:    Size  Location     Type
  6547 ;;		None
  6548 ;; Auto vars:     Size  Location     Type
  6549 ;;  id              4   42[BANK0 ] unsigned long 
  6550 ;;  dlc             1   46[BANK0 ] unsigned char 
  6551 ;;  rv              1   48[BANK0 ] enum E15660
  6552 ;;  c               1   47[BANK0 ] unsigned char 
  6553 ;; Return value:  Size  Location     Type
  6554 ;;		None               void
  6555 ;; Registers used:
  6556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6557 ;; Tracked objects:
  6558 ;;		On entry : F/0
  6559 ;;		On exit  : C/0
  6560 ;;		Unchanged: 0/0
  6561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6562 ;;      Params:         0       0       0       0       0       0       0
  6563 ;;      Locals:         0       7       0       0       0       0       0
  6564 ;;      Temps:          0       7       0       0       0       0       0
  6565 ;;      Totals:         0      14       0       0       0       0       0
  6566 ;;Total ram usage:       14 bytes
  6567 ;; Hardware stack levels used:    1
  6568 ;; Hardware stack levels required when called:    6
  6569 ;; This function calls:
  6570 ;;		_putsUSART
  6571 ;;		_fifo_read
  6572 ;;		_writeEEPROM
  6573 ;;		_ECANSetOperationMode
  6574 ;;		_memset
  6575 ;;		_receivePrintEventSLCAN
  6576 ;;		_strlen
  6577 ;;		_hexStringToBytes
  6578 ;;		_memcpy
  6579 ;;		_sendCANFrame
  6580 ;; This function is called by:
  6581 ;;		_main
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text2
  6586  001BB2                     __ptext2:
  6587                           	opt stack 0
  6588  001BB2                     _doModeSLCAN:
  6589                           	opt stack 24
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;main.c: 1196: uint8_t c;
  6593                           ;main.c: 1197: BOOL rv = 0;
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;incstack = 0
  6597                           ;incstack = 0
  6598  001BB2  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;main.c: 1200: receivePrintEventSLCAN();
  6602  001BB4  EC22  F014         	call	_receivePrintEventSLCAN	;wreg free
  6603                           
  6604                           ;main.c: 1203: (INTCONbits.GIE = 0);
  6605  001BB8  9EF2               	bcf	intcon,7,c	;volatile
  6606                           
  6607                           ;main.c: 1205: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  6608  001BBA  0E01               	movlw	high _inputFifo
  6609  001BBC  6E1A               	movwf	?_fifo_read+1,c
  6610  001BBE  0EC0               	movlw	low _inputFifo
  6611  001BC0  6E19               	movwf	?_fifo_read,c
  6612  001BC2  0100               	movlb	0	; () banked
  6613  001BC4  0E00               	movlw	high doModeSLCAN@c
  6614  001BC6  6E1C               	movwf	?_fifo_read+3,c
  6615  001BC8  0E8F               	movlw	low doModeSLCAN@c
  6616  001BCA  6E1B               	movwf	?_fifo_read+2,c
  6617  001BCC  6A1E               	clrf	?_fifo_read+5,c
  6618  001BCE  0E01               	movlw	1
  6619  001BD0  6E1D               	movwf	?_fifo_read+4,c
  6620  001BD2  EC42  F01F         	call	_fifo_read	;wreg free
  6621  001BD6  0419               	decf	?_fifo_read,w,c
  6622  001BD8  101A               	iorwf	?_fifo_read+1,w,c
  6623  001BDA  E001 D1AF          	bnz	l13275
  6624                           
  6625                           ;main.c: 1208: (INTCONbits.GIE = 1);
  6626  001BDE  8EF2               	bsf	intcon,7,c	;volatile
  6627                           
  6628                           ;main.c: 1210: if ( 0x0d != c ) {
  6629  001BE0  0100               	movlb	0	; () banked
  6630  001BE2  518F               	movf	doModeSLCAN@c& (0+255),w,b
  6631  001BE4  0A0D               	xorlw	13
  6632  001BE6  E101 D160          	bz	l13263
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;main.c: 1211: cmdbuf[ pos ] = c;
  6636  001BEA  0E20               	movlw	low _cmdbuf
  6637  001BEC  25D8               	addwf	_pos& (0+255),w,b
  6638  001BEE  6ED9               	movwf	fsr2l,c
  6639  001BF0  6ADA               	clrf	fsr2h,c
  6640  001BF2  0E01               	movlw	high _cmdbuf
  6641  001BF4  22DA               	addwfc	fsr2h,f,c
  6642  001BF6  C08F  FFDF         	movff	doModeSLCAN@c,indf2
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 1212: pos++;
  6646  001BFA  2BD8               	incf	_pos& (0+255),f,b
  6647  001BFC  D1A0               	goto	l663
  6648  001BFE                     l13157:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;main.c: 1220: if ( 1 == strlen(cmdbuf) ) {
  6652  001BFE  0101               	movlb	1	; () banked
  6653  001C00  0E01               	movlw	high _cmdbuf
  6654  001C02  6E1A               	movwf	?_strlen+1,c
  6655  001C04  0E20               	movlw	low _cmdbuf
  6656  001C06  6E19               	movwf	?_strlen,c
  6657  001C08  EC5D  F027         	call	_strlen	;wreg free
  6658  001C0C  0419               	decf	?_strlen,w,c
  6659  001C0E  101A               	iorwf	?_strlen+1,w,c
  6660  001C10  E001 D176          	bnz	l13265
  6661                           
  6662                           ;main.c: 1221: putsUSART((char *)"JFrankfurt RS-232\r\n");
  6663  001C14  0E7D               	movlw	high STR_124
  6664  001C16  6E1B               	movwf	?_putsUSART+1,c
  6665  001C18  0E5A               	movlw	low STR_124
  6666  001C1A  6E1A               	movwf	?_putsUSART,c
  6667  001C1C  ECC1  F025         	call	_putsUSART	;wreg free
  6668  001C20                     l13161:
  6669                           
  6670                           ;main.c: 1222: rv = 1;
  6671  001C20  0E01               	movlw	1
  6672  001C22  D0ED               	goto	L4
  6673  001C24                     l13163:
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;main.c: 1228: if ( 1 == strlen(cmdbuf) ) {
  6677  001C24  0101               	movlb	1	; () banked
  6678  001C26  0E01               	movlw	high _cmdbuf
  6679  001C28  6E1A               	movwf	?_strlen+1,c
  6680  001C2A  0E20               	movlw	low _cmdbuf
  6681  001C2C  6E19               	movwf	?_strlen,c
  6682  001C2E  EC5D  F027         	call	_strlen	;wreg free
  6683  001C32  0419               	decf	?_strlen,w,c
  6684  001C34  101A               	iorwf	?_strlen+1,w,c
  6685  001C36  E001 D163          	bnz	l13265
  6686                           
  6687                           ;main.c: 1229: putsUSART((char *)"V1011\r\n");
  6688  001C3A  0E7E               	movlw	high STR_125
  6689  001C3C  6E1B               	movwf	?_putsUSART+1,c
  6690  001C3E  0ED5               	movlw	low STR_125
  6691  001C40  6E1A               	movwf	?_putsUSART,c
  6692  001C42  ECC1  F025         	call	_putsUSART	;wreg free
  6693  001C46  D7EC               	goto	l13161
  6694  001C48                     l13169:
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;main.c: 1236: if ( 1 == strlen(cmdbuf) ) {
  6698  001C48  0101               	movlb	1	; () banked
  6699  001C4A  0E01               	movlw	high _cmdbuf
  6700  001C4C  6E1A               	movwf	?_strlen+1,c
  6701  001C4E  0E20               	movlw	low _cmdbuf
  6702  001C50  6E19               	movwf	?_strlen,c
  6703  001C52  EC5D  F027         	call	_strlen	;wreg free
  6704  001C56  0419               	decf	?_strlen,w,c
  6705  001C58  101A               	iorwf	?_strlen+1,w,c
  6706  001C5A  E001 D151          	bnz	l13265
  6707                           
  6708                           ;main.c: 1237: putsUSART((char *)"N1977\r\n");
  6709  001C5E  0E7E               	movlw	high STR_126
  6710  001C60  6E1B               	movwf	?_putsUSART+1,c
  6711  001C62  0EDD               	movlw	low STR_126
  6712  001C64  6E1A               	movwf	?_putsUSART,c
  6713  001C66  ECC1  F025         	call	_putsUSART	;wreg free
  6714  001C6A  D7DA               	goto	l13161
  6715  001C6C                     l13175:
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 1246: bInitiated = 1;
  6719  001C6C  0E01               	movlw	1
  6720  001C6E  6FD4               	movwf	_bInitiated& (0+255),b
  6721                           
  6722                           ;main.c: 1247: rv = 1;
  6723  001C70  D0C7               	goto	L3
  6724  001C72                     l673:
  6725                           
  6726                           ; BSR set to: 0
  6727                           ;main.c: 1252: if ( !bOpen ) {
  6728  001C72  67D5               	tstfsz	_bOpen& (0+255),b
  6729  001C74  D003               	goto	l13179
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;main.c: 1253: bInitiated = 1;
  6733  001C76  0E01               	movlw	1
  6734  001C78  6FD4               	movwf	_bInitiated& (0+255),b
  6735                           
  6736                           ;main.c: 1254: rv = 1;
  6737  001C7A  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  6738  001C7C                     l13179:
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;main.c: 1259: if ( 1 == strlen(cmdbuf) ) {
  6742  001C7C  0101               	movlb	1	; () banked
  6743  001C7E  0E01               	movlw	high _cmdbuf
  6744  001C80  6E1A               	movwf	?_strlen+1,c
  6745  001C82  0E20               	movlw	low _cmdbuf
  6746  001C84  6E19               	movwf	?_strlen,c
  6747  001C86  EC5D  F027         	call	_strlen	;wreg free
  6748  001C8A  0419               	decf	?_strlen,w,c
  6749  001C8C  101A               	iorwf	?_strlen+1,w,c
  6750  001C8E  E001 D137          	bnz	l13265
  6751                           
  6752                           ;main.c: 1260: if (!bOpen && bInitiated ) {
  6753  001C92  0100               	movlb	0	; () banked
  6754  001C94  67D5               	tstfsz	_bOpen& (0+255),b
  6755  001C96  D134               	goto	l13265
  6756                           
  6757                           ; BSR set to: 0
  6758  001C98  51D4               	movf	_bInitiated& (0+255),w,b
  6759  001C9A  E101 D131          	bz	l13265
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 1261: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6763  001C9E  0E00               	movlw	0
  6764  001CA0  EC88  F028         	call	_ECANSetOperationMode
  6765                           
  6766                           ;main.c: 1262: bOpen = 1;
  6767  001CA4  0E01               	movlw	1
  6768  001CA6  0100               	movlb	0	; () banked
  6769  001CA8  6FD5               	movwf	_bOpen& (0+255),b
  6770  001CAA  D7BA               	goto	l13161
  6771  001CAC                     l13191:
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;main.c: 1270: if ( 1 == strlen(cmdbuf) ) {
  6775  001CAC  0101               	movlb	1	; () banked
  6776  001CAE  0E01               	movlw	high _cmdbuf
  6777  001CB0  6E1A               	movwf	?_strlen+1,c
  6778  001CB2  0E20               	movlw	low _cmdbuf
  6779  001CB4  6E19               	movwf	?_strlen,c
  6780  001CB6  EC5D  F027         	call	_strlen	;wreg free
  6781  001CBA  0419               	decf	?_strlen,w,c
  6782  001CBC  101A               	iorwf	?_strlen+1,w,c
  6783  001CBE  E001 D11F          	bnz	l13265
  6784                           
  6785                           ;main.c: 1271: if ( bOpen ) {
  6786  001CC2  0100               	movlb	0	; () banked
  6787  001CC4  51D5               	movf	_bOpen& (0+255),w,b
  6788  001CC6  E0AC               	bz	l13161
  6789                           
  6790                           ; BSR set to: 0
  6791                           ;main.c: 1272: ECANSetOperationMode(0x20);
  6792  001CC8  0E20               	movlw	32
  6793  001CCA  EC88  F028         	call	_ECANSetOperationMode
  6794                           
  6795                           ;main.c: 1273: bOpen = 0;
  6796  001CCE  0100               	movlb	0	; () banked
  6797  001CD0  6BD5               	clrf	_bOpen& (0+255),b
  6798  001CD2  D7A6               	goto	l13161
  6799  001CD4                     l13201:
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;main.c: 1286: if ( bOpen && ( strlen(cmdbuf) >= 10 ) ) {
  6803  001CD4  51D5               	movf	_bOpen& (0+255),w,b
  6804  001CD6  E101 D113          	bz	l13265
  6805                           
  6806                           ; BSR set to: 0
  6807  001CDA  0101               	movlb	1	; () banked
  6808  001CDC  0E01               	movlw	high _cmdbuf
  6809  001CDE  6E1A               	movwf	?_strlen+1,c
  6810  001CE0  0E20               	movlw	low _cmdbuf
  6811  001CE2  6E19               	movwf	?_strlen,c
  6812  001CE4  EC5D  F027         	call	_strlen	;wreg free
  6813  001CE8  0E0A               	movlw	10
  6814  001CEA  5C19               	subwf	?_strlen,w,c
  6815  001CEC  0E00               	movlw	0
  6816  001CEE  581A               	subwfb	?_strlen+1,w,c
  6817  001CF0  E201 D106          	bnc	l13265
  6818                           
  6819                           ;main.c: 1288: uint32_t id;
  6820                           ;main.c: 1289: uint8_t dlc;
  6821                           ;main.c: 1291: if ( hexStringToBytes( wrkbuf, sizeof( wrkbuf ), cmdbuf ) < 5 ) {
  6822  001CF4  0101               	movlb	1	; () banked
  6823  001CF6  0E01               	movlw	high _wrkbuf
  6824  001CF8  6E1E               	movwf	?_hexStringToBytes+1,c
  6825  001CFA  0E70               	movlw	low _wrkbuf
  6826  001CFC  6E1D               	movwf	?_hexStringToBytes,c
  6827  001CFE  0E50               	movlw	80
  6828  001D00  6E1F               	movwf	?_hexStringToBytes+2,c
  6829  001D02  0E01               	movlw	high _cmdbuf
  6830  001D04  6E21               	movwf	?_hexStringToBytes+4,c
  6831  001D06  0E20               	movlw	low _cmdbuf
  6832  001D08  6E20               	movwf	?_hexStringToBytes+3,c
  6833  001D0A  EC66  F021         	call	_hexStringToBytes	;wreg free
  6834  001D0E  0100               	movlb	0	; () banked
  6835  001D10  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6836  001D12  0E05               	movlw	5
  6837  001D14  5D83               	subwf	??_doModeSLCAN& (0+255),w,b
  6838  001D16  E201 D0F3          	bnc	l13265
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 1293: }
  6842                           ;main.c: 1295: id = (uint32_t)wrkbuf[0]<<24 + (uint32_t)wrkbuf[1]<<16 + (uint32_t)wrkbuf
      +                          [2]<<8 + wrkbuf[3];
  6843  001D1A  C173  F083         	movff	_wrkbuf+3,??_doModeSLCAN
  6844  001D1E  0E08               	movlw	8
  6845  001D20  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6846  001D22  C172  F084         	movff	_wrkbuf+2,??_doModeSLCAN+1
  6847  001D26  0E10               	movlw	16
  6848  001D28  2784               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  6849  001D2A  C171  F085         	movff	_wrkbuf+1,??_doModeSLCAN+2
  6850  001D2E  0E18               	movlw	24
  6851  001D30  2785               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  6852  001D32  C170  F086         	movff	_wrkbuf,??_doModeSLCAN+3
  6853  001D36  6B87               	clrf	(??_doModeSLCAN+4)& (0+255),b
  6854  001D38  6B88               	clrf	(??_doModeSLCAN+5)& (0+255),b
  6855  001D3A  6B89               	clrf	(??_doModeSLCAN+6)& (0+255),b
  6856  001D3C  2B85               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  6857  001D3E  D001               	goto	u17480
  6858  001D40                     u17485:
  6859  001D40  D8FF               	call	PL80	;call to abstracted procedure
  6860  001D42                     u17480:
  6861  001D42  2F85               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  6862  001D44  D7FD               	goto	u17485
  6863  001D46  2B84               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  6864  001D48  D001               	goto	u17490
  6865  001D4A                     u17495:
  6866  001D4A  D8FA               	call	PL80	;call to abstracted procedure
  6867  001D4C                     u17490:
  6868  001D4C  2F84               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  6869  001D4E  D7FD               	goto	u17495
  6870  001D50  2B83               	incf	??_doModeSLCAN& (0+255),f,b
  6871  001D52  D001               	goto	u17500
  6872  001D54                     u17505:
  6873  001D54  D8F5               	call	PL80	;call to abstracted procedure
  6874  001D56                     u17500:
  6875  001D56  2F83               	decfsz	??_doModeSLCAN& (0+255),f,b
  6876  001D58  D7FD               	goto	u17505
  6877  001D5A  C089  F08D         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  6878  001D5E  C088  F08C         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  6879  001D62  C087  F08B         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  6880  001D66  C086  F08A         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  6881                           
  6882                           ; BSR set to: 0
  6883                           ;main.c: 1296: dlc = vscpData[4];
  6884  001D6A  C044  F08E         	movff	_vscpData+4,doModeSLCAN@dlc
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;main.c: 1299: if ( dlc > 8 ) break;
  6888  001D6E  0E08               	movlw	8
  6889  001D70  658E               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  6890  001D72  D001               	goto	l13217
  6891  001D74  D0C5               	goto	l13265
  6892  001D76                     l13217:
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;main.c: 1300: if ( strlen( cmdbuf ) < ( 10 + 2*dlc) ) break;
  6896  001D76  90D8               	bcf	status,0,c
  6897  001D78  358E               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  6898  001D7A  6F83               	movwf	??_doModeSLCAN& (0+255),b
  6899  001D7C  6B84               	clrf	(??_doModeSLCAN+1)& (0+255),b
  6900  001D7E  3784               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  6901  001D80  0E0A               	movlw	10
  6902  001D82  2783               	addwf	??_doModeSLCAN& (0+255),f,b
  6903  001D84  0E00               	movlw	0
  6904  001D86  2384               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  6905  001D88  0101               	movlb	1	; () banked
  6906  001D8A  0E01               	movlw	high _cmdbuf
  6907  001D8C  6E1A               	movwf	?_strlen+1,c
  6908  001D8E  0E20               	movlw	low _cmdbuf
  6909  001D90  6E19               	movwf	?_strlen,c
  6910  001D92  EC5D  F027         	call	_strlen	;wreg free
  6911  001D96  0100               	movlb	0	; () banked
  6912  001D98  5183               	movf	??_doModeSLCAN& (0+255),w,b
  6913  001D9A  5C19               	subwf	?_strlen,w,c
  6914  001D9C  5184               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  6915  001D9E  581A               	subwfb	?_strlen+1,w,c
  6916  001DA0  E201 D0AE          	bnc	l13265
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;main.c: 1302: memcpy( vscpData, vscpData + 5, dlc );
  6920  001DA4  0E40               	movlw	low _vscpData
  6921  001DA6  6E19               	movwf	?_memcpy,c
  6922  001DA8  0E00               	movlw	high _vscpData
  6923  001DAA  6E1A               	movwf	?_memcpy+1,c
  6924  001DAC  0E0F               	movlw	15
  6925  001DAE  6E1A               	movwf	?_memcpy+1,c
  6926  001DB0  0E5F               	movlw	__accesstop+-1
  6927  001DB2  6419               	cpfsgt	?_memcpy,c
  6928  001DB4  6A1A               	clrf	?_memcpy+1,c
  6929  001DB6  0E45               	movlw	low (_vscpData+5)
  6930  001DB8  6E1B               	movwf	?_memcpy+2,c
  6931  001DBA  0E00               	movlw	high (_vscpData+5)
  6932  001DBC  6E1C               	movwf	?_memcpy+3,c
  6933  001DBE  0E0F               	movlw	15
  6934  001DC0  6E1C               	movwf	?_memcpy+3,c
  6935  001DC2  0E5F               	movlw	__accesstop+-1
  6936  001DC4  641B               	cpfsgt	?_memcpy+2,c
  6937  001DC6  6A1C               	clrf	?_memcpy+3,c
  6938  001DC8  C08E  F01D         	movff	doModeSLCAN@dlc,?_memcpy+4
  6939  001DCC  6A1E               	clrf	?_memcpy+5,c
  6940  001DCE  ECC0  F026         	call	_memcpy	;wreg free
  6941                           
  6942                           ;main.c: 1304: rv = sendCANFrame( id, dlc, vscpData );
  6943  001DD2  C08A  F07C         	movff	doModeSLCAN@id,?_sendCANFrame
  6944  001DD6  C08B  F07D         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  6945  001DDA  C08C  F07E         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  6946  001DDE  C08D  F07F         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  6947  001DE2  C08E  F080         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  6948  001DE6  0E40               	movlw	low _vscpData
  6949  001DE8  0100               	movlb	0	; () banked
  6950  001DEA  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  6951  001DEC  0E00               	movlw	high _vscpData
  6952  001DEE  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  6953  001DF0  0E0F               	movlw	15
  6954  001DF2  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  6955  001DF4  0E5F               	movlw	__accesstop+-1
  6956  001DF6  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
  6957  001DF8  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
  6958  001DFA  EC7B  F027         	call	_sendCANFrame	;wreg free
  6959  001DFE                     L4:
  6960  001DFE  0100               	movlb	0	; () banked
  6961  001E00                     L3:
  6962  001E00  6F90               	movwf	doModeSLCAN@rv& (0+255),b
  6963  001E02  D07E               	goto	l13265
  6964  001E04                     l13225:
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;main.c: 1319: if ( bOpen && ( strlen(cmdbuf) == 1 ) ) {
  6968  001E04  51D5               	movf	_bOpen& (0+255),w,b
  6969  001E06  E07C               	bz	l13265
  6970                           
  6971                           ; BSR set to: 0
  6972  001E08  0101               	movlb	1	; () banked
  6973  001E0A  0E01               	movlw	high _cmdbuf
  6974  001E0C  6E1A               	movwf	?_strlen+1,c
  6975  001E0E  0E20               	movlw	low _cmdbuf
  6976  001E10  6E19               	movwf	?_strlen,c
  6977  001E12  EC5D  F027         	call	_strlen	;wreg free
  6978  001E16  0419               	decf	?_strlen,w,c
  6979  001E18  101A               	iorwf	?_strlen+1,w,c
  6980  001E1A  E172               	bnz	l13265
  6981                           
  6982                           ;main.c: 1320: putsUSART((char *)"F00\r\n");
  6983  001E1C  0E7F               	movlw	high STR_127
  6984  001E1E  6E1B               	movwf	?_putsUSART+1,c
  6985  001E20  0E79               	movlw	low STR_127
  6986  001E22  6E1A               	movwf	?_putsUSART,c
  6987  001E24  ECC1  F025         	call	_putsUSART	;wreg free
  6988  001E28  D06B               	goto	l13265
  6989  001E2A                     l13235:
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;main.c: 1336: if ( 2 == strlen(cmdbuf) ) {
  6993  001E2A  0101               	movlb	1	; () banked
  6994  001E2C  0E01               	movlw	high _cmdbuf
  6995  001E2E  6E1A               	movwf	?_strlen+1,c
  6996  001E30  0E20               	movlw	low _cmdbuf
  6997  001E32  6E19               	movwf	?_strlen,c
  6998  001E34  EC5D  F027         	call	_strlen	;wreg free
  6999  001E38  5019               	movf	?_strlen,w,c
  7000  001E3A  0A02               	xorlw	2
  7001  001E3C  101A               	iorwf	?_strlen+1,w,c
  7002  001E3E  E160               	bnz	l13265
  7003                           
  7004                           ;main.c: 1337: if (!bOpen ) {
  7005  001E40  0100               	movlb	0	; () banked
  7006  001E42  67D5               	tstfsz	_bOpen& (0+255),b
  7007  001E44  D05D               	goto	l13265
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;main.c: 1338: if ( '0' == cmdbuf[1] ) {
  7011  001E46  0101               	movlb	1	; () banked
  7012  001E48  5121               	movf	(_cmdbuf+1)& (0+255),w,b
  7013  001E4A  0A30               	xorlw	48
  7014  001E4C  E109               	bnz	l13247
  7015                           
  7016                           ; BSR set to: 1
  7017                           ;main.c: 1339: nTimeStamp = 0;
  7018  001E4E  6A3D               	clrf	_nTimeStamp,c
  7019                           
  7020                           ; BSR set to: 1
  7021                           ;main.c: 1341: writeEEPROM( 0x05, 0 );
  7022  001E50  6A1A               	clrf	?_writeEEPROM+1,c
  7023  001E52  0E05               	movlw	5
  7024  001E54  6E19               	movwf	?_writeEEPROM,c
  7025  001E56  0E00               	movlw	0
  7026  001E58  6A1B               	clrf	?_writeEEPROM+2,c
  7027  001E5A  EC48  F028         	call	_writeEEPROM	;wreg free
  7028  001E5E  D6E0               	goto	l13161
  7029  001E60                     l13247:
  7030                           
  7031                           ; BSR set to: 1
  7032                           ;main.c: 1344: else if ( '1' == cmdbuf[1] ) {
  7033  001E60  5121               	movf	(_cmdbuf+1)& (0+255),w,b
  7034  001E62  0A31               	xorlw	49
  7035  001E64  E10A               	bnz	l698
  7036                           
  7037                           ; BSR set to: 1
  7038                           ;main.c: 1345: nTimeStamp = 1;
  7039  001E66  0E01               	movlw	1
  7040  001E68  6E3D               	movwf	_nTimeStamp,c
  7041                           
  7042                           ; BSR set to: 1
  7043                           ;main.c: 1347: writeEEPROM( 0x05,
  7044                           ;main.c: 1348: 1 );
  7045  001E6A  6A1A               	clrf	?_writeEEPROM+1,c
  7046  001E6C  0E05               	movlw	5
  7047  001E6E  6E19               	movwf	?_writeEEPROM,c
  7048  001E70  0E01               	movlw	1
  7049  001E72  6E1B               	movwf	?_writeEEPROM+2,c
  7050  001E74  EC48  F028         	call	_writeEEPROM	;wreg free
  7051  001E78  D6D3               	goto	l13161
  7052  001E7A                     l698:
  7053                           
  7054                           ; BSR set to: 1
  7055                           ;main.c: 1351: else {
  7056                           ;main.c: 1352: rv = 0;
  7057  001E7A  0100               	movlb	0	; () banked
  7058  001E7C  6B90               	clrf	doModeSLCAN@rv& (0+255),b
  7059  001E7E  D040               	goto	l13265
  7060  001E80                     l13255:
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;main.c: 1360: writeEEPROM(0x01, 0xFF);
  7064  001E80  6A1A               	clrf	?_writeEEPROM+1,c
  7065  001E82  0E01               	movlw	1
  7066  001E84  6E19               	movwf	?_writeEEPROM,c
  7067  001E86  0EFF               	movlw	255
  7068  001E88  681B               	setf	?_writeEEPROM+2,c
  7069  001E8A  EC48  F028         	call	_writeEEPROM	;wreg free
  7070  001E8E  00FF               	reset		;# 
  7071                           
  7072                           ;main.c: 1362: break;
  7073  001E90  D037               	goto	l13265
  7074  001E92                     l13257:
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;main.c: 1365: {
  7078                           ;main.c: 1367: if ( 0 == strlen( cmdbuf ) ) {
  7079  001E92  0101               	movlb	1	; () banked
  7080  001E94  0E01               	movlw	high _cmdbuf
  7081  001E96  6E1A               	movwf	?_strlen+1,c
  7082  001E98  0E20               	movlw	low _cmdbuf
  7083  001E9A  6E19               	movwf	?_strlen,c
  7084  001E9C  EC5D  F027         	call	_strlen	;wreg free
  7085  001EA0  501A               	movf	?_strlen+1,w,c
  7086  001EA2  1019               	iorwf	?_strlen,w,c
  7087  001EA4  E101 D6BC          	bz	l13161
  7088  001EA8  D02B               	goto	l13265
  7089  001EAA                     l13263:
  7090                           
  7091                           ; BSR set to: 0
  7092  001EAA  518F               	movf	doModeSLCAN@c& (0+255),w,b
  7093                           
  7094                           ; Switch size 1, requested type "space"
  7095                           ; Number of cases is 16, Range of values is 66 to 116
  7096                           ; switch strategies available:
  7097                           ; Name         Instructions Cycles
  7098                           ; simple_byte           49    25 (average)
  7099                           ;	Chosen strategy is simple_byte
  7100  001EAC  0A42               	xorlw	66	; case 66
  7101  001EAE  E0E8               	bz	l13255
  7102  001EB0  0A01               	xorlw	1	; case 67
  7103  001EB2  E101 D6FB          	bz	l13191
  7104  001EB6  0A05               	xorlw	5	; case 70
  7105  001EB8  E0A5               	bz	l13225
  7106  001EBA  0A0C               	xorlw	12	; case 74
  7107  001EBC  E101 D69F          	bz	l13157
  7108  001EC0  0A07               	xorlw	7	; case 77
  7109  001EC2  E101 D6AD          	bz	l13161
  7110  001EC6  0A03               	xorlw	3	; case 78
  7111  001EC8  E101 D6BE          	bz	l13169
  7112  001ECC  0A01               	xorlw	1	; case 79
  7113  001ECE  E101 D6D5          	bz	l13179
  7114  001ED2  0A1D               	xorlw	29	; case 82
  7115  001ED4  E015               	bz	l13265
  7116  001ED6  0A01               	xorlw	1	; case 83
  7117  001ED8  E101 D6C8          	bz	l13175
  7118  001EDC  0A07               	xorlw	7	; case 84
  7119  001EDE  E101 D6F9          	bz	l13201
  7120  001EE2  0A02               	xorlw	2	; case 86
  7121  001EE4  E101 D69E          	bz	l13163
  7122  001EE8  0A0C               	xorlw	12	; case 90
  7123  001EEA  E09F               	bz	l13235
  7124  001EEC  0A37               	xorlw	55	; case 109
  7125  001EEE  E101 D697          	bz	l13161
  7126  001EF2  0A1F               	xorlw	31	; case 114
  7127  001EF4  E005               	bz	l13265
  7128  001EF6  0A01               	xorlw	1	; case 115
  7129  001EF8  E101 D6BB          	bz	l673
  7130  001EFC  0A07               	xorlw	7	; case 116
  7131  001EFE  E1C9               	bnz	l13257
  7132  001F00                     l13265:
  7133                           
  7134                           ;main.c: 1375: if ( rv ) {
  7135  001F00  0100               	movlb	0	; () banked
  7136  001F02  5190               	movf	doModeSLCAN@rv& (0+255),w,b
  7137  001F04  E007               	bz	l13269
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;main.c: 1377: putsUSART((char *)"\r");
  7141  001F06  0E7F               	movlw	high STR_128
  7142  001F08  6E1B               	movwf	?_putsUSART+1,c
  7143  001F0A  0EF2               	movlw	low STR_128
  7144  001F0C  6E1A               	movwf	?_putsUSART,c
  7145  001F0E  ECC1  F025         	call	_putsUSART	;wreg free
  7146                           
  7147                           ;main.c: 1378: }
  7148  001F12  D006               	goto	l13271
  7149  001F14                     l13269:
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;main.c: 1379: else {
  7153                           ;main.c: 1381: putsUSART((char *)"\a");
  7154  001F14  0E7F               	movlw	high STR_129
  7155  001F16  6E1B               	movwf	?_putsUSART+1,c
  7156  001F18  0EF0               	movlw	low STR_129
  7157  001F1A  6E1A               	movwf	?_putsUSART,c
  7158  001F1C  ECC1  F025         	call	_putsUSART	;wreg free
  7159  001F20                     l13271:
  7160                           
  7161                           ;main.c: 1382: }
  7162                           ;main.c: 1385: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7163  001F20  0101               	movlb	1	; () banked
  7164  001F22  0E01               	movlw	high _cmdbuf
  7165  001F24  6E1A               	movwf	?_memset+1,c
  7166  001F26  0E20               	movlw	low _cmdbuf
  7167  001F28  6E19               	movwf	?_memset,c
  7168  001F2A  6A1C               	clrf	?_memset+3,c
  7169  001F2C  6A1B               	clrf	?_memset+2,c
  7170  001F2E  6A1E               	clrf	?_memset+5,c
  7171  001F30  0E50               	movlw	80
  7172  001F32  6E1D               	movwf	?_memset+4,c
  7173  001F34  EC32  F028         	call	_memset	;wreg free
  7174                           
  7175                           ;main.c: 1386: pos = 0;
  7176  001F38  0100               	movlb	0	; () banked
  7177  001F3A  6BD8               	clrf	_pos& (0+255),b
  7178  001F3C                     l13275:
  7179                           
  7180                           ;main.c: 1388: }
  7181                           ;main.c: 1391: (INTCONbits.GIE = 1);
  7182  001F3C  8EF2               	bsf	intcon,7,c	;volatile
  7183  001F3E                     l663:
  7184  001F3E  0012               	return	
  7185  001F40                     __end_of_doModeSLCAN:
  7186                           	opt stack 0
  7187  001F40                     PL80:
  7188                           	opt stack 24
  7189  001F40  90D8               	bcf	status,0,c
  7190  001F42  3786               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7191  001F44  3787               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7192  001F46  3788               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7193  001F48  3789               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7194  001F4A  0012               	return	
  7195  001F4C                     __end_ofPL80:
  7196                           	opt stack 0
  7197                           tblptru	equ	0xFF8
  7198                           tblptrh	equ	0xFF7
  7199                           tblptrl	equ	0xFF6
  7200                           tablat	equ	0xFF5
  7201                           prodh	equ	0xFF4
  7202                           prodl	equ	0xFF3
  7203                           intcon	equ	0xFF2
  7204                           indf0	equ	0xFEF
  7205                           postinc0	equ	0xFEE
  7206                           fsr0h	equ	0xFEA
  7207                           fsr0l	equ	0xFE9
  7208                           wreg	equ	0xFE8
  7209                           indf1	equ	0xFE7
  7210                           postinc1	equ	0xFE6
  7211                           postdec1	equ	0xFE5
  7212                           fsr1h	equ	0xFE2
  7213                           fsr1l	equ	0xFE1
  7214                           indf2	equ	0xFDF
  7215                           postinc2	equ	0xFDE
  7216                           postdec2	equ	0xFDD
  7217                           plusw2	equ	0xFDB
  7218                           fsr2h	equ	0xFDA
  7219                           fsr2l	equ	0xFD9
  7220                           status	equ	0xFD8
  7221                           
  7222 ;; *************** function _hexStringToBytes *****************
  7223 ;; Defined at:
  7224 ;;		line 31 in file "hexutils.c"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;  buf             2   28[COMRAM] PTR unsigned char 
  7227 ;;		 -> wrkbuf(80), 
  7228 ;;  size            1   30[COMRAM] unsigned char 
  7229 ;;  inhex           2   31[COMRAM] PTR unsigned char 
  7230 ;;		 -> cmdbuf(80), 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;  i               2   40[COMRAM] int 
  7233 ;;  p               2   38[COMRAM] PTR unsigned char 
  7234 ;;		 -> cmdbuf(80), 
  7235 ;;  len             2   36[COMRAM] int 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      unsigned char 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : F/1
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7245 ;;      Params:         5       0       0       0       0       0       0
  7246 ;;      Locals:         6       0       0       0       0       0       0
  7247 ;;      Temps:          3       0       0       0       0       0       0
  7248 ;;      Totals:        14       0       0       0       0       0       0
  7249 ;;Total ram usage:       14 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    3
  7252 ;; This function calls:
  7253 ;;		_strlen
  7254 ;;		_nibbleFromChar
  7255 ;; This function is called by:
  7256 ;;		_doModeSLCAN
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text3
  7261  0042CC                     __ptext3:
  7262                           	opt stack 0
  7263  0042CC                     _hexStringToBytes:
  7264                           	opt stack 26
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;hexutils.c: 32: uint8_t *p;
  7268                           ;hexutils.c: 33: int len, i;
  7269                           ;hexutils.c: 35: len = strlen(inhex) / 2;
  7270                           
  7271                           ;incstack = 0
  7272                           ;incstack = 0
  7273  0042CC  C020  F019         	movff	hexStringToBytes@inhex,?_strlen
  7274  0042D0  C021  F01A         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7275  0042D4  EC5D  F027         	call	_strlen	;wreg free
  7276  0042D8  90D8               	bcf	status,0,c
  7277  0042DA  301A               	rrcf	?_strlen+1,w,c
  7278  0042DC  6E26               	movwf	hexStringToBytes@len+1,c
  7279  0042DE  3019               	rrcf	?_strlen,w,c
  7280  0042E0  6E25               	movwf	hexStringToBytes@len,c
  7281                           
  7282                           ;hexutils.c: 36: if ( len > size ) return 0;
  7283  0042E2  501F               	movf	hexStringToBytes@size,w,c
  7284  0042E4  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7285  0042E6  6A23               	clrf	(??_hexStringToBytes+1)& (0+255),c
  7286  0042E8  5023               	movf	??_hexStringToBytes+1,w,c
  7287  0042EA  0A80               	xorlw	128
  7288  0042EC  6E24               	movwf	(??_hexStringToBytes+2)& (0+255),c
  7289  0042EE  5025               	movf	hexStringToBytes@len,w,c
  7290  0042F0  5C22               	subwf	??_hexStringToBytes,w,c
  7291  0042F2  5026               	movf	hexStringToBytes@len+1,w,c
  7292  0042F4  0A80               	xorlw	128
  7293  0042F6  5824               	subwfb	(??_hexStringToBytes+2)& (0+255),w,c
  7294  0042F8  E202               	bc	l1486
  7295  0042FA  0E00               	movlw	0
  7296  0042FC  D033               	goto	l1487
  7297  0042FE                     l1486:
  7298                           
  7299                           ;hexutils.c: 37: for (i=0, p = (uint8_t *)inhex; i<len; i++) {
  7300  0042FE  6A29               	clrf	hexStringToBytes@i,c
  7301  004300  6A2A               	clrf	hexStringToBytes@i+1,c
  7302  004302  C020  F027         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7303  004306  C021  F028         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7304  00430A  D022               	goto	l11805
  7305  00430C                     l11799:
  7306                           
  7307                           ;hexutils.c: 38: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
  7308  00430C  5029               	movf	hexStringToBytes@i,w,c
  7309  00430E  241D               	addwf	hexStringToBytes@buf,w,c
  7310  004310  6ED9               	movwf	fsr2l,c
  7311  004312  502A               	movf	hexStringToBytes@i+1,w,c
  7312  004314  201E               	addwfc	hexStringToBytes@buf+1,w,c
  7313  004316  6EDA               	movwf	fsr2h,c
  7314  004318  EE10 F001          	lfsr	1,1
  7315  00431C  5027               	movf	hexStringToBytes@p,w,c
  7316  00431E  26E1               	addwf	fsr1l,f,c
  7317  004320  5028               	movf	hexStringToBytes@p+1,w,c
  7318  004322  22E2               	addwfc	fsr1h,f,c
  7319  004324  50E7               	movf	indf1,w,c
  7320  004326  EC00  F027         	call	_nibbleFromChar
  7321  00432A  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7322  00432C  C027  FFE1         	movff	hexStringToBytes@p,fsr1l
  7323  004330  C028  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7324  004334  50E7               	movf	indf1,w,c
  7325  004336  EC00  F027         	call	_nibbleFromChar
  7326  00433A  6E23               	movwf	(??_hexStringToBytes+1)& (0+255),c
  7327  00433C  3823               	swapf	??_hexStringToBytes+1,w,c
  7328  00433E  0BF0               	andlw	240
  7329  004340  1022               	iorwf	??_hexStringToBytes,w,c
  7330  004342  6EDF               	movwf	indf2,c
  7331                           
  7332                           ;hexutils.c: 39: p += 2;
  7333  004344  0E02               	movlw	2
  7334  004346  2627               	addwf	hexStringToBytes@p,f,c
  7335  004348  0E00               	movlw	0
  7336  00434A  2228               	addwfc	hexStringToBytes@p+1,f,c
  7337  00434C  4A29               	infsnz	hexStringToBytes@i,f,c
  7338  00434E  2A2A               	incf	hexStringToBytes@i+1,f,c
  7339  004350                     l11805:
  7340  004350  502A               	movf	hexStringToBytes@i+1,w,c
  7341  004352  0A80               	xorlw	128
  7342  004354  6E22               	movwf	??_hexStringToBytes& (0+255),c
  7343  004356  5025               	movf	hexStringToBytes@len,w,c
  7344  004358  5C29               	subwf	hexStringToBytes@i,w,c
  7345  00435A  5026               	movf	hexStringToBytes@len+1,w,c
  7346  00435C  0A80               	xorlw	128
  7347  00435E  5822               	subwfb	??_hexStringToBytes& (0+255),w,c
  7348  004360  E3D5               	bnc	l11799
  7349                           
  7350                           ;hexutils.c: 40: }
  7351                           ;hexutils.c: 42: return i;
  7352  004362  5029               	movf	hexStringToBytes@i,w,c
  7353  004364                     l1487:
  7354  004364  0012               	return	
  7355  004366                     __end_of_hexStringToBytes:
  7356                           	opt stack 0
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           indf0	equ	0xFEF
  7365                           postinc0	equ	0xFEE
  7366                           fsr0h	equ	0xFEA
  7367                           fsr0l	equ	0xFE9
  7368                           wreg	equ	0xFE8
  7369                           indf1	equ	0xFE7
  7370                           postinc1	equ	0xFE6
  7371                           postdec1	equ	0xFE5
  7372                           fsr1h	equ	0xFE2
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           plusw2	equ	0xFDB
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function _nibbleFromChar *****************
  7383 ;; Defined at:
  7384 ;;		line 16 in file "hexutils.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  c               1    wreg     unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  c               1   24[COMRAM] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      unsigned char 
  7391 ;; Registers used:
  7392 ;;		wreg, status,2, status,0
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/1
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7398 ;;      Params:         0       0       0       0       0       0       0
  7399 ;;      Locals:         1       0       0       0       0       0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0
  7401 ;;      Totals:         1       0       0       0       0       0       0
  7402 ;;Total ram usage:        1 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    2
  7405 ;; This function calls:
  7406 ;;		Nothing
  7407 ;; This function is called by:
  7408 ;;		_hexStringToBytes
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text4
  7413  004E00                     __ptext4:
  7414                           	opt stack 0
  7415  004E00                     _nibbleFromChar:
  7416                           	opt stack 26
  7417                           
  7418                           ;incstack = 0
  7419                           ;incstack = 0
  7420                           ;nibbleFromChar@c stored from wreg
  7421  004E00  CFE8 F019          	movff	wreg,nibbleFromChar@c
  7422                           
  7423                           ;hexutils.c: 17: if(c >= '0' && c <= '9') return c - '0';
  7424  004E04  0E2F               	movlw	47
  7425  004E06  6419               	cpfsgt	nibbleFromChar@c,c
  7426  004E08  D006               	goto	l12249
  7427  004E0A  0E3A               	movlw	58
  7428  004E0C  6019               	cpfslt	nibbleFromChar@c,c
  7429  004E0E  D003               	goto	l12249
  7430  004E10  5019               	movf	nibbleFromChar@c,w,c
  7431  004E12  0FD0               	addlw	208
  7432  004E14  D013               	goto	l1481
  7433  004E16                     l12249:
  7434                           
  7435                           ;hexutils.c: 18: if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  7436  004E16  0E60               	movlw	96
  7437  004E18  6419               	cpfsgt	nibbleFromChar@c,c
  7438  004E1A  D006               	goto	l12257
  7439  004E1C  0E67               	movlw	103
  7440  004E1E  6019               	cpfslt	nibbleFromChar@c,c
  7441  004E20  D003               	goto	l12257
  7442  004E22  5019               	movf	nibbleFromChar@c,w,c
  7443  004E24  0FA9               	addlw	169
  7444  004E26  D00A               	goto	l1481
  7445  004E28                     l12257:
  7446                           
  7447                           ;hexutils.c: 19: if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  7448  004E28  0E40               	movlw	64
  7449  004E2A  6419               	cpfsgt	nibbleFromChar@c,c
  7450  004E2C  D006               	goto	l12265
  7451  004E2E  0E47               	movlw	71
  7452  004E30  6019               	cpfslt	nibbleFromChar@c,c
  7453  004E32  D003               	goto	l12265
  7454  004E34  5019               	movf	nibbleFromChar@c,w,c
  7455  004E36  0FC9               	addlw	201
  7456  004E38  D001               	goto	l1481
  7457  004E3A                     l12265:
  7458                           
  7459                           ;hexutils.c: 20: return 255;
  7460  004E3A  0EFF               	movlw	255
  7461  004E3C                     l1481:
  7462  004E3C  0012               	return	
  7463  004E3E                     __end_of_nibbleFromChar:
  7464                           	opt stack 0
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           intcon	equ	0xFF2
  7472                           indf0	equ	0xFEF
  7473                           postinc0	equ	0xFEE
  7474                           fsr0h	equ	0xFEA
  7475                           fsr0l	equ	0xFE9
  7476                           wreg	equ	0xFE8
  7477                           indf1	equ	0xFE7
  7478                           postinc1	equ	0xFE6
  7479                           postdec1	equ	0xFE5
  7480                           fsr1h	equ	0xFE2
  7481                           fsr1l	equ	0xFE1
  7482                           indf2	equ	0xFDF
  7483                           postinc2	equ	0xFDE
  7484                           postdec2	equ	0xFDD
  7485                           plusw2	equ	0xFDB
  7486                           fsr2h	equ	0xFDA
  7487                           fsr2l	equ	0xFD9
  7488                           status	equ	0xFD8
  7489                           
  7490 ;; *************** function _receivePrintEventSLCAN *****************
  7491 ;; Defined at:
  7492 ;;		line 1837 in file "main.c"
  7493 ;; Parameters:    Size  Location     Type
  7494 ;;		None
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  id              4   17[BANK0 ] unsigned long 
  7497 ;;  i               2   21[BANK0 ] int 
  7498 ;;  dlc             1   16[BANK0 ] unsigned char 
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      enum E15660
  7501 ;; Registers used:
  7502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : F/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7508 ;;      Params:         0       0       0       0       0       0       0
  7509 ;;      Locals:         0       7       0       0       0       0       0
  7510 ;;      Temps:          0       3       0       0       0       0       0
  7511 ;;      Totals:         0      10       0       0       0       0       0
  7512 ;;Total ram usage:       10 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    5
  7515 ;; This function calls:
  7516 ;;		_putsUSART
  7517 ;;		_WriteUSART
  7518 ;;		_strlen
  7519 ;;		_getCANFrame
  7520 ;;		_ultoa
  7521 ;;		_itoa
  7522 ;; This function is called by:
  7523 ;;		_doModeSLCAN
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text5
  7528  002844                     __ptext5:
  7529                           	opt stack 0
  7530  002844                     _receivePrintEventSLCAN:
  7531                           	opt stack 24
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;main.c: 1838: int i;
  7535                           ;main.c: 1839: uint8_t dlc;
  7536                           ;main.c: 1840: uint32_t id;
  7537                           ;main.c: 1842: if ( getCANFrame( &id, &dlc, vscpData ) ) {
  7538                           
  7539                           ;incstack = 0
  7540                           ;incstack = 0
  7541  002844  0E70               	movlw	low receivePrintEventSLCAN@dlc
  7542  002846  6E2C               	movwf	?_getCANFrame,c
  7543  002848  0E40               	movlw	low _vscpData
  7544  00284A  6E2D               	movwf	?_getCANFrame+1,c
  7545  00284C  0E00               	movlw	high _vscpData
  7546  00284E  6E2E               	movwf	?_getCANFrame+2,c
  7547  002850  0E0F               	movlw	15
  7548  002852  6E2E               	movwf	?_getCANFrame+2,c
  7549  002854  0E5F               	movlw	__accesstop+-1
  7550  002856  642D               	cpfsgt	?_getCANFrame+1,c
  7551  002858  6A2E               	clrf	?_getCANFrame+2,c
  7552  00285A  0E71               	movlw	receivePrintEventSLCAN@id& (0+255)
  7553  00285C  EC1B  F028         	call	_getCANFrame
  7554  002860  0900               	iorlw	0
  7555  002862  E101 D0B0          	bz	l953
  7556                           
  7557                           ;main.c: 1845: cntRxFrames++;
  7558  002866  0101               	movlb	1	; () banked
  7559  002868  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7560  00286A  0E00               	movlw	0
  7561  00286C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7562  00286E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7563  002870  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7564                           
  7565                           ;main.c: 1846: cntRxBytes += dlc;
  7566  002872  0100               	movlb	0	; () banked
  7567  002874  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7568  002876  0101               	movlb	1	; () banked
  7569  002878  2708               	addwf	_cntRxBytes& (0+255),f,b
  7570  00287A  0E00               	movlw	0
  7571  00287C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7572  00287E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7573  002880  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7574  002882                     l926:
  7575  002882  A2AC               	btfss	4012,1,c	;volatile
  7576  002884  D7FE               	goto	l926
  7577                           
  7578                           ;main.c: 1849: WriteUSART('T');
  7579  002886  0E54               	movlw	84
  7580  002888  EC9F  F028         	call	_WriteUSART
  7581                           
  7582                           ;main.c: 1851: ultoa( wrkbuf, id, 16 );
  7583  00288C  0E01               	movlw	high _wrkbuf
  7584  00288E  0100               	movlb	0	; () banked
  7585  002890  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7586  002892  0E70               	movlw	low _wrkbuf
  7587  002894  6F60               	movwf	?_ultoa& (0+255),b
  7588  002896  C071  F062         	movff	receivePrintEventSLCAN@id,?_ultoa+2
  7589  00289A  C072  F063         	movff	receivePrintEventSLCAN@id+1,?_ultoa+3
  7590  00289E  C073  F064         	movff	receivePrintEventSLCAN@id+2,?_ultoa+4
  7591  0028A2  C074  F065         	movff	receivePrintEventSLCAN@id+3,?_ultoa+5
  7592  0028A6  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7593  0028A8  0E10               	movlw	16
  7594  0028AA  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7595  0028AC  EC44  F01C         	call	_ultoa	;wreg free
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;main.c: 1853: for ( i=0; i<((uint8_t)(8-sizeof(wrkbuf))); i++ ) {
  7599  0028B0  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7600  0028B2  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7601  0028B4                     l931:
  7602                           
  7603                           ; BSR set to: 0
  7604  0028B4  A2AC               	btfss	4012,1,c	;volatile
  7605  0028B6  D7FE               	goto	l931
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;main.c: 1855: WriteUSART('0');
  7609  0028B8  0E30               	movlw	48
  7610  0028BA  EC9F  F028         	call	_WriteUSART
  7611                           
  7612                           ; BSR set to: 0
  7613  0028BE  D884               	call	PL82	;call to abstracted procedure
  7614  0028C0  B4D8               	btfsc	status,2,c
  7615  0028C2  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7616  0028C4  E3F7               	bnc	l931
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;main.c: 1856: }
  7620                           ;main.c: 1857: putsUSART(wrkbuf);
  7621  0028C6  0101               	movlb	1	; () banked
  7622  0028C8  0E01               	movlw	high _wrkbuf
  7623  0028CA  6E1B               	movwf	?_putsUSART+1,c
  7624  0028CC  0E70               	movlw	low _wrkbuf
  7625  0028CE  6E1A               	movwf	?_putsUSART,c
  7626  0028D0  ECC1  F025         	call	_putsUSART	;wreg free
  7627                           
  7628                           ;main.c: 1860: itoa( wrkbuf, dlc, 16 );
  7629  0028D4  0E01               	movlw	high _wrkbuf
  7630  0028D6  6E2A               	movwf	?_itoa+1,c
  7631  0028D8  0E70               	movlw	low _wrkbuf
  7632  0028DA  6E29               	movwf	?_itoa,c
  7633  0028DC  0100               	movlb	0	; () banked
  7634  0028DE  C070  F02B         	movff	receivePrintEventSLCAN@dlc,?_itoa+2
  7635  0028E2  6A2C               	clrf	?_itoa+3,c
  7636  0028E4  6A2E               	clrf	?_itoa+5,c
  7637  0028E6  0E10               	movlw	16
  7638  0028E8  6E2D               	movwf	?_itoa+4,c
  7639  0028EA  ECB4  F027         	call	_itoa	;wreg free
  7640  0028EE                     l934:
  7641  0028EE  A2AC               	btfss	4012,1,c	;volatile
  7642  0028F0  D7FE               	goto	l934
  7643                           
  7644                           ;main.c: 1862: WriteUSART( wrkbuf[0] );
  7645  0028F2  0101               	movlb	1	; () banked
  7646  0028F4  5170               	movf	_wrkbuf& (0+255),w,b
  7647  0028F6  EC9F  F028         	call	_WriteUSART
  7648                           
  7649                           ;main.c: 1865: for ( i=0; i<dlc; i++ ) {
  7650  0028FA  0100               	movlb	0	; () banked
  7651  0028FC  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7652  0028FE  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7653  002900  D02B               	goto	l13917
  7654  002902                     l13905:
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;main.c: 1866: itoa( wrkbuf, vscpData[i], 16 );
  7658  002902  0E01               	movlw	high _wrkbuf
  7659  002904  6E2A               	movwf	?_itoa+1,c
  7660  002906  0E70               	movlw	low _wrkbuf
  7661  002908  6E29               	movwf	?_itoa,c
  7662  00290A  0100               	movlb	0	; () banked
  7663  00290C  5175               	movf	receivePrintEventSLCAN@i& (0+255),w,b
  7664  00290E  0F40               	addlw	low _vscpData
  7665  002910  6ED9               	movwf	fsr2l,c
  7666  002912  6ADA               	clrf	fsr2h,c
  7667  002914  50DF               	movf	indf2,w,c
  7668  002916  6E2B               	movwf	?_itoa+2,c
  7669  002918  6A2C               	clrf	?_itoa+3,c
  7670  00291A  6A2E               	clrf	?_itoa+5,c
  7671  00291C  0E10               	movlw	16
  7672  00291E  6E2D               	movwf	?_itoa+4,c
  7673  002920  ECB4  F027         	call	_itoa	;wreg free
  7674                           
  7675                           ;main.c: 1868: if ( 2 != strlen( wrkbuf ) ) {
  7676  002924  0101               	movlb	1	; () banked
  7677  002926  0E01               	movlw	high _wrkbuf
  7678  002928  6E1A               	movwf	?_strlen+1,c
  7679  00292A  0E70               	movlw	low _wrkbuf
  7680  00292C  6E19               	movwf	?_strlen,c
  7681  00292E  EC5D  F027         	call	_strlen	;wreg free
  7682  002932  5019               	movf	?_strlen,w,c
  7683  002934  0A02               	xorlw	2
  7684  002936  101A               	iorwf	?_strlen+1,w,c
  7685  002938  E005               	bz	l13913
  7686  00293A                     l940:
  7687  00293A  A2AC               	btfss	4012,1,c	;volatile
  7688  00293C  D7FE               	goto	l940
  7689                           
  7690                           ;main.c: 1870: WriteUSART('0');
  7691  00293E  0E30               	movlw	48
  7692  002940  EC9F  F028         	call	_WriteUSART
  7693  002944                     l13913:
  7694                           
  7695                           ;main.c: 1871: }
  7696                           ;main.c: 1873: putsUSART(wrkbuf);
  7697  002944  0101               	movlb	1	; () banked
  7698  002946  0E01               	movlw	high _wrkbuf
  7699  002948  6E1B               	movwf	?_putsUSART+1,c
  7700  00294A  0E70               	movlw	low _wrkbuf
  7701  00294C  6E1A               	movwf	?_putsUSART,c
  7702  00294E  ECC1  F025         	call	_putsUSART	;wreg free
  7703  002952  0100               	movlb	0	; () banked
  7704  002954  4B75               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7705  002956  2B76               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7706  002958                     l13917:
  7707                           
  7708                           ; BSR set to: 0
  7709  002958  5170               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7710  00295A  6F6D               	movwf	??_receivePrintEventSLCAN& (0+255),b
  7711  00295C  6B6E               	clrf	(??_receivePrintEventSLCAN+1)& (0+255),b
  7712  00295E  5176               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7713  002960  0A80               	xorlw	128
  7714  002962  6F6F               	movwf	(??_receivePrintEventSLCAN+2)& (0+255),b
  7715  002964  516D               	movf	??_receivePrintEventSLCAN& (0+255),w,b
  7716  002966  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7717  002968  516E               	movf	(??_receivePrintEventSLCAN+1)& (0+255),w,b
  7718  00296A  0A80               	xorlw	128
  7719  00296C  596F               	subwfb	(??_receivePrintEventSLCAN+2)& (0+255),w,b
  7720  00296E  E3C9               	bnc	l13905
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;main.c: 1874: }
  7724                           ;main.c: 1877: if ( nTimeStamp ) {
  7725  002970  503D               	movf	_nTimeStamp,w,c
  7726  002972  E024               	bz	l950
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;main.c: 1878: ultoa( wrkbuf, timer, 16 );
  7730  002974  0E01               	movlw	high _wrkbuf
  7731  002976  0100               	movlb	0	; () banked
  7732  002978  6F61               	movwf	(?_ultoa+1)& (0+255),b
  7733  00297A  0E70               	movlw	low _wrkbuf
  7734  00297C  6F60               	movwf	?_ultoa& (0+255),b
  7735  00297E  C0CF  F062         	movff	_timer,?_ultoa+2	;volatile
  7736  002982  C0D0  F063         	movff	_timer+1,?_ultoa+3	;volatile
  7737  002986  C0D1  F064         	movff	_timer+2,?_ultoa+4	;volatile
  7738  00298A  C0D2  F065         	movff	_timer+3,?_ultoa+5	;volatile
  7739  00298E  6B67               	clrf	(?_ultoa+7)& (0+255),b
  7740  002990  0E10               	movlw	16
  7741  002992  6F66               	movwf	(?_ultoa+6)& (0+255),b
  7742  002994  EC44  F01C         	call	_ultoa	;wreg free
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 1880: for ( i=0; i<((uint8_t)(8-sizeof(wrkbuf))); i++ ) {
  7746  002998  6B75               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7747  00299A  6B76               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7748  00299C                     l947:
  7749                           
  7750                           ; BSR set to: 0
  7751  00299C  A2AC               	btfss	4012,1,c	;volatile
  7752  00299E  D7FE               	goto	l947
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;main.c: 1882: WriteUSART('0');
  7756  0029A0  0E30               	movlw	48
  7757  0029A2  EC9F  F028         	call	_WriteUSART
  7758                           
  7759                           ; BSR set to: 0
  7760  0029A6  D810               	call	PL82	;call to abstracted procedure
  7761  0029A8  B4D8               	btfsc	status,2,c
  7762  0029AA  5D75               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7763  0029AC  E3F7               	bnc	l947
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;main.c: 1883: }
  7767                           ;main.c: 1884: putsUSART(wrkbuf);
  7768  0029AE  0101               	movlb	1	; () banked
  7769  0029B0  0E01               	movlw	high _wrkbuf
  7770  0029B2  6E1B               	movwf	?_putsUSART+1,c
  7771  0029B4  0E70               	movlw	low _wrkbuf
  7772  0029B6  6E1A               	movwf	?_putsUSART,c
  7773  0029B8  ECC1  F025         	call	_putsUSART	;wreg free
  7774  0029BC                     l950:
  7775  0029BC  A2AC               	btfss	4012,1,c	;volatile
  7776  0029BE  D7FE               	goto	l950
  7777                           
  7778                           ;main.c: 1888: WriteUSART(0x0d);
  7779  0029C0  0E0D               	movlw	13
  7780  0029C2  EC9F  F028         	call	_WriteUSART
  7781  0029C6                     l953:
  7782  0029C6  0012               	return	
  7783  0029C8                     __end_of_receivePrintEventSLCAN:
  7784                           	opt stack 0
  7785  0029C8                     PL82:
  7786                           	opt stack 24
  7787  0029C8  0100               	movlb	0	; () banked
  7788  0029CA  4B75               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7789  0029CC  2B76               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7790  0029CE  5176               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7791  0029D0  0A80               	xorlw	128
  7792  0029D2  0F80               	addlw	-128
  7793  0029D4  0CB8               	retlw	184
  7794  0029D6                     __end_ofPL82:
  7795                           	opt stack 0
  7796                           tblptru	equ	0xFF8
  7797                           tblptrh	equ	0xFF7
  7798                           tblptrl	equ	0xFF6
  7799                           tablat	equ	0xFF5
  7800                           prodh	equ	0xFF4
  7801                           prodl	equ	0xFF3
  7802                           intcon	equ	0xFF2
  7803                           indf0	equ	0xFEF
  7804                           postinc0	equ	0xFEE
  7805                           fsr0h	equ	0xFEA
  7806                           fsr0l	equ	0xFE9
  7807                           wreg	equ	0xFE8
  7808                           indf1	equ	0xFE7
  7809                           postinc1	equ	0xFE6
  7810                           postdec1	equ	0xFE5
  7811                           fsr1h	equ	0xFE2
  7812                           fsr1l	equ	0xFE1
  7813                           indf2	equ	0xFDF
  7814                           postinc2	equ	0xFDE
  7815                           postdec2	equ	0xFDD
  7816                           plusw2	equ	0xFDB
  7817                           fsr2h	equ	0xFDA
  7818                           fsr2l	equ	0xFD9
  7819                           status	equ	0xFD8
  7820                           
  7821 ;; *************** function _ultoa *****************
  7822 ;; Defined at:
  7823 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  buf             2    0[BANK0 ] PTR unsigned char 
  7826 ;;		 -> wrkbuf(80), 
  7827 ;;  val             4    2[BANK0 ] unsigned long 
  7828 ;;  base            2    6[BANK0 ] int 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  v               4    8[BANK0 ] unsigned long 
  7831 ;;  c               1   12[BANK0 ] unsigned char 
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  2    0[BANK0 ] PTR unsigned char 
  7834 ;; Registers used:
  7835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7836 ;; Tracked objects:
  7837 ;;		On entry : F/0
  7838 ;;		On exit  : F/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7841 ;;      Params:         0       8       0       0       0       0       0
  7842 ;;      Locals:         0       5       0       0       0       0       0
  7843 ;;      Temps:          0       0       0       0       0       0       0
  7844 ;;      Totals:         0      13       0       0       0       0       0
  7845 ;;Total ram usage:       13 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; Hardware stack levels required when called:    3
  7848 ;; This function calls:
  7849 ;;		___lldiv
  7850 ;;		___llmod
  7851 ;; This function is called by:
  7852 ;;		_receivePrintEventSLCAN
  7853 ;; This function uses a non-reentrant model
  7854 ;;
  7855                           
  7856                           	psect	text6
  7857  003888                     __ptext6:
  7858                           	opt stack 0
  7859  003888                     _ultoa:
  7860                           	opt stack 25
  7861                           
  7862                           ; BSR set to: 0
  7863                           
  7864                           ;incstack = 0
  7865                           ;incstack = 0
  7866  003888  C062  F068         	movff	ultoa@val,ultoa@v
  7867  00388C  C063  F069         	movff	ultoa@val+1,ultoa@v+1
  7868  003890  C064  F06A         	movff	ultoa@val+2,ultoa@v+2
  7869  003894  C065  F06B         	movff	ultoa@val+3,ultoa@v+3
  7870  003898                     l13943:
  7871                           
  7872                           ; BSR set to: 0
  7873  003898  C068  F019         	movff	ultoa@v,?___lldiv
  7874  00389C  C069  F01A         	movff	ultoa@v+1,?___lldiv+1
  7875  0038A0  C06A  F01B         	movff	ultoa@v+2,?___lldiv+2
  7876  0038A4  C06B  F01C         	movff	ultoa@v+3,?___lldiv+3
  7877  0038A8  D858               	call	PL62	;call to abstracted procedure
  7878  0038AA  ECCD  F023         	call	___lldiv	;wreg free
  7879  0038AE  C01C  F06B         	movff	?___lldiv+3,ultoa@v+3
  7880  0038B2  C01B  F06A         	movff	?___lldiv+2,ultoa@v+2
  7881  0038B6  C01A  F069         	movff	?___lldiv+1,ultoa@v+1
  7882  0038BA  C019  F068         	movff	?___lldiv,ultoa@v
  7883                           
  7884                           ; BSR set to: 0
  7885  0038BE  4B60               	infsnz	ultoa@buf& (0+255),f,b
  7886  0038C0  2B61               	incf	(ultoa@buf+1)& (0+255),f,b
  7887                           
  7888                           ; BSR set to: 0
  7889  0038C2  516B               	movf	(ultoa@v+3)& (0+255),w,b
  7890  0038C4  1168               	iorwf	ultoa@v& (0+255),w,b
  7891  0038C6  1169               	iorwf	(ultoa@v+1)& (0+255),w,b
  7892  0038C8  116A               	iorwf	(ultoa@v+2)& (0+255),w,b
  7893  0038CA  E1E6               	bnz	l13943
  7894                           
  7895                           ; BSR set to: 0
  7896  0038CC  C060  FFD9         	movff	ultoa@buf,fsr2l
  7897  0038D0  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  7898  0038D4  6ADF               	clrf	indf2,c
  7899                           
  7900                           ; BSR set to: 0
  7901  0038D6  0760               	decf	ultoa@buf& (0+255),f,b
  7902  0038D8  A0D8               	btfss	status,0,c
  7903  0038DA  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  7904  0038DC                     l13953:
  7905                           
  7906                           ; BSR set to: 0
  7907  0038DC  C062  F026         	movff	ultoa@val,?___llmod
  7908  0038E0  C063  F027         	movff	ultoa@val+1,?___llmod+1
  7909  0038E4  C064  F028         	movff	ultoa@val+2,?___llmod+2
  7910  0038E8  C065  F029         	movff	ultoa@val+3,?___llmod+3
  7911  0038EC  C066  F02A         	movff	ultoa@base,?___llmod+4
  7912  0038F0  C067  F02B         	movff	ultoa@base+1,?___llmod+5
  7913  0038F4  0E00               	movlw	0
  7914  0038F6  BE2B               	btfsc	?___llmod+5,7,c
  7915  0038F8  0EFF               	movlw	-1
  7916  0038FA  6E2C               	movwf	?___llmod+6,c
  7917  0038FC  6E2D               	movwf	?___llmod+7,c
  7918  0038FE  ECDE  F024         	call	___llmod	;wreg free
  7919  003902  5026               	movf	?___llmod,w,c
  7920  003904  6F6C               	movwf	ultoa@c& (0+255),b
  7921                           
  7922                           ; BSR set to: 0
  7923  003906  C062  F019         	movff	ultoa@val,?___lldiv
  7924  00390A  C063  F01A         	movff	ultoa@val+1,?___lldiv+1
  7925  00390E  C064  F01B         	movff	ultoa@val+2,?___lldiv+2
  7926  003912  C065  F01C         	movff	ultoa@val+3,?___lldiv+3
  7927  003916  D821               	call	PL62	;call to abstracted procedure
  7928  003918  ECCD  F023         	call	___lldiv	;wreg free
  7929  00391C  C01C  F065         	movff	?___lldiv+3,ultoa@val+3
  7930  003920  C01B  F064         	movff	?___lldiv+2,ultoa@val+2
  7931  003924  C01A  F063         	movff	?___lldiv+1,ultoa@val+1
  7932  003928  C019  F062         	movff	?___lldiv,ultoa@val
  7933                           
  7934                           ; BSR set to: 0
  7935  00392C  0E09               	movlw	9
  7936  00392E  656C               	cpfsgt	ultoa@c& (0+255),b
  7937  003930  D002               	goto	l2286
  7938                           
  7939                           ; BSR set to: 0
  7940  003932  0E07               	movlw	7
  7941  003934  276C               	addwf	ultoa@c& (0+255),f,b
  7942  003936                     l2286:
  7943                           
  7944                           ; BSR set to: 0
  7945  003936  0E30               	movlw	48
  7946  003938  276C               	addwf	ultoa@c& (0+255),f,b
  7947                           
  7948                           ; BSR set to: 0
  7949  00393A  C060  FFD9         	movff	ultoa@buf,fsr2l
  7950  00393E  C061  FFDA         	movff	ultoa@buf+1,fsr2h
  7951  003942  C06C  FFDF         	movff	ultoa@c,indf2
  7952                           
  7953                           ; BSR set to: 0
  7954  003946  0760               	decf	ultoa@buf& (0+255),f,b
  7955  003948  A0D8               	btfss	status,0,c
  7956  00394A  0761               	decf	(ultoa@buf+1)& (0+255),f,b
  7957                           
  7958                           ; BSR set to: 0
  7959  00394C  5165               	movf	(ultoa@val+3)& (0+255),w,b
  7960  00394E  1162               	iorwf	ultoa@val& (0+255),w,b
  7961  003950  1163               	iorwf	(ultoa@val+1)& (0+255),w,b
  7962  003952  1164               	iorwf	(ultoa@val+2)& (0+255),w,b
  7963  003954  B4D8               	btfsc	status,2,c
  7964                           
  7965                           ; BSR set to: 0
  7966  003956  0012               	return	
  7967  003958  D7C1               	goto	l13953
  7968  00395A                     __end_of_ultoa:
  7969                           	opt stack 0
  7970  00395A                     PL62:
  7971                           	opt stack 25
  7972  00395A  C066  F01D         	movff	ultoa@base,?___lldiv+4
  7973  00395E  C067  F01E         	movff	ultoa@base+1,?___lldiv+5
  7974  003962  0E00               	movlw	0
  7975  003964  BE1E               	btfsc	?___lldiv+5,7,c
  7976  003966  0EFF               	movlw	-1
  7977  003968  6E1F               	movwf	?___lldiv+6,c
  7978  00396A  6E20               	movwf	?___lldiv+7,c
  7979  00396C  0012               	return	
  7980  00396E                     __end_ofPL62:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           indf0	equ	0xFEF
  7990                           postinc0	equ	0xFEE
  7991                           fsr0h	equ	0xFEA
  7992                           fsr0l	equ	0xFE9
  7993                           wreg	equ	0xFE8
  7994                           indf1	equ	0xFE7
  7995                           postinc1	equ	0xFE6
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           plusw2	equ	0xFDB
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _doModeVscp *****************
  8008 ;; Defined at:
  8009 ;;		line 1012 in file "main.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;		None
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;  c               1   48[COMRAM] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;		None               void
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : F/0
  8020 ;;		On exit  : C/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8023 ;;      Params:         0       0       0       0       0       0       0
  8024 ;;      Locals:         1       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0
  8026 ;;      Totals:         1       0       0       0       0       0       0
  8027 ;;Total ram usage:        1 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    6
  8030 ;; This function calls:
  8031 ;;		_fifo_read
  8032 ;;		_ECANSetOperationMode
  8033 ;;		_receivePrintEventCANAL
  8034 ;;		_calcCRC
  8035 ;;		_sendVSCPDriverErrorFrame
  8036 ;;		_sendVSCPDriverAck
  8037 ;;		_receiveVSCPModeCanalMsg
  8038 ;;		_sendVSCPDriverNack
  8039 ;;		_sendVSCPDriverCommandReply
  8040 ;; This function is called by:
  8041 ;;		_main
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           	psect	text7
  8046  002CDE                     __ptext7:
  8047                           	opt stack 0
  8048  002CDE                     _doModeVscp:
  8049                           	opt stack 24
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 1013: uint8_t c;
  8053                           ;main.c: 1016: if (!bSilent) {
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;incstack = 0
  8057                           ;incstack = 0
  8058  002CDE  67D6               	tstfsz	_bSilent& (0+255),b
  8059  002CE0  D002               	goto	l10085
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;main.c: 1017: receivePrintEventCANAL();
  8063  002CE2  ECE4  F017         	call	_receivePrintEventCANAL	;wreg free
  8064  002CE6                     l10085:
  8065                           
  8066                           ;main.c: 1018: }
  8067                           ;main.c: 1021: (INTCONbits.GIE = 0);
  8068  002CE6  9EF2               	bcf	intcon,7,c	;volatile
  8069                           
  8070                           ;main.c: 1023: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
  8071  002CE8  0101               	movlb	1	; () banked
  8072  002CEA  0E01               	movlw	high _inputFifo
  8073  002CEC  6E1A               	movwf	?_fifo_read+1,c
  8074  002CEE  0EC0               	movlw	low _inputFifo
  8075  002CF0  6E19               	movwf	?_fifo_read,c
  8076  002CF2  0E31               	movlw	low doModeVscp@c
  8077  002CF4  6E1B               	movwf	?_fifo_read+2,c
  8078  002CF6  0E00               	movlw	high doModeVscp@c
  8079  002CF8  6E1C               	movwf	?_fifo_read+3,c
  8080  002CFA  0E0F               	movlw	15
  8081  002CFC  6E1C               	movwf	?_fifo_read+3,c
  8082  002CFE  0E5F               	movlw	__accesstop+-1
  8083  002D00  641B               	cpfsgt	?_fifo_read+2,c
  8084  002D02  6A1C               	clrf	?_fifo_read+3,c
  8085  002D04  6A1E               	clrf	?_fifo_read+5,c
  8086  002D06  0E01               	movlw	1
  8087  002D08  6E1D               	movwf	?_fifo_read+4,c
  8088  002D0A  EC42  F01F         	call	_fifo_read	;wreg free
  8089  002D0E  0419               	decf	?_fifo_read,w,c
  8090  002D10  101A               	iorwf	?_fifo_read+1,w,c
  8091  002D12  E001 D09E          	bnz	l10209
  8092                           
  8093                           ;main.c: 1026: (INTCONbits.GIE = 1);
  8094  002D16  8EF2               	bsf	intcon,7,c	;volatile
  8095                           
  8096                           ;main.c: 1028: if ( 0 == stateVscpDriver ) {
  8097  002D18  663F               	tstfsz	_stateVscpDriver,c
  8098  002D1A  D00E               	goto	l10105
  8099                           
  8100                           ;main.c: 1029: if ( bDLE ) {
  8101  002D1C  503B               	movf	_bDLE,w,c
  8102  002D1E  E009               	bz	l10101
  8103                           
  8104                           ;main.c: 1030: bDLE = 0;
  8105  002D20  6A3B               	clrf	_bDLE,c
  8106                           
  8107                           ;main.c: 1033: if ( 0x02 == c ) {
  8108  002D22  5031               	movf	doModeVscp@c,w,c
  8109  002D24  0A02               	xorlw	2
  8110  002D26  E125               	bnz	l10137
  8111                           
  8112                           ;main.c: 1034: stateVscpDriver = 1;
  8113  002D28  0E01               	movlw	1
  8114  002D2A  6E3F               	movwf	_stateVscpDriver,c
  8115                           
  8116                           ;main.c: 1035: pos = 0;
  8117  002D2C  0100               	movlb	0	; () banked
  8118  002D2E  6BD8               	clrf	_pos& (0+255),b
  8119  002D30  D020               	goto	l10137
  8120  002D32                     l10101:
  8121                           
  8122                           ;main.c: 1038: else {
  8123                           ;main.c: 1039: bDLE = 1;
  8124  002D32  0E01               	movlw	1
  8125  002D34  6E3B               	movwf	_bDLE,c
  8126  002D36  D08E               	goto	l621
  8127  002D38                     l10105:
  8128                           
  8129                           ;main.c: 1043: else if ( 1 == stateVscpDriver ) {
  8130  002D38  043F               	decf	_stateVscpDriver,w,c
  8131  002D3A  E11B               	bnz	l10137
  8132                           
  8133                           ;main.c: 1045: if ( bDLE ) {
  8134  002D3C  503B               	movf	_bDLE,w,c
  8135  002D3E  E015               	bz	l10123
  8136                           
  8137                           ;main.c: 1047: bDLE = 0;
  8138  002D40  6A3B               	clrf	_bDLE,c
  8139                           
  8140                           ;main.c: 1050: if ( 0x03 == c ) {
  8141  002D42  5031               	movf	doModeVscp@c,w,c
  8142  002D44  0A03               	xorlw	3
  8143  002D46  E103               	bnz	l10115
  8144                           
  8145                           ;main.c: 1051: stateVscpDriver = 2;
  8146  002D48  0E02               	movlw	2
  8147  002D4A  6E3F               	movwf	_stateVscpDriver,c
  8148                           
  8149                           ;main.c: 1052: }
  8150  002D4C  D012               	goto	l10137
  8151  002D4E                     l10115:
  8152                           
  8153                           ;main.c: 1054: else if ( 0x10 == c ) {
  8154  002D4E  5031               	movf	doModeVscp@c,w,c
  8155  002D50  0A10               	xorlw	16
  8156  002D52  E10F               	bnz	l10137
  8157  002D54                     l10117:
  8158                           
  8159                           ;main.c: 1056: cmdbuf[ pos++ ] = c;
  8160  002D54  0E20               	movlw	low _cmdbuf
  8161  002D56  0100               	movlb	0	; () banked
  8162  002D58  25D8               	addwf	_pos& (0+255),w,b
  8163  002D5A  6ED9               	movwf	fsr2l,c
  8164  002D5C  6ADA               	clrf	fsr2h,c
  8165  002D5E  0E01               	movlw	high _cmdbuf
  8166  002D60  22DA               	addwfc	fsr2h,f,c
  8167  002D62  C031  FFDF         	movff	doModeVscp@c,indf2
  8168                           
  8169                           ; BSR set to: 1
  8170  002D66  2BD8               	incf	_pos& (0+255),f,b
  8171  002D68  D075               	goto	l621
  8172  002D6A                     l10123:
  8173                           
  8174                           ;main.c: 1061: else {
  8175                           ;main.c: 1062: if ( 0x10 == c ) {
  8176  002D6A  5031               	movf	doModeVscp@c,w,c
  8177  002D6C  0A10               	xorlw	16
  8178  002D6E  E0E1               	bz	l10101
  8179  002D70  D7F1               	goto	l10117
  8180  002D72                     l10137:
  8181                           
  8182                           ;main.c: 1078: }
  8183                           ;main.c: 1079: }
  8184                           ;main.c: 1080: }
  8185                           ;main.c: 1085: if ( 2 == stateVscpDriver ) {
  8186  002D72  503F               	movf	_stateVscpDriver,w,c
  8187  002D74  0A02               	xorlw	2
  8188  002D76  E16D               	bnz	l10209
  8189                           
  8190                           ;main.c: 1088: stateVscpDriver = 0;
  8191  002D78  6A3F               	clrf	_stateVscpDriver,c
  8192                           
  8193                           ;main.c: 1100: if ( calcCRC( cmdbuf, pos ) ) {
  8194  002D7A  0101               	movlb	1	; () banked
  8195  002D7C  0E01               	movlw	high _cmdbuf
  8196  002D7E  6E26               	movwf	?_calcCRC+1,c
  8197  002D80  0E20               	movlw	low _cmdbuf
  8198  002D82  6E25               	movwf	?_calcCRC,c
  8199  002D84  C0D8  F027         	movff	_pos,?_calcCRC+2
  8200  002D88  EC98  F027         	call	_calcCRC	;wreg free
  8201  002D8C  0900               	iorlw	0
  8202  002D8E  E003               	bz	l10145
  8203                           
  8204                           ;main.c: 1101: sendVSCPDriverErrorFrame( 1 );
  8205  002D90  0E01               	movlw	1
  8206  002D92  EC06  F01E         	call	_sendVSCPDriverErrorFrame
  8207  002D96                     l10145:
  8208                           
  8209                           ;main.c: 1102: }
  8210                           ;main.c: 1105: if ( 0 ==
  8211                           ;main.c: 1106: cmdbuf[ 0 ] ) {
  8212  002D96  0101               	movlb	1	; () banked
  8213  002D98  6720               	tstfsz	_cmdbuf& (0+255),b
  8214  002D9A  D003               	goto	l10149
  8215  002D9C                     l10147:
  8216                           
  8217                           ;main.c: 1107: sendVSCPDriverAck();
  8218  002D9C  EC67  F020         	call	_sendVSCPDriverAck	;wreg free
  8219                           
  8220                           ;main.c: 1108: }
  8221  002DA0  D055               	goto	l10205
  8222  002DA2                     l10149:
  8223                           
  8224                           ; BSR set to: 1
  8225                           ;main.c: 1110: else if ( 1 ==
  8226                           ;main.c: 1111: cmdbuf[ 0 ] ) {
  8227  002DA2  0520               	decf	_cmdbuf& (0+255),w,b
  8228  002DA4  E053               	bz	l10205
  8229                           
  8230                           ; BSR set to: 1
  8231                           ;main.c: 1115: else if ( 2 ==
  8232                           ;main.c: 1116: cmdbuf[ 0 ] ) {
  8233  002DA6  5120               	movf	_cmdbuf& (0+255),w,b
  8234  002DA8  0A02               	xorlw	2
  8235  002DAA  E107               	bnz	l10161
  8236                           
  8237                           ; BSR set to: 1
  8238                           ;main.c: 1117: if ( receiveVSCPModeCanalMsg() ) {
  8239  002DAC  EC2A  F01D         	call	_receiveVSCPModeCanalMsg	;wreg free
  8240  002DB0  0900               	iorlw	0
  8241  002DB2  E1F4               	bnz	l10147
  8242  002DB4                     l10159:
  8243                           
  8244                           ;main.c: 1120: else {
  8245                           ;main.c: 1121: sendVSCPDriverNack();
  8246  002DB4  ECA9  F01F         	call	_sendVSCPDriverNack	;wreg free
  8247  002DB8  D049               	goto	l10205
  8248  002DBA                     l10161:
  8249                           
  8250                           ; BSR set to: 1
  8251                           ;main.c: 1125: else if ( 3 ==
  8252                           ;main.c: 1126: cmdbuf[ 0 ] ) {
  8253  002DBA  5120               	movf	_cmdbuf& (0+255),w,b
  8254  002DBC  0A03               	xorlw	3
  8255  002DBE  E0FA               	bz	l10159
  8256                           
  8257                           ; BSR set to: 1
  8258                           ;main.c: 1130: else if ( 4 ==
  8259                           ;main.c: 1131: cmdbuf[ 0 ] ) {
  8260  002DC0  5120               	movf	_cmdbuf& (0+255),w,b
  8261  002DC2  0A04               	xorlw	4
  8262  002DC4  E0F7               	bz	l10159
  8263                           
  8264                           ; BSR set to: 1
  8265                           ;main.c: 1135: else if ( 255 ==
  8266                           ;main.c: 1136: cmdbuf[ 0 ] ) {
  8267  002DC6  2920               	incf	_cmdbuf& (0+255),w,b
  8268  002DC8  E13E               	bnz	l10203
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;main.c: 1138: if ( cmdbuf[ 5 ] ==
  8272                           ;main.c: 1139: 0 ) {
  8273  002DCA  6725               	tstfsz	(_cmdbuf+5)& (0+255),b
  8274  002DCC  D005               	goto	l10175
  8275                           
  8276                           ; BSR set to: 1
  8277                           ;main.c: 1140: sendVSCPDriverCommandReply( 0, 0 );
  8278  002DCE  0E00               	movlw	0
  8279  002DD0  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8280  002DD2  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8281                           
  8282                           ;main.c: 1141: }
  8283  002DD6  D03A               	goto	l10205
  8284  002DD8                     l10175:
  8285                           
  8286                           ; BSR set to: 1
  8287                           ;main.c: 1143: else if ( cmdbuf[ 5 ] ==
  8288                           ;main.c: 1144: 1 ) {
  8289  002DD8  0525               	decf	(_cmdbuf+5)& (0+255),w,b
  8290  002DDA  E109               	bnz	l10181
  8291                           
  8292                           ; BSR set to: 1
  8293                           ;main.c: 1145: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8294  002DDC  0E00               	movlw	0
  8295  002DDE  EC88  F028         	call	_ECANSetOperationMode
  8296                           
  8297                           ;main.c: 1146: sendVSCPDriverCommandReply( 0, 1 );
  8298  002DE2  0E01               	movlw	1
  8299  002DE4  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8300  002DE6  0E00               	movlw	0
  8301  002DE8  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8302                           
  8303                           ;main.c: 1147: }
  8304  002DEC  D02F               	goto	l10205
  8305  002DEE                     l10181:
  8306                           
  8307                           ; BSR set to: 1
  8308                           ;main.c: 1149: else if ( cmdbuf[ 5 ] ==
  8309                           ;main.c: 1150: 2 ) {
  8310  002DEE  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8311  002DF0  0A02               	xorlw	2
  8312  002DF2  E109               	bnz	l10187
  8313                           
  8314                           ; BSR set to: 1
  8315                           ;main.c: 1151: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8316  002DF4  0E40               	movlw	64
  8317  002DF6  EC88  F028         	call	_ECANSetOperationMode
  8318                           
  8319                           ;main.c: 1152: sendVSCPDriverCommandReply( 0, 2 );
  8320  002DFA  0E02               	movlw	2
  8321  002DFC  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8322  002DFE  0E00               	movlw	0
  8323  002E00  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8324                           
  8325                           ;main.c: 1153: }
  8326  002E04  D023               	goto	l10205
  8327  002E06                     l10187:
  8328                           
  8329                           ; BSR set to: 1
  8330                           ;main.c: 1155: else if ( cmdbuf[ 5 ] ==
  8331                           ;main.c: 1156: 3 ) {
  8332  002E06  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8333  002E08  0A03               	xorlw	3
  8334  002E0A  E109               	bnz	l10193
  8335                           
  8336                           ; BSR set to: 1
  8337                           ;main.c: 1157: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8338  002E0C  0E60               	movlw	96
  8339  002E0E  EC88  F028         	call	_ECANSetOperationMode
  8340                           
  8341                           ;main.c: 1158: sendVSCPDriverCommandReply( 0, 3 );
  8342  002E12  0E03               	movlw	3
  8343  002E14  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8344  002E16  0E00               	movlw	0
  8345  002E18  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8346                           
  8347                           ;main.c: 1159: }
  8348  002E1C  D017               	goto	l10205
  8349  002E1E                     l10193:
  8350                           
  8351                           ; BSR set to: 1
  8352                           ;main.c: 1161: else if ( cmdbuf[ 5 ] ==
  8353                           ;main.c: 1162: 4 ) {
  8354  002E1E  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8355  002E20  0A04               	xorlw	4
  8356  002E22  E109               	bnz	l10199
  8357                           
  8358                           ; BSR set to: 1
  8359                           ;main.c: 1163: ECANSetOperationMode(0x20);
  8360  002E24  0E20               	movlw	32
  8361  002E26  EC88  F028         	call	_ECANSetOperationMode
  8362                           
  8363                           ;main.c: 1164: sendVSCPDriverCommandReply( 0, 4 );
  8364  002E2A  0E04               	movlw	4
  8365  002E2C  6E28               	movwf	?_sendVSCPDriverCommandReply,c
  8366  002E2E  0E00               	movlw	0
  8367  002E30  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8368                           
  8369                           ;main.c: 1165: }
  8370  002E34  D00B               	goto	l10205
  8371  002E36                     l10199:
  8372                           
  8373                           ; BSR set to: 1
  8374                           ;main.c: 1167: else if ( cmdbuf[ 5 ] ==
  8375                           ;main.c: 1168: 5 ) {
  8376  002E36  5125               	movf	(_cmdbuf+5)& (0+255),w,b
  8377  002E38  0A05               	xorlw	5
  8378  002E3A  E108               	bnz	l10205
  8379                           
  8380                           ; BSR set to: 1
  8381                           ;main.c: 1169: sendVSCPDriverCommandReply( 0, 0 );
  8382  002E3C  0E00               	movlw	0
  8383  002E3E  6A28               	clrf	?_sendVSCPDriverCommandReply,c
  8384  002E40  ECCD  F01B         	call	_sendVSCPDriverCommandReply
  8385  002E44  D003               	goto	l10205
  8386  002E46                     l10203:
  8387                           
  8388                           ; BSR set to: 1
  8389                           ;main.c: 1173: else {
  8390                           ;main.c: 1175: sendVSCPDriverErrorFrame( 2 );
  8391  002E46  0E02               	movlw	2
  8392  002E48  EC06  F01E         	call	_sendVSCPDriverErrorFrame
  8393  002E4C                     l10205:
  8394                           
  8395                           ;main.c: 1176: }
  8396                           ;main.c: 1179: pos = 0;
  8397  002E4C  0100               	movlb	0	; () banked
  8398  002E4E  6BD8               	clrf	_pos& (0+255),b
  8399                           
  8400                           ; BSR set to: 0
  8401                           ;main.c: 1180: stateVscpDriver = 0;
  8402  002E50  6A3F               	clrf	_stateVscpDriver,c
  8403  002E52                     l10209:
  8404                           
  8405                           ;main.c: 1182: }
  8406                           ;main.c: 1184: }
  8407                           ;main.c: 1187: (INTCONbits.GIE = 1);
  8408  002E52  8EF2               	bsf	intcon,7,c	;volatile
  8409  002E54                     l621:
  8410  002E54  0012               	return	
  8411  002E56                     __end_of_doModeVscp:
  8412                           	opt stack 0
  8413                           tblptru	equ	0xFF8
  8414                           tblptrh	equ	0xFF7
  8415                           tblptrl	equ	0xFF6
  8416                           tablat	equ	0xFF5
  8417                           prodh	equ	0xFF4
  8418                           prodl	equ	0xFF3
  8419                           intcon	equ	0xFF2
  8420                           indf0	equ	0xFEF
  8421                           postinc0	equ	0xFEE
  8422                           fsr0h	equ	0xFEA
  8423                           fsr0l	equ	0xFE9
  8424                           wreg	equ	0xFE8
  8425                           indf1	equ	0xFE7
  8426                           postinc1	equ	0xFE6
  8427                           postdec1	equ	0xFE5
  8428                           fsr1h	equ	0xFE2
  8429                           fsr1l	equ	0xFE1
  8430                           indf2	equ	0xFDF
  8431                           postinc2	equ	0xFDE
  8432                           postdec2	equ	0xFDD
  8433                           plusw2	equ	0xFDB
  8434                           fsr2h	equ	0xFDA
  8435                           fsr2l	equ	0xFD9
  8436                           status	equ	0xFD8
  8437                           
  8438 ;; *************** function _sendVSCPDriverCommandReply *****************
  8439 ;; Defined at:
  8440 ;;		line 1572 in file "main.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  cmdReplyCode    1    wreg     unsigned char 
  8443 ;;  cmdCode         1   39[COMRAM] unsigned char 
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  cmdReplyCode    1   40[COMRAM] unsigned char 
  8446 ;;  crc             1   41[COMRAM] unsigned char 
  8447 ;; Return value:  Size  Location     Type
  8448 ;;		None               void
  8449 ;; Registers used:
  8450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8451 ;; Tracked objects:
  8452 ;;		On entry : 0/1
  8453 ;;		On exit  : 0/0
  8454 ;;		Unchanged: 0/0
  8455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8456 ;;      Params:         1       0       0       0       0       0       0
  8457 ;;      Locals:         2       0       0       0       0       0       0
  8458 ;;      Temps:          0       0       0       0       0       0       0
  8459 ;;      Totals:         3       0       0       0       0       0       0
  8460 ;;Total ram usage:        3 bytes
  8461 ;; Hardware stack levels used:    1
  8462 ;; Hardware stack levels required when called:    5
  8463 ;; This function calls:
  8464 ;;		_WriteUSART
  8465 ;;		_sendEscapedUartData
  8466 ;;		_crc8
  8467 ;; This function is called by:
  8468 ;;		_doModeVscp
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           	psect	text8
  8473  00379A                     __ptext8:
  8474                           	opt stack 0
  8475  00379A                     _sendVSCPDriverCommandReply:
  8476                           	opt stack 24
  8477                           
  8478                           ;incstack = 0
  8479                           ;incstack = 0
  8480                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8481  00379A  CFE8 F029          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8482                           
  8483                           ;main.c: 1573: uint8_t crc = 0;
  8484  00379E  6A2A               	clrf	sendVSCPDriverCommandReply@crc,c
  8485  0037A0                     l808:
  8486  0037A0  A2AC               	btfss	4012,1,c	;volatile
  8487  0037A2  D7FE               	goto	l808
  8488                           
  8489                           ;main.c: 1577: WriteUSART(0x10);
  8490  0037A4  0E10               	movlw	16
  8491  0037A6  EC9F  F028         	call	_WriteUSART
  8492  0037AA                     l811:
  8493  0037AA  A2AC               	btfss	4012,1,c	;volatile
  8494  0037AC  D7FE               	goto	l811
  8495                           
  8496                           ;main.c: 1579: WriteUSART(0x02);
  8497  0037AE  0E02               	movlw	2
  8498  0037B0  EC9F  F028         	call	_WriteUSART
  8499  0037B4                     l814:
  8500  0037B4  A2AC               	btfss	4012,1,c	;volatile
  8501  0037B6  D7FE               	goto	l814
  8502                           
  8503                           ;main.c: 1583: WriteUSART(254);
  8504  0037B8  0EFE               	movlw	254
  8505  0037BA  EC9F  F028         	call	_WriteUSART
  8506                           
  8507                           ;main.c: 1584: crc8( &crc, 254 );
  8508  0037BE  D85C               	call	PL24	;call to abstracted procedure
  8509  0037C0  6420               	cpfsgt	?_crc8,c
  8510  0037C2  6A21               	clrf	?_crc8+1,c
  8511  0037C4  0EFE               	movlw	254
  8512  0037C6  6E22               	movwf	?_crc8+2,c
  8513  0037C8  ECD0  F027         	call	_crc8	;wreg free
  8514  0037CC                     l817:
  8515  0037CC  A2AC               	btfss	4012,1,c	;volatile
  8516  0037CE  D7FE               	goto	l817
  8517                           
  8518                           ;main.c: 1588: WriteUSART( 0 );
  8519  0037D0  0E00               	movlw	0
  8520  0037D2  EC9F  F028         	call	_WriteUSART
  8521                           
  8522                           ;main.c: 1589: crc8( &crc, 0 );
  8523  0037D6  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8524  0037D8  6E20               	movwf	?_crc8,c
  8525  0037DA  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8526  0037DC  EC01  F020         	call	PL4	;call to abstracted procedure
  8527  0037E0  ECD0  F027         	call	_crc8	;wreg free
  8528                           
  8529                           ; BSR set to: 2
  8530                           ;main.c: 1592: sendEscapedUartData( cmdbuf[ 2 ], &crc );
  8531  0037E4  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8532  0037E6  6E25               	movwf	?_sendEscapedUartData,c
  8533  0037E8  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8534  0037EA  EC6D  F01E         	call	PL46	;call to abstracted procedure
  8535  0037EE  6425               	cpfsgt	?_sendEscapedUartData,c
  8536  0037F0  6A26               	clrf	?_sendEscapedUartData+1,c
  8537  0037F2  0101               	movlb	1	; () banked
  8538  0037F4  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  8539  0037F6  EC41  F024         	call	_sendEscapedUartData
  8540  0037FA                     l820:
  8541  0037FA  A2AC               	btfss	4012,1,c	;volatile
  8542  0037FC  D7FE               	goto	l820
  8543                           
  8544                           ;main.c: 1596: WriteUSART( 0 );
  8545  0037FE  0E00               	movlw	0
  8546  003800  EC9F  F028         	call	_WriteUSART
  8547                           
  8548                           ;main.c: 1597: crc8( &crc, 0 );
  8549  003804  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8550  003806  6E20               	movwf	?_crc8,c
  8551  003808  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8552  00380A  EC01  F020         	call	PL4	;call to abstracted procedure
  8553  00380E  ECD0  F027         	call	_crc8	;wreg free
  8554  003812                     l823:
  8555  003812  A2AC               	btfss	4012,1,c	;volatile
  8556  003814  D7FE               	goto	l823
  8557                           
  8558                           ;main.c: 1599: WriteUSART( 2 );
  8559  003816  0E02               	movlw	2
  8560  003818  EC9F  F028         	call	_WriteUSART
  8561                           
  8562                           ;main.c: 1600: crc8( &crc, 2 );
  8563  00381C  D82D               	call	PL24	;call to abstracted procedure
  8564  00381E  6420               	cpfsgt	?_crc8,c
  8565  003820  6A21               	clrf	?_crc8+1,c
  8566  003822  0E02               	movlw	2
  8567  003824  6E22               	movwf	?_crc8+2,c
  8568  003826  ECD0  F027         	call	_crc8	;wreg free
  8569  00382A                     l826:
  8570  00382A  A2AC               	btfss	4012,1,c	;volatile
  8571  00382C  D7FE               	goto	l826
  8572                           
  8573                           ;main.c: 1604: sendEscapedUartData( cmdReplyCode, &crc );
  8574  00382E  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8575  003830  6E25               	movwf	?_sendEscapedUartData,c
  8576  003832  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8577  003834  EC6D  F01E         	call	PL46	;call to abstracted procedure
  8578  003838  6425               	cpfsgt	?_sendEscapedUartData,c
  8579  00383A  6A26               	clrf	?_sendEscapedUartData+1,c
  8580  00383C  5029               	movf	sendVSCPDriverCommandReply@cmdReplyCode,w,c
  8581  00383E  EC41  F024         	call	_sendEscapedUartData
  8582  003842                     l829:
  8583  003842  A2AC               	btfss	4012,1,c	;volatile
  8584  003844  D7FE               	goto	l829
  8585                           
  8586                           ;main.c: 1608: sendEscapedUartData( cmdCode, &crc );
  8587  003846  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8588  003848  6E25               	movwf	?_sendEscapedUartData,c
  8589  00384A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8590  00384C  EC6D  F01E         	call	PL46	;call to abstracted procedure
  8591  003850  6425               	cpfsgt	?_sendEscapedUartData,c
  8592  003852  6A26               	clrf	?_sendEscapedUartData+1,c
  8593  003854  5028               	movf	sendVSCPDriverCommandReply@cmdCode,w,c
  8594  003856  EC41  F024         	call	_sendEscapedUartData
  8595                           
  8596                           ;main.c: 1611: sendEscapedUartData(crc, (0));
  8597  00385A  6A26               	clrf	?_sendEscapedUartData+1,c
  8598  00385C  6A25               	clrf	?_sendEscapedUartData,c
  8599  00385E  502A               	movf	sendVSCPDriverCommandReply@crc,w,c
  8600  003860  EC41  F024         	call	_sendEscapedUartData
  8601  003864                     l832:
  8602  003864  A2AC               	btfss	4012,1,c	;volatile
  8603  003866  D7FE               	goto	l832
  8604                           
  8605                           ;main.c: 1615: WriteUSART(0x10);
  8606  003868  0E10               	movlw	16
  8607  00386A  EC9F  F028         	call	_WriteUSART
  8608  00386E                     l835:
  8609  00386E  A2AC               	btfss	4012,1,c	;volatile
  8610  003870  D7FE               	goto	l835
  8611                           
  8612                           ;main.c: 1617: WriteUSART(0x03);
  8613  003872  0E03               	movlw	3
  8614  003874  EF9F  F028         	goto	_WriteUSART
  8615  003878                     __end_of_sendVSCPDriverCommandReply:
  8616                           	opt stack 0
  8617  003878                     PL24:
  8618                           	opt stack 24
  8619  003878  0E2A               	movlw	low sendVSCPDriverCommandReply@crc
  8620  00387A  6E20               	movwf	?_crc8,c
  8621  00387C  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8622  00387E  6E21               	movwf	?_crc8+1,c
  8623  003880  0E0F               	movlw	15
  8624  003882  6E21               	movwf	?_crc8+1,c
  8625  003884  0E5F               	movlw	__accesstop+-1
  8626  003886  0012               	return	
  8627  003888                     __end_ofPL24:
  8628                           	opt stack 0
  8629                           tblptru	equ	0xFF8
  8630                           tblptrh	equ	0xFF7
  8631                           tblptrl	equ	0xFF6
  8632                           tablat	equ	0xFF5
  8633                           prodh	equ	0xFF4
  8634                           prodl	equ	0xFF3
  8635                           intcon	equ	0xFF2
  8636                           indf0	equ	0xFEF
  8637                           postinc0	equ	0xFEE
  8638                           fsr0h	equ	0xFEA
  8639                           fsr0l	equ	0xFE9
  8640                           wreg	equ	0xFE8
  8641                           indf1	equ	0xFE7
  8642                           postinc1	equ	0xFE6
  8643                           postdec1	equ	0xFE5
  8644                           fsr1h	equ	0xFE2
  8645                           fsr1l	equ	0xFE1
  8646                           indf2	equ	0xFDF
  8647                           postinc2	equ	0xFDE
  8648                           postdec2	equ	0xFDD
  8649                           plusw2	equ	0xFDB
  8650                           fsr2h	equ	0xFDA
  8651                           fsr2l	equ	0xFD9
  8652                           status	equ	0xFD8
  8653                           
  8654 ;; *************** function _sendVSCPDriverNack *****************
  8655 ;; Defined at:
  8656 ;;		line 1527 in file "main.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;		None
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;  crc             1   39[COMRAM] unsigned char 
  8661 ;; Return value:  Size  Location     Type
  8662 ;;		None               void
  8663 ;; Registers used:
  8664 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : E/1
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8670 ;;      Params:         0       0       0       0       0       0       0
  8671 ;;      Locals:         1       0       0       0       0       0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0
  8673 ;;      Totals:         1       0       0       0       0       0       0
  8674 ;;Total ram usage:        1 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    5
  8677 ;; This function calls:
  8678 ;;		_WriteUSART
  8679 ;;		_sendEscapedUartData
  8680 ;;		_crc8
  8681 ;; This function is called by:
  8682 ;;		_doModeVscp
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           	psect	text9
  8687  003F52                     __ptext9:
  8688                           	opt stack 0
  8689  003F52                     _sendVSCPDriverNack:
  8690                           	opt stack 24
  8691                           
  8692                           ;main.c: 1528: uint8_t crc = 0;
  8693                           
  8694                           ;incstack = 0
  8695                           ;incstack = 0
  8696  003F52  6A28               	clrf	sendVSCPDriverNack@crc,c
  8697  003F54                     l781:
  8698  003F54  A2AC               	btfss	4012,1,c	;volatile
  8699  003F56  D7FE               	goto	l781
  8700                           
  8701                           ;main.c: 1532: WriteUSART(0x10);
  8702  003F58  0E10               	movlw	16
  8703  003F5A  EC9F  F028         	call	_WriteUSART
  8704  003F5E                     l784:
  8705  003F5E  A2AC               	btfss	4012,1,c	;volatile
  8706  003F60  D7FE               	goto	l784
  8707                           
  8708                           ;main.c: 1534: WriteUSART(0x02);
  8709  003F62  0E02               	movlw	2
  8710  003F64  EC9F  F028         	call	_WriteUSART
  8711  003F68                     l787:
  8712  003F68  A2AC               	btfss	4012,1,c	;volatile
  8713  003F6A  D7FE               	goto	l787
  8714                           
  8715                           ;main.c: 1538: WriteUSART(252);
  8716  003F6C  0EFC               	movlw	252
  8717  003F6E  EC9F  F028         	call	_WriteUSART
  8718                           
  8719                           ;main.c: 1539: crc8( &crc, 252 );
  8720  003F72  0E28               	movlw	low sendVSCPDriverNack@crc
  8721  003F74  6E20               	movwf	?_crc8,c
  8722  003F76  0E00               	movlw	high sendVSCPDriverNack@crc
  8723  003F78  6E21               	movwf	?_crc8+1,c
  8724  003F7A  0E0F               	movlw	15
  8725  003F7C  6E21               	movwf	?_crc8+1,c
  8726  003F7E  0E5F               	movlw	__accesstop+-1
  8727  003F80  6420               	cpfsgt	?_crc8,c
  8728  003F82  6A21               	clrf	?_crc8+1,c
  8729  003F84  0EFC               	movlw	252
  8730  003F86  6E22               	movwf	?_crc8+2,c
  8731  003F88  ECD0  F027         	call	_crc8	;wreg free
  8732  003F8C                     l790:
  8733  003F8C  A2AC               	btfss	4012,1,c	;volatile
  8734  003F8E  D7FE               	goto	l790
  8735                           
  8736                           ;main.c: 1543: WriteUSART( 0 );
  8737  003F90  0E00               	movlw	0
  8738  003F92  EC9F  F028         	call	_WriteUSART
  8739                           
  8740                           ;main.c: 1544: crc8( &crc, 0 );
  8741  003F96  0E28               	movlw	low sendVSCPDriverNack@crc
  8742  003F98  6E20               	movwf	?_crc8,c
  8743  003F9A  0E00               	movlw	high sendVSCPDriverNack@crc
  8744  003F9C  D832               	call	PL4	;call to abstracted procedure
  8745  003F9E  ECD0  F027         	call	_crc8	;wreg free
  8746                           
  8747                           ; BSR set to: 2
  8748                           ;main.c: 1547: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  8749  003FA2  0E28               	movlw	low sendVSCPDriverNack@crc
  8750  003FA4  6E25               	movwf	?_sendEscapedUartData,c
  8751  003FA6  0E00               	movlw	high sendVSCPDriverNack@crc
  8752  003FA8  EC6D  F01E         	call	PL46	;call to abstracted procedure
  8753  003FAC  6425               	cpfsgt	?_sendEscapedUartData,c
  8754  003FAE  6A26               	clrf	?_sendEscapedUartData+1,c
  8755  003FB0  0101               	movlb	1	; () banked
  8756  003FB2  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  8757  003FB4  EC41  F024         	call	_sendEscapedUartData
  8758  003FB8                     l793:
  8759  003FB8  A2AC               	btfss	4012,1,c	;volatile
  8760  003FBA  D7FE               	goto	l793
  8761                           
  8762                           ;main.c: 1551: WriteUSART( 0 );
  8763  003FBC  0E00               	movlw	0
  8764  003FBE  EC9F  F028         	call	_WriteUSART
  8765                           
  8766                           ;main.c: 1552: crc8( &crc, 0 );
  8767  003FC2  0E28               	movlw	low sendVSCPDriverNack@crc
  8768  003FC4  6E20               	movwf	?_crc8,c
  8769  003FC6  0E00               	movlw	high sendVSCPDriverNack@crc
  8770  003FC8  D81C               	call	PL4	;call to abstracted procedure
  8771  003FCA  ECD0  F027         	call	_crc8	;wreg free
  8772  003FCE                     l796:
  8773  003FCE  A2AC               	btfss	4012,1,c	;volatile
  8774  003FD0  D7FE               	goto	l796
  8775                           
  8776                           ;main.c: 1554: WriteUSART( 0 );
  8777  003FD2  0E00               	movlw	0
  8778  003FD4  EC9F  F028         	call	_WriteUSART
  8779                           
  8780                           ;main.c: 1555: crc8( &crc, 0 );
  8781  003FD8  0E28               	movlw	low sendVSCPDriverNack@crc
  8782  003FDA  6E20               	movwf	?_crc8,c
  8783  003FDC  0E00               	movlw	high sendVSCPDriverNack@crc
  8784  003FDE  D811               	call	PL4	;call to abstracted procedure
  8785  003FE0  ECD0  F027         	call	_crc8	;wreg free
  8786                           
  8787                           ; BSR set to: 2
  8788                           ;main.c: 1558: sendEscapedUartData( crc, (0) );
  8789  003FE4  6A26               	clrf	?_sendEscapedUartData+1,c
  8790  003FE6  6A25               	clrf	?_sendEscapedUartData,c
  8791  003FE8  5028               	movf	sendVSCPDriverNack@crc,w,c
  8792  003FEA  EC41  F024         	call	_sendEscapedUartData
  8793  003FEE                     l799:
  8794  003FEE  A2AC               	btfss	4012,1,c	;volatile
  8795  003FF0  D7FE               	goto	l799
  8796                           
  8797                           ;main.c: 1562: WriteUSART(0x10);
  8798  003FF2  0E10               	movlw	16
  8799  003FF4  EC9F  F028         	call	_WriteUSART
  8800  003FF8                     l802:
  8801  003FF8  A2AC               	btfss	4012,1,c	;volatile
  8802  003FFA  D7FE               	goto	l802
  8803                           
  8804                           ;main.c: 1564: WriteUSART(0x03);
  8805  003FFC  0E03               	movlw	3
  8806  003FFE  EF9F  F028         	goto	_WriteUSART
  8807  004002                     __end_of_sendVSCPDriverNack:
  8808                           	opt stack 0
  8809  004002                     PL4:
  8810                           	opt stack 24
  8811  004002  6E21               	movwf	?_crc8+1,c
  8812  004004  0E0F               	movlw	15
  8813  004006  6E21               	movwf	?_crc8+1,c
  8814  004008  0E5F               	movlw	__accesstop+-1
  8815  00400A  6420               	cpfsgt	?_crc8,c
  8816  00400C  6A21               	clrf	?_crc8+1,c
  8817  00400E  6A22               	clrf	?_crc8+2,c
  8818  004010  0C00               	retlw	0
  8819  004012                     __end_ofPL4:
  8820                           	opt stack 0
  8821                           tblptru	equ	0xFF8
  8822                           tblptrh	equ	0xFF7
  8823                           tblptrl	equ	0xFF6
  8824                           tablat	equ	0xFF5
  8825                           prodh	equ	0xFF4
  8826                           prodl	equ	0xFF3
  8827                           intcon	equ	0xFF2
  8828                           indf0	equ	0xFEF
  8829                           postinc0	equ	0xFEE
  8830                           fsr0h	equ	0xFEA
  8831                           fsr0l	equ	0xFE9
  8832                           wreg	equ	0xFE8
  8833                           indf1	equ	0xFE7
  8834                           postinc1	equ	0xFE6
  8835                           postdec1	equ	0xFE5
  8836                           fsr1h	equ	0xFE2
  8837                           fsr1l	equ	0xFE1
  8838                           indf2	equ	0xFDF
  8839                           postinc2	equ	0xFDE
  8840                           postdec2	equ	0xFDD
  8841                           plusw2	equ	0xFDB
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function _receiveVSCPModeCanalMsg *****************
  8847 ;; Defined at:
  8848 ;;		line 1899 in file "main.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;		None
  8851 ;; Auto vars:     Size  Location     Type
  8852 ;;  data            8   55[BANK0 ] unsigned char [8]
  8853 ;;  id              4   63[BANK0 ] unsigned long 
  8854 ;;  dlc             1   67[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;                  1    wreg      enum E15660
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : F/1
  8861 ;;		On exit  : E/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8864 ;;      Params:         0       0       0       0       0       0       0
  8865 ;;      Locals:         0      13       0       0       0       0       0
  8866 ;;      Temps:          0      20       0       0       0       0       0
  8867 ;;      Totals:         0      33       0       0       0       0       0
  8868 ;;Total ram usage:       33 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    5
  8871 ;; This function calls:
  8872 ;;		_memcpy
  8873 ;;		_sendCANFrame
  8874 ;; This function is called by:
  8875 ;;		_doModeVscp
  8876 ;; This function uses a non-reentrant model
  8877 ;;
  8878                           
  8879                           	psect	text10
  8880  003A54                     __ptext10:
  8881                           	opt stack 0
  8882  003A54                     _receiveVSCPModeCanalMsg:
  8883                           	opt stack 24
  8884                           
  8885                           ; BSR set to: 1
  8886                           ;main.c: 1900: uint32_t id;
  8887                           ;main.c: 1901: uint8_t dlc;
  8888                           ;main.c: 1902: uint8_t data[8];
  8889                           ;main.c: 1904: id = ((uint32_t)cmdbuf[5] << 26) |
  8890                           ;main.c: 1905: ((uint32_t)cmdbuf[5+1] << 16) |
  8891                           ;main.c: 1906: ((uint32_t)cmdbuf[5+2] << 8) |
  8892                           ;main.c: 1907: cmdbuf[5+3];
  8893                           
  8894                           ;incstack = 0
  8895                           ;incstack = 0
  8896  003A54  C127  F083         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  8897  003A58  0100               	movlb	0	; () banked
  8898  003A5A  6B84               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  8899  003A5C  6B85               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  8900  003A5E  6B86               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  8901  003A60  C085  F086         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  8902  003A64  C084  F085         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  8903  003A68  C083  F084         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  8904  003A6C  6B83               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  8905  003A6E  C126  F087         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  8906  003A72  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8907  003A74  6B89               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  8908  003A76  6B8A               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  8909  003A78  C088  F08A         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  8910  003A7C  C087  F089         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  8911  003A80  6B88               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  8912  003A82  6B87               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  8913  003A84  C125  F08B         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  8914  003A88  6B8C               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  8915  003A8A  6B8D               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  8916  003A8C  6B8E               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  8917  003A8E  0E1A               	movlw	26
  8918  003A90                     u14855:
  8919  003A90  90D8               	bcf	status,0,c
  8920  003A92  378B               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  8921  003A94  378C               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  8922  003A96  378D               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  8923  003A98  378E               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  8924  003A9A  2EE8               	decfsz	wreg,f,c
  8925  003A9C  D7F9               	goto	u14855
  8926  003A9E  5187               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  8927  003AA0  118B               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  8928  003AA2  6F8F               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  8929  003AA4  5188               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  8930  003AA6  118C               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  8931  003AA8  6F90               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  8932  003AAA  5189               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  8933  003AAC  118D               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  8934  003AAE  6F91               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  8935  003AB0  518A               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  8936  003AB2  118E               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  8937  003AB4  6F92               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  8938  003AB6  5183               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  8939  003AB8  118F               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  8940  003ABA  6F93               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  8941  003ABC  5184               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  8942  003ABE  1190               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  8943  003AC0  6F94               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  8944  003AC2  5185               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  8945  003AC4  1191               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  8946  003AC6  6F95               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  8947  003AC8  5186               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  8948  003ACA  1192               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  8949  003ACC  6F96               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  8950  003ACE  0101               	movlb	1	; () banked
  8951  003AD0  5128               	movf	(_cmdbuf+8)& (0+255),w,b
  8952  003AD2  0100               	movlb	0	; () banked
  8953  003AD4  1193               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  8954  003AD6  6F9F               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  8955  003AD8  5194               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  8956  003ADA  6FA0               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  8957  003ADC  5195               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  8958  003ADE  6FA1               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  8959  003AE0  5196               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  8960  003AE2  6FA2               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  8961                           
  8962                           ;main.c: 1908: dlc = cmdbuf[4]-4;
  8963  003AE4  0101               	movlb	1	; () banked
  8964  003AE6  5124               	movf	(_cmdbuf+4)& (0+255),w,b
  8965  003AE8  0FFC               	addlw	252
  8966  003AEA  0100               	movlb	0	; () banked
  8967  003AEC  6FA3               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;main.c: 1909: memcpy( data, cmdbuf + 5 + 4, dlc );
  8971  003AEE  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  8972  003AF0  6E1A               	movwf	?_memcpy+1,c
  8973  003AF2  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  8974  003AF4  6E19               	movwf	?_memcpy,c
  8975  003AF6  0E29               	movlw	low (_cmdbuf+9)
  8976  003AF8  6F83               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  8977  003AFA  0E01               	movlw	high (_cmdbuf+9)
  8978  003AFC  6F84               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  8979  003AFE  C083  F01B         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  8980  003B02  C084  F01C         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  8981  003B06  C0A3  F01D         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  8982  003B0A  6A1E               	clrf	?_memcpy+5,c
  8983  003B0C  ECC0  F026         	call	_memcpy	;wreg free
  8984                           
  8985                           ;main.c: 1911: return sendCANFrame( id, dlc, data);
  8986  003B10  C09F  F07C         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  8987  003B14  C0A0  F07D         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  8988  003B18  C0A1  F07E         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  8989  003B1C  C0A2  F07F         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  8990  003B20  C0A3  F080         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  8991  003B24  0100               	movlb	0	; () banked
  8992  003B26  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  8993  003B28  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
  8994  003B2A  0E97               	movlw	low receiveVSCPModeCanalMsg@data
  8995  003B2C  6F81               	movwf	(?_sendCANFrame+5)& (0+255),b
  8996  003B2E  EF7B  F027         	goto	_sendCANFrame	;wreg free
  8997  003B32                     __end_of_receiveVSCPModeCanalMsg:
  8998                           	opt stack 0
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           indf0	equ	0xFEF
  9007                           postinc0	equ	0xFEE
  9008                           fsr0h	equ	0xFEA
  9009                           fsr0l	equ	0xFE9
  9010                           wreg	equ	0xFE8
  9011                           indf1	equ	0xFE7
  9012                           postinc1	equ	0xFE6
  9013                           postdec1	equ	0xFE5
  9014                           fsr1h	equ	0xFE2
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           plusw2	equ	0xFDB
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function _memcpy *****************
  9025 ;; Defined at:
  9026 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  d1              2   24[COMRAM] PTR void 
  9029 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9030 ;;  s1              2   26[COMRAM] PTR const void 
  9031 ;;		 -> vscpData(8), cmdbuf(80), 
  9032 ;;  n               2   28[COMRAM] unsigned int 
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  s               2   32[COMRAM] PTR const unsigned char 
  9035 ;;		 -> vscpData(8), cmdbuf(80), 
  9036 ;;  d               2   30[COMRAM] PTR unsigned char 
  9037 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9038 ;; Return value:  Size  Location     Type
  9039 ;;                  2   24[COMRAM] PTR void 
  9040 ;; Registers used:
  9041 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9042 ;; Tracked objects:
  9043 ;;		On entry : F/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9047 ;;      Params:         6       0       0       0       0       0       0
  9048 ;;      Locals:         4       0       0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0
  9050 ;;      Totals:        10       0       0       0       0       0       0
  9051 ;;Total ram usage:       10 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; Hardware stack levels required when called:    2
  9054 ;; This function calls:
  9055 ;;		Nothing
  9056 ;; This function is called by:
  9057 ;;		_doModeSLCAN
  9058 ;;		_receiveVSCPModeCanalMsg
  9059 ;; This function uses a non-reentrant model
  9060 ;;
  9061                           
  9062                           	psect	text11
  9063  004D80                     __ptext11:
  9064                           	opt stack 0
  9065  004D80                     _memcpy:
  9066                           	opt stack 27
  9067                           
  9068                           ; BSR set to: 0
  9069                           
  9070                           ;incstack = 0
  9071                           ;incstack = 0
  9072  004D80  C01B  F021         	movff	memcpy@s1,memcpy@s
  9073  004D84  C01C  F022         	movff	memcpy@s1+1,memcpy@s+1
  9074  004D88  C019  F01F         	movff	memcpy@d1,memcpy@d
  9075  004D8C  C01A  F020         	movff	memcpy@d1+1,memcpy@d+1
  9076  004D90  D00E               	goto	l11819
  9077  004D92                     l11813:
  9078  004D92  C021  FFD9         	movff	memcpy@s,fsr2l
  9079  004D96  C022  FFDA         	movff	memcpy@s+1,fsr2h
  9080  004D9A  C01F  FFE1         	movff	memcpy@d,fsr1l
  9081  004D9E  C020  FFE2         	movff	memcpy@d+1,fsr1h
  9082  004DA2  CFDF FFE7          	movff	indf2,indf1
  9083  004DA6  4A21               	infsnz	memcpy@s,f,c
  9084  004DA8  2A22               	incf	memcpy@s+1,f,c
  9085  004DAA  4A1F               	infsnz	memcpy@d,f,c
  9086  004DAC  2A20               	incf	memcpy@d+1,f,c
  9087  004DAE                     l11819:
  9088  004DAE  061D               	decf	memcpy@n,f,c
  9089  004DB0  A0D8               	btfss	status,0,c
  9090  004DB2  061E               	decf	memcpy@n+1,f,c
  9091  004DB4  281D               	incf	memcpy@n& (0+255),w,c
  9092  004DB6  B4D8               	btfsc	status,2,c
  9093  004DB8  281E               	incf	(memcpy@n+1)& (0+255),w,c
  9094  004DBA  B4D8               	btfsc	status,2,c
  9095  004DBC  0012               	return	
  9096  004DBE  D7E9               	goto	l11813
  9097  004DC0                     __end_of_memcpy:
  9098                           	opt stack 0
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon	equ	0xFF2
  9106                           indf0	equ	0xFEF
  9107                           postinc0	equ	0xFEE
  9108                           fsr0h	equ	0xFEA
  9109                           fsr0l	equ	0xFE9
  9110                           wreg	equ	0xFE8
  9111                           indf1	equ	0xFE7
  9112                           postinc1	equ	0xFE6
  9113                           postdec1	equ	0xFE5
  9114                           fsr1h	equ	0xFE2
  9115                           fsr1l	equ	0xFE1
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           plusw2	equ	0xFDB
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function _sendVSCPDriverAck *****************
  9125 ;; Defined at:
  9126 ;;		line 1482 in file "main.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;		None
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;  crc             1   39[COMRAM] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;		None               void
  9133 ;; Registers used:
  9134 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : E/1
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9140 ;;      Params:         0       0       0       0       0       0       0
  9141 ;;      Locals:         1       0       0       0       0       0       0
  9142 ;;      Temps:          0       0       0       0       0       0       0
  9143 ;;      Totals:         1       0       0       0       0       0       0
  9144 ;;Total ram usage:        1 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    5
  9147 ;; This function calls:
  9148 ;;		_WriteUSART
  9149 ;;		_sendEscapedUartData
  9150 ;;		_crc8
  9151 ;; This function is called by:
  9152 ;;		_doModeVscp
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text12
  9157  0040CE                     __ptext12:
  9158                           	opt stack 0
  9159  0040CE                     _sendVSCPDriverAck:
  9160                           	opt stack 24
  9161                           
  9162                           ;main.c: 1483: uint8_t crc = 0;
  9163                           
  9164                           ;incstack = 0
  9165                           ;incstack = 0
  9166  0040CE  6A28               	clrf	sendVSCPDriverAck@crc,c
  9167  0040D0                     l754:
  9168  0040D0  A2AC               	btfss	4012,1,c	;volatile
  9169  0040D2  D7FE               	goto	l754
  9170                           
  9171                           ;main.c: 1487: WriteUSART(0x10);
  9172  0040D4  0E10               	movlw	16
  9173  0040D6  EC9F  F028         	call	_WriteUSART
  9174  0040DA                     l757:
  9175  0040DA  A2AC               	btfss	4012,1,c	;volatile
  9176  0040DC  D7FE               	goto	l757
  9177                           
  9178                           ;main.c: 1489: WriteUSART(0x02);
  9179  0040DE  0E02               	movlw	2
  9180  0040E0  EC9F  F028         	call	_WriteUSART
  9181  0040E4                     l760:
  9182  0040E4  A2AC               	btfss	4012,1,c	;volatile
  9183  0040E6  D7FE               	goto	l760
  9184                           
  9185                           ;main.c: 1493: WriteUSART(251);
  9186  0040E8  0EFB               	movlw	251
  9187  0040EA  EC9F  F028         	call	_WriteUSART
  9188                           
  9189                           ;main.c: 1494: crc8( &crc, 251 );
  9190  0040EE  0E28               	movlw	low sendVSCPDriverAck@crc
  9191  0040F0  6E20               	movwf	?_crc8,c
  9192  0040F2  0E00               	movlw	high sendVSCPDriverAck@crc
  9193  0040F4  6E21               	movwf	?_crc8+1,c
  9194  0040F6  0E0F               	movlw	15
  9195  0040F8  6E21               	movwf	?_crc8+1,c
  9196  0040FA  0E5F               	movlw	__accesstop+-1
  9197  0040FC  6420               	cpfsgt	?_crc8,c
  9198  0040FE  6A21               	clrf	?_crc8+1,c
  9199  004100  0EFB               	movlw	251
  9200  004102  6E22               	movwf	?_crc8+2,c
  9201  004104  ECD0  F027         	call	_crc8	;wreg free
  9202  004108                     l763:
  9203  004108  A2AC               	btfss	4012,1,c	;volatile
  9204  00410A  D7FE               	goto	l763
  9205                           
  9206                           ;main.c: 1498: WriteUSART( 0 );
  9207  00410C  0E00               	movlw	0
  9208  00410E  EC9F  F028         	call	_WriteUSART
  9209                           
  9210                           ;main.c: 1499: crc8( &crc, 0 );
  9211  004112  0E28               	movlw	low sendVSCPDriverAck@crc
  9212  004114  6E20               	movwf	?_crc8,c
  9213  004116  0E00               	movlw	high sendVSCPDriverAck@crc
  9214  004118  EC01  F020         	call	PL4	;call to abstracted procedure
  9215  00411C  ECD0  F027         	call	_crc8	;wreg free
  9216                           
  9217                           ; BSR set to: 2
  9218                           ;main.c: 1502: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  9219  004120  0E28               	movlw	low sendVSCPDriverAck@crc
  9220  004122  6E25               	movwf	?_sendEscapedUartData,c
  9221  004124  0E00               	movlw	high sendVSCPDriverAck@crc
  9222  004126  EC6D  F01E         	call	PL46	;call to abstracted procedure
  9223  00412A  6425               	cpfsgt	?_sendEscapedUartData,c
  9224  00412C  6A26               	clrf	?_sendEscapedUartData+1,c
  9225  00412E  0101               	movlb	1	; () banked
  9226  004130  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  9227  004132  EC41  F024         	call	_sendEscapedUartData
  9228  004136                     l766:
  9229  004136  A2AC               	btfss	4012,1,c	;volatile
  9230  004138  D7FE               	goto	l766
  9231                           
  9232                           ;main.c: 1506: WriteUSART( 0 );
  9233  00413A  0E00               	movlw	0
  9234  00413C  EC9F  F028         	call	_WriteUSART
  9235                           
  9236                           ;main.c: 1507: crc8( &crc, 0 );
  9237  004140  0E28               	movlw	low sendVSCPDriverAck@crc
  9238  004142  6E20               	movwf	?_crc8,c
  9239  004144  0E00               	movlw	high sendVSCPDriverAck@crc
  9240  004146  EC01  F020         	call	PL4	;call to abstracted procedure
  9241  00414A  ECD0  F027         	call	_crc8	;wreg free
  9242  00414E                     l769:
  9243  00414E  A2AC               	btfss	4012,1,c	;volatile
  9244  004150  D7FE               	goto	l769
  9245                           
  9246                           ;main.c: 1509: WriteUSART( 0 );
  9247  004152  0E00               	movlw	0
  9248  004154  EC9F  F028         	call	_WriteUSART
  9249                           
  9250                           ;main.c: 1510: crc8( &crc, 0 );
  9251  004158  0E28               	movlw	low sendVSCPDriverAck@crc
  9252  00415A  6E20               	movwf	?_crc8,c
  9253  00415C  0E00               	movlw	high sendVSCPDriverAck@crc
  9254  00415E  EC01  F020         	call	PL4	;call to abstracted procedure
  9255  004162  ECD0  F027         	call	_crc8	;wreg free
  9256                           
  9257                           ; BSR set to: 2
  9258                           ;main.c: 1513: sendEscapedUartData( crc, (0) );
  9259  004166  6A26               	clrf	?_sendEscapedUartData+1,c
  9260  004168  6A25               	clrf	?_sendEscapedUartData,c
  9261  00416A  5028               	movf	sendVSCPDriverAck@crc,w,c
  9262  00416C  EC41  F024         	call	_sendEscapedUartData
  9263  004170                     l772:
  9264  004170  A2AC               	btfss	4012,1,c	;volatile
  9265  004172  D7FE               	goto	l772
  9266                           
  9267                           ;main.c: 1517: WriteUSART(0x10);
  9268  004174  0E10               	movlw	16
  9269  004176  EC9F  F028         	call	_WriteUSART
  9270  00417A                     l775:
  9271  00417A  A2AC               	btfss	4012,1,c	;volatile
  9272  00417C  D7FE               	goto	l775
  9273                           
  9274                           ;main.c: 1519: WriteUSART(0x03);
  9275  00417E  0E03               	movlw	3
  9276  004180  EF9F  F028         	goto	_WriteUSART
  9277  004184                     __end_of_sendVSCPDriverAck:
  9278                           	opt stack 0
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           indf0	equ	0xFEF
  9287                           postinc0	equ	0xFEE
  9288                           fsr0h	equ	0xFEA
  9289                           fsr0l	equ	0xFE9
  9290                           wreg	equ	0xFE8
  9291                           indf1	equ	0xFE7
  9292                           postinc1	equ	0xFE6
  9293                           postdec1	equ	0xFE5
  9294                           fsr1h	equ	0xFE2
  9295                           fsr1l	equ	0xFE1
  9296                           indf2	equ	0xFDF
  9297                           postinc2	equ	0xFDE
  9298                           postdec2	equ	0xFDD
  9299                           plusw2	equ	0xFDB
  9300                           fsr2h	equ	0xFDA
  9301                           fsr2l	equ	0xFD9
  9302                           status	equ	0xFD8
  9303                           
  9304 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9305 ;; Defined at:
  9306 ;;		line 1434 in file "main.c"
  9307 ;; Parameters:    Size  Location     Type
  9308 ;;  errorcode       1    wreg     unsigned char 
  9309 ;; Auto vars:     Size  Location     Type
  9310 ;;  errorcode       1   39[COMRAM] unsigned char 
  9311 ;;  crc             1   40[COMRAM] unsigned char 
  9312 ;; Return value:  Size  Location     Type
  9313 ;;		None               void
  9314 ;; Registers used:
  9315 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9316 ;; Tracked objects:
  9317 ;;		On entry : C/0
  9318 ;;		On exit  : 0/0
  9319 ;;		Unchanged: 0/0
  9320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9321 ;;      Params:         0       0       0       0       0       0       0
  9322 ;;      Locals:         2       0       0       0       0       0       0
  9323 ;;      Temps:          0       0       0       0       0       0       0
  9324 ;;      Totals:         2       0       0       0       0       0       0
  9325 ;;Total ram usage:        2 bytes
  9326 ;; Hardware stack levels used:    1
  9327 ;; Hardware stack levels required when called:    5
  9328 ;; This function calls:
  9329 ;;		_WriteUSART
  9330 ;;		_sendEscapedUartData
  9331 ;;		_crc8
  9332 ;; This function is called by:
  9333 ;;		_doModeVscp
  9334 ;; This function uses a non-reentrant model
  9335 ;;
  9336                           
  9337                           	psect	text13
  9338  003C0C                     __ptext13:
  9339                           	opt stack 0
  9340  003C0C                     _sendVSCPDriverErrorFrame:
  9341                           	opt stack 24
  9342                           
  9343                           ;incstack = 0
  9344                           ;incstack = 0
  9345                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9346  003C0C  CFE8 F028          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9347                           
  9348                           ;main.c: 1435: uint8_t crc = 0;
  9349  003C10  6A29               	clrf	sendVSCPDriverErrorFrame@crc,c
  9350  003C12                     l727:
  9351  003C12  A2AC               	btfss	4012,1,c	;volatile
  9352  003C14  D7FE               	goto	l727
  9353                           
  9354                           ;main.c: 1439: WriteUSART(0x10);
  9355  003C16  0E10               	movlw	16
  9356  003C18  EC9F  F028         	call	_WriteUSART
  9357  003C1C                     l730:
  9358  003C1C  A2AC               	btfss	4012,1,c	;volatile
  9359  003C1E  D7FE               	goto	l730
  9360                           
  9361                           ;main.c: 1441: WriteUSART(0x02);
  9362  003C20  0E02               	movlw	2
  9363  003C22  EC9F  F028         	call	_WriteUSART
  9364  003C26                     l733:
  9365  003C26  A2AC               	btfss	4012,1,c	;volatile
  9366  003C28  D7FE               	goto	l733
  9367                           
  9368                           ;main.c: 1445: WriteUSART(253);
  9369  003C2A  0EFD               	movlw	253
  9370  003C2C  EC9F  F028         	call	_WriteUSART
  9371                           
  9372                           ;main.c: 1446: crc8( &crc, 253 );
  9373  003C30  D84C               	call	PL26	;call to abstracted procedure
  9374  003C32  6420               	cpfsgt	?_crc8,c
  9375  003C34  6A21               	clrf	?_crc8+1,c
  9376  003C36  0EFD               	movlw	253
  9377  003C38  6E22               	movwf	?_crc8+2,c
  9378  003C3A  ECD0  F027         	call	_crc8	;wreg free
  9379  003C3E                     l736:
  9380  003C3E  A2AC               	btfss	4012,1,c	;volatile
  9381  003C40  D7FE               	goto	l736
  9382                           
  9383                           ;main.c: 1450: WriteUSART( 0);
  9384  003C42  0E00               	movlw	0
  9385  003C44  EC9F  F028         	call	_WriteUSART
  9386                           
  9387                           ;main.c: 1451: crc8( &crc, 0 );
  9388  003C48  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9389  003C4A  6E20               	movwf	?_crc8,c
  9390  003C4C  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9391  003C4E  EC01  F020         	call	PL4	;call to abstracted procedure
  9392  003C52  ECD0  F027         	call	_crc8	;wreg free
  9393                           
  9394                           ; BSR set to: 2
  9395                           ;main.c: 1454: sendEscapedUartData(cmdbuf[ 2 ], &crc );
  9396  003C56  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9397  003C58  6E25               	movwf	?_sendEscapedUartData,c
  9398  003C5A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9399  003C5C  D83E               	call	PL46	;call to abstracted procedure
  9400  003C5E  6425               	cpfsgt	?_sendEscapedUartData,c
  9401  003C60  6A26               	clrf	?_sendEscapedUartData+1,c
  9402  003C62  0101               	movlb	1	; () banked
  9403  003C64  5122               	movf	(_cmdbuf+2)& (0+255),w,b
  9404  003C66  EC41  F024         	call	_sendEscapedUartData
  9405  003C6A                     l739:
  9406  003C6A  A2AC               	btfss	4012,1,c	;volatile
  9407  003C6C  D7FE               	goto	l739
  9408                           
  9409                           ;main.c: 1458: WriteUSART( 0 );
  9410  003C6E  0E00               	movlw	0
  9411  003C70  EC9F  F028         	call	_WriteUSART
  9412                           
  9413                           ;main.c: 1459: crc8( &crc, 0 );
  9414  003C74  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9415  003C76  6E20               	movwf	?_crc8,c
  9416  003C78  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9417  003C7A  EC01  F020         	call	PL4	;call to abstracted procedure
  9418  003C7E  ECD0  F027         	call	_crc8	;wreg free
  9419  003C82                     l742:
  9420  003C82  A2AC               	btfss	4012,1,c	;volatile
  9421  003C84  D7FE               	goto	l742
  9422                           
  9423                           ;main.c: 1461: WriteUSART(1);
  9424  003C86  0E01               	movlw	1
  9425  003C88  EC9F  F028         	call	_WriteUSART
  9426                           
  9427                           ;main.c: 1462: crc8( &crc, 1 );
  9428  003C8C  D81E               	call	PL26	;call to abstracted procedure
  9429  003C8E  6420               	cpfsgt	?_crc8,c
  9430  003C90  6A21               	clrf	?_crc8+1,c
  9431  003C92  0E01               	movlw	1
  9432  003C94  6E22               	movwf	?_crc8+2,c
  9433  003C96  ECD0  F027         	call	_crc8	;wreg free
  9434                           
  9435                           ; BSR set to: 2
  9436                           ;main.c: 1465: sendEscapedUartData( errorcode, &crc );
  9437  003C9A  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9438  003C9C  6E25               	movwf	?_sendEscapedUartData,c
  9439  003C9E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9440  003CA0  D81C               	call	PL46	;call to abstracted procedure
  9441  003CA2  6425               	cpfsgt	?_sendEscapedUartData,c
  9442  003CA4  6A26               	clrf	?_sendEscapedUartData+1,c
  9443  003CA6  5028               	movf	sendVSCPDriverErrorFrame@errorcode,w,c
  9444  003CA8  EC41  F024         	call	_sendEscapedUartData
  9445                           
  9446                           ;main.c: 1468: sendEscapedUartData( crc, (0) );
  9447  003CAC  6A26               	clrf	?_sendEscapedUartData+1,c
  9448  003CAE  6A25               	clrf	?_sendEscapedUartData,c
  9449  003CB0  5029               	movf	sendVSCPDriverErrorFrame@crc,w,c
  9450  003CB2  EC41  F024         	call	_sendEscapedUartData
  9451  003CB6                     l745:
  9452  003CB6  A2AC               	btfss	4012,1,c	;volatile
  9453  003CB8  D7FE               	goto	l745
  9454                           
  9455                           ;main.c: 1472: WriteUSART(0x10);
  9456  003CBA  0E10               	movlw	16
  9457  003CBC  EC9F  F028         	call	_WriteUSART
  9458  003CC0                     l748:
  9459  003CC0  A2AC               	btfss	4012,1,c	;volatile
  9460  003CC2  D7FE               	goto	l748
  9461                           
  9462                           ;main.c: 1474: WriteUSART(0x03);
  9463  003CC4  0E03               	movlw	3
  9464  003CC6  EF9F  F028         	goto	_WriteUSART
  9465  003CCA                     __end_of_sendVSCPDriverErrorFrame:
  9466                           	opt stack 0
  9467  003CCA                     PL26:
  9468                           	opt stack 24
  9469  003CCA  0E29               	movlw	low sendVSCPDriverErrorFrame@crc
  9470  003CCC  6E20               	movwf	?_crc8,c
  9471  003CCE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9472  003CD0  6E21               	movwf	?_crc8+1,c
  9473  003CD2  0E0F               	movlw	15
  9474  003CD4  6E21               	movwf	?_crc8+1,c
  9475  003CD6  0E5F               	movlw	__accesstop+-1
  9476  003CD8  0012               	return	
  9477  003CDA                     __end_ofPL26:
  9478                           	opt stack 0
  9479  003CDA                     PL46:
  9480                           	opt stack 24
  9481  003CDA  6E26               	movwf	?_sendEscapedUartData+1,c
  9482  003CDC  0E0F               	movlw	15
  9483  003CDE  6E26               	movwf	?_sendEscapedUartData+1,c
  9484  003CE0  0E5F               	movlw	__accesstop+-1
  9485  003CE2  0012               	return	
  9486  003CE4                     __end_ofPL46:
  9487                           	opt stack 0
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           indf0	equ	0xFEF
  9496                           postinc0	equ	0xFEE
  9497                           fsr0h	equ	0xFEA
  9498                           fsr0l	equ	0xFE9
  9499                           wreg	equ	0xFE8
  9500                           indf1	equ	0xFE7
  9501                           postinc1	equ	0xFE6
  9502                           postdec1	equ	0xFE5
  9503                           fsr1h	equ	0xFE2
  9504                           fsr1l	equ	0xFE1
  9505                           indf2	equ	0xFDF
  9506                           postinc2	equ	0xFDE
  9507                           postdec2	equ	0xFDD
  9508                           plusw2	equ	0xFDB
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function _calcCRC *****************
  9514 ;; Defined at:
  9515 ;;		line 2121 in file "main.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  p               2   36[COMRAM] PTR unsigned char 
  9518 ;;		 -> cmdbuf(80), 
  9519 ;;  len             1   38[COMRAM] unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  crc             1   40[COMRAM] unsigned char 
  9522 ;;  j               1   39[COMRAM] unsigned char 
  9523 ;; Return value:  Size  Location     Type
  9524 ;;                  1    wreg      unsigned char 
  9525 ;; Registers used:
  9526 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9527 ;; Tracked objects:
  9528 ;;		On entry : F/1
  9529 ;;		On exit  : C/0
  9530 ;;		Unchanged: 0/0
  9531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9532 ;;      Params:         3       0       0       0       0       0       0
  9533 ;;      Locals:         2       0       0       0       0       0       0
  9534 ;;      Temps:          0       0       0       0       0       0       0
  9535 ;;      Totals:         5       0       0       0       0       0       0
  9536 ;;Total ram usage:        5 bytes
  9537 ;; Hardware stack levels used:    1
  9538 ;; Hardware stack levels required when called:    4
  9539 ;; This function calls:
  9540 ;;		_crc8
  9541 ;; This function is called by:
  9542 ;;		_doModeVscp
  9543 ;; This function uses a non-reentrant model
  9544 ;;
  9545                           
  9546                           	psect	text14
  9547  004F30                     __ptext14:
  9548                           	opt stack 0
  9549  004F30                     _calcCRC:
  9550                           	opt stack 25
  9551                           
  9552                           ; BSR set to: 1
  9553                           ;main.c: 2122: uint8_t j;
  9554                           ;main.c: 2123: uint8_t crc = 0;
  9555                           
  9556                           ;incstack = 0
  9557                           ;incstack = 0
  9558  004F30  6A29               	clrf	calcCRC@crc,c
  9559                           
  9560                           ;main.c: 2125: for ( j = 0 ; j < len ; j++ ) {
  9561  004F32  6A28               	clrf	calcCRC@j,c
  9562  004F34  D014               	goto	l11579
  9563  004F36                     l11575:
  9564                           
  9565                           ;main.c: 2126: crc8( &crc, p[j] );
  9566  004F36  0E29               	movlw	low calcCRC@crc
  9567  004F38  6E20               	movwf	?_crc8,c
  9568  004F3A  0E00               	movlw	high calcCRC@crc
  9569  004F3C  6E21               	movwf	?_crc8+1,c
  9570  004F3E  0E0F               	movlw	15
  9571  004F40  6E21               	movwf	?_crc8+1,c
  9572  004F42  0E5F               	movlw	__accesstop+-1
  9573  004F44  6420               	cpfsgt	?_crc8,c
  9574  004F46  6A21               	clrf	?_crc8+1,c
  9575  004F48  5028               	movf	calcCRC@j,w,c
  9576  004F4A  2425               	addwf	calcCRC@p,w,c
  9577  004F4C  6ED9               	movwf	fsr2l,c
  9578  004F4E  0E00               	movlw	0
  9579  004F50  2026               	addwfc	calcCRC@p+1,w,c
  9580  004F52  6EDA               	movwf	fsr2h,c
  9581  004F54  50DF               	movf	indf2,w,c
  9582  004F56  6E22               	movwf	?_crc8+2,c
  9583  004F58  ECD0  F027         	call	_crc8	;wreg free
  9584                           
  9585                           ; BSR set to: 2
  9586  004F5C  2A28               	incf	calcCRC@j,f,c
  9587  004F5E                     l11579:
  9588  004F5E  5027               	movf	calcCRC@len,w,c
  9589  004F60  5C28               	subwf	calcCRC@j,w,c
  9590  004F62  E3E9               	bnc	l11575
  9591                           
  9592                           ;main.c: 2127: }
  9593                           ;main.c: 2129: return crc;
  9594  004F64  5029               	movf	calcCRC@crc,w,c
  9595  004F66  0012               	return	
  9596  004F68                     __end_of_calcCRC:
  9597                           	opt stack 0
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           indf0	equ	0xFEF
  9606                           postinc0	equ	0xFEE
  9607                           fsr0h	equ	0xFEA
  9608                           fsr0l	equ	0xFE9
  9609                           wreg	equ	0xFE8
  9610                           indf1	equ	0xFE7
  9611                           postinc1	equ	0xFE6
  9612                           postdec1	equ	0xFE5
  9613                           fsr1h	equ	0xFE2
  9614                           fsr1l	equ	0xFE1
  9615                           indf2	equ	0xFDF
  9616                           postinc2	equ	0xFDE
  9617                           postdec2	equ	0xFDD
  9618                           plusw2	equ	0xFDB
  9619                           fsr2h	equ	0xFDA
  9620                           fsr2l	equ	0xFD9
  9621                           status	equ	0xFD8
  9622                           
  9623 ;; *************** function _receivePrintEventCANAL *****************
  9624 ;; Defined at:
  9625 ;;		line 1680 in file "main.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;  crc             1   14[BANK0 ] unsigned char 
  9630 ;;  data            8    0[BANK0 ] unsigned char [8]
  9631 ;;  id              4   10[BANK0 ] unsigned long 
  9632 ;;  dlc             1    9[BANK0 ] unsigned char 
  9633 ;;  i               1    8[BANK0 ] unsigned char 
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      enum E15660
  9636 ;; Registers used:
  9637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  9638 ;; Tracked objects:
  9639 ;;		On entry : F/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9643 ;;      Params:         0       0       0       0       0       0       0
  9644 ;;      Locals:         0      15       0       0       0       0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0
  9646 ;;      Totals:         0      15       0       0       0       0       0
  9647 ;;Total ram usage:       15 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:    5
  9650 ;; This function calls:
  9651 ;;		_WriteUSART
  9652 ;;		_sendEscapedUartData
  9653 ;;		_crc8
  9654 ;;		_getCANFrame
  9655 ;; This function is called by:
  9656 ;;		_doModeVscp
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text15
  9661  002FC8                     __ptext15:
  9662                           	opt stack 0
  9663  002FC8                     _receivePrintEventCANAL:
  9664                           	opt stack 24
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;main.c: 1681: uint8_t i;
  9668                           ;main.c: 1682: uint32_t id;
  9669                           ;main.c: 1683: uint8_t dlc;
  9670                           ;main.c: 1684: uint8_t data[8];
  9671                           ;main.c: 1686: if ( getCANFrame( &id, &dlc, &data ) ) {
  9672                           
  9673                           ;incstack = 0
  9674                           ;incstack = 0
  9675  002FC8  0E69               	movlw	low receivePrintEventCANAL@dlc
  9676  002FCA  6E2C               	movwf	?_getCANFrame,c
  9677  002FCC  0E00               	movlw	high receivePrintEventCANAL@data
  9678  002FCE  6E2E               	movwf	?_getCANFrame+2,c
  9679  002FD0  0E60               	movlw	low receivePrintEventCANAL@data
  9680  002FD2  6E2D               	movwf	?_getCANFrame+1,c
  9681  002FD4  0E6A               	movlw	receivePrintEventCANAL@id& (0+255)
  9682  002FD6  EC1B  F028         	call	_getCANFrame
  9683  002FDA  0900               	iorlw	0
  9684  002FDC  E101 D090          	bz	l897
  9685                           
  9686                           ;main.c: 1688: uint8_t crc = 0;
  9687  002FE0  0100               	movlb	0	; () banked
  9688  002FE2  6B6E               	clrf	receivePrintEventCANAL@crc& (0+255),b
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;main.c: 1691: cntRxFrames++;
  9692  002FE4  0101               	movlb	1	; () banked
  9693  002FE6  2B0C               	incf	_cntRxFrames& (0+255),f,b
  9694  002FE8  0E00               	movlw	0
  9695  002FEA  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  9696  002FEC  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  9697  002FEE  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  9698                           
  9699                           ;main.c: 1692: cntRxBytes += dlc;
  9700  002FF0  0100               	movlb	0	; () banked
  9701  002FF2  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9702  002FF4  0101               	movlb	1	; () banked
  9703  002FF6  2708               	addwf	_cntRxBytes& (0+255),f,b
  9704  002FF8  0E00               	movlw	0
  9705  002FFA  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  9706  002FFC  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  9707  002FFE  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  9708  003000                     l876:
  9709  003000  A2AC               	btfss	4012,1,c	;volatile
  9710  003002  D7FE               	goto	l876
  9711                           
  9712                           ;main.c: 1696: WriteUSART(0x10);
  9713  003004  0E10               	movlw	16
  9714  003006  EC9F  F028         	call	_WriteUSART
  9715  00300A                     l879:
  9716  00300A  A2AC               	btfss	4012,1,c	;volatile
  9717  00300C  D7FE               	goto	l879
  9718                           
  9719                           ;main.c: 1698: WriteUSART(0x02);
  9720  00300E  0E02               	movlw	2
  9721  003010  EC9F  F028         	call	_WriteUSART
  9722  003014                     l882:
  9723  003014  A2AC               	btfss	4012,1,c	;volatile
  9724  003016  D7FE               	goto	l882
  9725                           
  9726                           ;main.c: 1702: WriteUSART(2);
  9727  003018  0E02               	movlw	2
  9728  00301A  EC9F  F028         	call	_WriteUSART
  9729                           
  9730                           ;main.c: 1703: crc8( &crc, 2 );
  9731  00301E  0100               	movlb	0	; () banked
  9732  003020  0E00               	movlw	high receivePrintEventCANAL@crc
  9733  003022  6E21               	movwf	?_crc8+1,c
  9734  003024  0E6E               	movlw	low receivePrintEventCANAL@crc
  9735  003026  6E20               	movwf	?_crc8,c
  9736  003028  0E02               	movlw	2
  9737  00302A  6E22               	movwf	?_crc8+2,c
  9738  00302C  ECD0  F027         	call	_crc8	;wreg free
  9739  003030                     l885:
  9740  003030  A2AC               	btfss	4012,1,c	;volatile
  9741  003032  D7FE               	goto	l885
  9742                           
  9743                           ;main.c: 1707: WriteUSART( 0 );
  9744  003034  0E00               	movlw	0
  9745  003036  EC9F  F028         	call	_WriteUSART
  9746                           
  9747                           ;main.c: 1708: crc8( &crc, 0 );
  9748  00303A  0100               	movlb	0	; () banked
  9749  00303C  0E00               	movlw	high receivePrintEventCANAL@crc
  9750  00303E  6E21               	movwf	?_crc8+1,c
  9751  003040  0E6E               	movlw	low receivePrintEventCANAL@crc
  9752  003042  6E20               	movwf	?_crc8,c
  9753  003044  0E00               	movlw	0
  9754  003046  6A22               	clrf	?_crc8+2,c
  9755  003048  ECD0  F027         	call	_crc8	;wreg free
  9756                           
  9757                           ; BSR set to: 2
  9758                           ;main.c: 1711: sendEscapedUartData( sequencyno, &crc );
  9759  00304C  0100               	movlb	0	; () banked
  9760  00304E  0E00               	movlw	high receivePrintEventCANAL@crc
  9761  003050  6E26               	movwf	?_sendEscapedUartData+1,c
  9762  003052  0E6E               	movlw	low receivePrintEventCANAL@crc
  9763  003054  6E25               	movwf	?_sendEscapedUartData,c
  9764  003056  503E               	movf	_sequencyno,w,c
  9765  003058  EC41  F024         	call	_sendEscapedUartData
  9766                           
  9767                           ;main.c: 1712: sequencyno++;
  9768  00305C  2A3E               	incf	_sequencyno,f,c
  9769                           
  9770                           ;main.c: 1715: sendEscapedUartData( 0, &crc );
  9771  00305E  0100               	movlb	0	; () banked
  9772  003060  0E00               	movlw	high receivePrintEventCANAL@crc
  9773  003062  6E26               	movwf	?_sendEscapedUartData+1,c
  9774  003064  0E6E               	movlw	low receivePrintEventCANAL@crc
  9775  003066  6E25               	movwf	?_sendEscapedUartData,c
  9776  003068  0E00               	movlw	0
  9777  00306A  EC41  F024         	call	_sendEscapedUartData
  9778                           
  9779                           ;main.c: 1716: sendEscapedUartData( 4 + dlc, &crc );
  9780  00306E  D849               	call	PL88	;call to abstracted procedure
  9781  003070  0F04               	addlw	4
  9782  003072  EC41  F024         	call	_sendEscapedUartData
  9783                           
  9784                           ;main.c: 1722: sendEscapedUartData( (id>>24) & 0xff, &crc );
  9785  003076  0E00               	movlw	high receivePrintEventCANAL@crc
  9786  003078  6E26               	movwf	?_sendEscapedUartData+1,c
  9787  00307A  0E6E               	movlw	low receivePrintEventCANAL@crc
  9788  00307C  6E25               	movwf	?_sendEscapedUartData,c
  9789  00307E  0100               	movlb	0	; () banked
  9790  003080  516D               	movf	(receivePrintEventCANAL@id+3)& (0+255),w,b
  9791  003082  EC41  F024         	call	_sendEscapedUartData
  9792                           
  9793                           ;main.c: 1723: sendEscapedUartData( (id>>16) & 0xff, &crc );
  9794  003086  0E00               	movlw	high receivePrintEventCANAL@crc
  9795  003088  6E26               	movwf	?_sendEscapedUartData+1,c
  9796  00308A  0E6E               	movlw	low receivePrintEventCANAL@crc
  9797  00308C  6E25               	movwf	?_sendEscapedUartData,c
  9798  00308E  0100               	movlb	0	; () banked
  9799  003090  516C               	movf	(receivePrintEventCANAL@id+2)& (0+255),w,b
  9800  003092  EC41  F024         	call	_sendEscapedUartData
  9801                           
  9802                           ;main.c: 1724: sendEscapedUartData( (id>>8) & 0xff, &crc );
  9803  003096  0E00               	movlw	high receivePrintEventCANAL@crc
  9804  003098  6E26               	movwf	?_sendEscapedUartData+1,c
  9805  00309A  0E6E               	movlw	low receivePrintEventCANAL@crc
  9806  00309C  6E25               	movwf	?_sendEscapedUartData,c
  9807  00309E  0100               	movlb	0	; () banked
  9808  0030A0  516B               	movf	(receivePrintEventCANAL@id+1)& (0+255),w,b
  9809  0030A2  EC41  F024         	call	_sendEscapedUartData
  9810                           
  9811                           ;main.c: 1725: sendEscapedUartData( id & 0xff, &crc );
  9812  0030A6  0100               	movlb	0	; () banked
  9813  0030A8  0E00               	movlw	high receivePrintEventCANAL@crc
  9814  0030AA  6E26               	movwf	?_sendEscapedUartData+1,c
  9815  0030AC  0E6E               	movlw	low receivePrintEventCANAL@crc
  9816  0030AE  6E25               	movwf	?_sendEscapedUartData,c
  9817  0030B0  516A               	movf	receivePrintEventCANAL@id& (0+255),w,b
  9818  0030B2  EC41  F024         	call	_sendEscapedUartData
  9819                           
  9820                           ;main.c: 1728: sendEscapedUartData( dlc, &crc );
  9821  0030B6  D825               	call	PL88	;call to abstracted procedure
  9822  0030B8  EC41  F024         	call	_sendEscapedUartData
  9823                           
  9824                           ;main.c: 1730: for (i = 0; i < dlc; i++) {
  9825  0030BC  0100               	movlb	0	; () banked
  9826  0030BE  6B68               	clrf	receivePrintEventCANAL@i& (0+255),b
  9827  0030C0  D00D               	goto	l11563
  9828  0030C2                     l11559:
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;main.c: 1731: sendEscapedUartData( data[ i ], &crc );
  9832  0030C2  0E00               	movlw	high receivePrintEventCANAL@crc
  9833  0030C4  6E26               	movwf	?_sendEscapedUartData+1,c
  9834  0030C6  0E6E               	movlw	low receivePrintEventCANAL@crc
  9835  0030C8  6E25               	movwf	?_sendEscapedUartData,c
  9836  0030CA  5168               	movf	receivePrintEventCANAL@i& (0+255),w,b
  9837  0030CC  0F60               	addlw	low receivePrintEventCANAL@data
  9838  0030CE  6ED9               	movwf	fsr2l,c
  9839  0030D0  6ADA               	clrf	fsr2h,c
  9840  0030D2  50DF               	movf	indf2,w,c
  9841  0030D4  EC41  F024         	call	_sendEscapedUartData
  9842  0030D8  0100               	movlb	0	; () banked
  9843  0030DA  2B68               	incf	receivePrintEventCANAL@i& (0+255),f,b
  9844  0030DC                     l11563:
  9845                           
  9846                           ; BSR set to: 0
  9847  0030DC  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9848  0030DE  5D68               	subwf	receivePrintEventCANAL@i& (0+255),w,b
  9849  0030E0  E3F0               	bnc	l11559
  9850                           
  9851                           ; BSR set to: 0
  9852                           ;main.c: 1732: }
  9853                           ;main.c: 1735: sendEscapedUartData( crc, (0) );
  9854  0030E2  6A26               	clrf	?_sendEscapedUartData+1,c
  9855  0030E4  6A25               	clrf	?_sendEscapedUartData,c
  9856  0030E6  516E               	movf	receivePrintEventCANAL@crc& (0+255),w,b
  9857  0030E8  EC41  F024         	call	_sendEscapedUartData
  9858  0030EC                     l891:
  9859  0030EC  A2AC               	btfss	4012,1,c	;volatile
  9860  0030EE  D7FE               	goto	l891
  9861                           
  9862                           ;main.c: 1739: WriteUSART(0x10);
  9863  0030F0  0E10               	movlw	16
  9864  0030F2  EC9F  F028         	call	_WriteUSART
  9865  0030F6                     l894:
  9866  0030F6  A2AC               	btfss	4012,1,c	;volatile
  9867  0030F8  D7FE               	goto	l894
  9868                           
  9869                           ;main.c: 1741: WriteUSART(0x03);
  9870  0030FA  0E03               	movlw	3
  9871  0030FC  EC9F  F028         	call	_WriteUSART
  9872  003100                     l897:
  9873  003100  0012               	return	
  9874  003102                     __end_of_receivePrintEventCANAL:
  9875                           	opt stack 0
  9876  003102                     PL88:
  9877                           	opt stack 24
  9878  003102  0100               	movlb	0	; () banked
  9879  003104  0E00               	movlw	high receivePrintEventCANAL@crc
  9880  003106  6E26               	movwf	?_sendEscapedUartData+1,c
  9881  003108  0E6E               	movlw	low receivePrintEventCANAL@crc
  9882  00310A  6E25               	movwf	?_sendEscapedUartData,c
  9883  00310C  5169               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9884  00310E  0012               	return	
  9885  003110                     __end_ofPL88:
  9886                           	opt stack 0
  9887                           tblptru	equ	0xFF8
  9888                           tblptrh	equ	0xFF7
  9889                           tblptrl	equ	0xFF6
  9890                           tablat	equ	0xFF5
  9891                           prodh	equ	0xFF4
  9892                           prodl	equ	0xFF3
  9893                           intcon	equ	0xFF2
  9894                           indf0	equ	0xFEF
  9895                           postinc0	equ	0xFEE
  9896                           fsr0h	equ	0xFEA
  9897                           fsr0l	equ	0xFE9
  9898                           wreg	equ	0xFE8
  9899                           indf1	equ	0xFE7
  9900                           postinc1	equ	0xFE6
  9901                           postdec1	equ	0xFE5
  9902                           fsr1h	equ	0xFE2
  9903                           fsr1l	equ	0xFE1
  9904                           indf2	equ	0xFDF
  9905                           postinc2	equ	0xFDE
  9906                           postdec2	equ	0xFDD
  9907                           plusw2	equ	0xFDB
  9908                           fsr2h	equ	0xFDA
  9909                           fsr2l	equ	0xFD9
  9910                           status	equ	0xFD8
  9911                           
  9912 ;; *************** function _sendEscapedUartData *****************
  9913 ;; Defined at:
  9914 ;;		line 1408 in file "main.c"
  9915 ;; Parameters:    Size  Location     Type
  9916 ;;  c               1    wreg     unsigned char 
  9917 ;;  pcrc            2   36[COMRAM] PTR unsigned char 
  9918 ;;		 -> sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNac
      +k@crc(1), 
  9919 ;;		 -> sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;  c               1   38[COMRAM] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;		None               void
  9924 ;; Registers used:
  9925 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/1
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9931 ;;      Params:         2       0       0       0       0       0       0
  9932 ;;      Locals:         1       0       0       0       0       0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0
  9934 ;;      Totals:         3       0       0       0       0       0       0
  9935 ;;Total ram usage:        3 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    4
  9938 ;; This function calls:
  9939 ;;		_WriteUSART
  9940 ;;		_crc8
  9941 ;; This function is called by:
  9942 ;;		_sendVSCPDriverErrorFrame
  9943 ;;		_sendVSCPDriverAck
  9944 ;;		_sendVSCPDriverNack
  9945 ;;		_sendVSCPDriverCommandReply
  9946 ;;		_receivePrintEventCANAL
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text16
  9951  004882                     __ptext16:
  9952                           	opt stack 0
  9953  004882                     _sendEscapedUartData:
  9954                           	opt stack 24
  9955                           
  9956                           ;incstack = 0
  9957                           ;incstack = 0
  9958                           ;sendEscapedUartData@c stored from wreg
  9959  004882  CFE8 F027          	movff	wreg,sendEscapedUartData@c
  9960                           
  9961                           ;main.c: 1409: if ( 0x10 == c ) {
  9962  004886  5027               	movf	sendEscapedUartData@c,w,c
  9963  004888  0A10               	xorlw	16
  9964  00488A  E121               	bnz	l720
  9965  00488C                     l711:
  9966  00488C  A2AC               	btfss	4012,1,c	;volatile
  9967  00488E  D7FE               	goto	l711
  9968                           
  9969                           ;main.c: 1412: WriteUSART( 0x10 );
  9970  004890  0E10               	movlw	16
  9971  004892  EC9F  F028         	call	_WriteUSART
  9972                           
  9973                           ;main.c: 1413: if ( (0) != pcrc ) crc8( pcrc, 0x10 );
  9974  004896  5026               	movf	sendEscapedUartData@pcrc+1,w,c
  9975  004898  1025               	iorwf	sendEscapedUartData@pcrc,w,c
  9976  00489A  E008               	bz	l715
  9977  00489C  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
  9978  0048A0  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
  9979  0048A4  0E10               	movlw	16
  9980  0048A6  6E22               	movwf	?_crc8+2,c
  9981  0048A8  ECD0  F027         	call	_crc8	;wreg free
  9982  0048AC                     l715:
  9983  0048AC  A2AC               	btfss	4012,1,c	;volatile
  9984  0048AE  D7FE               	goto	l715
  9985                           
  9986                           ;main.c: 1416: WriteUSART( 0x10 );
  9987  0048B0  0E10               	movlw	16
  9988  0048B2  EC9F  F028         	call	_WriteUSART
  9989                           
  9990                           ;main.c: 1417: if ( (0) != pcrc ) crc8( pcrc, 0x10 );
  9991  0048B6  5026               	movf	sendEscapedUartData@pcrc+1,w,c
  9992  0048B8  1025               	iorwf	sendEscapedUartData@pcrc,w,c
  9993  0048BA  E019               	bz	l724
  9994  0048BC  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
  9995  0048C0  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
  9996  0048C4  0E10               	movlw	16
  9997  0048C6  6E22               	movwf	?_crc8+2,c
  9998  0048C8  ECD0  F027         	call	_crc8	;wreg free
  9999  0048CC  D010               	goto	l724
 10000  0048CE                     l720:
 10001  0048CE  A2AC               	btfss	4012,1,c	;volatile
 10002  0048D0  D7FE               	goto	l720
 10003                           
 10004                           ;main.c: 1423: WriteUSART( c );
 10005  0048D2  5027               	movf	sendEscapedUartData@c,w,c
 10006  0048D4  EC9F  F028         	call	_WriteUSART
 10007                           
 10008                           ;main.c: 1424: if ( (0) != pcrc ) crc8( pcrc, c );
 10009  0048D8  5026               	movf	sendEscapedUartData@pcrc+1,w,c
 10010  0048DA  1025               	iorwf	sendEscapedUartData@pcrc,w,c
 10011  0048DC  E008               	bz	l724
 10012  0048DE  C025  F020         	movff	sendEscapedUartData@pcrc,?_crc8
 10013  0048E2  C026  F021         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10014  0048E6  C027  F022         	movff	sendEscapedUartData@c,?_crc8+2
 10015  0048EA  ECD0  F027         	call	_crc8	;wreg free
 10016  0048EE                     l724:
 10017  0048EE  0012               	return	
 10018  0048F0                     __end_of_sendEscapedUartData:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           indf1	equ	0xFE7
 10033                           postinc1	equ	0xFE6
 10034                           postdec1	equ	0xFE5
 10035                           fsr1h	equ	0xFE2
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           plusw2	equ	0xFDB
 10041                           fsr2h	equ	0xFDA
 10042                           fsr2l	equ	0xFD9
 10043                           status	equ	0xFD8
 10044                           
 10045 ;; *************** function _crc8 *****************
 10046 ;; Defined at:
 10047 ;;		line 47 in file "crc8.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  crc             2   31[COMRAM] PTR unsigned char 
 10050 ;;		 -> calcCRC@crc(1), sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), 
 10051 ;;		 -> sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10052 ;;  m               1   33[COMRAM] unsigned char 
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;		None
 10055 ;; Return value:  Size  Location     Type
 10056 ;;		None               void
 10057 ;; Registers used:
 10058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10059 ;; Tracked objects:
 10060 ;;		On entry : 0/1
 10061 ;;		On exit  : F/2
 10062 ;;		Unchanged: 0/0
 10063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10064 ;;      Params:         3       0       0       0       0       0       0
 10065 ;;      Locals:         0       0       0       0       0       0       0
 10066 ;;      Temps:          2       0       0       0       0       0       0
 10067 ;;      Totals:         5       0       0       0       0       0       0
 10068 ;;Total ram usage:        5 bytes
 10069 ;; Hardware stack levels used:    1
 10070 ;; Hardware stack levels required when called:    3
 10071 ;; This function calls:
 10072 ;;		_init_crc8
 10073 ;; This function is called by:
 10074 ;;		_sendEscapedUartData
 10075 ;;		_sendVSCPDriverErrorFrame
 10076 ;;		_sendVSCPDriverAck
 10077 ;;		_sendVSCPDriverNack
 10078 ;;		_sendVSCPDriverCommandReply
 10079 ;;		_receivePrintEventCANAL
 10080 ;;		_calcCRC
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           	psect	text17
 10085  004FA0                     __ptext17:
 10086                           	opt stack 0
 10087  004FA0                     _crc8:
 10088                           	opt stack 25
 10089                           
 10090                           ;crc8.c: 48: if ( !made_table ) {
 10091                           
 10092                           ;incstack = 0
 10093                           ;incstack = 0
 10094  004FA0  5034               	movf	_made_table+1,w,c
 10095  004FA2  1033               	iorwf	_made_table,w,c
 10096  004FA4  B4D8               	btfsc	status,2,c
 10097                           
 10098                           ;crc8.c: 49: init_crc8();
 10099  004FA6  EC78  F024         	call	_init_crc8	;wreg free
 10100                           
 10101                           ;crc8.c: 50: }
 10102                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 10103  004FAA  C020  FFD9         	movff	crc8@crc,fsr2l
 10104  004FAE  C021  FFDA         	movff	crc8@crc+1,fsr2h
 10105  004FB2  50DF               	movf	indf2,w,c
 10106  004FB4  1822               	xorwf	crc8@m,w,c
 10107  004FB6  6E23               	movwf	??_crc8& (0+255),c
 10108  004FB8  6A24               	clrf	(??_crc8+1)& (0+255),c
 10109  004FBA  0102               	movlb	2	; () banked
 10110  004FBC  0E00               	movlw	low _crc8_table
 10111  004FBE  2423               	addwf	??_crc8,w,c
 10112  004FC0  6ED9               	movwf	fsr2l,c
 10113  004FC2  0E02               	movlw	high _crc8_table
 10114  004FC4  2024               	addwfc	??_crc8+1,w,c
 10115  004FC6  6EDA               	movwf	fsr2h,c
 10116  004FC8  C020  FFE1         	movff	crc8@crc,fsr1l
 10117  004FCC  C021  FFE2         	movff	crc8@crc+1,fsr1h
 10118  004FD0  CFDF FFE7          	movff	indf2,indf1
 10119                           
 10120                           ; BSR set to: 2
 10121  004FD4  0012               	return	
 10122  004FD6                     __end_of_crc8:
 10123                           	opt stack 0
 10124                           tblptru	equ	0xFF8
 10125                           tblptrh	equ	0xFF7
 10126                           tblptrl	equ	0xFF6
 10127                           tablat	equ	0xFF5
 10128                           prodh	equ	0xFF4
 10129                           prodl	equ	0xFF3
 10130                           intcon	equ	0xFF2
 10131                           indf0	equ	0xFEF
 10132                           postinc0	equ	0xFEE
 10133                           fsr0h	equ	0xFEA
 10134                           fsr0l	equ	0xFE9
 10135                           wreg	equ	0xFE8
 10136                           indf1	equ	0xFE7
 10137                           postinc1	equ	0xFE6
 10138                           postdec1	equ	0xFE5
 10139                           fsr1h	equ	0xFE2
 10140                           fsr1l	equ	0xFE1
 10141                           indf2	equ	0xFDF
 10142                           postinc2	equ	0xFDE
 10143                           postdec2	equ	0xFDD
 10144                           plusw2	equ	0xFDB
 10145                           fsr2h	equ	0xFDA
 10146                           fsr2l	equ	0xFD9
 10147                           status	equ	0xFD8
 10148                           
 10149 ;; *************** function _init_crc8 *****************
 10150 ;; Defined at:
 10151 ;;		line 25 in file "crc8.c"
 10152 ;; Parameters:    Size  Location     Type
 10153 ;;		None
 10154 ;; Auto vars:     Size  Location     Type
 10155 ;;  i               2   29[COMRAM] int 
 10156 ;;  j               2   26[COMRAM] int 
 10157 ;;  crc             1   28[COMRAM] unsigned char 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;		None               void
 10160 ;; Registers used:
 10161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/1
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       0       0       0       0       0       0
 10168 ;;      Locals:         7       0       0       0       0       0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0
 10170 ;;      Totals:         7       0       0       0       0       0       0
 10171 ;;Total ram usage:        7 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    2
 10174 ;; This function calls:
 10175 ;;		Nothing
 10176 ;; This function is called by:
 10177 ;;		_main
 10178 ;;		_crc8
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text18
 10183  0048F0                     __ptext18:
 10184                           	opt stack 0
 10185  0048F0                     _init_crc8:
 10186                           	opt stack 25
 10187                           
 10188                           ;crc8.c: 26: int i,j;
 10189                           ;crc8.c: 27: unsigned char crc;
 10190                           ;crc8.c: 29: if (!made_table) {
 10191                           
 10192                           ; BSR set to: 2
 10193                           ;incstack = 0
 10194                           ;incstack = 0
 10195  0048F0  5034               	movf	_made_table+1,w,c
 10196  0048F2  1033               	iorwf	_made_table,w,c
 10197  0048F4  E131               	bnz	l1471
 10198                           
 10199                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 10200  0048F6  6A1E               	clrf	init_crc8@i,c
 10201  0048F8  6A1F               	clrf	init_crc8@i+1,c
 10202  0048FA                     l1463:
 10203                           
 10204                           ;crc8.c: 31: crc = i;
 10205  0048FA  C01E  F01D         	movff	init_crc8@i,init_crc8@crc
 10206                           
 10207                           ;crc8.c: 32: for (j=0; j<8; j++) {
 10208  0048FE  6A1B               	clrf	init_crc8@j,c
 10209  004900  6A1C               	clrf	init_crc8@j+1,c
 10210  004902                     l1465:
 10211                           
 10212                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 10213  004902  BE1D               	btfsc	init_crc8@crc,7,c
 10214  004904  D003               	goto	l9357
 10215  004906  6A19               	clrf	_init_crc8$2025,c
 10216  004908  6A1A               	clrf	_init_crc8$2025+1,c
 10217  00490A  D003               	goto	l9359
 10218  00490C                     l9357:
 10219  00490C  6A1A               	clrf	_init_crc8$2025+1,c
 10220  00490E  0E07               	movlw	7
 10221  004910  6E19               	movwf	_init_crc8$2025,c
 10222  004912                     l9359:
 10223  004912  501D               	movf	init_crc8@crc,w,c
 10224  004914  241D               	addwf	init_crc8@crc,w,c
 10225  004916  1819               	xorwf	_init_crc8$2025,w,c
 10226  004918  6E1D               	movwf	init_crc8@crc,c
 10227  00491A  4A1B               	infsnz	init_crc8@j,f,c
 10228  00491C  2A1C               	incf	init_crc8@j+1,f,c
 10229  00491E  501C               	movf	init_crc8@j+1,w,c
 10230  004920  0A80               	xorlw	128
 10231  004922  0F80               	addlw	-128
 10232  004924  0E08               	movlw	8
 10233  004926  B4D8               	btfsc	status,2,c
 10234  004928  5C1B               	subwf	init_crc8@j,w,c
 10235  00492A  E3EB               	bnc	l1465
 10236                           
 10237                           ;crc8.c: 34: }
 10238                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 10239  00492C  0102               	movlb	2	; () banked
 10240  00492E  0E00               	movlw	low _crc8_table
 10241  004930  241E               	addwf	init_crc8@i,w,c
 10242  004932  6ED9               	movwf	fsr2l,c
 10243  004934  0E02               	movlw	high _crc8_table
 10244  004936  201F               	addwfc	init_crc8@i+1,w,c
 10245  004938  6EDA               	movwf	fsr2h,c
 10246  00493A  C01D  FFDF         	movff	init_crc8@crc,indf2
 10247                           
 10248                           ; BSR set to: 2
 10249  00493E  4A1E               	infsnz	init_crc8@i,f,c
 10250  004940  2A1F               	incf	init_crc8@i+1,f,c
 10251                           
 10252                           ; BSR set to: 2
 10253  004942  501F               	movf	init_crc8@i+1,w,c
 10254  004944  0A80               	xorlw	128
 10255  004946  0F7F               	addlw	-129
 10256  004948  0E00               	movlw	0
 10257  00494A  B4D8               	btfsc	status,2,c
 10258  00494C  5C1E               	subwf	init_crc8@i,w,c
 10259  00494E  E3D5               	bnc	l1463
 10260                           
 10261                           ; BSR set to: 2
 10262                           ;crc8.c: 37: }
 10263                           ;crc8.c: 38: made_table=1;
 10264  004950  0E00               	movlw	0
 10265  004952  6E34               	movwf	_made_table+1,c
 10266  004954  0E01               	movlw	1
 10267  004956  6E33               	movwf	_made_table,c
 10268  004958                     l1471:
 10269  004958  0012               	return	
 10270  00495A                     __end_of_init_crc8:
 10271                           	opt stack 0
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           indf0	equ	0xFEF
 10280                           postinc0	equ	0xFEE
 10281                           fsr0h	equ	0xFEA
 10282                           fsr0l	equ	0xFE9
 10283                           wreg	equ	0xFE8
 10284                           indf1	equ	0xFE7
 10285                           postinc1	equ	0xFE6
 10286                           postdec1	equ	0xFE5
 10287                           fsr1h	equ	0xFE2
 10288                           fsr1l	equ	0xFE1
 10289                           indf2	equ	0xFDF
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           plusw2	equ	0xFDB
 10293                           fsr2h	equ	0xFDA
 10294                           fsr2l	equ	0xFD9
 10295                           status	equ	0xFD8
 10296                           
 10297 ;; *************** function _doModeVerbose *****************
 10298 ;; Defined at:
 10299 ;;		line 421 in file "main.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;		None
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  preg            2    6[BANK3 ] PTR unsigned char 
 10304 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10305 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10306 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10307 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10308 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10309 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10310 ;;  preg            2    4[BANK3 ] PTR unsigned char 
 10311 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10312 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10313 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10314 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10315 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10316 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10317 ;;  id              4   35[BANK3 ] unsigned long 
 10318 ;;  p               2   59[BANK3 ] PTR unsigned char 
 10319 ;;		 -> NULL(0), cmdbuf(80), 
 10320 ;;  mask_class      2   10[BANK3 ] unsigned short 
 10321 ;;  maskno          1   41[BANK3 ] unsigned char 
 10322 ;;  mask_nodeid     1   19[BANK3 ] unsigned char 
 10323 ;;  mask_type       1   18[BANK3 ] unsigned char 
 10324 ;;  mask_priorit    1   17[BANK3 ] unsigned char 
 10325 ;;  id              4    0[BANK3 ] unsigned long 
 10326 ;;  p               2   57[BANK3 ] PTR unsigned char 
 10327 ;;		 -> NULL(0), cmdbuf(80), 
 10328 ;;  filter_class    2    8[BANK3 ] unsigned short 
 10329 ;;  filterno        1   40[BANK3 ] unsigned char 
 10330 ;;  filter_nodei    1   16[BANK3 ] unsigned char 
 10331 ;;  filter_type     1   15[BANK3 ] unsigned char 
 10332 ;;  filter_prior    1   14[BANK3 ] unsigned char 
 10333 ;;  nodeid          1   47[BANK3 ] unsigned char 
 10334 ;;  p               2   52[BANK3 ] PTR unsigned char 
 10335 ;;		 -> NULL(0), cmdbuf(80), 
 10336 ;;  value           1   39[BANK3 ] unsigned char 
 10337 ;;  reg             1   34[BANK3 ] unsigned char 
 10338 ;;  page            1   33[BANK3 ] unsigned char 
 10339 ;;  nodeid          1   13[BANK3 ] unsigned char 
 10340 ;;  p               2   50[BANK3 ] PTR unsigned char 
 10341 ;;		 -> NULL(0), cmdbuf(80), 
 10342 ;;  value           1   49[BANK3 ] unsigned char 
 10343 ;;  i               1   48[BANK3 ] unsigned char 
 10344 ;;  reg             1   46[BANK3 ] unsigned char 
 10345 ;;  page            1   45[BANK3 ] unsigned char 
 10346 ;;  count           1   43[BANK3 ] unsigned char 
 10347 ;;  rv              1   32[BANK3 ] enum E15660
 10348 ;;  nodeid          1   12[BANK3 ] unsigned char 
 10349 ;;  p               2   55[BANK3 ] PTR unsigned char 
 10350 ;;		 -> NULL(0), cmdbuf(80), 
 10351 ;;  ifmode          1   54[BANK3 ] enum E16362
 10352 ;;  c               1   44[BANK3 ] unsigned char 
 10353 ;;  i               1   42[BANK3 ] unsigned char 
 10354 ;; Return value:  Size  Location     Type
 10355 ;;		None               void
 10356 ;; Registers used:
 10357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10363 ;;      Params:         0       0       0       0       0       0       0
 10364 ;;      Locals:         0       0       0       0      61       0       0
 10365 ;;      Temps:          0      20       0       0       0       0       0
 10366 ;;      Totals:         0      20       0       0      61       0       0
 10367 ;;Total ram usage:       81 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    9
 10370 ;; This function calls:
 10371 ;;		_putsUSART
 10372 ;;		_printFirmwareVersion
 10373 ;;		_fifo_read
 10374 ;;		_writeEEPROM
 10375 ;;		_receivePrintEventVerbose
 10376 ;;		_stristr
 10377 ;;		_ECANSetOperationMode
 10378 ;;		_strtok
 10379 ;;		_atoi
 10380 ;;		_memset
 10381 ;;		_sendVSCPFrame
 10382 ;;		_printStatistics
 10383 ;;		_printErrors
 10384 ;;		_printHelp
 10385 ;;		_findNodes
 10386 ;;		_strcpy
 10387 ;;		_strchr
 10388 ;;		_readRegisterExtended
 10389 ;;		_sprintf
 10390 ;;		_WriteUSART
 10391 ;;		_printBinary
 10392 ;;		_writeRegisterExtended
 10393 ;;		_printNodeFirmwareVersion
 10394 ;;		_printGUID
 10395 ;;		_printMDF
 10396 ;;		_setFilter
 10397 ;;		__CANIDToRegs
 10398 ;; This function is called by:
 10399 ;;		_main
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text19
 10404  0001A0                     __ptext19:
 10405                           	opt stack 0
 10406  0001A0                     _doModeVerbose:
 10407                           	opt stack 21
 10408                           
 10409                           ;main.c: 422: uint8_t c;
 10410                           ;main.c: 423: uint8_t i;
 10411                           ;main.c: 426: if (!bSilent) {
 10412                           
 10413                           ;incstack = 0
 10414                           ;incstack = 0
 10415  0001A0  0100               	movlb	0	; () banked
 10416  0001A2  67D6               	tstfsz	_bSilent& (0+255),b
 10417  0001A4  D002               	goto	l12541
 10418                           
 10419                           ; BSR set to: 0
 10420                           ;main.c: 427: receivePrintEventVerbose();
 10421  0001A6  ECF3  F010         	call	_receivePrintEventVerbose	;wreg free
 10422  0001AA                     l12541:
 10423                           
 10424                           ;main.c: 428: }
 10425                           ;main.c: 431: (INTCONbits.GIE = 0);
 10426  0001AA  9EF2               	bcf	intcon,7,c	;volatile
 10427                           
 10428                           ;main.c: 433: if ( 1 == fifo_read( &inputFifo, &c, 1 ) ) {
 10429  0001AC  0E01               	movlw	high _inputFifo
 10430  0001AE  6E1A               	movwf	?_fifo_read+1,c
 10431  0001B0  0EC0               	movlw	low _inputFifo
 10432  0001B2  6E19               	movwf	?_fifo_read,c
 10433  0001B4  0103               	movlb	3	; () banked
 10434  0001B6  0E03               	movlw	high doModeVerbose@c
 10435  0001B8  6E1C               	movwf	?_fifo_read+3,c
 10436  0001BA  0E2C               	movlw	low doModeVerbose@c
 10437  0001BC  6E1B               	movwf	?_fifo_read+2,c
 10438  0001BE  6A1E               	clrf	?_fifo_read+5,c
 10439  0001C0  0E01               	movlw	1
 10440  0001C2  6E1D               	movwf	?_fifo_read+4,c
 10441  0001C4  EC42  F01F         	call	_fifo_read	;wreg free
 10442  0001C8  0419               	decf	?_fifo_read,w,c
 10443  0001CA  101A               	iorwf	?_fifo_read+1,w,c
 10444  0001CC  E002 EF98  F009    	bnz	l13137
 10445                           
 10446                           ;main.c: 436: (INTCONbits.GIE = 1);
 10447  0001D2  8EF2               	bsf	intcon,7,c	;volatile
 10448                           
 10449                           ;main.c: 439: cmdbuf[ pos ] = c;
 10450  0001D4  0E20               	movlw	low _cmdbuf
 10451  0001D6  0100               	movlb	0	; () banked
 10452  0001D8  25D8               	addwf	_pos& (0+255),w,b
 10453  0001DA  6ED9               	movwf	fsr2l,c
 10454  0001DC  6ADA               	clrf	fsr2h,c
 10455  0001DE  0E01               	movlw	high _cmdbuf
 10456  0001E0  22DA               	addwfc	fsr2h,f,c
 10457  0001E2  C32C  FFDF         	movff	doModeVerbose@c,indf2
 10458                           
 10459                           ; BSR set to: 3
 10460                           ;main.c: 440: pos++;
 10461  0001E6  2BD8               	incf	_pos& (0+255),f,b
 10462                           
 10463                           ; BSR set to: 0
 10464                           ;main.c: 447: }
 10465                           ;main.c: 450: if ( 0x0d == c ) {
 10466                           
 10467                           ;main.c: 442: if ( pos >= 500u ) {
 10468  0001E8  0103               	movlb	3	; () banked
 10469  0001EA  512C               	movf	doModeVerbose@c& (0+255),w,b
 10470  0001EC  0A0D               	xorlw	13
 10471  0001EE  E002 EF98  F009    	bnz	l13137
 10472                           
 10473                           ; BSR set to: 3
 10474                           ;main.c: 452: cmdbuf[ pos ] = 0;
 10475  0001F4  0E20               	movlw	low _cmdbuf
 10476  0001F6  0100               	movlb	0	; () banked
 10477  0001F8  25D8               	addwf	_pos& (0+255),w,b
 10478  0001FA  6ED9               	movwf	fsr2l,c
 10479  0001FC  6ADA               	clrf	fsr2h,c
 10480  0001FE  0101               	movlb	1	; () banked
 10481  000200  0E01               	movlw	high _cmdbuf
 10482  000202  22DA               	addwfc	fsr2h,f,c
 10483  000204  6ADF               	clrf	indf2,c
 10484                           
 10485                           ; BSR set to: 1
 10486                           ;main.c: 455: if ( cmdbuf == stristr(cmdbuf, "BOOT")) {
 10487  000206  6E27               	movwf	?_stristr+1,c
 10488  000208  0E20               	movlw	low _cmdbuf
 10489  00020A  6E26               	movwf	?_stristr,c
 10490  00020C  0E7F               	movlw	high STR_5
 10491  00020E  6E29               	movwf	?_stristr+3,c
 10492  000210  0ECF               	movlw	low STR_5
 10493  000212  6E28               	movwf	?_stristr+2,c
 10494  000214  EC56  F023         	call	_stristr	;wreg free
 10495  000218  EC9A  F009         	call	PL2	;call to abstracted procedure
 10496  00021C  E102               	bnz	u16445
 10497  00021E  5026               	movf	?_stristr,w,c
 10498  000220  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10499  000222                     u16445:
 10500  000222  E10F               	bnz	l12563
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;main.c: 456: putsUSART((char *) "Will enter bootloader now...\r\n");
 10504  000224  0E7A               	movlw	high STR_6
 10505  000226  6E1B               	movwf	?_putsUSART+1,c
 10506  000228  0EEC               	movlw	low STR_6
 10507  00022A  6E1A               	movwf	?_putsUSART,c
 10508  00022C  ECC1  F025         	call	_putsUSART	;wreg free
 10509                           
 10510                           ;main.c: 457: writeEEPROM(0x00, 0xFF);
 10511  000230  6A1A               	clrf	?_writeEEPROM+1,c
 10512  000232  6A19               	clrf	?_writeEEPROM,c
 10513  000234  0EFF               	movlw	255
 10514  000236  681B               	setf	?_writeEEPROM+2,c
 10515  000238  EC48  F028         	call	_writeEEPROM	;wreg free
 10516  00023C  00FF               	reset		;# 
 10517                           
 10518                           ;main.c: 459: }
 10519  00023E  EF8A  F009         	goto	l13133
 10520  000242                     l12563:
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;main.c: 461: else if ( cmdbuf == stristr(cmdbuf, "OPEN")) {
 10524  000242  0101               	movlb	1	; () banked
 10525  000244  0E01               	movlw	high _cmdbuf
 10526  000246  6E27               	movwf	?_stristr+1,c
 10527  000248  0E20               	movlw	low _cmdbuf
 10528  00024A  6E26               	movwf	?_stristr,c
 10529  00024C  0E7F               	movlw	high STR_7
 10530  00024E  6E29               	movwf	?_stristr+3,c
 10531  000250  0EB6               	movlw	low STR_7
 10532  000252  6E28               	movwf	?_stristr+2,c
 10533  000254  EC56  F023         	call	_stristr	;wreg free
 10534  000258  EC9A  F009         	call	PL2	;call to abstracted procedure
 10535  00025C  E102               	bnz	u16455
 10536  00025E  5026               	movf	?_stristr,w,c
 10537  000260  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10538  000262                     u16455:
 10539  000262  E10C               	bnz	l12571
 10540                           
 10541                           ; BSR set to: 0
 10542                           ;main.c: 462: bSilent = 0;
 10543  000264  6BD6               	clrf	_bSilent& (0+255),b
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;main.c: 463: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10547  000266  0E00               	movlw	0
 10548  000268  EC88  F028         	call	_ECANSetOperationMode
 10549                           
 10550                           ;main.c: 464: putsUSART((char *) "+OK\r\n");
 10551  00026C  0E7F               	movlw	high STR_8
 10552  00026E  6E1B               	movwf	?_putsUSART+1,c
 10553  000270  0E7F               	movlw	low STR_8
 10554  000272  6E1A               	movwf	?_putsUSART,c
 10555  000274  ECC1  F025         	call	_putsUSART	;wreg free
 10556                           
 10557                           ;main.c: 465: }
 10558  000278  EF8A  F009         	goto	l13133
 10559  00027C                     l12571:
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;main.c: 467: else if ( cmdbuf == stristr(cmdbuf, "SILENT")) {
 10563  00027C  0101               	movlb	1	; () banked
 10564  00027E  0E01               	movlw	high _cmdbuf
 10565  000280  6E27               	movwf	?_stristr+1,c
 10566  000282  0E20               	movlw	low _cmdbuf
 10567  000284  6E26               	movwf	?_stristr,c
 10568  000286  0E7F               	movlw	high STR_9
 10569  000288  6E29               	movwf	?_stristr+3,c
 10570  00028A  0E5D               	movlw	low STR_9
 10571  00028C  6E28               	movwf	?_stristr+2,c
 10572  00028E  EC56  F023         	call	_stristr	;wreg free
 10573  000292  EC9A  F009         	call	PL2	;call to abstracted procedure
 10574  000296  E102               	bnz	u16465
 10575  000298  5026               	movf	?_stristr,w,c
 10576  00029A  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10577  00029C                     u16465:
 10578  00029C  E10D               	bnz	l12579
 10579                           
 10580                           ; BSR set to: 0
 10581                           ;main.c: 468: bSilent = 1;
 10582  00029E  0E01               	movlw	1
 10583  0002A0  6FD6               	movwf	_bSilent& (0+255),b
 10584                           
 10585                           ; BSR set to: 0
 10586                           ;main.c: 469: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10587  0002A2  0E00               	movlw	0
 10588  0002A4  EC88  F028         	call	_ECANSetOperationMode
 10589                           
 10590                           ;main.c: 470: putsUSART((char *) "+OK\r\n");
 10591  0002A8  0E7F               	movlw	high STR_8
 10592  0002AA  6E1B               	movwf	?_putsUSART+1,c
 10593  0002AC  0E7F               	movlw	low STR_8
 10594  0002AE  6E1A               	movwf	?_putsUSART,c
 10595  0002B0  ECC1  F025         	call	_putsUSART	;wreg free
 10596                           
 10597                           ;main.c: 471: }
 10598  0002B4  EF8A  F009         	goto	l13133
 10599  0002B8                     l12579:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;main.c: 473: else if ( cmdbuf == stristr(cmdbuf, "CLOSE")) {
 10603  0002B8  0101               	movlb	1	; () banked
 10604  0002BA  0E01               	movlw	high _cmdbuf
 10605  0002BC  6E27               	movwf	?_stristr+1,c
 10606  0002BE  0E20               	movlw	low _cmdbuf
 10607  0002C0  6E26               	movwf	?_stristr,c
 10608  0002C2  0E7F               	movlw	high STR_11
 10609  0002C4  6E29               	movwf	?_stristr+3,c
 10610  0002C6  0E91               	movlw	low STR_11
 10611  0002C8  6E28               	movwf	?_stristr+2,c
 10612  0002CA  EC56  F023         	call	_stristr	;wreg free
 10613  0002CE  EC9A  F009         	call	PL2	;call to abstracted procedure
 10614  0002D2  E102               	bnz	u16475
 10615  0002D4  5026               	movf	?_stristr,w,c
 10616  0002D6  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10617  0002D8                     u16475:
 10618  0002D8  E10D               	bnz	l12587
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;main.c: 474: bSilent = 1;
 10622  0002DA  0E01               	movlw	1
 10623  0002DC  6FD6               	movwf	_bSilent& (0+255),b
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;main.c: 475: ECANSetOperationMode(0x20);
 10627  0002DE  0E20               	movlw	32
 10628  0002E0  EC88  F028         	call	_ECANSetOperationMode
 10629                           
 10630                           ;main.c: 476: putsUSART((char *) "+OK\r\n");
 10631  0002E4  0E7F               	movlw	high STR_8
 10632  0002E6  6E1B               	movwf	?_putsUSART+1,c
 10633  0002E8  0E7F               	movlw	low STR_8
 10634  0002EA  6E1A               	movwf	?_putsUSART,c
 10635  0002EC  ECC1  F025         	call	_putsUSART	;wreg free
 10636                           
 10637                           ;main.c: 477: }
 10638  0002F0  EF8A  F009         	goto	l13133
 10639  0002F4                     l12587:
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;main.c: 479: else if ( cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 10643  0002F4  0101               	movlb	1	; () banked
 10644  0002F6  0E01               	movlw	high _cmdbuf
 10645  0002F8  6E27               	movwf	?_stristr+1,c
 10646  0002FA  0E20               	movlw	low _cmdbuf
 10647  0002FC  6E26               	movwf	?_stristr,c
 10648  0002FE  0E7E               	movlw	high STR_13
 10649  000300  6E29               	movwf	?_stristr+3,c
 10650  000302  0ECC               	movlw	low STR_13
 10651  000304  6E28               	movwf	?_stristr+2,c
 10652  000306  EC56  F023         	call	_stristr	;wreg free
 10653  00030A  EC9A  F009         	call	PL2	;call to abstracted procedure
 10654  00030E  E102               	bnz	u16485
 10655  000310  5026               	movf	?_stristr,w,c
 10656  000312  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10657  000314                     u16485:
 10658  000314  E10C               	bnz	l12595
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;main.c: 480: bSilent = 0;
 10662  000316  6BD6               	clrf	_bSilent& (0+255),b
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;main.c: 481: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 10666  000318  0E40               	movlw	64
 10667  00031A  EC88  F028         	call	_ECANSetOperationMode
 10668                           
 10669                           ;main.c: 482: putsUSART((char *) "+OK\r\n");
 10670  00031E  0E7F               	movlw	high STR_8
 10671  000320  6E1B               	movwf	?_putsUSART+1,c
 10672  000322  0E7F               	movlw	low STR_8
 10673  000324  6E1A               	movwf	?_putsUSART,c
 10674  000326  ECC1  F025         	call	_putsUSART	;wreg free
 10675                           
 10676                           ;main.c: 483: }
 10677  00032A  EF8A  F009         	goto	l13133
 10678  00032E                     l12595:
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 485: else if ( cmdbuf == stristr(cmdbuf, "LISTEN")) {
 10682  00032E  0101               	movlb	1	; () banked
 10683  000330  0E01               	movlw	high _cmdbuf
 10684  000332  6E27               	movwf	?_stristr+1,c
 10685  000334  0E20               	movlw	low _cmdbuf
 10686  000336  6E26               	movwf	?_stristr,c
 10687  000338  0E7F               	movlw	high STR_15
 10688  00033A  6E29               	movwf	?_stristr+3,c
 10689  00033C  0E4F               	movlw	low STR_15
 10690  00033E  6E28               	movwf	?_stristr+2,c
 10691  000340  EC56  F023         	call	_stristr	;wreg free
 10692  000344  EC9A  F009         	call	PL2	;call to abstracted procedure
 10693  000348  E102               	bnz	u16495
 10694  00034A  5026               	movf	?_stristr,w,c
 10695  00034C  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10696  00034E                     u16495:
 10697  00034E  E10C               	bnz	l12603
 10698                           
 10699                           ; BSR set to: 0
 10700                           ;main.c: 486: bSilent = 0;
 10701  000350  6BD6               	clrf	_bSilent& (0+255),b
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;main.c: 487: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 10705  000352  0E60               	movlw	96
 10706  000354  EC88  F028         	call	_ECANSetOperationMode
 10707                           
 10708                           ;main.c: 488: putsUSART((char *) "+OK\r\n");
 10709  000358  0E7F               	movlw	high STR_8
 10710  00035A  6E1B               	movwf	?_putsUSART+1,c
 10711  00035C  0E7F               	movlw	low STR_8
 10712  00035E  6E1A               	movwf	?_putsUSART,c
 10713  000360  ECC1  F025         	call	_putsUSART	;wreg free
 10714                           
 10715                           ;main.c: 489: }
 10716  000364  EF8A  F009         	goto	l13133
 10717  000368                     l12603:
 10718                           
 10719                           ; BSR set to: 0
 10720                           ;main.c: 491: else if ( cmdbuf == stristr(cmdbuf, "VERSION")) {
 10721  000368  0101               	movlb	1	; () banked
 10722  00036A  0E01               	movlw	high _cmdbuf
 10723  00036C  6E27               	movwf	?_stristr+1,c
 10724  00036E  0E20               	movlw	low _cmdbuf
 10725  000370  6E26               	movwf	?_stristr,c
 10726  000372  0E7F               	movlw	high STR_17
 10727  000374  6E29               	movwf	?_stristr+3,c
 10728  000376  0E0D               	movlw	low STR_17
 10729  000378  6E28               	movwf	?_stristr+2,c
 10730  00037A  EC56  F023         	call	_stristr	;wreg free
 10731  00037E  EC9A  F009         	call	PL2	;call to abstracted procedure
 10732  000382  E102               	bnz	u16505
 10733  000384  5026               	movf	?_stristr,w,c
 10734  000386  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10735  000388                     u16505:
 10736  000388  E10A               	bnz	l12609
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;main.c: 492: printFirmwareVersion();
 10740  00038A  EC46  F022         	call	_printFirmwareVersion	;wreg free
 10741                           
 10742                           ;main.c: 493: putsUSART((char *) "+OK\r\n");
 10743  00038E  0E7F               	movlw	high STR_8
 10744  000390  6E1B               	movwf	?_putsUSART+1,c
 10745  000392  0E7F               	movlw	low STR_8
 10746  000394  6E1A               	movwf	?_putsUSART,c
 10747  000396  ECC1  F025         	call	_putsUSART	;wreg free
 10748                           
 10749                           ;main.c: 494: }
 10750  00039A  EF8A  F009         	goto	l13133
 10751  00039E                     l12609:
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;main.c: 495: else if ( cmdbuf == stristr(cmdbuf, "IFMODE")) {
 10755  00039E  0101               	movlb	1	; () banked
 10756  0003A0  0E01               	movlw	high _cmdbuf
 10757  0003A2  6E27               	movwf	?_stristr+1,c
 10758  0003A4  0E20               	movlw	low _cmdbuf
 10759  0003A6  6E26               	movwf	?_stristr,c
 10760  0003A8  0E7F               	movlw	high STR_19
 10761  0003AA  6E29               	movwf	?_stristr+3,c
 10762  0003AC  0E48               	movlw	low STR_19
 10763  0003AE  6E28               	movwf	?_stristr+2,c
 10764  0003B0  EC56  F023         	call	_stristr	;wreg free
 10765  0003B4  EC9A  F009         	call	PL2	;call to abstracted procedure
 10766  0003B8  E102               	bnz	u16515
 10767  0003BA  5026               	movf	?_stristr,w,c
 10768  0003BC  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10769  0003BE                     u16515:
 10770  0003BE  E161               	bnz	l12645
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;main.c: 496: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 10774  0003C0  506F               	movf	3951,w,c	;volatile
 10775  0003C2  0BE0               	andlw	224
 10776  0003C4  0103               	movlb	3	; () banked
 10777  0003C6  6F36               	movwf	doModeVerbose@ifmode& (0+255),b
 10778                           
 10779                           ; BSR set to: 3
 10780                           ;main.c: 497: if ( ( ECAN_OP_MODE_NORMAL == ifmode ) & !bSilent ) {
 10781  0003C8  6736               	tstfsz	doModeVerbose@ifmode& (0+255),b
 10782  0003CA  D00B               	goto	l12619
 10783                           
 10784                           ; BSR set to: 3
 10785  0003CC  0100               	movlb	0	; () banked
 10786  0003CE  67D6               	tstfsz	_bSilent& (0+255),b
 10787  0003D0  D008               	goto	l12619
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;main.c: 498: putsUSART((char *) "+OK - Normal mode\r\n");
 10791  0003D2  0E7D               	movlw	high STR_20
 10792  0003D4  6E1B               	movwf	?_putsUSART+1,c
 10793  0003D6  0E82               	movlw	low STR_20
 10794  0003D8  6E1A               	movwf	?_putsUSART,c
 10795  0003DA  ECC1  F025         	call	_putsUSART	;wreg free
 10796                           
 10797                           ;main.c: 499: }
 10798  0003DE  EF8A  F009         	goto	l13133
 10799  0003E2                     l12619:
 10800                           
 10801                           ;main.c: 500: else if ( ( ECAN_OP_MODE_NORMAL == ifmode ) & bSilent ) {
 10802  0003E2  0103               	movlb	3	; () banked
 10803  0003E4  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10804  0003E6  0E01               	movlw	1
 10805  0003E8  A4D8               	btfss	status,2,c
 10806  0003EA  0E00               	movlw	0
 10807  0003EC  0100               	movlb	0	; () banked
 10808  0003EE  15D6               	andwf	_bSilent& (0+255),w,b
 10809  0003F0  E008               	bz	l12623
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;main.c: 501: putsUSART((char *) "+OK - Silent mode\r\n");
 10813  0003F2  0E7D               	movlw	high STR_21
 10814  0003F4  6E1B               	movwf	?_putsUSART+1,c
 10815  0003F6  0E96               	movlw	low STR_21
 10816  0003F8  6E1A               	movwf	?_putsUSART,c
 10817  0003FA  ECC1  F025         	call	_putsUSART	;wreg free
 10818                           
 10819                           ;main.c: 502: }
 10820  0003FE  EF8A  F009         	goto	l13133
 10821  000402                     l12623:
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;main.c: 503: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 10825  000402  0103               	movlb	3	; () banked
 10826  000404  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10827  000406  0A20               	xorlw	32
 10828  000408  E108               	bnz	l12627
 10829                           
 10830                           ; BSR set to: 3
 10831                           ;main.c: 504: putsUSART((char *) "+OK - Sleep mode\r\n");
 10832  00040A  0E7D               	movlw	high STR_22
 10833  00040C  6E1B               	movwf	?_putsUSART+1,c
 10834  00040E  0ED2               	movlw	low STR_22
 10835  000410  6E1A               	movwf	?_putsUSART,c
 10836  000412  ECC1  F025         	call	_putsUSART	;wreg free
 10837                           
 10838                           ;main.c: 505: }
 10839  000416  EF8A  F009         	goto	l13133
 10840  00041A                     l12627:
 10841                           
 10842                           ; BSR set to: 3
 10843                           ;main.c: 506: else if (ECAN_OP_MODE_LOOP == ifmode) {
 10844  00041A  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10845  00041C  0A40               	xorlw	64
 10846  00041E  E108               	bnz	l12631
 10847                           
 10848                           ; BSR set to: 3
 10849                           ;main.c: 507: putsUSART((char *) "+OK - Loopback mode\r\n");
 10850  000420  0E7D               	movlw	high STR_23
 10851  000422  6E1B               	movwf	?_putsUSART+1,c
 10852  000424  0E05               	movlw	low STR_23
 10853  000426  6E1A               	movwf	?_putsUSART,c
 10854  000428  ECC1  F025         	call	_putsUSART	;wreg free
 10855                           
 10856                           ;main.c: 508: }
 10857  00042C  EF8A  F009         	goto	l13133
 10858  000430                     l12631:
 10859                           
 10860                           ; BSR set to: 3
 10861                           ;main.c: 509: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 10862  000430  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10863  000432  0A60               	xorlw	96
 10864  000434  E108               	bnz	l12635
 10865                           
 10866                           ; BSR set to: 3
 10867                           ;main.c: 510: putsUSART((char *) "+OK - Listen only mode\r\n");
 10868  000436  0E7B               	movlw	high STR_24
 10869  000438  6E1B               	movwf	?_putsUSART+1,c
 10870  00043A  0ECE               	movlw	low STR_24
 10871  00043C  6E1A               	movwf	?_putsUSART,c
 10872  00043E  ECC1  F025         	call	_putsUSART	;wreg free
 10873                           
 10874                           ;main.c: 511: }
 10875  000442  EF8A  F009         	goto	l13133
 10876  000446                     l12635:
 10877                           
 10878                           ; BSR set to: 3
 10879                           ;main.c: 512: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 10880  000446  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10881  000448  0A80               	xorlw	128
 10882  00044A  E108               	bnz	l12639
 10883                           
 10884                           ; BSR set to: 3
 10885                           ;main.c: 513: putsUSART((char *) "+OK - Closed mode\r\n");
 10886  00044C  0E7D               	movlw	high STR_25
 10887  00044E  6E1B               	movwf	?_putsUSART+1,c
 10888  000450  0E6E               	movlw	low STR_25
 10889  000452  6E1A               	movwf	?_putsUSART,c
 10890  000454  ECC1  F025         	call	_putsUSART	;wreg free
 10891                           
 10892                           ;main.c: 514: }
 10893  000458  EF8A  F009         	goto	l13133
 10894  00045C                     l12639:
 10895                           
 10896                           ; BSR set to: 3
 10897                           ;main.c: 515: else if (ECAN_OP_MODE_BITS == ifmode) {
 10898  00045C  5136               	movf	doModeVerbose@ifmode& (0+255),w,b
 10899  00045E  0AE0               	xorlw	224
 10900  000460  E108               	bnz	l12643
 10901                           
 10902                           ; BSR set to: 3
 10903                           ;main.c: 516: putsUSART((char *) "+OK - Bits mode\r\n");
 10904  000462  0E7D               	movlw	high STR_26
 10905  000464  6E1B               	movwf	?_putsUSART+1,c
 10906  000466  0EE5               	movlw	low STR_26
 10907  000468  6E1A               	movwf	?_putsUSART,c
 10908  00046A  ECC1  F025         	call	_putsUSART	;wreg free
 10909                           
 10910                           ;main.c: 517: }
 10911  00046E  EF8A  F009         	goto	l13133
 10912  000472                     l12643:
 10913                           
 10914                           ; BSR set to: 3
 10915                           ;main.c: 518: else {
 10916                           ;main.c: 519: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 10917  000472  0E7C               	movlw	high STR_27
 10918  000474  6E1B               	movwf	?_putsUSART+1,c
 10919  000476  0E48               	movlw	low STR_27
 10920  000478  6E1A               	movwf	?_putsUSART,c
 10921  00047A  ECC1  F025         	call	_putsUSART	;wreg free
 10922  00047E  EF8A  F009         	goto	l13133
 10923  000482                     l12645:
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;main.c: 524: else if ( cmdbuf == stristr(cmdbuf, "TX")) {
 10927  000482  0101               	movlb	1	; () banked
 10928  000484  0E01               	movlw	high _cmdbuf
 10929  000486  6E27               	movwf	?_stristr+1,c
 10930  000488  0E20               	movlw	low _cmdbuf
 10931  00048A  6E26               	movwf	?_stristr,c
 10932  00048C  0E7F               	movlw	high STR_28
 10933  00048E  6E29               	movwf	?_stristr+3,c
 10934  000490  0EEA               	movlw	low STR_28
 10935  000492  6E28               	movwf	?_stristr+2,c
 10936  000494  EC56  F023         	call	_stristr	;wreg free
 10937  000498  EC9A  F009         	call	PL2	;call to abstracted procedure
 10938  00049C  E102               	bnz	u16615
 10939  00049E  5026               	movf	?_stristr,w,c
 10940  0004A0  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 10941  0004A2                     u16615:
 10942  0004A2  E001 D0D9          	bnz	l12699
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;main.c: 526: char *p = strtok(cmdbuf, ",");
 10946  0004A6  ECE8  F009         	call	PL30	;call to abstracted procedure
 10947  0004AA  ECFD  F021         	call	_strtok	;wreg free
 10948  0004AE  C025  F337         	movff	?_strtok,doModeVerbose@p
 10949  0004B2  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 10950                           
 10951                           ;main.c: 529: vscpPriority = 3;
 10952  0004B6  0E03               	movlw	3
 10953  0004B8  0100               	movlb	0	; () banked
 10954  0004BA  6FDD               	movwf	_vscpPriority& (0+255),b
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;main.c: 530: if ((0) != p) {
 10958  0004BC  0103               	movlb	3	; () banked
 10959  0004BE  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 10960  0004C0  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 10961  0004C2  E009               	bz	l12655
 10962                           
 10963                           ; BSR set to: 3
 10964                           ;main.c: 531: vscpPriority = atoi(p);
 10965  0004C4  C337  F01F         	movff	doModeVerbose@p,?_atoi
 10966  0004C8  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 10967  0004CC  EC4E  F01B         	call	_atoi	;wreg free
 10968  0004D0  501F               	movf	?_atoi,w,c
 10969  0004D2  0100               	movlb	0	; () banked
 10970  0004D4  6FDD               	movwf	_vscpPriority& (0+255),b
 10971  0004D6                     l12655:
 10972                           
 10973                           ;main.c: 532: }
 10974                           ;main.c: 535: vscpClass = 0;
 10975  0004D6  0100               	movlb	0	; () banked
 10976  0004D8  6BDA               	clrf	_vscpClass& (0+255),b
 10977  0004DA  6BDB               	clrf	(_vscpClass+1)& (0+255),b
 10978                           
 10979                           ; BSR set to: 0
 10980                           ;main.c: 536: if ((0) != (p = strtok((0), ","))) {
 10981  0004DC  ECA1  F009         	call	PL6	;call to abstracted procedure
 10982  0004E0  ECFD  F021         	call	_strtok	;wreg free
 10983  0004E4  C025  F337         	movff	?_strtok,doModeVerbose@p
 10984  0004E8  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 10985  0004EC  0103               	movlb	3	; () banked
 10986  0004EE  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 10987  0004F0  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 10988  0004F2  E00A               	bz	l12661
 10989                           
 10990                           ; BSR set to: 3
 10991                           ;main.c: 537: vscpClass = atoi(p);
 10992  0004F4  C337  F01F         	movff	doModeVerbose@p,?_atoi
 10993  0004F8  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 10994  0004FC  EC4E  F01B         	call	_atoi	;wreg free
 10995  000500  C01F  F0DA         	movff	?_atoi,_vscpClass
 10996  000504  C020  F0DB         	movff	?_atoi+1,_vscpClass+1
 10997  000508                     l12661:
 10998                           
 10999                           ;main.c: 538: }
 11000                           ;main.c: 541: vscpType = 0;
 11001  000508  0100               	movlb	0	; () banked
 11002  00050A  6BDF               	clrf	_vscpType& (0+255),b
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;main.c: 542: if ((0) != (p = strtok((0), ","))) {
 11006  00050C  ECA1  F009         	call	PL6	;call to abstracted procedure
 11007  000510  ECFD  F021         	call	_strtok	;wreg free
 11008  000514  C025  F337         	movff	?_strtok,doModeVerbose@p
 11009  000518  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11010  00051C  0103               	movlb	3	; () banked
 11011  00051E  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11012  000520  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11013  000522  E009               	bz	l12667
 11014                           
 11015                           ; BSR set to: 3
 11016                           ;main.c: 543: vscpType = atoi(p);
 11017  000524  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11018  000528  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11019  00052C  EC4E  F01B         	call	_atoi	;wreg free
 11020  000530  501F               	movf	?_atoi,w,c
 11021  000532  0100               	movlb	0	; () banked
 11022  000534  6FDF               	movwf	_vscpType& (0+255),b
 11023  000536                     l12667:
 11024                           
 11025                           ;main.c: 544: }
 11026                           ;main.c: 547: vscpNodeId = 0;
 11027  000536  0100               	movlb	0	; () banked
 11028  000538  6BDC               	clrf	_vscpNodeId& (0+255),b
 11029                           
 11030                           ; BSR set to: 0
 11031                           ;main.c: 548: if ((0) != (p = strtok((0), ","))) {
 11032  00053A  ECA1  F009         	call	PL6	;call to abstracted procedure
 11033  00053E  ECFD  F021         	call	_strtok	;wreg free
 11034  000542  C025  F337         	movff	?_strtok,doModeVerbose@p
 11035  000546  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11036  00054A  0103               	movlb	3	; () banked
 11037  00054C  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11038  00054E  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11039  000550  E009               	bz	l12673
 11040                           
 11041                           ; BSR set to: 3
 11042                           ;main.c: 549: vscpNodeId = atoi(p);
 11043  000552  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11044  000556  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11045  00055A  EC4E  F01B         	call	_atoi	;wreg free
 11046  00055E  501F               	movf	?_atoi,w,c
 11047  000560  0100               	movlb	0	; () banked
 11048  000562  6FDC               	movwf	_vscpNodeId& (0+255),b
 11049  000564                     l12673:
 11050                           
 11051                           ;main.c: 550: }
 11052                           ;main.c: 553: vscpSize = 0;
 11053  000564  0100               	movlb	0	; () banked
 11054  000566  6BDE               	clrf	_vscpSize& (0+255),b
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;main.c: 554: if ((0) != (p = strtok((0), ","))) {
 11058  000568  ECA1  F009         	call	PL6	;call to abstracted procedure
 11059  00056C  ECFD  F021         	call	_strtok	;wreg free
 11060  000570  C025  F337         	movff	?_strtok,doModeVerbose@p
 11061  000574  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11062  000578  0103               	movlb	3	; () banked
 11063  00057A  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11064  00057C  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11065  00057E  E009               	bz	l12679
 11066                           
 11067                           ; BSR set to: 3
 11068                           ;main.c: 555: vscpSize = atoi(p);
 11069  000580  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11070  000584  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11071  000588  EC4E  F01B         	call	_atoi	;wreg free
 11072  00058C  501F               	movf	?_atoi,w,c
 11073  00058E  0100               	movlb	0	; () banked
 11074  000590  6FDE               	movwf	_vscpSize& (0+255),b
 11075  000592                     l12679:
 11076                           
 11077                           ;main.c: 556: }
 11078                           ;main.c: 558: memset(vscpData, 0, 8);
 11079  000592  0E40               	movlw	low _vscpData
 11080  000594  6E19               	movwf	?_memset,c
 11081  000596  0E00               	movlw	high _vscpData
 11082  000598  6E1A               	movwf	?_memset+1,c
 11083  00059A  0E0F               	movlw	15
 11084  00059C  6E1A               	movwf	?_memset+1,c
 11085  00059E  0E5F               	movlw	__accesstop+-1
 11086  0005A0  6419               	cpfsgt	?_memset,c
 11087  0005A2  6A1A               	clrf	?_memset+1,c
 11088  0005A4  6A1C               	clrf	?_memset+3,c
 11089  0005A6  6A1B               	clrf	?_memset+2,c
 11090  0005A8  6A1E               	clrf	?_memset+5,c
 11091  0005AA  0E08               	movlw	8
 11092  0005AC  6E1D               	movwf	?_memset+4,c
 11093  0005AE  EC32  F028         	call	_memset	;wreg free
 11094                           
 11095                           ;main.c: 559: for (i = 0; i < vscpSize; i++) {
 11096  0005B2  0103               	movlb	3	; () banked
 11097  0005B4  6B2A               	clrf	doModeVerbose@i& (0+255),b
 11098  0005B6  D01A               	goto	l12689
 11099  0005B8                     l12683:
 11100                           
 11101                           ; BSR set to: 3
 11102                           ;main.c: 560: if ((0) != (p = strtok((0), ","))) {
 11103  0005B8  ECA1  F009         	call	PL6	;call to abstracted procedure
 11104  0005BC  ECFD  F021         	call	_strtok	;wreg free
 11105  0005C0  C025  F337         	movff	?_strtok,doModeVerbose@p
 11106  0005C4  C026  F338         	movff	?_strtok+1,doModeVerbose@p+1
 11107  0005C8  0103               	movlb	3	; () banked
 11108  0005CA  5138               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11109  0005CC  1137               	iorwf	doModeVerbose@p& (0+255),w,b
 11110  0005CE  E013               	bz	l12691
 11111                           
 11112                           ; BSR set to: 3
 11113                           ;main.c: 561: vscpData[ i ] = atoi(p);
 11114  0005D0  512A               	movf	doModeVerbose@i& (0+255),w,b
 11115  0005D2  0F40               	addlw	low _vscpData
 11116  0005D4  6ED9               	movwf	fsr2l,c
 11117  0005D6  6ADA               	clrf	fsr2h,c
 11118  0005D8  C337  F01F         	movff	doModeVerbose@p,?_atoi
 11119  0005DC  C338  F020         	movff	doModeVerbose@p+1,?_atoi+1
 11120  0005E0  EC4E  F01B         	call	_atoi	;wreg free
 11121  0005E4  501F               	movf	?_atoi,w,c
 11122  0005E6  6EDF               	movwf	indf2,c
 11123                           
 11124                           ;main.c: 562: }
 11125  0005E8  0103               	movlb	3	; () banked
 11126  0005EA  2B2A               	incf	doModeVerbose@i& (0+255),f,b
 11127  0005EC                     l12689:
 11128                           
 11129                           ; BSR set to: 3
 11130  0005EC  0100               	movlb	0	; () banked
 11131  0005EE  51DE               	movf	_vscpSize& (0+255),w,b
 11132  0005F0  0103               	movlb	3	; () banked
 11133  0005F2  5D2A               	subwf	doModeVerbose@i& (0+255),w,b
 11134  0005F4  E3E1               	bnc	l12683
 11135  0005F6                     l12691:
 11136                           
 11137                           ; BSR set to: 3
 11138                           ;main.c: 565: }
 11139                           ;main.c: 566: }
 11140                           ;main.c: 568: if ( sendVSCPFrame( vscpClass,
 11141                           ;main.c: 569: vscpType,
 11142                           ;main.c: 570: vscpNodeId,
 11143                           ;main.c: 571: vscpPriority,
 11144                           ;main.c: 572: vscpSize,
 11145                           ;main.c: 573: vscpData ) ) {
 11146  0005F6  C0DA  F083         	movff	_vscpClass,?_sendVSCPFrame
 11147  0005FA  C0DB  F084         	movff	_vscpClass+1,?_sendVSCPFrame+1
 11148  0005FE  C0DF  F085         	movff	_vscpType,?_sendVSCPFrame+2
 11149  000602  C0DC  F086         	movff	_vscpNodeId,?_sendVSCPFrame+3
 11150  000606  C0DD  F087         	movff	_vscpPriority,?_sendVSCPFrame+4
 11151  00060A  C0DE  F088         	movff	_vscpSize,?_sendVSCPFrame+5
 11152  00060E  0E40               	movlw	low _vscpData
 11153  000610  0100               	movlb	0	; () banked
 11154  000612  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 11155  000614  EC09  F020         	call	_sendVSCPFrame	;wreg free
 11156  000618  0900               	iorlw	0
 11157  00061A  E016               	bz	l12697
 11158                           
 11159                           ;main.c: 575: cntTxFrames++;
 11160  00061C  0101               	movlb	1	; () banked
 11161  00061E  2B14               	incf	_cntTxFrames& (0+255),f,b
 11162  000620  0E00               	movlw	0
 11163  000622  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 11164  000624  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 11165  000626  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 11166                           
 11167                           ;main.c: 576: cntTxBytes += vscpSize;
 11168  000628  0100               	movlb	0	; () banked
 11169  00062A  51DE               	movf	_vscpSize& (0+255),w,b
 11170  00062C  0101               	movlb	1	; () banked
 11171  00062E  2710               	addwf	_cntTxBytes& (0+255),f,b
 11172  000630  0E00               	movlw	0
 11173  000632  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 11174  000634  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 11175  000636  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 11176                           
 11177                           ; BSR set to: 1
 11178                           ;main.c: 577: putsUSART((char *) "+OK\r\n");
 11179  000638  0E7F               	movlw	high STR_8
 11180  00063A  6E1B               	movwf	?_putsUSART+1,c
 11181  00063C  0E7F               	movlw	low STR_8
 11182  00063E  6E1A               	movwf	?_putsUSART,c
 11183  000640  ECC1  F025         	call	_putsUSART	;wreg free
 11184                           
 11185                           ;main.c: 578: }
 11186  000644  EF8A  F009         	goto	l13133
 11187  000648                     l12697:
 11188                           
 11189                           ;main.c: 579: else {
 11190                           ;main.c: 580: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 11191  000648  0E7A               	movlw	high STR_36
 11192  00064A  6E1B               	movwf	?_putsUSART+1,c
 11193  00064C  0E48               	movlw	low STR_36
 11194  00064E  6E1A               	movwf	?_putsUSART,c
 11195  000650  ECC1  F025         	call	_putsUSART	;wreg free
 11196  000654  EF8A  F009         	goto	l13133
 11197  000658                     l12699:
 11198                           
 11199                           ; BSR set to: 0
 11200                           ;main.c: 584: else if ( cmdbuf == stristr(cmdbuf, "RX")) {
 11201  000658  0101               	movlb	1	; () banked
 11202  00065A  0E01               	movlw	high _cmdbuf
 11203  00065C  6E27               	movwf	?_stristr+1,c
 11204  00065E  0E20               	movlw	low _cmdbuf
 11205  000660  6E26               	movwf	?_stristr,c
 11206  000662  0E7F               	movlw	high STR_37
 11207  000664  6E29               	movwf	?_stristr+3,c
 11208  000666  0EE7               	movlw	low STR_37
 11209  000668  6E28               	movwf	?_stristr+2,c
 11210  00066A  EC56  F023         	call	_stristr	;wreg free
 11211  00066E  EC9A  F009         	call	PL2	;call to abstracted procedure
 11212  000672  E102               	bnz	u16705
 11213  000674  5026               	movf	?_stristr,w,c
 11214  000676  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11215  000678                     u16705:
 11216  000678  E114               	bnz	l12707
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;main.c: 585: if (receivePrintEventVerbose()) {
 11220  00067A  ECF3  F010         	call	_receivePrintEventVerbose	;wreg free
 11221  00067E  0900               	iorlw	0
 11222  000680  E008               	bz	l12705
 11223                           
 11224                           ;main.c: 586: putsUSART((char *) "+OK\r\n");
 11225  000682  0E7F               	movlw	high STR_8
 11226  000684  6E1B               	movwf	?_putsUSART+1,c
 11227  000686  0E7F               	movlw	low STR_8
 11228  000688  6E1A               	movwf	?_putsUSART,c
 11229  00068A  ECC1  F025         	call	_putsUSART	;wreg free
 11230                           
 11231                           ;main.c: 587: }
 11232  00068E  EF8A  F009         	goto	l13133
 11233  000692                     l12705:
 11234                           
 11235                           ;main.c: 588: else {
 11236                           ;main.c: 589: putsUSART((char *) "+OK - no events\r\n");
 11237  000692  0E7D               	movlw	high STR_39
 11238  000694  6E1B               	movwf	?_putsUSART+1,c
 11239  000696  0EF7               	movlw	low STR_39
 11240  000698  6E1A               	movwf	?_putsUSART,c
 11241  00069A  ECC1  F025         	call	_putsUSART	;wreg free
 11242  00069E  EF8A  F009         	goto	l13133
 11243  0006A2                     l12707:
 11244                           
 11245                           ; BSR set to: 0
 11246                           ;main.c: 593: else if ( cmdbuf == stristr(cmdbuf, "STAT")) {
 11247  0006A2  0101               	movlb	1	; () banked
 11248  0006A4  0E01               	movlw	high _cmdbuf
 11249  0006A6  6E27               	movwf	?_stristr+1,c
 11250  0006A8  0E20               	movlw	low _cmdbuf
 11251  0006AA  6E26               	movwf	?_stristr,c
 11252  0006AC  0E7F               	movlw	high STR_40
 11253  0006AE  6E29               	movwf	?_stristr+3,c
 11254  0006B0  0ECA               	movlw	low STR_40
 11255  0006B2  6E28               	movwf	?_stristr+2,c
 11256  0006B4  EC56  F023         	call	_stristr	;wreg free
 11257  0006B8  EC9A  F009         	call	PL2	;call to abstracted procedure
 11258  0006BC  E102               	bnz	u16725
 11259  0006BE  5026               	movf	?_stristr,w,c
 11260  0006C0  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11261  0006C2                     u16725:
 11262  0006C2  E104               	bnz	l12711
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;main.c: 594: printStatistics();
 11266  0006C4  ECEB  F014         	call	_printStatistics	;wreg free
 11267                           
 11268                           ;main.c: 595: }
 11269  0006C8  EF8A  F009         	goto	l13133
 11270  0006CC                     l12711:
 11271                           
 11272                           ; BSR set to: 0
 11273                           ;main.c: 597: else if ( cmdbuf == stristr(cmdbuf, "ERR")) {
 11274  0006CC  0101               	movlb	1	; () banked
 11275  0006CE  0E01               	movlw	high _cmdbuf
 11276  0006D0  6E27               	movwf	?_stristr+1,c
 11277  0006D2  0E20               	movlw	low _cmdbuf
 11278  0006D4  6E26               	movwf	?_stristr,c
 11279  0006D6  0E7F               	movlw	high STR_41
 11280  0006D8  6E29               	movwf	?_stristr+3,c
 11281  0006DA  0ED8               	movlw	low STR_41
 11282  0006DC  6E28               	movwf	?_stristr+2,c
 11283  0006DE  EC56  F023         	call	_stristr	;wreg free
 11284  0006E2  EC9A  F009         	call	PL2	;call to abstracted procedure
 11285  0006E6  E102               	bnz	u16735
 11286  0006E8  5026               	movf	?_stristr,w,c
 11287  0006EA  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11288  0006EC                     u16735:
 11289  0006EC  E104               	bnz	l12715
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;main.c: 598: printErrors();
 11293  0006EE  ECA6  F00F         	call	_printErrors	;wreg free
 11294                           
 11295                           ;main.c: 599: }
 11296  0006F2  EF8A  F009         	goto	l13133
 11297  0006F6                     l12715:
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;main.c: 601: else if ( cmdbuf == stristr(cmdbuf, "HELP")) {
 11301  0006F6  0101               	movlb	1	; () banked
 11302  0006F8  0E01               	movlw	high _cmdbuf
 11303  0006FA  6E27               	movwf	?_stristr+1,c
 11304  0006FC  0E20               	movlw	low _cmdbuf
 11305  0006FE  6E26               	movwf	?_stristr,c
 11306  000700  0E7F               	movlw	high STR_42
 11307  000702  6E29               	movwf	?_stristr+3,c
 11308  000704  0EC5               	movlw	low STR_42
 11309  000706  6E28               	movwf	?_stristr+2,c
 11310  000708  EC56  F023         	call	_stristr	;wreg free
 11311  00070C  EC9A  F009         	call	PL2	;call to abstracted procedure
 11312  000710  E102               	bnz	u16745
 11313  000712  5026               	movf	?_stristr,w,c
 11314  000714  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11315  000716                     u16745:
 11316  000716  E10A               	bnz	l12719
 11317                           
 11318                           ; BSR set to: 0
 11319                           ;main.c: 602: printHelp();
 11320  000718  ECAF  F015         	call	_printHelp	;wreg free
 11321                           
 11322                           ;main.c: 603: putsUSART((char *) "+OK\r\n");
 11323  00071C  0E7F               	movlw	high STR_8
 11324  00071E  6E1B               	movwf	?_putsUSART+1,c
 11325  000720  0E7F               	movlw	low STR_8
 11326  000722  6E1A               	movwf	?_putsUSART,c
 11327  000724  ECC1  F025         	call	_putsUSART	;wreg free
 11328                           
 11329                           ;main.c: 604: }
 11330  000728  EF8A  F009         	goto	l13133
 11331  00072C                     l12719:
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;main.c: 606: else if ( cmdbuf == stristr(cmdbuf, "FIND")) {
 11335  00072C  0101               	movlb	1	; () banked
 11336  00072E  0E01               	movlw	high _cmdbuf
 11337  000730  6E27               	movwf	?_stristr+1,c
 11338  000732  0E20               	movlw	low _cmdbuf
 11339  000734  6E26               	movwf	?_stristr,c
 11340  000736  0E7F               	movlw	high STR_44
 11341  000738  6E29               	movwf	?_stristr+3,c
 11342  00073A  0EA2               	movlw	low STR_44
 11343  00073C  6E28               	movwf	?_stristr+2,c
 11344  00073E  EC56  F023         	call	_stristr	;wreg free
 11345  000742  EC9A  F009         	call	PL2	;call to abstracted procedure
 11346  000746  E102               	bnz	u16755
 11347  000748  5026               	movf	?_stristr,w,c
 11348  00074A  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11349  00074C                     u16755:
 11350  00074C  E104               	bnz	l12723
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;main.c: 607: findNodes();
 11354  00074E  ECB7  F01C         	call	_findNodes	;wreg free
 11355                           
 11356                           ;main.c: 608: }
 11357  000752  EF8A  F009         	goto	l13133
 11358  000756                     l12723:
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;main.c: 611: else if ( cmdbuf == stristr(cmdbuf, "RREG")) {
 11362  000756  0101               	movlb	1	; () banked
 11363  000758  0E01               	movlw	high _cmdbuf
 11364  00075A  6E27               	movwf	?_stristr+1,c
 11365  00075C  0E20               	movlw	low _cmdbuf
 11366  00075E  6E26               	movwf	?_stristr,c
 11367  000760  0E7F               	movlw	high STR_45
 11368  000762  6E29               	movwf	?_stristr+3,c
 11369  000764  0EA7               	movlw	low STR_45
 11370  000766  6E28               	movwf	?_stristr+2,c
 11371  000768  EC56  F023         	call	_stristr	;wreg free
 11372  00076C  EC9A  F009         	call	PL2	;call to abstracted procedure
 11373  000770  E102               	bnz	u16765
 11374  000772  5026               	movf	?_stristr,w,c
 11375  000774  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11376  000776                     u16765:
 11377  000776  E001 D1AB          	bnz	l12853
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;main.c: 613: uint8_t i;
 11381                           ;main.c: 614: uint8_t nodeid;
 11382                           ;main.c: 615: uint8_t page = 0;
 11383  00077A  0103               	movlb	3	; () banked
 11384  00077C  6B2D               	clrf	doModeVerbose@page& (0+255),b
 11385                           
 11386                           ; BSR set to: 3
 11387                           ;main.c: 616: uint8_t reg;
 11388                           ;main.c: 617: uint8_t value;
 11389                           ;main.c: 618: uint8_t count = 1;
 11390  00077E  0E01               	movlw	1
 11391  000780  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11392                           
 11393                           ; BSR set to: 3
 11394                           ;main.c: 620: strcpy(cmdbuf, cmdbuf + 5);
 11395  000782  ECCD  F009         	call	PL10	;call to abstracted procedure
 11396  000786  EC04  F028         	call	_strcpy	;wreg free
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;main.c: 621: char *p = strtok(cmdbuf, " ");
 11400  00078A  0101               	movlb	1	; () banked
 11401  00078C  ECF2  F009         	call	PL34	;call to abstracted procedure
 11402  000790  ECFD  F021         	call	_strtok	;wreg free
 11403  000794  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11404  000798  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11405                           
 11406                           ;main.c: 622: if ((0) != p) {
 11407  00079C  0103               	movlb	3	; () banked
 11408  00079E  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11409  0007A0  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11410  0007A2  E00A               	bz	l12737
 11411                           
 11412                           ; BSR set to: 3
 11413                           ;main.c: 623: nodeid = atoi(p);
 11414  0007A4  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11415  0007A8  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11416  0007AC  EC4E  F01B         	call	_atoi	;wreg free
 11417  0007B0  501F               	movf	?_atoi,w,c
 11418  0007B2  0103               	movlb	3	; () banked
 11419  0007B4  6F0C               	movwf	doModeVerbose@nodeid& (0+255),b
 11420                           
 11421                           ;main.c: 624: }
 11422  0007B6  D008               	goto	l12741
 11423  0007B8                     l12737:
 11424                           
 11425                           ; BSR set to: 3
 11426                           ;main.c: 625: else {
 11427                           ;main.c: 626: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11428  0007B8  0E7C               	movlw	high STR_47
 11429  0007BA  6E1B               	movwf	?_putsUSART+1,c
 11430  0007BC  0E30               	movlw	low STR_47
 11431  0007BE  6E1A               	movwf	?_putsUSART,c
 11432  0007C0  ECC1  F025         	call	_putsUSART	;wreg free
 11433  0007C4  EF99  F009         	goto	l491
 11434  0007C8                     l12741:
 11435                           
 11436                           ; BSR set to: 3
 11437                           ;main.c: 628: }
 11438                           ;main.c: 630: if ((0) != (p = strtok((0), " "))) {
 11439  0007C8  ECFB  F009         	call	PL38	;call to abstracted procedure
 11440  0007CC  ECFD  F021         	call	_strtok	;wreg free
 11441  0007D0  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11442  0007D4  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11443  0007D8  0103               	movlb	3	; () banked
 11444  0007DA  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11445  0007DC  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11446  0007DE  E033               	bz	l12749
 11447                           
 11448                           ; BSR set to: 3
 11449                           ;main.c: 632: char *preg;
 11450                           ;main.c: 633: if (preg = strchr(p, ':')) {
 11451  0007E0  C332  F019         	movff	doModeVerbose@p_1070,?_strchr
 11452  0007E4  C333  F01A         	movff	doModeVerbose@p_1070+1,?_strchr+1
 11453  0007E8  6A1C               	clrf	?_strchr+3,c
 11454  0007EA  0E3A               	movlw	58
 11455  0007EC  6E1B               	movwf	?_strchr+2,c
 11456  0007EE  EC0F  F025         	call	_strchr	;wreg free
 11457  0007F2  C019  F304         	movff	?_strchr,doModeVerbose@preg
 11458  0007F6  C01A  F305         	movff	?_strchr+1,doModeVerbose@preg+1
 11459  0007FA  0103               	movlb	3	; () banked
 11460  0007FC  5105               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 11461  0007FE  1104               	iorwf	doModeVerbose@preg& (0+255),w,b
 11462  000800  E018               	bz	l12747
 11463                           
 11464                           ; BSR set to: 3
 11465                           ;main.c: 634: page = atoi(p);
 11466  000802  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11467  000806  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11468  00080A  EC4E  F01B         	call	_atoi	;wreg free
 11469  00080E  501F               	movf	?_atoi,w,c
 11470  000810  0103               	movlb	3	; () banked
 11471  000812  6F2D               	movwf	doModeVerbose@page& (0+255),b
 11472                           
 11473                           ;main.c: 635: reg = atoi(preg + 1);
 11474  000814  2904               	incf	doModeVerbose@preg& (0+255),w,b
 11475  000816  0100               	movlb	0	; () banked
 11476  000818  6FB1               	movwf	??_doModeVerbose& (0+255),b
 11477  00081A  0E00               	movlw	0
 11478  00081C  0103               	movlb	3	; () banked
 11479  00081E  2105               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 11480  000820  0100               	movlb	0	; () banked
 11481  000822  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11482  000824  C0B1  F01F         	movff	??_doModeVerbose,?_atoi
 11483  000828  C0B2  F020         	movff	??_doModeVerbose+1,?_atoi+1
 11484  00082C  EC4E  F01B         	call	_atoi	;wreg free
 11485  000830  D006               	goto	L5
 11486  000832                     l12747:
 11487                           
 11488                           ; BSR set to: 3
 11489                           ;main.c: 637: else {
 11490                           ;main.c: 638: reg = atoi(p);
 11491  000832  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11492  000836  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11493  00083A  EC4E  F01B         	call	_atoi	;wreg free
 11494  00083E                     L5:
 11495  00083E  501F               	movf	?_atoi,w,c
 11496  000840  0103               	movlb	3	; () banked
 11497  000842  6F2E               	movwf	doModeVerbose@reg& (0+255),b
 11498  000844  D008               	goto	l12753
 11499  000846                     l12749:
 11500                           
 11501                           ; BSR set to: 3
 11502                           ;main.c: 643: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 11503  000846  0E7A               	movlw	high STR_49
 11504  000848  6E1B               	movwf	?_putsUSART+1,c
 11505  00084A  0EAB               	movlw	low STR_49
 11506  00084C  6E1A               	movwf	?_putsUSART,c
 11507  00084E  ECC1  F025         	call	_putsUSART	;wreg free
 11508  000852  EF99  F009         	goto	l491
 11509  000856                     l12753:
 11510                           
 11511                           ; BSR set to: 3
 11512                           ;main.c: 645: }
 11513                           ;main.c: 648: if ((0) != (p = strtok((0), " "))) {
 11514  000856  ECFB  F009         	call	PL38	;call to abstracted procedure
 11515  00085A  ECFD  F021         	call	_strtok	;wreg free
 11516  00085E  C025  F332         	movff	?_strtok,doModeVerbose@p_1070
 11517  000862  C026  F333         	movff	?_strtok+1,doModeVerbose@p_1070+1
 11518  000866  0103               	movlb	3	; () banked
 11519  000868  5133               	movf	(doModeVerbose@p_1070+1)& (0+255),w,b
 11520  00086A  1132               	iorwf	doModeVerbose@p_1070& (0+255),w,b
 11521  00086C  E00D               	bz	l496
 11522                           
 11523                           ; BSR set to: 3
 11524                           ;main.c: 649: count = atoi(p);
 11525  00086E  C332  F01F         	movff	doModeVerbose@p_1070,?_atoi
 11526  000872  C333  F020         	movff	doModeVerbose@p_1070+1,?_atoi+1
 11527  000876  EC4E  F01B         	call	_atoi	;wreg free
 11528  00087A  501F               	movf	?_atoi,w,c
 11529  00087C  0103               	movlb	3	; () banked
 11530  00087E  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11531                           
 11532                           ; BSR set to: 3
 11533                           ;main.c: 650: if (0 == count) count = 1;
 11534  000880  672B               	tstfsz	doModeVerbose@count& (0+255),b
 11535  000882  D002               	goto	l496
 11536                           
 11537                           ; BSR set to: 3
 11538  000884  0E01               	movlw	1
 11539  000886  6F2B               	movwf	doModeVerbose@count& (0+255),b
 11540  000888                     l496:
 11541                           
 11542                           ; BSR set to: 3
 11543                           ;main.c: 651: }
 11544                           ;main.c: 653: BOOL rv = 1;
 11545  000888  0E01               	movlw	1
 11546  00088A  6F20               	movwf	doModeVerbose@rv& (0+255),b
 11547                           
 11548                           ; BSR set to: 3
 11549                           ;main.c: 654: for (i = 0; i < count; i++) {
 11550  00088C  6B30               	clrf	doModeVerbose@i_1064& (0+255),b
 11551  00088E  D10A               	goto	l12845
 11552  000890                     l12763:
 11553                           
 11554                           ; BSR set to: 3
 11555                           ;main.c: 656: if ( readRegisterExtended(nodeid,
 11556                           ;main.c: 657: page,
 11557                           ;main.c: 658: (reg + i) & 0xff,
 11558                           ;main.c: 659: rwtimeout,
 11559                           ;main.c: 660: &value)) {
 11560  000890  0100               	movlb	0	; () banked
 11561  000892  C32D  F09E         	movff	doModeVerbose@page,?_readRegisterExtended
 11562  000896  6B9F               	clrf	(?_readRegisterExtended+1)& (0+255),b
 11563  000898  0103               	movlb	3	; () banked
 11564  00089A  512E               	movf	doModeVerbose@reg& (0+255),w,b
 11565  00089C  2530               	addwf	doModeVerbose@i_1064& (0+255),w,b
 11566  00089E  0100               	movlb	0	; () banked
 11567  0008A0  6FA0               	movwf	(?_readRegisterExtended+2)& (0+255),b
 11568  0008A2  C0D9  F0A1         	movff	_rwtimeout,?_readRegisterExtended+3
 11569  0008A6  6BA2               	clrf	(?_readRegisterExtended+4)& (0+255),b
 11570  0008A8  0E03               	movlw	high doModeVerbose@value
 11571  0008AA  6FA4               	movwf	(?_readRegisterExtended+6)& (0+255),b
 11572  0008AC  0E31               	movlw	low doModeVerbose@value
 11573  0008AE  6FA3               	movwf	(?_readRegisterExtended+5)& (0+255),b
 11574  0008B0  0103               	movlb	3	; () banked
 11575  0008B2  510C               	movf	doModeVerbose@nodeid& (0+255),w,b
 11576  0008B4  EC72  F01E         	call	_readRegisterExtended
 11577  0008B8  0900               	iorlw	0
 11578  0008BA  E101 D09B          	bz	l500
 11579                           
 11580                           ;main.c: 661: putsUSART((char *) "Value for reg ");
 11581  0008BE  0E7E               	movlw	high STR_51
 11582  0008C0  6E1B               	movwf	?_putsUSART+1,c
 11583  0008C2  0E5D               	movlw	low STR_51
 11584  0008C4  6E1A               	movwf	?_putsUSART,c
 11585  0008C6  ECC1  F025         	call	_putsUSART	;wreg free
 11586                           
 11587                           ;main.c: 662: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", page );
 11588  0008CA  0100               	movlb	0	; () banked
 11589  0008CC  67D3               	tstfsz	_bHex& (0+255),b
 11590  0008CE  D005               	goto	l12771
 11591                           
 11592                           ; BSR set to: 0
 11593  0008D0  0E7F               	movlw	high STR_53
 11594  0008D2  0103               	movlb	3	; () banked
 11595  0008D4  6F15               	movwf	(_doModeVerbose$1082+1)& (0+255),b
 11596  0008D6  0EED               	movlw	low STR_53
 11597  0008D8  D004               	goto	L6
 11598  0008DA                     l12771:
 11599                           
 11600                           ; BSR set to: 0
 11601  0008DA  0E7F               	movlw	high STR_52
 11602  0008DC  0103               	movlb	3	; () banked
 11603  0008DE  6F15               	movwf	(_doModeVerbose$1082+1)& (0+255),b
 11604  0008E0  0E64               	movlw	low STR_52
 11605  0008E2                     L6:
 11606  0008E2  6F14               	movwf	_doModeVerbose$1082& (0+255),b
 11607                           
 11608                           ; BSR set to: 3
 11609  0008E4  0E01               	movlw	high _wrkbuf
 11610  0008E6  0100               	movlb	0	; () banked
 11611  0008E8  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11612  0008EA  0E70               	movlw	low _wrkbuf
 11613  0008EC  6F60               	movwf	?_sprintf& (0+255),b
 11614  0008EE  C314  F062         	movff	_doModeVerbose$1082,?_sprintf+2
 11615  0008F2  C315  F063         	movff	_doModeVerbose$1082+1,?_sprintf+3
 11616  0008F6  C32D  F064         	movff	doModeVerbose@page,?_sprintf+4
 11617  0008FA  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11618  0008FC  EC33  F00A         	call	_sprintf	;wreg free
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;main.c: 663: putsUSART(wrkbuf);
 11622  000900  0101               	movlb	1	; () banked
 11623  000902  0E01               	movlw	high _wrkbuf
 11624  000904  6E1B               	movwf	?_putsUSART+1,c
 11625  000906  0E70               	movlw	low _wrkbuf
 11626  000908  6E1A               	movwf	?_putsUSART,c
 11627  00090A  ECC1  F025         	call	_putsUSART	;wreg free
 11628  00090E                     l505:
 11629  00090E  A2AC               	btfss	4012,1,c	;volatile
 11630  000910  D7FE               	goto	l505
 11631                           
 11632                           ;main.c: 665: WriteUSART(':');
 11633  000912  0E3A               	movlw	58
 11634  000914  EC9F  F028         	call	_WriteUSART
 11635                           
 11636                           ;main.c: 666: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff );
 11637  000918  0100               	movlb	0	; () banked
 11638  00091A  67D3               	tstfsz	_bHex& (0+255),b
 11639  00091C  D005               	goto	l12783
 11640                           
 11641                           ; BSR set to: 0
 11642  00091E  0E7F               	movlw	high STR_53
 11643  000920  0103               	movlb	3	; () banked
 11644  000922  6F17               	movwf	(_doModeVerbose$1094+1)& (0+255),b
 11645  000924  0EED               	movlw	low STR_53
 11646  000926  D004               	goto	L7
 11647  000928                     l12783:
 11648                           
 11649                           ; BSR set to: 0
 11650  000928  0E7F               	movlw	high STR_52
 11651  00092A  0103               	movlb	3	; () banked
 11652  00092C  6F17               	movwf	(_doModeVerbose$1094+1)& (0+255),b
 11653  00092E  0E64               	movlw	low STR_52
 11654  000930                     L7:
 11655  000930  6F16               	movwf	_doModeVerbose$1094& (0+255),b
 11656                           
 11657                           ; BSR set to: 3
 11658  000932  0E01               	movlw	high _wrkbuf
 11659  000934  0100               	movlb	0	; () banked
 11660  000936  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11661  000938  0E70               	movlw	low _wrkbuf
 11662  00093A  6F60               	movwf	?_sprintf& (0+255),b
 11663  00093C  C316  F062         	movff	_doModeVerbose$1094,?_sprintf+2
 11664  000940  C317  F063         	movff	_doModeVerbose$1094+1,?_sprintf+3
 11665  000944  EC02  F00A         	call	PL42	;call to abstracted procedure
 11666  000948  EC33  F00A         	call	_sprintf	;wreg free
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;main.c: 667: putsUSART(wrkbuf);
 11670  00094C  0101               	movlb	1	; () banked
 11671  00094E  0E01               	movlw	high _wrkbuf
 11672  000950  6E1B               	movwf	?_putsUSART+1,c
 11673  000952  0E70               	movlw	low _wrkbuf
 11674  000954  6E1A               	movwf	?_putsUSART,c
 11675  000956  ECC1  F025         	call	_putsUSART	;wreg free
 11676                           
 11677                           ;main.c: 668: putsUSART((char *) " = ");
 11678  00095A  0E7E               	movlw	high (STR_234+4)
 11679  00095C  6E1B               	movwf	?_putsUSART+1,c
 11680  00095E  0EE9               	movlw	low (STR_234+4)
 11681  000960  6E1A               	movwf	?_putsUSART,c
 11682  000962  ECC1  F025         	call	_putsUSART	;wreg free
 11683                           
 11684                           ;main.c: 669: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", value );
 11685  000966  0100               	movlb	0	; () banked
 11686  000968  67D3               	tstfsz	_bHex& (0+255),b
 11687  00096A  D005               	goto	l12795
 11688                           
 11689                           ; BSR set to: 0
 11690  00096C  0E7F               	movlw	high STR_53
 11691  00096E  0103               	movlb	3	; () banked
 11692  000970  6F19               	movwf	(_doModeVerbose$1099+1)& (0+255),b
 11693  000972  0EED               	movlw	low STR_53
 11694  000974  D004               	goto	L8
 11695  000976                     l12795:
 11696                           
 11697                           ; BSR set to: 0
 11698  000976  0E7F               	movlw	high STR_52
 11699  000978  0103               	movlb	3	; () banked
 11700  00097A  6F19               	movwf	(_doModeVerbose$1099+1)& (0+255),b
 11701  00097C  0E64               	movlw	low STR_52
 11702  00097E                     L8:
 11703  00097E  6F18               	movwf	_doModeVerbose$1099& (0+255),b
 11704                           
 11705                           ; BSR set to: 3
 11706  000980  0E01               	movlw	high _wrkbuf
 11707  000982  0100               	movlb	0	; () banked
 11708  000984  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11709  000986  0E70               	movlw	low _wrkbuf
 11710  000988  6F60               	movwf	?_sprintf& (0+255),b
 11711  00098A  C318  F062         	movff	_doModeVerbose$1099,?_sprintf+2
 11712  00098E  C319  F063         	movff	_doModeVerbose$1099+1,?_sprintf+3
 11713  000992  C331  F064         	movff	doModeVerbose@value,?_sprintf+4
 11714  000996  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11715  000998  EC33  F00A         	call	_sprintf	;wreg free
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;main.c: 670: putsUSART(wrkbuf);
 11719  00099C  0101               	movlb	1	; () banked
 11720  00099E  0E01               	movlw	high _wrkbuf
 11721  0009A0  6E1B               	movwf	?_putsUSART+1,c
 11722  0009A2  0E70               	movlw	low _wrkbuf
 11723  0009A4  6E1A               	movwf	?_putsUSART,c
 11724  0009A6  ECC1  F025         	call	_putsUSART	;wreg free
 11725  0009AA                     l516:
 11726  0009AA  A2AC               	btfss	4012,1,c	;volatile
 11727  0009AC  D7FE               	goto	l516
 11728                           
 11729                           ;main.c: 672: WriteUSART(' ');
 11730  0009AE  0E20               	movlw	32
 11731  0009B0  EC9F  F028         	call	_WriteUSART
 11732  0009B4                     l519:
 11733  0009B4  A2AC               	btfss	4012,1,c	;volatile
 11734  0009B6  D7FE               	goto	l519
 11735                           
 11736                           ;main.c: 674: if ((value > 32) && (value < 127)) {
 11737  0009B8  0E20               	movlw	32
 11738  0009BA  0103               	movlb	3	; () banked
 11739  0009BC  6531               	cpfsgt	doModeVerbose@value& (0+255),b
 11740  0009BE  D007               	goto	l12809
 11741                           
 11742                           ; BSR set to: 3
 11743  0009C0  0E7F               	movlw	127
 11744  0009C2  6131               	cpfslt	doModeVerbose@value& (0+255),b
 11745  0009C4  D004               	goto	l12809
 11746                           
 11747                           ; BSR set to: 3
 11748                           ;main.c: 675: WriteUSART(value);
 11749  0009C6  5131               	movf	doModeVerbose@value& (0+255),w,b
 11750  0009C8  EC9F  F028         	call	_WriteUSART
 11751                           
 11752                           ;main.c: 676: }
 11753  0009CC  D003               	goto	l524
 11754  0009CE                     l12809:
 11755                           
 11756                           ; BSR set to: 3
 11757                           ;main.c: 677: else {
 11758                           ;main.c: 678: WriteUSART('.');
 11759  0009CE  0E2E               	movlw	46
 11760  0009D0  EC9F  F028         	call	_WriteUSART
 11761  0009D4                     l524:
 11762  0009D4  A2AC               	btfss	4012,1,c	;volatile
 11763  0009D6  D7FE               	goto	l524
 11764                           
 11765                           ;main.c: 681: WriteUSART(' ');
 11766  0009D8  0E20               	movlw	32
 11767  0009DA  EC9F  F028         	call	_WriteUSART
 11768                           
 11769                           ;main.c: 682: printBinary(value);
 11770  0009DE  0103               	movlb	3	; () banked
 11771  0009E0  5131               	movf	doModeVerbose@value& (0+255),w,b
 11772  0009E2  EC37  F026         	call	_printBinary
 11773                           
 11774                           ;main.c: 683: putsUSART((char *) "\r\n");
 11775  0009E6  0E74               	movlw	high (STR_188+50)
 11776  0009E8  6E1B               	movwf	?_putsUSART+1,c
 11777  0009EA  0EB2               	movlw	low (STR_188+50)
 11778  0009EC  6E1A               	movwf	?_putsUSART,c
 11779  0009EE  ECC1  F025         	call	_putsUSART	;wreg free
 11780                           
 11781                           ;main.c: 684: }
 11782  0009F2  D056               	goto	l12843
 11783  0009F4                     l500:
 11784                           
 11785                           ;main.c: 685: else {
 11786                           ;main.c: 686: rv = 0;
 11787  0009F4  0103               	movlb	3	; () banked
 11788  0009F6  6B20               	clrf	doModeVerbose@rv& (0+255),b
 11789                           
 11790                           ; BSR set to: 3
 11791                           ;main.c: 687: putsUSART((char *) "-ERROR - Unable to read register ");
 11792  0009F8  0E7A               	movlw	high STR_60
 11793  0009FA  6E1B               	movwf	?_putsUSART+1,c
 11794  0009FC  0E05               	movlw	low STR_60
 11795  0009FE  6E1A               	movwf	?_putsUSART,c
 11796  000A00  ECC1  F025         	call	_putsUSART	;wreg free
 11797                           
 11798                           ;main.c: 688: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", page );
 11799  000A04  0100               	movlb	0	; () banked
 11800  000A06  67D3               	tstfsz	_bHex& (0+255),b
 11801  000A08  D005               	goto	l12823
 11802                           
 11803                           ; BSR set to: 0
 11804  000A0A  0E7F               	movlw	high STR_53
 11805  000A0C  0103               	movlb	3	; () banked
 11806  000A0E  6F1B               	movwf	(_doModeVerbose$1105+1)& (0+255),b
 11807  000A10  0EED               	movlw	low STR_53
 11808  000A12  D004               	goto	L9
 11809  000A14                     l12823:
 11810                           
 11811                           ; BSR set to: 0
 11812  000A14  0E7F               	movlw	high STR_52
 11813  000A16  0103               	movlb	3	; () banked
 11814  000A18  6F1B               	movwf	(_doModeVerbose$1105+1)& (0+255),b
 11815  000A1A  0E64               	movlw	low STR_52
 11816  000A1C                     L9:
 11817  000A1C  6F1A               	movwf	_doModeVerbose$1105& (0+255),b
 11818                           
 11819                           ; BSR set to: 3
 11820  000A1E  0E01               	movlw	high _wrkbuf
 11821  000A20  0100               	movlb	0	; () banked
 11822  000A22  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11823  000A24  0E70               	movlw	low _wrkbuf
 11824  000A26  6F60               	movwf	?_sprintf& (0+255),b
 11825  000A28  C31A  F062         	movff	_doModeVerbose$1105,?_sprintf+2
 11826  000A2C  C31B  F063         	movff	_doModeVerbose$1105+1,?_sprintf+3
 11827  000A30  C32D  F064         	movff	doModeVerbose@page,?_sprintf+4
 11828  000A34  6B65               	clrf	(?_sprintf+5)& (0+255),b
 11829  000A36  EC33  F00A         	call	_sprintf	;wreg free
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;main.c: 689: putsUSART(wrkbuf);
 11833  000A3A  0101               	movlb	1	; () banked
 11834  000A3C  0E01               	movlw	high _wrkbuf
 11835  000A3E  6E1B               	movwf	?_putsUSART+1,c
 11836  000A40  0E70               	movlw	low _wrkbuf
 11837  000A42  6E1A               	movwf	?_putsUSART,c
 11838  000A44  ECC1  F025         	call	_putsUSART	;wreg free
 11839  000A48                     l532:
 11840  000A48  A2AC               	btfss	4012,1,c	;volatile
 11841  000A4A  D7FE               	goto	l532
 11842                           
 11843                           ;main.c: 691: WriteUSART(':');
 11844  000A4C  0E3A               	movlw	58
 11845  000A4E  EC9F  F028         	call	_WriteUSART
 11846                           
 11847                           ;main.c: 692: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff );
 11848  000A52  0100               	movlb	0	; () banked
 11849  000A54  67D3               	tstfsz	_bHex& (0+255),b
 11850  000A56  D005               	goto	l12835
 11851                           
 11852                           ; BSR set to: 0
 11853  000A58  0E7F               	movlw	high STR_53
 11854  000A5A  0103               	movlb	3	; () banked
 11855  000A5C  6F1D               	movwf	(_doModeVerbose$1109+1)& (0+255),b
 11856  000A5E  0EED               	movlw	low STR_53
 11857  000A60  D004               	goto	L10
 11858  000A62                     l12835:
 11859                           
 11860                           ; BSR set to: 0
 11861  000A62  0E7F               	movlw	high STR_52
 11862  000A64  0103               	movlb	3	; () banked
 11863  000A66  6F1D               	movwf	(_doModeVerbose$1109+1)& (0+255),b
 11864  000A68  0E64               	movlw	low STR_52
 11865  000A6A                     L10:
 11866  000A6A  6F1C               	movwf	_doModeVerbose$1109& (0+255),b
 11867                           
 11868                           ; BSR set to: 3
 11869  000A6C  0E01               	movlw	high _wrkbuf
 11870  000A6E  0100               	movlb	0	; () banked
 11871  000A70  6F61               	movwf	(?_sprintf+1)& (0+255),b
 11872  000A72  0E70               	movlw	low _wrkbuf
 11873  000A74  6F60               	movwf	?_sprintf& (0+255),b
 11874  000A76  C31C  F062         	movff	_doModeVerbose$1109,?_sprintf+2
 11875  000A7A  C31D  F063         	movff	_doModeVerbose$1109+1,?_sprintf+3
 11876  000A7E  EC02  F00A         	call	PL42	;call to abstracted procedure
 11877  000A82  EC33  F00A         	call	_sprintf	;wreg free
 11878                           
 11879                           ; BSR set to: 0
 11880                           ;main.c: 693: putsUSART(wrkbuf);
 11881  000A86  0101               	movlb	1	; () banked
 11882  000A88  0E01               	movlw	high _wrkbuf
 11883  000A8A  6E1B               	movwf	?_putsUSART+1,c
 11884  000A8C  0E70               	movlw	low _wrkbuf
 11885  000A8E  6E1A               	movwf	?_putsUSART,c
 11886  000A90  ECC1  F025         	call	_putsUSART	;wreg free
 11887                           
 11888                           ;main.c: 694: putsUSART((char *) "\r\n");
 11889  000A94  0E74               	movlw	high (STR_188+50)
 11890  000A96  6E1B               	movwf	?_putsUSART+1,c
 11891  000A98  0EB2               	movlw	low (STR_188+50)
 11892  000A9A  6E1A               	movwf	?_putsUSART,c
 11893  000A9C  ECC1  F025         	call	_putsUSART	;wreg free
 11894  000AA0                     l12843:
 11895  000AA0  0103               	movlb	3	; () banked
 11896  000AA2  2B30               	incf	doModeVerbose@i_1064& (0+255),f,b
 11897  000AA4                     l12845:
 11898                           
 11899                           ; BSR set to: 3
 11900  000AA4  512B               	movf	doModeVerbose@count& (0+255),w,b
 11901  000AA6  5D30               	subwf	doModeVerbose@i_1064& (0+255),w,b
 11902  000AA8  E201 D6F2          	bnc	l12763
 11903                           
 11904                           ; BSR set to: 3
 11905                           ;main.c: 695: }
 11906                           ;main.c: 696: }
 11907                           ;main.c: 698: if (rv) {
 11908  000AAC  5120               	movf	doModeVerbose@rv& (0+255),w,b
 11909  000AAE  E008               	bz	l12851
 11910                           
 11911                           ; BSR set to: 3
 11912                           ;main.c: 699: putsUSART((char *) "+OK\r\n");
 11913  000AB0  0E7F               	movlw	high STR_8
 11914  000AB2  6E1B               	movwf	?_putsUSART+1,c
 11915  000AB4  0E7F               	movlw	low STR_8
 11916  000AB6  6E1A               	movwf	?_putsUSART,c
 11917  000AB8  ECC1  F025         	call	_putsUSART	;wreg free
 11918                           
 11919                           ;main.c: 700: }
 11920  000ABC  EF8A  F009         	goto	l13133
 11921  000AC0                     l12851:
 11922                           
 11923                           ; BSR set to: 3
 11924                           ;main.c: 701: else {
 11925                           ;main.c: 702: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 11926  000AC0  0E74               	movlw	high STR_67
 11927  000AC2  6E1B               	movwf	?_putsUSART+1,c
 11928  000AC4  0E4A               	movlw	low STR_67
 11929  000AC6  6E1A               	movwf	?_putsUSART,c
 11930  000AC8  ECC1  F025         	call	_putsUSART	;wreg free
 11931  000ACC  EF8A  F009         	goto	l13133
 11932  000AD0                     l12853:
 11933                           
 11934                           ; BSR set to: 0
 11935                           ;main.c: 708: else if ( cmdbuf == stristr(cmdbuf, "WREG")) {
 11936  000AD0  0101               	movlb	1	; () banked
 11937  000AD2  0E01               	movlw	high _cmdbuf
 11938  000AD4  6E27               	movwf	?_stristr+1,c
 11939  000AD6  0E20               	movlw	low _cmdbuf
 11940  000AD8  6E26               	movwf	?_stristr,c
 11941  000ADA  0E7F               	movlw	high STR_68
 11942  000ADC  6E29               	movwf	?_stristr+3,c
 11943  000ADE  0EAC               	movlw	low STR_68
 11944  000AE0  6E28               	movwf	?_stristr+2,c
 11945  000AE2  EC56  F023         	call	_stristr	;wreg free
 11946  000AE6  EC9A  F009         	call	PL2	;call to abstracted procedure
 11947  000AEA  E102               	bnz	u16975
 11948  000AEC  5026               	movf	?_stristr,w,c
 11949  000AEE  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 11950  000AF0                     u16975:
 11951  000AF0  E001 D0A8          	bnz	l12895
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;main.c: 710: uint8_t nodeid;
 11955                           ;main.c: 711: uint8_t page = 0;
 11956  000AF4  0103               	movlb	3	; () banked
 11957  000AF6  6B21               	clrf	doModeVerbose@page_1115& (0+255),b
 11958                           
 11959                           ; BSR set to: 3
 11960                           ;main.c: 712: uint8_t reg;
 11961                           ;main.c: 713: uint8_t value;
 11962                           ;main.c: 715: strcpy( cmdbuf, cmdbuf + 5);
 11963  000AF8  ECCD  F009         	call	PL10	;call to abstracted procedure
 11964  000AFC  EC04  F028         	call	_strcpy	;wreg free
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;main.c: 716: char *p = strtok(cmdbuf, " ");
 11968  000B00  0101               	movlb	1	; () banked
 11969  000B02  ECF2  F009         	call	PL34	;call to abstracted procedure
 11970  000B06  ECFD  F021         	call	_strtok	;wreg free
 11971  000B0A  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 11972  000B0E  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 11973                           
 11974                           ;main.c: 717: if ((0) != p) {
 11975  000B12  0103               	movlb	3	; () banked
 11976  000B14  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 11977  000B16  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 11978  000B18  E00A               	bz	l12865
 11979                           
 11980                           ; BSR set to: 3
 11981                           ;main.c: 718: nodeid = atoi(p);
 11982  000B1A  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 11983  000B1E  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 11984  000B22  EC4E  F01B         	call	_atoi	;wreg free
 11985  000B26  501F               	movf	?_atoi,w,c
 11986  000B28  0103               	movlb	3	; () banked
 11987  000B2A  6F0D               	movwf	doModeVerbose@nodeid_1114& (0+255),b
 11988                           
 11989                           ;main.c: 719: }
 11990  000B2C  D007               	goto	l12869
 11991  000B2E                     l12865:
 11992                           
 11993                           ; BSR set to: 3
 11994                           ;main.c: 720: else {
 11995                           ;main.c: 721: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11996  000B2E  0E7C               	movlw	high STR_47
 11997  000B30  6E1B               	movwf	?_putsUSART+1,c
 11998  000B32  0E30               	movlw	low STR_47
 11999  000B34  6E1A               	movwf	?_putsUSART,c
 12000  000B36  ECC1  F025         	call	_putsUSART	;wreg free
 12001  000B3A  D3FB               	goto	l491
 12002  000B3C                     l12869:
 12003                           
 12004                           ; BSR set to: 3
 12005                           ;main.c: 723: }
 12006                           ;main.c: 725: if ((0) != (p = strtok((0), " "))) {
 12007  000B3C  ECFB  F009         	call	PL38	;call to abstracted procedure
 12008  000B40  ECFD  F021         	call	_strtok	;wreg free
 12009  000B44  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 12010  000B48  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 12011  000B4C  0103               	movlb	3	; () banked
 12012  000B4E  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 12013  000B50  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 12014  000B52  E033               	bz	l12877
 12015                           
 12016                           ; BSR set to: 3
 12017                           ;main.c: 727: char *preg;
 12018                           ;main.c: 728: if (preg = strchr(p, ':')) {
 12019  000B54  C334  F019         	movff	doModeVerbose@p_1118,?_strchr
 12020  000B58  C335  F01A         	movff	doModeVerbose@p_1118+1,?_strchr+1
 12021  000B5C  6A1C               	clrf	?_strchr+3,c
 12022  000B5E  0E3A               	movlw	58
 12023  000B60  6E1B               	movwf	?_strchr+2,c
 12024  000B62  EC0F  F025         	call	_strchr	;wreg free
 12025  000B66  C019  F306         	movff	?_strchr,doModeVerbose@preg_1122
 12026  000B6A  C01A  F307         	movff	?_strchr+1,doModeVerbose@preg_1122+1
 12027  000B6E  0103               	movlb	3	; () banked
 12028  000B70  5107               	movf	(doModeVerbose@preg_1122+1)& (0+255),w,b
 12029  000B72  1106               	iorwf	doModeVerbose@preg_1122& (0+255),w,b
 12030  000B74  E018               	bz	l12875
 12031                           
 12032                           ; BSR set to: 3
 12033                           ;main.c: 729: page = atoi(p);
 12034  000B76  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12035  000B7A  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12036  000B7E  EC4E  F01B         	call	_atoi	;wreg free
 12037  000B82  501F               	movf	?_atoi,w,c
 12038  000B84  0103               	movlb	3	; () banked
 12039  000B86  6F21               	movwf	doModeVerbose@page_1115& (0+255),b
 12040                           
 12041                           ;main.c: 730: reg = atoi(preg + 1);
 12042  000B88  2906               	incf	doModeVerbose@preg_1122& (0+255),w,b
 12043  000B8A  0100               	movlb	0	; () banked
 12044  000B8C  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12045  000B8E  0E00               	movlw	0
 12046  000B90  0103               	movlb	3	; () banked
 12047  000B92  2107               	addwfc	(doModeVerbose@preg_1122+1)& (0+255),w,b
 12048  000B94  0100               	movlb	0	; () banked
 12049  000B96  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12050  000B98  C0B1  F01F         	movff	??_doModeVerbose,?_atoi
 12051  000B9C  C0B2  F020         	movff	??_doModeVerbose+1,?_atoi+1
 12052  000BA0  EC4E  F01B         	call	_atoi	;wreg free
 12053  000BA4  D006               	goto	L11
 12054  000BA6                     l12875:
 12055                           
 12056                           ; BSR set to: 3
 12057                           ;main.c: 732: else {
 12058                           ;main.c: 733: reg = atoi(p);
 12059  000BA6  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12060  000BAA  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12061  000BAE  EC4E  F01B         	call	_atoi	;wreg free
 12062  000BB2                     L11:
 12063  000BB2  501F               	movf	?_atoi,w,c
 12064  000BB4  0103               	movlb	3	; () banked
 12065  000BB6  6F22               	movwf	doModeVerbose@reg_1116& (0+255),b
 12066  000BB8  D007               	goto	l12881
 12067  000BBA                     l12877:
 12068                           
 12069                           ; BSR set to: 3
 12070                           ;main.c: 738: else {
 12071                           ;main.c: 739: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12072  000BBA  0E7A               	movlw	high STR_49
 12073  000BBC  6E1B               	movwf	?_putsUSART+1,c
 12074  000BBE  0EAB               	movlw	low STR_49
 12075  000BC0  6E1A               	movwf	?_putsUSART,c
 12076  000BC2  ECC1  F025         	call	_putsUSART	;wreg free
 12077  000BC6  D3B5               	goto	l491
 12078  000BC8                     l12881:
 12079                           
 12080                           ; BSR set to: 3
 12081                           ;main.c: 741: }
 12082                           ;main.c: 744: if ((0) != (p = strtok((0), " "))) {
 12083  000BC8  ECFB  F009         	call	PL38	;call to abstracted procedure
 12084  000BCC  ECFD  F021         	call	_strtok	;wreg free
 12085  000BD0  C025  F334         	movff	?_strtok,doModeVerbose@p_1118
 12086  000BD4  C026  F335         	movff	?_strtok+1,doModeVerbose@p_1118+1
 12087  000BD8  0103               	movlb	3	; () banked
 12088  000BDA  5135               	movf	(doModeVerbose@p_1118+1)& (0+255),w,b
 12089  000BDC  1134               	iorwf	doModeVerbose@p_1118& (0+255),w,b
 12090  000BDE  E00A               	bz	l12885
 12091                           
 12092                           ; BSR set to: 3
 12093                           ;main.c: 745: value = atoi(p);
 12094  000BE0  C334  F01F         	movff	doModeVerbose@p_1118,?_atoi
 12095  000BE4  C335  F020         	movff	doModeVerbose@p_1118+1,?_atoi+1
 12096  000BE8  EC4E  F01B         	call	_atoi	;wreg free
 12097  000BEC  501F               	movf	?_atoi,w,c
 12098  000BEE  0103               	movlb	3	; () banked
 12099  000BF0  6F27               	movwf	doModeVerbose@value_1117& (0+255),b
 12100                           
 12101                           ;main.c: 746: }
 12102  000BF2  D007               	goto	l12889
 12103  000BF4                     l12885:
 12104                           
 12105                           ; BSR set to: 3
 12106                           ;main.c: 747: else {
 12107                           ;main.c: 748: putsUSART((char *) "-ERROR - Need a value\r\n");
 12108  000BF4  0E7C               	movlw	high STR_74
 12109  000BF6  6E1B               	movwf	?_putsUSART+1,c
 12110  000BF8  0E60               	movlw	low STR_74
 12111  000BFA  6E1A               	movwf	?_putsUSART,c
 12112  000BFC  ECC1  F025         	call	_putsUSART	;wreg free
 12113  000C00  D398               	goto	l491
 12114  000C02                     l12889:
 12115                           
 12116                           ; BSR set to: 3
 12117                           ;main.c: 750: }
 12118                           ;main.c: 752: if (writeRegisterExtended(nodeid,
 12119                           ;main.c: 753: page,
 12120                           ;main.c: 754: reg,
 12121                           ;main.c: 755: rwtimeout,
 12122                           ;main.c: 756: &value)) {
 12123  000C02  0100               	movlb	0	; () banked
 12124  000C04  C321  F09E         	movff	doModeVerbose@page_1115,?_writeRegisterExtended
 12125  000C08  6B9F               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 12126  000C0A  C322  F0A0         	movff	doModeVerbose@reg_1116,?_writeRegisterExtended+2
 12127  000C0E  C0D9  F0A1         	movff	_rwtimeout,?_writeRegisterExtended+3
 12128  000C12  6BA2               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 12129  000C14  0E03               	movlw	high doModeVerbose@value_1117
 12130  000C16  6FA4               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 12131  000C18  0E27               	movlw	low doModeVerbose@value_1117
 12132  000C1A  6FA3               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 12133  000C1C  0103               	movlb	3	; () banked
 12134  000C1E  510D               	movf	doModeVerbose@nodeid_1114& (0+255),w,b
 12135  000C20  EC99  F01D         	call	_writeRegisterExtended
 12136  000C24  0900               	iorlw	0
 12137  000C26  E007               	bz	l12893
 12138                           
 12139                           ;main.c: 757: putsUSART((char *) "+OK - Value written successfully\r\n");
 12140  000C28  0E79               	movlw	high STR_75
 12141  000C2A  6E1B               	movwf	?_putsUSART+1,c
 12142  000C2C  0EC0               	movlw	low STR_75
 12143  000C2E  6E1A               	movwf	?_putsUSART,c
 12144  000C30  ECC1  F025         	call	_putsUSART	;wreg free
 12145                           
 12146                           ;main.c: 758: } else {
 12147  000C34  D36F               	goto	l13133
 12148  000C36                     l12893:
 12149                           
 12150                           ;main.c: 759: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 12151  000C36  0E7A               	movlw	high STR_76
 12152  000C38  6E1B               	movwf	?_putsUSART+1,c
 12153  000C3A  0E8A               	movlw	low STR_76
 12154  000C3C  6E1A               	movwf	?_putsUSART,c
 12155  000C3E  ECC1  F025         	call	_putsUSART	;wreg free
 12156  000C42  D368               	goto	l13133
 12157  000C44                     l12895:
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;main.c: 765: else if ( cmdbuf == stristr(cmdbuf, "INFO")) {
 12161  000C44  0101               	movlb	1	; () banked
 12162  000C46  0E01               	movlw	high _cmdbuf
 12163  000C48  6E27               	movwf	?_stristr+1,c
 12164  000C4A  0E20               	movlw	low _cmdbuf
 12165  000C4C  6E26               	movwf	?_stristr,c
 12166  000C4E  0E7F               	movlw	high STR_77
 12167  000C50  6E29               	movwf	?_stristr+3,c
 12168  000C52  0EBB               	movlw	low STR_77
 12169  000C54  6E28               	movwf	?_stristr+2,c
 12170  000C56  EC56  F023         	call	_stristr	;wreg free
 12171  000C5A  DB6C               	call	PL2	;call to abstracted procedure
 12172  000C5C  E102               	bnz	u17035
 12173  000C5E  5026               	movf	?_stristr,w,c
 12174  000C60  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12175  000C62                     u17035:
 12176  000C62  E154               	bnz	l12921
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;main.c: 766: uint8_t nodeid;
 12180                           ;main.c: 768: strcpy(cmdbuf, cmdbuf + 9);
 12181  000C64  0E01               	movlw	high _cmdbuf
 12182  000C66  6E1A               	movwf	?_strcpy+1,c
 12183  000C68  0E20               	movlw	low _cmdbuf
 12184  000C6A  6E19               	movwf	?_strcpy,c
 12185  000C6C  0E29               	movlw	low (_cmdbuf+9)
 12186  000C6E  0100               	movlb	0	; () banked
 12187  000C70  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12188  000C72  0E01               	movlw	high (_cmdbuf+9)
 12189  000C74  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12190  000C76  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12191  000C7A  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12192  000C7E  EC04  F028         	call	_strcpy	;wreg free
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;main.c: 769: nodeid = atoi(cmdbuf);
 12196  000C82  0101               	movlb	1	; () banked
 12197  000C84  0E01               	movlw	high _cmdbuf
 12198  000C86  6E20               	movwf	?_atoi+1,c
 12199  000C88  0E20               	movlw	low _cmdbuf
 12200  000C8A  6E1F               	movwf	?_atoi,c
 12201  000C8C  EC4E  F01B         	call	_atoi	;wreg free
 12202  000C90  501F               	movf	?_atoi,w,c
 12203  000C92  0103               	movlb	3	; () banked
 12204  000C94  6F2F               	movwf	doModeVerbose@nodeid_1129& (0+255),b
 12205                           
 12206                           ; BSR set to: 3
 12207                           ;main.c: 771: putsUSART((char *) "Info for node id = ");
 12208  000C96  0E7D               	movlw	high STR_78
 12209  000C98  6E1B               	movwf	?_putsUSART+1,c
 12210  000C9A  0EAA               	movlw	low STR_78
 12211  000C9C  6E1A               	movwf	?_putsUSART,c
 12212  000C9E  ECC1  F025         	call	_putsUSART	;wreg free
 12213                           
 12214                           ;main.c: 772: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", nodeid );
 12215  000CA2  0100               	movlb	0	; () banked
 12216  000CA4  67D3               	tstfsz	_bHex& (0+255),b
 12217  000CA6  D005               	goto	l12907
 12218                           
 12219                           ; BSR set to: 0
 12220  000CA8  0E7F               	movlw	high STR_53
 12221  000CAA  0103               	movlb	3	; () banked
 12222  000CAC  6F1F               	movwf	(_doModeVerbose$1134+1)& (0+255),b
 12223  000CAE  0EED               	movlw	low STR_53
 12224  000CB0  D004               	goto	L12
 12225  000CB2                     l12907:
 12226                           
 12227                           ; BSR set to: 0
 12228  000CB2  0E7F               	movlw	high STR_52
 12229  000CB4  0103               	movlb	3	; () banked
 12230  000CB6  6F1F               	movwf	(_doModeVerbose$1134+1)& (0+255),b
 12231  000CB8  0E64               	movlw	low STR_52
 12232  000CBA                     L12:
 12233  000CBA  6F1E               	movwf	_doModeVerbose$1134& (0+255),b
 12234                           
 12235                           ; BSR set to: 3
 12236  000CBC  0E01               	movlw	high _wrkbuf
 12237  000CBE  0100               	movlb	0	; () banked
 12238  000CC0  6F61               	movwf	(?_sprintf+1)& (0+255),b
 12239  000CC2  0E70               	movlw	low _wrkbuf
 12240  000CC4  6F60               	movwf	?_sprintf& (0+255),b
 12241  000CC6  C31E  F062         	movff	_doModeVerbose$1134,?_sprintf+2
 12242  000CCA  C31F  F063         	movff	_doModeVerbose$1134+1,?_sprintf+3
 12243  000CCE  C32F  F064         	movff	doModeVerbose@nodeid_1129,?_sprintf+4
 12244  000CD2  6B65               	clrf	(?_sprintf+5)& (0+255),b
 12245  000CD4  EC33  F00A         	call	_sprintf	;wreg free
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;main.c: 773: putsUSART(wrkbuf);
 12249  000CD8  0101               	movlb	1	; () banked
 12250  000CDA  0E01               	movlw	high _wrkbuf
 12251  000CDC  6E1B               	movwf	?_putsUSART+1,c
 12252  000CDE  0E70               	movlw	low _wrkbuf
 12253  000CE0  6E1A               	movwf	?_putsUSART,c
 12254  000CE2  ECC1  F025         	call	_putsUSART	;wreg free
 12255                           
 12256                           ;main.c: 774: putsUSART((char *) "\r\n");
 12257  000CE6  0E74               	movlw	high (STR_188+50)
 12258  000CE8  6E1B               	movwf	?_putsUSART+1,c
 12259  000CEA  0EB2               	movlw	low (STR_188+50)
 12260  000CEC  6E1A               	movwf	?_putsUSART,c
 12261  000CEE  ECC1  F025         	call	_putsUSART	;wreg free
 12262                           
 12263                           ;main.c: 775: printNodeFirmwareVersion(nodeid);
 12264  000CF2  0103               	movlb	3	; () banked
 12265  000CF4  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12266  000CF6  ECDA  F01E         	call	_printNodeFirmwareVersion
 12267                           
 12268                           ;main.c: 776: printGUID(nodeid);
 12269  000CFA  0103               	movlb	3	; () banked
 12270  000CFC  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12271  000CFE  ECCB  F01A         	call	_printGUID
 12272                           
 12273                           ;main.c: 777: printMDF(nodeid);
 12274  000D02  0103               	movlb	3	; () banked
 12275  000D04  512F               	movf	doModeVerbose@nodeid_1129& (0+255),w,b
 12276  000D06  ECB3  F021         	call	_printMDF
 12277                           
 12278                           ;main.c: 778: }
 12279  000D0A  D304               	goto	l13133
 12280  000D0C                     l12921:
 12281                           
 12282                           ; BSR set to: 0
 12283                           ;main.c: 782: else if ( cmdbuf == stristr(cmdbuf, "FILTER")) {
 12284  000D0C  0101               	movlb	1	; () banked
 12285  000D0E  0E01               	movlw	high _cmdbuf
 12286  000D10  6E27               	movwf	?_stristr+1,c
 12287  000D12  0E20               	movlw	low _cmdbuf
 12288  000D14  6E26               	movwf	?_stristr,c
 12289  000D16  0E7F               	movlw	high STR_82
 12290  000D18  6E29               	movwf	?_stristr+3,c
 12291  000D1A  0E56               	movlw	low STR_82
 12292  000D1C  6E28               	movwf	?_stristr+2,c
 12293  000D1E  EC56  F023         	call	_stristr	;wreg free
 12294  000D22  DB08               	call	PL2	;call to abstracted procedure
 12295  000D24  E102               	bnz	u17055
 12296  000D26  5026               	movf	?_stristr,w,c
 12297  000D28  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12298  000D2A                     u17055:
 12299  000D2A  E001 D0C6          	bnz	l12987
 12300                           
 12301                           ; BSR set to: 0
 12302                           ;main.c: 784: uint8_t filterno;
 12303                           ;main.c: 785: uint8_t filter_priority;
 12304                           ;main.c: 786: uint16_t filter_class;
 12305                           ;main.c: 787: uint8_t filter_type;
 12306                           ;main.c: 788: uint8_t filter_nodeid;
 12307                           ;main.c: 790: strcpy( cmdbuf, cmdbuf + 8);
 12308  000D2E  0E01               	movlw	high _cmdbuf
 12309  000D30  DB42               	call	PL16	;call to abstracted procedure
 12310  000D32  EC04  F028         	call	_strcpy	;wreg free
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;main.c: 791: char *p = strtok(cmdbuf, ",");
 12314  000D36  DB4C               	call	PL30	;call to abstracted procedure
 12315  000D38  ECFD  F021         	call	_strtok	;wreg free
 12316  000D3C  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12317  000D40  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12318                           
 12319                           ;main.c: 792: if ((0) != p) {
 12320  000D44  0103               	movlb	3	; () banked
 12321  000D46  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12322  000D48  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12323  000D4A  E013               	bz	l12937
 12324                           
 12325                           ; BSR set to: 3
 12326                           ;main.c: 793: filterno = atoi( p );
 12327  000D4C  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12328  000D50  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12329  000D54  EC4E  F01B         	call	_atoi	;wreg free
 12330  000D58  501F               	movf	?_atoi,w,c
 12331  000D5A  0103               	movlb	3	; () banked
 12332  000D5C  6F28               	movwf	doModeVerbose@filterno& (0+255),b
 12333                           
 12334                           ; BSR set to: 3
 12335                           ;main.c: 794: if ( filterno > 15 ) {
 12336  000D5E  0E0F               	movlw	15
 12337  000D60  6528               	cpfsgt	doModeVerbose@filterno& (0+255),b
 12338  000D62  D00E               	goto	l12941
 12339                           
 12340                           ; BSR set to: 3
 12341                           ;main.c: 795: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 12342  000D64  0E72               	movlw	high STR_84
 12343  000D66  6E1B               	movwf	?_putsUSART+1,c
 12344  000D68  0E44               	movlw	low STR_84
 12345  000D6A  6E1A               	movwf	?_putsUSART,c
 12346  000D6C  ECC1  F025         	call	_putsUSART	;wreg free
 12347  000D70  D2E0               	goto	l491
 12348  000D72                     l12937:
 12349                           
 12350                           ; BSR set to: 3
 12351                           ;main.c: 799: else {
 12352                           ;main.c: 800: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 12353  000D72  0E78               	movlw	high STR_85
 12354  000D74  6E1B               	movwf	?_putsUSART+1,c
 12355  000D76  0E1D               	movlw	low STR_85
 12356  000D78  6E1A               	movwf	?_putsUSART,c
 12357  000D7A  ECC1  F025         	call	_putsUSART	;wreg free
 12358  000D7E  D2D9               	goto	l491
 12359  000D80                     l12941:
 12360                           
 12361                           ; BSR set to: 3
 12362                           ;main.c: 802: }
 12363                           ;main.c: 805: p = strtok((0), ",");
 12364  000D80  DAE0               	call	PL6	;call to abstracted procedure
 12365  000D82  ECFD  F021         	call	_strtok	;wreg free
 12366  000D86  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12367  000D8A  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12368                           
 12369                           ;main.c: 806: if ((0) != p) {
 12370  000D8E  0103               	movlb	3	; () banked
 12371  000D90  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12372  000D92  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12373  000D94  E00A               	bz	l12947
 12374                           
 12375                           ; BSR set to: 3
 12376                           ;main.c: 807: filter_priority = atoi( p );
 12377  000D96  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12378  000D9A  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12379  000D9E  EC4E  F01B         	call	_atoi	;wreg free
 12380  000DA2  501F               	movf	?_atoi,w,c
 12381  000DA4  0103               	movlb	3	; () banked
 12382  000DA6  6F0E               	movwf	doModeVerbose@filter_priority& (0+255),b
 12383                           
 12384                           ;main.c: 808: }
 12385  000DA8  D007               	goto	l12951
 12386  000DAA                     l12947:
 12387                           
 12388                           ; BSR set to: 3
 12389                           ;main.c: 809: else {
 12390                           ;main.c: 810: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 12391  000DAA  0E77               	movlw	high STR_87
 12392  000DAC  6E1B               	movwf	?_putsUSART+1,c
 12393  000DAE  0E52               	movlw	low STR_87
 12394  000DB0  6E1A               	movwf	?_putsUSART,c
 12395  000DB2  ECC1  F025         	call	_putsUSART	;wreg free
 12396  000DB6  D2BD               	goto	l491
 12397  000DB8                     l12951:
 12398                           
 12399                           ; BSR set to: 3
 12400                           ;main.c: 812: }
 12401                           ;main.c: 815: p = strtok((0), ",");
 12402  000DB8  DAC4               	call	PL6	;call to abstracted procedure
 12403  000DBA  ECFD  F021         	call	_strtok	;wreg free
 12404  000DBE  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12405  000DC2  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12406                           
 12407                           ;main.c: 816: if ((0) != p) {
 12408  000DC6  0103               	movlb	3	; () banked
 12409  000DC8  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12410  000DCA  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12411  000DCC  E00B               	bz	l12957
 12412                           
 12413                           ; BSR set to: 3
 12414                           ;main.c: 817: filter_class = atoi( p );
 12415  000DCE  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12416  000DD2  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12417  000DD6  EC4E  F01B         	call	_atoi	;wreg free
 12418  000DDA  C01F  F308         	movff	?_atoi,doModeVerbose@filter_class
 12419  000DDE  C020  F309         	movff	?_atoi+1,doModeVerbose@filter_class+1
 12420                           
 12421                           ;main.c: 818: }
 12422  000DE2  D007               	goto	l12961
 12423  000DE4                     l12957:
 12424                           
 12425                           ; BSR set to: 3
 12426                           ;main.c: 819: else {
 12427                           ;main.c: 820: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 12428  000DE4  0E78               	movlw	high STR_89
 12429  000DE6  6E1B               	movwf	?_putsUSART+1,c
 12430  000DE8  0EB9               	movlw	low STR_89
 12431  000DEA  6E1A               	movwf	?_putsUSART,c
 12432  000DEC  ECC1  F025         	call	_putsUSART	;wreg free
 12433  000DF0  D2A0               	goto	l491
 12434  000DF2                     l12961:
 12435                           
 12436                           ;main.c: 822: }
 12437                           ;main.c: 825: p = strtok((0), ",");
 12438  000DF2  DAA7               	call	PL6	;call to abstracted procedure
 12439  000DF4  ECFD  F021         	call	_strtok	;wreg free
 12440  000DF8  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12441  000DFC  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12442                           
 12443                           ;main.c: 826: if ((0) != p) {
 12444  000E00  0103               	movlb	3	; () banked
 12445  000E02  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12446  000E04  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12447  000E06  E00A               	bz	l12967
 12448                           
 12449                           ; BSR set to: 3
 12450                           ;main.c: 827: filter_type = atoi( p );
 12451  000E08  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12452  000E0C  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12453  000E10  EC4E  F01B         	call	_atoi	;wreg free
 12454  000E14  501F               	movf	?_atoi,w,c
 12455  000E16  0103               	movlb	3	; () banked
 12456  000E18  6F0F               	movwf	doModeVerbose@filter_type& (0+255),b
 12457                           
 12458                           ;main.c: 828: }
 12459  000E1A  D007               	goto	l12971
 12460  000E1C                     l12967:
 12461                           
 12462                           ; BSR set to: 3
 12463                           ;main.c: 829: else {
 12464                           ;main.c: 830: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 12465  000E1C  0E79               	movlw	high STR_91
 12466  000E1E  6E1B               	movwf	?_putsUSART+1,c
 12467  000E20  0E07               	movlw	low STR_91
 12468  000E22  6E1A               	movwf	?_putsUSART,c
 12469  000E24  ECC1  F025         	call	_putsUSART	;wreg free
 12470  000E28  D284               	goto	l491
 12471  000E2A                     l12971:
 12472                           
 12473                           ; BSR set to: 3
 12474                           ;main.c: 832: }
 12475                           ;main.c: 835: p = strtok((0), ",");
 12476  000E2A  DA8B               	call	PL6	;call to abstracted procedure
 12477  000E2C  ECFD  F021         	call	_strtok	;wreg free
 12478  000E30  C025  F339         	movff	?_strtok,doModeVerbose@p_1142
 12479  000E34  C026  F33A         	movff	?_strtok+1,doModeVerbose@p_1142+1
 12480                           
 12481                           ;main.c: 836: if ((0) != p) {
 12482  000E38  0103               	movlb	3	; () banked
 12483  000E3A  513A               	movf	(doModeVerbose@p_1142+1)& (0+255),w,b
 12484  000E3C  1139               	iorwf	doModeVerbose@p_1142& (0+255),w,b
 12485  000E3E  E00A               	bz	l12977
 12486                           
 12487                           ; BSR set to: 3
 12488                           ;main.c: 837: filter_nodeid = atoi( p );
 12489  000E40  C339  F01F         	movff	doModeVerbose@p_1142,?_atoi
 12490  000E44  C33A  F020         	movff	doModeVerbose@p_1142+1,?_atoi+1
 12491  000E48  EC4E  F01B         	call	_atoi	;wreg free
 12492  000E4C  501F               	movf	?_atoi,w,c
 12493  000E4E  0103               	movlb	3	; () banked
 12494  000E50  6F10               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 12495                           
 12496                           ;main.c: 838: }
 12497  000E52  D007               	goto	l12981
 12498  000E54                     l12977:
 12499                           
 12500                           ; BSR set to: 3
 12501                           ;main.c: 839: else {
 12502                           ;main.c: 840: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 12503  000E54  0E77               	movlw	high STR_93
 12504  000E56  6E1B               	movwf	?_putsUSART+1,c
 12505  000E58  0E7C               	movlw	low STR_93
 12506  000E5A  6E1A               	movwf	?_putsUSART,c
 12507  000E5C  ECC1  F025         	call	_putsUSART	;wreg free
 12508  000E60  D268               	goto	l491
 12509  000E62                     l12981:
 12510                           
 12511                           ; BSR set to: 3
 12512                           ;main.c: 842: }
 12513                           ;main.c: 845: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12514  000E62  0E80               	movlw	128
 12515  000E64  EC88  F028         	call	_ECANSetOperationMode
 12516                           
 12517                           ;main.c: 847: uint32_t id = ((uint32_t) filter_priority << 26) |
 12518                           ;main.c: 848: ((uint32_t) filter_class << 16) |
 12519                           ;main.c: 849: ((uint32_t) filter_type << 8) |
 12520                           ;main.c: 850: filter_nodeid;
 12521  000E68  C30F  F0B1         	movff	doModeVerbose@filter_type,??_doModeVerbose
 12522  000E6C  DAD8               	call	PL44	;call to abstracted procedure
 12523  000E6E  5108               	movf	doModeVerbose@filter_class& (0+255),w,b
 12524  000E70  0100               	movlb	0	; () banked
 12525  000E72  6FB5               	movwf	(??_doModeVerbose+4)& (0+255),b
 12526  000E74  0103               	movlb	3	; () banked
 12527  000E76  5109               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 12528  000E78  DAEB               	call	PL56	;call to abstracted procedure
 12529  000E7A  C30E  F0B9         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 12530  000E7E  DA68               	call	PL8	;call to abstracted procedure
 12531  000E80  5110               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 12532  000E82  0100               	movlb	0	; () banked
 12533  000E84  11C1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12534  000E86  0103               	movlb	3	; () banked
 12535  000E88  6F00               	movwf	doModeVerbose@id& (0+255),b
 12536  000E8A  0100               	movlb	0	; () banked
 12537  000E8C  51C2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12538  000E8E  0103               	movlb	3	; () banked
 12539  000E90  6F01               	movwf	(doModeVerbose@id+1)& (0+255),b
 12540  000E92  0100               	movlb	0	; () banked
 12541  000E94  51C3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12542  000E96  0103               	movlb	3	; () banked
 12543  000E98  6F02               	movwf	(doModeVerbose@id+2)& (0+255),b
 12544  000E9A  0100               	movlb	0	; () banked
 12545  000E9C  51C4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12546  000E9E  0103               	movlb	3	; () banked
 12547  000EA0  6F03               	movwf	(doModeVerbose@id+3)& (0+255),b
 12548                           
 12549                           ; BSR set to: 3
 12550                           ;main.c: 851: setFilter( filterno, id );
 12551  000EA2  C300  F019         	movff	doModeVerbose@id,?_setFilter
 12552  000EA6  C301  F01A         	movff	doModeVerbose@id+1,?_setFilter+1
 12553  000EAA  C302  F01B         	movff	doModeVerbose@id+2,?_setFilter+2
 12554  000EAE  C303  F01C         	movff	doModeVerbose@id+3,?_setFilter+3
 12555  000EB2  5128               	movf	doModeVerbose@filterno& (0+255),w,b
 12556  000EB4  EC34  F013         	call	_setFilter
 12557                           
 12558                           ;main.c: 852: }
 12559  000EB8  D22D               	goto	l13133
 12560  000EBA                     l12987:
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;main.c: 856: else if ( cmdbuf == stristr(cmdbuf, "MASK")) {
 12564  000EBA  0101               	movlb	1	; () banked
 12565  000EBC  0E01               	movlw	high _cmdbuf
 12566  000EBE  6E27               	movwf	?_stristr+1,c
 12567  000EC0  0E20               	movlw	low _cmdbuf
 12568  000EC2  6E26               	movwf	?_stristr,c
 12569  000EC4  0E7F               	movlw	high STR_94
 12570  000EC6  6E29               	movwf	?_stristr+3,c
 12571  000EC8  0EB1               	movlw	low STR_94
 12572  000ECA  6E28               	movwf	?_stristr+2,c
 12573  000ECC  EC56  F023         	call	_stristr	;wreg free
 12574  000ED0  DA31               	call	PL2	;call to abstracted procedure
 12575  000ED2  E102               	bnz	u17135
 12576  000ED4  5026               	movf	?_stristr,w,c
 12577  000ED6  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12578  000ED8                     u17135:
 12579  000ED8  E001 D0CD          	bnz	l13057
 12580                           
 12581                           ; BSR set to: 0
 12582                           ;main.c: 857: uint8_t maskno;
 12583                           ;main.c: 858: uint8_t mask_priority;
 12584                           ;main.c: 859: uint16_t mask_class;
 12585                           ;main.c: 860: uint8_t mask_type;
 12586                           ;main.c: 861: uint8_t mask_nodeid;
 12587                           ;main.c: 863: strcpy( cmdbuf, cmdbuf + 8);
 12588  000EDC  0E01               	movlw	high _cmdbuf
 12589  000EDE  DA6B               	call	PL16	;call to abstracted procedure
 12590  000EE0  EC04  F028         	call	_strcpy	;wreg free
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;main.c: 864: char *p = strtok(cmdbuf, ",");
 12594  000EE4  DA75               	call	PL30	;call to abstracted procedure
 12595  000EE6  ECFD  F021         	call	_strtok	;wreg free
 12596  000EEA  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12597  000EEE  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12598                           
 12599                           ;main.c: 865: if ((0) != p) {
 12600  000EF2  0103               	movlb	3	; () banked
 12601  000EF4  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12602  000EF6  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12603  000EF8  E013               	bz	l13003
 12604                           
 12605                           ; BSR set to: 3
 12606                           ;main.c: 866: maskno = atoi( p );
 12607  000EFA  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12608  000EFE  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12609  000F02  EC4E  F01B         	call	_atoi	;wreg free
 12610  000F06  501F               	movf	?_atoi,w,c
 12611  000F08  0103               	movlb	3	; () banked
 12612  000F0A  6F29               	movwf	doModeVerbose@maskno& (0+255),b
 12613                           
 12614                           ; BSR set to: 3
 12615                           ;main.c: 867: if ( maskno > 1 ) {
 12616  000F0C  0E01               	movlw	1
 12617  000F0E  6529               	cpfsgt	doModeVerbose@maskno& (0+255),b
 12618  000F10  D00E               	goto	l13007
 12619                           
 12620                           ; BSR set to: 3
 12621                           ;main.c: 868: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 12622  000F12  0E75               	movlw	high STR_96
 12623  000F14  6E1B               	movwf	?_putsUSART+1,c
 12624  000F16  0E1C               	movlw	low STR_96
 12625  000F18  6E1A               	movwf	?_putsUSART,c
 12626  000F1A  ECC1  F025         	call	_putsUSART	;wreg free
 12627  000F1E  D209               	goto	l491
 12628  000F20                     l13003:
 12629                           
 12630                           ; BSR set to: 3
 12631                           ;main.c: 872: else {
 12632                           ;main.c: 873: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 12633  000F20  0E79               	movlw	high STR_97
 12634  000F22  6E1B               	movwf	?_putsUSART+1,c
 12635  000F24  0E2D               	movlw	low STR_97
 12636  000F26  6E1A               	movwf	?_putsUSART,c
 12637  000F28  ECC1  F025         	call	_putsUSART	;wreg free
 12638  000F2C  D202               	goto	l491
 12639  000F2E                     l13007:
 12640                           
 12641                           ; BSR set to: 3
 12642                           ;main.c: 875: }
 12643                           ;main.c: 878: p = strtok((0), ",");
 12644  000F2E  DA09               	call	PL6	;call to abstracted procedure
 12645  000F30  ECFD  F021         	call	_strtok	;wreg free
 12646  000F34  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12647  000F38  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12648                           
 12649                           ;main.c: 879: if ((0) != p) {
 12650  000F3C  0103               	movlb	3	; () banked
 12651  000F3E  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12652  000F40  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12653  000F42  E00A               	bz	l13013
 12654                           
 12655                           ; BSR set to: 3
 12656                           ;main.c: 880: mask_priority = atoi( p );
 12657  000F44  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12658  000F48  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12659  000F4C  EC4E  F01B         	call	_atoi	;wreg free
 12660  000F50  501F               	movf	?_atoi,w,c
 12661  000F52  0103               	movlb	3	; () banked
 12662  000F54  6F11               	movwf	doModeVerbose@mask_priority& (0+255),b
 12663                           
 12664                           ;main.c: 881: }
 12665  000F56  D007               	goto	l13017
 12666  000F58                     l13013:
 12667                           
 12668                           ; BSR set to: 3
 12669                           ;main.c: 882: else {
 12670                           ;main.c: 883: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 12671  000F58  0E77               	movlw	high STR_99
 12672  000F5A  6E1B               	movwf	?_putsUSART+1,c
 12673  000F5C  0ECD               	movlw	low STR_99
 12674  000F5E  6E1A               	movwf	?_putsUSART,c
 12675  000F60  ECC1  F025         	call	_putsUSART	;wreg free
 12676  000F64  D1E6               	goto	l491
 12677  000F66                     l13017:
 12678                           
 12679                           ; BSR set to: 3
 12680                           ;main.c: 885: }
 12681                           ;main.c: 888: p = strtok((0), ",");
 12682  000F66  D9ED               	call	PL6	;call to abstracted procedure
 12683  000F68  ECFD  F021         	call	_strtok	;wreg free
 12684  000F6C  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12685  000F70  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12686                           
 12687                           ;main.c: 889: if ((0) != p) {
 12688  000F74  0103               	movlb	3	; () banked
 12689  000F76  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12690  000F78  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12691  000F7A  E00B               	bz	l13023
 12692                           
 12693                           ; BSR set to: 3
 12694                           ;main.c: 890: mask_class = atoi( p );
 12695  000F7C  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12696  000F80  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12697  000F84  EC4E  F01B         	call	_atoi	;wreg free
 12698  000F88  C01F  F30A         	movff	?_atoi,doModeVerbose@mask_class
 12699  000F8C  C020  F30B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 12700                           
 12701                           ;main.c: 891: }
 12702  000F90  D007               	goto	l13027
 12703  000F92                     l13023:
 12704                           
 12705                           ; BSR set to: 3
 12706                           ;main.c: 892: else {
 12707                           ;main.c: 893: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 12708  000F92  0E79               	movlw	high STR_101
 12709  000F94  6E1B               	movwf	?_putsUSART+1,c
 12710  000F96  0E77               	movlw	low STR_101
 12711  000F98  6E1A               	movwf	?_putsUSART,c
 12712  000F9A  ECC1  F025         	call	_putsUSART	;wreg free
 12713  000F9E  D1C9               	goto	l491
 12714  000FA0                     l13027:
 12715                           
 12716                           ;main.c: 895: }
 12717                           ;main.c: 898: p = strtok((0), ",");
 12718  000FA0  D9D0               	call	PL6	;call to abstracted procedure
 12719  000FA2  ECFD  F021         	call	_strtok	;wreg free
 12720  000FA6  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12721  000FAA  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12722                           
 12723                           ;main.c: 899: if ((0) != p) {
 12724  000FAE  0103               	movlb	3	; () banked
 12725  000FB0  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12726  000FB2  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12727  000FB4  E00A               	bz	l13033
 12728                           
 12729                           ; BSR set to: 3
 12730                           ;main.c: 900: mask_type = atoi( p );
 12731  000FB6  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12732  000FBA  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12733  000FBE  EC4E  F01B         	call	_atoi	;wreg free
 12734  000FC2  501F               	movf	?_atoi,w,c
 12735  000FC4  0103               	movlb	3	; () banked
 12736  000FC6  6F12               	movwf	doModeVerbose@mask_type& (0+255),b
 12737                           
 12738                           ;main.c: 901: }
 12739  000FC8  D007               	goto	l13037
 12740  000FCA                     l13033:
 12741                           
 12742                           ; BSR set to: 3
 12743                           ;main.c: 902: else {
 12744                           ;main.c: 903: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 12745  000FCA  0E79               	movlw	high STR_103
 12746  000FCC  6E1B               	movwf	?_putsUSART+1,c
 12747  000FCE  0E9C               	movlw	low STR_103
 12748  000FD0  6E1A               	movwf	?_putsUSART,c
 12749  000FD2  ECC1  F025         	call	_putsUSART	;wreg free
 12750  000FD6  D1AD               	goto	l491
 12751  000FD8                     l13037:
 12752                           
 12753                           ; BSR set to: 3
 12754                           ;main.c: 905: }
 12755                           ;main.c: 908: p = strtok((0), ",");
 12756  000FD8  D9B4               	call	PL6	;call to abstracted procedure
 12757  000FDA  ECFD  F021         	call	_strtok	;wreg free
 12758  000FDE  C025  F33B         	movff	?_strtok,doModeVerbose@p_1161
 12759  000FE2  C026  F33C         	movff	?_strtok+1,doModeVerbose@p_1161+1
 12760                           
 12761                           ;main.c: 909: if ((0) != p) {
 12762  000FE6  0103               	movlb	3	; () banked
 12763  000FE8  513C               	movf	(doModeVerbose@p_1161+1)& (0+255),w,b
 12764  000FEA  113B               	iorwf	doModeVerbose@p_1161& (0+255),w,b
 12765  000FEC  E00A               	bz	l13043
 12766                           
 12767                           ; BSR set to: 3
 12768                           ;main.c: 910: mask_nodeid = atoi( p );
 12769  000FEE  C33B  F01F         	movff	doModeVerbose@p_1161,?_atoi
 12770  000FF2  C33C  F020         	movff	doModeVerbose@p_1161+1,?_atoi+1
 12771  000FF6  EC4E  F01B         	call	_atoi	;wreg free
 12772  000FFA  501F               	movf	?_atoi,w,c
 12773  000FFC  0103               	movlb	3	; () banked
 12774  000FFE  6F13               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 12775                           
 12776                           ;main.c: 911: }
 12777  001000  D007               	goto	l13047
 12778  001002                     l13043:
 12779                           
 12780                           ; BSR set to: 3
 12781                           ;main.c: 912: else {
 12782                           ;main.c: 913: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 12783  001002  0E78               	movlw	high STR_105
 12784  001004  6E1B               	movwf	?_putsUSART+1,c
 12785  001006  0E92               	movlw	low STR_105
 12786  001008  6E1A               	movwf	?_putsUSART,c
 12787  00100A  ECC1  F025         	call	_putsUSART	;wreg free
 12788  00100E  D191               	goto	l491
 12789  001010                     l13047:
 12790                           
 12791                           ; BSR set to: 3
 12792                           ;main.c: 915: }
 12793                           ;main.c: 917: uint32_t id = ((uint32_t) mask_priority << 26) |
 12794                           ;main.c: 918: ((uint32_t) mask_class << 16) |
 12795                           ;main.c: 919: ((uint32_t) mask_type << 8) |
 12796                           ;main.c: 920: mask_nodeid;
 12797  001010  C312  F0B1         	movff	doModeVerbose@mask_type,??_doModeVerbose
 12798  001014  DA04               	call	PL44	;call to abstracted procedure
 12799  001016  510A               	movf	doModeVerbose@mask_class& (0+255),w,b
 12800  001018  0100               	movlb	0	; () banked
 12801  00101A  6FB5               	movwf	(??_doModeVerbose+4)& (0+255),b
 12802  00101C  0103               	movlb	3	; () banked
 12803  00101E  510B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 12804  001020  DA17               	call	PL56	;call to abstracted procedure
 12805  001022  C311  F0B9         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 12806  001026  D994               	call	PL8	;call to abstracted procedure
 12807  001028  5113               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 12808  00102A  0100               	movlb	0	; () banked
 12809  00102C  11C1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12810  00102E  0103               	movlb	3	; () banked
 12811  001030  6F23               	movwf	doModeVerbose@id_1173& (0+255),b
 12812  001032  0100               	movlb	0	; () banked
 12813  001034  51C2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12814  001036  0103               	movlb	3	; () banked
 12815  001038  6F24               	movwf	(doModeVerbose@id_1173+1)& (0+255),b
 12816  00103A  0100               	movlb	0	; () banked
 12817  00103C  51C3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12818  00103E  0103               	movlb	3	; () banked
 12819  001040  6F25               	movwf	(doModeVerbose@id_1173+2)& (0+255),b
 12820  001042  0100               	movlb	0	; () banked
 12821  001044  51C4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12822  001046  0103               	movlb	3	; () banked
 12823  001048  6F26               	movwf	(doModeVerbose@id_1173+3)& (0+255),b
 12824                           
 12825                           ; BSR set to: 3
 12826                           ;main.c: 923: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12827  00104A  0E80               	movlw	128
 12828  00104C  EC88  F028         	call	_ECANSetOperationMode
 12829                           
 12830                           ;main.c: 925: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 12831                           ;main.c: 926: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 12832  001050  0103               	movlb	3	; () banked
 12833  001052  5129               	movf	doModeVerbose@maskno& (0+255),w,b
 12834  001054  E008               	bz	l13055
 12835                           
 12836                           ; BSR set to: 3
 12837  001056  010F               	movlb	15	; () banked
 12838  001058  0E0F               	movlw	15	;volatile
 12839  00105A  6E1A               	movwf	?__CANIDToRegs+1,c
 12840  00105C  0E18               	movlw	24	;volatile
 12841  00105E  D9EC               	call	PL50	;call to abstracted procedure
 12842  001060  EC41  F01A         	call	__CANIDToRegs	;wreg free
 12843  001064  D157               	goto	l13133
 12844  001066                     l13055:
 12845                           
 12846                           ; BSR set to: 3
 12847  001066  010F               	movlb	15	; () banked
 12848  001068  0E0F               	movlw	15	;volatile
 12849  00106A  6E1A               	movwf	?__CANIDToRegs+1,c
 12850  00106C  0E1C               	movlw	28	;volatile
 12851  00106E  D9E4               	call	PL50	;call to abstracted procedure
 12852  001070  EC41  F01A         	call	__CANIDToRegs	;wreg free
 12853  001074  D14F               	goto	l13133
 12854  001076                     l13057:
 12855                           
 12856                           ; BSR set to: 0
 12857                           ;main.c: 935: else if ( cmdbuf == stristr(cmdbuf, "SET ") ) {
 12858  001076  0101               	movlb	1	; () banked
 12859  001078  0E01               	movlw	high _cmdbuf
 12860  00107A  6E27               	movwf	?_stristr+1,c
 12861  00107C  0E20               	movlw	low _cmdbuf
 12862  00107E  6E26               	movwf	?_stristr,c
 12863  001080  0E7F               	movlw	high STR_106
 12864  001082  6E29               	movwf	?_stristr+3,c
 12865  001084  0E9D               	movlw	low STR_106
 12866  001086  6E28               	movwf	?_stristr+2,c
 12867  001088  EC56  F023         	call	_stristr	;wreg free
 12868  00108C  D953               	call	PL2	;call to abstracted procedure
 12869  00108E  E102               	bnz	u17225
 12870  001090  5026               	movf	?_stristr,w,c
 12871  001092  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12872  001094                     u17225:
 12873  001094  E001 D138          	bnz	l13131
 12874                           
 12875                           ; BSR set to: 0
 12876                           ;main.c: 938: strcpy( cmdbuf, cmdbuf + 4);
 12877  001098  0E01               	movlw	high _cmdbuf
 12878  00109A  6E1A               	movwf	?_strcpy+1,c
 12879  00109C  0E20               	movlw	low _cmdbuf
 12880  00109E  6E19               	movwf	?_strcpy,c
 12881  0010A0  0E24               	movlw	low (_cmdbuf+4)
 12882  0010A2  0100               	movlb	0	; () banked
 12883  0010A4  6FB1               	movwf	??_doModeVerbose& (0+255),b
 12884  0010A6  0E01               	movlw	high (_cmdbuf+4)
 12885  0010A8  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12886  0010AA  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 12887  0010AE  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 12888  0010B2  EC04  F028         	call	_strcpy	;wreg free
 12889                           
 12890                           ; BSR set to: 0
 12891                           ;main.c: 941: if ( cmdbuf == stristr(cmdbuf, "HEX")) {
 12892  0010B6  0101               	movlb	1	; () banked
 12893  0010B8  0E01               	movlw	high _cmdbuf
 12894  0010BA  6E27               	movwf	?_stristr+1,c
 12895  0010BC  0E20               	movlw	low _cmdbuf
 12896  0010BE  6E26               	movwf	?_stristr,c
 12897  0010C0  0E7F               	movlw	high STR_107
 12898  0010C2  6E29               	movwf	?_stristr+3,c
 12899  0010C4  0EDC               	movlw	low STR_107
 12900  0010C6  6E28               	movwf	?_stristr+2,c
 12901  0010C8  EC56  F023         	call	_stristr	;wreg free
 12902  0010CC  D933               	call	PL2	;call to abstracted procedure
 12903  0010CE  E102               	bnz	u17235
 12904  0010D0  5026               	movf	?_stristr,w,c
 12905  0010D2  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12906  0010D4                     u17235:
 12907  0010D4  E110               	bnz	l13069
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;main.c: 942: bHex = 1;
 12911  0010D6  0E01               	movlw	1
 12912  0010D8  6FD3               	movwf	_bHex& (0+255),b
 12913                           
 12914                           ; BSR set to: 0
 12915                           ;main.c: 943: writeEEPROM( 0x06, 1 );
 12916  0010DA  6A1A               	clrf	?_writeEEPROM+1,c
 12917  0010DC  0E06               	movlw	6
 12918  0010DE  6E19               	movwf	?_writeEEPROM,c
 12919  0010E0  0E01               	movlw	1
 12920  0010E2  6E1B               	movwf	?_writeEEPROM+2,c
 12921  0010E4  EC48  F028         	call	_writeEEPROM	;wreg free
 12922                           
 12923                           ;main.c: 944: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 12924  0010E8  0E77               	movlw	high STR_108
 12925  0010EA  6E1B               	movwf	?_putsUSART+1,c
 12926  0010EC  0E26               	movlw	low STR_108
 12927  0010EE  6E1A               	movwf	?_putsUSART,c
 12928  0010F0  ECC1  F025         	call	_putsUSART	;wreg free
 12929                           
 12930                           ;main.c: 945: }
 12931  0010F4  D10F               	goto	l13133
 12932  0010F6                     l13069:
 12933                           
 12934                           ; BSR set to: 0
 12935                           ;main.c: 947: else if ( cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 12936  0010F6  0101               	movlb	1	; () banked
 12937  0010F8  0E01               	movlw	high _cmdbuf
 12938  0010FA  6E27               	movwf	?_stristr+1,c
 12939  0010FC  0E20               	movlw	low _cmdbuf
 12940  0010FE  6E26               	movwf	?_stristr,c
 12941  001100  0E7F               	movlw	high STR_109
 12942  001102  6E29               	movwf	?_stristr+3,c
 12943  001104  0E05               	movlw	low STR_109
 12944  001106  6E28               	movwf	?_stristr+2,c
 12945  001108  EC56  F023         	call	_stristr	;wreg free
 12946  00110C  D913               	call	PL2	;call to abstracted procedure
 12947  00110E  E102               	bnz	u17245
 12948  001110  5026               	movf	?_stristr,w,c
 12949  001112  19B1               	xorwf	??_doModeVerbose& (0+255),w,b
 12950  001114                     u17245:
 12951  001114  E10F               	bnz	l13077
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;main.c: 948: bHex = 0;
 12955  001116  6BD3               	clrf	_bHex& (0+255),b
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;main.c: 949: writeEEPROM( 0x06, 0 );
 12959  001118  6A1A               	clrf	?_writeEEPROM+1,c
 12960  00111A  0E06               	movlw	6
 12961  00111C  6E19               	movwf	?_writeEEPROM,c
 12962  00111E  0E00               	movlw	0
 12963  001120  6A1B               	clrf	?_writeEEPROM+2,c
 12964  001122  EC48  F028         	call	_writeEEPROM	;wreg free
 12965                           
 12966                           ;main.c: 950: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 12967  001126  0E77               	movlw	high STR_110
 12968  001128  6E1B               	movwf	?_putsUSART+1,c
 12969  00112A  0EF5               	movlw	low STR_110
 12970  00112C  6E1A               	movwf	?_putsUSART,c
 12971  00112E  ECC1  F025         	call	_putsUSART	;wreg free
 12972                           
 12973                           ;main.c: 951: }
 12974  001132  D0F0               	goto	l13133
 12975  001134                     l13077:
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;main.c: 952: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 12979  001134  0101               	movlb	1	; () banked
 12980  001136  0E01               	movlw	high _cmdbuf
 12981  001138  6E27               	movwf	?_stristr+1,c
 12982  00113A  0E20               	movlw	low _cmdbuf
 12983  00113C  6E26               	movwf	?_stristr,c
 12984  00113E  0E7E               	movlw	high STR_111
 12985  001140  6E29               	movwf	?_stristr+3,c
 12986  001142  0E86               	movlw	low STR_111
 12987  001144  6E28               	movwf	?_stristr+2,c
 12988  001146  EC56  F023         	call	_stristr	;wreg free
 12989  00114A  5027               	movf	?_stristr+1,w,c
 12990  00114C  1026               	iorwf	?_stristr,w,c
 12991  00114E  E025               	bz	l13089
 12992                           
 12993                           ;main.c: 953: strcpy( cmdbuf, cmdbuf + 10);
 12994  001150  0E01               	movlw	high _cmdbuf
 12995  001152  6E1A               	movwf	?_strcpy+1,c
 12996  001154  0E20               	movlw	low _cmdbuf
 12997  001156  6E19               	movwf	?_strcpy,c
 12998  001158  0E2A               	movlw	low (_cmdbuf+10)
 12999  00115A  0100               	movlb	0	; () banked
 13000  00115C  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13001  00115E  0E01               	movlw	high (_cmdbuf+10)
 13002  001160  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13003  001162  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13004  001166  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13005  00116A  EC04  F028         	call	_strcpy	;wreg free
 13006                           
 13007                           ; BSR set to: 0
 13008                           ;main.c: 954: rwtimeout = atoi( cmdbuf );
 13009  00116E  0101               	movlb	1	; () banked
 13010  001170  0E01               	movlw	high _cmdbuf
 13011  001172  6E20               	movwf	?_atoi+1,c
 13012  001174  0E20               	movlw	low _cmdbuf
 13013  001176  6E1F               	movwf	?_atoi,c
 13014  001178  EC4E  F01B         	call	_atoi	;wreg free
 13015  00117C  501F               	movf	?_atoi,w,c
 13016  00117E  0100               	movlb	0	; () banked
 13017  001180  6FD9               	movwf	_rwtimeout& (0+255),b
 13018                           
 13019                           ; BSR set to: 0
 13020                           ;main.c: 955: if ( rwtimeout < 10u ) {
 13021  001182  0E0A               	movlw	10
 13022  001184  61D9               	cpfslt	_rwtimeout& (0+255),b
 13023  001186  D001               	goto	l13087
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;main.c: 956: rwtimeout = 10u;
 13027  001188  6FD9               	movwf	_rwtimeout& (0+255),b
 13028  00118A                     l13087:
 13029                           
 13030                           ; BSR set to: 0
 13031                           ;main.c: 957: }
 13032                           ;main.c: 958: writeEEPROM( 0x09, rwtimeout );
 13033  00118A  6A1A               	clrf	?_writeEEPROM+1,c
 13034  00118C  0E09               	movlw	9
 13035  00118E  6E19               	movwf	?_writeEEPROM,c
 13036  001190  C0D9  F01B         	movff	_rwtimeout,?_writeEEPROM+2
 13037  001194  EC48  F028         	call	_writeEEPROM	;wreg free
 13038                           
 13039                           ;main.c: 959: }
 13040  001198  D0BD               	goto	l13133
 13041  00119A                     l13089:
 13042                           
 13043                           ;main.c: 960: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 13044  00119A  0101               	movlb	1	; () banked
 13045  00119C  0E01               	movlw	high _cmdbuf
 13046  00119E  6E27               	movwf	?_stristr+1,c
 13047  0011A0  0E20               	movlw	low _cmdbuf
 13048  0011A2  6E26               	movwf	?_stristr,c
 13049  0011A4  0E7E               	movlw	high STR_112
 13050  0011A6  6E29               	movwf	?_stristr+3,c
 13051  0011A8  0EBA               	movlw	low STR_112
 13052  0011AA  6E28               	movwf	?_stristr+2,c
 13053  0011AC  EC56  F023         	call	_stristr	;wreg free
 13054  0011B0  5027               	movf	?_stristr+1,w,c
 13055  0011B2  1026               	iorwf	?_stristr,w,c
 13056  0011B4  E005               	bz	l13093
 13057                           
 13058                           ;main.c: 961: strcpy( cmdbuf, cmdbuf + 8);
 13059  0011B6  0E01               	movlw	high _cmdbuf
 13060  0011B8  D8FE               	call	PL16	;call to abstracted procedure
 13061  0011BA  EC04  F028         	call	_strcpy	;wreg free
 13062                           
 13063                           ;main.c: 962: }
 13064  0011BE  D0AA               	goto	l13133
 13065  0011C0                     l13093:
 13066                           
 13067                           ;main.c: 963: else if (0 != stristr(cmdbuf, "MODE ")) {
 13068  0011C0  0101               	movlb	1	; () banked
 13069  0011C2  0E01               	movlw	high _cmdbuf
 13070  0011C4  6E27               	movwf	?_stristr+1,c
 13071  0011C6  0E20               	movlw	low _cmdbuf
 13072  0011C8  6E26               	movwf	?_stristr,c
 13073  0011CA  0E7F               	movlw	high STR_113
 13074  0011CC  6E29               	movwf	?_stristr+3,c
 13075  0011CE  0E85               	movlw	low STR_113
 13076  0011D0  6E28               	movwf	?_stristr+2,c
 13077  0011D2  EC56  F023         	call	_stristr	;wreg free
 13078  0011D6  5027               	movf	?_stristr+1,w,c
 13079  0011D8  1026               	iorwf	?_stristr,w,c
 13080  0011DA  E05F               	bz	l13121
 13081                           
 13082                           ;main.c: 964: strcpy( cmdbuf, cmdbuf + 5);
 13083  0011DC  D8DE               	call	PL10	;call to abstracted procedure
 13084  0011DE  EC04  F028         	call	_strcpy	;wreg free
 13085                           
 13086                           ; BSR set to: 0
 13087                           ;main.c: 965: if (0 != stristr(cmdbuf, "VERBOSE")) {
 13088  0011E2  0101               	movlb	1	; () banked
 13089  0011E4  0E01               	movlw	high _cmdbuf
 13090  0011E6  6E27               	movwf	?_stristr+1,c
 13091  0011E8  0E20               	movlw	low _cmdbuf
 13092  0011EA  6E26               	movwf	?_stristr,c
 13093  0011EC  0E7E               	movlw	high STR_114
 13094  0011EE  6E29               	movwf	?_stristr+3,c
 13095  0011F0  0EFD               	movlw	low STR_114
 13096  0011F2  6E28               	movwf	?_stristr+2,c
 13097  0011F4  EC56  F023         	call	_stristr	;wreg free
 13098  0011F8  5027               	movf	?_stristr+1,w,c
 13099  0011FA  1026               	iorwf	?_stristr,w,c
 13100  0011FC  E010               	bz	l13105
 13101                           
 13102                           ;main.c: 966: mode = 0;
 13103  0011FE  0100               	movlb	0	; () banked
 13104  001200  6BD7               	clrf	_mode& (0+255),b
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;main.c: 967: writeEEPROM(0x03, 0);
 13108  001202  6A1A               	clrf	?_writeEEPROM+1,c
 13109  001204  0E03               	movlw	3
 13110  001206  6E19               	movwf	?_writeEEPROM,c
 13111  001208  0E00               	movlw	0
 13112  00120A  6A1B               	clrf	?_writeEEPROM+2,c
 13113  00120C  EC48  F028         	call	_writeEEPROM	;wreg free
 13114                           
 13115                           ;main.c: 968: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 13116  001210  0E7B               	movlw	high STR_115
 13117  001212  6E1B               	movwf	?_putsUSART+1,c
 13118  001214  0E47               	movlw	low STR_115
 13119  001216  6E1A               	movwf	?_putsUSART,c
 13120  001218  ECC1  F025         	call	_putsUSART	;wreg free
 13121                           
 13122                           ;main.c: 969: }
 13123  00121C  D07B               	goto	l13133
 13124  00121E                     l13105:
 13125                           
 13126                           ;main.c: 970: else if (0 != stristr(cmdbuf, "VSCP")) {
 13127  00121E  0101               	movlb	1	; () banked
 13128  001220  0E01               	movlw	high _cmdbuf
 13129  001222  6E27               	movwf	?_stristr+1,c
 13130  001224  0E20               	movlw	low _cmdbuf
 13131  001226  6E26               	movwf	?_stristr,c
 13132  001228  0E7F               	movlw	high STR_116
 13133  00122A  6E29               	movwf	?_stristr+3,c
 13134  00122C  0EC0               	movlw	low STR_116
 13135  00122E  6E28               	movwf	?_stristr+2,c
 13136  001230  EC56  F023         	call	_stristr	;wreg free
 13137  001234  5027               	movf	?_stristr+1,w,c
 13138  001236  1026               	iorwf	?_stristr,w,c
 13139  001238  E011               	bz	l13113
 13140                           
 13141                           ;main.c: 971: mode = 1;
 13142  00123A  0E01               	movlw	1
 13143  00123C  0100               	movlb	0	; () banked
 13144  00123E  6FD7               	movwf	_mode& (0+255),b
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;main.c: 972: writeEEPROM(0x03, 1);
 13148  001240  6A1A               	clrf	?_writeEEPROM+1,c
 13149  001242  0E03               	movlw	3
 13150  001244  6E19               	movwf	?_writeEEPROM,c
 13151  001246  0E01               	movlw	1
 13152  001248  6E1B               	movwf	?_writeEEPROM+2,c
 13153  00124A  EC48  F028         	call	_writeEEPROM	;wreg free
 13154                           
 13155                           ;main.c: 973: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 13156  00124E  0E7A               	movlw	high STR_117
 13157  001250  6E1B               	movwf	?_putsUSART+1,c
 13158  001252  0ECC               	movlw	low STR_117
 13159  001254  6E1A               	movwf	?_putsUSART,c
 13160  001256  ECC1  F025         	call	_putsUSART	;wreg free
 13161                           
 13162                           ;main.c: 974: }
 13163  00125A  D05C               	goto	l13133
 13164  00125C                     l13113:
 13165                           
 13166                           ;main.c: 975: else if (0 != stristr(cmdbuf, "SLCAN")) {
 13167  00125C  0101               	movlb	1	; () banked
 13168  00125E  0E01               	movlw	high _cmdbuf
 13169  001260  6E27               	movwf	?_stristr+1,c
 13170  001262  0E20               	movlw	low _cmdbuf
 13171  001264  6E26               	movwf	?_stristr,c
 13172  001266  0E7F               	movlw	high STR_118
 13173  001268  6E29               	movwf	?_stristr+3,c
 13174  00126A  0E97               	movlw	low STR_118
 13175  00126C  6E28               	movwf	?_stristr+2,c
 13176  00126E  EC56  F023         	call	_stristr	;wreg free
 13177  001272  5027               	movf	?_stristr+1,w,c
 13178  001274  1026               	iorwf	?_stristr,w,c
 13179  001276  E04E               	bz	l13133
 13180                           
 13181                           ;main.c: 976: mode = 2;
 13182  001278  0E02               	movlw	2
 13183  00127A  0100               	movlb	0	; () banked
 13184  00127C  6FD7               	movwf	_mode& (0+255),b
 13185                           
 13186                           ; BSR set to: 0
 13187                           ;main.c: 977: writeEEPROM(0x03, 2);
 13188  00127E  6A1A               	clrf	?_writeEEPROM+1,c
 13189  001280  0E03               	movlw	3
 13190  001282  6E19               	movwf	?_writeEEPROM,c
 13191  001284  0E02               	movlw	2
 13192  001286  6E1B               	movwf	?_writeEEPROM+2,c
 13193  001288  EC48  F028         	call	_writeEEPROM	;wreg free
 13194                           
 13195                           ;main.c: 978: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 13196  00128C  0E7B               	movlw	high STR_119
 13197  00128E  6E1B               	movwf	?_putsUSART+1,c
 13198  001290  0EB4               	movlw	low STR_119
 13199  001292  6E1A               	movwf	?_putsUSART,c
 13200  001294  ECC1  F025         	call	_putsUSART	;wreg free
 13201  001298  D03D               	goto	l13133
 13202  00129A                     l13121:
 13203                           
 13204                           ;main.c: 982: else if (0 != stristr(cmdbuf, "FILTER ")) {
 13205  00129A  0101               	movlb	1	; () banked
 13206  00129C  0E01               	movlw	high _cmdbuf
 13207  00129E  6E27               	movwf	?_stristr+1,c
 13208  0012A0  0E20               	movlw	low _cmdbuf
 13209  0012A2  6E26               	movwf	?_stristr,c
 13210  0012A4  0E7E               	movlw	high STR_120
 13211  0012A6  6E29               	movwf	?_stristr+3,c
 13212  0012A8  0EED               	movlw	low STR_120
 13213  0012AA  6E28               	movwf	?_stristr+2,c
 13214  0012AC  EC56  F023         	call	_stristr	;wreg free
 13215  0012B0  5027               	movf	?_stristr+1,w,c
 13216  0012B2  1026               	iorwf	?_stristr,w,c
 13217  0012B4  E010               	bz	l13125
 13218                           
 13219                           ;main.c: 983: strcpy( cmdbuf, cmdbuf + 7);
 13220  0012B6  0E01               	movlw	high _cmdbuf
 13221  0012B8  6E1A               	movwf	?_strcpy+1,c
 13222  0012BA  0E20               	movlw	low _cmdbuf
 13223  0012BC  6E19               	movwf	?_strcpy,c
 13224  0012BE  0E27               	movlw	low (_cmdbuf+7)
 13225  0012C0  0100               	movlb	0	; () banked
 13226  0012C2  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13227  0012C4  0E01               	movlw	high (_cmdbuf+7)
 13228  0012C6  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13229  0012C8  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13230  0012CC  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13231  0012D0  EC04  F028         	call	_strcpy	;wreg free
 13232                           
 13233                           ;main.c: 984: }
 13234  0012D4  D01F               	goto	l13133
 13235  0012D6                     l13125:
 13236                           
 13237                           ;main.c: 986: else if (0 != stristr(cmdbuf, "MASK ")) {
 13238  0012D6  0101               	movlb	1	; () banked
 13239  0012D8  0E01               	movlw	high _cmdbuf
 13240  0012DA  6E27               	movwf	?_stristr+1,c
 13241  0012DC  0E20               	movlw	low _cmdbuf
 13242  0012DE  6E26               	movwf	?_stristr,c
 13243  0012E0  0E7F               	movlw	high STR_121
 13244  0012E2  6E29               	movwf	?_stristr+3,c
 13245  0012E4  0E8B               	movlw	low STR_121
 13246  0012E6  6E28               	movwf	?_stristr+2,c
 13247  0012E8  EC56  F023         	call	_stristr	;wreg free
 13248  0012EC  5027               	movf	?_stristr+1,w,c
 13249  0012EE  1026               	iorwf	?_stristr,w,c
 13250  0012F0  E004               	bz	l13129
 13251                           
 13252                           ;main.c: 987: strcpy( cmdbuf, cmdbuf + 5);
 13253  0012F2  D853               	call	PL10	;call to abstracted procedure
 13254  0012F4  EC04  F028         	call	_strcpy	;wreg free
 13255                           
 13256                           ;main.c: 988: }
 13257  0012F8  D00D               	goto	l13133
 13258  0012FA                     l13129:
 13259                           
 13260                           ;main.c: 989: else {
 13261                           ;main.c: 990: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 13262  0012FA  0E7A               	movlw	high STR_122
 13263  0012FC  6E1B               	movwf	?_putsUSART+1,c
 13264  0012FE  0E69               	movlw	low STR_122
 13265  001300  6E1A               	movwf	?_putsUSART,c
 13266  001302  ECC1  F025         	call	_putsUSART	;wreg free
 13267  001306  D006               	goto	l13133
 13268  001308                     l13131:
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;main.c: 994: else {
 13272                           ;main.c: 995: putsUSART((char *) "-ERROR - Unknown command\r\n");
 13273  001308  0E7B               	movlw	high STR_123
 13274  00130A  6E1B               	movwf	?_putsUSART+1,c
 13275  00130C  0E7E               	movlw	low STR_123
 13276  00130E  6E1A               	movwf	?_putsUSART,c
 13277  001310  ECC1  F025         	call	_putsUSART	;wreg free
 13278  001314                     l13133:
 13279                           
 13280                           ;main.c: 996: }
 13281                           ;main.c: 998: memset(cmdbuf, 0, sizeof( cmdbuf));
 13282  001314  0101               	movlb	1	; () banked
 13283  001316  0E01               	movlw	high _cmdbuf
 13284  001318  6E1A               	movwf	?_memset+1,c
 13285  00131A  0E20               	movlw	low _cmdbuf
 13286  00131C  6E19               	movwf	?_memset,c
 13287  00131E  6A1C               	clrf	?_memset+3,c
 13288  001320  6A1B               	clrf	?_memset+2,c
 13289  001322  6A1E               	clrf	?_memset+5,c
 13290  001324  0E50               	movlw	80
 13291  001326  6E1D               	movwf	?_memset+4,c
 13292  001328  EC32  F028         	call	_memset	;wreg free
 13293                           
 13294                           ;main.c: 999: pos = 0;
 13295  00132C  0100               	movlb	0	; () banked
 13296  00132E  6BD8               	clrf	_pos& (0+255),b
 13297  001330                     l13137:
 13298                           
 13299                           ;main.c: 1000: }
 13300                           ;main.c: 1001: }
 13301                           ;main.c: 1004: (INTCONbits.GIE = 1);
 13302  001330  8EF2               	bsf	intcon,7,c	;volatile
 13303  001332                     l491:
 13304  001332  0012               	return	
 13305  001334                     __end_of_doModeVerbose:
 13306                           	opt stack 0
 13307  001334                     PL2:
 13308                           	opt stack 21
 13309  001334  0E20               	movlw	low _cmdbuf
 13310  001336  0100               	movlb	0	; () banked
 13311  001338  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13312  00133A  0E01               	movlw	high _cmdbuf
 13313  00133C  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13314  00133E  1827               	xorwf	?_stristr+1,w,c
 13315  001340  0012               	return	
 13316  001342                     __end_ofPL2:
 13317                           	opt stack 0
 13318  001342                     PL6:
 13319                           	opt stack 21
 13320  001342  6A26               	clrf	?_strtok+1,c
 13321  001344  6A25               	clrf	?_strtok,c
 13322  001346  0E7F               	movlw	high STR_29
 13323  001348  6E28               	movwf	?_strtok+3,c
 13324  00134A  0EF4               	movlw	low STR_29
 13325  00134C  6E27               	movwf	?_strtok+2,c
 13326  00134E  0012               	return	
 13327  001350                     __end_ofPL6:
 13328                           	opt stack 0
 13329  001350                     PL8:
 13330                           	opt stack 21
 13331  001350  6BBA               	clrf	(??_doModeVerbose+9)& (0+255),b
 13332  001352  6BBB               	clrf	(??_doModeVerbose+10)& (0+255),b
 13333  001354  6BBC               	clrf	(??_doModeVerbose+11)& (0+255),b
 13334  001356  0E1A               	movlw	26
 13335  001358                     u17125:
 13336  001358  90D8               	bcf	status,0,c
 13337  00135A  37B9               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 13338  00135C  37BA               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 13339  00135E  37BB               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 13340  001360  37BC               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 13341  001362  2EE8               	decfsz	wreg,f,c
 13342  001364  D7F9               	goto	u17125
 13343  001366  51B5               	movf	(??_doModeVerbose+4)& (0+255),w,b
 13344  001368  11B9               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 13345  00136A  6FBD               	movwf	(??_doModeVerbose+12)& (0+255),b
 13346  00136C  51B6               	movf	(??_doModeVerbose+5)& (0+255),w,b
 13347  00136E  11BA               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 13348  001370  6FBE               	movwf	(??_doModeVerbose+13)& (0+255),b
 13349  001372  51B7               	movf	(??_doModeVerbose+6)& (0+255),w,b
 13350  001374  11BB               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 13351  001376  6FBF               	movwf	(??_doModeVerbose+14)& (0+255),b
 13352  001378  51B8               	movf	(??_doModeVerbose+7)& (0+255),w,b
 13353  00137A  11BC               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 13354  00137C  6FC0               	movwf	(??_doModeVerbose+15)& (0+255),b
 13355  00137E  51B1               	movf	??_doModeVerbose& (0+255),w,b
 13356  001380  11BD               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 13357  001382  6FC1               	movwf	(??_doModeVerbose+16)& (0+255),b
 13358  001384  51B2               	movf	(??_doModeVerbose+1)& (0+255),w,b
 13359  001386  11BE               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 13360  001388  6FC2               	movwf	(??_doModeVerbose+17)& (0+255),b
 13361  00138A  51B3               	movf	(??_doModeVerbose+2)& (0+255),w,b
 13362  00138C  11BF               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 13363  00138E  6FC3               	movwf	(??_doModeVerbose+18)& (0+255),b
 13364  001390  51B4               	movf	(??_doModeVerbose+3)& (0+255),w,b
 13365  001392  11C0               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 13366  001394  6FC4               	movwf	(??_doModeVerbose+19)& (0+255),b
 13367  001396  0103               	movlb	3	; () banked
 13368  001398  0012               	return	
 13369  00139A                     __end_ofPL8:
 13370                           	opt stack 0
 13371  00139A                     PL10:
 13372                           	opt stack 21
 13373  00139A  0E01               	movlw	high _cmdbuf
 13374  00139C  6E1A               	movwf	?_strcpy+1,c
 13375  00139E  0E20               	movlw	low _cmdbuf
 13376  0013A0  6E19               	movwf	?_strcpy,c
 13377  0013A2  0E25               	movlw	low (_cmdbuf+5)
 13378  0013A4  0100               	movlb	0	; () banked
 13379  0013A6  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13380  0013A8  0E01               	movlw	high (_cmdbuf+5)
 13381  0013AA  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13382  0013AC  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13383  0013B0  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13384  0013B4  0012               	return	
 13385  0013B6                     __end_ofPL10:
 13386                           	opt stack 0
 13387  0013B6                     PL16:
 13388                           	opt stack 21
 13389  0013B6  6E1A               	movwf	?_strcpy+1,c
 13390  0013B8  0E20               	movlw	low _cmdbuf
 13391  0013BA  6E19               	movwf	?_strcpy,c
 13392  0013BC  0E28               	movlw	low (_cmdbuf+8)
 13393  0013BE  0100               	movlb	0	; () banked
 13394  0013C0  6FB1               	movwf	??_doModeVerbose& (0+255),b
 13395  0013C2  0E01               	movlw	high (_cmdbuf+8)
 13396  0013C4  6FB2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13397  0013C6  C0B1  F01B         	movff	??_doModeVerbose,?_strcpy+2
 13398  0013CA  C0B2  F01C         	movff	??_doModeVerbose+1,?_strcpy+3
 13399  0013CE  0012               	return	
 13400  0013D0                     __end_ofPL16:
 13401                           	opt stack 0
 13402  0013D0                     PL30:
 13403                           	opt stack 21
 13404  0013D0  0101               	movlb	1	; () banked
 13405  0013D2  0E01               	movlw	high _cmdbuf
 13406  0013D4  6E26               	movwf	?_strtok+1,c
 13407  0013D6  0E20               	movlw	low _cmdbuf
 13408  0013D8  6E25               	movwf	?_strtok,c
 13409  0013DA  0E7F               	movlw	high STR_29
 13410  0013DC  6E28               	movwf	?_strtok+3,c
 13411  0013DE  0EF4               	movlw	low STR_29
 13412  0013E0  6E27               	movwf	?_strtok+2,c
 13413  0013E2  0012               	return	
 13414  0013E4                     __end_ofPL30:
 13415                           	opt stack 0
 13416  0013E4                     PL34:
 13417                           	opt stack 21
 13418  0013E4  0E01               	movlw	high _cmdbuf
 13419  0013E6  6E26               	movwf	?_strtok+1,c
 13420  0013E8  0E20               	movlw	low _cmdbuf
 13421  0013EA  6E25               	movwf	?_strtok,c
 13422  0013EC  0E7F               	movlw	high (STR_247+5)
 13423  0013EE  6E28               	movwf	?_strtok+3,c
 13424  0013F0  0E2A               	movlw	low (STR_247+5)
 13425  0013F2  6E27               	movwf	?_strtok+2,c
 13426  0013F4  0012               	return	
 13427  0013F6                     __end_ofPL34:
 13428                           	opt stack 0
 13429  0013F6                     PL38:
 13430                           	opt stack 21
 13431  0013F6  6A26               	clrf	?_strtok+1,c
 13432  0013F8  6A25               	clrf	?_strtok,c
 13433  0013FA  0E7F               	movlw	high (STR_247+5)
 13434  0013FC  6E28               	movwf	?_strtok+3,c
 13435  0013FE  0E2A               	movlw	low (STR_247+5)
 13436  001400  6E27               	movwf	?_strtok+2,c
 13437  001402  0012               	return	
 13438  001404                     __end_ofPL38:
 13439                           	opt stack 0
 13440  001404                     PL42:
 13441                           	opt stack 21
 13442  001404  0103               	movlb	3	; () banked
 13443  001406  5130               	movf	doModeVerbose@i_1064& (0+255),w,b
 13444  001408  C32E  F0B1         	movff	doModeVerbose@reg,??_doModeVerbose
 13445  00140C  0100               	movlb	0	; () banked
 13446  00140E  6BB2               	clrf	(??_doModeVerbose+1)& (0+255),b
 13447  001410  27B1               	addwf	??_doModeVerbose& (0+255),f,b
 13448  001412  0E00               	movlw	0
 13449  001414  23B2               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 13450  001416  51B1               	movf	??_doModeVerbose& (0+255),w,b
 13451  001418  6F64               	movwf	(?_sprintf+4)& (0+255),b
 13452  00141A  6B65               	clrf	(?_sprintf+5)& (0+255),b
 13453  00141C  0012               	return	
 13454  00141E                     __end_ofPL42:
 13455                           	opt stack 0
 13456  00141E                     PL44:
 13457                           	opt stack 21
 13458  00141E  0100               	movlb	0	; () banked
 13459  001420  6BB2               	clrf	(??_doModeVerbose+1)& (0+255),b
 13460  001422  6BB3               	clrf	(??_doModeVerbose+2)& (0+255),b
 13461  001424  6BB4               	clrf	(??_doModeVerbose+3)& (0+255),b
 13462  001426  C0B3  F0B4         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 13463  00142A  C0B2  F0B3         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 13464  00142E  C0B1  F0B2         	movff	??_doModeVerbose,??_doModeVerbose+1
 13465  001432  6BB1               	clrf	??_doModeVerbose& (0+255),b
 13466  001434  0103               	movlb	3	; () banked
 13467  001436  0012               	return	
 13468  001438                     __end_ofPL44:
 13469                           	opt stack 0
 13470  001438                     PL50:
 13471                           	opt stack 21
 13472  001438  6E19               	movwf	?__CANIDToRegs,c
 13473  00143A  C323  F01B         	movff	doModeVerbose@id_1173,?__CANIDToRegs+2
 13474  00143E  C324  F01C         	movff	doModeVerbose@id_1173+1,?__CANIDToRegs+3
 13475  001442  C325  F01D         	movff	doModeVerbose@id_1173+2,?__CANIDToRegs+4
 13476  001446  C326  F01E         	movff	doModeVerbose@id_1173+3,?__CANIDToRegs+5
 13477  00144A  0E01               	movlw	1
 13478  00144C  6E1F               	movwf	?__CANIDToRegs+6,c
 13479  00144E  0C01               	retlw	1
 13480  001450                     __end_ofPL50:
 13481                           	opt stack 0
 13482  001450                     PL56:
 13483                           	opt stack 21
 13484  001450  0100               	movlb	0	; () banked
 13485  001452  6FB6               	movwf	(??_doModeVerbose+5)& (0+255),b
 13486  001454  6BB7               	clrf	(??_doModeVerbose+6)& (0+255),b
 13487  001456  6BB8               	clrf	(??_doModeVerbose+7)& (0+255),b
 13488  001458  C0B6  F0B8         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 13489  00145C  C0B5  F0B7         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 13490  001460  6BB6               	clrf	(??_doModeVerbose+5)& (0+255),b
 13491  001462  6BB5               	clrf	(??_doModeVerbose+4)& (0+255),b
 13492  001464  0012               	return	
 13493  001466                     __end_ofPL56:
 13494                           	opt stack 0
 13495                           tblptru	equ	0xFF8
 13496                           tblptrh	equ	0xFF7
 13497                           tblptrl	equ	0xFF6
 13498                           tablat	equ	0xFF5
 13499                           prodh	equ	0xFF4
 13500                           prodl	equ	0xFF3
 13501                           intcon	equ	0xFF2
 13502                           indf0	equ	0xFEF
 13503                           postinc0	equ	0xFEE
 13504                           fsr0h	equ	0xFEA
 13505                           fsr0l	equ	0xFE9
 13506                           wreg	equ	0xFE8
 13507                           indf1	equ	0xFE7
 13508                           postinc1	equ	0xFE6
 13509                           postdec1	equ	0xFE5
 13510                           fsr1h	equ	0xFE2
 13511                           fsr1l	equ	0xFE1
 13512                           indf2	equ	0xFDF
 13513                           postinc2	equ	0xFDE
 13514                           postdec2	equ	0xFDD
 13515                           plusw2	equ	0xFDB
 13516                           fsr2h	equ	0xFDA
 13517                           fsr2l	equ	0xFD9
 13518                           status	equ	0xFD8
 13519                           
 13520 ;; *************** function _setFilter *****************
 13521 ;; Defined at:
 13522 ;;		line 2521 in file "main.c"
 13523 ;; Parameters:    Size  Location     Type
 13524 ;;  filter          1    wreg     unsigned char 
 13525 ;;  val             4   24[COMRAM] unsigned long 
 13526 ;; Auto vars:     Size  Location     Type
 13527 ;;  filter          1   34[COMRAM] unsigned char 
 13528 ;;  eidl            1   38[COMRAM] unsigned char 
 13529 ;;  eidh            1   37[COMRAM] unsigned char 
 13530 ;;  sidl            1   36[COMRAM] unsigned char 
 13531 ;;  sidh            1   35[COMRAM] unsigned char 
 13532 ;; Return value:  Size  Location     Type
 13533 ;;		None               void
 13534 ;; Registers used:
 13535 ;;		wreg, status,2, status,0
 13536 ;; Tracked objects:
 13537 ;;		On entry : F/3
 13538 ;;		On exit  : F/3
 13539 ;;		Unchanged: E/0
 13540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13541 ;;      Params:         4       0       0       0       0       0       0
 13542 ;;      Locals:         5       0       0       0       0       0       0
 13543 ;;      Temps:          6       0       0       0       0       0       0
 13544 ;;      Totals:        15       0       0       0       0       0       0
 13545 ;;Total ram usage:       15 bytes
 13546 ;; Hardware stack levels used:    1
 13547 ;; Hardware stack levels required when called:    2
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_doModeVerbose
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text20
 13556  002668                     __ptext20:
 13557                           	opt stack 0
 13558  002668                     _setFilter:
 13559                           	opt stack 27
 13560                           
 13561                           ;incstack = 0
 13562                           ;incstack = 0
 13563                           ;setFilter@filter stored from wreg
 13564  002668  CFE8 F023          	movff	wreg,setFilter@filter
 13565                           
 13566                           ; BSR set to: 3
 13567                           ;main.c: 2522: uint8_t sidh = (long)val >> 21L;
 13568  00266C  0E15               	movlw	21
 13569  00266E  6E1D               	movwf	??_setFilter& (0+255),c
 13570  002670  C019  F01E         	movff	setFilter@val,??_setFilter+1
 13571  002674  C01A  F01F         	movff	setFilter@val+1,??_setFilter+2
 13572  002678  C01B  F020         	movff	setFilter@val+2,??_setFilter+3
 13573  00267C  C01C  F021         	movff	setFilter@val+3,??_setFilter+4
 13574  002680                     u14545:
 13575  002680  661D               	tstfsz	??_setFilter,c
 13576  002682  D001               	goto	u14546
 13577  002684  D007               	goto	u14547
 13578  002686                     u14546:
 13579  002686  3421               	rlcf	??_setFilter+4,w,c
 13580  002688  3221               	rrcf	??_setFilter+4,f,c
 13581  00268A  3220               	rrcf	??_setFilter+3,f,c
 13582  00268C  321F               	rrcf	??_setFilter+2,f,c
 13583  00268E  321E               	rrcf	??_setFilter+1,f,c
 13584  002690  2E1D               	decfsz	??_setFilter,f,c
 13585  002692  D7F6               	goto	u14545
 13586  002694                     u14547:
 13587  002694  501E               	movf	??_setFilter+1,w,c
 13588  002696  6E24               	movwf	setFilter@sidh,c
 13589                           
 13590                           ;main.c: 2523: uint8_t sidl = ( ( (long)val >> 13L) & 0xe0) |
 13591                           ;main.c: 2524: ( (long)(val) & 0x03L) |
 13592                           ;main.c: 2525: 0x08;
 13593  002698  C019  F01D         	movff	setFilter@val,??_setFilter
 13594  00269C  0E03               	movlw	3
 13595  00269E  161D               	andwf	??_setFilter,f,c
 13596  0026A0  0E0D               	movlw	13
 13597  0026A2  6E1E               	movwf	(??_setFilter+1)& (0+255),c
 13598  0026A4  C019  F01F         	movff	setFilter@val,??_setFilter+2
 13599  0026A8  C01A  F020         	movff	setFilter@val+1,??_setFilter+3
 13600  0026AC  C01B  F021         	movff	setFilter@val+2,??_setFilter+4
 13601  0026B0  C01C  F022         	movff	setFilter@val+3,??_setFilter+5
 13602  0026B4                     u14555:
 13603  0026B4  661E               	tstfsz	??_setFilter+1,c
 13604  0026B6  D001               	goto	u14556
 13605  0026B8  D007               	goto	u14557
 13606  0026BA                     u14556:
 13607  0026BA  3422               	rlcf	??_setFilter+5,w,c
 13608  0026BC  3222               	rrcf	??_setFilter+5,f,c
 13609  0026BE  3221               	rrcf	??_setFilter+4,f,c
 13610  0026C0  3220               	rrcf	??_setFilter+3,f,c
 13611  0026C2  321F               	rrcf	??_setFilter+2,f,c
 13612  0026C4  2E1E               	decfsz	??_setFilter+1,f,c
 13613  0026C6  D7F6               	goto	u14555
 13614  0026C8                     u14557:
 13615  0026C8  501F               	movf	??_setFilter+2,w,c
 13616  0026CA  0BE0               	andlw	224
 13617  0026CC  101D               	iorwf	??_setFilter,w,c
 13618  0026CE  0908               	iorlw	8
 13619  0026D0  6E25               	movwf	setFilter@sidl,c
 13620                           
 13621                           ; BSR set to: 3
 13622                           ;main.c: 2526: uint8_t eidh = (long)val >> 8L;
 13623  0026D2  C01A  F026         	movff	setFilter@val+1,setFilter@eidh
 13624                           
 13625                           ; BSR set to: 3
 13626                           ;main.c: 2527: uint8_t eidl = val;
 13627  0026D6  C019  F027         	movff	setFilter@val,setFilter@eidl
 13628                           
 13629                           ;main.c: 2529: switch ( filter ) {
 13630  0026DA  D090               	goto	l11493
 13631  0026DC                     l1131:
 13632                           
 13633                           ; BSR set to: 3
 13634                           ;main.c: 2532: RXF0SIDH = sidh;
 13635  0026DC  C024  FF00         	movff	setFilter@sidh,3840	;volatile
 13636                           
 13637                           ;main.c: 2533: RXF0SIDL = sidl;
 13638  0026E0  C025  FF01         	movff	setFilter@sidl,3841	;volatile
 13639                           
 13640                           ;main.c: 2534: RXF0EIDH = eidh;
 13641  0026E4  C026  FF02         	movff	setFilter@eidh,3842	;volatile
 13642                           
 13643                           ;main.c: 2535: RXF0EIDL = eidl;
 13644  0026E8  C027  FF03         	movff	setFilter@eidl,3843	;volatile
 13645                           
 13646                           ;main.c: 2536: break;
 13647  0026EC  D0AA               	goto	l1148
 13648  0026EE                     l1133:
 13649                           
 13650                           ; BSR set to: 3
 13651                           ;main.c: 2539: RXF1SIDH = sidh;
 13652  0026EE  C024  FF04         	movff	setFilter@sidh,3844	;volatile
 13653                           
 13654                           ;main.c: 2540: RXF1SIDL = sidl;
 13655  0026F2  C025  FF05         	movff	setFilter@sidl,3845	;volatile
 13656                           
 13657                           ;main.c: 2541: RXF1EIDH = eidh;
 13658  0026F6  C026  FF06         	movff	setFilter@eidh,3846	;volatile
 13659                           
 13660                           ;main.c: 2542: RXF1EIDL = eidl;
 13661  0026FA  C027  FF07         	movff	setFilter@eidl,3847	;volatile
 13662                           
 13663                           ;main.c: 2543: break;
 13664  0026FE  D0A1               	goto	l1148
 13665  002700                     l1134:
 13666                           
 13667                           ; BSR set to: 3
 13668                           ;main.c: 2546: RXF2SIDH = sidh;
 13669  002700  C024  FF08         	movff	setFilter@sidh,3848	;volatile
 13670                           
 13671                           ;main.c: 2547: RXF2SIDL = sidl;
 13672  002704  C025  FF09         	movff	setFilter@sidl,3849	;volatile
 13673                           
 13674                           ;main.c: 2548: RXF2EIDH = eidh;
 13675  002708  C026  FF0A         	movff	setFilter@eidh,3850	;volatile
 13676                           
 13677                           ;main.c: 2549: RXF2EIDL = eidl;
 13678  00270C  C027  FF0B         	movff	setFilter@eidl,3851	;volatile
 13679                           
 13680                           ;main.c: 2550: break;
 13681  002710  D098               	goto	l1148
 13682  002712                     l1135:
 13683                           
 13684                           ; BSR set to: 3
 13685                           ;main.c: 2553: RXF3SIDH = sidh;
 13686  002712  C024  FF0C         	movff	setFilter@sidh,3852	;volatile
 13687                           
 13688                           ;main.c: 2554: RXF3SIDL = sidl;
 13689  002716  C025  FF0D         	movff	setFilter@sidl,3853	;volatile
 13690                           
 13691                           ;main.c: 2555: RXF3EIDH = eidh;
 13692  00271A  C026  FF0E         	movff	setFilter@eidh,3854	;volatile
 13693                           
 13694                           ;main.c: 2556: RXF3EIDL = eidl;
 13695  00271E  C027  FF0F         	movff	setFilter@eidl,3855	;volatile
 13696                           
 13697                           ;main.c: 2557: break;
 13698  002722  D08F               	goto	l1148
 13699  002724                     l1136:
 13700                           
 13701                           ; BSR set to: 3
 13702                           ;main.c: 2560: RXF4SIDH = sidh;
 13703  002724  C024  FF10         	movff	setFilter@sidh,3856	;volatile
 13704                           
 13705                           ;main.c: 2561: RXF4SIDL = sidl;
 13706  002728  C025  FF11         	movff	setFilter@sidl,3857	;volatile
 13707                           
 13708                           ;main.c: 2562: RXF4EIDH = eidh;
 13709  00272C  C026  FF12         	movff	setFilter@eidh,3858	;volatile
 13710                           
 13711                           ;main.c: 2563: RXF4EIDL = eidl;
 13712  002730  C027  FF13         	movff	setFilter@eidl,3859	;volatile
 13713                           
 13714                           ;main.c: 2564: break;
 13715  002734  D086               	goto	l1148
 13716  002736                     l1137:
 13717                           
 13718                           ; BSR set to: 3
 13719                           ;main.c: 2567: RXF5SIDH = sidh;
 13720  002736  C024  FF14         	movff	setFilter@sidh,3860	;volatile
 13721                           
 13722                           ;main.c: 2568: RXF5SIDL = sidl;
 13723  00273A  C025  FF15         	movff	setFilter@sidl,3861	;volatile
 13724                           
 13725                           ;main.c: 2569: RXF5EIDH = eidh;
 13726  00273E  C026  FF16         	movff	setFilter@eidh,3862	;volatile
 13727                           
 13728                           ;main.c: 2570: RXF5EIDL = eidl;
 13729  002742  C027  FF17         	movff	setFilter@eidl,3863	;volatile
 13730                           
 13731                           ;main.c: 2571: break;
 13732  002746  D07D               	goto	l1148
 13733  002748                     l1138:
 13734                           
 13735                           ; BSR set to: 3
 13736                           ;main.c: 2574: RXF6SIDH = sidh;
 13737  002748  C024  FD60         	movff	setFilter@sidh,3424	;volatile
 13738                           
 13739                           ;main.c: 2575: RXF6SIDL = sidl;
 13740  00274C  C025  FD61         	movff	setFilter@sidl,3425	;volatile
 13741                           
 13742                           ;main.c: 2576: RXF6EIDH = eidh;
 13743  002750  C026  FD62         	movff	setFilter@eidh,3426	;volatile
 13744                           
 13745                           ;main.c: 2577: RXF6EIDL = eidl;
 13746  002754  C027  FD63         	movff	setFilter@eidl,3427	;volatile
 13747                           
 13748                           ;main.c: 2578: break;
 13749  002758  D074               	goto	l1148
 13750  00275A                     l1139:
 13751                           
 13752                           ; BSR set to: 3
 13753                           ;main.c: 2581: RXF7SIDH = sidh;
 13754  00275A  C024  FD64         	movff	setFilter@sidh,3428	;volatile
 13755                           
 13756                           ;main.c: 2582: RXF7SIDL = sidl;
 13757  00275E  C025  FD65         	movff	setFilter@sidl,3429	;volatile
 13758                           
 13759                           ;main.c: 2583: RXF7EIDH = eidh;
 13760  002762  C026  FD66         	movff	setFilter@eidh,3430	;volatile
 13761                           
 13762                           ;main.c: 2584: RXF7EIDL = eidl;
 13763  002766  C027  FD67         	movff	setFilter@eidl,3431	;volatile
 13764                           
 13765                           ;main.c: 2585: break;
 13766  00276A  D06B               	goto	l1148
 13767  00276C                     l1140:
 13768                           
 13769                           ; BSR set to: 3
 13770                           ;main.c: 2588: RXF8SIDH = sidh;
 13771  00276C  C024  FD68         	movff	setFilter@sidh,3432	;volatile
 13772                           
 13773                           ;main.c: 2589: RXF8SIDL = sidl;
 13774  002770  C025  FD69         	movff	setFilter@sidl,3433	;volatile
 13775                           
 13776                           ;main.c: 2590: RXF8EIDH = eidh;
 13777  002774  C026  FD6A         	movff	setFilter@eidh,3434	;volatile
 13778                           
 13779                           ;main.c: 2591: RXF8EIDL = eidl;
 13780  002778  C027  FD6B         	movff	setFilter@eidl,3435	;volatile
 13781                           
 13782                           ;main.c: 2592: break;
 13783  00277C  D062               	goto	l1148
 13784  00277E                     l1141:
 13785                           
 13786                           ; BSR set to: 3
 13787                           ;main.c: 2595: RXF9SIDH = sidh;
 13788  00277E  C024  FD70         	movff	setFilter@sidh,3440	;volatile
 13789                           
 13790                           ;main.c: 2596: RXF9SIDL = sidl;
 13791  002782  C025  FD71         	movff	setFilter@sidl,3441	;volatile
 13792                           
 13793                           ;main.c: 2597: RXF9EIDH = eidh;
 13794  002786  C026  FD72         	movff	setFilter@eidh,3442	;volatile
 13795                           
 13796                           ;main.c: 2598: RXF9EIDL = eidl;
 13797  00278A  C027  FD73         	movff	setFilter@eidl,3443	;volatile
 13798                           
 13799                           ;main.c: 2599: break;
 13800  00278E  D059               	goto	l1148
 13801  002790                     l1142:
 13802                           
 13803                           ; BSR set to: 3
 13804                           ;main.c: 2602: RXF10SIDH = sidh;
 13805  002790  C024  FD74         	movff	setFilter@sidh,3444	;volatile
 13806                           
 13807                           ;main.c: 2603: RXF10SIDL = sidl;
 13808  002794  C025  FD75         	movff	setFilter@sidl,3445	;volatile
 13809                           
 13810                           ;main.c: 2604: RXF10EIDH = eidh;
 13811  002798  C026  FD76         	movff	setFilter@eidh,3446	;volatile
 13812                           
 13813                           ;main.c: 2605: RXF10EIDL = eidl;
 13814  00279C  C027  FD77         	movff	setFilter@eidl,3447	;volatile
 13815                           
 13816                           ;main.c: 2606: break;
 13817  0027A0  D050               	goto	l1148
 13818  0027A2                     l1143:
 13819                           
 13820                           ; BSR set to: 3
 13821                           ;main.c: 2609: RXF11SIDH = sidh;
 13822  0027A2  C024  FD78         	movff	setFilter@sidh,3448	;volatile
 13823                           
 13824                           ;main.c: 2610: RXF11SIDL = sidl;
 13825  0027A6  C025  FD79         	movff	setFilter@sidl,3449	;volatile
 13826                           
 13827                           ;main.c: 2611: RXF11EIDH = eidh;
 13828  0027AA  C026  FD7A         	movff	setFilter@eidh,3450	;volatile
 13829                           
 13830                           ;main.c: 2612: RXF11EIDL = eidl;
 13831  0027AE  C027  FD7B         	movff	setFilter@eidl,3451	;volatile
 13832                           
 13833                           ;main.c: 2613: break;
 13834  0027B2  D047               	goto	l1148
 13835  0027B4                     l1144:
 13836                           
 13837                           ; BSR set to: 3
 13838                           ;main.c: 2616: RXF12SIDH = sidh;
 13839  0027B4  C024  FD80         	movff	setFilter@sidh,3456	;volatile
 13840                           
 13841                           ;main.c: 2617: RXF12SIDL = sidl;
 13842  0027B8  C025  FD81         	movff	setFilter@sidl,3457	;volatile
 13843                           
 13844                           ;main.c: 2618: RXF12EIDH = eidh;
 13845  0027BC  C026  FD82         	movff	setFilter@eidh,3458	;volatile
 13846                           
 13847                           ;main.c: 2619: RXF12EIDL = eidl;
 13848  0027C0  C027  FD83         	movff	setFilter@eidl,3459	;volatile
 13849                           
 13850                           ;main.c: 2620: break;
 13851  0027C4  D03E               	goto	l1148
 13852  0027C6                     l1145:
 13853                           
 13854                           ; BSR set to: 3
 13855                           ;main.c: 2623: RXF13SIDH = sidh;
 13856  0027C6  C024  FD84         	movff	setFilter@sidh,3460	;volatile
 13857                           
 13858                           ;main.c: 2624: RXF13SIDL = sidl;
 13859  0027CA  C025  FD85         	movff	setFilter@sidl,3461	;volatile
 13860                           
 13861                           ;main.c: 2625: RXF13EIDH = eidh;
 13862  0027CE  C026  FD86         	movff	setFilter@eidh,3462	;volatile
 13863                           
 13864                           ;main.c: 2626: RXF13EIDL = eidl;
 13865  0027D2  C027  FD87         	movff	setFilter@eidl,3463	;volatile
 13866                           
 13867                           ;main.c: 2627: break;
 13868  0027D6  D035               	goto	l1148
 13869  0027D8                     l1146:
 13870                           
 13871                           ; BSR set to: 3
 13872                           ;main.c: 2630: RXF14SIDH = sidh;
 13873  0027D8  C024  FD88         	movff	setFilter@sidh,3464	;volatile
 13874                           
 13875                           ;main.c: 2631: RXF14SIDL = sidl;
 13876  0027DC  C025  FD89         	movff	setFilter@sidl,3465	;volatile
 13877                           
 13878                           ;main.c: 2632: RXF14EIDH = eidh;
 13879  0027E0  C026  FD8A         	movff	setFilter@eidh,3466	;volatile
 13880                           
 13881                           ;main.c: 2633: RXF14EIDL = eidl;
 13882  0027E4  C027  FD8B         	movff	setFilter@eidl,3467	;volatile
 13883                           
 13884                           ;main.c: 2634: break;
 13885  0027E8  D02C               	goto	l1148
 13886  0027EA                     l1147:
 13887                           
 13888                           ; BSR set to: 3
 13889                           ;main.c: 2637: RXF15SIDH = sidh;
 13890  0027EA  C024  FD90         	movff	setFilter@sidh,3472	;volatile
 13891                           
 13892                           ;main.c: 2638: RXF15SIDL = sidl;
 13893  0027EE  C025  FD91         	movff	setFilter@sidl,3473	;volatile
 13894                           
 13895                           ;main.c: 2639: RXF15EIDH = eidh;
 13896  0027F2  C026  FD92         	movff	setFilter@eidh,3474	;volatile
 13897                           
 13898                           ;main.c: 2640: RXF15EIDL = eidl;
 13899  0027F6  C027  FD93         	movff	setFilter@eidl,3475	;volatile
 13900                           
 13901                           ;main.c: 2641: break;
 13902  0027FA  D023               	goto	l1148
 13903  0027FC                     l11493:
 13904                           
 13905                           ; BSR set to: 3
 13906  0027FC  5023               	movf	setFilter@filter,w,c
 13907                           
 13908                           ; Switch size 1, requested type "space"
 13909                           ; Number of cases is 16, Range of values is 0 to 15
 13910                           ; switch strategies available:
 13911                           ; Name         Instructions Cycles
 13912                           ; simple_byte           49    25 (average)
 13913                           ;	Chosen strategy is simple_byte
 13914  0027FE  E101 D76D          	bz	l1131
 13915  002802  0A01               	xorlw	1	; case 1
 13916  002804  E101 D773          	bz	l1133
 13917  002808  0A03               	xorlw	3	; case 2
 13918  00280A  E101 D779          	bz	l1134
 13919  00280E  0A01               	xorlw	1	; case 3
 13920  002810  E080               	bz	l1135
 13921  002812  0A07               	xorlw	7	; case 4
 13922  002814  E087               	bz	l1136
 13923  002816  0A01               	xorlw	1	; case 5
 13924  002818  E08E               	bz	l1137
 13925  00281A  0A03               	xorlw	3	; case 6
 13926  00281C  E095               	bz	l1138
 13927  00281E  0A01               	xorlw	1	; case 7
 13928  002820  E09C               	bz	l1139
 13929  002822  0A0F               	xorlw	15	; case 8
 13930  002824  E0A3               	bz	l1140
 13931  002826  0A01               	xorlw	1	; case 9
 13932  002828  E0AA               	bz	l1141
 13933  00282A  0A03               	xorlw	3	; case 10
 13934  00282C  E0B1               	bz	l1142
 13935  00282E  0A01               	xorlw	1	; case 11
 13936  002830  E0B8               	bz	l1143
 13937  002832  0A07               	xorlw	7	; case 12
 13938  002834  E0BF               	bz	l1144
 13939  002836  0A01               	xorlw	1	; case 13
 13940  002838  E0C6               	bz	l1145
 13941  00283A  0A03               	xorlw	3	; case 14
 13942  00283C  E0CD               	bz	l1146
 13943  00283E  0A01               	xorlw	1	; case 15
 13944  002840  E0D4               	bz	l1147
 13945  002842                     l1148:
 13946                           
 13947                           ; BSR set to: 3
 13948  002842  0012               	return	
 13949  002844                     __end_of_setFilter:
 13950                           	opt stack 0
 13951                           tblptru	equ	0xFF8
 13952                           tblptrh	equ	0xFF7
 13953                           tblptrl	equ	0xFF6
 13954                           tablat	equ	0xFF5
 13955                           prodh	equ	0xFF4
 13956                           prodl	equ	0xFF3
 13957                           intcon	equ	0xFF2
 13958                           indf0	equ	0xFEF
 13959                           postinc0	equ	0xFEE
 13960                           fsr0h	equ	0xFEA
 13961                           fsr0l	equ	0xFE9
 13962                           wreg	equ	0xFE8
 13963                           indf1	equ	0xFE7
 13964                           postinc1	equ	0xFE6
 13965                           postdec1	equ	0xFE5
 13966                           fsr1h	equ	0xFE2
 13967                           fsr1l	equ	0xFE1
 13968                           indf2	equ	0xFDF
 13969                           postinc2	equ	0xFDE
 13970                           postdec2	equ	0xFDD
 13971                           plusw2	equ	0xFDB
 13972                           fsr2h	equ	0xFDA
 13973                           fsr2l	equ	0xFD9
 13974                           status	equ	0xFD8
 13975                           
 13976 ;; *************** function _writeRegisterExtended *****************
 13977 ;; Defined at:
 13978 ;;		line 2070 in file "main.c"
 13979 ;; Parameters:    Size  Location     Type
 13980 ;;  nodeid          1    wreg     unsigned char 
 13981 ;;  page            2   62[BANK0 ] unsigned short 
 13982 ;;  reg             1   64[BANK0 ] unsigned char 
 13983 ;;  timeout         2   65[BANK0 ] unsigned short 
 13984 ;;  value           2   67[BANK0 ] PTR unsigned char 
 13985 ;;		 -> doModeVerbose@value_1117(1), 
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;  nodeid          1   48[COMRAM] unsigned char 
 13988 ;; Return value:  Size  Location     Type
 13989 ;;                  1    wreg      enum E15660
 13990 ;; Registers used:
 13991 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 13992 ;; Tracked objects:
 13993 ;;		On entry : F/3
 13994 ;;		On exit  : E/0
 13995 ;;		Unchanged: 0/0
 13996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13997 ;;      Params:         0       7       0       0       0       0       0
 13998 ;;      Locals:         1       0       0       0       0       0       0
 13999 ;;      Temps:          0       4       0       0       0       0       0
 14000 ;;      Totals:         1      11       0       0       0       0       0
 14001 ;;Total ram usage:       12 bytes
 14002 ;; Hardware stack levels used:    1
 14003 ;; Hardware stack levels required when called:    6
 14004 ;; This function calls:
 14005 ;;		_sendVSCPFrame
 14006 ;;		_getVSCPFrame
 14007 ;; This function is called by:
 14008 ;;		_doModeVerbose
 14009 ;; This function uses a non-reentrant model
 14010 ;;
 14011                           
 14012                           	psect	text21
 14013  003B32                     __ptext21:
 14014                           	opt stack 0
 14015  003B32                     _writeRegisterExtended:
 14016                           	opt stack 23
 14017                           
 14018                           ; BSR set to: 3
 14019                           ;incstack = 0
 14020                           ;incstack = 0
 14021                           ;writeRegisterExtended@nodeid stored from wreg
 14022  003B32  CFE8 F031          	movff	wreg,writeRegisterExtended@nodeid
 14023                           
 14024                           ; BSR set to: 3
 14025                           ;main.c: 2071: vscpData[ 0 ] = nodeid;
 14026  003B36  C031  F040         	movff	writeRegisterExtended@nodeid,_vscpData
 14027                           
 14028                           ; BSR set to: 3
 14029                           ;main.c: 2072: vscpData[ 1 ] = page>>8;
 14030  003B3A  0100               	movlb	0	; () banked
 14031  003B3C  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14032  003B3E  6E41               	movwf	_vscpData+1,c
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;main.c: 2073: vscpData[ 2 ] = page&0xff;
 14036  003B40  C09E  F042         	movff	writeRegisterExtended@page,_vscpData+2
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;main.c: 2074: vscpData[ 3 ] = reg;
 14040  003B44  C0A0  F043         	movff	writeRegisterExtended@reg,_vscpData+3
 14041                           
 14042                           ; BSR set to: 0
 14043                           ;main.c: 2075: vscpData[ 4 ] = *value;
 14044  003B48  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14045  003B4C  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14046  003B50  50DF               	movf	indf2,w,c
 14047  003B52  6E44               	movwf	_vscpData+4,c
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;main.c: 2077: if (sendVSCPFrame( 0,
 14051                           ;main.c: 2078: 38,
 14052                           ;main.c: 2079: 0,
 14053                           ;main.c: 2080: 0,
 14054                           ;main.c: 2081: 5,
 14055                           ;main.c: 2082: vscpData)) {
 14056  003B54  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14057  003B56  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14058  003B58  0E26               	movlw	38
 14059  003B5A  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14060  003B5C  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14061  003B5E  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14062  003B60  0E05               	movlw	5
 14063  003B62  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14064  003B64  0E40               	movlw	low _vscpData
 14065  003B66  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14066  003B68  EC09  F020         	call	_sendVSCPFrame	;wreg free
 14067  003B6C  0900               	iorlw	0
 14068  003B6E  E04C               	bz	l11393
 14069                           
 14070                           ;main.c: 2084: timekeeper = 0;
 14071  003B70  0100               	movlb	0	; () banked
 14072  003B72  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 14073  003B74  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14074  003B76  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14075  003B78  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14076                           
 14077                           ;main.c: 2085: while ( timekeeper < timeout ) {
 14078  003B7A  D036               	goto	l11391
 14079  003B7C                     l988:
 14080                           
 14081                           ; BSR set to: 0
 14082  003B7C  0004               	clrwdt		;# 
 14083                           
 14084                           ;main.c: 2089: if ( getVSCPFrame( &vscpClass,
 14085                           ;main.c: 2090: &vscpType,
 14086                           ;main.c: 2091: &vscpNodeId,
 14087                           ;main.c: 2092: &vscpPriority,
 14088                           ;main.c: 2093: &vscpSize,
 14089                           ;main.c: 2094: vscpData ) ) {
 14090  003B7E  0100               	movlb	0	; () banked
 14091  003B80  0EDF               	movlw	low _vscpType
 14092  003B82  6F60               	movwf	?_getVSCPFrame& (0+255),b
 14093  003B84  0EDC               	movlw	low _vscpNodeId
 14094  003B86  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14095  003B88  0EDD               	movlw	low _vscpPriority
 14096  003B8A  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14097  003B8C  0EDE               	movlw	low _vscpSize
 14098  003B8E  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14099  003B90  0E40               	movlw	low _vscpData
 14100  003B92  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14101  003B94  0EDA               	movlw	_vscpClass& (0+255)
 14102  003B96  ECD3  F022         	call	_getVSCPFrame
 14103  003B9A  0900               	iorlw	0
 14104  003B9C  E025               	bz	l11391
 14105                           
 14106                           ;main.c: 2096: if ( ( nodeid == vscpNodeId) &&
 14107                           ;main.c: 2097: (5 == vscpSize) &&
 14108                           ;main.c: 2098: (0 == vscpData[ 0 ]) &&
 14109                           ;main.c: 2099: ((page>>8) == vscpData[ 1 ]) &&
 14110                           ;main.c: 2100: ((page&0xff) == vscpData[ 2 ]) &&
 14111                           ;main.c: 2101: (reg == vscpData[ 3 ]) &&
 14112                           ;main.c: 2102: (*value == vscpData[ 4 ]) ) {
 14113  003B9E  0100               	movlb	0	; () banked
 14114  003BA0  51DC               	movf	_vscpNodeId& (0+255),w,b
 14115  003BA2  6231               	cpfseq	writeRegisterExtended@nodeid,c
 14116  003BA4  D021               	goto	l11391
 14117                           
 14118                           ; BSR set to: 0
 14119  003BA6  51DE               	movf	_vscpSize& (0+255),w,b
 14120  003BA8  0A05               	xorlw	5
 14121  003BAA  E11E               	bnz	l11391
 14122                           
 14123                           ; BSR set to: 0
 14124  003BAC  6640               	tstfsz	_vscpData,c
 14125  003BAE  D01C               	goto	l11391
 14126                           
 14127                           ; BSR set to: 0
 14128  003BB0  519F               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14129  003BB2  1841               	xorwf	_vscpData+1,w,c
 14130  003BB4  E119               	bnz	l11391
 14131                           
 14132                           ; BSR set to: 0
 14133  003BB6  519E               	movf	writeRegisterExtended@page& (0+255),w,b
 14134  003BB8  EE20  F042         	lfsr	2,_vscpData+2
 14135  003BBC  62DF               	cpfseq	indf2,c
 14136  003BBE  D014               	goto	l11391
 14137                           
 14138                           ; BSR set to: 0
 14139  003BC0  51A0               	movf	writeRegisterExtended@reg& (0+255),w,b
 14140  003BC2  EE20  F043         	lfsr	2,_vscpData+3
 14141  003BC6  62DF               	cpfseq	indf2,c
 14142  003BC8  D00F               	goto	l11391
 14143                           
 14144                           ; BSR set to: 0
 14145  003BCA  5044               	movf	_vscpData+4,w,c
 14146  003BCC  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14147  003BD0  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14148  003BD4  62DF               	cpfseq	indf2,c
 14149  003BD6  D008               	goto	l11391
 14150                           
 14151                           ; BSR set to: 0
 14152                           ;main.c: 2103: *value = vscpData[ 1 ];
 14153  003BD8  C0A3  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14154  003BDC  C0A4  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14155  003BE0  C041  FFDF         	movff	_vscpData+1,indf2
 14156                           
 14157                           ; BSR set to: 0
 14158                           ;main.c: 2104: return 1;
 14159  003BE4  0E01               	movlw	1
 14160  003BE6  D011               	goto	l991
 14161  003BE8                     l11391:
 14162  003BE8  0100               	movlb	0	; () banked
 14163  003BEA  51A1               	movf	writeRegisterExtended@timeout& (0+255),w,b
 14164  003BEC  6FA5               	movwf	??_writeRegisterExtended& (0+255),b
 14165  003BEE  51A2               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 14166  003BF0  6FA6               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 14167  003BF2  6BA7               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 14168  003BF4  6BA8               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 14169  003BF6  51A5               	movf	??_writeRegisterExtended& (0+255),w,b
 14170  003BF8  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 14171  003BFA  51A6               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 14172  003BFC  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14173  003BFE  51A7               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 14174  003C00  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14175  003C02  51A8               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 14176  003C04  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14177  003C06  E3BA               	bnc	l988
 14178  003C08                     l11393:
 14179                           
 14180                           ;main.c: 2105: }
 14181                           ;main.c: 2107: }
 14182                           ;main.c: 2109: }
 14183                           ;main.c: 2111: }
 14184                           ;main.c: 2113: return 0;
 14185  003C08  0E00               	movlw	0
 14186  003C0A                     l991:
 14187  003C0A  0012               	return	
 14188  003C0C                     __end_of_writeRegisterExtended:
 14189                           	opt stack 0
 14190                           tblptru	equ	0xFF8
 14191                           tblptrh	equ	0xFF7
 14192                           tblptrl	equ	0xFF6
 14193                           tablat	equ	0xFF5
 14194                           prodh	equ	0xFF4
 14195                           prodl	equ	0xFF3
 14196                           intcon	equ	0xFF2
 14197                           indf0	equ	0xFEF
 14198                           postinc0	equ	0xFEE
 14199                           fsr0h	equ	0xFEA
 14200                           fsr0l	equ	0xFE9
 14201                           wreg	equ	0xFE8
 14202                           indf1	equ	0xFE7
 14203                           postinc1	equ	0xFE6
 14204                           postdec1	equ	0xFE5
 14205                           fsr1h	equ	0xFE2
 14206                           fsr1l	equ	0xFE1
 14207                           indf2	equ	0xFDF
 14208                           postinc2	equ	0xFDE
 14209                           postdec2	equ	0xFDD
 14210                           plusw2	equ	0xFDB
 14211                           fsr2h	equ	0xFDA
 14212                           fsr2l	equ	0xFD9
 14213                           status	equ	0xFD8
 14214                           
 14215 ;; *************** function _printBinary *****************
 14216 ;; Defined at:
 14217 ;;		line 2157 in file "main.c"
 14218 ;; Parameters:    Size  Location     Type
 14219 ;;  value           1    wreg     unsigned char 
 14220 ;; Auto vars:     Size  Location     Type
 14221 ;;  value           1   27[COMRAM] unsigned char 
 14222 ;;  i               2   28[COMRAM] int 
 14223 ;; Return value:  Size  Location     Type
 14224 ;;		None               void
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, status,0, cstack
 14227 ;; Tracked objects:
 14228 ;;		On entry : F/3
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14232 ;;      Params:         0       0       0       0       0       0       0
 14233 ;;      Locals:         3       0       0       0       0       0       0
 14234 ;;      Temps:          2       0       0       0       0       0       0
 14235 ;;      Totals:         5       0       0       0       0       0       0
 14236 ;;Total ram usage:        5 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    3
 14239 ;; This function calls:
 14240 ;;		_WriteUSART
 14241 ;; This function is called by:
 14242 ;;		_doModeVerbose
 14243 ;; This function uses a non-reentrant model
 14244 ;;
 14245                           
 14246                           	psect	text22
 14247  004C6E                     __ptext22:
 14248                           	opt stack 0
 14249  004C6E                     _printBinary:
 14250                           	opt stack 26
 14251                           
 14252                           ;incstack = 0
 14253                           ;incstack = 0
 14254                           ;printBinary@value stored from wreg
 14255  004C6E  CFE8 F01C          	movff	wreg,printBinary@value
 14256                           
 14257                           ; BSR set to: 3
 14258                           ;main.c: 2158: int i;
 14259                           ;main.c: 2160: for ( i=7; i>=0; i-- ) {
 14260  004C72  6A1E               	clrf	printBinary@i+1,c
 14261  004C74  0E07               	movlw	7
 14262  004C76  6E1D               	movwf	printBinary@i,c
 14263  004C78                     l11343:
 14264                           
 14265                           ;main.c: 2161: if ( value & (1<<i) ) {
 14266  004C78  C01D  F01A         	movff	printBinary@i,??_printBinary
 14267  004C7C  0E01               	movlw	1
 14268  004C7E  6E1B               	movwf	(??_printBinary+1)& (0+255),c
 14269  004C80  2A1A               	incf	??_printBinary,f,c
 14270  004C82  D002               	goto	u14304
 14271  004C84                     u14305:
 14272  004C84  90D8               	bcf	status,0,c
 14273  004C86  361B               	rlcf	??_printBinary+1,f,c
 14274  004C88                     u14304:
 14275  004C88  2E1A               	decfsz	??_printBinary,f,c
 14276  004C8A  D7FC               	goto	u14305
 14277  004C8C  501B               	movf	??_printBinary+1,w,c
 14278  004C8E  141C               	andwf	printBinary@value,w,c
 14279  004C90  E006               	bz	l1011
 14280  004C92                     l1007:
 14281  004C92  A2AC               	btfss	4012,1,c	;volatile
 14282  004C94  D7FE               	goto	l1007
 14283                           
 14284                           ;main.c: 2163: WriteUSART('1');
 14285  004C96  0E31               	movlw	49
 14286  004C98  EC9F  F028         	call	_WriteUSART
 14287                           
 14288                           ;main.c: 2164: }
 14289  004C9C  D005               	goto	l11351
 14290  004C9E                     l1011:
 14291  004C9E  A2AC               	btfss	4012,1,c	;volatile
 14292  004CA0  D7FE               	goto	l1011
 14293                           
 14294                           ;main.c: 2167: WriteUSART('0');
 14295  004CA2  0E30               	movlw	48
 14296  004CA4  EC9F  F028         	call	_WriteUSART
 14297  004CA8                     l11351:
 14298  004CA8  061D               	decf	printBinary@i,f,c
 14299  004CAA  A0D8               	btfss	status,0,c
 14300  004CAC  061E               	decf	printBinary@i+1,f,c
 14301  004CAE  BE1E               	btfsc	printBinary@i+1,7,c
 14302  004CB0  0012               	return	
 14303  004CB2  D7E2               	goto	l11343
 14304  004CB4                     __end_of_printBinary:
 14305                           	opt stack 0
 14306                           tblptru	equ	0xFF8
 14307                           tblptrh	equ	0xFF7
 14308                           tblptrl	equ	0xFF6
 14309                           tablat	equ	0xFF5
 14310                           prodh	equ	0xFF4
 14311                           prodl	equ	0xFF3
 14312                           intcon	equ	0xFF2
 14313                           indf0	equ	0xFEF
 14314                           postinc0	equ	0xFEE
 14315                           fsr0h	equ	0xFEA
 14316                           fsr0l	equ	0xFE9
 14317                           wreg	equ	0xFE8
 14318                           indf1	equ	0xFE7
 14319                           postinc1	equ	0xFE6
 14320                           postdec1	equ	0xFE5
 14321                           fsr1h	equ	0xFE2
 14322                           fsr1l	equ	0xFE1
 14323                           indf2	equ	0xFDF
 14324                           postinc2	equ	0xFDE
 14325                           postdec2	equ	0xFDD
 14326                           plusw2	equ	0xFDB
 14327                           fsr2h	equ	0xFDA
 14328                           fsr2l	equ	0xFD9
 14329                           status	equ	0xFD8
 14330                           
 14331 ;; *************** function _readRegisterExtended *****************
 14332 ;; Defined at:
 14333 ;;		line 1969 in file "main.c"
 14334 ;; Parameters:    Size  Location     Type
 14335 ;;  nodeid          1    wreg     unsigned char 
 14336 ;;  page            2   62[BANK0 ] unsigned short 
 14337 ;;  reg             1   64[BANK0 ] unsigned char 
 14338 ;;  timeout         2   65[BANK0 ] unsigned short 
 14339 ;;  value           2   67[BANK0 ] PTR unsigned char 
 14340 ;;		 -> doModeVerbose@value(1), 
 14341 ;; Auto vars:     Size  Location     Type
 14342 ;;  nodeid          1   48[COMRAM] unsigned char 
 14343 ;; Return value:  Size  Location     Type
 14344 ;;                  1    wreg      enum E15660
 14345 ;; Registers used:
 14346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : F/3
 14349 ;;		On exit  : E/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14352 ;;      Params:         0       7       0       0       0       0       0
 14353 ;;      Locals:         1       0       0       0       0       0       0
 14354 ;;      Temps:          0       4       0       0       0       0       0
 14355 ;;      Totals:         1      11       0       0       0       0       0
 14356 ;;Total ram usage:       12 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    6
 14359 ;; This function calls:
 14360 ;;		_sendVSCPFrame
 14361 ;;		_getVSCPFrame
 14362 ;; This function is called by:
 14363 ;;		_doModeVerbose
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           	psect	text23
 14368  003CE4                     __ptext23:
 14369                           	opt stack 0
 14370  003CE4                     _readRegisterExtended:
 14371                           	opt stack 23
 14372                           
 14373                           ;incstack = 0
 14374                           ;incstack = 0
 14375                           ;readRegisterExtended@nodeid stored from wreg
 14376  003CE4  CFE8 F031          	movff	wreg,readRegisterExtended@nodeid
 14377                           
 14378                           ; BSR set to: 3
 14379                           ;main.c: 1970: vscpData[ 0 ] = nodeid;
 14380  003CE8  C031  F040         	movff	readRegisterExtended@nodeid,_vscpData
 14381                           
 14382                           ; BSR set to: 3
 14383                           ;main.c: 1971: vscpData[ 1 ] = page>>8;
 14384  003CEC  0100               	movlb	0	; () banked
 14385  003CEE  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14386  003CF0  6E41               	movwf	_vscpData+1,c
 14387                           
 14388                           ; BSR set to: 0
 14389                           ;main.c: 1972: vscpData[ 2 ] = page&0xff;
 14390  003CF2  C09E  F042         	movff	readRegisterExtended@page,_vscpData+2
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;main.c: 1973: vscpData[ 3 ] = reg;
 14394  003CF6  C0A0  F043         	movff	readRegisterExtended@reg,_vscpData+3
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;main.c: 1974: vscpData[ 4 ] = 1;
 14398  003CFA  0E01               	movlw	1
 14399  003CFC  6E44               	movwf	_vscpData+4,c
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;main.c: 1976: if ( sendVSCPFrame( 0,
 14403                           ;main.c: 1977: 37,
 14404                           ;main.c: 1978: 0,
 14405                           ;main.c: 1979: 0,
 14406                           ;main.c: 1980: 5,
 14407                           ;main.c: 1981: vscpData ) ) {
 14408  003CFE  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14409  003D00  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 14410  003D02  0E25               	movlw	37
 14411  003D04  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14412  003D06  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14413  003D08  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14414  003D0A  0E05               	movlw	5
 14415  003D0C  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14416  003D0E  0E40               	movlw	low _vscpData
 14417  003D10  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14418  003D12  EC09  F020         	call	_sendVSCPFrame	;wreg free
 14419  003D16  0900               	iorlw	0
 14420  003D18  E04B               	bz	l10983
 14421                           
 14422                           ;main.c: 1983: timekeeper = 0;
 14423  003D1A  0100               	movlb	0	; () banked
 14424  003D1C  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 14425  003D1E  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14426  003D20  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14427  003D22  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14428                           
 14429                           ;main.c: 1984: while ( timekeeper < timeout ) {
 14430  003D24  D035               	goto	l10981
 14431  003D26                     l970:
 14432                           
 14433                           ; BSR set to: 0
 14434  003D26  0004               	clrwdt		;# 
 14435                           
 14436                           ;main.c: 1988: if ( getVSCPFrame( &vscpClass,
 14437                           ;main.c: 1989: &vscpType,
 14438                           ;main.c: 1990: &vscpNodeId,
 14439                           ;main.c: 1991: &vscpPriority,
 14440                           ;main.c: 1992: &vscpSize,
 14441                           ;main.c: 1993: vscpData) ) {
 14442  003D28  0100               	movlb	0	; () banked
 14443  003D2A  0EDF               	movlw	low _vscpType
 14444  003D2C  6F60               	movwf	?_getVSCPFrame& (0+255),b
 14445  003D2E  0EDC               	movlw	low _vscpNodeId
 14446  003D30  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14447  003D32  0EDD               	movlw	low _vscpPriority
 14448  003D34  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14449  003D36  0EDE               	movlw	low _vscpSize
 14450  003D38  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14451  003D3A  0E40               	movlw	low _vscpData
 14452  003D3C  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14453  003D3E  0EDA               	movlw	_vscpClass& (0+255)
 14454  003D40  ECD3  F022         	call	_getVSCPFrame
 14455  003D44  0900               	iorlw	0
 14456  003D46  E024               	bz	l10981
 14457                           
 14458                           ;main.c: 1994: if ( ( nodeid == vscpNodeId) &&
 14459                           ;main.c: 1995: (0 == vscpClass) &&
 14460                           ;main.c: 1996: (39 == vscpType) &&
 14461                           ;main.c: 1997: (5 == vscpSize) &&
 14462                           ;main.c: 1998: (0 == vscpData[ 0 ]) &&
 14463                           ;main.c: 1999: ((page>>8) == vscpData[ 1 ]) &&
 14464                           ;main.c: 2000: ((page&0xff) == vscpData[ 2 ]) &&
 14465                           ;main.c: 2001: (reg == vscpData[ 3 ]) ) {
 14466  003D48  0100               	movlb	0	; () banked
 14467  003D4A  51DC               	movf	_vscpNodeId& (0+255),w,b
 14468  003D4C  6231               	cpfseq	readRegisterExtended@nodeid,c
 14469  003D4E  D020               	goto	l10981
 14470                           
 14471                           ; BSR set to: 0
 14472  003D50  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 14473  003D52  11DA               	iorwf	_vscpClass& (0+255),w,b
 14474  003D54  E11D               	bnz	l10981
 14475                           
 14476                           ; BSR set to: 0
 14477  003D56  51DF               	movf	_vscpType& (0+255),w,b
 14478  003D58  0A27               	xorlw	39
 14479  003D5A  E11A               	bnz	l10981
 14480                           
 14481                           ; BSR set to: 0
 14482  003D5C  51DE               	movf	_vscpSize& (0+255),w,b
 14483  003D5E  0A05               	xorlw	5
 14484  003D60  E117               	bnz	l10981
 14485                           
 14486                           ; BSR set to: 0
 14487  003D62  6640               	tstfsz	_vscpData,c
 14488  003D64  D015               	goto	l10981
 14489                           
 14490                           ; BSR set to: 0
 14491  003D66  519F               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14492  003D68  1841               	xorwf	_vscpData+1,w,c
 14493  003D6A  E112               	bnz	l10981
 14494                           
 14495                           ; BSR set to: 0
 14496  003D6C  519E               	movf	readRegisterExtended@page& (0+255),w,b
 14497  003D6E  EE20  F042         	lfsr	2,_vscpData+2
 14498  003D72  62DF               	cpfseq	indf2,c
 14499  003D74  D00D               	goto	l10981
 14500                           
 14501                           ; BSR set to: 0
 14502  003D76  51A0               	movf	readRegisterExtended@reg& (0+255),w,b
 14503  003D78  EE20  F043         	lfsr	2,_vscpData+3
 14504  003D7C  62DF               	cpfseq	indf2,c
 14505  003D7E  D008               	goto	l10981
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;main.c: 2002: *value = vscpData[ 4 ];
 14509  003D80  C0A3  FFD9         	movff	readRegisterExtended@value,fsr2l
 14510  003D84  C0A4  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 14511  003D88  C044  FFDF         	movff	_vscpData+4,indf2
 14512                           
 14513                           ; BSR set to: 0
 14514                           ;main.c: 2003: return 1;
 14515  003D8C  0E01               	movlw	1
 14516  003D8E  D011               	goto	l973
 14517  003D90                     l10981:
 14518  003D90  0100               	movlb	0	; () banked
 14519  003D92  51A1               	movf	readRegisterExtended@timeout& (0+255),w,b
 14520  003D94  6FA5               	movwf	??_readRegisterExtended& (0+255),b
 14521  003D96  51A2               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 14522  003D98  6FA6               	movwf	(??_readRegisterExtended+1)& (0+255),b
 14523  003D9A  6BA7               	clrf	(??_readRegisterExtended+2)& (0+255),b
 14524  003D9C  6BA8               	clrf	(??_readRegisterExtended+3)& (0+255),b
 14525  003D9E  51A5               	movf	??_readRegisterExtended& (0+255),w,b
 14526  003DA0  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 14527  003DA2  51A6               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 14528  003DA4  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14529  003DA6  51A7               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 14530  003DA8  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14531  003DAA  51A8               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 14532  003DAC  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14533  003DAE  E3BB               	bnc	l970
 14534  003DB0                     l10983:
 14535                           
 14536                           ;main.c: 2004: }
 14537                           ;main.c: 2005: }
 14538                           ;main.c: 2006: }
 14539                           ;main.c: 2007: }
 14540                           ;main.c: 2009: return 0;
 14541  003DB0  0E00               	movlw	0
 14542  003DB2                     l973:
 14543  003DB2  0012               	return	
 14544  003DB4                     __end_of_readRegisterExtended:
 14545                           	opt stack 0
 14546                           tblptru	equ	0xFF8
 14547                           tblptrh	equ	0xFF7
 14548                           tblptrl	equ	0xFF6
 14549                           tablat	equ	0xFF5
 14550                           prodh	equ	0xFF4
 14551                           prodl	equ	0xFF3
 14552                           intcon	equ	0xFF2
 14553                           indf0	equ	0xFEF
 14554                           postinc0	equ	0xFEE
 14555                           fsr0h	equ	0xFEA
 14556                           fsr0l	equ	0xFE9
 14557                           wreg	equ	0xFE8
 14558                           indf1	equ	0xFE7
 14559                           postinc1	equ	0xFE6
 14560                           postdec1	equ	0xFE5
 14561                           fsr1h	equ	0xFE2
 14562                           fsr1l	equ	0xFE1
 14563                           indf2	equ	0xFDF
 14564                           postinc2	equ	0xFDE
 14565                           postdec2	equ	0xFDD
 14566                           plusw2	equ	0xFDB
 14567                           fsr2h	equ	0xFDA
 14568                           fsr2l	equ	0xFD9
 14569                           status	equ	0xFD8
 14570                           
 14571 ;; *************** function _strcpy *****************
 14572 ;; Defined at:
 14573 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 14574 ;; Parameters:    Size  Location     Type
 14575 ;;  to              2   24[COMRAM] PTR unsigned char 
 14576 ;;		 -> cmdbuf(80), 
 14577 ;;  from            2   26[COMRAM] PTR const unsigned char 
 14578 ;;		 -> cmdbuf(80), 
 14579 ;; Auto vars:     Size  Location     Type
 14580 ;;  cp              2   28[COMRAM] PTR unsigned char 
 14581 ;;		 -> cmdbuf(80), 
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  2   24[COMRAM] PTR unsigned char 
 14584 ;; Registers used:
 14585 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14586 ;; Tracked objects:
 14587 ;;		On entry : F/0
 14588 ;;		On exit  : F/0
 14589 ;;		Unchanged: F/0
 14590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14591 ;;      Params:         4       0       0       0       0       0       0
 14592 ;;      Locals:         2       0       0       0       0       0       0
 14593 ;;      Temps:          0       0       0       0       0       0       0
 14594 ;;      Totals:         6       0       0       0       0       0       0
 14595 ;;Total ram usage:        6 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    2
 14598 ;; This function calls:
 14599 ;;		Nothing
 14600 ;; This function is called by:
 14601 ;;		_doModeVerbose
 14602 ;; This function uses a non-reentrant model
 14603 ;;
 14604                           
 14605                           	psect	text24
 14606  005008                     __ptext24:
 14607                           	opt stack 0
 14608  005008                     _strcpy:
 14609                           	opt stack 27
 14610                           
 14611                           ; BSR set to: 0
 14612                           
 14613                           ;incstack = 0
 14614                           ;incstack = 0
 14615  005008  C019  F01D         	movff	strcpy@to,strcpy@cp
 14616  00500C  C01A  F01E         	movff	strcpy@to+1,strcpy@cp+1
 14617  005010  D004               	goto	l10935
 14618  005012                     l10933:
 14619                           
 14620                           ; BSR set to: 0
 14621  005012  4A1D               	infsnz	strcpy@cp,f,c
 14622  005014  2A1E               	incf	strcpy@cp+1,f,c
 14623  005016  4A1B               	infsnz	strcpy@from,f,c
 14624  005018  2A1C               	incf	strcpy@from+1,f,c
 14625  00501A                     l10935:
 14626                           
 14627                           ; BSR set to: 0
 14628  00501A  C01B  FFD9         	movff	strcpy@from,fsr2l
 14629  00501E  C01C  FFDA         	movff	strcpy@from+1,fsr2h
 14630  005022  C01D  FFE1         	movff	strcpy@cp,fsr1l
 14631  005026  C01E  FFE2         	movff	strcpy@cp+1,fsr1h
 14632  00502A  CFDF FFE7          	movff	indf2,indf1
 14633  00502E  50E7               	movf	indf1,w,c
 14634  005030  B4D8               	btfsc	status,2,c
 14635                           
 14636                           ; BSR set to: 0
 14637  005032  0012               	return	
 14638  005034  D7EE               	goto	l10933
 14639  005036                     __end_of_strcpy:
 14640                           	opt stack 0
 14641                           tblptru	equ	0xFF8
 14642                           tblptrh	equ	0xFF7
 14643                           tblptrl	equ	0xFF6
 14644                           tablat	equ	0xFF5
 14645                           prodh	equ	0xFF4
 14646                           prodl	equ	0xFF3
 14647                           intcon	equ	0xFF2
 14648                           indf0	equ	0xFEF
 14649                           postinc0	equ	0xFEE
 14650                           fsr0h	equ	0xFEA
 14651                           fsr0l	equ	0xFE9
 14652                           wreg	equ	0xFE8
 14653                           indf1	equ	0xFE7
 14654                           postinc1	equ	0xFE6
 14655                           postdec1	equ	0xFE5
 14656                           fsr1h	equ	0xFE2
 14657                           fsr1l	equ	0xFE1
 14658                           indf2	equ	0xFDF
 14659                           postinc2	equ	0xFDE
 14660                           postdec2	equ	0xFDD
 14661                           plusw2	equ	0xFDB
 14662                           fsr2h	equ	0xFDA
 14663                           fsr2l	equ	0xFD9
 14664                           status	equ	0xFD8
 14665                           
 14666 ;; *************** function _findNodes *****************
 14667 ;; Defined at:
 14668 ;;		line 2316 in file "main.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;		None
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  i               1   80[BANK0 ] unsigned char 
 14673 ;;  value           1   79[BANK0 ] unsigned char 
 14674 ;;  nFound          1   78[BANK0 ] unsigned char 
 14675 ;; Return value:  Size  Location     Type
 14676 ;;		None               void
 14677 ;; Registers used:
 14678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14679 ;; Tracked objects:
 14680 ;;		On entry : F/0
 14681 ;;		On exit  : 0/0
 14682 ;;		Unchanged: 0/0
 14683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14684 ;;      Params:         0       0       0       0       0       0       0
 14685 ;;      Locals:         0       5       0       0       0       0       0
 14686 ;;      Temps:          0       0       0       0       0       0       0
 14687 ;;      Totals:         0       5       0       0       0       0       0
 14688 ;;Total ram usage:        5 bytes
 14689 ;; Hardware stack levels used:    1
 14690 ;; Hardware stack levels required when called:    8
 14691 ;; This function calls:
 14692 ;;		_putsUSART
 14693 ;;		_printNodeFirmwareVersion
 14694 ;;		_printGUID
 14695 ;;		_printMDF
 14696 ;;		_itoa
 14697 ;;		_readRegister
 14698 ;; This function is called by:
 14699 ;;		_doModeVerbose
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           	psect	text25
 14704  00396E                     __ptext25:
 14705                           	opt stack 0
 14706  00396E                     _findNodes:
 14707                           	opt stack 21
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;main.c: 2317: uint8_t nFound = 0;
 14711                           
 14712                           ; BSR set to: 0
 14713                           ;incstack = 0
 14714                           ;incstack = 0
 14715  00396E  6BAE               	clrf	findNodes@nFound& (0+255),b
 14716                           
 14717                           ; BSR set to: 0
 14718                           ;main.c: 2318: uint8_t i;
 14719                           ;main.c: 2319: uint8_t value;
 14720                           ;main.c: 2321: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14721  003970  0E71               	movlw	high STR_229
 14722  003972  6E1B               	movwf	?_putsUSART+1,c
 14723  003974  0E7B               	movlw	low STR_229
 14724  003976  6E1A               	movwf	?_putsUSART,c
 14725  003978  ECC1  F025         	call	_putsUSART	;wreg free
 14726                           
 14727                           ;main.c: 2323: for (i = 1; i != 0; i++) {
 14728  00397C  0E01               	movlw	1
 14729  00397E  0100               	movlb	0	; () banked
 14730  003980  6FB0               	movwf	findNodes@i& (0+255),b
 14731  003982                     l1072:
 14732                           
 14733                           ; BSR set to: 0
 14734  003982  0004               	clrwdt		;# 
 14735                           
 14736                           ;main.c: 2327: if ( readRegister( i,
 14737                           ;main.c: 2328: 0xE0,
 14738                           ;main.c: 2329: rwtimeout,
 14739                           ;main.c: 2330: &value) ) {
 14740  003984  0EE0               	movlw	224
 14741  003986  0100               	movlb	0	; () banked
 14742  003988  6F9E               	movwf	?_readRegister& (0+255),b
 14743  00398A  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 14744  00398E  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 14745  003990  0EAF               	movlw	low findNodes@value
 14746  003992  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 14747  003994  51B0               	movf	findNodes@i& (0+255),w,b
 14748  003996  ECC2  F020         	call	_readRegister
 14749  00399A  0900               	iorlw	0
 14750  00399C  E03E               	bz	l10921
 14751                           
 14752                           ;main.c: 2331: putsUSART((char *) "Node found with node id = ");
 14753  00399E  0E7B               	movlw	high STR_230
 14754  0039A0  6E1B               	movwf	?_putsUSART+1,c
 14755  0039A2  0E99               	movlw	low STR_230
 14756  0039A4  6E1A               	movwf	?_putsUSART,c
 14757  0039A6  ECC1  F025         	call	_putsUSART	;wreg free
 14758                           
 14759                           ;main.c: 2332: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 14760  0039AA  0100               	movlb	0	; () banked
 14761  0039AC  67D3               	tstfsz	_bHex& (0+255),b
 14762  0039AE  D003               	goto	l10903
 14763                           
 14764                           ; BSR set to: 0
 14765  0039B0  6BAD               	clrf	(_findNodes$1410+1)& (0+255),b
 14766  0039B2  0E0A               	movlw	10
 14767  0039B4  D002               	goto	L13
 14768  0039B6                     l10903:
 14769                           
 14770                           ; BSR set to: 0
 14771  0039B6  6BAD               	clrf	(_findNodes$1410+1)& (0+255),b
 14772  0039B8  0E10               	movlw	16
 14773  0039BA                     L13:
 14774  0039BA  6FAC               	movwf	_findNodes$1410& (0+255),b
 14775                           
 14776                           ; BSR set to: 0
 14777  0039BC  0E01               	movlw	high _wrkbuf
 14778  0039BE  6E2A               	movwf	?_itoa+1,c
 14779  0039C0  0E70               	movlw	low _wrkbuf
 14780  0039C2  6E29               	movwf	?_itoa,c
 14781  0039C4  0100               	movlb	0	; () banked
 14782  0039C6  C0DC  F02B         	movff	_vscpNodeId,?_itoa+2
 14783  0039CA  6A2C               	clrf	?_itoa+3,c
 14784  0039CC  C0AC  F02D         	movff	_findNodes$1410,?_itoa+4
 14785  0039D0  C0AD  F02E         	movff	_findNodes$1410+1,?_itoa+5
 14786  0039D4  ECB4  F027         	call	_itoa	;wreg free
 14787                           
 14788                           ;main.c: 2333: putsUSART(wrkbuf);
 14789  0039D8  0101               	movlb	1	; () banked
 14790  0039DA  0E01               	movlw	high _wrkbuf
 14791  0039DC  6E1B               	movwf	?_putsUSART+1,c
 14792  0039DE  0E70               	movlw	low _wrkbuf
 14793  0039E0  6E1A               	movwf	?_putsUSART,c
 14794  0039E2  ECC1  F025         	call	_putsUSART	;wreg free
 14795                           
 14796                           ;main.c: 2334: putsUSART((char *) "\r\n");
 14797  0039E6  0E74               	movlw	high (STR_188+50)
 14798  0039E8  6E1B               	movwf	?_putsUSART+1,c
 14799  0039EA  0EB2               	movlw	low (STR_188+50)
 14800  0039EC  6E1A               	movwf	?_putsUSART,c
 14801  0039EE  ECC1  F025         	call	_putsUSART	;wreg free
 14802                           
 14803                           ;main.c: 2335: printNodeFirmwareVersion( i );
 14804  0039F2  0100               	movlb	0	; () banked
 14805  0039F4  51B0               	movf	findNodes@i& (0+255),w,b
 14806  0039F6  ECDA  F01E         	call	_printNodeFirmwareVersion
 14807                           
 14808                           ;main.c: 2336: printGUID( i );
 14809  0039FA  0100               	movlb	0	; () banked
 14810  0039FC  51B0               	movf	findNodes@i& (0+255),w,b
 14811  0039FE  ECCB  F01A         	call	_printGUID
 14812                           
 14813                           ;main.c: 2337: printMDF( i );
 14814  003A02  0100               	movlb	0	; () banked
 14815  003A04  51B0               	movf	findNodes@i& (0+255),w,b
 14816  003A06  ECB3  F021         	call	_printMDF
 14817                           
 14818                           ;main.c: 2338: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 14819  003A0A  0E71               	movlw	high STR_229
 14820  003A0C  6E1B               	movwf	?_putsUSART+1,c
 14821  003A0E  0E7B               	movlw	low STR_229
 14822  003A10  6E1A               	movwf	?_putsUSART,c
 14823  003A12  ECC1  F025         	call	_putsUSART	;wreg free
 14824                           
 14825                           ;main.c: 2339: nFound++;
 14826  003A16  0100               	movlb	0	; () banked
 14827  003A18  2BAE               	incf	findNodes@nFound& (0+255),f,b
 14828  003A1A                     l10921:
 14829  003A1A  0100               	movlb	0	; () banked
 14830  003A1C  2BB0               	incf	findNodes@i& (0+255),f,b
 14831                           
 14832                           ; BSR set to: 0
 14833  003A1E  67B0               	tstfsz	findNodes@i& (0+255),b
 14834  003A20  D7B0               	goto	l1072
 14835                           
 14836                           ; BSR set to: 0
 14837                           ;main.c: 2340: }
 14838                           ;main.c: 2342: }
 14839                           ;main.c: 2344: itoa(wrkbuf, nFound, 10);
 14840  003A22  0E01               	movlw	high _wrkbuf
 14841  003A24  6E2A               	movwf	?_itoa+1,c
 14842  003A26  0E70               	movlw	low _wrkbuf
 14843  003A28  6E29               	movwf	?_itoa,c
 14844  003A2A  C0AE  F02B         	movff	findNodes@nFound,?_itoa+2
 14845  003A2E  6A2C               	clrf	?_itoa+3,c
 14846  003A30  6A2E               	clrf	?_itoa+5,c
 14847  003A32  0E0A               	movlw	10
 14848  003A34  6E2D               	movwf	?_itoa+4,c
 14849  003A36  ECB4  F027         	call	_itoa	;wreg free
 14850                           
 14851                           ;main.c: 2345: putsUSART(wrkbuf);
 14852  003A3A  0101               	movlb	1	; () banked
 14853  003A3C  0E01               	movlw	high _wrkbuf
 14854  003A3E  6E1B               	movwf	?_putsUSART+1,c
 14855  003A40  0E70               	movlw	low _wrkbuf
 14856  003A42  6E1A               	movwf	?_putsUSART,c
 14857  003A44  ECC1  F025         	call	_putsUSART	;wreg free
 14858                           
 14859                           ;main.c: 2346: putsUSART((char *) " nodes found\r\n");
 14860  003A48  0E7E               	movlw	high STR_233
 14861  003A4A  6E1B               	movwf	?_putsUSART+1,c
 14862  003A4C  0E4E               	movlw	low STR_233
 14863  003A4E  6E1A               	movwf	?_putsUSART,c
 14864  003A50  EFC1  F025         	goto	_putsUSART	;wreg free
 14865  003A54                     __end_of_findNodes:
 14866                           	opt stack 0
 14867                           tblptru	equ	0xFF8
 14868                           tblptrh	equ	0xFF7
 14869                           tblptrl	equ	0xFF6
 14870                           tablat	equ	0xFF5
 14871                           prodh	equ	0xFF4
 14872                           prodl	equ	0xFF3
 14873                           intcon	equ	0xFF2
 14874                           indf0	equ	0xFEF
 14875                           postinc0	equ	0xFEE
 14876                           fsr0h	equ	0xFEA
 14877                           fsr0l	equ	0xFE9
 14878                           wreg	equ	0xFE8
 14879                           indf1	equ	0xFE7
 14880                           postinc1	equ	0xFE6
 14881                           postdec1	equ	0xFE5
 14882                           fsr1h	equ	0xFE2
 14883                           fsr1l	equ	0xFE1
 14884                           indf2	equ	0xFDF
 14885                           postinc2	equ	0xFDE
 14886                           postdec2	equ	0xFDD
 14887                           plusw2	equ	0xFDB
 14888                           fsr2h	equ	0xFDA
 14889                           fsr2l	equ	0xFD9
 14890                           status	equ	0xFD8
 14891                           
 14892 ;; *************** function _printMDF *****************
 14893 ;; Defined at:
 14894 ;;		line 2399 in file "main.c"
 14895 ;; Parameters:    Size  Location     Type
 14896 ;;  nodeid          1    wreg     unsigned char 
 14897 ;; Auto vars:     Size  Location     Type
 14898 ;;  nodeid          1   70[BANK0 ] unsigned char 
 14899 ;;  p               2   72[BANK0 ] PTR unsigned char 
 14900 ;;		 -> wrkbuf(80), 
 14901 ;;  i               1   74[BANK0 ] unsigned char 
 14902 ;;  value           1   71[BANK0 ] unsigned char 
 14903 ;; Return value:  Size  Location     Type
 14904 ;;		None               void
 14905 ;; Registers used:
 14906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 14907 ;; Tracked objects:
 14908 ;;		On entry : C/3
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14912 ;;      Params:         0       0       0       0       0       0       0
 14913 ;;      Locals:         0       5       0       0       0       0       0
 14914 ;;      Temps:          0       0       0       0       0       0       0
 14915 ;;      Totals:         0       5       0       0       0       0       0
 14916 ;;Total ram usage:        5 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    7
 14919 ;; This function calls:
 14920 ;;		_putsUSART
 14921 ;;		_memset
 14922 ;;		_readRegister
 14923 ;; This function is called by:
 14924 ;;		_doModeVerbose
 14925 ;;		_findNodes
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text26
 14930  004366                     __ptext26:
 14931                           	opt stack 0
 14932  004366                     _printMDF:
 14933                           	opt stack 22
 14934                           
 14935                           ;incstack = 0
 14936                           ;incstack = 0
 14937                           ;printMDF@nodeid stored from wreg
 14938  004366  CFE8 F0A6          	movff	wreg,printMDF@nodeid
 14939                           
 14940                           ;main.c: 2400: uint8_t i;
 14941                           ;main.c: 2401: uint8_t value;
 14942                           ;main.c: 2402: char *p = wrkbuf;
 14943  00436A  0E01               	movlw	high _wrkbuf
 14944  00436C  0100               	movlb	0	; () banked
 14945  00436E  6FA9               	movwf	(printMDF@p+1)& (0+255),b
 14946  004370  0E70               	movlw	low _wrkbuf
 14947  004372  6FA8               	movwf	printMDF@p& (0+255),b
 14948                           
 14949                           ; BSR set to: 0
 14950                           ;main.c: 2403: memset( wrkbuf, 0, sizeof(wrkbuf) );
 14951  004374  0101               	movlb	1	; () banked
 14952  004376  0E01               	movlw	high _wrkbuf
 14953  004378  6E1A               	movwf	?_memset+1,c
 14954  00437A  0E70               	movlw	low _wrkbuf
 14955  00437C  6E19               	movwf	?_memset,c
 14956  00437E  6A1C               	clrf	?_memset+3,c
 14957  004380  6A1B               	clrf	?_memset+2,c
 14958  004382  6A1E               	clrf	?_memset+5,c
 14959  004384  0E50               	movlw	80
 14960  004386  6E1D               	movwf	?_memset+4,c
 14961  004388  EC32  F028         	call	_memset	;wreg free
 14962                           
 14963                           ;main.c: 2404: putsUSART((char *) "MDF = http://");
 14964  00438C  0E7E               	movlw	high STR_239
 14965  00438E  6E1B               	movwf	?_putsUSART+1,c
 14966  004390  0E6C               	movlw	low STR_239
 14967  004392  6E1A               	movwf	?_putsUSART,c
 14968  004394  ECC1  F025         	call	_putsUSART	;wreg free
 14969                           
 14970                           ;main.c: 2406: for ( i=0; i<32; i++ ) {
 14971  004398  0100               	movlb	0	; () banked
 14972  00439A  6BAA               	clrf	printMDF@i& (0+255),b
 14973  00439C                     l11469:
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;main.c: 2407: if ( readRegister( nodeid,
 14977                           ;main.c: 2408: 0xE0 + i,
 14978                           ;main.c: 2409: rwtimeout,
 14979                           ;main.c: 2410: &value ) ) {
 14980  00439C  51AA               	movf	printMDF@i& (0+255),w,b
 14981  00439E  0FE0               	addlw	224
 14982  0043A0  6F9E               	movwf	?_readRegister& (0+255),b
 14983  0043A2  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 14984  0043A6  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 14985  0043A8  0EA7               	movlw	low printMDF@value
 14986  0043AA  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 14987  0043AC  51A6               	movf	printMDF@nodeid& (0+255),w,b
 14988  0043AE  ECC2  F020         	call	_readRegister
 14989  0043B2  0900               	iorlw	0
 14990  0043B4  E00A               	bz	l11475
 14991                           
 14992                           ;main.c: 2411: *p = value;
 14993  0043B6  C0A8  FFD9         	movff	printMDF@p,fsr2l
 14994  0043BA  C0A9  FFDA         	movff	printMDF@p+1,fsr2h
 14995  0043BE  C0A7  FFDF         	movff	printMDF@value,indf2
 14996  0043C2                     l11473:
 14997                           
 14998                           ;main.c: 2412: p++;
 14999  0043C2  0100               	movlb	0	; () banked
 15000  0043C4  4BA8               	infsnz	printMDF@p& (0+255),f,b
 15001  0043C6  2BA9               	incf	(printMDF@p+1)& (0+255),f,b
 15002                           
 15003                           ;main.c: 2414: }
 15004  0043C8  D007               	goto	l11479
 15005  0043CA                     l11475:
 15006                           
 15007                           ;main.c: 2415: else {
 15008                           ;main.c: 2416: *p = '?';
 15009  0043CA  C0A8  FFD9         	movff	printMDF@p,fsr2l
 15010  0043CE  C0A9  FFDA         	movff	printMDF@p+1,fsr2h
 15011  0043D2  0E3F               	movlw	63
 15012  0043D4  6EDF               	movwf	indf2,c
 15013  0043D6  D7F5               	goto	l11473
 15014  0043D8                     l11479:
 15015                           
 15016                           ; BSR set to: 0
 15017  0043D8  2BAA               	incf	printMDF@i& (0+255),f,b
 15018                           
 15019                           ; BSR set to: 0
 15020  0043DA  0E1F               	movlw	31
 15021  0043DC  65AA               	cpfsgt	printMDF@i& (0+255),b
 15022  0043DE  D7DE               	goto	l11469
 15023                           
 15024                           ; BSR set to: 0
 15025                           ;main.c: 2418: }
 15026                           ;main.c: 2419: }
 15027                           ;main.c: 2421: putsUSART( wrkbuf );
 15028  0043E0  0101               	movlb	1	; () banked
 15029  0043E2  0E01               	movlw	high _wrkbuf
 15030  0043E4  6E1B               	movwf	?_putsUSART+1,c
 15031  0043E6  0E70               	movlw	low _wrkbuf
 15032  0043E8  6E1A               	movwf	?_putsUSART,c
 15033  0043EA  ECC1  F025         	call	_putsUSART	;wreg free
 15034                           
 15035                           ;main.c: 2422: putsUSART((char *)"\r\n");
 15036  0043EE  0E74               	movlw	high (STR_188+50)
 15037  0043F0  6E1B               	movwf	?_putsUSART+1,c
 15038  0043F2  0EB2               	movlw	low (STR_188+50)
 15039  0043F4  6E1A               	movwf	?_putsUSART,c
 15040  0043F6  EFC1  F025         	goto	_putsUSART	;wreg free
 15041  0043FA                     __end_of_printMDF:
 15042                           	opt stack 0
 15043                           tblptru	equ	0xFF8
 15044                           tblptrh	equ	0xFF7
 15045                           tblptrl	equ	0xFF6
 15046                           tablat	equ	0xFF5
 15047                           prodh	equ	0xFF4
 15048                           prodl	equ	0xFF3
 15049                           intcon	equ	0xFF2
 15050                           indf0	equ	0xFEF
 15051                           postinc0	equ	0xFEE
 15052                           fsr0h	equ	0xFEA
 15053                           fsr0l	equ	0xFE9
 15054                           wreg	equ	0xFE8
 15055                           indf1	equ	0xFE7
 15056                           postinc1	equ	0xFE6
 15057                           postdec1	equ	0xFE5
 15058                           fsr1h	equ	0xFE2
 15059                           fsr1l	equ	0xFE1
 15060                           indf2	equ	0xFDF
 15061                           postinc2	equ	0xFDE
 15062                           postdec2	equ	0xFDD
 15063                           plusw2	equ	0xFDB
 15064                           fsr2h	equ	0xFDA
 15065                           fsr2l	equ	0xFD9
 15066                           status	equ	0xFD8
 15067                           
 15068 ;; *************** function _printGUID *****************
 15069 ;; Defined at:
 15070 ;;		line 2356 in file "main.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  nodeid          1    wreg     unsigned char 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  nodeid          1   70[BANK0 ] unsigned char 
 15075 ;;  buf             3   71[BANK0 ] unsigned char [3]
 15076 ;;  i               1   75[BANK0 ] unsigned char 
 15077 ;;  value           1   74[BANK0 ] unsigned char 
 15078 ;; Return value:  Size  Location     Type
 15079 ;;		None               void
 15080 ;; Registers used:
 15081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15082 ;; Tracked objects:
 15083 ;;		On entry : C/3
 15084 ;;		On exit  : 0/0
 15085 ;;		Unchanged: 0/0
 15086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15087 ;;      Params:         0       0       0       0       0       0       0
 15088 ;;      Locals:         0       6       0       0       0       0       0
 15089 ;;      Temps:          0       0       0       0       0       0       0
 15090 ;;      Totals:         0       6       0       0       0       0       0
 15091 ;;Total ram usage:        6 bytes
 15092 ;; Hardware stack levels used:    1
 15093 ;; Hardware stack levels required when called:    7
 15094 ;; This function calls:
 15095 ;;		_putsUSART
 15096 ;;		_memset
 15097 ;;		_strlen
 15098 ;;		_itoa
 15099 ;;		_readRegister
 15100 ;;		_strcat
 15101 ;; This function is called by:
 15102 ;;		_doModeVerbose
 15103 ;;		_findNodes
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           	psect	text27
 15108  003596                     __ptext27:
 15109                           	opt stack 0
 15110  003596                     _printGUID:
 15111                           	opt stack 22
 15112                           
 15113                           ;incstack = 0
 15114                           ;incstack = 0
 15115                           ;printGUID@nodeid stored from wreg
 15116  003596  CFE8 F0A6          	movff	wreg,printGUID@nodeid
 15117                           
 15118                           ;main.c: 2357: uint8_t i;
 15119                           ;main.c: 2358: uint8_t value;
 15120                           ;main.c: 2359: char buf[3];
 15121                           ;main.c: 2361: memset( wrkbuf, 0, sizeof(wrkbuf) );
 15122  00359A  0101               	movlb	1	; () banked
 15123  00359C  0E01               	movlw	high _wrkbuf
 15124  00359E  6E1A               	movwf	?_memset+1,c
 15125  0035A0  0E70               	movlw	low _wrkbuf
 15126  0035A2  6E19               	movwf	?_memset,c
 15127  0035A4  6A1C               	clrf	?_memset+3,c
 15128  0035A6  6A1B               	clrf	?_memset+2,c
 15129  0035A8  6A1E               	clrf	?_memset+5,c
 15130  0035AA  0E50               	movlw	80
 15131  0035AC  6E1D               	movwf	?_memset+4,c
 15132  0035AE  EC32  F028         	call	_memset	;wreg free
 15133                           
 15134                           ;main.c: 2362: putsUSART((char *) "GUID = ");
 15135  0035B2  0E7E               	movlw	high STR_234
 15136  0035B4  6E1B               	movwf	?_putsUSART+1,c
 15137  0035B6  0EE5               	movlw	low STR_234
 15138  0035B8  6E1A               	movwf	?_putsUSART,c
 15139  0035BA  ECC1  F025         	call	_putsUSART	;wreg free
 15140                           
 15141                           ;main.c: 2364: for ( i=0; i<16; i++ ) {
 15142  0035BE  0100               	movlb	0	; () banked
 15143  0035C0  6BAB               	clrf	printGUID@i& (0+255),b
 15144  0035C2                     l11435:
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;main.c: 2365: if ( readRegister( nodeid,
 15148                           ;main.c: 2366: 0xD0 + i,
 15149                           ;main.c: 2367: rwtimeout,
 15150                           ;main.c: 2368: &value ) ) {
 15151  0035C2  51AB               	movf	printGUID@i& (0+255),w,b
 15152  0035C4  0FD0               	addlw	208
 15153  0035C6  6F9E               	movwf	?_readRegister& (0+255),b
 15154  0035C8  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15155  0035CC  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15156  0035CE  0EAA               	movlw	low printGUID@value
 15157  0035D0  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15158  0035D2  51A6               	movf	printGUID@nodeid& (0+255),w,b
 15159  0035D4  ECC2  F020         	call	_readRegister
 15160  0035D8  0900               	iorlw	0
 15161  0035DA  E02A               	bz	l11445
 15162                           
 15163                           ;main.c: 2369: itoa( buf, value, 16 );
 15164  0035DC  0100               	movlb	0	; () banked
 15165  0035DE  0E00               	movlw	high printGUID@buf
 15166  0035E0  6E2A               	movwf	?_itoa+1,c
 15167  0035E2  0EA7               	movlw	low printGUID@buf
 15168  0035E4  6E29               	movwf	?_itoa,c
 15169  0035E6  C0AA  F02B         	movff	printGUID@value,?_itoa+2
 15170  0035EA  6A2C               	clrf	?_itoa+3,c
 15171  0035EC  6A2E               	clrf	?_itoa+5,c
 15172  0035EE  0E10               	movlw	16
 15173  0035F0  6E2D               	movwf	?_itoa+4,c
 15174  0035F2  ECB4  F027         	call	_itoa	;wreg free
 15175                           
 15176                           ;main.c: 2370: if ( 1 == strlen( buf ) ) {
 15177  0035F6  0100               	movlb	0	; () banked
 15178  0035F8  0E00               	movlw	high printGUID@buf
 15179  0035FA  6E1A               	movwf	?_strlen+1,c
 15180  0035FC  0EA7               	movlw	low printGUID@buf
 15181  0035FE  6E19               	movwf	?_strlen,c
 15182  003600  EC5D  F027         	call	_strlen	;wreg free
 15183  003604  0419               	decf	?_strlen,w,c
 15184  003606  101A               	iorwf	?_strlen+1,w,c
 15185  003608  E10F               	bnz	l11443
 15186                           
 15187                           ;main.c: 2371: strcat( wrkbuf, "0" );
 15188  00360A  0101               	movlb	1	; () banked
 15189  00360C  0E01               	movlw	high _wrkbuf
 15190  00360E  6E1A               	movwf	?_strcat+1,c
 15191  003610  0E70               	movlw	low _wrkbuf
 15192  003612  6E19               	movwf	?_strcat,c
 15193  003614  0E7F               	movlw	high STR_235
 15194  003616  6E1C               	movwf	?_strcat+3,c
 15195  003618  0EF8               	movlw	low STR_235
 15196  00361A  6E1B               	movwf	?_strcat+2,c
 15197  00361C  EC96  F025         	call	_strcat	;wreg free
 15198                           
 15199                           ;main.c: 2372: strcat( wrkbuf, buf );
 15200  003620  D833               	call	PL66	;call to abstracted procedure
 15201  003622  EC96  F025         	call	_strcat	;wreg free
 15202                           
 15203                           ;main.c: 2373: }
 15204  003626  D00F               	goto	l11447
 15205  003628                     l11443:
 15206                           
 15207                           ;main.c: 2374: else {
 15208                           ;main.c: 2375: strcat( wrkbuf, buf );
 15209  003628  D82F               	call	PL66	;call to abstracted procedure
 15210  00362A  EC96  F025         	call	_strcat	;wreg free
 15211  00362E  D00B               	goto	l11447
 15212  003630                     l11445:
 15213                           
 15214                           ;main.c: 2379: else {
 15215                           ;main.c: 2380: strcat( wrkbuf, "--" );
 15216  003630  0101               	movlb	1	; () banked
 15217  003632  0E01               	movlw	high _wrkbuf
 15218  003634  6E1A               	movwf	?_strcat+1,c
 15219  003636  0E70               	movlw	low _wrkbuf
 15220  003638  6E19               	movwf	?_strcat,c
 15221  00363A  0E7F               	movlw	high STR_236
 15222  00363C  6E1C               	movwf	?_strcat+3,c
 15223  00363E  0EE4               	movlw	low STR_236
 15224  003640  6E1B               	movwf	?_strcat+2,c
 15225  003642  EC96  F025         	call	_strcat	;wreg free
 15226  003646                     l11447:
 15227                           
 15228                           ;main.c: 2381: }
 15229                           ;main.c: 2383: if ( i < 15 ) {
 15230  003646  0E0F               	movlw	15
 15231  003648  0100               	movlb	0	; () banked
 15232  00364A  61AB               	cpfslt	printGUID@i& (0+255),b
 15233  00364C  D00B               	goto	l11451
 15234                           
 15235                           ; BSR set to: 0
 15236                           ;main.c: 2384: strcat( wrkbuf, ":" );
 15237  00364E  0101               	movlb	1	; () banked
 15238  003650  0E01               	movlw	high _wrkbuf
 15239  003652  6E1A               	movwf	?_strcat+1,c
 15240  003654  0E70               	movlw	low _wrkbuf
 15241  003656  6E19               	movwf	?_strcat,c
 15242  003658  0E7F               	movlw	high STR_237
 15243  00365A  6E1C               	movwf	?_strcat+3,c
 15244  00365C  0EFA               	movlw	low STR_237
 15245  00365E  6E1B               	movwf	?_strcat+2,c
 15246  003660  EC96  F025         	call	_strcat	;wreg free
 15247  003664                     l11451:
 15248  003664  0100               	movlb	0	; () banked
 15249  003666  2BAB               	incf	printGUID@i& (0+255),f,b
 15250                           
 15251                           ; BSR set to: 0
 15252  003668  0E0F               	movlw	15
 15253  00366A  65AB               	cpfsgt	printGUID@i& (0+255),b
 15254  00366C  D7AA               	goto	l11435
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;main.c: 2385: }
 15258                           ;main.c: 2387: }
 15259                           ;main.c: 2389: putsUSART( wrkbuf );
 15260  00366E  0101               	movlb	1	; () banked
 15261  003670  0E01               	movlw	high _wrkbuf
 15262  003672  6E1B               	movwf	?_putsUSART+1,c
 15263  003674  0E70               	movlw	low _wrkbuf
 15264  003676  6E1A               	movwf	?_putsUSART,c
 15265  003678  ECC1  F025         	call	_putsUSART	;wreg free
 15266                           
 15267                           ;main.c: 2390: putsUSART((char *)"\r\n");
 15268  00367C  0E74               	movlw	high (STR_188+50)
 15269  00367E  6E1B               	movwf	?_putsUSART+1,c
 15270  003680  0EB2               	movlw	low (STR_188+50)
 15271  003682  6E1A               	movwf	?_putsUSART,c
 15272  003684  EFC1  F025         	goto	_putsUSART	;wreg free
 15273  003688                     __end_of_printGUID:
 15274                           	opt stack 0
 15275  003688                     PL66:
 15276                           	opt stack 22
 15277  003688  0E01               	movlw	high _wrkbuf
 15278  00368A  6E1A               	movwf	?_strcat+1,c
 15279  00368C  0E70               	movlw	low _wrkbuf
 15280  00368E  6E19               	movwf	?_strcat,c
 15281  003690  0100               	movlb	0	; () banked
 15282  003692  0E00               	movlw	high printGUID@buf
 15283  003694  6E1C               	movwf	?_strcat+3,c
 15284  003696  0EA7               	movlw	low printGUID@buf
 15285  003698  6E1B               	movwf	?_strcat+2,c
 15286  00369A  0012               	return	
 15287  00369C                     __end_ofPL66:
 15288                           	opt stack 0
 15289                           tblptru	equ	0xFF8
 15290                           tblptrh	equ	0xFF7
 15291                           tblptrl	equ	0xFF6
 15292                           tablat	equ	0xFF5
 15293                           prodh	equ	0xFF4
 15294                           prodl	equ	0xFF3
 15295                           intcon	equ	0xFF2
 15296                           indf0	equ	0xFEF
 15297                           postinc0	equ	0xFEE
 15298                           fsr0h	equ	0xFEA
 15299                           fsr0l	equ	0xFE9
 15300                           wreg	equ	0xFE8
 15301                           indf1	equ	0xFE7
 15302                           postinc1	equ	0xFE6
 15303                           postdec1	equ	0xFE5
 15304                           fsr1h	equ	0xFE2
 15305                           fsr1l	equ	0xFE1
 15306                           indf2	equ	0xFDF
 15307                           postinc2	equ	0xFDE
 15308                           postdec2	equ	0xFDD
 15309                           plusw2	equ	0xFDB
 15310                           fsr2h	equ	0xFDA
 15311                           fsr2l	equ	0xFD9
 15312                           status	equ	0xFD8
 15313                           
 15314 ;; *************** function _printNodeFirmwareVersion *****************
 15315 ;; Defined at:
 15316 ;;		line 2430 in file "main.c"
 15317 ;; Parameters:    Size  Location     Type
 15318 ;;  nodeid          1    wreg     unsigned char 
 15319 ;; Auto vars:     Size  Location     Type
 15320 ;;  nodeid          1   70[BANK0 ] unsigned char 
 15321 ;;  buf             3   71[BANK0 ] unsigned char [3]
 15322 ;;  i               1   75[BANK0 ] unsigned char 
 15323 ;;  value           1   74[BANK0 ] unsigned char 
 15324 ;; Return value:  Size  Location     Type
 15325 ;;		None               void
 15326 ;; Registers used:
 15327 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15328 ;; Tracked objects:
 15329 ;;		On entry : C/3
 15330 ;;		On exit  : 0/0
 15331 ;;		Unchanged: 0/0
 15332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15333 ;;      Params:         0       0       0       0       0       0       0
 15334 ;;      Locals:         0       6       0       0       0       0       0
 15335 ;;      Temps:          0       0       0       0       0       0       0
 15336 ;;      Totals:         0       6       0       0       0       0       0
 15337 ;;Total ram usage:        6 bytes
 15338 ;; Hardware stack levels used:    1
 15339 ;; Hardware stack levels required when called:    7
 15340 ;; This function calls:
 15341 ;;		_putsUSART
 15342 ;;		_memset
 15343 ;;		_itoa
 15344 ;;		_readRegister
 15345 ;;		_strcat
 15346 ;; This function is called by:
 15347 ;;		_doModeVerbose
 15348 ;;		_findNodes
 15349 ;; This function uses a non-reentrant model
 15350 ;;
 15351                           
 15352                           	psect	text28
 15353  003DB4                     __ptext28:
 15354                           	opt stack 0
 15355  003DB4                     _printNodeFirmwareVersion:
 15356                           	opt stack 22
 15357                           
 15358                           ;incstack = 0
 15359                           ;incstack = 0
 15360                           ;printNodeFirmwareVersion@nodeid stored from wreg
 15361  003DB4  CFE8 F0A6          	movff	wreg,printNodeFirmwareVersion@nodeid
 15362                           
 15363                           ;main.c: 2431: uint8_t i;
 15364                           ;main.c: 2432: uint8_t value;
 15365                           ;main.c: 2433: char buf[3];
 15366                           ;main.c: 2435: memset( wrkbuf, 0, sizeof(wrkbuf) );
 15367  003DB8  0101               	movlb	1	; () banked
 15368  003DBA  0E01               	movlw	high _wrkbuf
 15369  003DBC  6E1A               	movwf	?_memset+1,c
 15370  003DBE  0E70               	movlw	low _wrkbuf
 15371  003DC0  6E19               	movwf	?_memset,c
 15372  003DC2  6A1C               	clrf	?_memset+3,c
 15373  003DC4  6A1B               	clrf	?_memset+2,c
 15374  003DC6  6A1E               	clrf	?_memset+5,c
 15375  003DC8  0E50               	movlw	80
 15376  003DCA  6E1D               	movwf	?_memset+4,c
 15377  003DCC  EC32  F028         	call	_memset	;wreg free
 15378                           
 15379                           ;main.c: 2436: putsUSART((char *) "Firmware version = ");
 15380  003DD0  0E7D               	movlw	high STR_241
 15381  003DD2  6E1B               	movwf	?_putsUSART+1,c
 15382  003DD4  0EBE               	movlw	low STR_241
 15383  003DD6  6E1A               	movwf	?_putsUSART,c
 15384  003DD8  ECC1  F025         	call	_putsUSART	;wreg free
 15385                           
 15386                           ;main.c: 2438: for ( i=0; i<3; i++ ) {
 15387  003DDC  0100               	movlb	0	; () banked
 15388  003DDE  6BAB               	clrf	printNodeFirmwareVersion@i& (0+255),b
 15389  003DE0                     l11407:
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;main.c: 2439: if ( readRegister( nodeid,
 15393                           ;main.c: 2440: 0x94 + i,
 15394                           ;main.c: 2441: rwtimeout,
 15395                           ;main.c: 2442: &value ) ) {
 15396  003DE0  51AB               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 15397  003DE2  0F94               	addlw	148
 15398  003DE4  6F9E               	movwf	?_readRegister& (0+255),b
 15399  003DE6  C0D9  F09F         	movff	_rwtimeout,?_readRegister+1
 15400  003DEA  6BA0               	clrf	(?_readRegister+2)& (0+255),b
 15401  003DEC  0EAA               	movlw	low printNodeFirmwareVersion@value
 15402  003DEE  6FA1               	movwf	(?_readRegister+3)& (0+255),b
 15403  003DF0  51A6               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 15404  003DF2  ECC2  F020         	call	_readRegister
 15405  003DF6  0900               	iorlw	0
 15406  003DF8  E019               	bz	l11413
 15407                           
 15408                           ;main.c: 2443: itoa( buf, value, 16 );
 15409  003DFA  0100               	movlb	0	; () banked
 15410  003DFC  0E00               	movlw	high printNodeFirmwareVersion@buf
 15411  003DFE  6E2A               	movwf	?_itoa+1,c
 15412  003E00  0EA7               	movlw	low printNodeFirmwareVersion@buf
 15413  003E02  6E29               	movwf	?_itoa,c
 15414  003E04  C0AA  F02B         	movff	printNodeFirmwareVersion@value,?_itoa+2
 15415  003E08  6A2C               	clrf	?_itoa+3,c
 15416  003E0A  6A2E               	clrf	?_itoa+5,c
 15417  003E0C  0E10               	movlw	16
 15418  003E0E  6E2D               	movwf	?_itoa+4,c
 15419  003E10  ECB4  F027         	call	_itoa	;wreg free
 15420                           
 15421                           ;main.c: 2444: strcat( wrkbuf, buf );
 15422  003E14  0E01               	movlw	high _wrkbuf
 15423  003E16  6E1A               	movwf	?_strcat+1,c
 15424  003E18  0E70               	movlw	low _wrkbuf
 15425  003E1A  6E19               	movwf	?_strcat,c
 15426  003E1C  0100               	movlb	0	; () banked
 15427  003E1E  0E00               	movlw	high printNodeFirmwareVersion@buf
 15428  003E20  6E1C               	movwf	?_strcat+3,c
 15429  003E22  0EA7               	movlw	low printNodeFirmwareVersion@buf
 15430  003E24  6E1B               	movwf	?_strcat+2,c
 15431  003E26  EC96  F025         	call	_strcat	;wreg free
 15432                           
 15433                           ;main.c: 2445: }
 15434  003E2A  D00B               	goto	l11415
 15435  003E2C                     l11413:
 15436                           
 15437                           ;main.c: 2446: else {
 15438                           ;main.c: 2447: strcat( wrkbuf, "?" );
 15439  003E2C  0101               	movlb	1	; () banked
 15440  003E2E  0E01               	movlw	high _wrkbuf
 15441  003E30  6E1A               	movwf	?_strcat+1,c
 15442  003E32  0E70               	movlw	low _wrkbuf
 15443  003E34  6E19               	movwf	?_strcat,c
 15444  003E36  0E7F               	movlw	high STR_242
 15445  003E38  6E1C               	movwf	?_strcat+3,c
 15446  003E3A  0EFC               	movlw	low STR_242
 15447  003E3C  6E1B               	movwf	?_strcat+2,c
 15448  003E3E  EC96  F025         	call	_strcat	;wreg free
 15449  003E42                     l11415:
 15450                           
 15451                           ;main.c: 2448: }
 15452                           ;main.c: 2450: if ( i < 2 ) {
 15453  003E42  0E02               	movlw	2
 15454  003E44  0100               	movlb	0	; () banked
 15455  003E46  61AB               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 15456  003E48  D00B               	goto	l11419
 15457                           
 15458                           ; BSR set to: 0
 15459                           ;main.c: 2451: strcat( wrkbuf, "." );
 15460  003E4A  0101               	movlb	1	; () banked
 15461  003E4C  0E01               	movlw	high _wrkbuf
 15462  003E4E  6E1A               	movwf	?_strcat+1,c
 15463  003E50  0E70               	movlw	low _wrkbuf
 15464  003E52  6E19               	movwf	?_strcat,c
 15465  003E54  0E7F               	movlw	high STR_243
 15466  003E56  6E1C               	movwf	?_strcat+3,c
 15467  003E58  0EF6               	movlw	low STR_243
 15468  003E5A  6E1B               	movwf	?_strcat+2,c
 15469  003E5C  EC96  F025         	call	_strcat	;wreg free
 15470  003E60                     l11419:
 15471  003E60  0100               	movlb	0	; () banked
 15472  003E62  2BAB               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 15473                           
 15474                           ; BSR set to: 0
 15475  003E64  0E02               	movlw	2
 15476  003E66  65AB               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 15477  003E68  D7BB               	goto	l11407
 15478                           
 15479                           ; BSR set to: 0
 15480                           ;main.c: 2452: }
 15481                           ;main.c: 2454: }
 15482                           ;main.c: 2456: putsUSART( wrkbuf );
 15483  003E6A  0101               	movlb	1	; () banked
 15484  003E6C  0E01               	movlw	high _wrkbuf
 15485  003E6E  6E1B               	movwf	?_putsUSART+1,c
 15486  003E70  0E70               	movlw	low _wrkbuf
 15487  003E72  6E1A               	movwf	?_putsUSART,c
 15488  003E74  ECC1  F025         	call	_putsUSART	;wreg free
 15489                           
 15490                           ;main.c: 2457: putsUSART((char *)"\r\n");
 15491  003E78  0E74               	movlw	high (STR_188+50)
 15492  003E7A  6E1B               	movwf	?_putsUSART+1,c
 15493  003E7C  0EB2               	movlw	low (STR_188+50)
 15494  003E7E  6E1A               	movwf	?_putsUSART,c
 15495  003E80  EFC1  F025         	goto	_putsUSART	;wreg free
 15496  003E84                     __end_of_printNodeFirmwareVersion:
 15497                           	opt stack 0
 15498                           tblptru	equ	0xFF8
 15499                           tblptrh	equ	0xFF7
 15500                           tblptrl	equ	0xFF6
 15501                           tablat	equ	0xFF5
 15502                           prodh	equ	0xFF4
 15503                           prodl	equ	0xFF3
 15504                           intcon	equ	0xFF2
 15505                           indf0	equ	0xFEF
 15506                           postinc0	equ	0xFEE
 15507                           fsr0h	equ	0xFEA
 15508                           fsr0l	equ	0xFE9
 15509                           wreg	equ	0xFE8
 15510                           indf1	equ	0xFE7
 15511                           postinc1	equ	0xFE6
 15512                           postdec1	equ	0xFE5
 15513                           fsr1h	equ	0xFE2
 15514                           fsr1l	equ	0xFE1
 15515                           indf2	equ	0xFDF
 15516                           postinc2	equ	0xFDE
 15517                           postdec2	equ	0xFDD
 15518                           plusw2	equ	0xFDB
 15519                           fsr2h	equ	0xFDA
 15520                           fsr2l	equ	0xFD9
 15521                           status	equ	0xFD8
 15522                           
 15523 ;; *************** function _strcat *****************
 15524 ;; Defined at:
 15525 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 15526 ;; Parameters:    Size  Location     Type
 15527 ;;  to              2   24[COMRAM] PTR unsigned char 
 15528 ;;		 -> wrkbuf(80), 
 15529 ;;  from            2   26[COMRAM] PTR const unsigned char 
 15530 ;;		 -> STR_243(2), STR_242(2), printNodeFirmwareVersion@buf(3), STR_237(2), 
 15531 ;;		 -> STR_236(3), STR_235(2), printGUID@buf(3), 
 15532 ;; Auto vars:     Size  Location     Type
 15533 ;;  cp              2   28[COMRAM] PTR unsigned char 
 15534 ;;		 -> wrkbuf(80), 
 15535 ;; Return value:  Size  Location     Type
 15536 ;;                  2   24[COMRAM] PTR unsigned char 
 15537 ;; Registers used:
 15538 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15539 ;; Tracked objects:
 15540 ;;		On entry : E/1
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15544 ;;      Params:         4       0       0       0       0       0       0
 15545 ;;      Locals:         2       0       0       0       0       0       0
 15546 ;;      Temps:          0       0       0       0       0       0       0
 15547 ;;      Totals:         6       0       0       0       0       0       0
 15548 ;;Total ram usage:        6 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    2
 15551 ;; This function calls:
 15552 ;;		Nothing
 15553 ;; This function is called by:
 15554 ;;		_printGUID
 15555 ;;		_printNodeFirmwareVersion
 15556 ;; This function uses a non-reentrant model
 15557 ;;
 15558                           
 15559                           	psect	text29
 15560  004B2C                     __ptext29:
 15561                           	opt stack 0
 15562  004B2C                     _strcat:
 15563                           	opt stack 26
 15564                           
 15565                           ;incstack = 0
 15566                           ;incstack = 0
 15567  004B2C  C019  F01D         	movff	strcat@to,strcat@cp
 15568  004B30  C01A  F01E         	movff	strcat@to+1,strcat@cp+1
 15569  004B34  D002               	goto	l11971
 15570  004B36                     l11969:
 15571  004B36  4A1D               	infsnz	strcat@cp,f,c
 15572  004B38  2A1E               	incf	strcat@cp+1,f,c
 15573  004B3A                     l11971:
 15574  004B3A  C01D  FFD9         	movff	strcat@cp,fsr2l
 15575  004B3E  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15576  004B42  50DF               	movf	indf2,w,c
 15577  004B44  E005               	bz	l11975
 15578  004B46  D7F7               	goto	l11969
 15579  004B48                     l11973:
 15580  004B48  4A1D               	infsnz	strcat@cp,f,c
 15581  004B4A  2A1E               	incf	strcat@cp+1,f,c
 15582  004B4C  4A1B               	infsnz	strcat@from,f,c
 15583  004B4E  2A1C               	incf	strcat@from+1,f,c
 15584  004B50                     l11975:
 15585  004B50  C01B  FFF6         	movff	strcat@from,tblptrl
 15586  004B54  C01C  FFF7         	movff	strcat@from+1,tblptrh
 15587  004B58  6AF8               	clrf	tblptru,c
 15588  004B5A  C01D  FFD9         	movff	strcat@cp,fsr2l
 15589  004B5E  C01E  FFDA         	movff	strcat@cp+1,fsr2h
 15590  004B62  0E05               	movlw	(high __ramtop+-1)
 15591  004B64  64F7               	cpfsgt	tblptrh,c
 15592  004B66  D003               	bra	u15497
 15593  004B68  0008               	tblrd		*
 15594  004B6A  50F5               	movf	tablat,w,c
 15595  004B6C  D005               	bra	u15490
 15596  004B6E                     u15497:
 15597  004B6E  CFF6 FFE9          	movff	tblptrl,fsr0l
 15598  004B72  CFF7 FFEA          	movff	tblptrh,fsr0h
 15599  004B76  50EF               	movf	indf0,w,c
 15600  004B78                     u15490:
 15601  004B78  6EDF               	movwf	indf2,c
 15602  004B7A  50DF               	movf	indf2,w,c
 15603  004B7C  B4D8               	btfsc	status,2,c
 15604  004B7E  0012               	return	
 15605  004B80  D7E3               	goto	l11973
 15606  004B82                     __end_of_strcat:
 15607                           	opt stack 0
 15608                           tblptru	equ	0xFF8
 15609                           tblptrh	equ	0xFF7
 15610                           tblptrl	equ	0xFF6
 15611                           tablat	equ	0xFF5
 15612                           prodh	equ	0xFF4
 15613                           prodl	equ	0xFF3
 15614                           intcon	equ	0xFF2
 15615                           indf0	equ	0xFEF
 15616                           postinc0	equ	0xFEE
 15617                           fsr0h	equ	0xFEA
 15618                           fsr0l	equ	0xFE9
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           postinc1	equ	0xFE6
 15622                           postdec1	equ	0xFE5
 15623                           fsr1h	equ	0xFE2
 15624                           fsr1l	equ	0xFE1
 15625                           indf2	equ	0xFDF
 15626                           postinc2	equ	0xFDE
 15627                           postdec2	equ	0xFDD
 15628                           plusw2	equ	0xFDB
 15629                           fsr2h	equ	0xFDA
 15630                           fsr2l	equ	0xFD9
 15631                           status	equ	0xFD8
 15632                           
 15633 ;; *************** function _readRegister *****************
 15634 ;; Defined at:
 15635 ;;		line 1923 in file "main.c"
 15636 ;; Parameters:    Size  Location     Type
 15637 ;;  nodeid          1    wreg     unsigned char 
 15638 ;;  reg             1   62[BANK0 ] unsigned char 
 15639 ;;  timeout         2   63[BANK0 ] unsigned short 
 15640 ;;  value           1   65[BANK0 ] PTR unsigned char 
 15641 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 15642 ;; Auto vars:     Size  Location     Type
 15643 ;;  nodeid          1   48[COMRAM] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;                  1    wreg      enum E15660
 15646 ;; Registers used:
 15647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15648 ;; Tracked objects:
 15649 ;;		On entry : F/0
 15650 ;;		On exit  : E/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15653 ;;      Params:         0       4       0       0       0       0       0
 15654 ;;      Locals:         1       0       0       0       0       0       0
 15655 ;;      Temps:          0       4       0       0       0       0       0
 15656 ;;      Totals:         1       8       0       0       0       0       0
 15657 ;;Total ram usage:        9 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    6
 15660 ;; This function calls:
 15661 ;;		_sendVSCPFrame
 15662 ;;		_getVSCPFrame
 15663 ;; This function is called by:
 15664 ;;		_findNodes
 15665 ;;		_printGUID
 15666 ;;		_printMDF
 15667 ;;		_printNodeFirmwareVersion
 15668 ;; This function uses a non-reentrant model
 15669 ;;
 15670                           
 15671                           	psect	text30
 15672  004184                     __ptext30:
 15673                           	opt stack 0
 15674  004184                     _readRegister:
 15675                           	opt stack 22
 15676                           
 15677                           ;incstack = 0
 15678                           ;incstack = 0
 15679                           ;readRegister@nodeid stored from wreg
 15680  004184  CFE8 F031          	movff	wreg,readRegister@nodeid
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;main.c: 1924: vscpData[ 0 ] = nodeid;
 15684  004188  C031  F040         	movff	readRegister@nodeid,_vscpData
 15685                           
 15686                           ; BSR set to: 0
 15687                           ;main.c: 1925: vscpData[ 1 ] = reg;
 15688  00418C  C09E  F041         	movff	readRegister@reg,_vscpData+1
 15689                           
 15690                           ; BSR set to: 0
 15691                           ;main.c: 1927: if (sendVSCPFrame( 0,
 15692                           ;main.c: 1928: 9,
 15693                           ;main.c: 1929: 0,
 15694                           ;main.c: 1930: 0,
 15695                           ;main.c: 1931: 2,
 15696                           ;main.c: 1932: vscpData)) {
 15697  004190  6B84               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15698  004192  6B83               	clrf	?_sendVSCPFrame& (0+255),b
 15699  004194  0E09               	movlw	9
 15700  004196  6F85               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15701  004198  6B86               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15702  00419A  6B87               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15703  00419C  0E02               	movlw	2
 15704  00419E  6F88               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15705  0041A0  0E40               	movlw	low _vscpData
 15706  0041A2  6F89               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15707  0041A4  EC09  F020         	call	_sendVSCPFrame	;wreg free
 15708  0041A8  0900               	iorlw	0
 15709  0041AA  E03E               	bz	l11963
 15710                           
 15711                           ;main.c: 1934: timekeeper = 0;
 15712  0041AC  0100               	movlb	0	; () banked
 15713  0041AE  6BCB               	clrf	_timekeeper& (0+255),b	;volatile
 15714  0041B0  6BCC               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15715  0041B2  6BCD               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15716  0041B4  6BCE               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15717                           
 15718                           ;main.c: 1935: while ( timekeeper < timeout ) {
 15719  0041B6  D028               	goto	l11961
 15720  0041B8                     l961:
 15721                           
 15722                           ; BSR set to: 0
 15723  0041B8  0004               	clrwdt		;# 
 15724                           
 15725                           ;main.c: 1939: if ( getVSCPFrame( &vscpClass,
 15726                           ;main.c: 1940: &vscpType,
 15727                           ;main.c: 1941: &vscpNodeId,
 15728                           ;main.c: 1942: &vscpPriority,
 15729                           ;main.c: 1943: &vscpSize,
 15730                           ;main.c: 1944: vscpData)) {
 15731  0041BA  0100               	movlb	0	; () banked
 15732  0041BC  0EDF               	movlw	low _vscpType
 15733  0041BE  6F60               	movwf	?_getVSCPFrame& (0+255),b
 15734  0041C0  0EDC               	movlw	low _vscpNodeId
 15735  0041C2  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15736  0041C4  0EDD               	movlw	low _vscpPriority
 15737  0041C6  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15738  0041C8  0EDE               	movlw	low _vscpSize
 15739  0041CA  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15740  0041CC  0E40               	movlw	low _vscpData
 15741  0041CE  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15742  0041D0  0EDA               	movlw	_vscpClass& (0+255)
 15743  0041D2  ECD3  F022         	call	_getVSCPFrame
 15744  0041D6  0900               	iorlw	0
 15745  0041D8  E017               	bz	l11961
 15746                           
 15747                           ;main.c: 1945: if ( ( nodeid == vscpNodeId) &&
 15748                           ;main.c: 1946: (0 == vscpClass) &&
 15749                           ;main.c: 1947: (10 == vscpType) &&
 15750                           ;main.c: 1948: (2 == vscpSize) &&
 15751                           ;main.c: 1949: (reg == vscpData[ 0 ])) {
 15752  0041DA  0100               	movlb	0	; () banked
 15753  0041DC  51DC               	movf	_vscpNodeId& (0+255),w,b
 15754  0041DE  6231               	cpfseq	readRegister@nodeid,c
 15755  0041E0  D013               	goto	l11961
 15756                           
 15757                           ; BSR set to: 0
 15758  0041E2  51DB               	movf	(_vscpClass+1)& (0+255),w,b
 15759  0041E4  11DA               	iorwf	_vscpClass& (0+255),w,b
 15760  0041E6  E110               	bnz	l11961
 15761                           
 15762                           ; BSR set to: 0
 15763  0041E8  51DF               	movf	_vscpType& (0+255),w,b
 15764  0041EA  0A0A               	xorlw	10
 15765  0041EC  E10D               	bnz	l11961
 15766                           
 15767                           ; BSR set to: 0
 15768  0041EE  51DE               	movf	_vscpSize& (0+255),w,b
 15769  0041F0  0A02               	xorlw	2
 15770  0041F2  E10A               	bnz	l11961
 15771                           
 15772                           ; BSR set to: 0
 15773  0041F4  5040               	movf	_vscpData,w,c
 15774  0041F6  639E               	cpfseq	readRegister@reg& (0+255),b
 15775  0041F8  D007               	goto	l11961
 15776                           
 15777                           ; BSR set to: 0
 15778                           ;main.c: 1950: *value = vscpData[ 1 ];
 15779  0041FA  51A1               	movf	readRegister@value& (0+255),w,b
 15780  0041FC  6ED9               	movwf	fsr2l,c
 15781  0041FE  6ADA               	clrf	fsr2h,c
 15782  004200  C041  FFDF         	movff	_vscpData+1,indf2
 15783                           
 15784                           ; BSR set to: 0
 15785                           ;main.c: 1951: return 1;
 15786  004204  0E01               	movlw	1
 15787  004206  D011               	goto	l964
 15788  004208                     l11961:
 15789  004208  0100               	movlb	0	; () banked
 15790  00420A  519F               	movf	readRegister@timeout& (0+255),w,b
 15791  00420C  6FA2               	movwf	??_readRegister& (0+255),b
 15792  00420E  51A0               	movf	(readRegister@timeout+1)& (0+255),w,b
 15793  004210  6FA3               	movwf	(??_readRegister+1)& (0+255),b
 15794  004212  6BA4               	clrf	(??_readRegister+2)& (0+255),b
 15795  004214  6BA5               	clrf	(??_readRegister+3)& (0+255),b
 15796  004216  51A2               	movf	??_readRegister& (0+255),w,b
 15797  004218  5DCB               	subwf	_timekeeper& (0+255),w,b	;volatile
 15798  00421A  51A3               	movf	(??_readRegister+1)& (0+255),w,b
 15799  00421C  59CC               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15800  00421E  51A4               	movf	(??_readRegister+2)& (0+255),w,b
 15801  004220  59CD               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15802  004222  51A5               	movf	(??_readRegister+3)& (0+255),w,b
 15803  004224  59CE               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15804  004226  E3C8               	bnc	l961
 15805  004228                     l11963:
 15806                           
 15807                           ;main.c: 1952: }
 15808                           ;main.c: 1953: }
 15809                           ;main.c: 1954: }
 15810                           ;main.c: 1955: }
 15811                           ;main.c: 1957: return 0;
 15812  004228  0E00               	movlw	0
 15813  00422A                     l964:
 15814  00422A  0012               	return	
 15815  00422C                     __end_of_readRegister:
 15816                           	opt stack 0
 15817                           tblptru	equ	0xFF8
 15818                           tblptrh	equ	0xFF7
 15819                           tblptrl	equ	0xFF6
 15820                           tablat	equ	0xFF5
 15821                           prodh	equ	0xFF4
 15822                           prodl	equ	0xFF3
 15823                           intcon	equ	0xFF2
 15824                           indf0	equ	0xFEF
 15825                           postinc0	equ	0xFEE
 15826                           fsr0h	equ	0xFEA
 15827                           fsr0l	equ	0xFE9
 15828                           wreg	equ	0xFE8
 15829                           indf1	equ	0xFE7
 15830                           postinc1	equ	0xFE6
 15831                           postdec1	equ	0xFE5
 15832                           fsr1h	equ	0xFE2
 15833                           fsr1l	equ	0xFE1
 15834                           indf2	equ	0xFDF
 15835                           postinc2	equ	0xFDE
 15836                           postdec2	equ	0xFDD
 15837                           plusw2	equ	0xFDB
 15838                           fsr2h	equ	0xFDA
 15839                           fsr2l	equ	0xFD9
 15840                           status	equ	0xFD8
 15841                           
 15842 ;; *************** function _sendVSCPFrame *****************
 15843 ;; Defined at:
 15844 ;;		line 2658 in file "main.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;  vscpclass       2   35[BANK0 ] unsigned short 
 15847 ;;  vscptype        1   37[BANK0 ] unsigned char 
 15848 ;;  nodeid          1   38[BANK0 ] unsigned char 
 15849 ;;  priority        1   39[BANK0 ] unsigned char 
 15850 ;;  size            1   40[BANK0 ] unsigned char 
 15851 ;;  pData           1   41[BANK0 ] PTR unsigned char 
 15852 ;;		 -> vscpData(8), 
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  id              4   43[COMRAM] unsigned long 
 15855 ;; Return value:  Size  Location     Type
 15856 ;;                  1    wreg      unsigned char 
 15857 ;; Registers used:
 15858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15859 ;; Tracked objects:
 15860 ;;		On entry : F/0
 15861 ;;		On exit  : E/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15864 ;;      Params:         0       7       0       0       0       0       0
 15865 ;;      Locals:         4       0       0       0       0       0       0
 15866 ;;      Temps:          0      20       0       0       0       0       0
 15867 ;;      Totals:         4      27       0       0       0       0       0
 15868 ;;Total ram usage:       31 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; Hardware stack levels required when called:    5
 15871 ;; This function calls:
 15872 ;;		_sendCANFrame
 15873 ;; This function is called by:
 15874 ;;		_doModeVerbose
 15875 ;;		_readRegister
 15876 ;;		_readRegisterExtended
 15877 ;;		_writeRegisterExtended
 15878 ;; This function uses a non-reentrant model
 15879 ;;
 15880                           
 15881                           	psect	text31
 15882  004012                     __ptext31:
 15883                           	opt stack 0
 15884  004012                     _sendVSCPFrame:
 15885                           	opt stack 22
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;main.c: 2659: uint32_t id = ((uint32_t) priority << 26) |
 15889                           ;main.c: 2660: ((uint32_t) vscpclass << 16) |
 15890                           ;main.c: 2661: ((uint32_t) vscptype << 8) |
 15891                           ;main.c: 2662: nodeid;
 15892                           
 15893                           ;incstack = 0
 15894                           ;incstack = 0
 15895  004012  C085  F08A         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 15896  004016  6B8B               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 15897  004018  6B8C               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 15898  00401A  6B8D               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 15899  00401C  C08C  F08D         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 15900  004020  C08B  F08C         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 15901  004024  C08A  F08B         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 15902  004028  6B8A               	clrf	??_sendVSCPFrame& (0+255),b
 15903  00402A  5183               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 15904  00402C  6F8E               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 15905  00402E  5184               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 15906  004030  6F8F               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 15907  004032  6B90               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 15908  004034  6B91               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 15909  004036  C08F  F091         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 15910  00403A  C08E  F090         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 15911  00403E  6B8F               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 15912  004040  6B8E               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 15913  004042  C087  F092         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 15914  004046  6B93               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 15915  004048  6B94               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 15916  00404A  6B95               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 15917  00404C  0E1A               	movlw	26
 15918  00404E                     u13305:
 15919  00404E  90D8               	bcf	status,0,c
 15920  004050  3792               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 15921  004052  3793               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 15922  004054  3794               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 15923  004056  3795               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 15924  004058  2EE8               	decfsz	wreg,f,c
 15925  00405A  D7F9               	goto	u13305
 15926  00405C  518E               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 15927  00405E  1192               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 15928  004060  6F96               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 15929  004062  518F               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 15930  004064  1193               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 15931  004066  6F97               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 15932  004068  5190               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 15933  00406A  1194               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 15934  00406C  6F98               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 15935  00406E  5191               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 15936  004070  1195               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 15937  004072  6F99               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 15938  004074  518A               	movf	??_sendVSCPFrame& (0+255),w,b
 15939  004076  1196               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 15940  004078  6F9A               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 15941  00407A  518B               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 15942  00407C  1197               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 15943  00407E  6F9B               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 15944  004080  518C               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 15945  004082  1198               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 15946  004084  6F9C               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 15947  004086  518D               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 15948  004088  1199               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 15949  00408A  6F9D               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 15950  00408C  5186               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 15951  00408E  119A               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 15952  004090  6E2C               	movwf	sendVSCPFrame@id,c
 15953  004092  519B               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 15954  004094  6E2D               	movwf	sendVSCPFrame@id+1,c
 15955  004096  519C               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 15956  004098  6E2E               	movwf	sendVSCPFrame@id+2,c
 15957  00409A  519D               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 15958  00409C  6E2F               	movwf	sendVSCPFrame@id+3,c
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;main.c: 2664: if (!sendCANFrame(id, size, pData)) {
 15962  00409E  C02C  F07C         	movff	sendVSCPFrame@id,?_sendCANFrame
 15963  0040A2  C02D  F07D         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 15964  0040A6  C02E  F07E         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 15965  0040AA  C02F  F07F         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 15966  0040AE  C088  F080         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 15967  0040B2  C089  F081         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 15968  0040B6  0E0F               	movlw	15
 15969  0040B8  6F82               	movwf	(?_sendCANFrame+6)& (0+255),b
 15970  0040BA  0E5F               	movlw	__accesstop+-1
 15971  0040BC  6581               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
 15972  0040BE  6B82               	clrf	(?_sendCANFrame+6)& (0+255),b
 15973  0040C0  EC7B  F027         	call	_sendCANFrame	;wreg free
 15974  0040C4  0900               	iorlw	0
 15975                           
 15976                           ;main.c: 2666: return 0;
 15977  0040C6  0E00               	movlw	0
 15978  0040C8  A4D8               	btfss	status,2,c
 15979                           
 15980                           ;main.c: 2667: }
 15981                           ;main.c: 2669: return 1;
 15982  0040CA  0E01               	movlw	1
 15983  0040CC  0012               	return	
 15984  0040CE                     __end_of_sendVSCPFrame:
 15985                           	opt stack 0
 15986                           tblptru	equ	0xFF8
 15987                           tblptrh	equ	0xFF7
 15988                           tblptrl	equ	0xFF6
 15989                           tablat	equ	0xFF5
 15990                           prodh	equ	0xFF4
 15991                           prodl	equ	0xFF3
 15992                           intcon	equ	0xFF2
 15993                           indf0	equ	0xFEF
 15994                           postinc0	equ	0xFEE
 15995                           fsr0h	equ	0xFEA
 15996                           fsr0l	equ	0xFE9
 15997                           wreg	equ	0xFE8
 15998                           indf1	equ	0xFE7
 15999                           postinc1	equ	0xFE6
 16000                           postdec1	equ	0xFE5
 16001                           fsr1h	equ	0xFE2
 16002                           fsr1l	equ	0xFE1
 16003                           indf2	equ	0xFDF
 16004                           postinc2	equ	0xFDE
 16005                           postdec2	equ	0xFDD
 16006                           plusw2	equ	0xFDB
 16007                           fsr2h	equ	0xFDA
 16008                           fsr2l	equ	0xFD9
 16009                           status	equ	0xFD8
 16010                           
 16011 ;; *************** function _sendCANFrame *****************
 16012 ;; Defined at:
 16013 ;;		line 2704 in file "main.c"
 16014 ;; Parameters:    Size  Location     Type
 16015 ;;  id              4   28[BANK0 ] unsigned long 
 16016 ;;  dlc             1   32[BANK0 ] unsigned char 
 16017 ;;  pdata           2   33[BANK0 ] PTR unsigned char 
 16018 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16019 ;; Auto vars:     Size  Location     Type
 16020 ;;		None
 16021 ;; Return value:  Size  Location     Type
 16022 ;;                  1    wreg      unsigned char 
 16023 ;; Registers used:
 16024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16025 ;; Tracked objects:
 16026 ;;		On entry : F/0
 16027 ;;		On exit  : E/0
 16028 ;;		Unchanged: 0/0
 16029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16030 ;;      Params:         0       7       0       0       0       0       0
 16031 ;;      Locals:         0       0       0       0       0       0       0
 16032 ;;      Temps:          0       0       0       0       0       0       0
 16033 ;;      Totals:         0       7       0       0       0       0       0
 16034 ;;Total ram usage:        7 bytes
 16035 ;; Hardware stack levels used:    1
 16036 ;; Hardware stack levels required when called:    4
 16037 ;; This function calls:
 16038 ;;		_ECANSendMessage
 16039 ;; This function is called by:
 16040 ;;		_doModeSLCAN
 16041 ;;		_receiveVSCPModeCanalMsg
 16042 ;;		_sendVSCPFrame
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           	psect	text32
 16047  004EF6                     __ptext32:
 16048                           	opt stack 0
 16049  004EF6                     _sendCANFrame:
 16050                           	opt stack 25
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;main.c: 2705: if ( !ECANSendMessage( id, pdata, dlc, ECAN_TX_XTD_FRAME ) ) {
 16054                           
 16055                           ;incstack = 0
 16056                           ;incstack = 0
 16057  004EF6  C07C  F023         	movff	sendCANFrame@id,?_ECANSendMessage
 16058  004EFA  C07D  F024         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16059  004EFE  C07E  F025         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16060  004F02  C07F  F026         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16061  004F06  C081  F027         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16062  004F0A  C082  F028         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16063  004F0E  C080  F029         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16064  004F12  0E20               	movlw	32
 16065  004F14  6E2A               	movwf	?_ECANSendMessage+7,c
 16066  004F16  EC2B  F017         	call	_ECANSendMessage	;wreg free
 16067  004F1A  0900               	iorlw	0
 16068  004F1C  E107               	bnz	l11829
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;main.c: 2707: can_transmitOverruns++;
 16072  004F1E  0101               	movlb	1	; () banked
 16073  004F20  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 16074  004F22  0E00               	movlw	0
 16075  004F24  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 16076  004F26  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 16077  004F28  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 16078                           
 16079                           ; BSR set to: 1
 16080                           ;main.c: 2708: return 0;
 16081  004F2A  D001               	goto	l1160
 16082  004F2C                     l11829:
 16083                           
 16084                           ; BSR set to: 0
 16085                           ;main.c: 2709: }
 16086                           ;main.c: 2711: return 1;
 16087  004F2C  0E01               	movlw	1
 16088  004F2E                     l1160:
 16089  004F2E  0012               	return	
 16090  004F30                     __end_of_sendCANFrame:
 16091                           	opt stack 0
 16092                           tblptru	equ	0xFF8
 16093                           tblptrh	equ	0xFF7
 16094                           tblptrl	equ	0xFF6
 16095                           tablat	equ	0xFF5
 16096                           prodh	equ	0xFF4
 16097                           prodl	equ	0xFF3
 16098                           intcon	equ	0xFF2
 16099                           indf0	equ	0xFEF
 16100                           postinc0	equ	0xFEE
 16101                           fsr0h	equ	0xFEA
 16102                           fsr0l	equ	0xFE9
 16103                           wreg	equ	0xFE8
 16104                           indf1	equ	0xFE7
 16105                           postinc1	equ	0xFE6
 16106                           postdec1	equ	0xFE5
 16107                           fsr1h	equ	0xFE2
 16108                           fsr1l	equ	0xFE1
 16109                           indf2	equ	0xFDF
 16110                           postinc2	equ	0xFDE
 16111                           postdec2	equ	0xFDD
 16112                           plusw2	equ	0xFDB
 16113                           fsr2h	equ	0xFDA
 16114                           fsr2l	equ	0xFD9
 16115                           status	equ	0xFD8
 16116                           
 16117 ;; *************** function _ECANSendMessage *****************
 16118 ;; Defined at:
 16119 ;;		line 617 in file "ECAN.c"
 16120 ;; Parameters:    Size  Location     Type
 16121 ;;  id              4   34[COMRAM] unsigned long 
 16122 ;;  data            2   38[COMRAM] PTR unsigned char 
 16123 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16124 ;;  dataLen         1   40[COMRAM] unsigned char 
 16125 ;;  msgFlags        1   41[COMRAM] enum E16306
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;  pb             18    0[BANK0 ] PTR unsigned char [9]
 16128 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16129 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16130 ;;		 -> B0CON(1), 
 16131 ;;  ptr             2   26[BANK0 ] PTR unsigned char 
 16132 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16133 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16134 ;;		 -> B0CON(1), 
 16135 ;;  tempPtr         2   22[BANK0 ] PTR unsigned char 
 16136 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16137 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16138 ;;		 -> B0CON(1), 
 16139 ;;  i               1   25[BANK0 ] unsigned char 
 16140 ;;  temp            1   24[BANK0 ] unsigned char 
 16141 ;;  tempBSEL0       1   21[BANK0 ] struct .
 16142 ;;  j               1   20[BANK0 ] unsigned char 
 16143 ;;  buffers         1   19[BANK0 ] unsigned char 
 16144 ;;  mode            1   18[BANK0 ] unsigned char 
 16145 ;; Return value:  Size  Location     Type
 16146 ;;                  1    wreg      enum E15660
 16147 ;; Registers used:
 16148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16149 ;; Tracked objects:
 16150 ;;		On entry : F/0
 16151 ;;		On exit  : F/0
 16152 ;;		Unchanged: 0/0
 16153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16154 ;;      Params:         8       0       0       0       0       0       0
 16155 ;;      Locals:         0      28       0       0       0       0       0
 16156 ;;      Temps:          1       0       0       0       0       0       0
 16157 ;;      Totals:         9      28       0       0       0       0       0
 16158 ;;Total ram usage:       37 bytes
 16159 ;; Hardware stack levels used:    1
 16160 ;; Hardware stack levels required when called:    3
 16161 ;; This function calls:
 16162 ;;		__CANIDToRegs
 16163 ;; This function is called by:
 16164 ;;		_sendCANFrame
 16165 ;; This function uses a non-reentrant model
 16166 ;;
 16167                           
 16168                           	psect	text33
 16169  002E56                     __ptext33:
 16170                           	opt stack 0
 16171  002E56                     _ECANSendMessage:
 16172                           	opt stack 25
 16173                           
 16174                           ; BSR set to: 0
 16175                           ;ECAN.c: 619: BYTE mode;
 16176                           ;ECAN.c: 620: BYTE buffers;
 16177                           ;ECAN.c: 628: BYTE i,j;
 16178                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16179                           ;ECAN.c: 630: BYTE* pb[9];
 16180                           ;ECAN.c: 631: BYTE temp;
 16181                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16182                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16183                           
 16184                           ;incstack = 0
 16185                           ;incstack = 0
 16186  002E56  0E0F               	movlw	15	;volatile
 16187  002E58  0100               	movlb	0	; () banked
 16188  002E5A  6F61               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 16189  002E5C  0E40               	movlw	64	;volatile
 16190  002E5E  6F60               	movwf	ECANSendMessage@pb& (0+255),b
 16191                           
 16192                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16193  002E60  0E0F               	movlw	15	;volatile
 16194  002E62  6F63               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 16195  002E64  0E30               	movlw	48	;volatile
 16196  002E66  6F62               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 16197                           
 16198                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16199  002E68  0E0F               	movlw	15	;volatile
 16200  002E6A  6F65               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 16201  002E6C  0E20               	movlw	32	;volatile
 16202  002E6E  6F64               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 16203                           
 16204                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16205  002E70  0E0E               	movlw	14	;volatile
 16206  002E72  6F67               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 16207  002E74  0E20               	movlw	32	;volatile
 16208  002E76  6F66               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 16209                           
 16210                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16211  002E78  0E0E               	movlw	14	;volatile
 16212  002E7A  6F69               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 16213  002E7C  0E30               	movlw	48	;volatile
 16214  002E7E  6F68               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 16215                           
 16216                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16217  002E80  0E0E               	movlw	14	;volatile
 16218  002E82  6F6B               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 16219  002E84  0E40               	movlw	64	;volatile
 16220  002E86  6F6A               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 16221                           
 16222                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16223  002E88  0E0E               	movlw	14	;volatile
 16224  002E8A  6F6D               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 16225  002E8C  0E50               	movlw	80	;volatile
 16226  002E8E  6F6C               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 16227                           
 16228                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16229  002E90  0E0E               	movlw	14	;volatile
 16230  002E92  6F6F               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 16231  002E94  0E60               	movlw	96	;volatile
 16232  002E96  6F6E               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 16233                           
 16234                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16235  002E98  0E0E               	movlw	14	;volatile
 16236  002E9A  6F71               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 16237  002E9C  0E70               	movlw	112	;volatile
 16238  002E9E  6F70               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 16239                           
 16240                           ; BSR set to: 0
 16241                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16242  002EA0  5077               	movf	3959,w,c	;volatile
 16243  002EA2  0BC0               	andlw	192
 16244  002EA4  6F72               	movwf	ECANSendMessage@mode& (0+255),b
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;ECAN.c: 660: if ( mode == 0x00 )
 16248  002EA6  6772               	tstfsz	ECANSendMessage@mode& (0+255),b
 16249  002EA8  D002               	goto	l11985
 16250                           
 16251                           ; BSR set to: 0
 16252                           ;ECAN.c: 661: buffers = 2;
 16253  002EAA  0E02               	movlw	2
 16254  002EAC  D001               	goto	L14
 16255  002EAE                     l11985:
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;ECAN.c: 662: else
 16259                           ;ECAN.c: 663: buffers = 8;
 16260  002EAE  0E08               	movlw	8
 16261  002EB0                     L14:
 16262  002EB0  6F73               	movwf	ECANSendMessage@buffers& (0+255),b
 16263                           
 16264                           ; BSR set to: 0
 16265                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16266  002EB2  010D               	movlb	13	; () banked
 16267  002EB4  90D8               	bcf	status,0,c
 16268  002EB6  31F8               	rrcf	248,w,b	;volatile
 16269  002EB8  0100               	movlb	0	; () banked
 16270  002EBA  6F75               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 16271                           
 16272                           ; BSR set to: 0
 16273                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16274  002EBC  6B79               	clrf	ECANSendMessage@i& (0+255),b
 16275  002EBE  D07E               	goto	l12045
 16276  002EC0                     l11991:
 16277                           
 16278                           ; BSR set to: 0
 16279                           ;ECAN.c: 688: {
 16280                           ;ECAN.c: 693: ptr = pb[i];
 16281  002EC0  5179               	movf	ECANSendMessage@i& (0+255),w,b
 16282  002EC2  0D02               	mullw	2
 16283  002EC4  50F3               	movf	prodl,w,c
 16284  002EC6  0F60               	addlw	low ECANSendMessage@pb
 16285  002EC8  6ED9               	movwf	fsr2l,c
 16286  002ECA  6ADA               	clrf	fsr2h,c
 16287  002ECC  CFDE F07A          	movff	postinc2,ECANSendMessage@ptr
 16288  002ED0  CFDD F07B          	movff	postdec2,ECANSendMessage@ptr+1
 16289                           
 16290                           ; BSR set to: 0
 16291                           ;ECAN.c: 694: tempPtr = ptr;
 16292  002ED4  C07A  F076         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16293  002ED8  C07B  F077         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16294                           
 16295                           ; BSR set to: 0
 16296                           ;ECAN.c: 702: if ( i > 2 )
 16297  002EDC  0E02               	movlw	2
 16298  002EDE  6579               	cpfsgt	ECANSendMessage@i& (0+255),b
 16299  002EE0  D004               	goto	l12003
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;ECAN.c: 703: {
 16303                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16304  002EE2  90D8               	bcf	status,0,c
 16305  002EE4  3375               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 16306                           
 16307                           ; BSR set to: 0
 16308                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16309  002EE6  A175               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 16310  002EE8  D068               	goto	l12043
 16311  002EEA                     l12003:
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;ECAN.c: 714: }
 16315                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16316  002EEA  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16317  002EEE  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16318  002EF2  50DF               	movf	indf2,w,c
 16319  002EF4  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16320  002EF6  B62B               	btfsc	??_ECANSendMessage,3,c
 16321  002EF8  D060               	goto	l12043
 16322                           
 16323                           ; BSR set to: 0
 16324                           ;ECAN.c: 721: {
 16325                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16326  002EFA  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16327  002EFE  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16328  002F02  0EFC               	movlw	252
 16329  002F04  16DF               	andwf	indf2,f,c
 16330                           
 16331                           ; BSR set to: 0
 16332                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16333  002F06  C02A  F02B         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16334  002F0A  0E03               	movlw	3
 16335  002F0C  162B               	andwf	??_ECANSendMessage,f,c
 16336  002F0E  C07A  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16337  002F12  C07B  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16338  002F16  502B               	movf	??_ECANSendMessage,w,c
 16339  002F18  12DF               	iorwf	indf2,f,c
 16340                           
 16341                           ; BSR set to: 0
 16342                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16343  002F1A  AC2A               	btfss	ECANSendMessage@msgFlags,6,c
 16344  002F1C  D004               	goto	l1326
 16345                           
 16346                           ; BSR set to: 0
 16347                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16348  002F1E  5029               	movf	ECANSendMessage@dataLen,w,c
 16349  002F20  0940               	iorlw	64
 16350  002F22  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16351  002F24  D002               	goto	l12013
 16352  002F26                     l1326:
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;ECAN.c: 729: else
 16356                           ;ECAN.c: 730: temp = dataLen;
 16357  002F26  C029  F078         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16358  002F2A                     l12013:
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;ECAN.c: 732: *(ptr+5) = temp;
 16362  002F2A  EE20 F005          	lfsr	2,5
 16363  002F2E  517A               	movf	ECANSendMessage@ptr& (0+255),w,b
 16364  002F30  26D9               	addwf	fsr2l,f,c
 16365  002F32  517B               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 16366  002F34  22DA               	addwfc	fsr2h,f,c
 16367  002F36  C078  FFDF         	movff	ECANSendMessage@temp,indf2
 16368                           
 16369                           ; BSR set to: 0
 16370                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16371  002F3A  AA2A               	btfss	ECANSendMessage@msgFlags,5,c
 16372  002F3C  D003               	goto	l1328
 16373                           
 16374                           ; BSR set to: 0
 16375                           ;ECAN.c: 736: temp = 1;
 16376  002F3E  0E01               	movlw	1
 16377  002F40  6F78               	movwf	ECANSendMessage@temp& (0+255),b
 16378  002F42  D001               	goto	l12019
 16379  002F44                     l1328:
 16380                           
 16381                           ; BSR set to: 0
 16382                           ;ECAN.c: 738: else
 16383                           ;ECAN.c: 739: temp = 0;
 16384  002F44  6B78               	clrf	ECANSendMessage@temp& (0+255),b
 16385  002F46                     l12019:
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16389  002F46  297A               	incf	ECANSendMessage@ptr& (0+255),w,b
 16390  002F48  6E19               	movwf	?__CANIDToRegs,c
 16391  002F4A  0E00               	movlw	0
 16392  002F4C  217B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 16393  002F4E  6E1A               	movwf	?__CANIDToRegs+1,c
 16394  002F50  C023  F01B         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16395  002F54  C024  F01C         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16396  002F58  C025  F01D         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16397  002F5C  C026  F01E         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16398  002F60  C078  F01F         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16399  002F64  EC41  F01A         	call	__CANIDToRegs	;wreg free
 16400                           
 16401                           ;ECAN.c: 745: ptr += 6;
 16402  002F68  0E06               	movlw	6
 16403  002F6A  0100               	movlb	0	; () banked
 16404  002F6C  277A               	addwf	ECANSendMessage@ptr& (0+255),f,b
 16405  002F6E  0E00               	movlw	0
 16406  002F70  237B               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 16407                           
 16408                           ; BSR set to: 0
 16409                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16410  002F72  6B74               	clrf	ECANSendMessage@j& (0+255),b
 16411  002F74  D00F               	goto	l12033
 16412  002F76                     l12025:
 16413                           
 16414                           ; BSR set to: 0
 16415                           ;ECAN.c: 748: *ptr++ = *data++;
 16416  002F76  C027  FFD9         	movff	ECANSendMessage@data,fsr2l
 16417  002F7A  C028  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16418  002F7E  C07A  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16419  002F82  C07B  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16420  002F86  CFDF FFE7          	movff	indf2,indf1
 16421                           
 16422                           ; BSR set to: 0
 16423  002F8A  4A27               	infsnz	ECANSendMessage@data,f,c
 16424  002F8C  2A28               	incf	ECANSendMessage@data+1,f,c
 16425                           
 16426                           ; BSR set to: 0
 16427  002F8E  4B7A               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 16428  002F90  2B7B               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 16429                           
 16430                           ; BSR set to: 0
 16431  002F92  2B74               	incf	ECANSendMessage@j& (0+255),f,b
 16432  002F94                     l12033:
 16433                           
 16434                           ; BSR set to: 0
 16435  002F94  5029               	movf	ECANSendMessage@dataLen,w,c
 16436  002F96  5D74               	subwf	ECANSendMessage@j& (0+255),w,b
 16437  002F98  E3EE               	bnc	l12025
 16438                           
 16439                           ; BSR set to: 0
 16440                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16441  002F9A  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16442  002F9E  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16443  002FA2  50DF               	movf	indf2,w,c
 16444  002FA4  6E2B               	movwf	??_ECANSendMessage& (0+255),c
 16445  002FA6  B42B               	btfsc	??_ECANSendMessage,2,c
 16446  002FA8  D006               	goto	l12039
 16447                           
 16448                           ; BSR set to: 0
 16449                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16450  002FAA  C076  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16451  002FAE  C077  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16452  002FB2  0E00               	movlw	0
 16453  002FB4  86DB               	bsf	plusw2,3,c
 16454  002FB6                     l12039:
 16455                           
 16456                           ; BSR set to: 0
 16457                           ;ECAN.c: 755: return TRUE;
 16458  002FB6  0E01               	movlw	1
 16459  002FB8  D006               	goto	l1334
 16460  002FBA                     l12043:
 16461                           
 16462                           ; BSR set to: 0
 16463  002FBA  2B79               	incf	ECANSendMessage@i& (0+255),f,b
 16464  002FBC                     l12045:
 16465                           
 16466                           ; BSR set to: 0
 16467  002FBC  5173               	movf	ECANSendMessage@buffers& (0+255),w,b
 16468  002FBE  5D79               	subwf	ECANSendMessage@i& (0+255),w,b
 16469  002FC0  E201 D77E          	bnc	l11991
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;ECAN.c: 756: }
 16473                           ;ECAN.c: 757: }
 16474                           ;ECAN.c: 760: return FALSE;
 16475  002FC4  0E00               	movlw	0
 16476  002FC6                     l1334:
 16477                           
 16478                           ; BSR set to: 0
 16479  002FC6  0012               	return	
 16480  002FC8                     __end_of_ECANSendMessage:
 16481                           	opt stack 0
 16482                           tblptru	equ	0xFF8
 16483                           tblptrh	equ	0xFF7
 16484                           tblptrl	equ	0xFF6
 16485                           tablat	equ	0xFF5
 16486                           prodh	equ	0xFF4
 16487                           prodl	equ	0xFF3
 16488                           intcon	equ	0xFF2
 16489                           indf0	equ	0xFEF
 16490                           postinc0	equ	0xFEE
 16491                           fsr0h	equ	0xFEA
 16492                           fsr0l	equ	0xFE9
 16493                           wreg	equ	0xFE8
 16494                           indf1	equ	0xFE7
 16495                           postinc1	equ	0xFE6
 16496                           postdec1	equ	0xFE5
 16497                           fsr1h	equ	0xFE2
 16498                           fsr1l	equ	0xFE1
 16499                           indf2	equ	0xFDF
 16500                           postinc2	equ	0xFDE
 16501                           postdec2	equ	0xFDD
 16502                           plusw2	equ	0xFDB
 16503                           fsr2h	equ	0xFDA
 16504                           fsr2l	equ	0xFD9
 16505                           status	equ	0xFD8
 16506                           
 16507 ;; *************** function __CANIDToRegs *****************
 16508 ;; Defined at:
 16509 ;;		line 1099 in file "ECAN.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 16512 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16513 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16514 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 16515 ;;  val             4   26[COMRAM] unsigned long 
 16516 ;;  type            1   30[COMRAM] unsigned char 
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;  Value           1   33[COMRAM] PTR struct _CAN_MESSAGE_
 16519 ;;		 -> _CANIDToRegs@val(4), 
 16520 ;; Return value:  Size  Location     Type
 16521 ;;		None               void
 16522 ;; Registers used:
 16523 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16524 ;; Tracked objects:
 16525 ;;		On entry : 0/F
 16526 ;;		On exit  : 0/0
 16527 ;;		Unchanged: 0/0
 16528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16529 ;;      Params:         7       0       0       0       0       0       0
 16530 ;;      Locals:         1       0       0       0       0       0       0
 16531 ;;      Temps:          2       0       0       0       0       0       0
 16532 ;;      Totals:        10       0       0       0       0       0       0
 16533 ;;Total ram usage:       10 bytes
 16534 ;; Hardware stack levels used:    1
 16535 ;; Hardware stack levels required when called:    2
 16536 ;; This function calls:
 16537 ;;		Nothing
 16538 ;; This function is called by:
 16539 ;;		_doModeVerbose
 16540 ;;		_ECANSendMessage
 16541 ;; This function uses a non-reentrant model
 16542 ;;
 16543                           
 16544                           	psect	text34
 16545  003482                     __ptext34:
 16546                           	opt stack 0
 16547  003482                     __CANIDToRegs:
 16548                           	opt stack 25
 16549                           
 16550                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 16551                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;incstack = 0
 16555                           ;incstack = 0
 16556  003482  0E1B               	movlw	low __CANIDToRegs@val
 16557  003484  6E22               	movwf	__CANIDToRegs@Value,c
 16558                           
 16559                           ;ECAN.c: 1104: if ( type == 0 )
 16560  003486  661F               	tstfsz	__CANIDToRegs@type,c
 16561  003488  D022               	goto	l11505
 16562                           
 16563                           ;ECAN.c: 1105: {
 16564                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 16565  00348A  5022               	movf	__CANIDToRegs@Value,w,c
 16566  00348C  6ED9               	movwf	fsr2l,c
 16567  00348E  6ADA               	clrf	fsr2h,c
 16568  003490  50DF               	movf	indf2,w,c
 16569  003492  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16570  003494  90D8               	bcf	status,0,c
 16571  003496  3220               	rrcf	??__CANIDToRegs,f,c
 16572  003498  90D8               	bcf	status,0,c
 16573  00349A  3220               	rrcf	??__CANIDToRegs,f,c
 16574  00349C  90D8               	bcf	status,0,c
 16575  00349E  3020               	rrcf	??__CANIDToRegs,w,c
 16576                           
 16577                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 16578  0034A0  D862               	call	PL54	;call to abstracted procedure
 16579  0034A2  2AD9               	incf	fsr2l,f,c
 16580  0034A4  6ADA               	clrf	fsr2h,c
 16581  0034A6  D872               	call	PL94	;call to abstracted procedure
 16582  0034A8                     u14575:
 16583  0034A8  90D8               	bcf	status,0,c
 16584  0034AA  3620               	rlcf	??__CANIDToRegs,f,c
 16585  0034AC  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16586  0034AE  D7FC               	goto	u14575
 16587  0034B0  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16588                           
 16589                           ;ECAN.c: 1109: ptr++;
 16590                           
 16591                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 16592  0034B4  D846               	call	PL32	;call to abstracted procedure
 16593  0034B6  D86A               	call	PL94	;call to abstracted procedure
 16594  0034B8                     u14585:
 16595  0034B8  90D8               	bcf	status,0,c
 16596  0034BA  3620               	rlcf	??__CANIDToRegs,f,c
 16597  0034BC  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16598  0034BE  D7FC               	goto	u14585
 16599  0034C0  5020               	movf	??__CANIDToRegs,w,c
 16600  0034C2  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16601  0034C6  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16602  0034CA  6EDF               	movwf	indf2,c
 16603                           
 16604                           ;ECAN.c: 1111: }
 16605  0034CC  D039               	goto	l1388
 16606  0034CE                     l11505:
 16607                           
 16608                           ;ECAN.c: 1112: else
 16609                           ;ECAN.c: 1113: {
 16610                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 16611  0034CE  5022               	movf	__CANIDToRegs@Value,w,c
 16612  0034D0  D842               	call	PL48	;call to abstracted procedure
 16613  0034D2  0E05               	movlw	5
 16614  0034D4  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16615  0034D6                     u14595:
 16616  0034D6  90D8               	bcf	status,0,c
 16617  0034D8  3220               	rrcf	??__CANIDToRegs,f,c
 16618  0034DA  2E21               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 16619  0034DC  D7FC               	goto	u14595
 16620  0034DE  5020               	movf	??__CANIDToRegs,w,c
 16621                           
 16622                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 16623  0034E0  D842               	call	PL54	;call to abstracted procedure
 16624  0034E2  0E03               	movlw	3
 16625  0034E4  D849               	call	PL64	;call to abstracted procedure
 16626  0034E6  3620               	rlcf	??__CANIDToRegs,f,c
 16627  0034E8  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16628                           
 16629                           ;ECAN.c: 1117: ptr++;
 16630                           
 16631                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 16632  0034EC  D82A               	call	PL32	;call to abstracted procedure
 16633  0034EE  0E02               	movlw	2
 16634  0034F0  D843               	call	PL64	;call to abstracted procedure
 16635  0034F2  3420               	rlcf	??__CANIDToRegs,w,c
 16636  0034F4  0BE0               	andlw	224
 16637  0034F6  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16638  0034FA  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16639  0034FE  6EDF               	movwf	indf2,c
 16640                           
 16641                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 16642  003500  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16643  003504  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16644  003508  0E00               	movlw	0
 16645  00350A  86DB               	bsf	plusw2,3,c
 16646                           
 16647                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 16648  00350C  5022               	movf	__CANIDToRegs@Value,w,c
 16649  00350E  D823               	call	PL48	;call to abstracted procedure
 16650  003510  0E03               	movlw	3
 16651  003512  1620               	andwf	??__CANIDToRegs,f,c
 16652  003514  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16653                           
 16654                           ;ECAN.c: 1122: ptr++;
 16655                           
 16656                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 16657  003518  D814               	call	PL32	;call to abstracted procedure
 16658  00351A  2AD9               	incf	fsr2l,f,c
 16659  00351C  6ADA               	clrf	fsr2h,c
 16660  00351E  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16661  003522  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16662  003526  CFDF FFE7          	movff	indf2,indf1
 16663                           
 16664                           ;ECAN.c: 1124: ptr++;
 16665  00352A  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16666  00352C  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16667                           
 16668                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 16669  00352E  5022               	movf	__CANIDToRegs@Value,w,c
 16670  003530  6ED9               	movwf	fsr2l,c
 16671  003532  6ADA               	clrf	fsr2h,c
 16672  003534  C019  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 16673  003538  C01A  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 16674  00353C  CFDF FFE7          	movff	indf2,indf1
 16675  003540                     l1388:
 16676  003540  0012               	return	
 16677  003542                     __end_of__CANIDToRegs:
 16678                           	opt stack 0
 16679  003542                     PL32:
 16680                           	opt stack 25
 16681  003542  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16682  003546  5020               	movf	??__CANIDToRegs,w,c
 16683  003548  12DF               	iorwf	indf2,f,c
 16684  00354A  4A19               	infsnz	__CANIDToRegs@ptr,f,c
 16685  00354C  2A1A               	incf	__CANIDToRegs@ptr+1,f,c
 16686  00354E  5022               	movf	__CANIDToRegs@Value,w,c
 16687  003550  6ED9               	movwf	fsr2l,c
 16688  003552  6ADA               	clrf	fsr2h,c
 16689  003554  0012               	return	
 16690  003556                     __end_ofPL32:
 16691                           	opt stack 0
 16692  003556                     PL48:
 16693                           	opt stack 25
 16694  003556  6ED9               	movwf	fsr2l,c
 16695  003558  6ADA               	clrf	fsr2h,c
 16696  00355A  0E02               	movlw	2
 16697  00355C  26D9               	addwf	fsr2l,f,c
 16698  00355E  6ADA               	clrf	fsr2h,c
 16699  003560  50DF               	movf	indf2,w,c
 16700  003562  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16701  003564  0012               	return	
 16702  003566                     __end_ofPL48:
 16703                           	opt stack 0
 16704  003566                     PL54:
 16705                           	opt stack 25
 16706  003566  C019  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 16707  00356A  C01A  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 16708  00356E  6EDF               	movwf	indf2,c
 16709  003570  5022               	movf	__CANIDToRegs@Value,w,c
 16710  003572  6ED9               	movwf	fsr2l,c
 16711  003574  6ADA               	clrf	fsr2h,c
 16712  003576  0012               	return	
 16713  003578                     __end_ofPL54:
 16714                           	opt stack 0
 16715  003578                     PL64:
 16716                           	opt stack 25
 16717  003578  26D9               	addwf	fsr2l,f,c
 16718  00357A  6ADA               	clrf	fsr2h,c
 16719  00357C  50DF               	movf	indf2,w,c
 16720  00357E  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16721  003580  90D8               	bcf	status,0,c
 16722  003582  3620               	rlcf	??__CANIDToRegs,f,c
 16723  003584  90D8               	bcf	status,0,c
 16724  003586  3620               	rlcf	??__CANIDToRegs,f,c
 16725  003588  90D8               	bcf	status,0,c
 16726  00358A  0012               	return	
 16727  00358C                     __end_ofPL64:
 16728                           	opt stack 0
 16729  00358C                     PL94:
 16730                           	opt stack 25
 16731  00358C  50DF               	movf	indf2,w,c
 16732  00358E  6E20               	movwf	??__CANIDToRegs& (0+255),c
 16733  003590  0E05               	movlw	5
 16734  003592  6E21               	movwf	(??__CANIDToRegs+1)& (0+255),c
 16735  003594  0C05               	retlw	5
 16736  003596                     __end_ofPL94:
 16737                           	opt stack 0
 16738                           tblptru	equ	0xFF8
 16739                           tblptrh	equ	0xFF7
 16740                           tblptrl	equ	0xFF6
 16741                           tablat	equ	0xFF5
 16742                           prodh	equ	0xFF4
 16743                           prodl	equ	0xFF3
 16744                           intcon	equ	0xFF2
 16745                           indf0	equ	0xFEF
 16746                           postinc0	equ	0xFEE
 16747                           fsr0h	equ	0xFEA
 16748                           fsr0l	equ	0xFE9
 16749                           wreg	equ	0xFE8
 16750                           indf1	equ	0xFE7
 16751                           postinc1	equ	0xFE6
 16752                           postdec1	equ	0xFE5
 16753                           fsr1h	equ	0xFE2
 16754                           fsr1l	equ	0xFE1
 16755                           indf2	equ	0xFDF
 16756                           postinc2	equ	0xFDE
 16757                           postdec2	equ	0xFDD
 16758                           plusw2	equ	0xFDB
 16759                           fsr2h	equ	0xFDA
 16760                           fsr2l	equ	0xFD9
 16761                           status	equ	0xFD8
 16762                           
 16763 ;; *************** function _memset *****************
 16764 ;; Defined at:
 16765 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 16766 ;; Parameters:    Size  Location     Type
 16767 ;;  p1              2   24[COMRAM] PTR void 
 16768 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16769 ;;  c               2   26[COMRAM] int 
 16770 ;;  n               2   28[COMRAM] unsigned int 
 16771 ;; Auto vars:     Size  Location     Type
 16772 ;;  p               2   30[COMRAM] PTR unsigned char 
 16773 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 16774 ;; Return value:  Size  Location     Type
 16775 ;;                  2   24[COMRAM] PTR void 
 16776 ;; Registers used:
 16777 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16778 ;; Tracked objects:
 16779 ;;		On entry : C/1
 16780 ;;		On exit  : 0/0
 16781 ;;		Unchanged: 0/0
 16782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16783 ;;      Params:         6       0       0       0       0       0       0
 16784 ;;      Locals:         2       0       0       0       0       0       0
 16785 ;;      Temps:          0       0       0       0       0       0       0
 16786 ;;      Totals:         8       0       0       0       0       0       0
 16787 ;;Total ram usage:        8 bytes
 16788 ;; Hardware stack levels used:    1
 16789 ;; Hardware stack levels required when called:    2
 16790 ;; This function calls:
 16791 ;;		Nothing
 16792 ;; This function is called by:
 16793 ;;		_doModeVerbose
 16794 ;;		_doModeSLCAN
 16795 ;;		_printGUID
 16796 ;;		_printMDF
 16797 ;;		_printNodeFirmwareVersion
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           	psect	text35
 16802  005064                     __ptext35:
 16803                           	opt stack 0
 16804  005064                     _memset:
 16805                           	opt stack 27
 16806                           
 16807                           ;incstack = 0
 16808                           ;incstack = 0
 16809  005064  C019  F01F         	movff	memset@p1,memset@p
 16810  005068  C01A  F020         	movff	memset@p1+1,memset@p+1
 16811  00506C  D008               	goto	l10707
 16812  00506E                     l10703:
 16813  00506E  C01F  FFD9         	movff	memset@p,fsr2l
 16814  005072  C020  FFDA         	movff	memset@p+1,fsr2h
 16815  005076  C01B  FFDF         	movff	memset@c,indf2
 16816  00507A  4A1F               	infsnz	memset@p,f,c
 16817  00507C  2A20               	incf	memset@p+1,f,c
 16818  00507E                     l10707:
 16819  00507E  061D               	decf	memset@n,f,c
 16820  005080  A0D8               	btfss	status,0,c
 16821  005082  061E               	decf	memset@n+1,f,c
 16822  005084  281D               	incf	memset@n& (0+255),w,c
 16823  005086  B4D8               	btfsc	status,2,c
 16824  005088  281E               	incf	(memset@n+1)& (0+255),w,c
 16825  00508A  B4D8               	btfsc	status,2,c
 16826  00508C  0012               	return	
 16827  00508E  D7EF               	goto	l10703
 16828  005090                     __end_of_memset:
 16829                           	opt stack 0
 16830                           tblptru	equ	0xFF8
 16831                           tblptrh	equ	0xFF7
 16832                           tblptrl	equ	0xFF6
 16833                           tablat	equ	0xFF5
 16834                           prodh	equ	0xFF4
 16835                           prodl	equ	0xFF3
 16836                           intcon	equ	0xFF2
 16837                           indf0	equ	0xFEF
 16838                           postinc0	equ	0xFEE
 16839                           fsr0h	equ	0xFEA
 16840                           fsr0l	equ	0xFE9
 16841                           wreg	equ	0xFE8
 16842                           indf1	equ	0xFE7
 16843                           postinc1	equ	0xFE6
 16844                           postdec1	equ	0xFE5
 16845                           fsr1h	equ	0xFE2
 16846                           fsr1l	equ	0xFE1
 16847                           indf2	equ	0xFDF
 16848                           postinc2	equ	0xFDE
 16849                           postdec2	equ	0xFDD
 16850                           plusw2	equ	0xFDB
 16851                           fsr2h	equ	0xFDA
 16852                           fsr2l	equ	0xFD9
 16853                           status	equ	0xFD8
 16854                           
 16855 ;; *************** function _printHelp *****************
 16856 ;; Defined at:
 16857 ;;		line 2275 in file "main.c"
 16858 ;; Parameters:    Size  Location     Type
 16859 ;;		None
 16860 ;; Auto vars:     Size  Location     Type
 16861 ;;		None
 16862 ;; Return value:  Size  Location     Type
 16863 ;;		None               void
 16864 ;; Registers used:
 16865 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16866 ;; Tracked objects:
 16867 ;;		On entry : F/0
 16868 ;;		On exit  : 0/0
 16869 ;;		Unchanged: 0/0
 16870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16871 ;;      Params:         0       0       0       0       0       0       0
 16872 ;;      Locals:         0       0       0       0       0       0       0
 16873 ;;      Temps:          0       0       0       0       0       0       0
 16874 ;;      Totals:         0       0       0       0       0       0       0
 16875 ;;Total ram usage:        0 bytes
 16876 ;; Hardware stack levels used:    1
 16877 ;; Hardware stack levels required when called:    4
 16878 ;; This function calls:
 16879 ;;		_putsUSART
 16880 ;; This function is called by:
 16881 ;;		_doModeVerbose
 16882 ;; This function uses a non-reentrant model
 16883 ;;
 16884                           
 16885                           	psect	text36
 16886  002B5E                     __ptext36:
 16887                           	opt stack 0
 16888  002B5E                     _printHelp:
 16889                           	opt stack 25
 16890                           
 16891                           ; BSR set to: 0
 16892                           ;main.c: 2276: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 16893                           
 16894                           ;incstack = 0
 16895                           ;incstack = 0
 16896  002B5E  0E78               	movlw	high STR_197
 16897  002B60  6E1B               	movwf	?_putsUSART+1,c
 16898  002B62  0E6B               	movlw	low STR_197
 16899  002B64  6E1A               	movwf	?_putsUSART,c
 16900  002B66  ECC1  F025         	call	_putsUSART	;wreg free
 16901                           
 16902                           ;main.c: 2277: putsUSART((char *) "------------------------------------\r\n");
 16903  002B6A  0E71               	movlw	high (STR_229+28)
 16904  002B6C  6E1B               	movwf	?_putsUSART+1,c
 16905  002B6E  0E97               	movlw	low (STR_229+28)
 16906  002B70  6E1A               	movwf	?_putsUSART,c
 16907  002B72  ECC1  F025         	call	_putsUSART	;wreg free
 16908                           
 16909                           ;main.c: 2278: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 16910  002B76  0E7B               	movlw	high STR_199
 16911  002B78  6E1B               	movwf	?_putsUSART+1,c
 16912  002B7A  0E63               	movlw	low STR_199
 16913  002B7C  6E1A               	movwf	?_putsUSART,c
 16914  002B7E  ECC1  F025         	call	_putsUSART	;wreg free
 16915                           
 16916                           ;main.c: 2279: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 16917  002B82  0E76               	movlw	high STR_200
 16918  002B84  6E1B               	movwf	?_putsUSART+1,c
 16919  002B86  0EFA               	movlw	low STR_200
 16920  002B88  6E1A               	movwf	?_putsUSART,c
 16921  002B8A  ECC1  F025         	call	_putsUSART	;wreg free
 16922                           
 16923                           ;main.c: 2280: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 16924  002B8E  0E76               	movlw	high STR_201
 16925  002B90  6E1B               	movwf	?_putsUSART+1,c
 16926  002B92  0EA0               	movlw	low STR_201
 16927  002B94  6E1A               	movwf	?_putsUSART,c
 16928  002B96  ECC1  F025         	call	_putsUSART	;wreg free
 16929                           
 16930                           ;main.c: 2281: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 16931  002B9A  0E74               	movlw	high STR_202
 16932  002B9C  6E1B               	movwf	?_putsUSART+1,c
 16933  002B9E  0EE9               	movlw	low STR_202
 16934  002BA0  6E1A               	movwf	?_putsUSART,c
 16935  002BA2  ECC1  F025         	call	_putsUSART	;wreg free
 16936                           
 16937                           ;main.c: 2282: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 16938  002BA6  0E75               	movlw	high STR_203
 16939  002BA8  6E1B               	movwf	?_putsUSART+1,c
 16940  002BAA  0E4E               	movlw	low STR_203
 16941  002BAC  6E1A               	movwf	?_putsUSART,c
 16942  002BAE  ECC1  F025         	call	_putsUSART	;wreg free
 16943                           
 16944                           ;main.c: 2283: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 16945  002BB2  0E7B               	movlw	high STR_204
 16946  002BB4  6E1B               	movwf	?_putsUSART+1,c
 16947  002BB6  0E0B               	movlw	low STR_204
 16948  002BB8  6E1A               	movwf	?_putsUSART,c
 16949  002BBA  ECC1  F025         	call	_putsUSART	;wreg free
 16950                           
 16951                           ;main.c: 2284: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 16952  002BBE  0E75               	movlw	high STR_205
 16953  002BC0  6E1B               	movwf	?_putsUSART+1,c
 16954  002BC2  0E80               	movlw	low STR_205
 16955  002BC4  6E1A               	movwf	?_putsUSART,c
 16956  002BC6  ECC1  F025         	call	_putsUSART	;wreg free
 16957                           
 16958                           ;main.c: 2285: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 16959  002BCA  0E76               	movlw	high STR_206
 16960  002BCC  6E1B               	movwf	?_putsUSART+1,c
 16961  002BCE  0ECE               	movlw	low STR_206
 16962  002BD0  6E1A               	movwf	?_putsUSART,c
 16963  002BD2  ECC1  F025         	call	_putsUSART	;wreg free
 16964                           
 16965                           ;main.c: 2286: putsUSART((char *) "TX - Send CAN frame .\r\n");
 16966  002BD6  0E7C               	movlw	high STR_207
 16967  002BD8  6E1B               	movwf	?_putsUSART+1,c
 16968  002BDA  0E00               	movlw	low STR_207
 16969  002BDC  6E1A               	movwf	?_putsUSART,c
 16970  002BDE  ECC1  F025         	call	_putsUSART	;wreg free
 16971                           
 16972                           ;main.c: 2287: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 16973  002BE2  0E73               	movlw	high STR_208
 16974  002BE4  6E1B               	movwf	?_putsUSART+1,c
 16975  002BE6  0E37               	movlw	low STR_208
 16976  002BE8  6E1A               	movwf	?_putsUSART,c
 16977  002BEA  ECC1  F025         	call	_putsUSART	;wreg free
 16978                           
 16979                           ;main.c: 2288: putsUSART((char *) "RX - Read CAN frame.\r\n");
 16980  002BEE  0E7C               	movlw	high STR_209
 16981  002BF0  6E1B               	movwf	?_putsUSART+1,c
 16982  002BF2  0EC0               	movlw	low STR_209
 16983  002BF4  6E1A               	movwf	?_putsUSART,c
 16984  002BF6  ECC1  F025         	call	_putsUSART	;wreg free
 16985                           
 16986                           ;main.c: 2289: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 16987  002BFA  0E7A               	movlw	high STR_210
 16988  002BFC  6E1B               	movwf	?_putsUSART+1,c
 16989  002BFE  0E27               	movlw	low STR_210
 16990  002C00  6E1A               	movwf	?_putsUSART,c
 16991  002C02  ECC1  F025         	call	_putsUSART	;wreg free
 16992                           
 16993                           ;main.c: 2290: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 16994  002C06  0E78               	movlw	high STR_211
 16995  002C08  6E1B               	movwf	?_putsUSART+1,c
 16996  002C0A  0E44               	movlw	low STR_211
 16997  002C0C  6E1A               	movwf	?_putsUSART,c
 16998  002C0E  ECC1  F025         	call	_putsUSART	;wreg free
 16999                           
 17000                           ;main.c: 2291: putsUSART((char *) "HELP - Display this help information.\r\n");
 17001  002C12  0E77               	movlw	high STR_212
 17002  002C14  6E1B               	movwf	?_putsUSART+1,c
 17003  002C16  0EA5               	movlw	low STR_212
 17004  002C18  6E1A               	movwf	?_putsUSART,c
 17005  002C1A  ECC1  F025         	call	_putsUSART	;wreg free
 17006                           
 17007                           ;main.c: 2292: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 17008  002C1E  0E76               	movlw	high STR_213
 17009  002C20  6E1B               	movwf	?_putsUSART+1,c
 17010  002C22  0E71               	movlw	low STR_213
 17011  002C24  6E1A               	movwf	?_putsUSART,c
 17012  002C26  ECC1  F025         	call	_putsUSART	;wreg free
 17013                           
 17014                           ;main.c: 2293: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 17015  002C2A  0E71               	movlw	high STR_214
 17016  002C2C  6E1B               	movwf	?_putsUSART+1,c
 17017  002C2E  0E36               	movlw	low STR_214
 17018  002C30  6E1A               	movwf	?_putsUSART,c
 17019  002C32  ECC1  F025         	call	_putsUSART	;wreg free
 17020                           
 17021                           ;main.c: 2294: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 17022  002C36  0E72               	movlw	high STR_215
 17023  002C38  6E1B               	movwf	?_putsUSART+1,c
 17024  002C3A  0E01               	movlw	low STR_215
 17025  002C3C  6E1A               	movwf	?_putsUSART,c
 17026  002C3E  ECC1  F025         	call	_putsUSART	;wreg free
 17027                           
 17028                           ;main.c: 2295: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 17029  002C42  0E70               	movlw	high STR_216
 17030  002C44  6E1B               	movwf	?_putsUSART+1,c
 17031  002C46  0EA2               	movlw	low STR_216
 17032  002C48  6E1A               	movwf	?_putsUSART,c
 17033  002C4A  ECC1  F025         	call	_putsUSART	;wreg free
 17034                           
 17035                           ;main.c: 2296: putsUSART((char *) "FILTER - Set filter .\r\n");
 17036  002C4E  0E7C               	movlw	high STR_217
 17037  002C50  6E1B               	movwf	?_putsUSART+1,c
 17038  002C52  0E18               	movlw	low STR_217
 17039  002C54  6E1A               	movwf	?_putsUSART,c
 17040  002C56  ECC1  F025         	call	_putsUSART	;wreg free
 17041                           
 17042                           ;main.c: 2297: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 17043  002C5A  0E70               	movlw	high STR_218
 17044  002C5C  6E1B               	movwf	?_putsUSART+1,c
 17045  002C5E  0E54               	movlw	low STR_218
 17046  002C60  6E1A               	movwf	?_putsUSART,c
 17047  002C62  ECC1  F025         	call	_putsUSART	;wreg free
 17048                           
 17049                           ;main.c: 2298: putsUSART((char *) "MASK - Set mask .\r\n");
 17050  002C66  0E7D               	movlw	high STR_219
 17051  002C68  6E1B               	movwf	?_putsUSART+1,c
 17052  002C6A  0E46               	movlw	low STR_219
 17053  002C6C  6E1A               	movwf	?_putsUSART,c
 17054  002C6E  ECC1  F025         	call	_putsUSART	;wreg free
 17055                           
 17056                           ;main.c: 2299: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 17057  002C72  0E70               	movlw	high STR_220
 17058  002C74  6E1B               	movwf	?_putsUSART+1,c
 17059  002C76  0EEF               	movlw	low STR_220
 17060  002C78  6E1A               	movwf	?_putsUSART,c
 17061  002C7A  ECC1  F025         	call	_putsUSART	;wreg free
 17062                           
 17063                           ;main.c: 2300: putsUSART((char *) "SET - Persistent functionality.\r\n");
 17064  002C7E  0E79               	movlw	high STR_221
 17065  002C80  6E1B               	movwf	?_putsUSART+1,c
 17066  002C82  0EE3               	movlw	low STR_221
 17067  002C84  6E1A               	movwf	?_putsUSART,c
 17068  002C86  ECC1  F025         	call	_putsUSART	;wreg free
 17069                           
 17070                           ;main.c: 2301: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 17071  002C8A  0E76               	movlw	high STR_222
 17072  002C8C  6E1B               	movwf	?_putsUSART+1,c
 17073  002C8E  0E42               	movlw	low STR_222
 17074  002C90  6E1A               	movwf	?_putsUSART,c
 17075  002C92  ECC1  F025         	call	_putsUSART	;wreg free
 17076                           
 17077                           ;main.c: 2302: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 17078  002C96  0E76               	movlw	high STR_223
 17079  002C98  6E1B               	movwf	?_putsUSART+1,c
 17080  002C9A  0E13               	movlw	low STR_223
 17081  002C9C  6E1A               	movwf	?_putsUSART,c
 17082  002C9E  ECC1  F025         	call	_putsUSART	;wreg free
 17083                           
 17084                           ;main.c: 2303: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 17085  002CA2  0E71               	movlw	high STR_224
 17086  002CA4  6E1B               	movwf	?_putsUSART+1,c
 17087  002CA6  0EBE               	movlw	low STR_224
 17088  002CA8  6E1A               	movwf	?_putsUSART,c
 17089  002CAA  ECC1  F025         	call	_putsUSART	;wreg free
 17090                           
 17091                           ;main.c: 2304: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 17092  002CAE  0E75               	movlw	high STR_225
 17093  002CB0  6E1B               	movwf	?_putsUSART+1,c
 17094  002CB2  0EB2               	movlw	low STR_225
 17095  002CB4  6E1A               	movwf	?_putsUSART,c
 17096  002CB6  ECC1  F025         	call	_putsUSART	;wreg free
 17097                           
 17098                           ;main.c: 2305: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 17099  002CBA  0E73               	movlw	high STR_226
 17100  002CBC  6E1B               	movwf	?_putsUSART+1,c
 17101  002CBE  0EA6               	movlw	low STR_226
 17102  002CC0  6E1A               	movwf	?_putsUSART,c
 17103  002CC2  ECC1  F025         	call	_putsUSART	;wreg free
 17104                           
 17105                           ;main.c: 2306: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 17106  002CC6  0E72               	movlw	high STR_227
 17107  002CC8  6E1B               	movwf	?_putsUSART+1,c
 17108  002CCA  0E86               	movlw	low STR_227
 17109  002CCC  6E1A               	movwf	?_putsUSART,c
 17110  002CCE  ECC1  F025         	call	_putsUSART	;wreg free
 17111                           
 17112                           ;main.c: 2307: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 17113  002CD2  0E78               	movlw	high STR_228
 17114  002CD4  6E1B               	movwf	?_putsUSART+1,c
 17115  002CD6  0EE0               	movlw	low STR_228
 17116  002CD8  6E1A               	movwf	?_putsUSART,c
 17117  002CDA  EFC1  F025         	goto	_putsUSART	;wreg free
 17118  002CDE                     __end_of_printHelp:
 17119                           	opt stack 0
 17120                           tblptru	equ	0xFF8
 17121                           tblptrh	equ	0xFF7
 17122                           tblptrl	equ	0xFF6
 17123                           tablat	equ	0xFF5
 17124                           prodh	equ	0xFF4
 17125                           prodl	equ	0xFF3
 17126                           intcon	equ	0xFF2
 17127                           indf0	equ	0xFEF
 17128                           postinc0	equ	0xFEE
 17129                           fsr0h	equ	0xFEA
 17130                           fsr0l	equ	0xFE9
 17131                           wreg	equ	0xFE8
 17132                           indf1	equ	0xFE7
 17133                           postinc1	equ	0xFE6
 17134                           postdec1	equ	0xFE5
 17135                           fsr1h	equ	0xFE2
 17136                           fsr1l	equ	0xFE1
 17137                           indf2	equ	0xFDF
 17138                           postinc2	equ	0xFDE
 17139                           postdec2	equ	0xFDD
 17140                           plusw2	equ	0xFDB
 17141                           fsr2h	equ	0xFDA
 17142                           fsr2l	equ	0xFD9
 17143                           status	equ	0xFD8
 17144                           
 17145 ;; *************** function _printErrors *****************
 17146 ;; Defined at:
 17147 ;;		line 2204 in file "main.c"
 17148 ;; Parameters:    Size  Location     Type
 17149 ;;		None
 17150 ;; Auto vars:     Size  Location     Type
 17151 ;;		None
 17152 ;; Return value:  Size  Location     Type
 17153 ;;		None               void
 17154 ;; Registers used:
 17155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17156 ;; Tracked objects:
 17157 ;;		On entry : F/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17161 ;;      Params:         0       0       0       0       0       0       0
 17162 ;;      Locals:         0      12       0       0       0       0       0
 17163 ;;      Temps:          0       0       0       0       0       0       0
 17164 ;;      Totals:         0      12       0       0       0       0       0
 17165 ;;Total ram usage:       12 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    4
 17168 ;; This function calls:
 17169 ;;		_putsUSART
 17170 ;;		_sprintf
 17171 ;; This function is called by:
 17172 ;;		_doModeVerbose
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           	psect	text37
 17177  001F4C                     __ptext37:
 17178                           	opt stack 0
 17179  001F4C                     _printErrors:
 17180                           	opt stack 25
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;main.c: 2205: putsUSART((char *) "CAN Receive overruns: ");
 17184                           
 17185                           ;incstack = 0
 17186                           ;incstack = 0
 17187  001F4C  0E7C               	movlw	high STR_167
 17188  001F4E  6E1B               	movwf	?_putsUSART+1,c
 17189  001F50  0ED7               	movlw	low STR_167
 17190  001F52  6E1A               	movwf	?_putsUSART,c
 17191  001F54  ECC1  F025         	call	_putsUSART	;wreg free
 17192                           
 17193                           ;main.c: 2206: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns );
 17194  001F58  0100               	movlb	0	; () banked
 17195  001F5A  67D3               	tstfsz	_bHex& (0+255),b
 17196  001F5C  D004               	goto	l13435
 17197                           
 17198                           ; BSR set to: 0
 17199  001F5E  0E7F               	movlw	high STR_153
 17200  001F60  6F7C               	movwf	(_printErrors$1333+1)& (0+255),b
 17201  001F62  0EE0               	movlw	low STR_153
 17202  001F64  D003               	goto	L15
 17203  001F66                     l13435:
 17204                           
 17205                           ; BSR set to: 0
 17206  001F66  0E7F               	movlw	high STR_168
 17207  001F68  6F7C               	movwf	(_printErrors$1333+1)& (0+255),b
 17208  001F6A  0E15               	movlw	low STR_168
 17209  001F6C                     L15:
 17210  001F6C  6F7B               	movwf	_printErrors$1333& (0+255),b
 17211                           
 17212                           ; BSR set to: 0
 17213  001F6E  0E01               	movlw	high _wrkbuf
 17214  001F70  0100               	movlb	0	; () banked
 17215  001F72  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17216  001F74  0E70               	movlw	low _wrkbuf
 17217  001F76  6F60               	movwf	?_sprintf& (0+255),b
 17218  001F78  C07B  F062         	movff	_printErrors$1333,?_sprintf+2
 17219  001F7C  C07C  F063         	movff	_printErrors$1333+1,?_sprintf+3
 17220  001F80  C100  F064         	movff	_can_receiveOverruns,?_sprintf+4
 17221  001F84  C101  F065         	movff	_can_receiveOverruns+1,?_sprintf+5
 17222  001F88  C102  F066         	movff	_can_receiveOverruns+2,?_sprintf+6
 17223  001F8C  C103  F067         	movff	_can_receiveOverruns+3,?_sprintf+7
 17224  001F90  EC33  F00A         	call	_sprintf	;wreg free
 17225                           
 17226                           ; BSR set to: 0
 17227                           ;main.c: 2207: putsUSART(wrkbuf);
 17228  001F94  0101               	movlb	1	; () banked
 17229  001F96  0E01               	movlw	high _wrkbuf
 17230  001F98  6E1B               	movwf	?_putsUSART+1,c
 17231  001F9A  0E70               	movlw	low _wrkbuf
 17232  001F9C  6E1A               	movwf	?_putsUSART,c
 17233  001F9E  ECC1  F025         	call	_putsUSART	;wreg free
 17234                           
 17235                           ;main.c: 2208: putsUSART((char *) "\r\n");
 17236  001FA2  0E74               	movlw	high (STR_188+50)
 17237  001FA4  6E1B               	movwf	?_putsUSART+1,c
 17238  001FA6  0EB2               	movlw	low (STR_188+50)
 17239  001FA8  6E1A               	movwf	?_putsUSART,c
 17240  001FAA  ECC1  F025         	call	_putsUSART	;wreg free
 17241                           
 17242                           ;main.c: 2210: putsUSART((char *) "CAN Transmit overruns: ");
 17243  001FAE  0E7C               	movlw	high STR_171
 17244  001FB0  6E1B               	movwf	?_putsUSART+1,c
 17245  001FB2  0EA8               	movlw	low STR_171
 17246  001FB4  6E1A               	movwf	?_putsUSART,c
 17247  001FB6  ECC1  F025         	call	_putsUSART	;wreg free
 17248                           
 17249                           ;main.c: 2211: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns );
 17250  001FBA  0100               	movlb	0	; () banked
 17251  001FBC  67D3               	tstfsz	_bHex& (0+255),b
 17252  001FBE  D004               	goto	l13449
 17253                           
 17254                           ; BSR set to: 0
 17255  001FC0  0E7F               	movlw	high STR_153
 17256  001FC2  6F7E               	movwf	(_printErrors$1339+1)& (0+255),b
 17257  001FC4  0EE0               	movlw	low STR_153
 17258  001FC6  D003               	goto	L16
 17259  001FC8                     l13449:
 17260                           
 17261                           ; BSR set to: 0
 17262  001FC8  0E7F               	movlw	high STR_168
 17263  001FCA  6F7E               	movwf	(_printErrors$1339+1)& (0+255),b
 17264  001FCC  0E15               	movlw	low STR_168
 17265  001FCE                     L16:
 17266  001FCE  6F7D               	movwf	_printErrors$1339& (0+255),b
 17267                           
 17268                           ; BSR set to: 0
 17269  001FD0  0E01               	movlw	high _wrkbuf
 17270  001FD2  0100               	movlb	0	; () banked
 17271  001FD4  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17272  001FD6  0E70               	movlw	low _wrkbuf
 17273  001FD8  6F60               	movwf	?_sprintf& (0+255),b
 17274  001FDA  C07D  F062         	movff	_printErrors$1339,?_sprintf+2
 17275  001FDE  C07E  F063         	movff	_printErrors$1339+1,?_sprintf+3
 17276  001FE2  C104  F064         	movff	_can_transmitOverruns,?_sprintf+4
 17277  001FE6  C105  F065         	movff	_can_transmitOverruns+1,?_sprintf+5
 17278  001FEA  C106  F066         	movff	_can_transmitOverruns+2,?_sprintf+6
 17279  001FEE  C107  F067         	movff	_can_transmitOverruns+3,?_sprintf+7
 17280  001FF2  EC33  F00A         	call	_sprintf	;wreg free
 17281                           
 17282                           ; BSR set to: 0
 17283                           ;main.c: 2212: putsUSART(wrkbuf);
 17284  001FF6  0101               	movlb	1	; () banked
 17285  001FF8  0E01               	movlw	high _wrkbuf
 17286  001FFA  6E1B               	movwf	?_putsUSART+1,c
 17287  001FFC  0E70               	movlw	low _wrkbuf
 17288  001FFE  6E1A               	movwf	?_putsUSART,c
 17289  002000  ECC1  F025         	call	_putsUSART	;wreg free
 17290                           
 17291                           ;main.c: 2213: putsUSART((char *) "\r\n");
 17292  002004  0E74               	movlw	high (STR_188+50)
 17293  002006  6E1B               	movwf	?_putsUSART+1,c
 17294  002008  0EB2               	movlw	low (STR_188+50)
 17295  00200A  6E1A               	movwf	?_putsUSART,c
 17296  00200C  ECC1  F025         	call	_putsUSART	;wreg free
 17297                           
 17298                           ;main.c: 2215: putsUSART((char *) "UART Receive overruns: ");
 17299  002010  0E7C               	movlw	high STR_175
 17300  002012  6E1B               	movwf	?_putsUSART+1,c
 17301  002014  0E90               	movlw	low STR_175
 17302  002016  6E1A               	movwf	?_putsUSART,c
 17303  002018  ECC1  F025         	call	_putsUSART	;wreg free
 17304                           
 17305                           ;main.c: 2216: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns );
 17306  00201C  0100               	movlb	0	; () banked
 17307  00201E  67D3               	tstfsz	_bHex& (0+255),b
 17308  002020  D004               	goto	l13463
 17309                           
 17310                           ; BSR set to: 0
 17311  002022  0E7F               	movlw	high STR_153
 17312  002024  6F80               	movwf	(_printErrors$1345+1)& (0+255),b
 17313  002026  0EE0               	movlw	low STR_153
 17314  002028  D003               	goto	L17
 17315  00202A                     l13463:
 17316                           
 17317                           ; BSR set to: 0
 17318  00202A  0E7F               	movlw	high STR_168
 17319  00202C  6F80               	movwf	(_printErrors$1345+1)& (0+255),b
 17320  00202E  0E15               	movlw	low STR_168
 17321  002030                     L17:
 17322  002030  6F7F               	movwf	_printErrors$1345& (0+255),b
 17323                           
 17324                           ; BSR set to: 0
 17325  002032  0E01               	movlw	high _wrkbuf
 17326  002034  0100               	movlb	0	; () banked
 17327  002036  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17328  002038  0E70               	movlw	low _wrkbuf
 17329  00203A  6F60               	movwf	?_sprintf& (0+255),b
 17330  00203C  C07F  F062         	movff	_printErrors$1345,?_sprintf+2
 17331  002040  C080  F063         	movff	_printErrors$1345+1,?_sprintf+3
 17332  002044  C118  F064         	movff	_uart_receiveOverruns,?_sprintf+4
 17333  002048  C119  F065         	movff	_uart_receiveOverruns+1,?_sprintf+5
 17334  00204C  C11A  F066         	movff	_uart_receiveOverruns+2,?_sprintf+6
 17335  002050  C11B  F067         	movff	_uart_receiveOverruns+3,?_sprintf+7
 17336  002054  EC33  F00A         	call	_sprintf	;wreg free
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;main.c: 2217: putsUSART(wrkbuf);
 17340  002058  0101               	movlb	1	; () banked
 17341  00205A  0E01               	movlw	high _wrkbuf
 17342  00205C  6E1B               	movwf	?_putsUSART+1,c
 17343  00205E  0E70               	movlw	low _wrkbuf
 17344  002060  6E1A               	movwf	?_putsUSART,c
 17345  002062  ECC1  F025         	call	_putsUSART	;wreg free
 17346                           
 17347                           ;main.c: 2218: putsUSART((char *) "\r\n");
 17348  002066  0E74               	movlw	high (STR_188+50)
 17349  002068  6E1B               	movwf	?_putsUSART+1,c
 17350  00206A  0EB2               	movlw	low (STR_188+50)
 17351  00206C  6E1A               	movwf	?_putsUSART,c
 17352  00206E  ECC1  F025         	call	_putsUSART	;wreg free
 17353                           
 17354                           ;main.c: 2220: putsUSART((char *) "UART Receive overruns: ");
 17355  002072  0E7C               	movlw	high STR_175
 17356  002074  6E1B               	movwf	?_putsUSART+1,c
 17357  002076  0E90               	movlw	low STR_175
 17358  002078  6E1A               	movwf	?_putsUSART,c
 17359  00207A  ECC1  F025         	call	_putsUSART	;wreg free
 17360                           
 17361                           ;main.c: 2221: sprintf( wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns );
 17362  00207E  0100               	movlb	0	; () banked
 17363  002080  67D3               	tstfsz	_bHex& (0+255),b
 17364  002082  D004               	goto	l13477
 17365                           
 17366                           ; BSR set to: 0
 17367  002084  0E7F               	movlw	high STR_153
 17368  002086  6F82               	movwf	(_printErrors$1351+1)& (0+255),b
 17369  002088  0EE0               	movlw	low STR_153
 17370  00208A  D003               	goto	L18
 17371  00208C                     l13477:
 17372                           
 17373                           ; BSR set to: 0
 17374  00208C  0E7F               	movlw	high STR_168
 17375  00208E  6F82               	movwf	(_printErrors$1351+1)& (0+255),b
 17376  002090  0E15               	movlw	low STR_168
 17377  002092                     L18:
 17378  002092  6F81               	movwf	_printErrors$1351& (0+255),b
 17379                           
 17380                           ; BSR set to: 0
 17381  002094  0E01               	movlw	high _wrkbuf
 17382  002096  0100               	movlb	0	; () banked
 17383  002098  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17384  00209A  0E70               	movlw	low _wrkbuf
 17385  00209C  6F60               	movwf	?_sprintf& (0+255),b
 17386  00209E  C081  F062         	movff	_printErrors$1351,?_sprintf+2
 17387  0020A2  C082  F063         	movff	_printErrors$1351+1,?_sprintf+3
 17388  0020A6  C11C  F064         	movff	_uart_transmitOverruns,?_sprintf+4
 17389  0020AA  C11D  F065         	movff	_uart_transmitOverruns+1,?_sprintf+5
 17390  0020AE  C11E  F066         	movff	_uart_transmitOverruns+2,?_sprintf+6
 17391  0020B2  C11F  F067         	movff	_uart_transmitOverruns+3,?_sprintf+7
 17392  0020B6  EC33  F00A         	call	_sprintf	;wreg free
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;main.c: 2222: putsUSART(wrkbuf);
 17396  0020BA  0101               	movlb	1	; () banked
 17397  0020BC  0E01               	movlw	high _wrkbuf
 17398  0020BE  6E1B               	movwf	?_putsUSART+1,c
 17399  0020C0  0E70               	movlw	low _wrkbuf
 17400  0020C2  6E1A               	movwf	?_putsUSART,c
 17401  0020C4  ECC1  F025         	call	_putsUSART	;wreg free
 17402                           
 17403                           ;main.c: 2223: putsUSART((char *) "\r\n");
 17404  0020C8  0E74               	movlw	high (STR_188+50)
 17405  0020CA  6E1B               	movwf	?_putsUSART+1,c
 17406  0020CC  0EB2               	movlw	low (STR_188+50)
 17407  0020CE  6E1A               	movwf	?_putsUSART,c
 17408  0020D0  ECC1  F025         	call	_putsUSART	;wreg free
 17409                           
 17410                           ;main.c: 2229: putsUSART((char *) "Transmit Error Counter: ");
 17411  0020D4  0E7B               	movlw	high STR_183
 17412  0020D6  6E1B               	movwf	?_putsUSART+1,c
 17413  0020D8  0EE7               	movlw	low STR_183
 17414  0020DA  6E1A               	movwf	?_putsUSART,c
 17415  0020DC  ECC1  F025         	call	_putsUSART	;wreg free
 17416                           
 17417                           ;main.c: 2230: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT );
 17418  0020E0  0100               	movlb	0	; () banked
 17419  0020E2  67D3               	tstfsz	_bHex& (0+255),b
 17420  0020E4  D004               	goto	l13491
 17421                           
 17422                           ; BSR set to: 0
 17423  0020E6  0E7F               	movlw	high STR_53
 17424  0020E8  6F84               	movwf	(_printErrors$1357+1)& (0+255),b
 17425  0020EA  0EED               	movlw	low STR_53
 17426  0020EC  D003               	goto	L19
 17427  0020EE                     l13491:
 17428                           
 17429                           ; BSR set to: 0
 17430  0020EE  0E7F               	movlw	high STR_52
 17431  0020F0  6F84               	movwf	(_printErrors$1357+1)& (0+255),b
 17432  0020F2  0E64               	movlw	low STR_52
 17433  0020F4                     L19:
 17434  0020F4  6F83               	movwf	_printErrors$1357& (0+255),b
 17435                           
 17436                           ; BSR set to: 0
 17437  0020F6  0E01               	movlw	high _wrkbuf
 17438  0020F8  0100               	movlb	0	; () banked
 17439  0020FA  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17440  0020FC  0E70               	movlw	low _wrkbuf
 17441  0020FE  6F60               	movwf	?_sprintf& (0+255),b
 17442  002100  C083  F062         	movff	_printErrors$1357,?_sprintf+2
 17443  002104  C084  F063         	movff	_printErrors$1357+1,?_sprintf+3
 17444  002108  CF76 F064          	movff	3958,?_sprintf+4	;volatile
 17445  00210C  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17446  00210E  EC33  F00A         	call	_sprintf	;wreg free
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;main.c: 2231: putsUSART(wrkbuf);
 17450  002112  0101               	movlb	1	; () banked
 17451  002114  0E01               	movlw	high _wrkbuf
 17452  002116  6E1B               	movwf	?_putsUSART+1,c
 17453  002118  0E70               	movlw	low _wrkbuf
 17454  00211A  6E1A               	movwf	?_putsUSART,c
 17455  00211C  ECC1  F025         	call	_putsUSART	;wreg free
 17456                           
 17457                           ;main.c: 2232: putsUSART((char *) "\r\n");
 17458  002120  0E74               	movlw	high (STR_188+50)
 17459  002122  6E1B               	movwf	?_putsUSART+1,c
 17460  002124  0EB2               	movlw	low (STR_188+50)
 17461  002126  6E1A               	movwf	?_putsUSART,c
 17462  002128  ECC1  F025         	call	_putsUSART	;wreg free
 17463                           
 17464                           ;main.c: 2234: if ( COMSTATbits.TXWARN ) {
 17465  00212C  A474               	btfss	3956,2,c	;volatile
 17466  00212E  D006               	goto	l13503
 17467                           
 17468                           ;main.c: 2235: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 17469  002130  0E72               	movlw	high STR_187
 17470  002132  6E1B               	movwf	?_putsUSART+1,c
 17471  002134  0EC4               	movlw	low STR_187
 17472  002136  6E1A               	movwf	?_putsUSART,c
 17473  002138  ECC1  F025         	call	_putsUSART	;wreg free
 17474  00213C                     l13503:
 17475                           
 17476                           ;main.c: 2236: }
 17477                           ;main.c: 2238: if ( COMSTATbits.TXBO ) {
 17478  00213C  AA74               	btfss	3956,5,c	;volatile
 17479  00213E  D006               	goto	l13507
 17480                           
 17481                           ;main.c: 2239: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 17482  002140  0E74               	movlw	high STR_188
 17483  002142  6E1B               	movwf	?_putsUSART+1,c
 17484  002144  0E80               	movlw	low STR_188
 17485  002146  6E1A               	movwf	?_putsUSART,c
 17486  002148  ECC1  F025         	call	_putsUSART	;wreg free
 17487  00214C                     l13507:
 17488                           
 17489                           ;main.c: 2240: }
 17490                           ;main.c: 2242: if ( COMSTATbits.TXBP ) {
 17491  00214C  A874               	btfss	3956,4,c	;volatile
 17492  00214E  D006               	goto	l1058
 17493                           
 17494                           ;main.c: 2243: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 17495  002150  0E72               	movlw	high STR_189
 17496  002152  6E1B               	movwf	?_putsUSART+1,c
 17497  002154  0EFE               	movlw	low STR_189
 17498  002156  6E1A               	movwf	?_putsUSART,c
 17499  002158  ECC1  F025         	call	_putsUSART	;wreg free
 17500  00215C                     l1058:
 17501                           
 17502                           ;main.c: 2244: }
 17503                           ;main.c: 2250: putsUSART((char *) "Receive Error Counter: ");
 17504  00215C  0E7C               	movlw	high STR_190
 17505  00215E  6E1B               	movwf	?_putsUSART+1,c
 17506  002160  0E78               	movlw	low STR_190
 17507  002162  6E1A               	movwf	?_putsUSART,c
 17508  002164  ECC1  F025         	call	_putsUSART	;wreg free
 17509                           
 17510                           ;main.c: 2251: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT );
 17511  002168  0100               	movlb	0	; () banked
 17512  00216A  67D3               	tstfsz	_bHex& (0+255),b
 17513  00216C  D004               	goto	l13515
 17514                           
 17515                           ; BSR set to: 0
 17516  00216E  0E7F               	movlw	high STR_53
 17517  002170  6F86               	movwf	(_printErrors$1366+1)& (0+255),b
 17518  002172  0EED               	movlw	low STR_53
 17519  002174  D003               	goto	L20
 17520  002176                     l13515:
 17521                           
 17522                           ; BSR set to: 0
 17523  002176  0E7F               	movlw	high STR_52
 17524  002178  6F86               	movwf	(_printErrors$1366+1)& (0+255),b
 17525  00217A  0E64               	movlw	low STR_52
 17526  00217C                     L20:
 17527  00217C  6F85               	movwf	_printErrors$1366& (0+255),b
 17528                           
 17529                           ; BSR set to: 0
 17530  00217E  0E01               	movlw	high _wrkbuf
 17531  002180  0100               	movlb	0	; () banked
 17532  002182  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17533  002184  0E70               	movlw	low _wrkbuf
 17534  002186  6F60               	movwf	?_sprintf& (0+255),b
 17535  002188  C085  F062         	movff	_printErrors$1366,?_sprintf+2
 17536  00218C  C086  F063         	movff	_printErrors$1366+1,?_sprintf+3
 17537  002190  CF75 F064          	movff	3957,?_sprintf+4	;volatile
 17538  002194  6B65               	clrf	(?_sprintf+5)& (0+255),b
 17539  002196  EC33  F00A         	call	_sprintf	;wreg free
 17540                           
 17541                           ; BSR set to: 0
 17542                           ;main.c: 2252: putsUSART(wrkbuf);
 17543  00219A  0101               	movlb	1	; () banked
 17544  00219C  0E01               	movlw	high _wrkbuf
 17545  00219E  6E1B               	movwf	?_putsUSART+1,c
 17546  0021A0  0E70               	movlw	low _wrkbuf
 17547  0021A2  6E1A               	movwf	?_putsUSART,c
 17548  0021A4  ECC1  F025         	call	_putsUSART	;wreg free
 17549                           
 17550                           ;main.c: 2253: putsUSART((char *) "\r\n");
 17551  0021A8  0E74               	movlw	high (STR_188+50)
 17552  0021AA  6E1B               	movwf	?_putsUSART+1,c
 17553  0021AC  0EB2               	movlw	low (STR_188+50)
 17554  0021AE  6E1A               	movwf	?_putsUSART,c
 17555  0021B0  ECC1  F025         	call	_putsUSART	;wreg free
 17556                           
 17557                           ;main.c: 2255: if ( COMSTATbits.RXWARN ) {
 17558  0021B4  A274               	btfss	3956,1,c	;volatile
 17559  0021B6  D006               	goto	l13527
 17560                           
 17561                           ;main.c: 2256: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 17562  0021B8  0E73               	movlw	high STR_194
 17563  0021BA  6E1B               	movwf	?_putsUSART+1,c
 17564  0021BC  0E6F               	movlw	low STR_194
 17565  0021BE  6E1A               	movwf	?_putsUSART,c
 17566  0021C0  ECC1  F025         	call	_putsUSART	;wreg free
 17567  0021C4                     l13527:
 17568                           
 17569                           ;main.c: 2257: }
 17570                           ;main.c: 2259: if ( COMSTATbits.RXBP ) {
 17571  0021C4  A674               	btfss	3956,3,c	;volatile
 17572  0021C6  D006               	goto	l13531
 17573                           
 17574                           ;main.c: 2260: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 17575  0021C8  0E74               	movlw	high STR_195
 17576  0021CA  6E1B               	movwf	?_putsUSART+1,c
 17577  0021CC  0E14               	movlw	low STR_195
 17578  0021CE  6E1A               	movwf	?_putsUSART,c
 17579  0021D0  ECC1  F025         	call	_putsUSART	;wreg free
 17580  0021D4                     l13531:
 17581                           
 17582                           ;main.c: 2261: }
 17583                           ;main.c: 2263: if ( COMSTATbits.EWARN ) {
 17584  0021D4  A074               	btfss	3956,0,c	;volatile
 17585  0021D6  D006               	goto	l1066
 17586                           
 17587                           ;main.c: 2264: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 17588  0021D8  0E74               	movlw	high STR_196
 17589  0021DA  6E1B               	movwf	?_putsUSART+1,c
 17590  0021DC  0EB5               	movlw	low STR_196
 17591  0021DE  6E1A               	movwf	?_putsUSART,c
 17592  0021E0  ECC1  F025         	call	_putsUSART	;wreg free
 17593  0021E4                     l1066:
 17594  0021E4  0012               	return	
 17595  0021E6                     __end_of_printErrors:
 17596                           	opt stack 0
 17597                           tblptru	equ	0xFF8
 17598                           tblptrh	equ	0xFF7
 17599                           tblptrl	equ	0xFF6
 17600                           tablat	equ	0xFF5
 17601                           prodh	equ	0xFF4
 17602                           prodl	equ	0xFF3
 17603                           intcon	equ	0xFF2
 17604                           indf0	equ	0xFEF
 17605                           postinc0	equ	0xFEE
 17606                           fsr0h	equ	0xFEA
 17607                           fsr0l	equ	0xFE9
 17608                           wreg	equ	0xFE8
 17609                           indf1	equ	0xFE7
 17610                           postinc1	equ	0xFE6
 17611                           postdec1	equ	0xFE5
 17612                           fsr1h	equ	0xFE2
 17613                           fsr1l	equ	0xFE1
 17614                           indf2	equ	0xFDF
 17615                           postinc2	equ	0xFDE
 17616                           postdec2	equ	0xFDD
 17617                           plusw2	equ	0xFDB
 17618                           fsr2h	equ	0xFDA
 17619                           fsr2l	equ	0xFD9
 17620                           status	equ	0xFD8
 17621                           
 17622 ;; *************** function _printStatistics *****************
 17623 ;; Defined at:
 17624 ;;		line 2177 in file "main.c"
 17625 ;; Parameters:    Size  Location     Type
 17626 ;;		None
 17627 ;; Auto vars:     Size  Location     Type
 17628 ;;		None
 17629 ;; Return value:  Size  Location     Type
 17630 ;;		None               void
 17631 ;; Registers used:
 17632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17633 ;; Tracked objects:
 17634 ;;		On entry : F/0
 17635 ;;		On exit  : 0/0
 17636 ;;		Unchanged: 0/0
 17637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17638 ;;      Params:         0       0       0       0       0       0       0
 17639 ;;      Locals:         0       8       0       0       0       0       0
 17640 ;;      Temps:          0       0       0       0       0       0       0
 17641 ;;      Totals:         0       8       0       0       0       0       0
 17642 ;;Total ram usage:        8 bytes
 17643 ;; Hardware stack levels used:    1
 17644 ;; Hardware stack levels required when called:    4
 17645 ;; This function calls:
 17646 ;;		_putsUSART
 17647 ;;		_sprintf
 17648 ;; This function is called by:
 17649 ;;		_doModeVerbose
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           	psect	text38
 17654  0029D6                     __ptext38:
 17655                           	opt stack 0
 17656  0029D6                     _printStatistics:
 17657                           	opt stack 25
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;main.c: 2178: putsUSART((char *) "Sent CAN frames: ");
 17661                           
 17662                           ;incstack = 0
 17663                           ;incstack = 0
 17664  0029D6  0E7E               	movlw	high STR_151
 17665  0029D8  6E1B               	movwf	?_putsUSART+1,c
 17666  0029DA  0E09               	movlw	low STR_151
 17667  0029DC  6E1A               	movwf	?_putsUSART,c
 17668  0029DE  ECC1  F025         	call	_putsUSART	;wreg free
 17669                           
 17670                           ;main.c: 2179: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames );
 17671  0029E2  0100               	movlb	0	; () banked
 17672  0029E4  67D3               	tstfsz	_bHex& (0+255),b
 17673  0029E6  D004               	goto	l13379
 17674                           
 17675                           ; BSR set to: 0
 17676  0029E8  0E7F               	movlw	high STR_153
 17677  0029EA  6F7C               	movwf	(_printStatistics$1308+1)& (0+255),b
 17678  0029EC  0EE0               	movlw	low STR_153
 17679  0029EE  D003               	goto	L21
 17680  0029F0                     l13379:
 17681                           
 17682                           ; BSR set to: 0
 17683  0029F0  0E7F               	movlw	high STR_152
 17684  0029F2  6F7C               	movwf	(_printStatistics$1308+1)& (0+255),b
 17685  0029F4  0E72               	movlw	low STR_152
 17686  0029F6                     L21:
 17687  0029F6  6F7B               	movwf	_printStatistics$1308& (0+255),b
 17688                           
 17689                           ; BSR set to: 0
 17690  0029F8  0E01               	movlw	high _wrkbuf
 17691  0029FA  0100               	movlb	0	; () banked
 17692  0029FC  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17693  0029FE  0E70               	movlw	low _wrkbuf
 17694  002A00  6F60               	movwf	?_sprintf& (0+255),b
 17695  002A02  C07B  F062         	movff	_printStatistics$1308,?_sprintf+2
 17696  002A06  C07C  F063         	movff	_printStatistics$1308+1,?_sprintf+3
 17697  002A0A  C114  F064         	movff	_cntTxFrames,?_sprintf+4
 17698  002A0E  C115  F065         	movff	_cntTxFrames+1,?_sprintf+5
 17699  002A12  C116  F066         	movff	_cntTxFrames+2,?_sprintf+6
 17700  002A16  C117  F067         	movff	_cntTxFrames+3,?_sprintf+7
 17701  002A1A  EC33  F00A         	call	_sprintf	;wreg free
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;main.c: 2180: putsUSART(wrkbuf);
 17705  002A1E  0101               	movlb	1	; () banked
 17706  002A20  0E01               	movlw	high _wrkbuf
 17707  002A22  6E1B               	movwf	?_putsUSART+1,c
 17708  002A24  0E70               	movlw	low _wrkbuf
 17709  002A26  6E1A               	movwf	?_putsUSART,c
 17710  002A28  ECC1  F025         	call	_putsUSART	;wreg free
 17711                           
 17712                           ;main.c: 2181: putsUSART((char *) "\r\n");
 17713  002A2C  0E74               	movlw	high (STR_188+50)
 17714  002A2E  6E1B               	movwf	?_putsUSART+1,c
 17715  002A30  0EB2               	movlw	low (STR_188+50)
 17716  002A32  6E1A               	movwf	?_putsUSART,c
 17717  002A34  ECC1  F025         	call	_putsUSART	;wreg free
 17718                           
 17719                           ;main.c: 2183: putsUSART((char *) "Sent CAN bytes: ");
 17720  002A38  0E7E               	movlw	high STR_155
 17721  002A3A  6E1B               	movwf	?_putsUSART+1,c
 17722  002A3C  0E3D               	movlw	low STR_155
 17723  002A3E  6E1A               	movwf	?_putsUSART,c
 17724  002A40  ECC1  F025         	call	_putsUSART	;wreg free
 17725                           
 17726                           ;main.c: 2184: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes );
 17727  002A44  0100               	movlb	0	; () banked
 17728  002A46  67D3               	tstfsz	_bHex& (0+255),b
 17729  002A48  D004               	goto	l13393
 17730                           
 17731                           ; BSR set to: 0
 17732  002A4A  0E7F               	movlw	high STR_153
 17733  002A4C  6F7E               	movwf	(_printStatistics$1314+1)& (0+255),b
 17734  002A4E  0EE0               	movlw	low STR_153
 17735  002A50  D003               	goto	L22
 17736  002A52                     l13393:
 17737                           
 17738                           ; BSR set to: 0
 17739  002A52  0E7F               	movlw	high STR_152
 17740  002A54  6F7E               	movwf	(_printStatistics$1314+1)& (0+255),b
 17741  002A56  0E72               	movlw	low STR_152
 17742  002A58                     L22:
 17743  002A58  6F7D               	movwf	_printStatistics$1314& (0+255),b
 17744                           
 17745                           ; BSR set to: 0
 17746  002A5A  0E01               	movlw	high _wrkbuf
 17747  002A5C  0100               	movlb	0	; () banked
 17748  002A5E  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17749  002A60  0E70               	movlw	low _wrkbuf
 17750  002A62  6F60               	movwf	?_sprintf& (0+255),b
 17751  002A64  C07D  F062         	movff	_printStatistics$1314,?_sprintf+2
 17752  002A68  C07E  F063         	movff	_printStatistics$1314+1,?_sprintf+3
 17753  002A6C  C110  F064         	movff	_cntTxBytes,?_sprintf+4
 17754  002A70  C111  F065         	movff	_cntTxBytes+1,?_sprintf+5
 17755  002A74  C112  F066         	movff	_cntTxBytes+2,?_sprintf+6
 17756  002A78  C113  F067         	movff	_cntTxBytes+3,?_sprintf+7
 17757  002A7C  EC33  F00A         	call	_sprintf	;wreg free
 17758                           
 17759                           ; BSR set to: 0
 17760                           ;main.c: 2185: putsUSART(wrkbuf);
 17761  002A80  0101               	movlb	1	; () banked
 17762  002A82  0E01               	movlw	high _wrkbuf
 17763  002A84  6E1B               	movwf	?_putsUSART+1,c
 17764  002A86  0E70               	movlw	low _wrkbuf
 17765  002A88  6E1A               	movwf	?_putsUSART,c
 17766  002A8A  ECC1  F025         	call	_putsUSART	;wreg free
 17767                           
 17768                           ;main.c: 2186: putsUSART((char *) "\r\n");
 17769  002A8E  0E74               	movlw	high (STR_188+50)
 17770  002A90  6E1B               	movwf	?_putsUSART+1,c
 17771  002A92  0EB2               	movlw	low (STR_188+50)
 17772  002A94  6E1A               	movwf	?_putsUSART,c
 17773  002A96  ECC1  F025         	call	_putsUSART	;wreg free
 17774                           
 17775                           ;main.c: 2188: putsUSART((char *) "Received CAN frames: ");
 17776  002A9A  0E7D               	movlw	high STR_159
 17777  002A9C  6E1B               	movwf	?_putsUSART+1,c
 17778  002A9E  0E1B               	movlw	low STR_159
 17779  002AA0  6E1A               	movwf	?_putsUSART,c
 17780  002AA2  ECC1  F025         	call	_putsUSART	;wreg free
 17781                           
 17782                           ;main.c: 2189: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames );
 17783  002AA6  0100               	movlb	0	; () banked
 17784  002AA8  67D3               	tstfsz	_bHex& (0+255),b
 17785  002AAA  D004               	goto	l13407
 17786                           
 17787                           ; BSR set to: 0
 17788  002AAC  0E7F               	movlw	high STR_153
 17789  002AAE  6F80               	movwf	(_printStatistics$1320+1)& (0+255),b
 17790  002AB0  0EE0               	movlw	low STR_153
 17791  002AB2  D003               	goto	L23
 17792  002AB4                     l13407:
 17793                           
 17794                           ; BSR set to: 0
 17795  002AB4  0E7F               	movlw	high STR_152
 17796  002AB6  6F80               	movwf	(_printStatistics$1320+1)& (0+255),b
 17797  002AB8  0E72               	movlw	low STR_152
 17798  002ABA                     L23:
 17799  002ABA  6F7F               	movwf	_printStatistics$1320& (0+255),b
 17800                           
 17801                           ; BSR set to: 0
 17802  002ABC  0E01               	movlw	high _wrkbuf
 17803  002ABE  0100               	movlb	0	; () banked
 17804  002AC0  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17805  002AC2  0E70               	movlw	low _wrkbuf
 17806  002AC4  6F60               	movwf	?_sprintf& (0+255),b
 17807  002AC6  C07F  F062         	movff	_printStatistics$1320,?_sprintf+2
 17808  002ACA  C080  F063         	movff	_printStatistics$1320+1,?_sprintf+3
 17809  002ACE  C10C  F064         	movff	_cntRxFrames,?_sprintf+4
 17810  002AD2  C10D  F065         	movff	_cntRxFrames+1,?_sprintf+5
 17811  002AD6  C10E  F066         	movff	_cntRxFrames+2,?_sprintf+6
 17812  002ADA  C10F  F067         	movff	_cntRxFrames+3,?_sprintf+7
 17813  002ADE  EC33  F00A         	call	_sprintf	;wreg free
 17814                           
 17815                           ; BSR set to: 0
 17816                           ;main.c: 2190: putsUSART(wrkbuf);
 17817  002AE2  0101               	movlb	1	; () banked
 17818  002AE4  0E01               	movlw	high _wrkbuf
 17819  002AE6  6E1B               	movwf	?_putsUSART+1,c
 17820  002AE8  0E70               	movlw	low _wrkbuf
 17821  002AEA  6E1A               	movwf	?_putsUSART,c
 17822  002AEC  ECC1  F025         	call	_putsUSART	;wreg free
 17823                           
 17824                           ;main.c: 2191: putsUSART((char *) "\r\n");
 17825  002AF0  0E74               	movlw	high (STR_188+50)
 17826  002AF2  6E1B               	movwf	?_putsUSART+1,c
 17827  002AF4  0EB2               	movlw	low (STR_188+50)
 17828  002AF6  6E1A               	movwf	?_putsUSART,c
 17829  002AF8  ECC1  F025         	call	_putsUSART	;wreg free
 17830                           
 17831                           ;main.c: 2193: putsUSART((char *) "Received CAN bytes: ");
 17832  002AFC  0E7D               	movlw	high STR_163
 17833  002AFE  6E1B               	movwf	?_putsUSART+1,c
 17834  002B00  0E31               	movlw	low STR_163
 17835  002B02  6E1A               	movwf	?_putsUSART,c
 17836  002B04  ECC1  F025         	call	_putsUSART	;wreg free
 17837                           
 17838                           ;main.c: 2194: sprintf( wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes );
 17839  002B08  0100               	movlb	0	; () banked
 17840  002B0A  67D3               	tstfsz	_bHex& (0+255),b
 17841  002B0C  D004               	goto	l13421
 17842                           
 17843                           ; BSR set to: 0
 17844  002B0E  0E7F               	movlw	high STR_153
 17845  002B10  6F82               	movwf	(_printStatistics$1326+1)& (0+255),b
 17846  002B12  0EE0               	movlw	low STR_153
 17847  002B14  D003               	goto	L24
 17848  002B16                     l13421:
 17849                           
 17850                           ; BSR set to: 0
 17851  002B16  0E7F               	movlw	high STR_152
 17852  002B18  6F82               	movwf	(_printStatistics$1326+1)& (0+255),b
 17853  002B1A  0E72               	movlw	low STR_152
 17854  002B1C                     L24:
 17855  002B1C  6F81               	movwf	_printStatistics$1326& (0+255),b
 17856                           
 17857                           ; BSR set to: 0
 17858  002B1E  0E01               	movlw	high _wrkbuf
 17859  002B20  0100               	movlb	0	; () banked
 17860  002B22  6F61               	movwf	(?_sprintf+1)& (0+255),b
 17861  002B24  0E70               	movlw	low _wrkbuf
 17862  002B26  6F60               	movwf	?_sprintf& (0+255),b
 17863  002B28  C081  F062         	movff	_printStatistics$1326,?_sprintf+2
 17864  002B2C  C082  F063         	movff	_printStatistics$1326+1,?_sprintf+3
 17865  002B30  C108  F064         	movff	_cntRxBytes,?_sprintf+4
 17866  002B34  C109  F065         	movff	_cntRxBytes+1,?_sprintf+5
 17867  002B38  C10A  F066         	movff	_cntRxBytes+2,?_sprintf+6
 17868  002B3C  C10B  F067         	movff	_cntRxBytes+3,?_sprintf+7
 17869  002B40  EC33  F00A         	call	_sprintf	;wreg free
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;main.c: 2195: putsUSART(wrkbuf);
 17873  002B44  0101               	movlb	1	; () banked
 17874  002B46  0E01               	movlw	high _wrkbuf
 17875  002B48  6E1B               	movwf	?_putsUSART+1,c
 17876  002B4A  0E70               	movlw	low _wrkbuf
 17877  002B4C  6E1A               	movwf	?_putsUSART,c
 17878  002B4E  ECC1  F025         	call	_putsUSART	;wreg free
 17879                           
 17880                           ;main.c: 2196: putsUSART((char *) "\r\n");
 17881  002B52  0E74               	movlw	high (STR_188+50)
 17882  002B54  6E1B               	movwf	?_putsUSART+1,c
 17883  002B56  0EB2               	movlw	low (STR_188+50)
 17884  002B58  6E1A               	movwf	?_putsUSART,c
 17885  002B5A  EFC1  F025         	goto	_putsUSART	;wreg free
 17886  002B5E                     __end_of_printStatistics:
 17887                           	opt stack 0
 17888                           tblptru	equ	0xFF8
 17889                           tblptrh	equ	0xFF7
 17890                           tblptrl	equ	0xFF6
 17891                           tablat	equ	0xFF5
 17892                           prodh	equ	0xFF4
 17893                           prodl	equ	0xFF3
 17894                           intcon	equ	0xFF2
 17895                           indf0	equ	0xFEF
 17896                           postinc0	equ	0xFEE
 17897                           fsr0h	equ	0xFEA
 17898                           fsr0l	equ	0xFE9
 17899                           wreg	equ	0xFE8
 17900                           indf1	equ	0xFE7
 17901                           postinc1	equ	0xFE6
 17902                           postdec1	equ	0xFE5
 17903                           fsr1h	equ	0xFE2
 17904                           fsr1l	equ	0xFE1
 17905                           indf2	equ	0xFDF
 17906                           postinc2	equ	0xFDE
 17907                           postdec2	equ	0xFDD
 17908                           plusw2	equ	0xFDB
 17909                           fsr2h	equ	0xFDA
 17910                           fsr2l	equ	0xFD9
 17911                           status	equ	0xFD8
 17912                           
 17913 ;; *************** function _atoi *****************
 17914 ;; Defined at:
 17915 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;  s               2   30[COMRAM] PTR const unsigned char 
 17918 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 17919 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 17920 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 17921 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 17922 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 17923 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 17924 ;; Auto vars:     Size  Location     Type
 17925 ;;  a               2   35[COMRAM] int 
 17926 ;;  sign            1   34[COMRAM] unsigned char 
 17927 ;; Return value:  Size  Location     Type
 17928 ;;                  2   30[COMRAM] int 
 17929 ;; Registers used:
 17930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17931 ;; Tracked objects:
 17932 ;;		On entry : C/3
 17933 ;;		On exit  : 0/0
 17934 ;;		Unchanged: 0/0
 17935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17936 ;;      Params:         2       0       0       0       0       0       0
 17937 ;;      Locals:         3       0       0       0       0       0       0
 17938 ;;      Temps:          2       0       0       0       0       0       0
 17939 ;;      Totals:         7       0       0       0       0       0       0
 17940 ;;Total ram usage:        7 bytes
 17941 ;; Hardware stack levels used:    1
 17942 ;; Hardware stack levels required when called:    3
 17943 ;; This function calls:
 17944 ;;		_isdigit
 17945 ;;		___wmul
 17946 ;; This function is called by:
 17947 ;;		_doModeVerbose
 17948 ;; This function uses a non-reentrant model
 17949 ;;
 17950                           
 17951                           	psect	text39
 17952  00369C                     __ptext39:
 17953                           	opt stack 0
 17954  00369C                     _atoi:
 17955                           	opt stack 26
 17956                           
 17957                           ;incstack = 0
 17958                           ;incstack = 0
 17959  00369C  D002               	goto	l10679
 17960  00369E                     l10677:
 17961  00369E  4A1F               	infsnz	atoi@s,f,c
 17962  0036A0  2A20               	incf	atoi@s+1,f,c
 17963  0036A2                     l10679:
 17964  0036A2  501F               	movf	atoi@s,w,c
 17965  0036A4  6EF6               	movwf	tblptrl,c
 17966  0036A6  6EE9               	movwf	fsr0l,c
 17967  0036A8  0E05               	movlw	(high __ramtop+-1)
 17968  0036AA  6EEA               	movwf	fsr0h,c
 17969  0036AC  5020               	movf	atoi@s+1,w,c
 17970  0036AE  64EA               	cpfsgt	fsr0h,c
 17971  0036B0  D003               	bra	u13177
 17972  0036B2  6EEA               	movwf	fsr0h,c
 17973  0036B4  50EF               	movf	indf0,w,c
 17974  0036B6  D003               	bra	u13170
 17975  0036B8                     u13177:
 17976  0036B8  6EF7               	movwf	tblptrh,c
 17977  0036BA  0008               	tblrd		*
 17978  0036BC  50F5               	movf	tablat,w,c
 17979  0036BE                     u13170:
 17980  0036BE  0A20               	xorlw	32
 17981  0036C0  E0EE               	bz	l10677
 17982  0036C2  D864               	call	PL22	;call to abstracted procedure
 17983  0036C4  64EA               	cpfsgt	fsr0h,c
 17984  0036C6  D003               	bra	u13197
 17985  0036C8  6EEA               	movwf	fsr0h,c
 17986  0036CA  50EF               	movf	indf0,w,c
 17987  0036CC  D003               	bra	u13190
 17988  0036CE                     u13197:
 17989  0036CE  6EF7               	movwf	tblptrh,c
 17990  0036D0  0008               	tblrd		*
 17991  0036D2  50F5               	movf	tablat,w,c
 17992  0036D4                     u13190:
 17993  0036D4  0A09               	xorlw	9
 17994  0036D6  E0E3               	bz	l10677
 17995  0036D8  6A24               	clrf	atoi@a,c
 17996  0036DA  6A25               	clrf	atoi@a+1,c
 17997  0036DC  6A23               	clrf	atoi@sign,c
 17998  0036DE  D856               	call	PL22	;call to abstracted procedure
 17999  0036E0  64EA               	cpfsgt	fsr0h,c
 18000  0036E2  D003               	bra	u13217
 18001  0036E4  6EEA               	movwf	fsr0h,c
 18002  0036E6  50EF               	movf	indf0,w,c
 18003  0036E8  D003               	bra	u13210
 18004  0036EA                     u13217:
 18005  0036EA  6EF7               	movwf	tblptrh,c
 18006  0036EC  0008               	tblrd		*
 18007  0036EE  50F5               	movf	tablat,w,c
 18008  0036F0                     u13210:
 18009  0036F0  0A2D               	xorlw	45
 18010  0036F2  E102               	bnz	l10687
 18011  0036F4  2A23               	incf	atoi@sign,f,c
 18012  0036F6  D00B               	goto	l10689
 18013  0036F8                     l10687:
 18014  0036F8  D849               	call	PL22	;call to abstracted procedure
 18015  0036FA  64EA               	cpfsgt	fsr0h,c
 18016  0036FC  D003               	bra	u13237
 18017  0036FE  6EEA               	movwf	fsr0h,c
 18018  003700  50EF               	movf	indf0,w,c
 18019  003702  D003               	bra	u13230
 18020  003704                     u13237:
 18021  003704  6EF7               	movwf	tblptrh,c
 18022  003706  0008               	tblrd		*
 18023  003708  50F5               	movf	tablat,w,c
 18024  00370A                     u13230:
 18025  00370A  0A2B               	xorlw	43
 18026  00370C  E11F               	bnz	l10695
 18027  00370E                     l10689:
 18028  00370E  4A1F               	infsnz	atoi@s,f,c
 18029  003710  2A20               	incf	atoi@s+1,f,c
 18030  003712  D01C               	goto	l10695
 18031  003714                     l10691:
 18032  003714  C024  F019         	movff	atoi@a,?___wmul
 18033  003718  C025  F01A         	movff	atoi@a+1,?___wmul+1
 18034  00371C  6A1C               	clrf	?___wmul+3,c
 18035  00371E  0E0A               	movlw	10
 18036  003720  6E1B               	movwf	?___wmul+2,c
 18037  003722  ECEB  F027         	call	___wmul	;wreg free
 18038  003726  D832               	call	PL22	;call to abstracted procedure
 18039  003728  64EA               	cpfsgt	fsr0h,c
 18040  00372A  D003               	bra	u13257
 18041  00372C  6EEA               	movwf	fsr0h,c
 18042  00372E  50EF               	movf	indf0,w,c
 18043  003730  D003               	bra	u13250
 18044  003732                     u13257:
 18045  003732  6EF7               	movwf	tblptrh,c
 18046  003734  0008               	tblrd		*
 18047  003736  50F5               	movf	tablat,w,c
 18048  003738                     u13250:
 18049  003738  2619               	addwf	?___wmul,f,c
 18050  00373A  0E00               	movlw	0
 18051  00373C  221A               	addwfc	?___wmul+1,f,c
 18052  00373E  0ED0               	movlw	208
 18053  003740  2419               	addwf	?___wmul,w,c
 18054  003742  6E24               	movwf	atoi@a,c
 18055  003744  0EFF               	movlw	255
 18056  003746  201A               	addwfc	?___wmul+1,w,c
 18057  003748  6E25               	movwf	atoi@a+1,c
 18058  00374A  D7E1               	goto	l10689
 18059  00374C                     l10695:
 18060  00374C  D81F               	call	PL22	;call to abstracted procedure
 18061  00374E  64EA               	cpfsgt	fsr0h,c
 18062  003750  D003               	bra	u13267
 18063  003752  6EEA               	movwf	fsr0h,c
 18064  003754  50EF               	movf	indf0,w,c
 18065  003756  D003               	bra	u13260
 18066  003758                     u13267:
 18067  003758  6EF7               	movwf	tblptrh,c
 18068  00375A  0008               	tblrd		*
 18069  00375C  50F5               	movf	tablat,w,c
 18070  00375E                     u13260:
 18071  00375E  EC5B  F028         	call	_isdigit
 18072  003762  E2D8               	bc	l10691
 18073  003764  5023               	movf	atoi@sign,w,c
 18074  003766  E00D               	bz	l1911
 18075  003768  C024  F021         	movff	atoi@a,??_atoi
 18076  00376C  C025  F022         	movff	atoi@a+1,??_atoi+1
 18077  003770  1E21               	comf	??_atoi,f,c
 18078  003772  1E22               	comf	??_atoi+1,f,c
 18079  003774  4A21               	infsnz	??_atoi,f,c
 18080  003776  2A22               	incf	??_atoi+1,f,c
 18081  003778  C021  F01F         	movff	??_atoi,?_atoi
 18082  00377C  C022  F020         	movff	??_atoi+1,?_atoi+1
 18083  003780  D004               	goto	l1912
 18084  003782                     l1911:
 18085  003782  C024  F01F         	movff	atoi@a,?_atoi
 18086  003786  C025  F020         	movff	atoi@a+1,?_atoi+1
 18087  00378A                     l1912:
 18088  00378A  0012               	return	
 18089  00378C                     __end_of_atoi:
 18090                           	opt stack 0
 18091  00378C                     PL22:
 18092                           	opt stack 26
 18093  00378C  501F               	movf	atoi@s,w,c
 18094  00378E  6EF6               	movwf	tblptrl,c
 18095  003790  6EE9               	movwf	fsr0l,c
 18096  003792  0E05               	movlw	(high __ramtop+-1)
 18097  003794  6EEA               	movwf	fsr0h,c
 18098  003796  5020               	movf	atoi@s+1,w,c
 18099  003798  0012               	return	
 18100  00379A                     __end_ofPL22:
 18101                           	opt stack 0
 18102                           tblptru	equ	0xFF8
 18103                           tblptrh	equ	0xFF7
 18104                           tblptrl	equ	0xFF6
 18105                           tablat	equ	0xFF5
 18106                           prodh	equ	0xFF4
 18107                           prodl	equ	0xFF3
 18108                           intcon	equ	0xFF2
 18109                           indf0	equ	0xFEF
 18110                           postinc0	equ	0xFEE
 18111                           fsr0h	equ	0xFEA
 18112                           fsr0l	equ	0xFE9
 18113                           wreg	equ	0xFE8
 18114                           indf1	equ	0xFE7
 18115                           postinc1	equ	0xFE6
 18116                           postdec1	equ	0xFE5
 18117                           fsr1h	equ	0xFE2
 18118                           fsr1l	equ	0xFE1
 18119                           indf2	equ	0xFDF
 18120                           postinc2	equ	0xFDE
 18121                           postdec2	equ	0xFDD
 18122                           plusw2	equ	0xFDB
 18123                           fsr2h	equ	0xFDA
 18124                           fsr2l	equ	0xFD9
 18125                           status	equ	0xFD8
 18126                           
 18127 ;; *************** function _strtok *****************
 18128 ;; Defined at:
 18129 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 18130 ;; Parameters:    Size  Location     Type
 18131 ;;  s1              2   36[COMRAM] PTR unsigned char 
 18132 ;;		 -> NULL(0), cmdbuf(80), 
 18133 ;;  s2              2   38[COMRAM] PTR const unsigned char 
 18134 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18135 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18136 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18137 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18138 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18139 ;;		 -> STR_30(2), STR_29(2), 
 18140 ;; Auto vars:     Size  Location     Type
 18141 ;;		None
 18142 ;; Return value:  Size  Location     Type
 18143 ;;                  2   36[COMRAM] PTR unsigned char 
 18144 ;; Registers used:
 18145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18146 ;; Tracked objects:
 18147 ;;		On entry : 0/1
 18148 ;;		On exit  : 0/0
 18149 ;;		Unchanged: 0/0
 18150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18151 ;;      Params:         4       0       0       0       0       0       0
 18152 ;;      Locals:         0       0       0       0       0       0       0
 18153 ;;      Temps:          0       0       0       0       0       0       0
 18154 ;;      Totals:         4       0       0       0       0       0       0
 18155 ;;Total ram usage:        4 bytes
 18156 ;; Hardware stack levels used:    1
 18157 ;; Hardware stack levels required when called:    4
 18158 ;; This function calls:
 18159 ;;		_strspn
 18160 ;;		_strcspn
 18161 ;; This function is called by:
 18162 ;;		_doModeVerbose
 18163 ;; This function uses a non-reentrant model
 18164 ;;
 18165                           
 18166                           	psect	text40
 18167  0043FA                     __ptext40:
 18168                           	opt stack 0
 18169  0043FA                     _strtok:
 18170                           	opt stack 25
 18171                           
 18172                           ;incstack = 0
 18173                           ;incstack = 0
 18174  0043FA  5026               	movf	strtok@s1+1,w,c
 18175  0043FC  1025               	iorwf	strtok@s1,w,c
 18176  0043FE  E104               	bnz	l10657
 18177  004400  C037  F025         	movff	strtok@sp,strtok@s1
 18178  004404  C038  F026         	movff	strtok@sp+1,strtok@s1+1
 18179  004408                     l10657:
 18180  004408  5026               	movf	strtok@s1+1,w,c
 18181  00440A  1025               	iorwf	strtok@s1,w,c
 18182  00440C  E016               	bz	L25
 18183  00440E  C025  F01F         	movff	strtok@s1,?_strspn
 18184  004412  C026  F020         	movff	strtok@s1+1,?_strspn+1
 18185  004416  C027  F021         	movff	strtok@s2,?_strspn+2
 18186  00441A  C028  F022         	movff	strtok@s2+1,?_strspn+3
 18187  00441E  EC7C  F026         	call	_strspn	;wreg free
 18188  004422  501F               	movf	?_strspn,w,c
 18189  004424  2625               	addwf	strtok@s1,f,c
 18190  004426  5020               	movf	?_strspn+1,w,c
 18191  004428  2226               	addwfc	strtok@s1+1,f,c
 18192  00442A  C025  FFD9         	movff	strtok@s1,fsr2l
 18193  00442E  C026  FFDA         	movff	strtok@s1+1,fsr2h
 18194  004432  50DF               	movf	indf2,w,c
 18195  004434  E105               	bnz	l10667
 18196  004436  6A37               	clrf	strtok@sp,c
 18197  004438  6A38               	clrf	strtok@sp+1,c
 18198  00443A                     L25:
 18199  00443A  6A25               	clrf	?_strtok,c
 18200  00443C  6A26               	clrf	?_strtok+1,c
 18201  00443E  D025               	goto	l2404
 18202  004440                     l10667:
 18203  004440  C025  F01F         	movff	strtok@s1,?_strcspn
 18204  004444  C026  F020         	movff	strtok@s1+1,?_strcspn+1
 18205  004448  C027  F021         	movff	strtok@s2,?_strcspn+2
 18206  00444C  C028  F022         	movff	strtok@s2+1,?_strcspn+3
 18207  004450  EC5A  F026         	call	_strcspn	;wreg free
 18208  004454  501F               	movf	?_strcspn,w,c
 18209  004456  2425               	addwf	strtok@s1,w,c
 18210  004458  6E37               	movwf	strtok@sp,c
 18211  00445A  5020               	movf	?_strcspn+1,w,c
 18212  00445C  2026               	addwfc	strtok@s1+1,w,c
 18213  00445E  6E38               	movwf	strtok@sp+1,c
 18214  004460  C037  FFD9         	movff	strtok@sp,fsr2l
 18215  004464  C038  FFDA         	movff	strtok@sp+1,fsr2h
 18216  004468  50DF               	movf	indf2,w,c
 18217  00446A  E009               	bz	l2406
 18218  00446C  C037  FFD9         	movff	strtok@sp,fsr2l
 18219  004470  C038  FFDA         	movff	strtok@sp+1,fsr2h
 18220  004474  0E00               	movlw	0
 18221  004476  6EDF               	movwf	indf2,c
 18222  004478  4A37               	infsnz	strtok@sp,f,c
 18223  00447A  2A38               	incf	strtok@sp+1,f,c
 18224  00447C  D002               	goto	l2407
 18225  00447E                     l2406:
 18226  00447E  6A37               	clrf	strtok@sp,c
 18227  004480  6A38               	clrf	strtok@sp+1,c
 18228  004482                     l2407:
 18229  004482  C025  F025         	movff	strtok@s1,?_strtok
 18230  004486  C026  F026         	movff	strtok@s1+1,?_strtok+1
 18231  00448A                     l2404:
 18232  00448A  0012               	return	
 18233  00448C                     __end_of_strtok:
 18234                           	opt stack 0
 18235                           tblptru	equ	0xFF8
 18236                           tblptrh	equ	0xFF7
 18237                           tblptrl	equ	0xFF6
 18238                           tablat	equ	0xFF5
 18239                           prodh	equ	0xFF4
 18240                           prodl	equ	0xFF3
 18241                           intcon	equ	0xFF2
 18242                           indf0	equ	0xFEF
 18243                           postinc0	equ	0xFEE
 18244                           fsr0h	equ	0xFEA
 18245                           fsr0l	equ	0xFE9
 18246                           wreg	equ	0xFE8
 18247                           indf1	equ	0xFE7
 18248                           postinc1	equ	0xFE6
 18249                           postdec1	equ	0xFE5
 18250                           fsr1h	equ	0xFE2
 18251                           fsr1l	equ	0xFE1
 18252                           indf2	equ	0xFDF
 18253                           postinc2	equ	0xFDE
 18254                           postdec2	equ	0xFDD
 18255                           plusw2	equ	0xFDB
 18256                           fsr2h	equ	0xFDA
 18257                           fsr2l	equ	0xFD9
 18258                           status	equ	0xFD8
 18259                           
 18260 ;; *************** function _strcspn *****************
 18261 ;; Defined at:
 18262 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18265 ;;		 -> NULL(0), cmdbuf(80), 
 18266 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18267 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18268 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18269 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18270 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18271 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18272 ;;		 -> STR_30(2), STR_29(2), 
 18273 ;; Auto vars:     Size  Location     Type
 18274 ;;  i               2   34[COMRAM] unsigned int 
 18275 ;; Return value:  Size  Location     Type
 18276 ;;                  2   30[COMRAM] unsigned int 
 18277 ;; Registers used:
 18278 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18279 ;; Tracked objects:
 18280 ;;		On entry : 0/1
 18281 ;;		On exit  : 0/0
 18282 ;;		Unchanged: 0/0
 18283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18284 ;;      Params:         4       0       0       0       0       0       0
 18285 ;;      Locals:         2       0       0       0       0       0       0
 18286 ;;      Temps:          0       0       0       0       0       0       0
 18287 ;;      Totals:         6       0       0       0       0       0       0
 18288 ;;Total ram usage:        6 bytes
 18289 ;; Hardware stack levels used:    1
 18290 ;; Hardware stack levels required when called:    3
 18291 ;; This function calls:
 18292 ;;		_strchr
 18293 ;; This function is called by:
 18294 ;;		_strtok
 18295 ;; This function uses a non-reentrant model
 18296 ;;
 18297                           
 18298                           	psect	text41
 18299  004CB4                     __ptext41:
 18300                           	opt stack 0
 18301  004CB4                     _strcspn:
 18302                           	opt stack 25
 18303                           
 18304                           ;incstack = 0
 18305                           ;incstack = 0
 18306  004CB4  6A23               	clrf	strcspn@i,c
 18307  004CB6  6A24               	clrf	strcspn@i+1,c
 18308  004CB8  D004               	goto	l12433
 18309  004CBA                     l12431:
 18310  004CBA  4A1F               	infsnz	strcspn@s1,f,c
 18311  004CBC  2A20               	incf	strcspn@s1+1,f,c
 18312  004CBE  4A23               	infsnz	strcspn@i,f,c
 18313  004CC0  2A24               	incf	strcspn@i+1,f,c
 18314  004CC2                     l12433:
 18315  004CC2  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18316  004CC6  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18317  004CCA  50DF               	movf	indf2,w,c
 18318  004CCC  E010               	bz	l2431
 18319  004CCE  C021  F019         	movff	strcspn@s2,?_strchr
 18320  004CD2  C022  F01A         	movff	strcspn@s2+1,?_strchr+1
 18321  004CD6  C01F  FFD9         	movff	strcspn@s1,fsr2l
 18322  004CDA  C020  FFDA         	movff	strcspn@s1+1,fsr2h
 18323  004CDE  50DF               	movf	indf2,w,c
 18324  004CE0  6E1B               	movwf	?_strchr+2,c
 18325  004CE2  6A1C               	clrf	?_strchr+3,c
 18326  004CE4  EC0F  F025         	call	_strchr	;wreg free
 18327  004CE8  501A               	movf	?_strchr+1,w,c
 18328  004CEA  1019               	iorwf	?_strchr,w,c
 18329  004CEC  E0E6               	bz	l12431
 18330  004CEE                     l2431:
 18331  004CEE  C023  F01F         	movff	strcspn@i,?_strcspn
 18332  004CF2  C024  F020         	movff	strcspn@i+1,?_strcspn+1
 18333  004CF6  0012               	return	
 18334  004CF8                     __end_of_strcspn:
 18335                           	opt stack 0
 18336                           tblptru	equ	0xFF8
 18337                           tblptrh	equ	0xFF7
 18338                           tblptrl	equ	0xFF6
 18339                           tablat	equ	0xFF5
 18340                           prodh	equ	0xFF4
 18341                           prodl	equ	0xFF3
 18342                           intcon	equ	0xFF2
 18343                           indf0	equ	0xFEF
 18344                           postinc0	equ	0xFEE
 18345                           fsr0h	equ	0xFEA
 18346                           fsr0l	equ	0xFE9
 18347                           wreg	equ	0xFE8
 18348                           indf1	equ	0xFE7
 18349                           postinc1	equ	0xFE6
 18350                           postdec1	equ	0xFE5
 18351                           fsr1h	equ	0xFE2
 18352                           fsr1l	equ	0xFE1
 18353                           indf2	equ	0xFDF
 18354                           postinc2	equ	0xFDE
 18355                           postdec2	equ	0xFDD
 18356                           plusw2	equ	0xFDB
 18357                           fsr2h	equ	0xFDA
 18358                           fsr2l	equ	0xFD9
 18359                           status	equ	0xFD8
 18360                           
 18361 ;; *************** function _strspn *****************
 18362 ;; Defined at:
 18363 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;  s1              2   30[COMRAM] PTR const unsigned char 
 18366 ;;		 -> NULL(0), cmdbuf(80), 
 18367 ;;  s2              2   32[COMRAM] PTR const unsigned char 
 18368 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18369 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18370 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18371 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18372 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18373 ;;		 -> STR_30(2), STR_29(2), 
 18374 ;; Auto vars:     Size  Location     Type
 18375 ;;  i               2   34[COMRAM] unsigned int 
 18376 ;; Return value:  Size  Location     Type
 18377 ;;                  2   30[COMRAM] unsigned int 
 18378 ;; Registers used:
 18379 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18380 ;; Tracked objects:
 18381 ;;		On entry : 0/1
 18382 ;;		On exit  : 0/0
 18383 ;;		Unchanged: 0/0
 18384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18385 ;;      Params:         4       0       0       0       0       0       0
 18386 ;;      Locals:         2       0       0       0       0       0       0
 18387 ;;      Temps:          0       0       0       0       0       0       0
 18388 ;;      Totals:         6       0       0       0       0       0       0
 18389 ;;Total ram usage:        6 bytes
 18390 ;; Hardware stack levels used:    1
 18391 ;; Hardware stack levels required when called:    3
 18392 ;; This function calls:
 18393 ;;		_strchr
 18394 ;; This function is called by:
 18395 ;;		_strtok
 18396 ;; This function uses a non-reentrant model
 18397 ;;
 18398                           
 18399                           	psect	text42
 18400  004CF8                     __ptext42:
 18401                           	opt stack 0
 18402  004CF8                     _strspn:
 18403                           	opt stack 25
 18404                           
 18405                           ;incstack = 0
 18406                           ;incstack = 0
 18407  004CF8  6A23               	clrf	strspn@i,c
 18408  004CFA  6A24               	clrf	strspn@i+1,c
 18409  004CFC  D004               	goto	l12425
 18410  004CFE                     l12423:
 18411  004CFE  4A1F               	infsnz	strspn@s1,f,c
 18412  004D00  2A20               	incf	strspn@s1+1,f,c
 18413  004D02  4A23               	infsnz	strspn@i,f,c
 18414  004D04  2A24               	incf	strspn@i+1,f,c
 18415  004D06                     l12425:
 18416  004D06  C01F  FFD9         	movff	strspn@s1,fsr2l
 18417  004D0A  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18418  004D0E  50DF               	movf	indf2,w,c
 18419  004D10  E010               	bz	l2450
 18420  004D12  C021  F019         	movff	strspn@s2,?_strchr
 18421  004D16  C022  F01A         	movff	strspn@s2+1,?_strchr+1
 18422  004D1A  C01F  FFD9         	movff	strspn@s1,fsr2l
 18423  004D1E  C020  FFDA         	movff	strspn@s1+1,fsr2h
 18424  004D22  50DF               	movf	indf2,w,c
 18425  004D24  6E1B               	movwf	?_strchr+2,c
 18426  004D26  6A1C               	clrf	?_strchr+3,c
 18427  004D28  EC0F  F025         	call	_strchr	;wreg free
 18428  004D2C  501A               	movf	?_strchr+1,w,c
 18429  004D2E  1019               	iorwf	?_strchr,w,c
 18430  004D30  E1E6               	bnz	l12423
 18431  004D32                     l2450:
 18432  004D32  C023  F01F         	movff	strspn@i,?_strspn
 18433  004D36  C024  F020         	movff	strspn@i+1,?_strspn+1
 18434  004D3A  0012               	return	
 18435  004D3C                     __end_of_strspn:
 18436                           	opt stack 0
 18437                           tblptru	equ	0xFF8
 18438                           tblptrh	equ	0xFF7
 18439                           tblptrl	equ	0xFF6
 18440                           tablat	equ	0xFF5
 18441                           prodh	equ	0xFF4
 18442                           prodl	equ	0xFF3
 18443                           intcon	equ	0xFF2
 18444                           indf0	equ	0xFEF
 18445                           postinc0	equ	0xFEE
 18446                           fsr0h	equ	0xFEA
 18447                           fsr0l	equ	0xFE9
 18448                           wreg	equ	0xFE8
 18449                           indf1	equ	0xFE7
 18450                           postinc1	equ	0xFE6
 18451                           postdec1	equ	0xFE5
 18452                           fsr1h	equ	0xFE2
 18453                           fsr1l	equ	0xFE1
 18454                           indf2	equ	0xFDF
 18455                           postinc2	equ	0xFDE
 18456                           postdec2	equ	0xFDD
 18457                           plusw2	equ	0xFDB
 18458                           fsr2h	equ	0xFDA
 18459                           fsr2l	equ	0xFD9
 18460                           status	equ	0xFD8
 18461                           
 18462 ;; *************** function _strchr *****************
 18463 ;; Defined at:
 18464 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  ptr             2   24[COMRAM] PTR const unsigned char 
 18467 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18468 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18469 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18470 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18471 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18472 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 18473 ;;  chr             2   26[COMRAM] int 
 18474 ;; Auto vars:     Size  Location     Type
 18475 ;;		None
 18476 ;; Return value:  Size  Location     Type
 18477 ;;                  2   24[COMRAM] PTR unsigned char 
 18478 ;; Registers used:
 18479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 18480 ;; Tracked objects:
 18481 ;;		On entry : 0/3
 18482 ;;		On exit  : 0/0
 18483 ;;		Unchanged: 0/0
 18484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18485 ;;      Params:         4       0       0       0       0       0       0
 18486 ;;      Locals:         0       0       0       0       0       0       0
 18487 ;;      Temps:          2       0       0       0       0       0       0
 18488 ;;      Totals:         6       0       0       0       0       0       0
 18489 ;;Total ram usage:        6 bytes
 18490 ;; Hardware stack levels used:    1
 18491 ;; Hardware stack levels required when called:    2
 18492 ;; This function calls:
 18493 ;;		Nothing
 18494 ;; This function is called by:
 18495 ;;		_doModeVerbose
 18496 ;;		_strcspn
 18497 ;;		_strspn
 18498 ;; This function uses a non-reentrant model
 18499 ;;
 18500                           
 18501                           	psect	text43
 18502  004A1E                     __ptext43:
 18503                           	opt stack 0
 18504  004A1E                     _strchr:
 18505                           	opt stack 27
 18506  004A1E                     l2352:
 18507  004A1E  5019               	movf	strchr@ptr,w,c
 18508  004A20  6EF6               	movwf	tblptrl,c
 18509  004A22  6EE9               	movwf	fsr0l,c
 18510  004A24  0E05               	movlw	(high __ramtop+-1)
 18511  004A26  6EEA               	movwf	fsr0h,c
 18512  004A28  501A               	movf	strchr@ptr+1,w,c
 18513  004A2A  64EA               	cpfsgt	fsr0h,c
 18514  004A2C  D003               	bra	u13537
 18515  004A2E  6EEA               	movwf	fsr0h,c
 18516  004A30  50EF               	movf	indf0,w,c
 18517  004A32  D003               	bra	u13530
 18518  004A34                     u13537:
 18519  004A34  6EF7               	movwf	tblptrh,c
 18520  004A36  0008               	tblrd		*
 18521  004A38  50F5               	movf	tablat,w,c
 18522  004A3A                     u13530:
 18523  004A3A  181B               	xorwf	strchr@chr,w,c
 18524  004A3C  E105               	bnz	l10941
 18525  004A3E  C019  F019         	movff	strchr@ptr,?_strchr
 18526  004A42  C01A  F01A         	movff	strchr@ptr+1,?_strchr+1
 18527  004A46  D018               	goto	l2354
 18528  004A48                     l10941:
 18529  004A48  5019               	movf	strchr@ptr,w,c
 18530  004A4A  6E1D               	movwf	??_strchr& (0+255),c
 18531  004A4C  501A               	movf	strchr@ptr+1,w,c
 18532  004A4E  6E1E               	movwf	(??_strchr+1)& (0+255),c
 18533  004A50  4A19               	infsnz	strchr@ptr,f,c
 18534  004A52  2A1A               	incf	strchr@ptr+1,f,c
 18535  004A54  501D               	movf	??_strchr,w,c
 18536  004A56  6EF6               	movwf	tblptrl,c
 18537  004A58  6EE9               	movwf	fsr0l,c
 18538  004A5A  0E05               	movlw	(high __ramtop+-1)
 18539  004A5C  6EEA               	movwf	fsr0h,c
 18540  004A5E  501E               	movf	??_strchr+1,w,c
 18541  004A60  64EA               	cpfsgt	fsr0h,c
 18542  004A62  D003               	bra	u13557
 18543  004A64  6EEA               	movwf	fsr0h,c
 18544  004A66  50EF               	movf	indf0,w,c
 18545  004A68  D003               	bra	u13550
 18546  004A6A                     u13557:
 18547  004A6A  6EF7               	movwf	tblptrh,c
 18548  004A6C  0008               	tblrd		*
 18549  004A6E  50F5               	movf	tablat,w,c
 18550  004A70                     u13550:
 18551  004A70  0900               	iorlw	0
 18552  004A72  E1D5               	bnz	l2352
 18553  004A74  6A19               	clrf	?_strchr,c
 18554  004A76  6A1A               	clrf	?_strchr+1,c
 18555  004A78                     l2354:
 18556  004A78  0012               	return	
 18557  004A7A                     __end_of_strchr:
 18558                           	opt stack 0
 18559                           tblptru	equ	0xFF8
 18560                           tblptrh	equ	0xFF7
 18561                           tblptrl	equ	0xFF6
 18562                           tablat	equ	0xFF5
 18563                           prodh	equ	0xFF4
 18564                           prodl	equ	0xFF3
 18565                           intcon	equ	0xFF2
 18566                           indf0	equ	0xFEF
 18567                           postinc0	equ	0xFEE
 18568                           fsr0h	equ	0xFEA
 18569                           fsr0l	equ	0xFE9
 18570                           wreg	equ	0xFE8
 18571                           indf1	equ	0xFE7
 18572                           postinc1	equ	0xFE6
 18573                           postdec1	equ	0xFE5
 18574                           fsr1h	equ	0xFE2
 18575                           fsr1l	equ	0xFE1
 18576                           indf2	equ	0xFDF
 18577                           postinc2	equ	0xFDE
 18578                           postdec2	equ	0xFDD
 18579                           plusw2	equ	0xFDB
 18580                           fsr2h	equ	0xFDA
 18581                           fsr2l	equ	0xFD9
 18582                           status	equ	0xFD8
 18583                           
 18584 ;; *************** function _stristr *****************
 18585 ;; Defined at:
 18586 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 18587 ;; Parameters:    Size  Location     Type
 18588 ;;  s1              2   37[COMRAM] PTR const unsigned char 
 18589 ;;		 -> NULL(0), cmdbuf(80), 
 18590 ;;  s2              2   39[COMRAM] PTR const unsigned char 
 18591 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18592 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18593 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18594 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18595 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18596 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18597 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18598 ;;		 -> STR_7(5), STR_5(5), 
 18599 ;; Auto vars:     Size  Location     Type
 18600 ;;		None
 18601 ;; Return value:  Size  Location     Type
 18602 ;;                  2   37[COMRAM] PTR unsigned char 
 18603 ;; Registers used:
 18604 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18605 ;; Tracked objects:
 18606 ;;		On entry : F/1
 18607 ;;		On exit  : 0/0
 18608 ;;		Unchanged: 0/0
 18609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18610 ;;      Params:         4       0       0       0       0       0       0
 18611 ;;      Locals:         0       0       0       0       0       0       0
 18612 ;;      Temps:          0       0       0       0       0       0       0
 18613 ;;      Totals:         4       0       0       0       0       0       0
 18614 ;;Total ram usage:        4 bytes
 18615 ;; Hardware stack levels used:    1
 18616 ;; Hardware stack levels required when called:    4
 18617 ;; This function calls:
 18618 ;;		_strlen
 18619 ;;		_strnicmp
 18620 ;;		_strichr
 18621 ;; This function is called by:
 18622 ;;		_doModeVerbose
 18623 ;; This function uses a non-reentrant model
 18624 ;;
 18625                           
 18626                           	psect	text44
 18627  0046AC                     __ptext44:
 18628                           	opt stack 0
 18629  0046AC                     _stristr:
 18630                           	opt stack 25
 18631                           
 18632                           ; BSR set to: 1
 18633                           
 18634                           ;incstack = 0
 18635                           ;incstack = 0
 18636  0046AC  D02F               	goto	l10645
 18637  0046AE                     l10639:
 18638  0046AE  C026  F01D         	movff	stristr@s1,?_strnicmp
 18639  0046B2  C027  F01E         	movff	stristr@s1+1,?_strnicmp+1
 18640  0046B6  C028  F01F         	movff	stristr@s2,?_strnicmp+2
 18641  0046BA  C029  F020         	movff	stristr@s2+1,?_strnicmp+3
 18642  0046BE  C028  F019         	movff	stristr@s2,?_strlen
 18643  0046C2  C029  F01A         	movff	stristr@s2+1,?_strlen+1
 18644  0046C6  EC5D  F027         	call	_strlen	;wreg free
 18645  0046CA  C019  F021         	movff	?_strlen,?_strnicmp+4
 18646  0046CE  C01A  F022         	movff	?_strlen+1,?_strnicmp+5
 18647  0046D2  ECAD  F024         	call	_strnicmp	;wreg free
 18648  0046D6  501E               	movf	?_strnicmp+1,w,c
 18649  0046D8  101D               	iorwf	?_strnicmp,w,c
 18650  0046DA  E105               	bnz	l10643
 18651  0046DC  C026  F026         	movff	stristr@s1,?_stristr
 18652  0046E0  C027  F027         	movff	stristr@s1+1,?_stristr+1
 18653  0046E4  D01E               	goto	l2373
 18654  0046E6                     l10643:
 18655  0046E6  2826               	incf	stristr@s1,w,c
 18656  0046E8  6E1A               	movwf	?_strichr,c
 18657  0046EA  0E00               	movlw	0
 18658  0046EC  2027               	addwfc	stristr@s1+1,w,c
 18659  0046EE  6E1B               	movwf	?_strichr+1,c
 18660  0046F0  C028  FFF6         	movff	stristr@s2,tblptrl
 18661  0046F4  C029  FFF7         	movff	stristr@s2+1,tblptrh
 18662  0046F8  0008               	tblrd		*
 18663  0046FA  50F5               	movf	tablat,w,c
 18664  0046FC  6E1C               	movwf	?_strichr+2,c
 18665  0046FE  6A1D               	clrf	?_strichr+3,c
 18666  004700  EC1F  F027         	call	_strichr	;wreg free
 18667  004704  C01A  F026         	movff	?_strichr,stristr@s1
 18668  004708  C01B  F027         	movff	?_strichr+1,stristr@s1+1
 18669  00470C                     l10645:
 18670  00470C  5027               	movf	stristr@s1+1,w,c
 18671  00470E  1026               	iorwf	stristr@s1,w,c
 18672  004710  E006               	bz	l2376
 18673  004712  C026  FFD9         	movff	stristr@s1,fsr2l
 18674  004716  C027  FFDA         	movff	stristr@s1+1,fsr2h
 18675  00471A  50DF               	movf	indf2,w,c
 18676  00471C  E1C8               	bnz	l10639
 18677  00471E                     l2376:
 18678  00471E  6A26               	clrf	?_stristr,c
 18679  004720  6A27               	clrf	?_stristr+1,c
 18680  004722                     l2373:
 18681  004722  0012               	return	
 18682  004724                     __end_of_stristr:
 18683                           	opt stack 0
 18684                           tblptru	equ	0xFF8
 18685                           tblptrh	equ	0xFF7
 18686                           tblptrl	equ	0xFF6
 18687                           tablat	equ	0xFF5
 18688                           prodh	equ	0xFF4
 18689                           prodl	equ	0xFF3
 18690                           intcon	equ	0xFF2
 18691                           indf0	equ	0xFEF
 18692                           postinc0	equ	0xFEE
 18693                           fsr0h	equ	0xFEA
 18694                           fsr0l	equ	0xFE9
 18695                           wreg	equ	0xFE8
 18696                           indf1	equ	0xFE7
 18697                           postinc1	equ	0xFE6
 18698                           postdec1	equ	0xFE5
 18699                           fsr1h	equ	0xFE2
 18700                           fsr1l	equ	0xFE1
 18701                           indf2	equ	0xFDF
 18702                           postinc2	equ	0xFDE
 18703                           postdec2	equ	0xFDD
 18704                           plusw2	equ	0xFDB
 18705                           fsr2h	equ	0xFDA
 18706                           fsr2l	equ	0xFD9
 18707                           status	equ	0xFD8
 18708                           
 18709 ;; *************** function _strichr *****************
 18710 ;; Defined at:
 18711 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 18712 ;; Parameters:    Size  Location     Type
 18713 ;;  ptr             2   25[COMRAM] PTR const unsigned char 
 18714 ;;		 -> NULL(0), cmdbuf(80), 
 18715 ;;  chr             2   27[COMRAM] int 
 18716 ;; Auto vars:     Size  Location     Type
 18717 ;;		None
 18718 ;; Return value:  Size  Location     Type
 18719 ;;                  2   25[COMRAM] PTR unsigned char 
 18720 ;; Registers used:
 18721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18722 ;; Tracked objects:
 18723 ;;		On entry : 0/1
 18724 ;;		On exit  : 0/0
 18725 ;;		Unchanged: 0/0
 18726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18727 ;;      Params:         4       0       0       0       0       0       0
 18728 ;;      Locals:         0       0       0       0       0       0       0
 18729 ;;      Temps:          0       0       0       0       0       0       0
 18730 ;;      Totals:         4       0       0       0       0       0       0
 18731 ;;Total ram usage:        4 bytes
 18732 ;; Hardware stack levels used:    1
 18733 ;; Hardware stack levels required when called:    3
 18734 ;; This function calls:
 18735 ;;		_toupper
 18736 ;; This function is called by:
 18737 ;;		_stristr
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text45
 18742  004E3E                     __ptext45:
 18743                           	opt stack 0
 18744  004E3E                     _strichr:
 18745                           	opt stack 25
 18746                           
 18747                           ;incstack = 0
 18748                           ;incstack = 0
 18749  004E3E  501C               	movf	strichr@chr,w,c
 18750  004E40  EC94  F028         	call	_toupper
 18751  004E44  6E1C               	movwf	strichr@chr,c
 18752  004E46  6A1D               	clrf	strichr@chr+1,c
 18753  004E48  D010               	goto	l12409
 18754  004E4A                     l12403:
 18755  004E4A  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18756  004E4E  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18757  004E52  50DF               	movf	indf2,w,c
 18758  004E54  EC94  F028         	call	_toupper
 18759  004E58  181C               	xorwf	strichr@chr,w,c
 18760  004E5A  E105               	bnz	l12407
 18761  004E5C  C01A  F01A         	movff	strichr@ptr,?_strichr
 18762  004E60  C01B  F01B         	movff	strichr@ptr+1,?_strichr+1
 18763  004E64  D00A               	goto	l2440
 18764  004E66                     l12407:
 18765  004E66  4A1A               	infsnz	strichr@ptr,f,c
 18766  004E68  2A1B               	incf	strichr@ptr+1,f,c
 18767  004E6A                     l12409:
 18768  004E6A  C01A  FFD9         	movff	strichr@ptr,fsr2l
 18769  004E6E  C01B  FFDA         	movff	strichr@ptr+1,fsr2h
 18770  004E72  50DF               	movf	indf2,w,c
 18771  004E74  E1EA               	bnz	l12403
 18772  004E76  6A1A               	clrf	?_strichr,c
 18773  004E78  6A1B               	clrf	?_strichr+1,c
 18774  004E7A                     l2440:
 18775  004E7A  0012               	return	
 18776  004E7C                     __end_of_strichr:
 18777                           	opt stack 0
 18778                           tblptru	equ	0xFF8
 18779                           tblptrh	equ	0xFF7
 18780                           tblptrl	equ	0xFF6
 18781                           tablat	equ	0xFF5
 18782                           prodh	equ	0xFF4
 18783                           prodl	equ	0xFF3
 18784                           intcon	equ	0xFF2
 18785                           indf0	equ	0xFEF
 18786                           postinc0	equ	0xFEE
 18787                           fsr0h	equ	0xFEA
 18788                           fsr0l	equ	0xFE9
 18789                           wreg	equ	0xFE8
 18790                           indf1	equ	0xFE7
 18791                           postinc1	equ	0xFE6
 18792                           postdec1	equ	0xFE5
 18793                           fsr1h	equ	0xFE2
 18794                           fsr1l	equ	0xFE1
 18795                           indf2	equ	0xFDF
 18796                           postinc2	equ	0xFDE
 18797                           postdec2	equ	0xFDD
 18798                           plusw2	equ	0xFDB
 18799                           fsr2h	equ	0xFDA
 18800                           fsr2l	equ	0xFD9
 18801                           status	equ	0xFD8
 18802                           
 18803 ;; *************** function _strnicmp *****************
 18804 ;; Defined at:
 18805 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 18806 ;; Parameters:    Size  Location     Type
 18807 ;;  s1              2   28[COMRAM] PTR const unsigned char 
 18808 ;;		 -> NULL(0), cmdbuf(80), 
 18809 ;;  s2              2   30[COMRAM] PTR const unsigned char 
 18810 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 18811 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 18812 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 18813 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 18814 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 18815 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 18816 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 18817 ;;		 -> STR_7(5), STR_5(5), 
 18818 ;;  len             2   32[COMRAM] unsigned int 
 18819 ;; Auto vars:     Size  Location     Type
 18820 ;;  r               1   36[COMRAM] char 
 18821 ;; Return value:  Size  Location     Type
 18822 ;;                  2   28[COMRAM] int 
 18823 ;; Registers used:
 18824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18825 ;; Tracked objects:
 18826 ;;		On entry : 0/1
 18827 ;;		On exit  : 0/0
 18828 ;;		Unchanged: 0/0
 18829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18830 ;;      Params:         6       0       0       0       0       0       0
 18831 ;;      Locals:         1       0       0       0       0       0       0
 18832 ;;      Temps:          2       0       0       0       0       0       0
 18833 ;;      Totals:         9       0       0       0       0       0       0
 18834 ;;Total ram usage:        9 bytes
 18835 ;; Hardware stack levels used:    1
 18836 ;; Hardware stack levels required when called:    3
 18837 ;; This function calls:
 18838 ;;		_toupper
 18839 ;; This function is called by:
 18840 ;;		_stristr
 18841 ;; This function uses a non-reentrant model
 18842 ;;
 18843                           
 18844                           	psect	text46
 18845  00495A                     __ptext46:
 18846                           	opt stack 0
 18847  00495A                     _strnicmp:
 18848                           	opt stack 25
 18849                           
 18850                           ;incstack = 0
 18851                           ;incstack = 0
 18852  00495A  D026               	goto	l12399
 18853  00495C                     l12389:
 18854  00495C  C01F  FFF6         	movff	strnicmp@s2,tblptrl
 18855  004960  C020  FFF7         	movff	strnicmp@s2+1,tblptrh
 18856  004964  0008               	tblrd		*
 18857  004966  50F5               	movf	tablat,w,c
 18858  004968  EC94  F028         	call	_toupper
 18859  00496C  6E23               	movwf	??_strnicmp& (0+255),c
 18860  00496E  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18861  004972  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18862  004976  50DF               	movf	indf2,w,c
 18863  004978  EC94  F028         	call	_toupper
 18864  00497C  6E24               	movwf	(??_strnicmp+1)& (0+255),c
 18865  00497E  5023               	movf	??_strnicmp,w,c
 18866  004980  5C24               	subwf	??_strnicmp+1,w,c
 18867  004982  6E25               	movwf	strnicmp@r,c
 18868  004984  6625               	tstfsz	strnicmp@r& (0+255),c
 18869  004986  D006               	goto	l12393
 18870  004988  C01D  FFD9         	movff	strnicmp@s1,fsr2l
 18871  00498C  C01E  FFDA         	movff	strnicmp@s1+1,fsr2h
 18872  004990  50DF               	movf	indf2,w,c
 18873  004992  E106               	bnz	l12397
 18874  004994                     l12393:
 18875  004994  5025               	movf	strnicmp@r,w,c
 18876  004996  6E1D               	movwf	?_strnicmp,c
 18877  004998  6A1E               	clrf	?_strnicmp+1,c
 18878  00499A  BE1D               	btfsc	?_strnicmp,7,c
 18879  00499C  061E               	decf	?_strnicmp+1,f,c
 18880  00499E  D00D               	goto	l2392
 18881  0049A0                     l12397:
 18882  0049A0  4A1D               	infsnz	strnicmp@s1,f,c
 18883  0049A2  2A1E               	incf	strnicmp@s1+1,f,c
 18884  0049A4  4A1F               	infsnz	strnicmp@s2,f,c
 18885  0049A6  2A20               	incf	strnicmp@s2+1,f,c
 18886  0049A8                     l12399:
 18887  0049A8  0621               	decf	strnicmp@len,f,c
 18888  0049AA  A0D8               	btfss	status,0,c
 18889  0049AC  0622               	decf	strnicmp@len+1,f,c
 18890  0049AE  2821               	incf	strnicmp@len& (0+255),w,c
 18891  0049B0  B4D8               	btfsc	status,2,c
 18892  0049B2  2822               	incf	(strnicmp@len+1)& (0+255),w,c
 18893  0049B4  E1D3               	bnz	l12389
 18894  0049B6  6A1D               	clrf	?_strnicmp,c
 18895  0049B8  6A1E               	clrf	?_strnicmp+1,c
 18896  0049BA                     l2392:
 18897  0049BA  0012               	return	
 18898  0049BC                     __end_of_strnicmp:
 18899                           	opt stack 0
 18900                           tblptru	equ	0xFF8
 18901                           tblptrh	equ	0xFF7
 18902                           tblptrl	equ	0xFF6
 18903                           tablat	equ	0xFF5
 18904                           prodh	equ	0xFF4
 18905                           prodl	equ	0xFF3
 18906                           intcon	equ	0xFF2
 18907                           indf0	equ	0xFEF
 18908                           postinc0	equ	0xFEE
 18909                           fsr0h	equ	0xFEA
 18910                           fsr0l	equ	0xFE9
 18911                           wreg	equ	0xFE8
 18912                           indf1	equ	0xFE7
 18913                           postinc1	equ	0xFE6
 18914                           postdec1	equ	0xFE5
 18915                           fsr1h	equ	0xFE2
 18916                           fsr1l	equ	0xFE1
 18917                           indf2	equ	0xFDF
 18918                           postinc2	equ	0xFDE
 18919                           postdec2	equ	0xFDD
 18920                           plusw2	equ	0xFDB
 18921                           fsr2h	equ	0xFDA
 18922                           fsr2l	equ	0xFD9
 18923                           status	equ	0xFD8
 18924                           
 18925 ;; *************** function _toupper *****************
 18926 ;; Defined at:
 18927 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 18928 ;; Parameters:    Size  Location     Type
 18929 ;;  c               1    wreg     unsigned char 
 18930 ;; Auto vars:     Size  Location     Type
 18931 ;;  c               1   24[COMRAM] unsigned char 
 18932 ;; Return value:  Size  Location     Type
 18933 ;;                  1    wreg      unsigned char 
 18934 ;; Registers used:
 18935 ;;		wreg, status,2, status,0
 18936 ;; Tracked objects:
 18937 ;;		On entry : 0/1
 18938 ;;		On exit  : 0/0
 18939 ;;		Unchanged: 0/0
 18940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18941 ;;      Params:         0       0       0       0       0       0       0
 18942 ;;      Locals:         1       0       0       0       0       0       0
 18943 ;;      Temps:          0       0       0       0       0       0       0
 18944 ;;      Totals:         1       0       0       0       0       0       0
 18945 ;;Total ram usage:        1 bytes
 18946 ;; Hardware stack levels used:    1
 18947 ;; Hardware stack levels required when called:    2
 18948 ;; This function calls:
 18949 ;;		Nothing
 18950 ;; This function is called by:
 18951 ;;		_strnicmp
 18952 ;;		_strichr
 18953 ;; This function uses a non-reentrant model
 18954 ;;
 18955                           
 18956                           	psect	text47
 18957  005128                     __ptext47:
 18958                           	opt stack 0
 18959  005128                     _toupper:
 18960                           	opt stack 25
 18961                           
 18962                           ;incstack = 0
 18963                           ;incstack = 0
 18964                           ;toupper@c stored from wreg
 18965  005128  CFE8 F019          	movff	wreg,toupper@c
 18966  00512C  0E7B               	movlw	123
 18967  00512E  6019               	cpfslt	toupper@c,c
 18968  005130  D004               	goto	l12417
 18969  005132  0E60               	movlw	96
 18970  005134  6419               	cpfsgt	toupper@c,c
 18971  005136  D001               	goto	l12417
 18972  005138  9A19               	bcf	toupper@c,5,c
 18973  00513A                     l12417:
 18974  00513A  5019               	movf	toupper@c,w,c
 18975  00513C  0012               	return	
 18976  00513E                     __end_of_toupper:
 18977                           	opt stack 0
 18978                           tblptru	equ	0xFF8
 18979                           tblptrh	equ	0xFF7
 18980                           tblptrl	equ	0xFF6
 18981                           tablat	equ	0xFF5
 18982                           prodh	equ	0xFF4
 18983                           prodl	equ	0xFF3
 18984                           intcon	equ	0xFF2
 18985                           indf0	equ	0xFEF
 18986                           postinc0	equ	0xFEE
 18987                           fsr0h	equ	0xFEA
 18988                           fsr0l	equ	0xFE9
 18989                           wreg	equ	0xFE8
 18990                           indf1	equ	0xFE7
 18991                           postinc1	equ	0xFE6
 18992                           postdec1	equ	0xFE5
 18993                           fsr1h	equ	0xFE2
 18994                           fsr1l	equ	0xFE1
 18995                           indf2	equ	0xFDF
 18996                           postinc2	equ	0xFDE
 18997                           postdec2	equ	0xFDD
 18998                           plusw2	equ	0xFDB
 18999                           fsr2h	equ	0xFDA
 19000                           fsr2l	equ	0xFD9
 19001                           status	equ	0xFD8
 19002                           
 19003 ;; *************** function _strlen *****************
 19004 ;; Defined at:
 19005 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 19006 ;; Parameters:    Size  Location     Type
 19007 ;;  s               2   24[COMRAM] PTR const unsigned char 
 19008 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19009 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19010 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19011 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19012 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19013 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19014 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19015 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19016 ;;		 -> cmdbuf(80), 
 19017 ;; Auto vars:     Size  Location     Type
 19018 ;;  cp              2   26[COMRAM] PTR const unsigned char 
 19019 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19020 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19021 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19022 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19023 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19024 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19025 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19026 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19027 ;;		 -> cmdbuf(80), 
 19028 ;; Return value:  Size  Location     Type
 19029 ;;                  2   24[COMRAM] unsigned int 
 19030 ;; Registers used:
 19031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19032 ;; Tracked objects:
 19033 ;;		On entry : 0/1
 19034 ;;		On exit  : 0/0
 19035 ;;		Unchanged: 0/0
 19036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19037 ;;      Params:         2       0       0       0       0       0       0
 19038 ;;      Locals:         2       0       0       0       0       0       0
 19039 ;;      Temps:          0       0       0       0       0       0       0
 19040 ;;      Totals:         4       0       0       0       0       0       0
 19041 ;;Total ram usage:        4 bytes
 19042 ;; Hardware stack levels used:    1
 19043 ;; Hardware stack levels required when called:    2
 19044 ;; This function calls:
 19045 ;;		Nothing
 19046 ;; This function is called by:
 19047 ;;		_doModeSLCAN
 19048 ;;		_receivePrintEventSLCAN
 19049 ;;		_printGUID
 19050 ;;		_hexStringToBytes
 19051 ;;		_stristr
 19052 ;; This function uses a non-reentrant model
 19053 ;;
 19054                           
 19055                           	psect	text48
 19056  004EBA                     __ptext48:
 19057                           	opt stack 0
 19058  004EBA                     _strlen:
 19059                           	opt stack 26
 19060                           
 19061                           ;incstack = 0
 19062                           ;incstack = 0
 19063  004EBA  C019  F01B         	movff	strlen@s,strlen@cp
 19064  004EBE  C01A  F01C         	movff	strlen@s+1,strlen@cp+1
 19065  004EC2  D002               	goto	l11785
 19066  004EC4                     l11783:
 19067  004EC4  4A1B               	infsnz	strlen@cp,f,c
 19068  004EC6  2A1C               	incf	strlen@cp+1,f,c
 19069  004EC8                     l11785:
 19070  004EC8  501B               	movf	strlen@cp,w,c
 19071  004ECA  6EF6               	movwf	tblptrl,c
 19072  004ECC  6EE9               	movwf	fsr0l,c
 19073  004ECE  0E05               	movlw	(high __ramtop+-1)
 19074  004ED0  6EEA               	movwf	fsr0h,c
 19075  004ED2  501C               	movf	strlen@cp+1,w,c
 19076  004ED4  64EA               	cpfsgt	fsr0h,c
 19077  004ED6  D003               	bra	u15167
 19078  004ED8  6EEA               	movwf	fsr0h,c
 19079  004EDA  50EF               	movf	indf0,w,c
 19080  004EDC  D003               	bra	u15160
 19081  004EDE                     u15167:
 19082  004EDE  6EF7               	movwf	tblptrh,c
 19083  004EE0  0008               	tblrd		*
 19084  004EE2  50F5               	movf	tablat,w,c
 19085  004EE4                     u15160:
 19086  004EE4  0900               	iorlw	0
 19087  004EE6  E1EE               	bnz	l11783
 19088  004EE8  5019               	movf	strlen@s,w,c
 19089  004EEA  5C1B               	subwf	strlen@cp,w,c
 19090  004EEC  6E19               	movwf	?_strlen,c
 19091  004EEE  501A               	movf	strlen@s+1,w,c
 19092  004EF0  581C               	subwfb	strlen@cp+1,w,c
 19093  004EF2  6E1A               	movwf	?_strlen+1,c
 19094  004EF4  0012               	return	
 19095  004EF6                     __end_of_strlen:
 19096                           	opt stack 0
 19097                           tblptru	equ	0xFF8
 19098                           tblptrh	equ	0xFF7
 19099                           tblptrl	equ	0xFF6
 19100                           tablat	equ	0xFF5
 19101                           prodh	equ	0xFF4
 19102                           prodl	equ	0xFF3
 19103                           intcon	equ	0xFF2
 19104                           indf0	equ	0xFEF
 19105                           postinc0	equ	0xFEE
 19106                           fsr0h	equ	0xFEA
 19107                           fsr0l	equ	0xFE9
 19108                           wreg	equ	0xFE8
 19109                           indf1	equ	0xFE7
 19110                           postinc1	equ	0xFE6
 19111                           postdec1	equ	0xFE5
 19112                           fsr1h	equ	0xFE2
 19113                           fsr1l	equ	0xFE1
 19114                           indf2	equ	0xFDF
 19115                           postinc2	equ	0xFDE
 19116                           postdec2	equ	0xFDD
 19117                           plusw2	equ	0xFDB
 19118                           fsr2h	equ	0xFDA
 19119                           fsr2l	equ	0xFD9
 19120                           status	equ	0xFD8
 19121                           
 19122 ;; *************** function _receivePrintEventVerbose *****************
 19123 ;; Defined at:
 19124 ;;		line 1625 in file "main.c"
 19125 ;; Parameters:    Size  Location     Type
 19126 ;;		None
 19127 ;; Auto vars:     Size  Location     Type
 19128 ;;  i               1   44[BANK0 ] unsigned char 
 19129 ;; Return value:  Size  Location     Type
 19130 ;;                  1    wreg      enum E15660
 19131 ;; Registers used:
 19132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 19133 ;; Tracked objects:
 19134 ;;		On entry : F/0
 19135 ;;		On exit  : 0/0
 19136 ;;		Unchanged: 0/0
 19137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19138 ;;      Params:         0       0       0       0       0       0       0
 19139 ;;      Locals:         0      13       0       0       0       0       0
 19140 ;;      Temps:          0       5       0       0       0       0       0
 19141 ;;      Totals:         0      18       0       0       0       0       0
 19142 ;;Total ram usage:       18 bytes
 19143 ;; Hardware stack levels used:    1
 19144 ;; Hardware stack levels required when called:    6
 19145 ;; This function calls:
 19146 ;;		_putsUSART
 19147 ;;		_sprintf
 19148 ;;		_getVSCPFrame
 19149 ;; This function is called by:
 19150 ;;		_doModeVerbose
 19151 ;; This function uses a non-reentrant model
 19152 ;;
 19153                           
 19154                           	psect	text49
 19155  0021E6                     __ptext49:
 19156                           	opt stack 0
 19157  0021E6                     _receivePrintEventVerbose:
 19158                           	opt stack 23
 19159                           
 19160                           ; BSR set to: 0
 19161                           ;main.c: 1626: uint8_t i;
 19162                           ;main.c: 1628: if ( getVSCPFrame(&vscpClass,
 19163                           ;main.c: 1629: &vscpType,
 19164                           ;main.c: 1630: &vscpNodeId,
 19165                           ;main.c: 1631: &vscpPriority,
 19166                           ;main.c: 1632: &vscpSize,
 19167                           ;main.c: 1633: vscpData)) {
 19168                           
 19169                           ;incstack = 0
 19170                           ;incstack = 0
 19171  0021E6  0EDF               	movlw	low _vscpType
 19172  0021E8  6F60               	movwf	?_getVSCPFrame& (0+255),b
 19173  0021EA  0EDC               	movlw	low _vscpNodeId
 19174  0021EC  6F61               	movwf	(?_getVSCPFrame+1)& (0+255),b
 19175  0021EE  0EDD               	movlw	low _vscpPriority
 19176  0021F0  6F62               	movwf	(?_getVSCPFrame+2)& (0+255),b
 19177  0021F2  0EDE               	movlw	low _vscpSize
 19178  0021F4  6F63               	movwf	(?_getVSCPFrame+3)& (0+255),b
 19179  0021F6  0E40               	movlw	low _vscpData
 19180  0021F8  6F64               	movwf	(?_getVSCPFrame+4)& (0+255),b
 19181  0021FA  0EDA               	movlw	_vscpClass& (0+255)
 19182  0021FC  ECD3  F022         	call	_getVSCPFrame
 19183  002200  0900               	iorlw	0
 19184  002202  E101 D129          	bz	l13369
 19185                           
 19186                           ;main.c: 1636: cntRxFrames++;
 19187  002206  0101               	movlb	1	; () banked
 19188  002208  2B0C               	incf	_cntRxFrames& (0+255),f,b
 19189  00220A  0E00               	movlw	0
 19190  00220C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 19191  00220E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 19192  002210  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 19193                           
 19194                           ;main.c: 1637: cntRxBytes += vscpSize;
 19195  002212  0100               	movlb	0	; () banked
 19196  002214  51DE               	movf	_vscpSize& (0+255),w,b
 19197  002216  0101               	movlb	1	; () banked
 19198  002218  2708               	addwf	_cntRxBytes& (0+255),f,b
 19199  00221A  0E00               	movlw	0
 19200  00221C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 19201  00221E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 19202  002220  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 19203                           
 19204                           ; BSR set to: 1
 19205                           ;main.c: 1639: putsUSART((char *) "<Prio=");
 19206  002222  0E7F               	movlw	high STR_130
 19207  002224  6E1B               	movwf	?_putsUSART+1,c
 19208  002226  0E41               	movlw	low STR_130
 19209  002228  6E1A               	movwf	?_putsUSART,c
 19210  00222A  ECC1  F025         	call	_putsUSART	;wreg free
 19211                           
 19212                           ;main.c: 1640: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority );
 19213  00222E  0100               	movlb	0	; () banked
 19214  002230  67D3               	tstfsz	_bHex& (0+255),b
 19215  002232  D004               	goto	l13287
 19216                           
 19217                           ; BSR set to: 0
 19218  002234  0E7F               	movlw	high STR_53
 19219  002236  6F81               	movwf	(_receivePrintEventVerbose$1226+1)& (0+255),b
 19220  002238  0EED               	movlw	low STR_53
 19221  00223A  D003               	goto	L26
 19222  00223C                     l13287:
 19223                           
 19224                           ; BSR set to: 0
 19225  00223C  0E7F               	movlw	high STR_52
 19226  00223E  6F81               	movwf	(_receivePrintEventVerbose$1226+1)& (0+255),b
 19227  002240  0E64               	movlw	low STR_52
 19228  002242                     L26:
 19229  002242  6F80               	movwf	_receivePrintEventVerbose$1226& (0+255),b
 19230                           
 19231                           ; BSR set to: 0
 19232  002244  0E01               	movlw	high _wrkbuf
 19233  002246  0100               	movlb	0	; () banked
 19234  002248  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19235  00224A  0E70               	movlw	low _wrkbuf
 19236  00224C  6F60               	movwf	?_sprintf& (0+255),b
 19237  00224E  C080  F062         	movff	_receivePrintEventVerbose$1226,?_sprintf+2
 19238  002252  C081  F063         	movff	_receivePrintEventVerbose$1226+1,?_sprintf+3
 19239  002256  C0DD  F064         	movff	_vscpPriority,?_sprintf+4
 19240  00225A  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19241  00225C  EC33  F00A         	call	_sprintf	;wreg free
 19242                           
 19243                           ; BSR set to: 0
 19244                           ;main.c: 1641: putsUSART(wrkbuf);
 19245  002260  0101               	movlb	1	; () banked
 19246  002262  0E01               	movlw	high _wrkbuf
 19247  002264  6E1B               	movwf	?_putsUSART+1,c
 19248  002266  0E70               	movlw	low _wrkbuf
 19249  002268  6E1A               	movwf	?_putsUSART,c
 19250  00226A  ECC1  F025         	call	_putsUSART	;wreg free
 19251                           
 19252                           ;main.c: 1642: putsUSART((char *) ",class=");
 19253  00226E  0E7E               	movlw	high STR_133
 19254  002270  6E1B               	movwf	?_putsUSART+1,c
 19255  002272  0EF5               	movlw	low STR_133
 19256  002274  6E1A               	movwf	?_putsUSART,c
 19257  002276  ECC1  F025         	call	_putsUSART	;wreg free
 19258                           
 19259                           ;main.c: 1643: sprintf( wrkbuf, bHex ? "0x%04X" : "%d", vscpClass );
 19260  00227A  0100               	movlb	0	; () banked
 19261  00227C  67D3               	tstfsz	_bHex& (0+255),b
 19262  00227E  D004               	goto	l13299
 19263                           
 19264                           ; BSR set to: 0
 19265  002280  0E7F               	movlw	high STR_53
 19266  002282  6F83               	movwf	(_receivePrintEventVerbose$1231+1)& (0+255),b
 19267  002284  0EED               	movlw	low STR_53
 19268  002286  D003               	goto	L27
 19269  002288                     l13299:
 19270                           
 19271                           ; BSR set to: 0
 19272  002288  0E7F               	movlw	high STR_134
 19273  00228A  6F83               	movwf	(_receivePrintEventVerbose$1231+1)& (0+255),b
 19274  00228C  0E6B               	movlw	low STR_134
 19275  00228E                     L27:
 19276  00228E  6F82               	movwf	_receivePrintEventVerbose$1231& (0+255),b
 19277                           
 19278                           ; BSR set to: 0
 19279  002290  0E01               	movlw	high _wrkbuf
 19280  002292  0100               	movlb	0	; () banked
 19281  002294  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19282  002296  0E70               	movlw	low _wrkbuf
 19283  002298  6F60               	movwf	?_sprintf& (0+255),b
 19284  00229A  C082  F062         	movff	_receivePrintEventVerbose$1231,?_sprintf+2
 19285  00229E  C083  F063         	movff	_receivePrintEventVerbose$1231+1,?_sprintf+3
 19286  0022A2  C0DA  F064         	movff	_vscpClass,?_sprintf+4
 19287  0022A6  C0DB  F065         	movff	_vscpClass+1,?_sprintf+5
 19288  0022AA  EC33  F00A         	call	_sprintf	;wreg free
 19289                           
 19290                           ; BSR set to: 0
 19291                           ;main.c: 1644: putsUSART(wrkbuf);
 19292  0022AE  0101               	movlb	1	; () banked
 19293  0022B0  0E01               	movlw	high _wrkbuf
 19294  0022B2  6E1B               	movwf	?_putsUSART+1,c
 19295  0022B4  0E70               	movlw	low _wrkbuf
 19296  0022B6  6E1A               	movwf	?_putsUSART,c
 19297  0022B8  ECC1  F025         	call	_putsUSART	;wreg free
 19298                           
 19299                           ;main.c: 1645: putsUSART((char *) ",type=");
 19300  0022BC  0E7F               	movlw	high STR_136
 19301  0022BE  6E1B               	movwf	?_putsUSART+1,c
 19302  0022C0  0E33               	movlw	low STR_136
 19303  0022C2  6E1A               	movwf	?_putsUSART,c
 19304  0022C4  ECC1  F025         	call	_putsUSART	;wreg free
 19305                           
 19306                           ;main.c: 1646: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpType );
 19307  0022C8  0100               	movlb	0	; () banked
 19308  0022CA  67D3               	tstfsz	_bHex& (0+255),b
 19309  0022CC  D004               	goto	l13311
 19310                           
 19311                           ; BSR set to: 0
 19312  0022CE  0E7F               	movlw	high STR_53
 19313  0022D0  6F85               	movwf	(_receivePrintEventVerbose$1236+1)& (0+255),b
 19314  0022D2  0EED               	movlw	low STR_53
 19315  0022D4  D003               	goto	L28
 19316  0022D6                     l13311:
 19317                           
 19318                           ; BSR set to: 0
 19319  0022D6  0E7F               	movlw	high STR_52
 19320  0022D8  6F85               	movwf	(_receivePrintEventVerbose$1236+1)& (0+255),b
 19321  0022DA  0E64               	movlw	low STR_52
 19322  0022DC                     L28:
 19323  0022DC  6F84               	movwf	_receivePrintEventVerbose$1236& (0+255),b
 19324                           
 19325                           ; BSR set to: 0
 19326  0022DE  0E01               	movlw	high _wrkbuf
 19327  0022E0  0100               	movlb	0	; () banked
 19328  0022E2  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19329  0022E4  0E70               	movlw	low _wrkbuf
 19330  0022E6  6F60               	movwf	?_sprintf& (0+255),b
 19331  0022E8  C084  F062         	movff	_receivePrintEventVerbose$1236,?_sprintf+2
 19332  0022EC  C085  F063         	movff	_receivePrintEventVerbose$1236+1,?_sprintf+3
 19333  0022F0  C0DF  F064         	movff	_vscpType,?_sprintf+4
 19334  0022F4  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19335  0022F6  EC33  F00A         	call	_sprintf	;wreg free
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;main.c: 1647: putsUSART(wrkbuf);
 19339  0022FA  0101               	movlb	1	; () banked
 19340  0022FC  0E01               	movlw	high _wrkbuf
 19341  0022FE  6E1B               	movwf	?_putsUSART+1,c
 19342  002300  0E70               	movlw	low _wrkbuf
 19343  002302  6E1A               	movwf	?_putsUSART,c
 19344  002304  ECC1  F025         	call	_putsUSART	;wreg free
 19345                           
 19346                           ;main.c: 1648: putsUSART((char *) ",nodeid=");
 19347  002308  0E7E               	movlw	high STR_139
 19348  00230A  6E1B               	movwf	?_putsUSART+1,c
 19349  00230C  0EC3               	movlw	low STR_139
 19350  00230E  6E1A               	movwf	?_putsUSART,c
 19351  002310  ECC1  F025         	call	_putsUSART	;wreg free
 19352                           
 19353                           ;main.c: 1649: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId );
 19354  002314  0100               	movlb	0	; () banked
 19355  002316  67D3               	tstfsz	_bHex& (0+255),b
 19356  002318  D004               	goto	l13323
 19357                           
 19358                           ; BSR set to: 0
 19359  00231A  0E7F               	movlw	high STR_53
 19360  00231C  6F87               	movwf	(_receivePrintEventVerbose$1241+1)& (0+255),b
 19361  00231E  0EED               	movlw	low STR_53
 19362  002320  D003               	goto	L29
 19363  002322                     l13323:
 19364                           
 19365                           ; BSR set to: 0
 19366  002322  0E7F               	movlw	high STR_52
 19367  002324  6F87               	movwf	(_receivePrintEventVerbose$1241+1)& (0+255),b
 19368  002326  0E64               	movlw	low STR_52
 19369  002328                     L29:
 19370  002328  6F86               	movwf	_receivePrintEventVerbose$1241& (0+255),b
 19371                           
 19372                           ; BSR set to: 0
 19373  00232A  0E01               	movlw	high _wrkbuf
 19374  00232C  0100               	movlb	0	; () banked
 19375  00232E  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19376  002330  0E70               	movlw	low _wrkbuf
 19377  002332  6F60               	movwf	?_sprintf& (0+255),b
 19378  002334  C086  F062         	movff	_receivePrintEventVerbose$1241,?_sprintf+2
 19379  002338  C087  F063         	movff	_receivePrintEventVerbose$1241+1,?_sprintf+3
 19380  00233C  C0DC  F064         	movff	_vscpNodeId,?_sprintf+4
 19381  002340  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19382  002342  EC33  F00A         	call	_sprintf	;wreg free
 19383                           
 19384                           ; BSR set to: 0
 19385                           ;main.c: 1650: putsUSART(wrkbuf);
 19386  002346  0101               	movlb	1	; () banked
 19387  002348  0E01               	movlw	high _wrkbuf
 19388  00234A  6E1B               	movwf	?_putsUSART+1,c
 19389  00234C  0E70               	movlw	low _wrkbuf
 19390  00234E  6E1A               	movwf	?_putsUSART,c
 19391  002350  ECC1  F025         	call	_putsUSART	;wreg free
 19392                           
 19393                           ;main.c: 1651: putsUSART((char *) ",size=");
 19394  002354  0E7F               	movlw	high STR_142
 19395  002356  6E1B               	movwf	?_putsUSART+1,c
 19396  002358  0E3A               	movlw	low STR_142
 19397  00235A  6E1A               	movwf	?_putsUSART,c
 19398  00235C  ECC1  F025         	call	_putsUSART	;wreg free
 19399                           
 19400                           ;main.c: 1652: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpSize );
 19401  002360  0100               	movlb	0	; () banked
 19402  002362  67D3               	tstfsz	_bHex& (0+255),b
 19403  002364  D004               	goto	l13335
 19404                           
 19405                           ; BSR set to: 0
 19406  002366  0E7F               	movlw	high STR_53
 19407  002368  6F89               	movwf	(_receivePrintEventVerbose$1246+1)& (0+255),b
 19408  00236A  0EED               	movlw	low STR_53
 19409  00236C  D003               	goto	L30
 19410  00236E                     l13335:
 19411                           
 19412                           ; BSR set to: 0
 19413  00236E  0E7F               	movlw	high STR_52
 19414  002370  6F89               	movwf	(_receivePrintEventVerbose$1246+1)& (0+255),b
 19415  002372  0E64               	movlw	low STR_52
 19416  002374                     L30:
 19417  002374  6F88               	movwf	_receivePrintEventVerbose$1246& (0+255),b
 19418                           
 19419                           ; BSR set to: 0
 19420  002376  0E01               	movlw	high _wrkbuf
 19421  002378  0100               	movlb	0	; () banked
 19422  00237A  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19423  00237C  0E70               	movlw	low _wrkbuf
 19424  00237E  6F60               	movwf	?_sprintf& (0+255),b
 19425  002380  C088  F062         	movff	_receivePrintEventVerbose$1246,?_sprintf+2
 19426  002384  C089  F063         	movff	_receivePrintEventVerbose$1246+1,?_sprintf+3
 19427  002388  C0DE  F064         	movff	_vscpSize,?_sprintf+4
 19428  00238C  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19429  00238E  EC33  F00A         	call	_sprintf	;wreg free
 19430                           
 19431                           ; BSR set to: 0
 19432                           ;main.c: 1653: putsUSART(wrkbuf);
 19433  002392  0101               	movlb	1	; () banked
 19434  002394  0E01               	movlw	high _wrkbuf
 19435  002396  6E1B               	movwf	?_putsUSART+1,c
 19436  002398  0E70               	movlw	low _wrkbuf
 19437  00239A  6E1A               	movwf	?_putsUSART,c
 19438  00239C  ECC1  F025         	call	_putsUSART	;wreg free
 19439                           
 19440                           ;main.c: 1654: if (vscpSize > 0) {
 19441  0023A0  0100               	movlb	0	; () banked
 19442  0023A2  51DE               	movf	_vscpSize& (0+255),w,b
 19443  0023A4  E04B               	bz	l13363
 19444                           
 19445                           ; BSR set to: 0
 19446                           ;main.c: 1655: putsUSART((char *) ",Data=");
 19447  0023A6  0E7F               	movlw	high STR_145
 19448  0023A8  6E1B               	movwf	?_putsUSART+1,c
 19449  0023AA  0E2C               	movlw	low STR_145
 19450  0023AC  6E1A               	movwf	?_putsUSART,c
 19451  0023AE  ECC1  F025         	call	_putsUSART	;wreg free
 19452                           
 19453                           ;main.c: 1656: for (i = 0; i < vscpSize; i++) {
 19454  0023B2  0100               	movlb	0	; () banked
 19455  0023B4  6B8C               	clrf	receivePrintEventVerbose@i& (0+255),b
 19456  0023B6  D03E               	goto	l13361
 19457  0023B8                     l864:
 19458                           
 19459                           ; BSR set to: 0
 19460                           ;main.c: 1658: sprintf( wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i] );
 19461  0023B8  67D3               	tstfsz	_bHex& (0+255),b
 19462  0023BA  D004               	goto	l13349
 19463                           
 19464                           ; BSR set to: 0
 19465  0023BC  0E7F               	movlw	high STR_53
 19466  0023BE  6F8B               	movwf	(_receivePrintEventVerbose$1251+1)& (0+255),b
 19467  0023C0  0EED               	movlw	low STR_53
 19468  0023C2  D003               	goto	L31
 19469  0023C4                     l13349:
 19470                           
 19471                           ; BSR set to: 0
 19472  0023C4  0E7F               	movlw	high STR_52
 19473  0023C6  6F8B               	movwf	(_receivePrintEventVerbose$1251+1)& (0+255),b
 19474  0023C8  0E64               	movlw	low STR_52
 19475  0023CA                     L31:
 19476  0023CA  6F8A               	movwf	_receivePrintEventVerbose$1251& (0+255),b
 19477                           
 19478                           ; BSR set to: 0
 19479  0023CC  0E01               	movlw	high _wrkbuf
 19480  0023CE  0100               	movlb	0	; () banked
 19481  0023D0  6F61               	movwf	(?_sprintf+1)& (0+255),b
 19482  0023D2  0E70               	movlw	low _wrkbuf
 19483  0023D4  6F60               	movwf	?_sprintf& (0+255),b
 19484  0023D6  C08A  F062         	movff	_receivePrintEventVerbose$1251,?_sprintf+2
 19485  0023DA  C08B  F063         	movff	_receivePrintEventVerbose$1251+1,?_sprintf+3
 19486  0023DE  518C               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19487  0023E0  0F40               	addlw	low _vscpData
 19488  0023E2  6ED9               	movwf	fsr2l,c
 19489  0023E4  6ADA               	clrf	fsr2h,c
 19490  0023E6  50DF               	movf	indf2,w,c
 19491  0023E8  6F64               	movwf	(?_sprintf+4)& (0+255),b
 19492  0023EA  6B65               	clrf	(?_sprintf+5)& (0+255),b
 19493  0023EC  EC33  F00A         	call	_sprintf	;wreg free
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;main.c: 1659: putsUSART(wrkbuf);
 19497  0023F0  0101               	movlb	1	; () banked
 19498  0023F2  0E01               	movlw	high _wrkbuf
 19499  0023F4  6E1B               	movwf	?_putsUSART+1,c
 19500  0023F6  0E70               	movlw	low _wrkbuf
 19501  0023F8  6E1A               	movwf	?_putsUSART,c
 19502  0023FA  ECC1  F025         	call	_putsUSART	;wreg free
 19503                           
 19504                           ;main.c: 1660: if (i < (vscpSize - 1)) {
 19505  0023FE  0EFF               	movlw	255
 19506  002400  0100               	movlb	0	; () banked
 19507  002402  25DE               	addwf	_vscpSize& (0+255),w,b
 19508  002404  6F7B               	movwf	??_receivePrintEventVerbose& (0+255),b
 19509  002406  6B7C               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 19510  002408  0EFF               	movlw	255
 19511  00240A  237C               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 19512  00240C  518C               	movf	receivePrintEventVerbose@i& (0+255),w,b
 19513  00240E  6F7D               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 19514  002410  6B7E               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 19515  002412  517E               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 19516  002414  0A80               	xorlw	128
 19517  002416  6F7F               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 19518  002418  517B               	movf	??_receivePrintEventVerbose& (0+255),w,b
 19519  00241A  5D7D               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 19520  00241C  517C               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 19521  00241E  0A80               	xorlw	128
 19522  002420  597F               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 19523  002422  E206               	bc	l13359
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;main.c: 1661: putsUSART((char *) ",");
 19527  002424  0E7F               	movlw	high STR_29
 19528  002426  6E1B               	movwf	?_putsUSART+1,c
 19529  002428  0EF4               	movlw	low STR_29
 19530  00242A  6E1A               	movwf	?_putsUSART,c
 19531  00242C  ECC1  F025         	call	_putsUSART	;wreg free
 19532  002430                     l13359:
 19533  002430  0100               	movlb	0	; () banked
 19534  002432  2B8C               	incf	receivePrintEventVerbose@i& (0+255),f,b
 19535  002434                     l13361:
 19536                           
 19537                           ; BSR set to: 0
 19538  002434  51DE               	movf	_vscpSize& (0+255),w,b
 19539  002436  5D8C               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 19540  002438  E207               	bc	l871
 19541  00243A  D7BE               	goto	l864
 19542  00243C                     l13363:
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;main.c: 1665: else {
 19546                           ;main.c: 1666: putsUSART((char *) ",Data=none");
 19547  00243C  0E7E               	movlw	high STR_149
 19548  00243E  6E1B               	movwf	?_putsUSART+1,c
 19549  002440  0E91               	movlw	low STR_149
 19550  002442  6E1A               	movwf	?_putsUSART,c
 19551  002444  ECC1  F025         	call	_putsUSART	;wreg free
 19552  002448                     l871:
 19553                           
 19554                           ;main.c: 1667: }
 19555                           ;main.c: 1668: putsUSART((char *) ">\r\n");
 19556  002448  0E7F               	movlw	high STR_150
 19557  00244A  6E1B               	movwf	?_putsUSART+1,c
 19558  00244C  0ED4               	movlw	low STR_150
 19559  00244E  6E1A               	movwf	?_putsUSART,c
 19560  002450  ECC1  F025         	call	_putsUSART	;wreg free
 19561                           
 19562                           ;main.c: 1669: return 1;
 19563  002454  0E01               	movlw	1
 19564  002456  D001               	goto	l872
 19565  002458                     l13369:
 19566                           
 19567                           ;main.c: 1670: }
 19568                           ;main.c: 1672: return 0;
 19569  002458  0E00               	movlw	0
 19570  00245A                     l872:
 19571  00245A  0012               	return	
 19572  00245C                     __end_of_receivePrintEventVerbose:
 19573                           	opt stack 0
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           indf0	equ	0xFEF
 19582                           postinc0	equ	0xFEE
 19583                           fsr0h	equ	0xFEA
 19584                           fsr0l	equ	0xFE9
 19585                           wreg	equ	0xFE8
 19586                           indf1	equ	0xFE7
 19587                           postinc1	equ	0xFE6
 19588                           postdec1	equ	0xFE5
 19589                           fsr1h	equ	0xFE2
 19590                           fsr1l	equ	0xFE1
 19591                           indf2	equ	0xFDF
 19592                           postinc2	equ	0xFDE
 19593                           postdec2	equ	0xFDD
 19594                           plusw2	equ	0xFDB
 19595                           fsr2h	equ	0xFDA
 19596                           fsr2l	equ	0xFD9
 19597                           status	equ	0xFD8
 19598                           
 19599 ;; *************** function _getVSCPFrame *****************
 19600 ;; Defined at:
 19601 ;;		line 2683 in file "main.c"
 19602 ;; Parameters:    Size  Location     Type
 19603 ;;  pvscpclass      1    wreg     PTR unsigned short 
 19604 ;;		 -> vscpClass(2), 
 19605 ;;  pvscptype       1    0[BANK0 ] PTR unsigned char 
 19606 ;;		 -> vscpType(1), 
 19607 ;;  pNodeId         1    1[BANK0 ] PTR unsigned char 
 19608 ;;		 -> vscpNodeId(1), 
 19609 ;;  pPriority       1    2[BANK0 ] PTR unsigned char 
 19610 ;;		 -> vscpPriority(1), 
 19611 ;;  pSize           1    3[BANK0 ] PTR unsigned char 
 19612 ;;		 -> vscpSize(1), 
 19613 ;;  pData           1    4[BANK0 ] PTR unsigned char 
 19614 ;;		 -> vscpData(8), 
 19615 ;; Auto vars:     Size  Location     Type
 19616 ;;  pvscpclass      1    9[BANK0 ] PTR unsigned short 
 19617 ;;		 -> vscpClass(2), 
 19618 ;;  id              4   10[BANK0 ] unsigned long 
 19619 ;; Return value:  Size  Location     Type
 19620 ;;                  1    wreg      unsigned char 
 19621 ;; Registers used:
 19622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 19623 ;; Tracked objects:
 19624 ;;		On entry : F/0
 19625 ;;		On exit  : 0/0
 19626 ;;		Unchanged: 0/0
 19627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19628 ;;      Params:         0       5       0       0       0       0       0
 19629 ;;      Locals:         0       5       0       0       0       0       0
 19630 ;;      Temps:          0       4       0       0       0       0       0
 19631 ;;      Totals:         0      14       0       0       0       0       0
 19632 ;;Total ram usage:       14 bytes
 19633 ;; Hardware stack levels used:    1
 19634 ;; Hardware stack levels required when called:    5
 19635 ;; This function calls:
 19636 ;;		_getCANFrame
 19637 ;; This function is called by:
 19638 ;;		_receivePrintEventVerbose
 19639 ;;		_readRegister
 19640 ;;		_readRegisterExtended
 19641 ;;		_writeRegisterExtended
 19642 ;; This function uses a non-reentrant model
 19643 ;;
 19644                           
 19645                           	psect	text50
 19646  0045A6                     __ptext50:
 19647                           	opt stack 0
 19648  0045A6                     _getVSCPFrame:
 19649                           	opt stack 22
 19650                           
 19651                           ;incstack = 0
 19652                           ;incstack = 0
 19653                           ;getVSCPFrame@pvscpclass stored from wreg
 19654  0045A6  CFE8 F069          	movff	wreg,getVSCPFrame@pvscpclass
 19655                           
 19656                           ; BSR set to: 0
 19657                           ;main.c: 2684: uint32_t id;
 19658                           ;main.c: 2686: if ( !getCANFrame( &id, pSize, pData ) ) {
 19659  0045AA  C063  F02C         	movff	getVSCPFrame@pSize,?_getCANFrame
 19660  0045AE  C064  F02D         	movff	getVSCPFrame@pData,?_getCANFrame+1
 19661  0045B2  0E0F               	movlw	15
 19662  0045B4  6E2E               	movwf	?_getCANFrame+2,c
 19663  0045B6  0E5F               	movlw	__accesstop+-1
 19664  0045B8  642D               	cpfsgt	?_getCANFrame+1,c
 19665  0045BA  6A2E               	clrf	?_getCANFrame+2,c
 19666  0045BC  0E6A               	movlw	getVSCPFrame@id& (0+255)
 19667  0045BE  EC1B  F028         	call	_getCANFrame
 19668  0045C2  0900               	iorlw	0
 19669  0045C4  E102               	bnz	l11867
 19670                           
 19671                           ;main.c: 2687: return 0;
 19672  0045C6  0E00               	movlw	0
 19673  0045C8  D02F               	goto	l1156
 19674  0045CA                     l11867:
 19675                           
 19676                           ;main.c: 2688: }
 19677                           ;main.c: 2690: *pNodeId = id & 0x0ff;
 19678  0045CA  0100               	movlb	0	; () banked
 19679  0045CC  5161               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 19680  0045CE  6ED9               	movwf	fsr2l,c
 19681  0045D0  6ADA               	clrf	fsr2h,c
 19682  0045D2  C06A  FFDF         	movff	getVSCPFrame@id,indf2
 19683                           
 19684                           ;main.c: 2691: *pvscptype = (id >> 8) & 0xff;
 19685  0045D6  5160               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 19686  0045D8  6ED9               	movwf	fsr2l,c
 19687  0045DA  6ADA               	clrf	fsr2h,c
 19688  0045DC  C06B  FFDF         	movff	getVSCPFrame@id+1,indf2
 19689                           
 19690                           ; BSR set to: 0
 19691                           ;main.c: 2692: *pvscpclass = (id >> 16) & 0x1ff;
 19692  0045E0  516C               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 19693  0045E2  6F65               	movwf	??_getVSCPFrame& (0+255),b
 19694  0045E4  0E01               	movlw	1
 19695  0045E6  156D               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 19696  0045E8  6F66               	movwf	(??_getVSCPFrame+1)& (0+255),b
 19697  0045EA  5169               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 19698  0045EC  6ED9               	movwf	fsr2l,c
 19699  0045EE  6ADA               	clrf	fsr2h,c
 19700  0045F0  C065  FFDE         	movff	??_getVSCPFrame,postinc2
 19701  0045F4  C066  FFDD         	movff	??_getVSCPFrame+1,postdec2
 19702                           
 19703                           ; BSR set to: 0
 19704                           ;main.c: 2693: *pPriority = (uint16_t) (0x07 & (id >> 26));
 19705  0045F8  5162               	movf	getVSCPFrame@pPriority& (0+255),w,b
 19706  0045FA  6ED9               	movwf	fsr2l,c
 19707  0045FC  6ADA               	clrf	fsr2h,c
 19708  0045FE  C06A  F065         	movff	getVSCPFrame@id,??_getVSCPFrame
 19709  004602  C06B  F066         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 19710  004606  C06C  F067         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 19711  00460A  C06D  F068         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 19712  00460E  0E1B               	movlw	27
 19713  004610  D005               	goto	u15320
 19714  004612                     u15325:
 19715  004612  90D8               	bcf	status,0,c
 19716  004614  3368               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 19717  004616  3367               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 19718  004618  3366               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 19719  00461A  3365               	rrcf	??_getVSCPFrame& (0+255),f,b
 19720  00461C                     u15320:
 19721  00461C  2EE8               	decfsz	wreg,f,c
 19722  00461E  D7F9               	goto	u15325
 19723  004620  5165               	movf	??_getVSCPFrame& (0+255),w,b
 19724  004622  0B07               	andlw	7
 19725  004624  6EDF               	movwf	indf2,c
 19726                           
 19727                           ; BSR set to: 0
 19728                           ;main.c: 2695: return 1;
 19729  004626  0E01               	movlw	1
 19730  004628                     l1156:
 19731  004628  0012               	return	
 19732  00462A                     __end_of_getVSCPFrame:
 19733                           	opt stack 0
 19734                           tblptru	equ	0xFF8
 19735                           tblptrh	equ	0xFF7
 19736                           tblptrl	equ	0xFF6
 19737                           tablat	equ	0xFF5
 19738                           prodh	equ	0xFF4
 19739                           prodl	equ	0xFF3
 19740                           intcon	equ	0xFF2
 19741                           indf0	equ	0xFEF
 19742                           postinc0	equ	0xFEE
 19743                           fsr0h	equ	0xFEA
 19744                           fsr0l	equ	0xFE9
 19745                           wreg	equ	0xFE8
 19746                           indf1	equ	0xFE7
 19747                           postinc1	equ	0xFE6
 19748                           postdec1	equ	0xFE5
 19749                           fsr1h	equ	0xFE2
 19750                           fsr1l	equ	0xFE1
 19751                           indf2	equ	0xFDF
 19752                           postinc2	equ	0xFDE
 19753                           postdec2	equ	0xFDD
 19754                           plusw2	equ	0xFDB
 19755                           fsr2h	equ	0xFDA
 19756                           fsr2l	equ	0xFD9
 19757                           status	equ	0xFD8
 19758                           
 19759 ;; *************** function _getCANFrame *****************
 19760 ;; Defined at:
 19761 ;;		line 2718 in file "main.c"
 19762 ;; Parameters:    Size  Location     Type
 19763 ;;  pid             1    wreg     PTR unsigned long 
 19764 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19765 ;;  pdlc            1   43[COMRAM] PTR unsigned char 
 19766 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19767 ;;  pdata           2   44[COMRAM] PTR unsigned char 
 19768 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19769 ;; Auto vars:     Size  Location     Type
 19770 ;;  pid             1   46[COMRAM] PTR unsigned long 
 19771 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19772 ;;  flags           1   47[COMRAM] enum E16349
 19773 ;; Return value:  Size  Location     Type
 19774 ;;                  1    wreg      unsigned char 
 19775 ;; Registers used:
 19776 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19777 ;; Tracked objects:
 19778 ;;		On entry : F/0
 19779 ;;		On exit  : 0/0
 19780 ;;		Unchanged: 0/0
 19781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19782 ;;      Params:         3       0       0       0       0       0       0
 19783 ;;      Locals:         2       0       0       0       0       0       0
 19784 ;;      Temps:          0       0       0       0       0       0       0
 19785 ;;      Totals:         5       0       0       0       0       0       0
 19786 ;;Total ram usage:        5 bytes
 19787 ;; Hardware stack levels used:    1
 19788 ;; Hardware stack levels required when called:    4
 19789 ;; This function calls:
 19790 ;;		_ECANReceiveMessage
 19791 ;; This function is called by:
 19792 ;;		_receivePrintEventCANAL
 19793 ;;		_receivePrintEventSLCAN
 19794 ;;		_getVSCPFrame
 19795 ;; This function uses a non-reentrant model
 19796 ;;
 19797                           
 19798                           	psect	text51
 19799  005036                     __ptext51:
 19800                           	opt stack 0
 19801  005036                     _getCANFrame:
 19802                           	opt stack 24
 19803                           
 19804                           ;incstack = 0
 19805                           ;incstack = 0
 19806                           ;getCANFrame@pid stored from wreg
 19807  005036  CFE8 F02F          	movff	wreg,getCANFrame@pid
 19808                           
 19809                           ; BSR set to: 0
 19810                           ;main.c: 2720: ECAN_RX_MSG_FLAGS flags;
 19811                           ;main.c: 2722: if ( ECANReceiveMessage((unsigned long *) pid,
 19812                           ;main.c: 2723: (BYTE*)pdata,
 19813                           ;main.c: 2724: (BYTE*) pdlc,
 19814                           ;main.c: 2725: &flags) ) {
 19815  00503A  C02D  F020         	movff	getCANFrame@pdata,?_ECANReceiveMessage
 19816  00503E  C02E  F021         	movff	getCANFrame@pdata+1,?_ECANReceiveMessage+1
 19817  005042  C02C  F022         	movff	getCANFrame@pdlc,?_ECANReceiveMessage+2
 19818  005046  0E30               	movlw	low getCANFrame@flags
 19819  005048  6E23               	movwf	?_ECANReceiveMessage+3,c
 19820  00504A  502F               	movf	getCANFrame@pid,w,c
 19821  00504C  EC2E  F012         	call	_ECANReceiveMessage
 19822  005050  0900               	iorlw	0
 19823  005052  E002               	bz	l11881
 19824                           
 19825                           ;main.c: 2728: if (flags & ECAN_RX_RTR_FRAME) return 0;
 19826  005054  AC30               	btfss	getCANFrame@flags,6,c
 19827  005056  D002               	goto	l1164
 19828  005058                     l11881:
 19829  005058  0E00               	movlw	0
 19830  00505A  D003               	goto	l1165
 19831  00505C                     l1164:
 19832                           
 19833                           ;main.c: 2731: if ( !(flags & ECAN_RX_XTD_FRAME)) return 0;
 19834  00505C  AA30               	btfss	getCANFrame@flags,5,c
 19835  00505E  D7FC               	goto	l11881
 19836                           
 19837                           ;main.c: 2733: return 1;
 19838  005060  0E01               	movlw	1
 19839  005062                     l1165:
 19840  005062  0012               	return	
 19841  005064                     __end_of_getCANFrame:
 19842                           	opt stack 0
 19843                           tblptru	equ	0xFF8
 19844                           tblptrh	equ	0xFF7
 19845                           tblptrl	equ	0xFF6
 19846                           tablat	equ	0xFF5
 19847                           prodh	equ	0xFF4
 19848                           prodl	equ	0xFF3
 19849                           intcon	equ	0xFF2
 19850                           indf0	equ	0xFEF
 19851                           postinc0	equ	0xFEE
 19852                           fsr0h	equ	0xFEA
 19853                           fsr0l	equ	0xFE9
 19854                           wreg	equ	0xFE8
 19855                           indf1	equ	0xFE7
 19856                           postinc1	equ	0xFE6
 19857                           postdec1	equ	0xFE5
 19858                           fsr1h	equ	0xFE2
 19859                           fsr1l	equ	0xFE1
 19860                           indf2	equ	0xFDF
 19861                           postinc2	equ	0xFDE
 19862                           postdec2	equ	0xFDD
 19863                           plusw2	equ	0xFDB
 19864                           fsr2h	equ	0xFDA
 19865                           fsr2l	equ	0xFD9
 19866                           status	equ	0xFD8
 19867                           
 19868 ;; *************** function _ECANReceiveMessage *****************
 19869 ;; Defined at:
 19870 ;;		line 803 in file "ECAN.c"
 19871 ;; Parameters:    Size  Location     Type
 19872 ;;  id              1    wreg     PTR unsigned long 
 19873 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19874 ;;  data            2   31[COMRAM] PTR unsigned char 
 19875 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 19876 ;;  dataLen         1   33[COMRAM] PTR unsigned char 
 19877 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 19878 ;;  msgFlags        1   34[COMRAM] PTR enum E16324
 19879 ;;		 -> getCANFrame@flags(1), 
 19880 ;; Auto vars:     Size  Location     Type
 19881 ;;  id              1   35[COMRAM] PTR unsigned long 
 19882 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 19883 ;;  ptr             2   41[COMRAM] PTR unsigned char 
 19884 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19885 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19886 ;;  savedPtr        2   36[COMRAM] PTR unsigned char 
 19887 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 19888 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 19889 ;;  temp            1   40[COMRAM] struct .
 19890 ;;  mode            1   39[COMRAM] unsigned char 
 19891 ;;  i               1   38[COMRAM] unsigned char 
 19892 ;; Return value:  Size  Location     Type
 19893 ;;                  1    wreg      enum E15660
 19894 ;; Registers used:
 19895 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 19896 ;; Tracked objects:
 19897 ;;		On entry : F/0
 19898 ;;		On exit  : 0/0
 19899 ;;		Unchanged: 0/0
 19900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19901 ;;      Params:         4       0       0       0       0       0       0
 19902 ;;      Locals:         8       0       0       0       0       0       0
 19903 ;;      Temps:          0       0       0       0       0       0       0
 19904 ;;      Totals:        12       0       0       0       0       0       0
 19905 ;;Total ram usage:       12 bytes
 19906 ;; Hardware stack levels used:    1
 19907 ;; Hardware stack levels required when called:    3
 19908 ;; This function calls:
 19909 ;;		__ECANPointBuffer
 19910 ;;		__RegsToCANID
 19911 ;; This function is called by:
 19912 ;;		_getCANFrame
 19913 ;; This function uses a non-reentrant model
 19914 ;;
 19915                           
 19916                           	psect	text52
 19917  00245C                     __ptext52:
 19918                           	opt stack 0
 19919  00245C                     _ECANReceiveMessage:
 19920                           	opt stack 24
 19921                           
 19922                           ;incstack = 0
 19923                           ;incstack = 0
 19924                           ;ECANReceiveMessage@id stored from wreg
 19925  00245C  CFE8 F024          	movff	wreg,ECANReceiveMessage@id
 19926                           
 19927                           ; BSR set to: 0
 19928                           ;ECAN.c: 805: BYTE mode;
 19929                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 19930                           ;ECAN.c: 809: char i;
 19931                           ;ECAN.c: 810: BYTE_VAL temp;
 19932                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 19933  002460  6A3A               	clrf	__ECANRxFilterHitInfo,c
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 19937  002462  5077               	movf	3959,w,c	;volatile
 19938  002464  0BC0               	andlw	192
 19939  002466  6E28               	movwf	ECANReceiveMessage@mode,c
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;ECAN.c: 816: if ( mode == 0x00 )
 19943  002468  6628               	tstfsz	ECANReceiveMessage@mode,c
 19944  00246A  D032               	goto	l12089
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;ECAN.c: 822: {
 19948                           ;ECAN.c: 824: if ( RXB0FUL )
 19949  00246C  AE60               	btfss	3936,7,c	;volatile
 19950  00246E  D012               	goto	l1339
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;ECAN.c: 825: {
 19954                           ;ECAN.c: 827: RXB0IF = 0;
 19955  002470  90A4               	bcf	4004,0,c	;volatile
 19956                           
 19957                           ;ECAN.c: 830: if ( RXB0OVFL )
 19958  002472  AE74               	btfss	3956,7,c	;volatile
 19959  002474  D006               	goto	l12065
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;ECAN.c: 831: {
 19963                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 19964  002476  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 19965  002478  6ED9               	movwf	fsr2l,c
 19966  00247A  6ADA               	clrf	fsr2h,c
 19967  00247C  0E00               	movlw	0
 19968  00247E  86DB               	bsf	plusw2,3,c
 19969                           
 19970                           ; BSR set to: 0
 19971                           ;ECAN.c: 833: RXB0OVFL = 0;
 19972  002480  9E74               	bcf	3956,7,c	;volatile
 19973  002482                     l12065:
 19974                           
 19975                           ; BSR set to: 0
 19976                           ;ECAN.c: 834: }
 19977                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 19978  002482  A060               	btfss	3936,0,c	;volatile
 19979  002484  D002               	bra	u15635
 19980  002486  803A               	bsf	__ECANRxFilterHitInfo,0,c
 19981  002488  D001               	bra	u15637
 19982  00248A                     u15635:
 19983  00248A  903A               	bcf	__ECANRxFilterHitInfo,0,c
 19984  00248C                     u15637:
 19985                           
 19986                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 19987  00248C  0E0F               	movlw	15	;volatile
 19988  00248E  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 19989  002490  0E60               	movlw	96	;volatile
 19990  002492  D01A               	goto	L32
 19991  002494                     l1339:
 19992                           
 19993                           ; BSR set to: 0
 19994                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 19995  002494  010F               	movlb	15	; () banked
 19996  002496  AF50               	btfss	80,7,b	;volatile
 19997  002498  D019               	goto	l12083
 19998                           
 19999                           ; BSR set to: 15
 20000                           ;ECAN.c: 842: {
 20001                           ;ECAN.c: 844: RXB1IF = 0;
 20002  00249A  92A4               	bcf	4004,1,c	;volatile
 20003                           
 20004                           ;ECAN.c: 847: if ( RXB1OVFL )
 20005  00249C  AC74               	btfss	3956,6,c	;volatile
 20006  00249E  D006               	goto	l12075
 20007                           
 20008                           ; BSR set to: 15
 20009                           ;ECAN.c: 848: {
 20010                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 20011  0024A0  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20012  0024A2  6ED9               	movwf	fsr2l,c
 20013  0024A4  6ADA               	clrf	fsr2h,c
 20014  0024A6  0E00               	movlw	0
 20015  0024A8  86DB               	bsf	plusw2,3,c
 20016                           
 20017                           ; BSR set to: 15
 20018                           ;ECAN.c: 850: RXB1OVFL = 0;
 20019  0024AA  9C74               	bcf	3956,6,c	;volatile
 20020  0024AC                     l12075:
 20021                           
 20022                           ; BSR set to: 15
 20023                           ;ECAN.c: 851: }
 20024                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 20025  0024AC  5150               	movf	80,w,b	;volatile
 20026  0024AE  0B07               	andlw	7
 20027  0024B0  6E3A               	movwf	__ECANRxFilterHitInfo,c
 20028                           
 20029                           ; BSR set to: 15
 20030                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 20031  0024B2  0E02               	movlw	2
 20032  0024B4  603A               	cpfslt	__ECANRxFilterHitInfo,c
 20033  0024B6  D005               	goto	l12081
 20034                           
 20035                           ; BSR set to: 15
 20036                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 20037  0024B8  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20038  0024BA  6ED9               	movwf	fsr2l,c
 20039  0024BC  6ADA               	clrf	fsr2h,c
 20040  0024BE  0E00               	movlw	0
 20041  0024C0  8EDB               	bsf	plusw2,7,c
 20042  0024C2                     l12081:
 20043                           
 20044                           ; BSR set to: 15
 20045                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 20046  0024C2  0E0F               	movlw	15	;volatile
 20047  0024C4  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20048  0024C6  0E50               	movlw	80	;volatile
 20049  0024C8                     L32:
 20050  0024C8  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20051                           
 20052                           ;ECAN.c: 860: }
 20053  0024CA  D065               	goto	l12143
 20054  0024CC                     l12083:
 20055                           
 20056                           ;ECAN.c: 861: else
 20057                           ;ECAN.c: 862: return FALSE;
 20058  0024CC  0E00               	movlw	0
 20059  0024CE  D0C4               	goto	l1346
 20060  0024D0                     l12089:
 20061                           
 20062                           ; BSR set to: 0
 20063                           ;ECAN.c: 869: else if ( mode == 0x40 )
 20064  0024D0  5028               	movf	ECANReceiveMessage@mode,w,c
 20065  0024D2  0A40               	xorlw	64
 20066  0024D4  E146               	bnz	l1349
 20067                           
 20068                           ; BSR set to: 0
 20069                           ;ECAN.c: 875: {
 20070                           ;ECAN.c: 876: if ( RXB0FUL )
 20071  0024D6  AE60               	btfss	3936,7,c	;volatile
 20072  0024D8  D004               	goto	l1350
 20073                           
 20074                           ; BSR set to: 0
 20075                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 20076  0024DA  0E0F               	movlw	15	;volatile
 20077  0024DC  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20078  0024DE  0E60               	movlw	96	;volatile
 20079  0024E0  D03E               	goto	L39
 20080  0024E2                     l1350:
 20081                           
 20082                           ; BSR set to: 0
 20083                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 20084  0024E2  010F               	movlb	15	; () banked
 20085  0024E4  AF50               	btfss	80,7,b	;volatile
 20086  0024E6  D004               	goto	l1352
 20087                           
 20088                           ; BSR set to: 15
 20089                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 20090  0024E8  0E0F               	movlw	15	;volatile
 20091  0024EA  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20092  0024EC  0E50               	movlw	80	;volatile
 20093  0024EE  D037               	goto	L39
 20094  0024F0                     l1352:
 20095                           
 20096                           ; BSR set to: 15
 20097                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 20098  0024F0  010D               	movlb	13
 20099  0024F2  B5F8               	btfsc	248,2,b	;volatile
 20100  0024F4  D007               	goto	l1354
 20101  0024F6  010E               	movlb	14
 20102  0024F8  AF20               	btfss	32,7,b	;volatile
 20103  0024FA  D004               	goto	l1354
 20104                           
 20105                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 20106  0024FC  0E0E               	movlw	14	;volatile
 20107  0024FE  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20108  002500  0E20               	movlw	32	;volatile
 20109  002502  D02D               	goto	L39
 20110  002504                     l1354:
 20111                           
 20112                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 20113  002504  010D               	movlb	13
 20114  002506  B7F8               	btfsc	248,3,b	;volatile
 20115  002508  D007               	goto	l1356
 20116  00250A  010E               	movlb	14
 20117  00250C  AF30               	btfss	48,7,b	;volatile
 20118  00250E  D004               	goto	l1356
 20119                           
 20120                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 20121  002510  0E0E               	movlw	14	;volatile
 20122  002512  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20123  002514  0E30               	movlw	48	;volatile
 20124  002516  D023               	goto	L39
 20125  002518                     l1356:
 20126                           
 20127                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 20128  002518  010D               	movlb	13
 20129  00251A  B9F8               	btfsc	248,4,b	;volatile
 20130  00251C  D007               	goto	l1358
 20131  00251E  010E               	movlb	14
 20132  002520  AF40               	btfss	64,7,b	;volatile
 20133  002522  D004               	goto	l1358
 20134                           
 20135                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 20136  002524  0E0E               	movlw	14	;volatile
 20137  002526  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20138  002528  0E40               	movlw	64	;volatile
 20139  00252A  D019               	goto	L39
 20140  00252C                     l1358:
 20141                           
 20142                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 20143  00252C  010D               	movlb	13
 20144  00252E  BBF8               	btfsc	248,5,b	;volatile
 20145  002530  D005               	goto	l1360
 20146  002532  010E               	movlb	14
 20147  002534  AF50               	btfss	80,7,b	;volatile
 20148  002536  D002               	goto	l1360
 20149                           
 20150                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 20151  002538  0E0E               	movlw	14	;volatile
 20152  00253A  D7D7               	goto	L40
 20153  00253C                     l1360:
 20154                           
 20155                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 20156  00253C  010D               	movlb	13
 20157  00253E  BDF8               	btfsc	248,6,b	;volatile
 20158  002540  D005               	goto	l1362
 20159  002542  010E               	movlb	14
 20160  002544  AF60               	btfss	96,7,b	;volatile
 20161  002546  D002               	goto	l1362
 20162                           
 20163                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 20164  002548  0E0E               	movlw	14	;volatile
 20165  00254A  D7C8               	goto	L41
 20166  00254C                     l1362:
 20167                           
 20168                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 20169  00254C  010D               	movlb	13
 20170  00254E  BFF8               	btfsc	248,7,b	;volatile
 20171  002550  D7BD               	goto	l12083
 20172  002552  010E               	movlb	14
 20173  002554  AF70               	btfss	112,7,b	;volatile
 20174  002556  D7BA               	goto	l12083
 20175                           
 20176                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 20177  002558  0E0E               	movlw	14	;volatile
 20178  00255A  6E2B               	movwf	ECANReceiveMessage@ptr+1,c
 20179  00255C  0E70               	movlw	112	;volatile
 20180  00255E                     L39:
 20181  00255E  6E2A               	movwf	ECANReceiveMessage@ptr,c
 20182  002560  D00A               	goto	l12133
 20183  002562                     l1349:
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;ECAN.c: 910: else
 20187                           ;ECAN.c: 915: {
 20188                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 20189  002562  AE74               	btfss	3956,7,c	;volatile
 20190  002564  D7B3               	goto	l12083
 20191                           
 20192                           ; BSR set to: 0
 20193                           ;ECAN.c: 917: {
 20194                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 20195  002566  506F               	movf	3951,w,c	;volatile
 20196  002568  0B07               	andlw	7
 20197  00256A  EC92  F023         	call	__ECANPointBuffer
 20198  00256E  C019  F02A         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 20199  002572  C01A  F02B         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 20200  002576                     l12133:
 20201                           
 20202                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 20203  002576  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20204  00257A  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20205  00257E  50DF               	movf	indf2,w,c
 20206  002580  0B1F               	andlw	31
 20207  002582  6E3A               	movwf	__ECANRxFilterHitInfo,c
 20208                           
 20209                           ;ECAN.c: 932: RXB1IF = 0;
 20210  002584  92A4               	bcf	4004,1,c	;volatile
 20211                           
 20212                           ;ECAN.c: 934: if ( RXB1OVFL )
 20213  002586  AC74               	btfss	3956,6,c	;volatile
 20214  002588  D006               	goto	l12143
 20215                           
 20216                           ;ECAN.c: 935: {
 20217                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 20218  00258A  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20219  00258C  6ED9               	movwf	fsr2l,c
 20220  00258E  6ADA               	clrf	fsr2h,c
 20221  002590  0E00               	movlw	0
 20222  002592  86DB               	bsf	plusw2,3,c
 20223                           
 20224                           ;ECAN.c: 937: RXB1OVFL = 0;
 20225  002594  9C74               	bcf	3956,6,c	;volatile
 20226  002596                     l12143:
 20227                           
 20228                           ;ECAN.c: 942: savedPtr = ptr;
 20229  002596  C02A  F025         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 20230  00259A  C02B  F026         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 20231                           
 20232                           ;ECAN.c: 943: *msgFlags = 0;
 20233  00259E  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20234  0025A0  6ED9               	movwf	fsr2l,c
 20235  0025A2  6ADA               	clrf	fsr2h,c
 20236  0025A4  6ADF               	clrf	indf2,c
 20237                           
 20238                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 20239  0025A6  EE20 F005          	lfsr	2,5
 20240  0025AA  D857               	call	PL90	;call to abstracted procedure
 20241                           
 20242                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 20243  0025AC  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20244  0025AE  6ED9               	movwf	fsr2l,c
 20245  0025B0  6ADA               	clrf	fsr2h,c
 20246  0025B2  5029               	movf	ECANReceiveMessage@temp,w,c
 20247  0025B4  0B0F               	andlw	15
 20248  0025B6  6EDF               	movwf	indf2,c
 20249                           
 20250                           ;ECAN.c: 950: if ( temp.bits.b6 )
 20251  0025B8  AC29               	btfss	ECANReceiveMessage@temp,6,c
 20252  0025BA  D005               	goto	l1370
 20253                           
 20254                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 20255  0025BC  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20256  0025BE  6ED9               	movwf	fsr2l,c
 20257  0025C0  6ADA               	clrf	fsr2h,c
 20258  0025C2  0E00               	movlw	0
 20259  0025C4  8CDB               	bsf	plusw2,6,c
 20260  0025C6                     l1370:
 20261                           
 20262                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 20263  0025C6  EE20 F002          	lfsr	2,2
 20264  0025CA  D847               	call	PL90	;call to abstracted procedure
 20265                           
 20266                           ;ECAN.c: 955: if ( temp.bits.b3 )
 20267  0025CC  A629               	btfss	ECANReceiveMessage@temp,3,c
 20268  0025CE  D008               	goto	l1371
 20269                           
 20270                           ;ECAN.c: 956: {
 20271                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 20272  0025D0  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20273  0025D2  6ED9               	movwf	fsr2l,c
 20274  0025D4  6ADA               	clrf	fsr2h,c
 20275  0025D6  0E00               	movlw	0
 20276  0025D8  8ADB               	bsf	plusw2,5,c
 20277                           
 20278                           ;ECAN.c: 958: temp.Val = 1;
 20279  0025DA  0E01               	movlw	1
 20280  0025DC  6E29               	movwf	ECANReceiveMessage@temp,c
 20281                           
 20282                           ;ECAN.c: 959: }
 20283  0025DE  D001               	goto	l12161
 20284  0025E0                     l1371:
 20285                           
 20286                           ;ECAN.c: 960: else
 20287                           ;ECAN.c: 961: temp.Val = 0;
 20288  0025E0  6A29               	clrf	ECANReceiveMessage@temp,c
 20289  0025E2                     l12161:
 20290                           
 20291                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 20292  0025E2  282A               	incf	ECANReceiveMessage@ptr,w,c
 20293  0025E4  6E19               	movwf	?__RegsToCANID,c
 20294  0025E6  0E00               	movlw	0
 20295  0025E8  202B               	addwfc	ECANReceiveMessage@ptr+1,w,c
 20296  0025EA  6E1A               	movwf	?__RegsToCANID+1,c
 20297  0025EC  C024  F01B         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 20298  0025F0  C029  F01C         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 20299  0025F4  ECB2  F019         	call	__RegsToCANID	;wreg free
 20300                           
 20301                           ;ECAN.c: 966: ptr += 6;
 20302  0025F8  0E06               	movlw	6
 20303  0025FA  262A               	addwf	ECANReceiveMessage@ptr,f,c
 20304  0025FC  0E00               	movlw	0
 20305  0025FE  222B               	addwfc	ECANReceiveMessage@ptr+1,f,c
 20306                           
 20307                           ;ECAN.c: 967: temp.Val = *dataLen;
 20308  002600  5022               	movf	ECANReceiveMessage@dataLen,w,c
 20309  002602  6ED9               	movwf	fsr2l,c
 20310  002604  6ADA               	clrf	fsr2h,c
 20311  002606  50DF               	movf	indf2,w,c
 20312  002608  6E29               	movwf	ECANReceiveMessage@temp,c
 20313                           
 20314                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 20315  00260A  6A27               	clrf	ECANReceiveMessage@i,c
 20316  00260C  D00F               	goto	l12177
 20317  00260E                     l12169:
 20318                           
 20319                           ;ECAN.c: 969: *data++ = *ptr++;
 20320  00260E  C02A  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 20321  002612  C02B  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 20322  002616  C020  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 20323  00261A  C021  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 20324  00261E  CFDF FFE7          	movff	indf2,indf1
 20325  002622  4A2A               	infsnz	ECANReceiveMessage@ptr,f,c
 20326  002624  2A2B               	incf	ECANReceiveMessage@ptr+1,f,c
 20327  002626  4A20               	infsnz	ECANReceiveMessage@data,f,c
 20328  002628  2A21               	incf	ECANReceiveMessage@data+1,f,c
 20329  00262A  2A27               	incf	ECANReceiveMessage@i,f,c
 20330  00262C                     l12177:
 20331  00262C  5029               	movf	ECANReceiveMessage@temp,w,c
 20332  00262E  5C27               	subwf	ECANReceiveMessage@i,w,c
 20333  002630  E3EE               	bnc	l12169
 20334                           
 20335                           ;ECAN.c: 972: if ( IRXIF )
 20336  002632  AEA4               	btfss	4004,7,c	;volatile
 20337  002634  D006               	goto	l12183
 20338                           
 20339                           ;ECAN.c: 973: {
 20340                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 20341  002636  5023               	movf	ECANReceiveMessage@msgFlags,w,c
 20342  002638  6ED9               	movwf	fsr2l,c
 20343  00263A  6ADA               	clrf	fsr2h,c
 20344  00263C  0E00               	movlw	0
 20345  00263E  88DB               	bsf	plusw2,4,c
 20346                           
 20347                           ;ECAN.c: 975: IRXIF = 0;
 20348  002640  9EA4               	bcf	4004,7,c	;volatile
 20349  002642                     l12183:
 20350                           
 20351                           ;ECAN.c: 976: }
 20352                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 20353  002642  C025  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 20354  002646  C026  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 20355  00264A  0E7F               	movlw	127
 20356  00264C  16DF               	andwf	indf2,f,c
 20357                           
 20358                           ;ECAN.c: 983: if ( mode == 0x80 )
 20359  00264E  5028               	movf	ECANReceiveMessage@mode,w,c
 20360  002650  0A80               	xorlw	128
 20361  002652  B4D8               	btfsc	status,2,c
 20362                           
 20363                           ;ECAN.c: 984: FIFOEMPTY = 0;
 20364  002654  9E74               	bcf	3956,7,c	;volatile
 20365                           
 20366                           ;ECAN.c: 990: return TRUE;
 20367  002656  0E01               	movlw	1
 20368  002658                     l1346:
 20369  002658  0012               	return	
 20370  00265A                     __end_of_ECANReceiveMessage:
 20371                           	opt stack 0
 20372  00265A                     PL90:
 20373                           	opt stack 24
 20374  00265A  502A               	movf	ECANReceiveMessage@ptr,w,c
 20375  00265C  26D9               	addwf	fsr2l,f,c
 20376  00265E  502B               	movf	ECANReceiveMessage@ptr+1,w,c
 20377  002660  22DA               	addwfc	fsr2h,f,c
 20378  002662  50DF               	movf	indf2,w,c
 20379  002664  6E29               	movwf	ECANReceiveMessage@temp,c
 20380  002666  0012               	return	
 20381  002668                     __end_ofPL90:
 20382                           	opt stack 0
 20383                           tblptru	equ	0xFF8
 20384                           tblptrh	equ	0xFF7
 20385                           tblptrl	equ	0xFF6
 20386                           tablat	equ	0xFF5
 20387                           prodh	equ	0xFF4
 20388                           prodl	equ	0xFF3
 20389                           intcon	equ	0xFF2
 20390                           indf0	equ	0xFEF
 20391                           postinc0	equ	0xFEE
 20392                           fsr0h	equ	0xFEA
 20393                           fsr0l	equ	0xFE9
 20394                           wreg	equ	0xFE8
 20395                           indf1	equ	0xFE7
 20396                           postinc1	equ	0xFE6
 20397                           postdec1	equ	0xFE5
 20398                           fsr1h	equ	0xFE2
 20399                           fsr1l	equ	0xFE1
 20400                           indf2	equ	0xFDF
 20401                           postinc2	equ	0xFDE
 20402                           postdec2	equ	0xFDD
 20403                           plusw2	equ	0xFDB
 20404                           fsr2h	equ	0xFDA
 20405                           fsr2l	equ	0xFD9
 20406                           status	equ	0xFD8
 20407                           
 20408 ;; *************** function __RegsToCANID *****************
 20409 ;; Defined at:
 20410 ;;		line 1156 in file "ECAN.c"
 20411 ;; Parameters:    Size  Location     Type
 20412 ;;  ptr             2   24[COMRAM] PTR unsigned char 
 20413 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20414 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20415 ;;  val             1   26[COMRAM] PTR unsigned long 
 20416 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20417 ;;  type            1   27[COMRAM] unsigned char 
 20418 ;; Auto vars:     Size  Location     Type
 20419 ;;  Value           1   30[COMRAM] PTR struct _CAN_MESSAGE_
 20420 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20421 ;; Return value:  Size  Location     Type
 20422 ;;		None               void
 20423 ;; Registers used:
 20424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20425 ;; Tracked objects:
 20426 ;;		On entry : 0/0
 20427 ;;		On exit  : 0/0
 20428 ;;		Unchanged: 0/0
 20429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20430 ;;      Params:         4       0       0       0       0       0       0
 20431 ;;      Locals:         1       0       0       0       0       0       0
 20432 ;;      Temps:          2       0       0       0       0       0       0
 20433 ;;      Totals:         7       0       0       0       0       0       0
 20434 ;;Total ram usage:        7 bytes
 20435 ;; Hardware stack levels used:    1
 20436 ;; Hardware stack levels required when called:    2
 20437 ;; This function calls:
 20438 ;;		Nothing
 20439 ;; This function is called by:
 20440 ;;		_ECANReceiveMessage
 20441 ;; This function uses a non-reentrant model
 20442 ;;
 20443                           
 20444                           	psect	text53
 20445  003364                     __ptext53:
 20446                           	opt stack 0
 20447  003364                     __RegsToCANID:
 20448                           	opt stack 24
 20449                           
 20450                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 20451                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 20452                           
 20453                           ;incstack = 0
 20454                           ;incstack = 0
 20455  003364  C01B  F01F         	movff	__RegsToCANID@val,__RegsToCANID@Value
 20456                           
 20457                           ;ECAN.c: 1161: if ( type == 0 )
 20458  003368  661C               	tstfsz	__RegsToCANID@type,c
 20459  00336A  D02B               	goto	l12227
 20460                           
 20461                           ;ECAN.c: 1162: {
 20462                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 20463  00336C  501F               	movf	__RegsToCANID@Value,w,c
 20464  00336E  6ED9               	movwf	fsr2l,c
 20465  003370  D86C               	call	PL72	;call to abstracted procedure
 20466  003372  361D               	rlcf	??__RegsToCANID,f,c
 20467  003374  90D8               	bcf	status,0,c
 20468  003376  361D               	rlcf	??__RegsToCANID,f,c
 20469  003378  90D8               	bcf	status,0,c
 20470  00337A  341D               	rlcf	??__RegsToCANID,w,c
 20471  00337C  6EDF               	movwf	indf2,c
 20472                           
 20473                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 20474  00337E  501F               	movf	__RegsToCANID@Value,w,c
 20475  003380  6ED9               	movwf	fsr2l,c
 20476  003382  6ADA               	clrf	fsr2h,c
 20477  003384  2AD9               	incf	fsr2l,f,c
 20478  003386  6ADA               	clrf	fsr2h,c
 20479  003388  D873               	call	PL78	;call to abstracted procedure
 20480  00338A                     u15905:
 20481  00338A  90D8               	bcf	status,0,c
 20482  00338C  321D               	rrcf	??__RegsToCANID,f,c
 20483  00338E  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20484  003390  D7FC               	goto	u15905
 20485  003392  501D               	movf	??__RegsToCANID,w,c
 20486                           
 20487                           ;ECAN.c: 1166: ptr++;
 20488                           
 20489                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 20490  003394  D863               	call	PL74	;call to abstracted procedure
 20491  003396  0E05               	movlw	5
 20492  003398  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20493  00339A                     u15915:
 20494  00339A  90D8               	bcf	status,0,c
 20495  00339C  321D               	rrcf	??__RegsToCANID,f,c
 20496  00339E  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20497  0033A0  D7FC               	goto	u15915
 20498  0033A2  501F               	movf	__RegsToCANID@Value,w,c
 20499  0033A4  6ED9               	movwf	fsr2l,c
 20500  0033A6  6ADA               	clrf	fsr2h,c
 20501  0033A8  501D               	movf	??__RegsToCANID,w,c
 20502  0033AA  12DF               	iorwf	indf2,f,c
 20503                           
 20504                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 20505  0033AC  D83D               	call	PL36	;call to abstracted procedure
 20506  0033AE  6ADF               	clrf	indf2,c
 20507                           
 20508                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 20509  0033B0  501F               	movf	__RegsToCANID@Value,w,c
 20510  0033B2  6ED9               	movwf	fsr2l,c
 20511  0033B4  6ADA               	clrf	fsr2h,c
 20512  0033B6  0E03               	movlw	3
 20513  0033B8  26D9               	addwf	fsr2l,f,c
 20514  0033BA  6ADA               	clrf	fsr2h,c
 20515  0033BC  0E00               	movlw	0
 20516  0033BE  6EDF               	movwf	indf2,c
 20517                           
 20518                           ;ECAN.c: 1170: }
 20519  0033C0  D032               	goto	l1393
 20520  0033C2                     l12227:
 20521                           
 20522                           ;ECAN.c: 1171: else
 20523                           ;ECAN.c: 1172: {
 20524                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 20525  0033C2  D832               	call	PL36	;call to abstracted procedure
 20526  0033C4  D855               	call	PL78	;call to abstracted procedure
 20527  0033C6                     u15925:
 20528  0033C6  90D8               	bcf	status,0,c
 20529  0033C8  361D               	rlcf	??__RegsToCANID,f,c
 20530  0033CA  2E1E               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 20531  0033CC  D7FC               	goto	u15925
 20532  0033CE  501D               	movf	??__RegsToCANID,w,c
 20533  0033D0  6EDF               	movwf	indf2,c
 20534                           
 20535                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 20536  0033D2  501F               	movf	__RegsToCANID@Value,w,c
 20537  0033D4  6ED9               	movwf	fsr2l,c
 20538  0033D6  6ADA               	clrf	fsr2h,c
 20539  0033D8  0E03               	movlw	3
 20540  0033DA  26D9               	addwf	fsr2l,f,c
 20541  0033DC  D836               	call	PL72	;call to abstracted procedure
 20542  0033DE  321D               	rrcf	??__RegsToCANID,f,c
 20543  0033E0  90D8               	bcf	status,0,c
 20544  0033E2  321D               	rrcf	??__RegsToCANID,f,c
 20545  0033E4  90D8               	bcf	status,0,c
 20546  0033E6  301D               	rrcf	??__RegsToCANID,w,c
 20547                           
 20548                           ;ECAN.c: 1176: ptr++;
 20549                           
 20550                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 20551  0033E8  D839               	call	PL74	;call to abstracted procedure
 20552  0033EA  0E03               	movlw	3
 20553  0033EC  161D               	andwf	??__RegsToCANID,f,c
 20554  0033EE  D81C               	call	PL36	;call to abstracted procedure
 20555  0033F0  501D               	movf	??__RegsToCANID,w,c
 20556  0033F2  12DF               	iorwf	indf2,f,c
 20557                           
 20558                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 20559  0033F4  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20560  0033F8  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20561  0033FC  50DF               	movf	indf2,w,c
 20562  0033FE  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20563  003400  90D8               	bcf	status,0,c
 20564  003402  321D               	rrcf	??__RegsToCANID,f,c
 20565  003404  90D8               	bcf	status,0,c
 20566  003406  321D               	rrcf	??__RegsToCANID,f,c
 20567  003408  90D8               	bcf	status,0,c
 20568  00340A  321D               	rrcf	??__RegsToCANID,f,c
 20569  00340C  0E1C               	movlw	28
 20570  00340E  161D               	andwf	??__RegsToCANID,f,c
 20571  003410  D80B               	call	PL36	;call to abstracted procedure
 20572  003412  501D               	movf	??__RegsToCANID,w,c
 20573  003414  12DF               	iorwf	indf2,f,c
 20574                           
 20575                           ;ECAN.c: 1180: ptr++;
 20576                           
 20577                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 20578  003416  D80F               	call	PL68	;call to abstracted procedure
 20579  003418  2AE1               	incf	fsr1l,f,c
 20580  00341A  6AE2               	clrf	fsr1h,c
 20581  00341C  CFDF FFE7          	movff	indf2,indf1
 20582                           
 20583                           ;ECAN.c: 1182: ptr++;
 20584                           
 20585                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 20586  003420  D80A               	call	PL68	;call to abstracted procedure
 20587  003422  CFDF FFE7          	movff	indf2,indf1
 20588  003426                     l1393:
 20589  003426  0012               	return	
 20590  003428                     __end_of__RegsToCANID:
 20591                           	opt stack 0
 20592  003428                     PL36:
 20593                           	opt stack 24
 20594  003428  501F               	movf	__RegsToCANID@Value,w,c
 20595  00342A  6ED9               	movwf	fsr2l,c
 20596  00342C  6ADA               	clrf	fsr2h,c
 20597  00342E  0E02               	movlw	2
 20598  003430  26D9               	addwf	fsr2l,f,c
 20599  003432  6ADA               	clrf	fsr2h,c
 20600  003434  0012               	return	
 20601  003436                     __end_ofPL36:
 20602                           	opt stack 0
 20603  003436                     PL68:
 20604                           	opt stack 24
 20605  003436  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20606  003438  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20607  00343A  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20608  00343E  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20609  003442  501F               	movf	__RegsToCANID@Value,w,c
 20610  003444  6EE1               	movwf	fsr1l,c
 20611  003446  6AE2               	clrf	fsr1h,c
 20612  003448  0012               	return	
 20613  00344A                     __end_ofPL68:
 20614                           	opt stack 0
 20615  00344A                     PL72:
 20616                           	opt stack 24
 20617  00344A  6ADA               	clrf	fsr2h,c
 20618  00344C  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20619  003450  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20620  003454  50E7               	movf	indf1,w,c
 20621  003456  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20622  003458  90D8               	bcf	status,0,c
 20623  00345A  0012               	return	
 20624  00345C                     __end_ofPL72:
 20625                           	opt stack 0
 20626  00345C                     PL74:
 20627                           	opt stack 24
 20628  00345C  6EDF               	movwf	indf2,c
 20629  00345E  4A19               	infsnz	__RegsToCANID@ptr,f,c
 20630  003460  2A1A               	incf	__RegsToCANID@ptr+1,f,c
 20631  003462  C019  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 20632  003466  C01A  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 20633  00346A  50DF               	movf	indf2,w,c
 20634  00346C  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20635  00346E  0012               	return	
 20636  003470                     __end_ofPL74:
 20637                           	opt stack 0
 20638  003470                     PL78:
 20639                           	opt stack 24
 20640  003470  C019  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 20641  003474  C01A  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 20642  003478  50E7               	movf	indf1,w,c
 20643  00347A  6E1D               	movwf	??__RegsToCANID& (0+255),c
 20644  00347C  0E05               	movlw	5
 20645  00347E  6E1E               	movwf	(??__RegsToCANID+1)& (0+255),c
 20646  003480  0C05               	retlw	5
 20647  003482                     __end_ofPL78:
 20648                           	opt stack 0
 20649                           tblptru	equ	0xFF8
 20650                           tblptrh	equ	0xFF7
 20651                           tblptrl	equ	0xFF6
 20652                           tablat	equ	0xFF5
 20653                           prodh	equ	0xFF4
 20654                           prodl	equ	0xFF3
 20655                           intcon	equ	0xFF2
 20656                           indf0	equ	0xFEF
 20657                           postinc0	equ	0xFEE
 20658                           fsr0h	equ	0xFEA
 20659                           fsr0l	equ	0xFE9
 20660                           wreg	equ	0xFE8
 20661                           indf1	equ	0xFE7
 20662                           postinc1	equ	0xFE6
 20663                           postdec1	equ	0xFE5
 20664                           fsr1h	equ	0xFE2
 20665                           fsr1l	equ	0xFE1
 20666                           indf2	equ	0xFDF
 20667                           postinc2	equ	0xFDE
 20668                           postdec2	equ	0xFDD
 20669                           plusw2	equ	0xFDB
 20670                           fsr2h	equ	0xFDA
 20671                           fsr2l	equ	0xFD9
 20672                           status	equ	0xFD8
 20673                           
 20674 ;; *************** function __ECANPointBuffer *****************
 20675 ;; Defined at:
 20676 ;;		line 1207 in file "ECAN.c"
 20677 ;; Parameters:    Size  Location     Type
 20678 ;;  b               1    wreg     unsigned char 
 20679 ;; Auto vars:     Size  Location     Type
 20680 ;;  b               1   27[COMRAM] unsigned char 
 20681 ;;  pt              2   28[COMRAM] PTR unsigned char 
 20682 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 20683 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 20684 ;; Return value:  Size  Location     Type
 20685 ;;                  2   24[COMRAM] PTR unsigned char 
 20686 ;; Registers used:
 20687 ;;		wreg, status,2, status,0
 20688 ;; Tracked objects:
 20689 ;;		On entry : F/0
 20690 ;;		On exit  : 0/0
 20691 ;;		Unchanged: 0/0
 20692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20693 ;;      Params:         3       0       0       0       0       0       0
 20694 ;;      Locals:         3       0       0       0       0       0       0
 20695 ;;      Temps:          0       0       0       0       0       0       0
 20696 ;;      Totals:         6       0       0       0       0       0       0
 20697 ;;Total ram usage:        6 bytes
 20698 ;; Hardware stack levels used:    1
 20699 ;; Hardware stack levels required when called:    2
 20700 ;; This function calls:
 20701 ;;		Nothing
 20702 ;; This function is called by:
 20703 ;;		_ECANReceiveMessage
 20704 ;; This function uses a non-reentrant model
 20705 ;;
 20706                           
 20707                           	psect	text54
 20708  004724                     __ptext54:
 20709                           	opt stack 0
 20710  004724                     __ECANPointBuffer:
 20711                           	opt stack 24
 20712                           
 20713                           ;incstack = 0
 20714                           ;incstack = 0
 20715                           ;__ECANPointBuffer@b stored from wreg
 20716  004724  CFE8 F01C          	movff	wreg,__ECANPointBuffer@b
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;ECAN.c: 1208: BYTE* pt;
 20720                           ;ECAN.c: 1210: switch(b)
 20721  004728  D024               	goto	l12213
 20722  00472A                     l12195:
 20723                           
 20724                           ; BSR set to: 0
 20725                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 20726  00472A  0E0F               	movlw	15	;volatile
 20727  00472C  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20728  00472E  0E60               	movlw	96	;volatile
 20729  004730  D01E               	goto	L48
 20730  004732                     l12197:
 20731                           
 20732                           ; BSR set to: 0
 20733                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 20734  004732  010F               	movlb	15	; () banked
 20735  004734  0E0F               	movlw	15	;volatile
 20736  004736  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20737  004738  0E50               	movlw	80	;volatile
 20738  00473A  D019               	goto	L48
 20739  00473C                     l12199:
 20740                           
 20741                           ; BSR set to: 0
 20742                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 20743  00473C  010E               	movlb	14	; () banked
 20744  00473E  0E0E               	movlw	14	;volatile
 20745  004740  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20746  004742  0E20               	movlw	32	;volatile
 20747  004744  D014               	goto	L48
 20748  004746                     l12201:
 20749                           
 20750                           ; BSR set to: 0
 20751                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 20752  004746  010E               	movlb	14	; () banked
 20753  004748  0E0E               	movlw	14	;volatile
 20754  00474A  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20755  00474C  0E30               	movlw	48	;volatile
 20756  00474E  D00F               	goto	L48
 20757  004750                     l12203:
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 20761  004750  010E               	movlb	14	; () banked
 20762  004752  0E0E               	movlw	14	;volatile
 20763  004754  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20764  004756  0E40               	movlw	64	;volatile
 20765  004758  D00A               	goto	L48
 20766  00475A                     l12205:
 20767                           
 20768                           ; BSR set to: 0
 20769                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 20770  00475A  010E               	movlb	14	; () banked
 20771  00475C  0E0E               	movlw	14	;volatile
 20772  00475E  D7EB               	goto	L49
 20773  004760                     l12207:
 20774                           
 20775                           ; BSR set to: 0
 20776                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 20777  004760  010E               	movlb	14	; () banked
 20778  004762  0E0E               	movlw	14	;volatile
 20779  004764  D7E3               	goto	L50
 20780  004766                     l12209:
 20781                           
 20782                           ; BSR set to: 0
 20783                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 20784  004766  010E               	movlb	14	; () banked
 20785  004768  0E0E               	movlw	14	;volatile
 20786  00476A  6E1E               	movwf	__ECANPointBuffer@pt+1,c
 20787  00476C  0E70               	movlw	112	;volatile
 20788  00476E                     L48:
 20789  00476E  6E1D               	movwf	__ECANPointBuffer@pt,c
 20790                           
 20791                           ;ECAN.c: 1235: break;
 20792  004770  D00F               	goto	l1398
 20793  004772                     l12213:
 20794                           
 20795                           ; BSR set to: 0
 20796  004772  501C               	movf	__ECANPointBuffer@b,w,c
 20797                           
 20798                           ; Switch size 1, requested type "space"
 20799                           ; Number of cases is 7, Range of values is 0 to 6
 20800                           ; switch strategies available:
 20801                           ; Name         Instructions Cycles
 20802                           ; simple_byte           22    12 (average)
 20803                           ;	Chosen strategy is simple_byte
 20804  004774  E0DA               	bz	l12195
 20805  004776  0A01               	xorlw	1	; case 1
 20806  004778  E0DC               	bz	l12197
 20807  00477A  0A03               	xorlw	3	; case 2
 20808  00477C  E0DF               	bz	l12199
 20809  00477E  0A01               	xorlw	1	; case 3
 20810  004780  E0E2               	bz	l12201
 20811  004782  0A07               	xorlw	7	; case 4
 20812  004784  E0E5               	bz	l12203
 20813  004786  0A01               	xorlw	1	; case 5
 20814  004788  E0E8               	bz	l12205
 20815  00478A  0A03               	xorlw	3	; case 6
 20816  00478C  E0E9               	bz	l12207
 20817  00478E  D7EB               	goto	l12209
 20818  004790                     l1398:
 20819                           
 20820                           ;ECAN.c: 1237: return (pt);
 20821  004790  C01D  F019         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 20822  004794  C01E  F01A         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 20823  004798  0012               	return	
 20824  00479A                     __end_of__ECANPointBuffer:
 20825                           	opt stack 0
 20826                           tblptru	equ	0xFF8
 20827                           tblptrh	equ	0xFF7
 20828                           tblptrl	equ	0xFF6
 20829                           tablat	equ	0xFF5
 20830                           prodh	equ	0xFF4
 20831                           prodl	equ	0xFF3
 20832                           intcon	equ	0xFF2
 20833                           indf0	equ	0xFEF
 20834                           postinc0	equ	0xFEE
 20835                           fsr0h	equ	0xFEA
 20836                           fsr0l	equ	0xFE9
 20837                           wreg	equ	0xFE8
 20838                           indf1	equ	0xFE7
 20839                           postinc1	equ	0xFE6
 20840                           postdec1	equ	0xFE5
 20841                           fsr1h	equ	0xFE2
 20842                           fsr1l	equ	0xFE1
 20843                           indf2	equ	0xFDF
 20844                           postinc2	equ	0xFDE
 20845                           postdec2	equ	0xFDD
 20846                           plusw2	equ	0xFDB
 20847                           fsr2h	equ	0xFDA
 20848                           fsr2l	equ	0xFD9
 20849                           status	equ	0xFD8
 20850                           
 20851 ;; *************** function _sprintf *****************
 20852 ;; Defined at:
 20853 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 20854 ;; Parameters:    Size  Location     Type
 20855 ;;  sp              2    0[BANK0 ] PTR unsigned char 
 20856 ;;		 -> wrkbuf(80), 
 20857 ;;  f               2    2[BANK0 ] PTR const unsigned char 
 20858 ;;		 -> STR_192(3), STR_191(7), STR_185(3), STR_184(7), 
 20859 ;;		 -> STR_181(4), STR_180(8), STR_177(4), STR_176(8), 
 20860 ;;		 -> STR_173(4), STR_172(8), STR_169(4), STR_168(8), 
 20861 ;;		 -> STR_165(4), STR_164(7), STR_161(4), STR_160(7), 
 20862 ;;		 -> STR_157(4), STR_156(7), STR_153(4), STR_152(7), 
 20863 ;;		 -> STR_147(3), STR_146(7), STR_144(3), STR_143(7), 
 20864 ;;		 -> STR_141(3), STR_140(7), STR_138(3), STR_137(7), 
 20865 ;;		 -> STR_135(3), STR_134(7), STR_132(3), STR_131(7), 
 20866 ;;		 -> STR_80(3), STR_79(7), STR_64(3), STR_63(7), 
 20867 ;;		 -> STR_62(3), STR_61(7), STR_58(3), STR_57(7), 
 20868 ;;		 -> STR_55(3), STR_54(7), STR_53(3), STR_52(7), 
 20869 ;; Auto vars:     Size  Location     Type
 20870 ;;  idx             1    8[BANK0 ] unsigned char 
 20871 ;;  _val            4   20[BANK0 ] struct .
 20872 ;;  flag            2   25[BANK0 ] unsigned short 
 20873 ;;  width           2   18[BANK0 ] int 
 20874 ;;  prec            2   16[BANK0 ] int 
 20875 ;;  c               1   24[BANK0 ] char 
 20876 ;;  ap              1   15[BANK0 ] PTR void [1]
 20877 ;;		 -> ?_sprintf(2), 
 20878 ;; Return value:  Size  Location     Type
 20879 ;;                  2    0[BANK0 ] int 
 20880 ;; Registers used:
 20881 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20882 ;; Tracked objects:
 20883 ;;		On entry : F/0
 20884 ;;		On exit  : F/0
 20885 ;;		Unchanged: 0/0
 20886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20887 ;;      Params:         0       8       0       0       0       0       0
 20888 ;;      Locals:         0      19       0       0       0       0       0
 20889 ;;      Temps:          3       0       0       0       0       0       0
 20890 ;;      Totals:         3      27       0       0       0       0       0
 20891 ;;Total ram usage:       30 bytes
 20892 ;; Hardware stack levels used:    1
 20893 ;; Hardware stack levels required when called:    3
 20894 ;; This function calls:
 20895 ;;		_isdigit
 20896 ;;		___lldiv
 20897 ;;		___llmod
 20898 ;;		___wmul
 20899 ;; This function is called by:
 20900 ;;		_doModeVerbose
 20901 ;;		_receivePrintEventVerbose
 20902 ;;		_printStatistics
 20903 ;;		_printErrors
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           	psect	text55
 20908  001466                     __ptext55:
 20909                           	opt stack 0
 20910  001466                     _sprintf:
 20911                           	opt stack 26
 20912                           
 20913                           ; BSR set to: 0
 20914                           ;doprnt.c: 494: va_list ap;
 20915                           ;doprnt.c: 499: signed char c;
 20916                           ;doprnt.c: 501: int width;
 20917                           ;doprnt.c: 504: int prec;
 20918                           ;doprnt.c: 508: unsigned short flag;
 20919                           ;doprnt.c: 527: union {
 20920                           ;doprnt.c: 528: unsigned long _val;
 20921                           ;doprnt.c: 529: struct {
 20922                           ;doprnt.c: 530: const char * _cp;
 20923                           ;doprnt.c: 531: unsigned _len;
 20924                           ;doprnt.c: 532: } _str;
 20925                           ;doprnt.c: 533: } _val;
 20926                           ;doprnt.c: 542: *ap = __va_start();
 20927                           
 20928                           ;incstack = 0
 20929                           ;incstack = 0
 20930  001466  0E64               	movlw	low (?_sprintf+4)
 20931  001468  6F6F               	movwf	sprintf@ap& (0+255),b
 20932                           
 20933                           ;doprnt.c: 545: while(c = *f++) {
 20934  00146A  D332               	goto	l13871
 20935  00146C                     l13537:
 20936                           
 20937                           ; BSR set to: 0
 20938                           ;doprnt.c: 547: if(c != '%')
 20939  00146C  5178               	movf	sprintf@c& (0+255),w,b
 20940  00146E  0A25               	xorlw	37
 20941  001470  E009               	bz	l1522
 20942                           
 20943                           ; BSR set to: 0
 20944                           ;doprnt.c: 549: {
 20945                           ;doprnt.c: 550: ((*sp++ = (c)));
 20946  001472  C060  FFD9         	movff	sprintf@sp,fsr2l
 20947  001476  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 20948  00147A  C078  FFDF         	movff	sprintf@c,indf2
 20949                           
 20950                           ; BSR set to: 0
 20951  00147E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 20952  001480  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 20953                           
 20954                           ;doprnt.c: 551: continue;
 20955  001482  D326               	goto	l13871
 20956  001484                     l1522:
 20957                           
 20958                           ; BSR set to: 0
 20959                           ;doprnt.c: 552: }
 20960                           ;doprnt.c: 555: width = 0;
 20961  001484  6B72               	clrf	sprintf@width& (0+255),b
 20962  001486  6B73               	clrf	(sprintf@width+1)& (0+255),b
 20963                           
 20964                           ;doprnt.c: 557: flag = 0;
 20965  001488  6B79               	clrf	sprintf@flag& (0+255),b
 20966  00148A  6B7A               	clrf	(sprintf@flag+1)& (0+255),b
 20967  00148C  D009               	goto	l13553
 20968  00148E                     l13543:
 20969                           
 20970                           ; BSR set to: 0
 20971                           ;doprnt.c: 563: flag |= 0x08;
 20972  00148E  8779               	bsf	sprintf@flag& (0+255),3,b
 20973  001490  D005               	goto	L51
 20974  001492                     l13545:
 20975                           
 20976                           ; BSR set to: 0
 20977                           ;doprnt.c: 570: flag |= 0x01;
 20978  001492  8179               	bsf	sprintf@flag& (0+255),0,b
 20979  001494  D003               	goto	L51
 20980  001496                     l13547:
 20981                           
 20982                           ; BSR set to: 0
 20983                           ;doprnt.c: 583: flag |= 0x800;
 20984  001496  877A               	bsf	(sprintf@flag+1)& (0+255),3,b
 20985  001498  D001               	goto	L51
 20986  00149A                     l13549:
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;doprnt.c: 589: flag |= 0x04;
 20990  00149A  8579               	bsf	sprintf@flag& (0+255),2,b
 20991  00149C                     L51:
 20992                           
 20993                           ;doprnt.c: 590: f++;
 20994  00149C  4B62               	infsnz	sprintf@f& (0+255),f,b
 20995  00149E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 20996  0014A0                     l13553:
 20997                           
 20998                           ; BSR set to: 0
 20999  0014A0  C062  FFF6         	movff	sprintf@f,tblptrl
 21000  0014A4  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21001  0014A8  0008               	tblrd		*
 21002  0014AA  50F5               	movf	tablat,w,c
 21003                           
 21004                           ; Switch size 1, requested type "space"
 21005                           ; Number of cases is 4, Range of values is 32 to 48
 21006                           ; switch strategies available:
 21007                           ; Name         Instructions Cycles
 21008                           ; simple_byte           13     7 (average)
 21009                           ;	Chosen strategy is simple_byte
 21010  0014AC  0A20               	xorlw	32	; case 32
 21011  0014AE  E0F1               	bz	l13545
 21012  0014B0  0A03               	xorlw	3	; case 35
 21013  0014B2  E0F1               	bz	l13547
 21014  0014B4  0A0E               	xorlw	14	; case 45
 21015  0014B6  E0EB               	bz	l13543
 21016  0014B8  0A1D               	xorlw	29	; case 48
 21017  0014BA  E0EF               	bz	l13549
 21018                           
 21019                           ; BSR set to: 0
 21020                           ;doprnt.c: 602: if(flag & 0x08)
 21021  0014BC  B779               	btfsc	sprintf@flag& (0+255),3,b
 21022                           
 21023                           ; BSR set to: 0
 21024                           ;doprnt.c: 603: flag &= ~0x04;
 21025  0014BE  9579               	bcf	sprintf@flag& (0+255),2,b
 21026                           
 21027                           ; BSR set to: 0
 21028                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21029  0014C0  C062  FFF6         	movff	sprintf@f,tblptrl
 21030  0014C4  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21031  0014C8  0008               	tblrd		*
 21032  0014CA  50F5               	movf	tablat,w,c
 21033  0014CC  EC5B  F028         	call	_isdigit
 21034  0014D0  E327               	bnc	l13569
 21035                           
 21036                           ;doprnt.c: 607: width = 0;
 21037  0014D2  0100               	movlb	0	; () banked
 21038  0014D4  6B72               	clrf	sprintf@width& (0+255),b
 21039  0014D6  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21040  0014D8                     l13561:
 21041                           
 21042                           ;doprnt.c: 609: width *= 10;
 21043  0014D8  C072  F019         	movff	sprintf@width,?___wmul
 21044  0014DC  C073  F01A         	movff	sprintf@width+1,?___wmul+1
 21045  0014E0  6A1C               	clrf	?___wmul+3,c
 21046  0014E2  0E0A               	movlw	10
 21047  0014E4  6E1B               	movwf	?___wmul+2,c
 21048  0014E6  ECEB  F027         	call	___wmul	;wreg free
 21049  0014EA  C019  F072         	movff	?___wmul,sprintf@width
 21050  0014EE  C01A  F073         	movff	?___wmul+1,sprintf@width+1
 21051                           
 21052                           ;doprnt.c: 610: width += *f++ - '0';
 21053  0014F2  0100               	movlb	0	; () banked
 21054  0014F4  C062  FFF6         	movff	sprintf@f,tblptrl
 21055  0014F8  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21056  0014FC  0008               	tblrd		*
 21057  0014FE  CFF5 F02F          	movff	tablat,??_sprintf
 21058  001502  0ED0               	movlw	208
 21059  001504  242F               	addwf	??_sprintf,w,c
 21060  001506  6E30               	movwf	(??_sprintf+1)& (0+255),c
 21061  001508  6A31               	clrf	(??_sprintf+2)& (0+255),c
 21062  00150A  0EFF               	movlw	255
 21063  00150C  2231               	addwfc	(??_sprintf+2)& (0+255),f,c
 21064  00150E  5030               	movf	??_sprintf+1,w,c
 21065  001510  2772               	addwf	sprintf@width& (0+255),f,b
 21066  001512  5031               	movf	??_sprintf+2,w,c
 21067  001514  2373               	addwfc	(sprintf@width+1)& (0+255),f,b
 21068                           
 21069                           ; BSR set to: 0
 21070                           
 21071                           ; BSR set to: 0
 21072                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21073  001516  DB3A               	call	PL76	;call to abstracted procedure
 21074  001518  EC5B  F028         	call	_isdigit
 21075  00151C  E315               	bnc	l13577
 21076  00151E  D7DC               	goto	l13561
 21077  001520                     l13569:
 21078  001520  0100               	movlb	0	; () banked
 21079  001522  C062  FFF6         	movff	sprintf@f,tblptrl
 21080  001526  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21081  00152A  0008               	tblrd		*
 21082  00152C  50F5               	movf	tablat,w,c
 21083  00152E  0A2A               	xorlw	42
 21084  001530  E10B               	bnz	l13577
 21085                           
 21086                           ; BSR set to: 0
 21087                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21088  001532  516F               	movf	sprintf@ap& (0+255),w,b
 21089  001534  6ED9               	movwf	fsr2l,c
 21090  001536  6ADA               	clrf	fsr2h,c
 21091  001538  CFDE F072          	movff	postinc2,sprintf@width
 21092  00153C  CFDD F073          	movff	postdec2,sprintf@width+1
 21093                           
 21094                           ; BSR set to: 0
 21095  001540  0E02               	movlw	2
 21096  001542  276F               	addwf	sprintf@ap& (0+255),f,b
 21097                           
 21098                           ; BSR set to: 0
 21099                           ;doprnt.c: 615: f++;
 21100  001544  4B62               	infsnz	sprintf@f& (0+255),f,b
 21101  001546  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21102  001548                     l13577:
 21103                           
 21104                           ;doprnt.c: 617: }
 21105                           ;doprnt.c: 620: if(*f == '.') {
 21106  001548  0100               	movlb	0	; () banked
 21107  00154A  C062  FFF6         	movff	sprintf@f,tblptrl
 21108  00154E  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21109  001552  0008               	tblrd		*
 21110  001554  50F5               	movf	tablat,w,c
 21111  001556  0A2E               	xorlw	46
 21112  001558  E138               	bnz	l1538
 21113                           
 21114                           ; BSR set to: 0
 21115                           ;doprnt.c: 621: flag |= 0x4000;
 21116  00155A  8D7A               	bsf	(sprintf@flag+1)& (0+255),6,b
 21117                           
 21118                           ;doprnt.c: 622: f++;
 21119                           
 21120                           ; BSR set to: 0
 21121                           ;doprnt.c: 624: if(*f == '*') {
 21122  00155C  DB17               	call	PL76	;call to abstracted procedure
 21123  00155E  0A2A               	xorlw	42
 21124  001560  E10C               	bnz	l1539
 21125                           
 21126                           ; BSR set to: 0
 21127                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21128  001562  516F               	movf	sprintf@ap& (0+255),w,b
 21129  001564  6ED9               	movwf	fsr2l,c
 21130  001566  6ADA               	clrf	fsr2h,c
 21131  001568  CFDE F070          	movff	postinc2,sprintf@prec
 21132  00156C  CFDD F071          	movff	postdec2,sprintf@prec+1
 21133                           
 21134                           ; BSR set to: 0
 21135  001570  0E02               	movlw	2
 21136  001572  276F               	addwf	sprintf@ap& (0+255),f,b
 21137                           
 21138                           ; BSR set to: 0
 21139                           ;doprnt.c: 626: f++;
 21140  001574  4B62               	infsnz	sprintf@f& (0+255),f,b
 21141  001576  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21142                           
 21143                           ;doprnt.c: 627: } else
 21144  001578  D089               	goto	l13647
 21145  00157A                     l1539:
 21146                           
 21147                           ; BSR set to: 0
 21148                           ;doprnt.c: 629: {
 21149                           ;doprnt.c: 630: prec = 0;
 21150  00157A  6B70               	clrf	sprintf@prec& (0+255),b
 21151  00157C  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21152                           
 21153                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21154  00157E  D01B               	goto	l13593
 21155  001580                     l13589:
 21156                           
 21157                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21158  001580  C070  F019         	movff	sprintf@prec,?___wmul
 21159  001584  C071  F01A         	movff	sprintf@prec+1,?___wmul+1
 21160  001588  6A1C               	clrf	?___wmul+3,c
 21161  00158A  0E0A               	movlw	10
 21162  00158C  6E1B               	movwf	?___wmul+2,c
 21163  00158E  ECEB  F027         	call	___wmul	;wreg free
 21164  001592  0100               	movlb	0	; () banked
 21165  001594  C062  FFF6         	movff	sprintf@f,tblptrl
 21166  001598  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21167  00159C  0008               	tblrd		*
 21168  00159E  50F5               	movf	tablat,w,c
 21169  0015A0  2619               	addwf	?___wmul,f,c
 21170  0015A2  0E00               	movlw	0
 21171  0015A4  221A               	addwfc	?___wmul+1,f,c
 21172  0015A6  0ED0               	movlw	208
 21173  0015A8  2419               	addwf	?___wmul,w,c
 21174  0015AA  6F70               	movwf	sprintf@prec& (0+255),b
 21175  0015AC  0EFF               	movlw	255
 21176  0015AE  201A               	addwfc	?___wmul+1,w,c
 21177  0015B0  6F71               	movwf	(sprintf@prec+1)& (0+255),b
 21178                           
 21179                           ; BSR set to: 0
 21180  0015B2  4B62               	infsnz	sprintf@f& (0+255),f,b
 21181  0015B4  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 21182  0015B6                     l13593:
 21183                           
 21184                           ; BSR set to: 0
 21185  0015B6  C062  FFF6         	movff	sprintf@f,tblptrl
 21186  0015BA  C063  FFF7         	movff	sprintf@f+1,tblptrh
 21187  0015BE  0008               	tblrd		*
 21188  0015C0  50F5               	movf	tablat,w,c
 21189  0015C2  EC5B  F028         	call	_isdigit
 21190  0015C6  E362               	bnc	l13647
 21191  0015C8  D7DB               	goto	l13589
 21192  0015CA                     l1538:
 21193                           
 21194                           ; BSR set to: 0
 21195                           ;doprnt.c: 635: prec = 0;
 21196  0015CA  6B70               	clrf	sprintf@prec& (0+255),b
 21197  0015CC  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21198  0015CE  D05E               	goto	l13647
 21199  0015D0                     l13595:
 21200                           
 21201                           ; BSR set to: 0
 21202                           ;doprnt.c: 652: flag |= 0x10;
 21203  0015D0  8979               	bsf	sprintf@flag& (0+255),4,b
 21204                           
 21205                           ;doprnt.c: 653: goto loop;
 21206  0015D2  D05C               	goto	l13647
 21207  0015D4                     l13597:
 21208                           
 21209                           ; BSR set to: 0
 21210                           ;doprnt.c: 700: flag |= 0x40;
 21211  0015D4  8D79               	bsf	sprintf@flag& (0+255),6,b
 21212                           
 21213                           ;doprnt.c: 702: break;
 21214  0015D6  D070               	goto	l13649
 21215  0015D8                     l13599:
 21216                           
 21217                           ; BSR set to: 0
 21218                           ;doprnt.c: 723: flag |= 0x20;
 21219  0015D8  8B79               	bsf	sprintf@flag& (0+255),5,b
 21220  0015DA                     l1555:
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;doprnt.c: 730: flag |= 0x80;
 21224  0015DA  8F79               	bsf	sprintf@flag& (0+255),7,b
 21225                           
 21226                           ;doprnt.c: 732: break;
 21227  0015DC  D06D               	goto	l13649
 21228  0015DE                     l13601:
 21229                           
 21230                           ; BSR set to: 0
 21231                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21232  0015DE  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21233  0015E0  1170               	iorwf	sprintf@prec& (0+255),w,b
 21234  0015E2  E009               	bz	l13607
 21235                           
 21236                           ; BSR set to: 0
 21237  0015E4  5175               	movf	(sprintf@_val+1)& (0+255),w,b
 21238  0015E6  5D70               	subwf	sprintf@prec& (0+255),w,b
 21239  0015E8  5176               	movf	(sprintf@_val+2)& (0+255),w,b
 21240  0015EA  5971               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21241  0015EC  E204               	bc	l13607
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;doprnt.c: 763: _val._str._len = prec;
 21245  0015EE  C070  F075         	movff	sprintf@prec,sprintf@_val+1
 21246  0015F2  C071  F076         	movff	sprintf@prec+1,sprintf@_val+2
 21247  0015F6                     l13607:
 21248                           
 21249                           ; BSR set to: 0
 21250                           ;doprnt.c: 766: if(width > _val._str._len)
 21251  0015F6  5172               	movf	sprintf@width& (0+255),w,b
 21252  0015F8  5D75               	subwf	(sprintf@_val+1)& (0+255),w,b
 21253  0015FA  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21254  0015FC  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21255  0015FE  E207               	bc	l1558
 21256                           
 21257                           ; BSR set to: 0
 21258                           ;doprnt.c: 767: width -= _val._str._len;
 21259  001600  EE20  F075         	lfsr	2,sprintf@_val+1
 21260  001604  50DE               	movf	postinc2,w,c
 21261  001606  5F72               	subwf	sprintf@width& (0+255),f,b
 21262  001608  50DD               	movf	postdec2,w,c
 21263  00160A  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21264  00160C  D002               	goto	l1559
 21265  00160E                     l1558:
 21266                           
 21267                           ; BSR set to: 0
 21268                           ;doprnt.c: 768: else
 21269                           ;doprnt.c: 769: width = 0;
 21270  00160E  6B72               	clrf	sprintf@width& (0+255),b
 21271  001610  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21272  001612                     l1559:
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;doprnt.c: 771: if(!(flag & 0x08))
 21276  001612  A779               	btfss	sprintf@flag& (0+255),3,b
 21277  001614  D004               	goto	l13617
 21278  001616  D015               	goto	l13625
 21279  001618                     l13613:
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;doprnt.c: 774: ((*sp++ = (' ')));
 21283  001618  DAA8               	call	PL60	;call to abstracted procedure
 21284                           
 21285                           ; BSR set to: 0
 21286  00161A  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21287  00161C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21288  00161E                     l13617:
 21289                           
 21290                           ; BSR set to: 0
 21291  00161E  0772               	decf	sprintf@width& (0+255),f,b
 21292  001620  DAC3               	call	PL96	;call to abstracted procedure
 21293  001622  B4D8               	btfsc	status,2,c
 21294  001624  2973               	incf	(sprintf@width+1)& (0+255),w,b
 21295  001626  E00D               	bz	l13625
 21296  001628  D7F7               	goto	l13613
 21297  00162A                     l13619:
 21298                           
 21299                           ; BSR set to: 0
 21300                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 21301  00162A  5174               	movf	sprintf@_val& (0+255),w,b
 21302  00162C  6ED9               	movwf	fsr2l,c
 21303  00162E  6ADA               	clrf	fsr2h,c
 21304  001630  C060  FFE1         	movff	sprintf@sp,fsr1l
 21305  001634  C061  FFE2         	movff	sprintf@sp+1,fsr1h
 21306  001638  CFDF FFE7          	movff	indf2,indf1
 21307                           
 21308                           ; BSR set to: 0
 21309  00163C  2B74               	incf	sprintf@_val& (0+255),f,b
 21310                           
 21311                           ; BSR set to: 0
 21312  00163E  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21313  001640  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21314  001642                     l13625:
 21315                           
 21316                           ; BSR set to: 0
 21317  001642  0775               	decf	(sprintf@_val+1)& (0+255),f,b
 21318  001644  A0D8               	btfss	status,0,c
 21319  001646  0776               	decf	(sprintf@_val+2)& (0+255),f,b
 21320  001648  0100               	movlb	0	; () banked
 21321  00164A  2975               	incf	(sprintf@_val+1)& (0+255),w,b
 21322  00164C  B4D8               	btfsc	status,2,c
 21323  00164E  2976               	incf	(sprintf@_val+2)& (0+255),w,b
 21324  001650  E1EC               	bnz	l13619
 21325                           
 21326                           ; BSR set to: 0
 21327                           ;doprnt.c: 779: if(flag & 0x08)
 21328  001652  B779               	btfsc	sprintf@flag& (0+255),3,b
 21329  001654  D004               	goto	l13633
 21330  001656  D23C               	goto	l13871
 21331  001658                     l13629:
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;doprnt.c: 781: ((*sp++ = (' ')));
 21335  001658  DA88               	call	PL60	;call to abstracted procedure
 21336                           
 21337                           ; BSR set to: 0
 21338  00165A  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21339  00165C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21340  00165E                     l13633:
 21341                           
 21342                           ; BSR set to: 0
 21343  00165E  0772               	decf	sprintf@width& (0+255),f,b
 21344  001660  DAA3               	call	PL96	;call to abstracted procedure
 21345  001662  B4D8               	btfsc	status,2,c
 21346  001664  2973               	incf	(sprintf@width+1)& (0+255),w,b
 21347  001666  E101 D233          	bz	l13871
 21348  00166A  D7F6               	goto	l13629
 21349  00166C                     l13635:
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21353  00166C  516F               	movf	sprintf@ap& (0+255),w,b
 21354  00166E  6ED9               	movwf	fsr2l,c
 21355  001670  6ADA               	clrf	fsr2h,c
 21356  001672  50DF               	movf	indf2,w,c
 21357  001674  6F78               	movwf	sprintf@c& (0+255),b
 21358                           
 21359                           ; BSR set to: 0
 21360  001676  0E02               	movlw	2
 21361  001678  276F               	addwf	sprintf@ap& (0+255),f,b
 21362  00167A                     l13639:
 21363                           
 21364                           ; BSR set to: 0
 21365                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 21366  00167A  0E78               	movlw	low sprintf@c
 21367  00167C  6F74               	movwf	sprintf@_val& (0+255),b
 21368                           
 21369                           ; BSR set to: 0
 21370                           ;doprnt.c: 815: _val._str._len = 1;
 21371  00167E  6B76               	clrf	(sprintf@_val+2)& (0+255),b
 21372  001680  0E01               	movlw	1
 21373  001682  6F75               	movwf	(sprintf@_val+1)& (0+255),b
 21374                           
 21375                           ;doprnt.c: 816: goto dostring;
 21376  001684  D7AC               	goto	l13601
 21377  001686                     l13643:
 21378                           
 21379                           ; BSR set to: 0
 21380                           ;doprnt.c: 827: flag |= 0xC0;
 21381  001686  0EC0               	movlw	192
 21382  001688  1379               	iorwf	sprintf@flag& (0+255),f,b
 21383                           
 21384                           ;doprnt.c: 828: break;
 21385  00168A  D016               	goto	l13649
 21386  00168C                     l13647:
 21387  00168C  0100               	movlb	0	; () banked
 21388  00168E  DA74               	call	PL70	;call to abstracted procedure
 21389  001690  5178               	movf	sprintf@c& (0+255),w,b
 21390                           
 21391                           ; Switch size 1, requested type "space"
 21392                           ; Number of cases is 9, Range of values is 0 to 120
 21393                           ; switch strategies available:
 21394                           ; Name         Instructions Cycles
 21395                           ; simple_byte           28    15 (average)
 21396                           ;	Chosen strategy is simple_byte
 21397  001692  E101 D221          	bz	l13873
 21398  001696  0A58               	xorlw	88	; case 88
 21399  001698  E09F               	bz	l13599
 21400  00169A  0A3B               	xorlw	59	; case 99
 21401  00169C  E0E7               	bz	l13635
 21402  00169E  0A07               	xorlw	7	; case 100
 21403  0016A0  E00B               	bz	l13649
 21404  0016A2  0A0D               	xorlw	13	; case 105
 21405  0016A4  E009               	bz	l13649
 21406  0016A6  0A05               	xorlw	5	; case 108
 21407  0016A8  E093               	bz	l13595
 21408  0016AA  0A03               	xorlw	3	; case 111
 21409  0016AC  E093               	bz	l13597
 21410  0016AE  0A1A               	xorlw	26	; case 117
 21411  0016B0  E0EA               	bz	l13643
 21412  0016B2  0A0D               	xorlw	13	; case 120
 21413  0016B4  E092               	bz	l1555
 21414  0016B6  D7E1               	goto	l13639
 21415  0016B8                     l13649:
 21416                           
 21417                           ; BSR set to: 0
 21418                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 21419  0016B8  5179               	movf	sprintf@flag& (0+255),w,b
 21420  0016BA  0BC0               	andlw	192
 21421  0016BC  E120               	bnz	l1574
 21422                           
 21423                           ; BSR set to: 0
 21424                           ;doprnt.c: 1260: {
 21425                           ;doprnt.c: 1262: if(flag & 0x10)
 21426  0016BE  A979               	btfss	sprintf@flag& (0+255),4,b
 21427  0016C0  D003               	goto	l13657
 21428                           
 21429                           ; BSR set to: 0
 21430                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 21431  0016C2  516F               	movf	sprintf@ap& (0+255),w,b
 21432                           
 21433                           ; BSR set to: 0
 21434  0016C4  DA47               	call	PL52	;call to abstracted procedure
 21435  0016C6  D00D               	goto	L52
 21436  0016C8                     l13657:
 21437                           
 21438                           ; BSR set to: 0
 21439                           ;doprnt.c: 1264: else
 21440                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 21441  0016C8  516F               	movf	sprintf@ap& (0+255),w,b
 21442  0016CA  6ED9               	movwf	fsr2l,c
 21443  0016CC  6ADA               	clrf	fsr2h,c
 21444  0016CE  CFDE F074          	movff	postinc2,sprintf@_val
 21445  0016D2  CFDD F075          	movff	postdec2,sprintf@_val+1
 21446  0016D6  0E00               	movlw	0
 21447  0016D8  BF75               	btfsc	(sprintf@_val+1)& (0+255),7,b
 21448  0016DA  0EFF               	movlw	-1
 21449  0016DC  6F76               	movwf	(sprintf@_val+2)& (0+255),b
 21450  0016DE  6F77               	movwf	(sprintf@_val+3)& (0+255),b
 21451                           
 21452                           ; BSR set to: 0
 21453  0016E0  0E02               	movlw	2
 21454  0016E2                     L52:
 21455  0016E2  276F               	addwf	sprintf@ap& (0+255),f,b
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 21459  0016E4  AF77               	btfss	(sprintf@_val+3)& (0+255),7,b
 21460  0016E6  D01F               	goto	l13675
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;doprnt.c: 1269: flag |= 0x03;
 21464  0016E8  0E03               	movlw	3
 21465  0016EA  1379               	iorwf	sprintf@flag& (0+255),f,b
 21466                           
 21467                           ; BSR set to: 0
 21468                           ;doprnt.c: 1270: _val._val = -_val._val;
 21469  0016EC  1F77               	comf	(sprintf@_val+3)& (0+255),f,b
 21470  0016EE  1F76               	comf	(sprintf@_val+2)& (0+255),f,b
 21471  0016F0  1F75               	comf	(sprintf@_val+1)& (0+255),f,b
 21472  0016F2  6D74               	negf	sprintf@_val& (0+255),b
 21473  0016F4  0E00               	movlw	0
 21474  0016F6  2375               	addwfc	(sprintf@_val+1)& (0+255),f,b
 21475  0016F8  2376               	addwfc	(sprintf@_val+2)& (0+255),f,b
 21476  0016FA  2377               	addwfc	(sprintf@_val+3)& (0+255),f,b
 21477  0016FC  D014               	goto	l13675
 21478  0016FE                     l1574:
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;doprnt.c: 1275: else
 21482                           ;doprnt.c: 1280: {
 21483                           ;doprnt.c: 1288: if(flag & 0x10)
 21484  0016FE  A979               	btfss	sprintf@flag& (0+255),4,b
 21485  001700  D003               	goto	l13671
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 21489  001702  516F               	movf	sprintf@ap& (0+255),w,b
 21490                           
 21491                           ; BSR set to: 0
 21492  001704  DA27               	call	PL52	;call to abstracted procedure
 21493  001706  D00E               	goto	L53
 21494  001708                     l13671:
 21495                           
 21496                           ; BSR set to: 0
 21497                           ;doprnt.c: 1290: else
 21498                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21499  001708  516F               	movf	sprintf@ap& (0+255),w,b
 21500  00170A  6ED9               	movwf	fsr2l,c
 21501  00170C  6ADA               	clrf	fsr2h,c
 21502  00170E  CFDE F02F          	movff	postinc2,??_sprintf
 21503  001712  CFDD F030          	movff	postdec2,??_sprintf+1
 21504  001716  C02F  F074         	movff	??_sprintf,sprintf@_val
 21505  00171A  C030  F075         	movff	??_sprintf+1,sprintf@_val+1
 21506  00171E  6B76               	clrf	(sprintf@_val+2)& (0+255),b
 21507  001720  6B77               	clrf	(sprintf@_val+3)& (0+255),b
 21508                           
 21509                           ; BSR set to: 0
 21510  001722  0E02               	movlw	2
 21511  001724                     L53:
 21512  001724  276F               	addwf	sprintf@ap& (0+255),f,b
 21513  001726                     l13675:
 21514                           
 21515                           ; BSR set to: 0
 21516                           ;doprnt.c: 1294: }
 21517                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 21518  001726  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21519  001728  1170               	iorwf	sprintf@prec& (0+255),w,b
 21520  00172A  E15C               	bnz	l13725
 21521                           
 21522                           ; BSR set to: 0
 21523  00172C  5177               	movf	(sprintf@_val+3)& (0+255),w,b
 21524  00172E  1174               	iorwf	sprintf@_val& (0+255),w,b
 21525  001730  1175               	iorwf	(sprintf@_val+1)& (0+255),w,b
 21526  001732  1176               	iorwf	(sprintf@_val+2)& (0+255),w,b
 21527  001734  E157               	bnz	l13725
 21528                           
 21529                           ; BSR set to: 0
 21530                           ;doprnt.c: 1298: prec++;
 21531  001736  4B70               	infsnz	sprintf@prec& (0+255),f,b
 21532  001738  2B71               	incf	(sprintf@prec+1)& (0+255),f,b
 21533  00173A  D054               	goto	l13725
 21534  00173C                     l13681:
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;doprnt.c: 1309: case 0xC0:
 21538                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21539  00173C  0E01               	movlw	1
 21540  00173E  6F78               	movwf	sprintf@c& (0+255),b
 21541  001740                     l13683:
 21542                           
 21543                           ; BSR set to: 0
 21544  001740  5178               	movf	sprintf@c& (0+255),w,b
 21545  001742  0A0A               	xorlw	10
 21546  001744  E058               	bz	l13727
 21547                           
 21548                           ; BSR set to: 0
 21549                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 21550  001746  5178               	movf	sprintf@c& (0+255),w,b
 21551  001748  0D04               	mullw	4
 21552  00174A  0E0C               	movlw	low _dpowers
 21553  00174C  24F3               	addwf	prodl,w,c
 21554  00174E  6EF6               	movwf	tblptrl,c
 21555  001750  0E70               	movlw	high _dpowers
 21556  001752  20F4               	addwfc	prodh,w,c
 21557  001754  6EF7               	movwf	tblptrh,c
 21558  001756  0009               	tblrd		*+
 21559  001758  50F5               	movf	tablat,w,c
 21560  00175A  5D74               	subwf	sprintf@_val& (0+255),w,b
 21561  00175C  0009               	tblrd		*+
 21562  00175E  50F5               	movf	tablat,w,c
 21563  001760  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21564  001762  0009               	tblrd		*+
 21565  001764  50F5               	movf	tablat,w,c
 21566  001766  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21567  001768  0009               	tblrd		*+
 21568  00176A  50F5               	movf	tablat,w,c
 21569  00176C  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21570  00176E  E343               	bnc	l13727
 21571                           
 21572                           ; BSR set to: 0
 21573  001770  2B78               	incf	sprintf@c& (0+255),f,b
 21574  001772  D7E6               	goto	l13683
 21575  001774                     l13695:
 21576                           
 21577                           ; BSR set to: 0
 21578                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21579  001774  0E01               	movlw	1
 21580  001776  6F78               	movwf	sprintf@c& (0+255),b
 21581  001778                     l13697:
 21582                           
 21583                           ; BSR set to: 0
 21584  001778  5178               	movf	sprintf@c& (0+255),w,b
 21585  00177A  0A08               	xorlw	8
 21586  00177C  E03C               	bz	l13727
 21587                           
 21588                           ; BSR set to: 0
 21589                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 21590  00177E  5178               	movf	sprintf@c& (0+255),w,b
 21591  001780  0D04               	mullw	4
 21592  001782  0E34               	movlw	low _hexpowers
 21593  001784  24F3               	addwf	prodl,w,c
 21594  001786  6EF6               	movwf	tblptrl,c
 21595  001788  0E70               	movlw	high _hexpowers
 21596  00178A  20F4               	addwfc	prodh,w,c
 21597  00178C  6EF7               	movwf	tblptrh,c
 21598  00178E  0009               	tblrd		*+
 21599  001790  50F5               	movf	tablat,w,c
 21600  001792  5D74               	subwf	sprintf@_val& (0+255),w,b
 21601  001794  0009               	tblrd		*+
 21602  001796  50F5               	movf	tablat,w,c
 21603  001798  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21604  00179A  0009               	tblrd		*+
 21605  00179C  50F5               	movf	tablat,w,c
 21606  00179E  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21607  0017A0  0009               	tblrd		*+
 21608  0017A2  50F5               	movf	tablat,w,c
 21609  0017A4  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21610  0017A6  E327               	bnc	l13727
 21611                           
 21612                           ; BSR set to: 0
 21613  0017A8  2B78               	incf	sprintf@c& (0+255),f,b
 21614  0017AA  D7E6               	goto	l13697
 21615  0017AC                     l13709:
 21616                           
 21617                           ; BSR set to: 0
 21618                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 21619  0017AC  0E01               	movlw	1
 21620  0017AE  6F78               	movwf	sprintf@c& (0+255),b
 21621  0017B0                     l13711:
 21622                           
 21623                           ; BSR set to: 0
 21624  0017B0  5178               	movf	sprintf@c& (0+255),w,b
 21625  0017B2  0A0C               	xorlw	12
 21626  0017B4  E020               	bz	l13727
 21627                           
 21628                           ; BSR set to: 0
 21629                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 21630  0017B6  5178               	movf	sprintf@c& (0+255),w,b
 21631  0017B8  0D04               	mullw	4
 21632  0017BA  0EDC               	movlw	low _octpowers
 21633  0017BC  24F3               	addwf	prodl,w,c
 21634  0017BE  6EF6               	movwf	tblptrl,c
 21635  0017C0  0E6F               	movlw	high _octpowers
 21636  0017C2  20F4               	addwfc	prodh,w,c
 21637  0017C4  6EF7               	movwf	tblptrh,c
 21638  0017C6  0009               	tblrd		*+
 21639  0017C8  50F5               	movf	tablat,w,c
 21640  0017CA  5D74               	subwf	sprintf@_val& (0+255),w,b
 21641  0017CC  0009               	tblrd		*+
 21642  0017CE  50F5               	movf	tablat,w,c
 21643  0017D0  5975               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21644  0017D2  0009               	tblrd		*+
 21645  0017D4  50F5               	movf	tablat,w,c
 21646  0017D6  5976               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21647  0017D8  0009               	tblrd		*+
 21648  0017DA  50F5               	movf	tablat,w,c
 21649  0017DC  5977               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21650  0017DE  E30B               	bnc	l13727
 21651                           
 21652                           ; BSR set to: 0
 21653  0017E0  2B78               	incf	sprintf@c& (0+255),f,b
 21654  0017E2  D7E6               	goto	l13711
 21655  0017E4                     l13725:
 21656                           
 21657                           ; BSR set to: 0
 21658  0017E4  5179               	movf	sprintf@flag& (0+255),w,b
 21659  0017E6  0BC0               	andlw	192
 21660                           
 21661                           ; Switch size 1, requested type "space"
 21662                           ; Number of cases is 4, Range of values is 0 to 192
 21663                           ; switch strategies available:
 21664                           ; Name         Instructions Cycles
 21665                           ; simple_byte           13     7 (average)
 21666                           ;	Chosen strategy is simple_byte
 21667  0017E8  E0A9               	bz	l13681
 21668  0017EA  0A40               	xorlw	64	; case 64
 21669  0017EC  E0DF               	bz	l13709
 21670  0017EE  0AC0               	xorlw	192	; case 128
 21671  0017F0  E0C1               	bz	l13695
 21672  0017F2  0A40               	xorlw	64	; case 192
 21673  0017F4  E0A3               	bz	l13681
 21674  0017F6                     l13727:
 21675                           
 21676                           ; BSR set to: 0
 21677                           ;doprnt.c: 1346: if(c < prec)
 21678  0017F6  0E80               	movlw	128
 21679  0017F8  BF78               	btfsc	sprintf@c& (0+255),7,b
 21680  0017FA  0E7F               	movlw	127
 21681  0017FC  6E2F               	movwf	??_sprintf& (0+255),c
 21682  0017FE  5170               	movf	sprintf@prec& (0+255),w,b
 21683  001800  5D78               	subwf	sprintf@c& (0+255),w,b
 21684  001802  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21685  001804  0A80               	xorlw	128
 21686  001806  582F               	subwfb	??_sprintf& (0+255),w,c
 21687  001808  E203               	bc	l13731
 21688                           
 21689                           ; BSR set to: 0
 21690                           ;doprnt.c: 1347: c = prec;
 21691  00180A  C070  F078         	movff	sprintf@prec,sprintf@c
 21692  00180E  D00F               	goto	l13735
 21693  001810                     l13731:
 21694                           
 21695                           ; BSR set to: 0
 21696                           ;doprnt.c: 1348: else if(prec < c)
 21697  001810  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21698  001812  0A80               	xorlw	128
 21699  001814  6E2F               	movwf	??_sprintf& (0+255),c
 21700  001816  5178               	movf	sprintf@c& (0+255),w,b
 21701  001818  5D70               	subwf	sprintf@prec& (0+255),w,b
 21702  00181A  0E80               	movlw	128
 21703  00181C  BF78               	btfsc	sprintf@c& (0+255),7,b
 21704  00181E  0E7F               	movlw	127
 21705  001820  582F               	subwfb	??_sprintf& (0+255),w,c
 21706  001822  E205               	bc	l13735
 21707                           
 21708                           ; BSR set to: 0
 21709                           ;doprnt.c: 1349: prec = c;
 21710  001824  5178               	movf	sprintf@c& (0+255),w,b
 21711  001826  6F70               	movwf	sprintf@prec& (0+255),b
 21712  001828  6B71               	clrf	(sprintf@prec+1)& (0+255),b
 21713  00182A  BF70               	btfsc	sprintf@prec& (0+255),7,b
 21714  00182C  0771               	decf	(sprintf@prec+1)& (0+255),f,b
 21715  00182E                     l13735:
 21716                           
 21717                           ; BSR set to: 0
 21718                           ;doprnt.c: 1352: if(width && flag & 0x03)
 21719  00182E  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21720  001830  1172               	iorwf	sprintf@width& (0+255),w,b
 21721  001832  E006               	bz	l13741
 21722                           
 21723                           ; BSR set to: 0
 21724  001834  5179               	movf	sprintf@flag& (0+255),w,b
 21725  001836  0B03               	andlw	3
 21726  001838  E003               	bz	l13741
 21727                           
 21728                           ; BSR set to: 0
 21729                           ;doprnt.c: 1353: width--;
 21730  00183A  0772               	decf	sprintf@width& (0+255),f,b
 21731  00183C  A0D8               	btfss	status,0,c
 21732  00183E  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21733  001840                     l13741:
 21734                           
 21735                           ; BSR set to: 0
 21736                           ;doprnt.c: 1355: if(flag & 0x4000) {
 21737  001840  AD7A               	btfss	(sprintf@flag+1)& (0+255),6,b
 21738  001842  D010               	goto	l13747
 21739                           
 21740                           ; BSR set to: 0
 21741                           ;doprnt.c: 1356: if(width > prec)
 21742  001844  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21743  001846  0A80               	xorlw	128
 21744  001848  6E2F               	movwf	??_sprintf& (0+255),c
 21745  00184A  5172               	movf	sprintf@width& (0+255),w,b
 21746  00184C  5D70               	subwf	sprintf@prec& (0+255),w,b
 21747  00184E  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21748  001850  0A80               	xorlw	128
 21749  001852  582F               	subwfb	??_sprintf& (0+255),w,c
 21750  001854  E205               	bc	l1602
 21751                           
 21752                           ; BSR set to: 0
 21753                           ;doprnt.c: 1357: width -= prec;
 21754  001856  5170               	movf	sprintf@prec& (0+255),w,b
 21755  001858  5F72               	subwf	sprintf@width& (0+255),f,b
 21756  00185A  5171               	movf	(sprintf@prec+1)& (0+255),w,b
 21757  00185C  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21758  00185E  D002               	goto	l13747
 21759  001860                     l1602:
 21760                           
 21761                           ; BSR set to: 0
 21762                           ;doprnt.c: 1358: else
 21763                           ;doprnt.c: 1359: width = 0;
 21764  001860  6B72               	clrf	sprintf@width& (0+255),b
 21765  001862  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21766  001864                     l13747:
 21767                           
 21768                           ; BSR set to: 0
 21769                           ;doprnt.c: 1360: }
 21770                           ;doprnt.c: 1364: if((flag & (
 21771                           ;doprnt.c: 1366: 0x04|
 21772                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 21773  001864  0EC4               	movlw	196
 21774  001866  D94E               	call	PL18	;call to abstracted procedure
 21775  001868  0E40               	movlw	64
 21776  00186A  B4D8               	btfsc	status,2,c
 21777  00186C  182F               	xorwf	??_sprintf,w,c
 21778  00186E  E107               	bnz	l13753
 21779                           
 21780                           ; BSR set to: 0
 21781                           ;doprnt.c: 1369: if(width)
 21782  001870  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21783  001872  1172               	iorwf	sprintf@width& (0+255),w,b
 21784  001874  E018               	bz	l13759
 21785                           
 21786                           ; BSR set to: 0
 21787                           ;doprnt.c: 1370: width--;
 21788  001876  0772               	decf	sprintf@width& (0+255),f,b
 21789  001878  A0D8               	btfss	status,0,c
 21790  00187A  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21791  00187C  D014               	goto	l13759
 21792  00187E                     l13753:
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21796  00187E  0EC0               	movlw	192
 21797  001880  D941               	call	PL18	;call to abstracted procedure
 21798  001882  0E80               	movlw	128
 21799  001884  B4D8               	btfsc	status,2,c
 21800  001886  182F               	xorwf	??_sprintf,w,c
 21801  001888  E10E               	bnz	l13759
 21802                           
 21803                           ; BSR set to: 0
 21804                           ;doprnt.c: 1379: if(width > 2)
 21805  00188A  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21806  00188C  0A80               	xorlw	128
 21807  00188E  0F80               	addlw	-128
 21808  001890  0E03               	movlw	3
 21809  001892  B4D8               	btfsc	status,2,c
 21810  001894  5D72               	subwf	sprintf@width& (0+255),w,b
 21811  001896  E305               	bnc	l1608
 21812                           
 21813                           ; BSR set to: 0
 21814                           ;doprnt.c: 1380: width -= 2;
 21815  001898  0EFE               	movlw	254
 21816  00189A  2772               	addwf	sprintf@width& (0+255),f,b
 21817  00189C  0EFF               	movlw	255
 21818  00189E  2373               	addwfc	(sprintf@width+1)& (0+255),f,b
 21819  0018A0  D002               	goto	l13759
 21820  0018A2                     l1608:
 21821                           
 21822                           ; BSR set to: 0
 21823                           ;doprnt.c: 1381: else
 21824                           ;doprnt.c: 1382: width = 0;
 21825  0018A2  6B72               	clrf	sprintf@width& (0+255),b
 21826  0018A4  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21827  0018A6                     l13759:
 21828                           
 21829                           ; BSR set to: 0
 21830                           ;doprnt.c: 1383: }
 21831                           ;doprnt.c: 1388: if(width > c)
 21832  0018A6  0E80               	movlw	128
 21833  0018A8  BF78               	btfsc	sprintf@c& (0+255),7,b
 21834  0018AA  0E7F               	movlw	127
 21835  0018AC  6E2F               	movwf	??_sprintf& (0+255),c
 21836  0018AE  5172               	movf	sprintf@width& (0+255),w,b
 21837  0018B0  5D78               	subwf	sprintf@c& (0+255),w,b
 21838  0018B2  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21839  0018B4  0A80               	xorlw	128
 21840  0018B6  582F               	subwfb	??_sprintf& (0+255),w,c
 21841  0018B8  E207               	bc	l1610
 21842                           
 21843                           ; BSR set to: 0
 21844                           ;doprnt.c: 1389: width -= c;
 21845  0018BA  5178               	movf	sprintf@c& (0+255),w,b
 21846  0018BC  5F72               	subwf	sprintf@width& (0+255),f,b
 21847  0018BE  0E00               	movlw	0
 21848  0018C0  BF78               	btfsc	sprintf@c& (0+255),7,b
 21849  0018C2  0EFF               	movlw	255
 21850  0018C4  5B73               	subwfb	(sprintf@width+1)& (0+255),f,b
 21851  0018C6  D002               	goto	l1611
 21852  0018C8                     l1610:
 21853                           
 21854                           ; BSR set to: 0
 21855                           ;doprnt.c: 1390: else
 21856                           ;doprnt.c: 1391: width = 0;
 21857  0018C8  6B72               	clrf	sprintf@width& (0+255),b
 21858  0018CA  6B73               	clrf	(sprintf@width+1)& (0+255),b
 21859  0018CC                     l1611:
 21860                           
 21861                           ; BSR set to: 0
 21862                           ;doprnt.c: 1394: if(flag & 0x04) {
 21863  0018CC  A579               	btfss	sprintf@flag& (0+255),2,b
 21864  0018CE  D03C               	goto	l13797
 21865                           
 21866                           ; BSR set to: 0
 21867                           ;doprnt.c: 1399: if(flag & 0x03)
 21868  0018D0  5179               	movf	sprintf@flag& (0+255),w,b
 21869  0018D2  0B03               	andlw	3
 21870  0018D4  E009               	bz	l1613
 21871                           
 21872                           ; BSR set to: 0
 21873                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 21874  0018D6  C060  FFD9         	movff	sprintf@sp,fsr2l
 21875  0018DA  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21876  0018DE  0E2D               	movlw	45
 21877  0018E0  6EDF               	movwf	indf2,c
 21878  0018E2                     l13767:
 21879                           
 21880                           ; BSR set to: 0
 21881  0018E2  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21882  0018E4  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21883  0018E6  D022               	goto	l13789
 21884  0018E8                     l1613:
 21885                           
 21886                           ; BSR set to: 0
 21887                           ;doprnt.c: 1403: else
 21888                           ;doprnt.c: 1406: if(flag & 0x01)
 21889  0018E8  A179               	btfss	sprintf@flag& (0+255),0,b
 21890  0018EA  D006               	goto	l13773
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 21894  0018EC  C060  FFD9         	movff	sprintf@sp,fsr2l
 21895  0018F0  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21896  0018F4  0E20               	movlw	32
 21897  0018F6  D7F4               	goto	L54
 21898  0018F8                     l13773:
 21899                           
 21900                           ; BSR set to: 0
 21901                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21902  0018F8  0EC0               	movlw	192
 21903  0018FA  D904               	call	PL18	;call to abstracted procedure
 21904  0018FC  0E80               	movlw	128
 21905  0018FE  B4D8               	btfsc	status,2,c
 21906  001900  182F               	xorwf	??_sprintf,w,c
 21907  001902  E114               	bnz	l13789
 21908                           
 21909                           ; BSR set to: 0
 21910                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 21911  001904  C060  FFD9         	movff	sprintf@sp,fsr2l
 21912  001908  D94A               	call	PL84	;call to abstracted procedure
 21913                           
 21914                           ; BSR set to: 0
 21915  00190A  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21916  00190C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21917                           
 21918                           ; BSR set to: 0
 21919                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 21920  00190E  BB79               	btfsc	sprintf@flag& (0+255),5,b
 21921  001910  D003               	goto	l13783
 21922                           
 21923                           ; BSR set to: 0
 21924  001912  6B6A               	clrf	(_sprintf$2087+1)& (0+255),b
 21925  001914  0E78               	movlw	120
 21926  001916  D002               	goto	L55
 21927  001918                     l13783:
 21928                           
 21929                           ; BSR set to: 0
 21930  001918  6B6A               	clrf	(_sprintf$2087+1)& (0+255),b
 21931  00191A  0E58               	movlw	88
 21932  00191C                     L55:
 21933  00191C  6F69               	movwf	_sprintf$2087& (0+255),b
 21934                           
 21935                           ; BSR set to: 0
 21936  00191E  C060  FFD9         	movff	sprintf@sp,fsr2l
 21937  001922  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 21938  001926  C069  FFDF         	movff	_sprintf$2087,indf2
 21939  00192A  D7DB               	goto	l13767
 21940  00192C                     l13789:
 21941                           
 21942                           ; BSR set to: 0
 21943                           ;doprnt.c: 1419: }
 21944                           ;doprnt.c: 1422: if(width)
 21945  00192C  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21946  00192E  1172               	iorwf	sprintf@width& (0+255),w,b
 21947  001930  E101 D0B9          	bz	l13861
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 21951  001934  C060  FFD9         	movff	sprintf@sp,fsr2l
 21952  001938  D932               	call	PL84	;call to abstracted procedure
 21953                           
 21954                           ; BSR set to: 0
 21955  00193A  4B60               	infsnz	sprintf@sp& (0+255),f,b
 21956  00193C  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;doprnt.c: 1425: while(--width);
 21960  00193E  0772               	decf	sprintf@width& (0+255),f,b
 21961  001940  A0D8               	btfss	status,0,c
 21962  001942  0773               	decf	(sprintf@width+1)& (0+255),f,b
 21963  001944  0100               	movlb	0	; () banked
 21964  001946  D7F2               	goto	l13789
 21965  001948                     l13797:
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;doprnt.c: 1429: {
 21969                           ;doprnt.c: 1431: if(width
 21970                           ;doprnt.c: 1433: && !(flag & 0x08)
 21971                           ;doprnt.c: 1435: )
 21972  001948  5173               	movf	(sprintf@width+1)& (0+255),w,b
 21973  00194A  1172               	iorwf	sprintf@width& (0+255),w,b
 21974  00194C  A4D8               	btfss	status,2,c
 21975                           
 21976                           ; BSR set to: 0
 21977  00194E  B779               	btfsc	sprintf@flag& (0+255),3,b
 21978  001950  D004               	goto	l13807
 21979  001952                     l13801:
 21980                           
 21981                           ; BSR set to: 0
 21982                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 21983  001952  C060  FFD9         	movff	sprintf@sp,fsr2l
 21984                           
 21985                           ; BSR set to: 0
 21986                           
 21987                           ; BSR set to: 0
 21988                           ;doprnt.c: 1438: while(--width);
 21989  001956  D8F1               	call	PL40	;call to abstracted procedure
 21990  001958  E1FC               	bnz	l13801
 21991  00195A                     l13807:
 21992                           
 21993                           ; BSR set to: 0
 21994                           ;doprnt.c: 1445: if(flag & 0x03)
 21995  00195A  5179               	movf	sprintf@flag& (0+255),w,b
 21996  00195C  0B03               	andlw	3
 21997  00195E  E009               	bz	l1629
 21998                           
 21999                           ; BSR set to: 0
 22000                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22001  001960  C060  FFD9         	movff	sprintf@sp,fsr2l
 22002  001964  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22003  001968  0E2D               	movlw	45
 22004  00196A  6EDF               	movwf	indf2,c
 22005                           
 22006                           ; BSR set to: 0
 22007  00196C  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22008  00196E  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22009  001970  D008               	goto	l13817
 22010  001972                     l1629:
 22011                           
 22012                           ; BSR set to: 0
 22013                           ;doprnt.c: 1450: else if(flag & 0x01)
 22014  001972  A179               	btfss	sprintf@flag& (0+255),0,b
 22015  001974  D006               	goto	l13817
 22016                           
 22017                           ; BSR set to: 0
 22018                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22019  001976  C060  FFD9         	movff	sprintf@sp,fsr2l
 22020  00197A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22021  00197E  0E20               	movlw	32
 22022  001980  D7F4               	goto	L56
 22023  001982                     l13817:
 22024                           
 22025                           ; BSR set to: 0
 22026                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22027  001982  0EC0               	movlw	192
 22028  001984  D8BF               	call	PL18	;call to abstracted procedure
 22029  001986  0E40               	movlw	64
 22030  001988  B4D8               	btfsc	status,2,c
 22031  00198A  182F               	xorwf	??_sprintf,w,c
 22032  00198C  E106               	bnz	l13823
 22033                           
 22034                           ; BSR set to: 0
 22035                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22036  00198E  C060  FFD9         	movff	sprintf@sp,fsr2l
 22037  001992  D905               	call	PL84	;call to abstracted procedure
 22038  001994                     l13821:
 22039                           
 22040                           ; BSR set to: 0
 22041  001994  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22042  001996  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22043  001998  D086               	goto	l13861
 22044  00199A                     l13823:
 22045                           
 22046                           ; BSR set to: 0
 22047                           ;doprnt.c: 1457: else
 22048                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22049  00199A  0EC0               	movlw	192
 22050  00199C  D8B3               	call	PL18	;call to abstracted procedure
 22051  00199E  0E80               	movlw	128
 22052  0019A0  B4D8               	btfsc	status,2,c
 22053  0019A2  182F               	xorwf	??_sprintf,w,c
 22054  0019A4  E001 D07F          	bnz	l13861
 22055                           
 22056                           ; BSR set to: 0
 22057                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22058  0019A8  C060  FFD9         	movff	sprintf@sp,fsr2l
 22059  0019AC  D8F8               	call	PL84	;call to abstracted procedure
 22060                           
 22061                           ; BSR set to: 0
 22062  0019AE  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22063  0019B0  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22064                           
 22065                           ; BSR set to: 0
 22066                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22067  0019B2  BB79               	btfsc	sprintf@flag& (0+255),5,b
 22068  0019B4  D003               	goto	l13833
 22069                           
 22070                           ; BSR set to: 0
 22071  0019B6  6B6C               	clrf	(_sprintf$2088+1)& (0+255),b
 22072  0019B8  0E78               	movlw	120
 22073  0019BA  D002               	goto	L57
 22074  0019BC                     l13833:
 22075                           
 22076                           ; BSR set to: 0
 22077  0019BC  6B6C               	clrf	(_sprintf$2088+1)& (0+255),b
 22078  0019BE  0E58               	movlw	88
 22079  0019C0                     L57:
 22080  0019C0  6F6B               	movwf	_sprintf$2088& (0+255),b
 22081                           
 22082                           ; BSR set to: 0
 22083  0019C2  C060  FFD9         	movff	sprintf@sp,fsr2l
 22084  0019C6  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22085  0019CA  C06B  FFDF         	movff	_sprintf$2088,indf2
 22086  0019CE  D7E2               	goto	l13821
 22087  0019D0                     l13839:
 22088                           
 22089                           ; BSR set to: 0
 22090                           ;doprnt.c: 1493: case 0xC0:
 22091                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22092  0019D0  C070  F02F         	movff	sprintf@prec,??_sprintf
 22093  0019D4  C071  F030         	movff	sprintf@prec+1,??_sprintf+1
 22094  0019D8  90D8               	bcf	status,0,c
 22095  0019DA  362F               	rlcf	??_sprintf,f,c
 22096  0019DC  3630               	rlcf	??_sprintf+1,f,c
 22097  0019DE  90D8               	bcf	status,0,c
 22098  0019E0  362F               	rlcf	??_sprintf,f,c
 22099  0019E2  3630               	rlcf	??_sprintf+1,f,c
 22100  0019E4  0E0C               	movlw	low _dpowers
 22101  0019E6  242F               	addwf	??_sprintf,w,c
 22102  0019E8  6EF6               	movwf	tblptrl,c
 22103  0019EA  0E70               	movlw	high _dpowers
 22104  0019EC  D87C               	call	PL12	;call to abstracted procedure
 22105  0019EE  C074  F019         	movff	sprintf@_val,?___lldiv
 22106  0019F2  C075  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22107  0019F6  C076  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22108  0019FA  C077  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22109  0019FE  ECCD  F023         	call	___lldiv	;wreg free
 22110  001A02  C01C  F029         	movff	?___lldiv+3,?___llmod+3
 22111  001A06  C01B  F028         	movff	?___lldiv+2,?___llmod+2
 22112  001A0A  C01A  F027         	movff	?___lldiv+1,?___llmod+1
 22113  001A0E  C019  F026         	movff	?___lldiv,?___llmod
 22114  001A12  0E0A               	movlw	10
 22115  001A14  6E2A               	movwf	?___llmod+4,c
 22116  001A16  0E00               	movlw	0
 22117  001A18  6A2B               	clrf	?___llmod+5,c
 22118  001A1A  6A2C               	clrf	?___llmod+6,c
 22119  001A1C  6A2D               	clrf	?___llmod+7,c
 22120  001A1E  ECDE  F024         	call	___llmod	;wreg free
 22121  001A22  5026               	movf	?___llmod,w,c
 22122  001A24  D02D               	goto	L58
 22123  001A26                     l13841:
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;doprnt.c: 1506: {
 22127                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22128  001A26  D876               	call	PL20	;call to abstracted procedure
 22129  001A28  0E34               	movlw	low _hexpowers
 22130  001A2A  242F               	addwf	??_sprintf,w,c
 22131  001A2C  6EF6               	movwf	tblptrl,c
 22132  001A2E  0E70               	movlw	high _hexpowers
 22133  001A30  D85A               	call	PL12	;call to abstracted procedure
 22134  001A32  ECCD  F023         	call	___lldiv	;wreg free
 22135  001A36  5019               	movf	?___lldiv,w,c
 22136  001A38  0B0F               	andlw	15
 22137  001A3A  6F68               	movwf	sprintf@idx& (0+255),b
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22141  001A3C  BB79               	btfsc	sprintf@flag& (0+255),5,b
 22142  001A3E  D004               	goto	l13847
 22143                           
 22144                           ; BSR set to: 0
 22145  001A40  0E7E               	movlw	high STR_255
 22146  001A42  6F6E               	movwf	(_sprintf$2094+1)& (0+255),b
 22147  001A44  0E2C               	movlw	low STR_255
 22148  001A46  D003               	goto	L59
 22149  001A48                     l13847:
 22150                           
 22151                           ; BSR set to: 0
 22152  001A48  0E7E               	movlw	high STR_254
 22153  001A4A  6F6E               	movwf	(_sprintf$2094+1)& (0+255),b
 22154  001A4C  0E1B               	movlw	low STR_254
 22155  001A4E                     L59:
 22156  001A4E  6F6D               	movwf	_sprintf$2094& (0+255),b
 22157                           
 22158                           ; BSR set to: 0
 22159  001A50  5168               	movf	sprintf@idx& (0+255),w,b
 22160  001A52  256D               	addwf	_sprintf$2094& (0+255),w,b
 22161  001A54  6E2F               	movwf	??_sprintf& (0+255),c
 22162  001A56  0E00               	movlw	0
 22163  001A58  216E               	addwfc	(_sprintf$2094+1)& (0+255),w,b
 22164  001A5A  6E30               	movwf	(??_sprintf+1)& (0+255),c
 22165  001A5C  C02F  FFF6         	movff	??_sprintf,tblptrl
 22166  001A60  C030  FFF7         	movff	??_sprintf+1,tblptrh
 22167  001A64  0008               	tblrd		*
 22168  001A66  CFF5 F078          	movff	tablat,sprintf@c
 22169                           
 22170                           ;doprnt.c: 1515: }
 22171                           ;doprnt.c: 1517: break;
 22172  001A6A  D016               	goto	l13857
 22173  001A6C                     l13851:
 22174                           
 22175                           ; BSR set to: 0
 22176                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22177  001A6C  D853               	call	PL20	;call to abstracted procedure
 22178  001A6E  0EDC               	movlw	low _octpowers
 22179  001A70  242F               	addwf	??_sprintf,w,c
 22180  001A72  6EF6               	movwf	tblptrl,c
 22181  001A74  0E6F               	movlw	high _octpowers
 22182  001A76  D837               	call	PL12	;call to abstracted procedure
 22183  001A78  ECCD  F023         	call	___lldiv	;wreg free
 22184  001A7C  5019               	movf	?___lldiv,w,c
 22185  001A7E  0B07               	andlw	7
 22186  001A80                     L58:
 22187  001A80  0F30               	addlw	48
 22188  001A82  6F78               	movwf	sprintf@c& (0+255),b
 22189                           
 22190                           ;doprnt.c: 1527: break;
 22191  001A84  D009               	goto	l13857
 22192  001A86                     l13855:
 22193                           
 22194                           ; BSR set to: 0
 22195  001A86  5179               	movf	sprintf@flag& (0+255),w,b
 22196  001A88  0BC0               	andlw	192
 22197                           
 22198                           ; Switch size 1, requested type "space"
 22199                           ; Number of cases is 4, Range of values is 0 to 192
 22200                           ; switch strategies available:
 22201                           ; Name         Instructions Cycles
 22202                           ; simple_byte           13     7 (average)
 22203                           ;	Chosen strategy is simple_byte
 22204  001A8A  E0A2               	bz	l13839
 22205  001A8C  0A40               	xorlw	64	; case 64
 22206  001A8E  E0EE               	bz	l13851
 22207  001A90  0AC0               	xorlw	192	; case 128
 22208  001A92  E0C9               	bz	l13841
 22209  001A94  0A40               	xorlw	64	; case 192
 22210  001A96  E09C               	bz	l13839
 22211  001A98                     l13857:
 22212                           
 22213                           ; BSR set to: 0
 22214                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22215  001A98  C060  FFD9         	movff	sprintf@sp,fsr2l
 22216  001A9C  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22217  001AA0  C078  FFDF         	movff	sprintf@c,indf2
 22218  001AA4  D777               	goto	l13821
 22219  001AA6                     l13861:
 22220                           
 22221                           ; BSR set to: 0
 22222  001AA6  0770               	decf	sprintf@prec& (0+255),f,b
 22223  001AA8  A0D8               	btfss	status,0,c
 22224  001AAA  0771               	decf	(sprintf@prec+1)& (0+255),f,b
 22225  001AAC  0100               	movlb	0	; () banked
 22226  001AAE  2970               	incf	sprintf@prec& (0+255),w,b
 22227  001AB0  B4D8               	btfsc	status,2,c
 22228  001AB2  2971               	incf	(sprintf@prec+1)& (0+255),w,b
 22229  001AB4  E1E8               	bnz	l13855
 22230                           
 22231                           ; BSR set to: 0
 22232                           ;doprnt.c: 1532: }
 22233                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22234  001AB6  A779               	btfss	sprintf@flag& (0+255),3,b
 22235  001AB8  D00B               	goto	l13871
 22236                           
 22237                           ; BSR set to: 0
 22238  001ABA  5173               	movf	(sprintf@width+1)& (0+255),w,b
 22239  001ABC  0A80               	xorlw	128
 22240  001ABE  0F80               	addlw	-128
 22241  001AC0  0E01               	movlw	1
 22242  001AC2  B4D8               	btfsc	status,2,c
 22243  001AC4  5D72               	subwf	sprintf@width& (0+255),w,b
 22244  001AC6  E304               	bnc	l13871
 22245  001AC8                     l13865:
 22246                           
 22247                           ; BSR set to: 0
 22248                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22249  001AC8  C060  FFD9         	movff	sprintf@sp,fsr2l
 22250                           
 22251                           ; BSR set to: 0
 22252                           
 22253                           ; BSR set to: 0
 22254                           ;doprnt.c: 1538: while(--width);
 22255  001ACC  D836               	call	PL40	;call to abstracted procedure
 22256  001ACE  E1FC               	bnz	l13865
 22257  001AD0                     l13871:
 22258                           
 22259                           ; BSR set to: 0
 22260  001AD0  D853               	call	PL70	;call to abstracted procedure
 22261  001AD2  0100               	movlb	0	; () banked
 22262  001AD4  6778               	tstfsz	sprintf@c& (0+255),b
 22263  001AD6  D4CA               	goto	l13537
 22264  001AD8                     l13873:
 22265                           
 22266                           ; BSR set to: 0
 22267                           ;doprnt.c: 1545: *sp = 0;
 22268  001AD8  C060  FFD9         	movff	sprintf@sp,fsr2l
 22269  001ADC  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22270  001AE0  0E00               	movlw	0
 22271  001AE2  6EDF               	movwf	indf2,c
 22272                           
 22273                           ; BSR set to: 0
 22274  001AE4  0C00               	retlw	0
 22275  001AE6                     __end_of_sprintf:
 22276                           	opt stack 0
 22277  001AE6                     PL12:
 22278                           	opt stack 26
 22279  001AE6  2030               	addwfc	??_sprintf+1,w,c
 22280  001AE8  6EF7               	movwf	tblptrh,c
 22281  001AEA  0009               	tblrd		*+
 22282  001AEC  CFF5 F01D          	movff	tablat,?___lldiv+4
 22283  001AF0  0009               	tblrd		*+
 22284  001AF2  CFF5 F01E          	movff	tablat,?___lldiv+5
 22285  001AF6  0009               	tblrd		*+
 22286  001AF8  CFF5 F01F          	movff	tablat,?___lldiv+6
 22287  001AFC  000A               	tblrd		*-
 22288  001AFE  CFF5 F020          	movff	tablat,?___lldiv+7
 22289  001B02  0012               	return	
 22290  001B04                     __end_ofPL12:
 22291                           	opt stack 0
 22292  001B04                     PL18:
 22293                           	opt stack 26
 22294  001B04  1579               	andwf	sprintf@flag& (0+255),w,b
 22295  001B06  6E2F               	movwf	??_sprintf& (0+255),c
 22296  001B08  0E08               	movlw	8
 22297  001B0A  157A               	andwf	(sprintf@flag+1)& (0+255),w,b
 22298  001B0C  6E30               	movwf	(??_sprintf+1)& (0+255),c
 22299  001B0E  5030               	movf	??_sprintf+1,w,c
 22300  001B10  0A08               	xorlw	8
 22301  001B12  0012               	return	
 22302  001B14                     __end_ofPL18:
 22303                           	opt stack 0
 22304  001B14                     PL20:
 22305                           	opt stack 26
 22306  001B14  C074  F019         	movff	sprintf@_val,?___lldiv
 22307  001B18  C075  F01A         	movff	sprintf@_val+1,?___lldiv+1
 22308  001B1C  C076  F01B         	movff	sprintf@_val+2,?___lldiv+2
 22309  001B20  C077  F01C         	movff	sprintf@_val+3,?___lldiv+3
 22310  001B24  C070  F02F         	movff	sprintf@prec,??_sprintf
 22311  001B28  C071  F030         	movff	sprintf@prec+1,??_sprintf+1
 22312  001B2C  90D8               	bcf	status,0,c
 22313  001B2E  362F               	rlcf	??_sprintf,f,c
 22314  001B30  3630               	rlcf	??_sprintf+1,f,c
 22315  001B32  90D8               	bcf	status,0,c
 22316  001B34  362F               	rlcf	??_sprintf,f,c
 22317  001B36  3630               	rlcf	??_sprintf+1,f,c
 22318  001B38  0012               	return	
 22319  001B3A                     __end_ofPL20:
 22320                           	opt stack 0
 22321  001B3A                     PL40:
 22322                           	opt stack 26
 22323  001B3A  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22324  001B3E  0E20               	movlw	32
 22325  001B40  6EDF               	movwf	indf2,c
 22326  001B42  4B60               	infsnz	sprintf@sp& (0+255),f,b
 22327  001B44  2B61               	incf	(sprintf@sp+1)& (0+255),f,b
 22328  001B46  0772               	decf	sprintf@width& (0+255),f,b
 22329  001B48  A0D8               	btfss	status,0,c
 22330  001B4A  0773               	decf	(sprintf@width+1)& (0+255),f,b
 22331  001B4C  0100               	movlb	0	; () banked
 22332  001B4E  5173               	movf	(sprintf@width+1)& (0+255),w,b
 22333  001B50  1172               	iorwf	sprintf@width& (0+255),w,b
 22334  001B52  0012               	return	
 22335  001B54                     __end_ofPL40:
 22336                           	opt stack 0
 22337  001B54                     PL52:
 22338                           	opt stack 26
 22339  001B54  6ED9               	movwf	fsr2l,c
 22340  001B56  6ADA               	clrf	fsr2h,c
 22341  001B58  CFDE F074          	movff	postinc2,sprintf@_val
 22342  001B5C  CFDE F075          	movff	postinc2,sprintf@_val+1
 22343  001B60  CFDE F076          	movff	postinc2,sprintf@_val+2
 22344  001B64  CFDE F077          	movff	postinc2,sprintf@_val+3
 22345  001B68  0C04               	retlw	4
 22346  001B6A                     __end_ofPL52:
 22347                           	opt stack 0
 22348  001B6A                     PL60:
 22349                           	opt stack 26
 22350  001B6A  C060  FFD9         	movff	sprintf@sp,fsr2l
 22351  001B6E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22352  001B72  0E20               	movlw	32
 22353  001B74  6EDF               	movwf	indf2,c
 22354  001B76  0C20               	retlw	32
 22355  001B78                     __end_ofPL60:
 22356                           	opt stack 0
 22357  001B78                     PL70:
 22358                           	opt stack 26
 22359  001B78  C062  FFF6         	movff	sprintf@f,tblptrl
 22360  001B7C  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22361  001B80  4B62               	infsnz	sprintf@f& (0+255),f,b
 22362  001B82  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22363  001B84  0008               	tblrd		*
 22364  001B86  CFF5 F078          	movff	tablat,sprintf@c
 22365  001B8A  0012               	return	
 22366  001B8C                     __end_ofPL70:
 22367                           	opt stack 0
 22368  001B8C                     PL76:
 22369                           	opt stack 26
 22370  001B8C  4B62               	infsnz	sprintf@f& (0+255),f,b
 22371  001B8E  2B63               	incf	(sprintf@f+1)& (0+255),f,b
 22372  001B90  C062  FFF6         	movff	sprintf@f,tblptrl
 22373  001B94  C063  FFF7         	movff	sprintf@f+1,tblptrh
 22374  001B98  0008               	tblrd		*
 22375  001B9A  50F5               	movf	tablat,w,c
 22376  001B9C  0012               	return	
 22377  001B9E                     __end_ofPL76:
 22378                           	opt stack 0
 22379  001B9E                     PL84:
 22380                           	opt stack 26
 22381  001B9E  C061  FFDA         	movff	sprintf@sp+1,fsr2h
 22382  001BA2  0E30               	movlw	48
 22383  001BA4  6EDF               	movwf	indf2,c
 22384  001BA6  0C30               	retlw	48
 22385  001BA8                     __end_ofPL84:
 22386                           	opt stack 0
 22387  001BA8                     PL96:
 22388                           	opt stack 26
 22389  001BA8  A0D8               	btfss	status,0,c
 22390  001BAA  0773               	decf	(sprintf@width+1)& (0+255),f,b
 22391  001BAC  0100               	movlb	0	; () banked
 22392  001BAE  2972               	incf	sprintf@width& (0+255),w,b
 22393  001BB0  0012               	return	
 22394  001BB2                     __end_ofPL96:
 22395                           	opt stack 0
 22396                           tblptru	equ	0xFF8
 22397                           tblptrh	equ	0xFF7
 22398                           tblptrl	equ	0xFF6
 22399                           tablat	equ	0xFF5
 22400                           prodh	equ	0xFF4
 22401                           prodl	equ	0xFF3
 22402                           intcon	equ	0xFF2
 22403                           indf0	equ	0xFEF
 22404                           postinc0	equ	0xFEE
 22405                           fsr0h	equ	0xFEA
 22406                           fsr0l	equ	0xFE9
 22407                           wreg	equ	0xFE8
 22408                           indf1	equ	0xFE7
 22409                           postinc1	equ	0xFE6
 22410                           postdec1	equ	0xFE5
 22411                           fsr1h	equ	0xFE2
 22412                           fsr1l	equ	0xFE1
 22413                           indf2	equ	0xFDF
 22414                           postinc2	equ	0xFDE
 22415                           postdec2	equ	0xFDD
 22416                           plusw2	equ	0xFDB
 22417                           fsr2h	equ	0xFDA
 22418                           fsr2l	equ	0xFD9
 22419                           status	equ	0xFD8
 22420                           
 22421 ;; *************** function ___wmul *****************
 22422 ;; Defined at:
 22423 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 22424 ;; Parameters:    Size  Location     Type
 22425 ;;  multiplier      2   24[COMRAM] unsigned int 
 22426 ;;  multiplicand    2   26[COMRAM] unsigned int 
 22427 ;; Auto vars:     Size  Location     Type
 22428 ;;  product         2   28[COMRAM] unsigned int 
 22429 ;; Return value:  Size  Location     Type
 22430 ;;                  2   24[COMRAM] unsigned int 
 22431 ;; Registers used:
 22432 ;;		wreg, status,2, status,0, prodl, prodh
 22433 ;; Tracked objects:
 22434 ;;		On entry : 0/3
 22435 ;;		On exit  : 0/0
 22436 ;;		Unchanged: 0/0
 22437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22438 ;;      Params:         4       0       0       0       0       0       0
 22439 ;;      Locals:         2       0       0       0       0       0       0
 22440 ;;      Temps:          0       0       0       0       0       0       0
 22441 ;;      Totals:         6       0       0       0       0       0       0
 22442 ;;Total ram usage:        6 bytes
 22443 ;; Hardware stack levels used:    1
 22444 ;; Hardware stack levels required when called:    2
 22445 ;; This function calls:
 22446 ;;		Nothing
 22447 ;; This function is called by:
 22448 ;;		_sprintf
 22449 ;;		_atoi
 22450 ;; This function uses a non-reentrant model
 22451 ;;
 22452                           
 22453                           	psect	text56
 22454  004FD6                     __ptext56:
 22455                           	opt stack 0
 22456  004FD6                     ___wmul:
 22457                           	opt stack 26
 22458                           
 22459                           ; BSR set to: 0
 22460                           ;incstack = 0
 22461                           ;incstack = 0
 22462  004FD6  5019               	movf	___wmul@multiplier,w,c
 22463  004FD8  021B               	mulwf	___wmul@multiplicand,c
 22464  004FDA  CFF3 F01D          	movff	prodl,___wmul@product
 22465  004FDE  CFF4 F01E          	movff	prodh,___wmul@product+1
 22466  004FE2  5019               	movf	___wmul@multiplier,w,c
 22467  004FE4  021C               	mulwf	___wmul@multiplicand+1,c
 22468  004FE6  D808               	call	PL86	;call to abstracted procedure
 22469  004FE8  501A               	movf	___wmul@multiplier+1,w,c
 22470  004FEA  021B               	mulwf	___wmul@multiplicand,c
 22471  004FEC  D805               	call	PL86	;call to abstracted procedure
 22472  004FEE  C01D  F019         	movff	___wmul@product,?___wmul
 22473  004FF2  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
 22474  004FF6  0012               	return	
 22475  004FF8                     __end_of___wmul:
 22476                           	opt stack 0
 22477  004FF8                     PL86:
 22478                           	opt stack 26
 22479  004FF8  CFF3 FFF4          	movff	prodl,prodh
 22480  004FFC  6AF3               	clrf	prodl,c
 22481  004FFE  50F3               	movf	prodl,w,c
 22482  005000  261D               	addwf	___wmul@product,f,c
 22483  005002  50F4               	movf	prodh,w,c
 22484  005004  221E               	addwfc	___wmul@product+1,f,c
 22485  005006  0012               	return	
 22486  005008                     __end_ofPL86:
 22487                           	opt stack 0
 22488                           tblptru	equ	0xFF8
 22489                           tblptrh	equ	0xFF7
 22490                           tblptrl	equ	0xFF6
 22491                           tablat	equ	0xFF5
 22492                           prodh	equ	0xFF4
 22493                           prodl	equ	0xFF3
 22494                           intcon	equ	0xFF2
 22495                           indf0	equ	0xFEF
 22496                           postinc0	equ	0xFEE
 22497                           fsr0h	equ	0xFEA
 22498                           fsr0l	equ	0xFE9
 22499                           wreg	equ	0xFE8
 22500                           indf1	equ	0xFE7
 22501                           postinc1	equ	0xFE6
 22502                           postdec1	equ	0xFE5
 22503                           fsr1h	equ	0xFE2
 22504                           fsr1l	equ	0xFE1
 22505                           indf2	equ	0xFDF
 22506                           postinc2	equ	0xFDE
 22507                           postdec2	equ	0xFDD
 22508                           plusw2	equ	0xFDB
 22509                           fsr2h	equ	0xFDA
 22510                           fsr2l	equ	0xFD9
 22511                           status	equ	0xFD8
 22512                           
 22513 ;; *************** function ___llmod *****************
 22514 ;; Defined at:
 22515 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 22516 ;; Parameters:    Size  Location     Type
 22517 ;;  dividend        4   37[COMRAM] unsigned long 
 22518 ;;  divisor         4   41[COMRAM] unsigned long 
 22519 ;; Auto vars:     Size  Location     Type
 22520 ;;  counter         1   45[COMRAM] unsigned char 
 22521 ;; Return value:  Size  Location     Type
 22522 ;;                  4   37[COMRAM] unsigned long 
 22523 ;; Registers used:
 22524 ;;		wreg, status,2, status,0
 22525 ;; Tracked objects:
 22526 ;;		On entry : F/0
 22527 ;;		On exit  : F/0
 22528 ;;		Unchanged: F/0
 22529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22530 ;;      Params:         8       0       0       0       0       0       0
 22531 ;;      Locals:         1       0       0       0       0       0       0
 22532 ;;      Temps:          0       0       0       0       0       0       0
 22533 ;;      Totals:         9       0       0       0       0       0       0
 22534 ;;Total ram usage:        9 bytes
 22535 ;; Hardware stack levels used:    1
 22536 ;; Hardware stack levels required when called:    2
 22537 ;; This function calls:
 22538 ;;		Nothing
 22539 ;; This function is called by:
 22540 ;;		_sprintf
 22541 ;;		_ultoa
 22542 ;; This function uses a non-reentrant model
 22543 ;;
 22544                           
 22545                           	psect	text57
 22546  0049BC                     __ptext57:
 22547                           	opt stack 0
 22548  0049BC                     ___llmod:
 22549                           	opt stack 25
 22550                           
 22551                           ; BSR set to: 0
 22552                           
 22553                           ;incstack = 0
 22554                           ;incstack = 0
 22555  0049BC  502D               	movf	___llmod@divisor+3,w,c
 22556  0049BE  102A               	iorwf	___llmod@divisor,w,c
 22557  0049C0  102B               	iorwf	___llmod@divisor+1,w,c
 22558  0049C2  102C               	iorwf	___llmod@divisor+2,w,c
 22559  0049C4  E023               	bz	l2228
 22560                           
 22561                           ; BSR set to: 0
 22562  0049C6  0E01               	movlw	1
 22563  0049C8  6E2E               	movwf	___llmod@counter,c
 22564  0049CA  D006               	goto	l13995
 22565  0049CC                     l13993:
 22566                           
 22567                           ; BSR set to: 0
 22568  0049CC  90D8               	bcf	status,0,c
 22569  0049CE  362A               	rlcf	___llmod@divisor,f,c
 22570  0049D0  362B               	rlcf	___llmod@divisor+1,f,c
 22571  0049D2  362C               	rlcf	___llmod@divisor+2,f,c
 22572  0049D4  362D               	rlcf	___llmod@divisor+3,f,c
 22573  0049D6  2A2E               	incf	___llmod@counter,f,c
 22574  0049D8                     l13995:
 22575                           
 22576                           ; BSR set to: 0
 22577  0049D8  AE2D               	btfss	___llmod@divisor+3,7,c
 22578  0049DA  D7F8               	goto	l13993
 22579  0049DC                     l13997:
 22580                           
 22581                           ; BSR set to: 0
 22582  0049DC  502A               	movf	___llmod@divisor,w,c
 22583  0049DE  5C26               	subwf	___llmod@dividend,w,c
 22584  0049E0  502B               	movf	___llmod@divisor+1,w,c
 22585  0049E2  5827               	subwfb	___llmod@dividend+1,w,c
 22586  0049E4  502C               	movf	___llmod@divisor+2,w,c
 22587  0049E6  5828               	subwfb	___llmod@dividend+2,w,c
 22588  0049E8  502D               	movf	___llmod@divisor+3,w,c
 22589  0049EA  5829               	subwfb	___llmod@dividend+3,w,c
 22590  0049EC  E308               	bnc	l14001
 22591                           
 22592                           ; BSR set to: 0
 22593  0049EE  502A               	movf	___llmod@divisor,w,c
 22594  0049F0  5E26               	subwf	___llmod@dividend,f,c
 22595  0049F2  502B               	movf	___llmod@divisor+1,w,c
 22596  0049F4  5A27               	subwfb	___llmod@dividend+1,f,c
 22597  0049F6  502C               	movf	___llmod@divisor+2,w,c
 22598  0049F8  5A28               	subwfb	___llmod@dividend+2,f,c
 22599  0049FA  502D               	movf	___llmod@divisor+3,w,c
 22600  0049FC  5A29               	subwfb	___llmod@dividend+3,f,c
 22601  0049FE                     l14001:
 22602                           
 22603                           ; BSR set to: 0
 22604  0049FE  90D8               	bcf	status,0,c
 22605  004A00  322D               	rrcf	___llmod@divisor+3,f,c
 22606  004A02  322C               	rrcf	___llmod@divisor+2,f,c
 22607  004A04  322B               	rrcf	___llmod@divisor+1,f,c
 22608  004A06  322A               	rrcf	___llmod@divisor,f,c
 22609                           
 22610                           ; BSR set to: 0
 22611  004A08  2E2E               	decfsz	___llmod@counter,f,c
 22612  004A0A  D7E8               	goto	l13997
 22613  004A0C                     l2228:
 22614                           
 22615                           ; BSR set to: 0
 22616  004A0C  C026  F026         	movff	___llmod@dividend,?___llmod
 22617  004A10  C027  F027         	movff	___llmod@dividend+1,?___llmod+1
 22618  004A14  C028  F028         	movff	___llmod@dividend+2,?___llmod+2
 22619  004A18  C029  F029         	movff	___llmod@dividend+3,?___llmod+3
 22620                           
 22621                           ; BSR set to: 0
 22622  004A1C  0012               	return	
 22623  004A1E                     __end_of___llmod:
 22624                           	opt stack 0
 22625                           tblptru	equ	0xFF8
 22626                           tblptrh	equ	0xFF7
 22627                           tblptrl	equ	0xFF6
 22628                           tablat	equ	0xFF5
 22629                           prodh	equ	0xFF4
 22630                           prodl	equ	0xFF3
 22631                           intcon	equ	0xFF2
 22632                           indf0	equ	0xFEF
 22633                           postinc0	equ	0xFEE
 22634                           fsr0h	equ	0xFEA
 22635                           fsr0l	equ	0xFE9
 22636                           wreg	equ	0xFE8
 22637                           indf1	equ	0xFE7
 22638                           postinc1	equ	0xFE6
 22639                           postdec1	equ	0xFE5
 22640                           fsr1h	equ	0xFE2
 22641                           fsr1l	equ	0xFE1
 22642                           indf2	equ	0xFDF
 22643                           postinc2	equ	0xFDE
 22644                           postdec2	equ	0xFDD
 22645                           plusw2	equ	0xFDB
 22646                           fsr2h	equ	0xFDA
 22647                           fsr2l	equ	0xFD9
 22648                           status	equ	0xFD8
 22649                           
 22650 ;; *************** function ___lldiv *****************
 22651 ;; Defined at:
 22652 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 22653 ;; Parameters:    Size  Location     Type
 22654 ;;  dividend        4   24[COMRAM] unsigned long 
 22655 ;;  divisor         4   28[COMRAM] unsigned long 
 22656 ;; Auto vars:     Size  Location     Type
 22657 ;;  quotient        4   33[COMRAM] unsigned long 
 22658 ;;  counter         1   32[COMRAM] unsigned char 
 22659 ;; Return value:  Size  Location     Type
 22660 ;;                  4   24[COMRAM] unsigned long 
 22661 ;; Registers used:
 22662 ;;		wreg, status,2, status,0
 22663 ;; Tracked objects:
 22664 ;;		On entry : F/0
 22665 ;;		On exit  : F/0
 22666 ;;		Unchanged: F/0
 22667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22668 ;;      Params:         8       0       0       0       0       0       0
 22669 ;;      Locals:         5       0       0       0       0       0       0
 22670 ;;      Temps:          0       0       0       0       0       0       0
 22671 ;;      Totals:        13       0       0       0       0       0       0
 22672 ;;Total ram usage:       13 bytes
 22673 ;; Hardware stack levels used:    1
 22674 ;; Hardware stack levels required when called:    2
 22675 ;; This function calls:
 22676 ;;		Nothing
 22677 ;; This function is called by:
 22678 ;;		_sprintf
 22679 ;;		_ultoa
 22680 ;; This function uses a non-reentrant model
 22681 ;;
 22682                           
 22683                           	psect	text58
 22684  00479A                     __ptext58:
 22685                           	opt stack 0
 22686  00479A                     ___lldiv:
 22687                           	opt stack 25
 22688                           
 22689                           ; BSR set to: 0
 22690                           
 22691                           ; BSR set to: 0
 22692                           ;incstack = 0
 22693                           ;incstack = 0
 22694  00479A  6A22               	clrf	___lldiv@quotient,c
 22695  00479C  6A23               	clrf	___lldiv@quotient+1,c
 22696  00479E  6A24               	clrf	___lldiv@quotient+2,c
 22697  0047A0  6A25               	clrf	___lldiv@quotient+3,c
 22698                           
 22699                           ; BSR set to: 0
 22700  0047A2  5020               	movf	___lldiv@divisor+3,w,c
 22701  0047A4  101D               	iorwf	___lldiv@divisor,w,c
 22702  0047A6  101E               	iorwf	___lldiv@divisor+1,w,c
 22703  0047A8  101F               	iorwf	___lldiv@divisor+2,w,c
 22704  0047AA  E029               	bz	l2218
 22705                           
 22706                           ; BSR set to: 0
 22707  0047AC  0E01               	movlw	1
 22708  0047AE  6E21               	movwf	___lldiv@counter,c
 22709  0047B0  D006               	goto	l13975
 22710  0047B2                     l13973:
 22711                           
 22712                           ; BSR set to: 0
 22713  0047B2  90D8               	bcf	status,0,c
 22714  0047B4  361D               	rlcf	___lldiv@divisor,f,c
 22715  0047B6  361E               	rlcf	___lldiv@divisor+1,f,c
 22716  0047B8  361F               	rlcf	___lldiv@divisor+2,f,c
 22717  0047BA  3620               	rlcf	___lldiv@divisor+3,f,c
 22718  0047BC  2A21               	incf	___lldiv@counter,f,c
 22719  0047BE                     l13975:
 22720                           
 22721                           ; BSR set to: 0
 22722  0047BE  AE20               	btfss	___lldiv@divisor+3,7,c
 22723  0047C0  D7F8               	goto	l13973
 22724  0047C2                     l13977:
 22725                           
 22726                           ; BSR set to: 0
 22727  0047C2  90D8               	bcf	status,0,c
 22728  0047C4  3622               	rlcf	___lldiv@quotient,f,c
 22729  0047C6  3623               	rlcf	___lldiv@quotient+1,f,c
 22730  0047C8  3624               	rlcf	___lldiv@quotient+2,f,c
 22731  0047CA  3625               	rlcf	___lldiv@quotient+3,f,c
 22732                           
 22733                           ; BSR set to: 0
 22734  0047CC  501D               	movf	___lldiv@divisor,w,c
 22735  0047CE  5C19               	subwf	___lldiv@dividend,w,c
 22736  0047D0  501E               	movf	___lldiv@divisor+1,w,c
 22737  0047D2  581A               	subwfb	___lldiv@dividend+1,w,c
 22738  0047D4  501F               	movf	___lldiv@divisor+2,w,c
 22739  0047D6  581B               	subwfb	___lldiv@dividend+2,w,c
 22740  0047D8  5020               	movf	___lldiv@divisor+3,w,c
 22741  0047DA  581C               	subwfb	___lldiv@dividend+3,w,c
 22742  0047DC  E309               	bnc	l13985
 22743                           
 22744                           ; BSR set to: 0
 22745  0047DE  501D               	movf	___lldiv@divisor,w,c
 22746  0047E0  5E19               	subwf	___lldiv@dividend,f,c
 22747  0047E2  501E               	movf	___lldiv@divisor+1,w,c
 22748  0047E4  5A1A               	subwfb	___lldiv@dividend+1,f,c
 22749  0047E6  501F               	movf	___lldiv@divisor+2,w,c
 22750  0047E8  5A1B               	subwfb	___lldiv@dividend+2,f,c
 22751  0047EA  5020               	movf	___lldiv@divisor+3,w,c
 22752  0047EC  5A1C               	subwfb	___lldiv@dividend+3,f,c
 22753                           
 22754                           ; BSR set to: 0
 22755  0047EE  8022               	bsf	___lldiv@quotient,0,c
 22756  0047F0                     l13985:
 22757                           
 22758                           ; BSR set to: 0
 22759  0047F0  90D8               	bcf	status,0,c
 22760  0047F2  3220               	rrcf	___lldiv@divisor+3,f,c
 22761  0047F4  321F               	rrcf	___lldiv@divisor+2,f,c
 22762  0047F6  321E               	rrcf	___lldiv@divisor+1,f,c
 22763  0047F8  321D               	rrcf	___lldiv@divisor,f,c
 22764                           
 22765                           ; BSR set to: 0
 22766  0047FA  2E21               	decfsz	___lldiv@counter,f,c
 22767  0047FC  D7E2               	goto	l13977
 22768  0047FE                     l2218:
 22769                           
 22770                           ; BSR set to: 0
 22771  0047FE  C022  F019         	movff	___lldiv@quotient,?___lldiv
 22772  004802  C023  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
 22773  004806  C024  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
 22774  00480A  C025  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
 22775                           
 22776                           ; BSR set to: 0
 22777  00480E  0012               	return	
 22778  004810                     __end_of___lldiv:
 22779                           	opt stack 0
 22780                           tblptru	equ	0xFF8
 22781                           tblptrh	equ	0xFF7
 22782                           tblptrl	equ	0xFF6
 22783                           tablat	equ	0xFF5
 22784                           prodh	equ	0xFF4
 22785                           prodl	equ	0xFF3
 22786                           intcon	equ	0xFF2
 22787                           indf0	equ	0xFEF
 22788                           postinc0	equ	0xFEE
 22789                           fsr0h	equ	0xFEA
 22790                           fsr0l	equ	0xFE9
 22791                           wreg	equ	0xFE8
 22792                           indf1	equ	0xFE7
 22793                           postinc1	equ	0xFE6
 22794                           postdec1	equ	0xFE5
 22795                           fsr1h	equ	0xFE2
 22796                           fsr1l	equ	0xFE1
 22797                           indf2	equ	0xFDF
 22798                           postinc2	equ	0xFDE
 22799                           postdec2	equ	0xFDD
 22800                           plusw2	equ	0xFDB
 22801                           fsr2h	equ	0xFDA
 22802                           fsr2l	equ	0xFD9
 22803                           status	equ	0xFD8
 22804                           
 22805 ;; *************** function _isdigit *****************
 22806 ;; Defined at:
 22807 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 22808 ;; Parameters:    Size  Location     Type
 22809 ;;  c               1    wreg     unsigned char 
 22810 ;; Auto vars:     Size  Location     Type
 22811 ;;  c               1   26[COMRAM] unsigned char 
 22812 ;; Return value:  Size  Location     Type
 22813 ;;		None               void
 22814 ;; Registers used:
 22815 ;;		wreg, status,2, status,0
 22816 ;; Tracked objects:
 22817 ;;		On entry : 0/3
 22818 ;;		On exit  : 0/0
 22819 ;;		Unchanged: 0/0
 22820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22821 ;;      Params:         0       0       0       0       0       0       0
 22822 ;;      Locals:         2       0       0       0       0       0       0
 22823 ;;      Temps:          1       0       0       0       0       0       0
 22824 ;;      Totals:         3       0       0       0       0       0       0
 22825 ;;Total ram usage:        3 bytes
 22826 ;; Hardware stack levels used:    1
 22827 ;; Hardware stack levels required when called:    2
 22828 ;; This function calls:
 22829 ;;		Nothing
 22830 ;; This function is called by:
 22831 ;;		_sprintf
 22832 ;;		_atoi
 22833 ;; This function uses a non-reentrant model
 22834 ;;
 22835                           
 22836                           	psect	text59
 22837  0050B6                     __ptext59:
 22838                           	opt stack 0
 22839  0050B6                     _isdigit:
 22840                           	opt stack 26
 22841                           
 22842                           ; BSR set to: 0
 22843                           ;incstack = 0
 22844                           ;incstack = 0
 22845                           ;isdigit@c stored from wreg
 22846  0050B6  CFE8 F01B          	movff	wreg,isdigit@c
 22847  0050BA  6A1A               	clrf	_isdigit$2838,c
 22848  0050BC  0E3A               	movlw	58
 22849  0050BE  601B               	cpfslt	isdigit@c,c
 22850  0050C0  D005               	goto	l12277
 22851  0050C2  0E2F               	movlw	47
 22852  0050C4  641B               	cpfsgt	isdigit@c,c
 22853  0050C6  D002               	goto	l12277
 22854  0050C8  0E01               	movlw	1
 22855  0050CA  6E1A               	movwf	_isdigit$2838,c
 22856  0050CC                     l12277:
 22857  0050CC  C01A  F019         	movff	_isdigit$2838,??_isdigit
 22858  0050D0  3019               	rrcf	??_isdigit,w,c
 22859  0050D2  0012               	return	
 22860  0050D4                     __end_of_isdigit:
 22861                           	opt stack 0
 22862                           tblptru	equ	0xFF8
 22863                           tblptrh	equ	0xFF7
 22864                           tblptrl	equ	0xFF6
 22865                           tablat	equ	0xFF5
 22866                           prodh	equ	0xFF4
 22867                           prodl	equ	0xFF3
 22868                           intcon	equ	0xFF2
 22869                           indf0	equ	0xFEF
 22870                           postinc0	equ	0xFEE
 22871                           fsr0h	equ	0xFEA
 22872                           fsr0l	equ	0xFE9
 22873                           wreg	equ	0xFE8
 22874                           indf1	equ	0xFE7
 22875                           postinc1	equ	0xFE6
 22876                           postdec1	equ	0xFE5
 22877                           fsr1h	equ	0xFE2
 22878                           fsr1l	equ	0xFE1
 22879                           indf2	equ	0xFDF
 22880                           postinc2	equ	0xFDE
 22881                           postdec2	equ	0xFDD
 22882                           plusw2	equ	0xFDB
 22883                           fsr2h	equ	0xFDA
 22884                           fsr2l	equ	0xFD9
 22885                           status	equ	0xFD8
 22886                           
 22887 ;; *************** function _fifo_read *****************
 22888 ;; Defined at:
 22889 ;;		line 29 in file "fifo.c"
 22890 ;; Parameters:    Size  Location     Type
 22891 ;;  f               2   24[COMRAM] PTR struct .
 22892 ;;		 -> inputFifo(8), 
 22893 ;;  buf             2   26[COMRAM] PTR void 
 22894 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22895 ;;  nbytes          2   28[COMRAM] unsigned short 
 22896 ;; Auto vars:     Size  Location     Type
 22897 ;;  i               2   36[COMRAM] unsigned short 
 22898 ;;  p               2   34[COMRAM] PTR unsigned char 
 22899 ;;		 -> doModeSLCAN@c(1), doModeVscp@c(1), doModeVerbose@c(1), main@c(1), 
 22900 ;; Return value:  Size  Location     Type
 22901 ;;                  2   24[COMRAM] unsigned short 
 22902 ;; Registers used:
 22903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 22904 ;; Tracked objects:
 22905 ;;		On entry : C/0
 22906 ;;		On exit  : C/0
 22907 ;;		Unchanged: C/0
 22908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22909 ;;      Params:         6       0       0       0       0       0       0
 22910 ;;      Locals:         4       0       0       0       0       0       0
 22911 ;;      Temps:          4       0       0       0       0       0       0
 22912 ;;      Totals:        14       0       0       0       0       0       0
 22913 ;;Total ram usage:       14 bytes
 22914 ;; Hardware stack levels used:    1
 22915 ;; Hardware stack levels required when called:    2
 22916 ;; This function calls:
 22917 ;;		Nothing
 22918 ;; This function is called by:
 22919 ;;		_main
 22920 ;;		_doModeVerbose
 22921 ;;		_doModeVscp
 22922 ;;		_doModeSLCAN
 22923 ;; This function uses a non-reentrant model
 22924 ;;
 22925                           
 22926                           	psect	text60
 22927  003E84                     __ptext60:
 22928                           	opt stack 0
 22929  003E84                     _fifo_read:
 22930                           	opt stack 27
 22931                           
 22932                           ;fifo.c: 30: uint16_t i;
 22933                           ;fifo.c: 31: uint8_t *p;
 22934                           ;fifo.c: 32: p = buf;
 22935                           
 22936                           ;incstack = 0
 22937                           ;incstack = 0
 22938  003E84  C01B  F023         	movff	fifo_read@buf,fifo_read@p
 22939  003E88  C01C  F024         	movff	fifo_read@buf+1,fifo_read@p+1
 22940                           
 22941                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 22942  003E8C  6A25               	clrf	fifo_read@i,c
 22943  003E8E  6A26               	clrf	fifo_read@i+1,c
 22944  003E90  D045               	goto	l9477
 22945  003E92                     l9463:
 22946                           
 22947                           ;fifo.c: 36: if (f->tail != f->head) {
 22948  003E92  EE20 F002          	lfsr	2,2
 22949  003E96  D84C               	call	PL28	;call to abstracted procedure
 22950  003E98  B4D8               	btfsc	status,2,c
 22951  003E9A  18E7               	xorwf	indf1,w,c
 22952  003E9C  E038               	bz	l1414
 22953                           
 22954                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 22955  003E9E  EE20 F004          	lfsr	2,4
 22956  003EA2  5019               	movf	fifo_read@f,w,c
 22957  003EA4  26D9               	addwf	fsr2l,f,c
 22958  003EA6  501A               	movf	fifo_read@f+1,w,c
 22959  003EA8  22DA               	addwfc	fsr2h,f,c
 22960  003EAA  CFDE F01F          	movff	postinc2,??_fifo_read
 22961  003EAE  CFDD F020          	movff	postdec2,??_fifo_read+1
 22962  003EB2  C019  FFD9         	movff	fifo_read@f,fsr2l
 22963  003EB6  C01A  FFDA         	movff	fifo_read@f+1,fsr2h
 22964  003EBA  CFDE F021          	movff	postinc2,??_fifo_read+2
 22965  003EBE  CFDD F022          	movff	postdec2,??_fifo_read+3
 22966  003EC2  501F               	movf	??_fifo_read,w,c
 22967  003EC4  2421               	addwf	??_fifo_read+2,w,c
 22968  003EC6  6ED9               	movwf	fsr2l,c
 22969  003EC8  5020               	movf	??_fifo_read+1,w,c
 22970  003ECA  2022               	addwfc	??_fifo_read+3,w,c
 22971  003ECC  6EDA               	movwf	fsr2h,c
 22972  003ECE  C023  FFE1         	movff	fifo_read@p,fsr1l
 22973  003ED2  C024  FFE2         	movff	fifo_read@p+1,fsr1h
 22974  003ED6  CFDF FFE7          	movff	indf2,indf1
 22975  003EDA  4A23               	infsnz	fifo_read@p,f,c
 22976  003EDC  2A24               	incf	fifo_read@p+1,f,c
 22977                           
 22978                           ;fifo.c: 38: f->tail++;
 22979  003EDE  EE20 F004          	lfsr	2,4
 22980  003EE2  5019               	movf	fifo_read@f,w,c
 22981  003EE4  26D9               	addwf	fsr2l,f,c
 22982  003EE6  501A               	movf	fifo_read@f+1,w,c
 22983  003EE8  22DA               	addwfc	fsr2h,f,c
 22984  003EEA  2ADE               	incf	postinc2,f,c
 22985  003EEC  0E00               	movlw	0
 22986  003EEE  22DD               	addwfc	postdec2,f,c
 22987                           
 22988                           ;fifo.c: 39: if (f->tail == f->size) {
 22989  003EF0  EE20 F006          	lfsr	2,6
 22990  003EF4  D81D               	call	PL28	;call to abstracted procedure
 22991  003EF6  B4D8               	btfsc	status,2,c
 22992  003EF8  18E7               	xorwf	indf1,w,c
 22993  003EFA  E10E               	bnz	l9475
 22994                           
 22995                           ;fifo.c: 40: f->tail = 0;
 22996  003EFC  EE20 F004          	lfsr	2,4
 22997  003F00  5019               	movf	fifo_read@f,w,c
 22998  003F02  26D9               	addwf	fsr2l,f,c
 22999  003F04  501A               	movf	fifo_read@f+1,w,c
 23000  003F06  22DA               	addwfc	fsr2h,f,c
 23001  003F08  6ADE               	clrf	postinc2,c
 23002  003F0A  6ADD               	clrf	postdec2,c
 23003  003F0C  D005               	goto	l9475
 23004  003F0E                     l1414:
 23005                           
 23006                           ;fifo.c: 43: else {
 23007                           ;fifo.c: 44: return i;
 23008  003F0E  C025  F019         	movff	fifo_read@i,?_fifo_read
 23009  003F12  C026  F01A         	movff	fifo_read@i+1,?_fifo_read+1
 23010  003F16  D00B               	goto	l1417
 23011  003F18                     l9475:
 23012  003F18  4A25               	infsnz	fifo_read@i,f,c
 23013  003F1A  2A26               	incf	fifo_read@i+1,f,c
 23014  003F1C                     l9477:
 23015  003F1C  501D               	movf	fifo_read@nbytes,w,c
 23016  003F1E  5C25               	subwf	fifo_read@i,w,c
 23017  003F20  501E               	movf	fifo_read@nbytes+1,w,c
 23018  003F22  5826               	subwfb	fifo_read@i+1,w,c
 23019  003F24  E3B6               	bnc	l9463
 23020                           
 23021                           ;fifo.c: 45: }
 23022                           ;fifo.c: 47: }
 23023                           ;fifo.c: 49: return nbytes;
 23024  003F26  C01D  F019         	movff	fifo_read@nbytes,?_fifo_read
 23025  003F2A  C01E  F01A         	movff	fifo_read@nbytes+1,?_fifo_read+1
 23026  003F2E                     l1417:
 23027  003F2E  0012               	return	
 23028  003F30                     __end_of_fifo_read:
 23029                           	opt stack 0
 23030  003F30                     PL28:
 23031                           	opt stack 27
 23032  003F30  5019               	movf	fifo_read@f,w,c
 23033  003F32  26D9               	addwf	fsr2l,f,c
 23034  003F34  501A               	movf	fifo_read@f+1,w,c
 23035  003F36  22DA               	addwfc	fsr2h,f,c
 23036  003F38  EE10 F004          	lfsr	1,4
 23037  003F3C  5019               	movf	fifo_read@f,w,c
 23038  003F3E  26E1               	addwf	fsr1l,f,c
 23039  003F40  501A               	movf	fifo_read@f+1,w,c
 23040  003F42  22E2               	addwfc	fsr1h,f,c
 23041  003F44  52E6               	movf	postinc1,f,c
 23042  003F46  52DE               	movf	postinc2,f,c
 23043  003F48  50DD               	movf	postdec2,w,c
 23044  003F4A  18E5               	xorwf	postdec1,w,c
 23045  003F4C  CFDF FFE8          	movff	indf2,wreg
 23046  003F50  0012               	return	
 23047  003F52                     __end_ofPL28:
 23048                           	opt stack 0
 23049                           tblptru	equ	0xFF8
 23050                           tblptrh	equ	0xFF7
 23051                           tblptrl	equ	0xFF6
 23052                           tablat	equ	0xFF5
 23053                           prodh	equ	0xFF4
 23054                           prodl	equ	0xFF3
 23055                           intcon	equ	0xFF2
 23056                           indf0	equ	0xFEF
 23057                           postinc0	equ	0xFEE
 23058                           fsr0h	equ	0xFEA
 23059                           fsr0l	equ	0xFE9
 23060                           wreg	equ	0xFE8
 23061                           indf1	equ	0xFE7
 23062                           postinc1	equ	0xFE6
 23063                           postdec1	equ	0xFE5
 23064                           fsr1h	equ	0xFE2
 23065                           fsr1l	equ	0xFE1
 23066                           indf2	equ	0xFDF
 23067                           postinc2	equ	0xFDE
 23068                           postdec2	equ	0xFDD
 23069                           plusw2	equ	0xFDB
 23070                           fsr2h	equ	0xFDA
 23071                           fsr2l	equ	0xFD9
 23072                           status	equ	0xFD8
 23073                           
 23074 ;; *************** function _printFirmwareVersion *****************
 23075 ;; Defined at:
 23076 ;;		line 2475 in file "main.c"
 23077 ;; Parameters:    Size  Location     Type
 23078 ;;		None
 23079 ;; Auto vars:     Size  Location     Type
 23080 ;;  wrkbuf         20    0[BANK0 ] unsigned char [20]
 23081 ;; Return value:  Size  Location     Type
 23082 ;;		None               void
 23083 ;; Registers used:
 23084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23085 ;; Tracked objects:
 23086 ;;		On entry : 0/0
 23087 ;;		On exit  : 0/0
 23088 ;;		Unchanged: 0/0
 23089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23090 ;;      Params:         0       0       0       0       0       0       0
 23091 ;;      Locals:         0      20       0       0       0       0       0
 23092 ;;      Temps:          0       0       0       0       0       0       0
 23093 ;;      Totals:         0      20       0       0       0       0       0
 23094 ;;Total ram usage:       20 bytes
 23095 ;; Hardware stack levels used:    1
 23096 ;; Hardware stack levels required when called:    5
 23097 ;; This function calls:
 23098 ;;		_putsUSART
 23099 ;;		_WriteUSART
 23100 ;;		_itoa
 23101 ;; This function is called by:
 23102 ;;		_main
 23103 ;;		_doModeVerbose
 23104 ;; This function uses a non-reentrant model
 23105 ;;
 23106                           
 23107                           	psect	text61
 23108  00448C                     __ptext61:
 23109                           	opt stack 0
 23110  00448C                     _printFirmwareVersion:
 23111                           	opt stack 24
 23112                           
 23113                           ;main.c: 2476: char wrkbuf[20];
 23114                           ;main.c: 2477: putsUSART((char *)"Version: ");
 23115                           
 23116                           ;incstack = 0
 23117                           ;incstack = 0
 23118  00448C  0E7E               	movlw	high STR_245
 23119  00448E  6E1B               	movwf	?_putsUSART+1,c
 23120  004490  0E9C               	movlw	low STR_245
 23121  004492  6E1A               	movwf	?_putsUSART,c
 23122  004494  ECC1  F025         	call	_putsUSART	;wreg free
 23123                           
 23124                           ;main.c: 2478: itoa( wrkbuf, 1, 10 );
 23125  004498  D83A               	call	PL58	;call to abstracted procedure
 23126  00449A  0E01               	movlw	1
 23127  00449C  6E2B               	movwf	?_itoa+2,c
 23128  00449E  6A2E               	clrf	?_itoa+5,c
 23129  0044A0  0E0A               	movlw	10
 23130  0044A2  6E2D               	movwf	?_itoa+4,c
 23131  0044A4  ECB4  F027         	call	_itoa	;wreg free
 23132                           
 23133                           ;main.c: 2479: putsUSART( wrkbuf );
 23134  0044A8  0100               	movlb	0	; () banked
 23135  0044AA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23136  0044AC  6E1B               	movwf	?_putsUSART+1,c
 23137  0044AE  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23138  0044B0  6E1A               	movwf	?_putsUSART,c
 23139  0044B2  ECC1  F025         	call	_putsUSART	;wreg free
 23140  0044B6                     l1110:
 23141  0044B6  A2AC               	btfss	4012,1,c	;volatile
 23142  0044B8  D7FE               	goto	l1110
 23143                           
 23144                           ;main.c: 2481: WriteUSART('.');
 23145  0044BA  0E2E               	movlw	46
 23146  0044BC  EC9F  F028         	call	_WriteUSART
 23147                           
 23148                           ;main.c: 2482: itoa( wrkbuf, 0, 10 );
 23149  0044C0  D826               	call	PL58	;call to abstracted procedure
 23150  0044C2  6A2B               	clrf	?_itoa+2,c
 23151  0044C4  6A2E               	clrf	?_itoa+5,c
 23152  0044C6  0E0A               	movlw	10
 23153  0044C8  6E2D               	movwf	?_itoa+4,c
 23154  0044CA  ECB4  F027         	call	_itoa	;wreg free
 23155                           
 23156                           ;main.c: 2483: putsUSART( wrkbuf );
 23157  0044CE  0100               	movlb	0	; () banked
 23158  0044D0  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23159  0044D2  6E1B               	movwf	?_putsUSART+1,c
 23160  0044D4  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23161  0044D6  6E1A               	movwf	?_putsUSART,c
 23162  0044D8  ECC1  F025         	call	_putsUSART	;wreg free
 23163  0044DC                     l1113:
 23164  0044DC  A2AC               	btfss	4012,1,c	;volatile
 23165  0044DE  D7FE               	goto	l1113
 23166                           
 23167                           ;main.c: 2485: WriteUSART('.');
 23168  0044E0  0E2E               	movlw	46
 23169  0044E2  EC9F  F028         	call	_WriteUSART
 23170                           
 23171                           ;main.c: 2486: itoa( wrkbuf, 0, 10 );
 23172  0044E6  D813               	call	PL58	;call to abstracted procedure
 23173  0044E8  6A2B               	clrf	?_itoa+2,c
 23174  0044EA  6A2E               	clrf	?_itoa+5,c
 23175  0044EC  0E0A               	movlw	10
 23176  0044EE  6E2D               	movwf	?_itoa+4,c
 23177  0044F0  ECB4  F027         	call	_itoa	;wreg free
 23178                           
 23179                           ;main.c: 2487: putsUSART( wrkbuf );
 23180  0044F4  0100               	movlb	0	; () banked
 23181  0044F6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23182  0044F8  6E1B               	movwf	?_putsUSART+1,c
 23183  0044FA  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23184  0044FC  6E1A               	movwf	?_putsUSART,c
 23185  0044FE  ECC1  F025         	call	_putsUSART	;wreg free
 23186                           
 23187                           ;main.c: 2488: putsUSART((char *)"\r\n");
 23188  004502  0E74               	movlw	high (STR_188+50)
 23189  004504  6E1B               	movwf	?_putsUSART+1,c
 23190  004506  0EB2               	movlw	low (STR_188+50)
 23191  004508  6E1A               	movwf	?_putsUSART,c
 23192  00450A  EFC1  F025         	goto	_putsUSART	;wreg free
 23193  00450E                     __end_of_printFirmwareVersion:
 23194                           	opt stack 0
 23195  00450E                     PL58:
 23196                           	opt stack 24
 23197  00450E  0100               	movlb	0	; () banked
 23198  004510  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23199  004512  6E2A               	movwf	?_itoa+1,c
 23200  004514  0E60               	movlw	low printFirmwareVersion@wrkbuf
 23201  004516  6E29               	movwf	?_itoa,c
 23202  004518  6A2C               	clrf	?_itoa+3,c
 23203  00451A  0012               	return	
 23204  00451C                     __end_ofPL58:
 23205                           	opt stack 0
 23206                           tblptru	equ	0xFF8
 23207                           tblptrh	equ	0xFF7
 23208                           tblptrl	equ	0xFF6
 23209                           tablat	equ	0xFF5
 23210                           prodh	equ	0xFF4
 23211                           prodl	equ	0xFF3
 23212                           intcon	equ	0xFF2
 23213                           indf0	equ	0xFEF
 23214                           postinc0	equ	0xFEE
 23215                           fsr0h	equ	0xFEA
 23216                           fsr0l	equ	0xFE9
 23217                           wreg	equ	0xFE8
 23218                           indf1	equ	0xFE7
 23219                           postinc1	equ	0xFE6
 23220                           postdec1	equ	0xFE5
 23221                           fsr1h	equ	0xFE2
 23222                           fsr1l	equ	0xFE1
 23223                           indf2	equ	0xFDF
 23224                           postinc2	equ	0xFDE
 23225                           postdec2	equ	0xFDD
 23226                           plusw2	equ	0xFDB
 23227                           fsr2h	equ	0xFDA
 23228                           fsr2l	equ	0xFD9
 23229                           status	equ	0xFD8
 23230                           
 23231 ;; *************** function _itoa *****************
 23232 ;; Defined at:
 23233 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23234 ;; Parameters:    Size  Location     Type
 23235 ;;  buf             2   40[COMRAM] PTR unsigned char 
 23236 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23237 ;;  val             2   42[COMRAM] int 
 23238 ;;  base            2   44[COMRAM] int 
 23239 ;; Auto vars:     Size  Location     Type
 23240 ;;  cp              2    0        PTR unsigned char 
 23241 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23242 ;; Return value:  Size  Location     Type
 23243 ;;                  2   40[COMRAM] PTR unsigned char 
 23244 ;; Registers used:
 23245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23246 ;; Tracked objects:
 23247 ;;		On entry : F/0
 23248 ;;		On exit  : 0/0
 23249 ;;		Unchanged: 0/0
 23250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23251 ;;      Params:         6       0       0       0       0       0       0
 23252 ;;      Locals:         2       0       0       0       0       0       0
 23253 ;;      Temps:          0       0       0       0       0       0       0
 23254 ;;      Totals:         8       0       0       0       0       0       0
 23255 ;;Total ram usage:        8 bytes
 23256 ;; Hardware stack levels used:    1
 23257 ;; Hardware stack levels required when called:    4
 23258 ;; This function calls:
 23259 ;;		_utoa
 23260 ;; This function is called by:
 23261 ;;		_receivePrintEventSLCAN
 23262 ;;		_findNodes
 23263 ;;		_printGUID
 23264 ;;		_printNodeFirmwareVersion
 23265 ;;		_printFirmwareVersion
 23266 ;; This function uses a non-reentrant model
 23267 ;;
 23268                           
 23269                           	psect	text62
 23270  004F68                     __ptext62:
 23271                           	opt stack 0
 23272  004F68                     _itoa:
 23273                           	opt stack 24
 23274                           
 23275                           ; BSR set to: 0
 23276                           
 23277                           ;incstack = 0
 23278                           ;incstack = 0
 23279  004F68  AE2C               	btfss	itoa@val+1,7,c
 23280  004F6A  D00C               	goto	l11931
 23281                           
 23282                           ; BSR set to: 0
 23283  004F6C  C029  FFD9         	movff	itoa@buf,fsr2l
 23284  004F70  C02A  FFDA         	movff	itoa@buf+1,fsr2h
 23285  004F74  0E2D               	movlw	45
 23286  004F76  6EDF               	movwf	indf2,c
 23287                           
 23288                           ; BSR set to: 0
 23289  004F78  4A29               	infsnz	itoa@buf,f,c
 23290  004F7A  2A2A               	incf	itoa@buf+1,f,c
 23291                           
 23292                           ; BSR set to: 0
 23293  004F7C  6C2B               	negf	itoa@val,c
 23294  004F7E  1E2C               	comf	itoa@val+1,f,c
 23295  004F80  B0D8               	btfsc	status,0,c
 23296  004F82  2A2C               	incf	itoa@val+1,f,c
 23297  004F84                     l11931:
 23298                           
 23299                           ; BSR set to: 0
 23300  004F84  C029  F020         	movff	itoa@buf,?_utoa
 23301  004F88  C02A  F021         	movff	itoa@buf+1,?_utoa+1
 23302  004F8C  C02B  F022         	movff	itoa@val,?_utoa+2
 23303  004F90  C02C  F023         	movff	itoa@val+1,?_utoa+3
 23304  004F94  C02D  F024         	movff	itoa@base,?_utoa+4
 23305  004F98  C02E  F025         	movff	itoa@base+1,?_utoa+5
 23306  004F9C  EF16  F021         	goto	_utoa	;wreg free
 23307  004FA0                     __end_of_itoa:
 23308                           	opt stack 0
 23309                           tblptru	equ	0xFF8
 23310                           tblptrh	equ	0xFF7
 23311                           tblptrl	equ	0xFF6
 23312                           tablat	equ	0xFF5
 23313                           prodh	equ	0xFF4
 23314                           prodl	equ	0xFF3
 23315                           intcon	equ	0xFF2
 23316                           indf0	equ	0xFEF
 23317                           postinc0	equ	0xFEE
 23318                           fsr0h	equ	0xFEA
 23319                           fsr0l	equ	0xFE9
 23320                           wreg	equ	0xFE8
 23321                           indf1	equ	0xFE7
 23322                           postinc1	equ	0xFE6
 23323                           postdec1	equ	0xFE5
 23324                           fsr1h	equ	0xFE2
 23325                           fsr1l	equ	0xFE1
 23326                           indf2	equ	0xFDF
 23327                           postinc2	equ	0xFDE
 23328                           postdec2	equ	0xFDD
 23329                           plusw2	equ	0xFDB
 23330                           fsr2h	equ	0xFDA
 23331                           fsr2l	equ	0xFD9
 23332                           status	equ	0xFD8
 23333                           
 23334 ;; *************** function _utoa *****************
 23335 ;; Defined at:
 23336 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23337 ;; Parameters:    Size  Location     Type
 23338 ;;  buf             2   31[COMRAM] PTR unsigned char 
 23339 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23340 ;;  val             2   33[COMRAM] unsigned int 
 23341 ;;  base            2   35[COMRAM] int 
 23342 ;; Auto vars:     Size  Location     Type
 23343 ;;  v               2   37[COMRAM] unsigned int 
 23344 ;;  c               1   39[COMRAM] unsigned char 
 23345 ;; Return value:  Size  Location     Type
 23346 ;;                  2   31[COMRAM] PTR unsigned char 
 23347 ;; Registers used:
 23348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23349 ;; Tracked objects:
 23350 ;;		On entry : F/0
 23351 ;;		On exit  : 0/0
 23352 ;;		Unchanged: 0/0
 23353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23354 ;;      Params:         6       0       0       0       0       0       0
 23355 ;;      Locals:         3       0       0       0       0       0       0
 23356 ;;      Temps:          0       0       0       0       0       0       0
 23357 ;;      Totals:         9       0       0       0       0       0       0
 23358 ;;Total ram usage:        9 bytes
 23359 ;; Hardware stack levels used:    1
 23360 ;; Hardware stack levels required when called:    3
 23361 ;; This function calls:
 23362 ;;		___lwdiv
 23363 ;;		___lwmod
 23364 ;; This function is called by:
 23365 ;;		_itoa
 23366 ;; This function uses a non-reentrant model
 23367 ;;
 23368                           
 23369                           	psect	text63
 23370  00422C                     __ptext63:
 23371                           	opt stack 0
 23372  00422C                     _utoa:
 23373                           	opt stack 24
 23374                           
 23375                           ; BSR set to: 0
 23376                           
 23377                           ;incstack = 0
 23378                           ;incstack = 0
 23379  00422C  C022  F026         	movff	utoa@val,utoa@v
 23380  004230  C023  F027         	movff	utoa@val+1,utoa@v+1
 23381  004234                     l12283:
 23382  004234  C026  F019         	movff	utoa@v,?___lwdiv
 23383  004238  C027  F01A         	movff	utoa@v+1,?___lwdiv+1
 23384  00423C  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23385  004240  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23386  004244  EC12  F026         	call	___lwdiv	;wreg free
 23387  004248  C019  F026         	movff	?___lwdiv,utoa@v
 23388  00424C  C01A  F027         	movff	?___lwdiv+1,utoa@v+1
 23389  004250  4A20               	infsnz	utoa@buf,f,c
 23390  004252  2A21               	incf	utoa@buf+1,f,c
 23391  004254  5027               	movf	utoa@v+1,w,c
 23392  004256  1026               	iorwf	utoa@v,w,c
 23393  004258  E1ED               	bnz	l12283
 23394  00425A  C020  FFD9         	movff	utoa@buf,fsr2l
 23395  00425E  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23396  004262  0E00               	movlw	0
 23397  004264  6ADF               	clrf	indf2,c
 23398  004266  0620               	decf	utoa@buf,f,c
 23399  004268  A0D8               	btfss	status,0,c
 23400  00426A  0621               	decf	utoa@buf+1,f,c
 23401  00426C                     l12293:
 23402  00426C  C022  F019         	movff	utoa@val,?___lwmod
 23403  004270  C023  F01A         	movff	utoa@val+1,?___lwmod+1
 23404  004274  C024  F01B         	movff	utoa@base,?___lwmod+2
 23405  004278  C025  F01C         	movff	utoa@base+1,?___lwmod+3
 23406  00427C  EC3E  F027         	call	___lwmod	;wreg free
 23407  004280  5019               	movf	?___lwmod,w,c
 23408  004282  6E28               	movwf	utoa@c,c
 23409  004284  C022  F019         	movff	utoa@val,?___lwdiv
 23410  004288  C023  F01A         	movff	utoa@val+1,?___lwdiv+1
 23411  00428C  C024  F01B         	movff	utoa@base,?___lwdiv+2
 23412  004290  C025  F01C         	movff	utoa@base+1,?___lwdiv+3
 23413  004294  EC12  F026         	call	___lwdiv	;wreg free
 23414  004298  C019  F022         	movff	?___lwdiv,utoa@val
 23415  00429C  C01A  F023         	movff	?___lwdiv+1,utoa@val+1
 23416  0042A0  0E09               	movlw	9
 23417  0042A2  6428               	cpfsgt	utoa@c,c
 23418  0042A4  D002               	goto	l2187
 23419  0042A6  0E07               	movlw	7
 23420  0042A8  2628               	addwf	utoa@c,f,c
 23421  0042AA                     l2187:
 23422  0042AA  0E30               	movlw	48
 23423  0042AC  2628               	addwf	utoa@c,f,c
 23424  0042AE  C020  FFD9         	movff	utoa@buf,fsr2l
 23425  0042B2  C021  FFDA         	movff	utoa@buf+1,fsr2h
 23426  0042B6  C028  FFDF         	movff	utoa@c,indf2
 23427  0042BA  0620               	decf	utoa@buf,f,c
 23428  0042BC  A0D8               	btfss	status,0,c
 23429  0042BE  0621               	decf	utoa@buf+1,f,c
 23430  0042C0  5023               	movf	utoa@val+1,w,c
 23431  0042C2  1022               	iorwf	utoa@val,w,c
 23432  0042C4  E1D3               	bnz	l12293
 23433                           
 23434                           ;	Return value of _utoa is never used
 23435  0042C6  4A20               	infsnz	utoa@buf,f,c
 23436  0042C8  2A21               	incf	utoa@buf+1,f,c
 23437  0042CA  0012               	return	
 23438  0042CC                     __end_of_utoa:
 23439                           	opt stack 0
 23440                           tblptru	equ	0xFF8
 23441                           tblptrh	equ	0xFF7
 23442                           tblptrl	equ	0xFF6
 23443                           tablat	equ	0xFF5
 23444                           prodh	equ	0xFF4
 23445                           prodl	equ	0xFF3
 23446                           intcon	equ	0xFF2
 23447                           indf0	equ	0xFEF
 23448                           postinc0	equ	0xFEE
 23449                           fsr0h	equ	0xFEA
 23450                           fsr0l	equ	0xFE9
 23451                           wreg	equ	0xFE8
 23452                           indf1	equ	0xFE7
 23453                           postinc1	equ	0xFE6
 23454                           postdec1	equ	0xFE5
 23455                           fsr1h	equ	0xFE2
 23456                           fsr1l	equ	0xFE1
 23457                           indf2	equ	0xFDF
 23458                           postinc2	equ	0xFDE
 23459                           postdec2	equ	0xFDD
 23460                           plusw2	equ	0xFDB
 23461                           fsr2h	equ	0xFDA
 23462                           fsr2l	equ	0xFD9
 23463                           status	equ	0xFD8
 23464                           
 23465 ;; *************** function ___lwmod *****************
 23466 ;; Defined at:
 23467 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 23468 ;; Parameters:    Size  Location     Type
 23469 ;;  dividend        2   24[COMRAM] unsigned int 
 23470 ;;  divisor         2   26[COMRAM] unsigned int 
 23471 ;; Auto vars:     Size  Location     Type
 23472 ;;  counter         1   28[COMRAM] unsigned char 
 23473 ;; Return value:  Size  Location     Type
 23474 ;;                  2   24[COMRAM] unsigned int 
 23475 ;; Registers used:
 23476 ;;		wreg, status,2, status,0
 23477 ;; Tracked objects:
 23478 ;;		On entry : 0/0
 23479 ;;		On exit  : 0/0
 23480 ;;		Unchanged: 0/0
 23481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23482 ;;      Params:         4       0       0       0       0       0       0
 23483 ;;      Locals:         1       0       0       0       0       0       0
 23484 ;;      Temps:          0       0       0       0       0       0       0
 23485 ;;      Totals:         5       0       0       0       0       0       0
 23486 ;;Total ram usage:        5 bytes
 23487 ;; Hardware stack levels used:    1
 23488 ;; Hardware stack levels required when called:    2
 23489 ;; This function calls:
 23490 ;;		Nothing
 23491 ;; This function is called by:
 23492 ;;		_utoa
 23493 ;; This function uses a non-reentrant model
 23494 ;;
 23495                           
 23496                           	psect	text64
 23497  004E7C                     __ptext64:
 23498                           	opt stack 0
 23499  004E7C                     ___lwmod:
 23500                           	opt stack 24
 23501                           
 23502                           ;incstack = 0
 23503                           ;incstack = 0
 23504  004E7C  501C               	movf	___lwmod@divisor+1,w,c
 23505  004E7E  101B               	iorwf	___lwmod@divisor,w,c
 23506  004E80  E017               	bz	l2311
 23507  004E82  0E01               	movlw	1
 23508  004E84  6E1D               	movwf	___lwmod@counter,c
 23509  004E86  D004               	goto	l12377
 23510  004E88                     l12375:
 23511  004E88  90D8               	bcf	status,0,c
 23512  004E8A  361B               	rlcf	___lwmod@divisor,f,c
 23513  004E8C  361C               	rlcf	___lwmod@divisor+1,f,c
 23514  004E8E  2A1D               	incf	___lwmod@counter,f,c
 23515  004E90                     l12377:
 23516  004E90  AE1C               	btfss	___lwmod@divisor+1,7,c
 23517  004E92  D7FA               	goto	l12375
 23518  004E94                     l12379:
 23519  004E94  501B               	movf	___lwmod@divisor,w,c
 23520  004E96  5C19               	subwf	___lwmod@dividend,w,c
 23521  004E98  501C               	movf	___lwmod@divisor+1,w,c
 23522  004E9A  581A               	subwfb	___lwmod@dividend+1,w,c
 23523  004E9C  E304               	bnc	l12383
 23524  004E9E  501B               	movf	___lwmod@divisor,w,c
 23525  004EA0  5E19               	subwf	___lwmod@dividend,f,c
 23526  004EA2  501C               	movf	___lwmod@divisor+1,w,c
 23527  004EA4  5A1A               	subwfb	___lwmod@dividend+1,f,c
 23528  004EA6                     l12383:
 23529  004EA6  90D8               	bcf	status,0,c
 23530  004EA8  321C               	rrcf	___lwmod@divisor+1,f,c
 23531  004EAA  321B               	rrcf	___lwmod@divisor,f,c
 23532  004EAC  2E1D               	decfsz	___lwmod@counter,f,c
 23533  004EAE  D7F2               	goto	l12379
 23534  004EB0                     l2311:
 23535  004EB0  C019  F019         	movff	___lwmod@dividend,?___lwmod
 23536  004EB4  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
 23537  004EB8  0012               	return	
 23538  004EBA                     __end_of___lwmod:
 23539                           	opt stack 0
 23540                           tblptru	equ	0xFF8
 23541                           tblptrh	equ	0xFF7
 23542                           tblptrl	equ	0xFF6
 23543                           tablat	equ	0xFF5
 23544                           prodh	equ	0xFF4
 23545                           prodl	equ	0xFF3
 23546                           intcon	equ	0xFF2
 23547                           indf0	equ	0xFEF
 23548                           postinc0	equ	0xFEE
 23549                           fsr0h	equ	0xFEA
 23550                           fsr0l	equ	0xFE9
 23551                           wreg	equ	0xFE8
 23552                           indf1	equ	0xFE7
 23553                           postinc1	equ	0xFE6
 23554                           postdec1	equ	0xFE5
 23555                           fsr1h	equ	0xFE2
 23556                           fsr1l	equ	0xFE1
 23557                           indf2	equ	0xFDF
 23558                           postinc2	equ	0xFDE
 23559                           postdec2	equ	0xFDD
 23560                           plusw2	equ	0xFDB
 23561                           fsr2h	equ	0xFDA
 23562                           fsr2l	equ	0xFD9
 23563                           status	equ	0xFD8
 23564                           
 23565 ;; *************** function ___lwdiv *****************
 23566 ;; Defined at:
 23567 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 23568 ;; Parameters:    Size  Location     Type
 23569 ;;  dividend        2   24[COMRAM] unsigned int 
 23570 ;;  divisor         2   26[COMRAM] unsigned int 
 23571 ;; Auto vars:     Size  Location     Type
 23572 ;;  quotient        2   29[COMRAM] unsigned int 
 23573 ;;  counter         1   28[COMRAM] unsigned char 
 23574 ;; Return value:  Size  Location     Type
 23575 ;;                  2   24[COMRAM] unsigned int 
 23576 ;; Registers used:
 23577 ;;		wreg, status,2, status,0
 23578 ;; Tracked objects:
 23579 ;;		On entry : 0/0
 23580 ;;		On exit  : 0/0
 23581 ;;		Unchanged: 0/0
 23582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23583 ;;      Params:         4       0       0       0       0       0       0
 23584 ;;      Locals:         3       0       0       0       0       0       0
 23585 ;;      Temps:          0       0       0       0       0       0       0
 23586 ;;      Totals:         7       0       0       0       0       0       0
 23587 ;;Total ram usage:        7 bytes
 23588 ;; Hardware stack levels used:    1
 23589 ;; Hardware stack levels required when called:    2
 23590 ;; This function calls:
 23591 ;;		Nothing
 23592 ;; This function is called by:
 23593 ;;		_utoa
 23594 ;; This function uses a non-reentrant model
 23595 ;;
 23596                           
 23597                           	psect	text65
 23598  004C24                     __ptext65:
 23599                           	opt stack 0
 23600  004C24                     ___lwdiv:
 23601                           	opt stack 24
 23602                           
 23603                           ;incstack = 0
 23604                           ;incstack = 0
 23605  004C24  6A1E               	clrf	___lwdiv@quotient,c
 23606  004C26  6A1F               	clrf	___lwdiv@quotient+1,c
 23607  004C28  501C               	movf	___lwdiv@divisor+1,w,c
 23608  004C2A  101B               	iorwf	___lwdiv@divisor,w,c
 23609  004C2C  E01B               	bz	l2301
 23610  004C2E  0E01               	movlw	1
 23611  004C30  6E1D               	movwf	___lwdiv@counter,c
 23612  004C32  D004               	goto	l12357
 23613  004C34                     l12355:
 23614  004C34  90D8               	bcf	status,0,c
 23615  004C36  361B               	rlcf	___lwdiv@divisor,f,c
 23616  004C38  361C               	rlcf	___lwdiv@divisor+1,f,c
 23617  004C3A  2A1D               	incf	___lwdiv@counter,f,c
 23618  004C3C                     l12357:
 23619  004C3C  AE1C               	btfss	___lwdiv@divisor+1,7,c
 23620  004C3E  D7FA               	goto	l12355
 23621  004C40                     l12359:
 23622  004C40  90D8               	bcf	status,0,c
 23623  004C42  361E               	rlcf	___lwdiv@quotient,f,c
 23624  004C44  361F               	rlcf	___lwdiv@quotient+1,f,c
 23625  004C46  501B               	movf	___lwdiv@divisor,w,c
 23626  004C48  5C19               	subwf	___lwdiv@dividend,w,c
 23627  004C4A  501C               	movf	___lwdiv@divisor+1,w,c
 23628  004C4C  581A               	subwfb	___lwdiv@dividend+1,w,c
 23629  004C4E  E305               	bnc	l12367
 23630  004C50  501B               	movf	___lwdiv@divisor,w,c
 23631  004C52  5E19               	subwf	___lwdiv@dividend,f,c
 23632  004C54  501C               	movf	___lwdiv@divisor+1,w,c
 23633  004C56  5A1A               	subwfb	___lwdiv@dividend+1,f,c
 23634  004C58  801E               	bsf	___lwdiv@quotient,0,c
 23635  004C5A                     l12367:
 23636  004C5A  90D8               	bcf	status,0,c
 23637  004C5C  321C               	rrcf	___lwdiv@divisor+1,f,c
 23638  004C5E  321B               	rrcf	___lwdiv@divisor,f,c
 23639  004C60  2E1D               	decfsz	___lwdiv@counter,f,c
 23640  004C62  D7EE               	goto	l12359
 23641  004C64                     l2301:
 23642  004C64  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
 23643  004C68  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23644  004C6C  0012               	return	
 23645  004C6E                     __end_of___lwdiv:
 23646                           	opt stack 0
 23647                           tblptru	equ	0xFF8
 23648                           tblptrh	equ	0xFF7
 23649                           tblptrl	equ	0xFF6
 23650                           tablat	equ	0xFF5
 23651                           prodh	equ	0xFF4
 23652                           prodl	equ	0xFF3
 23653                           intcon	equ	0xFF2
 23654                           indf0	equ	0xFEF
 23655                           postinc0	equ	0xFEE
 23656                           fsr0h	equ	0xFEA
 23657                           fsr0l	equ	0xFE9
 23658                           wreg	equ	0xFE8
 23659                           indf1	equ	0xFE7
 23660                           postinc1	equ	0xFE6
 23661                           postdec1	equ	0xFE5
 23662                           fsr1h	equ	0xFE2
 23663                           fsr1l	equ	0xFE1
 23664                           indf2	equ	0xFDF
 23665                           postinc2	equ	0xFDE
 23666                           postdec2	equ	0xFDD
 23667                           plusw2	equ	0xFDB
 23668                           fsr2h	equ	0xFDA
 23669                           fsr2l	equ	0xFD9
 23670                           status	equ	0xFD8
 23671                           
 23672 ;; *************** function _printMode *****************
 23673 ;; Defined at:
 23674 ;;		line 2496 in file "main.c"
 23675 ;; Parameters:    Size  Location     Type
 23676 ;;		None
 23677 ;; Auto vars:     Size  Location     Type
 23678 ;;		None
 23679 ;; Return value:  Size  Location     Type
 23680 ;;		None               void
 23681 ;; Registers used:
 23682 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23683 ;; Tracked objects:
 23684 ;;		On entry : 0/0
 23685 ;;		On exit  : 0/0
 23686 ;;		Unchanged: 0/0
 23687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23688 ;;      Params:         0       0       0       0       0       0       0
 23689 ;;      Locals:         0       0       0       0       0       0       0
 23690 ;;      Temps:          0       0       0       0       0       0       0
 23691 ;;      Totals:         0       0       0       0       0       0       0
 23692 ;;Total ram usage:        0 bytes
 23693 ;; Hardware stack levels used:    1
 23694 ;; Hardware stack levels required when called:    4
 23695 ;; This function calls:
 23696 ;;		_putsUSART
 23697 ;; This function is called by:
 23698 ;;		_main
 23699 ;; This function uses a non-reentrant model
 23700 ;;
 23701                           
 23702                           	psect	text66
 23703  004810                     __ptext66:
 23704                           	opt stack 0
 23705  004810                     _printMode:
 23706                           	opt stack 26
 23707                           
 23708                           ;main.c: 2497: putsUSART((char *)"Mode: ");
 23709                           
 23710                           ;incstack = 0
 23711                           ;incstack = 0
 23712  004810  0E7F               	movlw	high STR_247
 23713  004812  6E1B               	movwf	?_putsUSART+1,c
 23714  004814  0E25               	movlw	low STR_247
 23715  004816  6E1A               	movwf	?_putsUSART,c
 23716  004818  ECC1  F025         	call	_putsUSART	;wreg free
 23717                           
 23718                           ;main.c: 2498: if ( 0 == mode ) {
 23719  00481C  0100               	movlb	0	; () banked
 23720  00481E  67D7               	tstfsz	_mode& (0+255),b
 23721  004820  D007               	goto	l9447
 23722                           
 23723                           ; BSR set to: 0
 23724                           ;main.c: 2499: putsUSART((char *)"Verbose");
 23725  004822  0E7F               	movlw	high STR_248
 23726  004824  6E1B               	movwf	?_putsUSART+1,c
 23727  004826  0E1D               	movlw	low STR_248
 23728  004828  6E1A               	movwf	?_putsUSART,c
 23729  00482A  ECC1  F025         	call	_putsUSART	;wreg free
 23730                           
 23731                           ;main.c: 2500: }
 23732  00482E  D023               	goto	l1120
 23733  004830                     l9447:
 23734                           
 23735                           ; BSR set to: 0
 23736                           ;main.c: 2501: else if ( 1 == mode ) {
 23737  004830  05D7               	decf	_mode& (0+255),w,b
 23738  004832  E107               	bnz	l9451
 23739                           
 23740                           ; BSR set to: 0
 23741                           ;main.c: 2502: putsUSART((char *)"VSCP Driver");
 23742  004834  0E7E               	movlw	high STR_249
 23743  004836  6E1B               	movwf	?_putsUSART+1,c
 23744  004838  0E7A               	movlw	low STR_249
 23745  00483A  6E1A               	movwf	?_putsUSART,c
 23746  00483C  ECC1  F025         	call	_putsUSART	;wreg free
 23747                           
 23748                           ;main.c: 2503: }
 23749  004840  D01A               	goto	l1120
 23750  004842                     l9451:
 23751                           
 23752                           ; BSR set to: 0
 23753                           ;main.c: 2504: else if ( 2 == mode ) {
 23754  004842  51D7               	movf	_mode& (0+255),w,b
 23755  004844  0A02               	xorlw	2
 23756  004846  E107               	bnz	l9455
 23757                           
 23758                           ; BSR set to: 0
 23759                           ;main.c: 2505: putsUSART((char *)"SL Driver");
 23760  004848  0E7E               	movlw	high STR_250
 23761  00484A  6E1B               	movwf	?_putsUSART+1,c
 23762  00484C  0EB0               	movlw	low STR_250
 23763  00484E  6E1A               	movwf	?_putsUSART,c
 23764  004850  ECC1  F025         	call	_putsUSART	;wreg free
 23765                           
 23766                           ;main.c: 2506: }
 23767  004854  D010               	goto	l1120
 23768  004856                     l9455:
 23769                           
 23770                           ; BSR set to: 0
 23771                           ;main.c: 2507: else if ( 3 == mode ) {
 23772  004856  51D7               	movf	_mode& (0+255),w,b
 23773  004858  0A03               	xorlw	3
 23774  00485A  E107               	bnz	l9459
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;main.c: 2508: putsUSART((char *)"VSCP Node");
 23778  00485C  0E7E               	movlw	high STR_251
 23779  00485E  6E1B               	movwf	?_putsUSART+1,c
 23780  004860  0EA6               	movlw	low STR_251
 23781  004862  6E1A               	movwf	?_putsUSART,c
 23782  004864  ECC1  F025         	call	_putsUSART	;wreg free
 23783                           
 23784                           ;main.c: 2509: }
 23785  004868  D006               	goto	l1120
 23786  00486A                     l9459:
 23787                           
 23788                           ; BSR set to: 0
 23789                           ;main.c: 2510: else {
 23790                           ;main.c: 2511: putsUSART((char *)"Unknown (Verbose used)");
 23791  00486A  0E7C               	movlw	high STR_252
 23792  00486C  6E1B               	movwf	?_putsUSART+1,c
 23793  00486E  0EEE               	movlw	low STR_252
 23794  004870  6E1A               	movwf	?_putsUSART,c
 23795  004872  ECC1  F025         	call	_putsUSART	;wreg free
 23796  004876                     l1120:
 23797                           
 23798                           ;main.c: 2512: }
 23799                           ;main.c: 2513: putsUSART((char *)"\r\n");
 23800  004876  0E74               	movlw	high (STR_188+50)
 23801  004878  6E1B               	movwf	?_putsUSART+1,c
 23802  00487A  0EB2               	movlw	low (STR_188+50)
 23803  00487C  6E1A               	movwf	?_putsUSART,c
 23804  00487E  EFC1  F025         	goto	_putsUSART	;wreg free
 23805  004882                     __end_of_printMode:
 23806                           	opt stack 0
 23807                           tblptru	equ	0xFF8
 23808                           tblptrh	equ	0xFF7
 23809                           tblptrl	equ	0xFF6
 23810                           tablat	equ	0xFF5
 23811                           prodh	equ	0xFF4
 23812                           prodl	equ	0xFF3
 23813                           intcon	equ	0xFF2
 23814                           indf0	equ	0xFEF
 23815                           postinc0	equ	0xFEE
 23816                           fsr0h	equ	0xFEA
 23817                           fsr0l	equ	0xFE9
 23818                           wreg	equ	0xFE8
 23819                           indf1	equ	0xFE7
 23820                           postinc1	equ	0xFE6
 23821                           postdec1	equ	0xFE5
 23822                           fsr1h	equ	0xFE2
 23823                           fsr1l	equ	0xFE1
 23824                           indf2	equ	0xFDF
 23825                           postinc2	equ	0xFDE
 23826                           postdec2	equ	0xFDD
 23827                           plusw2	equ	0xFDB
 23828                           fsr2h	equ	0xFDA
 23829                           fsr2l	equ	0xFD9
 23830                           status	equ	0xFD8
 23831                           
 23832 ;; *************** function _putsUSART *****************
 23833 ;; Defined at:
 23834 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 23835 ;; Parameters:    Size  Location     Type
 23836 ;;  data            2   25[COMRAM] PTR unsigned char 
 23837 ;;		 -> STR_253(3), STR_252(23), STR_251(10), STR_250(10), 
 23838 ;;		 -> STR_249(12), STR_248(8), STR_247(7), STR_246(3), 
 23839 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_245(10), STR_244(3), STR_241(20), 
 23840 ;;		 -> STR_240(3), STR_239(14), STR_238(3), STR_234(8), 
 23841 ;;		 -> STR_233(15), STR_232(67), STR_231(3), STR_230(27), 
 23842 ;;		 -> STR_229(67), STR_228(39), STR_227(62), STR_226(55), 
 23843 ;;		 -> STR_225(49), STR_224(67), STR_223(47), STR_222(47), 
 23844 ;;		 -> STR_221(34), STR_220(71), STR_219(20), STR_218(78), 
 23845 ;;		 -> STR_217(24), STR_216(77), STR_215(67), STR_214(69), 
 23846 ;;		 -> STR_213(47), STR_212(40), STR_211(39), STR_210(33), 
 23847 ;;		 -> STR_209(23), STR_208(56), STR_207(24), STR_206(44), 
 23848 ;;		 -> STR_205(50), STR_204(31), STR_203(50), STR_202(51), 
 23849 ;;		 -> STR_201(46), STR_200(44), STR_199(27), STR_198(39), 
 23850 ;;		 -> STR_197(39), STR_196(52), STR_195(54), STR_194(55), 
 23851 ;;		 -> STR_193(3), STR_190(24), STR_189(57), STR_188(53), 
 23852 ;;		 -> STR_187(58), STR_186(3), STR_183(25), STR_182(3), 
 23853 ;;		 -> STR_179(24), STR_178(3), STR_175(24), STR_174(3), 
 23854 ;;		 -> STR_171(24), STR_170(3), STR_167(23), STR_166(3), 
 23855 ;;		 -> STR_163(21), STR_162(3), STR_159(22), STR_158(3), 
 23856 ;;		 -> STR_155(17), STR_154(3), STR_151(18), STR_150(4), 
 23857 ;;		 -> STR_149(11), STR_148(2), STR_145(7), STR_142(7), 
 23858 ;;		 -> STR_139(9), STR_136(7), STR_133(8), STR_130(7), 
 23859 ;;		 -> STR_129(2), STR_128(2), STR_127(6), STR_126(8), 
 23860 ;;		 -> STR_125(8), STR_124(20), STR_123(27), STR_122(33), 
 23861 ;;		 -> STR_119(26), STR_117(32), STR_115(28), STR_110(40), 
 23862 ;;		 -> STR_108(44), STR_105(39), STR_103(36), STR_101(37), 
 23863 ;;		 -> STR_99(40), STR_97(37), STR_96(50), STR_93(41), 
 23864 ;;		 -> STR_91(38), STR_89(39), STR_87(42), STR_85(39), 
 23865 ;;		 -> STR_84(66), STR_81(3), STR_78(20), STR_76(33), 
 23866 ;;		 -> STR_75(35), STR_74(24), STR_72(33), STR_70(24), 
 23867 ;;		 -> STR_67(54), STR_66(6), STR_65(3), STR_60(34), 
 23868 ;;		 -> STR_59(3), STR_56(4), wrkbuf(80), STR_51(15), 
 23869 ;;		 -> STR_49(33), STR_47(24), STR_43(6), STR_39(18), 
 23870 ;;		 -> STR_38(6), STR_36(33), STR_35(6), STR_27(24), 
 23871 ;;		 -> STR_26(18), STR_25(20), STR_24(25), STR_23(22), 
 23872 ;;		 -> STR_22(19), STR_21(20), STR_20(20), STR_18(6), 
 23873 ;;		 -> STR_16(6), STR_14(6), STR_12(6), STR_10(6), 
 23874 ;;		 -> STR_8(6), STR_6(31), STR_4(29), STR_3(55), 
 23875 ;;		 -> STR_2(48), STR_1(37), 
 23876 ;; Auto vars:     Size  Location     Type
 23877 ;;		None
 23878 ;; Return value:  Size  Location     Type
 23879 ;;		None               void
 23880 ;; Registers used:
 23881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23882 ;; Tracked objects:
 23883 ;;		On entry : 0/0
 23884 ;;		On exit  : 0/0
 23885 ;;		Unchanged: 0/0
 23886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23887 ;;      Params:         2       0       0       0       0       0       0
 23888 ;;      Locals:         0       0       0       0       0       0       0
 23889 ;;      Temps:          2       0       0       0       0       0       0
 23890 ;;      Totals:         4       0       0       0       0       0       0
 23891 ;;Total ram usage:        4 bytes
 23892 ;; Hardware stack levels used:    1
 23893 ;; Hardware stack levels required when called:    3
 23894 ;; This function calls:
 23895 ;;		_WriteUSART
 23896 ;; This function is called by:
 23897 ;;		_main
 23898 ;;		_doModeVerbose
 23899 ;;		_doModeSLCAN
 23900 ;;		_receivePrintEventVerbose
 23901 ;;		_receivePrintEventSLCAN
 23902 ;;		_printStatistics
 23903 ;;		_printErrors
 23904 ;;		_printHelp
 23905 ;;		_findNodes
 23906 ;;		_printGUID
 23907 ;;		_printMDF
 23908 ;;		_printNodeFirmwareVersion
 23909 ;;		_printFirmwareVersion
 23910 ;;		_printMode
 23911 ;; This function uses a non-reentrant model
 23912 ;;
 23913                           
 23914                           	psect	text67
 23915  004B82                     __ptext67:
 23916                           	opt stack 0
 23917  004B82                     _putsUSART:
 23918                           	opt stack 25
 23919  004B82                     l1719:
 23920  004B82  A2AC               	btfss	4012,1,c	;volatile
 23921  004B84  D7FE               	goto	l1719
 23922  004B86  501A               	movf	putsUSART@data,w,c
 23923  004B88  6EF6               	movwf	tblptrl,c
 23924  004B8A  6EE9               	movwf	fsr0l,c
 23925  004B8C  0E05               	movlw	(high __ramtop+-1)
 23926  004B8E  6EEA               	movwf	fsr0h,c
 23927  004B90  501B               	movf	putsUSART@data+1,w,c
 23928  004B92  64EA               	cpfsgt	fsr0h,c
 23929  004B94  D003               	bra	u11287
 23930  004B96  6EEA               	movwf	fsr0h,c
 23931  004B98  50EF               	movf	indf0,w,c
 23932  004B9A  D003               	bra	u11280
 23933  004B9C                     u11287:
 23934  004B9C  6EF7               	movwf	tblptrh,c
 23935  004B9E  0008               	tblrd		*
 23936  004BA0  50F5               	movf	tablat,w,c
 23937  004BA2                     u11280:
 23938  004BA2  EC9F  F028         	call	_WriteUSART
 23939  004BA6  501A               	movf	putsUSART@data,w,c
 23940  004BA8  6E1C               	movwf	??_putsUSART& (0+255),c
 23941  004BAA  501B               	movf	putsUSART@data+1,w,c
 23942  004BAC  6E1D               	movwf	(??_putsUSART+1)& (0+255),c
 23943  004BAE  4A1A               	infsnz	putsUSART@data,f,c
 23944  004BB0  2A1B               	incf	putsUSART@data+1,f,c
 23945  004BB2  501C               	movf	??_putsUSART,w,c
 23946  004BB4  6EF6               	movwf	tblptrl,c
 23947  004BB6  6EE9               	movwf	fsr0l,c
 23948  004BB8  0E05               	movlw	(high __ramtop+-1)
 23949  004BBA  6EEA               	movwf	fsr0h,c
 23950  004BBC  501D               	movf	??_putsUSART+1,w,c
 23951  004BBE  64EA               	cpfsgt	fsr0h,c
 23952  004BC0  D003               	bra	u11297
 23953  004BC2  6EEA               	movwf	fsr0h,c
 23954  004BC4  50EF               	movf	indf0,w,c
 23955  004BC6  D003               	bra	u11290
 23956  004BC8                     u11297:
 23957  004BC8  6EF7               	movwf	tblptrh,c
 23958  004BCA  0008               	tblrd		*
 23959  004BCC  50F5               	movf	tablat,w,c
 23960  004BCE                     u11290:
 23961  004BCE  0900               	iorlw	0
 23962  004BD0  B4D8               	btfsc	status,2,c
 23963  004BD2  0012               	return	
 23964  004BD4  D7D6               	goto	l1719
 23965  004BD6                     __end_of_putsUSART:
 23966                           	opt stack 0
 23967                           tblptru	equ	0xFF8
 23968                           tblptrh	equ	0xFF7
 23969                           tblptrl	equ	0xFF6
 23970                           tablat	equ	0xFF5
 23971                           prodh	equ	0xFF4
 23972                           prodl	equ	0xFF3
 23973                           intcon	equ	0xFF2
 23974                           indf0	equ	0xFEF
 23975                           postinc0	equ	0xFEE
 23976                           fsr0h	equ	0xFEA
 23977                           fsr0l	equ	0xFE9
 23978                           wreg	equ	0xFE8
 23979                           indf1	equ	0xFE7
 23980                           postinc1	equ	0xFE6
 23981                           postdec1	equ	0xFE5
 23982                           fsr1h	equ	0xFE2
 23983                           fsr1l	equ	0xFE1
 23984                           indf2	equ	0xFDF
 23985                           postinc2	equ	0xFDE
 23986                           postdec2	equ	0xFDD
 23987                           plusw2	equ	0xFDB
 23988                           fsr2h	equ	0xFDA
 23989                           fsr2l	equ	0xFD9
 23990                           status	equ	0xFD8
 23991                           
 23992 ;; *************** function _WriteUSART *****************
 23993 ;; Defined at:
 23994 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 23995 ;; Parameters:    Size  Location     Type
 23996 ;;  data            1    wreg     unsigned char 
 23997 ;; Auto vars:     Size  Location     Type
 23998 ;;  data            1   24[COMRAM] unsigned char 
 23999 ;; Return value:  Size  Location     Type
 24000 ;;		None               void
 24001 ;; Registers used:
 24002 ;;		wreg
 24003 ;; Tracked objects:
 24004 ;;		On entry : 0/1
 24005 ;;		On exit  : 0/0
 24006 ;;		Unchanged: 0/0
 24007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24008 ;;      Params:         0       0       0       0       0       0       0
 24009 ;;      Locals:         1       0       0       0       0       0       0
 24010 ;;      Temps:          0       0       0       0       0       0       0
 24011 ;;      Totals:         1       0       0       0       0       0       0
 24012 ;;Total ram usage:        1 bytes
 24013 ;; Hardware stack levels used:    1
 24014 ;; Hardware stack levels required when called:    2
 24015 ;; This function calls:
 24016 ;;		Nothing
 24017 ;; This function is called by:
 24018 ;;		_doModeVerbose
 24019 ;;		_sendEscapedUartData
 24020 ;;		_sendVSCPDriverErrorFrame
 24021 ;;		_sendVSCPDriverAck
 24022 ;;		_sendVSCPDriverNack
 24023 ;;		_sendVSCPDriverCommandReply
 24024 ;;		_receivePrintEventCANAL
 24025 ;;		_receivePrintEventSLCAN
 24026 ;;		_printBinary
 24027 ;;		_printFirmwareVersion
 24028 ;;		_putsUSART
 24029 ;; This function uses a non-reentrant model
 24030 ;;
 24031                           
 24032                           	psect	text68
 24033  00513E                     __ptext68:
 24034                           	opt stack 0
 24035  00513E                     _WriteUSART:
 24036                           	opt stack 26
 24037                           
 24038                           ;incstack = 0
 24039                           ;incstack = 0
 24040                           ;WriteUSART@data stored from wreg
 24041  00513E  CFE8 F019          	movff	wreg,WriteUSART@data
 24042  005142  ACAC               	btfss	4012,6,c	;volatile
 24043  005144  D003               	goto	l11335
 24044  005146  90AC               	bcf	4012,0,c	;volatile
 24045  005148  B239               	btfsc	_USART_Status,1,c
 24046  00514A  80AC               	bsf	4012,0,c	;volatile
 24047  00514C                     l11335:
 24048  00514C  C019  FFAD         	movff	WriteUSART@data,4013	;volatile
 24049  005150  0012               	return	
 24050  005152                     __end_of_WriteUSART:
 24051                           	opt stack 0
 24052                           tblptru	equ	0xFF8
 24053                           tblptrh	equ	0xFF7
 24054                           tblptrl	equ	0xFF6
 24055                           tablat	equ	0xFF5
 24056                           prodh	equ	0xFF4
 24057                           prodl	equ	0xFF3
 24058                           intcon	equ	0xFF2
 24059                           indf0	equ	0xFEF
 24060                           postinc0	equ	0xFEE
 24061                           fsr0h	equ	0xFEA
 24062                           fsr0l	equ	0xFE9
 24063                           wreg	equ	0xFE8
 24064                           indf1	equ	0xFE7
 24065                           postinc1	equ	0xFE6
 24066                           postdec1	equ	0xFE5
 24067                           fsr1h	equ	0xFE2
 24068                           fsr1l	equ	0xFE1
 24069                           indf2	equ	0xFDF
 24070                           postinc2	equ	0xFDE
 24071                           postdec2	equ	0xFDD
 24072                           plusw2	equ	0xFDB
 24073                           fsr2h	equ	0xFDA
 24074                           fsr2l	equ	0xFD9
 24075                           status	equ	0xFD8
 24076                           
 24077 ;; *************** function _init *****************
 24078 ;; Defined at:
 24079 ;;		line 307 in file "main.c"
 24080 ;; Parameters:    Size  Location     Type
 24081 ;;		None
 24082 ;; Auto vars:     Size  Location     Type
 24083 ;;		None
 24084 ;; Return value:  Size  Location     Type
 24085 ;;		None               void
 24086 ;; Registers used:
 24087 ;;		wreg, status,2, status,0, cstack
 24088 ;; Tracked objects:
 24089 ;;		On entry : 0/0
 24090 ;;		On exit  : 0/0
 24091 ;;		Unchanged: 0/0
 24092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24093 ;;      Params:         0       0       0       0       0       0       0
 24094 ;;      Locals:         0       0       0       0       0       0       0
 24095 ;;      Temps:          0       0       0       0       0       0       0
 24096 ;;      Totals:         0       0       0       0       0       0       0
 24097 ;;Total ram usage:        0 bytes
 24098 ;; Hardware stack levels used:    1
 24099 ;; Hardware stack levels required when called:    4
 24100 ;; This function calls:
 24101 ;;		_WriteTimer0
 24102 ;;		_init_app_ram
 24103 ;;		_OpenUSART
 24104 ;;		_OpenTimer0
 24105 ;;		_ECANInitialize
 24106 ;; This function is called by:
 24107 ;;		_main
 24108 ;; This function uses a non-reentrant model
 24109 ;;
 24110                           
 24111                           	psect	text69
 24112  004D3C                     __ptext69:
 24113                           	opt stack 0
 24114  004D3C                     _init:
 24115                           	opt stack 26
 24116                           
 24117                           ;main.c: 310: init_app_ram();
 24118                           
 24119                           ;incstack = 0
 24120                           ;incstack = 0
 24121  004D3C  ECEB  F025         	call	_init_app_ram	;wreg free
 24122                           
 24123                           ; BSR set to: 0
 24124                           ;main.c: 313: OSCCONbits.IRCF0 = 1;
 24125  004D40  88D3               	bsf	4051,4,c	;volatile
 24126                           
 24127                           ; BSR set to: 0
 24128                           ;main.c: 314: OSCCONbits.IRCF1 = 1;
 24129  004D42  8AD3               	bsf	4051,5,c	;volatile
 24130                           
 24131                           ; BSR set to: 0
 24132                           ;main.c: 315: OSCCONbits.IRCF2 = 1;
 24133  004D44  8CD3               	bsf	4051,6,c	;volatile
 24134                           
 24135                           ; BSR set to: 0
 24136                           ;main.c: 316: OSCTUNEbits.PLLEN = 1;
 24137  004D46  8C9B               	bsf	3995,6,c	;volatile
 24138                           
 24139                           ; BSR set to: 0
 24140                           ;main.c: 318: TRISBbits.RB2 = 0;
 24141  004D48  9493               	bcf	3987,2,c	;volatile
 24142                           
 24143                           ; BSR set to: 0
 24144                           ;main.c: 319: TRISBbits.RB3 = 1;
 24145  004D4A  8693               	bsf	3987,3,c	;volatile
 24146                           
 24147                           ; BSR set to: 0
 24148                           ;main.c: 321: TRISCbits.RC1 = 0;
 24149  004D4C  9294               	bcf	3988,1,c	;volatile
 24150                           
 24151                           ; BSR set to: 0
 24152                           ;main.c: 322: TRISCbits.RC6 = 0;
 24153  004D4E  9C94               	bcf	3988,6,c	;volatile
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;main.c: 323: TRISCbits.RC7 = 1;
 24157  004D50  8E94               	bsf	3988,7,c	;volatile
 24158                           
 24159                           ;main.c: 327: OpenUSART( 0b01111111 &
 24160                           ;main.c: 328: 0b11111111 &
 24161                           ;main.c: 329: 0b11111110 &
 24162                           ;main.c: 330: 0b11111101 &
 24163                           ;main.c: 331: 0b11111111,
 24164                           ;main.c: 332: 21 );
 24165  004D52  6A1A               	clrf	?_OpenUSART+1,c
 24166  004D54  0E15               	movlw	21
 24167  004D56  6E19               	movwf	?_OpenUSART,c
 24168  004D58  0E7C               	movlw	124
 24169  004D5A  EC3D  F025         	call	_OpenUSART
 24170                           
 24171                           ; BSR set to: 0
 24172                           ;main.c: 334: RCIF = 0;
 24173  004D5E  9A9E               	bcf	3998,5,c	;volatile
 24174                           
 24175                           ; BSR set to: 0
 24176                           ;main.c: 335: RCIP = 0;
 24177  004D60  9A9F               	bcf	3999,5,c	;volatile
 24178                           
 24179                           ; BSR set to: 0
 24180                           ;main.c: 336: RCIE = 1;
 24181  004D62  8A9D               	bsf	3997,5,c	;volatile
 24182                           
 24183                           ; BSR set to: 0
 24184                           ;main.c: 337: PEIE = 1;
 24185  004D64  8CF2               	bsf	intcon,6,c	;volatile
 24186                           
 24187                           ; BSR set to: 0
 24188                           ;main.c: 340: OpenTimer0( 0b11111111 & 0b10111111 & 0b11011111 & 0b11110010 );
 24189  004D66  0E92               	movlw	146
 24190  004D68  EC6A  F028         	call	_OpenTimer0
 24191                           
 24192                           ; BSR set to: 0
 24193                           ;main.c: 341: WriteTimer0( 0xfb1d );
 24194  004D6C  0EFB               	movlw	251
 24195  004D6E  6E1A               	movwf	?_WriteTimer0+1,c
 24196  004D70  0E1D               	movlw	29
 24197  004D72  6E19               	movwf	?_WriteTimer0,c
 24198  004D74  ECA9  F028         	call	_WriteTimer0	;wreg free
 24199                           
 24200                           ;main.c: 344: ECANInitialize();
 24201  004D78  EC15  F023         	call	_ECANInitialize	;wreg free
 24202                           
 24203                           ;main.c: 367: (INTCONbits.GIE = 1);
 24204  004D7C  8EF2               	bsf	intcon,7,c	;volatile
 24205  004D7E  0012               	return	
 24206  004D80                     __end_of_init:
 24207                           	opt stack 0
 24208                           tblptru	equ	0xFF8
 24209                           tblptrh	equ	0xFF7
 24210                           tblptrl	equ	0xFF6
 24211                           tablat	equ	0xFF5
 24212                           prodh	equ	0xFF4
 24213                           prodl	equ	0xFF3
 24214                           intcon	equ	0xFF2
 24215                           indf0	equ	0xFEF
 24216                           postinc0	equ	0xFEE
 24217                           fsr0h	equ	0xFEA
 24218                           fsr0l	equ	0xFE9
 24219                           wreg	equ	0xFE8
 24220                           indf1	equ	0xFE7
 24221                           postinc1	equ	0xFE6
 24222                           postdec1	equ	0xFE5
 24223                           fsr1h	equ	0xFE2
 24224                           fsr1l	equ	0xFE1
 24225                           indf2	equ	0xFDF
 24226                           postinc2	equ	0xFDE
 24227                           postdec2	equ	0xFDD
 24228                           plusw2	equ	0xFDB
 24229                           fsr2h	equ	0xFDA
 24230                           fsr2l	equ	0xFD9
 24231                           status	equ	0xFD8
 24232                           
 24233 ;; *************** function _ECANInitialize *****************
 24234 ;; Defined at:
 24235 ;;		line 168 in file "ECAN.c"
 24236 ;; Parameters:    Size  Location     Type
 24237 ;;		None
 24238 ;; Auto vars:     Size  Location     Type
 24239 ;;		None
 24240 ;; Return value:  Size  Location     Type
 24241 ;;		None               void
 24242 ;; Registers used:
 24243 ;;		wreg, status,2, status,0, cstack
 24244 ;; Tracked objects:
 24245 ;;		On entry : F/0
 24246 ;;		On exit  : 0/0
 24247 ;;		Unchanged: 0/0
 24248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24249 ;;      Params:         0       0       0       0       0       0       0
 24250 ;;      Locals:         0       0       0       0       0       0       0
 24251 ;;      Temps:          0       0       0       0       0       0       0
 24252 ;;      Totals:         0       0       0       0       0       0       0
 24253 ;;Total ram usage:        0 bytes
 24254 ;; Hardware stack levels used:    1
 24255 ;; Hardware stack levels required when called:    3
 24256 ;; This function calls:
 24257 ;;		_ECANSetOperationMode
 24258 ;; This function is called by:
 24259 ;;		_init
 24260 ;; This function uses a non-reentrant model
 24261 ;;
 24262                           
 24263                           	psect	text70
 24264  00462A                     __ptext70:
 24265                           	opt stack 0
 24266  00462A                     _ECANInitialize:
 24267                           	opt stack 26
 24268                           
 24269                           ; BSR set to: 0
 24270                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24271                           
 24272                           ;incstack = 0
 24273                           ;incstack = 0
 24274  00462A  0E80               	movlw	128
 24275  00462C  EC88  F028         	call	_ECANSetOperationMode
 24276                           
 24277                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24278  004630  0E09               	movlw	9
 24279  004632  6E70               	movwf	3952,c	;volatile
 24280                           
 24281                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24282  004634  0EFC               	movlw	252
 24283  004636  6E71               	movwf	3953,c	;volatile
 24284                           
 24285                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24286                           ;ECAN.c: 181: (0 << 6) |
 24287                           ;ECAN.c: 182: (2-1);
 24288  004638  0E01               	movlw	1
 24289  00463A  6E72               	movwf	3954,c	;volatile
 24290                           
 24291                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24292  00463C  0E20               	movlw	32
 24293  00463E  6E73               	movwf	3955,c	;volatile
 24294                           
 24295                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24296  004640  8E77               	bsf	3959,7,c	;volatile
 24297                           
 24298                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24299  004642  9C77               	bcf	3959,6,c	;volatile
 24300                           
 24301                           ;ECAN.c: 205: RXB0CON = 0;
 24302  004644  6A60               	clrf	3936,c	;volatile
 24303                           
 24304                           ;ECAN.c: 211: RXB1CON = 0;
 24305  004646  010F               	movlb	15	; () banked
 24306  004648  6B50               	clrf	80,b	;volatile
 24307                           
 24308                           ; BSR set to: 15
 24309                           ;ECAN.c: 221: B0CON = 0;
 24310  00464A  010E               	movlb	14	; () banked
 24311  00464C  6B20               	clrf	32,b	;volatile
 24312                           
 24313                           ; BSR set to: 14
 24314                           ;ECAN.c: 231: B1CON = 0;
 24315  00464E  6B30               	clrf	48,b	;volatile
 24316                           
 24317                           ; BSR set to: 14
 24318                           ;ECAN.c: 241: B2CON = 0;
 24319  004650  6B40               	clrf	64,b	;volatile
 24320                           
 24321                           ; BSR set to: 14
 24322                           ;ECAN.c: 254: B3CON = 0 << 2;
 24323  004652  6B50               	clrf	80,b	;volatile
 24324                           
 24325                           ; BSR set to: 14
 24326                           ;ECAN.c: 264: B4CON = 0 << 2;
 24327  004654  6B60               	clrf	96,b	;volatile
 24328                           
 24329                           ; BSR set to: 14
 24330                           ;ECAN.c: 274: B5CON = 0 << 2;
 24331  004656  6B70               	clrf	112,b	;volatile
 24332                           
 24333                           ; BSR set to: 14
 24334                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24335  004658  0EE0               	movlw	224
 24336  00465A  010D               	movlb	13	; () banked
 24337  00465C  6FF8               	movwf	248,b	;volatile
 24338                           
 24339                           ; BSR set to: 13
 24340                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24341  00465E  010F               	movlb	15	; () banked
 24342  004660  6B00               	clrf	0,b	;volatile
 24343                           
 24344                           ; BSR set to: 15
 24345  004662  0E08               	movlw	8
 24346  004664  6F01               	movwf	1,b	;volatile
 24347                           
 24348                           ; BSR set to: 15
 24349  004666  6B02               	clrf	2,b	;volatile
 24350                           
 24351                           ; BSR set to: 15
 24352  004668  6B03               	clrf	3,b	;volatile
 24353                           
 24354                           ; BSR set to: 15
 24355                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24356  00466A  0E01               	movlw	1
 24357  00466C  010D               	movlb	13	; () banked
 24358  00466E  6FD4               	movwf	212,b	;volatile
 24359                           
 24360                           ; BSR set to: 13
 24361                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24362  004670  6BD5               	clrf	213,b	;volatile
 24363                           
 24364                           ; BSR set to: 13
 24365                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 24366  004672  6BE0               	clrf	224,b	;volatile
 24367                           
 24368                           ; BSR set to: 13
 24369                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 24370  004674  0E11               	movlw	17
 24371  004676  6FE1               	movwf	225,b	;volatile
 24372                           
 24373                           ; BSR set to: 13
 24374                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 24375  004678  6FE2               	movwf	226,b	;volatile
 24376                           
 24377                           ; BSR set to: 13
 24378                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 24379  00467A  6BE3               	clrf	227,b	;volatile
 24380                           
 24381                           ; BSR set to: 13
 24382                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 24383  00467C  6BE4               	clrf	228,b	;volatile
 24384                           
 24385                           ; BSR set to: 13
 24386                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 24387  00467E  6BE5               	clrf	229,b	;volatile
 24388                           
 24389                           ; BSR set to: 13
 24390                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 24391  004680  6BE6               	clrf	230,b	;volatile
 24392                           
 24393                           ; BSR set to: 13
 24394                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 24395  004682  6BE7               	clrf	231,b	;volatile
 24396                           
 24397                           ; BSR set to: 13
 24398                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 24399  004684  0E54               	movlw	84
 24400  004686  6FF0               	movwf	240,b	;volatile
 24401                           
 24402                           ; BSR set to: 13
 24403                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 24404  004688  0E05               	movlw	5
 24405  00468A  6FF1               	movwf	241,b	;volatile
 24406                           
 24407                           ; BSR set to: 13
 24408                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24409  00468C  6BF2               	clrf	242,b	;volatile
 24410                           
 24411                           ; BSR set to: 13
 24412                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24413  00468E  6BF2               	clrf	242,b	;volatile
 24414                           
 24415                           ; BSR set to: 13
 24416                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 24417  004690  010F               	movlb	15	; () banked
 24418  004692  6B18               	clrf	24,b	;volatile
 24419                           
 24420                           ; BSR set to: 15
 24421  004694  6B19               	clrf	25,b	;volatile
 24422                           
 24423                           ; BSR set to: 15
 24424  004696  6B1A               	clrf	26,b	;volatile
 24425                           
 24426                           ; BSR set to: 15
 24427  004698  6B1B               	clrf	27,b	;volatile
 24428                           
 24429                           ; BSR set to: 15
 24430                           ;ECAN.c: 482: RXM0EXIDM = 1;
 24431  00469A  8719               	bsf	25,3,b	;volatile
 24432                           
 24433                           ; BSR set to: 15
 24434                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 24435  00469C  6B1C               	clrf	28,b	;volatile
 24436                           
 24437                           ; BSR set to: 15
 24438  00469E  6B1D               	clrf	29,b	;volatile
 24439                           
 24440                           ; BSR set to: 15
 24441  0046A0  6B1E               	clrf	30,b	;volatile
 24442                           
 24443                           ; BSR set to: 15
 24444  0046A2  6B1F               	clrf	31,b	;volatile
 24445                           
 24446                           ; BSR set to: 15
 24447                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 24448  0046A4  871D               	bsf	29,3,b	;volatile
 24449                           
 24450                           ; BSR set to: 15
 24451                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 24452  0046A6  0E20               	movlw	32
 24453  0046A8  EF88  F028         	goto	_ECANSetOperationMode
 24454  0046AC                     __end_of_ECANInitialize:
 24455                           	opt stack 0
 24456                           tblptru	equ	0xFF8
 24457                           tblptrh	equ	0xFF7
 24458                           tblptrl	equ	0xFF6
 24459                           tablat	equ	0xFF5
 24460                           prodh	equ	0xFF4
 24461                           prodl	equ	0xFF3
 24462                           intcon	equ	0xFF2
 24463                           indf0	equ	0xFEF
 24464                           postinc0	equ	0xFEE
 24465                           fsr0h	equ	0xFEA
 24466                           fsr0l	equ	0xFE9
 24467                           wreg	equ	0xFE8
 24468                           indf1	equ	0xFE7
 24469                           postinc1	equ	0xFE6
 24470                           postdec1	equ	0xFE5
 24471                           fsr1h	equ	0xFE2
 24472                           fsr1l	equ	0xFE1
 24473                           indf2	equ	0xFDF
 24474                           postinc2	equ	0xFDE
 24475                           postdec2	equ	0xFDD
 24476                           plusw2	equ	0xFDB
 24477                           fsr2h	equ	0xFDA
 24478                           fsr2l	equ	0xFD9
 24479                           status	equ	0xFD8
 24480                           
 24481 ;; *************** function _ECANSetOperationMode *****************
 24482 ;; Defined at:
 24483 ;;		line 1012 in file "ECAN.c"
 24484 ;; Parameters:    Size  Location     Type
 24485 ;;  mode            1    wreg     enum E16337
 24486 ;; Auto vars:     Size  Location     Type
 24487 ;;  mode            1   24[COMRAM] enum E16337
 24488 ;; Return value:  Size  Location     Type
 24489 ;;		None               void
 24490 ;; Registers used:
 24491 ;;		wreg, status,2, status,0
 24492 ;; Tracked objects:
 24493 ;;		On entry : 0/0
 24494 ;;		On exit  : 0/0
 24495 ;;		Unchanged: 0/0
 24496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24497 ;;      Params:         0       0       0       0       0       0       0
 24498 ;;      Locals:         1       0       0       0       0       0       0
 24499 ;;      Temps:          0       0       0       0       0       0       0
 24500 ;;      Totals:         1       0       0       0       0       0       0
 24501 ;;Total ram usage:        1 bytes
 24502 ;; Hardware stack levels used:    1
 24503 ;; Hardware stack levels required when called:    2
 24504 ;; This function calls:
 24505 ;;		Nothing
 24506 ;; This function is called by:
 24507 ;;		_doModeVerbose
 24508 ;;		_doModeVscp
 24509 ;;		_doModeSLCAN
 24510 ;;		_ECANInitialize
 24511 ;; This function uses a non-reentrant model
 24512 ;;
 24513                           
 24514                           	psect	text71
 24515  005110                     __ptext71:
 24516                           	opt stack 0
 24517  005110                     _ECANSetOperationMode:
 24518                           	opt stack 27
 24519                           
 24520                           ;incstack = 0
 24521                           ;incstack = 0
 24522                           ;ECANSetOperationMode@mode stored from wreg
 24523  005110  CFE8 F019          	movff	wreg,ECANSetOperationMode@mode
 24524                           
 24525                           ;ECAN.c: 1013: CANCON &= 0x1F;
 24526  005114  0E1F               	movlw	31
 24527  005116  166F               	andwf	3951,f,c	;volatile
 24528                           
 24529                           ;ECAN.c: 1014: CANCON |= mode;
 24530  005118  5019               	movf	ECANSetOperationMode@mode,w,c
 24531  00511A  126F               	iorwf	3951,f,c	;volatile
 24532  00511C                     l10651:
 24533  00511C  506F               	movf	3951,w,c	;volatile
 24534  00511E  0BE0               	andlw	224
 24535  005120  1819               	xorwf	ECANSetOperationMode@mode,w,c
 24536  005122  B4D8               	btfsc	status,2,c
 24537  005124  0012               	return	
 24538  005126  D7FA               	goto	l10651
 24539  005128                     __end_of_ECANSetOperationMode:
 24540                           	opt stack 0
 24541                           tblptru	equ	0xFF8
 24542                           tblptrh	equ	0xFF7
 24543                           tblptrl	equ	0xFF6
 24544                           tablat	equ	0xFF5
 24545                           prodh	equ	0xFF4
 24546                           prodl	equ	0xFF3
 24547                           intcon	equ	0xFF2
 24548                           indf0	equ	0xFEF
 24549                           postinc0	equ	0xFEE
 24550                           fsr0h	equ	0xFEA
 24551                           fsr0l	equ	0xFE9
 24552                           wreg	equ	0xFE8
 24553                           indf1	equ	0xFE7
 24554                           postinc1	equ	0xFE6
 24555                           postdec1	equ	0xFE5
 24556                           fsr1h	equ	0xFE2
 24557                           fsr1l	equ	0xFE1
 24558                           indf2	equ	0xFDF
 24559                           postinc2	equ	0xFDE
 24560                           postdec2	equ	0xFDD
 24561                           plusw2	equ	0xFDB
 24562                           fsr2h	equ	0xFDA
 24563                           fsr2l	equ	0xFD9
 24564                           status	equ	0xFD8
 24565                           
 24566 ;; *************** function _OpenTimer0 *****************
 24567 ;; Defined at:
 24568 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 24569 ;; Parameters:    Size  Location     Type
 24570 ;;  config          1    wreg     unsigned char 
 24571 ;; Auto vars:     Size  Location     Type
 24572 ;;  config          1   24[COMRAM] unsigned char 
 24573 ;; Return value:  Size  Location     Type
 24574 ;;		None               void
 24575 ;; Registers used:
 24576 ;;		wreg, status,2, status,0
 24577 ;; Tracked objects:
 24578 ;;		On entry : F/0
 24579 ;;		On exit  : F/0
 24580 ;;		Unchanged: F/0
 24581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24582 ;;      Params:         0       0       0       0       0       0       0
 24583 ;;      Locals:         1       0       0       0       0       0       0
 24584 ;;      Temps:          0       0       0       0       0       0       0
 24585 ;;      Totals:         1       0       0       0       0       0       0
 24586 ;;Total ram usage:        1 bytes
 24587 ;; Hardware stack levels used:    1
 24588 ;; Hardware stack levels required when called:    2
 24589 ;; This function calls:
 24590 ;;		Nothing
 24591 ;; This function is called by:
 24592 ;;		_init
 24593 ;; This function uses a non-reentrant model
 24594 ;;
 24595                           
 24596                           	psect	text72
 24597  0050D4                     __ptext72:
 24598                           	opt stack 0
 24599  0050D4                     _OpenTimer0:
 24600                           	opt stack 27
 24601                           
 24602                           ;incstack = 0
 24603                           ;incstack = 0
 24604                           ;OpenTimer0@config stored from wreg
 24605  0050D4  CFE8 F019          	movff	wreg,OpenTimer0@config
 24606                           
 24607                           ; BSR set to: 0
 24608  0050D8  5019               	movf	OpenTimer0@config,w,c
 24609  0050DA  0B7F               	andlw	127
 24610  0050DC  6ED5               	movwf	4053,c	;volatile
 24611                           
 24612                           ; BSR set to: 0
 24613  0050DE  6AD7               	clrf	4055,c	;volatile
 24614                           
 24615                           ; BSR set to: 0
 24616  0050E0  6AD6               	clrf	4054,c	;volatile
 24617                           
 24618                           ; BSR set to: 0
 24619  0050E2  94F2               	bcf	intcon,2,c	;volatile
 24620                           
 24621                           ; BSR set to: 0
 24622  0050E4  AE19               	btfss	OpenTimer0@config,7,c
 24623  0050E6  D002               	goto	l1669
 24624                           
 24625                           ; BSR set to: 0
 24626  0050E8  8AF2               	bsf	intcon,5,c	;volatile
 24627  0050EA  D001               	goto	l1670
 24628  0050EC                     l1669:
 24629                           
 24630                           ; BSR set to: 0
 24631  0050EC  9AF2               	bcf	intcon,5,c	;volatile
 24632  0050EE                     l1670:
 24633                           
 24634                           ; BSR set to: 0
 24635  0050EE  8ED5               	bsf	4053,7,c	;volatile
 24636                           
 24637                           ; BSR set to: 0
 24638  0050F0  0012               	return	
 24639  0050F2                     __end_of_OpenTimer0:
 24640                           	opt stack 0
 24641                           tblptru	equ	0xFF8
 24642                           tblptrh	equ	0xFF7
 24643                           tblptrl	equ	0xFF6
 24644                           tablat	equ	0xFF5
 24645                           prodh	equ	0xFF4
 24646                           prodl	equ	0xFF3
 24647                           intcon	equ	0xFF2
 24648                           indf0	equ	0xFEF
 24649                           postinc0	equ	0xFEE
 24650                           fsr0h	equ	0xFEA
 24651                           fsr0l	equ	0xFE9
 24652                           wreg	equ	0xFE8
 24653                           indf1	equ	0xFE7
 24654                           postinc1	equ	0xFE6
 24655                           postdec1	equ	0xFE5
 24656                           fsr1h	equ	0xFE2
 24657                           fsr1l	equ	0xFE1
 24658                           indf2	equ	0xFDF
 24659                           postinc2	equ	0xFDE
 24660                           postdec2	equ	0xFDD
 24661                           plusw2	equ	0xFDB
 24662                           fsr2h	equ	0xFDA
 24663                           fsr2l	equ	0xFD9
 24664                           status	equ	0xFD8
 24665                           
 24666 ;; *************** function _OpenUSART *****************
 24667 ;; Defined at:
 24668 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 24669 ;; Parameters:    Size  Location     Type
 24670 ;;  config          1    wreg     unsigned char 
 24671 ;;  spbrg           2   24[COMRAM] unsigned int 
 24672 ;; Auto vars:     Size  Location     Type
 24673 ;;  config          1   26[COMRAM] unsigned char 
 24674 ;; Return value:  Size  Location     Type
 24675 ;;		None               void
 24676 ;; Registers used:
 24677 ;;		wreg, status,2
 24678 ;; Tracked objects:
 24679 ;;		On entry : F/0
 24680 ;;		On exit  : F/0
 24681 ;;		Unchanged: F/0
 24682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24683 ;;      Params:         2       0       0       0       0       0       0
 24684 ;;      Locals:         1       0       0       0       0       0       0
 24685 ;;      Temps:          0       0       0       0       0       0       0
 24686 ;;      Totals:         3       0       0       0       0       0       0
 24687 ;;Total ram usage:        3 bytes
 24688 ;; Hardware stack levels used:    1
 24689 ;; Hardware stack levels required when called:    2
 24690 ;; This function calls:
 24691 ;;		Nothing
 24692 ;; This function is called by:
 24693 ;;		_init
 24694 ;; This function uses a non-reentrant model
 24695 ;;
 24696                           
 24697                           	psect	text73
 24698  004A7A                     __ptext73:
 24699                           	opt stack 0
 24700  004A7A                     _OpenUSART:
 24701                           	opt stack 27
 24702                           
 24703                           ; BSR set to: 0
 24704                           ;incstack = 0
 24705                           ;incstack = 0
 24706                           ;OpenUSART@config stored from wreg
 24707  004A7A  CFE8 F01B          	movff	wreg,OpenUSART@config
 24708                           
 24709                           ; BSR set to: 0
 24710  004A7E  6AAC               	clrf	4012,c	;volatile
 24711  004A80  6AAB               	clrf	4011,c	;volatile
 24712                           
 24713                           ; BSR set to: 0
 24714  004A82  B01B               	btfsc	OpenUSART@config,0,c
 24715                           
 24716                           ; BSR set to: 0
 24717  004A84  88AC               	bsf	4012,4,c	;volatile
 24718                           
 24719                           ; BSR set to: 0
 24720  004A86  A21B               	btfss	OpenUSART@config,1,c
 24721  004A88  D002               	goto	l10365
 24722                           
 24723                           ; BSR set to: 0
 24724  004A8A  8CAC               	bsf	4012,6,c	;volatile
 24725  004A8C  8CAB               	bsf	4011,6,c	;volatile
 24726  004A8E                     l10365:
 24727                           
 24728                           ; BSR set to: 0
 24729  004A8E  B41B               	btfsc	OpenUSART@config,2,c
 24730                           
 24731                           ; BSR set to: 0
 24732  004A90  8EAC               	bsf	4012,7,c	;volatile
 24733                           
 24734                           ; BSR set to: 0
 24735  004A92  A61B               	btfss	OpenUSART@config,3,c
 24736  004A94  D002               	goto	l1702
 24737                           
 24738                           ; BSR set to: 0
 24739  004A96  88AB               	bsf	4011,4,c	;volatile
 24740  004A98  D001               	goto	l10373
 24741  004A9A                     l1702:
 24742                           
 24743                           ; BSR set to: 0
 24744  004A9A  8AAB               	bsf	4011,5,c	;volatile
 24745  004A9C                     l10373:
 24746                           
 24747                           ; BSR set to: 0
 24748  004A9C  B81B               	btfsc	OpenUSART@config,4,c
 24749                           
 24750                           ; BSR set to: 0
 24751  004A9E  84AC               	bsf	4012,2,c	;volatile
 24752                           
 24753                           ; BSR set to: 0
 24754  004AA0  989E               	bcf	3998,4,c	;volatile
 24755                           
 24756                           ; BSR set to: 0
 24757  004AA2  BA1B               	btfsc	OpenUSART@config,5,c
 24758                           
 24759                           ; BSR set to: 0
 24760  004AA4  86AB               	bsf	4011,3,c	;volatile
 24761                           
 24762                           ; BSR set to: 0
 24763  004AA6  AC1B               	btfss	OpenUSART@config,6,c
 24764  004AA8  D002               	goto	l1706
 24765                           
 24766                           ; BSR set to: 0
 24767  004AAA  8A9D               	bsf	3997,5,c	;volatile
 24768  004AAC  D001               	goto	l1707
 24769  004AAE                     l1706:
 24770                           
 24771                           ; BSR set to: 0
 24772  004AAE  9A9D               	bcf	3997,5,c	;volatile
 24773  004AB0                     l1707:
 24774                           
 24775                           ; BSR set to: 0
 24776  004AB0  9A9E               	bcf	3998,5,c	;volatile
 24777                           
 24778                           ; BSR set to: 0
 24779  004AB2  AE1B               	btfss	OpenUSART@config,7,c
 24780  004AB4  D002               	goto	l1708
 24781                           
 24782                           ; BSR set to: 0
 24783  004AB6  889D               	bsf	3997,4,c	;volatile
 24784  004AB8  D001               	goto	l1709
 24785  004ABA                     l1708:
 24786                           
 24787                           ; BSR set to: 0
 24788  004ABA  989D               	bcf	3997,4,c	;volatile
 24789  004ABC                     l1709:
 24790                           
 24791                           ; BSR set to: 0
 24792  004ABC  C019  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 24793                           
 24794                           ; BSR set to: 0
 24795  004AC0  501A               	movf	OpenUSART@spbrg+1,w,c
 24796  004AC2  6EB0               	movwf	4016,c	;volatile
 24797                           
 24798                           ; BSR set to: 0
 24799  004AC4  8AAC               	bsf	4012,5,c	;volatile
 24800                           
 24801                           ; BSR set to: 0
 24802  004AC6  8EAB               	bsf	4011,7,c	;volatile
 24803                           
 24804                           ; BSR set to: 0
 24805  004AC8  9C94               	bcf	3988,6,c	;volatile
 24806                           
 24807                           ; BSR set to: 0
 24808  004ACA  8E94               	bsf	3988,7,c	;volatile
 24809                           
 24810                           ; BSR set to: 0
 24811  004ACC  B8AC               	btfsc	4012,4,c	;volatile
 24812                           
 24813                           ; BSR set to: 0
 24814  004ACE  BEAC               	btfsc	4012,7,c	;volatile
 24815  004AD0  D001               	goto	l1711
 24816                           
 24817                           ; BSR set to: 0
 24818  004AD2  8C94               	bsf	3988,6,c	;volatile
 24819  004AD4                     l1711:
 24820                           
 24821                           ; BSR set to: 0
 24822  004AD4  0012               	return	
 24823  004AD6                     __end_of_OpenUSART:
 24824                           	opt stack 0
 24825                           tblptru	equ	0xFF8
 24826                           tblptrh	equ	0xFF7
 24827                           tblptrl	equ	0xFF6
 24828                           tablat	equ	0xFF5
 24829                           prodh	equ	0xFF4
 24830                           prodl	equ	0xFF3
 24831                           intcon	equ	0xFF2
 24832                           indf0	equ	0xFEF
 24833                           postinc0	equ	0xFEE
 24834                           fsr0h	equ	0xFEA
 24835                           fsr0l	equ	0xFE9
 24836                           wreg	equ	0xFE8
 24837                           indf1	equ	0xFE7
 24838                           postinc1	equ	0xFE6
 24839                           postdec1	equ	0xFE5
 24840                           fsr1h	equ	0xFE2
 24841                           fsr1l	equ	0xFE1
 24842                           indf2	equ	0xFDF
 24843                           postinc2	equ	0xFDE
 24844                           postdec2	equ	0xFDD
 24845                           plusw2	equ	0xFDB
 24846                           fsr2h	equ	0xFDA
 24847                           fsr2l	equ	0xFD9
 24848                           status	equ	0xFD8
 24849                           
 24850 ;; *************** function _WriteTimer0 *****************
 24851 ;; Defined at:
 24852 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 24853 ;; Parameters:    Size  Location     Type
 24854 ;;  timer0          2   24[COMRAM] unsigned int 
 24855 ;; Auto vars:     Size  Location     Type
 24856 ;;  timer           2   26[COMRAM] struct Timers
 24857 ;; Return value:  Size  Location     Type
 24858 ;;		None               void
 24859 ;; Registers used:
 24860 ;;		None
 24861 ;; Tracked objects:
 24862 ;;		On entry : F/0
 24863 ;;		On exit  : F/0
 24864 ;;		Unchanged: F/0
 24865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24866 ;;      Params:         2       0       0       0       0       0       0
 24867 ;;      Locals:         2       0       0       0       0       0       0
 24868 ;;      Temps:          0       0       0       0       0       0       0
 24869 ;;      Totals:         4       0       0       0       0       0       0
 24870 ;;Total ram usage:        4 bytes
 24871 ;; Hardware stack levels used:    1
 24872 ;; Hardware stack levels required when called:    2
 24873 ;; This function calls:
 24874 ;;		Nothing
 24875 ;; This function is called by:
 24876 ;;		_init
 24877 ;; This function uses a non-reentrant model
 24878 ;;
 24879                           
 24880                           	psect	text74
 24881  005152                     __ptext74:
 24882                           	opt stack 0
 24883  005152                     _WriteTimer0:
 24884                           	opt stack 27
 24885                           
 24886                           ; BSR set to: 0
 24887                           
 24888                           ; BSR set to: 0
 24889                           ;incstack = 0
 24890                           ;incstack = 0
 24891  005152  C019  F01B         	movff	WriteTimer0@timer0,WriteTimer0@timer
 24892  005156  C01A  F01C         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 24893  00515A  C01C  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 24894  00515E  C01B  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 24895                           
 24896                           ; BSR set to: 0
 24897  005162  0012               	return	
 24898  005164                     __end_of_WriteTimer0:
 24899                           	opt stack 0
 24900                           tblptru	equ	0xFF8
 24901                           tblptrh	equ	0xFF7
 24902                           tblptrl	equ	0xFF6
 24903                           tablat	equ	0xFF5
 24904                           prodh	equ	0xFF4
 24905                           prodl	equ	0xFF3
 24906                           intcon	equ	0xFF2
 24907                           indf0	equ	0xFEF
 24908                           postinc0	equ	0xFEE
 24909                           fsr0h	equ	0xFEA
 24910                           fsr0l	equ	0xFE9
 24911                           wreg	equ	0xFE8
 24912                           indf1	equ	0xFE7
 24913                           postinc1	equ	0xFE6
 24914                           postdec1	equ	0xFE5
 24915                           fsr1h	equ	0xFE2
 24916                           fsr1l	equ	0xFE1
 24917                           indf2	equ	0xFDF
 24918                           postinc2	equ	0xFDE
 24919                           postdec2	equ	0xFDD
 24920                           plusw2	equ	0xFDB
 24921                           fsr2h	equ	0xFDA
 24922                           fsr2l	equ	0xFD9
 24923                           status	equ	0xFD8
 24924                           
 24925 ;; *************** function _vscp_restoreDefaults *****************
 24926 ;; Defined at:
 24927 ;;		line 2465 in file "main.c"
 24928 ;; Parameters:    Size  Location     Type
 24929 ;;		None
 24930 ;; Auto vars:     Size  Location     Type
 24931 ;;		None
 24932 ;; Return value:  Size  Location     Type
 24933 ;;		None               void
 24934 ;; Registers used:
 24935 ;;		wreg, status,2, status,0, cstack
 24936 ;; Tracked objects:
 24937 ;;		On entry : 0/0
 24938 ;;		On exit  : F/0
 24939 ;;		Unchanged: 0/0
 24940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24941 ;;      Params:         0       0       0       0       0       0       0
 24942 ;;      Locals:         0       0       0       0       0       0       0
 24943 ;;      Temps:          0       0       0       0       0       0       0
 24944 ;;      Totals:         0       0       0       0       0       0       0
 24945 ;;Total ram usage:        0 bytes
 24946 ;; Hardware stack levels used:    1
 24947 ;; Hardware stack levels required when called:    4
 24948 ;; This function calls:
 24949 ;;		_init_app_ram
 24950 ;;		_init_app_eeprom
 24951 ;; This function is called by:
 24952 ;;		_main
 24953 ;; This function uses a non-reentrant model
 24954 ;;
 24955                           
 24956                           	psect	text75
 24957  005188                     __ptext75:
 24958                           	opt stack 0
 24959  005188                     _vscp_restoreDefaults:
 24960                           	opt stack 26
 24961                           
 24962                           ;main.c: 2466: init_app_eeprom();
 24963                           
 24964                           ; BSR set to: 0
 24965                           ;incstack = 0
 24966                           ;incstack = 0
 24967  005188  EC8E  F022         	call	_init_app_eeprom	;wreg free
 24968                           
 24969                           ;main.c: 2467: init_app_ram();
 24970  00518C  EFEB  F025         	goto	_init_app_ram	;wreg free
 24971  005190                     __end_of_vscp_restoreDefaults:
 24972                           	opt stack 0
 24973                           tblptru	equ	0xFF8
 24974                           tblptrh	equ	0xFF7
 24975                           tblptrl	equ	0xFF6
 24976                           tablat	equ	0xFF5
 24977                           prodh	equ	0xFF4
 24978                           prodl	equ	0xFF3
 24979                           intcon	equ	0xFF2
 24980                           indf0	equ	0xFEF
 24981                           postinc0	equ	0xFEE
 24982                           fsr0h	equ	0xFEA
 24983                           fsr0l	equ	0xFE9
 24984                           wreg	equ	0xFE8
 24985                           indf1	equ	0xFE7
 24986                           postinc1	equ	0xFE6
 24987                           postdec1	equ	0xFE5
 24988                           fsr1h	equ	0xFE2
 24989                           fsr1l	equ	0xFE1
 24990                           indf2	equ	0xFDF
 24991                           postinc2	equ	0xFDE
 24992                           postdec2	equ	0xFDD
 24993                           plusw2	equ	0xFDB
 24994                           fsr2h	equ	0xFDA
 24995                           fsr2l	equ	0xFD9
 24996                           status	equ	0xFD8
 24997                           
 24998 ;; *************** function _init_app_eeprom *****************
 24999 ;; Defined at:
 25000 ;;		line 394 in file "main.c"
 25001 ;; Parameters:    Size  Location     Type
 25002 ;;		None
 25003 ;; Auto vars:     Size  Location     Type
 25004 ;;  i               1   27[COMRAM] unsigned char 
 25005 ;; Return value:  Size  Location     Type
 25006 ;;		None               void
 25007 ;; Registers used:
 25008 ;;		wreg, status,2, status,0, cstack
 25009 ;; Tracked objects:
 25010 ;;		On entry : 0/0
 25011 ;;		On exit  : 0/0
 25012 ;;		Unchanged: 0/0
 25013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25014 ;;      Params:         0       0       0       0       0       0       0
 25015 ;;      Locals:         1       0       0       0       0       0       0
 25016 ;;      Temps:          0       0       0       0       0       0       0
 25017 ;;      Totals:         1       0       0       0       0       0       0
 25018 ;;Total ram usage:        1 bytes
 25019 ;; Hardware stack levels used:    1
 25020 ;; Hardware stack levels required when called:    3
 25021 ;; This function calls:
 25022 ;;		_writeEEPROM
 25023 ;; This function is called by:
 25024 ;;		_vscp_restoreDefaults
 25025 ;; This function uses a non-reentrant model
 25026 ;;
 25027                           
 25028                           	psect	text76
 25029  00451C                     __ptext76:
 25030                           	opt stack 0
 25031  00451C                     _init_app_eeprom:
 25032                           	opt stack 26
 25033                           
 25034                           ;main.c: 395: uint8_t i;
 25035                           ;main.c: 397: writeEEPROM( 0x01, 0x55 );
 25036                           
 25037                           ; BSR set to: 0
 25038                           ;incstack = 0
 25039                           ;incstack = 0
 25040  00451C  6A1A               	clrf	?_writeEEPROM+1,c
 25041  00451E  0E01               	movlw	1
 25042  004520  6E19               	movwf	?_writeEEPROM,c
 25043  004522  0E55               	movlw	85
 25044  004524  6E1B               	movwf	?_writeEEPROM+2,c
 25045  004526  EC48  F028         	call	_writeEEPROM	;wreg free
 25046                           
 25047                           ;main.c: 398: writeEEPROM( 0x02, 0xAA );
 25048  00452A  6A1A               	clrf	?_writeEEPROM+1,c
 25049  00452C  0E02               	movlw	2
 25050  00452E  6E19               	movwf	?_writeEEPROM,c
 25051  004530  0EAA               	movlw	170
 25052  004532  6E1B               	movwf	?_writeEEPROM+2,c
 25053  004534  EC48  F028         	call	_writeEEPROM	;wreg free
 25054                           
 25055                           ;main.c: 399: writeEEPROM( 0x03, 0 );
 25056  004538  6A1A               	clrf	?_writeEEPROM+1,c
 25057  00453A  0E03               	movlw	3
 25058  00453C  6E19               	movwf	?_writeEEPROM,c
 25059  00453E  0E00               	movlw	0
 25060  004540  6A1B               	clrf	?_writeEEPROM+2,c
 25061  004542  EC48  F028         	call	_writeEEPROM	;wreg free
 25062                           
 25063                           ;main.c: 400: writeEEPROM( 0x05, 0 );
 25064  004546  6A1A               	clrf	?_writeEEPROM+1,c
 25065  004548  0E05               	movlw	5
 25066  00454A  6E19               	movwf	?_writeEEPROM,c
 25067  00454C  0E00               	movlw	0
 25068  00454E  6A1B               	clrf	?_writeEEPROM+2,c
 25069  004550  EC48  F028         	call	_writeEEPROM	;wreg free
 25070                           
 25071                           ;main.c: 401: writeEEPROM( 0x06, 0 );
 25072  004554  6A1A               	clrf	?_writeEEPROM+1,c
 25073  004556  0E06               	movlw	6
 25074  004558  6E19               	movwf	?_writeEEPROM,c
 25075  00455A  0E00               	movlw	0
 25076  00455C  6A1B               	clrf	?_writeEEPROM+2,c
 25077  00455E  EC48  F028         	call	_writeEEPROM	;wreg free
 25078                           
 25079                           ;main.c: 402: writeEEPROM( 0x09, 10u );
 25080  004562  6A1A               	clrf	?_writeEEPROM+1,c
 25081  004564  0E09               	movlw	9
 25082  004566  6E19               	movwf	?_writeEEPROM,c
 25083  004568  0E0A               	movlw	10
 25084  00456A  6E1B               	movwf	?_writeEEPROM+2,c
 25085  00456C  EC48  F028         	call	_writeEEPROM	;wreg free
 25086                           
 25087                           ;main.c: 405: for ( i=0x20; i<(0x5C + 4); i++ ) {
 25088  004570  0E20               	movlw	32
 25089  004572  6E1C               	movwf	init_app_eeprom@i,c
 25090  004574                     l10515:
 25091                           
 25092                           ;main.c: 406: writeEEPROM( 0x01, 0xFF );
 25093  004574  6A1A               	clrf	?_writeEEPROM+1,c
 25094  004576  0E01               	movlw	1
 25095  004578  6E19               	movwf	?_writeEEPROM,c
 25096  00457A  0EFF               	movlw	255
 25097  00457C  681B               	setf	?_writeEEPROM+2,c
 25098  00457E  EC48  F028         	call	_writeEEPROM	;wreg free
 25099  004582  2A1C               	incf	init_app_eeprom@i,f,c
 25100  004584  0E5F               	movlw	95
 25101  004586  641C               	cpfsgt	init_app_eeprom@i,c
 25102  004588  D7F5               	goto	l10515
 25103                           
 25104                           ;main.c: 407: }
 25105                           ;main.c: 410: for ( i=0x60; i<(0x64 + 4); i++ ) {
 25106  00458A  0E60               	movlw	96
 25107  00458C  6E1C               	movwf	init_app_eeprom@i,c
 25108  00458E                     l10527:
 25109                           
 25110                           ;main.c: 411: writeEEPROM( 0x01, 0xFF );
 25111  00458E  6A1A               	clrf	?_writeEEPROM+1,c
 25112  004590  0E01               	movlw	1
 25113  004592  6E19               	movwf	?_writeEEPROM,c
 25114  004594  0EFF               	movlw	255
 25115  004596  681B               	setf	?_writeEEPROM+2,c
 25116  004598  EC48  F028         	call	_writeEEPROM	;wreg free
 25117  00459C  2A1C               	incf	init_app_eeprom@i,f,c
 25118  00459E  0E67               	movlw	103
 25119  0045A0  641C               	cpfsgt	init_app_eeprom@i,c
 25120  0045A2  D7F5               	goto	l10527
 25121  0045A4  0C67               	retlw	103
 25122  0045A6                     __end_of_init_app_eeprom:
 25123                           	opt stack 0
 25124                           tblptru	equ	0xFF8
 25125                           tblptrh	equ	0xFF7
 25126                           tblptrl	equ	0xFF6
 25127                           tablat	equ	0xFF5
 25128                           prodh	equ	0xFF4
 25129                           prodl	equ	0xFF3
 25130                           intcon	equ	0xFF2
 25131                           indf0	equ	0xFEF
 25132                           postinc0	equ	0xFEE
 25133                           fsr0h	equ	0xFEA
 25134                           fsr0l	equ	0xFE9
 25135                           wreg	equ	0xFE8
 25136                           indf1	equ	0xFE7
 25137                           postinc1	equ	0xFE6
 25138                           postdec1	equ	0xFE5
 25139                           fsr1h	equ	0xFE2
 25140                           fsr1l	equ	0xFE1
 25141                           indf2	equ	0xFDF
 25142                           postinc2	equ	0xFDE
 25143                           postdec2	equ	0xFDD
 25144                           plusw2	equ	0xFDB
 25145                           fsr2h	equ	0xFDA
 25146                           fsr2l	equ	0xFD9
 25147                           status	equ	0xFD8
 25148                           
 25149 ;; *************** function _writeEEPROM *****************
 25150 ;; Defined at:
 25151 ;;		line 23 in file "eeprom.c"
 25152 ;; Parameters:    Size  Location     Type
 25153 ;;  address         2   24[COMRAM] unsigned short 
 25154 ;;  data            1   26[COMRAM] unsigned char 
 25155 ;; Auto vars:     Size  Location     Type
 25156 ;;		None
 25157 ;; Return value:  Size  Location     Type
 25158 ;;		None               void
 25159 ;; Registers used:
 25160 ;;		wreg, status,2
 25161 ;; Tracked objects:
 25162 ;;		On entry : 0/1
 25163 ;;		On exit  : 0/0
 25164 ;;		Unchanged: 0/0
 25165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25166 ;;      Params:         3       0       0       0       0       0       0
 25167 ;;      Locals:         0       0       0       0       0       0       0
 25168 ;;      Temps:          0       0       0       0       0       0       0
 25169 ;;      Totals:         3       0       0       0       0       0       0
 25170 ;;Total ram usage:        3 bytes
 25171 ;; Hardware stack levels used:    1
 25172 ;; Hardware stack levels required when called:    2
 25173 ;; This function calls:
 25174 ;;		Nothing
 25175 ;; This function is called by:
 25176 ;;		_init_app_eeprom
 25177 ;;		_doModeVerbose
 25178 ;;		_doModeSLCAN
 25179 ;; This function uses a non-reentrant model
 25180 ;;
 25181                           
 25182                           	psect	text77
 25183  005090                     __ptext77:
 25184                           	opt stack 0
 25185  005090                     _writeEEPROM:
 25186                           	opt stack 27
 25187                           
 25188                           ;eeprom.c: 29: EEADR = address & 0xff;
 25189                           
 25190                           ;incstack = 0
 25191                           ;incstack = 0
 25192  005090  C019  FFA9         	movff	writeEEPROM@address,4009	;volatile
 25193                           
 25194                           ;eeprom.c: 30: EEDATA = data;
 25195  005094  C01B  FFA8         	movff	writeEEPROM@data,4008	;volatile
 25196                           
 25197                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 25198  005098  9EA6               	bcf	4006,7,c	;volatile
 25199                           
 25200                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 25201  00509A  9CA6               	bcf	4006,6,c	;volatile
 25202                           
 25203                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 25204  00509C  84A6               	bsf	4006,2,c	;volatile
 25205                           
 25206                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 25207  00509E  9EF2               	bcf	intcon,7,c	;volatile
 25208                           
 25209                           ;eeprom.c: 37: EECON2 = 0x55;
 25210  0050A0  0E55               	movlw	85
 25211  0050A2  6EA7               	movwf	4007,c	;volatile
 25212                           
 25213                           ;eeprom.c: 38: EECON2 = 0xaa;
 25214  0050A4  0EAA               	movlw	170
 25215  0050A6  6EA7               	movwf	4007,c	;volatile
 25216                           
 25217                           ;eeprom.c: 39: EECON1bits.WR = 1;
 25218  0050A8  82A6               	bsf	4006,1,c	;volatile
 25219                           
 25220                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 25221  0050AA  8EF2               	bsf	intcon,7,c	;volatile
 25222  0050AC                     l1449:
 25223  0050AC  A8A1               	btfss	4001,4,c	;volatile
 25224  0050AE  D7FE               	goto	l1449
 25225                           
 25226                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 25227  0050B0  98A1               	bcf	4001,4,c	;volatile
 25228                           
 25229                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 25230  0050B2  94A6               	bcf	4006,2,c	;volatile
 25231  0050B4  0012               	return	
 25232  0050B6                     __end_of_writeEEPROM:
 25233                           	opt stack 0
 25234                           tblptru	equ	0xFF8
 25235                           tblptrh	equ	0xFF7
 25236                           tblptrl	equ	0xFF6
 25237                           tablat	equ	0xFF5
 25238                           prodh	equ	0xFF4
 25239                           prodl	equ	0xFF3
 25240                           intcon	equ	0xFF2
 25241                           indf0	equ	0xFEF
 25242                           postinc0	equ	0xFEE
 25243                           fsr0h	equ	0xFEA
 25244                           fsr0l	equ	0xFE9
 25245                           wreg	equ	0xFE8
 25246                           indf1	equ	0xFE7
 25247                           postinc1	equ	0xFE6
 25248                           postdec1	equ	0xFE5
 25249                           fsr1h	equ	0xFE2
 25250                           fsr1l	equ	0xFE1
 25251                           indf2	equ	0xFDF
 25252                           postinc2	equ	0xFDE
 25253                           postdec2	equ	0xFDD
 25254                           plusw2	equ	0xFDB
 25255                           fsr2h	equ	0xFDA
 25256                           fsr2l	equ	0xFD9
 25257                           status	equ	0xFD8
 25258                           
 25259 ;; *************** function _init_app_ram *****************
 25260 ;; Defined at:
 25261 ;;		line 376 in file "main.c"
 25262 ;; Parameters:    Size  Location     Type
 25263 ;;		None
 25264 ;; Auto vars:     Size  Location     Type
 25265 ;;		None
 25266 ;; Return value:  Size  Location     Type
 25267 ;;		None               void
 25268 ;; Registers used:
 25269 ;;		wreg, status,2, cstack
 25270 ;; Tracked objects:
 25271 ;;		On entry : 0/0
 25272 ;;		On exit  : F/0
 25273 ;;		Unchanged: 0/0
 25274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25275 ;;      Params:         0       0       0       0       0       0       0
 25276 ;;      Locals:         0       0       0       0       0       0       0
 25277 ;;      Temps:          0       0       0       0       0       0       0
 25278 ;;      Totals:         0       0       0       0       0       0       0
 25279 ;;Total ram usage:        0 bytes
 25280 ;; Hardware stack levels used:    1
 25281 ;; Hardware stack levels required when called:    3
 25282 ;; This function calls:
 25283 ;;		_readEEPROM
 25284 ;; This function is called by:
 25285 ;;		_init
 25286 ;;		_vscp_restoreDefaults
 25287 ;; This function uses a non-reentrant model
 25288 ;;
 25289                           
 25290                           	psect	text78
 25291  004BD6                     __ptext78:
 25292                           	opt stack 0
 25293  004BD6                     _init_app_ram:
 25294                           	opt stack 26
 25295                           
 25296                           ;main.c: 378: can_receiveOverruns = 0;
 25297                           
 25298                           ;incstack = 0
 25299                           ;incstack = 0
 25300  004BD6  0101               	movlb	1	; () banked
 25301  004BD8  6B00               	clrf	_can_receiveOverruns& (0+255),b
 25302  004BDA  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 25303  004BDC  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 25304  004BDE  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 25305                           
 25306                           ;main.c: 379: can_transmitOverruns = 0;
 25307  004BE0  6B04               	clrf	_can_transmitOverruns& (0+255),b
 25308  004BE2  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 25309  004BE4  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 25310  004BE6  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 25311                           
 25312                           ;main.c: 380: uart_receiveOverruns = 0;
 25313  004BE8  6B18               	clrf	_uart_receiveOverruns& (0+255),b
 25314  004BEA  6B19               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 25315  004BEC  6B1A               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 25316  004BEE  6B1B               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 25317                           
 25318                           ;main.c: 381: uart_transmitOverruns = 0;
 25319  004BF0  6B1C               	clrf	_uart_transmitOverruns& (0+255),b
 25320  004BF2  6B1D               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 25321  004BF4  6B1E               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 25322  004BF6  6B1F               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 25323                           
 25324                           ; BSR set to: 1
 25325                           ;main.c: 383: bHex = readEEPROM( 0x06 );
 25326  004BF8  6A1A               	clrf	?_readEEPROM+1,c
 25327  004BFA  0E06               	movlw	6
 25328  004BFC  6E19               	movwf	?_readEEPROM,c
 25329  004BFE  ECB2  F028         	call	_readEEPROM	;wreg free
 25330  004C02  0100               	movlb	0	; () banked
 25331  004C04  6FD3               	movwf	_bHex& (0+255),b
 25332                           
 25333                           ;main.c: 384: mode = readEEPROM( 0x03 );
 25334  004C06  6A1A               	clrf	?_readEEPROM+1,c
 25335  004C08  0E03               	movlw	3
 25336  004C0A  6E19               	movwf	?_readEEPROM,c
 25337  004C0C  ECB2  F028         	call	_readEEPROM	;wreg free
 25338  004C10  0100               	movlb	0	; () banked
 25339  004C12  6FD7               	movwf	_mode& (0+255),b
 25340                           
 25341                           ;main.c: 386: rwtimeout = readEEPROM( 0x09 );
 25342  004C14  6A1A               	clrf	?_readEEPROM+1,c
 25343  004C16  0E09               	movlw	9
 25344  004C18  6E19               	movwf	?_readEEPROM,c
 25345  004C1A  ECB2  F028         	call	_readEEPROM	;wreg free
 25346  004C1E  0100               	movlb	0	; () banked
 25347  004C20  6FD9               	movwf	_rwtimeout& (0+255),b
 25348                           
 25349                           ; BSR set to: 0
 25350  004C22  0012               	return	
 25351  004C24                     __end_of_init_app_ram:
 25352                           	opt stack 0
 25353                           tblptru	equ	0xFF8
 25354                           tblptrh	equ	0xFF7
 25355                           tblptrl	equ	0xFF6
 25356                           tablat	equ	0xFF5
 25357                           prodh	equ	0xFF4
 25358                           prodl	equ	0xFF3
 25359                           intcon	equ	0xFF2
 25360                           indf0	equ	0xFEF
 25361                           postinc0	equ	0xFEE
 25362                           fsr0h	equ	0xFEA
 25363                           fsr0l	equ	0xFE9
 25364                           wreg	equ	0xFE8
 25365                           indf1	equ	0xFE7
 25366                           postinc1	equ	0xFE6
 25367                           postdec1	equ	0xFE5
 25368                           fsr1h	equ	0xFE2
 25369                           fsr1l	equ	0xFE1
 25370                           indf2	equ	0xFDF
 25371                           postinc2	equ	0xFDE
 25372                           postdec2	equ	0xFDD
 25373                           plusw2	equ	0xFDB
 25374                           fsr2h	equ	0xFDA
 25375                           fsr2l	equ	0xFD9
 25376                           status	equ	0xFD8
 25377                           
 25378 ;; *************** function _readEEPROM *****************
 25379 ;; Defined at:
 25380 ;;		line 87 in file "eeprom.c"
 25381 ;; Parameters:    Size  Location     Type
 25382 ;;  address         2   24[COMRAM] unsigned short 
 25383 ;; Auto vars:     Size  Location     Type
 25384 ;;  data            1   26[COMRAM] unsigned char 
 25385 ;; Return value:  Size  Location     Type
 25386 ;;                  1    wreg      unsigned char 
 25387 ;; Registers used:
 25388 ;;		wreg, status,2
 25389 ;; Tracked objects:
 25390 ;;		On entry : 0/0
 25391 ;;		On exit  : 0/0
 25392 ;;		Unchanged: 0/0
 25393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25394 ;;      Params:         2       0       0       0       0       0       0
 25395 ;;      Locals:         1       0       0       0       0       0       0
 25396 ;;      Temps:          0       0       0       0       0       0       0
 25397 ;;      Totals:         3       0       0       0       0       0       0
 25398 ;;Total ram usage:        3 bytes
 25399 ;; Hardware stack levels used:    1
 25400 ;; Hardware stack levels required when called:    2
 25401 ;; This function calls:
 25402 ;;		Nothing
 25403 ;; This function is called by:
 25404 ;;		_main
 25405 ;;		_init_app_ram
 25406 ;; This function uses a non-reentrant model
 25407 ;;
 25408                           
 25409                           	psect	text79
 25410  005164                     __ptext79:
 25411                           	opt stack 0
 25412  005164                     _readEEPROM:
 25413                           	opt stack 26
 25414                           
 25415                           ;eeprom.c: 88: uint8_t data;
 25416                           ;eeprom.c: 93: EEADR = address & 0xff;
 25417                           
 25418                           ; BSR set to: 0
 25419                           ;incstack = 0
 25420                           ;incstack = 0
 25421  005164  C019  FFA9         	movff	readEEPROM@address,4009	;volatile
 25422                           
 25423                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 25424  005168  9EA6               	bcf	4006,7,c	;volatile
 25425                           
 25426                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 25427  00516A  9CA6               	bcf	4006,6,c	;volatile
 25428                           
 25429                           ;eeprom.c: 96: EECON1bits.RD = 1;
 25430  00516C  80A6               	bsf	4006,0,c	;volatile
 25431                           
 25432                           ;eeprom.c: 97: data = EEDATA;
 25433  00516E  CFA8 F01B          	movff	4008,readEEPROM@data	;volatile
 25434                           
 25435                           ;eeprom.c: 99: return data;
 25436  005172  501B               	movf	readEEPROM@data,w,c
 25437  005174  0012               	return	
 25438  005176                     __end_of_readEEPROM:
 25439                           	opt stack 0
 25440                           tblptru	equ	0xFF8
 25441                           tblptrh	equ	0xFF7
 25442                           tblptrl	equ	0xFF6
 25443                           tablat	equ	0xFF5
 25444                           prodh	equ	0xFF4
 25445                           prodl	equ	0xFF3
 25446                           intcon	equ	0xFF2
 25447                           indf0	equ	0xFEF
 25448                           postinc0	equ	0xFEE
 25449                           fsr0h	equ	0xFEA
 25450                           fsr0l	equ	0xFE9
 25451                           wreg	equ	0xFE8
 25452                           indf1	equ	0xFE7
 25453                           postinc1	equ	0xFE6
 25454                           postdec1	equ	0xFE5
 25455                           fsr1h	equ	0xFE2
 25456                           fsr1l	equ	0xFE1
 25457                           indf2	equ	0xFDF
 25458                           postinc2	equ	0xFDE
 25459                           postdec2	equ	0xFDD
 25460                           plusw2	equ	0xFDB
 25461                           fsr2h	equ	0xFDA
 25462                           fsr2l	equ	0xFD9
 25463                           status	equ	0xFD8
 25464                           
 25465 ;; *************** function _fifo_init *****************
 25466 ;; Defined at:
 25467 ;;		line 14 in file "fifo.c"
 25468 ;; Parameters:    Size  Location     Type
 25469 ;;  f               2   24[COMRAM] PTR struct .
 25470 ;;		 -> inputFifo(8), 
 25471 ;;  buf             2   26[COMRAM] PTR unsigned char 
 25472 ;;		 -> inputBuffer(500), 
 25473 ;;  size            2   28[COMRAM] unsigned short 
 25474 ;; Auto vars:     Size  Location     Type
 25475 ;;		None
 25476 ;; Return value:  Size  Location     Type
 25477 ;;		None               void
 25478 ;; Registers used:
 25479 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25480 ;; Tracked objects:
 25481 ;;		On entry : F/1
 25482 ;;		On exit  : F/1
 25483 ;;		Unchanged: F/0
 25484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25485 ;;      Params:         6       0       0       0       0       0       0
 25486 ;;      Locals:         0       0       0       0       0       0       0
 25487 ;;      Temps:          0       0       0       0       0       0       0
 25488 ;;      Totals:         6       0       0       0       0       0       0
 25489 ;;Total ram usage:        6 bytes
 25490 ;; Hardware stack levels used:    1
 25491 ;; Hardware stack levels required when called:    2
 25492 ;; This function calls:
 25493 ;;		Nothing
 25494 ;; This function is called by:
 25495 ;;		_main
 25496 ;; This function uses a non-reentrant model
 25497 ;;
 25498                           
 25499                           	psect	text80
 25500  004DC0                     __ptext80:
 25501                           	opt stack 0
 25502  004DC0                     _fifo_init:
 25503                           	opt stack 28
 25504                           
 25505                           ; BSR set to: 1
 25506                           ;fifo.c: 15: f->head = 0;
 25507                           
 25508                           ;incstack = 0
 25509                           ;incstack = 0
 25510  004DC0  EE20 F002          	lfsr	2,2
 25511  004DC4  D816               	call	PL92	;call to abstracted procedure
 25512                           
 25513                           ;fifo.c: 16: f->tail = 0;
 25514  004DC6  EE20 F004          	lfsr	2,4
 25515  004DCA  D813               	call	PL92	;call to abstracted procedure
 25516                           
 25517                           ;fifo.c: 17: f->size = size;
 25518  004DCC  EE20 F006          	lfsr	2,6
 25519  004DD0  5019               	movf	fifo_init@f,w,c
 25520  004DD2  26D9               	addwf	fsr2l,f,c
 25521  004DD4  501A               	movf	fifo_init@f+1,w,c
 25522  004DD6  22DA               	addwfc	fsr2h,f,c
 25523  004DD8  C01D  FFDE         	movff	fifo_init@size,postinc2
 25524  004DDC  C01E  FFDD         	movff	fifo_init@size+1,postdec2
 25525                           
 25526                           ; BSR set to: 1
 25527                           ;fifo.c: 18: f->buf = buf;
 25528  004DE0  C019  FFD9         	movff	fifo_init@f,fsr2l
 25529  004DE4  C01A  FFDA         	movff	fifo_init@f+1,fsr2h
 25530  004DE8  C01B  FFDE         	movff	fifo_init@buf,postinc2
 25531  004DEC  C01C  FFDD         	movff	fifo_init@buf+1,postdec2
 25532                           
 25533                           ; BSR set to: 1
 25534  004DF0  0012               	return	
 25535  004DF2                     __end_of_fifo_init:
 25536                           	opt stack 0
 25537  004DF2                     PL92:
 25538                           	opt stack 28
 25539  004DF2  5019               	movf	fifo_init@f,w,c
 25540  004DF4  26D9               	addwf	fsr2l,f,c
 25541  004DF6  501A               	movf	fifo_init@f+1,w,c
 25542  004DF8  22DA               	addwfc	fsr2h,f,c
 25543  004DFA  6ADE               	clrf	postinc2,c
 25544  004DFC  6ADD               	clrf	postdec2,c
 25545  004DFE  0012               	return	
 25546  004E00                     __end_ofPL92:
 25547                           	opt stack 0
 25548                           tblptru	equ	0xFF8
 25549                           tblptrh	equ	0xFF7
 25550                           tblptrl	equ	0xFF6
 25551                           tablat	equ	0xFF5
 25552                           prodh	equ	0xFF4
 25553                           prodl	equ	0xFF3
 25554                           intcon	equ	0xFF2
 25555                           indf0	equ	0xFEF
 25556                           postinc0	equ	0xFEE
 25557                           fsr0h	equ	0xFEA
 25558                           fsr0l	equ	0xFE9
 25559                           wreg	equ	0xFE8
 25560                           indf1	equ	0xFE7
 25561                           postinc1	equ	0xFE6
 25562                           postdec1	equ	0xFE5
 25563                           fsr1h	equ	0xFE2
 25564                           fsr1l	equ	0xFE1
 25565                           indf2	equ	0xFDF
 25566                           postinc2	equ	0xFDE
 25567                           postdec2	equ	0xFDD
 25568                           plusw2	equ	0xFDB
 25569                           fsr2h	equ	0xFDA
 25570                           fsr2l	equ	0xFD9
 25571                           status	equ	0xFD8
 25572                           
 25573 ;; *************** function _Interrupt *****************
 25574 ;; Defined at:
 25575 ;;		line 238 in file "main.c"
 25576 ;; Parameters:    Size  Location     Type
 25577 ;;		None
 25578 ;; Auto vars:     Size  Location     Type
 25579 ;;  c               1   23[COMRAM] unsigned char 
 25580 ;; Return value:  Size  Location     Type
 25581 ;;		None               void
 25582 ;; Registers used:
 25583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25584 ;; Tracked objects:
 25585 ;;		On entry : 0/0
 25586 ;;		On exit  : 0/0
 25587 ;;		Unchanged: 0/0
 25588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25589 ;;      Params:         0       0       0       0       0       0       0
 25590 ;;      Locals:         1       0       0       0       0       0       0
 25591 ;;      Temps:          7       0       0       0       0       0       0
 25592 ;;      Totals:         8       0       0       0       0       0       0
 25593 ;;Total ram usage:        8 bytes
 25594 ;; Hardware stack levels used:    1
 25595 ;; Hardware stack levels required when called:    1
 25596 ;; This function calls:
 25597 ;;		_ReadUSART
 25598 ;;		_fifo_write
 25599 ;;		i1_WriteTimer0
 25600 ;; This function is called by:
 25601 ;;		Interrupt level 1
 25602 ;; This function uses a non-reentrant model
 25603 ;;
 25604                           
 25605                           	psect	intcodelo
 25606  000018                     __pintcodelo:
 25607                           	opt stack 0
 25608  000018                     _Interrupt:
 25609                           	opt stack 21
 25610                           
 25611                           ; BSR set to: 1
 25612                           ;incstack = 0
 25613  000018  CFD8 F011          	movff	status,??_Interrupt
 25614  00001C  CFE8 F012          	movff	wreg,??_Interrupt+1
 25615  000020  CFE0 F013          	movff	bsr,??_Interrupt+2
 25616  000024  CFE1 F014          	movff	fsr1l,??_Interrupt+3
 25617  000028  CFE2 F015          	movff	fsr1h,??_Interrupt+4
 25618  00002C  CFD9 F016          	movff	fsr2l,??_Interrupt+5
 25619  000030  CFDA F017          	movff	fsr2h,??_Interrupt+6
 25620  000034                     
 25621                           ;main.c: 239: uint8_t c;
 25622                           ;main.c: 242: if (1 == PIR1bits.RCIF ) {
 25623  000034  AA9E               	btfss	3998,5,c	;volatile
 25624  000036  D001               	goto	i1u1094_21
 25625  000038  D001               	goto	i1u1094_20
 25626  00003A                     i1u1094_21:
 25627  00003A  D024               	goto	i1l395
 25628  00003C                     i1u1094_20:
 25629  00003C                     
 25630                           ;main.c: 244: c = ReadUSART();
 25631  00003C  EC79  F028         	call	_ReadUSART	;wreg free
 25632  000040  6E18               	movwf	Interrupt@c,c
 25633  000042                     
 25634                           ;main.c: 245: if (1 != fifo_write(&inputFifo, &c, 1)) {
 25635  000042  0101               	movlb	1	; () banked
 25636  000044  0E01               	movlw	high _inputFifo
 25637  000046  6E02               	movwf	?_fifo_write+1,c
 25638  000048  0EC0               	movlw	low _inputFifo
 25639  00004A  6E01               	movwf	?_fifo_write,c
 25640  00004C  0E18               	movlw	low Interrupt@c
 25641  00004E  6E03               	movwf	?_fifo_write+2,c
 25642  000050  0E01               	movlw	1
 25643  000052  6E04               	movwf	?_fifo_write+3,c
 25644  000054  0E00               	movlw	0
 25645  000056  6E05               	movwf	?_fifo_write+4,c
 25646  000058  0E00               	movlw	0
 25647  00005A  6E06               	movwf	?_fifo_write+5,c
 25648  00005C  0E00               	movlw	0
 25649  00005E  6E07               	movwf	?_fifo_write+6,c
 25650  000060  EC1F  F019         	call	_fifo_write	;wreg free
 25651  000064  0401               	decf	?_fifo_write,w,c
 25652  000066  1002               	iorwf	?_fifo_write+1,w,c
 25653  000068  B4D8               	btfsc	status,2,c
 25654  00006A  D001               	goto	i1u1095_21
 25655  00006C  D001               	goto	i1u1095_20
 25656  00006E                     i1u1095_21:
 25657  00006E  D008               	goto	i1l9193
 25658  000070                     i1u1095_20:
 25659  000070                     
 25660                           ; BSR set to: 1
 25661                           ;main.c: 247: uart_receiveOverruns++;
 25662  000070  0E01               	movlw	1
 25663  000072  2718               	addwf	_uart_receiveOverruns& (0+255),f,b
 25664  000074  0E00               	movlw	0
 25665  000076  2319               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 25666  000078  0E00               	movlw	0
 25667  00007A  231A               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 25668  00007C  0E00               	movlw	0
 25669  00007E  231B               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 25670  000080                     i1l9193:
 25671                           
 25672                           ; BSR set to: 1
 25673                           ;main.c: 248: }
 25674                           ;main.c: 251: PIR1bits.RCIF = 0;
 25675  000080  9A9E               	bcf	3998,5,c	;volatile
 25676                           
 25677                           ;main.c: 252: }
 25678  000082  D07D               	goto	i1l412
 25679  000084                     i1l395:
 25680                           
 25681                           ;main.c: 253: else if (1 == INTCONbits.TMR0IF) {
 25682  000084  A4F2               	btfss	intcon,2,c	;volatile
 25683  000086  D001               	goto	i1u1096_21
 25684  000088  D001               	goto	i1u1096_20
 25685  00008A                     i1u1096_21:
 25686  00008A  D079               	goto	i1l412
 25687  00008C                     i1u1096_20:
 25688  00008C                     
 25689                           ;main.c: 255: timer++;
 25690  00008C  0E01               	movlw	1
 25691  00008E  0100               	movlb	0	; () banked
 25692  000090  27CF               	addwf	_timer& (0+255),f,b	;volatile
 25693  000092  0E00               	movlw	0
 25694  000094  23D0               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 25695  000096  0E00               	movlw	0
 25696  000098  23D1               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 25697  00009A  0E00               	movlw	0
 25698  00009C  23D2               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 25699                           
 25700                           ;main.c: 256: timekeeper++;
 25701  00009E  0E01               	movlw	1
 25702  0000A0  27CB               	addwf	_timekeeper& (0+255),f,b	;volatile
 25703  0000A2  0E00               	movlw	0
 25704  0000A4  23CC               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 25705  0000A6  0E00               	movlw	0
 25706  0000A8  23CD               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 25707  0000AA  0E00               	movlw	0
 25708  0000AC  23CE               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 25709  0000AE                     
 25710                           ; BSR set to: 0
 25711                           ;main.c: 258: WriteTimer0(0xfb1d);
 25712  0000AE  0EFB               	movlw	251
 25713  0000B0  6E02               	movwf	?i1_WriteTimer0+1,c
 25714  0000B2  0E1D               	movlw	29
 25715  0000B4  6E01               	movwf	?i1_WriteTimer0,c
 25716  0000B6  ECBB  F028         	call	i1_WriteTimer0	;wreg free
 25717  0000BA                     
 25718                           ; BSR set to: 0
 25719                           ;main.c: 261: status_led_cnt++;
 25720  0000BA  4A35               	infsnz	_status_led_cnt,f,c	;volatile
 25721  0000BC  2A36               	incf	_status_led_cnt+1,f,c	;volatile
 25722  0000BE                     
 25723                           ; BSR set to: 0
 25724                           ;main.c: 262: if ((2 == ledFunctionality) &&
 25725                           ;main.c: 263: (status_led_cnt > 1000)) {
 25726  0000BE  503C               	movf	_ledFunctionality,w,c
 25727  0000C0  0A02               	xorlw	2
 25728  0000C2  A4D8               	btfss	status,2,c
 25729  0000C4  D001               	goto	i1u1097_21
 25730  0000C6  D001               	goto	i1u1097_20
 25731  0000C8                     i1u1097_21:
 25732  0000C8  D00C               	goto	i1l9207
 25733  0000CA                     i1u1097_20:
 25734  0000CA                     
 25735                           ; BSR set to: 0
 25736  0000CA  0EE9               	movlw	233
 25737  0000CC  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25738  0000CE  0E03               	movlw	3
 25739  0000D0  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25740  0000D2  A0D8               	btfss	status,0,c
 25741  0000D4  D001               	goto	i1u1098_21
 25742  0000D6  D001               	goto	i1u1098_20
 25743  0000D8                     i1u1098_21:
 25744  0000D8  D004               	goto	i1l9207
 25745  0000DA                     i1u1098_20:
 25746  0000DA                     i1l9205:
 25747                           
 25748                           ; BSR set to: 0
 25749                           ;main.c: 264: LATC1 = ~LATC1;
 25750  0000DA  728B               	btg	3979,1,c	;volatile
 25751                           
 25752                           ;main.c: 265: status_led_cnt = 0;
 25753  0000DC  6A35               	clrf	_status_led_cnt,c	;volatile
 25754  0000DE  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25755                           
 25756                           ;main.c: 266: }
 25757  0000E0  D04D               	goto	i1l400
 25758  0000E2                     i1l9207:
 25759                           
 25760                           ; BSR set to: 0
 25761                           ;main.c: 267: else if ((3 == ledFunctionality) &&
 25762                           ;main.c: 268: (status_led_cnt > 400)) {
 25763  0000E2  503C               	movf	_ledFunctionality,w,c
 25764  0000E4  0A03               	xorlw	3
 25765  0000E6  A4D8               	btfss	status,2,c
 25766  0000E8  D001               	goto	i1u1099_21
 25767  0000EA  D001               	goto	i1u1099_20
 25768  0000EC                     i1u1099_21:
 25769  0000EC  D009               	goto	i1l9213
 25770  0000EE                     i1u1099_20:
 25771  0000EE                     
 25772                           ; BSR set to: 0
 25773  0000EE  0E91               	movlw	145
 25774  0000F0  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25775  0000F2  0E01               	movlw	1
 25776  0000F4  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25777  0000F6  A0D8               	btfss	status,0,c
 25778  0000F8  D001               	goto	i1u1100_21
 25779  0000FA  D001               	goto	i1u1100_20
 25780  0000FC                     i1u1100_21:
 25781  0000FC  D001               	goto	i1l9213
 25782  0000FE                     i1u1100_20:
 25783  0000FE  D7ED               	goto	i1l9205
 25784  000100                     i1l9213:
 25785                           
 25786                           ; BSR set to: 0
 25787                           ;main.c: 272: else if ((4 == ledFunctionality) &&
 25788                           ;main.c: 273: (status_led_cnt > 100)) {
 25789  000100  503C               	movf	_ledFunctionality,w,c
 25790  000102  0A04               	xorlw	4
 25791  000104  A4D8               	btfss	status,2,c
 25792  000106  D001               	goto	i1u1101_21
 25793  000108  D001               	goto	i1u1101_20
 25794  00010A                     i1u1101_21:
 25795  00010A  D009               	goto	i1l9219
 25796  00010C                     i1u1101_20:
 25797  00010C                     
 25798                           ; BSR set to: 0
 25799  00010C  0E65               	movlw	101
 25800  00010E  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25801  000110  0E00               	movlw	0
 25802  000112  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25803  000114  A0D8               	btfss	status,0,c
 25804  000116  D001               	goto	i1u1102_21
 25805  000118  D001               	goto	i1u1102_20
 25806  00011A                     i1u1102_21:
 25807  00011A  D001               	goto	i1l9219
 25808  00011C                     i1u1102_20:
 25809  00011C  D7DE               	goto	i1l9205
 25810  00011E                     i1l9219:
 25811                           
 25812                           ; BSR set to: 0
 25813                           ;main.c: 277: else if ((5 == ledFunctionality) &&
 25814                           ;main.c: 278: (status_led_cnt > 70)) {
 25815  00011E  503C               	movf	_ledFunctionality,w,c
 25816  000120  0A05               	xorlw	5
 25817  000122  A4D8               	btfss	status,2,c
 25818  000124  D001               	goto	i1u1103_21
 25819  000126  D001               	goto	i1u1103_20
 25820  000128                     i1u1103_21:
 25821  000128  D009               	goto	i1l9225
 25822  00012A                     i1u1103_20:
 25823  00012A                     
 25824                           ; BSR set to: 0
 25825  00012A  0E47               	movlw	71
 25826  00012C  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25827  00012E  0E00               	movlw	0
 25828  000130  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25829  000132  A0D8               	btfss	status,0,c
 25830  000134  D001               	goto	i1u1104_21
 25831  000136  D001               	goto	i1u1104_20
 25832  000138                     i1u1104_21:
 25833  000138  D001               	goto	i1l9225
 25834  00013A                     i1u1104_20:
 25835  00013A  D7CF               	goto	i1l9205
 25836  00013C                     i1l9225:
 25837                           
 25838                           ; BSR set to: 0
 25839                           ;main.c: 282: else if ((6 == ledFunctionality) &&
 25840                           ;main.c: 283: (status_led_cnt > 40)) {
 25841  00013C  503C               	movf	_ledFunctionality,w,c
 25842  00013E  0A06               	xorlw	6
 25843  000140  A4D8               	btfss	status,2,c
 25844  000142  D001               	goto	i1u1105_21
 25845  000144  D001               	goto	i1u1105_20
 25846  000146                     i1u1105_21:
 25847  000146  D009               	goto	i1l9231
 25848  000148                     i1u1105_20:
 25849  000148                     
 25850                           ; BSR set to: 0
 25851  000148  0E29               	movlw	41
 25852  00014A  5C35               	subwf	_status_led_cnt,w,c	;volatile
 25853  00014C  0E00               	movlw	0
 25854  00014E  5836               	subwfb	_status_led_cnt+1,w,c	;volatile
 25855  000150  A0D8               	btfss	status,0,c
 25856  000152  D001               	goto	i1u1106_21
 25857  000154  D001               	goto	i1u1106_20
 25858  000156                     i1u1106_21:
 25859  000156  D001               	goto	i1l9231
 25860  000158                     i1u1106_20:
 25861  000158  D7C0               	goto	i1l9205
 25862  00015A                     i1l9231:
 25863                           
 25864                           ; BSR set to: 0
 25865                           ;main.c: 287: else if (1 == ledFunctionality) {
 25866  00015A  043C               	decf	_ledFunctionality,w,c
 25867  00015C  A4D8               	btfss	status,2,c
 25868  00015E  D001               	goto	i1u1107_21
 25869  000160  D001               	goto	i1u1107_20
 25870  000162                     i1u1107_21:
 25871  000162  D004               	goto	i1l409
 25872  000164                     i1u1107_20:
 25873  000164                     
 25874                           ; BSR set to: 0
 25875                           ;main.c: 288: LATC1 = 1;
 25876  000164  828B               	bsf	3979,1,c	;volatile
 25877                           
 25878                           ;main.c: 289: status_led_cnt = 0;
 25879  000166  6A35               	clrf	_status_led_cnt,c	;volatile
 25880  000168  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25881                           
 25882                           ;main.c: 290: }
 25883  00016A  D008               	goto	i1l400
 25884  00016C                     i1l409:
 25885                           
 25886                           ; BSR set to: 0
 25887                           ;main.c: 291: else if (0 == ledFunctionality) {
 25888  00016C  663C               	tstfsz	_ledFunctionality,c
 25889  00016E  D001               	goto	i1u1108_21
 25890  000170  D001               	goto	i1u1108_20
 25891  000172                     i1u1108_21:
 25892  000172  D004               	goto	i1l406
 25893  000174                     i1u1108_20:
 25894  000174                     
 25895                           ; BSR set to: 0
 25896                           ;main.c: 292: LATC1 = 0;
 25897  000174  928B               	bcf	3979,1,c	;volatile
 25898                           
 25899                           ;main.c: 293: status_led_cnt = 0;
 25900  000176  6A35               	clrf	_status_led_cnt,c	;volatile
 25901  000178  6A36               	clrf	_status_led_cnt+1,c	;volatile
 25902  00017A  D000               	goto	i1l400
 25903  00017C                     i1l406:
 25904  00017C                     i1l400:
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;main.c: 294: }
 25908                           ;main.c: 296: INTCONbits.TMR0IF = 0;
 25909  00017C  94F2               	bcf	intcon,2,c	;volatile
 25910  00017E                     i1l412:
 25911  00017E  C017  FFDA         	movff	??_Interrupt+6,fsr2h
 25912  000182  C016  FFD9         	movff	??_Interrupt+5,fsr2l
 25913  000186  C015  FFE2         	movff	??_Interrupt+4,fsr1h
 25914  00018A  C014  FFE1         	movff	??_Interrupt+3,fsr1l
 25915  00018E  C013  FFE0         	movff	??_Interrupt+2,bsr
 25916  000192  C012  FFE8         	movff	??_Interrupt+1,wreg
 25917  000196  C011  FFD8         	movff	??_Interrupt,status
 25918  00019A  0010               	retfie	
 25919  00019C                     __end_of_Interrupt:
 25920                           	opt stack 0
 25921                           tblptru	equ	0xFF8
 25922                           tblptrh	equ	0xFF7
 25923                           tblptrl	equ	0xFF6
 25924                           tablat	equ	0xFF5
 25925                           prodh	equ	0xFF4
 25926                           prodl	equ	0xFF3
 25927                           intcon	equ	0xFF2
 25928                           indf0	equ	0xFEF
 25929                           postinc0	equ	0xFEE
 25930                           fsr0h	equ	0xFEA
 25931                           fsr0l	equ	0xFE9
 25932                           wreg	equ	0xFE8
 25933                           indf1	equ	0xFE7
 25934                           postinc1	equ	0xFE6
 25935                           postdec1	equ	0xFE5
 25936                           fsr1h	equ	0xFE2
 25937                           fsr1l	equ	0xFE1
 25938                           bsr	equ	0xFE0
 25939                           indf2	equ	0xFDF
 25940                           postinc2	equ	0xFDE
 25941                           postdec2	equ	0xFDD
 25942                           plusw2	equ	0xFDB
 25943                           fsr2h	equ	0xFDA
 25944                           fsr2l	equ	0xFD9
 25945                           status	equ	0xFD8
 25946                           
 25947 ;; *************** function i1_WriteTimer0 *****************
 25948 ;; Defined at:
 25949 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25950 ;; Parameters:    Size  Location     Type
 25951 ;;  timer0          2    0[COMRAM] unsigned int 
 25952 ;; Auto vars:     Size  Location     Type
 25953 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 25954 ;; Return value:  Size  Location     Type
 25955 ;;		None               void
 25956 ;; Registers used:
 25957 ;;		None
 25958 ;; Tracked objects:
 25959 ;;		On entry : F/0
 25960 ;;		On exit  : F/0
 25961 ;;		Unchanged: F/0
 25962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25963 ;;      Params:         2       0       0       0       0       0       0
 25964 ;;      Locals:         2       0       0       0       0       0       0
 25965 ;;      Temps:          0       0       0       0       0       0       0
 25966 ;;      Totals:         4       0       0       0       0       0       0
 25967 ;;Total ram usage:        4 bytes
 25968 ;; Hardware stack levels used:    1
 25969 ;; This function calls:
 25970 ;;		Nothing
 25971 ;; This function is called by:
 25972 ;;		_Interrupt
 25973 ;; This function uses a non-reentrant model
 25974 ;;
 25975                           
 25976                           	psect	text82
 25977  005176                     __ptext82:
 25978                           	opt stack 0
 25979  005176                     i1_WriteTimer0:
 25980                           	opt stack 21
 25981                           
 25982                           ; BSR set to: 0
 25983                           
 25984                           ;incstack = 0
 25985                           ;incstack = 0
 25986  005176  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 25987  00517A  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 25988  00517E  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 25989  005182  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 25990                           
 25991                           ; BSR set to: 0
 25992  005186  0012               	return	
 25993  005188                     __end_ofi1_WriteTimer0:
 25994                           	opt stack 0
 25995                           tblptru	equ	0xFF8
 25996                           tblptrh	equ	0xFF7
 25997                           tblptrl	equ	0xFF6
 25998                           tablat	equ	0xFF5
 25999                           prodh	equ	0xFF4
 26000                           prodl	equ	0xFF3
 26001                           intcon	equ	0xFF2
 26002                           indf0	equ	0xFEF
 26003                           postinc0	equ	0xFEE
 26004                           fsr0h	equ	0xFEA
 26005                           fsr0l	equ	0xFE9
 26006                           wreg	equ	0xFE8
 26007                           indf1	equ	0xFE7
 26008                           postinc1	equ	0xFE6
 26009                           postdec1	equ	0xFE5
 26010                           fsr1h	equ	0xFE2
 26011                           fsr1l	equ	0xFE1
 26012                           bsr	equ	0xFE0
 26013                           indf2	equ	0xFDF
 26014                           postinc2	equ	0xFDE
 26015                           postdec2	equ	0xFDD
 26016                           plusw2	equ	0xFDB
 26017                           fsr2h	equ	0xFDA
 26018                           fsr2l	equ	0xFD9
 26019                           status	equ	0xFD8
 26020                           
 26021 ;; *************** function _fifo_write *****************
 26022 ;; Defined at:
 26023 ;;		line 61 in file "fifo.c"
 26024 ;; Parameters:    Size  Location     Type
 26025 ;;  f               2    0[COMRAM] PTR struct .
 26026 ;;		 -> inputFifo(8), 
 26027 ;;  buf             1    2[COMRAM] PTR const void 
 26028 ;;		 -> Interrupt@c(1), 
 26029 ;;  nbytes          4    3[COMRAM] unsigned long 
 26030 ;; Auto vars:     Size  Location     Type
 26031 ;;  i               4   12[COMRAM] unsigned long 
 26032 ;;  p               1   11[COMRAM] PTR const unsigned char 
 26033 ;;		 -> Interrupt@c(1), 
 26034 ;; Return value:  Size  Location     Type
 26035 ;;                  2    0[COMRAM] unsigned short 
 26036 ;; Registers used:
 26037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26038 ;; Tracked objects:
 26039 ;;		On entry : F/1
 26040 ;;		On exit  : F/1
 26041 ;;		Unchanged: F/0
 26042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26043 ;;      Params:         7       0       0       0       0       0       0
 26044 ;;      Locals:         5       0       0       0       0       0       0
 26045 ;;      Temps:          4       0       0       0       0       0       0
 26046 ;;      Totals:        16       0       0       0       0       0       0
 26047 ;;Total ram usage:       16 bytes
 26048 ;; Hardware stack levels used:    1
 26049 ;; This function calls:
 26050 ;;		Nothing
 26051 ;; This function is called by:
 26052 ;;		_Interrupt
 26053 ;; This function uses a non-reentrant model
 26054 ;;
 26055                           
 26056                           	psect	text83
 26057  00323E                     __ptext83:
 26058                           	opt stack 0
 26059  00323E                     _fifo_write:
 26060                           	opt stack 21
 26061                           
 26062                           ; BSR set to: 1
 26063                           ;fifo.c: 62: uint32_t i;
 26064                           ;fifo.c: 63: const uint8_t *p;
 26065                           ;fifo.c: 64: p = buf;
 26066                           
 26067                           ; BSR set to: 0
 26068                           ;incstack = 0
 26069                           ;incstack = 0
 26070  00323E  C003  F00C         	movff	fifo_write@buf,fifo_write@p
 26071                           
 26072                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 26073  003242  6A0D               	clrf	fifo_write@i,c
 26074  003244  6A0E               	clrf	fifo_write@i+1,c
 26075  003246  6A0F               	clrf	fifo_write@i+2,c
 26076  003248  6A10               	clrf	fifo_write@i+3,c
 26077  00324A  D067               	goto	i1l7087
 26078  00324C                     i1l7067:
 26079                           
 26080                           ; BSR set to: 1
 26081                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 26082                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 26083  00324C  EE20 F004          	lfsr	2,4
 26084  003250  5001               	movf	fifo_write@f,w,c
 26085  003252  D871               	call	PL14	;call to abstracted procedure
 26086  003254  E102               	bnz	i1u748_25
 26087  003256  5008               	movf	??_fifo_write,w,c
 26088  003258  180A               	xorwf	??_fifo_write+2,w,c
 26089  00325A                     i1u748_25:
 26090  00325A  E011               	bz	i1l1425
 26091                           
 26092                           ; BSR set to: 1
 26093  00325C  EE20 F006          	lfsr	2,6
 26094  003260  5001               	movf	fifo_write@f,w,c
 26095  003262  D869               	call	PL14	;call to abstracted procedure
 26096  003264  E102               	bnz	i1u749_25
 26097  003266  5008               	movf	??_fifo_write,w,c
 26098  003268  180A               	xorwf	??_fifo_write+2,w,c
 26099  00326A                     i1u749_25:
 26100  00326A  E10E               	bnz	i1l7075
 26101                           
 26102                           ; BSR set to: 1
 26103  00326C  EE20 F004          	lfsr	2,4
 26104  003270  5001               	movf	fifo_write@f,w,c
 26105  003272  26D9               	addwf	fsr2l,f,c
 26106  003274  5002               	movf	fifo_write@f+1,w,c
 26107  003276  22DA               	addwfc	fsr2h,f,c
 26108  003278  50DE               	movf	postinc2,w,c
 26109  00327A  10DD               	iorwf	postdec2,w,c
 26110  00327C  E105               	bnz	i1l7075
 26111  00327E                     i1l1425:
 26112                           
 26113                           ; BSR set to: 1
 26114                           ;fifo.c: 71: return i;
 26115  00327E  C00D  F001         	movff	fifo_write@i,?_fifo_write
 26116  003282  C00E  F002         	movff	fifo_write@i+1,?_fifo_write+1
 26117  003286  D056               	goto	i1l1426
 26118  003288                     i1l7075:
 26119                           
 26120                           ; BSR set to: 1
 26121                           ;fifo.c: 73: else {
 26122                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 26123  003288  500C               	movf	fifo_write@p,w,c
 26124  00328A  6ED9               	movwf	fsr2l,c
 26125  00328C  6ADA               	clrf	fsr2h,c
 26126  00328E  EE10 F002          	lfsr	1,2
 26127  003292  5001               	movf	fifo_write@f,w,c
 26128  003294  26E1               	addwf	fsr1l,f,c
 26129  003296  5002               	movf	fifo_write@f+1,w,c
 26130  003298  22E2               	addwfc	fsr1h,f,c
 26131  00329A  CFE6 F008          	movff	postinc1,??_fifo_write
 26132  00329E  CFE5 F009          	movff	postdec1,??_fifo_write+1
 26133  0032A2  C001  FFE1         	movff	fifo_write@f,fsr1l
 26134  0032A6  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 26135  0032AA  CFE6 F00A          	movff	postinc1,??_fifo_write+2
 26136  0032AE  CFE5 F00B          	movff	postdec1,??_fifo_write+3
 26137  0032B2  5008               	movf	??_fifo_write,w,c
 26138  0032B4  240A               	addwf	??_fifo_write+2,w,c
 26139  0032B6  6EE1               	movwf	fsr1l,c
 26140  0032B8  5009               	movf	??_fifo_write+1,w,c
 26141  0032BA  200B               	addwfc	??_fifo_write+3,w,c
 26142  0032BC  6EE2               	movwf	fsr1h,c
 26143  0032BE  CFDF FFE7          	movff	indf2,indf1
 26144                           
 26145                           ; BSR set to: 1
 26146  0032C2  2A0C               	incf	fifo_write@p,f,c
 26147                           
 26148                           ; BSR set to: 1
 26149                           ;fifo.c: 75: f->head++;
 26150  0032C4  EE20 F002          	lfsr	2,2
 26151  0032C8  5001               	movf	fifo_write@f,w,c
 26152  0032CA  26D9               	addwf	fsr2l,f,c
 26153  0032CC  5002               	movf	fifo_write@f+1,w,c
 26154  0032CE  22DA               	addwfc	fsr2h,f,c
 26155  0032D0  2ADE               	incf	postinc2,f,c
 26156  0032D2  0E00               	movlw	0
 26157  0032D4  22DD               	addwfc	postdec2,f,c
 26158                           
 26159                           ; BSR set to: 1
 26160                           ;fifo.c: 76: if (f->head == f->size) {
 26161  0032D6  EE20 F006          	lfsr	2,6
 26162  0032DA  5001               	movf	fifo_write@f,w,c
 26163  0032DC  26D9               	addwf	fsr2l,f,c
 26164  0032DE  5002               	movf	fifo_write@f+1,w,c
 26165  0032E0  22DA               	addwfc	fsr2h,f,c
 26166  0032E2  EE10 F002          	lfsr	1,2
 26167  0032E6  5001               	movf	fifo_write@f,w,c
 26168  0032E8  26E1               	addwf	fsr1l,f,c
 26169  0032EA  5002               	movf	fifo_write@f+1,w,c
 26170  0032EC  22E2               	addwfc	fsr1h,f,c
 26171  0032EE  52E6               	movf	postinc1,f,c
 26172  0032F0  52DE               	movf	postinc2,f,c
 26173  0032F2  50DD               	movf	postdec2,w,c
 26174  0032F4  18E5               	xorwf	postdec1,w,c
 26175  0032F6  CFDF FFE8          	movff	indf2,wreg
 26176  0032FA  B4D8               	btfsc	status,2,c
 26177  0032FC  18E7               	xorwf	indf1,w,c
 26178  0032FE  E108               	bnz	i1l7085
 26179                           
 26180                           ; BSR set to: 1
 26181                           ;fifo.c: 77: f->head = 0;
 26182  003300  EE20 F002          	lfsr	2,2
 26183  003304  5001               	movf	fifo_write@f,w,c
 26184  003306  26D9               	addwf	fsr2l,f,c
 26185  003308  5002               	movf	fifo_write@f+1,w,c
 26186  00330A  22DA               	addwfc	fsr2h,f,c
 26187  00330C  6ADE               	clrf	postinc2,c
 26188  00330E  6ADD               	clrf	postdec2,c
 26189  003310                     i1l7085:
 26190                           
 26191                           ; BSR set to: 1
 26192  003310  2A0D               	incf	fifo_write@i,f,c
 26193  003312  0E00               	movlw	0
 26194  003314  220E               	addwfc	fifo_write@i+1,f,c
 26195  003316  220F               	addwfc	fifo_write@i+2,f,c
 26196  003318  2210               	addwfc	fifo_write@i+3,f,c
 26197  00331A                     i1l7087:
 26198                           
 26199                           ; BSR set to: 1
 26200  00331A  5004               	movf	fifo_write@nbytes,w,c
 26201  00331C  5C0D               	subwf	fifo_write@i,w,c
 26202  00331E  5005               	movf	fifo_write@nbytes+1,w,c
 26203  003320  580E               	subwfb	fifo_write@i+1,w,c
 26204  003322  5006               	movf	fifo_write@nbytes+2,w,c
 26205  003324  580F               	subwfb	fifo_write@i+2,w,c
 26206  003326  5007               	movf	fifo_write@nbytes+3,w,c
 26207  003328  5810               	subwfb	fifo_write@i+3,w,c
 26208  00332A  E390               	bnc	i1l7067
 26209                           
 26210                           ; BSR set to: 1
 26211                           ;fifo.c: 78: }
 26212                           ;fifo.c: 79: }
 26213                           ;fifo.c: 81: }
 26214                           ;fifo.c: 83: return nbytes;
 26215  00332C  C004  F001         	movff	fifo_write@nbytes,?_fifo_write
 26216  003330  C005  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 26217  003334                     i1l1426:
 26218                           
 26219                           ; BSR set to: 1
 26220  003334  0012               	return	
 26221  003336                     __end_of_fifo_write:
 26222                           	opt stack 0
 26223  003336                     PL14:
 26224                           	opt stack 21
 26225  003336  26D9               	addwf	fsr2l,f,c
 26226  003338  5002               	movf	fifo_write@f+1,w,c
 26227  00333A  22DA               	addwfc	fsr2h,f,c
 26228  00333C  CFDE F008          	movff	postinc2,??_fifo_write
 26229  003340  CFDD F009          	movff	postdec2,??_fifo_write+1
 26230  003344  EE20 F002          	lfsr	2,2
 26231  003348  5001               	movf	fifo_write@f,w,c
 26232  00334A  26D9               	addwf	fsr2l,f,c
 26233  00334C  5002               	movf	fifo_write@f+1,w,c
 26234  00334E  22DA               	addwfc	fsr2h,f,c
 26235  003350  CFDE F00A          	movff	postinc2,??_fifo_write+2
 26236  003354  CFDD F00B          	movff	postdec2,??_fifo_write+3
 26237  003358  2A0A               	incf	??_fifo_write+2,f,c
 26238  00335A  0E00               	movlw	0
 26239  00335C  220B               	addwfc	??_fifo_write+3,f,c
 26240  00335E  5009               	movf	??_fifo_write+1,w,c
 26241  003360  180B               	xorwf	??_fifo_write+3,w,c
 26242  003362  0012               	return	
 26243  003364                     __end_ofPL14:
 26244                           	opt stack 0
 26245                           tblptru	equ	0xFF8
 26246                           tblptrh	equ	0xFF7
 26247                           tblptrl	equ	0xFF6
 26248                           tablat	equ	0xFF5
 26249                           prodh	equ	0xFF4
 26250                           prodl	equ	0xFF3
 26251                           intcon	equ	0xFF2
 26252                           indf0	equ	0xFEF
 26253                           postinc0	equ	0xFEE
 26254                           fsr0h	equ	0xFEA
 26255                           fsr0l	equ	0xFE9
 26256                           wreg	equ	0xFE8
 26257                           indf1	equ	0xFE7
 26258                           postinc1	equ	0xFE6
 26259                           postdec1	equ	0xFE5
 26260                           fsr1h	equ	0xFE2
 26261                           fsr1l	equ	0xFE1
 26262                           bsr	equ	0xFE0
 26263                           indf2	equ	0xFDF
 26264                           postinc2	equ	0xFDE
 26265                           postdec2	equ	0xFDD
 26266                           plusw2	equ	0xFDB
 26267                           fsr2h	equ	0xFDA
 26268                           fsr2l	equ	0xFD9
 26269                           status	equ	0xFD8
 26270                           
 26271 ;; *************** function _ReadUSART *****************
 26272 ;; Defined at:
 26273 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 26274 ;; Parameters:    Size  Location     Type
 26275 ;;		None
 26276 ;; Auto vars:     Size  Location     Type
 26277 ;;  data            1    0[COMRAM] unsigned char 
 26278 ;; Return value:  Size  Location     Type
 26279 ;;                  1    wreg      unsigned char 
 26280 ;; Registers used:
 26281 ;;		wreg, status,2, status,0
 26282 ;; Tracked objects:
 26283 ;;		On entry : 0/0
 26284 ;;		On exit  : 0/0
 26285 ;;		Unchanged: 0/0
 26286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26287 ;;      Params:         0       0       0       0       0       0       0
 26288 ;;      Locals:         1       0       0       0       0       0       0
 26289 ;;      Temps:          0       0       0       0       0       0       0
 26290 ;;      Totals:         1       0       0       0       0       0       0
 26291 ;;Total ram usage:        1 bytes
 26292 ;; Hardware stack levels used:    1
 26293 ;; This function calls:
 26294 ;;		Nothing
 26295 ;; This function is called by:
 26296 ;;		_Interrupt
 26297 ;; This function uses a non-reentrant model
 26298 ;;
 26299                           
 26300                           	psect	text84
 26301  0050F2                     __ptext84:
 26302                           	opt stack 0
 26303  0050F2                     _ReadUSART:
 26304                           	opt stack 21
 26305                           
 26306                           ; BSR set to: 1
 26307                           ;incstack = 0
 26308                           ;incstack = 0
 26309  0050F2  0EF2               	movlw	242
 26310  0050F4  1639               	andwf	_USART_Status,f,c
 26311  0050F6  ACAB               	btfss	4011,6,c	;volatile
 26312  0050F8  D003               	goto	i1l1732
 26313  0050FA  9039               	bcf	_USART_Status,0,c
 26314  0050FC  B0AB               	btfsc	4011,0,c	;volatile
 26315  0050FE  8039               	bsf	_USART_Status,0,c
 26316  005100                     i1l1732:
 26317  005100  B4AB               	btfsc	4011,2,c	;volatile
 26318  005102  8439               	bsf	_USART_Status,2,c
 26319  005104  B2AB               	btfsc	4011,1,c	;volatile
 26320  005106  8639               	bsf	_USART_Status,3,c
 26321  005108  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 26322  00510C  5001               	movf	ReadUSART@data,w,c
 26323  00510E  0012               	return	
 26324  005110                     __end_of_ReadUSART:
 26325                           	opt stack 0
 26326                           tblptru	equ	0xFF8
 26327                           tblptrh	equ	0xFF7
 26328                           tblptrl	equ	0xFF6
 26329                           tablat	equ	0xFF5
 26330                           prodh	equ	0xFF4
 26331                           prodl	equ	0xFF3
 26332                           intcon	equ	0xFF2
 26333                           indf0	equ	0xFEF
 26334                           postinc0	equ	0xFEE
 26335                           fsr0h	equ	0xFEA
 26336                           fsr0l	equ	0xFE9
 26337                           wreg	equ	0xFE8
 26338                           indf1	equ	0xFE7
 26339                           postinc1	equ	0xFE6
 26340                           postdec1	equ	0xFE5
 26341                           fsr1h	equ	0xFE2
 26342                           fsr1l	equ	0xFE1
 26343                           bsr	equ	0xFE0
 26344                           indf2	equ	0xFDF
 26345                           postinc2	equ	0xFDE
 26346                           postdec2	equ	0xFDD
 26347                           plusw2	equ	0xFDB
 26348                           fsr2h	equ	0xFDA
 26349                           fsr2l	equ	0xFD9
 26350                           status	equ	0xFD8
 26351                           tblptru	equ	0xFF8
 26352                           tblptrh	equ	0xFF7
 26353                           tblptrl	equ	0xFF6
 26354                           tablat	equ	0xFF5
 26355                           prodh	equ	0xFF4
 26356                           prodl	equ	0xFF3
 26357                           intcon	equ	0xFF2
 26358                           indf0	equ	0xFEF
 26359                           postinc0	equ	0xFEE
 26360                           fsr0h	equ	0xFEA
 26361                           fsr0l	equ	0xFE9
 26362                           wreg	equ	0xFE8
 26363                           indf1	equ	0xFE7
 26364                           postinc1	equ	0xFE6
 26365                           postdec1	equ	0xFE5
 26366                           fsr1h	equ	0xFE2
 26367                           fsr1l	equ	0xFE1
 26368                           bsr	equ	0xFE0
 26369                           indf2	equ	0xFDF
 26370                           postinc2	equ	0xFDE
 26371                           postdec2	equ	0xFDD
 26372                           plusw2	equ	0xFDB
 26373                           fsr2h	equ	0xFDA
 26374                           fsr2l	equ	0xFD9
 26375                           status	equ	0xFD8
 26376                           
 26377                           	psect	rparam
 26378  0000                     tblptru	equ	0xFF8
 26379                           tblptrh	equ	0xFF7
 26380                           tblptrl	equ	0xFF6
 26381                           tablat	equ	0xFF5
 26382                           prodh	equ	0xFF4
 26383                           prodl	equ	0xFF3
 26384                           intcon	equ	0xFF2
 26385                           indf0	equ	0xFEF
 26386                           postinc0	equ	0xFEE
 26387                           fsr0h	equ	0xFEA
 26388                           fsr0l	equ	0xFE9
 26389                           wreg	equ	0xFE8
 26390                           indf1	equ	0xFE7
 26391                           postinc1	equ	0xFE6
 26392                           postdec1	equ	0xFE5
 26393                           fsr1h	equ	0xFE2
 26394                           fsr1l	equ	0xFE1
 26395                           bsr	equ	0xFE0
 26396                           indf2	equ	0xFDF
 26397                           postinc2	equ	0xFDE
 26398                           postdec2	equ	0xFDD
 26399                           plusw2	equ	0xFDB
 26400                           fsr2h	equ	0xFDA
 26401                           fsr2l	equ	0xFD9
 26402                           status	equ	0xFD8
 26403                           tblptru	equ	0xFF8
 26404                           tblptrh	equ	0xFF7
 26405                           tblptrl	equ	0xFF6
 26406                           tablat	equ	0xFF5
 26407                           prodh	equ	0xFF4
 26408                           prodl	equ	0xFF3
 26409                           intcon	equ	0xFF2
 26410                           indf0	equ	0xFEF
 26411                           postinc0	equ	0xFEE
 26412                           fsr0h	equ	0xFEA
 26413                           fsr0l	equ	0xFE9
 26414                           wreg	equ	0xFE8
 26415                           indf1	equ	0xFE7
 26416                           postinc1	equ	0xFE6
 26417                           postdec1	equ	0xFE5
 26418                           fsr1h	equ	0xFE2
 26419                           fsr1l	equ	0xFE1
 26420                           bsr	equ	0xFE0
 26421                           indf2	equ	0xFDF
 26422                           postinc2	equ	0xFDE
 26423                           postdec2	equ	0xFDD
 26424                           plusw2	equ	0xFDB
 26425                           fsr2h	equ	0xFDA
 26426                           fsr2l	equ	0xFD9
 26427                           status	equ	0xFD8


Data Sizes:
    Strings     4010
    Constant    120
    Data        0
    BSS         998
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     50      71
    BANK0           160    107     128
    BANK1           256      0     200
    BANK2           256      0     256
    BANK3           256     61      61
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(COMRAM[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(2) Largest target is 0

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_write	unsigned short  size(2) Largest target is 0

    ?_fifo_read	unsigned short  size(2) Largest target is 0

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_243(CODE[2]), STR_242(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_237(CODE[2]), 
		 -> STR_236(CODE[3]), STR_235(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_253(CODE[3]), STR_252(CODE[23]), STR_251(CODE[10]), STR_250(CODE[10]), 
		 -> STR_249(CODE[12]), STR_248(CODE[8]), STR_247(CODE[7]), STR_246(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_245(CODE[10]), STR_244(CODE[3]), STR_241(CODE[20]), 
		 -> STR_240(CODE[3]), STR_239(CODE[14]), STR_238(CODE[3]), STR_234(CODE[8]), 
		 -> STR_233(CODE[15]), STR_232(CODE[67]), STR_231(CODE[3]), STR_230(CODE[27]), 
		 -> STR_229(CODE[67]), STR_228(CODE[39]), STR_227(CODE[62]), STR_226(CODE[55]), 
		 -> STR_225(CODE[49]), STR_224(CODE[67]), STR_223(CODE[47]), STR_222(CODE[47]), 
		 -> STR_221(CODE[34]), STR_220(CODE[71]), STR_219(CODE[20]), STR_218(CODE[78]), 
		 -> STR_217(CODE[24]), STR_216(CODE[77]), STR_215(CODE[67]), STR_214(CODE[69]), 
		 -> STR_213(CODE[47]), STR_212(CODE[40]), STR_211(CODE[39]), STR_210(CODE[33]), 
		 -> STR_209(CODE[23]), STR_208(CODE[56]), STR_207(CODE[24]), STR_206(CODE[44]), 
		 -> STR_205(CODE[50]), STR_204(CODE[31]), STR_203(CODE[50]), STR_202(CODE[51]), 
		 -> STR_201(CODE[46]), STR_200(CODE[44]), STR_199(CODE[27]), STR_198(CODE[39]), 
		 -> STR_197(CODE[39]), STR_196(CODE[52]), STR_195(CODE[54]), STR_194(CODE[55]), 
		 -> STR_193(CODE[3]), STR_190(CODE[24]), STR_189(CODE[57]), STR_188(CODE[53]), 
		 -> STR_187(CODE[58]), STR_186(CODE[3]), STR_183(CODE[25]), STR_182(CODE[3]), 
		 -> STR_179(CODE[24]), STR_178(CODE[3]), STR_175(CODE[24]), STR_174(CODE[3]), 
		 -> STR_171(CODE[24]), STR_170(CODE[3]), STR_167(CODE[23]), STR_166(CODE[3]), 
		 -> STR_163(CODE[21]), STR_162(CODE[3]), STR_159(CODE[22]), STR_158(CODE[3]), 
		 -> STR_155(CODE[17]), STR_154(CODE[3]), STR_151(CODE[18]), STR_150(CODE[4]), 
		 -> STR_149(CODE[11]), STR_148(CODE[2]), STR_145(CODE[7]), STR_142(CODE[7]), 
		 -> STR_139(CODE[9]), STR_136(CODE[7]), STR_133(CODE[8]), STR_130(CODE[7]), 
		 -> STR_129(CODE[2]), STR_128(CODE[2]), STR_127(CODE[6]), STR_126(CODE[8]), 
		 -> STR_125(CODE[8]), STR_124(CODE[20]), STR_123(CODE[27]), STR_122(CODE[33]), 
		 -> STR_119(CODE[26]), STR_117(CODE[32]), STR_115(CODE[28]), STR_110(CODE[40]), 
		 -> STR_108(CODE[44]), STR_105(CODE[39]), STR_103(CODE[36]), STR_101(CODE[37]), 
		 -> STR_99(CODE[40]), STR_97(CODE[37]), STR_96(CODE[50]), STR_93(CODE[41]), 
		 -> STR_91(CODE[38]), STR_89(CODE[39]), STR_87(CODE[42]), STR_85(CODE[39]), 
		 -> STR_84(CODE[66]), STR_81(CODE[3]), STR_78(CODE[20]), STR_76(CODE[33]), 
		 -> STR_75(CODE[35]), STR_74(CODE[24]), STR_72(CODE[33]), STR_70(CODE[24]), 
		 -> STR_67(CODE[54]), STR_66(CODE[6]), STR_65(CODE[3]), STR_60(CODE[34]), 
		 -> STR_59(CODE[3]), STR_56(CODE[4]), wrkbuf(BANK1[80]), STR_51(CODE[15]), 
		 -> STR_49(CODE[33]), STR_47(CODE[24]), STR_43(CODE[6]), STR_39(CODE[18]), 
		 -> STR_38(CODE[6]), STR_36(CODE[33]), STR_35(CODE[6]), STR_27(CODE[24]), 
		 -> STR_26(CODE[18]), STR_25(CODE[20]), STR_24(CODE[25]), STR_23(CODE[22]), 
		 -> STR_22(CODE[19]), STR_21(CODE[20]), STR_20(CODE[20]), STR_18(CODE[6]), 
		 -> STR_16(CODE[6]), STR_14(CODE[6]), STR_12(CODE[6]), STR_10(CODE[6]), 
		 -> STR_8(CODE[6]), STR_6(CODE[31]), STR_4(CODE[29]), STR_3(CODE[55]), 
		 -> STR_2(CODE[48]), STR_1(CODE[37]), 

    sprintf$2094	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_255(CODE[17]), STR_254(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_192(CODE[3]), STR_191(CODE[7]), STR_185(CODE[3]), STR_184(CODE[7]), 
		 -> STR_181(CODE[4]), STR_180(CODE[8]), STR_177(CODE[4]), STR_176(CODE[8]), 
		 -> STR_173(CODE[4]), STR_172(CODE[8]), STR_169(CODE[4]), STR_168(CODE[8]), 
		 -> STR_165(CODE[4]), STR_164(CODE[7]), STR_161(CODE[4]), STR_160(CODE[7]), 
		 -> STR_157(CODE[4]), STR_156(CODE[7]), STR_153(CODE[4]), STR_152(CODE[7]), 
		 -> STR_147(CODE[3]), STR_146(CODE[7]), STR_144(CODE[3]), STR_143(CODE[7]), 
		 -> STR_141(CODE[3]), STR_140(CODE[7]), STR_138(CODE[3]), STR_137(CODE[7]), 
		 -> STR_135(CODE[3]), STR_134(CODE[7]), STR_132(CODE[3]), STR_131(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[7]), STR_64(CODE[3]), STR_63(CODE[7]), 
		 -> STR_62(CODE[3]), STR_61(CODE[7]), STR_58(CODE[3]), STR_57(CODE[7]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[3]), STR_52(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(2) Largest target is 4
		 -> ECANSendMessage@dataLen(COMRAM[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2074$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(COMRAM[1]), sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), 
		 -> sendVSCPDriverNack@crc(COMRAM[1]), sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 1
		 -> Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK3[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 1
		 -> doModeSLCAN@c(BANK0[1]), doModeVscp@c(COMRAM[1]), doModeVerbose@c(BANK3[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> inputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> getCANFrame@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(BANK0[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1366	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_192(CODE[3]), STR_191(CODE[7]), 

    printErrors$1357	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[3]), STR_184(CODE[7]), 

    printErrors$1351	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_181(CODE[4]), STR_180(CODE[8]), 

    printErrors$1345	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_177(CODE[4]), STR_176(CODE[8]), 

    printErrors$1339	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_173(CODE[4]), STR_172(CODE[8]), 

    printErrors$1333	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_169(CODE[4]), STR_168(CODE[8]), 

    printStatistics$1326	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_165(CODE[4]), STR_164(CODE[7]), 

    printStatistics$1320	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[4]), STR_160(CODE[7]), 

    printStatistics$1314	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_157(CODE[4]), STR_156(CODE[7]), 

    printStatistics$1308	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[4]), STR_152(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1117(BANK3[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK3[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1251	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1246	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1241	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    receivePrintEventVerbose$1236	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_138(CODE[3]), STR_137(CODE[7]), 

    receivePrintEventVerbose$1231	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_135(CODE[3]), STR_134(CODE[7]), 

    receivePrintEventVerbose$1226	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_132(CODE[3]), STR_131(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(COMRAM[1]), sendVSCPDriverNack@crc(COMRAM[1]), 
		 -> sendVSCPDriverAck@crc(COMRAM[1]), sendVSCPDriverErrorFrame@crc(COMRAM[1]), NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    doModeVerbose@p_1161	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1142	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1134	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_80(CODE[3]), STR_79(CODE[7]), 

    doModeVerbose@preg_1122	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1118	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1109	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[3]), STR_63(CODE[7]), 

    doModeVerbose$1105	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1099	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_58(CODE[3]), STR_57(CODE[7]), 

    doModeVerbose$1094	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_55(CODE[3]), STR_54(CODE[7]), 

    doModeVerbose$1082	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[3]), STR_52(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1070	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 

    inputFifo.buf	PTR unsigned char  size(2) Largest target is 500
		 -> inputBuffer(BIGRAM[500]), 


Critical Paths under _main in COMRAM

    _main->_doModeVscp
    _hexStringToBytes->_strlen
    _receivePrintEventSLCAN->_getCANFrame
    _receivePrintEventSLCAN->_itoa
    _ultoa->___llmod
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receivePrintEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_readRegisterExtended
    _doModeVerbose->_sprintf
    _doModeVerbose->_writeRegisterExtended
    _printBinary->_WriteUSART
    _findNodes->_readRegister
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_fifo_write

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receivePrintEventSLCAN->_ultoa
    _doModeVscp->_receiveVSCPModeCanalMsg
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _receivePrintEventVerbose->_sprintf

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  126777
                                             49 COMRAM     1     1      0
                                            101 BANK0      6     1      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9700
                                             35 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
             _receivePrintEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                             28 COMRAM    14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventSLCAN                              10    10      0    5318
                                             13 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                              0 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   13500
                                             48 COMRAM     1     1      0
                          _fifo_read
               _ECANSetOperationMode
             _receivePrintEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1517
                                             39 COMRAM     3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1393
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             35 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                             24 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1393
                                             39 COMRAM     1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1455
                                             39 COMRAM     2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             36 COMRAM     5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventCANAL                              15    15      0    4057
                                              0 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     737
                                             36 COMRAM     3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                             31 COMRAM     5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                             24 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   99918
                                             81 BANK0     20    20      0
                                              0 BANK3     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                             24 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4932
                                             48 COMRAM     1     1      0
                                             62 BANK0     11     4      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                             25 COMRAM     5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4870
                                             48 COMRAM     1     1      0
                                             62 BANK0     11     4      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   24882
                                             76 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5245
                                             70 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6772
                                             70 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6577
                                             70 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4746
                                             48 COMRAM     1     1      0
                                             62 BANK0      8     4      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2199
                                             43 COMRAM     4     4      0
                                             35 BANK0     27    20      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             28 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             34 COMRAM     9     1      8
                                              0 BANK0     28    28      0
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                             24 COMRAM    10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                             24 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7420
                                             27 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7312
                                             27 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                             30 COMRAM     7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             36 COMRAM     4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                             30 COMRAM     6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             37 COMRAM     4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                             25 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                             28 COMRAM     9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    9919
                                             27 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        14     9      5    2361
                                              0 BANK0     14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     2      3    1954
                                             43 COMRAM     5     2      3
                 _ECANReceiveMessage
 ---------------------------------------------------------------------------------
 (4) _ECANReceiveMessage                                  12     8      4    1720
                                             31 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (5) __RegsToCANID                                         7     3      4     697
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) __ECANPointBuffer                                     6     3      3      86
                                             24 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7003
                                             46 COMRAM     3     3      0
                                              0 BANK0     27    19      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             37 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fifo_read                                           14     8      6     446
                                             24 COMRAM    14     8      6
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                              0 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             40 COMRAM     8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                             31 COMRAM     9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                             25 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                             27 COMRAM     1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     186
                                             24 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                            8     8      0     646
                                             16 COMRAM     8     8      0
                          _ReadUSART
                         _fifo_write
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         16     9      7     378
                                              0 COMRAM    16     9      7
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _ECANReceiveMessage
                 __ECANPointBuffer
                 __RegsToCANID
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _ECANReceiveMessage
             __ECANPointBuffer
             __RegsToCANID
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _ECANReceiveMessage
               __ECANPointBuffer
               __RegsToCANID
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receivePrintEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receivePrintEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _ECANReceiveMessage
           __ECANPointBuffer
           __RegsToCANID
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1F4      16       32.6%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100     3D      3D      11       23.8%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6B      80       5       80.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     32      47       1       74.7%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       C       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2CC       3        0.0%
DATA                 0      0     4CC      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Fri Feb 13 15:03:25 2015

                 __end_of_doModeVerbose 1334                            printBinary@i 001D  
                           fifo_write@f 0001                             fifo_write@i 000D  
                           fifo_write@p 000C                   __end_of_sendVSCPFrame 40CE  
            doModeVerbose@filter_nodeid 0310                                      PL2 1334  
                                    PL4 4002                                      PL6 1342  
                                    PL8 1350                                      bsr 000FE0  
                   ___wmul@multiplicand 001B                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 5192                                     PL10 139A  
                                   PL20 1B14                                     PL12 1AE6  
                                   PL30 13D0                                     PL22 378C  
                                   PL14 3336                                     PL40 1B3A  
                                   PL32 3542                                     PL24 3878  
                                   PL16 13B6                                     PL50 1438  
                                   PL42 1404                                     PL34 13E4  
                                   PL26 3CCA                                     PL18 1B04  
                                   PL60 1B6A                                     PL52 1B54  
                                   PL44 141E                                     PL36 3428  
                                   PL28 3F30                                     PL70 1B78  
                                   PL62 395A                                     PL54 3566  
                                   PL46 3CDA                                     PL38 13F6  
                                   PL80 1F40                                     PL72 344A  
                                   PL64 3578                                     PL56 1450  
                                   PL48 3556                                     PL90 265A  
                                   PL82 29C8                                     PL74 345C  
                                   PL66 3688                                     PL58 450E  
                                   PL92 4DF2                                     PL84 1B9E  
                                   PL76 1B8C                                     PL68 3436  
                                   PL94 358C                                     PL86 4FF8  
                                   PL78 3470                                     PL96 1BA8  
                                   PL88 3102                 sendEscapedUartData@pcrc 0025  
               receivePrintEventCANAL@i 0068                                     l500 09F4  
                                   l505 090E                                     l532 0A48  
                                   l524 09D4                                     l516 09AA  
                                   l372 31E0                                     l621 2E54  
                                   l373 31EA                                     l519 09B4  
                                   l711 488C                                     l375 31F6  
                                   l720 48CE                                     l368 3188  
                                   l369 31C6                                     l730 3C1C  
                                   l802 3FF8                                     l491 1332  
                                   l715 48AC                                     l811 37AA  
                                   l724 48EE                                     l820 37FA  
                                   l733 3C26                                     l742 3C82  
                                   l814 37B4                                     l727 3C12  
                                   l823 3812                                     l663 1F3E  
                                   l496 0888                                     l736 3C3E  
                                   l760 40E4                                     l832 3864  
                                   l808 37A0                                     l745 3CB6  
                                   l817 37CC                                     l673 1C72  
                                   l754 40D0                                     l826 382A  
                                   l739 3C6A                                     l763 4108  
                                   l835 386E                                     l931 28B4  
                                   l748 3CC0                                     l772 4170  
                                   l940 293A                                     l757 40DA  
                                   l781 3F54                                     l829 3842  
                                   l766 4136                                     l790 3F8C  
                                   l950 29BC                                     l934 28EE  
                                   l926 2882                                     l871 2448  
                                   l775 417A                                     l872 245A  
                                   l864 23B8                                     l784 3F5E  
                                   l961 41B8                                     l769 414E  
                                   l793 3FB8                                     l953 29C6  
                                   l970 3D26                                     l882 3014  
                                   l698 1E7A                                     l891 30EC  
                                   l787 3F68                                     l947 299C  
                                   l964 422A                                     l876 3000  
                                   l796 3FCE                                     l973 3DB2  
                                   l885 3030                                     l894 30F6  
                                   l991 3C0A                                     l879 300A  
                                   l799 3FEE                                     l897 3100  
                                   l988 3B7C                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 006A                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 00D8          __size_of_writeRegisterExtended 00DA  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3C0C  
                          __CFG_LVP$OFF 000000                 receivePrintEventSLCAN@i 0075  
              receivePrintEventCANAL@id 006A                            __CFG_WDT$OFF 000000  
                                  l1011 4C9E                                    l1110 44B6  
                                  l1007 4C92                                    l1120 4876  
                                  l1113 44DC                                    l1131 26DC  
                                  l1140 276C                                    l1141 277E  
                                  l1133 26EE                                    l1142 2790  
                                  l1134 2700                                    l1143 27A2  
                                  l1135 2712                                    l1160 4F2E  
                                  l1072 3982                                    l1144 27B4  
                                  l1136 2724                                    l1145 27C6  
                                  l1137 2736                                    l1066 21E4  
                                  l1058 215C                                    l1146 27D8  
                                  l1138 2748                                    l1147 27EA  
                                  l1139 275A                                    l1164 505C  
                                  l1156 4628                                    l1148 2842  
                                  l2301 4C64                                    l1165 5062  
                                  l1414 3F0E                                    l1350 24E2  
                                  l1334 2FC6                                    l1326 2F26  
                                  l2311 4EB0                                    l1360 253C  
                                  l1352 24F0                                    l1328 2F44  
                                  l1417 3F2E                                    l2218 47FE  
                                  l1610 18C8                                    l1602 1860  
                                  l1522 1484                                    l1370 25C6  
                                  l1362 254C                                    l1354 2504  
                                  l1346 2658                                    l1611 18CC  
                                  l1371 25E0                                    l1339 2494  
                                  l2228 4A0C                                    l1356 2518  
                                  l2404 448A                                    l1613 18E8  
                                  l1349 2562                                    l1702 4A9A  
                                  l1358 252C                                    l2406 447E  
                                  l1711 4AD4                                    l2431 4CEE  
                                  l2407 4482                                    l1463 48FA  
                                  l1471 4958                                    l1608 18A2  
                                  l2440 4E7A                                    l2352 4A1E  
                                  l1449 50AC                                    l1393 3426  
                                  l1465 4902                                    l1481 4E3C  
                                  l1706 4AAE                                    l1538 15CA  
                                  l2354 4A78                                    l2450 4D32  
                                  l1707 4AB0                                    l2187 42AA  
                                  l1555 15DA                                    l1539 157A  
                                  l1708 4ABA                                    l1388 3540  
                                  l1709 4ABC                                    l1629 1972  
                                  l2373 4722                                    l1670 50EE  
                                  l1574 16FE                                    l1558 160E  
                                  l1398 4790                                    l2286 3936  
                                  l1486 42FE                                    l1719 4B82  
                                  l1559 1612                                    l1911 3782  
                                  l1487 4364                                    l2392 49BA  
                                  l2376 471E                                    l1912 378A  
                                  l1669 50EC                                    l9451 4842  
                                  l9357 490C                                    l9455 4856  
                                  l9447 4830                                    l9463 3E92  
                                  l9359 4912                                    l9459 486A  
                                  l9475 3F18                                    l9477 3F1C  
                                  STR_1 7952                                    STR_2 75E3  
                                  STR_3 73DD                                    STR_4 7B2A  
                                  STR_5 7FCF                                    STR_6 7AEC  
                                  STR_7 7FB6                                    STR_8 7F7F  
                                  STR_9 7F5D                                    _PEIE 007F96  
                        sendCANFrame@id 007C                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 001A                                    _bDLE 003B  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 4002  
                                  _bHex 00D3            doModeVerbose@filter_priority 030E  
                                  _crc8 4FA0                                    _atoi 369C  
                                  _main 3110                                    _init 4D3C  
                                  _mode 00D7                                    _itoa 4F68  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 422C  
                   i1WriteTimer0@timer0 0001                                    prodh 000FF4  
                                  prodl 000FF3                                    start 019C  
                          _sprintf$2094 006D                            _sprintf$2087 0069  
                          _sprintf$2088 006B                             _writeEEPROM 5090  
             ECANReceiveMessage@dataLen 0022                      doModeVerbose@count 032B  
                 getVSCPFrame@pPriority 0062                      doModeVerbose@value 0331  
                  __end_of_getVSCPFrame 462A                        __RegsToCANID@val 001B  
                      __RegsToCANID@ptr 0019                    __size_of_getCANFrame 002E  
              ?_receiveVSCPModeCanalMsg 0001                receivePrintEventSLCAN@id 0071  
                       ?_doModeVscpNode 0001                                   l10101 2D32  
                                 l10105 2D38                                   l10203 2E46  
                                 l10115 2D4E                                   l10123 2D6A  
                                 l10205 2E4C                                   l10117 2D54  
                                 l10161 2DBA                                   l10145 2D96  
                                 l10137 2D72                                   l10209 2E52  
                                 l12003 2EEA                                   l10147 2D9C  
                                 l12013 2F2A                                   l10181 2DEE  
                                 l10149 2DA2                                   l10085 2CE6  
                                 l10175 2DD8                                   l10159 2DB4  
                                 _B0CON 000E20                                   l12201 4746  
                                 l12025 2F76                                   l12033 2F94  
                                 l10193 2E1E                                   l10515 4574  
                                 l12203 4750                                   l12019 2F46  
                                 l12043 2FBA                                   l13003 0F20  
                                 l10187 2E06                                   l10373 4A9C  
                                 l10365 4A8E                                   l12205 475A  
                                 l12213 4772                                   l12133 2576  
                                 l12045 2FBC                                   l11413 3E2C  
                                 l13013 0F58                                   l10527 458E  
                                 l11335 514C                                   l12207 4760  
                                 l12143 2596                                   l10703 506E  
                                 l12039 2FB6                                   l11415 3E42  
                                 l11407 3DE0                                   l11351 4CA8  
                                 l11343 4C78                                   l13023 0F92  
                                 l13007 0F2E                                   l10199 2E36  
                                 _B1CON 000E30                                   l14001 49FE  
                                 l12209 4766                                   l12161 25E2  
                                 l12081 24C2                                   l12065 2482  
                                 l11505 34CE                                   l13113 125C  
                                 l13105 121E                                   l13121 129A  
                                 l13033 0FCA                                   l13017 0F66  
                                 l13201 1CD4                                   l10651 511C  
                                 l12227 33C2                                   l12075 24AC  
                                 l12083 24CC                                   l12403 4E4A  
                                 l10643 46E6                                   l10707 507E  
                                 l11419 3E60                                   l11451 3664  
                                 l11443 3628                                   l11435 35C2  
                                 l13131 1308                                   l13043 1002  
                                 l13027 0FA0                                   l10645 470C  
                                 l11445 3630                                   l13125 12D6  
                                 l13037 0FD8                                   l13133 1314  
                                 l12183 2642                                   l13311 22D6  
                                 l12407 4E66                                   l10639 46AE  
                                 l12423 4CFE                                   l12431 4CBA  
                                 l11447 3646                                   l10903 39B6  
                                 l11391 3BE8                                   l13055 1066  
                                 l13047 1010                                   _B2CON 000E40  
                                 l12169 260E                                   l12177 262C  
                                 l12089 24D0                                   l12417 513A  
                                 l12409 4E6A                                   l12425 4D06  
                                 l12433 4CC2                                   l10657 4408  
                                 l11473 43C2                                   l10921 3A1A  
                                 l11393 3C08                                   l13129 12FA  
                                 l13057 1076                                   l13137 1330  
                                 l12265 4E3A                                   l12257 4E28  
                                 l12249 4E16                                   l13225 1E04  
                                 l13217 1D76                                   l13161 1C20  
                                 l12521 3216                                   l12355 4C34  
                                 l12283 4234                                   l12195 472A  
                                 l13323 2322                                   l10667 4440  
                                 l10691 3714                                   l11475 43CA  
                                 l12603 0368                                   l11563 30DC  
                                 l13235 1E2A                                   l13163 1C24  
                                 l12531 3232                                   l12523 321C  
                                 l12507 31F2                                   l12357 4C3C  
                                 l12293 426C                                   l12277 50CC  
                                 l12197 4732                                   l10941 4A48  
                                 l10677 369E                                   l13421 2B16  
                                 l11469 439C                                   l10933 5012  
                                 l11493 27FC                                   l13093 11C0  
                                 l13077 1134                                   l13069 10F6  
                                 l12541 01AA                                   l11813 4D92  
                                 l11805 4350                                   l13157 1BFE  
                                 l12367 4C5A                                   l12359 4C40  
                                 l12383 4EA6                                   l12375 4E88  
                                 l12199 473C                                   l13335 236E  
                                 l10695 374C                                   l10687 36F8  
                                 l10679 36A2                                   l13407 2AB4  
                                 l13503 213C                                   l11479 43D8  
                                 l10935 501A                                   l13087 118A  
                                 l12711 06CC                                   l12631 0430  
                                 l12623 0402                                   l11559 30C2  
                                 l11575 4F36                                   l13271 1F20  
                                 l13255 1E80                                   l13247 1E60  
                                 l13191 1CAC                                   l13175 1C6C  
                                 l13263 1EAA                                   l12527 3226  
                                 l12519 3210                                   _B3CON 000E50  
                                 l12377 4E90                                   l13601 15DE  
                                 l13361 2434                                   l12393 4994  
                                 l10689 370E                                   l13089 119A  
                                 l12705 0692                                   l12609 039E  
                                 l13257 1E92                                   l13169 1C48  
                                 l13265 1F00                                   l12379 4E94  
                                 l11931 4F84                                   l13363 243C  
                                 l13531 21D4                                   l13515 2176  
                                 l13507 214C                                   l13435 1F66  
                                 l12723 0756                                   l12715 06F6  
                                 l12707 06A2                                   l12643 0472  
                                 l12635 0446                                   l12627 041A  
                                 l12619 03E2                                   l12571 027C  
                                 l12563 0242                                   l11579 4F5E  
                                 l11819 4DAE                                   l13179 1C7C  
                                 l13275 1F3C                                   l12467 314E  
                                 l13613 1618                                   l13349 23C4  
                                 l12397 49A0                                   l12389 495C  
                                 l11829 4F2C                                   l10981 3D90  
                                 l12741 07C8                                   l12661 0508  
                                 l12645 0482                                   l13269 1F14  
                                 l13711 17B0                                   l13607 15F6  
                                 l13543 148E                                   l13359 2430  
                                 l13287 223C                                   l11783 4EC4  
                                 l12399 49A8                                   l13527 21C4  
                                 l13463 202A                                   l10983 3DB0  
                                 l12823 0A14                                   l12719 072C  
                                 l12655 04D6                                   l12639 045C  
                                 _B4CON 000E60                                   l13801 1952  
                                 l13633 165E                                   l13617 161E  
                                 l13625 1642                                   l13561 14D8  
                                 l13545 1492                                   l13553 14A0  
                                 l13537 146C                                   l11881 5058  
                                 l13369 2458                                   l11785 4EC8  
                                 l13393 2A52                                   l13449 1FC8  
                                 l11961 4208                                   l12921 0D0C  
                                 l12809 09CE                                   l12753 0856  
                                 l12737 07B8                                   l12673 0564  
                                 l13731 1810                                   l13643 1686  
                                 l13635 166C                                   l13619 162A  
                                 l13547 1496                                   l11867 45CA  
                                 l13299 2288                                   l13379 29F0  
                                 l13491 20EE                                   l11963 4228  
                                 l11971 4B3A                                   l12907 0CB2  
                                 l12851 0AC0                                   l12835 0A62  
                                 l12843 0AA0                                   l12771 08DA  
                                 l12763 0890                                   l12747 0832  
                                 l12691 05F6                                   l12683 05B8  
                                 l12667 0536                                   l12595 032E  
                                 l12587 02F4                                   l12579 02B8  
                                 l12499 31DC                                   l13821 1994  
                                 l13741 1840                                   l13709 17AC  
                                 l13725 17E4                                   l13629 1658  
                                 l13549 149A                                   l13477 208C  
                                 l11973 4B48                                   l12941 0D80  
                                 l12845 0AA4                                   l12749 0846  
                                 l12853 0AD0                                   l13823 199A  
                                 l13807 195A                                   l13735 182E  
                                 l13727 17F6                                   l13671 1708  
                                 l13639 167A                                   l13647 168C  
                                 l11991 2EC0                                   l11975 4B50  
                                 l12951 0DB8                                   l12783 0928  
                                 l12679 0592                                   l11799 430C  
                                 _B5CON 000E70                                   l13841 1A26  
                                 l13833 19BC                                   l13817 1982  
                                 l13753 187E                                   l13681 173C  
                                 l13657 16C8                                   l13649 16B8  
                                 l13593 15B6                                   l13577 1548  
                                 l13569 1520                                   l11985 2EAE  
                                 l11969 4B36                                   l12961 0DF2  
                                 l12937 0D72                                   l12881 0BC8  
                                 l12865 0B2E                                   l12697 0648  
                                 l12689 05EC                                   l13913 2944  
                                 l13905 2902                                   l13851 1A6C  
                                 l13747 1864                                   l13683 1740  
                                 l13675 1726                                   l13595 15D0  
                                 l12971 0E2A                                   l12947 0DAA  
                                 l12875 0BA6                                   l12795 0976  
                                 l12699 0658                                   l13861 1AA6  
                                 l13773 18F8                                   l13597 15D4  
                                 l13589 1580                                   l12981 0E62  
                                 l12957 0DE4                                   l12893 0C36  
                                 l12885 0BF4                                   l12877 0BBA  
                                 l12869 0B3C                                   l13917 2958  
                                 l13855 1A86                                   l13847 1A48  
                                 l13839 19D0                                   l13783 1918  
                                 l13767 18E2                                   l13759 18A6  
                                 l13695 1774                                   l13599 15D8  
                                 l13871 1AD0                                   l12967 0E1C  
                                 l12895 0C44                                   l13943 3898  
                                 l13865 1AC8                                   l13857 1A98  
                                 l13697 1778                                   l13873 1AD8  
                                 l12977 0E54                                   l12889 0C02  
                                 l13953 38DC                                   l12987 0EBA  
                                 l13973 47B2                                   l13789 192C  
                                 l13797 1948                                   ?_crc8 0020  
                                 l13975 47BE                                   l13985 47F0  
                                 l13977 47C2                                   l13993 49CC  
                                 l13995 49D8                                   l13997 49DC  
                  __size_of_doModeSLCAN 038E                      writeEEPROM@address 0019  
                                 ?_atoi 001F                                   ?_main 00C5  
                                 ?_init 0001                                   ?_itoa 0029  
                         i1_WriteTimer0 5176                                   _EEADR 000FA9  
                                 STR_10 7F7F                                   STR_11 7F91  
                                 STR_12 7F7F                                   STR_20 7D82  
                                 STR_13 7ECC                                   STR_21 7D96  
                                 STR_14 7F7F                                   STR_30 7FF4  
                                 STR_22 7DD2                                   STR_31 7FF4  
                                 STR_15 7F4F                                   STR_23 7D05  
                                 STR_16 7F7F                                   STR_32 7FF4  
                                 STR_40 7FCA                                   STR_24 7BCE  
                                 STR_33 7FF4                                   STR_41 7FD8  
                                 STR_17 7F0D                                   STR_25 7D6E  
                                 STR_18 7F7F                                   STR_50 7F2A  
                                 STR_34 7FF4                                   STR_42 7FC5  
                                 STR_26 7DE5                                   STR_43 7F7F  
                                 STR_35 7F7F                                   STR_19 7F48  
                                 STR_51 7E5D                                   STR_27 7C48  
                                 STR_28 7FEA                                   STR_44 7FA2  
                                 STR_52 7F64                                   STR_36 7A48  
                                 STR_60 7A05                                   STR_61 7F64  
                                 STR_29 7FF4                                   STR_53 7FED  
                                 STR_37 7FE7                                   STR_45 7FA7  
                                 STR_38 7F7F                                   STR_70 7C30  
                                 STR_46 7F2A                                   STR_54 7F64  
                                 STR_62 7FED                                   STR_71 7F2A  
                                 STR_63 7F64                                   STR_55 7FED  
                                 STR_39 7DF7                                   STR_47 7C30  
                                 STR_72 7AAB                                   STR_48 7F2A  
                                 STR_56 7EE9                                   STR_80 7FED  
                                 STR_64 7FED                                   STR_81 74B2  
                                 STR_65 74B2                                   STR_73 7F2A  
                                 STR_57 7F64                                   STR_49 7AAB  
                                 STR_66 7F7F                                   STR_90 7FF4  
                                 STR_58 7FED                                   STR_82 7F56  
                                 STR_74 7C60                                   STR_59 74B2  
                                 STR_83 7FF4                                   STR_75 79C0  
                                 STR_91 7907                                   STR_67 744A  
                                 STR_92 7FF4                                   STR_68 7FAC  
                                 STR_76 7A8A                                   STR_84 7244  
                                 STR_69 7F2A                                   STR_77 7FBB  
                                 STR_85 781D                                   STR_93 777C  
                                 STR_86 7FF4                                   STR_94 7FB1  
                                 STR_78 7DAA                                   STR_95 7FF4  
                                 STR_79 7F64                                   STR_87 7752  
                                 STR_88 7FF4                                   STR_96 751C  
                                 STR_97 792D                                   STR_89 78B9  
                                 STR_98 7FF4                                   STR_99 77CD  
          __end_of_printFirmwareVersion 450E                                   _BSEL0 000DF8  
                       __end_of___lldiv 4810                                   ?_utoa 0020  
                       __end_of_calcCRC 4F68                                   _T0CON 000FD5  
                                 u11280 4BA2                         __end_of___llmod 4A1E  
                                 u11290 4BCE                                   u13210 36F0  
                                 u13230 370A                                   u11287 4B9C  
                                 u11297 4BC8                                   u13217 36EA  
                                 u13305 404E                                   u13250 3738  
                                 u13170 36BE                                   u13260 375E  
                                 u13237 3704                                   u13190 36D4  
                                 _LATC1 007C59                                   u14304 4C88  
                                 u13257 3732                                   u13177 36B8  
                                 u14305 4C84                                   u13530 4A3A  
                                 u13267 3758                                   u13197 36CE  
                                 u13550 4A70                                   u15320 461C  
                                 u15160 4EE4                                   u13537 4A34  
                                 u15325 4612                                   u13557 4A6A  
                                 u15167 4EDE                                   u14545 2680  
                                 u14546 2686                                   u14555 26B4  
                                 u14547 2694                                   u17035 0C62  
                                 u14556 26BA                                   u14557 26C8  
                                 u17125 1358                                   u14575 34A8  
                                 u17135 0ED8                                   u17055 0D2A  
                                 u14585 34B8                                   u17225 1094  
                                 u16505 0388                                   u15490 4B78  
                                 u15635 248A                                   u14595 34D6  
                                 u17235 10D4                                   u16515 03BE  
                                 u17500 1D56                                   u15637 248C  
                                 u17245 1114                                   u16445 0222  
                                 u16615 04A2                                   u16455 0262  
                                 u14855 3A90                                   u15905 338A  
                                 u15497 4B6E                                   u16705 0678  
                                 u16465 029C                                   u17505 1D54  
                                 u15915 339A                                   u16475 02D8  
                                 u15925 33C6                                   u16725 06C2  
                                 u16485 0314                                   u16735 06EC  
                                 u16495 034E                                   u17480 1D42  
                                 u16745 0716                                   u17490 1D4C  
                       __end_of___lwdiv 4C6E                                   u16755 074C  
                                 u16765 0776                                   u17485 1D40  
                                 u17495 1D4A                                   u16975 0AF0  
                                 u18687 315C                            _vscpPriority 00DD  
                                 i1l400 017C                                   i1l412 017E  
                                 i1l406 017C                                   i1l409 016C  
                       __end_of___lwmod 4EBA                                   i1l395 0084  
                       sendCANFrame@dlc 0080                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 001C  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00A0  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00D5                 readRegisterExtended@reg 00A0  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 42CC                                   crc8@m 0022  
                       __end_of_dpowers 7034                         __end_of_isdigit 50D4  
                                 _timer 00CF                                   atoi@a 0024  
                                 atoi@s 001F                                   main@c 00CA  
                                 _ultoa 3888                              Interrupt@c 0018  
            ??_printNodeFirmwareVersion 0032                        _printErrors$1333 007B  
                      _printErrors$1351 0081                        _printErrors$1345 007F  
                      _printErrors$1339 007D                        _printErrors$1357 0083  
                      _printErrors$1366 0085                                   tablat 000FF5  
           __end_of_sendEscapedUartData 48F0                                   plusw2 000FDB  
                                 utoa@c 0028                                   utoa@v 0026  
                                 status 000FD8                 ?_receivePrintEventCANAL 0001  
                       __end_of_sprintf 1AE6                         __end_of_strichr 4E7C  
                       __end_of_strcspn 4CF8                         __end_of_toupper 513E  
                       __end_of_stristr 4724                 ?_receivePrintEventSLCAN 0001  
     __size_of_receivePrintEventVerbose 0276                     doModeVerbose@i_1064 0330  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1142 0339  
                   doModeVerbose@p_1118 0334                     doModeVerbose@p_1070 0332  
                   doModeVerbose@p_1161 033B                          WriteUSART@data 0019  
                  _ECANSetOperationMode 5110                         __initialization 4AD6  
                doModeVerbose@page_1115 0321                            __end_of_crc8 4FD6  
                          __end_of_atoi 378C                            __end_of_main 323E  
                          __end_of_init 4D80                            __end_of_itoa 4FA0  
                          __end_of_utoa 42CC                     doModeVerbose@ifmode 0336  
                   doModeVerbose@maskno 0329                     doModeVerbose@nodeid 030C  
                         doModeSLCAN@id 008A                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 0090                       ??_ECANSendMessage 002B  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00A3  
                                ??_crc8 0023                   getVSCPFrame@pvscptype 0060  
                                ??_atoi 0021                  ??_vscp_restoreDefaults 001D  
                                ??_main 0032                       readRegister@value 00A1  
                                ??_init 001D                                  ??_itoa 002F  
                                ??_utoa 0026                  doModeVerbose@mask_type 0312  
                         __activetblptr 000002                         _stateVscpDriver 003F  
                     __RegsToCANID@type 001C                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 0023                           ?_readRegister 009E  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                  doModeVerbose@preg_1122 0306  
                                _B2TXEN 006FC4                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00A1              ECANReceiveMessage@savedPtr 0025  
                                _CANCON 000F6F                        ___llmod@dividend 0026  
                                STR_100 7FF4                                  STR_101 7977  
                                STR_102 7FF4                                  STR_110 77F5  
                                STR_111 7E86                                  STR_103 799C  
                                STR_104 7FF4                                  STR_120 7EED  
                                STR_112 7EBA                                  STR_200 76FA  
                                STR_121 7F8B                                  STR_113 7F85  
                                STR_105 7892                                  STR_201 76A0  
                                STR_106 7F9D                                  STR_130 7F41  
                                STR_114 7EFD                                  STR_122 7A69  
                                STR_210 7A27                                  STR_202 74E9  
                                STR_131 7F64                                  STR_107 7FDC  
                                STR_123 7B7E                                  STR_115 7B47  
                                STR_211 7844                                  STR_203 754E  
                                STR_140 7F64                                  STR_132 7FED  
                                STR_116 7FC0                                  STR_124 7D5A  
                                STR_204 7B0B                                  STR_212 77A5  
                                STR_108 7726                                  STR_220 70EF  
                                STR_141 7FED                                  STR_109 7F05  
                                STR_133 7EF5                                  STR_125 7ED5  
                                STR_117 7ACC                                  STR_221 79E3  
                                STR_213 7671                                  STR_205 7580  
                                STR_150 7FD4                                  STR_118 7F97  
                                STR_134 7F6B                                  STR_142 7F3A  
                                STR_126 7EDD                                  STR_230 7B99  
                                STR_206 76CE                                  STR_222 7642  
                                STR_214 7136                                  STR_231 74B2  
                                STR_143 7F64                                  STR_135 7FED  
                                STR_127 7F79                                  STR_151 7E09  
                                STR_207 7C00                                  STR_119 7BB4  
                                STR_223 7613                                  STR_215 7201  
                                STR_240 74B2                                  STR_232 717B  
                                STR_160 7F72                                  STR_144 7FED  
                                STR_128 7FF2                                  STR_152 7F72  
                                STR_136 7F33                                  STR_208 7337  
                                STR_224 71BE                                  STR_216 70A2  
                                STR_137 7F64                                  STR_161 7FE0  
                                STR_129 7FF0                                  STR_153 7FE0  
                                STR_145 7F2C                                  STR_233 7E4E  
                                STR_241 7DBE                                  STR_209 7CC0  
                                STR_217 7C18                                  STR_225 75B2  
                                STR_170 74B2                                  STR_162 74B2  
                                STR_154 74B2                                  STR_146 7F64  
                                STR_138 7FED                                  STR_242 7FFC  
                                STR_234 7EE5                                  STR_250 7EB0  
                                STR_226 73A6                                  STR_218 7054  
                                STR_147 7FED                                  STR_235 7FF8  
                                STR_243 7FF6                                  STR_139 7EC3  
                                STR_251 7EA6                                  STR_155 7E3D  
                                STR_219 7D46                                  STR_163 7D31  
                                STR_171 7CA8                                  STR_227 7286  
                                STR_244 74B2                                  STR_148 7FF4  
                                STR_164 7F72                                  STR_156 7F72  
                                STR_180 7F15                                  STR_172 7F15  
                                STR_236 7FE4                                  STR_252 7CEE  
                                STR_228 78E0                                  STR_253 74B2  
                                STR_181 7FE0                                  STR_173 7FE0  
                                STR_165 7FE0                                  STR_157 7FE0  
                                STR_237 7FFA                                  STR_245 7E9C  
                                STR_149 7E91                                  STR_229 717B  
                                _EEDATA 000FA8                                  STR_246 74B2  
                                STR_238 74B2                                  STR_182 74B2  
                                STR_174 74B2                                  STR_166 74B2  
                                STR_158 74B2                                  STR_254 7E1B  
                                STR_190 7C78                                  STR_191 7F64  
                                STR_247 7F25                                  STR_239 7E6C  
                                STR_255 7E2C                                  STR_159 7D1B  
                                STR_167 7CD7                                  STR_175 7C90  
                                STR_183 7BE7                                  STR_184 7F64  
                                STR_176 7F15                                  STR_192 7FED  
                                STR_248 7F1D                                  STR_168 7F15  
                                STR_193 74B2                                  STR_185 7FED  
                                STR_177 7FE0                                  STR_169 7FE0  
                                STR_249 7E7A                                  STR_186 74B2  
                                STR_178 74B2                                  STR_194 736F  
                                STR_179 7C90                                  STR_195 7414  
                                STR_187 72C4                                  STR_196 74B5  
                                STR_188 7480                                  STR_197 786B  
                                STR_189 72FE                                  STR_198 7197  
                                STR_199 7B63                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 3DB4                                  _CIOCON 000F73  
                                ?_ultoa 0060            ??_sendVSCPDriverCommandReply 0029  
                                i1l1425 327E                           ?_init_app_ram 0001  
                                i1l1426 3334                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1732 5100  
                            _OpenTimer0 50D4                                  i1l7075 3288  
                                i1l7067 324C          __end_of_receivePrintEventCANAL 3102  
                                i1l7085 3310                                  i1l7087 331A  
                                i1l9201 00BE                                  i1l9203 00CA  
                                i1l9221 012A                                  i1l9213 0100  
                                i1l9205 00DA                                  i1l9231 015A  
                                i1l9215 010C                                  i1l9207 00E2  
                                i1l9233 0164                                  i1l9225 013C  
                                i1l9209 00EE                                  i1l9235 0174  
                                i1l9227 0148                                  i1l9219 011E  
                                i1l9191 0070                                  i1l9193 0080  
                                i1l9185 0034                                  i1l9195 008C  
                                i1l9187 003C                                  i1l9197 00AE  
                                i1l9189 0042                                  i1l9199 00BA  
                       _init_app_eeprom 451C                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0020  
        __end_of_receivePrintEventSLCAN 29C8                  ECANReceiveMessage@mode 0028  
                ECANReceiveMessage@temp 0029                       getVSCPFrame@pData 0064  
            ??_sendVSCPDriverErrorFrame 0028                       getVSCPFrame@pSize 0063  
                    _doModeVerbose$1105 031A                      _doModeVerbose$1109 031C  
                    _doModeVerbose$1134 031E                      _doModeVerbose$1082 0314  
                    _doModeVerbose$1094 0316                      _doModeVerbose$1099 0318  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0022  
                    __size_of_Interrupt 0184                readRegisterExtended@page 009E  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0004  
                        getCANFrame@pid 002F                                  ___wmul 4FD6  
                            _bInitiated 00D4                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0021                               ??_calcCRC 0028  
                                _cmdbuf 0120                               ??___llmod 002E  
                      OpenTimer0@config 0019                               ??___lwdiv 001D  
                             ??___lwmod 001D           _receivePrintEventVerbose$1231 0082  
         _receivePrintEventVerbose$1241 0086           _receivePrintEventVerbose$1226 0080  
         _receivePrintEventVerbose$1251 008A           _receivePrintEventVerbose$1236 0084  
         _receivePrintEventVerbose$1246 0088                                  _memcpy 4D80  
                                _memset 5064                                  clear_0 4ADE  
                                clear_1 4AF2                                  clear_2 4B04  
                                clear_3 4B10                                  clear_4 4B1C  
                         ?_sendCANFrame 007C                                  _strcat 4B2C  
                                _strchr 4A1E                                  _strcpy 5008  
                                _strlen 4EBA                                  _wrkbuf 0170  
                                _strtok 43FA                                  _strspn 4CF8  
   __size_of_sendVSCPDriverCommandReply 00DE                               ??_isdigit 0019  
                      __end_of_printMDF 43FA                            __mediumconst 6FDC  
                        ??_readRegister 00A2                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 006C                                  ultoa@v 0068  
                          ?_printErrors 0001                               ??_sprintf 002F  
                             ??_strichr 001E                               ??_strcspn 0023  
                             ??_toupper 0019                          ??_init_app_ram 001C  
                             ??_stristr 002A              doModeVerbose@mask_priority 0311  
                      __end_of_strnicmp 49BC                              __accesstop 0060  
               __end_of__initialization 4B22                    _printFirmwareVersion 448C  
                       writeEEPROM@data 001B                   __size_of_getVSCPFrame 0084  
                  doModeVerbose@id_1173 0323                              _WriteUSART 513E  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 0188  
                  _printStatistics$1320 007F                    _printStatistics$1314 007D  
                  _printStatistics$1308 007B                    _printStatistics$1326 0081  
                 _uart_transmitOverruns 011C                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 395A                              __end_ofPL2 1342  
                            __end_ofPL4 4012                              __end_ofPL6 1350  
                            __end_ofPL8 139A                          ??_sendCANFrame 002C  
                     __end_of_ReadUSART 5110                           ?__RegsToCANID 0019  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 0089  
                       readRegister@reg 009E                    sendVSCPDriverAck@crc 0028  
                    __size_of_findNodes 00E6                          doModeSLCAN@dlc 008E  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00AC  
                getVSCPFrame@pvscpclass 0069                 __end_of_init_app_eeprom 45A6  
                     __end_of_Interrupt 019C                           ReadUSART@data 0001  
                    readRegister@nodeid 0031                          _status_led_cnt 0035  
                    __RegsToCANID@Value 001F                              _crc8_table 0200  
                     __end_of_OpenUSART 4AD6                 doModeVerbose@mask_class 030A  
             printNodeFirmwareVersion@i 00AB                         setFilter@filter 0023  
                          sprintf@width 0072        __end_of_printNodeFirmwareVersion 3E84  
                            _doModeVscp 2CDE                                 ??_ultoa 002F  
                          _getVSCPFrame 45A6                              __pbssBANK0 00CB  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                           ?_OpenTimer0 0001                              calcCRC@crc 0029  
                            calcCRC@len 0027                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0019                      __size_of_init_crc8 006A  
                         setFilter@eidh 0026                           setFilter@eidl 0027  
                         setFilter@sidh 0024                           setFilter@sidl 0025  
                          ?_writeEEPROM 0019                        ??_doModeVscpNode 0019  
                            _nTimeStamp 003D                __end_of_hexStringToBytes 4366  
              ECANSetOperationMode@mode 0019                                 ?___wmul 0019  
                    __size_of_setFilter 01DC                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 003A  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 3F52  
                               _B5RXFUL 007387                        WriteTimer0@timer 001B  
                         putsUSART@data 001A                    _readRegisterExtended 3CE4  
                               ?_memcpy 0019                                 _ECANCON 000F77  
                               ?_memset 0019                           ??_WriteTimer0 001B  
                        ??__RegsToCANID 001D                   sendVSCPFrame@priority 0087  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0019  
                               ?_strchr 0019                                 ?_strcpy 0019  
                               ?_strlen 0019                                 ?_strtok 0025  
                               ?_strspn 001F                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00F2  
                   ?_sendVSCPDriverNack 0001                              _fifo_write 323E  
                    __size_of_printHelp 0180                      __size_of_printMode 0072  
                 sendVSCPFrame@vscptype 0085                 doModeVerbose@value_1117 0327  
                     sendCANFrame@pdata 0081                              _made_table 0033  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4724  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0054  
    __end_of_sendVSCPDriverCommandReply 3878              _sendVSCPDriverCommandReply 379A  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 3B32        __size_of_receiveVSCPModeCanalMsg 00DE  
                __size_of_doModeVerbose 1194                    sendEscapedUartData@c 0027  
                __size_of_sendVSCPFrame 00BC        __end_of_sendVSCPDriverErrorFrame 3CCA  
                            _readEEPROM 5164                    ??_sendVSCPDriverNack 0028  
            printFirmwareVersion@wrkbuf 0060                         _ECANSendMessage 2E56  
                               __Hparam 0000                       __end_of_findNodes 3A54  
                               __Lparam 0000                       __end_of_fifo_init 4DF2  
                     __end_of_fifo_read 3F30                           ??_getCANFrame 002F  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00A3  
                  __end_of_readRegister 422C                               ?_printMDF 0001  
                               _bSilent 00D6               receiveVSCPModeCanalMsg@id 009F  
                         ??_doModeSLCAN 0083                                 ___lldiv 479A  
                       __size_of___wmul 0022                                 _calcCRC 4F30  
                       getCANFrame@pdlc 002C                                 ___llmod 49BC  
                               ___lwdiv 4C24                               _FIFOEMPTY 007BA7  
                               ___lwmod 4E7C                   ?_readRegisterExtended 009E  
           printNodeFirmwareVersion@buf 00A7                    __end_of_init_app_ram 4C24  
                          init_crc8@crc 001D                                 __pcinit 4AD6  
                       __size_of_memcpy 0040                         __size_of_memset 002C  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 001D                                 __ptext0 3110  
                               __ptext1 5190                                 __ptext2 1BB2  
                               __ptext3 42CC                                 __ptext4 4E00  
                               __ptext5 2844                                 __ptext6 3888  
                               __ptext7 2CDE                                 __ptext8 379A  
                               __ptext9 3F52                                 crc8@crc 0020  
         printNodeFirmwareVersion@value 00AA                       ??_printStatistics 0032  
                             _T0CONbits 000FD5                         __size_of_strcat 0056  
                       __size_of_strchr 005C                         __size_of_strcpy 002E  
                       __size_of_strlen 003C                       __end_of_hexpowers 7054  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 700C                       __end_of_init_crc8 495A  
                               _isdigit 50B6          printNodeFirmwareVersion@nodeid 00A6  
                   __end_of_WriteTimer0 5164                          _nibbleFromChar 4E00  
                      ?_init_app_eeprom 0001                                 _sprintf 1466  
                     __end_of_setFilter 2844                                 _strichr 4E3E  
                        doModeVerbose@c 032C                          doModeVerbose@i 032A  
                        doModeVerbose@p 0337                                 _strcspn 4CB4  
                               _toupper 5128                             ?_doModeVscp 0001  
                               _stristr 46AC                    __size_of_printBinary 0046  
                  end_of_initialization 4B22                       __end_of_octpowers 700C  
                  __size_of_printErrors 029A                                 memcpy@d 001F  
                               memcpy@n 001D                                 memcpy@s 0021  
                ??_printFirmwareVersion 0031                               i1u1100_20 00FE  
                             i1u1100_21 00FC                               i1u1101_20 010C  
                             i1u1101_21 010A                               i1u1102_20 011C  
                             i1u1102_21 011A                               i1u1103_20 012A  
                             i1u1103_21 0128                               i1u1104_20 013A  
                             i1u1104_21 0138                                 itoa@buf 0029  
                             i1u1105_20 0148                               i1u1105_21 0146  
                             i1u1106_20 0158                               i1u1106_21 0156  
                             i1u1107_20 0164                               i1u1107_21 0162  
                             i1u1108_20 0174                               i1u1108_21 0172  
                               memset@c 001B                                 itoa@val 002B  
                               memset@n 001D                                 memset@p 001F  
                         __Lmediumconst 6FDC                    __end_of_sendCANFrame 4F30  
                             i1u1094_20 003C                               i1u1094_21 003A  
                             i1u1095_20 0070                               i1u1095_21 006E  
                             i1u1096_20 008C                               i1u1096_21 008A  
                             i1u1097_20 00CA                               i1u1097_21 00C8  
                             i1u1098_20 00DA                               i1u1098_21 00D8  
                             i1u1099_20 00EE                               i1u1099_21 00EC  
                   _can_receiveOverruns 0100                       __end_of_printGUID 3688  
                       ___lldiv@divisor 001D                       __end_of_printHelp 2CDE  
                       ___lldiv@counter 0021                       __end_of_printMode 4882  
                     ECANSendMessage@id 0023                       ECANSendMessage@pb 0060  
          __size_of_sendEscapedUartData 006E                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 0032  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0082  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 4BD6  
                    __ECANPointBuffer@b 001C                           _doModeVerbose 01A0  
                               utoa@buf 0020       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0022               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 4012                                 strlen@s 0019  
                            _sequencyno 003E                              _timekeeper 00CB  
                             _RXM0EXIDM 0078CB                                 strspn@i 0023  
                            ??_strnicmp 0023                     __end_of_getCANFrame 5064  
                            findNodes@i 00B0                  __end_of_nibbleFromChar 4E3E  
                   __end_of_doModeSLCAN 1F40                             ?_fifo_write 0001  
                            fifo_init@f 0019           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0019                              fifo_read@i 0025  
                            fifo_read@p 0023                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 009E  
     sendVSCPDriverCommandReply@cmdCode 0028                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0019                 __end_of_ECANSendMessage 2FC8  
                  _uart_receiveOverruns 0118                _receivePrintEventVerbose 21E6  
                            _vscpNodeId 00DC                           ?__CANIDToRegs 0019  
                  __end_of__RegsToCANID 3428                             ?_readEEPROM 0019  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 032D                       doModeVerbose@preg 0304  
                        _init_crc8$2025 0019                  ??_readRegisterExtended 00A5  
                        ?_doModeVerbose 0001                          ?_sendVSCPFrame 0083  
                  __size_of_writeEEPROM 0026                          __end_of___wmul 4FF8  
                   __size_of_doModeVscp 0178                             _WriteTimer0 5152  
                        __end_of_memcpy 4DC0                          __end_of_memset 5090  
     __size_of_sendVSCPDriverErrorFrame 00BE               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                          __end_of_strcat 4B82  
                        __end_of_strchr 4A7A                          __end_of_strcpy 5036  
                        __end_of_strlen 4EF6                doModeVerbose@filter_type 030F  
                        __end_of_strtok 448C                          __end_of_strspn 4D3C  
                           __end_ofPL10 13B6                             __end_ofPL20 1B3A  
                           __end_ofPL12 1B04                             __end_ofPL30 13E4  
                           __end_ofPL22 379A                             __end_ofPL14 3364  
                           __end_ofPL40 1B54                             __end_ofPL32 3556  
                           __end_ofPL24 3888                             __end_ofPL16 13D0  
                           __end_ofPL50 1450                             __end_ofPL42 141E  
                           __end_ofPL34 13F6                             __end_ofPL26 3CDA  
                           __end_ofPL18 1B14                             __end_ofPL60 1B78  
                           __end_ofPL52 1B6A                             __end_ofPL44 1438  
                           __end_ofPL36 3436                             __end_ofPL28 3F52  
                           __end_ofPL70 1B8C                             __end_ofPL62 396E  
                           __end_ofPL54 3578                             __end_ofPL46 3CE4  
                           __end_ofPL38 1404                             __end_ofPL80 1F4C  
                           __end_ofPL72 345C                             __end_ofPL64 358C  
                           __end_ofPL56 1466                             __end_ofPL48 3566  
                           __end_ofPL90 2668                             __end_ofPL82 29D6  
                           __end_ofPL74 3470                             __end_ofPL66 369C  
                           __end_ofPL58 451C                             __end_ofPL92 4E00  
                           __end_ofPL84 1BA8                             __end_ofPL76 1B9E  
                           __end_ofPL68 344A                             __end_ofPL94 3596  
                           __end_ofPL86 5008                             __end_ofPL78 3482  
                           __end_ofPL96 1BB2                             __end_ofPL88 3110  
                   start_initialization 4AD6                               _ReadUSART 50F2  
                       findNodes@nFound 00AE                   doModeVerbose@reg_1116 0322  
                 doModeVerbose@filterno 0328                 _receiveVSCPModeCanalMsg 3A54  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 008F  
                          ??_OpenTimer0 0019  sendVSCPDriverCommandReply@cmdReplyCode 0029  
                             _Interrupt 0018                          ??__CANIDToRegs 0020  
            readRegisterExtended@nodeid 0031                               _OpenUSART 4A7A  
                   sendVSCPFrame@nodeid 0086                         ___llmod@divisor 002A  
                 __size_of_readRegister 00A8                         ___llmod@counter 002E  
                 ECANReceiveMessage@ptr 002A                     __size_of_fifo_write 00F8  
                 __size_of_init_app_ram 004E                          _findNodes$1410 00AC  
              __end_of__ECANPointBuffer 479A                       __CANIDToRegs@type 001F  
                            init_crc8@i 001E                              init_crc8@j 001B  
                           _getCANFrame 5036                                ??___wmul 001D  
                     ?_hexStringToBytes 001D                             _doModeSLCAN 1BB2  
            __end_of_ECANReceiveMessage 265A                                ??_memcpy 001F  
                   readRegister@timeout 009F                                ??_memset 001F  
                 sendVSCPDriverNack@crc 0028                doModeVerbose@mask_nodeid 0313  
                 __end_ofi1_WriteTimer0 5188                      ??_hexStringToBytes 0022  
                              ??_strcat 001D                                ??_strchr 001D  
                              ??_strcpy 001D                                ??_strlen 001B  
                    __end_of_OpenTimer0 50F2                                ??_strtok 0029  
                              ??_strspn 0023                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 033D                             __pbssCOMRAM 0033  
                            ?_ReadUSART 0001                ??_receivePrintEventCANAL 0031  
                         __pcstackBANK0 0060                           __pcstackBANK3 0300  
                   __end_of__stringdata 7FFE                ??_receivePrintEventSLCAN 006D  
                          _readRegister 4184                   __size_of_sendCANFrame 003A  
                          _isdigit$2838 001A             ?_sendVSCPDriverCommandReply 0028  
           sendVSCPDriverErrorFrame@crc 0029                        ?_ECANSendMessage 0023  
                     sendVSCPFrame@size 0088                            _init_app_ram 4BD6  
                            ?_Interrupt 0001                              ?_OpenUSART 0019  
                           sprintf@_val 0074                             sprintf@flag 0079  
                           sprintf@prec 0070                        _ledFunctionality 003C  
              doModeVerbose@nodeid_1114 030D                doModeVerbose@nodeid_1129 032F  
                          setFilter@val 0019                        ___lwdiv@dividend 0019  
                       ??_doModeVerbose 00B1           __size_of_ECANSetOperationMode 0018  
                       _printStatistics 29D6                            ??_WriteUSART 0019  
                       ??_sendVSCPFrame 008A                          _ECANInitialize 462A  
                     _sendVSCPDriverAck 40CE                           __pmediumconst 6FDC  
             receivePrintEventCANAL@dlc 0069               receivePrintEventCANAL@crc 006E  
                              ?___lldiv 0019                                ?_calcCRC 0025  
                              ?___llmod 0026                               _findNodes 396E  
                              ?___lwdiv 0019                                ?___lwmod 0019  
                             _fifo_init 4DC0                               _fifo_read 3E84  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 4EF6  
                     WriteTimer0@timer0 0019                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0083  
                   ??_sendVSCPDriverAck 0028                       __size_of_strnicmp 0062  
                       printGUID@nodeid 00A6                     _sendEscapedUartData 4882  
                             _hexpowers 7034                        ___lwdiv@quotient 001E  
                             _init_crc8 48F0                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0308                                ?_sprintf 0060  
                              ?_strichr 001A                             _cntRxFrames 010C  
                          ??_doModeVscp 0031                                ?_strcspn 001F  
                              ?_toupper 0001                                ?_stristr 0026  
                    __end_of_WriteUSART 5152                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                               _inputFifo 01C0  
                        ___wmul@product 001D                  sendVSCPFrame@vscpclass 0083  
                             _setFilter 2668                             strnicmp@len 0021  
                             _octpowers 6FDC                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 00B0                  __end_of_ECANInitialize 46AC  
             __end_of_sendVSCPDriverAck 4184                                _PIR1bits 000F9E  
                              _PIR2bits 000FA1                                i1u748_25 325A  
                              i1u749_25 326A                        ECANSendMessage@i 0079  
                      ECANSendMessage@j 0074                    ?_sendEscapedUartData 0025  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0029                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 0027  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3596                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00AB  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 2B5E  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 4810                              ?_fifo_init 0019  
                            ?_fifo_read 0019                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 2E56                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 3542                               _putsUSART 4B82  
                           __stringdata 7054                       ___wmul@multiplier 0019  
             receivePrintEventSLCAN@dlc 0070                            __RegsToCANID 3364  
                             _vscpClass 00DA                 ??_writeRegisterExtended 00A5  
                          ??_fifo_write 0008                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 007B                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0061                           ??_printBinary 001A  
       __size_of_receivePrintEventCANAL 013A                        doModeVerbose@reg 032E  
                         ??_printErrors 0032                              ?_init_crc8 0001  
       __size_of_receivePrintEventSLCAN 0184                               _rwtimeout 00D9  
             writeRegisterExtended@page 009E                             ??_Interrupt 0011  
               __end_of_printStatistics 2B5E                             ??_OpenUSART 001B  
          writeRegisterExtended@timeout 00A1                            ??_readEEPROM 001B  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0019  
                       OpenUSART@config 001B                          findNodes@value 00AF  
          __end_of_vscp_restoreDefaults 5190                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0082         __end_of_receiveVSCPModeCanalMsg 3B32  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 0024                   ??_sendEscapedUartData 0027  
                              __Lrparam 0000                        __CANIDToRegs@val 001B  
                    __end_of_fifo_write 3336                        __CANIDToRegs@ptr 0019  
           receiveVSCPModeCanalMsg@data 0097                              ?_printGUID 0001  
                           doModeVscp@c 0031                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0019  
                      ??_nibbleFromChar 0019                        __size_of___lldiv 0076  
                      __size_of_calcCRC 0038                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                      getCANFrame@flags 0030                            ?_WriteTimer0 0019  
                      getCANFrame@pdata 002D                              ?_putsUSART 001A  
                       fifo_read@nbytes 001D                              sprintf@idx 0068  
                    __end_of_readEEPROM 5176                   hexStringToBytes@inhex 0020  
                              calcCRC@j 0028                                calcCRC@p 0025  
                            strcat@from 001B                        __size_of_isdigit 001E  
                       ___lwdiv@divisor 001B                         ___lwdiv@counter 001D  
                              __ptext10 3A54                                __ptext11 4D80  
                              __ptext20 2668                                __ptext12 40CE  
                              __ptext21 3B32                                __ptext13 3C0C  
                              __ptext30 4184                                __ptext22 4C6E  
                              __ptext14 4F30                                __ptext31 4012  
                              __ptext23 3CE4                                __ptext15 2FC8  
                              __ptext40 43FA                                __ptext32 4EF6  
                              __ptext24 5008                                __ptext16 4882  
                              __ptext41 4CB4                                __ptext33 2E56  
                              __ptext25 396E                                __ptext17 4FA0  
                              __ptext50 45A6                                __ptext42 4CF8  
                              __ptext34 3482                                __ptext26 4366  
                              __ptext18 48F0                                __ptext51 5036  
                              __ptext43 4A1E                                __ptext35 5064  
                              __ptext27 3596                                __ptext19 01A0  
                              __ptext60 3E84                                __ptext52 245C  
                              __ptext44 46AC                                __ptext36 2B5E  
                              __ptext28 3DB4                                __ptext61 448C  
                              __ptext53 3364                                __ptext45 4E3E  
                              __ptext37 1F4C                                __ptext29 4B2C  
                              __ptext70 462A                                __ptext62 4F68  
                              __ptext54 4724                                __ptext46 495A  
                              __ptext38 29D6                                __ptext71 5110  
                              __ptext63 422C                                __ptext55 1466  
                              __ptext47 5128                                __ptext39 369C  
                              __ptext80 4DC0                                __ptext72 50D4  
                              __ptext64 4E7C                                __ptext56 4FD6  
                              __ptext48 4EBA                                __ptext73 4A7A  
                              __ptext65 4C24                                __ptext57 49BC  
                              __ptext49 21E6                                __ptext82 5176  
                              __ptext74 5152                                __ptext66 4810  
                              __ptext58 479A                                __ptext83 323E  
                              __ptext75 5188                                __ptext67 4B82  
                              __ptext59 50B6                                __ptext84 50F2  
                              __ptext76 451C                                __ptext68 513E  
                              __ptext77 5090                                __ptext69 4D3C  
                              __ptext78 4BD6                                __ptext79 5164  
                        printMDF@nodeid 00A6                           ?_getVSCPFrame 0060  
                            strichr@chr 001C                        __size_of_sprintf 0680  
                            strichr@ptr 001A                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 001B  
                        printGUID@value 00AA                     __end_of_printBinary 4CB4  
                         __size_of_crc8 0036                           __size_of_atoi 00F0  
                         __size_of_main 012E                           __size_of_init 0044  
                         __size_of_itoa 0038                     __end_of_printErrors 21E6  
                         __size_of_utoa 00A0                              strnicmp@s1 001D  
                            strnicmp@s2 001F                             _inputBuffer 033D  
            __size_of_sendVSCPDriverAck 00B6                  _receivePrintEventCANAL 2FC8  
                         ??_writeEEPROM 001C                _printNodeFirmwareVersion 3DB4  
                   ECANSendMessage@data 0027                ECANSendMessage@tempBSEL0 0075  
                              _printMDF 4366                               printMDF@i 00AA  
                _receivePrintEventSLCAN 2844                               printMDF@p 00A8  
                          ?_getCANFrame 002C                     ECANSendMessage@mode 0072  
                   ECANSendMessage@temp 0078                       ?__ECANPointBuffer 0019  
                              atoi@sign 0023                             ??_findNodes 0032  
                          ?_doModeSLCAN 0001                             ??_fifo_init 001F  
                           ??_fifo_read 001F                                _vscpData 0040  
         __size_of_readRegisterExtended 00D0                                main@argc 00C5  
                              main@argv 00C7                                _vscpSize 00DE  
                    ??__ECANPointBuffer 001C                                _vscpType 00DF  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 0028  
                       doModeVerbose@id 0300                         doModeVerbose@rv 0320  
                              _strnicmp 495A                        init_app_eeprom@i 001C  
           writeRegisterExtended@nodeid 0031                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0019                     ECANReceiveMessage@i 0027  
                              memcpy@d1 0019                                memcpy@s1 001B  
             receivePrintEventVerbose@i 008C                                itoa@base 002D  
                              isdigit@c 001B                      _ECANReceiveMessage 245C  
                              memset@p1 0019                             ??_init_crc8 0019  
                             ultoa@base 0066                          ??_getVSCPFrame 0065  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 002C  
                              intlevel1 0000                               sprintf@ap 006F  
                             sprintf@sp 0060                    hexStringToBytes@size 001F  
                             strchr@chr 001B                        ?_printStatistics 0001  
                      ___lwmod@dividend 0019                               strchr@ptr 0019  
                   ?_ECANReceiveMessage 0020                        ___lldiv@dividend 0019  
                           ??_setFilter 001D                           printMDF@value 00A7  
                             strcspn@s1 001F                               strcspn@s2 0021  
               ECANSendMessage@msgFlags 002A                              _OSCCONbits 000FD3  
                             strnicmp@r 0025                               stristr@s1 0026  
                             stristr@s2 0028                      ECANSendMessage@ptr 007A  
                     ??_init_app_eeprom 001C              receivePrintEventCANAL@data 0060  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 0032  
                        readEEPROM@data 001B                             ??_printHelp 001E  
                           ??_printMode 001E                _sendVSCPDriverErrorFrame 3C0C  
                ECANSendMessage@dataLen 0029                     __end_of_writeEEPROM 50B6  
                   __ECANPointBuffer@pt 001D                    ??_ECANReceiveMessage 0024  
                           ??_putsUSART 001C                                utoa@base 0024  
                              ultoa@buf 0060                                ultoa@val 0062  
                         fifo_init@size 001D                                sprintf@c 0078  
                              sprintf@f 0062                     hexStringToBytes@buf 001D  
                              strcat@cp 001D                     hexStringToBytes@len 0025  
                        _doModeVscpNode 5190                                strcat@to 0019  
      __end_of_receivePrintEventVerbose 245C                  ECANSendMessage@buffers 0073  
                      ___lldiv@quotient 0022                         ___lwmod@divisor 001B  
          __end_of_ECANSetOperationMode 5128                    _vscp_restoreDefaults 5188  
                          printGUID@buf 00A7                                strcpy@cp 001D  
                              strlen@cp 001B                                strcpy@to 0019  
                       ___lwmod@counter 001D                                strcspn@i 0023  
                              toupper@c 0019                             _printBinary 4C6E  
                              strtok@s1 0025                                strtok@s2 0027  
                              strspn@s1 001F                                strspn@s2 0021  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0037  
                ECANSendMessage@tempPtr 0076                             _printErrors 1F4C  
                          fifo_init@buf 001B                            fifo_read@buf 001B  
         sendVSCPDriverCommandReply@crc 002A                            __CANIDToRegs 3482  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0039  
             readRegisterExtended@value 00A3                __size_of_ECANSendMessage 0172  
